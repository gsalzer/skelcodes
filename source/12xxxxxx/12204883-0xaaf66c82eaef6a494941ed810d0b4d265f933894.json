{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/shengdading/git/BTC-Plus/contracts/governance/GaugeController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\nimport \\\"../interfaces/IPlus.sol\\\";\\nimport \\\"../interfaces/IGauge.sol\\\";\\nimport \\\"../interfaces/IGaugeController.sol\\\";\\n\\n/**\\n * @title Controller for all liquidity gauges.\\n *\\n * The Gauge Controller is responsible for the following:\\n * 1) AC emission rate computation for plus gauges;\\n * 2) AC reward claiming;\\n * 3) Liquidity gauge withdraw fee processing.\\n *\\n * Liquidity gauges can be divided into two categories:\\n * 1) Plus gauge: Liquidity gauges for plus tokens, the total rate is dependent on the total staked amount in these gauges;\\n * 2) Non-plus gage: Liquidity gauges for non-plus token, the rate is set by governance.\\n */\\ncontract GaugeController is Initializable, IGaugeController {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using SafeMathUpgradeable for uint256;\\n\\n    event GovernanceUpdated(address indexed oldGovernance, address indexed newGovernance);\\n    event ClaimerUpdated(address indexed claimer, bool allowed);\\n    event BasePlusRateUpdated(uint256 oldBaseRate, uint256 newBaseRate);\\n    event TreasuryUpdated(address indexed oldTreasury, address indexed newTreasury);\\n    event GaugeAdded(address indexed gauge, bool plus, uint256 gaugeWeight, uint256 gaugeRate);\\n    event GaugeRemoved(address indexed gauge);\\n    event GaugeUpdated(address indexed gauge, uint256 oldWeight, uint256 newWeight, uint256 oldGaugeRate, uint256 newGaugeRate);\\n    event Checkpointed(uint256 oldRate, uint256 newRate, uint256 totalSupply, uint256 ratePerToken, address[] gauges, uint256[] guageRates);\\n    event RewardClaimed(address indexed gauge, address indexed user, address indexed receiver, uint256 amount);\\n    event FeeProcessed(address indexed gauge, address indexed token, uint256 amount);\\n\\n    uint256 constant WAD = 10 ** 18;\\n    uint256 constant LOG_10_2 = 301029995663981195;  // log10(2) = 0.301029995663981195\\n    uint256 constant DAY = 86400;\\n    uint256 constant PLUS_BOOST_THRESHOLD = 100 * WAD;   // Plus boosting starts at 100 plus staked!\\n\\n    address public override governance;\\n    // AC token\\n    address public override reward;\\n    // Address => Whether this is claimer address.\\n    // A claimer can help claim reward on behalf of the user.\\n    mapping(address => bool) public override claimers;\\n    address public override treasury;\\n\\n    struct Gauge {\\n        // Helps to check whether the gauge is in the gauges list.\\n        bool isSupported;\\n        // Whether this is a plus gauge. The emission rate for the plus gauges depends on\\n        // the total staked value in the plus gauges, while the emission rate for the non-plus\\n        // gauges is set by the governance.\\n        bool isPlus;\\n        // Multiplier applied to the gauge in computing emission rate. Only applied to plus\\n        // gauges as non-plus gauges should have fixed rate set by governance.\\n        uint256 weight;\\n        // Fixed AC emission rate for non-plus gauges.\\n        uint256 rate;\\n    }\\n\\n    // List of supported liquidity gauges\\n    address[] public gauges;\\n    // Liquidity gauge address => Liquidity gauge data\\n    mapping(address => Gauge) public gaugeData;\\n    // Liquidity gauge address => Actual AC emission rate\\n    // For non-plus gauges, it is equal to gaugeData.rate when staked amount is non-zero and zero otherwise.\\n    mapping(address => uint256) public override gaugeRates;\\n\\n    // Base AC emission rate for plus gauges. It's equal to the emission rate when there is no plus boosting,\\n    // i.e. total plus staked <= PLUS_BOOST_THRESHOLD\\n    uint256 public basePlusRate;\\n    // Boost for all plus gauges. 1 when there is no plus boosting, i.e.total plus staked <= PLUS_BOOST_THRESHOLD\\n    uint256 public plusBoost;\\n    // Global AC emission rate, including both plus and non-plus gauge.\\n    uint256 public totalRate;\\n    // Last time the checkpoint is called\\n    uint256 public lastCheckpoint;\\n    // Total amount of AC rewarded until the latest checkpoint\\n    uint256 public lastTotalReward;\\n    // Total amount of AC claimed so far. totalReward - totalClaimed is the minimum AC balance that should be kept.\\n    uint256 public totalClaimed;\\n    // Mapping: Gauge address => Mapping: User address => Total claimed amount for this user in this gauge\\n    mapping(address => mapping(address => uint256)) public override claimed;\\n    // Mapping: User address => Timestamp of the last claim\\n    mapping(address => uint256) public override lastClaim;\\n\\n    /**\\n     * @dev Initializes the gauge controller.\\n     * @param _reward AC token address.\\n     * @param _plusRewardPerDay Amount of AC rewarded per day for plus gauges if there is no plus boost.\\n     */\\n    function initialize(address _reward, uint256 _plusRewardPerDay) public initializer {        \\n        governance = msg.sender;\\n        treasury = msg.sender;\\n        reward = _reward;\\n        // Base rate is in WAD\\n        basePlusRate = _plusRewardPerDay.mul(WAD).div(DAY);\\n        plusBoost = WAD;\\n        lastCheckpoint = block.timestamp;\\n    }\\n\\n    /**\\n     * @dev Computes log2(num). Result in WAD.\\n     * Credit: https://medium.com/coinmonks/math-in-solidity-part-5-exponent-and-logarithm-9aef8515136e\\n     */\\n    function _log2(uint256 num) internal pure returns (uint256) {\\n        uint256 msb = 0;\\n        uint256 xc = num;\\n        if (xc >= 0x100000000000000000000000000000000) { xc >>= 128; msb += 128; }    // 2**128\\n        if (xc >= 0x10000000000000000) { xc >>= 64; msb += 64; }\\n        if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\\n        if (xc >= 0x10000) { xc >>= 16; msb += 16; }\\n        if (xc >= 0x100) { xc >>= 8; msb += 8; }\\n        if (xc >= 0x10) { xc >>= 4; msb += 4; }\\n        if (xc >= 0x4) { xc >>= 2; msb += 2; }\\n        if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\\n    \\n        uint256 lsb = 0;\\n        uint256 ux = num << uint256 (127 - msb);\\n        for (uint256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\\n          ux *= ux;\\n          uint256 b = ux >> 255;\\n          ux >>= 127 + b;\\n          lsb += bit * b;\\n        }\\n    \\n        return msb * 10**18 + (lsb * 10**18 >> 64);\\n    }\\n\\n    /**\\n     * @dev Computes log10(num). Result in WAD.\\n     * Credit: https://medium.com/coinmonks/math-in-solidity-part-5-exponent-and-logarithm-9aef8515136e\\n     */\\n    function _log10(uint256 num) internal pure returns (uint256) {\\n        return _log2(num).mul(LOG_10_2).div(WAD);\\n    }\\n\\n    /**\\n     * @dev Most important function of the gauge controller. Recompute total AC emission rate\\n     * as well as AC emission rate per liquidity guage.\\n     * Anyone can call this function so that if the liquidity gauge is exploited by users with short-term\\n     * large amount of minting, others can restore to the correct mining paramters.\\n     */\\n    function checkpoint() public {\\n        // Loads the gauge list for better performance\\n        address[] memory _gauges = gauges;\\n        // The total amount of plus tokens staked\\n        uint256 _totalPlus = 0;\\n        // The total weighted amount of plus tokens staked\\n        uint256 _totalWeightedPlus = 0;\\n        // Amount of plus token staked in each gauge\\n        uint256[] memory _gaugePlus = new uint256[](_gauges.length);\\n        // Weighted amount of plus token staked in each gauge\\n        uint256[] memory _gaugeWeightedPlus = new uint256[](_gauges.length);\\n        uint256 _plusBoost = WAD;\\n\\n        for (uint256 i = 0; i < _gauges.length; i++) {\\n            // Don't count if it's non-plus gauge\\n            if (!gaugeData[_gauges[i]].isPlus) continue;\\n\\n            // Liquidity gauge token and staked token is 1:1\\n            // Total plus is used to compute boost\\n            address _staked = IGauge(_gauges[i]).token();\\n            // Rebase once to get an accurate result\\n            IPlus(_staked).rebase();\\n            _gaugePlus[i] = IGauge(_gauges[i]).totalStaked();\\n            _totalPlus = _totalPlus.add(_gaugePlus[i]);\\n\\n            // Weighted plus is used to compute rate allocation\\n            _gaugeWeightedPlus[i] = _gaugePlus[i].mul(gaugeData[_gauges[i]].weight);\\n            _totalWeightedPlus = _totalWeightedPlus.add(_gaugeWeightedPlus[i]);\\n        }\\n\\n        // Computes the AC emission per plus. The AC emission rate is determined by total weighted plus staked.\\n        uint256 _ratePerPlus = 0;\\n        // Total AC emission rate for plus gauges is zero if the weighted total plus staked is zero!\\n        if (_totalWeightedPlus > 0) {\\n            // Plus boost is applied when more than 100 plus are staked\\n            if (_totalPlus > PLUS_BOOST_THRESHOLD) {\\n                // rate = baseRate * (log total - 1)\\n                // Minus 19 since the TVL is in WAD, so -1 - 18 = -19\\n                _plusBoost = _log10(_totalPlus) - 19 * WAD;\\n            }\\n\\n            // Both plus boot and total weighted plus are in WAD so it cancels out\\n            // Therefore, _ratePerPlus is still in WAD\\n            _ratePerPlus = basePlusRate.mul(_plusBoost).div(_totalWeightedPlus);\\n        }\\n\\n        // Allocates AC emission rates for each liquidity gauge\\n        uint256 _oldTotalRate = totalRate;\\n        uint256 _totalRate;\\n        uint256[] memory _gaugeRates = new uint256[](_gauges.length);\\n        for (uint256 i = 0; i < _gauges.length; i++) {\\n            if (gaugeData[_gauges[i]].isPlus) {\\n                // gauge weighted plus is in WAD\\n                // _ratePerPlus is also in WAD\\n                // so block.timestamp gauge rate is in WAD\\n                _gaugeRates[i] = _gaugeWeightedPlus[i].mul(_ratePerPlus).div(WAD);\\n            } else {\\n                // AC emission rate for non-plus gauge is fixed and set by the governance.\\n                // However, if no token is staked, the gauge rate is zero.\\n                _gaugeRates[i] = IERC20Upgradeable(_gauges[i]).totalSupply() == 0 ? 0 : gaugeData[_gauges[i]].rate;\\n            }\\n            gaugeRates[_gauges[i]] = _gaugeRates[i];\\n            _totalRate = _totalRate.add(_gaugeRates[i]);\\n        }\\n\\n        // Checkpoints gauge controller\\n        lastTotalReward = lastTotalReward.add(_oldTotalRate.mul(block.timestamp.sub(lastCheckpoint)).div(WAD));\\n        lastCheckpoint = block.timestamp;\\n        totalRate = _totalRate;\\n        plusBoost = _plusBoost;\\n\\n        // Checkpoints each gauge to consume the latest rate\\n        // We trigger gauge checkpoint after all parameters are updated\\n        for (uint256 i = 0; i < _gauges.length; i++) {\\n            IGauge(_gauges[i]).checkpoint();\\n        }\\n\\n        emit Checkpointed(_oldTotalRate, _totalRate, _totalPlus, _ratePerPlus, _gauges, _gaugeRates);\\n    }\\n\\n    /**\\n     * @dev Claims rewards for a user. Only the liquidity gauge can call this function.\\n     * @param _account Address of the user to claim reward.\\n     * @param _receiver Address that receives the claimed reward\\n     * @param _amount Amount of AC to claim\\n     */\\n    function claim(address _account, address _receiver, uint256 _amount) external override {\\n        require(gaugeData[msg.sender].isSupported, \\\"not gauge\\\");\\n\\n        totalClaimed = totalClaimed.add(_amount);\\n        claimed[msg.sender][_account] = claimed[msg.sender][_account].add(_amount);\\n        lastClaim[msg.sender] = block.timestamp;\\n        IERC20Upgradeable(reward).safeTransfer(_receiver, _amount);\\n\\n        emit RewardClaimed(msg.sender, _account, _receiver, _amount);\\n    }\\n\\n    /**\\n     * @dev Return the total amount of rewards generated so far.\\n     */\\n    function totalReward() public view returns (uint256) {\\n        return lastTotalReward.add(totalRate.mul(block.timestamp.sub(lastCheckpoint)).div(WAD));\\n    }\\n\\n    /**\\n     * @dev Returns the total amount of rewards that can be claimed by user until block.timestamp.\\n     * It can be seen as minimum amount of reward tokens should be buffered in the gauge controller.\\n     */\\n    function claimable() external view returns (uint256) {\\n        return totalReward().sub(totalClaimed);\\n    }\\n\\n    /**\\n     * @dev Returns the total number of gauges.\\n     */\\n    function gaugeSize() public view returns (uint256) {\\n        return gauges.length;\\n    }\\n\\n    /**\\n     * @dev Donate the gauge fee. Only liqudity gauge can call this function.\\n     * @param _token Address of the donated token.\\n     */\\n    function donate(address _token) external override {\\n        require(gaugeData[msg.sender].isSupported, \\\"not gauge\\\");\\n\\n        uint256 _balance = IERC20Upgradeable(_token).balanceOf(address(this));\\n        if (_balance == 0)  return;\\n        address _staked = IGauge(msg.sender).token();\\n\\n        if (gaugeData[msg.sender].isPlus && _token == _staked) {\\n            // If this is a plus gauge and the donated token is the gauge staked token,\\n            // then the gauge is donating the plus token!\\n            // For plus token, donate it to all holders\\n            IPlus(_token).donate(_balance);\\n        } else {\\n            // Otherwise, send to treasury for future process\\n            IERC20Upgradeable(_token).safeTransfer(treasury, _balance);\\n        }\\n    }\\n\\n    /*********************************************\\n     *\\n     *    Governance methods\\n     *\\n     **********************************************/\\n    \\n    function _checkGovernance() internal view {\\n        require(msg.sender == governance, \\\"not governance\\\");\\n    }\\n\\n    modifier onlyGovernance() {\\n        _checkGovernance();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Updates governance. Only governance can update governance.\\n     */\\n    function setGovernance(address _governance) external onlyGovernance {\\n        address _oldGovernance = governance;\\n        governance = _governance;\\n        emit GovernanceUpdated(_oldGovernance, _governance);\\n    }\\n\\n    /**\\n     * @dev Updates claimer. Only governance can update claimers.\\n     */\\n    function setClaimer(address _account, bool _allowed) external onlyGovernance {\\n        claimers[_account] = _allowed;\\n        emit ClaimerUpdated(_account, _allowed);\\n    }\\n\\n    /**\\n     * @dev Updates the AC emission base rate for plus gauges. Only governance can update the base rate.\\n     */\\n    function setPlusReward(uint256 _plusRewardPerDay) external onlyGovernance {\\n        uint256 _oldRate = basePlusRate;\\n        // Base rate is in WAD\\n        basePlusRate = _plusRewardPerDay.mul(WAD).div(DAY);\\n        // Need to checkpoint with the base rate update!\\n        checkpoint();\\n\\n        emit BasePlusRateUpdated(_oldRate, basePlusRate);\\n    }\\n\\n    /**\\n     * @dev Updates the treasury.\\n     */\\n    function setTreasury(address _treasury) external onlyGovernance {\\n        require(_treasury != address(0x0), \\\"treasury not set\\\");\\n        address _oldTreasury = treasury;\\n        treasury = _treasury;\\n\\n        emit TreasuryUpdated(_oldTreasury, _treasury);\\n    }\\n\\n    /**\\n     * @dev Adds a new liquidity gauge to the gauge controller. Only governance can add new gauge.\\n     * @param _gauge The new liquidity gauge to add.\\n     * @param _plus Whether it's a plus gauge.\\n     * @param _weight Weight of the liquidity gauge. Useful for plus gauges only.\\n     * @param _rewardPerDay AC reward for the gauge per day. Useful for non-plus gauges only.\\n     */\\n    function addGauge(address _gauge, bool _plus, uint256 _weight, uint256 _rewardPerDay) external onlyGovernance {\\n        require(_gauge != address(0x0), \\\"gauge not set\\\");\\n        require(!gaugeData[_gauge].isSupported, \\\"gauge exist\\\");\\n\\n        uint256 _rate = _rewardPerDay.mul(WAD).div(DAY);\\n        gauges.push(_gauge);\\n        gaugeData[_gauge] = Gauge({\\n            isSupported: true,\\n            isPlus: _plus,\\n            weight: _weight,\\n            // Reward rate is in WAD\\n            rate: _rate\\n        });\\n\\n        // Need to checkpoint with the new token!\\n        checkpoint();\\n\\n        emit GaugeAdded(_gauge, _plus, _weight, _rate);\\n    }\\n\\n    /**\\n     * @dev Removes a liquidity gauge from gauge controller. Only governance can remove a plus token.\\n     * @param _gauge The liquidity gauge to remove from gauge controller.\\n     */\\n    function removeGauge(address _gauge) external onlyGovernance {\\n        require(_gauge != address(0x0), \\\"gauge not set\\\");\\n        require(gaugeData[_gauge].isSupported, \\\"gauge not exist\\\");\\n\\n        uint256 _gaugeSize = gauges.length;\\n        uint256 _gaugeIndex = _gaugeSize;\\n        for (uint256 i = 0; i < _gaugeSize; i++) {\\n            if (gauges[i] == _gauge) {\\n                _gaugeIndex = i;\\n                break;\\n            }\\n        }\\n        // We must have found the gauge!\\n        assert(_gaugeIndex < _gaugeSize);\\n\\n        gauges[_gaugeIndex] = gauges[_gaugeSize - 1];\\n        gauges.pop();\\n        delete gaugeData[_gauge];\\n\\n        // Need to checkpoint with the token removed!\\n        checkpoint();\\n\\n        emit GaugeRemoved(_gauge);\\n    }\\n\\n    /**\\n     * @dev Updates the weight of the liquidity gauge.\\n     * @param _gauge Address of the liquidity gauge to update.\\n     * @param _weight New weight of the liquidity gauge.\\n     * @param _rewardPerDay AC reward for the gauge per day\\n     */\\n    function updateGauge(address _gauge, uint256 _weight, uint256 _rewardPerDay) external onlyGovernance {\\n        require(gaugeData[_gauge].isSupported, \\\"gauge not exist\\\");\\n\\n        uint256 _oldWeight = gaugeData[_gauge].weight;\\n        uint256 _oldRate = gaugeData[_gauge].rate;\\n\\n        uint256 _rate = _rewardPerDay.mul(WAD).div(DAY);\\n        gaugeData[_gauge].weight = _weight;\\n        gaugeData[_gauge].rate = _rate;\\n\\n        // Need to checkpoint with the token removed!\\n        checkpoint();\\n\\n        emit GaugeUpdated(_gauge, _oldWeight, _weight, _oldRate, _rate);\\n    }\\n\\n    /**\\n     * @dev Used to salvage any ETH deposited to gauge controller by mistake. Only governance can salvage ETH.\\n     * The salvaged ETH is transferred to treasury for futher operation.\\n     */\\n    function salvage() external onlyGovernance {\\n        uint256 _amount = address(this).balance;\\n        address payable _target = payable(treasury);\\n        (bool success, ) = _target.call{value: _amount}(new bytes(0));\\n        require(success, 'ETH salvage failed');\\n    }\\n\\n    /**\\n     * @dev Used to salvage any token deposited to gauge controller by mistake. Only governance can salvage token.\\n     * The salvaged token is transferred to treasury for futhuer operation.\\n     * Note: The gauge controller is not expected to hold any token, so any token is salvageable!\\n     * @param _token Address of the token to salvage.\\n     */\\n    function salvageToken(address _token) external onlyGovernance {\\n        IERC20Upgradeable _target = IERC20Upgradeable(_token);\\n        _target.safeTransfer(treasury, _target.balanceOf(address(this)));\\n    }\\n}\"\r\n    },\r\n    \"/Users/shengdading/git/BTC-Plus/contracts/interfaces/IGauge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @title Interface for liquidity gauge.\\n */\\ninterface IGauge is IERC20Upgradeable {\\n\\n    /**\\n     * @dev Returns the address of the staked token.\\n     */\\n    function token() external view returns (address);\\n\\n    /**\\n     * @dev Checkpoints the liquidity gauge.\\n     */\\n    function checkpoint() external;\\n\\n    /**\\n     * @dev Returns the total amount of token staked in the gauge.\\n     */\\n    function totalStaked() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of token staked by the user.\\n     */\\n    function userStaked(address _account) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of AC token that the user can claim.\\n     * @param _account Address of the account to check claimable reward.\\n     */\\n    function claimable(address _account) external view returns (uint256);\\n\\n    /**\\n     * @dev Claims reward for the user. It transfers the claimable reward to the user and updates user's liquidity limit.\\n     * Note: We allow anyone to claim other rewards on behalf of others, but not for the AC reward. This is because claiming AC\\n     * reward also updates the user's liquidity limit. Therefore, only authorized claimer can do that on behalf of user.\\n     * @param _account Address of the user to claim.\\n     * @param _receiver Address that receives the claimed reward\\n     * @param _claimRewards Whether to claim other rewards as well.\\n     */\\n    function claim(address _account, address _receiver, bool _claimRewards) external;\\n\\n    /**\\n     * @dev Checks whether an account can be kicked.\\n     * An account is kickable if the account has another voting event since last checkpoint,\\n     * or the lock of the account expires.\\n     */\\n    function kickable(address _account) external view returns (bool);\\n\\n    /**\\n     * @dev Kicks an account for abusing their boost. Only kick if the user\\n     * has another voting event, or their lock expires.\\n     */\\n    function kick(address _account) external;\\n}\"\r\n    },\r\n    \"/Users/shengdading/git/BTC-Plus/contracts/interfaces/IGaugeController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\n/**\\n * @title Interface for gauge controller.\\n */\\ninterface IGaugeController {\\n\\n    /**\\n     * @dev Returns the reward token address.\\n     */\\n    function reward() external view returns(address);\\n\\n    /**\\n     * @dev Returns the governance address.\\n     */\\n    function governance() external view returns (address);\\n\\n    /**\\n     * @dev Returns the treasury address.\\n     */\\n    function treasury() external view returns (address);\\n\\n    /**\\n     * @dev Returns the current AC emission rate for the gauge.\\n     * @param _gauge The liquidity gauge to check AC emission rate.\\n     */\\n    function gaugeRates(address _gauge) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns whether the account is a claimer which can claim rewards on behalf\\n     * of the user. Since user's liquidity limit is updated each time a user claims, we\\n     * don't want to allow anyone to claim for others.\\n     */\\n    function claimers(address _account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the total amount of AC claimed by the user in the liquidity pool specified.\\n     * @param _gauge Liquidity gauge which generates the AC reward.\\n     * @param _account Address of the user to check.\\n     */\\n    function claimed(address _gauge, address _account) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the last time the user claims from any gauge.\\n     * @param _account Address of the user to claim.\\n     */\\n    function lastClaim(address _account) external view returns (uint256);\\n\\n    /**\\n     * @dev Claims rewards for a user. Only the supported gauge can call this function.\\n     * @param _account Address of the user to claim reward.\\n     * @param _receiver Address that receives the claimed reward\\n     * @param _amount Amount of AC to claim\\n     */\\n    function claim(address _account, address _receiver, uint256 _amount) external;\\n\\n    /**\\n     * @dev Donate the gauge fee. Only liqudity gauge can call this function.\\n     * @param _token Address of the donated token.\\n     */\\n    function donate(address _token) external;\\n}\"\r\n    },\r\n    \"/Users/shengdading/git/BTC-Plus/contracts/interfaces/IPlus.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\n/**\\n * @title Interface for plus token.\\n * Plus token is a value pegged ERC20 token which provides global interest to all holders.\\n */\\ninterface IPlus {\\n    /**\\n     * @dev Returns the governance address.\\n     */\\n    function governance() external view returns (address);\\n\\n    /**\\n     * @dev Returns whether the account is a strategist.\\n     */\\n    function strategists(address _account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the treasury address.\\n     */\\n    function treasury() external view returns (address);\\n\\n    /**\\n     * @dev Accrues interest to increase index.\\n     */\\n    function rebase() external;\\n\\n    /**\\n     * @dev Returns the total value of the plus token in terms of the peg value.\\n     */\\n    function totalUnderlying() external view returns (uint256);\\n\\n    /**\\n     * @dev Allows anyone to donate their plus asset to all other holders.\\n     * @param _amount Amount of plus token to donate.\\n     */\\n    function donate(uint256 _amount) external;\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable {\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The defaut value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overloaded;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[sender] = senderBalance - amount;\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _balances[account] = accountBalance - amount;\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n    uint256[45] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldBaseRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBaseRate\",\"type\":\"uint256\"}],\"name\":\"BasePlusRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ratePerToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"gauges\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"guageRates\",\"type\":\"uint256[]\"}],\"name\":\"Checkpointed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"ClaimerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeeProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"plus\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gaugeWeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gaugeRate\",\"type\":\"uint256\"}],\"name\":\"GaugeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"}],\"name\":\"GaugeRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldWeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newWeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldGaugeRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newGaugeRate\",\"type\":\"uint256\"}],\"name\":\"GaugeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldGovernance\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernance\",\"type\":\"address\"}],\"name\":\"GovernanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldTreasury\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"TreasuryUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_plus\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerDay\",\"type\":\"uint256\"}],\"name\":\"addGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"basePlusRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"donate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"gaugeData\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSupported\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPlus\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"gaugeRates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gaugeSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gauges\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reward\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_plusRewardPerDay\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastCheckpoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTotalReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"plusBoost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"}],\"name\":\"removeGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reward\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"salvage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"salvageToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"setClaimer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_plusRewardPerDay\",\"type\":\"uint256\"}],\"name\":\"setPlusReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerDay\",\"type\":\"uint256\"}],\"name\":\"updateGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"GaugeController","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}