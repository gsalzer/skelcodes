{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIXED\r\n//  _____ _          _   _____            \r\n// |  __ (_)        | | |_   _|           \r\n// | |__) |__  _____| |   | |  _ __   ___ \r\n// |  ___/ \\ \\/ / _ \\ |   | | | '_ \\ / __|\r\n// | |   | |>  <  __/ |  _| |_| | | | (__ \r\n// |_|   |_/_/\\_\\___|_| |_____|_| |_|\\___| on Ethereum!\r\n//\r\n// Flung together by BoringCrypto during COVID-19 lockdown in 2021\r\n// Project started on Polygon for 2 weeks and this is the migrated to Ethereum version\r\n// The canvas starts where it left off on Polygon (as well as PIXEL balances and ambassador program info)\r\n// This version has a lot of gas optimizations vs the Polygon one\r\n\r\n// WARNING: No audits were done on this code...\r\n\r\n// Stay safe! \r\n\r\n// Get your alpha here https://bit.ly/3icxSru\r\n\r\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringMath.sol@v1.2.3\r\n// License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\n/// @notice A library for performing overflow-/underflow-safe math,\r\n/// updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math).\r\nlibrary BoringMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        require((c = a + b) >= b, \"BoringMath: Add Overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        require((c = a - b) <= a, \"BoringMath: Underflow\");\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        require(b == 0 || (c = a * b) / b == a, \"BoringMath: Mul Overflow\");\r\n    }\r\n\r\n    function to128(uint256 a) internal pure returns (uint128 c) {\r\n        require(a <= uint128(-1), \"BoringMath: uint128 Overflow\");\r\n        c = uint128(a);\r\n    }\r\n\r\n    function to64(uint256 a) internal pure returns (uint64 c) {\r\n        require(a <= uint64(-1), \"BoringMath: uint64 Overflow\");\r\n        c = uint64(a);\r\n    }\r\n\r\n    function to32(uint256 a) internal pure returns (uint32 c) {\r\n        require(a <= uint32(-1), \"BoringMath: uint32 Overflow\");\r\n        c = uint32(a);\r\n    }\r\n}\r\n\r\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint128.\r\nlibrary BoringMath128 {\r\n    function add(uint128 a, uint128 b) internal pure returns (uint128 c) {\r\n        require((c = a + b) >= b, \"BoringMath: Add Overflow\");\r\n    }\r\n\r\n    function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {\r\n        require((c = a - b) <= a, \"BoringMath: Underflow\");\r\n    }\r\n}\r\n\r\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint64.\r\nlibrary BoringMath64 {\r\n    function add(uint64 a, uint64 b) internal pure returns (uint64 c) {\r\n        require((c = a + b) >= b, \"BoringMath: Add Overflow\");\r\n    }\r\n\r\n    function sub(uint64 a, uint64 b) internal pure returns (uint64 c) {\r\n        require((c = a - b) <= a, \"BoringMath: Underflow\");\r\n    }\r\n}\r\n\r\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint32.\r\nlibrary BoringMath32 {\r\n    function add(uint32 a, uint32 b) internal pure returns (uint32 c) {\r\n        require((c = a + b) >= b, \"BoringMath: Add Overflow\");\r\n    }\r\n\r\n    function sub(uint32 a, uint32 b) internal pure returns (uint32 c) {\r\n        require((c = a - b) <= a, \"BoringMath: Underflow\");\r\n    }\r\n}\r\n\r\n// File @boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol@v1.2.3\r\n// License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /// @notice EIP 2612\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n}\r\n\r\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol@v1.2.3\r\n// License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\n// solhint-disable avoid-low-level-calls\r\n\r\nlibrary BoringERC20 {\r\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\r\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\r\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\r\n    bytes4 private constant SIG_BALANCE_OF = 0x70a08231; // balanceOf(address)\r\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\r\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\r\n\r\n    function returnDataToString(bytes memory data) internal pure returns (string memory) {\r\n        if (data.length >= 64) {\r\n            return abi.decode(data, (string));\r\n        } else if (data.length == 32) {\r\n            uint8 i = 0;\r\n            while(i < 32 && data[i] != 0) {\r\n                i++;\r\n            }\r\n            bytes memory bytesArray = new bytes(i);\r\n            for (i = 0; i < 32 && data[i] != 0; i++) {\r\n                bytesArray[i] = data[i];\r\n            }\r\n            return string(bytesArray);\r\n        } else {\r\n            return \"???\";\r\n        }\r\n    }\r\n\r\n    /// @notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\r\n    /// @param token The address of the ERC-20 token contract.\r\n    /// @return (string) Token symbol.\r\n    function safeSymbol(IERC20 token) internal view returns (string memory) {\r\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_SYMBOL));\r\n        return success ? returnDataToString(data) : \"???\";\r\n    }\r\n\r\n    /// @notice Provides a safe ERC20.name version which returns '???' as fallback string.\r\n    /// @param token The address of the ERC-20 token contract.\r\n    /// @return (string) Token name.\r\n    function safeName(IERC20 token) internal view returns (string memory) {\r\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_NAME));\r\n        return success ? returnDataToString(data) : \"???\";\r\n    }\r\n\r\n    /// @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\r\n    /// @param token The address of the ERC-20 token contract.\r\n    /// @return (uint8) Token decimals.\r\n    function safeDecimals(IERC20 token) internal view returns (uint8) {\r\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_DECIMALS));\r\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\r\n    }\r\n    \r\n    /// @notice Provides a gas-optimized balance check to avoid a redundant extcodesize check in addition to the returndatasize check.\r\n    /// @param token The address of the ERC-20 token.\r\n    /// @param to The address of the user to check.\r\n    /// @return amount The token amount.\r\n    function safeBalanceOf(IERC20 token, address to) internal view returns (uint256 amount) {\r\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_BALANCE_OF, to));\r\n        require(success && data.length >= 32, \"BoringERC20: BalanceOf failed\");\r\n        amount = abi.decode(data, (uint256));\r\n    } \r\n\r\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\r\n    /// Reverts on a failed transfer.\r\n    /// @param token The address of the ERC-20 token.\r\n    /// @param to Transfer tokens to.\r\n    /// @param amount The token amount.\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER, to, amount));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"BoringERC20: Transfer failed\");\r\n    }\r\n\r\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\r\n    /// Reverts on a failed transfer.\r\n    /// @param token The address of the ERC-20 token.\r\n    /// @param from Transfer tokens from.\r\n    /// @param to Transfer tokens to.\r\n    /// @param amount The token amount.\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"BoringERC20: TransferFrom failed\");\r\n    }\r\n}\r\n\r\n// File @boringcrypto/boring-solidity/contracts/BoringOwnable.sol@v1.2.3\r\n// License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\n// Audit on 5-Jan-2021 by Keno and BoringCrypto\r\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol + Claimable.sol\r\n// Edited by BoringCrypto\r\n\r\ncontract BoringOwnableData {\r\n    address public owner;\r\n    address public pendingOwner;\r\n}\r\n\r\ncontract BoringOwnable is BoringOwnableData {\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /// @notice `owner` defaults to msg.sender on construction.\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    /// @notice Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.\r\n    /// Can only be invoked by the current `owner`.\r\n    /// @param newOwner Address of the new owner.\r\n    /// @param direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\r\n    /// @param renounce Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\r\n    function transferOwnership(\r\n        address newOwner,\r\n        bool direct,\r\n        bool renounce\r\n    ) public onlyOwner {\r\n        if (direct) {\r\n            // Checks\r\n            require(newOwner != address(0) || renounce, \"Ownable: zero address\");\r\n\r\n            // Effects\r\n            emit OwnershipTransferred(owner, newOwner);\r\n            owner = newOwner;\r\n            pendingOwner = address(0);\r\n        } else {\r\n            // Effects\r\n            pendingOwner = newOwner;\r\n        }\r\n    }\r\n\r\n    /// @notice Needs to be called by `pendingOwner` to claim ownership.\r\n    function claimOwnership() public {\r\n        address _pendingOwner = pendingOwner;\r\n\r\n        // Checks\r\n        require(msg.sender == _pendingOwner, \"Ownable: caller != pending owner\");\r\n\r\n        // Effects\r\n        emit OwnershipTransferred(owner, _pendingOwner);\r\n        owner = _pendingOwner;\r\n        pendingOwner = address(0);\r\n    }\r\n\r\n    /// @notice Only allows the `owner` to execute the function.\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n}\r\n\r\n// File @boringcrypto/boring-solidity/contracts/Domain.sol@v1.2.3\r\n// License-Identifier: MIT\r\n// Based on code and smartness by Ross Campbell and Keno\r\n// Uses immutable to store the domain separator to reduce gas usage\r\n// If the chain id changes due to a fork, the forked chain will calculate on the fly.\r\npragma solidity 0.6.12;\r\n\r\n// solhint-disable no-inline-assembly\r\n\r\ncontract Domain {\r\n    bytes32 private constant DOMAIN_SEPARATOR_SIGNATURE_HASH = keccak256(\"EIP712Domain(uint256 chainId,address verifyingContract)\");\r\n    // See https://eips.ethereum.org/EIPS/eip-191\r\n    string private constant EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA = \"\\x19\\x01\";\r\n\r\n    // solhint-disable var-name-mixedcase\r\n    bytes32 private immutable _DOMAIN_SEPARATOR;\r\n    uint256 private immutable DOMAIN_SEPARATOR_CHAIN_ID;    \r\n\r\n    /// @dev Calculate the DOMAIN_SEPARATOR\r\n    function _calculateDomainSeparator(uint256 chainId) private view returns (bytes32) {\r\n        return keccak256(\r\n            abi.encode(\r\n                DOMAIN_SEPARATOR_SIGNATURE_HASH,\r\n                chainId,\r\n                address(this)\r\n            )\r\n        );\r\n    }\r\n\r\n    constructor() public {\r\n        uint256 chainId; assembly {chainId := chainid()}\r\n        _DOMAIN_SEPARATOR = _calculateDomainSeparator(DOMAIN_SEPARATOR_CHAIN_ID = chainId);\r\n    }\r\n\r\n    /// @dev Return the DOMAIN_SEPARATOR\r\n    // It's named internal to allow making it public from the contract that uses it by creating a simple view function\r\n    // with the desired public name, such as DOMAIN_SEPARATOR or domainSeparator.\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function _domainSeparator() internal view returns (bytes32) {\r\n        uint256 chainId; assembly {chainId := chainid()}\r\n        return chainId == DOMAIN_SEPARATOR_CHAIN_ID ? _DOMAIN_SEPARATOR : _calculateDomainSeparator(chainId);\r\n    }\r\n\r\n    function _getDigest(bytes32 dataHash) internal view returns (bytes32 digest) {\r\n        digest =\r\n            keccak256(\r\n                abi.encodePacked(\r\n                    EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA,\r\n                    _domainSeparator(),\r\n                    dataHash\r\n                )\r\n            );\r\n    }\r\n}\r\n\r\n// File @boringcrypto/boring-solidity/contracts/ERC20.sol@v1.2.3\r\n// License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\n\r\n// solhint-disable no-inline-assembly\r\n// solhint-disable not-rely-on-time\r\n\r\n// Data part taken out for building of contracts that receive delegate calls\r\ncontract ERC20Data {\r\n    /// @notice owner > balance mapping.\r\n    mapping(address => uint256) public balanceOf;\r\n    /// @notice owner > spender > allowance mapping.\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n    /// @notice owner > nonce mapping. Used in `permit`.\r\n    mapping(address => uint256) public nonces;\r\n}\r\n\r\nabstract contract ERC20 is IERC20, Domain {\r\n    /// @notice owner > balance mapping.\r\n    mapping(address => uint256) public override balanceOf;\r\n    /// @notice owner > spender > allowance mapping.\r\n    mapping(address => mapping(address => uint256)) public override allowance;\r\n    /// @notice owner > nonce mapping. Used in `permit`.\r\n    mapping(address => uint256) public nonces;\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    /// @notice Transfers `amount` tokens from `msg.sender` to `to`.\r\n    /// @param to The address to move the tokens.\r\n    /// @param amount of the tokens to move.\r\n    /// @return (bool) Returns True if succeeded.\r\n    function transfer(address to, uint256 amount) public returns (bool) {\r\n        // If `amount` is 0, or `msg.sender` is `to` nothing happens\r\n        if (amount != 0 || msg.sender == to) {\r\n            uint256 srcBalance = balanceOf[msg.sender];\r\n            require(srcBalance >= amount, \"ERC20: balance too low\");\r\n            if (msg.sender != to) {\r\n                require(to != address(0), \"ERC20: no zero address\"); // Moved down so low balance calls safe some gas\r\n\r\n                balanceOf[msg.sender] = srcBalance - amount; // Underflow is checked\r\n                balanceOf[to] += amount;\r\n            }\r\n        }\r\n        emit Transfer(msg.sender, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /// @notice Transfers `amount` tokens from `from` to `to`. Caller needs approval for `from`.\r\n    /// @param from Address to draw tokens from.\r\n    /// @param to The address to move the tokens.\r\n    /// @param amount The token amount to move.\r\n    /// @return (bool) Returns True if succeeded.\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public returns (bool) {\r\n        // If `amount` is 0, or `from` is `to` nothing happens\r\n        if (amount != 0) {\r\n            uint256 srcBalance = balanceOf[from];\r\n            require(srcBalance >= amount, \"ERC20: balance too low\");\r\n\r\n            if (from != to) {\r\n                uint256 spenderAllowance = allowance[from][msg.sender];\r\n                // If allowance is infinite, don't decrease it to save on gas (breaks with EIP-20).\r\n                if (spenderAllowance != type(uint256).max) {\r\n                    require(spenderAllowance >= amount, \"ERC20: allowance too low\");\r\n                    allowance[from][msg.sender] = spenderAllowance - amount; // Underflow is checked\r\n                }\r\n                require(to != address(0), \"ERC20: no zero address\"); // Moved down so other failed calls safe some gas\r\n\r\n                balanceOf[from] = srcBalance - amount; // Underflow is checked\r\n                balanceOf[to] += amount;\r\n            }\r\n        }\r\n        emit Transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /// @notice Approves `amount` from sender to be spend by `spender`.\r\n    /// @param spender Address of the party that can draw from msg.sender's account.\r\n    /// @param amount The maximum collective amount that `spender` can draw.\r\n    /// @return (bool) Returns True if approved.\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        allowance[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32) {\r\n        return _domainSeparator();\r\n    }\r\n\r\n    // keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\r\n    bytes32 private constant PERMIT_SIGNATURE_HASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\r\n\r\n    /// @notice Approves `value` from `owner_` to be spend by `spender`.\r\n    /// @param owner_ Address of the owner.\r\n    /// @param spender The address of the spender that gets approved to draw from `owner_`.\r\n    /// @param value The maximum collective amount that `spender` can draw.\r\n    /// @param deadline This permit must be redeemed before this deadline (UTC timestamp in seconds).\r\n    function permit(\r\n        address owner_,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external override {\r\n        require(owner_ != address(0), \"ERC20: Owner cannot be 0\");\r\n        require(block.timestamp < deadline, \"ERC20: Expired\");\r\n        require(\r\n            ecrecover(_getDigest(keccak256(abi.encode(PERMIT_SIGNATURE_HASH, owner_, spender, value, nonces[owner_]++, deadline))), v, r, s) ==\r\n                owner_,\r\n            \"ERC20: Invalid Signature\"\r\n        );\r\n        allowance[owner_][spender] = value;\r\n        emit Approval(owner_, spender, value);\r\n    }\r\n}\r\n\r\ncontract ERC20WithSupply is IERC20, ERC20 {\r\n    uint256 public override totalSupply;\r\n\r\n    function _mint(address user, uint256 amount) internal {\r\n        uint256 newTotalSupply = totalSupply + amount;\r\n        require(newTotalSupply >= totalSupply, \"Mint overflow\");\r\n        totalSupply = newTotalSupply;\r\n        balanceOf[user] += amount;\r\n        emit Transfer(address(0), user, amount);\r\n    }\r\n\r\n    function _burn(address user, uint256 amount) internal {\r\n        require(balanceOf[user] >= amount, \"Burn too much\");\r\n        totalSupply -= amount;\r\n        balanceOf[user] -= amount;\r\n        emit Transfer(user, address(0), amount);\r\n    }\r\n}\r\n\r\n// File contracts/Pixel.sol\r\n//License-Identifier: MIT\r\npragma solidity ^0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\n// solhint-disable avoid-low-level-calls\r\n\r\ncontract AddressList {\r\n    address[] public addresses;\r\n    function addressesCount() public view returns (uint256) { return addresses.length; }\r\n\r\n    constructor() public {\r\n        addresses.push(address(0));\r\n    }\r\n\r\n    function addAddresses(\r\n        address[] calldata addresses_\r\n    ) public {\r\n        for (uint256 i = 0; i < addresses_.length; i++) { addresses.push(addresses_[i]); }\r\n    }\r\n\r\n    function getAddresses() public view returns (address[] memory) { return addresses; }\r\n    function getAddressesRange(\r\n        uint256 start,\r\n        uint256 end\r\n    ) public view returns (address[] memory) {\r\n        address[] memory result = new address[](end - start);\r\n        for (uint256 i = start; i < (end == 0 ? addresses.length : end); i++)\r\n        {\r\n            result[i - start] = addresses[i];\r\n        }\r\n        return result; \r\n    }\r\n}\r\n\r\n// Simple Multi Level Marketing contract with 3 tiers\r\ncontract MLM is AddressList {\r\n    using BoringMath for uint256;\r\n\r\n    struct RepInfo {\r\n        uint32 upline;\r\n        uint32 earnings1;\r\n        uint32 earnings2;\r\n        uint32 earnings3;\r\n        uint16 tier1;\r\n        uint16 tier2;\r\n        uint16 tier3;\r\n    }\r\n    mapping (address => RepInfo) public mlm;\r\n\r\n    event MLMAddRep(address rep, address upline);\r\n    event MLMEarn(address rep, uint32 amount, uint8 lvl);\r\n\r\n    function _set(address rep, uint32 upline_, uint32 earnings1, uint32 earnings2, uint32 earnings3, uint16 tier1, uint16 tier2, uint16 tier3) internal {\r\n        mlm[rep] = RepInfo({\r\n            upline: upline_,\r\n            earnings1: earnings1,\r\n            earnings2: earnings2,\r\n            earnings3: earnings3,\r\n            tier1: tier1,\r\n            tier2: tier2,\r\n            tier3: tier3\r\n        });\r\n    }\r\n\r\n    function _mlm(address rep, uint32 upline_, uint32 earnings1, uint32 earnings2, uint32 earnings3) internal returns (address lvl1, address lvl2, address lvl3) {\r\n        RepInfo memory info = mlm[rep];\r\n        bool added;\r\n        if (info.upline == 0) {\r\n            if (upline_ != 0) {\r\n                lvl1 = addresses[upline_];\r\n                require(rep != lvl1, \"MLM: Can't refer yourself\");\r\n\r\n                if (lvl1 != address(0)) {\r\n                    info.upline = upline_;\r\n                    mlm[rep] = info;\r\n                    emit MLMAddRep(rep, lvl1);\r\n                    added = true;\r\n                }\r\n            }\r\n        } else {\r\n            lvl1 = addresses[info.upline];\r\n        }\r\n\r\n        if (lvl1 != address(0)) {\r\n            RepInfo memory info1 = mlm[lvl1];\r\n            if (added) {\r\n                info1.tier1++;\r\n                info1.tier2 += info.tier1;\r\n                info1.tier3 += info.tier2;\r\n            }\r\n            info1.earnings1 += earnings1;\r\n            emit MLMEarn(lvl1, earnings1, 1);\r\n            mlm[lvl1] = info1;\r\n            if (info1.upline != 0) {\r\n                lvl2 = addresses[info1.upline];\r\n                RepInfo memory info2 = mlm[lvl2];\r\n                if (added) {\r\n                    info2.tier2++;\r\n                    info2.tier3 += info.tier1;\r\n                }\r\n                info2.earnings2 += earnings2;\r\n                emit MLMEarn(lvl2, earnings2, 2);\r\n                mlm[lvl2] = info2;\r\n                if (info2.upline != 0) {\r\n                    lvl3 = addresses[info2.upline];\r\n                    RepInfo memory info3 = mlm[lvl3];\r\n                    if (added) {\r\n                        info3.tier3++;\r\n                    }\r\n                    info3.earnings3 += earnings3;\r\n                    emit MLMEarn(lvl3, earnings3, 3);\r\n                    mlm[lvl3] = info3;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract ReentrancyGuard {\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        require(_status != _ENTERED, 'ReentrancyGuard: reentrant call');\r\n        _status = _ENTERED;\r\n        _;\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\ncontract PixelV2 is ERC20WithSupply, BoringOwnable, MLM, ReentrancyGuard {\r\n    using BoringMath for uint256;\r\n    using BoringERC20 for IERC20;\r\n\r\n    event PixelBlockTransfer(address from, address to, uint256 pricePerPixel);\r\n\r\n    string public constant symbol = \"PIXEL\";\r\n    string public constant name = \"Pixel\";\r\n    uint8 public constant decimals = 18;\r\n    uint256 private constant START_BLOCK_PRICE = 5e15; // Price starts at 0.00005 ETH/pixel = 0.005 ETH/block\r\n    uint256 public START_TIMESTAMP;\r\n    uint256 public LOCK_TIMESTAMP;\r\n    \r\n    // Block info compressed into a single storage slot\r\n    struct Block {\r\n        uint32 owner; // current owner nr of the block\r\n        uint32 url; // Data nr for url\r\n        uint32 description; // Data nr for description\r\n        uint32 pixels; // Data nr for pixels\r\n        uint128 lastPrice; // last sale price - 0 = never sold\r\n    }\r\n\r\n    struct ExportBlock {\r\n        address owner; // current owner of the block\r\n        string url; // url for this block (should be < 256 characters)\r\n        string description; // description for this block (should be < 256 characters)\r\n        bytes pixels; // pixels as bytes\r\n        uint128 lastPrice; // last sale price - 0 = never sold\r\n        uint32 number;\r\n    }\r\n\r\n    struct ExportRawBlock {\r\n        uint32 owner; // current owner nr of the block\r\n        uint32 url; // Data nr for url\r\n        uint32 description; // Data nr for description\r\n        uint32 pixels; // Data nr for pixels\r\n        uint128 lastPrice; // last sale price - 0 = never sold\r\n        uint32 number;\r\n    }\r\n\r\n    // lookup tables\r\n    bytes[] public data;\r\n    string[] public text;\r\n\r\n    function dataCount() public view returns (uint256) { return data.length; }\r\n    function textCount() public view returns (uint256) { return text.length; }\r\n\r\n    // data is organized in blocks of 10x10. There are 100x100 blocks. Base is 0 and counting goes left to right, then top to bottom.\r\n    Block[10000] public blk;\r\n    uint256[] public updates;\r\n\r\n    constructor() public payable {\r\n        // Set data[0] to blank\r\n        text.push(\"\");\r\n        data.push(bytes(\"\"));\r\n    }\r\n\r\n    modifier onlyCreationPhase() {\r\n        require(block.timestamp >= START_TIMESTAMP && block.timestamp < LOCK_TIMESTAMP, \"Not in creation phase\");\r\n        _;\r\n    }\r\n\r\n    function getBlocks(uint256[] calldata blockNumbers) public view returns (ExportBlock[] memory blocks) {\r\n        blocks = new ExportBlock[](blockNumbers.length);\r\n        for (uint256 i = 0; i < blockNumbers.length; i++) {\r\n            Block memory _blk = blk[blockNumbers[i]];\r\n            blocks[i].number = blockNumbers[i].to32();\r\n            blocks[i].owner = addresses[_blk.owner];\r\n            blocks[i].url = text[_blk.url];\r\n            blocks[i].description = text[_blk.description];\r\n            blocks[i].pixels = data[_blk.pixels];\r\n            blocks[i].lastPrice = _blk.lastPrice;\r\n        }\r\n    }\r\n\r\n    function getRawBlocks(uint256[] calldata blockNumbers) public view returns (ExportRawBlock[] memory blocks) {\r\n        blocks = new ExportRawBlock[](blockNumbers.length);\r\n        for (uint256 i = 0; i < blockNumbers.length; i++) {\r\n            Block memory _blk = blk[blockNumbers[i]];\r\n            blocks[i].number = blockNumbers[i].to32();\r\n            blocks[i].owner = _blk.owner;\r\n            blocks[i].url = _blk.url;\r\n            blocks[i].description = _blk.description;\r\n            blocks[i].pixels = _blk.pixels;\r\n            blocks[i].lastPrice = _blk.lastPrice;\r\n        }\r\n    }\r\n\r\n    function updatesCount() public view returns (uint256) {\r\n        return updates.length;\r\n    }\r\n\r\n    function getUpdates(uint256 since, uint256 max) public view returns (uint256[] memory updatesSince) {\r\n        uint256 length = updates.length - since;\r\n        if (length > max) { \r\n            length = max; \r\n        }\r\n        updatesSince = new uint256[](length);\r\n        for (uint256 i = 0; i < length; i++) {\r\n            updatesSince[i] = updates[since + i];\r\n        }\r\n    }\r\n\r\n    function addText(\r\n        string[] calldata text_\r\n    ) public {\r\n        for (uint256 i = 0; i < text_.length; i++) { text.push(text_[i]); }\r\n    }\r\n\r\n    function addData(\r\n        bytes[] calldata data_\r\n    ) public {\r\n        for (uint256 i = 0; i < data_.length; i++) { data.push(data_[i]); }\r\n    }\r\n\r\n    function getText() public view returns (string[] memory) { return text; }\r\n    function getTextRange(\r\n        uint256 start,\r\n        uint256 end\r\n    ) public view returns (string[] memory) {\r\n        string[] memory result = new string[](end - start);\r\n        for (uint256 i = start; i < (end == 0 ? text.length : end); i++)\r\n        {\r\n            result[i - start] = text[i];\r\n        }\r\n        return result; \r\n    }\r\n\r\n    function getDataRange(\r\n        uint256 start,\r\n        uint256 end\r\n    ) public view returns (bytes[] memory) {\r\n        bytes[] memory result = new bytes[](end - start);\r\n        for (uint256 i = start; i < (end == 0 ? data.length : end); i++)\r\n        {\r\n            result[i - start] = data[i];\r\n        }\r\n        return result; \r\n    }\r\n\r\n    function mint(address[] calldata to, uint256[] calldata amount) public onlyOwner {\r\n        require(START_TIMESTAMP == 0, \"Initialization finished\");\r\n        for (uint256 i = 0; i < to.length; i++) {\r\n            _mint(to[i], amount[i]);\r\n        }\r\n    }\r\n\r\n    function initMLM(\r\n        address[] memory reps,\r\n        uint32[] memory upline,\r\n        uint32[] memory earn1,\r\n        uint32[] memory earn2,\r\n        uint32[] memory earn3,\r\n        uint16[] memory tier1,\r\n        uint16[] memory tier2,\r\n        uint16[] memory tier3\r\n    ) public onlyOwner {\r\n        require(START_TIMESTAMP == 0, \"Initialization finished\");\r\n        for (uint256 i = 0; i < reps.length; i++) {\r\n            _set(reps[i], upline[i], earn1[i], earn2[i], earn3[i], tier1[i], tier2[i], tier3[i]);\r\n        }\r\n    }\r\n\r\n    function initBlocks(\r\n        uint256[] calldata blockNumbers,\r\n        uint128[] calldata lastPrice,\r\n        uint32[] calldata ownerNr,\r\n        uint32[] calldata urlNr,\r\n        uint32[] calldata descriptionNr,\r\n        uint32[] calldata pixelsNr\r\n    ) public onlyOwner {\r\n        require(START_TIMESTAMP == 0, \"Initialization finished\");\r\n\r\n        for (uint256 i = 0; i < blockNumbers.length; i++) {\r\n            uint256 blockNumber = blockNumbers[i];\r\n\r\n            blk[blockNumber] = Block({\r\n                owner: ownerNr[i],\r\n                url: urlNr[i],\r\n                description: descriptionNr[i],\r\n                pixels: pixelsNr[i],\r\n                lastPrice: lastPrice[i]\r\n            });\r\n        }\r\n    }\r\n\r\n    function finishInit() public onlyOwner {\r\n        START_TIMESTAMP = block.timestamp + 2 hours;\r\n        LOCK_TIMESTAMP = block.timestamp + 14 days + 2 hours;\r\n        updates.push(10000); // Update of 10000 means: update all blocks from 0 to 9999\r\n    }\r\n\r\n    function _setBlock(\r\n        uint256 blockNumber,\r\n        uint32 ownerNr,\r\n        uint32 urlNr,\r\n        uint32 descriptionNr,\r\n        uint32 pixelsNr\r\n    ) private returns(uint256 blockCost) {\r\n        require(pixelsNr < data.length, \"Wrong pixelNr\");\r\n\r\n        Block memory block_ = blk[blockNumber];\r\n        // Forward a maximum of 20000 gas to the previous owner for accepting the refund to avoid griefing attacks\r\n        bool success;\r\n        address previousOwner = addresses[block_.owner];\r\n        uint256 lastPrice = block_.lastPrice;\r\n        (success, ) = previousOwner.call{value: lastPrice, gas: 20000}(\"\");\r\n\r\n        blockCost = lastPrice == 0 ? START_BLOCK_PRICE : lastPrice.mul(2);\r\n\r\n        block_.owner = ownerNr;\r\n        block_.url = urlNr;\r\n        block_.description = descriptionNr;\r\n        block_.lastPrice = blockCost.to128();\r\n        block_.pixels = pixelsNr;\r\n        blk[blockNumber] = block_;\r\n\r\n        updates.push(blockNumber);\r\n\r\n        emit PixelBlockTransfer(previousOwner, addresses[ownerNr], blockCost);\r\n    }\r\n\r\n    function setBlocks(\r\n        address owner,\r\n        uint32 ownerNr,\r\n\r\n        string memory url,\r\n        uint32 urlNr,\r\n\r\n        string memory description,\r\n        uint32 descriptionNr,\r\n\r\n        uint256[] memory blockNumbers,\r\n        bytes[] memory pixels,\r\n        // Positive numbers refer to existing data. Negative numbers refer to the index in the passed in pixels array\r\n        int32[] memory pixelsNr,\r\n        address referrer,\r\n        uint32 referrerNr\r\n    ) public payable onlyCreationPhase() nonReentrant() {\r\n        if (ownerNr == uint32(-1)) {\r\n            ownerNr = addresses.length.to32();\r\n            addresses.push(owner);\r\n        }\r\n        require(ownerNr < addresses.length, \"Wrong owner\");\r\n\r\n        if (urlNr == uint32(-1)) {\r\n            urlNr = text.length.to32();\r\n            text.push(url);\r\n        }\r\n        require(urlNr < text.length, \"Wrong url\");\r\n\r\n        if (descriptionNr == uint32(-1)) {\r\n            descriptionNr = text.length.to32();\r\n            text.push(description);\r\n        }\r\n        require(descriptionNr < text.length, \"Wrong description\");\r\n\r\n        if (referrerNr == uint32(-1)) {\r\n            referrerNr = addresses.length.to32();\r\n            addresses.push(referrer);\r\n        }\r\n        require(referrerNr < addresses.length, \"Wrong referrer\");\r\n\r\n        uint256 startPixelNr = data.length;\r\n        for (uint256 i = 0; i < pixels.length; i++) { data.push(pixels[i]); }\r\n\r\n        uint256 cost;\r\n        for (uint256 i = 0; i < blockNumbers.length; i++) {\r\n            cost = cost.add(_setBlock(blockNumbers[i], ownerNr, urlNr, descriptionNr, (pixelsNr[i] >=0 ? uint256(pixelsNr[i]) : startPixelNr + uint256(-1-pixelsNr[i])).to32()));\r\n        }\r\n\r\n        require(msg.value == cost, \"Pixel: not enough funds\");\r\n\r\n        // Mint a PIXEL token for each pixel bought\r\n        uint256 blocks = blockNumbers.length;\r\n        (address lvl1, address lvl2, address lvl3) = _mlm(msg.sender, referrerNr, blocks.mul(20).to32(), blocks.mul(10).to32(), blocks.mul(5).to32());\r\n\r\n        _mint(msg.sender, blocks.mul(100e18));\r\n        if (lvl1 != address(0)) { _mint(lvl1, blocks.mul(20e18)); }\r\n        if (lvl2 != address(0)) { _mint(lvl2, blocks.mul(10e18)); }\r\n        if (lvl3 != address(0)) { _mint(lvl3, blocks.mul(5e18)); }\r\n    }\r\n\r\n    function getCost(uint256 blockNumber) public view returns (uint256 cost) {\r\n        uint256 last = blk[blockNumber].lastPrice;\r\n        cost = last == 0 ? START_BLOCK_PRICE : last.mul(2);\r\n    }\r\n\r\n    function getCost(uint256[] calldata blockNumbers) public view returns (uint256 cost) {\r\n        for (uint256 i = 0; i < blockNumbers.length; i++) {\r\n            cost = cost.add(getCost(blockNumbers[i]));\r\n        }\r\n    }\r\n\r\n    function withdraw(IERC20 token) public onlyOwner {\r\n        if (token != IERC20(0)) {\r\n            // Withdraw any accidental token deposits\r\n            token.safeTransfer(owner, token.balanceOf(address(this)));\r\n        } else {\r\n            bool success;\r\n            (success, ) = owner.call{value: address(this).balance}(\"\");\r\n        }\r\n    }\r\n\r\n    function poll(address user) public view returns (uint256 updates_, uint256 addresses_, uint256 text_, uint256 data_, uint256 balance, uint256 supply, RepInfo memory mlm_, address upline_) {\r\n        updates_ = updates.length;\r\n        addresses_ = addresses.length;\r\n        text_ = text.length;\r\n        data_ = data.length;\r\n        balance = balanceOf[user];\r\n        supply = totalSupply;\r\n        mlm_ = mlm[user];\r\n        upline_ = addresses[mlm[user].upline];\r\n    }\r\n\r\n    function burn(uint256 amount) public {\r\n        _burn(msg.sender, amount);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rep\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"upline\",\"type\":\"address\"}],\"name\":\"MLMAddRep\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rep\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"amount\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"lvl\",\"type\":\"uint8\"}],\"name\":\"MLMEarn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pricePerPixel\",\"type\":\"uint256\"}],\"name\":\"PixelBlockTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOCK_TIMESTAMP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"START_TIMESTAMP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses_\",\"type\":\"address[]\"}],\"name\":\"addAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data_\",\"type\":\"bytes[]\"}],\"name\":\"addData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"text_\",\"type\":\"string[]\"}],\"name\":\"addText\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"blk\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"owner\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"url\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"description\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"pixels\",\"type\":\"uint32\"},{\"internalType\":\"uint128\",\"name\":\"lastPrice\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"data\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dataCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishInit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getAddressesRange\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"blockNumbers\",\"type\":\"uint256[]\"}],\"name\":\"getBlocks\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"pixels\",\"type\":\"bytes\"},{\"internalType\":\"uint128\",\"name\":\"lastPrice\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"number\",\"type\":\"uint32\"}],\"internalType\":\"struct PixelV2.ExportBlock[]\",\"name\":\"blocks\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"blockNumbers\",\"type\":\"uint256[]\"}],\"name\":\"getCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getDataRange\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"blockNumbers\",\"type\":\"uint256[]\"}],\"name\":\"getRawBlocks\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"owner\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"url\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"description\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"pixels\",\"type\":\"uint32\"},{\"internalType\":\"uint128\",\"name\":\"lastPrice\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"number\",\"type\":\"uint32\"}],\"internalType\":\"struct PixelV2.ExportRawBlock[]\",\"name\":\"blocks\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getText\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getTextRange\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"since\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"getUpdates\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"updatesSince\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"blockNumbers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint128[]\",\"name\":\"lastPrice\",\"type\":\"uint128[]\"},{\"internalType\":\"uint32[]\",\"name\":\"ownerNr\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"urlNr\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"descriptionNr\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"pixelsNr\",\"type\":\"uint32[]\"}],\"name\":\"initBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"reps\",\"type\":\"address[]\"},{\"internalType\":\"uint32[]\",\"name\":\"upline\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"earn1\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"earn2\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"earn3\",\"type\":\"uint32[]\"},{\"internalType\":\"uint16[]\",\"name\":\"tier1\",\"type\":\"uint16[]\"},{\"internalType\":\"uint16[]\",\"name\":\"tier2\",\"type\":\"uint16[]\"},{\"internalType\":\"uint16[]\",\"name\":\"tier3\",\"type\":\"uint16[]\"}],\"name\":\"initMLM\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mlm\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"upline\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"earnings1\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"earnings2\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"earnings3\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"tier1\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"tier2\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"tier3\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"poll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"updates_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"addresses_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"text_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"data_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"upline\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"earnings1\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"earnings2\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"earnings3\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"tier1\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"tier2\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"tier3\",\"type\":\"uint16\"}],\"internalType\":\"struct MLM.RepInfo\",\"name\":\"mlm_\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"upline_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"ownerNr\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"urlNr\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"descriptionNr\",\"type\":\"uint32\"},{\"internalType\":\"uint256[]\",\"name\":\"blockNumbers\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"pixels\",\"type\":\"bytes[]\"},{\"internalType\":\"int32[]\",\"name\":\"pixelsNr\",\"type\":\"int32[]\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"referrerNr\",\"type\":\"uint32\"}],\"name\":\"setBlocks\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"text\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"textCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"direct\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"renounce\",\"type\":\"bool\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"updates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PixelV2","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"10000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://497fc9216e5ec387babff86c07d0e5fdbfc80fc6b33b7da247d2fb9f782b9dbc"}]}