{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/v1-v2-migration/DextfV2Migration.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2021 Memento Blockchain Pte. Ltd. \\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.7.6;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {\\n    ReentrancyGuard\\n} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport {ISetToken as ISetTokenV2} from \\\"./interfaces/ISetToken.sol\\\";\\nimport {ISetTokenV1} from \\\"./interfaces-v1/ISetToken.sol\\\";\\nimport {ICore} from \\\"./interfaces-v1/ICore.sol\\\";\\nimport {BasicIssuanceModule} from \\\"./protocol/modules/BasicIssuanceModule.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\n\\ncontract DextfV2Migration is ReentrancyGuard, Ownable {\\n\\n    using SafeMath for uint256;\\n    /* ============ Events ============ */\\n    event FundMigrated(\\n        address indexed _fundV1,\\n        address indexed _fundV2,\\n        address _to,\\n        uint256 _value\\n    );\\n\\n    event Transferred(\\n        address indexed _token,\\n        address indexed _to,\\n        uint256 _value\\n    );\\n\\n    /* ============ State Variables ============ */\\n\\n    ICore public coreV1;\\n    BasicIssuanceModule public basicIssuanceModuleV2;\\n    uint256 constant feeMultiplier = 999900000000000000; // 99.99% in base 1e18\\n    uint256 constant percentageMultiplier = 1e18; // 100.0% in base 1e18\\n\\n    /* ============ Constructor ============ */\\n\\n    /**\\n     * Initializes the migration contract\\n     *\\n     * @param _coreV1                       Address of v1 core contract\\n     * @param _basicIssuanceModuleV2        Address of v2 basic issuance module\\n     */\\n    constructor(ICore _coreV1, BasicIssuanceModule _basicIssuanceModuleV2)\\n        public\\n    {\\n        coreV1 = _coreV1;\\n        basicIssuanceModuleV2 = _basicIssuanceModuleV2;\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /**\\n     * Migrate token fund from v1 to v2\\n     * Before calling the function, make sure the _fundV1 and _fundV2 has the same amount of component\\n     * Otherwise left over can remains in this contract\\n     */\\n    function migrateFund(\\n        address _fundV1,\\n        ISetTokenV2 _fundV2,\\n        address _to,\\n        uint256 _value\\n    ) external nonReentrant {\\n\\n        uint256 value2 = _value.mul(feeMultiplier).div(percentageMultiplier);\\n        require(value2>0, \\\"Fund quantity too small\\\");\\n\\n        // Approval is required\\n        // We first transfer the fund token to the migration contract and redeem to the contract address\\n        IERC20(_fundV1).transferFrom(_msgSender(), address(this), _value);\\n        \\n        coreV1.redeemAndWithdrawTo(_fundV1, address(this), _value, 0);\\n\\n        // For each of the component of the new fund contract, we approve the componentQuantities\\n        (address[] memory components, uint256[] memory componentQuantities) =\\n            basicIssuanceModuleV2.getRequiredComponentUnitsForIssue(\\n                _fundV2,\\n                value2\\n            );\\n\\n        for (uint256 i = 0; i < components.length; i++) {\\n            SafeERC20.safeApprove(\\n                IERC20(components[i]),\\n                address(basicIssuanceModuleV2),\\n                componentQuantities[i]\\n            );\\n        }\\n\\n        // Issue the fund back to the user\\n        basicIssuanceModuleV2.issue(_fundV2, value2, _to);\\n\\n        emit FundMigrated(_fundV1, address(_fundV2), _to, value2);\\n    }\\n\\n    /**\\n     * Send tokens owned by the contract to an address.\\n     * Only owner can perform this operation.\\n     */\\n    function transfer(\\n        IERC20 token,\\n        address _to,\\n        uint256 _value\\n    ) external nonReentrant onlyOwner {\\n        token.transfer(_to, _value);\\n        emit Transferred(address(token), _to, _value);\\n    }\\n\\n    /**\\n     * returns the number of that tokens held by the smart contract\\n     */\\n    function tokensHeld(address _fund)\\n        public\\n        view\\n        returns (address[] memory, uint256[] memory)\\n    {\\n        address[] memory components = ISetTokenV1(_fund).getComponents();\\n        uint256[] memory values = new uint256[](components.length);\\n        for (uint256 index = 0; index < components.length; index++) {\\n            values[index] = IERC20(_fund).balanceOf(address(this));\\n        }\\n        return (components, values);\\n    }\\n\\n    /**\\n     * returns the number of that tokens held by the smart contract\\n     */\\n    function tokenHeld(address _token) public view returns (uint256) {\\n        return IERC20(_token).balanceOf(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/v1-v2-migration/interfaces/ISetToken.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.7.6;\\npragma experimental \\\"ABIEncoderV2\\\";\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title ISetToken\\n * @author Set Protocol\\n *\\n * Interface for operating with SetTokens.\\n */\\ninterface ISetToken is IERC20 {\\n    /* ============ Enums ============ */\\n\\n    enum ModuleState {NONE, PENDING, INITIALIZED}\\n\\n    /* ============ Structs ============ */\\n    /**\\n     * The base definition of a SetToken Position\\n     *\\n     * @param component           Address of token in the Position\\n     * @param module              If not in default state, the address of associated module\\n     * @param unit                Each unit is the # of components per 10^18 of a SetToken\\n     * @param positionState       Position ENUM. Default is 0; External is 1\\n     * @param data                Arbitrary data\\n     */\\n    struct Position {\\n        address component;\\n        address module;\\n        int256 unit;\\n        uint8 positionState;\\n        bytes data;\\n    }\\n\\n    /**\\n     * A struct that stores a component's cash position details and external positions\\n     * This data structure allows O(1) access to a component's cash position units and\\n     * virtual units.\\n     *\\n     * @param virtualUnit               Virtual value of a component's DEFAULT position. Stored as virtual for efficiency\\n     *                                  updating all units at once via the position multiplier. Virtual units are achieved\\n     *                                  by dividing a \\\"real\\\" value by the \\\"positionMultiplier\\\"\\n     * @param componentIndex\\n     * @param externalPositionModules   List of external modules attached to each external position. Each module\\n     *                                  maps to an external position\\n     * @param externalPositions         Mapping of module => ExternalPosition struct for a given component\\n     */\\n    struct ComponentPosition {\\n        int256 virtualUnit;\\n        address[] externalPositionModules;\\n        mapping(address => ExternalPosition) externalPositions;\\n    }\\n\\n    /**\\n     * A struct that stores a component's external position details including virtual unit and any\\n     * auxiliary data.\\n     *\\n     * @param virtualUnit       Virtual value of a component's EXTERNAL position.\\n     * @param data              Arbitrary data\\n     */\\n    struct ExternalPosition {\\n        int256 virtualUnit;\\n        bytes data;\\n    }\\n\\n    /* ============ Functions ============ */\\n\\n    function addComponent(address _component) external;\\n\\n    function removeComponent(address _component) external;\\n\\n    function editDefaultPositionUnit(address _component, int256 _realUnit)\\n        external;\\n\\n    function addExternalPositionModule(\\n        address _component,\\n        address _positionModule\\n    ) external;\\n\\n    function removeExternalPositionModule(\\n        address _component,\\n        address _positionModule\\n    ) external;\\n\\n    function editExternalPositionUnit(\\n        address _component,\\n        address _positionModule,\\n        int256 _realUnit\\n    ) external;\\n\\n    function editExternalPositionData(\\n        address _component,\\n        address _positionModule,\\n        bytes calldata _data\\n    ) external;\\n\\n    function invoke(\\n        address _target,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external returns (bytes memory);\\n\\n    function editPositionMultiplier(int256 _newMultiplier) external;\\n\\n    function mint(address _account, uint256 _quantity) external;\\n\\n    function burn(address _account, uint256 _quantity) external;\\n\\n    function lock() external;\\n\\n    function unlock() external;\\n\\n    function addModule(address _module) external;\\n\\n    function removeModule(address _module) external;\\n\\n    function initializeModule() external;\\n\\n    function setManager(address _manager) external;\\n\\n    function manager() external view returns (address);\\n\\n    function moduleStates(address _module) external view returns (ModuleState);\\n\\n    function getModules() external view returns (address[] memory);\\n\\n    function getDefaultPositionRealUnit(address _component)\\n        external\\n        view\\n        returns (int256);\\n\\n    function getExternalPositionRealUnit(\\n        address _component,\\n        address _positionModule\\n    ) external view returns (int256);\\n\\n    function getComponents() external view returns (address[] memory);\\n\\n    function getExternalPositionModules(address _component)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    function getExternalPositionData(\\n        address _component,\\n        address _positionModule\\n    ) external view returns (bytes memory);\\n\\n    function isExternalPositionModule(address _component, address _module)\\n        external\\n        view\\n        returns (bool);\\n\\n    function isComponent(address _component) external view returns (bool);\\n\\n    function positionMultiplier() external view returns (int256);\\n\\n    function getPositions() external view returns (Position[] memory);\\n\\n    function getTotalComponentRealUnits(address _component)\\n        external\\n        view\\n        returns (int256);\\n\\n    function isInitializedModule(address _module) external view returns (bool);\\n\\n    function isPendingModule(address _module) external view returns (bool);\\n\\n    function isLocked() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/v1-v2-migration/interfaces-v1/ISetToken.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2018 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n*/\\n\\npragma solidity 0.7.6;\\n\\n/**\\n * @title ISetToken\\n * @author Set Protocol\\n *\\n * The ISetToken interface provides a light-weight, structured way to interact with the\\n * SetToken contract from another contract.\\n */\\ninterface ISetTokenV1 {\\n    /* ============ External Functions ============ */\\n\\n    /*\\n     * Get natural unit of Set\\n     *\\n     * @return  uint256       Natural unit of Set\\n     */\\n    function naturalUnit() external view returns (uint256);\\n\\n    /*\\n     * Get addresses of all components in the Set\\n     *\\n     * @return  componentAddresses       Array of component tokens\\n     */\\n    function getComponents() external view returns (address[] memory);\\n\\n    /*\\n     * Get units of all tokens in Set\\n     *\\n     * @return  units       Array of component units\\n     */\\n    function getUnits() external view returns (uint256[] memory);\\n\\n    /*\\n     * Checks to make sure token is component of Set\\n     *\\n     * @param  _tokenAddress     Address of token being checked\\n     * @return  bool             True if token is component of Set\\n     */\\n    function tokenIsComponent(address _tokenAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    /*\\n     * Mint set token for given address.\\n     * Can only be called by authorized contracts.\\n     *\\n     * @param  _issuer      The address of the issuing account\\n     * @param  _quantity    The number of sets to attribute to issuer\\n     */\\n    function mint(address _issuer, uint256 _quantity) external;\\n\\n    /*\\n     * Burn set token for given address\\n     * Can only be called by authorized contracts\\n     *\\n     * @param  _from        The address of the redeeming account\\n     * @param  _quantity    The number of sets to burn from redeemer\\n     */\\n    function burn(address _from, uint256 _quantity) external;\\n\\n    /**\\n     * Transfer token for a specified address\\n     *\\n     * @param to The address to transfer to.\\n     * @param value The amount to be transferred.\\n     */\\n    function transfer(address to, uint256 value) external;\\n}\\n\"\r\n    },\r\n    \"contracts/v1-v2-migration/interfaces-v1/ICore.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2018 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n*/\\n\\npragma solidity 0.7.6;\\n\\n/**\\n * @title ICore\\n * @author Set Protocol\\n *\\n * The ICore Contract defines all the functions exposed in the Core through its\\n * various extensions and is a light weight way to interact with the contract.\\n */\\ninterface ICore {\\n    /**\\n     * Return transferProxy address.\\n     *\\n     * @return address       transferProxy address\\n     */\\n    function transferProxy() external view returns (address);\\n\\n    /**\\n     * Return vault address.\\n     *\\n     * @return address       vault address\\n     */\\n    function vault() external view returns (address);\\n\\n    /**\\n     * Return address belonging to given exchangeId.\\n     *\\n     * @param  _exchangeId       ExchangeId number\\n     * @return address           Address belonging to given exchangeId\\n     */\\n    function exchangeIds(uint8 _exchangeId) external view returns (address);\\n\\n    /*\\n     * Returns if valid set\\n     *\\n     * @return  bool      Returns true if Set created through Core and isn't disabled\\n     */\\n    function validSets(address) external view returns (bool);\\n\\n    /*\\n     * Returns if valid module\\n     *\\n     * @return  bool      Returns true if valid module\\n     */\\n    function validModules(address) external view returns (bool);\\n\\n    /**\\n     * Return boolean indicating if address is a valid Rebalancing Price Library.\\n     *\\n     * @param  _priceLibrary    Price library address\\n     * @return bool             Boolean indicating if valid Price Library\\n     */\\n    function validPriceLibraries(address _priceLibrary)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * Exchanges components for Set Tokens\\n     *\\n     * @param  _set          Address of set to issue\\n     * @param  _quantity     Quantity of set to issue\\n     */\\n    function issue(address _set, uint256 _quantity) external;\\n\\n    /**\\n     * Issues a specified Set for a specified quantity to the recipient\\n     * using the caller's components from the wallet and vault.\\n     *\\n     * @param  _recipient    Address to issue to\\n     * @param  _set          Address of the Set to issue\\n     * @param  _quantity     Number of tokens to issue\\n     */\\n    function issueTo(\\n        address _recipient,\\n        address _set,\\n        uint256 _quantity\\n    ) external;\\n\\n    /**\\n     * Converts user's components into Set Tokens held directly in Vault instead of user's account\\n     *\\n     * @param _set          Address of the Set\\n     * @param _quantity     Number of tokens to redeem\\n     */\\n    function issueInVault(address _set, uint256 _quantity) external;\\n\\n    /**\\n     * Function to convert Set Tokens into underlying components\\n     *\\n     * @param _set          The address of the Set token\\n     * @param _quantity     The number of tokens to redeem. Should be multiple of natural unit.\\n     */\\n    function redeem(address _set, uint256 _quantity) external;\\n\\n    /**\\n     * Redeem Set token and return components to specified recipient. The components\\n     * are left in the vault\\n     *\\n     * @param _recipient    Recipient of Set being issued\\n     * @param _set          Address of the Set\\n     * @param _quantity     Number of tokens to redeem\\n     */\\n    function redeemTo(\\n        address _recipient,\\n        address _set,\\n        uint256 _quantity\\n    ) external;\\n\\n    /**\\n     * Function to convert Set Tokens held in vault into underlying components\\n     *\\n     * @param _set          The address of the Set token\\n     * @param _quantity     The number of tokens to redeem. Should be multiple of natural unit.\\n     */\\n    function redeemInVault(address _set, uint256 _quantity) external;\\n\\n    /**\\n     * Composite method to redeem and withdraw with a single transaction\\n     *\\n     * Normally, you should expect to be able to withdraw all of the tokens.\\n     * However, some have central abilities to freeze transfers (e.g. EOS). _toExclude\\n     * allows you to optionally specify which component tokens to exclude when\\n     * redeeming. They will remain in the vault under the users' addresses.\\n     *\\n     * @param _set          Address of the Set\\n     * @param _to           Address to withdraw or attribute tokens to\\n     * @param _quantity     Number of tokens to redeem\\n     * @param _toExclude    Mask of indexes of tokens to exclude from withdrawing\\n     */\\n    function redeemAndWithdrawTo(\\n        address _set,\\n        address _to,\\n        uint256 _quantity,\\n        uint256 _toExclude\\n    ) external;\\n\\n    /**\\n     * Deposit multiple tokens to the vault. Quantities should be in the\\n     * order of the addresses of the tokens being deposited.\\n     *\\n     * @param  _tokens           Array of the addresses of the ERC20 tokens\\n     * @param  _quantities       Array of the number of tokens to deposit\\n     */\\n    function batchDeposit(\\n        address[] calldata _tokens,\\n        uint256[] calldata _quantities\\n    ) external;\\n\\n    /**\\n     * Withdraw multiple tokens from the vault. Quantities should be in the\\n     * order of the addresses of the tokens being withdrawn.\\n     *\\n     * @param  _tokens            Array of the addresses of the ERC20 tokens\\n     * @param  _quantities        Array of the number of tokens to withdraw\\n     */\\n    function batchWithdraw(\\n        address[] calldata _tokens,\\n        uint256[] calldata _quantities\\n    ) external;\\n\\n    /**\\n     * Deposit any quantity of tokens into the vault.\\n     *\\n     * @param  _token           The address of the ERC20 token\\n     * @param  _quantity        The number of tokens to deposit\\n     */\\n    function deposit(address _token, uint256 _quantity) external;\\n\\n    /**\\n     * Withdraw a quantity of tokens from the vault.\\n     *\\n     * @param  _token           The address of the ERC20 token\\n     * @param  _quantity        The number of tokens to withdraw\\n     */\\n    function withdraw(address _token, uint256 _quantity) external;\\n\\n    /**\\n     * Transfer tokens associated with the sender's account in vault to another user's\\n     * account in vault.\\n     *\\n     * @param  _token           Address of token being transferred\\n     * @param  _to              Address of user receiving tokens\\n     * @param  _quantity        Amount of tokens being transferred\\n     */\\n    function internalTransfer(\\n        address _token,\\n        address _to,\\n        uint256 _quantity\\n    ) external;\\n\\n    /**\\n     * Deploys a new Set Token and adds it to the valid list of SetTokens\\n     *\\n     * @param  _factory              The address of the Factory to create from\\n     * @param  _components           The address of component tokens\\n     * @param  _units                The units of each component token\\n     * @param  _naturalUnit          The minimum unit to be issued or redeemed\\n     * @param  _name                 The bytes32 encoded name of the new Set\\n     * @param  _symbol               The bytes32 encoded symbol of the new Set\\n     * @param  _callData             Byte string containing additional call parameters\\n     * @return setTokenAddress       The address of the new Set\\n     */\\n    function createSet(\\n        address _factory,\\n        address[] calldata _components,\\n        uint256[] calldata _units,\\n        uint256 _naturalUnit,\\n        bytes32 _name,\\n        bytes32 _symbol,\\n        bytes calldata _callData\\n    ) external returns (address);\\n\\n    /**\\n     * Exposes internal function that deposits a quantity of tokens to the vault and attributes\\n     * the tokens respectively, to system modules.\\n     *\\n     * @param  _from            Address to transfer tokens from\\n     * @param  _to              Address to credit for deposit\\n     * @param  _token           Address of token being deposited\\n     * @param  _quantity        Amount of tokens to deposit\\n     */\\n    function depositModule(\\n        address _from,\\n        address _to,\\n        address _token,\\n        uint256 _quantity\\n    ) external;\\n\\n    /**\\n     * Exposes internal function that withdraws a quantity of tokens from the vault and\\n     * deattributes the tokens respectively, to system modules.\\n     *\\n     * @param  _from            Address to decredit for withdraw\\n     * @param  _to              Address to transfer tokens to\\n     * @param  _token           Address of token being withdrawn\\n     * @param  _quantity        Amount of tokens to withdraw\\n     */\\n    function withdrawModule(\\n        address _from,\\n        address _to,\\n        address _token,\\n        uint256 _quantity\\n    ) external;\\n\\n    /**\\n     * Exposes internal function that deposits multiple tokens to the vault, to system\\n     * modules. Quantities should be in the order of the addresses of the tokens being\\n     * deposited.\\n     *\\n     * @param  _from              Address to transfer tokens from\\n     * @param  _to                Address to credit for deposits\\n     * @param  _tokens            Array of the addresses of the tokens being deposited\\n     * @param  _quantities        Array of the amounts of tokens to deposit\\n     */\\n    function batchDepositModule(\\n        address _from,\\n        address _to,\\n        address[] calldata _tokens,\\n        uint256[] calldata _quantities\\n    ) external;\\n\\n    /**\\n     * Exposes internal function that withdraws multiple tokens from the vault, to system\\n     * modules. Quantities should be in the order of the addresses of the tokens being withdrawn.\\n     *\\n     * @param  _from              Address to decredit for withdrawals\\n     * @param  _to                Address to transfer tokens to\\n     * @param  _tokens            Array of the addresses of the tokens being withdrawn\\n     * @param  _quantities        Array of the amounts of tokens to withdraw\\n     */\\n    function batchWithdrawModule(\\n        address _from,\\n        address _to,\\n        address[] calldata _tokens,\\n        uint256[] calldata _quantities\\n    ) external;\\n\\n    /**\\n     * Expose internal function that exchanges components for Set tokens,\\n     * accepting any owner, to system modules\\n     *\\n     * @param  _owner        Address to use tokens from\\n     * @param  _recipient    Address to issue Set to\\n     * @param  _set          Address of the Set to issue\\n     * @param  _quantity     Number of tokens to issue\\n     */\\n    function issueModule(\\n        address _owner,\\n        address _recipient,\\n        address _set,\\n        uint256 _quantity\\n    ) external;\\n\\n    /**\\n     * Expose internal function that exchanges Set tokens for components,\\n     * accepting any owner, to system modules\\n     *\\n     * @param  _burnAddress         Address to burn token from\\n     * @param  _incrementAddress    Address to increment component tokens to\\n     * @param  _set                 Address of the Set to redeem\\n     * @param  _quantity            Number of tokens to redeem\\n     */\\n    function redeemModule(\\n        address _burnAddress,\\n        address _incrementAddress,\\n        address _set,\\n        uint256 _quantity\\n    ) external;\\n\\n    /**\\n     * Expose vault function that increments user's balance in the vault.\\n     * Available to system modules\\n     *\\n     * @param  _tokens          The addresses of the ERC20 tokens\\n     * @param  _owner           The address of the token owner\\n     * @param  _quantities      The numbers of tokens to attribute to owner\\n     */\\n    function batchIncrementTokenOwnerModule(\\n        address[] calldata _tokens,\\n        address _owner,\\n        uint256[] calldata _quantities\\n    ) external;\\n\\n    /**\\n     * Expose vault function that decrement user's balance in the vault\\n     * Only available to system modules.\\n     *\\n     * @param  _tokens          The addresses of the ERC20 tokens\\n     * @param  _owner           The address of the token owner\\n     * @param  _quantities      The numbers of tokens to attribute to owner\\n     */\\n    function batchDecrementTokenOwnerModule(\\n        address[] calldata _tokens,\\n        address _owner,\\n        uint256[] calldata _quantities\\n    ) external;\\n\\n    /**\\n     * Expose vault function that transfer vault balances between users\\n     * Only available to system modules.\\n     *\\n     * @param  _tokens           Addresses of tokens being transferred\\n     * @param  _from             Address tokens being transferred from\\n     * @param  _to               Address tokens being transferred to\\n     * @param  _quantities       Amounts of tokens being transferred\\n     */\\n    function batchTransferBalanceModule(\\n        address[] calldata _tokens,\\n        address _from,\\n        address _to,\\n        uint256[] calldata _quantities\\n    ) external;\\n\\n    /**\\n     * Transfers token from one address to another using the transfer proxy.\\n     * Only available to system modules.\\n     *\\n     * @param  _token          The address of the ERC20 token\\n     * @param  _quantity       The number of tokens to transfer\\n     * @param  _from           The address to transfer from\\n     * @param  _to             The address to transfer to\\n     */\\n    function transferModule(\\n        address _token,\\n        uint256 _quantity,\\n        address _from,\\n        address _to\\n    ) external;\\n\\n    /**\\n     * Expose transfer proxy function to transfer tokens from one address to another\\n     * Only available to system modules.\\n     *\\n     * @param  _tokens         The addresses of the ERC20 token\\n     * @param  _quantities     The numbers of tokens to transfer\\n     * @param  _from           The address to transfer from\\n     * @param  _to             The address to transfer to\\n     */\\n    function batchTransferModule(\\n        address[] calldata _tokens,\\n        uint256[] calldata _quantities,\\n        address _from,\\n        address _to\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/v1-v2-migration/protocol/modules/BasicIssuanceModule.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n    http://www.apache.org/licenses/LICENSE-2.0\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.7.6;\\npragma experimental \\\"ABIEncoderV2\\\";\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {\\n    ReentrancyGuard\\n} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/SafeCast.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport {IController} from \\\"../../interfaces/IController.sol\\\";\\nimport {IManagerIssuanceHook} from \\\"../../interfaces/IManagerIssuanceHook.sol\\\";\\nimport {Invoke} from \\\"../lib/Invoke.sol\\\";\\nimport {ISetToken} from \\\"../../interfaces/ISetToken.sol\\\";\\nimport {ModuleBase} from \\\"../lib/ModuleBase.sol\\\";\\nimport {Position} from \\\"../lib/Position.sol\\\";\\nimport {PreciseUnitMath} from \\\"../../lib/PreciseUnitMath.sol\\\";\\n\\n/**\\n * @title BasicIssuanceModule\\n * @author Set Protocol\\n *\\n * Module that enables issuance and redemption functionality on a SetToken. This is a module that is\\n * required to bring the totalSupply of a Set above 0.\\n */\\ncontract BasicIssuanceModule is ModuleBase, ReentrancyGuard {\\n    using Invoke for ISetToken;\\n    using Position for ISetToken.Position;\\n    using Position for ISetToken;\\n    using PreciseUnitMath for uint256;\\n    using SafeMath for uint256;\\n    using SafeCast for int256;\\n\\n    /* ============ Events ============ */\\n\\n    event SetTokenIssued(\\n        address indexed _setToken,\\n        address indexed _issuer,\\n        address indexed _to,\\n        address _hookContract,\\n        uint256 _quantity\\n    );\\n    event SetTokenRedeemed(\\n        address indexed _setToken,\\n        address indexed _redeemer,\\n        address indexed _to,\\n        uint256 _quantity\\n    );\\n\\n    /* ============ State Variables ============ */\\n\\n    // Mapping of SetToken to Issuance hook configurations\\n    mapping(ISetToken => IManagerIssuanceHook) public managerIssuanceHook;\\n\\n    /* ============ Constructor ============ */\\n\\n    /**\\n     * Set state controller state variable\\n     *\\n     * @param _controller             Address of controller contract\\n     */\\n    constructor(IController _controller) ModuleBase(_controller) {}\\n\\n    /* ============ External Functions ============ */\\n\\n    /**\\n     * Deposits the SetToken's position components into the SetToken and mints the SetToken of the given quantity\\n     * to the specified _to address. This function only handles Default Positions (positionState = 0).\\n     *\\n     * @param _setToken             Instance of the SetToken contract\\n     * @param _quantity             Quantity of the SetToken to mint\\n     * @param _to                   Address to mint SetToken to\\n     */\\n    function issue(\\n        ISetToken _setToken,\\n        uint256 _quantity,\\n        address _to\\n    ) external nonReentrant onlyValidAndInitializedSet(_setToken) {\\n        require(_quantity > 0, \\\"Issue quantity must be > 0\\\");\\n\\n        address hookContract =\\n            _callPreIssueHooks(_setToken, _quantity, msg.sender, _to);\\n\\n        (address[] memory components, uint256[] memory componentQuantities) =\\n            getRequiredComponentUnitsForIssue(_setToken, _quantity);\\n\\n        // For each position, transfer the required underlying to the SetToken\\n        for (uint256 i = 0; i < components.length; i++) {\\n            // Transfer the component to the SetToken\\n            transferFrom(\\n                IERC20(components[i]),\\n                msg.sender,\\n                address(_setToken),\\n                componentQuantities[i]\\n            );\\n        }\\n\\n        // Mint the SetToken\\n        _setToken.mint(_to, _quantity);\\n\\n        emit SetTokenIssued(\\n            address(_setToken),\\n            msg.sender,\\n            _to,\\n            hookContract,\\n            _quantity\\n        );\\n    }\\n\\n    /**\\n     * Redeems the SetToken's positions and sends the components of the given\\n     * quantity to the caller. This function only handles Default Positions (positionState = 0).\\n     *\\n     * @param _setToken             Instance of the SetToken contract\\n     * @param _quantity             Quantity of the SetToken to redeem\\n     * @param _to                   Address to send component assets to\\n     */\\n    function redeem(\\n        ISetToken _setToken,\\n        uint256 _quantity,\\n        address _to\\n    ) external nonReentrant onlyValidAndInitializedSet(_setToken) {\\n        require(_quantity > 0, \\\"Redeem quantity must be > 0\\\");\\n\\n        // Burn the SetToken - ERC20's internal burn already checks that the user has enough balance\\n        _setToken.burn(msg.sender, _quantity);\\n\\n        // For each position, invoke the SetToken to transfer the tokens to the user\\n        address[] memory components = _setToken.getComponents();\\n        for (uint256 i = 0; i < components.length; i++) {\\n            address component = components[i];\\n            require(\\n                !_setToken.hasExternalPosition(component),\\n                \\\"Only default positions are supported\\\"\\n            );\\n\\n            uint256 unit =\\n                _setToken.getDefaultPositionRealUnit(component).toUint256();\\n\\n            // Use preciseMul to round down to ensure overcollateration when small redeem quantities are provided\\n            uint256 componentQuantity = _quantity.preciseMul(unit);\\n\\n            // Instruct the SetToken to transfer the component to the user\\n            _setToken.strictInvokeTransfer(component, _to, componentQuantity);\\n        }\\n\\n        emit SetTokenRedeemed(address(_setToken), msg.sender, _to, _quantity);\\n    }\\n\\n    /**\\n     * Initializes this module to the SetToken with issuance-related hooks. Only callable by the SetToken's manager.\\n     * Hook addresses are optional. Address(0) means that no hook will be called\\n     *\\n     * @param _setToken             Instance of the SetToken to issue\\n     * @param _preIssueHook         Instance of the Manager Contract with the Pre-Issuance Hook function\\n     */\\n    function initialize(ISetToken _setToken, IManagerIssuanceHook _preIssueHook)\\n        external\\n        onlySetManager(_setToken, msg.sender)\\n        onlyValidAndPendingSet(_setToken)\\n    {\\n        managerIssuanceHook[_setToken] = _preIssueHook;\\n\\n        _setToken.initializeModule();\\n    }\\n\\n    /**\\n     * Reverts as this module should not be removable after added. Users should always\\n     * have a way to redeem their Sets\\n     */\\n    function removeModule() external pure override {\\n        revert(\\\"The BasicIssuanceModule module cannot be removed\\\");\\n    }\\n\\n    /* ============ External Getter Functions ============ */\\n\\n    /**\\n     * Retrieves the addresses and units required to mint a particular quantity of SetToken.\\n     *\\n     * @param _setToken             Instance of the SetToken to issue\\n     * @param _quantity             Quantity of SetToken to issue\\n     * @return address[]            List of component addresses\\n     * @return uint256[]            List of component units required to issue the quantity of SetTokens\\n     */\\n    function getRequiredComponentUnitsForIssue(\\n        ISetToken _setToken,\\n        uint256 _quantity\\n    )\\n        public\\n        view\\n        onlyValidAndInitializedSet(_setToken)\\n        returns (address[] memory, uint256[] memory)\\n    {\\n        address[] memory components = _setToken.getComponents();\\n\\n        uint256[] memory notionalUnits = new uint256[](components.length);\\n\\n        for (uint256 i = 0; i < components.length; i++) {\\n            require(\\n                !_setToken.hasExternalPosition(components[i]),\\n                \\\"Only default positions are supported\\\"\\n            );\\n\\n            notionalUnits[i] = _setToken\\n                .getDefaultPositionRealUnit(components[i])\\n                .toUint256()\\n                .preciseMulCeil(_quantity);\\n        }\\n\\n        return (components, notionalUnits);\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     * If a pre-issue hook has been configured, call the external-protocol contract. Pre-issue hook logic\\n     * can contain arbitrary logic including validations, external function calls, etc.\\n     */\\n    function _callPreIssueHooks(\\n        ISetToken _setToken,\\n        uint256 _quantity,\\n        address _caller,\\n        address _to\\n    ) internal returns (address) {\\n        IManagerIssuanceHook preIssueHook = managerIssuanceHook[_setToken];\\n        if (address(preIssueHook) != address(0)) {\\n            preIssueHook.invokePreIssueHook(_setToken, _quantity, _caller, _to);\\n            return address(preIssueHook);\\n        }\\n\\n        return address(0);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value < 2**128, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value < 2**64, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value < 2**32, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value < 2**16, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value < 2**8, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= -2**127 && value < 2**127, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= -2**63 && value < 2**63, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= -2**31 && value < 2**31, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= -2**15 && value < 2**15, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= -2**7 && value < 2**7, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        require(value < 2**255, \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/v1-v2-migration/interfaces/IController.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.7.6;\\n\\ninterface IController {\\n    function addSet(address _setToken) external;\\n\\n    function feeRecipient() external view returns (address);\\n\\n    function getModuleFee(address _module, uint256 _feeType)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function isModule(address _module) external view returns (bool);\\n\\n    function isSet(address _setToken) external view returns (bool);\\n\\n    function isSystemContract(address _contractAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    function resourceId(uint256 _id) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/v1-v2-migration/interfaces/IManagerIssuanceHook.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.7.6;\\n\\nimport {ISetToken} from \\\"./ISetToken.sol\\\";\\n\\ninterface IManagerIssuanceHook {\\n    function invokePreIssueHook(\\n        ISetToken _setToken,\\n        uint256 _issueQuantity,\\n        address _sender,\\n        address _to\\n    ) external;\\n\\n    function invokePreRedeemHook(\\n        ISetToken _setToken,\\n        uint256 _redeemQuantity,\\n        address _sender,\\n        address _to\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/v1-v2-migration/protocol/lib/Invoke.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.7.6;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport {ISetToken} from \\\"../../interfaces/ISetToken.sol\\\";\\n\\n/**\\n * @title Invoke\\n * @author Set Protocol\\n *\\n * A collection of common utility functions for interacting with the SetToken's invoke function\\n */\\nlibrary Invoke {\\n    using SafeMath for uint256;\\n\\n    /* ============ Internal ============ */\\n\\n    /**\\n     * Instructs the SetToken to set approvals of the ERC20 token to a spender.\\n     *\\n     * @param _setToken        SetToken instance to invoke\\n     * @param _token           ERC20 token to approve\\n     * @param _spender         The account allowed to spend the SetToken's balance\\n     * @param _quantity        The quantity of allowance to allow\\n     */\\n    function invokeApprove(\\n        ISetToken _setToken,\\n        address _token,\\n        address _spender,\\n        uint256 _quantity\\n    ) internal {\\n        bytes memory callData =\\n            abi.encodeWithSignature(\\n                \\\"approve(address,uint256)\\\",\\n                _spender,\\n                _quantity\\n            );\\n        _setToken.invoke(_token, 0, callData);\\n    }\\n\\n    /**\\n     * Instructs the SetToken to transfer the ERC20 token to a recipient.\\n     *\\n     * @param _setToken        SetToken instance to invoke\\n     * @param _token           ERC20 token to transfer\\n     * @param _to              The recipient account\\n     * @param _quantity        The quantity to transfer\\n     */\\n    function invokeTransfer(\\n        ISetToken _setToken,\\n        address _token,\\n        address _to,\\n        uint256 _quantity\\n    ) internal {\\n        if (_quantity > 0) {\\n            bytes memory callData =\\n                abi.encodeWithSignature(\\n                    \\\"transfer(address,uint256)\\\",\\n                    _to,\\n                    _quantity\\n                );\\n            _setToken.invoke(_token, 0, callData);\\n        }\\n    }\\n\\n    /**\\n     * Instructs the SetToken to transfer the ERC20 token to a recipient.\\n     * The new SetToken balance must equal the existing balance less the quantity transferred\\n     *\\n     * @param _setToken        SetToken instance to invoke\\n     * @param _token           ERC20 token to transfer\\n     * @param _to              The recipient account\\n     * @param _quantity        The quantity to transfer\\n     */\\n    function strictInvokeTransfer(\\n        ISetToken _setToken,\\n        address _token,\\n        address _to,\\n        uint256 _quantity\\n    ) internal {\\n        if (_quantity > 0) {\\n            // Retrieve current balance of token for the SetToken\\n            uint256 existingBalance =\\n                IERC20(_token).balanceOf(address(_setToken));\\n\\n            Invoke.invokeTransfer(_setToken, _token, _to, _quantity);\\n\\n            // Get new balance of transferred token for SetToken\\n            uint256 newBalance = IERC20(_token).balanceOf(address(_setToken));\\n\\n            // Verify only the transfer quantity is subtracted\\n            require(\\n                newBalance == existingBalance.sub(_quantity),\\n                \\\"Invalid post transfer balance\\\"\\n            );\\n        }\\n    }\\n\\n    /**\\n     * Instructs the SetToken to unwrap the passed quantity of WETH\\n     *\\n     * @param _setToken        SetToken instance to invoke\\n     * @param _weth            WETH address\\n     * @param _quantity        The quantity to unwrap\\n     */\\n    function invokeUnwrapWETH(\\n        ISetToken _setToken,\\n        address _weth,\\n        uint256 _quantity\\n    ) internal {\\n        bytes memory callData =\\n            abi.encodeWithSignature(\\\"withdraw(uint256)\\\", _quantity);\\n        _setToken.invoke(_weth, 0, callData);\\n    }\\n\\n    /**\\n     * Instructs the SetToken to wrap the passed quantity of ETH\\n     *\\n     * @param _setToken        SetToken instance to invoke\\n     * @param _weth            WETH address\\n     * @param _quantity        The quantity to unwrap\\n     */\\n    function invokeWrapWETH(\\n        ISetToken _setToken,\\n        address _weth,\\n        uint256 _quantity\\n    ) internal {\\n        bytes memory callData = abi.encodeWithSignature(\\\"deposit()\\\");\\n        _setToken.invoke(_weth, _quantity, callData);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/v1-v2-migration/protocol/lib/ModuleBase.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.7.6;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {ExplicitERC20} from \\\"../../lib/ExplicitERC20.sol\\\";\\nimport {IController} from \\\"../../interfaces/IController.sol\\\";\\nimport {IModule} from \\\"../../interfaces/IModule.sol\\\";\\nimport {ISetToken} from \\\"../../interfaces/ISetToken.sol\\\";\\nimport {Invoke} from \\\"./Invoke.sol\\\";\\nimport {PreciseUnitMath} from \\\"../../lib/PreciseUnitMath.sol\\\";\\nimport {ResourceIdentifier} from \\\"./ResourceIdentifier.sol\\\";\\n\\n/**\\n * @title ModuleBase\\n * @author Set Protocol\\n *\\n * Abstract class that houses common Module-related state and functions.\\n */\\nabstract contract ModuleBase is IModule {\\n    using PreciseUnitMath for uint256;\\n    using Invoke for ISetToken;\\n    using ResourceIdentifier for IController;\\n\\n    /* ============ State Variables ============ */\\n\\n    // Address of the controller\\n    IController public controller;\\n\\n    /* ============ Modifiers ============ */\\n\\n    modifier onlyManagerAndValidSet(ISetToken _setToken) {\\n        require(\\n            isSetManager(_setToken, msg.sender),\\n            \\\"Must be the SetToken manager\\\"\\n        );\\n        require(\\n            isSetValidAndInitialized(_setToken),\\n            \\\"Must be a valid and initialized SetToken\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlySetManager(ISetToken _setToken, address _caller) {\\n        require(\\n            isSetManager(_setToken, _caller),\\n            \\\"Must be the SetToken manager\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyValidAndInitializedSet(ISetToken _setToken) {\\n        require(\\n            isSetValidAndInitialized(_setToken),\\n            \\\"Must be a valid and initialized SetToken\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * Throws if the sender is not a SetToken's module or module not enabled\\n     */\\n    modifier onlyModule(ISetToken _setToken) {\\n        require(\\n            _setToken.moduleStates(msg.sender) ==\\n                ISetToken.ModuleState.INITIALIZED,\\n            \\\"Only the module can call\\\"\\n        );\\n\\n        require(\\n            controller.isModule(msg.sender),\\n            \\\"Module must be enabled on controller\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * Utilized during module initializations to check that the module is in pending state\\n     * and that the SetToken is valid\\n     */\\n    modifier onlyValidAndPendingSet(ISetToken _setToken) {\\n        require(\\n            controller.isSet(address(_setToken)),\\n            \\\"Must be controller-enabled SetToken\\\"\\n        );\\n        require(\\n            isSetPendingInitialization(_setToken),\\n            \\\"Must be pending initialization\\\"\\n        );\\n        _;\\n    }\\n\\n    /* ============ Constructor ============ */\\n\\n    /**\\n     * Set state variables and map asset pairs to their oracles\\n     *\\n     * @param _controller             Address of controller contract\\n     */\\n    constructor(IController _controller) {\\n        controller = _controller;\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     * Transfers tokens from an address (that has set allowance on the module).\\n     *\\n     * @param  _token          The address of the ERC20 token\\n     * @param  _from           The address to transfer from\\n     * @param  _to             The address to transfer to\\n     * @param  _quantity       The number of tokens to transfer\\n     */\\n    function transferFrom(\\n        IERC20 _token,\\n        address _from,\\n        address _to,\\n        uint256 _quantity\\n    ) internal {\\n        ExplicitERC20.transferFrom(_token, _from, _to, _quantity);\\n    }\\n\\n    /**\\n     * Gets the integration for the module with the passed in name. Validates that the address is not empty\\n     */\\n    function getAndValidateAdapter(string memory _integrationName)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        bytes32 integrationHash = getNameHash(_integrationName);\\n        return getAndValidateAdapterWithHash(integrationHash);\\n    }\\n\\n    /**\\n     * Gets the integration for the module with the passed in hash. Validates that the address is not empty\\n     */\\n    function getAndValidateAdapterWithHash(bytes32 _integrationHash)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        address adapter =\\n            controller.getIntegrationRegistry().getIntegrationAdapterWithHash(\\n                address(this),\\n                _integrationHash\\n            );\\n\\n        require(adapter != address(0), \\\"Must be valid adapter\\\");\\n        return adapter;\\n    }\\n\\n    /**\\n     * Gets the total fee for this module of the passed in index (fee % * quantity)\\n     */\\n    function getModuleFee(uint256 _feeIndex, uint256 _quantity)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 feePercentage =\\n            controller.getModuleFee(address(this), _feeIndex);\\n        return _quantity.preciseMul(feePercentage);\\n    }\\n\\n    /**\\n     * Pays the _feeQuantity from the _setToken denominated in _token to the protocol fee recipient\\n     */\\n    function payProtocolFeeFromSetToken(\\n        ISetToken _setToken,\\n        address _token,\\n        uint256 _feeQuantity\\n    ) internal {\\n        if (_feeQuantity > 0) {\\n            _setToken.strictInvokeTransfer(\\n                _token,\\n                controller.feeRecipient(),\\n                _feeQuantity\\n            );\\n        }\\n    }\\n\\n    /**\\n     * Returns true if the module is in process of initialization on the SetToken\\n     */\\n    function isSetPendingInitialization(ISetToken _setToken)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _setToken.isPendingModule(address(this));\\n    }\\n\\n    /**\\n     * Returns true if the address is the SetToken's manager\\n     */\\n    function isSetManager(ISetToken _setToken, address _toCheck)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _setToken.manager() == _toCheck;\\n    }\\n\\n    /**\\n     * Returns true if SetToken must be enabled on the controller\\n     * and module is registered on the SetToken\\n     */\\n    function isSetValidAndInitialized(ISetToken _setToken)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return\\n            controller.isSet(address(_setToken)) &&\\n            _setToken.isInitializedModule(address(this));\\n    }\\n\\n    /**\\n     * Hashes the string and returns a bytes32 value\\n     */\\n    function getNameHash(string memory _name) internal pure returns (bytes32) {\\n        return keccak256(bytes(_name));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/v1-v2-migration/protocol/lib/Position.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.7.6;\\npragma experimental \\\"ABIEncoderV2\\\";\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/SafeCast.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport {SignedSafeMath} from \\\"@openzeppelin/contracts/math/SignedSafeMath.sol\\\";\\n\\nimport {ISetToken} from \\\"../../interfaces/ISetToken.sol\\\";\\nimport {PreciseUnitMath} from \\\"../../lib/PreciseUnitMath.sol\\\";\\n\\n/**\\n * @title Position\\n * @author Set Protocol\\n *\\n * Collection of helper functions for handling and updating SetToken Positions\\n *\\n * CHANGELOG:\\n *  - Updated editExternalPosition to work when no external position is associated with module\\n */\\nlibrary Position {\\n    using SafeCast for uint256;\\n    using SafeMath for uint256;\\n    using SafeCast for int256;\\n    using SignedSafeMath for int256;\\n    using PreciseUnitMath for uint256;\\n\\n    /* ============ Helper ============ */\\n\\n    /**\\n     * Returns whether the SetToken has a default position for a given component (if the real unit is > 0)\\n     */\\n    function hasDefaultPosition(ISetToken _setToken, address _component)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _setToken.getDefaultPositionRealUnit(_component) > 0;\\n    }\\n\\n    /**\\n     * Returns whether the SetToken has an external position for a given component (if # of position modules is > 0)\\n     */\\n    function hasExternalPosition(ISetToken _setToken, address _component)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _setToken.getExternalPositionModules(_component).length > 0;\\n    }\\n\\n    /**\\n     * Returns whether the SetToken component default position real unit is greater than or equal to units passed in.\\n     */\\n    function hasSufficientDefaultUnits(\\n        ISetToken _setToken,\\n        address _component,\\n        uint256 _unit\\n    ) internal view returns (bool) {\\n        return\\n            _setToken.getDefaultPositionRealUnit(_component) >=\\n            _unit.toInt256();\\n    }\\n\\n    /**\\n     * Returns whether the SetToken component external position is greater than or equal to the real units passed in.\\n     */\\n    function hasSufficientExternalUnits(\\n        ISetToken _setToken,\\n        address _component,\\n        address _positionModule,\\n        uint256 _unit\\n    ) internal view returns (bool) {\\n        return\\n            _setToken.getExternalPositionRealUnit(\\n                _component,\\n                _positionModule\\n            ) >= _unit.toInt256();\\n    }\\n\\n    /**\\n     * If the position does not exist, create a new Position and add to the SetToken. If it already exists,\\n     * then set the position units. If the new units is 0, remove the position. Handles adding/removing of\\n     * components where needed (in light of potential external positions).\\n     *\\n     * @param _setToken           Address of SetToken being modified\\n     * @param _component          Address of the component\\n     * @param _newUnit            Quantity of Position units - must be >= 0\\n     */\\n    function editDefaultPosition(\\n        ISetToken _setToken,\\n        address _component,\\n        uint256 _newUnit\\n    ) internal {\\n        bool isPositionFound = hasDefaultPosition(_setToken, _component);\\n        if (!isPositionFound && _newUnit > 0) {\\n            // If there is no Default Position and no External Modules, then component does not exist\\n            if (!hasExternalPosition(_setToken, _component)) {\\n                _setToken.addComponent(_component);\\n            }\\n        } else if (isPositionFound && _newUnit == 0) {\\n            // If there is a Default Position and no external positions, remove the component\\n            if (!hasExternalPosition(_setToken, _component)) {\\n                _setToken.removeComponent(_component);\\n            }\\n        }\\n\\n        _setToken.editDefaultPositionUnit(_component, _newUnit.toInt256());\\n    }\\n\\n    /**\\n     * Update an external position and remove and external positions or components if necessary. The logic flows as follows:\\n     * 1) If component is not already added then add component and external position.\\n     * 2) If component is added but no existing external position using the passed module exists then add the external position.\\n     * 3) If the existing position is being added to then just update the unit and data\\n     * 4) If the position is being closed and no other external positions or default positions are associated with the component\\n     *    then untrack the component and remove external position.\\n     * 5) If the position is being closed and other existing positions still exist for the component then just remove the\\n     *    external position.\\n     *\\n     * @param _setToken         SetToken being updated\\n     * @param _component        Component position being updated\\n     * @param _module           Module external position is associated with\\n     * @param _newUnit          Position units of new external position\\n     * @param _data             Arbitrary data associated with the position\\n     */\\n    function editExternalPosition(\\n        ISetToken _setToken,\\n        address _component,\\n        address _module,\\n        int256 _newUnit,\\n        bytes memory _data\\n    ) internal {\\n        if (_newUnit != 0) {\\n            if (!_setToken.isComponent(_component)) {\\n                _setToken.addComponent(_component);\\n                _setToken.addExternalPositionModule(_component, _module);\\n            } else if (\\n                !_setToken.isExternalPositionModule(_component, _module)\\n            ) {\\n                _setToken.addExternalPositionModule(_component, _module);\\n            }\\n            _setToken.editExternalPositionUnit(_component, _module, _newUnit);\\n            _setToken.editExternalPositionData(_component, _module, _data);\\n        } else {\\n            require(_data.length == 0, \\\"Passed data must be null\\\");\\n            // If no default or external position remaining then remove component from components array\\n            if (\\n                _setToken.getExternalPositionRealUnit(_component, _module) != 0\\n            ) {\\n                address[] memory positionModules =\\n                    _setToken.getExternalPositionModules(_component);\\n                if (\\n                    _setToken.getDefaultPositionRealUnit(_component) == 0 &&\\n                    positionModules.length == 1\\n                ) {\\n                    require(\\n                        positionModules[0] == _module,\\n                        \\\"External positions must be 0 to remove component\\\"\\n                    );\\n                    _setToken.removeComponent(_component);\\n                }\\n                _setToken.removeExternalPositionModule(_component, _module);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Get total notional amount of Default position\\n     *\\n     * @param _setTokenSupply     Supply of SetToken in precise units (10^18)\\n     * @param _positionUnit       Quantity of Position units\\n     *\\n     * @return                    Total notional amount of units\\n     */\\n    function getDefaultTotalNotional(\\n        uint256 _setTokenSupply,\\n        uint256 _positionUnit\\n    ) internal pure returns (uint256) {\\n        return _setTokenSupply.preciseMul(_positionUnit);\\n    }\\n\\n    /**\\n     * Get position unit from total notional amount\\n     *\\n     * @param _setTokenSupply     Supply of SetToken in precise units (10^18)\\n     * @param _totalNotional      Total notional amount of component prior to\\n     * @return                    Default position unit\\n     */\\n    function getDefaultPositionUnit(\\n        uint256 _setTokenSupply,\\n        uint256 _totalNotional\\n    ) internal pure returns (uint256) {\\n        return _totalNotional.preciseDiv(_setTokenSupply);\\n    }\\n\\n    /**\\n     * Get the total tracked balance - total supply * position unit\\n     *\\n     * @param _setToken           Address of the SetToken\\n     * @param _component          Address of the component\\n     * @return                    Notional tracked balance\\n     */\\n    function getDefaultTrackedBalance(ISetToken _setToken, address _component)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        int256 positionUnit = _setToken.getDefaultPositionRealUnit(_component);\\n        return _setToken.totalSupply().preciseMul(positionUnit.toUint256());\\n    }\\n\\n    /**\\n     * Calculates the new default position unit and performs the edit with the new unit\\n     *\\n     * @param _setToken                 Address of the SetToken\\n     * @param _component                Address of the component\\n     * @param _setTotalSupply           Current SetToken supply\\n     * @param _componentPreviousBalance Pre-action component balance\\n     * @return                          Current component balance\\n     * @return                          Previous position unit\\n     * @return                          New position unit\\n     */\\n    function calculateAndEditDefaultPosition(\\n        ISetToken _setToken,\\n        address _component,\\n        uint256 _setTotalSupply,\\n        uint256 _componentPreviousBalance\\n    )\\n        internal\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        uint256 currentBalance =\\n            IERC20(_component).balanceOf(address(_setToken));\\n        uint256 positionUnit =\\n            _setToken.getDefaultPositionRealUnit(_component).toUint256();\\n\\n        uint256 newTokenUnit;\\n        if (currentBalance > 0) {\\n            newTokenUnit = calculateDefaultEditPositionUnit(\\n                _setTotalSupply,\\n                _componentPreviousBalance,\\n                currentBalance,\\n                positionUnit\\n            );\\n        } else {\\n            newTokenUnit = 0;\\n        }\\n\\n        editDefaultPosition(_setToken, _component, newTokenUnit);\\n\\n        return (currentBalance, positionUnit, newTokenUnit);\\n    }\\n\\n    /**\\n     * Calculate the new position unit given total notional values pre and post executing an action that changes SetToken state\\n     * The intention is to make updates to the units without accidentally picking up airdropped assets as well.\\n     *\\n     * @param _setTokenSupply     Supply of SetToken in precise units (10^18)\\n     * @param _preTotalNotional   Total notional amount of component prior to executing action\\n     * @param _postTotalNotional  Total notional amount of component after the executing action\\n     * @param _prePositionUnit    Position unit of SetToken prior to executing action\\n     * @return                    New position unit\\n     */\\n    function calculateDefaultEditPositionUnit(\\n        uint256 _setTokenSupply,\\n        uint256 _preTotalNotional,\\n        uint256 _postTotalNotional,\\n        uint256 _prePositionUnit\\n    ) internal pure returns (uint256) {\\n        // If pre action total notional amount is greater then subtract post action total notional and calculate new position units\\n        uint256 airdroppedAmount =\\n            _preTotalNotional.sub(_prePositionUnit.preciseMul(_setTokenSupply));\\n        return\\n            _postTotalNotional.sub(airdroppedAmount).preciseDiv(\\n                _setTokenSupply\\n            );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/v1-v2-migration/lib/PreciseUnitMath.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport {SignedSafeMath} from \\\"@openzeppelin/contracts/math/SignedSafeMath.sol\\\";\\n\\n/**\\n * @title PreciseUnitMath\\n * @author Set Protocol\\n *\\n * Arithmetic for fixed-point numbers with 18 decimals of precision. Some functions taken from\\n * dYdX's BaseMath library.\\n *\\n * CHANGELOG:\\n * - 9/21/20: Added safePower function\\n */\\nlibrary PreciseUnitMath {\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    // The number One in precise units.\\n    uint256 internal constant PRECISE_UNIT = 10**18;\\n    int256 internal constant PRECISE_UNIT_INT = 10**18;\\n\\n    // Max unsigned integer value\\n    uint256 internal constant MAX_UINT_256 = type(uint256).max;\\n    // Max and min signed integer value\\n    int256 internal constant MAX_INT_256 = type(int256).max;\\n    int256 internal constant MIN_INT_256 = type(int256).min;\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function preciseUnit() internal pure returns (uint256) {\\n        return PRECISE_UNIT;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function preciseUnitInt() internal pure returns (int256) {\\n        return PRECISE_UNIT_INT;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function maxUint256() internal pure returns (uint256) {\\n        return MAX_UINT_256;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function maxInt256() internal pure returns (int256) {\\n        return MAX_INT_256;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function minInt256() internal pure returns (int256) {\\n        return MIN_INT_256;\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b (result is rounded down). It's assumed that the value b is the significand\\n     * of a number with 18 decimals precision.\\n     */\\n    function preciseMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a.mul(b).div(PRECISE_UNIT);\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b (result is rounded towards zero). It's assumed that the value b is the\\n     * significand of a number with 18 decimals precision.\\n     */\\n    function preciseMul(int256 a, int256 b) internal pure returns (int256) {\\n        return a.mul(b).div(PRECISE_UNIT_INT);\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b (result is rounded up). It's assumed that the value b is the significand\\n     * of a number with 18 decimals precision.\\n     */\\n    function preciseMulCeil(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        return a.mul(b).sub(1).div(PRECISE_UNIT).add(1);\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded down).\\n     */\\n    function preciseDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a.mul(PRECISE_UNIT).div(b);\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded towards 0).\\n     */\\n    function preciseDiv(int256 a, int256 b) internal pure returns (int256) {\\n        return a.mul(PRECISE_UNIT_INT).div(b);\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded up or away from 0).\\n     */\\n    function preciseDivCeil(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        require(b != 0, \\\"Cant divide by 0\\\");\\n\\n        return a > 0 ? a.mul(PRECISE_UNIT).sub(1).div(b).add(1) : 0;\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded down - positive numbers toward 0 and negative away from 0).\\n     */\\n    function divDown(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"Cant divide by 0\\\");\\n        require(a != MIN_INT_256 || b != -1, \\\"Invalid input\\\");\\n\\n        int256 result = a.div(b);\\n        if (a ^ b < 0 && a % b != 0) {\\n            result -= 1;\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b where rounding is towards the lesser number.\\n     * (positive values are rounded towards zero and negative values are rounded away from 0).\\n     */\\n    function conservativePreciseMul(int256 a, int256 b)\\n        internal\\n        pure\\n        returns (int256)\\n    {\\n        return divDown(a.mul(b), PRECISE_UNIT_INT);\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b where rounding is towards the lesser number.\\n     * (positive values are rounded towards zero and negative values are rounded away from 0).\\n     */\\n    function conservativePreciseDiv(int256 a, int256 b)\\n        internal\\n        pure\\n        returns (int256)\\n    {\\n        return divDown(a.mul(PRECISE_UNIT_INT), b);\\n    }\\n\\n    /**\\n     * @dev Performs the power on a specified value, reverts on overflow.\\n     */\\n    function safePower(uint256 a, uint256 pow) internal pure returns (uint256) {\\n        require(a > 0, \\\"Value must be positive\\\");\\n\\n        uint256 result = 1;\\n        for (uint256 i = 0; i < pow; i++) {\\n            uint256 previousResult = result;\\n\\n            // Using safemath multiplication prevents overflows\\n            result = previousResult.mul(a);\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/v1-v2-migration/lib/ExplicitERC20.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.7.6;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n/**\\n * @title ExplicitERC20\\n * @author Set Protocol\\n *\\n * Utility functions for ERC20 transfers that require the explicit amount to be transferred.\\n */\\nlibrary ExplicitERC20 {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * When given allowance, transfers a token from the \\\"_from\\\" to the \\\"_to\\\" of quantity \\\"_quantity\\\".\\n     * Ensures that the recipient has received the correct quantity (ie no fees taken on transfer)\\n     *\\n     * @param _token           ERC20 token to approve\\n     * @param _from            The account to transfer tokens from\\n     * @param _to              The account to transfer tokens to\\n     * @param _quantity        The quantity to transfer\\n     */\\n    function transferFrom(\\n        IERC20 _token,\\n        address _from,\\n        address _to,\\n        uint256 _quantity\\n    ) internal {\\n        // Call specified ERC20 contract to transfer tokens (via proxy).\\n        if (_quantity > 0) {\\n            uint256 existingBalance = _token.balanceOf(_to);\\n\\n            SafeERC20.safeTransferFrom(_token, _from, _to, _quantity);\\n\\n            uint256 newBalance = _token.balanceOf(_to);\\n\\n            // Verify transfer quantity is reflected in balance\\n            require(\\n                newBalance == existingBalance.add(_quantity),\\n                \\\"Invalid post transfer balance\\\"\\n            );\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/v1-v2-migration/interfaces/IModule.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.7.6;\\n\\n/**\\n * @title IModule\\n * @author Set Protocol\\n *\\n * Interface for interacting with Modules.\\n */\\ninterface IModule {\\n    /**\\n     * Called by a SetToken to notify that this module was removed from the Set token. Any logic can be included\\n     * in case checks need to be made or state needs to be cleared.\\n     */\\n    function removeModule() external;\\n}\\n\"\r\n    },\r\n    \"contracts/v1-v2-migration/protocol/lib/ResourceIdentifier.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.7.6;\\n\\nimport {IController} from \\\"../../interfaces/IController.sol\\\";\\nimport {IIntegrationRegistry} from \\\"../../interfaces/IIntegrationRegistry.sol\\\";\\nimport {IPriceOracle} from \\\"../../interfaces/IPriceOracle.sol\\\";\\nimport {ISetValuer} from \\\"../../interfaces/ISetValuer.sol\\\";\\n\\n/**\\n * @title ResourceIdentifier\\n * @author Set Protocol\\n *\\n * A collection of utility functions to fetch information related to Resource contracts in the system\\n */\\nlibrary ResourceIdentifier {\\n    // IntegrationRegistry will always be resource ID 0 in the system\\n    uint256 internal constant INTEGRATION_REGISTRY_RESOURCE_ID = 0;\\n    // PriceOracle will always be resource ID 1 in the system\\n    uint256 internal constant PRICE_ORACLE_RESOURCE_ID = 1;\\n    // SetValuer resource will always be resource ID 2 in the system\\n    uint256 internal constant SET_VALUER_RESOURCE_ID = 2;\\n\\n    /* ============ Internal ============ */\\n\\n    /**\\n     * Gets the instance of integration registry stored on Controller. Note: IntegrationRegistry is stored as index 0 on\\n     * the Controller\\n     */\\n    function getIntegrationRegistry(IController _controller)\\n        internal\\n        view\\n        returns (IIntegrationRegistry)\\n    {\\n        return\\n            IIntegrationRegistry(\\n                _controller.resourceId(INTEGRATION_REGISTRY_RESOURCE_ID)\\n            );\\n    }\\n\\n    /**\\n     * Gets instance of price oracle on Controller. Note: PriceOracle is stored as index 1 on the Controller\\n     */\\n    function getPriceOracle(IController _controller)\\n        internal\\n        view\\n        returns (IPriceOracle)\\n    {\\n        return IPriceOracle(_controller.resourceId(PRICE_ORACLE_RESOURCE_ID));\\n    }\\n\\n    /**\\n     * Gets the instance of Set valuer on Controller. Note: SetValuer is stored as index 2 on the Controller\\n     */\\n    function getSetValuer(IController _controller)\\n        internal\\n        view\\n        returns (ISetValuer)\\n    {\\n        return ISetValuer(_controller.resourceId(SET_VALUER_RESOURCE_ID));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SignedSafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title SignedSafeMath\\n * @dev Signed math operations with safety checks that revert on error.\\n */\\nlibrary SignedSafeMath {\\n    int256 constant private _INT256_MIN = -2**255;\\n\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/v1-v2-migration/interfaces/IIntegrationRegistry.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.7.6;\\n\\ninterface IIntegrationRegistry {\\n    function addIntegration(\\n        address _module,\\n        string memory _id,\\n        address _wrapper\\n    ) external;\\n\\n    function getIntegrationAdapter(address _module, string memory _id)\\n        external\\n        view\\n        returns (address);\\n\\n    function getIntegrationAdapterWithHash(address _module, bytes32 _id)\\n        external\\n        view\\n        returns (address);\\n\\n    function isValidIntegration(address _module, string memory _id)\\n        external\\n        view\\n        returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/v1-v2-migration/interfaces/IPriceOracle.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.7.6;\\n\\n/**\\n * @title IPriceOracle\\n * @author Set Protocol\\n *\\n * Interface for interacting with PriceOracle\\n */\\ninterface IPriceOracle {\\n    /* ============ Functions ============ */\\n\\n    function getPrice(address _assetOne, address _assetTwo)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function masterQuoteAsset() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/v1-v2-migration/interfaces/ISetValuer.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.7.6;\\n\\nimport {ISetToken} from \\\"../interfaces/ISetToken.sol\\\";\\n\\ninterface ISetValuer {\\n    function calculateSetTokenValuation(\\n        ISetToken _setToken,\\n        address _quoteAsset\\n    ) external view returns (uint256);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract ICore\",\"name\":\"_coreV1\",\"type\":\"address\"},{\"internalType\":\"contract BasicIssuanceModule\",\"name\":\"_basicIssuanceModuleV2\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_fundV1\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_fundV2\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"FundMigrated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"basicIssuanceModuleV2\",\"outputs\":[{\"internalType\":\"contract BasicIssuanceModule\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coreV1\",\"outputs\":[{\"internalType\":\"contract ICore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fundV1\",\"type\":\"address\"},{\"internalType\":\"contract ISetToken\",\"name\":\"_fundV2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"migrateFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"tokenHeld\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fund\",\"type\":\"address\"}],\"name\":\"tokensHeld\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DextfV2Migration","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000f665208dfd05ee5e8a1e637ef0d48f0c1d585a39000000000000000000000000ba1030459e75f6041f938c5470f4e0f6468d5253","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}