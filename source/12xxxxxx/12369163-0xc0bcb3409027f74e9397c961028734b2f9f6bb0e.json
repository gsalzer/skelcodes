{"status":"1","message":"OK","result":[{"SourceCode":"// Dependency file: @openzeppelin/contracts/utils/Context.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// pragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// pragma solidity ^0.8.0;\r\n\r\n// import \"@openzeppelin/contracts/utils/Context.sol\";\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/security/Pausable.sol\r\n\r\n\r\n// pragma solidity ^0.8.0;\r\n\r\n// import \"@openzeppelin/contracts/utils/Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor () {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// pragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/security/ReentrancyGuard.sol\r\n\r\n\r\n// pragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\n\r\n// pragma solidity ^0.8.0;\r\n\r\n// import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n// import \"@openzeppelin/contracts/utils/Context.sol\";\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The defaut value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overloaded;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[sender] = senderBalance - amount;\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        _balances[account] = accountBalance - amount;\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n\r\n// Dependency file: contracts/token/ZilliosToken.sol\r\n\r\n\r\n// pragma solidity 0.8.0;\r\n\r\n// import \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n// import \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract ZilliosToken is ERC20, Ownable {\r\n    event Mint(address indexed to, uint256 amount);\r\n    event MintFinished();\r\n\r\n    bool public mintingFinished = false;\r\n\r\n    constructor(string memory name_, string memory symbol_) ERC20(name_, symbol_) Ownable() {}\r\n\r\n    modifier canMint() {\r\n        require(!mintingFinished, \"ERC20: Minting is finished\");\r\n        _;\r\n    }\r\n\r\n    function mint(address _to, uint256 _amount) external onlyOwner canMint returns (bool) {\r\n        _mint(_to, _amount);\r\n        return true;\r\n    }\r\n\r\n    function finishMinting() external onlyOwner returns (bool) {\r\n        mintingFinished = true;\r\n        emit MintFinished();\r\n        return true;\r\n    }\r\n\r\n    function burn(uint256 _unsoldTokens) external onlyOwner returns (bool) {\r\n        _burn(msg.sender, _unsoldTokens);\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/base/Crowdsale.sol\r\n\r\n\r\n// pragma solidity 0.8.0;\r\n\r\n// import \"@openzeppelin/contracts/access/Ownable.sol\";\r\n// import \"@openzeppelin/contracts/security/Pausable.sol\";\r\n// import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n// import \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\n// import \"contracts/token/ZilliosToken.sol\";\r\n\r\ncontract Crowdsale is Ownable, Pausable, ReentrancyGuard {\r\n    ZilliosToken internal token;\r\n    address internal wallet;\r\n    uint256 public rate; //for rate use in wei, for example, rate 1 is 1**10^18, 1.5 - 1.5*10^18\r\n    uint256 internal weiRaised;\r\n    uint256 public ICOstartTime;\r\n    uint256 public ICOEndTime;\r\n    uint256 public totalSupply = 1000000000 * (1 ether);\r\n\r\n    // SUPPLIES :: START\r\n    uint256 public publicSupply = 400000000 * (1 ether);\r\n    uint256 public teamFounderSupply = 250000000 * (1 ether);\r\n    uint256 public companyVestingSupply = 250000000 * (1 ether);\r\n    uint256 public advisorSupply = 30000000 * (1 ether);\r\n    uint256 public bountySupply = 10000000 * (1 ether);\r\n    uint256 public rewardsSupply = 60000000 * (1 ether);\r\n    // SUPPLIES :: END\r\n    uint256 public teamFounderTimeLock;\r\n    uint256 public companyVestingTimeLock;\r\n    uint256 public advisorTimeLock;\r\n    uint256 internal founderCounter = 0;\r\n    uint256 internal advisorCounter = 0;\r\n    uint256 internal companyCounter = 0;\r\n    bool public checkBurnTokens;\r\n    bool public checkAlocatedBurn;\r\n\r\n    // ETH RATES again USD\r\n\r\n    uint256 public WEI_500_USD;\r\n\r\n    event TokensPurchased(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n    event WEIPriceSET(uint256 _wei_500_usd);\r\n\r\n    event RateChanged(uint256 newRate);\r\n\r\n    constructor(\r\n        uint256 _startTime,\r\n        uint256 _endTime,\r\n        uint256 _rate,\r\n        address _wallet,\r\n        ZilliosToken _token\r\n    ) Pausable() Ownable() ReentrancyGuard() {\r\n        require(_startTime >= block.timestamp, \"ZilliosCrowdsale: start time is before current time\");\r\n        require(_endTime >= _startTime, \"ZilliosCrowdsale: start time is not before end time\");\r\n        require(_rate > 0, \"ZilliosCrowdsale: rate is 0\");\r\n        require(_wallet != address(0x0), \"ZilliosCrowdsale: wallet is the zero address\");\r\n        require(address(_token) != address(0x0), \"ZilliosCrowdsale: token is the zero address\");\r\n\r\n        ICOstartTime = _startTime;\r\n        ICOEndTime = _endTime;\r\n        rate = _rate;\r\n        wallet = _wallet;\r\n\r\n        teamFounderTimeLock = ICOEndTime + (730 days);\r\n        companyVestingTimeLock = ICOEndTime + (730 days);\r\n        advisorTimeLock = ICOEndTime + (365 days);\r\n\r\n        checkBurnTokens = false;\r\n        checkAlocatedBurn = false;\r\n\r\n        token = _token;\r\n    }\r\n\r\n    function getTokenAmount(uint256 weiAmount) internal returns (uint256) {\r\n        uint256 tokens;\r\n\r\n        if (WEI_500_USD > 0) {\r\n            if (weiAmount >= WEI_500_USD) {\r\n                // wei amount > 500 USD worth WEI\r\n\r\n                tokens = tokens + (weiAmount * rate) / 10**18;\r\n                tokens = tokens + ((tokens * 20) / 100); // 20% bonus\r\n            } else if ((weiAmount < WEI_500_USD) && (weiAmount >= ((WEI_500_USD * 100) / 25) / 10)) {\r\n                // wei amount >= 200 and < 500 USD worth WEI\r\n\r\n                tokens = tokens + (weiAmount * rate) / 10**18;\r\n                tokens = tokens + ((tokens * 15) / 100); // 15% bonus\r\n            } else if ((weiAmount < ((WEI_500_USD * 100) / 25) / 10) && (weiAmount >= (WEI_500_USD / 5))) {\r\n                // wei amount < 200 USD && >= 100 USD worth WEI\r\n\r\n                tokens = tokens + (weiAmount * rate) / 10**18;\r\n                tokens = tokens + ((tokens * 10) / 100); // 10% bonus\r\n            } else if ((weiAmount < (WEI_500_USD / 5)) && (weiAmount >= (WEI_500_USD / 20))) {\r\n                // wei amount < 100 USD && >= 25 USD worth WEI\r\n\r\n                tokens = tokens + (weiAmount * rate) / 10**18;\r\n                tokens = tokens + ((tokens * 5) / 100); // 5% bonus\r\n            } else {\r\n                tokens = tokens + (weiAmount * rate) / 10**18;\r\n            }\r\n        } else {\r\n            tokens = tokens + ((weiAmount * rate)) / 10**18;\r\n        }\r\n\r\n        publicSupply = publicSupply - tokens;\r\n        return tokens;\r\n    }\r\n\r\n    function buyTokens(address beneficiary) public payable virtual nonReentrant whenNotPaused {\r\n        require(beneficiary != address(0x0), \"ZilliosCrowdsale: beneficiary is the zero address\");\r\n        require(validPurchase(), \"ZilliosCrowdsale: purchase is not valid\");\r\n        uint256 weiAmount = msg.value;\r\n\r\n        uint256 tokens = 0;\r\n\r\n        tokens = getTokenAmount(weiAmount);\r\n\r\n        forwardFunds();\r\n\r\n        weiRaised = weiRaised + weiAmount;\r\n        token.mint(beneficiary, tokens);\r\n\r\n        emit TokensPurchased(msg.sender, beneficiary, weiAmount, tokens);\r\n    }\r\n\r\n    function setWEIPrice(uint256 _wei_500_usd) external onlyOwner {\r\n        WEI_500_USD = _wei_500_usd;\r\n\r\n        emit WEIPriceSET(WEI_500_USD);\r\n    }\r\n\r\n    function changeRate(uint256 _newRate) external onlyOwner {\r\n        rate = _newRate;\r\n\r\n        emit RateChanged(rate);\r\n    }\r\n\r\n    function forwardFunds() internal virtual {\r\n        payable(wallet).transfer(msg.value);\r\n    }\r\n\r\n    function validPurchase() internal view virtual returns (bool) {\r\n        bool withinPeriod = block.timestamp >= ICOstartTime && block.timestamp <= ICOEndTime;\r\n        bool nonZeroPurchase = true;\r\n\r\n        return withinPeriod && nonZeroPurchase && msg.value != 0;\r\n    }\r\n\r\n    function hasEnded() public view virtual returns (bool) {\r\n        return block.timestamp > ICOEndTime;\r\n    }\r\n\r\n    function getTokenAddress() public view onlyOwner returns (address) {\r\n        return address(token);\r\n    }\r\n\r\n    function pause() external onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() external onlyOwner {\r\n        _unpause();\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/distribution/RefundVault.sol\r\n\r\n\r\n// pragma solidity 0.8.0;\r\n\r\n// import \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract RefundVault is Ownable {\r\n    enum State {Active, Refunding, Closed}\r\n    mapping(address => uint256) public deposited;\r\n    address public wallet;\r\n    State public state;\r\n    event Closed();\r\n    event RefundsEnabled();\r\n    event Refunded(address indexed beneficiary, uint256 weiAmount);\r\n\r\n    constructor(address _wallet) {\r\n        require(_wallet != address(0x0));\r\n        wallet = _wallet;\r\n        state = State.Active;\r\n    }\r\n\r\n    function deposit(address investor) external payable onlyOwner {\r\n        require(state == State.Active);\r\n        deposited[investor] = deposited[investor] + msg.value;\r\n    }\r\n\r\n    function close() external onlyOwner {\r\n        require(state == State.Active);\r\n        state = State.Closed;\r\n        emit Closed();\r\n        payable(wallet).transfer(address(this).balance);\r\n    }\r\n\r\n    function enableRefunds() external onlyOwner {\r\n        require(state == State.Active);\r\n        state = State.Refunding;\r\n        emit RefundsEnabled();\r\n    }\r\n\r\n    function refund(address investor) external {\r\n        require(state == State.Refunding);\r\n        uint256 depositedValue = deposited[investor];\r\n        deposited[investor] = 0;\r\n        payable(investor).transfer(depositedValue);\r\n        emit Refunded(investor, depositedValue);\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/distribution/Allocations.sol\r\n\r\n\r\n// pragma solidity 0.8.0;\r\n\r\n// import \"contracts/base/Crowdsale.sol\";\r\n\r\ncontract Allocations is Crowdsale {\r\n    struct Bounty {\r\n        uint256 amount;\r\n        uint256 lockTime;\r\n    }\r\n\r\n    mapping(address => Bounty) public bounties;\r\n\r\n    constructor(\r\n        uint256 _startTime,\r\n        uint256 _endTime,\r\n        uint256 _rate,\r\n        address _wallet,\r\n        ZilliosToken _token\r\n    ) Crowdsale(_startTime, _endTime, _rate, _wallet, _token) {}\r\n\r\n    function bountyDrop(address[] memory recipients, uint256[] memory values) public onlyOwner {\r\n        for (uint256 i = 0; i < recipients.length; i++) {\r\n            values[i] = values[i];\r\n            require(bountySupply >= values[i]);\r\n            bountySupply = bountySupply - values[i];\r\n\r\n            bounties[recipients[i]].amount = bounties[recipients[i]].amount + values[i];\r\n            bounties[recipients[i]].lockTime = block.timestamp + 4 weeks;\r\n        }\r\n    }\r\n\r\n    function withdrawBounty() external {\r\n        Bounty memory sender_bounty = bounties[msg.sender];\r\n\r\n        require(sender_bounty.lockTime < block.timestamp, \"ZilliosToken: Vesting period of 4 weeks has not ended.\");\r\n        require(sender_bounty.amount > 0, \"ZilliosToken: No bounty found.\");\r\n\r\n        uint256 bounty_amount = sender_bounty.amount;\r\n        delete bounties[msg.sender];\r\n\r\n        token.mint(msg.sender, bounty_amount);\r\n    }\r\n\r\n    function grantAdvisorToken(address beneficiary) external onlyOwner {\r\n        require((advisorCounter < 6) && (advisorTimeLock < block.timestamp), \"ZilliosCrowdsale: cliff period is not ended\");\r\n        advisorTimeLock = advisorTimeLock + 30 days;\r\n        token.mint(beneficiary, advisorSupply / 6);\r\n        advisorCounter = advisorCounter + 1;\r\n    }\r\n\r\n    function grantTeamFounderToken(address teamfounderAddress) external onlyOwner {\r\n        require((founderCounter < 6) && (teamFounderTimeLock < block.timestamp), \"ZilliosCrowdsale: cliff period is not ended\");\r\n        teamFounderTimeLock = teamFounderTimeLock + 30 days;\r\n        token.mint(teamfounderAddress, teamFounderSupply / 6);\r\n        founderCounter = founderCounter + 1;\r\n    }\r\n\r\n    function grantCompanyToken(address companyAddress) public onlyOwner {\r\n        require((companyCounter < 12) && (companyVestingTimeLock < block.timestamp), \"ZilliosCrowdsale: cliff period is not ended\");\r\n        companyVestingTimeLock = companyVestingTimeLock + 30 days;\r\n        token.mint(companyAddress, companyVestingSupply / 12);\r\n        companyCounter = companyCounter + 1;\r\n    }\r\n\r\n    function transferRewardsFunds(address[] memory recipients, uint256[] memory values) public onlyOwner {\r\n        for (uint256 i = 0; i < recipients.length; i++) {\r\n            values[i] = values[i];\r\n            require(rewardsSupply >= values[i]);\r\n            rewardsSupply = rewardsSupply - values[i];\r\n            token.mint(recipients[i], values[i]);\r\n        }\r\n    }\r\n\r\n    function transferFunds(address[] memory recipients, uint256[] memory values) public onlyOwner {\r\n        require(!checkBurnTokens);\r\n        for (uint256 i = 0; i < recipients.length; i++) {\r\n            values[i] = values[i];\r\n            require(publicSupply >= values[i]);\r\n            publicSupply = publicSupply - values[i];\r\n            token.mint(recipients[i], values[i]);\r\n        }\r\n    }\r\n\r\n    function burnToken() external onlyOwner returns (bool) {\r\n        require(hasEnded());\r\n        require(!checkBurnTokens);\r\n        token.burn(publicSupply);\r\n        totalSupply = totalSupply - publicSupply;\r\n        publicSupply = 0;\r\n        checkBurnTokens = true;\r\n        return true;\r\n    }\r\n\r\n    function allocatedTokenBurn() external onlyOwner returns (bool) {\r\n        require(!checkAlocatedBurn);\r\n        require(hasEnded());\r\n        token.burn(advisorSupply);\r\n        token.burn(bountySupply);\r\n        totalSupply = totalSupply - advisorSupply;\r\n        totalSupply = totalSupply - bountySupply;\r\n        advisorSupply = 0;\r\n        bountySupply = 0;\r\n\r\n        checkAlocatedBurn = true;\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/distribution/FinalizableCrowdsale.sol\r\n\r\n\r\n// pragma solidity 0.8.0;\r\n\r\n// import \"contracts/distribution/Allocations.sol\";\r\n\r\ncontract FinalizableCrowdsale is Allocations {\r\n    bool isFinalized = false;\r\n    event Finalized();\r\n\r\n    constructor(\r\n        uint256 _startTime,\r\n        uint256 _endTime,\r\n        uint256 _rate,\r\n        address _wallet,\r\n        ZilliosToken _token\r\n    ) Allocations(_startTime, _endTime, _rate, _wallet, _token) {}\r\n\r\n    function finalize() external onlyOwner {\r\n        require(!isFinalized, \"ZilliosCrowdsale: already finalized\");\r\n        require(hasEnded(), \"ZilliosCrowdsale: not closed\");\r\n        finalization();\r\n        emit Finalized();\r\n        isFinalized = true;\r\n    }\r\n\r\n    function finalization() internal virtual {}\r\n}\r\n\r\n\r\n// Dependency file: contracts/distribution/RefundableCrowdsale.sol\r\n\r\n\r\n// pragma solidity 0.8.0;\r\n\r\n// import \"contracts/distribution/RefundVault.sol\";\r\n// import \"contracts/distribution/FinalizableCrowdsale.sol\";\r\n\r\ncontract RefundableCrowdsale is FinalizableCrowdsale {\r\n    uint256 internal goal;\r\n    RefundVault private vault;\r\n\r\n    constructor(\r\n        uint256 _goal,\r\n        uint256 _startTime,\r\n        uint256 _endTime,\r\n        uint256 _rate,\r\n        address _wallet,\r\n        ZilliosToken _token\r\n    ) FinalizableCrowdsale(_startTime, _endTime, _rate, _wallet, _token) {\r\n        require(_goal > 0, \"ZilliosCrowdsale: goal is 0\");\r\n\r\n        vault = new RefundVault(wallet);\r\n        goal = _goal;\r\n    }\r\n\r\n    function forwardFunds() internal virtual override(Crowdsale) {\r\n        vault.deposit{value: msg.value}(msg.sender);\r\n    }\r\n\r\n    function claimRefund() external {\r\n        require(isFinalized, \"ZilliosCrowdsale: not finalized\");\r\n        require(!goalReached(), \"ZilliosCrowdsale: goal reached\");\r\n        vault.refund(msg.sender);\r\n    }\r\n\r\n    function finalization() internal virtual override {\r\n        if (goalReached()) {\r\n            vault.close();\r\n        } else {\r\n            vault.enableRefunds();\r\n        }\r\n        super.finalization();\r\n    }\r\n\r\n    function goalReached() public view returns (bool) {\r\n        return weiRaised >= goal;\r\n    }\r\n\r\n    function getVaultAddress() external view onlyOwner returns (address) {\r\n        return address(vault);\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/validation/CappedCrowdsale.sol\r\n\r\n\r\n// pragma solidity 0.8.0;\r\n\r\n// import \"contracts/distribution/RefundableCrowdsale.sol\";\r\n\r\ncontract CappedCrowdsale is RefundableCrowdsale {\r\n    uint256 internal cap;\r\n\r\n    constructor(\r\n        uint256 _cap,\r\n        uint256 _goal,\r\n        uint256 _startTime,\r\n        uint256 _endTime,\r\n        uint256 _rate,\r\n        address _wallet,\r\n        ZilliosToken _token\r\n    ) RefundableCrowdsale(_goal, _startTime, _endTime, _rate, _wallet, _token) {\r\n        require(_cap > 0, \"ZilliosCrowdsale: cap is 0\");\r\n        cap = _cap;\r\n    }\r\n\r\n    function validPurchase() internal view virtual override returns (bool) {\r\n        bool withinCap = weiRaised + msg.value <= cap;\r\n        return super.validPurchase() && withinCap;\r\n    }\r\n\r\n    function hasEnded() public view virtual override returns (bool) {\r\n        bool capReached = weiRaised >= cap;\r\n        return super.hasEnded() || capReached;\r\n    }\r\n}\r\n\r\n\r\n// Root file: contracts/ZilliosCrowdsale.sol\r\n\r\n\r\npragma solidity 0.8.0;\r\n\r\n// import \"contracts/base/Crowdsale.sol\";\r\n// import \"contracts/validation/CappedCrowdsale.sol\";\r\n// import \"contracts/distribution/RefundableCrowdsale.sol\";\r\n// import \"contracts/distribution/Allocations.sol\";\r\n\r\ncontract ZilliosCrowdsale is CappedCrowdsale {\r\n    constructor(\r\n        uint256 _startTime,\r\n        uint256 _endTime,\r\n        uint256 _rate,\r\n        uint256 _hardCap,\r\n        uint256 _softCap,\r\n        address _wallet,\r\n        ZilliosToken _token\r\n    ) CappedCrowdsale(_hardCap, _softCap, _startTime, _endTime, _rate, _wallet, _token) {}\r\n\r\n    receive() external payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    function buyTokens(address beneficiary) public payable virtual override whenNotPaused {\r\n        require(CappedCrowdsale.validPurchase(), \"ZilliosCrowdsale: cap exceeded or purchase is not valid\");\r\n        require(!CappedCrowdsale.hasEnded(), \"ZilliosCrowdsale: crowdsale has ended\");\r\n\r\n        Crowdsale.buyTokens(beneficiary);\r\n    }\r\n\r\n    function setSoftCap(uint256 _goal) external onlyOwner {\r\n        require(block.timestamp <= ICOstartTime, \"ZilliosCrowdsale: ICO starts\");\r\n        require(_goal > 0, \"ZilliosCrowdsale: goal is 0\");\r\n        goal = _goal;\r\n    }\r\n\r\n    function setHardCap(uint256 _cap) external onlyOwner {\r\n        require(block.timestamp <= ICOstartTime, \"ZilliosCrowdsale: ICO starts\");\r\n        require(_cap > 0, \"ZilliosCrowdsale: cap is 0\");\r\n        cap = _cap;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_hardCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_softCap\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"contract ZilliosToken\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"RateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_wei_500_usd\",\"type\":\"uint256\"}],\"name\":\"WEIPriceSET\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ICOEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ICOstartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WEI_500_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"advisorSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"advisorTimeLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allocatedTokenBurn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bounties\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"bountyDrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bountySupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newRate\",\"type\":\"uint256\"}],\"name\":\"changeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkAlocatedBurn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkBurnTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRefund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"companyVestingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"companyVestingTimeLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"goalReached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"grantAdvisorToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"companyAddress\",\"type\":\"address\"}],\"name\":\"grantCompanyToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamfounderAddress\",\"type\":\"address\"}],\"name\":\"grantTeamFounderToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cap\",\"type\":\"uint256\"}],\"name\":\"setHardCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_goal\",\"type\":\"uint256\"}],\"name\":\"setSoftCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wei_500_usd\",\"type\":\"uint256\"}],\"name\":\"setWEIPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamFounderSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamFounderTimeLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"transferFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"transferRewardsFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawBounty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"ZilliosCrowdsale","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000061d0dcf0000000000000000000000000000000000000000000000000000000006338b86000000000000000000000000000000000000000000000141df5d77c6d9d6000000000000000000000000000000000000000000000000000bdbc41e0348b30000000000000000000000000000000000000000000000000002e141ea081ca080000000000000000000000000000d3138c6bd5c7e006e8ddd5469c9e0d4f849a4f9600000000000000000000000090256c9eb2a49945f6d3c449ad47c3c78bc19314","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://89df7a059ee70a549afe99f8d465a8faf47f86b1bd4d8dcfcdedfd1863cc4a87"}]}