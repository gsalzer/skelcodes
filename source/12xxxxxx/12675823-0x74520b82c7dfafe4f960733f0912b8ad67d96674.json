{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.0.11 https://hardhat.org\r\n\r\n// File contracts/solidity/proxy/IBeacon.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\r\n */\r\ninterface IBeacon {\r\n    /**\r\n     * @dev Must return an address that can be used as a delegate call target.\r\n     *\r\n     * {BeaconProxy} will check that this address is a contract.\r\n     */\r\n    function childImplementation() external view returns (address);\r\n    function upgradeChildTo(address newImplementation) external;\r\n}\r\n\r\n\r\n// File contracts/solidity/interface/INFTXVaultFactory.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface INFTXVaultFactory is IBeacon {\r\n  // Read functions.\r\n  function numVaults() external view returns (uint256);\r\n  function zapContract() external view returns (address);\r\n  function feeDistributor() external view returns (address);\r\n  function eligibilityManager() external view returns (address);\r\n  function vault(uint256 vaultId) external view returns (address);\r\n  function vaultsForAsset(address asset) external view returns (address[] memory);\r\n  function isLocked(uint256 id) external view returns (bool);\r\n\r\n  event NewFeeDistributor(address oldDistributor, address newDistributor);\r\n  event NewZapContract(address oldZap, address newZap);\r\n  event NewEligibilityManager(address oldEligManager, address newEligManager);\r\n  event NewVault(uint256 indexed vaultId, address vaultAddress, address assetAddress);\r\n\r\n  // Write functions.\r\n  function __NFTXVaultFactory_init(address _vaultImpl, address _feeDistributor) external;\r\n  function createVault(\r\n      string calldata name,\r\n      string calldata symbol,\r\n      address _assetAddress,\r\n      bool is1155,\r\n      bool allowAllItems\r\n  ) external returns (uint256);\r\n  function setFeeDistributor(address _feeDistributor) external;\r\n  function setEligibilityManager(address _eligibilityManager) external;\r\n  function setZapContract(address _zapContract) external;\r\n}\r\n\r\n\r\n// File contracts/solidity/interface/INFTXEligibility.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface INFTXEligibility {\r\n    // Read functions.\r\n    function name() external pure returns (string memory);\r\n    function finalized() external view returns (bool);\r\n    function targetAsset() external pure returns (address);\r\n    function checkAllEligible(uint256[] calldata tokenIds)\r\n        external\r\n        view\r\n        returns (bool);\r\n    function checkEligible(uint256[] calldata tokenIds)\r\n        external\r\n        view\r\n        returns (bool[] memory);\r\n    function checkAllIneligible(uint256[] calldata tokenIds)\r\n        external\r\n        view\r\n        returns (bool);\r\n    function checkIsEligible(uint256 tokenId) external view returns (bool);\r\n\r\n    // Write functions.\r\n    function __NFTXEligibility_init_bytes(bytes calldata configData) external;\r\n    function beforeMintHook(uint256[] calldata tokenIds) external;\r\n    function afterMintHook(uint256[] calldata tokenIds) external;\r\n    function beforeRedeemHook(uint256[] calldata tokenIds) external;\r\n    function afterRedeemHook(uint256[] calldata tokenIds) external;\r\n}\r\n\r\n\r\n// File contracts/solidity/proxy/Initializable.sol\r\n\r\n\r\n\r\n// solhint-disable-next-line compiler-version\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\nabstract contract Initializable {\r\n\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/solidity/util/ContextUpgradeable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {\r\n    }\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\n// File contracts/solidity/util/OwnableUpgradeable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function __Ownable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal initializer {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n    uint256[49] private __gap;\r\n}\r\n\r\n\r\n// File contracts/solidity/proxy/ClonesUpgradeable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\r\n * deploying minimal proxy contracts, also known as \"clones\".\r\n *\r\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\r\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\r\n *\r\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\r\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\r\n * deterministic method.\r\n *\r\n * _Available since v3.4._\r\n */\r\nlibrary ClonesUpgradeable {\r\n    /**\r\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\r\n     *\r\n     * This function uses the create opcode, which should never revert.\r\n     */\r\n    function clone(address implementation) internal returns (address instance) {\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\r\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\r\n            instance := create(0, ptr, 0x37)\r\n        }\r\n        require(instance != address(0), \"ERC1167: create failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\r\n     *\r\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\r\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\r\n     * the clones cannot be deployed twice at the same address.\r\n     */\r\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\r\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\r\n            instance := create2(0, ptr, 0x37, salt)\r\n        }\r\n        require(instance != address(0), \"ERC1167: create2 failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\r\n     */\r\n    function predictDeterministicAddress(address implementation, bytes32 salt, address deployer) internal pure returns (address predicted) {\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\r\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\r\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\r\n            mstore(add(ptr, 0x4c), salt)\r\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\r\n            predicted := keccak256(add(ptr, 0x37), 0x55)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\r\n     */\r\n    function predictDeterministicAddress(address implementation, bytes32 salt) internal view returns (address predicted) {\r\n        return predictDeterministicAddress(implementation, salt, address(this));\r\n    }\r\n}\r\n\r\n\r\n// File contracts/solidity/NFTXEligibilityManager.sol\r\n\r\n\r\n\r\npragma experimental ABIEncoderV2;\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\ncontract NFTXEligibilityManager is OwnableUpgradeable {\r\n    struct EligibilityModule {\r\n        address implementation;\r\n        address targetAsset;\r\n        string name;\r\n    }\r\n    EligibilityModule[] public modules;\r\n\r\n    event ModuleAdded(\r\n        address implementation,\r\n        address targetAsset,\r\n        string name,\r\n        bool finalizedOnDeploy\r\n    );\r\n    event ModuleUpdated(\r\n        address implementation,\r\n        string name,\r\n        bool finalizedOnDeploy\r\n    );\r\n\r\n    function __NFTXEligibilityManager_init() public initializer {\r\n        __Ownable_init();\r\n    }\r\n\r\n    function addModule(address implementation) external onlyOwner {\r\n        require(implementation != address(0), \"Impl != address(0)\");\r\n        INFTXEligibility elig = INFTXEligibility(implementation);\r\n        string memory name = elig.name();\r\n        EligibilityModule memory module = EligibilityModule(\r\n            implementation,\r\n            elig.targetAsset(),\r\n            name\r\n        );\r\n        modules.push(module);\r\n        emit ModuleAdded(\r\n            implementation,\r\n            module.targetAsset,\r\n            name,\r\n            elig.finalized()\r\n        );\r\n    }\r\n\r\n    function updateModule(uint256 moduleIndex, address implementation)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(moduleIndex < modules.length, \"Out of bounds\");\r\n        require(implementation != address(0), \"Impl != address(0)\");\r\n        modules[moduleIndex].implementation = implementation;\r\n        INFTXEligibility elig = INFTXEligibility(implementation);\r\n        emit ModuleUpdated(implementation, elig.name(), elig.finalized());\r\n    }\r\n\r\n    function deployEligibility(uint256 moduleIndex, bytes calldata configData)\r\n        external\r\n        virtual\r\n        returns (address)\r\n    {\r\n        require(moduleIndex < modules.length, \"Out of bounds\");\r\n        address eligImpl = modules[moduleIndex].implementation;\r\n        address eligibilityClone = ClonesUpgradeable.clone(eligImpl);\r\n        INFTXEligibility(eligibilityClone).__NFTXEligibility_init_bytes(\r\n            configData\r\n        );\r\n        return eligibilityClone;\r\n    }\r\n\r\n    function allModules() external view returns (EligibilityModule[] memory) {\r\n        return modules;\r\n    }\r\n\r\n    function allModuleNames() external view returns (string[] memory) {\r\n        EligibilityModule[] memory modulesCopy = modules;\r\n        string[] memory names = new string[](modulesCopy.length);\r\n        for (uint256 i = 0; i < modulesCopy.length; i++) {\r\n            names[i] = modulesCopy[i].name;\r\n        }\r\n        return names;\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"targetAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"finalizedOnDeploy\",\"type\":\"bool\"}],\"name\":\"ModuleAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"finalizedOnDeploy\",\"type\":\"bool\"}],\"name\":\"ModuleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"__NFTXEligibilityManager_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"addModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allModuleNames\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allModules\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetAsset\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct NFTXEligibilityManager.EligibilityModule[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"moduleIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"configData\",\"type\":\"bytes\"}],\"name\":\"deployEligibility\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"modules\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetAsset\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"moduleIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"updateModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"NFTXEligibilityManager","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://6d090d94ef1e5a731cc9799cb11ebfece93801cf69f7e15c17647805b746bd37"}]}