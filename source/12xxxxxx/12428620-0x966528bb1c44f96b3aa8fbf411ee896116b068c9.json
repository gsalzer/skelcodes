{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier:  AGPL-3.0-or-later // hevm: flattened sources of contracts/LiquidityLockerFactory.sol\r\npragma solidity =0.6.11 >=0.6.0 <0.8.0 >=0.6.2 <0.8.0;\r\n\r\n////// contracts/token/interfaces/IBaseFDT.sol\r\n/* pragma solidity 0.6.11; */\r\n\r\ninterface IBaseFDT {\r\n\r\n    /**\r\n        @dev    Returns the total amount of funds a given address is able to withdraw currently.\r\n        @param  owner Address of FDT holder.\r\n        @return A uint256 representing the available funds for a given account.\r\n    */\r\n    function withdrawableFundsOf(address owner) external view returns (uint256);\r\n\r\n    /**\r\n        @dev Withdraws all available funds for a FDT holder.\r\n    */\r\n    function withdrawFunds() external;\r\n\r\n    /**\r\n        @dev   This event emits when new funds are distributed.\r\n        @param by               The address of the sender that distributed funds.\r\n        @param fundsDistributed The amount of funds received for distribution.\r\n    */\r\n    event FundsDistributed(address indexed by, uint256 fundsDistributed);\r\n\r\n    /**\r\n        @dev   This event emits when distributed funds are withdrawn by a token holder.\r\n        @param by             The address of the receiver of funds.\r\n        @param fundsWithdrawn The amount of funds that were withdrawn.\r\n        @param totalWithdrawn The total amount of funds that were withdrawn.\r\n    */\r\n    event FundsWithdrawn(address indexed by, uint256 fundsWithdrawn, uint256 totalWithdrawn);\r\n\r\n}\r\n\r\n////// lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\r\n/* pragma solidity >=0.6.0 <0.8.0; */\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n////// contracts/token/interfaces/IBasicFDT.sol\r\n/* pragma solidity 0.6.11; */\r\n\r\n/* import \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\"; */\r\n\r\n/* import \"./IBaseFDT.sol\"; */\r\n\r\ninterface IBasicFDT is IBaseFDT, IERC20 {\r\n\r\n    event PointsPerShareUpdated(uint256);\r\n\r\n    event PointsCorrectionUpdated(address indexed, int256);\r\n\r\n    function withdrawnFundsOf(address) external view returns (uint256);\r\n\r\n    function accumulativeFundsOf(address) external view returns (uint256);\r\n\r\n    function updateFundsReceived() external;\r\n\r\n}\r\n\r\n////// contracts/token/interfaces/ILoanFDT.sol\r\n/* pragma solidity 0.6.11; */\r\n\r\n/* import \"./IBasicFDT.sol\"; */\r\n\r\ninterface ILoanFDT is IBasicFDT {\r\n\r\n    function fundsToken() external view returns (address);\r\n\r\n    function fundsTokenBalance() external view returns (uint256);\r\n\r\n}\r\n\r\n////// contracts/interfaces/ILoan.sol\r\n/* pragma solidity 0.6.11; */\r\n\r\n/* import \"../token/interfaces/ILoanFDT.sol\"; */\r\n\r\ninterface ILoan is ILoanFDT {\r\n    \r\n    // State Variables\r\n    function liquidityAsset() external view returns (address);\r\n    \r\n    function collateralAsset() external view returns (address);\r\n    \r\n    function fundingLocker() external view returns (address);\r\n    \r\n    function flFactory() external view returns (address);\r\n    \r\n    function collateralLocker() external view returns (address);\r\n    \r\n    function clFactory() external view returns (address);\r\n    \r\n    function borrower() external view returns (address);\r\n    \r\n    function repaymentCalc() external view returns (address);\r\n    \r\n    function lateFeeCalc() external view returns (address);\r\n    \r\n    function premiumCalc() external view returns (address);\r\n    \r\n    function loanState() external view returns (uint256);\r\n    \r\n    function collateralRequiredForDrawdown(uint256) external view returns (uint256);\r\n    \r\n\r\n    // Loan Specifications\r\n    function apr() external view returns (uint256);\r\n    \r\n    function paymentsRemaining() external view returns (uint256);\r\n    \r\n    function paymentIntervalSeconds() external view returns (uint256);\r\n    \r\n    function requestAmount() external view returns (uint256);\r\n    \r\n    function collateralRatio() external view returns (uint256);\r\n    \r\n    function fundingPeriod() external view returns (uint256);\r\n\r\n    function defaultGracePeriod() external view returns (uint256);\r\n    \r\n    function createdAt() external view returns (uint256);\r\n    \r\n    function principalOwed() external view returns (uint256);\r\n    \r\n    function principalPaid() external view returns (uint256);\r\n    \r\n    function interestPaid() external view returns (uint256);\r\n    \r\n    function feePaid() external view returns (uint256);\r\n    \r\n    function excessReturned() external view returns (uint256);\r\n    \r\n    function getNextPayment() external view returns (uint256, uint256, uint256, uint256);\r\n    \r\n    function superFactory() external view returns (address);\r\n    \r\n    function termDays() external view returns (uint256);\r\n    \r\n    function nextPaymentDue() external view returns (uint256);\r\n\r\n    function getFullPayment() external view returns (uint256, uint256, uint256);\r\n    \r\n\r\n    // Liquidations\r\n    function amountLiquidated() external view returns (uint256);\r\n\r\n    function defaultSuffered() external view returns (uint256);\r\n    \r\n    function amountRecovered() external view returns (uint256);\r\n    \r\n    function getExpectedAmountRecovered() external view returns (uint256);\r\n\r\n    function liquidationExcess() external view returns (uint256);\r\n    \r\n\r\n    // Functions\r\n    function fundLoan(address, uint256) external;\r\n    \r\n    function makePayment() external;\r\n    \r\n    function drawdown(uint256) external;\r\n    \r\n    function makeFullPayment() external;\r\n    \r\n    function triggerDefault() external;\r\n    \r\n    function unwind() external;\r\n    \r\n\r\n    // Security \r\n    function pause() external;\r\n\r\n    function unpause() external;\r\n\r\n    function loanAdmins(address) external view returns (address);\r\n\r\n    function setLoanAdmin(address, bool) external;\r\n\r\n\r\n    // Misc\r\n    function reclaimERC20(address) external;\r\n\r\n}\r\n\r\n////// lib/openzeppelin-contracts/contracts/math/SafeMath.sol\r\n/* pragma solidity >=0.6.0 <0.8.0; */\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n////// lib/openzeppelin-contracts/contracts/utils/Address.sol\r\n/* pragma solidity >=0.6.2 <0.8.0; */\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n////// lib/openzeppelin-contracts/contracts/token/ERC20/SafeERC20.sol\r\n/* pragma solidity >=0.6.0 <0.8.0; */\r\n\r\n/* import \"./IERC20.sol\"; */\r\n/* import \"../../math/SafeMath.sol\"; */\r\n/* import \"../../utils/Address.sol\"; */\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n////// contracts/LiquidityLocker.sol\r\n/* pragma solidity 0.6.11; */\r\n\r\n/* import \"lib/openzeppelin-contracts/contracts/token/ERC20/SafeERC20.sol\"; */\r\n\r\n/* import \"./interfaces/ILoan.sol\"; */\r\n\r\n/// @title LiquidityLocker holds custody of Liquidity Asset tokens for a given Pool.\r\ncontract LiquidityLocker {\r\n\r\n    using SafeERC20 for IERC20;\r\n\r\n    address public immutable pool;            // The Pool that owns this LiquidityLocker.\r\n    IERC20  public immutable liquidityAsset;  // The Liquidity Asset which this LiquidityLocker will escrow.\r\n\r\n    constructor(address _liquidityAsset, address _pool) public {\r\n        liquidityAsset = IERC20(_liquidityAsset);\r\n        pool           = _pool;\r\n    }\r\n\r\n    /**\r\n        @dev Checks that `msg.sender` is the Pool.\r\n    */\r\n    modifier isPool() {\r\n        require(msg.sender == pool, \"LL:NOT_P\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n        @dev   Transfers amount of Liquidity Asset to a destination account. Only the Pool can call this function.\r\n        @param dst Destination to transfer Liquidity Asset to.\r\n        @param amt Amount of Liquidity Asset to transfer.\r\n    */\r\n    function transfer(address dst, uint256 amt) external isPool {\r\n        require(dst != address(0), \"LL:NULL_DST\");\r\n        liquidityAsset.safeTransfer(dst, amt);\r\n    }\r\n\r\n    /**\r\n        @dev   Funds a Loan using available assets in this LiquidityLocker. Only the Pool can call this function.\r\n        @param loan       The Loan to fund.\r\n        @param debtLocker The DebtLocker that will escrow debt tokens.\r\n        @param amt        Amount of Liquidity Asset to fund the Loan for.\r\n    */\r\n    function fundLoan(address loan, address debtLocker, uint256 amt) external isPool {\r\n        liquidityAsset.safeApprove(loan, amt);\r\n        ILoan(loan).fundLoan(debtLocker, amt);\r\n    }\r\n\r\n}\r\n\r\n////// contracts/LiquidityLockerFactory.sol\r\n/* pragma solidity 0.6.11; */\r\n\r\n/* import \"./LiquidityLocker.sol\"; */\r\n\r\n/// @title LiquidityLockerFactory instantiates LiquidityLockers.\r\ncontract LiquidityLockerFactory {\r\n\r\n    mapping(address => address) public owner;     // Mapping of LiquidityLocker addresses to their owner (i.e owner[locker] = Owner of the LiquidityLocker).\r\n    mapping(address => bool)    public isLocker;  // True only if a LiquidityLocker was created by this factory.\r\n\r\n    uint8 public constant factoryType = 3;        // i.e LockerFactoryTypes::LIQUIDITY_LOCKER_FACTORY\r\n\r\n    event LiquidityLockerCreated(address indexed owner, address liquidityLocker, address liquidityAsset);\r\n\r\n    /**\r\n        @dev    Instantiates a LiquidityLocker contract.\r\n        @dev    It emits a `LiquidityLockerCreated` event.\r\n        @param  liquidityAsset  The Liquidity Asset this LiquidityLocker will escrow.\r\n        @return liquidityLocker Address of the instantiated LiquidityLocker.\r\n    */\r\n    function newLocker(address liquidityAsset) external returns (address liquidityLocker) {\r\n        liquidityLocker           = address(new LiquidityLocker(liquidityAsset, msg.sender));\r\n        owner[liquidityLocker]    = msg.sender;\r\n        isLocker[liquidityLocker] = true;\r\n\r\n        emit LiquidityLockerCreated(msg.sender, liquidityLocker, liquidityAsset);\r\n    }\r\n\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidityLocker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidityAsset\",\"type\":\"address\"}],\"name\":\"LiquidityLockerCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"factoryType\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isLocker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityAsset\",\"type\":\"address\"}],\"name\":\"newLocker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"liquidityLocker\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"LiquidityLockerFactory","CompilerVersion":"v0.6.11+commit.5ef660b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://66f0f0c078b98ed48da252da5054222ed4dbe29674a07f0cd4e6136d541fe13f"}]}