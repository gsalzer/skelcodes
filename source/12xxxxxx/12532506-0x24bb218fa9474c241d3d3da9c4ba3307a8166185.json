{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/lib/DSMath.sol\r\n\r\n\r\n/// math.sol -- mixin for inline numerical wizardry\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity >0.4.13;\r\n\r\ncontract DSMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, \"ds-math-add-overflow\");\r\n    }\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\r\n    }\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\r\n    }\r\n\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function max(uint x, uint y) internal pure returns (uint z) {\r\n        return x >= y ? x : y;\r\n    }\r\n    function imin(int x, int y) internal pure returns (int z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function imax(int x, int y) internal pure returns (int z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n    uint constant RAY = 10 ** 27;\r\n\r\n    //rounds to zero if x*y < WAD / 2\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n    //rounds to zero if x*y < WAD / 2\r\n    function rmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n    //rounds to zero if x*y < WAD / 2\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n    //rounds to zero if x*y < RAY / 2\r\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n\r\n    // This famous algorithm is called \"exponentiation by squaring\"\r\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\r\n    //\r\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\r\n    //\r\n    // These facts are why it works:\r\n    //\r\n    //  If n is even, then x^n = (x^2)^(n/2).\r\n    //  If n is odd,  then x^n = x * x^(n-1),\r\n    //   and applying the equation for even x gives\r\n    //    x^n = x * (x^2)^((n-1) / 2).\r\n    //\r\n    //  Also, EVM division is flooring and\r\n    //    floor[(n-1) / 2] = floor[n / 2].\r\n    //\r\n    function rpow(uint x, uint n) internal pure returns (uint z) {\r\n        z = n % 2 != 0 ? x : RAY;\r\n\r\n        for (n /= 2; n != 0; n /= 2) {\r\n            x = rmul(x, x);\r\n\r\n            if (n % 2 != 0) {\r\n                z = rmul(z, x);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\r\n\r\npragma solidity >=0.6.0;\r\n\r\ninterface AggregatorV3Interface {\r\n\r\n  function decimals() external view returns (uint8);\r\n  function description() external view returns (string memory);\r\n  function version() external view returns (uint256);\r\n\r\n  // getRoundData and latestRoundData should both raise \"No data present\"\r\n  // if they do not have data to report, instead of returning unset values\r\n  // which could be misinterpreted as actual reported values.\r\n  function getRoundData(uint80 _roundId)\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n}\r\n\r\n// File: contracts/interfaces/HegicInterface.sol\r\n\r\npragma solidity >=0.7.2;\r\n\r\n\r\n\r\nenum HegicOptionType {Invalid, Put, Call}\r\nenum State {Inactive, Active, Exercised, Expired}\r\n\r\nstruct HegicOption {\r\n    State state;\r\n    address payable holder;\r\n    uint256 strike;\r\n    uint256 amount;\r\n    uint256 lockedAmount;\r\n    uint256 premium;\r\n    uint256 expiration;\r\n    HegicOptionType optionType;\r\n}\r\n\r\ninterface IHegicOptions {\r\n    event Create(\r\n        uint256 indexed id,\r\n        address indexed account,\r\n        uint256 settlementFee,\r\n        uint256 totalFee\r\n    );\r\n\r\n    event Exercise(uint256 indexed id, uint256 profit);\r\n    event Expire(uint256 indexed id, uint256 premium);\r\n\r\n    function options(uint256)\r\n        external\r\n        view\r\n        returns (\r\n            State state,\r\n            address payable holder,\r\n            uint256 strike,\r\n            uint256 amount,\r\n            uint256 lockedAmount,\r\n            uint256 premium,\r\n            uint256 expiration,\r\n            HegicOptionType optionType\r\n        );\r\n\r\n    function create(\r\n        uint256 period,\r\n        uint256 amount,\r\n        uint256 strike,\r\n        HegicOptionType optionType\r\n    ) external payable returns (uint256 optionID);\r\n\r\n    function exercise(uint256 optionID) external;\r\n\r\n    function priceProvider() external view returns (address);\r\n}\r\n\r\ninterface IHegicETHOptions is IHegicOptions {\r\n    function fees(\r\n        uint256 period,\r\n        uint256 amount,\r\n        uint256 strike,\r\n        HegicOptionType optionType\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint256 total,\r\n            uint256 settlementFee,\r\n            uint256 strikeFee,\r\n            uint256 periodFee\r\n        );\r\n}\r\n\r\ninterface IHegicBTCOptions is IHegicOptions {\r\n    function fees(\r\n        uint256 period,\r\n        uint256 amount,\r\n        uint256 strike,\r\n        HegicOptionType optionType\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint256 total,\r\n            uint256 totalETH,\r\n            uint256 settlementFee,\r\n            uint256 strikeFee,\r\n            uint256 periodFee\r\n        );\r\n}\r\n\r\ninterface IHegicRewards {\r\n    function hegic() external view returns (IERC20);\r\n\r\n    function hegicOptions() external view returns (IHegicOptions);\r\n\r\n    function rewardsRate() external view returns (uint256);\r\n\r\n    function rewardedOptions(uint256 optionId) external view returns (bool);\r\n\r\n    function getReward(uint256 optionId) external;\r\n}\r\n\r\n// File: contracts/adapters/IProtocolAdapter.sol\r\n\r\npragma solidity >=0.7.2;\r\n\r\nlibrary ProtocolAdapterTypes {\r\n    enum OptionType {Invalid, Put, Call}\r\n\r\n    // We have 2 types of purchase methods so far - by contract and by 0x.\r\n    // Contract is simple because it involves just specifying the option terms you want to buy.\r\n    // ZeroEx involves an off-chain API call which prepares a ZeroExOrder object to be passed into the tx.\r\n    enum PurchaseMethod {Invalid, Contract, ZeroEx}\r\n\r\n    /**\r\n     * @notice Terms of an options contract\r\n     * @param underlying is the underlying asset of the options. E.g. For ETH $800 CALL, ETH is the underlying.\r\n     * @param strikeAsset is the asset used to denote the asset paid out when exercising the option.\r\n     *        E.g. For ETH $800 CALL, USDC is the strikeAsset.\r\n     * @param collateralAsset is the asset used to collateralize a short position for the option.\r\n     * @param expiry is the expiry of the option contract. Users can only exercise after expiry in Europeans.\r\n     * @param strikePrice is the strike price of an optio contract.\r\n     *        E.g. For ETH $800 CALL, 800*10**18 is the USDC.\r\n     * @param optionType is the type of option, can only be OptionType.Call or OptionType.Put\r\n     * @param paymentToken is the token used to purchase the option.\r\n     *        E.g. Buy UNI/USDC CALL with WETH as the paymentToken.\r\n     */\r\n    struct OptionTerms {\r\n        address underlying;\r\n        address strikeAsset;\r\n        address collateralAsset;\r\n        uint256 expiry;\r\n        uint256 strikePrice;\r\n        ProtocolAdapterTypes.OptionType optionType;\r\n        address paymentToken;\r\n    }\r\n\r\n    /**\r\n     * @notice 0x order for purchasing otokens\r\n     * @param exchangeAddress [deprecated] is the address we call to conduct a 0x trade.\r\n     * Slither flagged this as a potential vulnerability so we hardcoded it.\r\n     * @param buyTokenAddress is the otoken address\r\n     * @param sellTokenAddress is the token used to purchase USDC. This is USDC most of the time.\r\n     * @param allowanceTarget is the address the adapter needs to provide sellToken allowance to so the swap happens\r\n     * @param protocolFee is the fee paid (in ETH) when conducting the trade\r\n     * @param makerAssetAmount is the buyToken amount\r\n     * @param takerAssetAmount is the sellToken amount\r\n     * @param swapData is the encoded msg.data passed by the 0x api response\r\n     */\r\n    struct ZeroExOrder {\r\n        address exchangeAddress;\r\n        address buyTokenAddress;\r\n        address sellTokenAddress;\r\n        address allowanceTarget;\r\n        uint256 protocolFee;\r\n        uint256 makerAssetAmount;\r\n        uint256 takerAssetAmount;\r\n        bytes swapData;\r\n    }\r\n}\r\n\r\ninterface IProtocolAdapter {\r\n    /**\r\n     * @notice Emitted when a new option contract is purchased\r\n     */\r\n    event Purchased(\r\n        address indexed caller,\r\n        string indexed protocolName,\r\n        address indexed underlying,\r\n        uint256 amount,\r\n        uint256 optionID\r\n    );\r\n\r\n    /**\r\n     * @notice Emitted when an option contract is exercised\r\n     */\r\n    event Exercised(\r\n        address indexed caller,\r\n        address indexed options,\r\n        uint256 indexed optionID,\r\n        uint256 amount,\r\n        uint256 exerciseProfit\r\n    );\r\n\r\n    /**\r\n     * @notice Name of the adapter. E.g. \"HEGIC\", \"OPYN_V1\". Used as index key for adapter addresses\r\n     */\r\n    function protocolName() external pure returns (string memory);\r\n\r\n    /**\r\n     * @notice Boolean flag to indicate whether to use option IDs or not.\r\n     * Fungible protocols normally use tokens to represent option contracts.\r\n     */\r\n    function nonFungible() external pure returns (bool);\r\n\r\n    /**\r\n     * @notice Returns the purchase method used to purchase options\r\n     */\r\n    function purchaseMethod()\r\n        external\r\n        pure\r\n        returns (ProtocolAdapterTypes.PurchaseMethod);\r\n\r\n    /**\r\n     * @notice Check if an options contract exist based on the passed parameters.\r\n     * @param optionTerms is the terms of the option contract\r\n     */\r\n    function optionsExist(ProtocolAdapterTypes.OptionTerms calldata optionTerms)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    /**\r\n     * @notice Get the options contract's address based on the passed parameters\r\n     * @param optionTerms is the terms of the option contract\r\n     */\r\n    function getOptionsAddress(\r\n        ProtocolAdapterTypes.OptionTerms calldata optionTerms\r\n    ) external view returns (address);\r\n\r\n    /**\r\n     * @notice Gets the premium to buy `purchaseAmount` of the option contract in ETH terms.\r\n     * @param optionTerms is the terms of the option contract\r\n     * @param purchaseAmount is the number of options purchased\r\n     */\r\n    function premium(\r\n        ProtocolAdapterTypes.OptionTerms calldata optionTerms,\r\n        uint256 purchaseAmount\r\n    ) external view returns (uint256 cost);\r\n\r\n    /**\r\n     * @notice Amount of profit made from exercising an option contract (current price - strike price).\r\n     *         0 if exercising out-the-money.\r\n     * @param options is the address of the options contract\r\n     * @param optionID is the ID of the option position in non fungible protocols like Hegic.\r\n     * @param amount is the amount of tokens or options contract to exercise.\r\n     */\r\n    function exerciseProfit(\r\n        address options,\r\n        uint256 optionID,\r\n        uint256 amount\r\n    ) external view returns (uint256 profit);\r\n\r\n    function canExercise(\r\n        address options,\r\n        uint256 optionID,\r\n        uint256 amount\r\n    ) external view returns (bool);\r\n\r\n    /**\r\n     * @notice Purchases the options contract.\r\n     * @param optionTerms is the terms of the option contract\r\n     * @param amount is the purchase amount in Wad units (10**18)\r\n     */\r\n    function purchase(\r\n        ProtocolAdapterTypes.OptionTerms calldata optionTerms,\r\n        uint256 amount,\r\n        uint256 maxCost\r\n    ) external payable returns (uint256 optionID);\r\n\r\n    /**\r\n     * @notice Exercises the options contract.\r\n     * @param options is the address of the options contract\r\n     * @param optionID is the ID of the option position in non fungible protocols like Hegic.\r\n     * @param amount is the amount of tokens or options contract to exercise.\r\n     * @param recipient is the account that receives the exercised profits.\r\n     * This is needed since the adapter holds all the positions\r\n     */\r\n    function exercise(\r\n        address options,\r\n        uint256 optionID,\r\n        uint256 amount,\r\n        address recipient\r\n    ) external payable;\r\n\r\n    /**\r\n     * @notice Opens a short position for a given `optionTerms`.\r\n     * @param optionTerms is the terms of the option contract\r\n     * @param amount is the short position amount\r\n     */\r\n    function createShort(\r\n        ProtocolAdapterTypes.OptionTerms calldata optionTerms,\r\n        uint256 amount\r\n    ) external returns (uint256);\r\n\r\n    /**\r\n     * @notice Closes an existing short position. In the future,\r\n     * we may want to open this up to specifying a particular short position to close.\r\n     */\r\n    function closeShort() external returns (uint256);\r\n}\r\n\r\n// File: contracts/adapters/IAmmAdapter.sol\r\n\r\npragma solidity >=0.7.2;\r\n\r\ninterface IAmmAdapter {\r\n    function protocolName() external pure returns (string memory);\r\n\r\n    function nonFungible() external pure returns (bool);\r\n\r\n    function expectedWbtcOut(uint256 ethAmt) external view returns (uint256);\r\n\r\n    function expectedDiggOut(uint256 wbtcAmt)\r\n        external\r\n        view\r\n        returns (uint256 diggOut, uint256 tradeAmt);\r\n\r\n    function buyLp(\r\n        uint256 amt,\r\n        uint256 tradeAmt,\r\n        uint256 minWbtcAmtOut,\r\n        uint256 minDiggAmtOut\r\n    ) external payable;\r\n}\r\n\r\n// File: contracts/adapters/AmmAdapter.sol\r\n\r\npragma solidity >=0.7.2;\r\n\r\n\r\n/**\r\n * @notice ProtocolAdapter is used to shadow IProtocolAdapter\r\n * to provide functions that delegatecall's the underlying IProtocolAdapter functions.\r\n */\r\nlibrary AmmAdapter {\r\n    function delegateBuyLp(\r\n        IAmmAdapter adapter,\r\n        uint256 amt,\r\n        uint256 tradeAmt,\r\n        uint256 minWbtcAmtOut,\r\n        uint256 minDiggAmtOut\r\n    ) external {\r\n        (bool success, bytes memory result) =\r\n            address(adapter).delegatecall(\r\n                abi.encodeWithSignature(\r\n                    \"buyLp(uint256,uint256,uint256,uint256)\",\r\n                    amt,\r\n                    tradeAmt,\r\n                    minWbtcAmtOut,\r\n                    minDiggAmtOut\r\n                )\r\n            );\r\n        revertWhenFail(success, result);\r\n    }\r\n\r\n    function revertWhenFail(bool success, bytes memory returnData)\r\n        private\r\n        pure\r\n    {\r\n        if (success) return;\r\n        revert(getRevertMsg(returnData));\r\n    }\r\n\r\n    function getRevertMsg(bytes memory _returnData)\r\n        private\r\n        pure\r\n        returns (string memory)\r\n    {\r\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\r\n        if (_returnData.length < 68) return \"ProtocolAdapter: reverted\";\r\n\r\n        assembly {\r\n            // Slice the sighash.\r\n            _returnData := add(_returnData, 0x04)\r\n        }\r\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\r\n    }\r\n}\r\n\r\n// File: contracts/adapters/ProtocolAdapter.sol\r\n\r\npragma solidity >=0.7.2;\r\n\r\n\r\n/**\r\n * @notice ProtocolAdapter is used to shadow IProtocolAdapter to provide functions\r\n * that delegatecall's the underlying IProtocolAdapter functions.\r\n */\r\nlibrary ProtocolAdapter {\r\n    function delegateOptionsExist(\r\n        IProtocolAdapter adapter,\r\n        ProtocolAdapterTypes.OptionTerms calldata optionTerms\r\n    ) external view returns (bool) {\r\n        (bool success, bytes memory result) =\r\n            address(adapter).staticcall(\r\n                abi.encodeWithSignature(\r\n                    \"optionsExist((address,address,address,uint256,uint256,uint8,address))\",\r\n                    optionTerms\r\n                )\r\n            );\r\n        revertWhenFail(success, result);\r\n        return abi.decode(result, (bool));\r\n    }\r\n\r\n    function delegateGetOptionsAddress(\r\n        IProtocolAdapter adapter,\r\n        ProtocolAdapterTypes.OptionTerms calldata optionTerms\r\n    ) external view returns (address) {\r\n        (bool success, bytes memory result) =\r\n            address(adapter).staticcall(\r\n                abi.encodeWithSignature(\r\n                    \"getOptionsAddress((address,address,address,uint256,uint256,uint8,address))\",\r\n                    optionTerms\r\n                )\r\n            );\r\n        revertWhenFail(success, result);\r\n        return abi.decode(result, (address));\r\n    }\r\n\r\n    function delegatePremium(\r\n        IProtocolAdapter adapter,\r\n        ProtocolAdapterTypes.OptionTerms calldata optionTerms,\r\n        uint256 purchaseAmount\r\n    ) external view returns (uint256) {\r\n        (bool success, bytes memory result) =\r\n            address(adapter).staticcall(\r\n                abi.encodeWithSignature(\r\n                    \"premium((address,address,address,uint256,uint256,uint8,address),uint256)\",\r\n                    optionTerms,\r\n                    purchaseAmount\r\n                )\r\n            );\r\n        revertWhenFail(success, result);\r\n        return abi.decode(result, (uint256));\r\n    }\r\n\r\n    function delegateExerciseProfit(\r\n        IProtocolAdapter adapter,\r\n        address options,\r\n        uint256 optionID,\r\n        uint256 amount\r\n    ) external view returns (uint256) {\r\n        (bool success, bytes memory result) =\r\n            address(adapter).staticcall(\r\n                abi.encodeWithSignature(\r\n                    \"exerciseProfit(address,uint256,uint256)\",\r\n                    options,\r\n                    optionID,\r\n                    amount\r\n                )\r\n            );\r\n        revertWhenFail(success, result);\r\n        return abi.decode(result, (uint256));\r\n    }\r\n\r\n    function delegatePurchase(\r\n        IProtocolAdapter adapter,\r\n        ProtocolAdapterTypes.OptionTerms calldata optionTerms,\r\n        uint256 purchaseAmount,\r\n        uint256 maxCost\r\n    ) external returns (uint256) {\r\n        (bool success, bytes memory result) =\r\n            address(adapter).delegatecall(\r\n                abi.encodeWithSignature(\r\n                    \"purchase((address,address,address,uint256,uint256,uint8,address),uint256,uint256)\",\r\n                    optionTerms,\r\n                    purchaseAmount,\r\n                    maxCost\r\n                )\r\n            );\r\n        revertWhenFail(success, result);\r\n        return abi.decode(result, (uint256));\r\n    }\r\n\r\n    function delegatePurchaseWithZeroEx(\r\n        IProtocolAdapter adapter,\r\n        ProtocolAdapterTypes.OptionTerms calldata optionTerms,\r\n        ProtocolAdapterTypes.ZeroExOrder calldata zeroExOrder\r\n    ) external {\r\n        (bool success, bytes memory result) =\r\n            address(adapter).delegatecall(\r\n                abi.encodeWithSignature(\r\n                    // solhint-disable-next-line\r\n                    \"purchaseWithZeroEx((address,address,address,uint256,uint256,uint8,address),(address,address,address,address,uint256,uint256,uint256,bytes))\",\r\n                    optionTerms,\r\n                    zeroExOrder\r\n                )\r\n            );\r\n        revertWhenFail(success, result);\r\n    }\r\n\r\n    function delegateExercise(\r\n        IProtocolAdapter adapter,\r\n        address options,\r\n        uint256 optionID,\r\n        uint256 amount,\r\n        address recipient\r\n    ) external {\r\n        (bool success, bytes memory result) =\r\n            address(adapter).delegatecall(\r\n                abi.encodeWithSignature(\r\n                    \"exercise(address,uint256,uint256,address)\",\r\n                    options,\r\n                    optionID,\r\n                    amount,\r\n                    recipient\r\n                )\r\n            );\r\n        revertWhenFail(success, result);\r\n    }\r\n\r\n    function delegateClaimRewards(\r\n        IProtocolAdapter adapter,\r\n        address rewardsAddress,\r\n        uint256[] calldata optionIDs\r\n    ) external returns (uint256) {\r\n        (bool success, bytes memory result) =\r\n            address(adapter).delegatecall(\r\n                abi.encodeWithSignature(\r\n                    \"claimRewards(address,uint256[])\",\r\n                    rewardsAddress,\r\n                    optionIDs\r\n                )\r\n            );\r\n        revertWhenFail(success, result);\r\n        return abi.decode(result, (uint256));\r\n    }\r\n\r\n    function delegateRewardsClaimable(\r\n        IProtocolAdapter adapter,\r\n        address rewardsAddress,\r\n        uint256[] calldata optionIDs\r\n    ) external view returns (uint256) {\r\n        (bool success, bytes memory result) =\r\n            address(adapter).staticcall(\r\n                abi.encodeWithSignature(\r\n                    \"rewardsClaimable(address,uint256[])\",\r\n                    rewardsAddress,\r\n                    optionIDs\r\n                )\r\n            );\r\n        revertWhenFail(success, result);\r\n        return abi.decode(result, (uint256));\r\n    }\r\n\r\n    function delegateCreateShort(\r\n        IProtocolAdapter adapter,\r\n        ProtocolAdapterTypes.OptionTerms calldata optionTerms,\r\n        uint256 amount\r\n    ) external returns (uint256) {\r\n        (bool success, bytes memory result) =\r\n            address(adapter).delegatecall(\r\n                abi.encodeWithSignature(\r\n                    \"createShort((address,address,address,uint256,uint256,uint8,address),uint256)\",\r\n                    optionTerms,\r\n                    amount\r\n                )\r\n            );\r\n        revertWhenFail(success, result);\r\n        return abi.decode(result, (uint256));\r\n    }\r\n\r\n    function delegateCloseShort(IProtocolAdapter adapter)\r\n        external\r\n        returns (uint256)\r\n    {\r\n        (bool success, bytes memory result) =\r\n            address(adapter).delegatecall(\r\n                abi.encodeWithSignature(\"closeShort()\")\r\n            );\r\n        revertWhenFail(success, result);\r\n        return abi.decode(result, (uint256));\r\n    }\r\n\r\n    function revertWhenFail(bool success, bytes memory returnData)\r\n        private\r\n        pure\r\n    {\r\n        if (success) return;\r\n        revert(getRevertMsg(returnData));\r\n    }\r\n\r\n    function getRevertMsg(bytes memory _returnData)\r\n        private\r\n        pure\r\n        returns (string memory)\r\n    {\r\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\r\n        if (_returnData.length < 68) return \"ProtocolAdapter: reverted\";\r\n\r\n        assembly {\r\n            // Slice the sighash.\r\n            _returnData := add(_returnData, 0x04)\r\n        }\r\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IRibbonFactory.sol\r\n\r\npragma solidity >=0.7.2;\r\n\r\ninterface IRibbonFactory {\r\n    function isInstrument(address instrument) external returns (bool);\r\n\r\n    function getAdapter(string calldata protocolName)\r\n        external\r\n        view\r\n        returns (address);\r\n\r\n    function getAdapters()\r\n        external\r\n        view\r\n        returns (address[] memory adaptersArray);\r\n\r\n    function burnGasTokens() external;\r\n}\r\n\r\n// File: contracts/interfaces/IUniswapV2Pair.sol\r\n\r\npragma solidity >=0.6.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: contracts/interfaces/IUniswapV2Router.sol\r\n\r\npragma solidity >=0.7.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\n// File: contracts/adapters/UniswapAdapter.sol\r\n\r\npragma solidity >=0.7.2;\r\n\r\ncontract UniswapAdapter {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    address public constant ethAddress = address(0);\r\n    address public immutable wethAddress;\r\n    address public immutable wbtcAddress;\r\n    address public immutable diggAddress;\r\n    string private constant _name = \"UNISWAP\";\r\n    bool private constant _nonFungible = true;\r\n    IUniswapV2Router02 public immutable sushiswapRouter;\r\n    IUniswapV2Pair public immutable wbtcDiggSushiswap;\r\n    IERC20 public immutable wbtcToken;\r\n    IERC20 public immutable diggToken;\r\n    uint256 private constant deadlineBuffer = 150;\r\n\r\n    constructor(\r\n        address _sushiswapRouter,\r\n        address _wbtcAddress,\r\n        address _wethAddress,\r\n        address _wbtcDiggSushiswap,\r\n        address _diggAddress\r\n    ) {\r\n        require(_sushiswapRouter != address(0), \"!_sushiswapRouter\");\r\n        require(_wethAddress != address(0), \"!_weth\");\r\n        require(_wbtcAddress != address(0), \"!_wbtc\");\r\n        require(_wbtcDiggSushiswap != address(0), \"!_wbtcDiggSushiswap\");\r\n        require(_diggAddress != address(0), \"!_diggAddress\");\r\n\r\n        wbtcAddress = _wbtcAddress;\r\n        wethAddress = _wethAddress;\r\n        diggAddress = _diggAddress;\r\n        sushiswapRouter = IUniswapV2Router02(_sushiswapRouter);\r\n        wbtcDiggSushiswap = IUniswapV2Pair(_wbtcDiggSushiswap);\r\n        wbtcToken = IERC20(_wbtcAddress);\r\n        diggToken = IERC20(_diggAddress);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function protocolName() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function nonFungible() external pure returns (bool) {\r\n        return _nonFungible;\r\n    }\r\n\r\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint256 x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n\r\n    // Code from Alpha Homora\r\n    // The core math involved in getting optimal swap amt to provide amm liquidity\r\n    function getSwapAmt(uint256 amtA, uint256 resA)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return\r\n            sqrt(amtA.mul(resA.mul(3988000) + amtA.mul(3988009))).sub(\r\n                amtA.mul(1997)\r\n            ) / 1994;\r\n    }\r\n\r\n    function expectedWbtcOut(uint256 ethAmt) public view returns (uint256) {\r\n        address[] memory path = new address[](2);\r\n        path[0] = wethAddress;\r\n        path[1] = wbtcAddress;\r\n        uint256 wbtcOut = sushiswapRouter.getAmountsOut(ethAmt, path)[1];\r\n        return wbtcOut;\r\n    }\r\n\r\n    //this function returns both the expected digg amount out as well as the input trade amt of wbtc used\r\n    //these are both needed as inputs to buyLp\r\n    function expectedDiggOut(uint256 wbtcAmt)\r\n        public\r\n        view\r\n        returns (uint256 diggOut, uint256 tradeAmt)\r\n    {\r\n        (uint112 reserveAmt, , ) =\r\n            IUniswapV2Pair(wbtcDiggSushiswap).getReserves();\r\n        tradeAmt = getSwapAmt(reserveAmt, wbtcAmt);\r\n        address[] memory path = new address[](2);\r\n        path[0] = wbtcAddress;\r\n        path[1] = diggAddress;\r\n        diggOut = sushiswapRouter.getAmountsOut(tradeAmt, path)[1];\r\n    }\r\n\r\n    function convertEthToToken(\r\n        uint256 inputAmount,\r\n        address addr,\r\n        uint256 amountOutMin\r\n    ) internal returns (uint256) {\r\n        uint256 amtOut =\r\n            _convertEthToToken(\r\n                inputAmount,\r\n                addr,\r\n                amountOutMin,\r\n                sushiswapRouter\r\n            );\r\n        return amtOut;\r\n    }\r\n\r\n    function convertTokenToToken(\r\n        address addr1,\r\n        address addr2,\r\n        uint256 amount,\r\n        uint256 amountOutMin\r\n    ) internal returns (uint256) {\r\n        uint256 amtOut =\r\n            _convertTokenToToken(\r\n                addr1,\r\n                addr2,\r\n                amount,\r\n                amountOutMin,\r\n                sushiswapRouter\r\n            );\r\n        return amtOut;\r\n    }\r\n\r\n    function addLiquidity(\r\n        address token1,\r\n        address token2,\r\n        uint256 amount1,\r\n        uint256 amount2\r\n    ) internal returns (uint256) {\r\n        uint256 lpAmt =\r\n            _addLiquidity(token1, token2, amount1, amount2, sushiswapRouter);\r\n        return lpAmt;\r\n    }\r\n\r\n    function _convertEthToToken(\r\n        uint256 inputAmount,\r\n        address addr,\r\n        uint256 amountOutMin,\r\n        IUniswapV2Router02 router\r\n    ) internal returns (uint256) {\r\n        uint256 deadline = block.timestamp + deadlineBuffer;\r\n        address[] memory path = new address[](2);\r\n        path[0] = wethAddress;\r\n        path[1] = addr;\r\n        uint256 amtOut =\r\n            router.swapExactETHForTokens{value: inputAmount}(\r\n                amountOutMin,\r\n                path,\r\n                address(this),\r\n                deadline\r\n            )[1];\r\n        return amtOut;\r\n    }\r\n\r\n    function _convertTokenToToken(\r\n        address addr1,\r\n        address addr2,\r\n        uint256 amount,\r\n        uint256 amountOutMin,\r\n        IUniswapV2Router02 router\r\n    ) internal returns (uint256) {\r\n        uint256 deadline = block.timestamp + deadlineBuffer;\r\n        address[] memory path = new address[](2);\r\n        path[0] = addr1;\r\n        path[1] = addr2;\r\n        if (wbtcToken.allowance(address(this), address(router)) == 0) {\r\n            wbtcToken.safeApprove(address(router), type(uint256).max);\r\n        }\r\n        uint256 amtOut =\r\n            router.swapExactTokensForTokens(\r\n                amount,\r\n                amountOutMin,\r\n                path,\r\n                address(this),\r\n                deadline\r\n            )[1];\r\n        return amtOut;\r\n    }\r\n\r\n    function _addLiquidity(\r\n        address token1,\r\n        address token2,\r\n        uint256 amount1,\r\n        uint256 amount2,\r\n        IUniswapV2Router02 router\r\n    ) internal returns (uint256) {\r\n        uint256 deadline = block.timestamp + deadlineBuffer;\r\n        if (wbtcToken.allowance(address(this), address(router)) < amount1) {\r\n            wbtcToken.safeApprove(address(router), type(uint256).max);\r\n        }\r\n        if (diggToken.allowance(address(this), address(router)) < amount2) {\r\n            diggToken.safeApprove(address(router), type(uint256).max);\r\n        }\r\n        (, , uint256 lpAmt) =\r\n            router.addLiquidity(\r\n                token1,\r\n                token2,\r\n                amount1,\r\n                amount2,\r\n                0,\r\n                0,\r\n                address(this),\r\n                deadline\r\n            );\r\n        return lpAmt;\r\n    }\r\n\r\n    //By the time this function is called the user bal should be in wbtc\r\n    //calculates optimal swap amt for minimal leftover funds and buys Digg\r\n    // Provides liquidity and transfers lp token to msg.sender\r\n    function _buyLp(\r\n        uint256 userWbtcBal,\r\n        address traderAccount,\r\n        uint256 tradeAmt,\r\n        uint256 minDiggAmtOut\r\n    ) internal {\r\n        uint256 diggAmt =\r\n            convertTokenToToken(\r\n                wbtcAddress,\r\n                diggAddress,\r\n                tradeAmt,\r\n                minDiggAmtOut\r\n            );\r\n        uint256 lpAmt =\r\n            addLiquidity(wbtcAddress, diggAddress, userWbtcBal, diggAmt);\r\n        require(\r\n            wbtcDiggSushiswap.transfer(traderAccount, lpAmt),\r\n            \"transfer failed\"\r\n        );\r\n    }\r\n\r\n    // token input should be either wbtc or eth\r\n    // valid exchange venues are sushiswap and uniswap\r\n    // the minWbtcAmtOut param isnt used when users pass in wbtc directly\r\n    // use the  expectedWbtcAmtOut and expectedDiggAmtOut functions\r\n    // off chain to calculate trade_amt, minWbtcAmtOut and minDiggAmtOut\r\n    function buyLp(\r\n        uint256 amt,\r\n        uint256 tradeAmt,\r\n        uint256 minWbtcAmtOut,\r\n        uint256 minDiggAmtOut\r\n    ) public payable {\r\n        require(msg.value >= amt, \"not enough funds\");\r\n        uint256 wbtcAmt = convertEthToToken(amt, wbtcAddress, minWbtcAmtOut);\r\n        _buyLp(wbtcAmt, msg.sender, tradeAmt, minDiggAmtOut);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\r\n\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary AddressUpgradeable {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable/proxy/Initializable.sol\r\n\r\n\r\n// solhint-disable-next-line compiler-version\r\npragma solidity >=0.4.24 <0.8.0;\r\n\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\nabstract contract Initializable {\r\n\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns true if and only if the function is running in the constructor\r\n    function _isConstructor() private view returns (bool) {\r\n        return !AddressUpgradeable.isContract(address(this));\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {\r\n    }\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n    uint256[50] private __gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function __Ownable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal initializer {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n    uint256[49] private __gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20Upgradeable {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMathUpgradeable {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable {\r\n    using SafeMathUpgradeable for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\r\n        __Context_init_unchained();\r\n        __ERC20_init_unchained(name_, symbol_);\r\n    }\r\n\r\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal virtual {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n    uint256[44] private __gap;\r\n}\r\n\r\n// File: contracts/storage/StakedPutStorage.sol\r\n\r\npragma solidity >=0.7.2;\r\npragma experimental ABIEncoderV2;\r\n\r\ncontract StakedPutStorageV1 is\r\n    OwnableUpgradeable,\r\n    ERC20Upgradeable,\r\n    ReentrancyGuard\r\n{\r\n    struct InstrumentPosition {\r\n        bool exercised;\r\n        uint8 putVenueID;\r\n        uint32 putOptionID;\r\n        uint256 amount;\r\n    }\r\n\r\n    mapping(address => InstrumentPosition[]) instrumentPositions;\r\n\r\n    function numOfPositions(address _account) public view returns (uint256) {\r\n        return instrumentPositions[_account].length;\r\n    }\r\n\r\n    function getInstrumentPositions(address account)\r\n        external\r\n        view\r\n        returns (InstrumentPosition[] memory positions)\r\n    {\r\n        return instrumentPositions[account];\r\n    }\r\n\r\n    function instrumentPosition(address account, uint256 positionID)\r\n        external\r\n        view\r\n        returns (InstrumentPosition memory position)\r\n    {\r\n        return instrumentPositions[account][positionID];\r\n    }\r\n}\r\n\r\n// File: contracts/experimental/StakedPut.sol\r\n\r\npragma solidity >=0.7.2;\r\n\r\ncontract StakedPut is DSMath, StakedPutStorageV1 {\r\n    event PositionCreated(\r\n        address indexed account,\r\n        uint256 indexed positionID,\r\n        uint256 amount\r\n    );\r\n    event Exercised(\r\n        address indexed account,\r\n        uint256 indexed positionID,\r\n        uint256 totalProfit\r\n    );\r\n\r\n    struct BuyInstrumentParams {\r\n        uint256 putStrikePrice;\r\n        uint256 optionAmount;\r\n        uint256 putMaxCost;\r\n        uint256 expiry;\r\n        uint256 lpAmt;\r\n        uint256 tradeAmt;\r\n        uint256 minWbtcAmtOut;\r\n        uint256 minDiggAmtOut;\r\n    }\r\n\r\n    using AmmAdapter for IAmmAdapter;\r\n    using ProtocolAdapter for IProtocolAdapter;\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    IRibbonFactory public immutable factory;\r\n    IProtocolAdapter public immutable adapter;\r\n    IAmmAdapter public immutable iUniswapAdapter;\r\n    AggregatorV3Interface public immutable priceProvider;\r\n\r\n    address payable public uniswapAdapterAddress;\r\n    string private constant instrumentName = \"wbtc/digg-staked-put\";\r\n    uint256 private constant timePeriod = 2419199;\r\n    string private constant venue = \"HEGIC\";\r\n    uint8 private constant venueID = 0;\r\n\r\n    ProtocolAdapterTypes.OptionType public constant optionType =\r\n        ProtocolAdapterTypes.OptionType.Put;\r\n    address public constant ethAddress = address(0);\r\n    address public immutable wbtcAddress;\r\n    address public immutable underlying;\r\n    address public immutable strikeAsset;\r\n    address public immutable collateralAsset;\r\n    address public immutable optionsAddress;\r\n    address public immutable adapterAddress;\r\n\r\n    constructor(\r\n        address _factory,\r\n        address payable _uniswapAdapterAddress,\r\n        address _wbtcAddress,\r\n        address _wbtcOptionsAddress,\r\n        address _collateralAsset,\r\n        address _priceFeed\r\n    ) {\r\n        require(_factory != address(0), \"!_factory\");\r\n        require(_uniswapAdapterAddress != address(0), \"!_uniswapAdapter\");\r\n        require(_wbtcAddress != address(0), \"!_wbtc\");\r\n        require(_wbtcOptionsAddress != address(0), \"!_wbtcOptions\");\r\n        require(_collateralAsset != address(0), \"!_collateral\");\r\n        require(_priceFeed != address(0), \"!_priceFeed\");\r\n\r\n        wbtcAddress = _wbtcAddress;\r\n        underlying = _wbtcAddress;\r\n        strikeAsset = _wbtcAddress;\r\n        collateralAsset = _collateralAsset;\r\n        priceProvider = AggregatorV3Interface(_priceFeed);\r\n        IRibbonFactory factoryInstance = IRibbonFactory(_factory);\r\n        iUniswapAdapter = IAmmAdapter(_uniswapAdapterAddress);\r\n        uniswapAdapterAddress = _uniswapAdapterAddress;\r\n        address _adapterAddress = factoryInstance.getAdapter(venue);\r\n        require(_adapterAddress != address(0), \"Adapter not set\");\r\n        adapterAddress = _adapterAddress;\r\n        factory = factoryInstance;\r\n        adapter = IProtocolAdapter(_adapterAddress);\r\n        optionsAddress = _wbtcOptionsAddress;\r\n    }\r\n\r\n    function initialize() external initializer {}\r\n\r\n    function getName() public pure returns (string memory) {\r\n        return instrumentName;\r\n    }\r\n\r\n    function getCurrentPrice() public view returns (uint256) {\r\n        (, int256 latestPrice, , , ) = priceProvider.latestRoundData();\r\n        uint256 currentPrice = uint256(latestPrice);\r\n        return currentPrice.mul(10**10);\r\n    }\r\n\r\n    //input currency is eth\r\n    function getInputs(uint256 amt)\r\n        public\r\n        view\r\n        returns (\r\n            uint256 wbtcSize,\r\n            uint256 expDigg,\r\n            uint256 tradeAmt,\r\n            uint256 premium,\r\n            uint256 totalCost,\r\n            uint256 currentPrice,\r\n            uint256 expiry\r\n        )\r\n    {\r\n        wbtcSize = iUniswapAdapter.expectedWbtcOut(amt);\r\n\r\n        (expDigg, tradeAmt) = iUniswapAdapter.expectedDiggOut(wbtcSize);\r\n\r\n        //set expiry to a month from now\r\n        //set strike to atm\r\n        expiry = block.timestamp + timePeriod;\r\n        currentPrice = uint256(getCurrentPrice());\r\n\r\n        ProtocolAdapterTypes.OptionTerms memory optionTerms =\r\n            ProtocolAdapterTypes.OptionTerms(\r\n                underlying,\r\n                strikeAsset,\r\n                collateralAsset,\r\n                expiry,\r\n                currentPrice,\r\n                optionType,\r\n                ethAddress\r\n            );\r\n\r\n        premium = adapter.premium(optionTerms, wbtcSize);\r\n        totalCost = amt.add(premium);\r\n    }\r\n\r\n    function buyInstrument(BuyInstrumentParams calldata params) public payable {\r\n        require(msg.value > 0, \"input must be eth\");\r\n        iUniswapAdapter.delegateBuyLp(\r\n            params.lpAmt,\r\n            params.tradeAmt,\r\n            params.minWbtcAmtOut,\r\n            params.minDiggAmtOut\r\n        );\r\n        uint256 positionID = buyPutFromAdapter(params);\r\n\r\n        uint256 balance = address(this).balance;\r\n        if (balance > 0) payable(msg.sender).transfer(balance);\r\n\r\n        emit PositionCreated(msg.sender, positionID, params.lpAmt);\r\n    }\r\n\r\n    function exercisePosition(uint256 positionID)\r\n        external\r\n        nonReentrant\r\n        returns (uint256 totalProfit)\r\n    {\r\n        InstrumentPosition storage position =\r\n            instrumentPositions[msg.sender][positionID];\r\n        require(!position.exercised, \"Already exercised\");\r\n\r\n        uint32 optionID;\r\n\r\n        optionID = position.putOptionID;\r\n\r\n        uint256 amount = position.amount;\r\n\r\n        uint256 profit =\r\n            adapter.delegateExerciseProfit(optionsAddress, optionID, amount);\r\n        if (profit > 0) {\r\n            adapter.delegateExercise(\r\n                optionsAddress,\r\n                optionID,\r\n                amount,\r\n                msg.sender\r\n            );\r\n        }\r\n\r\n        totalProfit += profit;\r\n\r\n        position.exercised = true;\r\n\r\n        emit Exercised(msg.sender, positionID, totalProfit);\r\n    }\r\n\r\n    function exerciseProfit(address account, uint256 positionID)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        InstrumentPosition storage position =\r\n            instrumentPositions[account][positionID];\r\n\r\n        if (position.exercised) return 0;\r\n\r\n        uint256 profit = 0;\r\n\r\n        uint256 amount = position.amount;\r\n\r\n        uint32 optionID;\r\n\r\n        optionID = position.putOptionID;\r\n\r\n        profit += adapter.delegateExerciseProfit(\r\n            optionsAddress,\r\n            optionID,\r\n            amount\r\n        );\r\n        return profit;\r\n    }\r\n\r\n    function canExercise(address account, uint256 positionID)\r\n        external\r\n        view\r\n        returns (bool)\r\n    {\r\n        InstrumentPosition storage position =\r\n            instrumentPositions[account][positionID];\r\n\r\n        if (position.exercised) return false;\r\n\r\n        bool canExercisePut = false;\r\n\r\n        uint32 optionID;\r\n\r\n        optionID = position.putOptionID;\r\n\r\n        bool canExerciseOptions =\r\n            adapter.canExercise(optionsAddress, optionID, position.amount);\r\n\r\n        if (canExerciseOptions) {\r\n            canExercisePut = true;\r\n        }\r\n        return canExercisePut;\r\n    }\r\n\r\n    //make this internal for production\r\n    function buyPutFromAdapter(BuyInstrumentParams calldata params)\r\n        public\r\n        payable\r\n        nonReentrant\r\n        returns (uint256 positionID)\r\n    {\r\n        require(\r\n            block.timestamp < params.expiry,\r\n            \"Cannot purchase after expiry\"\r\n        );\r\n\r\n        ProtocolAdapterTypes.OptionTerms memory optionTerms =\r\n            ProtocolAdapterTypes.OptionTerms(\r\n                underlying,\r\n                strikeAsset,\r\n                collateralAsset,\r\n                params.expiry,\r\n                params.putStrikePrice,\r\n                optionType,\r\n                ethAddress\r\n            );\r\n\r\n        uint256 optionID256 =\r\n            adapter.delegatePurchase(\r\n                optionTerms,\r\n                params.optionAmount,\r\n                params.putMaxCost\r\n            );\r\n        uint32 optionID = uint32(optionID256);\r\n\r\n        InstrumentPosition memory position =\r\n            InstrumentPosition(false, venueID, optionID, params.optionAmount);\r\n\r\n        positionID = instrumentPositions[msg.sender].length;\r\n        instrumentPositions[msg.sender].push(position);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_uniswapAdapterAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wbtcAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wbtcOptionsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"positionID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalProfit\",\"type\":\"uint256\"}],\"name\":\"Exercised\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"positionID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PositionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"adapter\",\"outputs\":[{\"internalType\":\"contract IProtocolAdapter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adapterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"putStrikePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"optionAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"putMaxCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tradeAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minWbtcAmtOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDiggAmtOut\",\"type\":\"uint256\"}],\"internalType\":\"struct StakedPut.BuyInstrumentParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"buyInstrument\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"putStrikePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"optionAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"putMaxCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tradeAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minWbtcAmtOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDiggAmtOut\",\"type\":\"uint256\"}],\"internalType\":\"struct StakedPut.BuyInstrumentParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"buyPutFromAdapter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"positionID\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"positionID\",\"type\":\"uint256\"}],\"name\":\"canExercise\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionID\",\"type\":\"uint256\"}],\"name\":\"exercisePosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalProfit\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"positionID\",\"type\":\"uint256\"}],\"name\":\"exerciseProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IRibbonFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"getInputs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"wbtcSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expDigg\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tradeAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getInstrumentPositions\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"exercised\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"putVenueID\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"putOptionID\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct StakedPutStorageV1.InstrumentPosition[]\",\"name\":\"positions\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"iUniswapAdapter\",\"outputs\":[{\"internalType\":\"contract IAmmAdapter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"positionID\",\"type\":\"uint256\"}],\"name\":\"instrumentPosition\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"exercised\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"putVenueID\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"putOptionID\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct StakedPutStorageV1.InstrumentPosition\",\"name\":\"position\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"numOfPositions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"optionType\",\"outputs\":[{\"internalType\":\"enum ProtocolAdapterTypes.OptionType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"optionsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceProvider\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strikeAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapAdapterAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wbtcAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"StakedPut","CompilerVersion":"v0.7.2+commit.51b20bc0","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000863dd8ea9b7472c54cde1f0e2d5b2bcc8cbf0cd1000000000000000000000000f8469bcbba322d668dc527609266b57439c2d4c20000000000000000000000002260fac5e5542a773aa44fbcfedf7c193bc2c5990000000000000000000000003961245db602ed7c03eeccda33ea3846bd8723bd000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000f4030086522a5beea4988f8ca5b36dbc97bee88c","EVMVersion":"Default","Library":"AmmAdapter:cf946387e76ff4aa8b98cab02cfb1c9b278af4b0;ProtocolAdapter:789e3b537432fe620a05063d7b926b098272d8d6","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b82d02f37f2a01e9817f8818aace49a56307d5200d43818f3a1e96f8086d0a19"}]}