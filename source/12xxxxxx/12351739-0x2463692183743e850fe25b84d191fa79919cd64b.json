{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/run/media/bill/Rekoner-0/protocols/iyusdi-contracts/contracts/iyusdi/IyusdiBondingCurves.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity >=0.8.0;\\n\\ncontract IyusdiBondingCurves {\\n\\n  struct BondingCurve {\\n    uint256 A;\\n    uint256 B;\\n    uint256 C;\\n    int256 D;\\n    uint256 ConstExp;\\n    uint256 MaxPrints;\\n  }\\n\\n  uint256 constant SIG_DIGITS = 3;\\n  uint256 constant public ENIGMA_A = 12;\\n  uint256 constant public ENIGMA_B = 140;\\n  uint256 constant public ENIGMA_C = 100;\\n  uint256 constant public ENIGMA_D = 0;\\n  uint256 constant public ENIGMA_CONST_EXP = 100;\\n  uint256 constant public ENIGMA_MAX_PRINTS = 160;\\n\\n  function _getPrintPrice(uint256 printNumber, BondingCurve storage curve) internal view returns (uint256 price) {\\n    uint256 decimals = 10 ** SIG_DIGITS;\\n    if (printNumber <= curve.ConstExp) {\\n      price = 0;\\n    } else if (printNumber < curve.B) {\\n      price = (10 ** ( curve.B - printNumber )) * decimals / (curve.A ** ( curve.B - printNumber));\\n    } else if (printNumber == curve.B) {\\n      price = decimals;\\n    } else {\\n      price = (curve.A ** ( printNumber - curve.B )) * decimals / (10 ** ( printNumber - curve.B ));\\n    }\\n    price = price + (curve.C * printNumber);\\n    int256 adjusted = int256(price) + curve.D;\\n    require(adjusted >= 0, '!price');\\n    price = uint256(adjusted);\\n    // Convert to wei\\n    price = price * 1 ether / decimals;\\n  }\\n\\n  function _getPrintPriceFromMem(uint256 printNumber, BondingCurve memory curve) internal pure returns (uint256 price) {\\n    uint256 decimals = 10 ** SIG_DIGITS;\\n    if (printNumber <= curve.ConstExp) {\\n      price = 0;\\n    } else if (printNumber < curve.B) {\\n      price = (10 ** ( curve.B - printNumber )) * decimals / (curve.A ** ( curve.B - printNumber));\\n    } else if (printNumber == curve.B) {\\n      price = decimals;\\n    } else {\\n      price = (curve.A ** ( printNumber - curve.B )) * decimals / (10 ** ( printNumber - curve.B ));\\n    }\\n    price = price + (curve.C * printNumber);\\n    int256 adjusted = int256(price) + curve.D;\\n    price = uint256(adjusted);\\n    // Convert to wei\\n    price = price * 1 ether / decimals;\\n  }\\n\\n  uint256 constant MAX_ITER = 50;\\n  function _validateBondingCurve(BondingCurve memory curve) internal pure returns(bool) {\\n    // TODO check these\\n    require(curve.A > 0, '!A');\\n    require(curve.B >= 0, '!B');\\n    require(curve.C > 0, '!C');\\n    require(curve.ConstExp < curve.B, '!ConstExp');\\n    require(curve.MaxPrints > curve.B, '!MaxPrints');\\n    // TODO see how long this takes, should be ok, max 100\\n    uint256 prev = 0;\\n    uint256 iter = curve.MaxPrints / MAX_ITER;\\n    if (iter == 0) iter = 1; \\n    for (uint256 i = 0; i < curve.MaxPrints; i += iter) {\\n      uint256 current = _getPrintPriceFromMem(i + 1, curve);\\n      require(current > 0 && current >= prev, '!curve');\\n      prev = current;\\n    }\\n    return true;\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"/run/media/bill/Rekoner-0/protocols/iyusdi-contracts/contracts/iyusdi/IyusdiCollections.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IyusdiCollectionsBase.sol\\\";\\n\\ncontract IyusdiCollections is IyusdiCollectionsBase {\\n\\n  constructor (address _protocol, uint256 _protocolMintPercent, uint256 _protocolBurnPercent, uint256 _curatorMintPercent, uint256 _curatorBurnPercent) {\\n    require(_protocol != address(0), '!protocol');\\n    require(_protocolMintPercent + _curatorMintPercent <= IyusdiCollectionsBase.PERCENT_BASE, '!mintPercent');\\n    require(_protocolBurnPercent + _curatorBurnPercent <= IyusdiCollectionsBase.PERCENT_BASE, '!burnPercent');\\n    owner = msg.sender;\\n    protocol = _protocol;\\n    protocolMintPercent = _protocolMintPercent;\\n    protocolBurnPercent = _protocolBurnPercent;\\n    curatorMintPercent = _curatorMintPercent;\\n    curatorBurnPercent = _curatorBurnPercent;\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"/run/media/bill/Rekoner-0/protocols/iyusdi-contracts/contracts/iyusdi/IyusdiCollectionsBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"../utils/Console.sol\\\";\\nimport \\\"./IyusdiNftV2.sol\\\";\\nimport \\\"./IyusdiBondingCurves.sol\\\";\\n\\ncontract IyusdiCollectionsBase is IyusdiBondingCurves {\\n\\n  struct RequestMintOriginal {\\n    uint256 mintPercent;\\n    uint256 burnPercent;\\n    BondingCurve curve;\\n    bytes data;\\n  }\\n\\n  event OriginalMinted (\\n    uint256 indexed og,\\n    uint32 mintPercent,\\n    uint32 burnPercent,\\n    uint32 A,\\n    uint32 B,\\n    uint32 C,\\n    int32 D,\\n    uint32 ConstExp,\\n    uint32 MaxPrints\\n  );\\n\\n  event PrintBurned(\\n    uint256 indexed id,\\n    uint256 price,\\n    uint256 protocolFee,\\n    uint256 curatorFee,\\n    uint256 ogFee,\\n    uint256 printNumber\\n  );\\n\\n  event PrintMinted(\\n    uint256 indexed id,\\n    uint256 price,\\n    uint256 protocolFee,\\n    uint256 curatorFee,\\n    uint256 ogFee,\\n    uint256 printNumber\\n  );\\n\\n  address public nft;\\n  address public owner;\\n  address public protocol;\\n  \\n  uint256 public curatorMintPercent;\\n  uint256 public curatorBurnPercent;\\n  uint256 public protocolMintPercent;\\n  uint256 public protocolBurnPercent;\\n  mapping (uint256 => uint256) public ogMintPercent;\\n  mapping (uint256 => uint256) public ogBurnPercent;\\n  mapping (uint256 => BondingCurve) public bondingCurves;\\n  mapping (address => bool) public approveMintOriginals;\\n  mapping (address => RequestMintOriginal) public requestMintOriginals;\\n  \\n  uint256 constant PERCENT_BASE = 10000;\\n\\n  modifier onlyOwner() {\\n    require(owner != address(0) && (msg.sender == owner || msg.sender == _getCurator()), \\\"!owner\\\");\\n    _;\\n  }\\n\\n  modifier onlyCurator() {\\n    require(msg.sender == _getCurator(), \\\"!curator\\\");\\n    _;\\n  }\\n\\n  modifier onlyProtocol() {\\n    require(msg.sender == protocol, \\\"!protocol\\\");\\n    _;\\n  }\\n\\n  function setNft(address _nft) onlyOwner external {\\n    require(_nft != address(0), '!nft');\\n    nft = _nft;\\n  }\\n\\n  function transferProtocol(address _protocol) onlyProtocol external {\\n    require(_protocol != address(0), '!protocol');\\n    protocol = _protocol;\\n  }\\n\\n  function transferOwner(address _owner) onlyOwner external {\\n    owner = _owner;\\n  }\\n\\n  function removeRequestMintOriginal() external {\\n    _removeRequestMintOriginal();\\n  }\\n\\n  function _removeRequestMintOriginal() internal {\\n    delete requestMintOriginals[msg.sender];\\n    approveMintOriginals[msg.sender] = false;\\n  }\\n\\n  function requestMintOriginal(uint256 mintPercent, uint256 burnPercent, BondingCurve memory curve, bytes memory data) external {\\n    require(protocolMintPercent + curatorMintPercent + mintPercent <= PERCENT_BASE, '!mintPercent');\\n    require(protocolBurnPercent + curatorBurnPercent + burnPercent <= PERCENT_BASE, '!burnPercent');\\n    _validateBondingCurve(curve);\\n    requestMintOriginals[msg.sender].mintPercent = mintPercent;\\n    requestMintOriginals[msg.sender].burnPercent = burnPercent;\\n    requestMintOriginals[msg.sender].curve = curve;\\n    // TODO does this copy the bytes ?\\n    requestMintOriginals[msg.sender].data = data;\\n    approveMintOriginals[msg.sender] = false;\\n  }\\n\\n  function _getCurator() internal view returns(address) {\\n    return IyusdiNftV2(nft).curator();\\n  }\\n\\n  function _getOgOwner(uint256 og) internal view returns(address) {\\n    return IyusdiNftV2(nft).originalOwner(og);\\n  }\\n\\n  function approveMintOriginal(address user, bool approve) external onlyCurator {\\n    approveMintOriginals[user] = approve;\\n  }\\n\\n  function mintApprovedOriginal() external returns(uint256 id) {\\n    require(approveMintOriginals[msg.sender], '!approved');\\n    uint256 mintPercent = requestMintOriginals[msg.sender].mintPercent;\\n    uint256 burnPercent = requestMintOriginals[msg.sender].burnPercent;\\n    // TODO does this copy the bytes ?\\n    BondingCurve memory curve = requestMintOriginals[msg.sender].curve;\\n    bytes memory data = requestMintOriginals[msg.sender].data;\\n\\n    id = IyusdiNftV2(nft).mintOriginal(msg.sender, data);\\n    ogMintPercent[id] = mintPercent;\\n    ogBurnPercent[id] = burnPercent;\\n    bondingCurves[id] = curve;\\n    emit OriginalMinted(id, uint32(mintPercent), uint32(burnPercent), uint32(curve.A), uint32(curve.B), uint32(curve.C), int32(curve.D), uint32(curve.ConstExp), uint32(curve.MaxPrints));\\n    _removeRequestMintOriginal();\\n  }\\n\\n  function mintPrint(uint256 og, bytes memory data) payable external returns(uint256 id) {\\n    id = _mintPrintFor(og, msg.sender, data);\\n  }\\n\\n  function mintPrintFor(uint256 og, address to, bytes memory data) payable external returns(uint256 id) {\\n    require(to != address(0), '!for');\\n    id = _mintPrintFor(og, to, data);\\n  }\\n\\n  function _getPrintNumber(uint256 og) internal view returns (uint256) {\\n    return IyusdiNftV2(nft).originalMintedPrints(og);\\n  }\\n\\n  function _getOgId(uint256 og) internal view returns (uint256) {\\n    return IyusdiNftV2(nft).getOgId(og);\\n  }\\n\\n  function getPrintPrice(uint256 og, uint256 printNumber) external view returns(uint256) {\\n    address ogOwner = _getOgOwner(og);\\n    require(ogOwner != address(0), '!og');\\n    BondingCurve storage curve = bondingCurves[og];\\n    return _getPrintPrice(printNumber, curve);\\n  }\\n\\n  function getBurnPrice(uint256 og, uint256 printNumber) external view returns(uint256) {\\n    address ogOwner = _getOgOwner(og);\\n    require(ogOwner != address(0), '!og');\\n    BondingCurve storage curve = bondingCurves[og];\\n    return _getBurnPrice(og, printNumber, curve);\\n  }\\n\\n  function _getBurnPrice(uint256 og, uint256 printNumber, BondingCurve storage curve) internal view returns(uint256) {\\n    uint256 printPrice = _getPrintPrice(printNumber, curve);\\n    uint256 protocolFee = printPrice * protocolMintPercent / PERCENT_BASE;\\n    uint256 curatorFee = printPrice * curatorMintPercent / PERCENT_BASE;\\n    uint256 ownerFee = printPrice * ogMintPercent[og] / PERCENT_BASE;\\n    return printPrice - protocolFee - curatorFee - ownerFee;\\n  }\\n\\n  function getPrintNumber(uint256 og) external view returns(uint256 printNumber) {\\n    address ogOwner = _getOgOwner(og);\\n    require(ogOwner != address(0), '!og');\\n    printNumber = _getPrintNumber(og);\\n  }\\n\\n  function _sendFee(address to, uint256 price, uint256 percent) internal returns(uint256 fee) {\\n    fee = price * percent / PERCENT_BASE;\\n    if (fee > 0) {\\n      (bool success, ) = to.call{value: fee}(\\\"\\\");\\n      require(success, '!_sendFee');\\n    }\\n  }\\n\\n  function _mintPrintFor(uint256 og, address to, bytes memory data) internal returns(uint256 id) {\\n    address ogOwner = _getOgOwner(og);\\n    require(ogOwner != address(0), '!og');\\n    uint256 printNumber = _getPrintNumber(og) + 1;\\n    BondingCurve storage curve = bondingCurves[og];\\n    require(printNumber <= curve.MaxPrints, '!maxPrints');\\n    uint256 printPrice = _getPrintPrice(printNumber, curve);\\n    require(msg.value >= printPrice, '!printPrice');\\n    uint256 protocolFee = _sendFee(protocol, printPrice, protocolMintPercent);\\n    uint256 curatorFee = _sendFee(_getCurator(), printPrice, curatorMintPercent);\\n    uint256 ownerFee = _sendFee(ogOwner, printPrice, ogMintPercent[og]);\\n    if (msg.value > printPrice) {\\n      uint256 refund =  msg.value - printPrice;\\n      (bool rsuccess, ) = msg.sender.call{value: refund}(\\\"\\\");\\n      require(rsuccess, '!refund');\\n    }\\n    id = IyusdiNftV2(nft).mintPrint(og, to, data);\\n    emit PrintMinted(id, printPrice, protocolFee, curatorFee, ownerFee, printNumber);\\n  }\\n\\n  function burnPrint(uint256 id, uint256 minPrintNumber) external {\\n    require(IyusdiNftV2(nft).isPrintId(id), '!printId');\\n    _burnPrint(id, minPrintNumber);\\n  }\\n\\n  function _burnPrint(uint256 id, uint256 minPrintNumber) internal {\\n    uint256 og = _getOgId(id);\\n    address ogOwner = _getOgOwner(og);\\n    require(ogOwner != address(0), '!og');\\n    uint256 printNumber = _getPrintNumber(og);\\n    require(printNumber >= minPrintNumber, '!minPrintNumber');\\n    BondingCurve storage curve = bondingCurves[og];\\n    uint256 burnPrice = _getBurnPrice(og, printNumber, curve);\\n    uint256 protocolFee = _sendFee(protocol, burnPrice, protocolBurnPercent);\\n    uint256 curatorFee = _sendFee(_getCurator(), burnPrice, curatorBurnPercent);\\n    uint256 ogFee = _sendFee(ogOwner, burnPrice, ogBurnPercent[og]);\\n    uint256 refund = burnPrice - protocolFee - curatorFee - ogFee;\\n    if (refund > 0) {\\n      (bool success, ) = msg.sender.call{value: refund}(\\\"\\\");\\n      require(success, '!refund');\\n    }\\n    IyusdiNftV2(nft).burnPrint(msg.sender, id);\\n    emit PrintBurned(id, burnPrice, protocolFee, curatorFee, ogFee, printNumber);\\n  }\\n\\n  function post(uint256 og, uint256 hash, bytes memory data) external {\\n    address ogOwner = _getOgOwner(og);\\n    require(msg.sender == ogOwner, '!owner');\\n    IyusdiNftV2(nft).post(og, hash, data);\\n  }\\n\\n  function allowTransfers(uint256 og, bool allow) external {\\n    address ogOwner = _getOgOwner(og);\\n    require(msg.sender == ogOwner, '!owner');\\n    IyusdiNftV2(nft).allowTransfers(og, allow);\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"/run/media/bill/Rekoner-0/protocols/iyusdi-contracts/contracts/iyusdi/IyusdiNftV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"./IyusdiNftV2Base.sol\\\";\\nimport \\\"../utils/Console.sol\\\";\\n\\ncontract IyusdiNftV2 is IyusdiNftV2Base, ERC1155 {\\n\\n  constructor (address _operator, address _curator, string memory _uri) ERC1155(_uri) {\\n    require(_curator != address(0) && _operator != address(0), '!param');\\n    curator = _curator;\\n    operators[_operator] = true;\\n    setApprovalForAll(_operator, true);\\n    _mint(_curator, CURATOR_ID, 1, \\\"\\\");\\n    emit CuratorMinted(_curator, CURATOR_ID);\\n  }\\n\\n  function setOperator(address operator, bool set) onlyCurator external {\\n    require(operator != address(0), '!operator');\\n    operators[operator] = set;\\n    setApprovalForAll(operator, set);\\n  }\\n\\n  function owns(uint256 id, address owner) external view returns(bool) {\\n    return balanceOf(owner, id) > 0;\\n  }\\n\\n  function mintOriginal(address owner, bytes memory data) external returns(uint256 id) {\\n    id = _mintOriginal(owner, data);\\n    _mint(owner, id, 1, \\\"\\\");\\n  }\\n\\n  function mintPrint(uint256 og, address to, bytes memory data) external returns(uint256 id) {\\n    id = _mintPrint(og, to, data);\\n    _mint(to, id, 1, \\\"\\\");\\n  }\\n\\n  function burnPrint(address from, uint256 id) external {\\n    _burnPrint(from, id);\\n    _burn(from, id, 1);\\n  }\\n\\n  /***********************************|\\n  |        Hooks                      |\\n  |__________________________________*/\\n  function _beforeTokenTransfer(\\n    address _operator,\\n    address from,\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  ) internal virtual override {\\n    super._beforeTokenTransfer(_operator, from, to, ids, amounts, data);\\n\\n    for (uint256 i = 0; i < ids.length; i++) {\\n      uint256 id = ids[i];\\n      require(_canTransfer(id, _operator), '!transfer');\\n      if (id == CURATOR_ID) {\\n        curator = to;\\n      } else if (_isOgId(id)) {\\n        originalOwner[id] = to;   \\n      }\\n    }\\n  }\\n\\n  /**\\n      * @dev See {IERC165-supportsInterface}.\\n      */\\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n    return ERC1155.supportsInterface(interfaceId);\\n  }\\n\\n}\"\r\n    },\r\n    \"/run/media/bill/Rekoner-0/protocols/iyusdi-contracts/contracts/iyusdi/IyusdiNftV2Base.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.8.0;\\n\\ncontract IyusdiNftV2Base {\\n\\n  event FeedItem(\\n    uint256 indexed id,\\n    uint256 indexed hash,\\n    uint256 timestamp,\\n    bytes data\\n  );\\n\\n  event CuratorMinted(\\n    address owner,\\n    uint256 id\\n  );\\n\\n  event OriginalMinted(\\n    address indexed owner,\\n    uint256 indexed id\\n  );\\n\\n  event PrintMinted(\\n    address indexed owner,\\n    uint256 indexed og,\\n    uint256 indexed id\\n  );\\n\\n  event PrintBurned(\\n    address from,\\n    uint256 id\\n  );\\n\\n  struct Original {\\n    uint64 mintedPrints;\\n    uint64 printIndex;\\n  }\\n\\n  uint256 public constant OG_MASK     = 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff;\\n  uint256 public constant OG_INV_MASK = 0xffffffffffffffffffffffffffffffff00000000000000000000000000000000;\\n  uint256 public constant CURATOR_ID  = 0x8000000000000000000000000000000000000000000000000000000000000000;\\n\\n  address public curator;\\n  Original[] public originals;\\n  mapping (address => bool) public operators;\\n  mapping (uint256 => bool) public canTransfer;\\n  mapping (uint256 => address) public originalOwner;\\n\\n  modifier onlyCurator() {\\n    require(msg.sender == curator, \\\"!curator\\\");\\n    _;\\n  }\\n\\n  function _getOgOwner(uint256 id) internal view returns (address) {\\n    return id == CURATOR_ID ? curator : originalOwner[_getOgId(id)];\\n  }\\n\\n  function originalIndex(uint256 id) external pure returns(uint256) {\\n    uint256 og = _getOgId(id);\\n    return (og >> 128) - 1;\\n  }\\n\\n  function originalMintedPrints(uint256 id) external view returns(uint256) {\\n    uint256 og = _getOgId(id);\\n    uint256 idx = (og >> 128) - 1;\\n    return originals[idx].mintedPrints;\\n  }\\n\\n  function post(uint256 id, uint256 hash, bytes memory data) external {\\n    require(_isOperator(), '!operator');\\n    uint256 og = _getOgId(id);\\n    address owner = _getOgOwner(og);\\n    require(owner != address(0), '!owner');\\n    emit FeedItem(id, hash, block.timestamp, data);\\n  }\\n\\n  function getOgId(uint256 id) external pure returns (uint256) {\\n    return _getOgId(id);\\n  }\\n\\n  function _getOgId(uint256 id) internal pure returns (uint256) {\\n    return id & OG_INV_MASK;\\n  }\\n\\n  function isOgId(uint256 id) external pure returns (bool) {\\n    return _isOgId(id);\\n  }\\n\\n  function _isOgId(uint256 id) internal pure returns (bool) {\\n    return (id & OG_MASK) == 0;\\n  }\\n\\n  function isPrintId(uint256 id) external pure returns (bool) {\\n    return _isPrintId(id);\\n  }\\n\\n  function _isPrintId(uint256 id) internal pure returns (bool) {\\n    return (id & OG_MASK) > 0;\\n  }\\n\\n  function _isCurator() internal view returns(bool) {\\n    return msg.sender == curator;\\n  }\\n\\n  function _isOperator() internal view returns(bool) {\\n    return operators[msg.sender];\\n  }\\n\\n  function _mintOriginal(address owner, bytes memory data) internal returns(uint256 id) {\\n    require(_isOperator() && owner != address(0), '!parm');\\n    originals.push(Original(0, 0));\\n    id = originals.length << 128;\\n    originalOwner[id] = owner;\\n    emit OriginalMinted(owner, id);\\n    emit FeedItem(id, 0, block.timestamp, data);\\n  }\\n\\n  function _mintPrint(uint256 og, address to, bytes memory data) internal returns(uint256 id) {\\n    require(_isOperator() && _isOgId(og), '!ogId');\\n    uint256 idx = (og >> 128) - 1;\\n    Original storage original = originals[idx];\\n    original.mintedPrints++;\\n    original.printIndex++;\\n    id = og | original.printIndex;\\n    emit PrintMinted(to, og, id);\\n    emit FeedItem(id, 0, block.timestamp, data);\\n  }\\n\\n  function _burnPrint(address from, uint256 id) internal {\\n    require(_isOperator() && _isPrintId(id), '!printId');\\n    uint256 og = _getOgId(id);\\n    uint256 idx = (og >> 128) - 1;\\n    Original storage original = originals[idx];\\n    original.mintedPrints = original.mintedPrints - 1;\\n    emit PrintBurned(from, id);\\n  }\\n\\n  function _canTransfer(uint256 id, address _operator) internal view returns(bool) {\\n    if (_isOgId(id) || operators[_operator]) {\\n      return true;\\n    } else {\\n      uint256 og = _getOgId(id);\\n      return canTransfer[og];\\n    }\\n  }\\n\\n  function allowTransfers(uint256 id, bool can) external {\\n    require(_isOperator(), '!operator');\\n    uint256 og = _getOgId(id);\\n    canTransfer[og] = can;\\n  }\\n\\n}\"\r\n    },\r\n    \"/run/media/bill/Rekoner-0/protocols/iyusdi-contracts/contracts/utils/Console.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity >=0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\nlibrary Console {\\n  bool constant PROD = false;\\n\\n  function concat(string memory a, string memory b) internal pure returns(string memory)\\n  {\\n    return string(abi.encodePacked(a, b));\\n  }\\n\\n  function concat(string memory a, string memory b, string memory c) internal pure returns(string memory)\\n  {\\n    return string(abi.encodePacked(a, b, c));\\n  }\\n\\n  event LogBalance(string, uint);\\n  function logBalance(address token, address to) internal {\\n    if (PROD) return;\\n    emit LogBalance(ERC20(token).symbol(), ERC20(token).balanceOf(to));\\n  }\\n\\n  function logBalance(string memory s, address token, address to) internal {\\n    if (PROD) return;\\n    emit LogBalance(string(abi.encodePacked(s, '/', ERC20(token).symbol())), ERC20(token).balanceOf(to));\\n  }\\n\\n  event LogUint(string, uint);\\n  function log(string memory s, uint x) internal {\\n    if (PROD) return;\\n    emit LogUint(s, x);\\n  }\\n\\n  function log(string memory s, string memory t, uint x) internal {\\n    if (PROD) return;\\n    emit LogUint(concat(s, t), x);\\n  }\\n    \\n  function log(string memory s, string memory t, string memory u, uint x) internal {\\n    if (PROD) return;\\n    emit LogUint(concat(s, t, u), x);\\n  }\\n    \\n  event LogInt(string, int);\\n  function log(string memory s, int x) internal {\\n    if (PROD) return;\\n    emit LogInt(s, x);\\n  }\\n  \\n  event LogBytes(string, bytes);\\n  function log(string memory s, bytes memory x) internal {\\n    if (PROD) return;\\n    emit LogBytes(s, x);\\n  }\\n  \\n  event LogBytes32(string, bytes32);\\n  function log(string memory s, bytes32 x) internal {\\n    if (PROD) return;\\n    emit LogBytes32(s, x);\\n  }\\n\\n  event LogAddress(string, address);\\n  function log(string memory s, address x) internal {\\n    if (PROD) return;\\n    emit LogAddress(s, x);\\n  }\\n\\n  event LogBool(string, bool);\\n  function log(string memory s, bool x) internal {\\n    if (PROD) return;\\n    emit LogBool(s, x);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n *\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping (uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping (address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor (string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155).interfaceId\\n            || interfaceId == type(IERC1155MetadataURI).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    )\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(_msgSender() != operator, \\\"ERC1155: setting approval status for self\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    )\\n        public\\n        virtual\\n        override\\n    {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        _balances[id][from] = fromBalance - amount;\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        public\\n        virtual\\n        override\\n    {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            _balances[id][from] = fromBalance - amount;\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address account, uint256 id, uint256 amount, bytes memory data) internal virtual {\\n        require(account != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][account] += amount;\\n        emit TransferSingle(operator, address(0), account, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `account`\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(address account, uint256 id, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 accountBalance = _balances[id][account];\\n        require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        _balances[id][account] = accountBalance - amount;\\n\\n        emit TransferSingle(operator, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(address account, uint256[] memory ids, uint256[] memory amounts) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 accountBalance = _balances[id][account];\\n            require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            _balances[id][account] = accountBalance - amount;\\n        }\\n\\n        emit TransferBatch(operator, account, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        internal\\n        virtual\\n    { }\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    )\\n        private\\n    {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver(to).onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        private\\n    {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver(to).onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The defaut value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overloaded;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[sender] = senderBalance - amount;\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _balances[account] = accountBalance - amount;\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protocol\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_protocolMintPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_protocolBurnPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_curatorMintPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_curatorBurnPercent\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"og\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"mintPercent\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"burnPercent\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"A\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"B\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"C\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"int32\",\"name\":\"D\",\"type\":\"int32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"ConstExp\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"MaxPrints\",\"type\":\"uint32\"}],\"name\":\"OriginalMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"curatorFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ogFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"printNumber\",\"type\":\"uint256\"}],\"name\":\"PrintBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"curatorFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ogFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"printNumber\",\"type\":\"uint256\"}],\"name\":\"PrintMinted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ENIGMA_A\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ENIGMA_B\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ENIGMA_C\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ENIGMA_CONST_EXP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ENIGMA_D\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ENIGMA_MAX_PRINTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"og\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"allow\",\"type\":\"bool\"}],\"name\":\"allowTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approve\",\"type\":\"bool\"}],\"name\":\"approveMintOriginal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approveMintOriginals\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bondingCurves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"A\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"B\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"C\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"D\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"ConstExp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"MaxPrints\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPrintNumber\",\"type\":\"uint256\"}],\"name\":\"burnPrint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curatorBurnPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curatorMintPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"og\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"printNumber\",\"type\":\"uint256\"}],\"name\":\"getBurnPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"og\",\"type\":\"uint256\"}],\"name\":\"getPrintNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"printNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"og\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"printNumber\",\"type\":\"uint256\"}],\"name\":\"getPrintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintApprovedOriginal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"og\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mintPrint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"og\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mintPrintFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ogBurnPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ogMintPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"og\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hash\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"post\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocol\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolBurnPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolMintPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeRequestMintOriginal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mintPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnPercent\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"A\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"B\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"C\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"D\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"ConstExp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"MaxPrints\",\"type\":\"uint256\"}],\"internalType\":\"struct IyusdiBondingCurves.BondingCurve\",\"name\":\"curve\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"requestMintOriginal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"requestMintOriginals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mintPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnPercent\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"A\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"B\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"C\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"D\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"ConstExp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"MaxPrints\",\"type\":\"uint256\"}],\"internalType\":\"struct IyusdiBondingCurves.BondingCurve\",\"name\":\"curve\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"}],\"name\":\"setNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"transferOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protocol\",\"type\":\"address\"}],\"name\":\"transferProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"IyusdiCollections","CompilerVersion":"v0.8.2+commit.661d1103","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000a3b6759fff7384699bf3b8f1f008ca0ec478366900000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000012c0000000000000000000000000000000000000000000000000000000000000064","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}