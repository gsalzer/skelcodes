{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/connectors/uniswap/main.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\nimport { TokenInterface } from \\\"../../common/interfaces.sol\\\";\\nimport { Helpers } from \\\"./helpers.sol\\\";\\nimport { Events } from \\\"./events.sol\\\";\\n\\nabstract contract UniswapResolver is Helpers, Events {\\n    /**\\n     * @dev Deposit Liquidity.\\n     * @param tokenA tokenA address.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n     * @param tokenB tokenB address.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n     * @param amtA tokenA amount.\\n     * @param unitAmt unit amount of amtB/amtA with slippage.\\n     * @param slippage slippage amount.\\n     * @param getId Get token amount at this ID from `InstaMemory` Contract.\\n     * @param setId Set token amount at this ID in `InstaMemory` Contract.\\n    */\\n    function deposit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amtA,\\n        uint256 unitAmt,\\n        uint256 slippage,\\n        uint256 getId,\\n        uint256 setId\\n    ) external payable returns (string memory _eventName, bytes memory _eventParam) {\\n        uint _amt = getUint(getId, amtA);\\n\\n        (uint _amtA, uint _amtB, uint _uniAmt) = _addLiquidity(\\n                                            tokenA,\\n                                            tokenB,\\n                                            _amt,\\n                                            unitAmt,\\n                                            slippage\\n                                        );\\n        setUint(setId, _uniAmt);\\n        \\n        _eventName = \\\"LogDepositLiquidity(address,address,uint256,uint256,uint256,uint256,uint256)\\\";\\n        _eventParam = abi.encode(tokenA, tokenB, _amtA, _amtB, _uniAmt, getId, setId);\\n    }\\n\\n    /**\\n     * @dev Withdraw Liquidity.\\n     * @param tokenA tokenA address.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n     * @param tokenB tokenB address.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n     * @param uniAmt uni token amount.\\n     * @param unitAmtA unit amount of amtA/uniAmt with slippage.\\n     * @param unitAmtB unit amount of amtB/uniAmt with slippage.\\n     * @param getId Get token amount at this ID from `InstaMemory` Contract.\\n     * @param setIds Set token amounts at this IDs in `InstaMemory` Contract.\\n    */\\n    function withdraw(\\n        address tokenA,\\n        address tokenB,\\n        uint256 uniAmt,\\n        uint256 unitAmtA,\\n        uint256 unitAmtB,\\n        uint256 getId,\\n        uint256[] calldata setIds\\n    ) external payable returns (string memory _eventName, bytes memory _eventParam) {\\n        uint _amt = getUint(getId, uniAmt);\\n\\n        (uint _amtA, uint _amtB, uint _uniAmt) = _removeLiquidity(\\n            tokenA,\\n            tokenB,\\n            _amt,\\n            unitAmtA,\\n            unitAmtB\\n        );\\n\\n        setUint(setIds[0], _amtA);\\n        setUint(setIds[1], _amtB);\\n        \\n        _eventName = \\\"LogWithdrawLiquidity(address,address,uint256,uint256,uint256,uint256,uint256[])\\\";\\n        _eventParam = abi.encode(tokenA, tokenB, _amtA, _amtB, _uniAmt, getId, setIds);\\n    }\\n\\n    /**\\n     * @dev Buy ETH/ERC20_Token.\\n     * @param buyAddr buying token address.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n     * @param sellAddr selling token amount.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n     * @param buyAmt buying token amount.\\n     * @param unitAmt unit amount of sellAmt/buyAmt with slippage.\\n     * @param getId Get token amount at this ID from `InstaMemory` Contract.\\n     * @param setId Set token amount at this ID in `InstaMemory` Contract.\\n    */\\n    function buy(\\n        address buyAddr,\\n        address sellAddr,\\n        uint256 buyAmt,\\n        uint256 unitAmt,\\n        uint256 getId,\\n        uint256 setId\\n    ) external payable returns (string memory _eventName, bytes memory _eventParam) {\\n        uint _buyAmt = getUint(getId, buyAmt);\\n        (TokenInterface _buyAddr, TokenInterface _sellAddr) = changeEthAddress(buyAddr, sellAddr);\\n        address[] memory paths = getPaths(address(_buyAddr), address(_sellAddr));\\n\\n        uint _slippageAmt = convert18ToDec(_sellAddr.decimals(),\\n            wmul(unitAmt, convertTo18(_buyAddr.decimals(), _buyAmt))\\n        );\\n\\n        checkPair(paths);\\n        uint _expectedAmt = getExpectedSellAmt(paths, _buyAmt);\\n        require(_slippageAmt >= _expectedAmt, \\\"Too much slippage\\\");\\n\\n        bool isEth = address(_sellAddr) == wethAddr;\\n        convertEthToWeth(isEth, _sellAddr, _expectedAmt);\\n        _sellAddr.approve(address(router), _expectedAmt);\\n\\n        uint _sellAmt = router.swapTokensForExactTokens(\\n            _buyAmt,\\n            _expectedAmt,\\n            paths,\\n            address(this),\\n            block.timestamp + 1\\n        )[0];\\n\\n        isEth = address(_buyAddr) == wethAddr;\\n        convertWethToEth(isEth, _buyAddr, _buyAmt);\\n\\n        setUint(setId, _sellAmt);\\n\\n        _eventName = \\\"LogBuy(address,address,uint256,uint256,uint256,uint256)\\\";\\n        _eventParam = abi.encode(buyAddr, sellAddr, _buyAmt, _sellAmt, getId, setId);\\n    }\\n\\n    /**\\n     * @dev Sell ETH/ERC20_Token.\\n     * @param buyAddr buying token address.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n     * @param sellAddr selling token amount.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n     * @param sellAmt selling token amount.\\n     * @param unitAmt unit amount of buyAmt/sellAmt with slippage.\\n     * @param getId Get token amount at this ID from `InstaMemory` Contract.\\n     * @param setId Set token amount at this ID in `InstaMemory` Contract.\\n    */\\n    function sell(\\n        address buyAddr,\\n        address sellAddr,\\n        uint256 sellAmt,\\n        uint256 unitAmt,\\n        uint256 getId,\\n        uint256 setId\\n    ) external payable returns (string memory _eventName, bytes memory _eventParam) {\\n        uint _sellAmt = getUint(getId, sellAmt);\\n        (TokenInterface _buyAddr, TokenInterface _sellAddr) = changeEthAddress(buyAddr, sellAddr);\\n        address[] memory paths = getPaths(address(_buyAddr), address(_sellAddr));\\n\\n        if (_sellAmt == uint(-1)) {\\n            _sellAmt = sellAddr == ethAddr ?\\n                address(this).balance :\\n                _sellAddr.balanceOf(address(this));\\n        }\\n\\n        uint _slippageAmt = convert18ToDec(_buyAddr.decimals(),\\n            wmul(unitAmt, convertTo18(_sellAddr.decimals(), _sellAmt))\\n        );\\n\\n        checkPair(paths);\\n        uint _expectedAmt = getExpectedBuyAmt(paths, _sellAmt);\\n        require(_slippageAmt <= _expectedAmt, \\\"Too much slippage\\\");\\n\\n        bool isEth = address(_sellAddr) == wethAddr;\\n        convertEthToWeth(isEth, _sellAddr, _sellAmt);\\n        _sellAddr.approve(address(router), _sellAmt);\\n\\n        uint _buyAmt = router.swapExactTokensForTokens(\\n            _sellAmt,\\n            _expectedAmt,\\n            paths,\\n            address(this),\\n            block.timestamp + 1\\n        )[1];\\n\\n        isEth = address(_buyAddr) == wethAddr;\\n        convertWethToEth(isEth, _buyAddr, _buyAmt);\\n\\n        setUint(setId, _buyAmt);\\n\\n        _eventName = \\\"LogSell(address,address,uint256,uint256,uint256,uint256)\\\";\\n        _eventParam = abi.encode(buyAddr, sellAddr, _buyAmt, _sellAmt, getId, setId);\\n    }\\n}\\n\\ncontract ConnectV2UniswapV2 is UniswapResolver {\\n    string public constant name = \\\"UniswapV2-v1\\\";\\n}\\n\"\r\n    },\r\n    \"contracts/common/interfaces.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\ninterface TokenInterface {\\n    function approve(address, uint256) external;\\n    function transfer(address, uint) external;\\n    function transferFrom(address, address, uint) external;\\n    function deposit() external payable;\\n    function withdraw(uint) external;\\n    function balanceOf(address) external view returns (uint);\\n    function decimals() external view returns (uint);\\n}\\n\\ninterface MemoryInterface {\\n    function getUint(uint id) external returns (uint num);\\n    function setUint(uint id, uint val) external;\\n}\\n\\ninterface InstaMapping {\\n    function cTokenMapping(address) external view returns (address);\\n    function gemJoinMapping(bytes32) external view returns (address);\\n}\\n\\ninterface AccountInterface {\\n    function enable(address) external;\\n    function disable(address) external;\\n    function isAuth(address) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/connectors/uniswap/helpers.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\nimport { TokenInterface } from \\\"../../common/interfaces.sol\\\";\\nimport { DSMath } from \\\"../../common/math.sol\\\";\\nimport { Basic } from \\\"../../common/basic.sol\\\";\\nimport { IUniswapV2Router02, IUniswapV2Factory } from \\\"./interface.sol\\\";\\n\\nabstract contract Helpers is DSMath, Basic {\\n\\n    /**\\n     * @dev uniswap v2 router02\\n     */\\n    IUniswapV2Router02 internal constant router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n\\n    function getExpectedBuyAmt(\\n        address[] memory paths,\\n        uint sellAmt\\n    ) internal view returns(uint buyAmt) {\\n        uint[] memory amts = router.getAmountsOut(\\n            sellAmt,\\n            paths\\n        );\\n        buyAmt = amts[1];\\n    }\\n\\n    function getExpectedSellAmt(\\n        address[] memory paths,\\n        uint buyAmt\\n    ) internal view returns(uint sellAmt) {\\n        uint[] memory amts = router.getAmountsIn(\\n            buyAmt,\\n            paths\\n        );\\n        sellAmt = amts[0];\\n    }\\n\\n    function checkPair(\\n        address[] memory paths\\n    ) internal view {\\n        address pair = IUniswapV2Factory(router.factory()).getPair(paths[0], paths[1]);\\n        require(pair != address(0), \\\"No-exchange-address\\\");\\n    }\\n\\n    function getPaths(\\n        address buyAddr,\\n        address sellAddr\\n    ) internal pure returns(address[] memory paths) {\\n        paths = new address[](2);\\n        paths[0] = address(sellAddr);\\n        paths[1] = address(buyAddr);\\n    }\\n\\n    function getMinAmount(\\n        TokenInterface token,\\n        uint amt,\\n        uint slippage\\n    ) internal view returns(uint minAmt) {\\n        uint _amt18 = convertTo18(token.decimals(), amt);\\n        minAmt = wmul(_amt18, sub(WAD, slippage));\\n        minAmt = convert18ToDec(token.decimals(), minAmt);\\n    }\\n\\n    function _addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint _amt,\\n        uint unitAmt,\\n        uint slippage\\n    ) internal returns (uint _amtA, uint _amtB, uint _liquidity) {\\n        (TokenInterface _tokenA, TokenInterface _tokenB) = changeEthAddress(tokenA, tokenB);\\n\\n        _amtA = _amt == uint(-1) ? getTokenBal(TokenInterface(tokenA)) : _amt;\\n        _amtB = convert18ToDec(_tokenB.decimals(), wmul(unitAmt, convertTo18(_tokenA.decimals(), _amtA)));\\n\\n        bool isEth = address(_tokenA) == wethAddr;\\n        convertEthToWeth(isEth, _tokenA, _amtA);\\n\\n        isEth = address(_tokenB) == wethAddr;\\n        convertEthToWeth(isEth, _tokenB, _amtB);\\n\\n        _tokenA.approve(address(router), _amtA);\\n        _tokenB.approve(address(router), _amtB);\\n\\n       uint minAmtA = getMinAmount(_tokenA, _amtA, slippage);\\n        uint minAmtB = getMinAmount(_tokenB, _amtB, slippage);\\n       (_amtA, _amtB, _liquidity) = router.addLiquidity(\\n            address(_tokenA),\\n            address(_tokenB),\\n            _amtA,\\n            _amtB,\\n            minAmtA,\\n            minAmtB,\\n            address(this),\\n            block.timestamp + 1\\n        );\\n    }\\n\\n    function _removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint _amt,\\n        uint unitAmtA,\\n        uint unitAmtB\\n    ) internal returns (uint _amtA, uint _amtB, uint _uniAmt) {\\n        TokenInterface _tokenA;\\n        TokenInterface _tokenB;\\n        (_tokenA, _tokenB, _uniAmt) = _getRemoveLiquidityData(\\n            tokenA,\\n            tokenB,\\n            _amt\\n        );\\n        {\\n        uint minAmtA = convert18ToDec(_tokenA.decimals(), wmul(unitAmtA, _uniAmt));\\n        uint minAmtB = convert18ToDec(_tokenB.decimals(), wmul(unitAmtB, _uniAmt));\\n        (_amtA, _amtB) = router.removeLiquidity(\\n            address(_tokenA),\\n            address(_tokenB),\\n            _uniAmt,\\n            minAmtA,\\n            minAmtB,\\n            address(this),\\n            block.timestamp + 1\\n        );\\n        }\\n\\n        bool isEth = address(_tokenA) == wethAddr;\\n        convertWethToEth(isEth, _tokenA, _amtA);\\n\\n        isEth = address(_tokenB) == wethAddr;\\n        convertWethToEth(isEth, _tokenB, _amtB);\\n    }\\n\\n    function _getRemoveLiquidityData(\\n        address tokenA,\\n        address tokenB,\\n        uint _amt\\n    ) internal returns (TokenInterface _tokenA, TokenInterface _tokenB, uint _uniAmt) {\\n        (_tokenA, _tokenB) = changeEthAddress(tokenA, tokenB);\\n        address exchangeAddr = IUniswapV2Factory(router.factory()).getPair(address(_tokenA), address(_tokenB));\\n        require(exchangeAddr != address(0), \\\"pair-not-found.\\\");\\n\\n        TokenInterface uniToken = TokenInterface(exchangeAddr);\\n        _uniAmt = _amt == uint(-1) ? uniToken.balanceOf(address(this)) : _amt;\\n        uniToken.approve(address(router), _uniAmt);\\n    }\\n}\"\r\n    },\r\n    \"contracts/connectors/uniswap/events.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\ncontract Events {\\n    event LogDepositLiquidity(\\n        address indexed tokenA,\\n        address indexed tokenB,\\n        uint256 amtA,\\n        uint256 amtB,\\n        uint256 uniAmount,\\n        uint256 getId,\\n        uint256 setId\\n    );\\n\\n    event LogWithdrawLiquidity(\\n        address indexed tokenA,\\n        address indexed tokenB,\\n        uint256 amountA,\\n        uint256 amountB,\\n        uint256 uniAmount,\\n        uint256 getId,\\n        uint256[] setId\\n    );\\n    \\n    event LogBuy(\\n        address indexed buyToken,\\n        address indexed sellToken,\\n        uint256 buyAmt,\\n        uint256 sellAmt,\\n        uint256 getId,\\n        uint256 setId\\n    );\\n\\n    event LogSell(\\n        address indexed buyToken,\\n        address indexed sellToken,\\n        uint256 buyAmt,\\n        uint256 sellAmt,\\n        uint256 getId,\\n        uint256 setId\\n    );\\n}\"\r\n    },\r\n    \"contracts/common/math.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\ncontract DSMath {\\n  uint constant WAD = 10 ** 18;\\n  uint constant RAY = 10 ** 27;\\n\\n  function add(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(x, y);\\n  }\\n\\n  function sub(uint x, uint y) internal virtual pure returns (uint z) {\\n    z = SafeMath.sub(x, y);\\n  }\\n\\n  function mul(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.mul(x, y);\\n  }\\n\\n  function div(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.div(x, y);\\n  }\\n\\n  function wmul(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(SafeMath.mul(x, y), WAD / 2) / WAD;\\n  }\\n\\n  function wdiv(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(SafeMath.mul(x, WAD), y / 2) / y;\\n  }\\n\\n  function rdiv(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(SafeMath.mul(x, RAY), y / 2) / y;\\n  }\\n\\n  function rmul(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(SafeMath.mul(x, y), RAY / 2) / RAY;\\n  }\\n\\n  function toInt(uint x) internal pure returns (int y) {\\n    y = int(x);\\n    require(y >= 0, \\\"int-overflow\\\");\\n  }\\n\\n  function toRad(uint wad) internal pure returns (uint rad) {\\n    rad = mul(wad, 10 ** 27);\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/common/basic.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\nimport { TokenInterface } from \\\"./interfaces.sol\\\";\\nimport { Stores } from \\\"./stores.sol\\\";\\nimport { DSMath } from \\\"./math.sol\\\";\\n\\nabstract contract Basic is DSMath, Stores {\\n\\n    function convert18ToDec(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\\n        amt = (_amt / 10 ** (18 - _dec));\\n    }\\n\\n    function convertTo18(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\\n        amt = mul(_amt, 10 ** (18 - _dec));\\n    }\\n\\n    function getTokenBal(TokenInterface token) internal view returns(uint _amt) {\\n        _amt = address(token) == ethAddr ? address(this).balance : token.balanceOf(address(this));\\n    }\\n\\n    function getTokensDec(TokenInterface buyAddr, TokenInterface sellAddr) internal view returns(uint buyDec, uint sellDec) {\\n        buyDec = address(buyAddr) == ethAddr ?  18 : buyAddr.decimals();\\n        sellDec = address(sellAddr) == ethAddr ?  18 : sellAddr.decimals();\\n    }\\n\\n    function encodeEvent(string memory eventName, bytes memory eventParam) internal pure returns (bytes memory) {\\n        return abi.encode(eventName, eventParam);\\n    }\\n\\n    function changeEthAddress(address buy, address sell) internal pure returns(TokenInterface _buy, TokenInterface _sell){\\n        _buy = buy == ethAddr ? TokenInterface(wethAddr) : TokenInterface(buy);\\n        _sell = sell == ethAddr ? TokenInterface(wethAddr) : TokenInterface(sell);\\n    }\\n\\n    function convertEthToWeth(bool isEth, TokenInterface token, uint amount) internal {\\n        if(isEth) token.deposit{value: amount}();\\n    }\\n\\n    function convertWethToEth(bool isEth, TokenInterface token, uint amount) internal {\\n       if(isEth) {\\n            token.approve(address(token), amount);\\n            token.withdraw(amount);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/connectors/uniswap/interface.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\ninterface IUniswapV2Router02 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\\ninterface IUniswapV2Factory {\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/stores.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\nimport { MemoryInterface, InstaMapping } from \\\"./interfaces.sol\\\";\\n\\n\\nabstract contract Stores {\\n\\n  /**\\n   * @dev Return ethereum address\\n   */\\n  address constant internal ethAddr = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n  /**\\n   * @dev Return Wrapped ETH address\\n   */\\n  address constant internal wethAddr = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n\\n  /**\\n   * @dev Return memory variable address\\n   */\\n  MemoryInterface constant internal instaMemory = MemoryInterface(0x8a5419CfC711B2343c17a6ABf4B2bAFaBb06957F);\\n\\n  /**\\n   * @dev Return InstaDApp Mapping Addresses\\n   */\\n  InstaMapping constant internal instaMapping = InstaMapping(0xe81F70Cc7C0D46e12d70efc60607F16bbD617E88);\\n\\n  /**\\n   * @dev Get Uint value from InstaMemory Contract.\\n   */\\n  function getUint(uint getId, uint val) internal returns (uint returnVal) {\\n    returnVal = getId == 0 ? val : instaMemory.getUint(getId);\\n  }\\n\\n  /**\\n  * @dev Set Uint value in InstaMemory Contract.\\n  */\\n  function setUint(uint setId, uint val) virtual internal {\\n    if (setId != 0) instaMemory.setUint(setId, val);\\n  }\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amtA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amtB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"uniAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogDepositLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"uniAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"setId\",\"type\":\"uint256[]\"}],\"name\":\"LogWithdrawLiquidity\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amtA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"uniAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitAmtA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitAmtB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"setIds\",\"type\":\"uint256[]\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"ConnectV2UniswapV2","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}