{"status":"1","message":"OK","result":[{"SourceCode":"{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity \\u003e=0.6.2 \\u003c0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { size := extcodesize(account) }\\r\\n        return size \\u003e 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain`call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length \\u003e 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                // solhint-disable-next-line no-inline-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\r\\n\\r\\n/*\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with GSN meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address payable) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\"},\"CreatureERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// // Degen Farm. Collectible NFT game\\r\\npragma solidity ^0.7.4;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./ERC721URIStorage.sol\\\";\\r\\n\\r\\ncontract Creatures is ERC721URIStorage {\\r\\n\\r\\n    enum AnimalType {\\r\\n        Cow, Horse, Rabbit, Chicken, Pig, Cat, Dog, Goose, Goat, Sheep,\\r\\n        Snake, Fish, Frog, Worm, Lama, Mouse, Camel, Donkey, Bee, Duck,\\r\\n        GenesisEgg // 20\\r\\n    }\\r\\n    enum Rarity     {\\r\\n        Normie, // 0\\r\\n        Chad,   // 1\\r\\n        Degen,  // 2\\r\\n        Unique // 3\\r\\n    }\\r\\n\\r\\n    struct Animal {\\r\\n        AnimalType atype; // uint8\\r\\n        Rarity     rarity; // uint8\\r\\n        uint32     index;\\r\\n        uint64     birthday;\\r\\n        string     name;\\r\\n    }\\r\\n\\r\\n    mapping (uint256 =\\u003e Animal) public animals;\\r\\n\\r\\n    mapping(address =\\u003e bool) public trusted_markets;\\r\\n    event TrustedMarket(address indexed _market, bool _state);\\r\\n\\r\\n    constructor(string memory name_,\\r\\n        string memory symbol_) ERC721(name_, symbol_)  {\\r\\n    }\\r\\n\\r\\n    function mint(\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        uint8 _animalType,\\r\\n        uint8 _rarity,\\r\\n        uint32 index\\r\\n        ) external onlyOwner {\\r\\n\\r\\n        _mint(to, tokenId);\\r\\n        animals[tokenId] = Animal(AnimalType(_animalType), Rarity(_rarity), index, uint64(block.timestamp), \\\"\\\");\\r\\n    }\\r\\n\\r\\n    function setName(uint256 tokenId, string calldata _name) external {\\r\\n        require(ownerOf(tokenId) == msg.sender, \\u0027Only owner can change name\\u0027);\\r\\n        require(bytes(animals[tokenId].name).length == 0, \\u0027The name has already been given\\u0027);\\r\\n\\r\\n        animals[tokenId].name = _name;\\r\\n    }\\r\\n\\r\\n    function setTrustedMarket(address _market, bool _state) external onlyOwner {\\r\\n        trusted_markets[_market] = _state;\\r\\n        emit TrustedMarket(_market, _state);\\r\\n    }\\r\\n\\r\\n    function getTypeAndRarity(uint256 _tokenId) external view returns(uint8, uint8) {\\r\\n        return (uint8(animals[_tokenId].atype), uint8(animals[_tokenId].rarity));\\r\\n    }\\r\\n\\r\\n    function getUsersTokens(address _owner) external view returns (uint256[] memory) {\\r\\n        //We can return only uint256[] memory\\r\\n         uint256 n = balanceOf(_owner);\\r\\n\\r\\n        uint256[] memory result = new uint256[](n);\\r\\n        for (uint16 i=0; i \\u003c n; i++) {\\r\\n            result[i]=tokenOfOwnerByIndex(_owner, i);\\r\\n        }\\r\\n        return  result;\\r\\n    }\\r\\n\\r\\n    function baseURI() public view override returns (string memory) {\\r\\n        return \\u0027http://degens.farm/meta/creatures/\\u0027;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Overriding standart function for gas safe traiding with trusted parts like DegenFarm\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` and `to` cannot be the zero address.\\r\\n     * - `caller` must be added to trustedMarkets.\\r\\n     */\\r\\n    function transferFrom(address from, address to, uint256 tokenId) public override {\\r\\n        if (trusted_markets[msg.sender]) {\\r\\n            _transfer(from, to, tokenId);\\r\\n        } else {\\r\\n            super.transferFrom(from, to, tokenId);\\r\\n        }\\r\\n\\r\\n    }\\r\\n}\\r\\n\"},\"DegensFarm.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// Degen Farm. Collectible NFT game\\r\\npragma solidity ^0.7.4;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./DegensFarmBase.sol\\\";\\r\\n\\r\\ncontract DegenFarm is DegenFarmBase {\\r\\n\\r\\n    uint8   constant public CREATURE_TYPE_COUNT= 20;  //how much creatures types may be used\\r\\n    uint256 constant public FARMING_DURATION   = 168 hours; //in seconds\\r\\n    //uint256 constant public NEXT_FARMING_DELAY = 1   weeks;\\r\\n    uint256 constant public TOOL_UNSTAKE_DELAY = 1   weeks;\\r\\n    uint256 constant public REVEAL_THRESHOLD   = 810e18;    //90% from MAX_BAGS\\r\\n    uint16   constant public NORMIE_COUNT_IN_TYPE = 100;\\r\\n    uint16   constant public CHAD_COUNT_IN_TYPE = 20;\\r\\n    uint16   constant public MAX_LANDS = 2500;\\r\\n\\r\\n    constructor (\\r\\n        address _land,\\r\\n        address _creatures,\\r\\n        address _inventory,\\r\\n        address _bagstoken,\\r\\n        address _dungtoken,\\r\\n        IEggs _eggs\\r\\n    )\\r\\n        DegenFarmBase(_land, _creatures, _inventory, _bagstoken, _dungtoken, _eggs)\\r\\n    {\\r\\n        require(CREATURE_TYPE_COUNT \\u003c= CREATURE_TYPE_COUNT_MAX, \\\"CREATURE_TYPE_COUNT is greater than CREATURE_TYPE_COUNT_MAX\\\");\\r\\n\\r\\n        // Mainnet amulet addrresses\\r\\n        amulets[0] = [0xD533a949740bb3306d119CC777fa900bA034cd52, 0x1F573D6Fb3F13d689FF844B4cE37794d79a7FF1C];\\r\\n        amulets[1] = [0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984, 0x111111111117dC0aa78b770fA6A738034120C302];\\r\\n        amulets[2] = [0xE41d2489571d322189246DaFA5ebDe1F4699F498, 0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F,\\r\\n            0xfA5047c9c78B8877af97BDcb85Db743fD7313d4a\\r\\n        ];\\r\\n        amulets[3] = [0x0000000000000000000000000000000000000000, 0x0000000000000000000000000000000000000000];\\r\\n        amulets[4] = [0xc00e94Cb662C3520282E6f5717214004A7f26888, 0x6B3595068778DD592e39A122f4f5a5cF09C90fE2,\\r\\n            0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2\\r\\n        ];\\r\\n        amulets[5] = [0x0D8775F648430679A709E98d2b0Cb6250d2887EF, 0x584bC13c7D411c00c01A62e8019472dE68768430];\\r\\n        amulets[6] = [0x3472A5A71965499acd81997a54BBA8D852C6E53d, 0x0F5D2fB29fb7d3CFeE444a200298f468908cC942];\\r\\n        amulets[7] = [0x514910771AF9Ca656af840dff83E8264EcF986CA, 0xd7c49CEE7E9188cCa6AD8FF264C1DA2e69D4Cf3B];\\r\\n        amulets[8] = [0x0bc529c00C6401aEF6D220BE8C6Ea1667F6Ad93e, 0x3155BA85D5F96b2d030a4966AF206230e46849cb];\\r\\n        amulets[9] = [0xa1faa113cbE53436Df28FF0aEe54275c13B40975, 0x3F382DbD960E3a9bbCeaE22651E88158d2791550,\\r\\n            0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9\\r\\n        ];\\r\\n        // TODO: add amulets\\r\\n        for (uint i = 10; i \\u003c CREATURE_TYPE_COUNT; i++) {\\r\\n            amulets[i] = [0xa1faa113cbE53436Df28FF0aEe54275c13B40975];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getCreatureTypeCount() override internal view returns (uint16) {\\r\\n        return CREATURE_TYPE_COUNT;\\r\\n    }\\r\\n\\r\\n    function getFarmingDuration() override internal view returns (uint) {\\r\\n        return FARMING_DURATION;\\r\\n    }\\r\\n\\r\\n    function getNormieCountInType() override internal view returns (uint16) {\\r\\n        return NORMIE_COUNT_IN_TYPE;\\r\\n    }\\r\\n\\r\\n    function getChadCountInType() override internal view returns (uint16) {\\r\\n        return CHAD_COUNT_IN_TYPE;\\r\\n    }\\r\\n\\r\\n    function getMaxLands() override internal view returns (uint16) {\\r\\n        return MAX_LANDS;\\r\\n    }\\r\\n\\r\\n    function getToolUnstakeDelay() override internal view returns (uint) {\\r\\n        return TOOL_UNSTAKE_DELAY;\\r\\n    }\\r\\n\\r\\n}\\r\\n\"},\"DegensFarmBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// Degen Farm. Collectible NFT game\\r\\npragma solidity ^0.7.4;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./IERC1155.sol\\\";\\r\\nimport \\\"./ERC1155Receiver.sol\\\";\\r\\nimport \\\"./IERC721.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\n\\r\\ninterface IEggs is IERC721 {\\r\\n    function mint(address to, uint256 tokenId) external;\\r\\n    function burn(uint256 tokenId) external;\\r\\n    function getUsersTokens(address _owner) external view returns (uint256[] memory);\\r\\n}\\r\\n\\r\\n\\r\\ninterface ICreatures is IERC721 {\\r\\n    function mint(\\r\\n        address to, \\r\\n        uint256 tokenId, \\r\\n        uint8 _animalType,\\r\\n        uint8 _rarity,\\r\\n        uint32 index\\r\\n        ) external;\\r\\n\\r\\n    function getTypeAndRarity(uint256 _tokenId) external view returns(uint8, uint8);\\r\\n}\\r\\n\\r\\ninterface ILand is IERC721 {\\r\\n    function mint(\\r\\n        address to, \\r\\n        uint256 tokenId\\r\\n    ) external;\\r\\n    function burn(uint256 tokenId) external;\\r\\n}\\r\\n\\r\\ninterface IDung is IERC20 {\\r\\n    function mint(\\r\\n        address to, \\r\\n        uint256 amount \\r\\n    ) external;\\r\\n}\\r\\n\\r\\ninterface IInventory is IERC1155 {\\r\\n     function getToolBoost(uint8 _item) external view returns (uint16);\\r\\n}\\r\\n\\r\\ninterface IAmuletPriceProvider {\\r\\n     function getLastPrice(address _amulet) external view returns (uint256);\\r\\n}\\r\\n\\r\\ninterface IOperatorManage {\\r\\n    function addOperator(address _newOperator) external;    \\r\\n    function removeOperator(address _oldOperator) external;\\r\\n    function withdrawERC20(IERC20 _tokenContract, address _admin) external;\\r\\n}\\r\\n\\r\\nabstract contract DegenFarmBase is ERC1155Receiver, Ownable {\\r\\n    enum AnimalType {\\r\\n        Cow, Horse, Rabbit, Chicken, Pig, Cat, Dog, Goose, Goat, Sheep,\\r\\n        Snake, Fish, Frog, Worm, Lama, Mouse, Camel, Donkey, Bee, Duck,\\r\\n        GenesisEgg // 20\\r\\n    }\\r\\n    enum Rarity     {\\r\\n        Normie, // 0\\r\\n        Chad,   // 1\\r\\n        Degen,  // 2\\r\\n        Unique // 3\\r\\n    }\\r\\n    enum   Result     {Fail,   Dung,  Chad, Degen}\\r\\n    \\r\\n    //External conatrct addresses used with this farm.\\r\\n    struct AddressRegistry {\\r\\n        address land;\\r\\n        address creatures;\\r\\n        address inventory;\\r\\n        address bagstoken;\\r\\n        address dungtoken;\\r\\n    }\\r\\n\\r\\n    //Degens Farm Key numbers\\r\\n    struct CreaturesCount {\\r\\n        uint16 totalNormie;\\r\\n        uint16 leftNormie;\\r\\n        uint16 totalChad;\\r\\n        uint16 leftChadToDiscover;\\r\\n        uint16 totalDegen;\\r\\n        uint16 leftDegenToDiscover;\\r\\n        uint16 leftChadFarmAttempts;\\r\\n        uint16 leftDegenFarmAttempts;\\r\\n    }\\r\\n\\r\\n    //Land count record\\r\\n    struct LandCount {\\r\\n        uint16 total;\\r\\n        uint16 left;\\r\\n    }\\r\\n \\r\\n    // Record  represent one farming act\\r\\n    struct FarmRecord {\\r\\n        uint256   creatureId;\\r\\n        uint256   landId;\\r\\n        uint256   harvestTime;\\r\\n        uint256[] amuletsPrice1;\\r\\n        uint256[] amuletsPrice2;\\r\\n        Result    harvest;\\r\\n        uint256   harvestId; //new NFT tokenId\\r\\n        bool[3]   commonAmuletInitialHold;\\r\\n    }\\r\\n\\r\\n    // Bonus for better harvest\\r\\n    struct Bonus {\\r\\n        uint16 amuletHold;\\r\\n        uint16 amuletBullTrend;\\r\\n        uint16 inventoryHold;\\r\\n    }\\r\\n\\r\\n    uint8   constant public CREATURE_TYPE_COUNT_MAX = 20;  //how much creatures types may be used\\r\\n\\r\\n    //Creature probubility multiplier, scaled with 100. 3.00  - 300, 3.05 - 305 etc\\r\\n    // so we need additional divide on 100 in formula\\r\\n    uint32  constant public CREATURE_P_MULT = 230;\\r\\n    uint16  public MAX_ALL_NORMIES    = getCreatureTypeCount() * getNormieCountInType(); //subj\\r\\n    uint256 constant public NFT_ID_MULTIPLIER  = 10000;     //must be set more then all Normies count\\r\\n    uint256 constant public FARM_DUNG_AMOUNT   = 250e32;      //per one harvest\\r\\n    uint16  constant public BONUS_POINTS_AMULET_HOLD       = 10;\\r\\n    uint16  constant public BONUS_POINTS_AMULET_BULL_TREND = 90;\\r\\n    \\r\\n    //Common Amulet addresses\\r\\n    address[3] public COMMON_AMULETS = [\\r\\n        0xa0246c9032bC3A600820415aE600c6388619A14D, \\r\\n        0x87d73E916D7057945c9BcD8cdd94e42A6F47f776,\\r\\n        0x126c121f99e1E211dF2e5f8De2d96Fa36647c855\\r\\n    ];\\r\\n\\r\\n    bool    public REVEAL_ENABLED  = false;\\r\\n    bool    public FARMING_ENABLED = false;\\r\\n    address public priceProvider;\\r\\n    IEggs    public eggs;\\r\\n    \\r\\n    address[][CREATURE_TYPE_COUNT_MAX] public amulets; //amulets for creatures\\r\\n    AddressRegistry                    public farm;\\r\\n    LandCount                          public landCount;\\r\\n\\r\\n    //common token price snapshots\\r\\n    mapping(uint256 =\\u003e uint256[3]) public commonAmuletPrices; \\r\\n\\r\\n    mapping(address =\\u003e uint256) public maxAmuletBalances;\\r\\n\\r\\n    // mapping from user to his(her) staked tools\\r\\n    // Index of uint256[6] represent tool NFT  itemID\\r\\n    mapping(address =\\u003e uint256[6]) public userStakedTools;\\r\\n\\r\\n\\r\\n    uint16 public allNormiesesLeft;\\r\\n    CreaturesCount[CREATURE_TYPE_COUNT_MAX] public creaturesBorn;\\r\\n    FarmRecord[]       farming;\\r\\n\\r\\n    event Reveal(uint256 indexed _tokenId, bool _isCreature, uint8 _animalType);\\r\\n    event Harvest(\\r\\n        uint256 indexed _eggId, \\r\\n        address farmer, \\r\\n        uint8   result ,\\r\\n        uint16  baseChance, \\r\\n        uint16  amuletHold,\\r\\n        uint16  amuletBullTrend,\\r\\n        uint16  inventoryHold\\r\\n    );\\r\\n    \\r\\n    constructor (\\r\\n        address _land, \\r\\n        address _creatures,\\r\\n        address _inventory,\\r\\n        address _bagstoken,\\r\\n        address _dungtoken,\\r\\n        IEggs _eggs\\r\\n    )\\r\\n    {\\r\\n        farm.land      = _land;\\r\\n        farm.creatures = _creatures;\\r\\n        farm.inventory = _inventory;\\r\\n        farm.bagstoken = _bagstoken;\\r\\n        farm.dungtoken = _dungtoken;\\r\\n        \\r\\n        // Index of creaturesBorn in this initial setting  \\r\\n        // must NOT exceed CREATURE_TYPE_COUNT\\r\\n        for (uint i = 0; i \\u003c getCreatureTypeCount(); i++) {\\r\\n            creaturesBorn[i] = CreaturesCount(\\r\\n                getNormieCountInType(), // totalNormie;\\r\\n                getNormieCountInType(), // leftNormie;\\r\\n                getChadCountInType(),   // totalChad;\\r\\n                getChadCountInType(),   // leftChadToDiscover;\\r\\n                1,                      // totalDegen;\\r\\n                1,                      // leftDegenToDiscover;\\r\\n                getNormieCountInType(), // leftChadFarmAttempts;\\r\\n                getChadCountInType());  // leftDegenFarmAttempts;\\r\\n        }\\r\\n\\r\\n        landCount        = LandCount(getMaxLands(), getMaxLands());\\r\\n        allNormiesesLeft = MAX_ALL_NORMIES;\\r\\n        eggs = _eggs;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Changes inventory contract\\r\\n    */\\r\\n    function setInventory(address _inventory) external onlyOwner {\\r\\n        farm.inventory = _inventory;\\r\\n    }\\r\\n\\r\\n    function reveal(uint count) external {\\r\\n        require(_isRevelEnabled(), \\\"Please wait for reveal enabled.\\\");\\r\\n        require(count \\u003e 0, \\\"Count must be positive\\\");\\r\\n        require(count \\u003c= 8, \\\"Count must less than 9\\\"); // random limit\\r\\n        require(\\r\\n            IERC20(farm.bagstoken).allowance(msg.sender, address(this)) \\u003e= count*1,\\r\\n            \\\"Please approve your BAGS token to this contract.\\\"\\r\\n        );\\r\\n        require(\\r\\n            IERC20(farm.bagstoken).transferFrom(msg.sender, address(this), count*1)\\r\\n        );\\r\\n        uint randomSeed = uint(keccak256(abi.encodePacked(block.timestamp, msg.sender)));\\r\\n        // random seed for 8 reveals (8x32=256)\\r\\n        for (uint i = 0; i \\u003c count; i++) {\\r\\n            _reveal(randomSeed);\\r\\n            randomSeed = randomSeed / 0x100000000; // shift right 32 bits\\r\\n        }\\r\\n    }\\r\\n\\r\\n    event Log(string mess);\\r\\n    /**\\r\\n     * @dev Start farming process. New NFT - Egg will minted for user \\r\\n     * @param _creatureId - NFT tokenId, caller must be owner of this token\\r\\n     * @param _landId -- NFT tokenId, caller must be owner of this token\\r\\n     */\\r\\n    function farmDeploy(uint256 _creatureId, uint256 _landId) external {\\r\\n        require(FARMING_ENABLED == true, \\\"Chief Farmer not enable yet\\\");\\r\\n        require(ICreatures(farm.creatures).ownerOf(_creatureId) == msg.sender, \\r\\n            \\\"Need to be Creature Owner\\\"\\r\\n        );\\r\\n        require(ILand(farm.land).ownerOf(_landId) == msg.sender,\\r\\n            \\\"Need to be Land Owner\\\"\\r\\n        );\\r\\n        (uint8 crType, uint8 crRarity) = ICreatures(farm.creatures).getTypeAndRarity(_creatureId);\\r\\n        require((DegenFarmBase.Rarity)(crRarity) == Rarity.Normie ||\\r\\n            (DegenFarmBase.Rarity)(crRarity) == Rarity.Chad,\\r\\n            \\\"Can farm only Normie and Chad\\\");\\r\\n        //Check that farming available yet\\r\\n        if (crRarity == 0) {\\r\\n            require(creaturesBorn[crType].leftChadToDiscover \\u003e 0, \\\"No more chads left\\\");\\r\\n        } else {\\r\\n            require(creaturesBorn[crType].leftDegenToDiscover \\u003e 0, \\\"No more Degen left\\\");\\r\\n        }\\r\\n        //1. Lets make amulet price snapshot\\r\\n        //1.1. First we need creat array with properly elements count\\r\\n        uint256[] memory prices1  = new uint256[](amulets[crType].length);\\r\\n        uint256[] memory prices2  = new uint256[](amulets[crType].length);\\r\\n        prices1 = _getExistingAmuletsPrices(amulets[crType]);\\r\\n        //2.Check and save Common Amulets price(if not exist yet)\\r\\n        _saveCommonAmuletPrices(block.timestamp);\\r\\n        //3. Save deploy record\\r\\n        farming.push(\\r\\n            FarmRecord({\\r\\n                creatureId:    _creatureId,\\r\\n                landId:        _landId,\\r\\n                harvestTime:   block.timestamp + getFarmingDuration(),\\r\\n                amuletsPrice1: prices1,\\r\\n                amuletsPrice2: prices2,\\r\\n                harvest:       Result.Fail,\\r\\n                harvestId:     0, \\r\\n                commonAmuletInitialHold: _getCommonAmuletsHoldState(msg.sender) //save initial hold state\\r\\n            })\\r\\n        );\\r\\n\\r\\n        // Let\\u0027s  mint Egg.\\r\\n        eggs.mint(\\r\\n            msg.sender,         // farmer\\r\\n            farming.length - 1  // tokenId\\r\\n        );\\r\\n        //STAKE LAND  and Creatures!!!!\\r\\n        ILand(farm.land).transferFrom(msg.sender, address(this), _landId);\\r\\n        ICreatures(farm.creatures).transferFrom(msg.sender, address(this), _creatureId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Finish farming process. Egg NFT will be  burn \\r\\n     * @param _deployId - NFT tokenId, caller must be owner of this token\\r\\n     */\\r\\n    function harvest(uint256 _deployId) external {\\r\\n\\r\\n        require(eggs.ownerOf(_deployId) == msg.sender, \\\"This is NOT YOUR EGG\\\");\\r\\n        \\r\\n        FarmRecord storage f = farming[_deployId];\\r\\n        require(f.harvestTime \\u003c= block.timestamp, \\\"To early for harvest\\\");\\r\\n        //Lets Calculate Dung/CHAD-DEGEN chance\\r\\n        Result farmingResult;\\r\\n        Bonus memory bonus;\\r\\n        //1. BaseChance\\r\\n        (uint8 crType, uint8 crRarity) = ICreatures(farm.creatures).getTypeAndRarity(\\r\\n            f.creatureId\\r\\n        );\\r\\n        uint16 baseChance;\\r\\n        if  (crRarity == 0) {\\r\\n            //Try farm CHAD. So if there is no CHADs any more we must return assets\\r\\n            if  (creaturesBorn[crType].leftChadToDiscover == 0) {\\r\\n                _endFarming(_deployId, Result.Fail);\\r\\n                return;\\r\\n            }\\r\\n            baseChance = creaturesBorn[crType].leftChadToDiscover * 100\\r\\n                /(creaturesBorn[crType].leftChadFarmAttempts);\\r\\n            //Decrease appropriate farm ATTEMPTS COUNT!!!\\r\\n            creaturesBorn[crType].leftChadFarmAttempts -= 1;\\r\\n        } else {\\r\\n\\r\\n            //Try farm DEGEN. So if there is no DEGENSs any more we must return assets\\r\\n            if  (creaturesBorn[crType].leftDegenToDiscover == 0) {\\r\\n                _endFarming(_deployId, Result.Fail);\\r\\n                return;\\r\\n            }\\r\\n            baseChance = creaturesBorn[crType].leftDegenToDiscover * 100\\r\\n                /(creaturesBorn[crType].leftDegenFarmAttempts);\\r\\n            //Decrease appropriate farm ATTEMPTS COUNT!!!\\r\\n            creaturesBorn[crType].leftDegenFarmAttempts -= 1;\\r\\n        }\\r\\n        //////////////////////////////////////////////\\r\\n        //   2. Bonus for amulet token ***HOLD***\\r\\n        //   3. Bonus for amulets BULLs trend\\r\\n        //////////////////////////////////////////////\\r\\n        bonus.amuletHold      = 0;\\r\\n        bonus.amuletBullTrend = 0;\\r\\n        //Check common amulets\\r\\n        _saveCommonAmuletPrices(block.timestamp);\\r\\n        //Get current hold stae\\r\\n        for (uint8 i = 0; i \\u003c COMMON_AMULETS.length; i ++){\\r\\n            if (f.commonAmuletInitialHold[i] \\u0026\\u0026  _getCommonAmuletsHoldState(msg.sender)[i]) {\\r\\n                //token was hold at deploy time and now - iT IS GOOD\\r\\n                //Lets check max Balance, because \\r\\n                //bonus.amuletHold = userAmuletBalance/maxAmuletBalances*BONUS_POINTS_AMULET_HOLD\\r\\n                _checkAndSaveMaxAmuletPrice(COMMON_AMULETS[i]);\\r\\n                bonus.amuletHold = uint16(\\r\\n                    IERC20(COMMON_AMULETS[i]).balanceOf(msg.sender) * 100 \\r\\n                    / maxAmuletBalances[COMMON_AMULETS[i]] * BONUS_POINTS_AMULET_HOLD / 100 //100 used for scale\\r\\n                );     \\r\\n                //Lets check Bull TREND\\r\\n                if  (_getCommonAmuletPrices(f.harvestTime - getFarmingDuration())[i]\\r\\n                        \\u003c  _getCommonAmuletPrices(block.timestamp)[i]\\r\\n                    ) \\r\\n                    {\\r\\n                       bonus.amuletBullTrend = BONUS_POINTS_AMULET_BULL_TREND; \\r\\n                    }\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        //Ok,  if there is NO common amulets lets check personal\\r\\n        uint256[] memory prices2    = new uint256[](amulets[crType].length);\\r\\n        prices2 = _getExistingAmuletsPrices(amulets[crType]);\\r\\n        if  (bonus.amuletHold != BONUS_POINTS_AMULET_HOLD) {\\r\\n            for (uint8 i=0; i \\u003c f.amuletsPrice1.length; i ++){\\r\\n                if (f.amuletsPrice1[i] \\u003e 0 \\u0026\\u0026 prices2[i] \\u003e 0){\\r\\n                    //Lets check max Balance, because \\r\\n                    //bonus.amuletHold = userAmuletBalance/maxAmuletBalances*BONUS_POINTS_AMULET_HOLD\\r\\n                    _checkAndSaveMaxAmuletPrice(amulets[i][crType]);\\r\\n                    bonus.amuletHold = uint16(\\r\\n                        IERC20(amulets[i][crType]).balanceOf(msg.sender) * 100 //100 used for scale\\r\\n                        / maxAmuletBalances[amulets[i][crType]] * BONUS_POINTS_AMULET_HOLD /100\\r\\n                    );\\r\\n                    //Lets check Bull TREND\\r\\n                    if (f.amuletsPrice1[i] \\u003c prices2[i]) {\\r\\n                       bonus.amuletBullTrend = BONUS_POINTS_AMULET_BULL_TREND; \\r\\n                    }\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        //////////////////////////////////////////////\\r\\n\\r\\n\\r\\n        ////////////////////////////////////////////// \\r\\n        //4. Bonus for inventory \\r\\n        //////////////////////////////////////////////\\r\\n        bonus.inventoryHold = 0;\\r\\n        if (userStakedTools[msg.sender].length \\u003e 0) { \\r\\n           for (uint8 i=0; i\\u003cuserStakedTools[msg.sender].length; i++) {\\r\\n               if  (userStakedTools[msg.sender][i] \\u003e 0){\\r\\n                   bonus.inventoryHold = bonus.inventoryHold \\r\\n                   + IInventory(farm.inventory).getToolBoost(i);\\r\\n               }\\r\\n           }\\r\\n        }  \\r\\n        //////////////////////////////////////////////\\r\\n\\r\\n        uint16 allBonus = bonus.amuletHold \\r\\n            + bonus.amuletBullTrend \\r\\n            + bonus.inventoryHold;\\r\\n        uint8 chanceOfRarityUP = uint8(\\r\\n            (baseChance + allBonus) * 100 / (100 + allBonus)\\r\\n        );\\r\\n        uint8[] memory choiceWeight = new uint8[](2); \\r\\n        choiceWeight[0] = chanceOfRarityUP; \\r\\n        choiceWeight[1] = 100 - chanceOfRarityUP;\\r\\n        uint8 choice = uint8(_getWeightedChoice(choiceWeight));\\r\\n\\r\\n        if (choice == 0) {\\r\\n            f.harvestId = (crRarity + 1) * NFT_ID_MULTIPLIER + _deployId;\\r\\n            // Mint new chad/degen\\r\\n\\r\\n            uint32 index;\\r\\n            //Decrease appropriate CREATRURE COUNT\\r\\n            if (crRarity + 1 == uint8(Rarity.Chad)) {\\r\\n                index = creaturesBorn[crType].totalChad - creaturesBorn[crType].leftChadToDiscover + 1;\\r\\n                creaturesBorn[crType].leftChadToDiscover -= 1;\\r\\n                farmingResult = Result.Chad;\\r\\n            } else if (crRarity + 1 == uint8(Rarity.Degen)) {\\r\\n                index = creaturesBorn[crType].totalDegen - creaturesBorn[crType].leftDegenToDiscover + 1;\\r\\n                creaturesBorn[crType].leftDegenToDiscover -= 1;\\r\\n                farmingResult = Result.Degen;\\r\\n            }\\r\\n\\r\\n            ICreatures(farm.creatures).mint(\\r\\n                msg.sender, \\r\\n                (crRarity + 1) * NFT_ID_MULTIPLIER + _deployId, // new iD\\r\\n                crType, //AnimalType\\r\\n                crRarity + 1,\\r\\n                index // index\\r\\n            );\\r\\n        } else {\\r\\n        //Mint new dung\\r\\n            IDung(farm.dungtoken).mint(msg.sender, FARM_DUNG_AMOUNT);\\r\\n            farmingResult = Result.Dung;\\r\\n        }\\r\\n        \\r\\n        //BURN Land\\r\\n        ILand(farm.land).burn(f.landId);\\r\\n        _endFarming(_deployId, farmingResult);\\r\\n        emit Harvest(\\r\\n            _deployId, \\r\\n            msg.sender, \\r\\n            uint8(farmingResult),\\r\\n            baseChance,\\r\\n            bonus.amuletHold,\\r\\n            bonus.amuletBullTrend,\\r\\n            bonus.inventoryHold \\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Stake one inventory item \\r\\n     * @param _itemId - NFT tokenId, caller must be owner of this token\\r\\n     */\\r\\n    function stakeOneTool(uint8 _itemId) external {\\r\\n        _stakeOneTool(_itemId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev UnStake one inventory item \\r\\n     * @param _itemId - NFT tokenId\\r\\n     */\\r\\n\\r\\n    function unstakeOneTool(uint8 _itemId) external {\\r\\n        _unstakeOneTool(_itemId);\\r\\n    }\\r\\n\\r\\n    /////////////////////////////////////////////////////\\r\\n    ////    Admin functions                       ///////\\r\\n    /////////////////////////////////////////////////////\\r\\n    function setOneCommonAmulet(uint8 _index, address _token) external onlyOwner {\\r\\n        COMMON_AMULETS[_index] = _token;\\r\\n    }\\r\\n\\r\\n    function setAmuletForOneCreature(uint8 _index, address[] memory _tokens) external onlyOwner {\\r\\n        delete amulets[_index];\\r\\n        amulets[_index] = _tokens;\\r\\n    }\\r\\n\\r\\n    function setPriceProvider(address _priceProvider) external onlyOwner {\\r\\n        priceProvider = _priceProvider;\\r\\n    }\\r\\n\\r\\n    function enableReveal(bool _isEnabled) external onlyOwner {\\r\\n        REVEAL_ENABLED = _isEnabled;\\r\\n    }\\r\\n\\r\\n    function enableFarming(bool _isEnabled) external onlyOwner {\\r\\n        FARMING_ENABLED = _isEnabled;\\r\\n    }\\r\\n\\r\\n    ////////////////////////////////////////\\r\\n    /// Proxy for NFT Operators mamnage   //\\r\\n    ////////////////////////////////////////\\r\\n    function  addOperator(address _contract, address newOperator) external onlyOwner {\\r\\n        IOperatorManage(_contract).addOperator(newOperator);\\r\\n    }\\r\\n\\r\\n    function removeOperator(address _contract, address oldOperator) external onlyOwner {\\r\\n        IOperatorManage(_contract).removeOperator(oldOperator);\\r\\n    }\\r\\n \\r\\n    function reclaimToken(address _contract, IERC20 anyTokens, address _admin) external onlyOwner {\\r\\n        IOperatorManage(_contract).withdrawERC20(anyTokens, _admin);\\r\\n    }\\r\\n    ////////////////////////////////////////////////////////\\r\\n\\r\\n    function getCreatureAmulets(uint8 _creatureType) external view returns (address[] memory) {\\r\\n        return _getCreatureAmulets(_creatureType);\\r\\n    }\\r\\n\\r\\n    function _getCreatureAmulets(uint8 _creatureType) internal view returns (address[] memory) {\\r\\n        return amulets[_creatureType];\\r\\n    } \\r\\n\\r\\n    function getCreatureStat(uint8 _creatureType) \\r\\n        external \\r\\n        view \\r\\n        returns (\\r\\n            uint16, \\r\\n            uint16, \\r\\n            uint16, \\r\\n            uint16, \\r\\n            uint16, \\r\\n            uint16,\\r\\n            uint16,\\r\\n            uint16 \\r\\n        )\\r\\n    {\\r\\n        CreaturesCount storage stat = creaturesBorn[_creatureType];\\r\\n        return (\\r\\n            stat.totalNormie, \\r\\n            stat.leftNormie, \\r\\n            stat.totalChad, \\r\\n            stat.leftChadToDiscover, \\r\\n            stat.totalDegen, \\r\\n            stat.leftDegenToDiscover,\\r\\n            stat.leftChadFarmAttempts,\\r\\n            stat.leftDegenFarmAttempts\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getWeightedChoice(uint8[] memory _weights) external view returns (uint8){\\r\\n        return _getWeightedChoice(_weights);\\r\\n    }\\r\\n\\r\\n    function _getWeightedChoice(uint8[] memory _weights) internal view returns (uint8){\\r\\n        uint randomSeed = uint(keccak256(abi.encodePacked(block.timestamp, msg.sender)));\\r\\n        return _getWeightedChoice2(_weights, randomSeed);\\r\\n    }\\r\\n\\r\\n    function getFarmingById(uint256 _farmingId) external view returns (FarmRecord memory) {\\r\\n        return farming[_farmingId];\\r\\n    }\\r\\n\\r\\n    function getCommonAmuletPrices(uint256 _timestamp) external view returns (uint256[3] memory) {\\r\\n        return _getCommonAmuletPrices(_timestamp);\\r\\n    }\\r\\n\\r\\n    function getOneAmuletPrice(address _token) external view returns (uint256) {\\r\\n        return _getOneAmuletPrice(_token);\\r\\n    }\\r\\n\\r\\n    \\r\\n    ///////////////////////////////////////////////\\r\\n    ///  Internals                          ///////                   \\r\\n    ///////////////////////////////////////////////\\r\\n    /**\\r\\n     * @dev Save farming results in storage and mint\\r\\n     * appropriate token (NFT, ERC20 or None)\\r\\n    */\\r\\n    function _endFarming(uint256 _deployId, Result  _res) internal {\\r\\n        //TODO need refactor if EGGs will be\\r\\n        FarmRecord storage f = farming[_deployId];\\r\\n        f.harvest = _res;\\r\\n        // unstake creature\\r\\n        ICreatures(farm.creatures).transferFrom(address(this), msg.sender, f.creatureId);\\r\\n        eggs.burn(_deployId); // Burn EGG\\r\\n\\r\\n        if  (_res ==  Result.Fail) {\\r\\n            //unstake land (if staked)\\r\\n            if (ILand(farm.land).ownerOf(f.landId) == address(this)){\\r\\n               ILand(farm.land).transferFrom(address(this), msg.sender, f.landId);\\r\\n            }\\r\\n            emit Harvest(\\r\\n                _deployId, \\r\\n                msg.sender, \\r\\n                uint8(_res),\\r\\n                0, //baseChance\\r\\n                0, //bonus.amuletHold,\\r\\n                0, //bonus.amuletBullTrend,\\r\\n                0  //bonus.inventoryHold \\r\\n            );   \\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _stakeOneTool(uint8 _itemId) internal {\\r\\n        require(IInventory(farm.inventory).balanceOf(msg.sender, _itemId) \\u003e= 1,\\r\\n            \\\"You must own this tool for stake!\\\"\\r\\n        );\\r\\n        //Before stake  we need two checks.\\r\\n        //1. Removed\\r\\n        //2. Cant`t stake one tool more than one item\\r\\n        require(userStakedTools[msg.sender][_itemId] == 0, \\\"Tool is already staked\\\");\\r\\n\\r\\n        //stake\\r\\n        IInventory(farm.inventory).safeTransferFrom(\\r\\n            msg.sender, \\r\\n            address(this), \\r\\n            _itemId, \\r\\n            1, \\r\\n            bytes(\\u00270\\u0027)\\r\\n        );\\r\\n        userStakedTools[msg.sender][_itemId] = block.timestamp;\\r\\n\\r\\n    }\\r\\n\\r\\n    function _unstakeOneTool(uint8 _itemId) internal {\\r\\n        require(userStakedTools[msg.sender][_itemId] \\u003e 0, \\\"This tool is not staked yet\\\");\\r\\n        require(block.timestamp - userStakedTools[msg.sender][_itemId] \\u003e= getToolUnstakeDelay(),\\r\\n            \\\"Cant unstake earlier than a week\\\"\\r\\n        );\\r\\n        userStakedTools[msg.sender][_itemId] = 0;\\r\\n        IInventory(farm.inventory).safeTransferFrom(\\r\\n            address(this), \\r\\n            msg.sender, \\r\\n            _itemId, \\r\\n            1, \\r\\n            bytes(\\u00270\\u0027)\\r\\n        );\\r\\n\\r\\n    }\\r\\n\\r\\n    function _saveCommonAmuletPrices(uint256 _timestamp) internal {\\r\\n        //Lets check if price NOT exist for this timestamp - lets save it\\r\\n        if  (commonAmuletPrices[_timestamp][0] == 0) {\\r\\n            for (uint8 i=0; i \\u003c COMMON_AMULETS.length; i++){\\r\\n                commonAmuletPrices[_timestamp][i] = _getOneAmuletPrice(COMMON_AMULETS[i]);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _checkAndSaveMaxAmuletPrice(address _amulet) internal {\\r\\n        if  (IERC20(_amulet).balanceOf(msg.sender) \\r\\n                \\u003e maxAmuletBalances[_amulet]\\r\\n            ) \\r\\n            {\\r\\n              maxAmuletBalances[_amulet] \\r\\n              = IERC20(_amulet).balanceOf(msg.sender);\\r\\n            }\\r\\n    }\\r\\n\\r\\n    function _getCommonAmuletPrices(uint256 _timestamp) internal view returns (uint256[3] memory) {\\r\\n        //Lets check if price allready exist for this timestamp - just return it\\r\\n        if  (commonAmuletPrices[_timestamp][0] != 0) {\\r\\n            return commonAmuletPrices[_timestamp];\\r\\n        }\\r\\n        //If price is not exist lets get it from oracles\\r\\n        uint256[3] memory res;\\r\\n        for (uint8 i=0; i \\u003c COMMON_AMULETS.length; i++){\\r\\n            res[i] = _getOneAmuletPrice(COMMON_AMULETS[i]);\\r\\n        }\\r\\n        return res;\\r\\n    }\\r\\n\\r\\n    function _getCommonAmuletsHoldState(address _farmer) internal view returns (bool[3] memory) {\\r\\n        \\r\\n        //If token balance =0 - set false\\r\\n        bool[3] memory res;\\r\\n        for (uint8 i=0; i \\u003c COMMON_AMULETS.length; i++){\\r\\n            if  (IERC20(COMMON_AMULETS[i]).balanceOf(_farmer) \\u003e 0){\\r\\n                res[i] = true;    \\r\\n            } else {\\r\\n            // Set to zero if token balance is 0   \\r\\n                res[i] = false;\\r\\n            }\\r\\n        }\\r\\n        return res;\\r\\n    }\\r\\n\\r\\n    function _getExistingAmuletsPrices(address[] memory _tokens) \\r\\n        internal \\r\\n        view \\r\\n        returns (uint256[] memory) \\r\\n    {\\r\\n        uint256[] memory res = new uint256[](_tokens.length);\\r\\n        for (uint8 i=0; i \\u003c _tokens.length; i++){\\r\\n            if  (IERC20(_tokens[i]).balanceOf(msg.sender) \\u003e 0){\\r\\n                res[i] = _getOneAmuletPrice(_tokens[i]);    \\r\\n            } else {\\r\\n            // Set to zero if token balance is 0   \\r\\n                res[i] = 0;\\r\\n            }    \\r\\n        }\\r\\n        return res;\\r\\n    }\\r\\n\\r\\n    function _getOneAmuletPrice(address _token) internal view returns (uint256) {\\r\\n        return IAmuletPriceProvider(priceProvider).getLastPrice(_token);\\r\\n    }\\r\\n\\r\\n    function _isRevelEnabled() internal view returns (bool) {\\r\\n        return REVEAL_ENABLED;\\r\\n    }\\r\\n\\r\\n    function _reveal(uint randomSeed) internal {\\r\\n        require ((landCount.left + allNormiesesLeft) \\u003e 0, \\\"Sorry, no more reveal!\\\");\\r\\n        //1. Lets choose Land OR Creature, %\\r\\n        //So we have two possible results. 1 - Land, 0 - Creature.\\r\\n        // sum of weights = 100, lets define weigth for Creature\\r\\n        uint8[] memory choiceWeight = new uint8[](2); \\r\\n        choiceWeight[0] = uint8(\\r\\n            uint32(allNormiesesLeft) * CREATURE_P_MULT         // * 100 removed due CREATURE_P_MULT \\r\\n            / (CREATURE_P_MULT * uint32(allNormiesesLeft) / 100 + uint32(landCount.left))\\r\\n        ); \\r\\n        choiceWeight[1] = 100 - choiceWeight[0];\\r\\n        uint8 choice = uint8(_getWeightedChoice2(choiceWeight, randomSeed));\\r\\n        //Check that choice can be executed\\r\\n        if (choice != 0 \\u0026\\u0026 landCount.left == 0) {\\r\\n            //There are no more Lands. So we need change choice\\r\\n            choice = 0;\\r\\n        }\\r\\n\\r\\n        if (choice == 0) { // create creature\\r\\n            uint8[] memory choiceWeight0 = new uint8[](getCreatureTypeCount());\\r\\n            //2. Ok, Creature will  be born. But what kind of?\\r\\n            for (uint8 i = 0; i \\u003c getCreatureTypeCount(); i ++) {\\r\\n                choiceWeight0[i] = uint8(creaturesBorn[i].leftNormie);\\r\\n            }\\r\\n            choice = uint8(_getWeightedChoice2(choiceWeight0, randomSeed / 0x10000)); // shift right 16 bits\\r\\n            ICreatures(farm.creatures).mint(\\r\\n                msg.sender, \\r\\n                MAX_ALL_NORMIES - allNormiesesLeft,\\r\\n                choice, //AnimalType\\r\\n                0,\\r\\n                creaturesBorn[choice].totalNormie - creaturesBorn[choice].leftNormie + 1 // index\\r\\n            );\\r\\n            emit Reveal(MAX_ALL_NORMIES - allNormiesesLeft, true, choice);\\r\\n            allNormiesesLeft -= 1;\\r\\n            creaturesBorn[choice].leftNormie -= 1;\\r\\n        } else { // create land\\r\\n            ILand(farm.land).mint(\\r\\n                msg.sender, \\r\\n                getMaxLands() - landCount.left\\r\\n            );\\r\\n            emit Reveal(getMaxLands() - landCount.left , false, 0);\\r\\n            landCount.left -= 1; \\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _getWeightedChoice2(uint8[] memory _weights, uint randomSeed) internal view returns (uint8){\\r\\n        uint256 sum_of_weights;\\r\\n        for (uint8 i = 0; i \\u003c _weights.length; i++) {\\r\\n            sum_of_weights += _weights[i];\\r\\n        }\\r\\n        uint256 rnd = randomSeed % sum_of_weights;\\r\\n        for (uint8 i = 0; i \\u003c _weights.length; i++) {\\r\\n            if (rnd \\u003c _weights[i]) {\\r\\n                return i;\\r\\n            }\\r\\n            rnd -= _weights[i];\\r\\n        }\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\r\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\r\\n        To accept the transfer, this must return\\r\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\r\\n        (i.e. 0xf23a6e61, or its own function selector).\\r\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\r\\n        @param from The address which previously owned the token\\r\\n        @param id The ID of the token being transferred\\r\\n        @param value The amount of tokens being transferred\\r\\n        @param data Additional data with no specified format\\r\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\r\\n    */\\r\\n    function onERC1155Received(\\r\\n        address operator,\\r\\n        address from,\\r\\n        uint256 id,\\r\\n        uint256 value,\\r\\n        bytes calldata data\\r\\n    )\\r\\n        external\\r\\n        override\\r\\n        returns(bytes4)\\r\\n    {\\r\\n        return bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"));  \\r\\n    }    \\r\\n\\r\\n    /**\\r\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\r\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\r\\n        been updated. To accept the transfer(s), this must return\\r\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\r\\n        (i.e. 0xbc197c81, or its own function selector).\\r\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\r\\n        @param from The address which previously owned the token\\r\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\r\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\r\\n        @param data Additional data with no specified format\\r\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\r\\n    */\\r\\n    function onERC1155BatchReceived(\\r\\n        address operator,\\r\\n        address from,\\r\\n        uint256[] calldata ids,\\r\\n        uint256[] calldata values,\\r\\n        bytes calldata data\\r\\n    )\\r\\n        external\\r\\n        override\\r\\n        returns(bytes4)\\r\\n    {\\r\\n        return bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256,uint256,bytes)\\\"));  \\r\\n    }\\r\\n\\r\\n    function getCreatureTypeCount() virtual internal view returns (uint16);\\r\\n\\r\\n    function getFarmingDuration() virtual internal view returns (uint);\\r\\n\\r\\n    function getToolUnstakeDelay() virtual internal view returns (uint);\\r\\n\\r\\n    function getNormieCountInType() virtual internal view returns (uint16);\\r\\n\\r\\n    function getChadCountInType() virtual internal view returns (uint16);\\r\\n\\r\\n    function getMaxLands() virtual internal view returns (uint16);\\r\\n\\r\\n    function getUsersTokens(address _owner) external view returns (uint256[] memory) {\\r\\n        return eggs.getUsersTokens(_owner);\\r\\n    }\\r\\n}\"},\"DegensFarmLite.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// Degen Farm. Collectible NFT game\\r\\npragma solidity ^0.7.4;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./DegensFarmBase.sol\\\";\\r\\n\\r\\ncontract DegenFarmLite is DegenFarmBase {\\r\\n\\r\\n    uint8   constant public CREATURE_TYPE_COUNT= 2;  //how much creatures types may be used\\r\\n    uint256 constant public FARMING_DURATION   = 168 seconds; //in seconds\\r\\n    //uint256 constant public NEXT_FARMING_DELAY = 1   minutes;\\r\\n    uint256 constant public TOOL_UNSTAKE_DELAY = 1   minutes;\\r\\n    uint256 constant public REVEAL_THRESHOLD   = 0;    //90% from MAX_BAGS\\r\\n    uint16   constant public NORMIE_COUNT_IN_TYPE = 20;\\r\\n    uint16   constant public CHAD_COUNT_IN_TYPE = 5;\\r\\n    uint16   constant public MAX_LANDS = 100;\\r\\n\\r\\n    constructor (\\r\\n        address _land,\\r\\n        address _creatures,\\r\\n        address _inventory,\\r\\n        address _bagstoken,\\r\\n        address _dungtoken,\\r\\n        IEggs _eggs\\r\\n    )\\r\\n        DegenFarmBase(_land, _creatures, _inventory, _bagstoken, _dungtoken, _eggs)\\r\\n    {\\r\\n        require(CREATURE_TYPE_COUNT \\u003c= CREATURE_TYPE_COUNT_MAX, \\\"CREATURE_TYPE_COUNT is greater than CREATURE_TYPE_COUNT_MAX\\\");\\r\\n\\r\\n        // Rinkeby amulet addrresses\\r\\n        amulets[0] = [0xD533a949740bb3306d119CC777fa900bA034cd52, 0x1F573D6Fb3F13d689FF844B4cE37794d79a7FF1C];\\r\\n        amulets[1] = [0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984, 0x111111111117dC0aa78b770fA6A738034120C302];\\r\\n    }\\r\\n\\r\\n    function getCreatureTypeCount() override internal view returns (uint16) {\\r\\n        return CREATURE_TYPE_COUNT;\\r\\n    }\\r\\n\\r\\n    function getFarmingDuration() override internal view returns (uint) {\\r\\n        return FARMING_DURATION;\\r\\n    }\\r\\n\\r\\n    function getNormieCountInType() override internal view returns (uint16) {\\r\\n        return NORMIE_COUNT_IN_TYPE;\\r\\n    }\\r\\n\\r\\n    function getChadCountInType() override internal view returns (uint16) {\\r\\n        return CHAD_COUNT_IN_TYPE;\\r\\n    }\\r\\n\\r\\n    function getMaxLands() override internal view returns (uint16) {\\r\\n        return MAX_LANDS;\\r\\n    }\\r\\n\\r\\n    function getToolUnstakeDelay() override internal view returns (uint) {\\r\\n        return TOOL_UNSTAKE_DELAY;\\r\\n    }\\r\\n\\r\\n}\\r\\n\"},\"EggERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// Degen Farm. Collectible NFT game\\r\\npragma solidity ^0.7.4;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./ERC721URIStorage.sol\\\";\\r\\n\\r\\ncontract Eggs is ERC721URIStorage {\\r\\n\\r\\n    mapping(address =\\u003e bool) public trusted_markets;\\r\\n    event TrustedMarket(address indexed _market, bool _state);\\r\\n\\r\\n    constructor() ERC721(\\\"Degen$ Farm Eggs\\\", \\\"EGG\\\")  {\\r\\n    }\\r\\n\\r\\n    function mint(\\r\\n        address to, \\r\\n        uint256 tokenId\\r\\n        ) external onlyOwner {\\r\\n    \\t\\r\\n        _mint(to, tokenId);\\r\\n    }\\r\\n    \\r\\n    function setTrustedMarket(address _market, bool _state) external onlyOwner {\\r\\n        trusted_markets[_market] = _state;\\r\\n        emit TrustedMarket(_market, _state);\\r\\n    }\\r\\n\\r\\n    function getUsersTokens(address _owner) external view returns (uint256[] memory) {\\r\\n        //We can return only uint256[] memory, but we cant use push \\r\\n        // with memory arrays. \\r\\n        //https://docs.soliditylang.org/en/v0.7.4/types.html#allocating-memory-arrays\\r\\n        uint256 n = balanceOf(_owner); \\r\\n\\r\\n        uint256[] memory result = new uint256[](n);\\r\\n        for (uint16 i=0; i \\u003c n; i++) {\\r\\n            result[i]=tokenOfOwnerByIndex(_owner, i);\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    function baseURI() public view  override returns (string memory) {\\r\\n        return \\u0027http://degens.farm/meta/eggs/\\u0027;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Overriding standart function for gas safe traiding with trusted parts like DegenFarm\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` and `to` cannot be the zero address.\\r\\n     * - `caller` must be added to trustedMarkets.\\r\\n     */\\r\\n    function transferFrom(address from, address to, uint256 tokenId) public override {\\r\\n        if  (trusted_markets[msg.sender]) {    \\r\\n            _transfer(from, to, tokenId);\\r\\n        } else {\\r\\n            super.transferFrom(from, to, tokenId);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function burn(uint256 tokenId) external onlyOwner {\\r\\n        _burn(tokenId);\\r\\n    }\\r\\n}\\r\\n\"},\"EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Library for managing an enumerable variant of Solidity\\u0027s\\r\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\r\\n * type.\\r\\n *\\r\\n * Maps have the following properties:\\r\\n *\\r\\n * - Entries are added, removed, and checked for existence in constant time\\r\\n * (O(1)).\\r\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\r\\n *\\r\\n * ```\\r\\n * contract Example {\\r\\n *     // Add the library methods\\r\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\r\\n *\\r\\n *     // Declare a set state variable\\r\\n *     EnumerableMap.UintToAddressMap private myMap;\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * As of v3.0.0, only maps of type `uint256 -\\u003e address` (`UintToAddressMap`) are\\r\\n * supported.\\r\\n */\\r\\nlibrary EnumerableMap {\\r\\n    // To implement this library for multiple types with as little code\\r\\n    // repetition as possible, we write it in terms of a generic Map type with\\r\\n    // bytes32 keys and values.\\r\\n    // The Map implementation uses private functions, and user-facing\\r\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\r\\n    // the underlying Map.\\r\\n    // This means that we can only create new EnumerableMaps for types that fit\\r\\n    // in bytes32.\\r\\n\\r\\n    struct MapEntry {\\r\\n        bytes32 _key;\\r\\n        bytes32 _value;\\r\\n    }\\r\\n\\r\\n    struct Map {\\r\\n        // Storage of map keys and values\\r\\n        MapEntry[] _entries;\\r\\n\\r\\n        // Position of the entry defined by a key in the `entries` array, plus 1\\r\\n        // because index 0 means a key is not in the map.\\r\\n        mapping (bytes32 =\\u003e uint256) _indexes;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\r\\n     * key. O(1).\\r\\n     *\\r\\n     * Returns true if the key was added to the map, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {\\r\\n        // We read and store the key\\u0027s index to prevent multiple reads from the same storage slot\\r\\n        uint256 keyIndex = map._indexes[key];\\r\\n\\r\\n        if (keyIndex == 0) { // Equivalent to !contains(map, key)\\r\\n            map._entries.push(MapEntry({ _key: key, _value: value }));\\r\\n            // The entry is stored at length-1, but we add 1 to all indexes\\r\\n            // and use 0 as a sentinel value\\r\\n            map._indexes[key] = map._entries.length;\\r\\n            return true;\\r\\n        } else {\\r\\n            map._entries[keyIndex - 1]._value = value;\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a key-value pair from a map. O(1).\\r\\n     *\\r\\n     * Returns true if the key was removed from the map, that is if it was present.\\r\\n     */\\r\\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\\r\\n        // We read and store the key\\u0027s index to prevent multiple reads from the same storage slot\\r\\n        uint256 keyIndex = map._indexes[key];\\r\\n\\r\\n        if (keyIndex != 0) { // Equivalent to contains(map, key)\\r\\n            // To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\\r\\n            // in the array, and then remove the last entry (sometimes called as \\u0027swap and pop\\u0027).\\r\\n            // This modifies the order of the array, as noted in {at}.\\r\\n\\r\\n            uint256 toDeleteIndex = keyIndex - 1;\\r\\n            uint256 lastIndex = map._entries.length - 1;\\r\\n\\r\\n            // When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\\r\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an \\u0027if\\u0027 statement.\\r\\n\\r\\n            MapEntry storage lastEntry = map._entries[lastIndex];\\r\\n\\r\\n            // Move the last entry to the index where the entry to delete is\\r\\n            map._entries[toDeleteIndex] = lastEntry;\\r\\n            // Update the index for the moved entry\\r\\n            map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\\r\\n\\r\\n            // Delete the slot where the moved entry was stored\\r\\n            map._entries.pop();\\r\\n\\r\\n            // Delete the index for the deleted slot\\r\\n            delete map._indexes[key];\\r\\n\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the key is in the map. O(1).\\r\\n     */\\r\\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\\r\\n        return map._indexes[key] != 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\r\\n     */\\r\\n    function _length(Map storage map) private view returns (uint256) {\\r\\n        return map._entries.length;\\r\\n    }\\r\\n\\r\\n   /**\\r\\n    * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\r\\n    *\\r\\n    * Note that there are no guarantees on the ordering of entries inside the\\r\\n    * array, and it may change when more entries are added or removed.\\r\\n    *\\r\\n    * Requirements:\\r\\n    *\\r\\n    * - `index` must be strictly less than {length}.\\r\\n    */\\r\\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\\r\\n        require(map._entries.length \\u003e index, \\\"EnumerableMap: index out of bounds\\\");\\r\\n\\r\\n        MapEntry storage entry = map._entries[index];\\r\\n        return (entry._key, entry._value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\r\\n     * Does not revert if `key` is not in the map.\\r\\n     */\\r\\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\\r\\n        uint256 keyIndex = map._indexes[key];\\r\\n        if (keyIndex == 0) return (false, 0); // Equivalent to contains(map, key)\\r\\n        return (true, map._entries[keyIndex - 1]._value); // All indexes are 1-based\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value associated with `key`.  O(1).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `key` must be in the map.\\r\\n     */\\r\\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\r\\n        uint256 keyIndex = map._indexes[key];\\r\\n        require(keyIndex != 0, \\\"EnumerableMap: nonexistent key\\\"); // Equivalent to contains(map, key)\\r\\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\\r\\n     */\\r\\n    function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {\\r\\n        uint256 keyIndex = map._indexes[key];\\r\\n        require(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\\r\\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\\r\\n    }\\r\\n\\r\\n    // UintToAddressMap\\r\\n\\r\\n    struct UintToAddressMap {\\r\\n        Map _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\r\\n     * key. O(1).\\r\\n     *\\r\\n     * Returns true if the key was added to the map, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\\r\\n        return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the key was removed from the map, that is if it was present.\\r\\n     */\\r\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\r\\n        return _remove(map._inner, bytes32(key));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the key is in the map. O(1).\\r\\n     */\\r\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\r\\n        return _contains(map._inner, bytes32(key));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of elements in the map. O(1).\\r\\n     */\\r\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\r\\n        return _length(map._inner);\\r\\n    }\\r\\n\\r\\n   /**\\r\\n    * @dev Returns the element stored at position `index` in the set. O(1).\\r\\n    * Note that there are no guarantees on the ordering of values inside the\\r\\n    * array, and it may change when more values are added or removed.\\r\\n    *\\r\\n    * Requirements:\\r\\n    *\\r\\n    * - `index` must be strictly less than {length}.\\r\\n    */\\r\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\r\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\r\\n        return (uint256(key), address(uint160(uint256(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\r\\n     * Does not revert if `key` is not in the map.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\r\\n        (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));\\r\\n        return (success, address(uint160(uint256(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value associated with `key`.  O(1).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `key` must be in the map.\\r\\n     */\\r\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\r\\n        return address(uint160(uint256(_get(map._inner, bytes32(key)))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\r\\n     */\\r\\n    function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {\\r\\n        return address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));\\r\\n    }\\r\\n}\\r\\n\"},\"EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Library for managing\\r\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\r\\n * types.\\r\\n *\\r\\n * Sets have the following properties:\\r\\n *\\r\\n * - Elements are added, removed, and checked for existence in constant time\\r\\n * (O(1)).\\r\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\r\\n *\\r\\n * ```\\r\\n * contract Example {\\r\\n *     // Add the library methods\\r\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\r\\n *\\r\\n *     // Declare a set state variable\\r\\n *     EnumerableSet.AddressSet private mySet;\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\r\\n * and `uint256` (`UintSet`) are supported.\\r\\n */\\r\\nlibrary EnumerableSet {\\r\\n    // To implement this library for multiple types with as little code\\r\\n    // repetition as possible, we write it in terms of a generic Set type with\\r\\n    // bytes32 values.\\r\\n    // The Set implementation uses private functions, and user-facing\\r\\n    // implementations (such as AddressSet) are just wrappers around the\\r\\n    // underlying Set.\\r\\n    // This means that we can only create new EnumerableSets for types that fit\\r\\n    // in bytes32.\\r\\n\\r\\n    struct Set {\\r\\n        // Storage of set values\\r\\n        bytes32[] _values;\\r\\n\\r\\n        // Position of the value in the `values` array, plus 1 because index 0\\r\\n        // means a value is not in the set.\\r\\n        mapping (bytes32 =\\u003e uint256) _indexes;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\r\\n        if (!_contains(set, value)) {\\r\\n            set._values.push(value);\\r\\n            // The value is stored at length-1, but we add 1 to all indexes\\r\\n            // and use 0 as a sentinel value\\r\\n            set._indexes[value] = set._values.length;\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\r\\n        // We read and store the value\\u0027s index to prevent multiple reads from the same storage slot\\r\\n        uint256 valueIndex = set._indexes[value];\\r\\n\\r\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\r\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\r\\n            // the array, and then remove the last element (sometimes called as \\u0027swap and pop\\u0027).\\r\\n            // This modifies the order of the array, as noted in {at}.\\r\\n\\r\\n            uint256 toDeleteIndex = valueIndex - 1;\\r\\n            uint256 lastIndex = set._values.length - 1;\\r\\n\\r\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\r\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an \\u0027if\\u0027 statement.\\r\\n\\r\\n            bytes32 lastvalue = set._values[lastIndex];\\r\\n\\r\\n            // Move the last value to the index where the value to delete is\\r\\n            set._values[toDeleteIndex] = lastvalue;\\r\\n            // Update the index for the moved value\\r\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\r\\n\\r\\n            // Delete the slot where the moved value was stored\\r\\n            set._values.pop();\\r\\n\\r\\n            // Delete the index for the deleted slot\\r\\n            delete set._indexes[value];\\r\\n\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\r\\n        return set._indexes[value] != 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values on the set. O(1).\\r\\n     */\\r\\n    function _length(Set storage set) private view returns (uint256) {\\r\\n        return set._values.length;\\r\\n    }\\r\\n\\r\\n   /**\\r\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n    *\\r\\n    * Note that there are no guarantees on the ordering of values inside the\\r\\n    * array, and it may change when more values are added or removed.\\r\\n    *\\r\\n    * Requirements:\\r\\n    *\\r\\n    * - `index` must be strictly less than {length}.\\r\\n    */\\r\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\r\\n        require(set._values.length \\u003e index, \\\"EnumerableSet: index out of bounds\\\");\\r\\n        return set._values[index];\\r\\n    }\\r\\n\\r\\n    // Bytes32Set\\r\\n\\r\\n    struct Bytes32Set {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\r\\n        return _add(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\r\\n        return _remove(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\r\\n        return _contains(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values in the set. O(1).\\r\\n     */\\r\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n   /**\\r\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n    *\\r\\n    * Note that there are no guarantees on the ordering of values inside the\\r\\n    * array, and it may change when more values are added or removed.\\r\\n    *\\r\\n    * Requirements:\\r\\n    *\\r\\n    * - `index` must be strictly less than {length}.\\r\\n    */\\r\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\r\\n        return _at(set._inner, index);\\r\\n    }\\r\\n\\r\\n    // AddressSet\\r\\n\\r\\n    struct AddressSet {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\r\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\r\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\r\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values in the set. O(1).\\r\\n     */\\r\\n    function length(AddressSet storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n   /**\\r\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n    *\\r\\n    * Note that there are no guarantees on the ordering of values inside the\\r\\n    * array, and it may change when more values are added or removed.\\r\\n    *\\r\\n    * Requirements:\\r\\n    *\\r\\n    * - `index` must be strictly less than {length}.\\r\\n    */\\r\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\r\\n        return address(uint160(uint256(_at(set._inner, index))));\\r\\n    }\\r\\n\\r\\n\\r\\n    // UintSet\\r\\n\\r\\n    struct UintSet {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\r\\n        return _add(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\r\\n        return _remove(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\r\\n        return _contains(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values on the set. O(1).\\r\\n     */\\r\\n    function length(UintSet storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n   /**\\r\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n    *\\r\\n    * Note that there are no guarantees on the ordering of values inside the\\r\\n    * array, and it may change when more values are added or removed.\\r\\n    *\\r\\n    * Requirements:\\r\\n    *\\r\\n    * - `index` must be strictly less than {length}.\\r\\n    */\\r\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\r\\n        return uint256(_at(set._inner, index));\\r\\n    }\\r\\n}\\r\\n\"},\"ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\r\\n\\r\\nimport \\\"./IERC1155Receiver.sol\\\";\\r\\nimport \\\"./ERC165.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev _Available since v3.1._\\r\\n */\\r\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\r\\n    constructor() internal {\\r\\n        _registerInterface(\\r\\n            ERC1155Receiver(address(0)).onERC1155Received.selector ^\\r\\n            ERC1155Receiver(address(0)).onERC1155BatchReceived.selector\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\"},\"ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\r\\n\\r\\nimport \\\"./IERC165.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC165} interface.\\r\\n *\\r\\n * Contracts may inherit from this and call {_registerInterface} to declare\\r\\n * their support of an interface.\\r\\n */\\r\\nabstract contract ERC165 is IERC165 {\\r\\n    /*\\r\\n     * bytes4(keccak256(\\u0027supportsInterface(bytes4)\\u0027)) == 0x01ffc9a7\\r\\n     */\\r\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\r\\n\\r\\n    /**\\r\\n     * @dev Mapping of interface ids to whether or not it\\u0027s supported.\\r\\n     */\\r\\n    mapping(bytes4 =\\u003e bool) private _supportedInterfaces;\\r\\n\\r\\n    constructor () internal {\\r\\n        // Derived contracts need only register support for their own interfaces,\\r\\n        // we register support for ERC165 itself here\\r\\n        _registerInterface(_INTERFACE_ID_ERC165);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     *\\r\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n        return _supportedInterfaces[interfaceId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Registers the contract as an implementer of the interface defined by\\r\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\r\\n     * registering its interface id is not required.\\r\\n     *\\r\\n     * See {IERC165-supportsInterface}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\r\\n     */\\r\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\r\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\r\\n        _supportedInterfaces[interfaceId] = true;\\r\\n    }\\r\\n}\\r\\n\"},\"ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\nimport \\\"./IERC721.sol\\\";\\r\\nimport \\\"./IERC721Metadata.sol\\\";\\r\\nimport \\\"./IERC721Enumerable.sol\\\";\\r\\nimport \\\"./IERC721Receiver.sol\\\";\\r\\nimport \\\"./ERC165.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\nimport \\\"./EnumerableSet.sol\\\";\\r\\nimport \\\"./EnumerableMap.sol\\\";\\r\\nimport \\\"./Strings.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title ERC721 Non-Fungible Token Standard basic implementation\\r\\n * @dev see https://eips.ethereum.org/EIPS/eip-721\\r\\n */\\r\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n    using EnumerableSet for EnumerableSet.UintSet;\\r\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\r\\n    using Strings for uint256;\\r\\n\\r\\n    // Equals to `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\r\\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\\r\\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\\r\\n\\r\\n    // Mapping from holder address to their (enumerable) set of owned tokens\\r\\n    mapping (address =\\u003e EnumerableSet.UintSet) private _holderTokens;\\r\\n\\r\\n    // Enumerable mapping from token ids to their owners\\r\\n    EnumerableMap.UintToAddressMap private _tokenOwners;\\r\\n\\r\\n    // Mapping from token ID to approved address\\r\\n    mapping (uint256 =\\u003e address) private _tokenApprovals;\\r\\n\\r\\n    // Mapping from owner to operator approvals\\r\\n    mapping (address =\\u003e mapping (address =\\u003e bool)) private _operatorApprovals;\\r\\n\\r\\n    // Token name\\r\\n    string private _name;\\r\\n\\r\\n    // Token symbol\\r\\n    string private _symbol;\\r\\n\\r\\n    // Optional mapping for token URIs\\r\\n    mapping (uint256 =\\u003e string) private _tokenURIs;\\r\\n\\r\\n    // Base URI\\r\\n    string private _baseURI;\\r\\n\\r\\n    /*\\r\\n     *     bytes4(keccak256(\\u0027balanceOf(address)\\u0027)) == 0x70a08231\\r\\n     *     bytes4(keccak256(\\u0027ownerOf(uint256)\\u0027)) == 0x6352211e\\r\\n     *     bytes4(keccak256(\\u0027approve(address,uint256)\\u0027)) == 0x095ea7b3\\r\\n     *     bytes4(keccak256(\\u0027getApproved(uint256)\\u0027)) == 0x081812fc\\r\\n     *     bytes4(keccak256(\\u0027setApprovalForAll(address,bool)\\u0027)) == 0xa22cb465\\r\\n     *     bytes4(keccak256(\\u0027isApprovedForAll(address,address)\\u0027)) == 0xe985e9c5\\r\\n     *     bytes4(keccak256(\\u0027transferFrom(address,address,uint256)\\u0027)) == 0x23b872dd\\r\\n     *     bytes4(keccak256(\\u0027safeTransferFrom(address,address,uint256)\\u0027)) == 0x42842e0e\\r\\n     *     bytes4(keccak256(\\u0027safeTransferFrom(address,address,uint256,bytes)\\u0027)) == 0xb88d4fde\\r\\n     *\\r\\n     *     =\\u003e 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\\r\\n     *        0xa22cb465 ^ 0xe985e9c5 ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\\r\\n     */\\r\\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\\r\\n\\r\\n    /*\\r\\n     *     bytes4(keccak256(\\u0027name()\\u0027)) == 0x06fdde03\\r\\n     *     bytes4(keccak256(\\u0027symbol()\\u0027)) == 0x95d89b41\\r\\n     *     bytes4(keccak256(\\u0027tokenURI(uint256)\\u0027)) == 0xc87b56dd\\r\\n     *\\r\\n     *     =\\u003e 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\\r\\n     */\\r\\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\\r\\n\\r\\n    /*\\r\\n     *     bytes4(keccak256(\\u0027totalSupply()\\u0027)) == 0x18160ddd\\r\\n     *     bytes4(keccak256(\\u0027tokenOfOwnerByIndex(address,uint256)\\u0027)) == 0x2f745c59\\r\\n     *     bytes4(keccak256(\\u0027tokenByIndex(uint256)\\u0027)) == 0x4f6ccce7\\r\\n     *\\r\\n     *     =\\u003e 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\\r\\n     */\\r\\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\r\\n     */\\r\\n    constructor (string memory name_, string memory symbol_) public {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n\\r\\n        // register the supported interfaces to conform to ERC721 via ERC165\\r\\n        _registerInterface(_INTERFACE_ID_ERC721);\\r\\n        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\\r\\n        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\r\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\r\\n        return _holderTokens[owner].length();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-ownerOf}.\\r\\n     */\\r\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\r\\n        return _tokenOwners.get(tokenId, \\\"ERC721: owner query for nonexistent token\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-name}.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-symbol}.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-tokenURI}.\\r\\n     */\\r\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\r\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\r\\n\\r\\n        string memory _tokenURI = _tokenURIs[tokenId];\\r\\n        string memory base = baseURI();\\r\\n\\r\\n        // If there is no base URI, return the token URI.\\r\\n        if (bytes(base).length == 0) {\\r\\n            return _tokenURI;\\r\\n        }\\r\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\r\\n        if (bytes(_tokenURI).length \\u003e 0) {\\r\\n            return string(abi.encodePacked(base, _tokenURI));\\r\\n        }\\r\\n        // If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\\r\\n        return string(abi.encodePacked(base, tokenId.toString()));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Returns the base URI set via {_setBaseURI}. This will be\\r\\n    * automatically added as a prefix in {tokenURI} to each token\\u0027s URI, or\\r\\n    * to the token ID if no specific URI is set for that token ID.\\r\\n    */\\r\\n    function baseURI() public view virtual returns (string memory) {\\r\\n        return _baseURI;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\r\\n     */\\r\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\r\\n        return _holderTokens[owner].at(index);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Enumerable-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        // _tokenOwners are indexed by tokenIds, so .length() returns the number of tokenIds\\r\\n        return _tokenOwners.length();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\r\\n     */\\r\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\r\\n        (uint256 tokenId, ) = _tokenOwners.at(index);\\r\\n        return tokenId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-approve}.\\r\\n     */\\r\\n    function approve(address to, uint256 tokenId) public virtual override {\\r\\n        address owner = ERC721.ownerOf(tokenId);\\r\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\r\\n\\r\\n        require(_msgSender() == owner || ERC721.isApprovedForAll(owner, _msgSender()),\\r\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\r\\n        );\\r\\n\\r\\n        _approve(to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-getApproved}.\\r\\n     */\\r\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\r\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\r\\n\\r\\n        return _tokenApprovals[tokenId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-setApprovalForAll}.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\r\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\r\\n\\r\\n        _operatorApprovals[_msgSender()][operator] = approved;\\r\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-isApprovedForAll}.\\r\\n     */\\r\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\r\\n        return _operatorApprovals[owner][operator];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-transferFrom}.\\r\\n     */\\r\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\r\\n        //solhint-disable-next-line max-line-length\\r\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\r\\n\\r\\n        _transfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-safeTransferFrom}.\\r\\n     */\\r\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\r\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-safeTransferFrom}.\\r\\n     */\\r\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\\r\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\r\\n        _safeTransfer(from, to, tokenId, _data);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\r\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\r\\n     *\\r\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\r\\n     *\\r\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\r\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\\r\\n        _transfer(from, to, tokenId);\\r\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether `tokenId` exists.\\r\\n     *\\r\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\r\\n     *\\r\\n     * Tokens start existing when they are minted (`_mint`),\\r\\n     * and stop existing when they are burned (`_burn`).\\r\\n     */\\r\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\r\\n        return _tokenOwners.contains(tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\r\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\r\\n        address owner = ERC721.ownerOf(tokenId);\\r\\n        return (spender == owner || getApproved(tokenId) == spender || ERC721.isApprovedForAll(owner, spender));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     d*\\r\\n     * - `tokenId` must not exist.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\r\\n        _safeMint(to, tokenId, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\r\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\r\\n     */\\r\\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\\r\\n        _mint(to, tokenId);\\r\\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Mints `tokenId` and transfers it to `to`.\\r\\n     *\\r\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must not exist.\\r\\n     * - `to` cannot be the zero address.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _mint(address to, uint256 tokenId) internal virtual {\\r\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\r\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), to, tokenId);\\r\\n\\r\\n        _holderTokens[to].add(tokenId);\\r\\n\\r\\n        _tokenOwners.set(tokenId, to);\\r\\n\\r\\n        emit Transfer(address(0), to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `tokenId`.\\r\\n     * The approval is cleared when the token is burned.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _burn(uint256 tokenId) internal virtual {\\r\\n        address owner = ERC721.ownerOf(tokenId); // internal owner\\r\\n\\r\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\r\\n\\r\\n        // Clear approvals\\r\\n        _approve(address(0), tokenId);\\r\\n\\r\\n        // Clear metadata (if any)\\r\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\r\\n            delete _tokenURIs[tokenId];\\r\\n        }\\r\\n\\r\\n        _holderTokens[owner].remove(tokenId);\\r\\n\\r\\n        _tokenOwners.remove(tokenId);\\r\\n\\r\\n        emit Transfer(owner, address(0), tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers `tokenId` from `from` to `to`.\\r\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must be owned by `from`.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\r\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\"); // internal owner\\r\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(from, to, tokenId);\\r\\n\\r\\n        // Clear approvals from the previous owner\\r\\n        _approve(address(0), tokenId);\\r\\n\\r\\n        _holderTokens[from].remove(tokenId);\\r\\n        _holderTokens[to].add(tokenId);\\r\\n\\r\\n        _tokenOwners.set(tokenId, to);\\r\\n\\r\\n        emit Transfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\r\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI set of nonexistent token\\\");\\r\\n        _tokenURIs[tokenId] = _tokenURI;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to set the base URI for all token IDs. It is\\r\\n     * automatically added as a prefix to the value returned in {tokenURI},\\r\\n     * or to the token ID if {tokenURI} is empty.\\r\\n     */\\r\\n    function _setBaseURI(string memory baseURI_) internal virtual {\\r\\n        _baseURI = baseURI_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\r\\n     * The call is not executed if the target address is not a contract.\\r\\n     *\\r\\n     * @param from address representing the previous owner of the given token ID\\r\\n     * @param to target address that will receive the tokens\\r\\n     * @param tokenId uint256 ID of the token to be transferred\\r\\n     * @param _data bytes optional data to send along with the call\\r\\n     * @return bool whether the call correctly returned the expected magic value\\r\\n     */\\r\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\\r\\n        private returns (bool)\\r\\n    {\\r\\n        if (!to.isContract()) {\\r\\n            return true;\\r\\n        }\\r\\n        bytes memory returndata = to.functionCall(abi.encodeWithSelector(\\r\\n            IERC721Receiver(to).onERC721Received.selector,\\r\\n            _msgSender(),\\r\\n            from,\\r\\n            tokenId,\\r\\n            _data\\r\\n        ), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\r\\n        bytes4 retval = abi.decode(returndata, (bytes4));\\r\\n        return (retval == _ERC721_RECEIVED);\\r\\n    }\\r\\n\\r\\n    function _approve(address to, uint256 tokenId) private {\\r\\n        _tokenApprovals[tokenId] = to;\\r\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId); // internal owner\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any token transfer. This includes minting\\r\\n     * and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - When `from` and `to` are both non-zero, ``from``\\u0027s `tokenId` will be\\r\\n     * transferred to `to`.\\r\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\r\\n     * - When `to` is zero, ``from``\\u0027s `tokenId` will be burned.\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\\r\\n}\\r\\n\"},\"ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.4;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./ERC721.sol\\\";\\r\\nimport \\\"./Operators.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev this contract used just for override some\\r\\n * OpneZeppelin tokenURI() behavior\\r\\n * so we need redeclare _tokenURIs becouse in OpenZeppelin\\r\\n * ERC721 it has private visibility\\r\\n */\\r\\nabstract contract ERC721URIStorage is ERC721, Operators {\\r\\n    using Strings for uint256;\\r\\n\\r\\n    // Optional mapping for token URIs\\r\\n    mapping (uint256 =\\u003e string) private _tokenURIs;\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-tokenURI}.\\r\\n     */\\r\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\r\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI query for nonexistent token\\\");\\r\\n\\r\\n        string memory _tokenURI = _tokenURIs[tokenId];\\r\\n        string memory base = baseURI();\\r\\n\\r\\n        // If there is no base URI, return the token URI.\\r\\n        if (bytes(base).length == 0) {\\r\\n            return _tokenURI;\\r\\n        }\\r\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\r\\n        if (bytes(_tokenURI).length \\u003e 0) {\\r\\n            //return string(abi.encodePacked(base, _tokenURI));\\r\\n            //Due customer requirements\\r\\n            return _tokenURI;\\r\\n        }\\r\\n\\r\\n        return super.tokenURI(tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual override {\\r\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\r\\n        _tokenURIs[tokenId] = _tokenURI;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `tokenId`.\\r\\n     * The approval is cleared when the token is burned.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _burn(uint256 tokenId) internal virtual override {\\r\\n        super._burn(tokenId);\\r\\n\\r\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\r\\n            delete _tokenURIs[tokenId];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setURI(uint256 tokenId, string calldata _tokenURI) external onlyOperator {\\r\\n        _setTokenURI(tokenId, _tokenURI);\\r\\n    }\\r\\n\\r\\n    function setURIBatch(uint256[] calldata tokenId, string[] calldata _tokenURI) external onlyOperator {\\r\\n        require(tokenId.length == _tokenURI.length, \\\"tokenId length is not equal to _tokenURI length\\\");\\r\\n        for (uint i = 0; i \\u003c tokenId.length; i++) {\\r\\n            _setTokenURI(tokenId[i], _tokenURI[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    address public signerAddress;\\r\\n\\r\\n    function setSigner(address _newSigner) external onlyOwner {\\r\\n        signerAddress = _newSigner;\\r\\n    }\\r\\n\\r\\n    function hashArguments(uint256 tokenId, string calldata _tokenURI)\\r\\n        public pure returns (bytes32 msgHash)\\r\\n    {\\r\\n        msgHash = keccak256(abi.encode(tokenId, _tokenURI));\\r\\n    }\\r\\n\\r\\n    function getSigner(uint256 tokenId, string calldata _tokenURI, uint8 _v, bytes32 _r, bytes32 _s)\\r\\n        public\\r\\n        pure\\r\\n        returns (address)\\r\\n    {\\r\\n        bytes32 msgHash = hashArguments(tokenId, _tokenURI);\\r\\n        return ecrecover(msgHash, _v, _r, _s);\\r\\n    }\\r\\n\\r\\n    function isValidSignature(uint256 tokenId, string calldata _tokenURI, uint8 _v, bytes32 _r, bytes32 _s)\\r\\n        public\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        return getSigner(tokenId, _tokenURI, _v, _r, _s) == signerAddress;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n       * @dev Sets token URI using signature\\r\\n       * This method can be called by anyone, who has signature,\\r\\n       * that was created by signer role\\r\\n       */\\r\\n    function setURISigned(uint256 tokenId, string calldata _tokenURI, uint8 _v, bytes32 _r, bytes32 _s) external {\\r\\n        require(isValidSignature(tokenId, _tokenURI, _v, _r, _s), \\\"Invalid signature\\\");\\r\\n        _setTokenURI(tokenId, _tokenURI);\\r\\n    }\\r\\n\\r\\n}\\r\\n\"},\"IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity \\u003e=0.6.2 \\u003c0.8.0;\\r\\n\\r\\nimport \\\"./IERC165.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\r\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\r\\n *\\r\\n * _Available since v3.1._\\r\\n */\\r\\ninterface IERC1155 is IERC165 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\r\\n     */\\r\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\r\\n     * transfers.\\r\\n     */\\r\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\r\\n     * `approved`.\\r\\n     */\\r\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\r\\n     *\\r\\n     * If an {URI} event was emitted for `id`, the standard\\r\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\r\\n     * returned by {IERC1155MetadataURI-uri}.\\r\\n     */\\r\\n    event URI(string value, uint256 indexed id);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     */\\r\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `accounts` and `ids` must have the same length.\\r\\n     */\\r\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Grants or revokes permission to `operator` to transfer the caller\\u0027s tokens, according to `approved`,\\r\\n     *\\r\\n     * Emits an {ApprovalForAll} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `operator` cannot be the caller.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool approved) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if `operator` is approved to transfer ``account``\\u0027s tokens.\\r\\n     *\\r\\n     * See {setApprovalForAll}.\\r\\n     */\\r\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\r\\n     *\\r\\n     * Emits a {TransferSingle} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``\\u0027s tokens via {setApprovalForAll}.\\r\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\r\\n     * acceptance magic value.\\r\\n     */\\r\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\r\\n\\r\\n    /**\\r\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\r\\n     *\\r\\n     * Emits a {TransferBatch} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `ids` and `amounts` must have the same length.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\r\\n     * acceptance magic value.\\r\\n     */\\r\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\r\\n}\\r\\n\"},\"IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\r\\n\\r\\nimport \\\"./IERC165.sol\\\";\\r\\n\\r\\n/**\\r\\n * _Available since v3.1._\\r\\n */\\r\\ninterface IERC1155Receiver is IERC165 {\\r\\n\\r\\n    /**\\r\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\r\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\r\\n        To accept the transfer, this must return\\r\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\r\\n        (i.e. 0xf23a6e61, or its own function selector).\\r\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\r\\n        @param from The address which previously owned the token\\r\\n        @param id The ID of the token being transferred\\r\\n        @param value The amount of tokens being transferred\\r\\n        @param data Additional data with no specified format\\r\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\r\\n    */\\r\\n    function onERC1155Received(\\r\\n        address operator,\\r\\n        address from,\\r\\n        uint256 id,\\r\\n        uint256 value,\\r\\n        bytes calldata data\\r\\n    )\\r\\n        external\\r\\n        returns(bytes4);\\r\\n\\r\\n    /**\\r\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\r\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\r\\n        been updated. To accept the transfer(s), this must return\\r\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\r\\n        (i.e. 0xbc197c81, or its own function selector).\\r\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\r\\n        @param from The address which previously owned the token\\r\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\r\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\r\\n        @param data Additional data with no specified format\\r\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\r\\n    */\\r\\n    function onERC1155BatchReceived(\\r\\n        address operator,\\r\\n        address from,\\r\\n        uint256[] calldata ids,\\r\\n        uint256[] calldata values,\\r\\n        bytes calldata data\\r\\n    )\\r\\n        external\\r\\n        returns(bytes4);\\r\\n}\\r\\n\"},\"IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC165 standard, as defined in the\\r\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\r\\n *\\r\\n * Implementers can declare support of contract interfaces, which can then be\\r\\n * queried by others ({ERC165Checker}).\\r\\n *\\r\\n * For an implementation, see {ERC165}.\\r\\n */\\r\\ninterface IERC165 {\\r\\n    /**\\r\\n     * @dev Returns true if this contract implements the interface defined by\\r\\n     * `interfaceId`. See the corresponding\\r\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\r\\n     * to learn more about how these ids are created.\\r\\n     *\\r\\n     * This function call must use less than 30 000 gas.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n}\\r\\n\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\"},\"IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity \\u003e=0.6.2 \\u003c0.8.0;\\r\\n\\r\\nimport \\\"./IERC165.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Required interface of an ERC721 compliant contract.\\r\\n */\\r\\ninterface IERC721 is IERC165 {\\r\\n    /**\\r\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\r\\n     */\\r\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of tokens in ``owner``\\u0027s account.\\r\\n     */\\r\\n    function balanceOf(address owner) external view returns (uint256 balance);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the owner of the `tokenId` token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\r\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\r\\n     *\\r\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\r\\n     * The approval is cleared when the token is transferred.\\r\\n     *\\r\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The caller must own the token or be an approved operator.\\r\\n     * - `tokenId` must exist.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address to, uint256 tokenId) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the account approved for `tokenId` token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\r\\n\\r\\n    /**\\r\\n     * @dev Approve or remove `operator` as an operator for the caller.\\r\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The `operator` cannot be the caller.\\r\\n     *\\r\\n     * Emits an {ApprovalForAll} event.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool _approved) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\r\\n     *\\r\\n     * See {setApprovalForAll}\\r\\n     */\\r\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\r\\n      *\\r\\n      * Requirements:\\r\\n      *\\r\\n      * - `from` cannot be the zero address.\\r\\n      * - `to` cannot be the zero address.\\r\\n      * - `tokenId` token must exist and be owned by `from`.\\r\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\r\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n      *\\r\\n      * Emits a {Transfer} event.\\r\\n      */\\r\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\r\\n}\\r\\n\"},\"IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity \\u003e=0.6.2 \\u003c0.8.0;\\r\\n\\r\\nimport \\\"./IERC721.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\r\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\r\\n */\\r\\ninterface IERC721Enumerable is IERC721 {\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the total amount of tokens stored by the contract.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\r\\n     * Use along with {balanceOf} to enumerate all of ``owner``\\u0027s tokens.\\r\\n     */\\r\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\r\\n     * Use along with {totalSupply} to enumerate all tokens.\\r\\n     */\\r\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\r\\n}\\r\\n\"},\"IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity \\u003e=0.6.2 \\u003c0.8.0;\\r\\n\\r\\nimport \\\"./IERC721.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\r\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\r\\n */\\r\\ninterface IERC721Metadata is IERC721 {\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token collection name.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token collection symbol.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\r\\n     */\\r\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\r\\n}\\r\\n\"},\"IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\r\\n\\r\\n/**\\r\\n * @title ERC721 token receiver interface\\r\\n * @dev Interface for any contract that wants to support safeTransfers\\r\\n * from ERC721 asset contracts.\\r\\n */\\r\\ninterface IERC721Receiver {\\r\\n    /**\\r\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\r\\n     * by `operator` from `from`, this function is called.\\r\\n     *\\r\\n     * It must return its Solidity selector to confirm the token transfer.\\r\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\r\\n     *\\r\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\r\\n     */\\r\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\r\\n}\\r\\n\"},\"LandERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// Degen Farm: El Dorado. Collectible NFT game\\r\\npragma solidity ^0.7.4;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./ERC721URIStorage.sol\\\";\\r\\n\\r\\ncontract Land is ERC721URIStorage {\\r\\n\\r\\n    uint constant public MAP_HEIGHT = 50;\\r\\n    uint constant public LAND_TYPE_COUNT = 5;\\r\\n    enum LandType  { None, Clay, Chalky, Sandy, Loamy, Peaty }\\r\\n\\r\\n    struct LandPiece {\\r\\n        LandType atype; // uint8\\r\\n        int32    x;\\r\\n        int32    y;\\r\\n    }\\r\\n\\r\\n    mapping (uint256 =\\u003e LandPiece) public lands;\\r\\n\\r\\n    mapping(address =\\u003e bool) public trusted_markets;\\r\\n    event TrustedMarket(address indexed _market, bool _state);\\r\\n\\r\\n    constructor(string memory name_,\\r\\n        string memory symbol_) ERC721(name_, symbol_)  {\\r\\n    }\\r\\n\\r\\n    function mint(address to, uint256 tokenId) external onlyOwner {\\r\\n        int32 x = (int32)(tokenId / MAP_HEIGHT);\\r\\n        int32 y = (int32)(tokenId % MAP_HEIGHT);\\r\\n        LandPiece memory land = LandPiece(_createLandType(x, y), x, y);\\r\\n        lands[tokenId] = land;\\r\\n        _mint(to, tokenId);\\r\\n    }\\r\\n\\r\\n    function _createLandType(int32 x, int32 y) internal returns (LandType) {\\r\\n        uint256 rnd = uint(keccak256(abi.encodePacked(block.timestamp, msg.sender, totalSupply()))) % LAND_TYPE_COUNT;\\r\\n        return (LandType)(rnd + 1);\\r\\n    }\\r\\n\\r\\n    function burn(uint256 tokenId) external {\\r\\n        _burn(tokenId);\\r\\n    }\\r\\n\\r\\n    function setTrustedMarket(address _market, bool _state) external onlyOwner {\\r\\n        trusted_markets[_market] = _state;\\r\\n        emit TrustedMarket(_market, _state);\\r\\n    }\\r\\n\\r\\n    function getUsersTokens(address _owner) external view returns (uint256[] memory) {\\r\\n        //https://docs.soliditylang.org/en/v0.7.4/types.html#allocating-memory-arrays\\r\\n        //So first we need calc size of array to be returned\\r\\n        uint256 n = balanceOf(_owner);\\r\\n\\r\\n        uint256[] memory result = new uint256[](n);\\r\\n        for (uint16 i=0; i \\u003c n; i++) {\\r\\n            result[i]=tokenOfOwnerByIndex(_owner, i);\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    function baseURI() public view  override returns (string memory) {\\r\\n        return \\u0027http://degens.farm/meta/lands/\\u0027;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Overriding standart function for gas safe traiding with trusted parts like DegenFarm\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` and `to` cannot be the zero address.\\r\\n     * - `caller` must be added to trustedMarkets.\\r\\n     */\\r\\n    function transferFrom(address from, address to, uint256 tokenId) public override {\\r\\n        if  (trusted_markets[msg.sender]) {\\r\\n            _transfer(from, to, tokenId);\\r\\n        } else {\\r\\n            super.transferFrom(from, to, tokenId);\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n}\\r\\n\"},\"Operators.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// Degen Farm. Collectible NFT game\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\n\\r\\ncontract Operators is Ownable\\r\\n{\\r\\n    mapping (address=\\u003ebool) operatorAddress;\\r\\n\\r\\n    modifier onlyOperator() {\\r\\n        require(isOperator(msg.sender), \\\"Access denied\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function isOwner(address _addr) public view returns (bool) {\\r\\n        return owner() == _addr;\\r\\n    }\\r\\n\\r\\n    function isOperator(address _addr) public view returns (bool) {\\r\\n        return operatorAddress[_addr] || isOwner(_addr);\\r\\n    }\\r\\n\\r\\n    function addOperator(address _newOperator) external onlyOwner {\\r\\n        require(_newOperator != address(0), \\\"New operator is empty\\\");\\r\\n\\r\\n        operatorAddress[_newOperator] = true;\\r\\n    }\\r\\n\\r\\n    function removeOperator(address _oldOperator) external onlyOwner {\\r\\n        delete(operatorAddress[_oldOperator]);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Owner can claim any tokens that transferred\\r\\n     * to this contract address\\r\\n     */\\r\\n    function withdrawERC20(IERC20 _tokenContract, address _admin) external onlyOwner\\r\\n    {\\r\\n        uint256 balance = _tokenContract.balanceOf(address(this));\\r\\n        _tokenContract.transfer(_admin, balance);\\r\\n    }\\r\\n}\\r\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor () internal {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it\\u0027s recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        uint256 c = a + b;\\r\\n        if (c \\u003c a) return (false, 0);\\r\\n        return (true, c);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        if (b \\u003e a) return (false, 0);\\r\\n        return (true, a - b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) return (true, 0);\\r\\n        uint256 c = a * b;\\r\\n        if (c / a != b) return (false, 0);\\r\\n        return (true, c);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        if (b == 0) return (false, 0);\\r\\n        return (true, a / b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        if (b == 0) return (false, 0);\\r\\n        return (true, a % b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, \\\"SafeMath: subtraction overflow\\\");\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (a == 0) return 0;\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0, \\\"SafeMath: division by zero\\\");\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0, \\\"SafeMath: modulo by zero\\\");\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting with custom message when dividing by zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\"},\"Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev String operations.\\r\\n */\\r\\nlibrary Strings {\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` representation.\\r\\n     */\\r\\n    function toString(uint256 value) internal pure returns (string memory) {\\r\\n        // Inspired by OraclizeAPI\\u0027s implementation - MIT licence\\r\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\r\\n\\r\\n        if (value == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint256 temp = value;\\r\\n        uint256 digits;\\r\\n        while (temp != 0) {\\r\\n            digits++;\\r\\n            temp /= 10;\\r\\n        }\\r\\n        bytes memory buffer = new bytes(digits);\\r\\n        uint256 index = digits - 1;\\r\\n        temp = value;\\r\\n        while (temp != 0) {\\r\\n            buffer[index--] = bytes1(uint8(48 + temp % 10));\\r\\n            temp /= 10;\\r\\n        }\\r\\n        return string(buffer);\\r\\n    }\\r\\n}\\r\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_market\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"TrustedMarket\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOperator\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"animals\",\"outputs\":[{\"internalType\":\"enum Creatures.AnimalType\",\"name\":\"atype\",\"type\":\"uint8\"},{\"internalType\":\"enum Creatures.Rarity\",\"name\":\"rarity\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"birthday\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"getSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getTypeAndRarity\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getUsersTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"hashArguments\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"msgHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_animalType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_rarity\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oldOperator\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newSigner\",\"type\":\"address\"}],\"name\":\"setSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_market\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setTrustedMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenId\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"_tokenURI\",\"type\":\"string[]\"}],\"name\":\"setURIBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"setURISigned\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"trusted_markets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Creatures","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000015446567656e24204661726d20437265617475726573000000000000000000000000000000000000000000000000000000000000000000000000000000000000054352454154000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://308c7d0f38216f626771d86f2b5b3091893bd5f12659a801a1f13db0060ec78f"}]}