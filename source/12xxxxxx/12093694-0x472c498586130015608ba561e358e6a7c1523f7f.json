{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Pausable.sol\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor () internal {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n// File: contracts/tokens/EIP20NonStandardInterface.sol\r\n\r\n\r\n\r\npragma solidity 0.7.6;\r\n\r\n/// @title EIP20NonStandardInterface\r\n/// @dev Version of ERC20 with no return values for `transfer` and `transferFrom`\r\n/// See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\r\ninterface EIP20NonStandardInterface {\r\n    /// @notice Get the total number of tokens in circulation\r\n    /// @return The supply of tokens\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /// @notice Gets the balance of the specified address\r\n    /// @param owner The address from which the balance will be retrieved\r\n    /// @return balance The balance\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    //\r\n    // !!!!!!!!!!!!!!\r\n    // !!! NOTICE !!! `transfer` does not return a value, in violation of the ERC-20 specification\r\n    // !!!!!!!!!!!!!!\r\n    //\r\n\r\n    /// @notice Transfer `amount` tokens from `msg.sender` to `dst`\r\n    /// @param dst The address of the destination account\r\n    /// @param amount The number of tokens to transfer\r\n    function transfer(address dst, uint256 amount) external;\r\n\r\n    //\r\n    // !!!!!!!!!!!!!!\r\n    // !!! NOTICE !!! `transferFrom` does not return a value, in violation of the ERC-20 specification\r\n    // !!!!!!!!!!!!!!\r\n    //\r\n\r\n    /// @notice Transfer `amount` tokens from `src` to `dst`\r\n    /// @param src The address of the source account\r\n    /// @param dst The address of the destination account\r\n    /// @param amount The number of tokens to transfer\r\n    function transferFrom(\r\n        address src,\r\n        address dst,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    /// @notice Approve `spender` to transfer up to `amount` from `src`\r\n    /// @dev This will overwrite the approval amount for `spender`\r\n    ///  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\r\n    /// @param spender The address of the account which may transfer tokens\r\n    /// @param amount The number of tokens that are approved\r\n    /// @return success Whether or not the approval succeeded\r\n    function approve(address spender, uint256 amount)\r\n        external\r\n        returns (bool success);\r\n\r\n    /// @notice Get the current allowance from `owner` for `spender`\r\n    /// @param owner The address of the account which owns the tokens to be spent\r\n    /// @param spender The address of the account which may transfer tokens\r\n    /// @return remaining The number of tokens allowed to be spent\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 amount);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 amount\r\n    );\r\n}\r\n\r\n// File: contracts/IDerivativeSpecification.sol\r\n\r\n\r\n\r\npragma solidity 0.7.6;\r\n\r\n/// @title Derivative Specification interface\r\n/// @notice Immutable collection of derivative attributes\r\n/// @dev Created by the derivative's author and published to the DerivativeSpecificationRegistry\r\ninterface IDerivativeSpecification {\r\n    /// @notice Proof of a derivative specification\r\n    /// @dev Verifies that contract is a derivative specification\r\n    /// @return true if contract is a derivative specification\r\n    function isDerivativeSpecification() external pure returns (bool);\r\n\r\n    /// @notice Set of oracles that are relied upon to measure changes in the state of the world\r\n    /// between the start and the end of the Live period\r\n    /// @dev Should be resolved through OracleRegistry contract\r\n    /// @return oracle symbols\r\n    function oracleSymbols() external view returns (bytes32[] memory);\r\n\r\n    /// @notice Algorithm that, for the type of oracle used by the derivative,\r\n    /// finds the value closest to a given timestamp\r\n    /// @dev Should be resolved through OracleIteratorRegistry contract\r\n    /// @return oracle iterator symbols\r\n    function oracleIteratorSymbols() external view returns (bytes32[] memory);\r\n\r\n    /// @notice Type of collateral that users submit to mint the derivative\r\n    /// @dev Should be resolved through CollateralTokenRegistry contract\r\n    /// @return collateral token symbol\r\n    function collateralTokenSymbol() external view returns (bytes32);\r\n\r\n    /// @notice Mapping from the change in the underlying variable (as defined by the oracle)\r\n    /// and the initial collateral split to the final collateral split\r\n    /// @dev Should be resolved through CollateralSplitRegistry contract\r\n    /// @return collateral split symbol\r\n    function collateralSplitSymbol() external view returns (bytes32);\r\n\r\n    /// @notice Lifecycle parameter that define the length of the derivative's Live period.\r\n    /// @dev Set in seconds\r\n    /// @return live period value\r\n    function livePeriod() external view returns (uint256);\r\n\r\n    /// @notice Parameter that determines starting nominal value of primary asset\r\n    /// @dev Units of collateral theoretically swappable for 1 unit of primary asset\r\n    /// @return primary nominal value\r\n    function primaryNominalValue() external view returns (uint256);\r\n\r\n    /// @notice Parameter that determines starting nominal value of complement asset\r\n    /// @dev Units of collateral theoretically swappable for 1 unit of complement asset\r\n    /// @return complement nominal value\r\n    function complementNominalValue() external view returns (uint256);\r\n\r\n    /// @notice Minting fee rate due to the author of the derivative specification.\r\n    /// @dev Percentage fee multiplied by 10 ^ 12\r\n    /// @return author fee\r\n    function authorFee() external view returns (uint256);\r\n\r\n    /// @notice Symbol of the derivative\r\n    /// @dev Should be resolved through DerivativeSpecificationRegistry contract\r\n    /// @return derivative specification symbol\r\n    function symbol() external view returns (string memory);\r\n\r\n    /// @notice Return optional long name of the derivative\r\n    /// @dev Isn't used directly in the protocol\r\n    /// @return long name\r\n    function name() external view returns (string memory);\r\n\r\n    /// @notice Optional URI to the derivative specs\r\n    /// @dev Isn't used directly in the protocol\r\n    /// @return URI to the derivative specs\r\n    function baseURI() external view returns (string memory);\r\n\r\n    /// @notice Derivative spec author\r\n    /// @dev Used to set and receive author's fee\r\n    /// @return address of the author\r\n    function author() external view returns (address);\r\n}\r\n\r\n// File: contracts/collateralSplits/ICollateralSplit.sol\r\n\r\n\r\n\r\npragma solidity 0.7.6;\r\n\r\n/// @title Collateral Split interface\r\n/// @notice Contains mathematical functions used to calculate relative claim\r\n/// on collateral of primary and complement assets after settlement.\r\n/// @dev Created independently from specification and published to the CollateralSplitRegistry\r\ninterface ICollateralSplit {\r\n    /// @notice Proof of collateral split contract\r\n    /// @dev Verifies that contract is a collateral split contract\r\n    /// @return true if contract is a collateral split contract\r\n    function isCollateralSplit() external pure returns (bool);\r\n\r\n    /// @notice Symbol of the collateral split\r\n    /// @dev Should be resolved through CollateralSplitRegistry contract\r\n    /// @return collateral split specification symbol\r\n    function symbol() external pure returns (string memory);\r\n\r\n    /// @notice Calcs primary asset class' share of collateral at settlement.\r\n    /// @dev Returns ranged value between 0 and 1 multiplied by 10 ^ 12\r\n    /// @param _underlyingStarts underlying values in the start of Live period\r\n    /// @param _underlyingEndRoundHints specify for each oracle round of the end of Live period\r\n    /// @return _split primary asset class' share of collateral at settlement\r\n    /// @return _underlyingEnds underlying values in the end of Live period\r\n    function split(\r\n        address[] calldata _oracles,\r\n        address[] calldata _oracleIterators,\r\n        int256[] calldata _underlyingStarts,\r\n        uint256 _settleTime,\r\n        uint256[] calldata _underlyingEndRoundHints\r\n    ) external view returns (uint256 _split, int256[] memory _underlyingEnds);\r\n}\r\n\r\n// File: contracts/tokens/IERC20MintedBurnable.sol\r\n\r\n\r\n\r\npragma solidity 0.7.6;\r\n\r\n\r\ninterface IERC20MintedBurnable is IERC20 {\r\n    function mint(address to, uint256 amount) external;\r\n\r\n    function burn(uint256 amount) external;\r\n\r\n    function burnFrom(address account, uint256 amount) external;\r\n}\r\n\r\n// File: contracts/tokens/ITokenBuilder.sol\r\n\r\n\r\n\r\npragma solidity 0.7.6;\r\n\r\n\r\n\r\ninterface ITokenBuilder {\r\n    function isTokenBuilder() external pure returns (bool);\r\n\r\n    function buildTokens(\r\n        IDerivativeSpecification derivative,\r\n        uint256 settlement,\r\n        address _collateralToken\r\n    ) external returns (IERC20MintedBurnable, IERC20MintedBurnable);\r\n}\r\n\r\n// File: contracts/IFeeLogger.sol\r\n\r\n\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface IFeeLogger {\r\n    function log(\r\n        address _liquidityProvider,\r\n        address _collateral,\r\n        uint256 _protocolFee,\r\n        address _author\r\n    ) external;\r\n}\r\n\r\n// File: contracts/IPausableVault.sol\r\n\r\n\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface IPausableVault {\r\n    function pause() external;\r\n\r\n    function unpause() external;\r\n}\r\n\r\n// File: contracts/Vault.sol\r\n\r\n\r\n\r\npragma solidity 0.7.6;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title Derivative implementation Vault\r\n/// @notice A smart contract that references derivative specification and enables users to mint and redeem the derivative\r\ncontract Vault is Ownable, Pausable, IPausableVault, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using SafeMath for uint8;\r\n\r\n    uint256 public constant FRACTION_MULTIPLIER = 10**12;\r\n\r\n    enum State { Created, Live, Settled }\r\n\r\n    event StateChanged(State oldState, State newState);\r\n    event LiveStateSet(address primaryToken, address complementToken);\r\n    event SettledStateSet(\r\n        int256[] underlyingStarts,\r\n        int256[] underlyingEnds,\r\n        uint256 primaryConversion,\r\n        uint256 complementConversion\r\n    );\r\n    event Minted(uint256 minted, uint256 collateral, uint256 fee);\r\n    event Refunded(uint256 tokenAmount, uint256 collateral);\r\n    event Redeemed(\r\n        uint256 tokenAmount,\r\n        uint256 conversion,\r\n        uint256 collateral,\r\n        bool isPrimary\r\n    );\r\n\r\n    /// @notice start of live period\r\n    uint256 public liveTime;\r\n    /// @notice end of live period\r\n    uint256 public settleTime;\r\n\r\n    /// @notice redeem function can only be called after the end of the Live period + delay\r\n    uint256 public settlementDelay;\r\n\r\n    /// @notice underlying value at the start of live period\r\n    int256[] public underlyingStarts;\r\n    /// @notice underlying value at the end of live period\r\n    int256[] public underlyingEnds;\r\n\r\n    /// @notice primary token conversion rate multiplied by 10 ^ 12\r\n    uint256 public primaryConversion;\r\n    /// @notice complement token conversion rate multiplied by 10 ^ 12\r\n    uint256 public complementConversion;\r\n\r\n    /// @notice protocol fee multiplied by 10 ^ 12\r\n    uint256 public protocolFee;\r\n    /// @notice limit on author fee multiplied by 10 ^ 12\r\n    uint256 public authorFeeLimit;\r\n\r\n    // @notice protocol's fee receiving wallet\r\n    address public feeWallet;\r\n\r\n    // @notice current state of the vault\r\n    State public state;\r\n\r\n    // @notice derivative specification address\r\n    IDerivativeSpecification public derivativeSpecification;\r\n    // @notice collateral token address\r\n    IERC20 public collateralToken;\r\n    // @notice oracle address\r\n    address[] public oracles;\r\n    address[] public oracleIterators;\r\n    // @notice collateral split address\r\n    ICollateralSplit public collateralSplit;\r\n    // @notice derivative's token builder strategy address\r\n    ITokenBuilder public tokenBuilder;\r\n    IFeeLogger public feeLogger;\r\n\r\n    // @notice primary token address\r\n    IERC20MintedBurnable public primaryToken;\r\n    // @notice complement token address\r\n    IERC20MintedBurnable public complementToken;\r\n\r\n    constructor(\r\n        uint256 _liveTime,\r\n        uint256 _protocolFee,\r\n        address _feeWallet,\r\n        address _derivativeSpecification,\r\n        address _collateralToken,\r\n        address[] memory _oracles,\r\n        address[] memory _oracleIterators,\r\n        address _collateralSplit,\r\n        address _tokenBuilder,\r\n        address _feeLogger,\r\n        uint256 _authorFeeLimit,\r\n        uint256 _settlementDelay\r\n    ) public {\r\n        require(_liveTime > 0, \"Live zero\");\r\n        require(_liveTime <= block.timestamp, \"Live in future\");\r\n        liveTime = _liveTime;\r\n\r\n        protocolFee = _protocolFee;\r\n\r\n        require(_feeWallet != address(0), \"Fee wallet\");\r\n        feeWallet = _feeWallet;\r\n\r\n        require(_derivativeSpecification != address(0), \"Derivative\");\r\n        derivativeSpecification = IDerivativeSpecification(\r\n            _derivativeSpecification\r\n        );\r\n\r\n        require(_collateralToken != address(0), \"Collateral token\");\r\n        collateralToken = IERC20(_collateralToken);\r\n\r\n        require(_oracles.length > 0, \"Oracles\");\r\n        require(_oracles[0] != address(0), \"First oracle is absent\");\r\n        oracles = _oracles;\r\n\r\n        require(_oracleIterators.length > 0, \"OracleIterators\");\r\n        require(\r\n            _oracleIterators[0] != address(0),\r\n            \"First oracle iterator is absent\"\r\n        );\r\n        oracleIterators = _oracleIterators;\r\n\r\n        require(_collateralSplit != address(0), \"Collateral split\");\r\n        collateralSplit = ICollateralSplit(_collateralSplit);\r\n\r\n        require(_tokenBuilder != address(0), \"Token builder\");\r\n        tokenBuilder = ITokenBuilder(_tokenBuilder);\r\n\r\n        require(_feeLogger != address(0), \"Fee logger\");\r\n        feeLogger = IFeeLogger(_feeLogger);\r\n\r\n        authorFeeLimit = _authorFeeLimit;\r\n\r\n        settleTime = liveTime + derivativeSpecification.livePeriod();\r\n        require(block.timestamp < settleTime, \"Settled time\");\r\n\r\n        settlementDelay = _settlementDelay;\r\n    }\r\n\r\n    function pause() external override onlyOwner() {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() external override onlyOwner() {\r\n        _unpause();\r\n    }\r\n\r\n    /// @notice Initialize vault by creating derivative token and switching to Live state\r\n    /// @dev Extracted from constructor to reduce contract gas creation amount\r\n    function initialize(int256[] calldata _underlyingStarts) external {\r\n        require(state == State.Created, \"Incorrect state.\");\r\n\r\n        underlyingStarts = _underlyingStarts;\r\n\r\n        changeState(State.Live);\r\n\r\n        (primaryToken, complementToken) = tokenBuilder.buildTokens(\r\n            derivativeSpecification,\r\n            settleTime,\r\n            address(collateralToken)\r\n        );\r\n\r\n        emit LiveStateSet(address(primaryToken), address(complementToken));\r\n    }\r\n\r\n    function changeState(State _newState) internal {\r\n        state = _newState;\r\n        emit StateChanged(state, _newState);\r\n    }\r\n\r\n    /// @notice Switch to Settled state if appropriate time threshold is passed and\r\n    /// set underlyingStarts value and set underlyingEnds value,\r\n    /// calculate primaryConversion and complementConversion params\r\n    /// @dev Reverts if underlyingEnds are not available\r\n    /// Vault cannot settle when it paused\r\n    function settle(uint256[] calldata _underlyingEndRoundHints)\r\n        public\r\n        whenNotPaused()\r\n    {\r\n        require(state == State.Live, \"Incorrect state\");\r\n        require(\r\n            block.timestamp >= (settleTime + settlementDelay),\r\n            \"Incorrect time\"\r\n        );\r\n        changeState(State.Settled);\r\n\r\n        uint256 split;\r\n        (split, underlyingEnds) = collateralSplit.split(\r\n            oracles,\r\n            oracleIterators,\r\n            underlyingStarts,\r\n            settleTime,\r\n            _underlyingEndRoundHints\r\n        );\r\n        split = range(split);\r\n\r\n        uint256 collectedCollateral = collateralToken.balanceOf(address(this));\r\n        uint256 mintedPrimaryTokenAmount = primaryToken.totalSupply();\r\n\r\n        if (mintedPrimaryTokenAmount > 0) {\r\n            uint256 primaryCollateralPortion = collectedCollateral.mul(split);\r\n            primaryConversion = primaryCollateralPortion.div(\r\n                mintedPrimaryTokenAmount\r\n            );\r\n            complementConversion = collectedCollateral\r\n                .mul(FRACTION_MULTIPLIER)\r\n                .sub(primaryCollateralPortion)\r\n                .div(mintedPrimaryTokenAmount);\r\n        }\r\n\r\n        emit SettledStateSet(\r\n            underlyingStarts,\r\n            underlyingEnds,\r\n            primaryConversion,\r\n            complementConversion\r\n        );\r\n    }\r\n\r\n    function range(uint256 _split) public pure returns (uint256) {\r\n        if (_split > FRACTION_MULTIPLIER) {\r\n            return FRACTION_MULTIPLIER;\r\n        }\r\n        return _split;\r\n    }\r\n\r\n    function performMint(address _recipient, uint256 _collateralAmount)\r\n        internal\r\n    {\r\n        require(state == State.Live, \"Live is over\");\r\n\r\n        require(_collateralAmount > 0, \"Zero amount\");\r\n        _collateralAmount = doTransferIn(msg.sender, _collateralAmount);\r\n\r\n        uint256 feeAmount = withdrawFee(_collateralAmount);\r\n\r\n        uint256 netAmount = _collateralAmount.sub(feeAmount);\r\n\r\n        uint256 tokenAmount = denominate(netAmount);\r\n\r\n        primaryToken.mint(_recipient, tokenAmount);\r\n        complementToken.mint(_recipient, tokenAmount);\r\n\r\n        emit Minted(tokenAmount, _collateralAmount, feeAmount);\r\n    }\r\n\r\n    function mintTo(address _recipient, uint256 _collateralAmount)\r\n        external\r\n        nonReentrant()\r\n    {\r\n        performMint(_recipient, _collateralAmount);\r\n    }\r\n\r\n    /// @notice Mints primary and complement derivative tokens\r\n    /// @dev Checks and switches to the right state and does nothing if vault is not in Live state\r\n    function mint(uint256 _collateralAmount) external nonReentrant() {\r\n        performMint(msg.sender, _collateralAmount);\r\n    }\r\n\r\n    function performRefund(address _recipient, uint256 _tokenAmount) internal {\r\n        require(_tokenAmount > 0, \"Zero amount\");\r\n        require(\r\n            _tokenAmount <= primaryToken.balanceOf(msg.sender),\r\n            \"Insufficient primary amount\"\r\n        );\r\n        require(\r\n            _tokenAmount <= complementToken.balanceOf(msg.sender),\r\n            \"Insufficient complement amount\"\r\n        );\r\n\r\n        primaryToken.burnFrom(msg.sender, _tokenAmount);\r\n        complementToken.burnFrom(msg.sender, _tokenAmount);\r\n        uint256 unDenominated = unDenominate(_tokenAmount);\r\n\r\n        emit Refunded(_tokenAmount, unDenominated);\r\n        doTransferOut(_recipient, unDenominated);\r\n    }\r\n\r\n    /// @notice Refund equal amounts of derivative tokens for collateral at any time\r\n    function refund(uint256 _tokenAmount) external nonReentrant() {\r\n        performRefund(msg.sender, _tokenAmount);\r\n    }\r\n\r\n    function refundTo(address _recipient, uint256 _tokenAmount)\r\n        external\r\n        nonReentrant()\r\n    {\r\n        performRefund(_recipient, _tokenAmount);\r\n    }\r\n\r\n    function performRedeem(\r\n        address _recipient,\r\n        uint256 _primaryTokenAmount,\r\n        uint256 _complementTokenAmount,\r\n        uint256[] calldata _underlyingEndRoundHints\r\n    ) internal {\r\n        require(\r\n            _primaryTokenAmount > 0 || _complementTokenAmount > 0,\r\n            \"Both tokens zero amount\"\r\n        );\r\n        require(\r\n            _primaryTokenAmount <= primaryToken.balanceOf(msg.sender),\r\n            \"Insufficient primary amount\"\r\n        );\r\n        require(\r\n            _complementTokenAmount <= complementToken.balanceOf(msg.sender),\r\n            \"Insufficient complement amount\"\r\n        );\r\n\r\n        if (\r\n            block.timestamp >= (settleTime + settlementDelay) &&\r\n            state == State.Live\r\n        ) {\r\n            settle(_underlyingEndRoundHints);\r\n        }\r\n\r\n        if (state == State.Settled) {\r\n            redeemAsymmetric(\r\n                _recipient,\r\n                primaryToken,\r\n                _primaryTokenAmount,\r\n                true\r\n            );\r\n            redeemAsymmetric(\r\n                _recipient,\r\n                complementToken,\r\n                _complementTokenAmount,\r\n                false\r\n            );\r\n        }\r\n    }\r\n\r\n    function redeemTo(\r\n        address _recipient,\r\n        uint256 _primaryTokenAmount,\r\n        uint256 _complementTokenAmount,\r\n        uint256[] calldata _underlyingEndRoundHints\r\n    ) external nonReentrant() {\r\n        performRedeem(\r\n            _recipient,\r\n            _primaryTokenAmount,\r\n            _complementTokenAmount,\r\n            _underlyingEndRoundHints\r\n        );\r\n    }\r\n\r\n    /// @notice Redeems unequal amounts previously calculated conversions if the vault is in Settled state\r\n    function redeem(\r\n        uint256 _primaryTokenAmount,\r\n        uint256 _complementTokenAmount,\r\n        uint256[] calldata _underlyingEndRoundHints\r\n    ) external nonReentrant() {\r\n        performRedeem(\r\n            msg.sender,\r\n            _primaryTokenAmount,\r\n            _complementTokenAmount,\r\n            _underlyingEndRoundHints\r\n        );\r\n    }\r\n\r\n    function redeemAsymmetric(\r\n        address _recipient,\r\n        IERC20MintedBurnable _derivativeToken,\r\n        uint256 _amount,\r\n        bool _isPrimary\r\n    ) internal {\r\n        if (_amount == 0) {\r\n            return;\r\n        }\r\n\r\n        _derivativeToken.burnFrom(msg.sender, _amount);\r\n        uint256 conversion =\r\n            _isPrimary ? primaryConversion : complementConversion;\r\n        uint256 collateral = _amount.mul(conversion).div(FRACTION_MULTIPLIER);\r\n        emit Redeemed(_amount, conversion, collateral, _isPrimary);\r\n        if (collateral > 0) {\r\n            doTransferOut(_recipient, collateral);\r\n        }\r\n    }\r\n\r\n    function denominate(uint256 _collateralAmount)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return\r\n            _collateralAmount.div(\r\n                derivativeSpecification.primaryNominalValue() +\r\n                    derivativeSpecification.complementNominalValue()\r\n            );\r\n    }\r\n\r\n    function unDenominate(uint256 _tokenAmount)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return\r\n            _tokenAmount.mul(\r\n                derivativeSpecification.primaryNominalValue() +\r\n                    derivativeSpecification.complementNominalValue()\r\n            );\r\n    }\r\n\r\n    function withdrawFee(uint256 _amount) internal returns (uint256) {\r\n        uint256 protocolFeeAmount =\r\n            calcAndTransferFee(_amount, payable(feeWallet), protocolFee);\r\n\r\n        feeLogger.log(\r\n            msg.sender,\r\n            address(collateralToken),\r\n            protocolFeeAmount,\r\n            derivativeSpecification.author()\r\n        );\r\n\r\n        uint256 authorFee = derivativeSpecification.authorFee();\r\n        if (authorFee > authorFeeLimit) {\r\n            authorFee = authorFeeLimit;\r\n        }\r\n        uint256 authorFeeAmount =\r\n            calcAndTransferFee(\r\n                _amount,\r\n                payable(derivativeSpecification.author()),\r\n                authorFee\r\n            );\r\n\r\n        return protocolFeeAmount.add(authorFeeAmount);\r\n    }\r\n\r\n    function calcAndTransferFee(\r\n        uint256 _amount,\r\n        address payable _beneficiary,\r\n        uint256 _fee\r\n    ) internal returns (uint256 _feeAmount) {\r\n        _feeAmount = _amount.mul(_fee).div(FRACTION_MULTIPLIER);\r\n        if (_feeAmount > 0) {\r\n            doTransferOut(_beneficiary, _feeAmount);\r\n        }\r\n    }\r\n\r\n    /// @dev Similar to EIP20 transfer, except it handles a False result from `transferFrom` and reverts in that case.\r\n    /// This will revert due to insufficient balance or insufficient allowance.\r\n    /// This function returns the actual amount received,\r\n    /// which may be less than `amount` if there is a fee attached to the transfer.\r\n    /// @notice This wrapper safely handles non-standard ERC-20 tokens that do not return a value.\r\n    /// See here: https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\r\n    function doTransferIn(address from, uint256 amount)\r\n        internal\r\n        returns (uint256)\r\n    {\r\n        uint256 balanceBefore = collateralToken.balanceOf(address(this));\r\n        EIP20NonStandardInterface(address(collateralToken)).transferFrom(\r\n            from,\r\n            address(this),\r\n            amount\r\n        );\r\n\r\n        bool success;\r\n        assembly {\r\n            switch returndatasize()\r\n                case 0 {\r\n                    // This is a non-standard ERC-20\r\n                    success := not(0) // set success to true\r\n                }\r\n                case 32 {\r\n                    // This is a compliant ERC-20\r\n                    returndatacopy(0, 0, 32)\r\n                    success := mload(0) // Set `success = returndata` of external call\r\n                }\r\n                default {\r\n                    // This is an excessively non-compliant ERC-20, revert.\r\n                    revert(0, 0)\r\n                }\r\n        }\r\n        require(success, \"TOKEN_TRANSFER_IN_FAILED\");\r\n\r\n        // Calculate the amount that was *actually* transferred\r\n        uint256 balanceAfter = collateralToken.balanceOf(address(this));\r\n        require(balanceAfter >= balanceBefore, \"TOKEN_TRANSFER_IN_OVERFLOW\");\r\n        return balanceAfter - balanceBefore; // underflow already checked above, just subtract\r\n    }\r\n\r\n    /// @dev Similar to EIP20 transfer, except it handles a False success from `transfer` and returns an explanatory\r\n    /// error code rather than reverting. If caller has not called checked protocol's balance, this may revert due to\r\n    /// insufficient cash held in this contract. If caller has checked protocol's balance prior to this call, and verified\r\n    /// it is >= amount, this should not revert in normal conditions.\r\n    /// @notice This wrapper safely handles non-standard ERC-20 tokens that do not return a value.\r\n    /// See here: https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\r\n    function doTransferOut(address to, uint256 amount) internal {\r\n        EIP20NonStandardInterface(address(collateralToken)).transfer(\r\n            to,\r\n            amount\r\n        );\r\n\r\n        bool success;\r\n        assembly {\r\n            switch returndatasize()\r\n                case 0 {\r\n                    // This is a non-standard ERC-20\r\n                    success := not(0) // set success to true\r\n                }\r\n                case 32 {\r\n                    // This is a complaint ERC-20\r\n                    returndatacopy(0, 0, 32)\r\n                    success := mload(0) // Set `success = returndata` of external call\r\n                }\r\n                default {\r\n                    // This is an excessively non-compliant ERC-20, revert.\r\n                    revert(0, 0)\r\n                }\r\n        }\r\n        require(success, \"TOKEN_TRANSFER_OUT_FAILED\");\r\n    }\r\n}\r\n\r\n// File: contracts/IVaultBuilder.sol\r\n\r\n\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface IVaultBuilder {\r\n    function buildVault(\r\n        uint256 _liveTime,\r\n        uint256 _protocolFee,\r\n        address _feeWallet,\r\n        address _derivativeSpecification,\r\n        address _collateralToken,\r\n        address[] calldata _oracles,\r\n        address[] calldata _oracleIterators,\r\n        address _collateralSplit,\r\n        address _tokenBuilder,\r\n        address _feeLogger,\r\n        uint256 _authorFeeLimit,\r\n        uint256 _settlementDelay\r\n    ) external returns (address);\r\n}\r\n\r\n// File: contracts/VaultBuilder.sol\r\n\r\n// \"SPDX-License-Identifier: GPL-3.0-or-later\"\r\n\r\npragma solidity 0.7.6;\r\n\r\n\r\n\r\ncontract VaultBuilder is IVaultBuilder {\r\n    function buildVault(\r\n        uint256 _liveTime,\r\n        uint256 _protocolFee,\r\n        address _feeWallet,\r\n        address _derivativeSpecification,\r\n        address _collateralToken,\r\n        address[] memory _oracles,\r\n        address[] memory _oracleIterators,\r\n        address _collateralSplit,\r\n        address _tokenBuilder,\r\n        address _feeLogger,\r\n        uint256 _authorFeeLimit,\r\n        uint256 _settlementDelay\r\n    ) public override returns (address) {\r\n        Vault vault =\r\n            new Vault(\r\n                _liveTime,\r\n                _protocolFee,\r\n                _feeWallet,\r\n                _derivativeSpecification,\r\n                _collateralToken,\r\n                _oracles,\r\n                _oracleIterators,\r\n                _collateralSplit,\r\n                _tokenBuilder,\r\n                _feeLogger,\r\n                _authorFeeLimit,\r\n                _settlementDelay\r\n            );\r\n        vault.transferOwnership(msg.sender);\r\n        return address(vault);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liveTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_derivativeSpecification\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_oracles\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_oracleIterators\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_collateralSplit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenBuilder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeLogger\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_authorFeeLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_settlementDelay\",\"type\":\"uint256\"}],\"name\":\"buildVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"VaultBuilder","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"1000000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ed5ffa93ff74df26faac9b22c590548fa423d2aa445c80c74d3844dfed8c97fb"}]}