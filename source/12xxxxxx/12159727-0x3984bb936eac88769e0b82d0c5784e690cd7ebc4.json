{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.8.2;\r\n// SPDX-License-Identifier: MIT\r\n// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\r\n// ▓▓▀ ▀▓▌▐▓▓▓▓▓▀▀▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\r\n// ▓▓▓ ▓▓▌▝▚▞▜▓ ▀▀ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▌   ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\r\n// ▓▓▓▄▀▓▌▐▓▌▐▓▄▀▀▀▓▓▓▓▓▓▓▓▓▓▛▀▀▀▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▌   ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\r\n// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▌   ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▌   ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\r\n// ▓▓▓▓▓▓▓▓▓▓▓▓       ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▌   ▓▓▓▓▓▓▓▓▓▓▓▌   ▓▓▓▓▓▓▓       ▓▓▓▓▓▓▓▌   ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\r\n// ▓▓▓▓▓▓▓▓▛▀▀▀▄▄▄▄▄▄▄▛▀▀▀▓▓▓▛▀▀▀▓▓▓▙▄▄▄▛▀▀▀▓▓▓▛▀▀▀▙▄▄▄▓▓▓▛▀▀▀▄▄▄▄▄▄▄▛▀▀▀▓▓▓▌   ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\r\n// ▓▓▓▓▓▓▓▓▌   ▓▓▓▓▓▓▓▌   ▓▓▓▌   ▓▓▓▓▓▓▓▌   ▓▓▓▌   ▓▓▓▓▓▓▓▌   ▓▓▓▓▓▓▓▌   ▓▓▓▌   ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\r\n// ▓▓▓▓▓▓▓▓▌   ▓▓▓▓▓▓▓▌   ▓▓▓▌   ▓▓▓▓▓▓▓▓▓▓▓▀▀▀▜▓▓▓▓▓▓▓▓▓▓▌   ▀▀▀▀▀▀▀▓▓▓▓▓▓▓▌   ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\r\n// ▓▓▓▓▓▓▓▓▌   ▓▓▓▓▓▓▓▌   ▓▓▓▌   ▓▓▓▓▓▓▓▓███   ▐███▓▓▓▓▓▓▓▌          ▓▓▓▓▓▓▓▌   ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\r\n// ▓▓▓▓▓▓▓▓▌   ▓▓▓▓▓▓▓▌   ▓▓▓▌   ▓▓▓▓▓▓▓▌   ▓▓▓▌   ▓▓▓▓▓▓▓▌   ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▌   ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\r\n// ▓▓▓▓▓▓▓▓▌   ▀▀▀▀▀▀▀▓▓▓▓▓▓▓▌   ▓▓▓▛▀▀▀▙▄▄▄▓▓▓▙▄▄▄▛▀▀▀▓▓▓▓▓▓▓▀▀▀▀▀▀▀▀▀▀▓▓▓▓▌   ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\r\n// ▓▓▓▓▓▓▓▓▌          ▓▓▓▓▓▓▓▌   ▓▓▓▌   ▓▓▓▓▓▓▓▓▓▓▓▌   ▓▓▓▓▓▓▓          ▓▓▓▓▌   ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\r\n// ▓▓▓▓▓▓▓▓▌   ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\r\n// ▓▓▓▓▓▓▓▓▌   ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ▐▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ▐▓▓▓  ▐▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\r\n// ▓▓▓▓▓▓▓▓▌   ▓▓▓▓▓▓▓    ▓▓▓▓▓▓    ▐▓▓▓▓▓▌    ▐▓▓▓      ▐▓▓▓▌    ▐▓▓▓▓▓▌    ▓▓▓▓▓▓▓▌       ▓▓▓    ▓▓▓▓▓▓▓\r\n// ▓▓▓▓▓▓▓▓▌   ▓▓▓▓▌  ▓▓▓▓  ▐▌  ▓▓▓▓▌  ▓  ▐▓▓▓▓▌  ▓▓▓  ▐▓▓▓  ▐▓▓▓▓▌  ▓▓▓▓▓▓▓▓  ▐▓  ▐▓▓▓  ▐▓▓▓▌  ▓▓▓▓▓▓▓▓▓▓\r\n// ▓▓▓▓▓▓▓▓▙▄▄▄▓▓▓▓▌  ▓▓▓▓  ▐▌  ▓▓▓▓▌  ▓  ▐▓▓▓▓▓▓▓▓▓▓  ▐▓▓▓  ▐▓▓▓▓▓▓▓▓▓▓▌      ▐▓  ▐▓▓▓  ▐▓▓▓▓▓▓    ▓▓▓▓▓▓\r\n// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▌  ▓▓▓▓  ▐▌  ▓▓▓▓▌  ▓  ▐▓▓▓▓▓▓▓▓▓▓  ▐▓▓▓  ▐▓▓▓▓▓▓▓▓   ▓▓▓▓  ▐▓  ▐▓▓▓  ▐▓▓▓▓▓▓▓▓▓▓  ▐▓▓▓\r\n// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▌      ▓▓▓▓▓▓    ▐▓▓▓  ▐▓▓▓▓▓▓▓▓▓▓▓▓▌  ▓  ▐▓▓▓▓▓▓▓▓▓▓▌    ▓▓▓▓  ▐▓▓▓▓▓  ▐▓▓▓    ▓▓▓▓▓▓▓\r\n// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▌  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\r\n// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▌  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\r\n// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ThePixelPortraits {\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    enum CommissionStatus { queued, accepted, removed  }\r\n    \r\n    struct Commission {\r\n        string name;\r\n        address payable recipient;\r\n        uint bid;\r\n        CommissionStatus status;\r\n    }\r\n\r\n    uint MAX_INT = uint256(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\r\n\r\n    address payable public admin;\r\n    \r\n    mapping (string => uint) public names;\r\n    mapping (uint => Commission) public commissions;\r\n    \r\n    uint public minBid; // the number of wei required to create a commission\r\n    uint public newCommissionIndex; // the index of the next commission which should be created in the mapping\r\n    bool public callStarted; // ensures no re-entrancy can occur\r\n\r\n    modifier callNotStarted () {\r\n      require(!callStarted);\r\n      callStarted = true;\r\n      _;\r\n      callStarted = false;\r\n    }\r\n    \r\n    modifier onlyAdmin {\r\n        require(msg.sender == admin, \"not an admin\");\r\n        _;\r\n    }\r\n    \r\n    constructor(address payable _admin, uint _minBid) {\r\n        admin = _admin;\r\n        minBid = _minBid;\r\n        newCommissionIndex = 1;\r\n    }\r\n     \r\n    function updateAdmin (address payable _newAdmin)\r\n    public\r\n    callNotStarted\r\n    onlyAdmin\r\n    {\r\n        admin = _newAdmin;\r\n        emit AdminUpdated(_newAdmin);\r\n    }\r\n    \r\n    function updateMinBid (uint _newMinBid)\r\n    public\r\n    callNotStarted\r\n    onlyAdmin\r\n    {\r\n        minBid = _newMinBid;\r\n        emit MinBidUpdated(_newMinBid);\r\n    }\r\n\r\n    function registerNames (string[] memory _names)\r\n    public\r\n    callNotStarted\r\n    onlyAdmin\r\n    {\r\n        for (uint i = 0; i < _names.length; i++){\r\n            require(names[toLower(_names[i])] == 0, \"name not available\"); // ensures the name is not taken\r\n            names[toLower(_names[i])] = MAX_INT;\r\n        }\r\n        emit NamesRegistered(_names);\r\n    }\r\n   \r\n    function commission (string memory _name) \r\n    public\r\n    callNotStarted\r\n    payable\r\n    {\r\n        require(validateName(_name), \"name not valid\"); // ensures the name is valid\r\n        require(names[toLower(_name)] == 0, \"name not available\"); // the name cannot be taken when you create your commission\r\n        require(msg.value >= minBid, \"bid below minimum\"); // must send the proper amount of into the bid\r\n        \r\n        // Next, initialize the new commission\r\n        Commission storage newCommission = commissions[newCommissionIndex];\r\n        newCommission.name = _name;\r\n        newCommission.recipient = payable(msg.sender);\r\n        newCommission.bid = msg.value;\r\n        newCommission.status = CommissionStatus.queued;\r\n              \r\n        emit NewCommission(newCommissionIndex, _name, msg.value, msg.sender);\r\n        \r\n        newCommissionIndex++; // for the subsequent commission to be added into the next slot \r\n    }\r\n    \r\n    \r\n    function updateCommissionName (uint _commissionIndex, string memory _newName) \r\n    public\r\n    callNotStarted\r\n    {\r\n        require(_commissionIndex < newCommissionIndex, \"commission not valid\"); // must be a valid previously instantiated commission\r\n        Commission storage selectedCommission = commissions[_commissionIndex];\r\n        require(msg.sender == selectedCommission.recipient, \"commission not yours\"); // may only be performed by the person who commissioned it\r\n        require(selectedCommission.status == CommissionStatus.queued, \"commission not in queue\"); // the commission must still be queued\r\n        require(validateName(_newName), \"name not valid\"); // ensures the name is valid\r\n        require(names[toLower(_newName)] == 0, \"name not available\"); // the name cannot be taken when you create your commission\r\n\r\n        selectedCommission.name = _newName;\r\n\r\n        emit CommissionNameUpdated(_commissionIndex, _newName);\r\n    }\r\n    \r\n    function rescindCommission (uint _commissionIndex) \r\n    public\r\n    callNotStarted\r\n    {\r\n        require(_commissionIndex < newCommissionIndex, \"commission not valid\"); // must be a valid previously instantiated commission\r\n        Commission storage selectedCommission = commissions[_commissionIndex];\r\n        require(msg.sender == selectedCommission.recipient, \"commission not yours\"); // may only be performed by the person who commissioned it\r\n        require(selectedCommission.status == CommissionStatus.queued, \"commission not in queue\"); // the commission must still be queued\r\n      \r\n        // we mark it as removed and return the individual their bid\r\n        selectedCommission.status = CommissionStatus.removed;\r\n        selectedCommission.recipient.transfer(selectedCommission.bid);\r\n        \r\n        emit CommissionRescinded(_commissionIndex);\r\n    }\r\n    \r\n    function increaseCommissionBid (uint _commissionIndex)\r\n    public\r\n    payable\r\n    callNotStarted\r\n    {\r\n        require(_commissionIndex < newCommissionIndex, \"commission not valid\"); // must be a valid previously instantiated commission\r\n        Commission storage selectedCommission = commissions[_commissionIndex];\r\n        require(msg.sender == selectedCommission.recipient, \"commission not yours\"); // may only be performed by the person who commissioned it\r\n        require(selectedCommission.status == CommissionStatus.queued, \"commission not in queue\"); // the commission must still be queued\r\n\r\n        // then we update the commission's bid\r\n        selectedCommission.bid = msg.value + selectedCommission.bid;\r\n        \r\n        emit CommissionBidUpdated(_commissionIndex, selectedCommission.bid);\r\n    }\r\n    \r\n    function processCommissions(uint[] memory _commissionIndexes)\r\n    public\r\n    onlyAdmin\r\n    callNotStarted\r\n    {\r\n        for (uint i = 0; i < _commissionIndexes.length; i++){\r\n            Commission storage selectedCommission = commissions[_commissionIndexes[i]];\r\n            \r\n            require(selectedCommission.status == CommissionStatus.queued, \"commission not in the queue\"); // the queue my not be empty when processing more commissions \r\n            require(names[toLower(selectedCommission.name)] == 0); // admins can't process commissions with names which are taken\r\n            \r\n            // the name isn't taken yet and will be accepted\r\n            selectedCommission.status = CommissionStatus.accepted; // first, we change the status of the commission to accepted\r\n            names[toLower(selectedCommission.name)] = _commissionIndexes[i]; // finally, we reserve the name for this commission\r\n            admin.transfer(selectedCommission.bid); // next we accept the payment for the commission\r\n            \r\n            emit CommissionProcessed(_commissionIndexes[i], selectedCommission.status);\r\n        }\r\n    }\r\n    \r\n    // Credit to Hashmasks for the following functions\r\n    function validateName (string memory str)\r\n    public \r\n    pure \r\n    returns (bool)\r\n    {\r\n        bytes memory b = bytes(str);\r\n        if(b.length < 1) return false;\r\n        if(b.length > 25) return false; // Cannot be longer than 25 characters\r\n        if(b[0] == 0x20) return false; // Leading space\r\n        if (b[b.length - 1] == 0x20) return false; // Trailing space\r\n\r\n        bytes1 lastChar = b[0];\r\n\r\n        for(uint i; i<b.length; i++){\r\n            bytes1 char = b[i];\r\n\r\n            if (char == 0x20 && lastChar == 0x20) return false; // Cannot contain continous spaces\r\n\r\n            if(\r\n                !(char >= 0x30 && char <= 0x39) && //9-0\r\n                !(char >= 0x41 && char <= 0x5A) && //A-Z\r\n                !(char >= 0x61 && char <= 0x7A) && //a-z\r\n                !(char == 0x20) //space\r\n            )\r\n                return false;\r\n\r\n            lastChar = char;\r\n        }\r\n\r\n        return true;\r\n    }\r\n    \r\n    function toLower (string memory str)\r\n    public \r\n    pure \r\n    returns (string memory)\r\n    {\r\n        bytes memory bStr = bytes(str);\r\n        bytes memory bLower = new bytes(bStr.length);\r\n        for (uint i = 0; i < bStr.length; i++) {\r\n            // Uppercase character\r\n            if ((uint8(bStr[i]) >= 65) && (uint8(bStr[i]) <= 90)) {\r\n                bLower[i] = bytes1(uint8(bStr[i]) + 32);\r\n            } else {\r\n                bLower[i] = bStr[i];\r\n            }\r\n        }\r\n        return string(bLower);\r\n    }\r\n    \r\n    event AdminUpdated(address _newAdmin);\r\n    event MinBidUpdated(uint _newMinBid);\r\n    event NamesRegistered(string[] _names);\r\n    event NewCommission(uint _commissionIndex, string _name, uint _bid, address _recipient);\r\n    event CommissionNameUpdated(uint _commissionIndex, string _newName);\r\n    event CommissionBidUpdated(uint _commissionIndex, uint _newBid);\r\n    event CommissionRescinded(uint _commissionIndex);\r\n    event CommissionProcessed(uint _commissionIndex, CommissionStatus _status);\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minBid\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"AdminUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_commissionIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newBid\",\"type\":\"uint256\"}],\"name\":\"CommissionBidUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_commissionIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_newName\",\"type\":\"string\"}],\"name\":\"CommissionNameUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_commissionIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum ThePixelPortraits.CommissionStatus\",\"name\":\"_status\",\"type\":\"uint8\"}],\"name\":\"CommissionProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_commissionIndex\",\"type\":\"uint256\"}],\"name\":\"CommissionRescinded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newMinBid\",\"type\":\"uint256\"}],\"name\":\"MinBidUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"_names\",\"type\":\"string[]\"}],\"name\":\"NamesRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_commissionIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_bid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"NewCommission\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"callStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"commission\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"commissions\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"},{\"internalType\":\"enum ThePixelPortraits.CommissionStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_commissionIndex\",\"type\":\"uint256\"}],\"name\":\"increaseCommissionBid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"names\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newCommissionIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_commissionIndexes\",\"type\":\"uint256[]\"}],\"name\":\"processCommissions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_names\",\"type\":\"string[]\"}],\"name\":\"registerNames\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_commissionIndex\",\"type\":\"uint256\"}],\"name\":\"rescindCommission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"toLower\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"updateAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_commissionIndex\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_newName\",\"type\":\"string\"}],\"name\":\"updateCommissionName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMinBid\",\"type\":\"uint256\"}],\"name\":\"updateMinBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"validateName\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"ThePixelPortraits","CompilerVersion":"v0.8.2+commit.661d1103","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000fd51058c98e810f9d182104e8b41551a3a020af3000000000000000000000000000000000000000000000000016345785d8a0000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://2ff6de32aaa7921c1f32974ad619a093f5f2fc9a03684f2d18aa59d338666bb7"}]}