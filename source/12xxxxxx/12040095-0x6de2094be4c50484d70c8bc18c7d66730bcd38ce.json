{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-12-05\r\n*/\r\n\r\npragma solidity ^0.6.12;\r\n\r\n// SPDX-License-Identifier: MIT\r\ncontract X2  {\r\n    using SafeMath for uint256;\r\n\r\n    \r\n    string private _tokenName;\r\n    string private _tokenSymbol;\r\n    uint8 private _decimals;\r\n\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n    uint256 private _totalSupply;\r\n\r\n\r\n\r\n\t\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n\t  //  The contract can be initialized with a number of tokens\r\n    //  All the tokens are deposited to the owner address\r\n    //\r\n    // @param InitialSupply Initial supply of the contract\r\n    // @param name Token Name\r\n    // @param symbol Token symbol\r\n    // @param decimals Token decimals\r\n\r\n\r\n    constructor (uint256  initialSupply ,string memory name, string memory symbol, uint8  decimals) public {\r\n        _tokenName = name;\r\n        _tokenSymbol = symbol;\r\n        _decimals = decimals;\r\n\t\t_totalSupply = initialSupply;\r\n        _balances[msg.sender] = initialSupply;\r\n        emit Transfer(address(0), msg.sender, initialSupply);\r\n    }\r\n\r\n    //Returns the name of the token\r\n    function name() public view returns (string memory) {\r\n        return _tokenName;\r\n    }\r\n\r\n    //Returns the symbol of the token\r\n    function symbol() public view returns (string memory) {\r\n        return _tokenSymbol;\r\n    }\r\n\r\n\t/**\r\n         Returns the number of decimals the token uses - e.g. 8, \r\n\t means to divide the token amount by 100000000 to get its user representation.\r\n        */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * returns total tokens in existence\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * returns the  account balance of the specified address.\r\n     */\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * Returns the amount which spender is still allowed to withdraw from owner\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    /**\r\n     *Transfer token for a specified address\r\n\t *Transfers tokens to address receiver, and MUST fire the Transfer event. \r\n\t *The function SHOULD throw if the message caller’s account balance does not have enough tokens to spend.\r\n     */\r\n    function transfer(address receiver, uint256 numTokens) public returns (bool) {\r\n        _transfer(msg.sender, receiver, numTokens);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Allows spender to withdraw from your account msg.sender multiple times, up to the numTokens amount. \r\n     * If this function is called again it overwrites the current allowance with numTokens.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * To prevent attack vectors like the one https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM/ , \r\n     * clients SHOULD make sure to create user interfaces in such a way that they set the allowance first to 0 before setting it to another value for the same spender. \r\n     * THOUGH The contract itself shouldn’t enforce it, to allow backwards compatibility with contracts deployed before\r\n     */\r\n    function approve(address spender, uint256 numTokens) public returns (bool) {\r\n        _approve(msg.sender, spender, numTokens);\r\n        \r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens from one address to another.\r\n     */\r\n    function transferFrom(address from, address to, uint256 numTokens) public returns (bool) {\r\n        _transfer(from, to, numTokens);\r\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(numTokens));\r\n        return true;\r\n    }\r\n\r\n    \r\n    /**\r\n     * Transfer token from to a specified addresses\r\n     */\r\n    function _transfer(address from, address to, uint256 numTokens) internal {\r\n        require(to != address(0));\r\n\t\trequire(numTokens <= _balances[from]);\r\n        _balances[from] = _balances[from].sub(numTokens);\r\n        _balances[to] = _balances[to].add(numTokens);\r\n         emit Transfer(from, to, numTokens);\r\n    }\r\n\r\n    /**\r\n     * Approve an address to spend another addresses' tokens.\r\n     */\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(spender != address(0));\r\n        require(owner != address(0));\r\n        _allowed[owner][spender] = value; \r\n        emit Approval(owner, spender, value);\r\n\t\r\n\t\t\r\n    }\r\n\t/**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n\t\r\n\tfunction increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n       _approve(msg.sender, spender, _allowed [msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\t\r\n\t/**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n \r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowed [msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n  }\r\n\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 ans = a - b;\r\n\r\n        return ans;\r\n    }\r\n\r\n    /**\r\n     * Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 ans = a + b;\r\n        require(ans >= a);\r\n        return ans;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"X2","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000002386f26fc10000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000002583200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000025832000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://2cc81830d5024ac8e2e5c6ba520a24084fbd2d84d69a3f3a6a1d1dedfba2a443"}]}