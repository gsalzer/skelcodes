{"status":"1","message":"OK","result":[{"SourceCode":"// String Utils v0.1\r\n\r\n/// @title String Utils - String utility functions\r\n/// @author Piper Merriam - \r\nlibrary StringLib {\r\n    /*\r\n     *  Address: 0x443b53559d337277373171280ec57029718203fb\r\n     */\r\n\r\n    /// @dev Converts an unsigned integert to its string representation.\r\n    /// @param v The number to be converted.\r\n    function uintToBytes(uint v) constant returns (bytes32 ret) {\r\n        if (v == 0) {\r\n            ret = '0';\r\n        }\r\n        else {\r\n            while (v > 0) {\r\n                ret = bytes32(uint(ret) / (2 ** 8));\r\n                ret |= bytes32(((v % 10) + 48) * 2 ** (8 * 31));\r\n                v /= 10;\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    /// @dev Converts a numeric string to it's unsigned integer representation.\r\n    /// @param v The string to be converted.\r\n    function bytesToUInt(bytes32 v) constant returns (uint ret) {\r\n        if (v == 0x0) {\r\n            throw;\r\n        }\r\n\r\n        uint digit;\r\n\r\n        for (uint i = 0; i < 32; i++) {\r\n            digit = uint((uint(v) / (2 ** (8 * (31 - i)))) & 0xff);\r\n            if (digit == 0) {\r\n                break;\r\n            }\r\n            else if (digit < 48 || digit > 57) {\r\n                throw;\r\n            }\r\n            ret *= 10;\r\n            ret += (digit - 48);\r\n        }\r\n        return ret;\r\n    }\r\n}\r\n\r\n\r\n// Accounting v0.1 (not the same as the 0.1 release of this library)\r\n\r\n/// @title Accounting Lib - Accounting utilities\r\n/// @author Piper Merriam - \r\nlibrary AccountingLib {\r\n        /*\r\n         *  Address: 0x7de615d8a51746a9f10f72a593fb5b3718dc3d52\r\n         */\r\n        struct Bank {\r\n            mapping (address => uint) accountBalances;\r\n        }\r\n\r\n        /// @dev Low level method for adding funds to an account.  Protects against overflow.\r\n        /// @param self The Bank instance to operate on.\r\n        /// @param accountAddress The address of the account the funds should be added to.\r\n        /// @param value The amount that should be added to the account.\r\n        function addFunds(Bank storage self, address accountAddress, uint value) public {\r\n                if (self.accountBalances[accountAddress] + value < self.accountBalances[accountAddress]) {\r\n                        // Prevent Overflow.\r\n                        throw;\r\n                }\r\n                self.accountBalances[accountAddress] += value;\r\n        }\r\n\r\n        event _Deposit(address indexed _from, address indexed accountAddress, uint value);\r\n        /// @dev Function wrapper around the _Deposit event so that it can be used by contracts.  Can be used to log a deposit to an account.\r\n        /// @param _from The address that deposited the funds.\r\n        /// @param accountAddress The address of the account the funds were added to.\r\n        /// @param value The amount that was added to the account.\r\n        function Deposit(address _from, address accountAddress, uint value) public {\r\n            _Deposit(_from, accountAddress, value);\r\n        }\r\n\r\n\r\n        /// @dev Safe function for depositing funds.  Returns boolean for whether the deposit was successful\r\n        /// @param self The Bank instance to operate on.\r\n        /// @param accountAddress The address of the account the funds should be added to.\r\n        /// @param value The amount that should be added to the account.\r\n        function deposit(Bank storage self, address accountAddress, uint value) public returns (bool) {\r\n                addFunds(self, accountAddress, value);\r\n                return true;\r\n        }\r\n\r\n        event _Withdrawal(address indexed accountAddress, uint value);\r\n\r\n        /// @dev Function wrapper around the _Withdrawal event so that it can be used by contracts.  Can be used to log a withdrawl from an account.\r\n        /// @param accountAddress The address of the account the funds were withdrawn from.\r\n        /// @param value The amount that was withdrawn to the account.\r\n        function Withdrawal(address accountAddress, uint value) public {\r\n            _Withdrawal(accountAddress, value);\r\n        }\r\n\r\n        event _InsufficientFunds(address indexed accountAddress, uint value, uint balance);\r\n\r\n        /// @dev Function wrapper around the _InsufficientFunds event so that it can be used by contracts.  Can be used to log a failed withdrawl from an account.\r\n        /// @param accountAddress The address of the account the funds were to be withdrawn from.\r\n        /// @param value The amount that was attempted to be withdrawn from the account.\r\n        /// @param balance The current balance of the account.\r\n        function InsufficientFunds(address accountAddress, uint value, uint balance) public {\r\n            _InsufficientFunds(accountAddress, value, balance);\r\n        }\r\n\r\n        /// @dev Low level method for removing funds from an account.  Protects against underflow.\r\n        /// @param self The Bank instance to operate on.\r\n        /// @param accountAddress The address of the account the funds should be deducted from.\r\n        /// @param value The amount that should be deducted from the account.\r\n        function deductFunds(Bank storage self, address accountAddress, uint value) public {\r\n                /*\r\n                 *  Helper function that should be used for any reduction of\r\n                 *  account funds.  It has error checking to prevent\r\n                 *  underflowing the account balance which would be REALLY bad.\r\n                 */\r\n                if (value > self.accountBalances[accountAddress]) {\r\n                        // Prevent Underflow.\r\n                        throw;\r\n                }\r\n                self.accountBalances[accountAddress] -= value;\r\n        }\r\n\r\n        /// @dev Safe function for withdrawing funds.  Returns boolean for whether the deposit was successful as well as sending the amount in ether to the account address.\r\n        /// @param self The Bank instance to operate on.\r\n        /// @param accountAddress The address of the account the funds should be withdrawn from.\r\n        /// @param value The amount that should be withdrawn from the account.\r\n        function withdraw(Bank storage self, address accountAddress, uint value) public returns (bool) {\r\n                /*\r\n                 *  Public API for withdrawing funds.\r\n                 */\r\n                if (self.accountBalances[accountAddress] >= value) {\r\n                        deductFunds(self, accountAddress, value);\r\n                        if (!accountAddress.send(value)) {\r\n                                // Potentially sending money to a contract that\r\n                                // has a fallback function.  So instead, try\r\n                                // tranferring the funds with the call api.\r\n                                if (!accountAddress.call.value(value)()) {\r\n                                        // Revert the entire transaction.  No\r\n                                        // need to destroy the funds.\r\n                                        throw;\r\n                                }\r\n                        }\r\n                        return true;\r\n                }\r\n                return false;\r\n        }\r\n}\r\n\r\n// Grove v0.3 (not the same as the 0.3 release of this library)\r\n\r\n\r\n/// @title GroveLib - Library for queriable indexed ordered data.\r\n/// @author PiperMerriam - \r\nlibrary GroveLib {\r\n        /*\r\n         *  Indexes for ordered data\r\n         *\r\n         *  Address: 0x920c890a90db8fba7604864b0cf38ee667331323\r\n         */\r\n        struct Index {\r\n                bytes32 root;\r\n                mapping (bytes32 => Node) nodes;\r\n        }\r\n\r\n        struct Node {\r\n                bytes32 id;\r\n                int value;\r\n                bytes32 parent;\r\n                bytes32 left;\r\n                bytes32 right;\r\n                uint height;\r\n        }\r\n\r\n        function max(uint a, uint b) internal returns (uint) {\r\n            if (a >= b) {\r\n                return a;\r\n            }\r\n            return b;\r\n        }\r\n\r\n        /*\r\n         *  Node getters\r\n         */\r\n        /// @dev Retrieve the unique identifier for the node.\r\n        /// @param index The index that the node is part of.\r\n        /// @param id The id for the node to be looked up.\r\n        function getNodeId(Index storage index, bytes32 id) constant returns (bytes32) {\r\n            return index.nodes[id].id;\r\n        }\r\n\r\n        /// @dev Retrieve the value for the node.\r\n        /// @param index The index that the node is part of.\r\n        /// @param id The id for the node to be looked up.\r\n        function getNodeValue(Index storage index, bytes32 id) constant returns (int) {\r\n            return index.nodes[id].value;\r\n        }\r\n\r\n        /// @dev Retrieve the height of the node.\r\n        /// @param index The index that the node is part of.\r\n        /// @param id The id for the node to be looked up.\r\n        function getNodeHeight(Index storage index, bytes32 id) constant returns (uint) {\r\n            return index.nodes[id].height;\r\n        }\r\n\r\n        /// @dev Retrieve the parent id of the node.\r\n        /// @param index The index that the node is part of.\r\n        /// @param id The id for the node to be looked up.\r\n        function getNodeParent(Index storage index, bytes32 id) constant returns (bytes32) {\r\n            return index.nodes[id].parent;\r\n        }\r\n\r\n        /// @dev Retrieve the left child id of the node.\r\n        /// @param index The index that the node is part of.\r\n        /// @param id The id for the node to be looked up.\r\n        function getNodeLeftChild(Index storage index, bytes32 id) constant returns (bytes32) {\r\n            return index.nodes[id].left;\r\n        }\r\n\r\n        /// @dev Retrieve the right child id of the node.\r\n        /// @param index The index that the node is part of.\r\n        /// @param id The id for the node to be looked up.\r\n        function getNodeRightChild(Index storage index, bytes32 id) constant returns (bytes32) {\r\n            return index.nodes[id].right;\r\n        }\r\n\r\n        /// @dev Retrieve the node id of the next node in the tree.\r\n        /// @param index The index that the node is part of.\r\n        /// @param id The id for the node to be looked up.\r\n        function getPreviousNode(Index storage index, bytes32 id) constant returns (bytes32) {\r\n            Node storage currentNode = index.nodes[id];\r\n\r\n            if (currentNode.id == 0x0) {\r\n                // Unknown node, just return 0x0;\r\n                return 0x0;\r\n            }\r\n\r\n            Node memory child;\r\n\r\n            if (currentNode.left != 0x0) {\r\n                // Trace left to latest child in left tree.\r\n                child = index.nodes[currentNode.left];\r\n\r\n                while (child.right != 0) {\r\n                    child = index.nodes[child.right];\r\n                }\r\n                return child.id;\r\n            }\r\n\r\n            if (currentNode.parent != 0x0) {\r\n                // Now we trace back up through parent relationships, looking\r\n                // for a link where the child is the right child of it's\r\n                // parent.\r\n                Node storage parent = index.nodes[currentNode.parent];\r\n                child = currentNode;\r\n\r\n                while (true) {\r\n                    if (parent.right == child.id) {\r\n                        return parent.id;\r\n                    }\r\n\r\n                    if (parent.parent == 0x0) {\r\n                        break;\r\n                    }\r\n                    child = parent;\r\n                    parent = index.nodes[parent.parent];\r\n                }\r\n            }\r\n\r\n            // This is the first node, and has no previous node.\r\n            return 0x0;\r\n        }\r\n\r\n        /// @dev Retrieve the node id of the previous node in the tree.\r\n        /// @param index The index that the node is part of.\r\n        /// @param id The id for the node to be looked up.\r\n        function getNextNode(Index storage index, bytes32 id) constant returns (bytes32) {\r\n            Node storage currentNode = index.nodes[id];\r\n\r\n            if (currentNode.id == 0x0) {\r\n                // Unknown node, just return 0x0;\r\n                return 0x0;\r\n            }\r\n\r\n            Node memory child;\r\n\r\n            if (currentNode.right != 0x0) {\r\n                // Trace right to earliest child in right tree.\r\n                child = index.nodes[currentNode.right];\r\n\r\n                while (child.left != 0) {\r\n                    child = index.nodes[child.left];\r\n                }\r\n                return child.id;\r\n            }\r\n\r\n            if (currentNode.parent != 0x0) {\r\n                // if the node is the left child of it's parent, then the\r\n                // parent is the next one.\r\n                Node storage parent = index.nodes[currentNode.parent];\r\n                child = currentNode;\r\n\r\n                while (true) {\r\n                    if (parent.left == child.id) {\r\n                        return parent.id;\r\n                    }\r\n\r\n                    if (parent.parent == 0x0) {\r\n                        break;\r\n                    }\r\n                    child = parent;\r\n                    parent = index.nodes[parent.parent];\r\n                }\r\n\r\n                // Now we need to trace all the way up checking to see if any parent is the \r\n            }\r\n\r\n            // This is the final node.\r\n            return 0x0;\r\n        }\r\n\r\n\r\n        /// @dev Updates or Inserts the id into the index at its appropriate location based on the value provided.\r\n        /// @param index The index that the node is part of.\r\n        /// @param id The unique identifier of the data element the index node will represent.\r\n        /// @param value The value of the data element that represents it's total ordering with respect to other elementes.\r\n        function insert(Index storage index, bytes32 id, int value) public {\r\n                if (index.nodes[id].id == id) {\r\n                    // A node with this id already exists.  If the value is\r\n                    // the same, then just return early, otherwise, remove it\r\n                    // and reinsert it.\r\n                    if (index.nodes[id].value == value) {\r\n                        return;\r\n                    }\r\n                    remove(index, id);\r\n                }\r\n\r\n                uint leftHeight;\r\n                uint rightHeight;\r\n\r\n                bytes32 previousNodeId = 0x0;\r\n\r\n                if (index.root == 0x0) {\r\n                    index.root = id;\r\n                }\r\n                Node storage currentNode = index.nodes[index.root];\r\n\r\n                // Do insertion\r\n                while (true) {\r\n                    if (currentNode.id == 0x0) {\r\n                        // This is a new unpopulated node.\r\n                        currentNode.id = id;\r\n                        currentNode.parent = previousNodeId;\r\n                        currentNode.value = value;\r\n                        break;\r\n                    }\r\n\r\n                    // Set the previous node id.\r\n                    previousNodeId = currentNode.id;\r\n\r\n                    // The new node belongs in the right subtree\r\n                    if (value >= currentNode.value) {\r\n                        if (currentNode.right == 0x0) {\r\n                            currentNode.right = id;\r\n                        }\r\n                        currentNode = index.nodes[currentNode.right];\r\n                        continue;\r\n                    }\r\n\r\n                    // The new node belongs in the left subtree.\r\n                    if (currentNode.left == 0x0) {\r\n                        currentNode.left = id;\r\n                    }\r\n                    currentNode = index.nodes[currentNode.left];\r\n                }\r\n\r\n                // Rebalance the tree\r\n                _rebalanceTree(index, currentNode.id);\r\n        }\r\n\r\n        /// @dev Checks whether a node for the given unique identifier exists within the given index.\r\n        /// @param index The index that should be searched\r\n        /// @param id The unique identifier of the data element to check for.\r\n        function exists(Index storage index, bytes32 id) constant returns (bool) {\r\n            return (index.nodes[id].id == id);\r\n        }\r\n\r\n        /// @dev Remove the node for the given unique identifier from the index.\r\n        /// @param index The index that should be removed\r\n        /// @param id The unique identifier of the data element to remove.\r\n        function remove(Index storage index, bytes32 id) public {\r\n            Node storage replacementNode;\r\n            Node storage parent;\r\n            Node storage child;\r\n            bytes32 rebalanceOrigin;\r\n\r\n            Node storage nodeToDelete = index.nodes[id];\r\n\r\n            if (nodeToDelete.id != id) {\r\n                // The id does not exist in the tree.\r\n                return;\r\n            }\r\n\r\n            if (nodeToDelete.left != 0x0 || nodeToDelete.right != 0x0) {\r\n                // This node is not a leaf node and thus must replace itself in\r\n                // it's tree by either the previous or next node.\r\n                if (nodeToDelete.left != 0x0) {\r\n                    // This node is guaranteed to not have a right child.\r\n                    replacementNode = index.nodes[getPreviousNode(index, nodeToDelete.id)];\r\n                }\r\n                else {\r\n                    // This node is guaranteed to not have a left child.\r\n                    replacementNode = index.nodes[getNextNode(index, nodeToDelete.id)];\r\n                }\r\n                // The replacementNode is guaranteed to have a parent.\r\n                parent = index.nodes[replacementNode.parent];\r\n\r\n                // Keep note of the location that our tree rebalancing should\r\n                // start at.\r\n                rebalanceOrigin = replacementNode.id;\r\n\r\n                // Join the parent of the replacement node with any subtree of\r\n                // the replacement node.  We can guarantee that the replacement\r\n                // node has at most one subtree because of how getNextNode and\r\n                // getPreviousNode are used.\r\n                if (parent.left == replacementNode.id) {\r\n                    parent.left = replacementNode.right;\r\n                    if (replacementNode.right != 0x0) {\r\n                        child = index.nodes[replacementNode.right];\r\n                        child.parent = parent.id;\r\n                    }\r\n                }\r\n                if (parent.right == replacementNode.id) {\r\n                    parent.right = replacementNode.left;\r\n                    if (replacementNode.left != 0x0) {\r\n                        child = index.nodes[replacementNode.left];\r\n                        child.parent = parent.id;\r\n                    }\r\n                }\r\n\r\n                // Now we replace the nodeToDelete with the replacementNode.\r\n                // This includes parent/child relationships for all of the\r\n                // parent, the left child, and the right child.\r\n                replacementNode.parent = nodeToDelete.parent;\r\n                if (nodeToDelete.parent != 0x0) {\r\n                    parent = index.nodes[nodeToDelete.parent];\r\n                    if (parent.left == nodeToDelete.id) {\r\n                        parent.left = replacementNode.id;\r\n                    }\r\n                    if (parent.right == nodeToDelete.id) {\r\n                        parent.right = replacementNode.id;\r\n                    }\r\n                }\r\n                else {\r\n                    // If the node we are deleting is the root node update the\r\n                    // index root node pointer.\r\n                    index.root = replacementNode.id;\r\n                }\r\n\r\n                replacementNode.left = nodeToDelete.left;\r\n                if (nodeToDelete.left != 0x0) {\r\n                    child = index.nodes[nodeToDelete.left];\r\n                    child.parent = replacementNode.id;\r\n                }\r\n\r\n                replacementNode.right = nodeToDelete.right;\r\n                if (nodeToDelete.right != 0x0) {\r\n                    child = index.nodes[nodeToDelete.right];\r\n                    child.parent = replacementNode.id;\r\n                }\r\n            }\r\n            else if (nodeToDelete.parent != 0x0) {\r\n                // The node being deleted is a leaf node so we only erase it's\r\n                // parent linkage.\r\n                parent = index.nodes[nodeToDelete.parent];\r\n\r\n                if (parent.left == nodeToDelete.id) {\r\n                    parent.left = 0x0;\r\n                }\r\n                if (parent.right == nodeToDelete.id) {\r\n                    parent.right = 0x0;\r\n                }\r\n\r\n                // keep note of where the rebalancing should begin.\r\n                rebalanceOrigin = parent.id;\r\n            }\r\n            else {\r\n                // This is both a leaf node and the root node, so we need to\r\n                // unset the root node pointer.\r\n                index.root = 0x0;\r\n            }\r\n\r\n            // Now we zero out all of the fields on the nodeToDelete.\r\n            nodeToDelete.id = 0x0;\r\n            nodeToDelete.value = 0;\r\n            nodeToDelete.parent = 0x0;\r\n            nodeToDelete.left = 0x0;\r\n            nodeToDelete.right = 0x0;\r\n\r\n            // Walk back up the tree rebalancing\r\n            if (rebalanceOrigin != 0x0) {\r\n                _rebalanceTree(index, rebalanceOrigin);\r\n            }\r\n        }\r\n\r\n        bytes2 constant GT = \">\";\r\n        bytes2 constant LT = \"<\";\r\n        bytes2 constant GTE = \">=\";\r\n        bytes2 constant LTE = \"<=\";\r\n        bytes2 constant EQ = \"==\";\r\n\r\n        function _compare(int left, bytes2 operator, int right) internal returns (bool) {\r\n            if (operator == GT) {\r\n                return (left > right);\r\n            }\r\n            if (operator == LT) {\r\n                return (left < right);\r\n            }\r\n            if (operator == GTE) {\r\n                return (left >= right);\r\n            }\r\n            if (operator == LTE) {\r\n                return (left <= right);\r\n            }\r\n            if (operator == EQ) {\r\n                return (left == right);\r\n            }\r\n\r\n            // Invalid operator.\r\n            throw;\r\n        }\r\n\r\n        function _getMaximum(Index storage index, bytes32 id) internal returns (int) {\r\n                Node storage currentNode = index.nodes[id];\r\n\r\n                while (true) {\r\n                    if (currentNode.right == 0x0) {\r\n                        return currentNode.value;\r\n                    }\r\n                    currentNode = index.nodes[currentNode.right];\r\n                }\r\n        }\r\n\r\n        function _getMinimum(Index storage index, bytes32 id) internal returns (int) {\r\n                Node storage currentNode = index.nodes[id];\r\n\r\n                while (true) {\r\n                    if (currentNode.left == 0x0) {\r\n                        return currentNode.value;\r\n                    }\r\n                    currentNode = index.nodes[currentNode.left];\r\n                }\r\n        }\r\n\r\n\r\n        /** @dev Query the index for the edge-most node that satisfies the\r\n         *  given query.  For >, >=, and ==, this will be the left-most node\r\n         *  that satisfies the comparison.  For < and <= this will be the\r\n         *  right-most node that satisfies the comparison.\r\n         */\r\n        /// @param index The index that should be queried\r\n        /** @param operator One of '>', '>=', '<', '<=', '==' to specify what\r\n         *  type of comparison operator should be used.\r\n         */\r\n        function query(Index storage index, bytes2 operator, int value) public returns (bytes32) {\r\n                bytes32 rootNodeId = index.root;\r\n                \r\n                if (rootNodeId == 0x0) {\r\n                    // Empty tree.\r\n                    return 0x0;\r\n                }\r\n\r\n                Node storage currentNode = index.nodes[rootNodeId];\r\n\r\n                while (true) {\r\n                    if (_compare(currentNode.value, operator, value)) {\r\n                        // We have found a match but it might not be the\r\n                        // *correct* match.\r\n                        if ((operator == LT) || (operator == LTE)) {\r\n                            // Need to keep traversing right until this is no\r\n                            // longer true.\r\n                            if (currentNode.right == 0x0) {\r\n                                return currentNode.id;\r\n                            }\r\n                            if (_compare(_getMinimum(index, currentNode.right), operator, value)) {\r\n                                // There are still nodes to the right that\r\n                                // match.\r\n                                currentNode = index.nodes[currentNode.right];\r\n                                continue;\r\n                            }\r\n                            return currentNode.id;\r\n                        }\r\n\r\n                        if ((operator == GT) || (operator == GTE) || (operator == EQ)) {\r\n                            // Need to keep traversing left until this is no\r\n                            // longer true.\r\n                            if (currentNode.left == 0x0) {\r\n                                return currentNode.id;\r\n                            }\r\n                            if (_compare(_getMaximum(index, currentNode.left), operator, value)) {\r\n                                currentNode = index.nodes[currentNode.left];\r\n                                continue;\r\n                            }\r\n                            return currentNode.id;\r\n                        }\r\n                    }\r\n\r\n                    if ((operator == LT) || (operator == LTE)) {\r\n                        if (currentNode.left == 0x0) {\r\n                            // There are no nodes that are less than the value\r\n                            // so return null.\r\n                            return 0x0;\r\n                        }\r\n                        currentNode = index.nodes[currentNode.left];\r\n                        continue;\r\n                    }\r\n\r\n                    if ((operator == GT) || (operator == GTE)) {\r\n                        if (currentNode.right == 0x0) {\r\n                            // There are no nodes that are greater than the value\r\n                            // so return null.\r\n                            return 0x0;\r\n                        }\r\n                        currentNode = index.nodes[currentNode.right];\r\n                        continue;\r\n                    }\r\n\r\n                    if (operator == EQ) {\r\n                        if (currentNode.value < value) {\r\n                            if (currentNode.right == 0x0) {\r\n                                return 0x0;\r\n                            }\r\n                            currentNode = index.nodes[currentNode.right];\r\n                            continue;\r\n                        }\r\n\r\n                        if (currentNode.value > value) {\r\n                            if (currentNode.left == 0x0) {\r\n                                return 0x0;\r\n                            }\r\n                            currentNode = index.nodes[currentNode.left];\r\n                            continue;\r\n                        }\r\n                    }\r\n                }\r\n        }\r\n\r\n        function _rebalanceTree(Index storage index, bytes32 id) internal {\r\n            // Trace back up rebalancing the tree and updating heights as\r\n            // needed..\r\n            Node storage currentNode = index.nodes[id];\r\n\r\n            while (true) {\r\n                int balanceFactor = _getBalanceFactor(index, currentNode.id);\r\n\r\n                if (balanceFactor == 2) {\r\n                    // Right rotation (tree is heavy on the left)\r\n                    if (_getBalanceFactor(index, currentNode.left) == -1) {\r\n                        // The subtree is leaning right so it need to be\r\n                        // rotated left before the current node is rotated\r\n                        // right.\r\n                        _rotateLeft(index, currentNode.left);\r\n                    }\r\n                    _rotateRight(index, currentNode.id);\r\n                }\r\n\r\n                if (balanceFactor == -2) {\r\n                    // Left rotation (tree is heavy on the right)\r\n                    if (_getBalanceFactor(index, currentNode.right) == 1) {\r\n                        // The subtree is leaning left so it need to be\r\n                        // rotated right before the current node is rotated\r\n                        // left.\r\n                        _rotateRight(index, currentNode.right);\r\n                    }\r\n                    _rotateLeft(index, currentNode.id);\r\n                }\r\n\r\n                if ((-1 <= balanceFactor) && (balanceFactor <= 1)) {\r\n                    _updateNodeHeight(index, currentNode.id);\r\n                }\r\n\r\n                if (currentNode.parent == 0x0) {\r\n                    // Reached the root which may be new due to tree\r\n                    // rotation, so set it as the root and then break.\r\n                    break;\r\n                }\r\n\r\n                currentNode = index.nodes[currentNode.parent];\r\n            }\r\n        }\r\n\r\n        function _getBalanceFactor(Index storage index, bytes32 id) internal returns (int) {\r\n                Node storage node = index.nodes[id];\r\n\r\n                return int(index.nodes[node.left].height) - int(index.nodes[node.right].height);\r\n        }\r\n\r\n        function _updateNodeHeight(Index storage index, bytes32 id) internal {\r\n                Node storage node = index.nodes[id];\r\n\r\n                node.height = max(index.nodes[node.left].height, index.nodes[node.right].height) + 1;\r\n        }\r\n\r\n        function _rotateLeft(Index storage index, bytes32 id) internal {\r\n            Node storage originalRoot = index.nodes[id];\r\n\r\n            if (originalRoot.right == 0x0) {\r\n                // Cannot rotate left if there is no right originalRoot to rotate into\r\n                // place.\r\n                throw;\r\n            }\r\n\r\n            // The right child is the new root, so it gets the original\r\n            // `originalRoot.parent` as it's parent.\r\n            Node storage newRoot = index.nodes[originalRoot.right];\r\n            newRoot.parent = originalRoot.parent;\r\n\r\n            // The original root needs to have it's right child nulled out.\r\n            originalRoot.right = 0x0;\r\n\r\n            if (originalRoot.parent != 0x0) {\r\n                // If there is a parent node, it needs to now point downward at\r\n                // the newRoot which is rotating into the place where `node` was.\r\n                Node storage parent = index.nodes[originalRoot.parent];\r\n\r\n                // figure out if we're a left or right child and have the\r\n                // parent point to the new node.\r\n                if (parent.left == originalRoot.id) {\r\n                    parent.left = newRoot.id;\r\n                }\r\n                if (parent.right == originalRoot.id) {\r\n                    parent.right = newRoot.id;\r\n                }\r\n            }\r\n\r\n\r\n            if (newRoot.left != 0) {\r\n                // If the new root had a left child, that moves to be the\r\n                // new right child of the original root node\r\n                Node storage leftChild = index.nodes[newRoot.left];\r\n                originalRoot.right = leftChild.id;\r\n                leftChild.parent = originalRoot.id;\r\n            }\r\n\r\n            // Update the newRoot's left node to point at the original node.\r\n            originalRoot.parent = newRoot.id;\r\n            newRoot.left = originalRoot.id;\r\n\r\n            if (newRoot.parent == 0x0) {\r\n                index.root = newRoot.id;\r\n            }\r\n\r\n            // TODO: are both of these updates necessary?\r\n            _updateNodeHeight(index, originalRoot.id);\r\n            _updateNodeHeight(index, newRoot.id);\r\n        }\r\n\r\n        function _rotateRight(Index storage index, bytes32 id) internal {\r\n            Node storage originalRoot = index.nodes[id];\r\n\r\n            if (originalRoot.left == 0x0) {\r\n                // Cannot rotate right if there is no left node to rotate into\r\n                // place.\r\n                throw;\r\n            }\r\n\r\n            // The left child is taking the place of node, so we update it's\r\n            // parent to be the original parent of the node.\r\n            Node storage newRoot = index.nodes[originalRoot.left];\r\n            newRoot.parent = originalRoot.parent;\r\n\r\n            // Null out the originalRoot.left\r\n            originalRoot.left = 0x0;\r\n\r\n            if (originalRoot.parent != 0x0) {\r\n                // If the node has a parent, update the correct child to point\r\n                // at the newRoot now.\r\n                Node storage parent = index.nodes[originalRoot.parent];\r\n\r\n                if (parent.left == originalRoot.id) {\r\n                    parent.left = newRoot.id;\r\n                }\r\n                if (parent.right == originalRoot.id) {\r\n                    parent.right = newRoot.id;\r\n                }\r\n            }\r\n\r\n            if (newRoot.right != 0x0) {\r\n                Node storage rightChild = index.nodes[newRoot.right];\r\n                originalRoot.left = newRoot.right;\r\n                rightChild.parent = originalRoot.id;\r\n            }\r\n\r\n            // Update the new root's right node to point to the original node.\r\n            originalRoot.parent = newRoot.id;\r\n            newRoot.right = originalRoot.id;\r\n\r\n            if (newRoot.parent == 0x0) {\r\n                index.root = newRoot.id;\r\n            }\r\n\r\n            // Recompute heights.\r\n            _updateNodeHeight(index, originalRoot.id);\r\n            _updateNodeHeight(index, newRoot.id);\r\n        }\r\n}\r\n\r\n\r\n// Resource Pool v0.1.0 (has been modified from the main released version of this library)\r\n\r\n\r\n// @title ResourcePoolLib - Library for a set of resources that are ready for use.\r\n// @author Piper Merriam \r\nlibrary ResourcePoolLib {\r\n        /*\r\n         *  Address: 0xd6bbd16eaa6ea3f71a458bffc64c0ca24fc8c58e\r\n         */\r\n        struct Pool {\r\n                uint rotationDelay;\r\n                uint overlapSize;\r\n                uint freezePeriod;\r\n\r\n                uint _id;\r\n\r\n                GroveLib.Index generationStart;\r\n                GroveLib.Index generationEnd;\r\n\r\n                mapping (uint => Generation) generations;\r\n                mapping (address => uint) bonds;\r\n        }\r\n\r\n        /*\r\n         * Generations have the following properties.\r\n         *\r\n         * 1. Must always overlap by a minimum amount specified by MIN_OVERLAP.\r\n         *\r\n         *    1   2   3   4   5   6   7   8   9   10  11  12  13\r\n         *    [1:-----------------]\r\n         *                [4:--------------------->\r\n         */\r\n        struct Generation {\r\n                uint id;\r\n                uint startAt;\r\n                uint endAt;\r\n                address[] members;\r\n        }\r\n\r\n        /// @dev Creates the next generation for the given pool.  All members from the current generation are carried over (with their order randomized).  The current generation will have it's endAt block set.\r\n        /// @param self The pool to operate on.\r\n        function createNextGeneration(Pool storage self) public returns (uint) {\r\n                /*\r\n                 *  Creat a new pool generation with all of the current\r\n                 *  generation's members copied over in random order.\r\n                 */\r\n                Generation storage previousGeneration = self.generations[self._id];\r\n\r\n                self._id += 1;\r\n                Generation storage nextGeneration = self.generations[self._id];\r\n                nextGeneration.id = self._id;\r\n                nextGeneration.startAt = block.number + self.freezePeriod + self.rotationDelay;\r\n                GroveLib.insert(self.generationStart, StringLib.uintToBytes(nextGeneration.id), int(nextGeneration.startAt));\r\n\r\n                if (previousGeneration.id == 0) {\r\n                        // This is the first generation so we just need to set\r\n                        // it's `id` and `startAt`.\r\n                        return nextGeneration.id;\r\n                }\r\n\r\n                // Set the end date for the current generation.\r\n                previousGeneration.endAt = block.number + self.freezePeriod + self.rotationDelay + self.overlapSize;\r\n                GroveLib.insert(self.generationEnd, StringLib.uintToBytes(previousGeneration.id), int(previousGeneration.endAt));\r\n\r\n                // Now we copy the members of the previous generation over to\r\n                // the next generation as well as randomizing their order.\r\n                address[] memory members = previousGeneration.members;\r\n\r\n                for (uint i = 0; i < members.length; i++) {\r\n                    // Pick a *random* index and push it onto the next\r\n                    // generation's members.\r\n                    uint index = uint(sha3(block.blockhash(block.number))) % (members.length - nextGeneration.members.length);\r\n                    nextGeneration.members.length += 1;\r\n                    nextGeneration.members[nextGeneration.members.length - 1] = members[index];\r\n\r\n                    // Then move the member at the last index into the picked\r\n                    // index's location.\r\n                    members[index] = members[members.length - 1];\r\n                }\r\n\r\n                return nextGeneration.id;\r\n        }\r\n\r\n        /// @dev Returns the first generation id that fully contains the block window provided.\r\n        /// @param self The pool to operate on.\r\n        /// @param leftBound The left bound for the block window (inclusive)\r\n        /// @param rightBound The right bound for the block window (inclusive)\r\n        function getGenerationForWindow(Pool storage self, uint leftBound, uint rightBound) constant returns (uint) {\r\n            // TODO: tests\r\n                var left = GroveLib.query(self.generationStart, \"<=\", int(leftBound));\r\n\r\n                if (left != 0x0) {\r\n                    Generation memory leftCandidate = self.generations[StringLib.bytesToUInt(left)];\r\n                    if (leftCandidate.startAt <= leftBound && (leftCandidate.endAt >= rightBound || leftCandidate.endAt == 0)) {\r\n                        return leftCandidate.id;\r\n                    }\r\n                }\r\n\r\n                var right = GroveLib.query(self.generationEnd, \">=\", int(rightBound));\r\n                if (right != 0x0) {\r\n                    Generation memory rightCandidate = self.generations[StringLib.bytesToUInt(right)];\r\n                    if (rightCandidate.startAt <= leftBound && (rightCandidate.endAt >= rightBound || rightCandidate.endAt == 0)) {\r\n                        return rightCandidate.id;\r\n                    }\r\n                }\r\n\r\n                return 0;\r\n        }\r\n\r\n        /// @dev Returns the first generation in the future that has not yet started.\r\n        /// @param self The pool to operate on.\r\n        function getNextGenerationId(Pool storage self) constant returns (uint) {\r\n            // TODO: tests\r\n                var next = GroveLib.query(self.generationStart, \">\", int(block.number));\r\n                if (next == 0x0) {\r\n                    return 0;\r\n                }\r\n                return StringLib.bytesToUInt(next);\r\n        }\r\n\r\n        /// @dev Returns the first generation that is currently active.\r\n        /// @param self The pool to operate on.\r\n        function getCurrentGenerationId(Pool storage self) constant returns (uint) {\r\n            // TODO: tests\r\n                var next = GroveLib.query(self.generationEnd, \">\", int(block.number));\r\n                if (next != 0x0) {\r\n                    return StringLib.bytesToUInt(next);\r\n                }\r\n\r\n                next = GroveLib.query(self.generationStart, \"<=\", int(block.number));\r\n                if (next != 0x0) {\r\n                    return StringLib.bytesToUInt(next);\r\n                }\r\n                return 0;\r\n        }\r\n\r\n        /*\r\n         *  Pool membership API\r\n         */\r\n        /// @dev Returns a boolean for whether the given address is in the given generation.\r\n        /// @param self The pool to operate on.\r\n        /// @param resourceAddress The address to check membership of\r\n        /// @param generationId The id of the generation to check.\r\n        function isInGeneration(Pool storage self, address resourceAddress, uint generationId) constant returns (bool) {\r\n            // TODO: tests\r\n            if (generationId == 0) {\r\n                return false;\r\n            }\r\n            Generation memory generation = self.generations[generationId];\r\n            for (uint i = 0; i < generation.members.length; i++) {\r\n                if (generation.members[i] == resourceAddress) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n\r\n        /// @dev Returns a boolean for whether the given address is in the current generation.\r\n        /// @param self The pool to operate on.\r\n        /// @param resourceAddress The address to check membership of\r\n        function isInCurrentGeneration(Pool storage self, address resourceAddress) constant returns (bool) {\r\n            // TODO: tests\r\n            return isInGeneration(self, resourceAddress, getCurrentGenerationId(self));\r\n        }\r\n\r\n        /// @dev Returns a boolean for whether the given address is in the next queued generation.\r\n        /// @param self The pool to operate on.\r\n        /// @param resourceAddress The address to check membership of\r\n        function isInNextGeneration(Pool storage self, address resourceAddress) constant returns (bool) {\r\n            // TODO: tests\r\n            return isInGeneration(self, resourceAddress, getNextGenerationId(self));\r\n        }\r\n\r\n        /// @dev Returns a boolean for whether the given address is in either the current generation or the next queued generation.\r\n        /// @param self The pool to operate on.\r\n        /// @param resourceAddress The address to check membership of\r\n        function isInPool(Pool storage self, address resourceAddress) constant returns (bool) {\r\n            // TODO: tests\r\n            return (isInCurrentGeneration(self, resourceAddress) || isInNextGeneration(self, resourceAddress));\r\n        }\r\n\r\n        event _AddedToGeneration(address indexed resourceAddress, uint indexed generationId);\r\n        /// @dev Function to expose the _AddedToGeneration event to contracts.\r\n        /// @param resourceAddress The address that was added\r\n        /// @param generationId The id of the generation.\r\n        function AddedToGeneration(address resourceAddress, uint generationId) public {\r\n                _AddedToGeneration(resourceAddress, generationId);\r\n        }\r\n\r\n        event _RemovedFromGeneration(address indexed resourceAddress, uint indexed generationId);\r\n        /// @dev Function to expose the _AddedToGeneration event to contracts.\r\n        /// @param resourceAddress The address that was removed.\r\n        /// @param generationId The id of the generation.\r\n        function RemovedFromGeneration(address resourceAddress, uint generationId) public {\r\n                _RemovedFromGeneration(resourceAddress, generationId);\r\n        }\r\n\r\n        /// @dev Returns a boolean as to whether the provided address is allowed to enter the pool at this time.\r\n        /// @param self The pool to operate on.\r\n        /// @param resourceAddress The address in question\r\n        /// @param minimumBond The minimum bond amount that should be required for entry.\r\n        function canEnterPool(Pool storage self, address resourceAddress, uint minimumBond) constant returns (bool) {\r\n            /*\r\n             *  - bond\r\n             *  - pool is open\r\n             *  - not already in it.\r\n             *  - not already left it.\r\n             */\r\n            // TODO: tests\r\n            if (self.bonds[resourceAddress] < minimumBond) {\r\n                // Insufficient bond balance;\r\n                return false;\r\n            }\r\n\r\n            if (isInPool(self, resourceAddress)) {\r\n                // Already in the pool either in the next upcoming generation\r\n                // or the currently active generation.\r\n                return false;\r\n            }\r\n\r\n            var nextGenerationId = getNextGenerationId(self);\r\n            if (nextGenerationId != 0) {\r\n                var nextGeneration = self.generations[nextGenerationId];\r\n                if (block.number + self.freezePeriod >= nextGeneration.startAt) {\r\n                    // Next generation starts too soon.\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        /// @dev Adds the address to pool by adding them to the next generation (as well as creating it if it doesn't exist).\r\n        /// @param self The pool to operate on.\r\n        /// @param resourceAddress The address to be added to the pool\r\n        /// @param minimumBond The minimum bond amount that should be required for entry.\r\n        function enterPool(Pool storage self, address resourceAddress, uint minimumBond) public returns (uint) {\r\n            if (!canEnterPool(self, resourceAddress, minimumBond)) {\r\n                throw;\r\n            }\r\n            uint nextGenerationId = getNextGenerationId(self);\r\n            if (nextGenerationId == 0) {\r\n                // No next generation has formed yet so create it.\r\n                nextGenerationId = createNextGeneration(self);\r\n            }\r\n            Generation storage nextGeneration = self.generations[nextGenerationId];\r\n            // now add the new address.\r\n            nextGeneration.members.length += 1;\r\n            nextGeneration.members[nextGeneration.members.length - 1] = resourceAddress;\r\n            return nextGenerationId;\r\n        }\r\n\r\n        /// @dev Returns a boolean as to whether the provided address is allowed to exit the pool at this time.\r\n        /// @param self The pool to operate on.\r\n        /// @param resourceAddress The address in question\r\n        function canExitPool(Pool storage self, address resourceAddress) constant returns (bool) {\r\n            if (!isInCurrentGeneration(self, resourceAddress)) {\r\n                // Not in the pool.\r\n                return false;\r\n            }\r\n\r\n            uint nextGenerationId = getNextGenerationId(self);\r\n            if (nextGenerationId == 0) {\r\n                // Next generation hasn't been generated yet.\r\n                return true;\r\n            }\r\n\r\n            if (self.generations[nextGenerationId].startAt - self.freezePeriod <= block.number) {\r\n                // Next generation starts too soon.\r\n                return false;\r\n            }\r\n\r\n            // They can leave if they are still in the next generation.\r\n            // otherwise they have already left it.\r\n            return isInNextGeneration(self, resourceAddress);\r\n        }\r\n\r\n\r\n        /// @dev Removes the address from the pool by removing them from the next generation (as well as creating it if it doesn't exist)\r\n        /// @param self The pool to operate on.\r\n        /// @param resourceAddress The address in question\r\n        function exitPool(Pool storage self, address resourceAddress) public returns (uint) {\r\n            if (!canExitPool(self, resourceAddress)) {\r\n                throw;\r\n            }\r\n            uint nextGenerationId = getNextGenerationId(self);\r\n            if (nextGenerationId == 0) {\r\n                // No next generation has formed yet so create it.\r\n                nextGenerationId = createNextGeneration(self);\r\n            }\r\n            // Remove them from the generation\r\n            removeFromGeneration(self, nextGenerationId, resourceAddress);\r\n            return nextGenerationId;\r\n        }\r\n\r\n        /// @dev Removes the address from a generation's members array. Returns boolean as to whether removal was successful.\r\n        /// @param self The pool to operate on.\r\n        /// @param generationId The id of the generation to operate on.\r\n        /// @param resourceAddress The address to be removed.\r\n        function removeFromGeneration(Pool storage self, uint generationId, address resourceAddress) public returns (bool){\r\n            Generation storage generation = self.generations[generationId];\r\n            // now remove the address\r\n            for (uint i = 0; i < generation.members.length; i++) {\r\n                if (generation.members[i] == resourceAddress) {\r\n                    generation.members[i] = generation.members[generation.members.length - 1];\r\n                    generation.members.length -= 1;\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n\r\n        /*\r\n         *  Bonding\r\n         */\r\n\r\n        /// @dev Subtracts the amount from an account's bond balance.\r\n        /// @param self The pool to operate on.\r\n        /// @param resourceAddress The address of the account\r\n        /// @param value The value to subtract.\r\n        function deductFromBond(Pool storage self, address resourceAddress, uint value) public {\r\n                /*\r\n                 *  deduct funds from a bond value without risk of an\r\n                 *  underflow.\r\n                 */\r\n                if (value > self.bonds[resourceAddress]) {\r\n                        // Prevent Underflow.\r\n                        throw;\r\n                }\r\n                self.bonds[resourceAddress] -= value;\r\n        }\r\n\r\n        /// @dev Adds the amount to an account's bond balance.\r\n        /// @param self The pool to operate on.\r\n        /// @param resourceAddress The address of the account\r\n        /// @param value The value to add.\r\n        function addToBond(Pool storage self, address resourceAddress, uint value) public {\r\n                /*\r\n                 *  Add funds to a bond value without risk of an\r\n                 *  overflow.\r\n                 */\r\n                if (self.bonds[resourceAddress] + value < self.bonds[resourceAddress]) {\r\n                        // Prevent Overflow\r\n                        throw;\r\n                }\r\n                self.bonds[resourceAddress] += value;\r\n        }\r\n\r\n        /// @dev Withdraws a bond amount from an address's bond account, sending them the corresponding amount in ether.\r\n        /// @param self The pool to operate on.\r\n        /// @param resourceAddress The address of the account\r\n        /// @param value The value to withdraw.\r\n        function withdrawBond(Pool storage self, address resourceAddress, uint value, uint minimumBond) public {\r\n                /*\r\n                 *  Only if you are not in either of the current call pools.\r\n                 */\r\n                // Prevent underflow\r\n                if (value > self.bonds[resourceAddress]) {\r\n                        throw;\r\n                }\r\n\r\n                // Do a permissions check to be sure they can withdraw the\r\n                // funds.\r\n                if (isInPool(self, resourceAddress)) {\r\n                        if (self.bonds[resourceAddress] - value < minimumBond) {\r\n                            return;\r\n                        }\r\n                }\r\n\r\n                deductFromBond(self, resourceAddress, value);\r\n                if (!resourceAddress.send(value)) {\r\n                        // Potentially sending money to a contract that\r\n                        // has a fallback function.  So instead, try\r\n                        // tranferring the funds with the call api.\r\n                        if (!resourceAddress.call.gas(msg.gas).value(value)()) {\r\n                                // Revert the entire transaction.  No\r\n                                // need to destroy the funds.\r\n                                throw;\r\n                        }\r\n                }\r\n        }\r\n}\r\n\r\n\r\ncontract Relay {\r\n        address operator;\r\n\r\n        function Relay() {\r\n                operator = msg.sender;\r\n        }\r\n\r\n        function relayCall(address contractAddress, bytes4 abiSignature, bytes data) public returns (bool) {\r\n                if (msg.sender != operator) {\r\n                        throw;\r\n                }\r\n                return contractAddress.call(abiSignature, data);\r\n        }\r\n}\r\n\r\n\r\n\r\n\r\nlibrary ScheduledCallLib {\r\n    /*\r\n     *  Address: 0x5c3623dcef2d5168dbe3e8cc538788cd8912d898\r\n     */\r\n    struct CallDatabase {\r\n        Relay unauthorizedRelay;\r\n        Relay authorizedRelay;\r\n\r\n        bytes32 lastCallKey;\r\n        bytes lastData;\r\n        uint lastDataLength;\r\n        bytes32 lastDataHash;\r\n\r\n        ResourcePoolLib.Pool callerPool;\r\n        GroveLib.Index callIndex;\r\n\r\n        AccountingLib.Bank gasBank;\r\n\r\n        mapping (bytes32 => Call) calls;\r\n        mapping (bytes32 => bytes) data_registry;\r\n\r\n        mapping (bytes32 => bool) accountAuthorizations;\r\n    }\r\n\r\n    struct Call {\r\n            address contractAddress;\r\n            address scheduledBy;\r\n            uint calledAtBlock;\r\n            uint targetBlock;\r\n            uint8 gracePeriod;\r\n            uint nonce;\r\n            uint baseGasPrice;\r\n            uint gasPrice;\r\n            uint gasUsed;\r\n            uint gasCost;\r\n            uint payout;\r\n            uint fee;\r\n            address executedBy;\r\n            bytes4 abiSignature;\r\n            bool isCancelled;\r\n            bool wasCalled;\r\n            bool wasSuccessful;\r\n            bytes32 dataHash;\r\n    }\r\n\r\n    // The author (Piper Merriam) address.\r\n    address constant owner = 0xd3cda913deb6f67967b99d67acdfa1712c293601;\r\n\r\n    /*\r\n     *  Getter methods for `Call` information\r\n     */\r\n    function getCallContractAddress(CallDatabase storage self, bytes32 callKey) constant returns (address) {\r\n            return self.calls[callKey].contractAddress;\r\n    }\r\n\r\n    function getCallScheduledBy(CallDatabase storage self, bytes32 callKey) constant returns (address) {\r\n            return self.calls[callKey].scheduledBy;\r\n    }\r\n\r\n    function getCallCalledAtBlock(CallDatabase storage self, bytes32 callKey) constant returns (uint) {\r\n            return self.calls[callKey].calledAtBlock;\r\n    }\r\n\r\n    function getCallGracePeriod(CallDatabase storage self, bytes32 callKey) constant returns (uint) {\r\n            return self.calls[callKey].gracePeriod;\r\n    }\r\n\r\n    function getCallTargetBlock(CallDatabase storage self, bytes32 callKey) constant returns (uint) {\r\n            return self.calls[callKey].targetBlock;\r\n    }\r\n\r\n    function getCallBaseGasPrice(CallDatabase storage self, bytes32 callKey) constant returns (uint) {\r\n            return self.calls[callKey].baseGasPrice;\r\n    }\r\n\r\n    function getCallGasPrice(CallDatabase storage self, bytes32 callKey) constant returns (uint) {\r\n            return self.calls[callKey].gasPrice;\r\n    }\r\n\r\n    function getCallGasUsed(CallDatabase storage self, bytes32 callKey) constant returns (uint) {\r\n            return self.calls[callKey].gasUsed;\r\n    }\r\n\r\n    function getCallABISignature(CallDatabase storage self, bytes32 callKey) constant returns (bytes4) {\r\n            return self.calls[callKey].abiSignature;\r\n    }\r\n\r\n    function checkIfCalled(CallDatabase storage self, bytes32 callKey) constant returns (bool) {\r\n            return self.calls[callKey].wasCalled;\r\n    }\r\n\r\n    function checkIfSuccess(CallDatabase storage self, bytes32 callKey) constant returns (bool) {\r\n            return self.calls[callKey].wasSuccessful;\r\n    }\r\n\r\n    function checkIfCancelled(CallDatabase storage self, bytes32 callKey) constant returns (bool) {\r\n            return self.calls[callKey].isCancelled;\r\n    }\r\n\r\n    function getCallDataHash(CallDatabase storage self, bytes32 callKey) constant returns (bytes32) {\r\n            return self.calls[callKey].dataHash;\r\n    }\r\n\r\n    function getCallPayout(CallDatabase storage self, bytes32 callKey) constant returns (uint) {\r\n            return self.calls[callKey].payout;\r\n    }\r\n\r\n    function getCallFee(CallDatabase storage self, bytes32 callKey) constant returns (uint) {\r\n            return self.calls[callKey].fee;\r\n    }\r\n\r\n    /*\r\n     *  Scheduling Authorization API\r\n     */\r\n\r\n    function addAuthorization(CallDatabase storage self, address schedulerAddress, address contractAddress) public {\r\n            self.accountAuthorizations[sha3(schedulerAddress, contractAddress)] = true;\r\n    }\r\n\r\n    function removeAuthorization(CallDatabase storage self, address schedulerAddress, address contractAddress) public {\r\n            self.accountAuthorizations[sha3(schedulerAddress, contractAddress)] = false;\r\n    }\r\n\r\n    function checkAuthorization(CallDatabase storage self, address schedulerAddress, address contractAddress) constant returns (bool) {\r\n            return self.accountAuthorizations[sha3(schedulerAddress, contractAddress)];\r\n    }\r\n\r\n    /*\r\n     *  Data Registry API\r\n     */\r\n    function getCallData(CallDatabase storage self, bytes32 callKey) constant returns (bytes) {\r\n            return self.data_registry[self.calls[callKey].dataHash];\r\n    }\r\n\r\n    /*\r\n     *  API used by Alarm service\r\n     */\r\n    // The number of blocks that each caller in the pool has to complete their\r\n    // call.\r\n    uint constant CALL_WINDOW_SIZE = 16;\r\n\r\n    function getGenerationIdForCall(CallDatabase storage self, bytes32 callKey) constant returns (uint) {\r\n            Call call = self.calls[callKey];\r\n            return ResourcePoolLib.getGenerationForWindow(self.callerPool, call.targetBlock, call.targetBlock + call.gracePeriod);\r\n    }\r\n\r\n    function getDesignatedCaller(CallDatabase storage self, bytes32 callKey, uint blockNumber) constant returns (address) {\r\n            /*\r\n             *  Returns the caller from the current call pool who is\r\n             *  designated as the executor of this call.\r\n             */\r\n            Call call = self.calls[callKey];\r\n            if (blockNumber < call.targetBlock || blockNumber > call.targetBlock + call.gracePeriod) {\r\n                    // blockNumber not within call window.\r\n                    return 0x0;\r\n            }\r\n\r\n            // Check if we are in free-for-all window.\r\n            uint numWindows = call.gracePeriod / CALL_WINDOW_SIZE;\r\n            uint blockWindow = (blockNumber - call.targetBlock) / CALL_WINDOW_SIZE;\r\n\r\n            if (blockWindow + 2 > numWindows) {\r\n                    // We are within the free-for-all period.\r\n                    return 0x0;\r\n            }\r\n\r\n            // Lookup the pool that full contains the call window for this\r\n            // call.\r\n            uint generationId = ResourcePoolLib.getGenerationForWindow(self.callerPool, call.targetBlock, call.targetBlock + call.gracePeriod);\r\n            if (generationId == 0) {\r\n                    // No pool currently in operation.\r\n                    return 0x0;\r\n            }\r\n            var generation = self.callerPool.generations[generationId];\r\n\r\n            uint offset = uint(callKey) % generation.members.length;\r\n            return generation.members[(offset + blockWindow) % generation.members.length];\r\n    }\r\n\r\n    event _AwardedMissedBlockBonus(address indexed fromCaller, address indexed toCaller, uint indexed generationId, bytes32 callKey, uint blockNumber, uint bonusAmount);\r\n    function AwardedMissedBlockBonus(address fromCaller, address toCaller, uint generationId, bytes32 callKey, uint blockNumber, uint bonusAmount) public {\r\n        _AwardedMissedBlockBonus(fromCaller, toCaller, generationId, callKey, blockNumber, bonusAmount);\r\n    }\r\n\r\n    function getMinimumBond() constant returns (uint) {\r\n            return tx.gasprice * block.gaslimit;\r\n    }\r\n\r\n    function doBondBonusTransfer(CallDatabase storage self, address fromCaller, address toCaller) internal returns (uint) {\r\n            uint bonusAmount = getMinimumBond();\r\n            uint bondBalance = self.callerPool.bonds[fromCaller];\r\n\r\n            // If the bond balance is lower than the award\r\n            // balance, then adjust the reward amount to\r\n            // match the bond balance.\r\n            if (bonusAmount > bondBalance) {\r\n                    bonusAmount = bondBalance;\r\n            }\r\n\r\n            // Transfer the funds fromCaller => toCaller\r\n            ResourcePoolLib.deductFromBond(self.callerPool, fromCaller, bonusAmount);\r\n            ResourcePoolLib.addToBond(self.callerPool, toCaller, bonusAmount);\r\n\r\n            return bonusAmount;\r\n    }\r\n\r\n    function awardMissedBlockBonus(CallDatabase storage self, address toCaller, bytes32 callKey) public {\r\n            var call = self.calls[callKey];\r\n\r\n            var generation = self.callerPool.generations[ResourcePoolLib.getGenerationForWindow(self.callerPool, call.targetBlock, call.targetBlock + call.gracePeriod)];\r\n            uint i;\r\n            uint bonusAmount;\r\n            address fromCaller;\r\n\r\n            uint numWindows = call.gracePeriod / CALL_WINDOW_SIZE;\r\n            uint blockWindow = (block.number - call.targetBlock) / CALL_WINDOW_SIZE;\r\n\r\n            // Check if we are within the free-for-all period.  If so, we\r\n            // award from all pool members.\r\n            if (blockWindow + 2 > numWindows) {\r\n                    address firstCaller = getDesignatedCaller(self, callKey, call.targetBlock);\r\n                    for (i = call.targetBlock; i <= call.targetBlock + call.gracePeriod; i += CALL_WINDOW_SIZE) {\r\n                            fromCaller = getDesignatedCaller(self, callKey, i);\r\n                            if (fromCaller == firstCaller && i != call.targetBlock) {\r\n                                    // We have already gone through all of\r\n                                    // the pool callers so we should break\r\n                                    // out of the loop.\r\n                                    break;\r\n                            }\r\n                            if (fromCaller == toCaller) {\r\n                                    continue;\r\n                            }\r\n                            bonusAmount = doBondBonusTransfer(self, fromCaller, toCaller);\r\n\r\n                            // Log the bonus was awarded.\r\n                            AwardedMissedBlockBonus(fromCaller, toCaller, generation.id, callKey, block.number, bonusAmount);\r\n                    }\r\n                    return;\r\n            }\r\n\r\n            // Special case for single member and empty pools\r\n            if (generation.members.length < 2) {\r\n                    return;\r\n            }\r\n\r\n            // Otherwise the award comes from the previous caller.\r\n            for (i = 0; i < generation.members.length; i++) {\r\n                    // Find where the member is in the pool and\r\n                    // award from the previous pool members bond.\r\n                    if (generation.members[i] == toCaller) {\r\n                            fromCaller = generation.members[(i + generation.members.length - 1) % generation.members.length];\r\n\r\n                            bonusAmount = doBondBonusTransfer(self, fromCaller, toCaller);\r\n\r\n                            // Log the bonus was awarded.\r\n                            AwardedMissedBlockBonus(fromCaller, toCaller, generation.id, callKey, block.number, bonusAmount);\r\n\r\n                            // Remove the caller from the next pool.\r\n                            if (ResourcePoolLib.getNextGenerationId(self.callerPool) == 0) {\r\n                                    // This is the first address to modify the\r\n                                    // current pool so we need to setup the next\r\n                                    // pool.\r\n                                    ResourcePoolLib.createNextGeneration(self.callerPool);\r\n                            }\r\n                            ResourcePoolLib.removeFromGeneration(self.callerPool, ResourcePoolLib.getNextGenerationId(self.callerPool), fromCaller);\r\n                            return;\r\n                    }\r\n            }\r\n    }\r\n\r\n    /*\r\n     *  Data registration API\r\n     */\r\n    event _DataRegistered(bytes32 indexed dataHash);\r\n    function DataRegistered(bytes32 dataHash) constant {\r\n        _DataRegistered(dataHash);\r\n    }\r\n\r\n    function registerData(CallDatabase storage self, bytes data) public {\r\n            self.lastData.length = data.length - 4;\r\n            if (data.length > 4) {\r\n                    for (uint i = 0; i < self.lastData.length; i++) {\r\n                            self.lastData[i] = data[i + 4];\r\n                    }\r\n            }\r\n            self.data_registry[sha3(self.lastData)] = self.lastData;\r\n            self.lastDataHash = sha3(self.lastData);\r\n            self.lastDataLength = self.lastData.length;\r\n    }\r\n\r\n    /*\r\n     *  Call execution API\r\n     */\r\n    // This number represents the constant gas cost of the addition\r\n    // operations that occur in `doCall` that cannot be tracked with\r\n    // msg.gas.\r\n    uint constant EXTRA_CALL_GAS = 153321;\r\n\r\n    // This number represents the overall overhead involved in executing a\r\n    // scheduled call.\r\n    uint constant CALL_OVERHEAD = 120104;\r\n\r\n    event _CallExecuted(address indexed executedBy, bytes32 indexed callKey);\r\n    function CallExecuted(address executedBy, bytes32 callKey) public {\r\n        _CallExecuted(executedBy, callKey);\r\n    }\r\n    event _CallAborted(address indexed executedBy, bytes32 indexed callKey, bytes18 reason);\r\n    function CallAborted(address executedBy, bytes32 callKey, bytes18 reason) public {\r\n        _CallAborted(executedBy, callKey, reason);\r\n    }\r\n\r\n    function doCall(CallDatabase storage self, bytes32 callKey, address msgSender) public {\r\n            uint gasBefore = msg.gas;\r\n\r\n            Call storage call = self.calls[callKey];\r\n\r\n            if (call.wasCalled) {\r\n                    // The call has already been executed so don't do it again.\r\n                    _CallAborted(msg.sender, callKey, \"ALREADY CALLED\");\r\n                    return;\r\n            }\r\n\r\n            if (call.isCancelled) {\r\n                    // The call was cancelled so don't execute it.\r\n                    _CallAborted(msg.sender, callKey, \"CANCELLED\");\r\n                    return;\r\n            }\r\n\r\n            if (call.contractAddress == 0x0) {\r\n                    // This call key doesnt map to a registered call.\r\n                    _CallAborted(msg.sender, callKey, \"UNKNOWN\");\r\n                    return;\r\n            }\r\n\r\n            if (block.number < call.targetBlock) {\r\n                    // Target block hasnt happened yet.\r\n                    _CallAborted(msg.sender, callKey, \"TOO EARLY\");\r\n                    return;\r\n            }\r\n\r\n            if (block.number > call.targetBlock + call.gracePeriod) {\r\n                    // The blockchain has advanced passed the period where\r\n                    // it was allowed to be called.\r\n                    _CallAborted(msg.sender, callKey, \"TOO LATE\");\r\n                    return;\r\n            }\r\n\r\n            uint heldBalance = getCallMaxCost(self, callKey);\r\n\r\n            if (self.gasBank.accountBalances[call.scheduledBy] < heldBalance) {\r\n                    // The scheduledBy's account balance is less than the\r\n                    // current gasLimit and thus potentiall can't pay for\r\n                    // the call.\r\n\r\n                    // Mark it as called since it was.\r\n                    call.wasCalled = true;\r\n                    \r\n                    // Log it.\r\n                    _CallAborted(msg.sender, callKey, \"INSUFFICIENT_FUNDS\");\r\n                    return;\r\n            }\r\n\r\n            // Check if this caller is allowed to execute the call.\r\n            if (self.callerPool.generations[ResourcePoolLib.getCurrentGenerationId(self.callerPool)].members.length > 0) {\r\n                    address designatedCaller = getDesignatedCaller(self, callKey, block.number);\r\n                    if (designatedCaller != 0x0 && designatedCaller != msgSender) {\r\n                            // This call was reserved for someone from the\r\n                            // bonded pool of callers and can only be\r\n                            // called by them during this block window.\r\n                            _CallAborted(msg.sender, callKey, \"WRONG_CALLER\");\r\n                            return;\r\n                    }\r\n\r\n                    uint blockWindow = (block.number - call.targetBlock) / CALL_WINDOW_SIZE;\r\n                    if (blockWindow > 0) {\r\n                            // Someone missed their call so this caller\r\n                            // gets to claim their bond for picking up\r\n                            // their slack.\r\n                            awardMissedBlockBonus(self, msgSender, callKey);\r\n                    }\r\n            }\r\n\r\n            // Log metadata about the call.\r\n            call.gasPrice = tx.gasprice;\r\n            call.executedBy = msgSender;\r\n            call.calledAtBlock = block.number;\r\n\r\n            // Fetch the call data\r\n            var data = self.data_registry[call.dataHash];\r\n\r\n            // During the call, we need to put enough funds to pay for the\r\n            // call on hold to ensure they are available to pay the caller.\r\n            AccountingLib.withdraw(self.gasBank, call.scheduledBy, heldBalance);\r\n\r\n            // Mark whether the function call was successful.\r\n            if (checkAuthorization(self, call.scheduledBy, call.contractAddress)) {\r\n                    call.wasSuccessful = self.authorizedRelay.relayCall.gas(msg.gas - CALL_OVERHEAD)(call.contractAddress, call.abiSignature, data);\r\n            }\r\n            else {\r\n                    call.wasSuccessful = self.unauthorizedRelay.relayCall.gas(msg.gas - CALL_OVERHEAD)(call.contractAddress, call.abiSignature, data);\r\n            }\r\n\r\n            // Add the held funds back into the scheduler's account.\r\n            AccountingLib.deposit(self.gasBank, call.scheduledBy, heldBalance);\r\n\r\n            // Mark the call as having been executed.\r\n            call.wasCalled = true;\r\n\r\n            // Compute the scalar (0 - 200) for the fee.\r\n            uint feeScalar = getCallFeeScalar(call.baseGasPrice, call.gasPrice);\r\n\r\n            // Log how much gas this call used.  EXTRA_CALL_GAS is a fixed\r\n            // amount that represents the gas usage of the commands that\r\n            // happen after this line.\r\n            call.gasUsed = (gasBefore - msg.gas + EXTRA_CALL_GAS);\r\n            call.gasCost = call.gasUsed * call.gasPrice;\r\n\r\n            // Now we need to pay the caller as well as keep fee.\r\n            // callerPayout -> call cost + 1%\r\n            // fee -> 1% of callerPayout\r\n            call.payout = call.gasCost * feeScalar * 101 / 10000;\r\n            call.fee = call.gasCost * feeScalar / 10000;\r\n\r\n            AccountingLib.deductFunds(self.gasBank, call.scheduledBy, call.payout + call.fee);\r\n\r\n            AccountingLib.addFunds(self.gasBank, msgSender, call.payout);\r\n            AccountingLib.addFunds(self.gasBank, owner, call.fee);\r\n    }\r\n\r\n    function getCallMaxCost(CallDatabase storage self, bytes32 callKey) constant returns (uint) {\r\n            /*\r\n             *  tx.gasprice * block.gaslimit\r\n             *  \r\n             */\r\n            // call cost + 2%\r\n            var call = self.calls[callKey];\r\n\r\n            uint gasCost = tx.gasprice * block.gaslimit;\r\n            uint feeScalar = getCallFeeScalar(call.baseGasPrice, tx.gasprice);\r\n\r\n            return gasCost * feeScalar * 102 / 10000;\r\n    }\r\n\r\n    function getCallFeeScalar(uint baseGasPrice, uint gasPrice) constant returns (uint) {\r\n            /*\r\n             *  Return a number between 0 - 200 to scale the fee based on\r\n             *  the gas price set for the calling transaction as compared\r\n             *  to the gas price of the scheduling transaction.\r\n             *\r\n             *  - number approaches zero as the transaction gas price goes\r\n             *  above the gas price recorded when the call was scheduled.\r\n             *\r\n             *  - the number approaches 200 as the transaction gas price\r\n             *  drops under the price recorded when the call was scheduled.\r\n             *\r\n             *  This encourages lower gas costs as the lower the gas price\r\n             *  for the executing transaction, the higher the payout to the\r\n             *  caller.\r\n             */\r\n            if (gasPrice > baseGasPrice) {\r\n                    return 100 * baseGasPrice / gasPrice;\r\n            }\r\n            else {\r\n                    return 200 - 100 * baseGasPrice / (2 * baseGasPrice - gasPrice);\r\n            }\r\n    }\r\n\r\n    /*\r\n     *  Call Scheduling API\r\n     */\r\n\r\n    // The result of `sha()` so that we can validate that people aren't\r\n    // looking up call data that failed to register.\r\n    bytes32 constant emptyDataHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n\r\n    function computeCallKey(address scheduledBy, address contractAddress, bytes4 abiSignature, bytes32 dataHash, uint targetBlock, uint8 gracePeriod, uint nonce) constant returns (bytes32) {\r\n            return sha3(scheduledBy, contractAddress, abiSignature, dataHash, targetBlock, gracePeriod, nonce);\r\n    }\r\n\r\n    // Ten minutes into the future.\r\n    uint constant MAX_BLOCKS_IN_FUTURE = 40;\r\n\r\n    event _CallScheduled(bytes32 indexed callKey);\r\n    function CallScheduled(bytes32 callKey) public {\r\n        _CallScheduled(callKey);\r\n    }\r\n    event _CallRejected(bytes32 indexed callKey, bytes15 reason);\r\n    function CallRejected(bytes32 callKey, bytes15 reason) public {\r\n        _CallRejected(callKey, reason);\r\n    }\r\n\r\n    function getCallWindowSize() public returns (uint) {\r\n        return CALL_WINDOW_SIZE;\r\n    }\r\n\r\n    function getMinimumGracePeriod() public returns (uint) {\r\n        return 4 * CALL_WINDOW_SIZE;\r\n    }\r\n\r\n    function scheduleCall(CallDatabase storage self, address schedulerAddress, address contractAddress, bytes4 abiSignature, bytes32 dataHash, uint targetBlock, uint8 gracePeriod, uint nonce) public returns (bytes15) {\r\n            /*\r\n             * Primary API for scheduling a call.  Prior to calling this\r\n             * the data should already have been registered through the\r\n             * `registerData` API.\r\n             */\r\n            bytes32 callKey = computeCallKey(schedulerAddress, contractAddress, abiSignature, dataHash, targetBlock, gracePeriod, nonce);\r\n\r\n            if (dataHash != emptyDataHash && self.data_registry[dataHash].length == 0) {\r\n                    // Don't allow registering calls if the data hash has\r\n                    // not actually been registered.  The only exception is\r\n                    // the *emptyDataHash*.\r\n                    return \"NO_DATA\";\r\n            }\r\n\r\n            if (targetBlock < block.number + MAX_BLOCKS_IN_FUTURE) {\r\n                    // Don't allow scheduling further than\r\n                    // MAX_BLOCKS_IN_FUTURE\r\n                    return \"TOO_SOON\";\r\n            }\r\n            Call storage call = self.calls[callKey];\r\n\r\n            if (call.contractAddress != 0x0) {\r\n                    return \"DUPLICATE\";\r\n            }\r\n\r\n            if (gracePeriod < getMinimumGracePeriod()) {\r\n                    return \"GRACE_TOO_SHORT\";\r\n            }\r\n\r\n            self.lastCallKey = callKey;\r\n\r\n            call.contractAddress = contractAddress;\r\n            call.scheduledBy = schedulerAddress;\r\n            call.nonce = nonce;\r\n            call.abiSignature = abiSignature;\r\n            call.dataHash = dataHash;\r\n            call.targetBlock = targetBlock;\r\n            call.gracePeriod = gracePeriod;\r\n            call.baseGasPrice = tx.gasprice;\r\n\r\n            // Put the call into the grove index.\r\n            GroveLib.insert(self.callIndex, callKey, int(call.targetBlock));\r\n\r\n            return 0x0;\r\n    }\r\n\r\n    event _CallCancelled(bytes32 indexed callKey);\r\n    function CallCancelled(bytes32 callKey) public {\r\n        _CallCancelled(callKey);\r\n    }\r\n\r\n    // Two minutes\r\n    uint constant MIN_CANCEL_WINDOW = 8;\r\n\r\n    function cancelCall(CallDatabase storage self, bytes32 callKey, address msgSender) public returns (bool) {\r\n            Call storage call = self.calls[callKey];\r\n            if (call.scheduledBy != msgSender) {\r\n                    // Nobody but the scheduler can cancel a call.\r\n                    return false;\r\n            }\r\n            if (call.wasCalled) {\r\n                    // No need to cancel a call that already was executed.\r\n                    return false;\r\n            }\r\n            if (call.targetBlock - MIN_CANCEL_WINDOW <= block.number) {\r\n                    // Call cannot be cancelled this close to execution.\r\n                    return false;\r\n            }\r\n            call.isCancelled = true;\r\n            return true;\r\n    }\r\n}\r\n\r\n\r\n/*\r\n *  Ethereum Alarm Service\r\n *  Version 0.4.0\r\n *\r\n *  address: 0x07307d0b136a79bac718f43388aed706389c4588\r\n */\r\ncontract Alarm {\r\n        /*\r\n         *  Constructor\r\n         *\r\n         *  - sets up relays\r\n         *  - configures the caller pool.\r\n         */\r\n        function Alarm() {\r\n                callDatabase.unauthorizedRelay = new Relay();\r\n                callDatabase.authorizedRelay = new Relay();\r\n\r\n                callDatabase.callerPool.freezePeriod = 80;\r\n                callDatabase.callerPool.rotationDelay = 80;\r\n                callDatabase.callerPool.overlapSize = 256;\r\n        }\r\n\r\n        ScheduledCallLib.CallDatabase callDatabase;\r\n\r\n        // The author (Piper Merriam) address.\r\n        address constant owner = 0xd3cda913deb6f67967b99d67acdfa1712c293601;\r\n\r\n        /*\r\n         *  Account Management API\r\n         */\r\n        function getAccountBalance(address accountAddress) constant public returns (uint) {\r\n                return callDatabase.gasBank.accountBalances[accountAddress];\r\n        }\r\n\r\n        function deposit() public {\r\n                deposit(msg.sender);\r\n        }\r\n\r\n        function deposit(address accountAddress) public {\r\n                /*\r\n                 *  Public API for depositing funds in a specified account.\r\n                 */\r\n                AccountingLib.deposit(callDatabase.gasBank, accountAddress, msg.value);\r\n                AccountingLib.Deposit(msg.sender, accountAddress, msg.value);\r\n        }\r\n\r\n        function withdraw(uint value) public {\r\n                /*\r\n                 *  Public API for withdrawing funds.\r\n                 */\r\n                if (AccountingLib.withdraw(callDatabase.gasBank, msg.sender, value)) {\r\n                        AccountingLib.Withdrawal(msg.sender, value);\r\n                }\r\n                else {\r\n                        AccountingLib.InsufficientFunds(msg.sender, value, callDatabase.gasBank.accountBalances[msg.sender]);\r\n                }\r\n        }\r\n\r\n        function() {\r\n                /*\r\n                 *  Fallback function that allows depositing funds just by\r\n                 *  sending a transaction.\r\n                 */\r\n                deposit(msg.sender);\r\n        }\r\n\r\n        /*\r\n         *  Scheduling Authorization API\r\n         */\r\n        function unauthorizedAddress() constant returns (address) {\r\n                return address(callDatabase.unauthorizedRelay);\r\n        }\r\n\r\n        function authorizedAddress() constant returns (address) {\r\n                return address(callDatabase.authorizedRelay);\r\n        }\r\n\r\n        function addAuthorization(address schedulerAddress) public {\r\n                ScheduledCallLib.addAuthorization(callDatabase, schedulerAddress, msg.sender);\r\n        }\r\n\r\n        function removeAuthorization(address schedulerAddress) public {\r\n                callDatabase.accountAuthorizations[sha3(schedulerAddress, msg.sender)] = false;\r\n        }\r\n\r\n        function checkAuthorization(address schedulerAddress, address contractAddress) constant returns (bool) {\r\n                return callDatabase.accountAuthorizations[sha3(schedulerAddress, contractAddress)];\r\n        }\r\n\r\n        /*\r\n         *  Caller bonding\r\n         */\r\n        function getMinimumBond() constant returns (uint) {\r\n                return ScheduledCallLib.getMinimumBond();\r\n        }\r\n\r\n        function depositBond() public {\r\n                ResourcePoolLib.addToBond(callDatabase.callerPool, msg.sender, msg.value);\r\n        }\r\n\r\n        function withdrawBond(uint value) public {\r\n                ResourcePoolLib.withdrawBond(callDatabase.callerPool, msg.sender, value, getMinimumBond());\r\n        }\r\n\r\n        function getBondBalance() constant returns (uint) {\r\n                return getBondBalance(msg.sender);\r\n        }\r\n\r\n        function getBondBalance(address callerAddress) constant returns (uint) {\r\n                return callDatabase.callerPool.bonds[callerAddress];\r\n        }\r\n\r\n\r\n        /*\r\n         *  Pool Management\r\n         */\r\n        function getGenerationForCall(bytes32 callKey) constant returns (uint) {\r\n                var call = callDatabase.calls[callKey];\r\n                return ResourcePoolLib.getGenerationForWindow(callDatabase.callerPool, call.targetBlock, call.targetBlock + call.gracePeriod);\r\n        }\r\n\r\n        function getGenerationSize(uint generationId) constant returns (uint) {\r\n                return callDatabase.callerPool.generations[generationId].members.length;\r\n        }\r\n\r\n        function getGenerationStartAt(uint generationId) constant returns (uint) {\r\n                return callDatabase.callerPool.generations[generationId].startAt;\r\n        }\r\n\r\n        function getGenerationEndAt(uint generationId) constant returns (uint) {\r\n                return callDatabase.callerPool.generations[generationId].endAt;\r\n        }\r\n\r\n        function getCurrentGenerationId() constant returns (uint) {\r\n                return ResourcePoolLib.getCurrentGenerationId(callDatabase.callerPool);\r\n        }\r\n\r\n        function getNextGenerationId() constant returns (uint) {\r\n                return ResourcePoolLib.getNextGenerationId(callDatabase.callerPool);\r\n        }\r\n\r\n        function isInPool() constant returns (bool) {\r\n                return ResourcePoolLib.isInPool(callDatabase.callerPool, msg.sender);\r\n        }\r\n\r\n        function isInPool(address callerAddress) constant returns (bool) {\r\n                return ResourcePoolLib.isInPool(callDatabase.callerPool, callerAddress);\r\n        }\r\n\r\n        function isInGeneration(uint generationId) constant returns (bool) {\r\n                return isInGeneration(msg.sender, generationId);\r\n        }\r\n\r\n        function isInGeneration(address callerAddress, uint generationId) constant returns (bool) {\r\n                return ResourcePoolLib.isInGeneration(callDatabase.callerPool, callerAddress, generationId);\r\n        }\r\n\r\n        /*\r\n         *  Pool Meta information\r\n         */\r\n        function getPoolFreezePeriod() constant returns (uint) {\r\n                return callDatabase.callerPool.freezePeriod;\r\n        }\r\n\r\n        function getPoolOverlapSize() constant returns (uint) {\r\n                return callDatabase.callerPool.overlapSize;\r\n        }\r\n\r\n        function getPoolRotationDelay() constant returns (uint) {\r\n                return callDatabase.callerPool.rotationDelay;\r\n        }\r\n\r\n        /*\r\n         *  Pool Membership\r\n         */\r\n        function canEnterPool() constant returns (bool) {\r\n                return ResourcePoolLib.canEnterPool(callDatabase.callerPool, msg.sender, getMinimumBond());\r\n        }\r\n\r\n        function canEnterPool(address callerAddress) constant returns (bool) {\r\n                return ResourcePoolLib.canEnterPool(callDatabase.callerPool, callerAddress, getMinimumBond());\r\n        }\r\n\r\n        function canExitPool() constant returns (bool) {\r\n                return ResourcePoolLib.canExitPool(callDatabase.callerPool, msg.sender);\r\n        }\r\n\r\n        function canExitPool(address callerAddress) constant returns (bool) {\r\n                return ResourcePoolLib.canExitPool(callDatabase.callerPool, callerAddress);\r\n        }\r\n\r\n        function enterPool() public {\r\n                uint generationId = ResourcePoolLib.enterPool(callDatabase.callerPool, msg.sender, getMinimumBond());\r\n                ResourcePoolLib.AddedToGeneration(msg.sender, generationId);\r\n        }\r\n\r\n        function exitPool() public {\r\n                uint generationId = ResourcePoolLib.exitPool(callDatabase.callerPool, msg.sender);\r\n                ResourcePoolLib.RemovedFromGeneration(msg.sender, generationId);\r\n        }\r\n\r\n        /*\r\n         *  Call Information API\r\n         */\r\n\r\n        function getLastCallKey() constant returns (bytes32) {\r\n                return callDatabase.lastCallKey;\r\n        }\r\n\r\n        /*\r\n         *  Getter methods for `Call` information\r\n         */\r\n        function getCallContractAddress(bytes32 callKey) constant returns (address) {\r\n                return ScheduledCallLib.getCallContractAddress(callDatabase, callKey);\r\n        }\r\n\r\n        function getCallScheduledBy(bytes32 callKey) constant returns (address) {\r\n                return ScheduledCallLib.getCallScheduledBy(callDatabase, callKey);\r\n        }\r\n\r\n        function getCallCalledAtBlock(bytes32 callKey) constant returns (uint) {\r\n                return ScheduledCallLib.getCallCalledAtBlock(callDatabase, callKey);\r\n        }\r\n\r\n        function getCallGracePeriod(bytes32 callKey) constant returns (uint) {\r\n                return ScheduledCallLib.getCallGracePeriod(callDatabase, callKey);\r\n        }\r\n\r\n        function getCallTargetBlock(bytes32 callKey) constant returns (uint) {\r\n                return ScheduledCallLib.getCallTargetBlock(callDatabase, callKey);\r\n        }\r\n\r\n        function getCallBaseGasPrice(bytes32 callKey) constant returns (uint) {\r\n                return ScheduledCallLib.getCallBaseGasPrice(callDatabase, callKey);\r\n        }\r\n\r\n        function getCallGasPrice(bytes32 callKey) constant returns (uint) {\r\n                return ScheduledCallLib.getCallGasPrice(callDatabase, callKey);\r\n        }\r\n\r\n        function getCallGasUsed(bytes32 callKey) constant returns (uint) {\r\n                return ScheduledCallLib.getCallGasUsed(callDatabase, callKey);\r\n        }\r\n\r\n        function getCallABISignature(bytes32 callKey) constant returns (bytes4) {\r\n                return ScheduledCallLib.getCallABISignature(callDatabase, callKey);\r\n        }\r\n\r\n        function checkIfCalled(bytes32 callKey) constant returns (bool) {\r\n                return ScheduledCallLib.checkIfCalled(callDatabase, callKey);\r\n        }\r\n\r\n        function checkIfSuccess(bytes32 callKey) constant returns (bool) {\r\n                return ScheduledCallLib.checkIfSuccess(callDatabase, callKey);\r\n        }\r\n\r\n        function checkIfCancelled(bytes32 callKey) constant returns (bool) {\r\n                return ScheduledCallLib.checkIfCancelled(callDatabase, callKey);\r\n        }\r\n\r\n        function getCallDataHash(bytes32 callKey) constant returns (bytes32) {\r\n                return ScheduledCallLib.getCallDataHash(callDatabase, callKey);\r\n        }\r\n\r\n        function getCallPayout(bytes32 callKey) constant returns (uint) {\r\n                return ScheduledCallLib.getCallPayout(callDatabase, callKey);\r\n        }\r\n\r\n        function getCallFee(bytes32 callKey) constant returns (uint) {\r\n                return ScheduledCallLib.getCallFee(callDatabase, callKey);\r\n        }\r\n\r\n        function getCallMaxCost(bytes32 callKey) constant returns (uint) {\r\n                return ScheduledCallLib.getCallMaxCost(callDatabase, callKey);\r\n        }\r\n\r\n        function getCallData(bytes32 callKey) constant returns (bytes) {\r\n                return callDatabase.data_registry[callDatabase.calls[callKey].dataHash];\r\n        }\r\n\r\n        /*\r\n         *  Data registration API\r\n         */\r\n        function registerData() public {\r\n                ScheduledCallLib.registerData(callDatabase, msg.data);\r\n                ScheduledCallLib.DataRegistered(callDatabase.lastDataHash);\r\n        }\r\n\r\n        function getLastDataHash() constant returns (bytes32) {\r\n                return callDatabase.lastDataHash;\r\n        }\r\n\r\n        function getLastDataLength() constant returns (uint) {\r\n                return callDatabase.lastDataLength;\r\n        }\r\n\r\n        function getLastData() constant returns (bytes) {\r\n                return callDatabase.lastData;\r\n        }\r\n\r\n        /*\r\n         *  Call execution API\r\n         */\r\n        function doCall(bytes32 callKey) public {\r\n                ScheduledCallLib.doCall(callDatabase, callKey, msg.sender);\r\n        }\r\n\r\n        /*\r\n         *  Call Scheduling API\r\n         */\r\n        function getMinimumGracePeriod() constant returns (uint) {\r\n                return ScheduledCallLib.getMinimumGracePeriod();\r\n        }\r\n\r\n        function scheduleCall(address contractAddress, bytes4 abiSignature, bytes32 dataHash, uint targetBlock) public {\r\n                /*\r\n                 *  Schedule call with gracePeriod defaulted to 255 and nonce\r\n                 *  defaulted to 0.\r\n                 */\r\n                scheduleCall(contractAddress, abiSignature, dataHash, targetBlock, 255, 0);\r\n        }\r\n\r\n        function scheduleCall(address contractAddress, bytes4 abiSignature, bytes32 dataHash, uint targetBlock, uint8 gracePeriod) public {\r\n                /*\r\n                 *  Schedule call with nonce defaulted to 0.\r\n                 */\r\n                scheduleCall(contractAddress, abiSignature, dataHash, targetBlock, gracePeriod, 0);\r\n        }\r\n\r\n        function scheduleCall(address contractAddress, bytes4 abiSignature, bytes32 dataHash, uint targetBlock, uint8 gracePeriod, uint nonce) public {\r\n                /*\r\n                 * Primary API for scheduling a call.  Prior to calling this\r\n                 * the data should already have been registered through the\r\n                 * `registerData` API.\r\n                 */\r\n                bytes15 reason = ScheduledCallLib.scheduleCall(callDatabase, msg.sender, contractAddress, abiSignature, dataHash, targetBlock, gracePeriod, nonce);\r\n                bytes32 callKey = ScheduledCallLib.computeCallKey(msg.sender, contractAddress, abiSignature, dataHash, targetBlock, gracePeriod, nonce);\r\n\r\n                if (reason != 0x0) {\r\n                        ScheduledCallLib.CallRejected(callKey, reason);\r\n                }\r\n                else {\r\n                        ScheduledCallLib.CallScheduled(callKey);\r\n                }\r\n        }\r\n\r\n        function cancelCall(bytes32 callKey) public {\r\n                if (ScheduledCallLib.cancelCall(callDatabase, callKey, address(msg.sender))) {\r\n                        ScheduledCallLib.CallCancelled(callKey);\r\n                }\r\n        }\r\n\r\n        /*\r\n         *  Next Call API\r\n         */\r\n        function getCallWindowSize() constant returns (uint) {\r\n                return ScheduledCallLib.getCallWindowSize();\r\n        }\r\n\r\n        function getGenerationIdForCall(bytes32 callKey) constant returns (uint) {\r\n                return ScheduledCallLib.getGenerationIdForCall(callDatabase, callKey);\r\n        }\r\n\r\n        function getDesignatedCaller(bytes32 callKey, uint blockNumber) constant returns (address) {\r\n                return ScheduledCallLib.getDesignatedCaller(callDatabase, callKey, blockNumber);\r\n        }\r\n\r\n        function getNextCall(uint blockNumber) constant returns (bytes32) {\r\n                return GroveLib.query(callDatabase.callIndex, \">=\", int(blockNumber));\r\n        }\r\n\r\n        function getNextCallSibling(bytes32 callKey) constant returns (bytes32) {\r\n                return GroveLib.getNextNode(callDatabase.callIndex, callKey);\r\n        }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"callKey\",\"type\":\"bytes32\"}],\"name\":\"getNextCallSibling\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"callKey\",\"type\":\"bytes32\"}],\"name\":\"getCallMaxCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"callKey\",\"type\":\"bytes32\"}],\"name\":\"getCallGasUsed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"callKey\",\"type\":\"bytes32\"}],\"name\":\"getCallContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractAddress\",\"type\":\"address\"},{\"name\":\"abiSignature\",\"type\":\"bytes4\"},{\"name\":\"dataHash\",\"type\":\"bytes32\"},{\"name\":\"targetBlock\",\"type\":\"uint256\"},{\"name\":\"gracePeriod\",\"type\":\"uint8\"}],\"name\":\"scheduleCall\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLastDataLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLastDataHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isInPool\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMinimumBond\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"callKey\",\"type\":\"bytes32\"}],\"name\":\"getCallTargetBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exitPool\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"callKey\",\"type\":\"bytes32\"}],\"name\":\"checkIfCalled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"generationId\",\"type\":\"uint256\"}],\"name\":\"getGenerationEndAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"callerAddress\",\"type\":\"address\"}],\"name\":\"getBondBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"callKey\",\"type\":\"bytes32\"}],\"name\":\"getCallGracePeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"schedulerAddress\",\"type\":\"address\"}],\"name\":\"addAuthorization\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLastCallKey\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"callKey\",\"type\":\"bytes32\"},{\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getDesignatedCaller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBondBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enterPool\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractAddress\",\"type\":\"address\"},{\"name\":\"abiSignature\",\"type\":\"bytes4\"},{\"name\":\"dataHash\",\"type\":\"bytes32\"},{\"name\":\"targetBlock\",\"type\":\"uint256\"},{\"name\":\"gracePeriod\",\"type\":\"uint8\"},{\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"scheduleCall\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authorizedAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canExitPool\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"callKey\",\"type\":\"bytes32\"}],\"name\":\"cancelCall\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPoolFreezePeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"schedulerAddress\",\"type\":\"address\"},{\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"checkAuthorization\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"callKey\",\"type\":\"bytes32\"}],\"name\":\"checkIfSuccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"depositBond\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"callKey\",\"type\":\"bytes32\"}],\"name\":\"getCallData\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"callerAddress\",\"type\":\"address\"},{\"name\":\"generationId\",\"type\":\"uint256\"}],\"name\":\"isInGeneration\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"callKey\",\"type\":\"bytes32\"}],\"name\":\"getCallBaseGasPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"callKey\",\"type\":\"bytes32\"}],\"name\":\"getCallGasPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"callKey\",\"type\":\"bytes32\"}],\"name\":\"getCallScheduledBy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"callerAddress\",\"type\":\"address\"}],\"name\":\"isInPool\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"callerAddress\",\"type\":\"address\"}],\"name\":\"canEnterPool\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"accountAddress\",\"type\":\"address\"}],\"name\":\"getAccountBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unauthorizedAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"schedulerAddress\",\"type\":\"address\"}],\"name\":\"removeAuthorization\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCallWindowSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getNextCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNextGenerationId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"generationId\",\"type\":\"uint256\"}],\"name\":\"isInGeneration\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"callKey\",\"type\":\"bytes32\"}],\"name\":\"getCallPayout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"callKey\",\"type\":\"bytes32\"}],\"name\":\"checkIfCancelled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"callerAddress\",\"type\":\"address\"}],\"name\":\"canExitPool\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentGenerationId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLastData\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"registerData\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"generationId\",\"type\":\"uint256\"}],\"name\":\"getGenerationSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMinimumGracePeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdrawBond\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canEnterPool\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPoolOverlapSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"callKey\",\"type\":\"bytes32\"}],\"name\":\"getCallABISignature\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"callKey\",\"type\":\"bytes32\"}],\"name\":\"getGenerationForCall\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"callKey\",\"type\":\"bytes32\"}],\"name\":\"getCallCalledAtBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"callKey\",\"type\":\"bytes32\"}],\"name\":\"getGenerationIdForCall\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPoolRotationDelay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"accountAddress\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractAddress\",\"type\":\"address\"},{\"name\":\"abiSignature\",\"type\":\"bytes4\"},{\"name\":\"dataHash\",\"type\":\"bytes32\"},{\"name\":\"targetBlock\",\"type\":\"uint256\"}],\"name\":\"scheduleCall\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"generationId\",\"type\":\"uint256\"}],\"name\":\"getGenerationStartAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"callKey\",\"type\":\"bytes32\"}],\"name\":\"getCallDataHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"callKey\",\"type\":\"bytes32\"}],\"name\":\"getCallFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"callKey\",\"type\":\"bytes32\"}],\"name\":\"doCall\",\"outputs\":[],\"type\":\"function\"},{\"inputs\":[],\"type\":\"constructor\"}]","ContractName":"Alarm","CompilerVersion":"v0.1.6+commit.d41f8b7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"AccountingLib:7de615d8a51746a9f10f72a593fb5b3718dc3d52;GroveLib:920c890a90db8fba7604864b0cf38ee667331323;ScheduledCallLib:5c3623dcef2d5168dbe3e8cc538788cd8912d898;StringLib:443b53559d337277373171280ec57029718203fb;ResourcePoolLib:d6bbd16eaa6ea3f71a458bffc64c0ca24fc8c58e","SwarmSource":""}]}