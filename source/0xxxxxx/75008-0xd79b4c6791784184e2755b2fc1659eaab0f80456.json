{"status":"1","message":"OK","result":[{"SourceCode":"contract HonestDice {\r\n\t\r\n\tevent Bet(address indexed user, uint blocknum, uint256 amount, uint chance);\r\n\tevent Won(address indexed user, uint256 amount, uint chance);\r\n\t\r\n\tstruct Roll {\r\n\t\tuint256 value;\r\n\t\tuint chance;\r\n\t\tuint blocknum;\r\n\t\tbytes32 secretHash;\r\n\t\tbytes32 serverSeed;\r\n\t}\r\n\t\r\n\tuint betsLocked;\r\n\taddress owner;\r\n\taddress feed;\t\t\t\t   \r\n\tuint256 minimumBet = 1 * 1000000000000000000; // 1 Ether\r\n\tuint256 constant maxPayout = 5; // 5% of bankroll\r\n\tuint constant seedCost = 100000000000000000; // This is the cost of supplyin the server seed, deduct it;\r\n\tmapping (address => Roll) rolls;\r\n\tuint constant timeout = 20; // 5 Minutes\r\n\t\r\n\tfunction HonestDice() {\r\n\t\towner = msg.sender;\r\n\t\tfeed = msg.sender;\r\n\t}\r\n\t\r\n\tfunction roll(uint chance, bytes32 secretHash) {\r\n\t\tif (chance < 1 || chance > 255 || msg.value < minimumBet || calcWinnings(msg.value, chance) > getMaxPayout() || betsLocked != 0) { \r\n\t\t\tmsg.sender.send(msg.value); // Refund\r\n\t\t\treturn;\r\n\t\t}\r\n\t\trolls[msg.sender] = Roll(msg.value, chance, block.number, secretHash, 0);\r\n\t\tBet(msg.sender, block.number, msg.value, chance);\r\n\t}\r\n\t\r\n\tfunction serverSeed(address user, bytes32 seed) {\r\n\t\t// The server calls this with a random seed\r\n\t\tif (msg.sender != feed) return;\r\n\t\tif (rolls[user].serverSeed != 0) return;\r\n\t\trolls[user].serverSeed = seed;\r\n\t}\r\n\t\r\n\tfunction hashTo256(bytes32 hash) constant returns (uint _r) {\r\n\t\t// Returns a number between 0 - 255 from a hash\r\n\t\treturn uint(hash) & 0xff;\r\n\t}\r\n\t\r\n\tfunction hash(bytes32 input) constant returns (uint _r) {\r\n\t\t// Simple sha3 hash. Not to be called via the blockchain\r\n\t\treturn uint(sha3(input));\r\n\t}\r\n\t\r\n\tfunction isReady() constant returns (bool _r) {\r\n\t\treturn isReadyFor(msg.sender);\r\n\t}\r\n\t\r\n\tfunction isReadyFor(address _user) constant returns (bool _r) {\r\n\t\tRoll r = rolls[_user];\r\n\t\tif (r.serverSeed == 0) return false;\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tfunction getResult(bytes32 secret) constant returns (uint _r) {\r\n\t\t// Get the result number of the roll\r\n\t\tRoll r = rolls[msg.sender];\r\n\t\tif (r.serverSeed == 0) return;\r\n\t\tif (sha3(secret) != r.secretHash) return;\r\n\t\treturn hashTo256(sha3(secret, r.serverSeed));\r\n\t}\r\n\t\r\n\tfunction didWin(bytes32 secret) constant returns (bool _r) {\r\n\t\t// Returns if the player won or not\r\n\t\tRoll r = rolls[msg.sender];\r\n\t\tif (r.serverSeed == 0) return;\r\n\t\tif (sha3(secret) != r.secretHash) return;\r\n\t\tif (hashTo256(sha3(secret, r.serverSeed)) < r.chance) { // Winner\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\tfunction calcWinnings(uint256 value, uint chance) constant returns (uint256 _r) {\r\n\t\t// 1% house edge\r\n\t\treturn (value * 99 / 100) * 256 / chance;\r\n\t}\r\n\t\r\n\tfunction getMaxPayout() constant returns (uint256 _r) {\r\n\t\treturn this.balance * maxPayout / 100;\r\n\t}\r\n\t\r\n\tfunction claim(bytes32 secret) {\r\n\t\tRoll r = rolls[msg.sender];\r\n\t\tif (r.serverSeed == 0) return;\r\n\t\tif (sha3(secret) != r.secretHash) return;\r\n\t\tif (hashTo256(sha3(secret, r.serverSeed)) < r.chance) { // Winner\r\n\t\t\tmsg.sender.send(calcWinnings(r.value, r.chance) - seedCost);\r\n\t\t\tWon(msg.sender, r.value, r.chance);\r\n\t\t}\r\n\t\t\r\n\t\tdelete rolls[msg.sender];\r\n\t}\r\n\t\r\n\tfunction canClaimTimeout() constant returns (bool _r) {\r\n\t\tRoll r = rolls[msg.sender];\r\n\t\tif (r.serverSeed != 0) return false;\r\n\t\tif (r.value <= 0) return false;\r\n\t\tif (block.number < r.blocknum + timeout) return false;\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tfunction claimTimeout() {\r\n\t\t// Get your monies back if the server isn't responding with a seed\r\n\t\tif (!canClaimTimeout()) return;\r\n\t\tRoll r = rolls[msg.sender];\r\n\t\tmsg.sender.send(r.value);\r\n\t\tdelete rolls[msg.sender];\r\n\t}\r\n\t\r\n\tfunction getMinimumBet() constant returns (uint _r) {\r\n\t\treturn minimumBet;\r\n\t}\r\n\t\r\n\tfunction getBankroll() constant returns (uint256 _r) {\r\n\t\treturn this.balance;\r\n\t}\r\n\t\r\n\tfunction getBetsLocked() constant returns (uint _r) {\r\n\t\treturn betsLocked;\r\n\t}\r\n\t\r\n\tfunction setFeed(address newFeed) {\r\n\t\tif (msg.sender != owner) return;\r\n\t\tfeed = newFeed;\r\n\t}\r\n\t\r\n\tfunction lockBetsForWithdraw() {\r\n\t\tif (msg.sender != owner) return;\r\n\t\tuint betsLocked = block.number;\r\n\t}\r\n\t\r\n\tfunction unlockBets() {\r\n\t\tif (msg.sender != owner) return;\r\n\t\tuint betsLocked = 0;\r\n\t}\r\n\t\r\n\tfunction withdraw(uint amount) {\r\n\t\tif (msg.sender != owner) return;\r\n\t\tif (betsLocked == 0 || block.number < betsLocked + 5760) return;\r\n\t\towner.send(amount);\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getBetsLocked\",\"outputs\":[{\"name\":\"_r\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"seed\",\"type\":\"bytes32\"}],\"name\":\"serverSeed\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"chance\",\"type\":\"uint256\"}],\"name\":\"calcWinnings\",\"outputs\":[{\"name\":\"_r\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBankroll\",\"outputs\":[{\"name\":\"_r\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimTimeout\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"secret\",\"type\":\"bytes32\"}],\"name\":\"didWin\",\"outputs\":[{\"name\":\"_r\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMaxPayout\",\"outputs\":[{\"name\":\"_r\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isReadyFor\",\"outputs\":[{\"name\":\"_r\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lockBetsForWithdraw\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newFeed\",\"type\":\"address\"}],\"name\":\"setFeed\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMinimumBet\",\"outputs\":[{\"name\":\"_r\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"chance\",\"type\":\"uint256\"},{\"name\":\"secretHash\",\"type\":\"bytes32\"}],\"name\":\"roll\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isReady\",\"outputs\":[{\"name\":\"_r\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlockBets\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"secret\",\"type\":\"bytes32\"}],\"name\":\"getResult\",\"outputs\":[{\"name\":\"_r\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"secret\",\"type\":\"bytes32\"}],\"name\":\"claim\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canClaimTimeout\",\"outputs\":[{\"name\":\"_r\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"hashTo256\",\"outputs\":[{\"name\":\"_r\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"input\",\"type\":\"bytes32\"}],\"name\":\"hash\",\"outputs\":[{\"name\":\"_r\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"inputs\":[],\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"blocknum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"chance\",\"type\":\"uint256\"}],\"name\":\"Bet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"chance\",\"type\":\"uint256\"}],\"name\":\"Won\",\"type\":\"event\"}]","ContractName":"HonestDice","CompilerVersion":"v0.1.1-2015-08-04-6ff4cd6","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}