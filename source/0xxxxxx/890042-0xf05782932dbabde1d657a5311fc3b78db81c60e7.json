{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\nCopyright (c) 2015-2016 Oraclize srl, Thomas Bertani\r\n*/\r\n\r\ncontract OraclizeAddrResolverI{\r\n    function getAddress() returns (address _addr);\r\n}\r\n\r\n\r\ncontract Oraclize {\r\n    \r\n    mapping (address => uint) reqc;\r\n    \r\n    address public cbAddress = 0x26588a9301b0428d95e6fc3a5024fce8bec12d51;\r\n    \r\n    byte constant proofType_NONE = 0x00;\r\n    byte constant proofType_TLSNotary = 0x10;\r\n    byte constant proofStorage_IPFS = 0x01;\r\n    \r\n    event Log1(address sender, bytes32 cid, uint timestamp, string datasource, string arg, uint gaslimit, byte proofType);\r\n    event Log2(address sender, bytes32 cid, uint timestamp, string datasource, string arg1, string arg2, uint gaslimit, byte proofType);\r\n    \r\n    address owner;\r\n    \r\n    function(){\r\n        msg.sender.send(msg.value);\r\n    }\r\n    \r\n    function Oraclize() {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    function addDSource(string dsname, uint multiplier) {\r\n        addDSource(dsname, 0x00, multiplier);\r\n    }\r\n\r\n    function addDSource(string dsname, byte proofType, uint multiplier) {\r\n        if ((msg.sender != owner)&&(msg.sender != cbAddress)) throw;\r\n        bytes32 dsname_hash = sha3(dsname, proofType);\r\n        dsources[dsources.length++] = dsname_hash;\r\n        price_multiplier[dsname_hash] = multiplier;\r\n    }\r\n\r\n    modifier costs(string datasource, uint gaslimit) {\r\n        uint price = getPrice(datasource, gaslimit, msg.sender);\r\n        if (msg.value >= price){\r\n            address(0xf65b3b60010d57d0bb8478aa6ced15fe720621b4).send(price);\r\n            uint diff = msg.value - price;\r\n            if (diff > 0) msg.sender.send(diff);\r\n            _\r\n        } else throw;\r\n    }\r\n\r\n    mapping (address => byte) addr_proofType;\r\n    uint baseprice;\r\n    mapping (bytes32 => uint) price;\r\n    mapping (bytes32 => uint) price_multiplier;\r\n    bytes32[] dsources;\r\n\r\n    mapping (bytes32 => bool) coupons;\r\n    bytes32 coupon;\r\n    \r\n    function createCoupon(string _code){\r\n        if ((msg.sender != owner)&&(msg.sender != cbAddress)) throw;\r\n        coupons[sha3(_code)] = true;\r\n    }\r\n    \r\n    function deleteCoupon(string _code){\r\n        if ((msg.sender != owner)&&(msg.sender != cbAddress)) throw;\r\n        coupons[sha3(_code)] = false;\r\n    }\r\n    \r\n    function useCoupon(string _coupon){\r\n        coupon = sha3(_coupon);\r\n    }\r\n    \r\n    function setProofType(byte _proofType){\r\n        addr_proofType[msg.sender] = _proofType;\r\n    }\r\n    \r\n    function getPrice(string _datasource) public returns (uint _dsprice) {\r\n        return getPrice(_datasource, msg.sender);\r\n    }\r\n    \r\n    function getPrice(string _datasource, uint _gaslimit) public returns (uint _dsprice) {\r\n        return getPrice(_datasource, _gaslimit, msg.sender);\r\n    }\r\n    \r\n    function getPrice(string _datasource, address _addr) private returns (uint _dsprice) {\r\n        return getPrice(_datasource, 200000, _addr);\r\n    }\r\n    \r\n    uint gasprice  = 50000000000;\r\n    \r\n    function setGasPrice(uint newgasprice){\r\n        if ((msg.sender != owner)&&(msg.sender != cbAddress)) throw;\r\n        gasprice = newgasprice;\r\n    }\r\n    \r\n    function getPrice(string _datasource, uint _gaslimit, address _addr) private returns (uint _dsprice) {\r\n        if ((_gaslimit <= 200000)&&(reqc[_addr] == 0)) return 0;\r\n        if ((coupon != 0)&&(coupons[coupon] == true)) return 0;\r\n        _dsprice = price[sha3(_datasource, addr_proofType[_addr])];\r\n        _dsprice += _gaslimit*gasprice;\r\n        return _dsprice;\r\n    }\r\n    \r\n    function setBasePrice(uint new_baseprice){ //0.001 usd in ether\r\n        if ((msg.sender != owner)&&(msg.sender != cbAddress)) throw;\r\n        baseprice = new_baseprice;\r\n        for (uint i=0; i<dsources.length; i++) price[dsources[i]] = new_baseprice*price_multiplier[dsources[i]];\r\n    }\r\n\r\n    function setBasePrice(uint new_baseprice, bytes proofID){ //0.001 usd in ether\r\n        if ((msg.sender != owner)&&(msg.sender != cbAddress)) throw;\r\n        baseprice = new_baseprice;\r\n        for (uint i=0; i<dsources.length; i++) price[dsources[i]] = new_baseprice*price_multiplier[dsources[i]];\r\n    }\r\n    \r\n    function query(string _datasource, string _arg) returns (bytes32 _id){\r\n        return query1(0, _datasource, _arg, 200000);\r\n    }\r\n    \r\n    function query1(string _datasource, string _arg) returns (bytes32 _id){\r\n        return query1(0, _datasource, _arg, 200000);\r\n    }\r\n    \r\n    function query2(string _datasource, string _arg1, string _arg2) returns (bytes32 _id){\r\n        return query2(0, _datasource, _arg1, _arg2, 200000);\r\n    }\r\n    \r\n    function query(uint _timestamp, string _datasource, string _arg) returns (bytes32 _id){\r\n        return query1(_timestamp, _datasource, _arg, 200000);\r\n    }\r\n    \r\n    function query1(uint _timestamp, string _datasource, string _arg) returns (bytes32 _id){\r\n        return query1(_timestamp, _datasource, _arg, 200000);\r\n    }\r\n    \r\n    function query2(uint _timestamp, string _datasource, string _arg1, string _arg2) returns (bytes32 _id){\r\n        return query2(_timestamp, _datasource, _arg1, _arg2, 200000);\r\n    }\r\n    \r\n    function query(uint _timestamp, string _datasource, string _arg, uint _gaslimit) returns (bytes32 _id){\r\n        return query1(_timestamp, _datasource, _arg, _gaslimit);\r\n    }\r\n    \r\n    function query1(uint _timestamp, string _datasource, string _arg, uint _gaslimit) costs(_datasource, _gaslimit) returns (bytes32 _id){\r\n\tif ((_timestamp > now+3600*24*60)||(_gaslimit > 3141592)) throw;\r\n        _id = sha3(uint(this)+uint(msg.sender)+reqc[msg.sender]);\r\n        reqc[msg.sender]++;\r\n        Log1(msg.sender, _id, _timestamp, _datasource, _arg, _gaslimit, addr_proofType[msg.sender]);\r\n        return _id;\r\n    }\r\n    \r\n    function query2(uint _timestamp, string _datasource, string _arg1, string _arg2, uint _gaslimit) costs(_datasource, _gaslimit) returns (bytes32 _id){\r\n\tif ((_timestamp > now+3600*24*60)||(_gaslimit > 3141592)) throw;\r\n        _id = sha3(uint(this)+uint(msg.sender)+reqc[msg.sender]);\r\n        reqc[msg.sender]++;\r\n        Log2(msg.sender, _id, _timestamp, _datasource, _arg1, _arg2, _gaslimit, addr_proofType[msg.sender]);\r\n        return _id;\r\n    }\r\n    \r\n    function query_withGasLimit(uint _timestamp, string _datasource, string _arg, uint _gaslimit) returns (bytes32 _id){\r\n        return query(_timestamp, _datasource, _arg, _gaslimit);\r\n    }\r\n    \r\n    function query1_withGasLimit(uint _timestamp, string _datasource, string _arg, uint _gaslimit) returns (bytes32 _id){\r\n        return query1(_timestamp, _datasource, _arg, _gaslimit);\r\n    }\r\n    \r\n    function query2_withGasLimit(uint _timestamp, string _datasource, string _arg1, string _arg2, uint _gaslimit) returns (bytes32 _id){\r\n        return query2(_timestamp, _datasource, _arg1, _arg2, _gaslimit);\r\n    }                      \r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_code\",\"type\":\"string\"}],\"name\":\"deleteCoupon\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"name\":\"_datasource\",\"type\":\"string\"},{\"name\":\"_arg\",\"type\":\"string\"}],\"name\":\"query1\",\"outputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_datasource\",\"type\":\"string\"},{\"name\":\"_gaslimit\",\"type\":\"uint256\"}],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"_dsprice\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_datasource\",\"type\":\"string\"},{\"name\":\"_arg\",\"type\":\"string\"}],\"name\":\"query1\",\"outputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_datasource\",\"type\":\"string\"}],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"_dsprice\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"name\":\"_datasource\",\"type\":\"string\"},{\"name\":\"_arg\",\"type\":\"string\"},{\"name\":\"_gaslimit\",\"type\":\"uint256\"}],\"name\":\"query1\",\"outputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_coupon\",\"type\":\"string\"}],\"name\":\"useCoupon\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_code\",\"type\":\"string\"}],\"name\":\"createCoupon\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proofType\",\"type\":\"bytes1\"}],\"name\":\"setProofType\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"name\":\"_datasource\",\"type\":\"string\"},{\"name\":\"_arg\",\"type\":\"string\"},{\"name\":\"_gaslimit\",\"type\":\"uint256\"}],\"name\":\"query1_withGasLimit\",\"outputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"name\":\"_datasource\",\"type\":\"string\"},{\"name\":\"_arg1\",\"type\":\"string\"},{\"name\":\"_arg2\",\"type\":\"string\"}],\"name\":\"query2\",\"outputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_baseprice\",\"type\":\"uint256\"},{\"name\":\"proofID\",\"type\":\"bytes\"}],\"name\":\"setBasePrice\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"name\":\"_datasource\",\"type\":\"string\"},{\"name\":\"_arg1\",\"type\":\"string\"},{\"name\":\"_arg2\",\"type\":\"string\"},{\"name\":\"_gaslimit\",\"type\":\"uint256\"}],\"name\":\"query2\",\"outputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_datasource\",\"type\":\"string\"},{\"name\":\"_arg\",\"type\":\"string\"}],\"name\":\"query\",\"outputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"name\":\"_datasource\",\"type\":\"string\"},{\"name\":\"_arg1\",\"type\":\"string\"},{\"name\":\"_arg2\",\"type\":\"string\"},{\"name\":\"_gaslimit\",\"type\":\"uint256\"}],\"name\":\"query2_withGasLimit\",\"outputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dsname\",\"type\":\"string\"},{\"name\":\"multiplier\",\"type\":\"uint256\"}],\"name\":\"addDSource\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"name\":\"_datasource\",\"type\":\"string\"},{\"name\":\"_arg\",\"type\":\"string\"}],\"name\":\"query\",\"outputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"name\":\"_datasource\",\"type\":\"string\"},{\"name\":\"_arg\",\"type\":\"string\"},{\"name\":\"_gaslimit\",\"type\":\"uint256\"}],\"name\":\"query\",\"outputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dsname\",\"type\":\"string\"},{\"name\":\"proofType\",\"type\":\"bytes1\"},{\"name\":\"multiplier\",\"type\":\"uint256\"}],\"name\":\"addDSource\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newgasprice\",\"type\":\"uint256\"}],\"name\":\"setGasPrice\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cbAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"name\":\"_datasource\",\"type\":\"string\"},{\"name\":\"_arg\",\"type\":\"string\"},{\"name\":\"_gaslimit\",\"type\":\"uint256\"}],\"name\":\"query_withGasLimit\",\"outputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_baseprice\",\"type\":\"uint256\"}],\"name\":\"setBasePrice\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_datasource\",\"type\":\"string\"},{\"name\":\"_arg1\",\"type\":\"string\"},{\"name\":\"_arg2\",\"type\":\"string\"}],\"name\":\"query2\",\"outputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"type\":\"function\"},{\"inputs\":[],\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cid\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"datasource\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"arg\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"gaslimit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"proofType\",\"type\":\"bytes1\"}],\"name\":\"Log1\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cid\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"datasource\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"arg1\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"arg2\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"gaslimit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"proofType\",\"type\":\"bytes1\"}],\"name\":\"Log2\",\"type\":\"event\"}]","ContractName":"Oraclize","CompilerVersion":"v0.2.0-2016-01-20-67c855c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}