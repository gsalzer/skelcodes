{"status":"1","message":"OK","result":[{"SourceCode":"contract Roulette {\r\n    \r\n    // Global variables\r\n    string sWelcome;\r\n    /* Remark: \r\n     *  Private Seed for generateRand(), \r\n     *  since this is nowhere visibile, \r\n     *  it's very hard to guess.\r\n     */\r\n    uint privSeed; \r\n    struct Casino {\r\n        address addr;\r\n        uint balance;\r\n        uint bettingLimitMin;\r\n        uint bettingLimitMax;\r\n    }\r\n    Casino casino;\r\n\r\n    // Init Constructor\r\n    function Roulette() {\r\n        sWelcome = \"\\n-----------------------------\\n     Welcome to Roulette \\n Got coins? Then come on in! \\n-----------------------------\\n\";\r\n        privSeed = 1;\r\n        casino.addr = msg.sender;\r\n        casino.balance = 0;\r\n        casino.bettingLimitMin = 1*10**18;\r\n        casino.bettingLimitMax = 10*10**18;\r\n    }\r\n    \r\n    function welcome() constant returns (string) {\r\n        return sWelcome;\r\n    }\r\n    function casinoBalance() constant returns (uint) {\r\n        return casino.balance;\r\n    }\r\n    function casinoDeposit() {\r\n        if (msg.sender == casino.addr)\r\n            casino.balance += msg.value;\r\n        else \r\n            msg.sender.send(msg.value);\r\n    }\r\n    function casinoWithdraw(uint amount) {\r\n        if (msg.sender == casino.addr && amount <= casino.balance) {\r\n            casino.balance -= amount;\r\n            casino.addr.send(amount);\r\n        }\r\n    }\r\n    \r\n    // Bet on Number\r\n    function betOnNumber(uint number) public returns (string) {\r\n        // Input Handling\r\n        address addr = msg.sender;\r\n        uint betSize = msg.value;\r\n        if (betSize < casino.bettingLimitMin || betSize > casino.bettingLimitMax) {\r\n            // Return Funds\r\n            if (betSize >= 1*10**18)\r\n                addr.send(betSize);\r\n            return \"Please choose an amount within between 1 and 10 ETH\";\r\n        }\r\n        if (betSize * 36 > casino.balance) {\r\n            // Return Funds\r\n            addr.send(betSize);\r\n            return \"Casino has insufficient funds for this bet amount\";\r\n        }\r\n        if (number < 0 || number > 36) {\r\n            // Return Funds\r\n            addr.send(betSize);\r\n            return \"Please choose a number between 0 and 36\";\r\n        }\r\n        // Roll the wheel\r\n        privSeed += 1;\r\n        uint rand = generateRand();\r\n        if (number == rand) {\r\n            // Winner winner chicken dinner!\r\n            uint winAmount = betSize * 36;\r\n            casino.balance -= (winAmount - betSize);\r\n            addr.send(winAmount);\r\n            return \"Winner winner chicken dinner!\";\r\n        }\r\n        else {\r\n            casino.balance += betSize;\r\n            return \"Wrong number.\";\r\n        }\r\n    }\r\n    \r\n    // Bet on Color\r\n    function betOnColor(uint color) public returns (string) {\r\n        // Input Handling\r\n        address addr = msg.sender;\r\n        uint betSize = msg.value;\r\n        if (betSize < casino.bettingLimitMin || betSize > casino.bettingLimitMax) {\r\n            // Return Funds\r\n            if (betSize >= 1*10**18)\r\n                addr.send(betSize);\r\n            return \"Please choose an amount within between 1 and 10 ETH\";\r\n        }\r\n        if (betSize * 2 > casino.balance) {\r\n            // Return Funds\r\n            addr.send(betSize);\r\n            return \"Casino has insufficient funds for this bet amount\";\r\n        }\r\n        if (color != 0 && color != 1) {\r\n            // Return Funds\r\n            addr.send(betSize);\r\n            return \"Please choose either '0' = red or '1' = black as a color\";\r\n        }\r\n        // Roll the wheel\r\n        privSeed += 1;\r\n        uint rand = generateRand();\r\n        uint randC = (rand + 1) % 2;\r\n        // Win\r\n        if (rand != 0 && (randC == color)) {\r\n            uint winAmount = betSize * 2;\r\n            casino.balance -= (winAmount - betSize);\r\n            addr.send(winAmount);\r\n            return \"Win! Good job.\";\r\n        }\r\n        else {\r\n            casino.balance += betSize;\r\n            return \"Wrong color.\";           \r\n        }\r\n    }\r\n    \r\n    // Returns a pseudo Random number.\r\n    function generateRand() private returns (uint) { \r\n        // Seeds\r\n        privSeed = (privSeed*3 + 1) / 2;\r\n        privSeed = privSeed % 10**9;\r\n        uint number = block.number; // ~ 10**5 ; 60000\r\n        uint diff = block.difficulty; // ~ 2 Tera = 2*10**12; 1731430114620\r\n        uint time = block.timestamp; // ~ 2 Giga = 2*10**9; 1439147273\r\n        uint gas = block.gaslimit; // ~ 3 Mega = 3*10**6\r\n        // Rand Number in Percent\r\n        uint total = privSeed + number + diff + time + gas;\r\n        uint rand = total % 37;\r\n        return rand;\r\n    }\r\n\r\n    // Function to recover the funds on the contract\r\n    function kill() {\r\n        if (msg.sender == casino.addr) \r\n            suicide(casino.addr);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"casinoBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"casinoWithdraw\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"betOnNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"casinoDeposit\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"color\",\"type\":\"uint256\"}],\"name\":\"betOnColor\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"welcome\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"type\":\"function\"},{\"inputs\":[],\"type\":\"constructor\"}]","ContractName":"Roulette","CompilerVersion":"v0.1.1+commit.6ff4cd6","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}