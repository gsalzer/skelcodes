{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\nthis smartcontract used to store documents text on the Ethereum blockchain\r\n*/\r\n\r\ncontract ProofOfExistence{\r\n\r\n    /* ---- Public variables: */\r\n    string public created;\r\n    address public manager; // account that adds info to this smartcontract\r\n    uint256 public index;   // record's numbers and number of records\r\n    mapping (uint256 => Doc) public docs; // index => Doc\r\n    // to get Doc obj call ProofOfExistence.docs(index);\r\n\r\n    /* ---- Stored document structure: */\r\n\r\n    struct Doc {\r\n        string publisher; // publisher's email\r\n        uint256 publishedOnUnixTime; // block timestamp (block.timestamp)\r\n        uint256 publishedInBlockNumber; // block.number\r\n        string text; // text of the document\r\n    }\r\n\r\n    /* ---- Constructor: */\r\n\r\n    function ProofOfExistence(){\r\n        manager = msg.sender;\r\n        created = \"cryptonomica.net\";\r\n        index = 0; //\r\n    }\r\n\r\n    /* ---- Event:  */\r\n    // This generates a public event on the blockchain that will notify clients. In 'Mist' SmartContract page enable 'Watch contract events'\r\n    event DocumentAdded(uint256 indexed index,\r\n                        string indexed publisher,\r\n                        uint256 publishedOnUnixTime,\r\n                        string indexed text);\r\n\r\n    /* ----- Main method: */\r\n\r\n    function addDoc(string _publisher, string _text) returns (uint256) {\r\n        // authorization\r\n        if (msg.sender != manager) throw;\r\n        // document number\r\n        index += 1;\r\n        // add document data:\r\n        docs[index] = Doc(_publisher, now, block.number, _text);\r\n        // add event\r\n        DocumentAdded(index,\r\n                      docs[index].publisher,\r\n                      docs[index].publishedOnUnixTime,\r\n                      docs[index].text);\r\n        // return number of the stored document\r\n        return index;\r\n    }\r\n\r\n    /* ---- Utilities: */\r\n\r\n    function () {\r\n        // This function gets executed if a\r\n        // transaction with invalid data is sent to\r\n        // the contract or just ether without data.\r\n        // We revert the send so that no-one\r\n        // accidentally loses money when using the\r\n        // contract.\r\n        throw;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"docs\",\"outputs\":[{\"name\":\"publisher\",\"type\":\"string\"},{\"name\":\"publishedOnUnixTime\",\"type\":\"uint256\"},{\"name\":\"publishedInBlockNumber\",\"type\":\"uint256\"},{\"name\":\"text\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"index\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"created\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_publisher\",\"type\":\"string\"},{\"name\":\"_text\",\"type\":\"string\"}],\"name\":\"addDoc\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"inputs\":[],\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"publisher\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"publishedOnUnixTime\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"text\",\"type\":\"string\"}],\"name\":\"DocumentAdded\",\"type\":\"event\"}]","ContractName":"ProofOfExistence","CompilerVersion":"v0.3.5-2016-07-01-48238c9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}