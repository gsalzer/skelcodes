{"status":"1","message":"OK","result":[{"SourceCode":"//\r\n// This file is part of TrustEth.\r\n// Copyright (c) 2016 Jacob Dawid <jacob@omg-it.works>\r\n//\r\n// TrustEth is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as\r\n// published by the Free Software Foundation, either version 3 of the\r\n// License, or (at your option) any later version.\r\n//\r\n// TrustEth is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public\r\n// License along with TrustEth.\r\n// If not, see <http://www.gnu.org/licenses/>.\r\n//\r\n\r\ncontract TrustEth {\r\n    // A registered transaction initiated by the seller.\r\n    struct Transaction {\r\n      // Supplied by the seller (Step 1).\r\n      uint sellerId; // The seller id of the seller who initiated this transaction and is about to receive the payment.\r\n      uint amount; // The amount to pay to the seller for this transaction.\r\n\r\n      // Filled out by the contract when transaction has been paid (Step 2).\r\n      address paidWithAddress; // The address of the buyer issueing the payment.\r\n      bool paid; // Flag that states this transaction has already been paid.\r\n   \r\n      // Rating supplied by the buyer (Step 3, optional).\r\n      uint ratingValue; // Seller rating supplied by buyer.\r\n      string ratingComment; // Comment on this transaction supplied by the buyer.\r\n      bool rated; // Flag that states this transaction has already been rated.\r\n    }\r\n\r\n    // A registered seller on this contract.\r\n    // Registered sellers can put up transactions and can be rated\r\n    // by those who paid the transactions.\r\n    struct Seller {\r\n      // Seller information\r\n      address etherAddress; // The sellers ether address.\r\n      uint[] ratingIds; // The ids of the rating linked with this seller.\r\n      uint[] transactionIds; // The ids of transactions linked with this seller.\r\n      \r\n      // Statistics about the seller\r\n      uint averageRating; // Average value of ratings.\r\n      uint transactionsPaid; // How many transactions have been paid?\r\n      uint transactionsRated; // How many transactions have been rated?\r\n    }\r\n\r\n    Transaction[] public transactions; // All transactions.\r\n    Seller[] public sellers; // All sellers\r\n\r\n    // This mapping makes it easier to loopkup the seller that belongs to a certain address.\r\n    mapping (address => uint) sellerLookup;\r\n\r\n    // The sole contract owner.\r\n    address public owner;\r\n\r\n    // Configured fees.\r\n    uint public registrationFee;\r\n    uint public transactionFee;\r\n\r\n    // Only owner administration flag.\r\n    modifier onlyowner { if (msg.sender == owner) _ }\r\n\r\n    // Administrative functions.\r\n    function TrustEth() {\r\n      owner = msg.sender;\r\n      \r\n      // Index 0 is a marker for invalid ids.\r\n      sellers.length = 1;\r\n      transactions.length = 1;\r\n\r\n      // Initialize fees.\r\n      registrationFee = 1 ether;\r\n      transactionFee = 50 finney;\r\n    }\r\n\r\n    function retrieveFunds() onlyowner {\r\n      owner.send(this.balance);\r\n    }\r\n\r\n    function adjustRegistrationFee(uint fee) onlyowner {\r\n      registrationFee = fee;\r\n    }\r\n\r\n    function adjustTransactionFee(uint fee) onlyowner {\r\n      transactionFee = fee;\r\n    }\r\n\r\n    function setOwner(address _owner) onlyowner {\r\n      owner = _owner;\r\n    }\r\n\r\n    // Fallback function, do not accepts payments made directly to this contract address.\r\n    function() {\r\n      throw;\r\n    }\r\n\r\n    // Make a donation and acknowledge our development efforts. Thank you!\r\n    function donate() {\r\n      // That's awesome. Thank you.\r\n      return;\r\n    }\r\n\r\n    // Register your seller address for a small fee to prevent flooding and\r\n    // and recurring address recreation.\r\n    function register() {\r\n      // Retrieve the amount of ethers that have been sent along.\r\n      uint etherPaid = msg.value;\r\n      \r\n      if(etherPaid < registrationFee) { throw; }\r\n\r\n      // Create a new seller.\r\n      uint sellerId = sellers.length;\r\n      sellers.length += 1;\r\n\r\n      // Store seller details and bind to address.\r\n      sellers[sellerId].etherAddress = msg.sender;\r\n      sellers[sellerId].averageRating = 0;\r\n\r\n      // Save sellerId in lookup mapping.\r\n      sellerLookup[msg.sender] = sellerId;\r\n    }\r\n\r\n\r\n    // Workflow\r\n\r\n    // As a seller, put up a transaction.\r\n    function askForEther(uint amount) {\r\n      // Lookup the seller.\r\n      uint sellerId = sellerLookup[msg.sender];\r\n\r\n      // Check whether the seller is a registered seller.\r\n      if(sellerId == 0) { throw; }\r\n      \r\n      // Create a new invoice.\r\n      uint transactionId = transactions.length;\r\n      transactions.length += 1;\r\n\r\n      // Fill out seller info.\r\n      transactions[transactionId].sellerId = sellerId;\r\n      transactions[transactionId].amount = amount;\r\n\r\n      // -> Pass transactionId to customer now.\r\n    }\r\n\r\n    // As a buyer, pay a transaction.\r\n    function payEther(uint transactionId) {\r\n      // Bail out in case the transaction id is invalid.      \r\n      if(transactionId < 1 || transactionId >= transactions.length) { throw; }\r\n\r\n      // Retrieve the amount of ethers that have been sent along.\r\n      uint etherPaid = msg.value;\r\n      uint etherAskedFor = transactions[transactionId].amount;\r\n      uint etherNeeded = etherAskedFor + transactionFee;\r\n\r\n      // If the amount of ethers does not suffice to pay, bail out :(      \r\n      if(etherPaid < etherNeeded) { throw; }\r\n\r\n      // Calculate how much has been overpaid.\r\n      uint payback = etherPaid - etherNeeded;\r\n      // ..and kindly return the payback :)\r\n      msg.sender.send(payback);\r\n\r\n      // Now take the remaining amount and send to the seller.\r\n      sellers[transactions[transactionId].sellerId].etherAddress.send(etherAskedFor);\r\n      // Rise transactions paid counter.\r\n      sellers[transactions[transactionId].sellerId].transactionsPaid += 1;\r\n\r\n      // Overpaid ethers send back, seller has been paid, now we're done.\r\n      // Mark the transaction as finished.\r\n\r\n      // Flag the invoice as paid.\r\n      transactions[transactionId].paid = true;\r\n      // Save the payers address so he is eligible to rate.\r\n      transactions[transactionId].paidWithAddress = msg.sender;\r\n    \r\n      // -> Now the transaction can be rated by the address that has paid it.\r\n    }\r\n\r\n    // As a buyer, rate a transaction.\r\n    function rate(uint transactionId, uint ratingValue, string ratingComment) {\r\n      // Only the address that has paid the transaction may rate it.\r\n      if(transactions[transactionId].paidWithAddress != msg.sender) { throw; }\r\n      // Bail out in case the transaction id is invalid.        \r\n      if(transactionId < 1 || transactionId >= transactions.length) { throw; }\r\n      // Oops, transaction has already been rated!\r\n      if(transactions[transactionId].rated) { throw; }\r\n      // Oops, transaction has not been paid yet and cannot be rated!\r\n      if(!transactions[transactionId].paid) { throw; }\r\n      // Rating range is from 1 (incl.) to 10 (incl.).\r\n      if(ratingValue < 1 || ratingValue > 10) { throw; }\r\n\r\n      transactions[transactionId].ratingValue = ratingValue;\r\n      transactions[transactionId].ratingComment = ratingComment;\r\n      transactions[transactionId].rated = true;\r\n      \r\n      uint previousTransactionCount = sellers[transactions[transactionId].sellerId].transactionsRated;\r\n      uint previousTransactionRatingSum = sellers[transactions[transactionId].sellerId].averageRating * previousTransactionCount;\r\n\r\n      sellers[transactions[transactionId].sellerId].averageRating = (previousTransactionRatingSum + ratingValue) / (previousTransactionCount + 1);\r\n      sellers[transactions[transactionId].sellerId].transactionsRated += 1;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registrationFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"payEther\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"register\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"adjustTransactionFee\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"retrieveFunds\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"},{\"name\":\"ratingValue\",\"type\":\"uint256\"},{\"name\":\"ratingComment\",\"type\":\"string\"}],\"name\":\"rate\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transactions\",\"outputs\":[{\"name\":\"sellerId\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"paidWithAddress\",\"type\":\"address\"},{\"name\":\"paid\",\"type\":\"bool\"},{\"name\":\"ratingValue\",\"type\":\"uint256\"},{\"name\":\"ratingComment\",\"type\":\"string\"},{\"name\":\"rated\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"adjustRegistrationFee\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transactionFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sellers\",\"outputs\":[{\"name\":\"etherAddress\",\"type\":\"address\"},{\"name\":\"averageRating\",\"type\":\"uint256\"},{\"name\":\"transactionsPaid\",\"type\":\"uint256\"},{\"name\":\"transactionsRated\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"askForEther\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"donate\",\"outputs\":[],\"type\":\"function\"},{\"inputs\":[],\"type\":\"constructor\"}]","ContractName":"TrustEth","CompilerVersion":"v0.2.1-2016-02-11-c6c3c78","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}