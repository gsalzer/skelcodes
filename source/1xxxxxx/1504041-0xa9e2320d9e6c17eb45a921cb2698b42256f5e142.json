{"status":"1","message":"OK","result":[{"SourceCode":"contract EthDig\r\n{\r\n    uint constant LifeTime = 30;\r\n    \r\n    address Owner = msg.sender;\r\n    address OutputAddress = msg.sender;\r\n    \r\n    uint64 Coef1=723;\r\n    uint64 Coef2=41665;\r\n    uint64 Coef3=600000;\r\n    \r\n    uint public ContributedAmount;\r\n    uint ContributedLimit = 10 ether;\r\n    \r\n    uint public CashForHardwareReturn;\r\n    uint public FreezedCash;\r\n    \r\n    uint16 UsersLength = 0;\r\n    mapping (uint16 => User) Users;\r\n    struct User{\r\n        address Address;\r\n        uint16 ContributionsLength;\r\n        mapping (uint16 => Contribution) Contributions;\r\n    }\r\n    struct Contribution{\r\n        uint CashInHarware;\r\n        uint CashFreezed;\r\n        \r\n        uint16 ProfitPercent;\r\n        uint NeedPayByDay;\r\n        \r\n        bool ReuseCashInHarware;\r\n        \r\n        uint DateCreated;\r\n        uint DateLastCheck;\r\n        uint AlreadyPaid;\r\n        \r\n        bool ReturnedHardwareCash;\r\n        bool Finished;\r\n    }\r\n    \r\n    function  ContributeInternal(uint16 userId,uint cashInHarware,uint cashFreezed,bool reuseCashInHarware) private{\r\n        Contribution contribution = Users[userId].Contributions[Users[userId].ContributionsLength];\r\n\r\n        contribution.CashInHarware = cashInHarware;\r\n        contribution.CashFreezed = cashFreezed;\r\n        \r\n        uint8 noFreezCoef = uint8 ((cashInHarware * 100) / (cashFreezed+cashInHarware));\r\n        contribution.ProfitPercent = uint16 (((Coef1 * noFreezCoef * noFreezCoef) + (Coef2 * noFreezCoef) + Coef3)/10000);//10000\r\n        \r\n        contribution.NeedPayByDay = (((cashInHarware + cashFreezed) /10000) * contribution.ProfitPercent)/LifeTime;\r\n        contribution.ReuseCashInHarware = reuseCashInHarware;\r\n        contribution.DateCreated = now;\r\n        contribution.DateLastCheck = now;\r\n        \r\n        Users[userId].ContributionsLength++;\r\n    }\r\n    function ContributeWithSender (bool reuseCashInHarware,uint8 freezeCoeff,address sender) {\r\n        if (msg.value == 0 || freezeCoeff>100 ||ContributedAmount + msg.value > ContributedLimit)\r\n        {\r\n            sender.send(msg.value);\r\n            return;\r\n        }\r\n        \r\n        uint16 userId = GetUserIdByAddress(sender);\r\n        if (userId == 65535)\r\n        {\r\n            userId = UsersLength;\r\n            Users[userId].Address = sender;\r\n            UsersLength ++;\r\n        }\r\n        \r\n        uint cashFreezed = ((msg.value/100)*freezeCoeff);\r\n        ContributeInternal(\r\n            userId,\r\n            msg.value - cashFreezed,\r\n            cashFreezed,\r\n            reuseCashInHarware\r\n            );\r\n        FreezedCash += cashFreezed;\r\n        ContributedAmount += msg.value;\r\n        \r\n        OutputAddress.send(msg.value - cashFreezed);\r\n    }\r\n    function Contribute (bool reuseCashInHarware,uint8 freezeCoeff) {\r\n        ContributeWithSender(reuseCashInHarware,freezeCoeff,msg.sender);\r\n    }\r\n    function ChangeReuseCashInHarware(bool newValue,uint16 userId,uint16 contributionId){\r\n        if (msg.sender != Users[userId].Address) return;\r\n        Users[userId].Contributions[contributionId].ReuseCashInHarware = newValue;\r\n    }\r\n    \r\n    function Triger(){\r\n        if (Owner != msg.sender) return;\r\n        \r\n        uint MinedTillLastPayment = this.balance - CashForHardwareReturn - FreezedCash;\r\n        bool NotEnoughCash = false;\r\n        \r\n        for(uint16 i=0;i<UsersLength;i++)\r\n        {\r\n            for(uint16 j=0;j<Users[i].ContributionsLength;j++)\r\n            {\r\n                Contribution contribution = Users[i].Contributions[j];\r\n                if (contribution.Finished || now - contribution.DateLastCheck < 1 days) continue;\r\n                \r\n                if (contribution.AlreadyPaid != contribution.NeedPayByDay * LifeTime)\r\n                {\r\n                    uint8 daysToPay = uint8((now - contribution.DateCreated)/1 days);\r\n                    if (daysToPay>LifeTime) daysToPay = uint8(LifeTime);\r\n                    uint needToPay = (daysToPay * contribution.NeedPayByDay) - contribution.AlreadyPaid;\r\n                    \r\n                    if (MinedTillLastPayment < needToPay)\r\n                    {\r\n                        NotEnoughCash = true;\r\n                    }\r\n                    else\r\n                    {\r\n                        if (needToPay > 100 finney || daysToPay == LifeTime)\r\n                        {\r\n                            MinedTillLastPayment -= needToPay;\r\n                            Users[i].Address.send(needToPay);\r\n                            contribution.AlreadyPaid += needToPay;\r\n                        }\r\n                    }\r\n                    contribution.DateLastCheck = now;\r\n                }\r\n\r\n                if (now > contribution.DateCreated + (LifeTime * 1 days) && !contribution.ReturnedHardwareCash)\r\n                {\r\n                    if (contribution.ReuseCashInHarware)\r\n                    {\r\n                        ContributeInternal(\r\n                            i,\r\n                            contribution.CashInHarware,\r\n                            contribution.CashFreezed,\r\n                            true\r\n                        );\r\n                        contribution.ReturnedHardwareCash = true;\r\n                    }\r\n                    else\r\n                    {\r\n                        if (CashForHardwareReturn >= contribution.CashInHarware)\r\n                        {\r\n                            CashForHardwareReturn -= contribution.CashInHarware;\r\n                            FreezedCash -= contribution.CashFreezed;\r\n                            ContributedAmount -= contribution.CashFreezed + contribution.CashInHarware;\r\n                            Users[i].Address.send(contribution.CashInHarware + contribution.CashFreezed);\r\n                            contribution.ReturnedHardwareCash = true;\r\n                        }\r\n                    }\r\n                }\r\n                \r\n                if (contribution.ReturnedHardwareCash && contribution.AlreadyPaid == contribution.NeedPayByDay * LifeTime)\r\n                {\r\n                    contribution.Finished = true;\r\n                }\r\n            }  \r\n        }\r\n        \r\n        if (!NotEnoughCash)\r\n        {\r\n            OutputAddress.send(MinedTillLastPayment);\r\n        }\r\n    }\r\n    \r\n    function ConfigureFunction(address outputAddress,uint contributedLimit,uint16 coef1,uint16 coef2,uint16 coef3)\r\n    {\r\n        if (Owner != msg.sender) return;\r\n        OutputAddress = outputAddress;\r\n        ContributedLimit = contributedLimit;\r\n        Coef1 = coef1;\r\n        Coef2 = coef2;\r\n        Coef3 = coef3;\r\n    }\r\n    \r\n    function SendCashForHardwareReturn(){\r\n        CashForHardwareReturn += msg.value;\r\n    }\r\n    function WithdrawCashForHardwareReturn(uint amount){\r\n        if (Owner != msg.sender || CashForHardwareReturn < amount) return;\r\n        Owner.send(amount);\r\n    }\r\n    \r\n    function GetUserIdByAddress (address userAddress) returns (uint16){\r\n        for(uint16 i=0; i<UsersLength;i++)\r\n        {\r\n            if (Users[i].Address == userAddress)\r\n                return i;\r\n        }\r\n        return 65535;\r\n    }\r\n    \r\n    function GetContributionInfo (uint16 userId,uint16 contributionId) \r\n    returns (uint a1,uint a2, uint16 a3,uint a4, bool a5,uint a6,uint a7,uint a8,bool a9,bool a10,address a11) \r\n    {\r\n        Contribution contribution = Users[userId].Contributions[contributionId];\r\n        a1 = contribution.CashInHarware;\r\n        a2 = contribution.CashFreezed;\r\n        a3 = contribution.ProfitPercent;\r\n        a4 = contribution.NeedPayByDay;\r\n        a5 = contribution.ReuseCashInHarware;\r\n        a6 = contribution.DateCreated;\r\n        a7 = contribution.DateLastCheck;\r\n        a8 = contribution.AlreadyPaid;\r\n        a9 = contribution.ReturnedHardwareCash;\r\n        a10 = contribution.Finished;\r\n        a11 = Users[userId].Address;\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"userId\",\"type\":\"uint16\"},{\"name\":\"contributionId\",\"type\":\"uint16\"}],\"name\":\"GetContributionInfo\",\"outputs\":[{\"name\":\"a1\",\"type\":\"uint256\"},{\"name\":\"a2\",\"type\":\"uint256\"},{\"name\":\"a3\",\"type\":\"uint16\"},{\"name\":\"a4\",\"type\":\"uint256\"},{\"name\":\"a5\",\"type\":\"bool\"},{\"name\":\"a6\",\"type\":\"uint256\"},{\"name\":\"a7\",\"type\":\"uint256\"},{\"name\":\"a8\",\"type\":\"uint256\"},{\"name\":\"a9\",\"type\":\"bool\"},{\"name\":\"a10\",\"type\":\"bool\"},{\"name\":\"a11\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newValue\",\"type\":\"bool\"},{\"name\":\"userId\",\"type\":\"uint16\"},{\"name\":\"contributionId\",\"type\":\"uint16\"}],\"name\":\"ChangeReuseCashInHarware\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"GetUserIdByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"outputAddress\",\"type\":\"address\"},{\"name\":\"contributedLimit\",\"type\":\"uint256\"},{\"name\":\"coef1\",\"type\":\"uint16\"},{\"name\":\"coef2\",\"type\":\"uint16\"},{\"name\":\"coef3\",\"type\":\"uint16\"}],\"name\":\"ConfigureFunction\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawCashForHardwareReturn\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CashForHardwareReturn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FreezedCash\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"reuseCashInHarware\",\"type\":\"bool\"},{\"name\":\"freezeCoeff\",\"type\":\"uint8\"}],\"name\":\"Contribute\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Triger\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"SendCashForHardwareReturn\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"reuseCashInHarware\",\"type\":\"bool\"},{\"name\":\"freezeCoeff\",\"type\":\"uint8\"},{\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ContributeWithSender\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ContributedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"}]","ContractName":"EthDig","CompilerVersion":"v0.3.2-2016-05-13-4b445b8","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}