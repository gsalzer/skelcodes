{"status":"1","message":"OK","result":[{"SourceCode":"// This is the base contract that your contract test2 extends from.\r\ncontract BaseRegistry {\r\n\r\n    // The owner of this registry.\r\n    address owner;\r\n\r\n    // This struct keeps all data for a Record.\r\n    struct Record {\r\n        // Keeps the address of this record creator.\r\n        address owner;\r\n        // Keeps the time when this record was created.\r\n        uint time;\r\n        // Keeps the index of the keys array for fast lookup\r\n        uint keysIndex;\r\n    }\r\n\r\n    // This mapping keeps the records of this Registry.\r\n    mapping(address => Record) records;\r\n\r\n    // Keeps the total numbers of records in this Registry.\r\n    uint public numRecords;\r\n\r\n    // Keeps a list of all keys to interate the records.\r\n    address[] private keys;\r\n\r\n\r\n\r\n    // Constructor\r\n    function BaseRegistry() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    // This is the function that actually insert a record. \r\n    function register(address key) {\r\n        if (records[key].time == 0) {\r\n            records[key].time = now;\r\n            records[key].owner = msg.sender;\r\n            records[key].keysIndex = keys.length;\r\n            keys.length++;\r\n            keys[keys.length - 1] = key;\r\n            numRecords++;\r\n        } else {\r\n            returnValue();\r\n        }\r\n    }\r\n\r\n    // Updates the values of the given record.\r\n    function update(address key) {\r\n        // Only the owner can update his record.\r\n        if (records[key].owner == msg.sender) {}\r\n    }\r\n\r\n    // Unregister a given record\r\n    function unregister(address key) {\r\n        if (records[key].owner == msg.sender) {\r\n            uint keysIndex = records[key].keysIndex;\r\n            delete records[key];\r\n            numRecords--;\r\n            keys[keysIndex] = keys[keys.length - 1];\r\n            records[keys[keysIndex]].keysIndex = keysIndex;\r\n            keys.length--;\r\n        }\r\n    }\r\n\r\n    // Transfer ownership of a given record.\r\n    function transfer(address key, address newOwner) {\r\n        if (records[key].owner == msg.sender) {\r\n            records[key].owner = newOwner;\r\n        } else {\r\n            returnValue();\r\n        }\r\n    }\r\n\r\n    // Tells whether a given key is registered.\r\n    function isRegistered(address key) returns(bool) {\r\n        return records[key].time != 0;\r\n    }\r\n\r\n    function getRecordAtIndex(uint rindex) returns(address key, address owner, uint time) {\r\n        Record record = records[keys[rindex]];\r\n        key = keys[rindex];\r\n        owner = record.owner;\r\n        time = record.time;\r\n\r\n    }\r\n\r\n    function getRecord(address key) returns(address owner, uint time) {\r\n        Record record = records[key];\r\n        owner = record.owner;\r\n        time = record.time;\r\n\r\n    }\r\n\r\n    // Returns the owner of the given record. The owner could also be get\r\n    // by using the function getRecord but in that case all record attributes \r\n    // are returned.\r\n    function getOwner(address key) returns(address) {\r\n        return records[key].owner;\r\n    }\r\n\r\n    // Returns the registration time of the given record. The time could also\r\n    // be get by using the function getRecord but in that case all record attributes\r\n    // are returned.\r\n    function getTime(address key) returns(uint) {\r\n        return records[key].time;\r\n    }\r\n\r\n    // Returns the total number of records in this registry.\r\n    function getTotalRecords() returns(uint) {\r\n        return numRecords;\r\n    }\r\n\r\n    // This function is used by subcontracts when an error is detected and\r\n    // the value needs to be returned to the transaction originator.\r\n    function returnValue() internal {\r\n        if (msg.value > 0) {\r\n            msg.sender.send(msg.value);\r\n        }\r\n    }\r\n\r\n    // Registry owner can use this function to withdraw any value owned by\r\n    // the registry.\r\n    function withdraw(address to, uint value) {\r\n        if (msg.sender == owner) {\r\n            to.send(value);\r\n        }\r\n    }\r\n\r\n    function kill() {\r\n        if (msg.sender == owner) {\r\n            suicide(owner);\r\n        }\r\n    }\r\n}\r\n\r\ncontract test2 is BaseRegistry {}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"getTotalRecords\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"address\"}],\"name\":\"update\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"address\"}],\"name\":\"unregister\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"address\"}],\"name\":\"getTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"address\"}],\"name\":\"getRecord\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"time\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rindex\",\"type\":\"uint256\"}],\"name\":\"getRecordAtIndex\",\"outputs\":[{\"name\":\"key\",\"type\":\"address\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"time\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numRecords\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transfer\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"address\"}],\"name\":\"isRegistered\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"address\"}],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"}]","ContractName":"test2","CompilerVersion":"v0.2.2-2016-02-17-ef92f56","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}