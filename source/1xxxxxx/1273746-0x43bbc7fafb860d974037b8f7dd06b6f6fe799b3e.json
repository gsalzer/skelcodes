{"status":"1","message":"OK","result":[{"SourceCode":"// A Ponzi scheme where old investors are payed with the funds received from new investors.\r\n// Unlike what is out there in the market, the contract creator received no funds - if you\r\n// don't do work, you cannot expect to be paid. People who put in the funds receive all the\r\n// returns. Owners can particiapte themselves, there is no leaching off the top and slowing\r\n// down payouts for the participants.\r\ncontract ZeroPonzi {\r\n  // minimum & maxium entry values\r\n  uint public constant MIN_VALUE = 100 finney;\r\n  uint public constant MAX_VALUE = 10 ether;\r\n\r\n  // the return multiplier & divisors, yielding 1.25 (125%) returns\r\n  uint public constant RET_MUL = 125;\r\n  uint public constant RET_DIV = 100;\r\n\r\n  // entry structure, storing the address & yield\r\n  struct Payout {\r\n    address addr;\r\n    uint yield;\r\n  }\r\n\r\n  // our actual queued payouts, index of current & total distributed\r\n  Payout[] public payouts;\r\n  uint public payoutIndex = 0;\r\n  uint public payoutTotal = 0;\r\n\r\n  // construtor, no additional requirements\r\n  function ZeroPonzi() {\r\n  }\r\n\r\n  // single entry point, add entry & pay what we can\r\n  function() {\r\n    // we only accept values in range\r\n    if ((msg.value < MIN_VALUE) || (msg.value > MAX_VALUE)) {\r\n      throw;\r\n    }\r\n\r\n    // queue the current entry as a future payout recipient\r\n    uint entryIndex = payouts.length;\r\n    payouts.length += 1;\r\n    payouts[entryIndex].addr = msg.sender;\r\n    payouts[entryIndex].yield = (msg.value * RET_MUL) / RET_DIV;\r\n\r\n    // send payouts while we can afford to do so\r\n    while (payouts[payoutIndex].yield < this.balance) {\r\n      payoutTotal += payouts[payoutIndex].yield;\r\n      payouts[payoutIndex].addr.send(payouts[payoutIndex].yield);\r\n      payoutIndex += 1;\r\n    }\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"MAX_VALUE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"payouts\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"yield\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payoutIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RET_MUL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_VALUE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payoutTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RET_DIV\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"inputs\":[],\"type\":\"constructor\"}]","ContractName":"ZeroPonzi","CompilerVersion":"v0.2.1-2016-01-30-91a6b35","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}