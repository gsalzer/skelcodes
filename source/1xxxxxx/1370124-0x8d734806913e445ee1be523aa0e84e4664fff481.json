{"status":"1","message":"OK","result":[{"SourceCode":"contract ProtectTheCastle {\r\n    // King's Jester\r\n    address public jester;\r\n    // Record the last Reparation time\r\n    uint public lastReparation;\r\n    // Piggy Bank Amount\r\n    uint public piggyBank;\r\n\r\n    // Collected Fee Amount\r\n    uint public collectedFee;\r\n\r\n    // Track the citizens who helped to repair the castle\r\n    address[] public citizensAddresses;\r\n    uint[] public citizensAmounts;\r\n    uint32 public totalCitizens;\r\n    uint32 public lastCitizenPaid;\r\n    // Brided Citizen who made the system works\r\n    address public bribedCitizen;\r\n    // Record how many times the castle had fell\r\n    uint32 public round;\r\n    // Amount already paid back in this round\r\n    uint public amountAlreadyPaidBack;\r\n    // Amount invested in this round\r\n    uint public amountInvested;\r\n\r\n    uint constant SIX_HOURS = 60 * 60 * 6;\r\n\r\n    function ProtectTheCastle() {\r\n        // Define the first castle\r\n        bribedCitizen = msg.sender;\r\n        jester = msg.sender;\r\n        lastReparation = block.timestamp;\r\n        amountAlreadyPaidBack = 0;\r\n        amountInvested = 0;\r\n        totalCitizens = 0;\r\n    }\r\n\r\n    function repairTheCastle() returns(bool) {\r\n        uint amount = msg.value;\r\n        // Check if the minimum amount if reached\r\n        if (amount < 10 finney) {\r\n            msg.sender.send(msg.value);\r\n            return false;\r\n        }\r\n        // If the amount received is more than 100 ETH return the difference\r\n        if (amount > 100 ether) {\r\n            msg.sender.send(msg.value - 100 ether);\r\n            amount = 100 ether;\r\n        }\r\n\r\n        // Check if the Castle has fell\r\n        if (lastReparation + SIX_HOURS < block.timestamp) {\r\n            // Send the Piggy Bank to the last 3 citizens\r\n            // If there is no one who contributed this last 6 hours, no action needed\r\n            if (totalCitizens == 1) {\r\n                // If there is only one Citizen who contributed, he gets the full Pigg Bank\r\n                citizensAddresses[citizensAddresses.length - 1].send(piggyBank);\r\n            } else if (totalCitizens == 2) {\r\n                // If only 2 citizens contributed\r\n                citizensAddresses[citizensAddresses.length - 1].send(piggyBank * 65 / 100);\r\n                citizensAddresses[citizensAddresses.length - 2].send(piggyBank * 35 / 100);\r\n            } else if (totalCitizens >= 3) {\r\n                // If there is 3 or more citizens who contributed\r\n                citizensAddresses[citizensAddresses.length - 1].send(piggyBank * 55 / 100);\r\n                citizensAddresses[citizensAddresses.length - 2].send(piggyBank * 30 / 100);\r\n                citizensAddresses[citizensAddresses.length - 3].send(piggyBank * 15 / 100);\r\n            }\r\n\r\n            // Define the new Piggy Bank\r\n            piggyBank = 0;\r\n\r\n            // Define the new Castle\r\n            jester = msg.sender;\r\n            lastReparation = block.timestamp;\r\n            citizensAddresses.push(msg.sender);\r\n            citizensAmounts.push(amount * 2);\r\n            totalCitizens += 1;\r\n            amountInvested += amount;\r\n\r\n            // All goes to the Piggy Bank\r\n            piggyBank += amount;\r\n\r\n            // The Jetster take 3%\r\n            jester.send(amount * 3 / 100);\r\n\r\n            // The brided Citizen takes 3%\r\n            collectedFee += amount * 3 / 100;\r\n\r\n            round += 1;\r\n        } else {\r\n            // The Castle is still up\r\n            lastReparation = block.timestamp;\r\n            citizensAddresses.push(msg.sender);\r\n            citizensAmounts.push(amount * 2);\r\n            totalCitizens += 1;\r\n            amountInvested += amount;\r\n\r\n            // 5% goes to the Piggy Bank\r\n            piggyBank += (amount * 5 / 100);\r\n\r\n            // The Jetster takes 3%\r\n            jester.send(amount * 3 / 100);\r\n\r\n            // The brided Citizen takes 3%\r\n            collectedFee += amount * 3 / 100;\r\n\r\n            while (citizensAmounts[lastCitizenPaid] < (address(this).balance - piggyBank - collectedFee) && lastCitizenPaid <= totalCitizens) {\r\n                citizensAddresses[lastCitizenPaid].send(citizensAmounts[lastCitizenPaid]);\r\n                amountAlreadyPaidBack += citizensAmounts[lastCitizenPaid];\r\n                lastCitizenPaid += 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    // fallback function\r\n    function() {\r\n        repairTheCastle();\r\n    }\r\n\r\n    // When the castle would be no more...\r\n    function surrender() {\r\n        if (msg.sender == bribedCitizen) {\r\n            bribedCitizen.send(address(this).balance);\r\n            selfdestruct(bribedCitizen);\r\n        }\r\n    }\r\n\r\n    // When the brided Citizen decides to give his seat to someone else\r\n    function newBribedCitizen(address newBribedCitizen) {\r\n        if (msg.sender == bribedCitizen) {\r\n            bribedCitizen = newBribedCitizen;\r\n        }\r\n    }\r\n\r\n    // When the brided Citizen decides to collect his fees\r\n    function collectFee() {\r\n        if (msg.sender == bribedCitizen) {\r\n            bribedCitizen.send(collectedFee);\r\n        }\r\n    }\r\n\r\n    // When the jester can't handle it anymore, he can give his position to someone else\r\n    function newJester(address newJester) {\r\n        if (msg.sender == jester) {\r\n            jester = newJester;\r\n        }\r\n    }       \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"round\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBribedCitizen\",\"type\":\"address\"}],\"name\":\"newBribedCitizen\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newJester\",\"type\":\"address\"}],\"name\":\"newJester\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"repairTheCastle\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastReparation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bribedCitizen\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"citizensAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"surrender\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"piggyBank\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalCitizens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"citizensAmounts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"collectFee\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastCitizenPaid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountInvested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jester\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountAlreadyPaidBack\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collectedFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"inputs\":[],\"type\":\"constructor\"}]","ContractName":"ProtectTheCastle","CompilerVersion":"v0.3.1-2016-04-12-3ad5e82","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}