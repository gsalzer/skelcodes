{"status":"1","message":"OK","result":[{"SourceCode":"contract NoxonFund {\r\n\r\n    address public owner;\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public totalSupply; //18160ddd for rpc call https://api.etherscan.io/api?module=proxy&data=0x18160ddd&to=0xContractAdress&apikey={eserscan api}&action=eth_call\r\n    uint256 public Entropy;\r\n    uint256 public ownbalance; //d9c7041b\r\n\r\n\tuint256 public sellPrice; //4b750334\r\n    uint256 public buyPrice; //8620410b\r\n    \r\n    /* This creates an array with all balances */\r\n    mapping (address => uint256) public balanceOf;\r\n\r\n    /* This generates a public event on the blockchain that will notify clients */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    \r\n    \r\n    \r\n    /* Initializes cont ract with initial supply tokens to the creator of the contract */\r\n    function token()  {\r\n    \r\n        if (owner!=0) throw;\r\n        buyPrice = msg.value;\r\n        balanceOf[msg.sender] = 1;    // Give the creator all initial tokens\r\n        totalSupply = 1;              // Update total supply\r\n        Entropy = 1;\r\n        name = 'noxonfund.com';       // Set the name for display purposes\r\n        symbol = '? SHARE';             // Set the symbol for display purposes\r\n        decimals = 0;                 // Amount of decimals for display purposes\r\n        owner = msg.sender;\r\n        setPrices();\r\n    }\r\n    \r\n\r\n    \r\n     /* Send shares function */\r\n    function transfer(address _to, uint256 _value) {\r\n        if (balanceOf[msg.sender] < _value) throw;           // Check if the sender has enough\r\n        if (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows\r\n        balanceOf[msg.sender] -= _value;    \r\n        balanceOf[_to] += _value;                            // Add the same to the recipient\r\n        Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\r\n    }\r\n\t\r\n\r\n    function setPrices() {\r\n        ownbalance = this.balance; //own contract balance\r\n        sellPrice = ownbalance/totalSupply;\r\n        buyPrice = sellPrice*2; \r\n    }\r\n    \r\n    \r\n   function () returns (uint buyreturn) {\r\n       \r\n        uint256 amount = msg.value / buyPrice;                // calculates the amount\r\n        balanceOf[msg.sender] += amount;                   // adds the amount to buyer's balance\r\n       \r\n        totalSupply += amount;\r\n        Entropy += amount;\r\n        \r\n        Transfer(0, msg.sender, amount);\r\n        \r\n        owner.send(msg.value/2);\r\n        //set next price\r\n        setPrices();\r\n        return buyPrice;\r\n   }\r\n   \r\n\r\n    \r\n    function sell(uint256 amount) {\r\n        setPrices();\r\n        if (balanceOf[msg.sender] < amount ) throw;        // checks if the sender has enough to sell\r\n        Transfer(msg.sender, this, amount);                 //return shares to contract\r\n        totalSupply -= amount;\r\n        balanceOf[msg.sender] -= amount;                   // subtracts the amount from seller's balance\r\n        msg.sender.send(amount * sellPrice);               // sends ether to the seller\r\n        setPrices();\r\n\r\n    }\r\n\t\r\n\t//All incomse will send using newIncome method\r\n\tevent newincomelog(uint amount,string description);\r\n\tfunction newIncome(\r\n        string JobDescription\r\n    )\r\n        returns (string result)\r\n    {\r\n        if (msg.value <= 1 ether/100) throw;\r\n        newincomelog(msg.value,JobDescription);\r\n        return JobDescription;\r\n    }\r\n    \r\n    \r\n    \r\n    //some democracy\r\n    \r\n    uint votecount;\r\n    uint voteno; \r\n    uint voteyes;\r\n    \r\n    mapping (address => uint256) public voters;\r\n    \r\n    function newProposal(\r\n        string JobDescription\r\n    )\r\n        returns (string result)\r\n    {\r\n        if (msg.sender == owner) {\r\n            votecount = 0;\r\n            newProposallog(JobDescription);\r\n            return \"ok\";\r\n        } else {\r\n            return \"Only admin can do this\";\r\n        }\r\n    }\r\n    \r\n\r\n    \r\n    \r\n    function ivote(bool myposition) returns (uint result) {\r\n        votecount += balanceOf[msg.sender];\r\n        \r\n        if (voters[msg.sender]>0) throw;\r\n        voters[msg.sender]++;\r\n        votelog(myposition,msg.sender,balanceOf[msg.sender]);\r\n        return votecount;\r\n    }\r\n\r\n    \r\n    event newProposallog(string description);\r\n    event votelog(bool position, address voter, uint sharesonhand);\r\n   \r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"JobDescription\",\"type\":\"string\"}],\"name\":\"newIncome\",\"outputs\":[{\"name\":\"result\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"myposition\",\"type\":\"bool\"}],\"name\":\"ivote\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Entropy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"JobDescription\",\"type\":\"string\"}],\"name\":\"newProposal\",\"outputs\":[{\"name\":\"result\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setPrices\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"voters\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownbalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"token\",\"outputs\":[],\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"description\",\"type\":\"string\"}],\"name\":\"newincomelog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"description\",\"type\":\"string\"}],\"name\":\"newProposallog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"position\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"sharesonhand\",\"type\":\"uint256\"}],\"name\":\"votelog\",\"type\":\"event\"}]","ContractName":"NoxonFund","CompilerVersion":"v0.2.2-2016-03-01-02bb315","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}