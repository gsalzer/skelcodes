{"status":"1","message":"OK","result":[{"SourceCode":"// LooneyLottery that pays out the full pool once a day\r\n//\r\n// git: https://github.com/thelooneyfarm/contracts/tree/master/src/lottery\r\n// url: http://the.looney.farm/game/lottery\r\ncontract LooneyLottery {\r\n  // modifier for the owner protected functions\r\n  modifier owneronly {\r\n    // yeap, you need to own this contract to action it\r\n    if (msg.sender != owner) {\r\n      throw;\r\n    }\r\n\r\n    // function execution inserted here\r\n    _\r\n  }\r\n\r\n  // constants for the Lehmer RNG\r\n  uint constant private LEHMER_MOD = 4294967291;\r\n  uint constant private LEHMER_MUL = 279470273;\r\n  uint constant private LEHMER_SDA = 1299709;\r\n  uint constant private LEHMER_SDB = 7919;\r\n\r\n  // various game-related constants, also available in the interface\r\n  uint constant public CONFIG_DURATION = 24 hours;\r\n  uint constant public CONFIG_MIN_PLAYERS  = 5;\r\n  uint constant public CONFIG_MAX_PLAYERS  = 222;\r\n  uint constant public CONFIG_MAX_TICKETS = 100;\r\n  uint constant public CONFIG_PRICE = 10 finney;\r\n  uint constant public CONFIG_FEES = 50 szabo;\r\n  uint constant public CONFIG_RETURN = CONFIG_PRICE - CONFIG_FEES;\r\n  uint constant public CONFIG_MIN_VALUE = CONFIG_PRICE;\r\n  uint constant public CONFIG_MAX_VALUE = CONFIG_PRICE * CONFIG_MAX_TICKETS;\r\n\r\n  // our owner, stored for owner-related functions\r\n  address private owner = msg.sender;\r\n\r\n  // basic initialisation for the RNG\r\n  uint private random = uint(sha3(block.coinbase, block.blockhash(block.number - 1), now));\r\n  uint private seeda = LEHMER_SDA;\r\n  uint private seedb = LEHMER_SDB;\r\n\r\n  // we allow 222 * 100 max tickets, allocate a bit more and store the mapping of entry => address\r\n  uint8[22500] private tickets;\r\n  mapping (uint => address) private players;\r\n\r\n  // public game-related values\r\n  uint public round = 1;\r\n  uint public numplayers = 0;\r\n  uint public numtickets = 0;\r\n  uint public start = now;\r\n  uint public end = start + CONFIG_DURATION;\r\n\r\n  // lifetime stats\r\n  uint public txs = 0;\r\n  uint public tktotal = 0;\r\n  uint public turnover = 0;\r\n\r\n  // nothing much to do in the constructor, we have the owner set & init done\r\n  function LooneyLottery() {\r\n  }\r\n\r\n  // owner withdrawal of fees\r\n  function ownerWithdraw() owneronly public {\r\n    // calculate the fees collected previously (excluding current round)\r\n    uint fees = this.balance - (numtickets * CONFIG_PRICE);\r\n\r\n    // return it if we have someting\r\n    if (fees > 0) {\r\n      owner.call.value(fees)();\r\n    }\r\n  }\r\n\r\n  // calculate the next random number with a two-phase Lehmer\r\n  function randomize() private {\r\n    // calculate the next seed for the first phase\r\n    seeda = (seeda * LEHMER_MUL) % LEHMER_MOD;\r\n\r\n    // adjust the random accordingly, getting extra info from the blockchain together with the seeds\r\n    random ^= uint(sha3(block.coinbase, block.blockhash(block.number - 1), seeda, seedb));\r\n\r\n    // adjust the second phase seed for the next iteration\r\n    seedb = (seedb * LEHMER_MUL) % LEHMER_MOD;\r\n  }\r\n\r\n  // pick a random winner when the time is right\r\n  function pickWinner() private {\r\n    // do we have >222 players or >= 5 tickets and an expired timer\r\n    if ((numplayers >= CONFIG_MAX_PLAYERS ) || ((numplayers >= CONFIG_MIN_PLAYERS ) && (now > end))) {\r\n      // get the winner based on the number of tickets (each player has multiple tickets)\r\n      uint winidx = tickets[random % numtickets];\r\n      uint output = numtickets * CONFIG_RETURN;\r\n\r\n      // send the winnings to the winner and let the world know\r\n      players[winidx].call.value(output)();\r\n      notifyWinner(players[winidx], output);\r\n\r\n      // reset the round, and start a new one\r\n      numplayers = 0;\r\n      numtickets = 0;\r\n      start = now;\r\n      end = start + CONFIG_DURATION;\r\n      round++;\r\n    }\r\n  }\r\n\r\n  // allocate tickets to the entry based on the value of the transaction\r\n  function allocateTickets(uint number) private {\r\n    // the last index of the ticket we will be adding to the pool\r\n    uint ticketmax = numtickets + number;\r\n\r\n    // loop through and allocate a ticket based on the number bought\r\n    for (uint idx = numtickets; idx < ticketmax; idx++) {\r\n      tickets[idx] = uint8(numplayers);\r\n    }\r\n\r\n    // our new value of total tickets (for this round) is the same as max, store it\r\n    numtickets = ticketmax;\r\n\r\n    // store the actual player info so we can reference it from the tickets\r\n    players[numplayers] = msg.sender;\r\n    numplayers++;\r\n\r\n    // let the world know that we have yet another player\r\n    notifyPlayer(number);\r\n  }\r\n\r\n  // we only have a default function, send an amount and it gets allocated, no ABI needed\r\n  function() public {\r\n    // oops, we need at least 10 finney to play :(\r\n    if (msg.value < CONFIG_MIN_VALUE) {\r\n      throw;\r\n    }\r\n\r\n    // adjust the random value based on the pseudo rndom inputs\r\n    randomize();\r\n\r\n    // pick a winner at the end of a round\r\n    pickWinner();\r\n\r\n    // here we store the number of tickets in this transaction\r\n    uint number = 0;\r\n\r\n    // get either a max number based on the over-the-top entry or calculate based on inputs\r\n    if (msg.value >= CONFIG_MAX_VALUE) {\r\n      number = CONFIG_MAX_TICKETS;\r\n    } else {\r\n      number = msg.value / CONFIG_PRICE;\r\n    }\r\n\r\n    // overflow is the value to be returned, >max or not a multiple of min\r\n    uint input = number * CONFIG_PRICE;\r\n    uint overflow = msg.value - input;\r\n\r\n    // store the actual turnover, transaction increment and total tickets\r\n    turnover += input;\r\n    tktotal += number;\r\n    txs += 1;\r\n\r\n    // allocate the actual tickets now\r\n    allocateTickets(number);\r\n\r\n    // send back the overflow where applicable\r\n    if (overflow > 0) {\r\n      msg.sender.call.value(overflow)();\r\n    }\r\n  }\r\n\r\n  // log events\r\n  event Player(address addr, uint32 at, uint32 round, uint32 tickets, uint32 numtickets, uint tktotal, uint turnover);\r\n  event Winner(address addr, uint32 at, uint32 round, uint32 numtickets, uint output);\r\n\r\n  // notify that a new player has entered the fray\r\n  function notifyPlayer(uint number) private {\r\n    Player(msg.sender, uint32(now), uint32(round), uint32(number), uint32(numtickets), tktotal, turnover);\r\n  }\r\n\r\n  // create the Winner event and send it\r\n  function notifyWinner(address addr, uint output) private {\r\n    Winner(addr, uint32(now), uint32(round), uint32(numtickets), output);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"CONFIG_MAX_VALUE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numtickets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"round\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tktotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"turnover\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numplayers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONFIG_DURATION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONFIG_MIN_PLAYERS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ownerWithdraw\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONFIG_FEES\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"txs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONFIG_MIN_VALUE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONFIG_MAX_TICKETS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONFIG_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"end\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONFIG_MAX_PLAYERS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONFIG_RETURN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"inputs\":[],\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"at\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"round\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"tickets\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"numtickets\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"tktotal\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"turnover\",\"type\":\"uint256\"}],\"name\":\"Player\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"at\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"round\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"numtickets\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"output\",\"type\":\"uint256\"}],\"name\":\"Winner\",\"type\":\"event\"}]","ContractName":"LooneyLottery","CompilerVersion":"v0.2.1-2016-01-30-91a6b35","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}