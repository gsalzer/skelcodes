{"status":"1","message":"OK","result":[{"SourceCode":"// 0xBa69e7C96E9541863f009E713CaF26d4Ad2241a0\r\n\r\ncontract Managed {\r\n\r\n  address public currentManager;\r\n\r\n  function Managed() {\r\n    currentManager = msg.sender;\r\n  }\r\n\r\n  modifier onlyManager {\r\n    if (msg.sender != currentManager) throw;\r\n    _\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract OfficialWebsite is Managed {\r\n  string officialWebsite;\r\n\r\n  function setOfficialWebsite(string url) onlyManager {\r\n    officialWebsite = url;\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract SmartRevshare is OfficialWebsite {\r\n\r\n  struct Investor {\r\n    address addr;\r\n    uint value;\r\n    uint lastDay;\r\n    uint8 leftPayDays;\r\n  }\r\n\r\n  Investor[] public investors;\r\n  uint payoutIdx = 0;\r\n\r\n  address public currentManager;\r\n  uint public balance;\r\n\r\n  // Events that will be fired on changes.\r\n  event Invest(address investor, uint value);\r\n  event Payout(address investor, uint value);\r\n\r\n  // simple manager function modifier\r\n  modifier manager {\r\n    if (msg.sender == currentManager) _\r\n  }\r\n\r\n  function SmartRevshare() {\r\n    // set founder as current manager\r\n    currentManager = msg.sender;\r\n    // add some assets\r\n    balance += msg.value;\r\n  }\r\n\r\n  function found() onlyManager {\r\n    // let manager to add some revenue\r\n    balance += msg.value;\r\n  }\r\n\r\n  function() {\r\n    // 100 finey is minimum invest\r\n    if (msg.value < 100 finney) throw;\r\n\r\n    invest();\r\n    payout();\r\n  }\r\n\r\n  function invest() {\r\n\r\n    // add new investor\r\n    investors.push(Investor({\r\n      addr: msg.sender,\r\n      value: msg.value,\r\n      leftPayDays: calculateROI(),\r\n      lastDay: getDay()\r\n    }));\r\n\r\n    // save 99% of sent value\r\n    balance += msg.value * 99 / 100;\r\n\r\n    // send 1% to current manager\r\n    currentManager.send(msg.value / 100);\r\n\r\n    // call Invest event\r\n    Invest(msg.sender, msg.value);\r\n  }\r\n\r\n  function payout() internal {\r\n    uint payoutValue;\r\n    uint currDay = getDay(); // store actual day\r\n\r\n    for (uint idx = payoutIdx; idx < investors.length; idx += 1) {\r\n      // calculate 1% of invested value\r\n      payoutValue = investors[idx].value / 100;\r\n\r\n      if (balance < payoutValue) {\r\n        // out of balance, do payuout next time\r\n        break;\r\n      }\r\n\r\n      if (investors[idx].lastDay >= currDay) {\r\n        // this investor was payed today\r\n        // payout next one\r\n        continue;\r\n      }\r\n\r\n      if (investors[idx].leftPayDays <= 0) {\r\n        // this investor is paidoff, check next one\r\n        payoutIdx = idx;\r\n      }\r\n\r\n      // the best part - payout\r\n      investors[idx].addr.send(payoutValue);\r\n      // update lastDay to actual day\r\n      investors[idx].lastDay = currDay;\r\n      // decrement leftPayDays\r\n      investors[idx].leftPayDays -= 1;\r\n\r\n      // decrement contract balance\r\n      balance -= payoutValue;\r\n\r\n      // call Payout event\r\n      Payout(investors[idx].addr, payoutValue);\r\n    }\r\n\r\n  }\r\n\r\n  // get number of current day since 1970\r\n  function getDay() internal returns (uint) {\r\n    return now / 1 days;\r\n  }\r\n\r\n  // calculate ROI based on investor value\r\n  function calculateROI() internal returns (uint8) {\r\n    if (msg.value <=   1 ether) return 110; // 110%\r\n    if (msg.value <=  10 ether) return 120; // 120%\r\n    if (msg.value <= 100 ether) return 130; // 130%\r\n    return 0;\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"currentManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"found\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investors\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"lastDay\",\"type\":\"uint256\"},{\"name\":\"leftPayDays\",\"type\":\"uint8\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"url\",\"type\":\"string\"}],\"name\":\"setOfficialWebsite\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"invest\",\"outputs\":[],\"type\":\"function\"},{\"inputs\":[],\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Invest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Payout\",\"type\":\"event\"}]","ContractName":"SmartRevshare","CompilerVersion":"v0.3.1-2016-04-07-054bc2a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}