{"status":"1","message":"OK","result":[{"SourceCode":"contract Honestgamble {\r\n    \r\n    //--parameters\r\n    uint private deposit = 10 ether; //only 10 ETH deposits accepted\r\n    uint private feeFrac = 10; //1% initially\r\n    uint constant time_max = 12 * 60 * 60; //12 hours in seconds\r\n    uint private first_prize = 130;\r\n    uint private second_prize = 110;\r\n    uint private third_prize = 60;\r\n    \r\n    //--ledger\r\n    uint private Balance = 0;\r\n    uint private fees = 0;  \r\n    uint private Payout_id = 0;\r\n    uint private number_of_players = 0;\r\n    \r\n    uint private last_time ;\r\n    \r\n    address private admin;\r\n    \r\n    function Honestgamble() {\r\n        admin = msg.sender;\r\n        last_time = block.timestamp;\r\n    }\r\n\r\n    modifier onlyowner {if (msg.sender == admin) _  }\r\n\r\n    struct Player {\r\n        address addr;\r\n        uint payout; //filled when round over, just for the stats\r\n        bool paid;\r\n    }\r\n\r\n    Player[] private players;\r\n\r\n    //--Fallback function\r\n    function() {\r\n        init();\r\n    }\r\n\r\n    //--initiated function\r\n    function init() private {\r\n        //------ Verifications on this new deposit ------\r\n        if (msg.value < deposit) { \r\n            msg.sender.send(msg.value);\r\n            return;\r\n        }\r\n        if(msg.value > deposit){\r\n            msg.sender.send(msg.value-deposit);\r\n        }\r\n        \r\n        //------ participate ------\r\n        Balance += (deposit * (1000 - feeFrac )) / 1000; //update balance\r\n        fees += (deposit * feeFrac) / 1000;          // collect 0.1% fees, thief :p\r\n\r\n    \r\n        last_time = block.timestamp;\r\n        players.push(Player(msg.sender,  0 , false));\r\n        number_of_players++;\r\n        \r\n        //-check if end of the round\r\n        if(number_of_players == 3){ //end of a round\r\n            Pay();\r\n        }\r\n    }\r\n    \r\n    function  Pay() private{\r\n         //---- source of randomness\r\n        uint256 toss = uint256(sha3(msg.gas)) + uint256(sha3(block.timestamp)); \r\n        //indices of players\r\n        uint i_13;\r\n        uint i_11;\r\n        uint i_6;\r\n        \r\n        if( toss % 3 == 0 ){\r\n            i_13=Payout_id;\r\n            i_11=Payout_id+1;\r\n            i_6 =Payout_id+2;\r\n        }\r\n        else if( toss % 3 == 1){\r\n            i_13=Payout_id+2;\r\n            i_11=Payout_id;\r\n            i_6 =Payout_id+1;\r\n        }\r\n        else{\r\n            i_13=Payout_id+1;\r\n            i_11=Payout_id+2;\r\n            i_6 =Payout_id;\r\n        }\r\n        uint256 bet=(deposit * (1000 - feeFrac )) / 1000;\r\n        players[i_13].addr.send(bet*first_prize/100); //gets you 13 ether ! it is good !\r\n        players[i_11].addr.send(bet*second_prize/100); //gets you 11 ether ! not bad !\r\n        players[i_6].addr.send(bet*third_prize/100); //gets you 6 ether, it is a loss, sorry !\r\n        \r\n        //update stats\r\n        players[i_13].payout=bet*first_prize/100;\r\n        players[i_11].payout=bet*second_prize/100;\r\n        players[i_6].payout=bet*third_prize/100;\r\n        players[Payout_id].paid=true;\r\n        players[Payout_id+1].paid=true;\r\n        players[Payout_id+2].paid=true;\r\n        Balance=0;\r\n        number_of_players=0;\r\n        Payout_id += 3;\r\n    }\r\n\r\n    \r\n    function CancelRoundAndRefundAll() { //refund every participants, anyone can call this !\r\n        if(number_of_players==0) return;\r\n        \r\n        if (last_time + time_max < block.timestamp) {\r\n            for(uint i=Payout_id; i<(Payout_id+number_of_players); i++){\r\n                players[i].addr.send((deposit * (1000 - feeFrac )) / 1000 );\r\n                players[i].paid=true;\r\n                players[i].payout=(deposit * (1000 - feeFrac )) / 1000; //everyone is refunded minus the fee, yeah i am evil.\r\n            }\r\n            Payout_id += number_of_players;\r\n            number_of_players=0;\r\n        }\r\n    }\r\n    \r\n    //---Contract informations\r\n    \r\n    \r\n    function WatchBalance() constant returns(uint TotalBalance, string info) {\r\n        TotalBalance = Balance /  1 finney;\r\n        info ='Balance in finney';\r\n    }\r\n    \r\n    function PlayerInfo(uint id) constant returns(address Address, uint Payout, bool UserPaid) {\r\n        if (id <= players.length) {\r\n            Address = players[id].addr;\r\n            Payout = (players[id].payout) / 1 finney;\r\n            UserPaid=players[id].paid;\r\n        }\r\n    }\r\n    \r\n    function WatchLastTime() constant returns(uint LastTimestamp) {\r\n        LastTimestamp = last_time;\r\n    }\r\n\r\n    function WatchCollectedFeesInSzabo() constant returns(uint Fees) {\r\n        Fees = fees / 1 szabo;\r\n    }\r\n    \r\n    function WatchAppliedFeePercentage() constant returns(uint FeePercent) {\r\n        FeePercent = feeFrac/10;\r\n    }\r\n    \r\n\r\n    function WatchNumberOfPlayerInCurrentRound() constant returns(uint N) {\r\n        N = number_of_players;\r\n    }\r\n    //---Contract management functions\r\n    \r\n    function ChangeOwnership(address _owner) onlyowner {\r\n        admin = _owner;\r\n    }\r\n    \r\n    function CollectAllFees() onlyowner {\r\n        if (fees == 0) throw;\r\n        admin.send(fees);\r\n        fees = 0;\r\n    }\r\n    \r\n    function CollectAndReduceFees(uint p) onlyowner {\r\n        if (fees == 0) feeFrac=feeFrac*50/100; //Reduce fees by half each call !.\r\n        admin.send(fees / 1000 * p);//send a percent of fees\r\n        fees -= fees / 1000 * p;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"ChangeOwnership\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"CancelRoundAndRefundAll\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WatchNumberOfPlayerInCurrentRound\",\"outputs\":[{\"name\":\"N\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WatchAppliedFeePercentage\",\"outputs\":[{\"name\":\"FeePercent\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WatchLastTime\",\"outputs\":[{\"name\":\"LastTimestamp\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"PlayerInfo\",\"outputs\":[{\"name\":\"Address\",\"type\":\"address\"},{\"name\":\"Payout\",\"type\":\"uint256\"},{\"name\":\"UserPaid\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"CollectAllFees\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"p\",\"type\":\"uint256\"}],\"name\":\"CollectAndReduceFees\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WatchCollectedFeesInSzabo\",\"outputs\":[{\"name\":\"Fees\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WatchBalance\",\"outputs\":[{\"name\":\"TotalBalance\",\"type\":\"uint256\"},{\"name\":\"info\",\"type\":\"string\"}],\"type\":\"function\"},{\"inputs\":[],\"type\":\"constructor\"}]","ContractName":"Honestgamble","CompilerVersion":"v0.3.1-2016-04-12-3ad5e82","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}