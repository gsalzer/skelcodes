{"status":"1","message":"OK","result":[{"SourceCode":"contract Ethstick {\r\n    \r\n//COPYRIGHT 2016 KATATSUKI ALL RIGHTS RESERVED\r\n//No part of this source code may be reproduced, distributed,\r\n//modified or transmitted in any form or by any means without\r\n//the prior written permission of the creator.\r\n    \r\n    address private pig;\r\n    \r\n    //Stored variables\r\n    uint private balance = 0;\r\n    uint private maxDeposit = 5;\r\n    uint private fee = 0;\r\n    uint private multiplier = 120;\r\n    uint private payoutOrder = 0;\r\n    uint private donkeysInvested = 0;\r\n    uint private investmentRecord = 0;\r\n    uint private carrots = 0;\r\n    uint private eligibleForFees = 5;\r\n    address private donkeyKing = 0x0;\r\n    \r\n    mapping (address => Donkey) private donkeys;\r\n    Entry[] private entries;\r\n    \r\n    Donkey[] private ranking;\r\n    \r\n    event NewKing(address ass);\r\n    \r\n    //Set owner on contract creation\r\n    function Ethstick() {\r\n        pig = msg.sender;\r\n        ranking.length = 10;\r\n    }\r\n\r\n    modifier onlypig { if (msg.sender == pig) _ }\r\n    \r\n    struct Donkey {\r\n        address addr;\r\n        string nickname;\r\n        uint invested;\r\n    }\r\n    \r\n    struct Entry {\r\n        address entryAddress;\r\n        uint deposit;\r\n        uint payout;\r\n        bool paid;\r\n    }\r\n\r\n    //Fallback function\r\n    function() {\r\n        init();\r\n    }\r\n    \r\n    function init() private{\r\n        //Only deposits >0.1ETH are allowed to join\r\n        if (msg.value < 100 finney) {\r\n            msg.sender.send(msg.value);\r\n            return;\r\n        }\r\n        \r\n        chase();\r\n    }\r\n    \r\n    //Chase the carrot\r\n    function chase() private {\r\n        \r\n        //Limit deposits to XETH\r\n        uint dValue = 100 finney;\r\n        if (msg.value > maxDeposit * 1 ether) {\r\n            \r\n        \tmsg.sender.send(msg.value - maxDeposit * 1 ether);\t\r\n        \tdValue = maxDeposit * 1 ether;\r\n        }\r\n        else { dValue = msg.value; }\r\n\r\n        //Add new users to the users array if he's a new player\r\n        addNewDonkey(msg.sender);\r\n        \r\n        //Add new entry to the entries array \r\n        entries.push(Entry(msg.sender, dValue, (dValue * (multiplier) / 100), false));\r\n           \r\n        //Update contract stats\r\n        balance += (dValue * (100 - fee)) / 100;\r\n        donkeysInvested += dValue;\r\n        donkeys[msg.sender].invested += dValue;\r\n        \r\n        \r\n        //Ranking logic: mindfuck edition\r\n        uint index = ranking.length - 1;\r\n        uint newEntry = donkeys[msg.sender].invested;\r\n        bool done = false;\r\n        bool samePosition = false;\r\n        uint existingAt = ranking.length - 1;\r\n\r\n        while (ranking[index].invested < newEntry && !done)\r\n        {\r\n            if (index > 0)\r\n            {\r\n                done = donkeys[ranking[index - 1].addr].invested > newEntry;\r\n                \r\n                if (ranking[index].addr == msg.sender)\r\n                    existingAt = index;\r\n                \r\n                if (done)\r\n                {\r\n                    if (ranking[index].addr == msg.sender)\r\n                    { \r\n                        ranking[index] = donkeys[msg.sender];\r\n                        samePosition = true;\r\n                    }\r\n                }\r\n              \r\n                if (!done) index--;\r\n            }\r\n            else\r\n            {\r\n                done = true;\r\n                index = 0;\r\n                if (ranking[index].addr == msg.sender || ranking[index].addr == address(0x0))\r\n                {\r\n                    ranking[index] = donkeys[msg.sender];\r\n                    samePosition = true;\r\n                }\r\n            }\r\n            \r\n        }\r\n        \r\n        if (!samePosition)\r\n        {\r\n            rankDown(index, existingAt);\r\n            ranking[index] = donkeys[msg.sender];\r\n        }\r\n        \r\n        \r\n        //Pay pending entries if the new balance allows for it\r\n        while (balance > entries[payoutOrder].payout) {\r\n            \r\n            uint payout = entries[payoutOrder].payout;\r\n            \r\n            entries[payoutOrder].entryAddress.send(payout);\r\n            entries[payoutOrder].paid = true;\r\n\r\n            balance -= payout;\r\n            \r\n            carrots++;\r\n            payoutOrder++;\r\n        }\r\n        \r\n        //Collect money from fees and possible leftovers from errors (actual balance untouched)\r\n        uint fees = this.balance - balance;\r\n        if (fees > 0)\r\n        {\r\n            if (entries.length >= 50 && entries.length % 5 == 0)\r\n            {\r\n                fees = dValue * fee / 100;\r\n                uint luckyDonkey = rand(eligibleForFees) - 1;\r\n                \r\n                if (ranking[luckyDonkey].addr != address(0x0))\r\n                    ranking[luckyDonkey].addr.send(fees);\r\n                else\r\n                    donkeyKing.send(fees);\r\n            }\r\n            else\r\n                pig.send(fees);\r\n        }        \r\n        \r\n        //Check for new Donkey King\r\n        if (donkeys[msg.sender].invested > investmentRecord)\r\n        {\r\n            donkeyKing = msg.sender;\r\n            NewKing(msg.sender);\r\n            investmentRecord = donkeys[msg.sender].invested;\r\n            \r\n        }\r\n        \r\n        if (ranking[0].addr != donkeys[donkeyKing].addr && ranking[0].addr != address(0x0))\r\n        {\r\n            ranking[1] = donkeys[ranking[0].addr];\r\n            ranking[0] = donkeys[donkeyKing];\r\n        }\r\n        \r\n    }\r\n    \r\n    function rankDown(uint index, uint offset) private\r\n    {\r\n        for (uint i = offset; i > index; i--)\r\n        {\r\n            ranking[i] = donkeys[ranking[i-1].addr];\r\n        }\r\n    }\r\n    \r\n    function addNewDonkey(address Address) private\r\n    {\r\n        if (donkeys[Address].addr == address(0))\r\n        {\r\n            donkeys[Address].addr = Address;\r\n            donkeys[Address].nickname = 'GullibleDonkey';\r\n            donkeys[Address].invested = 0;\r\n        }\r\n    }\r\n    \r\n    //Generate random number between 1 & max\r\n    uint256 constant private FACTOR =  1157920892373161954235709850086879078532699846656405640394575840079131296399;\r\n    function rand(uint max) constant private returns (uint256 result){\r\n        uint256 factor = FACTOR * 100 / max;\r\n        uint256 lastBlockNumber = block.number - 1;\r\n        uint256 hashVal = uint256(block.blockhash(lastBlockNumber));\r\n    \r\n        return uint256((uint256(hashVal) / factor)) % max + 1;\r\n    }\r\n    \r\n\r\n    //Contract management\r\n    function changePig(address newPig) onlypig {\r\n        pig = newPig;\r\n    }\r\n    \r\n    \r\n    function changeMultiplier(uint multi) onlypig {\r\n        if (multi < 110 || multi > 130) \r\n            throw;\r\n        \r\n        multiplier = multi;\r\n    }\r\n    \r\n    function changeFee(uint newFee) onlypig {\r\n        if (newFee > 5) \r\n            throw;\r\n        \r\n        fee = newFee;\r\n    }\r\n    \r\n    function changeMaxDeposit(uint max) onlypig {\r\n        if (max < 1 || max > 10)\r\n            throw;\r\n            \r\n        maxDeposit = max;\r\n    }\r\n    \r\n    function changeRankingSize(uint size) onlypig {\r\n        if (size < 5 || size > 100)\r\n            throw;\r\n            \r\n        ranking.length = size;\r\n    }\r\n    \r\n    function changeEligibleDonkeys(uint number) onlypig {\r\n        if (number < 5 || number > 15)\r\n            throw;\r\n            \r\n        eligibleForFees = number;\r\n    }\r\n    \r\n    \r\n    //JSON functions\r\n    function setNickname(string name) {\r\n        addNewDonkey(msg.sender);\r\n        \r\n        if (bytes(name).length >= 2 && bytes(name).length <= 16)\r\n            donkeys[msg.sender].nickname = name;\r\n    }\r\n    \r\n    function carrotsCaught() constant returns (uint amount, string info) {\r\n        amount = carrots;\r\n        info = 'The number of payouts sent to participants.';\r\n    }\r\n    \r\n    function currentBalance() constant returns (uint theBalance, string info) {\r\n        theBalance = balance / 1 finney;\r\n        info = 'The balance of the contract in Finneys.';\r\n    }\r\n    \r\n    function theDonkeyKing() constant returns (address king, string nickname, uint totalInvested, string info) {\r\n        king = donkeyKing;  \r\n        nickname = donkeys[donkeyKing].nickname;\r\n        totalInvested = donkeys[donkeyKing].invested / 1 ether;\r\n        info = 'The greediest of all donkeys. You go, ass!';\r\n    }\r\n    \r\n    function donkeyName(address Address) constant returns (string nickname) {\r\n        nickname = donkeys[Address].nickname;\r\n    }\r\n    \r\n    function currentMultiplier() constant returns (uint theMultiplier, string info) {\r\n        theMultiplier = multiplier;\r\n        info = 'The multiplier applied to all deposits (x100). It determines the amount of money you will get when you catch the carrot.';\r\n    }\r\n    \r\n    function generousFee() constant returns (uint feePercentage, string info) {\r\n        feePercentage = fee;\r\n        info = 'The generously modest fee percentage applied to all deposits. It can change to lure more donkeys (max 5%).';\r\n    }\r\n    \r\n    function nextPayoutGoal() constant returns (uint finneys, string info) {\r\n        finneys = (entries[payoutOrder].payout - balance) / 1 finney;\r\n        info = 'The amount of Finneys (Ethers * 1000) that need to be deposited for the next donkey to catch his carrot.';\r\n    }\r\n    \r\n    function totalEntries() constant returns (uint count, string info) {\r\n        count = entries.length;\r\n        info = 'The number of times the carrot was chased by gullible donkeys.';\r\n    }\r\n    \r\n    function entryDetails(uint index) constant returns (address donkey, string nickName, uint deposit, uint payout, bool paid, string info)\r\n    {\r\n        if (index < entries.length || index == 0 && entries.length > 0) {\r\n            donkey = entries[index].entryAddress;\r\n            nickName = donkeys[entries[index].entryAddress].nickname;\r\n            deposit = entries[index].deposit / 1 finney;\r\n            payout = entries[index].payout / 1 finney;\r\n            paid = entries[index].paid;\r\n            info = 'Entry info: donkey address, name, deposit, expected payout in Finneys, payout status.';\r\n        }\r\n    }\r\n    \r\n    function donkeyRanking(uint index) constant returns(address donkey, string nickname, uint totalInvested, string info)\r\n    {\r\n        if (index < ranking.length)\r\n        {\r\n            donkey = ranking[index].addr;\r\n            nickname = donkeys[ranking[index].addr].nickname;\r\n            totalInvested = donkeys[ranking[index].addr].invested / 1 ether;\r\n            info = 'Top donkey stats: address, name, ethers deposited. Lower index number means higher rank.';\r\n        }\r\n    }\r\n    \r\n    function donkeyInvested(address donkey) constant returns(uint invested, string info) {\r\n        invested = donkeys[donkey].addr != address(0x0) ? donkeys[donkey].invested / 1 ether : 0;\r\n        info = 'The amount of Ethers the donkey has chased carrots with.';\r\n    }\r\n    \r\n    function totalInvested() constant returns(uint invested, string info) {\r\n        invested = donkeysInvested / 1 ether;\r\n        info = 'The combined investments of all donkeys in Ethers.';\r\n    }\r\n    \r\n    function currentDepositLimit() constant returns(uint ethers, string info) {\r\n        ethers = maxDeposit;\r\n        info = 'The current maximum number of Ethers you may deposit at once.';\r\n    }\r\n    \r\n    function donkeysEligibleForFees() constant returns(uint top, string info) {\r\n        top = eligibleForFees;\r\n        info = 'The number of donkeys in the ranking that are eligible to receive fees.';\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"currentDepositLimit\",\"outputs\":[{\"name\":\"ethers\",\"type\":\"uint256\"},{\"name\":\"info\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"changeRankingSize\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"}],\"name\":\"setNickname\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"donkeysEligibleForFees\",\"outputs\":[{\"name\":\"top\",\"type\":\"uint256\"},{\"name\":\"info\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"donkeyRanking\",\"outputs\":[{\"name\":\"donkey\",\"type\":\"address\"},{\"name\":\"nickname\",\"type\":\"string\"},{\"name\":\"totalInvested\",\"type\":\"uint256\"},{\"name\":\"info\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextPayoutGoal\",\"outputs\":[{\"name\":\"finneys\",\"type\":\"uint256\"},{\"name\":\"info\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"changeEligibleDonkeys\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"generousFee\",\"outputs\":[{\"name\":\"feePercentage\",\"type\":\"uint256\"},{\"name\":\"info\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"name\":\"invested\",\"type\":\"uint256\"},{\"name\":\"info\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"changeMaxDeposit\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"carrotsCaught\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"info\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"changeFee\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentMultiplier\",\"outputs\":[{\"name\":\"theMultiplier\",\"type\":\"uint256\"},{\"name\":\"info\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEntries\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"},{\"name\":\"info\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"theDonkeyKing\",\"outputs\":[{\"name\":\"king\",\"type\":\"address\"},{\"name\":\"nickname\",\"type\":\"string\"},{\"name\":\"totalInvested\",\"type\":\"uint256\"},{\"name\":\"info\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"donkey\",\"type\":\"address\"}],\"name\":\"donkeyInvested\",\"outputs\":[{\"name\":\"invested\",\"type\":\"uint256\"},{\"name\":\"info\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPig\",\"type\":\"address\"}],\"name\":\"changePig\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"Address\",\"type\":\"address\"}],\"name\":\"donkeyName\",\"outputs\":[{\"name\":\"nickname\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentBalance\",\"outputs\":[{\"name\":\"theBalance\",\"type\":\"uint256\"},{\"name\":\"info\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"multi\",\"type\":\"uint256\"}],\"name\":\"changeMultiplier\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"entryDetails\",\"outputs\":[{\"name\":\"donkey\",\"type\":\"address\"},{\"name\":\"nickName\",\"type\":\"string\"},{\"name\":\"deposit\",\"type\":\"uint256\"},{\"name\":\"payout\",\"type\":\"uint256\"},{\"name\":\"paid\",\"type\":\"bool\"},{\"name\":\"info\",\"type\":\"string\"}],\"type\":\"function\"},{\"inputs\":[],\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ass\",\"type\":\"address\"}],\"name\":\"NewKing\",\"type\":\"event\"}]","ContractName":"Ethstick","CompilerVersion":"v0.3.0-2016-03-11-1f9578c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}