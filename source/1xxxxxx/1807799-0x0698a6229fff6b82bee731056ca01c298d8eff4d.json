{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * Spork Token Contracts\r\n * See Spork contract below for more detail.\r\n *\r\n * The DAO and Spork is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The DAO and Spork is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU lesser General Public License for more details.\r\n *\r\n * http://www.gnu.org/licenses/\r\n *\r\n * credit\r\n *   The DAO, Slock.it, Ethereum Foundation, EthCore, Consensys, pseudonymous\r\n *   rebels everywhere, and every lunch spot with proper eating utensils. ?\r\n */\r\n\r\n/**\r\n * @title TokenInterface\r\n * @notice ERC 20 token standard and DAO token interface.\r\n */\r\ncontract TokenInterface {\r\n\r\n    event Transfer(\r\n        address indexed _from,\r\n        address indexed _to,\r\n        uint256 _amount);\r\n\r\n    event Approval(\r\n        address indexed _owner,\r\n        address indexed _spender,\r\n        uint256 _amount);\r\n\r\n    mapping (address => // owner\r\n        uint256) balances;\r\n\r\n    mapping (address => // owner\r\n    mapping (address => // spender\r\n        uint256)) allowed;\r\n\r\n    uint256 public totalSupply;\r\n\r\n    function balanceOf(address _owner)\r\n    constant\r\n    returns (uint256 balance);\r\n\r\n    function transfer(address _to, uint256 _amount)\r\n    returns (bool success);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _amount)\r\n    returns (bool success);\r\n\r\n    function approve(address _spender, uint256 _amount)\r\n    returns (bool success);\r\n\r\n    function allowance(address _owner, address _spender)\r\n    constant\r\n    returns (uint256 remaining);\r\n\r\n}\r\n\r\n/**\r\n * @title Spork\r\n *\r\n * @notice A rogue upgrade token for The DAO. There is nothing safe about this\r\n *   contract or this life so strap in, bitches. You are responsible for you.\r\n *   A Spork is minted through burning DAO tokens. This is irreversible and for\r\n *   entertainment purposes. So why would you do this? Do it for love, do it\r\n *   for So Tokey Nada Mojito, do it for the lulz; just do it with conviction!\r\n *\r\n * usage\r\n *   1. Use The DAO to grant an allowance of DAO for the Spork contract.\r\n *      + `DAO.approve(spork_contract_address, amount_of_DAO_to_burn)`\r\n *      + Only grant the amount of DAO you are ready to destroy forever.\r\n *   2. Use the Spork mint function to ...\r\n *      1. Burn an amount of DAO up to the amount approved in the previous step.\r\n *      2. Mint an equivalent amount of Spork.\r\n *      3. Assign Spork tokens to the sender account.\r\n *   3. You now have Sporks. Dig in!\r\n */\r\ncontract Spork is TokenInterface {\r\n\r\n    // crash and burn\r\n    address constant TheDAO = 0xbb9bc244d798123fde783fcc1c72d3bb8c189413;\r\n\r\n    event Mint(\r\n        address indexed _sender,\r\n        uint256 indexed _amount,\r\n        string _lulz);\r\n\r\n    // vanity attributes\r\n    string public name = \"Spork\";\r\n    string public symbol = \"SPRK\";\r\n    string public version = \"Spork:0.1\";\r\n    uint8 public decimals = 0;\r\n\r\n    // @see {Spork.mint}\r\n    function () {\r\n        throw; // this is a coin, not a wallet.\r\n    }\r\n\r\n    /**\r\n     * @notice Burn DAO tokens in exchange for Spork tokens\r\n     * @param _amount Amount of DAO to burn and equivalent Spork to mint\r\n     * @param _lulz If you gotta go, go with a smile! ?\r\n     * @return Determine if request was successful\r\n     */\r\n    function mint(uint256 _amount, string _lulz)\r\n    returns (bool success) {\r\n        if (totalSupply + _amount <= totalSupply)\r\n            return false; // zero or rollover value\r\n\r\n        if (!TokenInterface(TheDAO).transferFrom(msg.sender, this, _amount))\r\n            return false; // unable to retrieve DAO tokens for sender\r\n\r\n        balances[msg.sender] += _amount;\r\n        totalSupply += _amount;\r\n\r\n        Mint(msg.sender, _amount, _lulz);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer Spork tokens from `msg.sender` to another account.\r\n     * @param _to Account receiving tokens\r\n     * @param _amount Amount of tokens to transfer\r\n     * @return Determine if request was successful\r\n     */\r\n    function transfer(address _to, uint256 _amount)\r\n    returns (bool success) {\r\n        if (balances[_to] + _amount <= balances[_to])\r\n            return false; // zero or rollover value\r\n\r\n        if (balances[msg.sender] < _amount)\r\n            return false; // party foul, sender does not have enough sporks\r\n\r\n        balances[msg.sender] -= _amount;\r\n        balances[_to] += _amount;\r\n\r\n        Transfer(msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer Spork tokens from one account to another\r\n     * @param _from Account holding tokens for which `msg.sender` is an approved\r\n     *              spender with an allowance of at least `_amount` tokens\r\n     * @param _to Account receiving tokens\r\n     * @param _amount Amount of tokens to transfer\r\n     * @return Determine if request was successful\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _amount)\r\n    returns (bool success) {\r\n        if (balances[_to] + _amount <= balances[_to])\r\n            return false; // zero or rollover value\r\n\r\n        if (allowed[_from][msg.sender] < _amount)\r\n            return false; // sender does not have enough allowance\r\n\r\n        if (balances[msg.sender] < _amount)\r\n            return false; // party foul, sender does not have enough sporks\r\n\r\n        balances[_to] += _amount;\r\n        balances[_from] -= _amount;\r\n        allowed[_from][msg.sender] -= _amount;\r\n\r\n        Transfer(_from, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Determine the Spork token balance for an account\r\n     * @param _owner Account holding tokens\r\n     * @return Token balance\r\n     */\r\n    function balanceOf(address _owner)\r\n    constant\r\n    returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /**\r\n     * @notice Approve an address to spend tokens on your behalf\r\n     * @param _spender Account to spend tokens on behalf of `msg.sender`\r\n     * @param _amount Maximum amount `_spender` can transfer from `msg.sender`\r\n     * @return Determine if request was successful\r\n     */\r\n    function approve(address _spender, uint256 _amount)\r\n    returns (bool success) {\r\n        allowed[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Maximum amount a spender can withdraw from an account\r\n     * @param _owner The account holding tokens\r\n     * @param _spender The account spending tokens\r\n     * @return Remaining allowance `_spender` can withdraw from `_owner`\r\n     */\r\n    function allowance(address _owner, address _spender)\r\n    constant\r\n    returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_lulz\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_lulz\",\"type\":\"string\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Spork","CompilerVersion":"v0.3.1-2016-04-18-81ae2a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}