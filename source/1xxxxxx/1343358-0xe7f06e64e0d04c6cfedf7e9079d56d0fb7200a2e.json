{"status":"1","message":"OK","result":[{"SourceCode":"///:::::::::::::::::::::::::::::::::::::::::::::::::::::::Welcome to MultiplyX10!\r\n//\r\n// Multiply your Ether by 10x!!\r\n//\r\n// Minimum Deposit: 2 Ether (2000 Finney)\r\n//\r\n// NO HOUSE FEES!!\r\n//\r\n// Everyone gets paid in the line! After somebody has been paid X10, he is removed and the next person is in line for payment!\r\n//\r\n// Multiply your ETH Now!\r\n//\r\n///:::::::::::::::::::::::::::::::::::::::::::::::::::::::Start\r\n\r\ncontract MultiplyX10 {\r\n\r\n  struct InvestorArray { address EtherAddress; uint Amount; }\r\n  InvestorArray[] public depositors;\r\n\r\n///:::::::::::::::::::::::::::::::::::::::::::::::::::::::Variables\r\n\r\n  uint public Total_Investors=0;\r\n  uint public Balance = 0;\r\n  uint public Total_Deposited=0;\r\n  uint public Total_Paid_Out=0;\r\n  uint public Multiplier=10;\r\n  string public Message=\"Welcome Investor! Multiply your ETH Now!\";\r\n\r\n///:::::::::::::::::::::::::::::::::::::::::::::::::::::::Init\r\n\r\n  function() { enter(); }\r\n  \r\n//:::::::::::::::::::::::::::::::::::::::::::::::::::::::Enter\r\n\r\n  function enter() {\r\n    if (msg.value > 2 ether) {\r\n\r\n    uint Amount=msg.value;\t\t\t\t\t\t\t\t//set amount to how much the investor deposited\r\n    Total_Investors=depositors.length+1;   \t\t\t\t\t //count investors\r\n    depositors.length += 1;                        \t\t\t\t\t\t//increase array lenght\r\n    depositors[depositors.length-1].EtherAddress = msg.sender; //add net investor's address\r\n    depositors[depositors.length-1].Amount = Amount;          //add net investor's amount\r\n    Balance += Amount;               \t\t\t\t\t\t// balance update\r\n    Total_Deposited+=Amount;       \t\t\t\t\t\t//update deposited Amount\r\n    uint payment;\r\n    uint index=0;\r\n\r\n    while (Balance > (depositors[index].Amount * Multiplier) && index<Total_Investors)\r\n     {\r\n\r\n\tif(depositors[index].Amount!=0)\r\n\t{\r\n      payment = depositors[index].Amount *Multiplier;                           //calculate pay out\r\n      depositors[index].EtherAddress.send(payment);                        //send pay out to investor\r\n      Balance -= depositors[index].Amount *Multiplier;                         //balance update\r\n      Total_Paid_Out += depositors[index].Amount *Multiplier;                 //update paid out amount   \r\n\tdepositors[index].Amount=0;                                                               //remove investor from the game after he is paid out! He must invest again if he wants to earn more!\r\n\t}\r\n\tindex++; //go to next investor\r\n\r\n      }\r\n      //---end\r\n  }\r\n}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"Balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Message\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Total_Deposited\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Total_Paid_Out\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Total_Investors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depositors\",\"outputs\":[{\"name\":\"EtherAddress\",\"type\":\"address\"},{\"name\":\"Amount\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enter\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Multiplier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"}]","ContractName":"MultiplyX10","CompilerVersion":"v0.3.1-2016-04-12-3ad5e82","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}