{"status":"1","message":"OK","result":[{"SourceCode":"contract theultimatepyramid {\r\n\r\n  struct Person {\r\n      address etherAddress;\r\n      uint amount;\r\n  }\r\n\r\n  Person[] public persons;\r\n\r\n  uint public payoutIdx = 0;\r\n  uint public collectedFees;\r\n  uint public balance = 0;\r\n\r\n  address public owner;\r\n\r\n\r\n  modifier onlyowner { if (msg.sender == owner) _ }\r\n\r\n\r\n  function theultimatepyramid() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  function() {\r\n    enter();\r\n  }\r\n  \r\n  function enter() {\r\n    if (msg.value < 80/100 ether) {\r\n        msg.sender.send(msg.value);\r\n        return;\r\n    }\r\n\t\r\n\t\tuint amount;\r\n\t\tif (msg.value > 40 ether) {\r\n\t\t\tmsg.sender.send(msg.value - 40 ether);\t\r\n\t\t\tamount = 40 ether;\r\n    }\r\n\t\telse {\r\n\t\t\tamount = msg.value;\r\n\t\t}\r\n\r\n\r\n    uint idx = persons.length;\r\n    persons.length += 1;\r\n    persons[idx].etherAddress = msg.sender;\r\n    persons[idx].amount = amount;\r\n \r\n    \r\n    if (idx != 0) {\r\n      collectedFees += 0;\r\n\t  owner.send(collectedFees);\r\n\t  collectedFees = 0;\r\n      balance += amount;\r\n    } \r\n    else {\r\n      balance += amount;\r\n    }\r\n\r\n\r\n    while (balance > persons[payoutIdx].amount / 100 * 180) {\r\n      uint transactionAmount = persons[payoutIdx].amount / 100 * 180;\r\n      persons[payoutIdx].etherAddress.send(transactionAmount);\r\n\r\n      balance -= transactionAmount;\r\n      payoutIdx += 1;\r\n    }\r\n  }\r\n\r\n\r\n  function setOwner(address _owner) onlyowner {\r\n      owner = _owner;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collectedFees\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"persons\",\"outputs\":[{\"name\":\"etherAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payoutIdx\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enter\",\"outputs\":[],\"type\":\"function\"},{\"inputs\":[],\"type\":\"constructor\"}]","ContractName":"theultimatepyramid","CompilerVersion":"v0.3.0-2016-03-30-c2cf806","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}