{"status":"1","message":"OK","result":[{"SourceCode":"// version 1.0\r\ncontract Randao {\r\n  struct Participant {\r\n      uint256   secret;\r\n      bytes32   commitment;\r\n      uint256   reward;\r\n      bool      revealed;\r\n      bool      rewarded;\r\n  }\r\n\r\n  struct Consumer {\r\n    address caddr;\r\n    uint256 bountypot;\r\n  }\r\n\r\n  struct Campaign {\r\n      uint32    bnum;\r\n      uint96    deposit;\r\n      uint16    commitBalkline;\r\n      uint16    commitDeadline;\r\n\r\n      uint256   random;\r\n      bool      settled;\r\n      uint256   bountypot;\r\n      uint32    commitNum;\r\n      uint32    revealsNum;\r\n\r\n      mapping (address => Consumer) consumers;\r\n      mapping (address => Participant) participants;\r\n  }\r\n\r\n  uint256 public numCampaigns;\r\n  Campaign[] public campaigns;\r\n  address public founder;\r\n\r\n  // Prevents methods from perfoming any value transfer\r\n  modifier noEther() { if (msg.value > 0) throw; _}\r\n\r\n  modifier blankAddress(address _n) { if (_n != 0) throw; _}\r\n\r\n  modifier moreThanZero(uint256 _deposit) { if (_deposit <= 0) throw; _}\r\n\r\n  modifier notBeBlank(bytes32 _s) { if (_s == \"\") throw;  _}\r\n\r\n  modifier beBlank(bytes32 _s) { if (_s != \"\") throw; _}\r\n\r\n  modifier beFalse(bool _t) { if (_t) throw; _}\r\n\r\n  function Randao() {\r\n      founder = msg.sender;\r\n  }\r\n\r\n  event CampaignAdded(uint256 indexed campaignID,\r\n                      address indexed from,\r\n                      uint32 indexed bnum,\r\n                      uint96 deposit,\r\n                      uint16 commitBalkline,\r\n                      uint16 commitDeadline,\r\n                      uint256 bountypot);\r\n\r\n  modifier timeLineCheck(uint32 _bnum, uint16 _commitBalkline, uint16 _commitDeadline) {\r\n      if (block.number >= _bnum) throw;\r\n      if (_commitBalkline <= 0) throw;\r\n      if (_commitDeadline <= 0) throw;\r\n      if (_commitDeadline >= _commitBalkline) throw;\r\n      if (block.number >= _bnum - _commitBalkline) throw;\r\n      _\r\n  }\r\n\r\n  function newCampaign(\r\n      uint32 _bnum,\r\n      uint96 _deposit,\r\n      uint16 _commitBalkline,\r\n      uint16 _commitDeadline\r\n  ) timeLineCheck(_bnum, _commitBalkline, _commitDeadline)\r\n    moreThanZero(_deposit) external returns (uint256 _campaignID) {\r\n      _campaignID = campaigns.length++;\r\n      Campaign c = campaigns[_campaignID];\r\n      numCampaigns++;\r\n      c.bnum = _bnum;\r\n      c.deposit = _deposit;\r\n      c.commitBalkline = _commitBalkline;\r\n      c.commitDeadline = _commitDeadline;\r\n      c.bountypot = msg.value;\r\n      c.consumers[msg.sender] = Consumer(msg.sender, msg.value);\r\n      CampaignAdded(_campaignID, msg.sender, _bnum, _deposit, _commitBalkline, _commitDeadline, msg.value);\r\n  }\r\n\r\n  event Follow(uint256 indexed CampaignId, address indexed from, uint256 bountypot);\r\n\r\n  function follow(uint256 _campaignID)\r\n    external returns (bool) {\r\n      Campaign c = campaigns[_campaignID];\r\n      Consumer consumer = c.consumers[msg.sender];\r\n      return followCampaign(_campaignID, c, consumer);\r\n  }\r\n\r\n  modifier checkFollowPhase(uint256 _bnum, uint16 _commitDeadline) {\r\n      if (block.number > _bnum - _commitDeadline) throw;\r\n      _\r\n  }\r\n\r\n  function followCampaign(\r\n      uint256 _campaignID,\r\n      Campaign storage c,\r\n      Consumer storage consumer\r\n  ) checkFollowPhase(c.bnum, c.commitDeadline)\r\n    blankAddress(consumer.caddr) internal returns (bool) {\r\n      c.bountypot += msg.value;\r\n      c.consumers[msg.sender] = Consumer(msg.sender, msg.value);\r\n      Follow(_campaignID, msg.sender, msg.value);\r\n      return true;\r\n  }\r\n\r\n  event Commit(uint256 indexed CampaignId, address indexed from, bytes32 commitment);\r\n\r\n  function commit(uint256 _campaignID, bytes32 _hs) notBeBlank(_hs) external {\r\n      Campaign c = campaigns[_campaignID];\r\n      commitmentCampaign(_campaignID, _hs, c);\r\n  }\r\n\r\n  modifier checkDeposit(uint256 _deposit) { if (msg.value != _deposit) throw; _}\r\n\r\n  modifier checkCommitPhase(uint256 _bnum, uint16 _commitBalkline, uint16 _commitDeadline) {\r\n      if (block.number < _bnum - _commitBalkline) throw;\r\n      if (block.number > _bnum - _commitDeadline) throw;\r\n      _\r\n  }\r\n\r\n  function commitmentCampaign(\r\n      uint256 _campaignID,\r\n      bytes32 _hs,\r\n      Campaign storage c\r\n  ) checkDeposit(c.deposit)\r\n    checkCommitPhase(c.bnum, c.commitBalkline, c.commitDeadline)\r\n    beBlank(c.participants[msg.sender].commitment) internal {\r\n      c.participants[msg.sender] = Participant(0, _hs, 0, false, false);\r\n      c.commitNum++;\r\n      Commit(_campaignID, msg.sender, _hs);\r\n  }\r\n\r\n  // For test\r\n  function getCommitment(uint256 _campaignID) noEther external returns (bytes32) {\r\n      Campaign c = campaigns[_campaignID];\r\n      Participant p = c.participants[msg.sender];\r\n      return p.commitment;\r\n  }\r\n\r\n  event Reveal(uint256 indexed CampaignId, address indexed from, uint256 secret);\r\n\r\n  function reveal(uint256 _campaignID, uint256 _s) noEther external {\r\n      Campaign c = campaigns[_campaignID];\r\n      Participant p = c.participants[msg.sender];\r\n      revealCampaign(_campaignID, _s, c, p);\r\n  }\r\n\r\n  modifier checkRevealPhase(uint256 _bnum, uint16 _commitDeadline) {\r\n      if (block.number <= _bnum - _commitDeadline) throw;\r\n      if (block.number >= _bnum) throw;\r\n      _\r\n  }\r\n\r\n  modifier checkSecret(uint256 _s, bytes32 _commitment) {\r\n      if (sha3(_s) != _commitment) throw;\r\n      _\r\n  }\r\n\r\n  function revealCampaign(\r\n    uint256 _campaignID,\r\n    uint256 _s,\r\n    Campaign storage c,\r\n    Participant storage p\r\n  ) checkRevealPhase(c.bnum, c.commitDeadline)\r\n    checkSecret(_s, p.commitment)\r\n    beFalse(p.revealed) internal {\r\n      p.secret = _s;\r\n      p.revealed = true;\r\n      c.revealsNum++;\r\n      c.random ^= p.secret;\r\n      Reveal(_campaignID, msg.sender, _s);\r\n  }\r\n\r\n  modifier bountyPhase(uint256 _bnum){ if (block.number < _bnum) throw; _}\r\n\r\n  function getRandom(uint256 _campaignID) noEther external returns (uint256) {\r\n      Campaign c = campaigns[_campaignID];\r\n      return returnRandom(c);\r\n  }\r\n\r\n  function returnRandom(Campaign storage c) bountyPhase(c.bnum) internal returns (uint256) {\r\n      if (c.revealsNum == c.commitNum) {\r\n          c.settled = true;\r\n          return c.random;\r\n      }\r\n  }\r\n\r\n  // The commiter get his bounty and deposit, there are three situations\r\n  // 1. Campaign succeeds.Every revealer gets his deposit and the bounty.\r\n  // 2. Someone revels, but some does not,Campaign fails.\r\n  // The revealer can get the deposit and the fines are distributed.\r\n  // 3. Nobody reveals, Campaign fails.Every commiter can get his deposit.\r\n  function getMyBounty(uint256 _campaignID) noEther external {\r\n      Campaign c = campaigns[_campaignID];\r\n      Participant p = c.participants[msg.sender];\r\n      transferBounty(c, p);\r\n  }\r\n\r\n  function transferBounty(\r\n      Campaign storage c,\r\n      Participant storage p\r\n    ) bountyPhase(c.bnum)\r\n      beFalse(p.rewarded) internal {\r\n      if (c.revealsNum > 0) {\r\n          if (p.revealed) {\r\n              uint256 share = calculateShare(c);\r\n              returnReward(share, c, p);\r\n          }\r\n      // Nobody reveals\r\n      } else {\r\n          returnReward(0, c, p);\r\n      }\r\n  }\r\n\r\n  function calculateShare(Campaign c) internal returns (uint256 _share) {\r\n      // Someone does not reveal. Campaign fails.\r\n      if (c.commitNum > c.revealsNum) {\r\n          _share = fines(c) / c.revealsNum;\r\n      // Campaign succeeds.\r\n      } else {\r\n          _share = c.bountypot / c.revealsNum;\r\n      }\r\n  }\r\n\r\n  function returnReward(\r\n      uint256 _share,\r\n      Campaign storage c,\r\n      Participant storage p\r\n  ) internal {\r\n      p.reward = _share;\r\n      p.rewarded = true;\r\n      if (!msg.sender.send(_share + c.deposit)) {\r\n          p.reward = 0;\r\n          p.rewarded = false;\r\n      }\r\n  }\r\n\r\n  function fines(Campaign c) internal returns (uint256) {\r\n      return (c.commitNum - c.revealsNum) * c.deposit;\r\n  }\r\n\r\n  // If the campaign fails, the consumers can get back the bounty.\r\n  function refundBounty(uint256 _campaignID) noEther external {\r\n      Campaign c = campaigns[_campaignID];\r\n      returnBounty(_campaignID, c);\r\n  }\r\n\r\n  modifier campaignFailed(uint32 _commitNum, uint32 _revealsNum) {\r\n      if (_commitNum == _revealsNum && _commitNum != 0) throw;\r\n      _\r\n  }\r\n\r\n  modifier beConsumer(address _caddr) {\r\n      if (_caddr != msg.sender) throw;\r\n      _\r\n  }\r\n\r\n  function returnBounty(uint256 _campaignID, Campaign storage c)\r\n    bountyPhase(c.bnum)\r\n    campaignFailed(c.commitNum, c.revealsNum)\r\n    beConsumer(c.consumers[msg.sender].caddr) internal {\r\n      uint256 bountypot = c.consumers[msg.sender].bountypot;\r\n      c.consumers[msg.sender].bountypot = 0;\r\n      if (!msg.sender.send(bountypot)) {\r\n          c.consumers[msg.sender].bountypot = bountypot;\r\n      }\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"campaigns\",\"outputs\":[{\"name\":\"bnum\",\"type\":\"uint32\"},{\"name\":\"deposit\",\"type\":\"uint96\"},{\"name\":\"commitBalkline\",\"type\":\"uint16\"},{\"name\":\"commitDeadline\",\"type\":\"uint16\"},{\"name\":\"random\",\"type\":\"uint256\"},{\"name\":\"settled\",\"type\":\"bool\"},{\"name\":\"bountypot\",\"type\":\"uint256\"},{\"name\":\"commitNum\",\"type\":\"uint32\"},{\"name\":\"revealsNum\",\"type\":\"uint32\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numCampaigns\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_campaignID\",\"type\":\"uint256\"}],\"name\":\"follow\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_campaignID\",\"type\":\"uint256\"}],\"name\":\"refundBounty\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_campaignID\",\"type\":\"uint256\"}],\"name\":\"getCommitment\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_campaignID\",\"type\":\"uint256\"},{\"name\":\"_s\",\"type\":\"uint256\"}],\"name\":\"reveal\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bnum\",\"type\":\"uint32\"},{\"name\":\"_deposit\",\"type\":\"uint96\"},{\"name\":\"_commitBalkline\",\"type\":\"uint16\"},{\"name\":\"_commitDeadline\",\"type\":\"uint16\"}],\"name\":\"newCampaign\",\"outputs\":[{\"name\":\"_campaignID\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_campaignID\",\"type\":\"uint256\"}],\"name\":\"getRandom\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_campaignID\",\"type\":\"uint256\"}],\"name\":\"getMyBounty\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_campaignID\",\"type\":\"uint256\"},{\"name\":\"_hs\",\"type\":\"bytes32\"}],\"name\":\"commit\",\"outputs\":[],\"type\":\"function\"},{\"inputs\":[],\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"campaignID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"bnum\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"deposit\",\"type\":\"uint96\"},{\"indexed\":false,\"name\":\"commitBalkline\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"commitDeadline\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"bountypot\",\"type\":\"uint256\"}],\"name\":\"CampaignAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"CampaignId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"bountypot\",\"type\":\"uint256\"}],\"name\":\"Follow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"CampaignId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"commitment\",\"type\":\"bytes32\"}],\"name\":\"Commit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"CampaignId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"secret\",\"type\":\"uint256\"}],\"name\":\"Reveal\",\"type\":\"event\"}]","ContractName":"Randao","CompilerVersion":"v0.3.5-2016-07-21-6610add","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}