{"status":"1","message":"OK","result":[{"SourceCode":"//***********************************ETH BANK\r\n//\r\n// It's an EthBank, every depositor earns interest on their deposits when a new depositor joins!\r\n//\r\n// The interest rate is defined by the \"Interest_Rate\" variable, and is initially set to 2%, and may be changed later!\r\n//\r\n// The Bank will exist for long because it only pays out when the balance is above 60%. And if the balance is below 80% it pays out only half the interest.\r\n//\r\n// Minimum Deposit: 0.2 Ether (200 Finney)\r\n//\r\n//\r\n// It is a long term project, so have fun saving your Ether here!\r\n//\r\n//***********************************START\r\ncontract EthBank {\r\n\r\n  struct InvestorArray \r\n\t{\r\n      \taddress etherAddress;\r\n      \tuint amount;\r\n  \t}\r\n\r\n  InvestorArray[] public depositors;\r\n\r\n//********************************************PUBLIC VARIABLES\r\n\r\n  uint public Total_Savers=0;\r\n  uint public Fees=0;\r\n  uint public Balance = 0;\r\n  uint public Total_Deposited=0;\r\n  uint public Total_Paid_Out=0;\r\n  uint public Interest_Rate=2; // the interest rate payout for deposits!\r\nstring public Message=\"Welcome to EthBank\";\r\n\t\r\n  address public owner;\r\n\r\n  // simple single-sig function modifier\r\n  modifier onlyowner { if (msg.sender == owner) _ }\r\n\r\n//********************************************INIT\r\n\r\n  function EthBank() {\r\n    owner = 0xEe462A6717f17C57C826F1ad9b4d3813495296C9;  //this contract is an attachment to EthVentures\r\n  }\r\n\r\n//********************************************TRIGGER\r\n\r\n  function() {\r\n    enter();\r\n  }\r\n  \r\n//********************************************ENTER\r\n\r\n  function enter() {\r\n    if (msg.value > 200 finney) {\r\n\r\n    uint amount=msg.value;\r\n\r\n\r\n    // add a new participant to the system and calculate total players\r\n    Total_Savers=depositors.length+1;\r\n    depositors.length += 1;\r\n    depositors[depositors.length-1].etherAddress = msg.sender;\r\n    depositors[depositors.length-1].amount = amount;\r\n\r\n\r\n\r\n    // collect Fees and update contract Balance and deposited amount\r\n      \tFees  = amount * Interest_Rate / 100;    // fee to the owner\r\n      \tTotal_Deposited+=amount;       \t\t//update deposited amount\r\n\tamount-=amount * Interest_Rate / 100;\t// minus the fee from amount\r\n      \tBalance += amount;               // Balance update\r\n\r\n\r\n//********************************EthVenturesFinal Fee Plugin\r\n    // payout Fees to the owner\r\n     if (Fees != 0) \r\n     {\r\n\tuint minimal= 1990 finney;\r\n\tif(Fees<minimal)\r\n\t{\r\n      \towner.send(Fees);\t\t//send fee to owner\r\n\tTotal_Paid_Out+=Fees;        //update paid out amount\r\n\t}\r\n\telse\r\n\t{\r\n\tuint Times= Fees/minimal;\r\n\r\n\tfor(uint i=0; i<Times;i++)   // send the Fees out in packets compatible to EthVentures dividend function\r\n\tif(Fees>0)\r\n\t{\r\n\towner.send(minimal);\t\t//send fee to owner\r\n\tTotal_Paid_Out+=Fees;        //update paid out amount\r\n\tFees-=minimal;\r\n\t}\r\n\t}\r\n     }\r\n//********************************End Plugin \r\n //loop variables\r\n    uint payout;\r\n    uint nr=0;\r\n\r\nif(Total_Deposited * 80/100 < Balance )  //if balance is at 80% or higher, then pay depositors\r\n{\r\n  \r\n\r\n\t\r\n    while (Balance > depositors[nr].amount * Interest_Rate/100 && nr<depositors.length)  //exit condition to avoid infinite loop\r\n    { \r\n      payout = depositors[nr].amount *Interest_Rate/100;                           //calculate pay out\r\n      depositors[nr].etherAddress.send(payout);                        \t\t//send pay out to participant\r\n      Balance -= depositors[nr].amount *Interest_Rate/100;                         //Balance update\r\n      Total_Paid_Out += depositors[nr].amount *Interest_Rate/100;                 //update paid out amount\r\n      nr += 1;                                                                         //go to next participant\r\n    }\r\n    \r\n\tMessage=\"The Full Interest has been paid to Depositors!\";\r\n} \r\nelse  \r\n{\r\nif(Total_Deposited * 60/100 < Balance )  //if balance is at 60% or higher, then pay depositors with half interest\r\n{\r\n  \r\n\r\n\t\r\n    while (Balance > depositors[nr].amount * Interest_Rate/200 && nr<depositors.length)  //exit condition to avoid infinite loop\r\n    { \r\n      payout = depositors[nr].amount *Interest_Rate/200;                           //calculate pay out\r\n      depositors[nr].etherAddress.send(payout);                        \t\t//send pay out to participant\r\n      Balance -= depositors[nr].amount *Interest_Rate/200;                         //Balance update\r\n      Total_Paid_Out += depositors[nr].amount *Interest_Rate/200;                 //update paid out amount\r\n      nr += 1;                                                                         //go to next participant\r\n    }\r\n    \r\n\tMessage=\"Funds are between 60% and 80%, so only Half Interest has been paid!\";\r\n} \r\nelse Message=\"Funds are below 60%, no interest payout until new Depositors join!\";\r\n\r\n\r\n\r\n}\r\n\r\n  }\r\n\r\n//********************************************SET INTEREST RATE\r\n}\r\n\r\n  function Set_Interest_Rate(uint new_interest) onlyowner  //set new interest rate\r\n\t{\r\n      \tInterest_Rate = new_interest;\r\n\tMessage=\"The Bank has changed it's Interest Rates!\";\r\n  \t}\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"Balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_interest\",\"type\":\"uint256\"}],\"name\":\"Set_Interest_Rate\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Fees\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Message\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Total_Deposited\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Total_Paid_Out\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Interest_Rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depositors\",\"outputs\":[{\"name\":\"etherAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enter\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Total_Savers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"inputs\":[],\"type\":\"constructor\"}]","ContractName":"EthBank","CompilerVersion":"v0.2.2-2016-03-10-34d714f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}