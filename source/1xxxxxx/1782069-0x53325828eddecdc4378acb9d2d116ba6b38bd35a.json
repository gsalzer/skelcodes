{"status":"1","message":"OK","result":[{"SourceCode":"contract RandomInterface {\r\n\tfunction getRandom() returns (bytes32 hash) {}\r\n}\r\ncontract WinnerDBInterface {\r\n\tfunction Winners(uint id) constant returns(uint date, address addr, uint value, uint rate, uint bet) {}\r\n\tfunction newWinner(uint date, address addr, uint value, uint rate, uint bet) external returns (bool) {}\r\n}\r\ncontract dEthereumlotteryNet {\r\n\t/*\r\n\t\tdEthereumlotteryNet\r\n\t\tCoded by: iFA\r\n\t\thttp://d.ethereumlottery.net\r\n\t\tver: 2.2.2\r\n\t*/\r\n\t\r\n\t/*\r\n\t\tVars\r\n\t*/\r\n\taddress private owner;\r\n\taddress private winnersDB;\r\n\taddress private randomAddr;\r\n\tuint private constant fee = 5;\r\n\tuint private constant investorFee = 70;\r\n\tuint private constant prepareBlockDelay = 4;\r\n\tuint private constant rollLossBlockDelay = 30;\r\n\tuint private constant investUnit = 1 ether;\r\n\tuint private constant extraRate = 130;\r\n\tuint private constant minimumRollPrice = 10 finney;\r\n\tuint private constant investMinDuration = 1 days;\r\n\tuint private constant BestRollRate = 100;\r\n\t\r\n\tbool public ContractEnabled = true;\r\n\tuint public Jackpot;\r\n\tuint public RollCount;\r\n\tuint public JackpotHits;\r\n\t\r\n\tuint private ContractDisabledBlock;\r\n\tuint private jackpot_;\r\n\tuint private extraJackpot_;\r\n\tuint private feeValue;\r\n\tuint private playersPot;\r\n\t\r\n\tstruct rolls_s {\r\n\t\tuint blockNumber;\r\n\t\tbytes32 extraHash;\r\n\t\tbool valid;\r\n\t\tuint value;\r\n\t\tuint game;\r\n\t\tuint id;\r\n\t\tuint sumInvest;\r\n\t}\r\n\t\r\n\tmapping(address => rolls_s[]) private players;\r\n\t\r\n\tstruct investors_s {\r\n\t\taddress owner;\r\n\t\tuint value;\r\n\t\tuint balance;\r\n\t\tbool live;\r\n\t\tbool valid;\r\n\t\tuint timestamp;\r\n\t}\r\n\t\r\n\tinvestors_s[] private investors;\r\n\t\r\n\tstring constant public Information = \"http://d.ethereumlottery.net\";\r\n\t\r\n\t/*\r\n\t\tDeploy\r\n\t*/\r\n\tfunction dEthereumlotteryNet(address _winnersDB, address _randomAddr, bool _oldContract, address _oldContractAddress) {\r\n\t\towner = msg.sender;\r\n\t\twinnersDB = _winnersDB;\r\n\t\trandomAddr = _randomAddr;\r\n\t\tif (_oldContract && _oldContractAddress != 0x0) {\r\n\t\t\tRollCount = dEthereumlotteryNet( _oldContractAddress ).RollCount();\r\n\t\t\tJackpotHits = dEthereumlotteryNet( _oldContractAddress ).JackpotHits();\r\n\t\t}\r\n\t}\r\n\t\r\n\t/* \r\n\t\tConstans functions\r\n\t*/\r\n\tfunction ChanceOfWinning(uint Value) constant returns(uint Rate, uint Bet) {\r\n\t\tif (jackpot_ == 0) {\r\n\t\t\tRate = 0;\r\n\t\t\tBet = 0;\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (Value < minimumRollPrice) {\r\n\t\t\tValue = minimumRollPrice;\r\n\t\t}\r\n\t\tRate = getRate(Value);\r\n\t\tBet = getRealBet(Rate);\r\n\t\twhile (Value < Bet) {\r\n\t\t\tRate++;\r\n\t\t\tBet = getRealBet(Rate);\r\n\t\t}\r\n\t\tif (Rate < BestRollRate) { \r\n\t\t\tRate = BestRollRate;\r\n\t\t\tBet = getRealBet(Rate);\r\n\t\t}\r\n\t}\r\n\tfunction BetPriceLimit() constant returns(uint min,uint max) {\r\n\t\tmin = minimumRollPrice;\r\n\t\tmax = getRealBet(BestRollRate);\r\n\t}\r\n\tfunction Investors(address Address) constant returns(uint Investment, uint Balance, bool Live) {\r\n\t\tvar (found, InvestorID) = getInvestorByAddress(Address);\r\n\t\tif (found == false || ! investors[InvestorID].valid) {\r\n\t\t\tInvestment = 0;\r\n\t\t\tBalance = 0;\r\n\t\t\tLive = false;\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tInvestment = investors[InvestorID].value;\r\n\t\tBalance = investors[InvestorID].balance;\r\n\t\tLive = investors[InvestorID].live;\r\n\t}\r\n\tfunction Winners(uint id) constant returns(uint date, address addr, uint value, uint rate, uint bet) {\r\n\t\treturn WinnerDBInterface(winnersDB).Winners(id);\r\n\t}\r\n\t\r\n\t/*\r\n\t\tExternal functions\r\n\t*/\r\n\t/* Fallback */\r\n\tfunction () {\r\n\t\tPrepareRoll(0);\r\n\t}\r\n\t/* For Investors */\r\n\tfunction Invest() external OnlyEnabled noContract {\r\n\t\tuint value_ = msg.value;\r\n\t\tif (value_ < investUnit) { throw; }\r\n\t\tif (value_ % investUnit > 0) { \r\n\t\t\tif ( ! msg.sender.send(value_ % investUnit)) { throw; } \r\n\t\t\tvalue_ = value_ - (value_ % investUnit);\r\n\t\t}\r\n\t\tvar (found, InvestorID) = getInvestorByAddress(msg.sender);\r\n\t\tif (found == false) {\r\n\t\t\tInvestorID = investors.length;\r\n\t\t\tinvestors.length++;\r\n\t\t}\r\n\t\tif (investors[InvestorID].valid && investors[InvestorID].live) {\r\n\t\t\tinvestors[InvestorID].value += value_;\r\n\t\t} else {\r\n\t\t\tinvestors[InvestorID].value = value_;\r\n\t\t}\r\n\t\tinvestors[InvestorID].timestamp = now + investMinDuration;\r\n\t\tinvestors[InvestorID].valid = true;\r\n\t\tinvestors[InvestorID].live = true;\r\n\t\tinvestors[InvestorID].owner = msg.sender;\r\n\t\tjackpot_ += value_;\r\n\t\tsetJackpot();\r\n\t}\r\n\tfunction GetMyInvestmentBalance() external noEther {\r\n\t\tvar (found, InvestorID) = getInvestorByAddress(msg.sender);\r\n\t\tif (found == false) { throw; }\r\n\t\tif ( ! investors[InvestorID].valid) { throw; }\r\n\t\tuint _balance = investors[InvestorID].balance;\r\n\t\tif (_balance == 0) { throw; }\r\n\t\tinvestors[InvestorID].balance = 0;\r\n\t\tif ( ! msg.sender.send( _balance )) { throw; }\r\n\t}\r\n\tfunction CancelMyInvestment() external noEther {\r\n\t\tvar (found, InvestorID) = getInvestorByAddress(msg.sender);\r\n\t\tif (found == false) { throw; }\r\n\t\tif ( ! investors[InvestorID].valid) { throw; }\r\n\t\tif (investors[InvestorID].timestamp > now && ContractEnabled) { throw; }\r\n\t\tuint balance_;\r\n\t\tif (investors[InvestorID].live) {\r\n\t\t\tjackpot_ -= investors[InvestorID].value;\r\n\t\t\tbalance_ = investors[InvestorID].value;\r\n\t\t\tsetJackpot();\r\n\t\t}\r\n\t\tif (investors[InvestorID].balance > 0) {\r\n\t\t\tbalance_ += investors[InvestorID].balance;\r\n\t\t}\r\n\t\tdelete investors[InvestorID];\r\n\t\tif ( ! msg.sender.send( balance_ )) { throw; }\r\n\t}\r\n\t/* For Players */\r\n\tfunction DoRoll() external noEther {\r\n\t\tuint value_;\r\n\t\tbool found;\r\n\t\tbool subFound;\r\n\t\tfor ( uint a=0 ; a < players[msg.sender].length ; a++ ) {\r\n\t\t\tif (players[msg.sender][a].valid) {\r\n\t\t\t\tsubFound = false;\r\n\t\t\t\tif (players[msg.sender][a].blockNumber+rollLossBlockDelay <= block.number) {\r\n\t\t\t\t\tuint feeValue_ = players[msg.sender][a].value/2;\r\n\t\t\t\t\tfeeValue += feeValue_;\r\n\t\t\t\t\tinvestorAddFee(players[msg.sender][a].value - feeValue_);\r\n\t\t\t\t\tDoRollEvent(msg.sender, players[msg.sender][a].value, players[msg.sender][a].id, false, true, false, false, 0, 0, 0);\r\n\t\t\t\t\tsubFound = true;\r\n\t\t\t\t}\r\n\t\t\t\tif ( ! ContractEnabled || players[msg.sender][a].sumInvest != jackpot_ || players[msg.sender][a].game != JackpotHits) {\r\n\t\t\t\t\tvalue_ += players[msg.sender][a].value;\r\n\t\t\t\t\tDoRollEvent(msg.sender, players[msg.sender][a].value, players[msg.sender][a].id, true, false, false, false, 0, 0, 0);\r\n\t\t\t\t\tsubFound = true;\r\n\t\t\t\t}\r\n\t\t\t\tif (players[msg.sender][a].blockNumber < block.number) {\r\n\t\t\t\t\tvalue_ += makeRoll(a);\r\n\t\t\t\t\tsubFound = true;\r\n\t\t\t\t}\r\n\t\t\t\tif (subFound) {\r\n\t\t\t\t\tplayersPot -= players[msg.sender][a].value;\r\n\t\t\t\t\tdelete players[msg.sender][a];\r\n\t\t\t\t\tfound = true;\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif ( ! found) { throw; }\r\n\t\tif (value_ > 0) { if ( ! msg.sender.send(value_)) { throw; } }\r\n\t}\r\n\tfunction PrepareRoll(uint seed) OnlyEnabled noContract {\r\n\t\tif (msg.value < minimumRollPrice) { throw; }\r\n\t\tif (jackpot_ == 0) { throw; }\r\n\t\tvar (_rate, _realBet) = ChanceOfWinning(msg.value);\r\n\t\tif (_realBet > msg.value) { throw; }\r\n\t\tif (msg.value-_realBet > 0) {\r\n\t\t\tif ( ! msg.sender.send( msg.value-_realBet )) { throw; }\r\n\t\t}\r\n\t\tfor (uint a = 0 ; a < players[msg.sender].length ; a++) {\r\n\t\t\tif ( ! players[msg.sender][a].valid) {\r\n\t\t\t\tprepareRoll( a, _realBet, seed );\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t\tplayers[msg.sender].length++;\r\n\t\tprepareRoll( players[msg.sender].length-1, _realBet, seed );\r\n\t}\r\n\t/* For Owner */\r\n\tfunction OwnerCloseContract() external OnlyOwner noEther {\r\n\t\tif ( ! ContractEnabled) {\r\n\t\t\tif (ContractDisabledBlock < block.number) {\r\n\t\t\t\tif (playersPot == 0) { throw; }\r\n\t\t\t\tuint _value = playersPot;\r\n\t\t\t\tplayersPot = 0;\r\n\t\t\t\tif ( ! msg.sender.send( _value )) { throw; }\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tContractEnabled = false;\r\n\t\t\tContractDisabledBlock = block.number+rollLossBlockDelay;\r\n\t\t\tContractDisabled(ContractDisabledBlock);\r\n\t\t\tfeeValue += extraJackpot_;\r\n\t\t\textraJackpot_ = 0;\r\n\t\t}\r\n\t}\r\n\tfunction OwnerGetFee() external OnlyOwner noEther {\r\n\t\tif (feeValue == 0) { throw; }\r\n\t\tuint _value = playersPot;\r\n\t\tfeeValue = 0;\r\n\t\tif ( ! owner.send(_value)) { throw; }\r\n\t}\r\n\t\r\n\t/*\r\n\t\tPrivate functions\r\n\t*/\r\n\tfunction setJackpot() private {\r\n\t\tJackpot = extraJackpot_ + jackpot_;\r\n\t}\r\n\tfunction makeRoll(uint id) private returns(uint win) {\r\n\t\tuint feeValue_ = players[msg.sender][id].value * fee / 100 ;\r\n\t\tfeeValue += feeValue_;\r\n\t\tuint investorFee_ = players[msg.sender][id].value * investorFee / 100;\r\n\t\tinvestorAddFee(investorFee_);\r\n\t\textraJackpot_ += players[msg.sender][id].value - feeValue_ - investorFee_;\r\n\t\tsetJackpot();\r\n\t\tbytes32 hash_ = players[msg.sender][id].extraHash;\r\n\t\tfor ( uint a = 1 ; a <= prepareBlockDelay ; a++ ) {\r\n\t\t\thash_ = sha3(hash_, block.blockhash(players[msg.sender][id].blockNumber - prepareBlockDelay+a));\r\n\t\t}\r\n\t\tuint _rate = getRate(players[msg.sender][id].value);\r\n\t\tuint bigNumber = uint64(hash_);\r\n\t\tif (bigNumber == 0 || _rate == 0) { return; }\r\n\t\tif (bigNumber % _rate == 0 ) {\r\n\t\t\twin = Jackpot;\r\n\t\t\tfor ( a=0 ; a < investors.length ; a++ ) {\r\n\t\t\t\tinvestors[a].live = false;\r\n\t\t\t}\r\n\t\t\tJackpotHits++;\r\n\t\t\textraJackpot_ = 0;\r\n\t\t\tjackpot_ = 0;\r\n\t\t\tJackpot = 0;\r\n\t\t\tWinnerDBInterface( winnersDB ).newWinner(now, msg.sender, win, _rate, players[msg.sender][id].value);\r\n\t\t\tDoRollEvent(msg.sender, win, players[msg.sender][id].id, false, false, false, true, bigNumber, _rate, bigNumber % _rate);\r\n\t\t} else {\r\n\t\t\tDoRollEvent(msg.sender, players[msg.sender][id].value, players[msg.sender][id].id, false, false, true, false, bigNumber, _rate, bigNumber % _rate);\r\n\t\t}\r\n\t}\r\n\tfunction investorAddFee(uint value) private {\r\n\t\tbool done;\r\n\t\tfor ( uint a=0 ; a < investors.length ; a++ ) {\r\n\t\t\tif (investors[a].live && investors[a].valid) {\r\n\t\t\t\tinvestors[a].balance += value * investors[a].value / jackpot_;\r\n\t\t\t\tdone = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif ( ! done) {\r\n\t\t\tfeeValue += value;\r\n\t\t}\r\n\t}\r\n\tfunction prepareRoll(uint rollID, uint bet, uint seed) private {\r\n\t\tRollCount++;\r\n\t\tplayers[msg.sender][rollID].blockNumber = block.number + prepareBlockDelay;\r\n\t\tplayers[msg.sender][rollID].extraHash = sha3(RollCount, now, seed, RandomInterface(randomAddr).getRandom(), address(seed).balance);\r\n\t\tplayers[msg.sender][rollID].valid = true;\r\n\t\tplayers[msg.sender][rollID].value = bet;\r\n\t\tplayers[msg.sender][rollID].game = JackpotHits;\r\n\t\tplayers[msg.sender][rollID].id = RollCount;\r\n\t\tplayers[msg.sender][rollID].sumInvest = jackpot_;\t\r\n\t\tplayersPot += bet;\r\n\t\tPrepareRollEvent(msg.sender, players[msg.sender][rollID].blockNumber, players[msg.sender][rollID].value, players[msg.sender][rollID].id);\r\n\t}\r\n\t\r\n\t/*\r\n\t\tInternal functions\r\n\t*/\t\r\n\tfunction getRate(uint value) internal returns(uint){\r\n\t\treturn jackpot_ * 1 ether / value * 100 / investorFee * extraRate / 100 / 1 ether;\r\n\t}\r\n\tfunction getRealBet(uint rate) internal returns (uint) {\r\n\t\treturn jackpot_ * 1 ether / ( rate * 1 ether * investorFee / extraRate);\r\n\t}\r\n\tfunction getInvestorByAddress(address Address) internal returns (bool found, uint id) {\r\n\t\tfor ( id=0 ; id < investors.length ; id++ ) {\r\n\t\t\tif (investors[id].owner == Address) {\r\n\t\t\t\treturn (true, id);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn (false, 0);\r\n\t}\r\n\t\r\n\t/*\r\n\t\tEvents\r\n\t*/\t\r\n\tevent DoRollEvent(address Player, uint Value, uint RollID, bool Refund, bool LostBet, bool LossRoll, bool WinRoll, uint BigNumber, uint Rate, uint RollResult);\r\n\tevent PrepareRollEvent(address Player, uint Block, uint Bet, uint RollID);\r\n\tevent ContractDisabled(uint LossAllBetBlockNumber);\r\n\t\r\n\t/*\r\n\t\tModifiers\r\n\t*/\r\n\tmodifier noContract() {if (tx.origin != msg.sender) { throw; } _ }\r\n\tmodifier noEther() { if (msg.value > 0) { throw; } _ }\r\n\tmodifier OnlyOwner() { if (owner != msg.sender) { throw; } _ }\r\n\tmodifier OnlyEnabled() { if ( ! ContractEnabled) { throw; } _ }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"Value\",\"type\":\"uint256\"}],\"name\":\"ChanceOfWinning\",\"outputs\":[{\"name\":\"Rate\",\"type\":\"uint256\"},{\"name\":\"Bet\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"seed\",\"type\":\"uint256\"}],\"name\":\"PrepareRoll\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Information\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"DoRoll\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"JackpotHits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"OwnerCloseContract\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Jackpot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Winners\",\"outputs\":[{\"name\":\"date\",\"type\":\"uint256\"},{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"rate\",\"type\":\"uint256\"},{\"name\":\"bet\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"CancelMyInvestment\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BetPriceLimit\",\"outputs\":[{\"name\":\"min\",\"type\":\"uint256\"},{\"name\":\"max\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ContractEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Invest\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RollCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"Address\",\"type\":\"address\"}],\"name\":\"Investors\",\"outputs\":[{\"name\":\"Investment\",\"type\":\"uint256\"},{\"name\":\"Balance\",\"type\":\"uint256\"},{\"name\":\"Live\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"OwnerGetFee\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"GetMyInvestmentBalance\",\"outputs\":[],\"type\":\"function\"},{\"inputs\":[{\"name\":\"_winnersDB\",\"type\":\"address\"},{\"name\":\"_randomAddr\",\"type\":\"address\"},{\"name\":\"_oldContract\",\"type\":\"bool\"},{\"name\":\"_oldContractAddress\",\"type\":\"address\"}],\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"Player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"Value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"RollID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"Refund\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"LostBet\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"LossRoll\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"WinRoll\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"BigNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"Rate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"RollResult\",\"type\":\"uint256\"}],\"name\":\"DoRollEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"Player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"Block\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"Bet\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"RollID\",\"type\":\"uint256\"}],\"name\":\"PrepareRollEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"LossAllBetBlockNumber\",\"type\":\"uint256\"}],\"name\":\"ContractDisabled\",\"type\":\"event\"}]","ContractName":"dEthereumlotteryNet","CompilerVersion":"v0.3.5-2016-06-21-b23c300","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000426b645653825F7eF2Ec047774b1f69FA6cb750C00000000000000000000000055e37406de326606f37ab4ba79b7a686ecb562420000000000000000000000000000000000000000000000000000000000000001000000000000000000000000E34f4BD4b05E0A40295DaF48C2562C377338ea05","Library":"","SwarmSource":""}]}