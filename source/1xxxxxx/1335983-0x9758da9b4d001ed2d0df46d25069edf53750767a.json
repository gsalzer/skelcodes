{"status":"1","message":"OK","result":[{"SourceCode":"contract Etheramid {\r\n\r\n    struct Participant {\r\n        address inviter;\r\n        address itself;\r\n        uint totalPayout;\r\n    }\r\n    \r\n    mapping (address => Participant) Tree;\r\n    mapping (uint => address) Index;\r\n\t\r\n\tuint Count = 0;\r\n    address top;\r\n    uint constant contribution = 1 ether;\r\n \r\n    function Etheramid() {\r\n        addParticipant(msg.sender,msg.sender);\r\n        top = msg.sender;\r\n    }\r\n    \r\n    function() {\r\n\t\tuint rand = uint(msg.sender) % Count;\r\n        enter(Index[rand]);\r\n    }\r\n    \r\n    function getParticipantById (uint id) constant public returns ( address inviter, address itself, uint totalPayout ){\r\n\t\tif (id >= Count) return;\r\n\t\taddress ida = Index[id];\r\n        inviter = Tree[ida].inviter;\r\n        itself = Tree[ida].itself;\r\n        totalPayout = Tree[ida].totalPayout;\r\n    }\r\n\tfunction getParticipantByAddress (address adr) constant public returns ( address inviter, address itself, uint totalPayout ){\r\n\t\tif (Tree[adr].itself == 0x0) return;\r\n        inviter = Tree[adr].inviter;\r\n        itself = Tree[adr].itself;\r\n        totalPayout = Tree[adr].totalPayout;\r\n    }\r\n    \r\n    function addParticipant(address itself, address inviter) private{\r\n        Index[Count] = itself;\r\n\t\tTree[itself] = Participant( {itself: itself, inviter: inviter, totalPayout: 0});\r\n        Count +=1;\r\n    }\r\n    \r\n    function getParticipantCount () public constant returns ( uint count ){\r\n       count = Count;\r\n    }\r\n    \r\n    function enter(address inviter) public {\r\n        uint amount = msg.value;\r\n        if ((amount < contribution) || (Tree[msg.sender].inviter != 0x0) || (Tree[inviter].inviter == 0x0)) {\r\n            msg.sender.send(msg.value);\r\n            return;\r\n        }\r\n        \r\n        addParticipant(msg.sender, inviter);\r\n        address next = inviter;\r\n        uint rest = amount;\r\n        uint level = 1;\r\n        while ( (next != top) && (level < 7) ){\r\n            uint toSend = rest/2;\r\n            next.send(toSend);\r\n            Tree[next].totalPayout += toSend;\r\n            rest -= toSend;\r\n            next = Tree[next].inviter;\r\n            level++;\r\n        }\r\n        next.send(rest);\r\n\t\tTree[next].totalPayout += rest;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getParticipantById\",\"outputs\":[{\"name\":\"inviter\",\"type\":\"address\"},{\"name\":\"itself\",\"type\":\"address\"},{\"name\":\"totalPayout\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getParticipantCount\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"inviter\",\"type\":\"address\"}],\"name\":\"enter\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getParticipantByAddress\",\"outputs\":[{\"name\":\"inviter\",\"type\":\"address\"},{\"name\":\"itself\",\"type\":\"address\"},{\"name\":\"totalPayout\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"inputs\":[],\"type\":\"constructor\"}]","ContractName":"Etheramid","CompilerVersion":"v0.3.1-2016-04-12-3ad5e82","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}