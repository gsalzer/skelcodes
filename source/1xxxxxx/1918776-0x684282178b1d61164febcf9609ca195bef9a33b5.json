{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\nCorporation SmartContract.\r\ndeveloped by: cryptonomica.net, 2016\r\n\r\nused sources:\r\nhttps://www.ethereum.org/token // example of the token standart\r\nhttps://github.com/ethereum/EIPs/issues/20 // token standart description\r\nhttps://www.ethereum.org/dao // voting example\r\n*/\r\n\r\n/*\r\nHow to deploy (estimated: 1,641,268 gas):\r\n1) For development: use https://ethereum.github.io/browser-solidity/\r\n2) For testing on Testnet: Open the default ('Mist') wallet (if you are only testing, go to the menu develop > network > testnet), go to the Contracts tab and then press deploy contract, and on the solidity code box, paste the code above.\r\n3) For prodaction, like in 2) but on Main Network.\r\nTo verify your deployed smartcontract source code for public go to:\r\nhttps://etherscan.io/verifyContract\r\n*/\r\n\r\n// 'interface':\r\n//  this is expected from another contract,\r\n//  if it wants to spend tokens (shares) of behalf of the token owner\r\n//  in our contract\r\n//  f.e.: a 'multisig' SmartContract for transfering shares from seller\r\n//  to buyer\r\ncontract tokenRecipient {\r\n    function receiveApproval(address _from,     // sharehoder\r\n                             uint256 _value,    // number of shares\r\n                             address _share,    // - will be this contract\r\n                             bytes _extraData); //\r\n}\r\n\r\ncontract Corporation {\r\n\r\n    /* Standard public variables of the token */\r\n    string public standard = 'Token 0.1';\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public totalSupply;\r\n\r\n    /* ------------------- Corporate Stock Ledger ---------- */\r\n    // Shares, shareholders, balances ect.\r\n\r\n    // list of all sharehoders (represented by Ethereum accounts)\r\n    // in this Corporation's history, # is ID\r\n    address[] public shareholder;\r\n    // this helps to find address by ID without loop\r\n    mapping (address => uint256) public shareholderID;\r\n    // list of adresses, that who currently own at least share\r\n    // not public, use getCurrentShareholders()\r\n    address[] activeShareholdersArray;\r\n    // balances:\r\n    mapping (address => uint256) public balanceOf;\r\n    // shares that have to be managed by external contract\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    /*  --------------- Constructor --------- */\r\n    // Initializes contract with initial supply tokens to the creator of the contract\r\n    function Corporation () { // - truffle compiles only no args Constructor\r\n        uint256 initialSupply = 12000; // shares quantity, constant\r\n        balanceOf[msg.sender] = initialSupply; // Give the creator all initial tokens\r\n        totalSupply = initialSupply;  // Update total supply\r\n        name = \"shares\"; //tokenName; // Set the name for display purposes\r\n        symbol = \"sh\"; // tokenSymbol; // Set the symbol for display purposes\r\n        decimals = 0; // Amount of decimals for display purposes\r\n\r\n        // -- start corporate stock ledger\r\n        shareholderID[this] = shareholder.push(this)-1; // # 0\r\n        shareholderID[msg.sender] = shareholder.push(msg.sender)-1; // #1\r\n        activeShareholdersArray.push(msg.sender); // add to active shareholders\r\n    }\r\n\r\n    /* --------------- Shares management ------ */\r\n\r\n    // This generates a public event on the blockchain that will notify clients. In 'Mist' SmartContract page enable 'Watch contract events'\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function getCurrentShareholders() returns (address[]){\r\n        delete activeShareholdersArray;\r\n        for (uint256 i=0; i < shareholder.length; i++){\r\n            if (balanceOf[shareholder[i]] > 0){\r\n                activeShareholdersArray.push(shareholder[i]);\r\n            }\r\n            } return activeShareholdersArray;\r\n        }\r\n\r\n    /*  -- can be used to transfer shares to new contract\r\n    together with getCurrentShareholders() */\r\n    function getBalanceByAdress(address _address) returns (uint256) {\r\n        return balanceOf[_address];\r\n    }\r\n\r\n    function getMyShareholderID() returns (uint256) {\r\n        return shareholderID[msg.sender];\r\n    }\r\n\r\n    function getShareholderAdressByID(uint256 _id) returns (address){\r\n        return shareholder[_id];\r\n    }\r\n\r\n    function getMyShares() returns (uint256) {\r\n        return balanceOf[msg.sender];\r\n    }\r\n\r\n\r\n    /* ---- Transfer shares to another adress ----\r\n    (shareholder's address calls this)\r\n    */\r\n    function transfer(address _to, uint256 _value) {\r\n        // check arguments:\r\n        if (_value < 1) throw;\r\n        if (this == _to) throw; // do not send shares to contract itself;\r\n        if (balanceOf[msg.sender] < _value) throw; // Check if the sender has enough\r\n\r\n        // make transaction\r\n        balanceOf[msg.sender] -= _value; // Subtract from the sender\r\n        balanceOf[_to] += _value;       // Add the same to the recipient\r\n\r\n        // if new address, add it to shareholders history (stock ledger):\r\n        if (shareholderID[_to] == 0){ // ----------- check if works\r\n            shareholderID[_to] = shareholder.push(_to)-1;\r\n        }\r\n\r\n        // Notify anyone listening that this transfer took place\r\n        Transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    /* Allow another contract to spend some shares in your behalf\r\n    (shareholder calls this) */\r\n    function approveAndCall(address _spender, // another contract's adress\r\n                            uint256 _value, // number of shares\r\n                            bytes _extraData) // data for another contract\r\n    returns (bool success) {\r\n        // msg.sender - account owner who gives allowance\r\n        // _spender   - address of another contract\r\n        // it writes in \"allowance\" that this owner allows another\r\n        // contract (_spender) to spend thi amont (_value) of shares\r\n        // in his behalf\r\n        allowance[msg.sender][_spender] = _value;\r\n        // 'spender' is another contract that implements code\r\n        //  prescribed in 'shareRecipient' above\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        // this contract calls 'receiveApproval' function\r\n        // of another contract to send information about\r\n        // allowance\r\n        spender.receiveApproval(msg.sender, // shares owner\r\n                                _value,     // number of shares\r\n                                this,       // this contract's adress\r\n                                _extraData);// data from shares owner\r\n        return true;\r\n    }\r\n\r\n    /* this function can be called from another contract, after it\r\n    have allowance to transfer shares in behalf of sharehoder  */\r\n    function transferFrom(address _from,\r\n                          address _to,\r\n                          uint256 _value)\r\n    returns (bool success) {\r\n\r\n        // Check arguments:\r\n        // should one share or more\r\n        if (_value < 1) throw;\r\n        // do not send shares to this contract itself;\r\n        if (this == _to) throw;\r\n        // Check if the sender has enough\r\n        if (balanceOf[_from] < _value) throw;\r\n\r\n        // Check allowance\r\n        if (_value > allowance[_from][msg.sender]) throw;\r\n\r\n        // if transfer to new address -- add him to ledger\r\n        if (shareholderID[_to] == 0){\r\n            shareholderID[_to] = shareholder.push(_to)-1; // push function returns the new length\r\n        }\r\n\r\n        // Subtract from the sender\r\n        balanceOf[_from] -= _value;\r\n        // Add the same to the recipient\r\n        balanceOf[_to] += _value;\r\n\r\n        // Change allowances correspondingly\r\n        allowance[_from][msg.sender] -= _value;\r\n        // Notify anyone listening that this transfer took place\r\n        Transfer(_from, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /* This unnamed function is called whenever someone tries to send ether to it */\r\n    function () {\r\n        throw;     // Prevents accidental sending of ether\r\n    }\r\n\r\n    /*  --------- Voting  --------------  */\r\n    // we only count 'yes' votes, not voting 'yes'\r\n    // considered as voting 'no' (as stated in Bylaws)\r\n\r\n    // each proposal should contain it's text\r\n    // index of text in this array is a proposal ID\r\n    string[] public proposalText;\r\n    // proposalID => (shareholder => \"if already voted for this proposal\")\r\n    mapping (uint256 => mapping (address => bool)) voted;\r\n    // proposalID => addresses voted 'yes'\r\n    // exact number of votes according to shares will be counted\r\n    // after deadline\r\n    mapping (uint256 => address[]) public votes;\r\n    // proposalID => deadline\r\n    mapping (uint256 => uint256) public deadline;\r\n    // proposalID => final 'yes' votes\r\n    mapping (uint256 => uint256) public results;\r\n    // proposals of every shareholder\r\n    mapping (address => uint256[]) public proposalsByShareholder;\r\n\r\n\r\n    event ProposalAdded(uint256 proposalID,\r\n                        address initiator,\r\n                        string description,\r\n                        uint256 deadline);\r\n\r\n    event VotingFinished(uint256 proposalID, uint256 votes);\r\n\r\n    function makeNewProposal(string _proposalDescription,\r\n                             uint256 _debatingPeriodInMinutes)\r\n    returns (uint256){\r\n        // only shareholder with one or more shares can make a proposal\r\n        // !!!! can be more then one share required\r\n        if (balanceOf[msg.sender] < 1) throw;\r\n\r\n        uint256 id = proposalText.push(_proposalDescription)-1;\r\n        deadline[id] = now + _debatingPeriodInMinutes * 1 minutes;\r\n\r\n        // add to proposals of this shareholder:\r\n        proposalsByShareholder[msg.sender].push(id);\r\n\r\n        // initiator always votes 'yes'\r\n        votes[id].push(msg.sender);\r\n        voted[id][msg.sender] = true;\r\n\r\n        ProposalAdded(id, msg.sender, _proposalDescription, deadline[id]);\r\n\r\n        return id; // returns proposal id\r\n    }\r\n\r\n    function getMyProposals() returns (uint256[]){\r\n        return proposalsByShareholder[msg.sender];\r\n    }\r\n\r\n    function voteForProposal(uint256 _proposalID) returns (string) {\r\n\r\n        // if no shares currently owned - no right to vote\r\n        if (balanceOf[msg.sender] < 1) return \"no shares, vote not accepted\";\r\n\r\n        // if already voted - throw, else voting can be spammed\r\n        if (voted[_proposalID][msg.sender]){\r\n            return \"already voted, vote not accepted\";\r\n        }\r\n\r\n        // no votes after deadline\r\n        if (now > deadline[_proposalID] ){\r\n            return \"vote not accepted after deadline\";\r\n        }\r\n\r\n        // add to list of voted 'yes'\r\n        votes[_proposalID].push(msg.sender);\r\n        voted[_proposalID][msg.sender] = true;\r\n        return \"vote accepted\";\r\n    }\r\n\r\n    // to count votes this transaction should be started manually\r\n    // from _any_ Ethereum address after deadline\r\n    function countVotes(uint256 _proposalID) returns (uint256){\r\n\r\n        // if not after deadline - throw\r\n        if (now < deadline[_proposalID]) throw;\r\n\r\n        // if already counted return result;\r\n        if (results[_proposalID] > 0) return results[_proposalID];\r\n\r\n        // else should count results and store in public variable\r\n        uint256 result = 0;\r\n        for (uint256 i = 0; i < votes[_proposalID].length; i++){\r\n\r\n            address voter = votes[_proposalID][i];\r\n            result = result + balanceOf[voter];\r\n        }\r\n\r\n        // Log and notify anyone listening that this voting finished\r\n        // with 'result' - number of 'yes' votes\r\n        VotingFinished(_proposalID, result);\r\n\r\n        return result;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_proposalID\",\"type\":\"uint256\"}],\"name\":\"voteForProposal\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getMyShareholderID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getBalanceByAdress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposalID\",\"type\":\"uint256\"}],\"name\":\"countVotes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"results\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getCurrentShareholders\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposalDescription\",\"type\":\"string\"},{\"name\":\"_debatingPeriodInMinutes\",\"type\":\"uint256\"}],\"name\":\"makeNewProposal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getShareholderAdressByID\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getMyProposals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getMyShares\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"shareholderID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"shareholder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposalText\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"votes\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposalsByShareholder\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"inputs\":[],\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"proposalID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"description\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"ProposalAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"proposalID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"votes\",\"type\":\"uint256\"}],\"name\":\"VotingFinished\",\"type\":\"event\"}]","ContractName":"Corporation","CompilerVersion":"v0.3.5-2016-07-19-427deb4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}