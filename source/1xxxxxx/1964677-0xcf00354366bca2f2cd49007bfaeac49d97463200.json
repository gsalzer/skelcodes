{"status":"1","message":"OK","result":[{"SourceCode":"contract ConnectSix {\r\n\r\n  uint8 constant public board_size = 19;\r\n\r\n  Game[] public games;\r\n\r\n  struct Game {\r\n      mapping(uint8 => mapping(uint8 => uint8)) board;\r\n      uint8[] move_history;\r\n      address[3] players;\r\n      // 0 means game did not start yet\r\n      uint8 turn;\r\n      // Either 1 or 2. 0 means not finished\r\n      uint8 winner;\r\n      // true if players agreed to a draw\r\n      uint time_per_move;\r\n      // if move is not made by this time, opponent can claim victory\r\n      uint deadline;\r\n      // amount player 1 put in\r\n      uint player_1_stake;\r\n      // amount player 2 must send to join\r\n      uint player_2_stake;\r\n  }\r\n\r\n  event LogGameCreated(uint game_num);\r\n  event LogGameStarted(uint game_num);\r\n  event LogVictory(uint game_num, uint8 winner);\r\n  event LogMoveMade(uint game_num, uint8 x1, uint8 y1, uint8 x2, uint8 y2);\r\n\r\n  function new_game(uint _time_per_move, uint opponent_stake) {\r\n    games.length++;\r\n    Game g = games[games.length - 1];\r\n    g.players[1] = msg.sender;\r\n    g.time_per_move = _time_per_move;\r\n    g.player_1_stake = msg.value;\r\n    g.player_2_stake = opponent_stake;\r\n    // make the first move in the center of the board\r\n    g.board[board_size / 2][board_size / 2] = 1;\r\n    LogGameCreated(games.length - 1);\r\n  }\r\n\r\n  function join_game(uint game_num) {\r\n    Game g = games[game_num];\r\n    if (g.turn != 0 || g.player_2_stake != msg.value) {\r\n      throw;\r\n    }\r\n    g.players[2] = msg.sender;\r\n    // It's the second player's turn because the first player automatically makes a single move in the center\r\n    g.turn = 2;\r\n    g.deadline = now + g.time_per_move;\r\n    LogGameStarted(game_num);\r\n  }\r\n\r\n  function player_1(uint game_num) constant returns (address) {\r\n    return games[game_num].players[1];\r\n  }\r\n  \r\n  function player_2(uint game_num) constant returns (address) {\r\n    return games[game_num].players[2];\r\n  }\r\n\r\n  function board(uint game_num, uint8 x, uint8 y) constant returns (uint8) {\r\n    return games[game_num].board[x][y];\r\n  }\r\n\r\n  function move_history(uint game_num) constant returns (uint8[]) {\r\n      return games[game_num].move_history;\r\n  }\r\n\r\n  function single_move(uint game_num, uint8 x, uint8 y) internal {\r\n    if (x > board_size || y > board_size) {\r\n      throw;\r\n    }\r\n    Game g = games[game_num];\r\n    if (g.board[x][y] != 0) {\r\n      throw;\r\n    }\r\n    g.board[x][y] = g.turn;\r\n  }\r\n\r\n  function make_move(uint game_num, uint8 x1, uint8 y1, uint8 x2, uint8 y2) {\r\n    Game g = games[game_num];\r\n    if (g.winner != 0 || msg.sender != g.players[g.turn]) {\r\n      throw;\r\n    }\r\n    single_move(game_num, x1, y1);\r\n    single_move(game_num, x2, y2);\r\n    g.turn = 3 - g.turn;\r\n    g.deadline = now + g.time_per_move;\r\n    g.move_history.length++;\r\n    g.move_history[g.move_history.length - 1] = x1;\r\n    g.move_history.length++;\r\n    g.move_history[g.move_history.length - 1] = y1;\r\n    g.move_history.length++;\r\n    g.move_history[g.move_history.length - 1] = x2;\r\n    g.move_history.length++;\r\n    g.move_history[g.move_history.length - 1] = y2;\r\n    LogMoveMade(game_num, x1, y1, x2, y2);\r\n  }\r\n\r\n  function make_move_and_claim_victory(uint game_num, uint8 x1, uint8 y1, uint8 x2, uint8 y2, uint8 wx, uint8 wy, uint8 dir) {\r\n    make_move(game_num, x1, y1, x2, y2);\r\n    claim_victory(game_num, wx, wy, dir);\r\n  }\r\n  \r\n  function pay_winner(uint game_num) internal {\r\n    Game g = games[game_num];\r\n    uint amount = g.player_1_stake + g.player_2_stake;\r\n    if (amount > 0 && !g.players[g.winner].send(amount)) {\r\n      throw;\r\n    }\r\n  }\r\n\r\n  function claim_time_victory(uint game_num) {\r\n    Game g = games[game_num];\r\n    if (g.winner != 0 || g.deadline == 0 || now <= g.deadline) {\r\n      throw;\r\n    }\r\n    g.winner = 3 - g.turn;\r\n    pay_winner(game_num);\r\n    LogVictory(game_num, g.winner);\r\n  }\r\n\r\n  function claim_victory(uint game_num, uint8 x, uint8 y, uint8 dir) {\r\n    Game g = games[game_num];\r\n    if (x > board_size \r\n        || y > board_size\r\n        || g.winner != 0\r\n        || g.board[x][y] == 0\r\n        || dir > 3) {\r\n      throw;\r\n    }\r\n    // We don't have to worry about overflow and underflows here because all the values outside the \r\n    // 19 x 19 board are 0\r\n    if (dir == 3) {\r\n      // this is going diagonal (10:30pm)\r\n      for (uint8 j = 1; j < 6; j++) {\r\n        if (g.board[x - j*dx][y + j*dy] != g.board[x][y]) {\r\n          throw;\r\n        }\r\n      }\r\n    } else {\r\n      uint8 dx = 0;\r\n      uint8 dy = 0;\r\n      if (dir == 2) {\r\n        // diagonal - 1:30pm\r\n        dx = 1;\r\n        dy = 1;\r\n      } else if (dir == 1) {\r\n        // 12:00pm\r\n        dy = 1;\r\n      } else {\r\n        // 3 pm\r\n        dx = 1;\r\n      }\r\n      for (uint8 i = 1; i < 6; i++) {\r\n        if (g.board[x + i*dx][y + i*dy] != g.board[x][y]) {\r\n          throw;\r\n        }\r\n      }\r\n    }\r\n    g.winner = g.board[x][y];\r\n    pay_winner(game_num);\r\n    LogVictory(game_num, g.winner);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"game_num\",\"type\":\"uint256\"},{\"name\":\"x\",\"type\":\"uint8\"},{\"name\":\"y\",\"type\":\"uint8\"}],\"name\":\"board\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"games\",\"outputs\":[{\"name\":\"turn\",\"type\":\"uint8\"},{\"name\":\"winner\",\"type\":\"uint8\"},{\"name\":\"time_per_move\",\"type\":\"uint256\"},{\"name\":\"deadline\",\"type\":\"uint256\"},{\"name\":\"player_1_stake\",\"type\":\"uint256\"},{\"name\":\"player_2_stake\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"game_num\",\"type\":\"uint256\"}],\"name\":\"player_2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"game_num\",\"type\":\"uint256\"},{\"name\":\"x1\",\"type\":\"uint8\"},{\"name\":\"y1\",\"type\":\"uint8\"},{\"name\":\"x2\",\"type\":\"uint8\"},{\"name\":\"y2\",\"type\":\"uint8\"},{\"name\":\"wx\",\"type\":\"uint8\"},{\"name\":\"wy\",\"type\":\"uint8\"},{\"name\":\"dir\",\"type\":\"uint8\"}],\"name\":\"make_move_and_claim_victory\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"game_num\",\"type\":\"uint256\"}],\"name\":\"player_1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"game_num\",\"type\":\"uint256\"},{\"name\":\"x\",\"type\":\"uint8\"},{\"name\":\"y\",\"type\":\"uint8\"},{\"name\":\"dir\",\"type\":\"uint8\"}],\"name\":\"claim_victory\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"game_num\",\"type\":\"uint256\"}],\"name\":\"join_game\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"game_num\",\"type\":\"uint256\"}],\"name\":\"move_history\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8[]\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"game_num\",\"type\":\"uint256\"},{\"name\":\"x1\",\"type\":\"uint8\"},{\"name\":\"y1\",\"type\":\"uint8\"},{\"name\":\"x2\",\"type\":\"uint8\"},{\"name\":\"y2\",\"type\":\"uint8\"}],\"name\":\"make_move\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_time_per_move\",\"type\":\"uint256\"},{\"name\":\"opponent_stake\",\"type\":\"uint256\"}],\"name\":\"new_game\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"board_size\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"game_num\",\"type\":\"uint256\"}],\"name\":\"claim_time_victory\",\"outputs\":[],\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"game_num\",\"type\":\"uint256\"}],\"name\":\"LogGameCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"game_num\",\"type\":\"uint256\"}],\"name\":\"LogGameStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"game_num\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winner\",\"type\":\"uint8\"}],\"name\":\"LogVictory\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"game_num\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"x1\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"y1\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"x2\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"y2\",\"type\":\"uint8\"}],\"name\":\"LogMoveMade\",\"type\":\"event\"}]","ContractName":"ConnectSix","CompilerVersion":"v0.3.5-2016-07-21-6610add","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}