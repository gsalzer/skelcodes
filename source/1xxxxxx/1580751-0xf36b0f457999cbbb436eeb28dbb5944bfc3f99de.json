{"status":"1","message":"OK","result":[{"SourceCode":"contract tickingBomb {\r\n\r\n    struct team {\r\n        string name;\r\n        uint lastUpdate;\r\n        address[] members;\r\n        uint nbrMembers;\r\n    }\r\n\r\n    uint public constant DELAY =  60 * 60 * 24; // 24 Hours\r\n    uint public constant INVEST_AMOUNT = 1000 finney; // 1 ETH\r\n    uint constant FEE = 3;\r\n\r\n    team public red;\r\n    team public blue;\r\n\r\n    mapping(address => uint) public balances;\r\n    address creator;\r\n\r\n    string[] public historyWinner;\r\n    uint[] public historyRed;\r\n    uint[] public historyBlue;\r\n    uint public gameNbr;\r\n\r\n    function tickingBomb() {\r\n        newRound();\r\n        creator = msg.sender;\r\n        gameNbr = 0;\r\n    }\r\n\r\n    function helpRed() {\r\n        uint i;\r\n        uint amount = msg.value;\r\n\r\n        // Check if Exploded, if so save the previous game\r\n        // And create a new round\r\n        checkIfExploded();\r\n\r\n        // Update the TimeStamp\r\n        red.lastUpdate = block.timestamp;\r\n\r\n        // Split the incoming money every INVEST_AMOUNT\r\n        while (amount >= INVEST_AMOUNT) {\r\n            red.members.push(msg.sender);\r\n            red.nbrMembers++;\r\n            amount -= INVEST_AMOUNT;\r\n        }\r\n\r\n        // If there is still some money in the balance, sent it back\r\n        if (amount > 0) {\r\n            msg.sender.send(amount);\r\n        }\r\n    }\r\n\r\n    function helpBlue() {\r\n        uint i;\r\n        uint amount = msg.value;\r\n\r\n        // Check if Exploded, if so save the previous game\r\n        // And create a new game\r\n        checkIfExploded();\r\n\r\n        // Update the TimeStamp\r\n        blue.lastUpdate = block.timestamp;\r\n\r\n        // Split the incoming money every 100 finneys\r\n        while (amount >= INVEST_AMOUNT) {\r\n            blue.members.push(msg.sender);\r\n            blue.nbrMembers++;\r\n            amount -= INVEST_AMOUNT;\r\n        }\r\n\r\n        // If there is still some money in the balance, sent it back\r\n        if (amount > 0) {\r\n            msg.sender.send(amount);\r\n        }\r\n    }\r\n\r\n    function checkIfExploded() {\r\n        if (checkTime()) {\r\n            newRound();\r\n        }\r\n    }\r\n\r\n    function checkTime() private returns(bool exploded) {\r\n        uint i;\r\n        uint lostAmount = 0;\r\n        uint gainPerMember = 0;\r\n        uint feeCollected = 0;\r\n\r\n        // If Red and Blue have exploded at the same time, return the amounted invested\r\n        if (red.lastUpdate == blue.lastUpdate && red.lastUpdate + DELAY < block.timestamp) {\r\n            for (i = 0; i < red.members.length; i++) {\r\n                balances[red.members[i]] += INVEST_AMOUNT;\r\n            }\r\n            for (i = 0; i < blue.members.length; i++) {\r\n                balances[blue.members[i]] += INVEST_AMOUNT;\r\n            }\r\n\r\n            historyWinner.push('Tie between Red and Blue');\r\n            historyRed.push(red.nbrMembers);\r\n            historyBlue.push(blue.nbrMembers);\r\n            gameNbr++;\r\n            return true;\r\n        }\r\n\r\n        // Take the older timestamp\r\n        if (red.lastUpdate < blue.lastUpdate) {\r\n            // Check if the Red bomb exploded\r\n            if (red.lastUpdate + DELAY < block.timestamp) {\r\n                // Calculate the lost amount by the red team\r\n                // Number of Red member * Invested amount per user  *\r\n                feeCollected += (red.nbrMembers * INVEST_AMOUNT * FEE / 100);\r\n                balances[creator] += feeCollected;\r\n                lostAmount = (red.nbrMembers * INVEST_AMOUNT) - feeCollected;\r\n\r\n                gainPerMember = lostAmount / blue.nbrMembers;\r\n                for (i = 0; i < blue.members.length; i++) {\r\n                    balances[blue.members[i]] += (INVEST_AMOUNT + gainPerMember);\r\n                }\r\n\r\n                historyWinner.push('Red');\r\n                historyRed.push(red.nbrMembers);\r\n                historyBlue.push(blue.nbrMembers);\r\n                gameNbr++;\r\n                return true;\r\n            }\r\n            return false;\r\n        } else {\r\n            // Check if the Blue bomb exploded\r\n            if (blue.lastUpdate + DELAY < block.timestamp) {\r\n                // Calculate the lost amount by the red team\r\n                // Number of Red member * Invested amount per user  *\r\n                feeCollected += (blue.nbrMembers * INVEST_AMOUNT * FEE / 100);\r\n                balances[creator] += feeCollected;\r\n                lostAmount = (blue.nbrMembers * INVEST_AMOUNT) - feeCollected;\r\n                gainPerMember = lostAmount / red.nbrMembers;\r\n                for (i = 0; i < red.members.length; i++) {\r\n                    balances[red.members[i]] += (INVEST_AMOUNT + gainPerMember);\r\n                }\r\n\r\n                historyWinner.push('Blue');\r\n                historyRed.push(red.nbrMembers);\r\n                historyBlue.push(blue.nbrMembers);\r\n                gameNbr++;\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function newRound() private {\r\n        red.name = \"Red team\";\r\n        blue.name = \"Blue team\";\r\n        red.lastUpdate = block.timestamp;\r\n        blue.lastUpdate = block.timestamp;\r\n        red.nbrMembers = 0;\r\n        blue.nbrMembers = 0;\r\n        red.members = new address[](0);\r\n        blue.members = new address[](0);\r\n    }\r\n\r\n    function() {\r\n        // Help the oldest timestamp (going to explode first)\r\n        if (red.lastUpdate < blue.lastUpdate) {\r\n            helpRed();\r\n        } else {\r\n            helpBlue();\r\n        }\r\n    }\r\n\r\n    function collectBalance() {\r\n        msg.sender.send(balances[msg.sender]);\r\n        balances[msg.sender] = 0;\r\n    }\r\n\r\n    // Allow the creator to send their balances to the players\r\n    function sendBalance(address player) {\r\n        if (msg.sender == creator) {\r\n            player.send(balances[player]);\r\n        }\r\n    }\r\n\r\n    function newOwner(address newOwner) {\r\n        if (msg.sender == creator) {\r\n            creator = newOwner;\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"helpBlue\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"checkIfExploded\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"red\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"lastUpdate\",\"type\":\"uint256\"},{\"name\":\"nbrMembers\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"helpRed\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameNbr\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INVEST_AMOUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"sendBalance\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DELAY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"newOwner\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"collectBalance\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"historyWinner\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"historyRed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blue\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"lastUpdate\",\"type\":\"uint256\"},{\"name\":\"nbrMembers\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"historyBlue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"inputs\":[],\"type\":\"constructor\"}]","ContractName":"tickingBomb","CompilerVersion":"v0.3.1-2016-04-18-81ae2a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}