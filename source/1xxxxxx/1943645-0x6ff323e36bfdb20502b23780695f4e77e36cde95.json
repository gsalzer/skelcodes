{"status":"1","message":"OK","result":[{"SourceCode":"// Single-owner wallet that keeps ETC and ETH separately and helps preventing\r\n// replaying both, incoming and outgoing transactions.\r\n//\r\n// Once instantiated, the contract sets up three addressed:\r\n// 1. Address to be used to send and receive ETC.  This address will reject all\r\n//    incoming ETH transfers, so its ETH balance will always be zero;\r\n// 2. Address to be used to send and receive ETH.  This address will reject all\r\n//    incoming ETC transfers, so its ETC balance will always be zero;\r\n// 3. Address to be used to receive payments in both flavors of ether or even\r\n//    unsplit replayable ETC+ETH payments.  Ether coming to this address will\r\n//    be automatically classified and distributed among address 1 and address 2.\r\ncontract TriWallet {\r\n  // Is set to true in the forked branch and to false in classic branch.\r\n  bool public thisIsFork;\r\n\r\n  // Address of ETC subwallet.\r\n  address public etcWallet;\r\n\r\n  // Address of ETH subwallet.\r\n  address public ethWallet;\r\n\r\n  // Log address of ETC subwallet\r\n  event ETCWalletCreated(address etcWalletAddress);\r\n\r\n  // Log address of ETH subwallet\r\n  event ETHWalletCreated(address ethWalletAddress);\r\n\r\n  // Instantiate the contract.\r\n  function TriWallet () {\r\n    // Check whether we are in fork branch or in classic one\r\n    thisIsFork = BranchSender (0x23141df767233776f7cbbec497800ddedaa4c684).isRightBranch ();\r\n    \r\n    // Create ETC subwallet\r\n    etcWallet = new BranchWallet (msg.sender, !thisIsFork);\r\n    \r\n    // Create ETH subwallet\r\n    ethWallet = new BranchWallet (msg.sender, thisIsFork);\r\n  \r\n    // Log address of ETC subwallet\r\n    ETCWalletCreated (etcWallet);\r\n\r\n    // Log address of ETH subwallet\r\n    ETHWalletCreated (ethWallet);\r\n  }\r\n\r\n  // Distribute pending balance between ETC and ETH subwallets.\r\n  function distribute () {\r\n    if (thisIsFork) {\r\n      // Send all ETH to ETH subwallet\r\n      if (!ethWallet.send (this.balance)) throw;\r\n    } else {\r\n      // Send all ETC to ETC subwallet\r\n      if (!etcWallet.send (this.balance)) throw;\r\n    }\r\n  }\r\n}\r\n\r\n// Wallet contract that operates only in \"right\" branch.\r\ncontract BranchWallet {\r\n  // Owner of the wallet\r\n  address public owner;\r\n    \r\n  // Is set to true if and only if we are currently in the \"right\" branch of\r\n  // the blockchain, i.e. the branch this wallet is operating in.\r\n  bool public isRightBranch;\r\n\r\n  // Instantiate the contract.\r\n  //\r\n  // @param owner owner of the contract\r\n  // @isRightBranch whether we are currently in the \"right\" branch\r\n  function BranchWallet (address _owner, bool _isRightBranch) {\r\n    owner = _owner;\r\n    isRightBranch = _isRightBranch;\r\n  }\r\n\r\n  // Only accept money in \"right\" branch.\r\n  function () {\r\n    if (!isRightBranch) throw;\r\n  }\r\n\r\n  // Execute a transaction using money from this wallet.\r\n  //\r\n  // @param to transaction destination\r\n  // @param value transaction value\r\n  // @param data transaction data\r\n  function send (address _to, uint _value) {\r\n    if (!isRightBranch) throw;\r\n    if (msg.sender != owner) throw;\r\n    if (!_to.send (_value)) throw;\r\n  }\r\n\r\n  // Execute a transaction using money from this wallet.\r\n  //\r\n  // @param to transaction destination\r\n  // @param value transaction value\r\n  // @param data transaction data\r\n  function execute (address _to, uint _value, bytes _data) {\r\n    if (!isRightBranch) throw;\r\n    if (msg.sender != owner) throw;\r\n    if (!_to.call.value (_value)(_data)) throw;\r\n  }\r\n}\r\n\r\n// Simple smart contract that allows anyone to tell where we are currently in the\r\n// \"right\" branch of blockchain.\r\ncontract BranchSender {\r\n  // Is set to true if and only if we are currently in the \"right\" branch of\r\n  // the blockchain.\r\n  bool public isRightBranch;\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"ethWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"thisIsFork\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"distribute\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etcWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"inputs\":[],\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"etcWalletAddress\",\"type\":\"address\"}],\"name\":\"ETCWalletCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ethWalletAddress\",\"type\":\"address\"}],\"name\":\"ETHWalletCreated\",\"type\":\"event\"}]","ContractName":"TriWallet","CompilerVersion":"v0.3.5-2016-07-21-6610add","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}