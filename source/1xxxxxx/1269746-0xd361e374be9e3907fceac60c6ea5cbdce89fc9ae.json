{"status":"1","message":"OK","result":[{"SourceCode":"contract Highlander {\r\n\r\n  struct Contestant {\r\n      address etherAddress;\r\n  }\r\n\r\n  Contestant[] public contestant;\r\n\r\n  uint public PreviousTime;\r\n  uint public CurrentTime;\r\n  uint public active = 1;\r\n  uint public Current_balance = 0;\r\n  address public owner;\r\n\r\n  modifier onlyowner { if (msg.sender == owner) _ }\r\n\r\n\r\n  function Highlander() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  function() {\r\n    enter();\r\n  }\r\n  \r\n  function enter() {\r\n\r\n  \tif(msg.value != 5 ether){\r\n\t\tmsg.sender.send(msg.value);\r\n\t\treturn;\r\n\t}\r\n\t\r\n\tuint idx = contestant.length;\r\n    contestant.length += 1;\r\n    contestant[idx].etherAddress = msg.sender;\r\n\r\n\towner.send(msg.value / 10);\r\n\tCurrent_balance = this.balance;\r\n\tCurrentTime = now;\r\n \r\n\tif(idx == 0){\r\n\tPreviousTime = now;\r\n\treturn;\r\n\t}\r\n\t\r\n\tif(CurrentTime - PreviousTime > 1 days){\r\n\r\n\tcontestant[idx-1].etherAddress.send(this.balance - 5 ether);\r\n\tPreviousTime = CurrentTime;\r\n\r\n\t} else\r\n\t\t{\r\n\t\tPreviousTime = CurrentTime;\r\n\t\t}\r\n\r\n\tCurrent_balance = this.balance;\t\t\r\n\t}\r\n\t\r\n  function kill(){\r\n  if(msg.sender == owner && this.balance <= 5) {\r\n  active = 0;\r\n  suicide(owner);\r\n  \r\n  }\r\n  }\r\n  function setOwner(address _owner) onlyowner {\r\n      owner = _owner;\r\n  }\t\r\n\r\n   // for website\r\n      function CT() constant returns (uint CurrTime) {\r\n        CurrTime = CurrentTime;\r\n    }\r\n      function PT() constant returns (uint PrevTime) {\r\n        PrevTime = PreviousTime;\r\n    }\r\n      function bal() constant returns (uint WebBal) {\r\n        WebBal = Current_balance;\r\n    }\t\r\n\t\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"active\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bal\",\"outputs\":[{\"name\":\"WebBal\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PreviousTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contestant\",\"outputs\":[{\"name\":\"etherAddress\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CT\",\"outputs\":[{\"name\":\"CurrTime\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CurrentTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PT\",\"outputs\":[{\"name\":\"PrevTime\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Current_balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enter\",\"outputs\":[],\"type\":\"function\"},{\"inputs\":[],\"type\":\"constructor\"}]","ContractName":"Highlander","CompilerVersion":"v0.2.1-2016-01-30-91a6b35","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}