{"status":"1","message":"OK","result":[{"SourceCode":"// Version 0.1\r\n// This swap contract was created by Attores and released under a GPL license\r\n// Visit attores.com for more contracts and Smart contract as a Service \r\n\r\n// This is the standard token interface\r\ncontract TokenInterface {\r\n\r\n  struct User {\r\n    bool locked;\r\n    uint256 balance;\r\n    uint256 badges;\r\n    mapping (address => uint256) allowed;\r\n  }\r\n\r\n  mapping (address => User) users;\r\n  mapping (address => uint256) balances;\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n  mapping (address => bool) seller;\r\n\r\n  address config;\r\n  address owner;\r\n  address dao;\r\n  bool locked;\r\n\r\n  /// @return total amount of tokens\r\n  uint256 public totalSupply;\r\n  uint256 public totalBadges;\r\n\r\n  /// @param _owner The address from which the balance will be retrieved\r\n  /// @return The balance\r\n  function balanceOf(address _owner) constant returns (uint256 balance);\r\n\r\n  /// @param _owner The address from which the badge count will be retrieved\r\n  /// @return The badges count\r\n  function badgesOf(address _owner) constant returns (uint256 badge);\r\n\r\n  /// @notice send `_value` tokens to `_to` from `msg.sender`\r\n  /// @param _to The address of the recipient\r\n  /// @param _value The amount of tokens to be transfered\r\n  /// @return Whether the transfer was successful or not\r\n  function transfer(address _to, uint256 _value) returns (bool success);\r\n\r\n  /// @notice send `_value` badges to `_to` from `msg.sender`\r\n  /// @param _to The address of the recipient\r\n  /// @param _value The amount of tokens to be transfered\r\n  /// @return Whether the transfer was successful or not\r\n  function sendBadge(address _to, uint256 _value) returns (bool success);\r\n\r\n  /// @notice send `_value` tokens to `_to` from `_from` on the condition it is approved by `_from`\r\n  /// @param _from The address of the sender\r\n  /// @param _to The address of the recipient\r\n  /// @param _value The amount of tokens to be transfered\r\n  /// @return Whether the transfer was successful or not\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n\r\n  /// @notice `msg.sender` approves `_spender` to spend `_value` tokens on its behalf\r\n  /// @param _spender The address of the account able to transfer the tokens\r\n  /// @param _value The amount of tokens to be approved for transfer\r\n  /// @return Whether the approval was successful or not\r\n  function approve(address _spender, uint256 _value) returns (bool success);\r\n\r\n  /// @param _owner The address of the account owning tokens\r\n  /// @param _spender The address of the account able to transfer the tokens\r\n  /// @return Amount of remaining tokens of _owner that _spender is allowed to spend\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n\r\n  /// @notice mint `_amount` of tokens to `_owner`\r\n  /// @param _owner The address of the account receiving the tokens\r\n  /// @param _amount The amount of tokens to mint\r\n  /// @return Whether or not minting was successful\r\n  function mint(address _owner, uint256 _amount) returns (bool success);\r\n\r\n  /// @notice mintBadge Mint `_amount` badges to `_owner`\r\n  /// @param _owner The address of the account receiving the tokens\r\n  /// @param _amount The amount of tokens to mint\r\n  /// @return Whether or not minting was successful\r\n  function mintBadge(address _owner, uint256 _amount) returns (bool success);\r\n\r\n  function registerDao(address _dao) returns (bool success);\r\n\r\n  function registerSeller(address _tokensales) returns (bool success);\r\n\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n  event SendBadge(address indexed _from, address indexed _to, uint256 _amount);\r\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n// Actual swap contract written by Attores\r\ncontract swap{\r\n    address public beneficiary;\r\n    TokenInterface public tokenObj;\r\n    uint public price_token;\r\n    uint256 public WEI_PER_FINNEY = 1000000000000000;\r\n    uint public BILLION = 1000000000;\r\n    uint public expiryDate;\r\n    \r\n    // Constructor function for this contract. Called during contract creation\r\n    function swap(address sendEtherTo, address adddressOfToken, uint tokenPriceInFinney_1000FinneyIs_1Ether, uint durationInDays){\r\n        beneficiary = sendEtherTo;\r\n        tokenObj = TokenInterface(adddressOfToken);\r\n        price_token = tokenPriceInFinney_1000FinneyIs_1Ether * WEI_PER_FINNEY;\r\n        expiryDate = now + durationInDays * 1 days;\r\n    }\r\n    \r\n    // This function is called every time some one sends ether to this contract\r\n    function(){\r\n        if (now >= expiryDate) throw;\r\n        // Dividing by Billion here to cater for the decimal places\r\n        var tokens_to_send = (msg.value * BILLION) / price_token;\r\n        uint balance = tokenObj.balanceOf(this);\r\n        address payee = msg.sender;\r\n        if (balance >= tokens_to_send){\r\n            tokenObj.transfer(msg.sender, tokens_to_send);\r\n            beneficiary.send(msg.value);    \r\n        } else {\r\n            tokenObj.transfer(msg.sender, balance);\r\n            uint amountReturned = ((tokens_to_send - balance) * price_token) / BILLION;\r\n            payee.send(amountReturned);\r\n            beneficiary.send(msg.value - amountReturned);\r\n        }\r\n    }\r\n    \r\n    modifier afterExpiry() { if (now >= expiryDate) _ }\r\n    \r\n    //This function checks if the expiry date has passed and if it has, then returns the tokens to the beneficiary\r\n    function checkExpiry() afterExpiry{\r\n        uint balance = tokenObj.balanceOf(this);\r\n        tokenObj.transfer(beneficiary, balance);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenObj\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"checkExpiry\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BILLION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"expiryDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WEI_PER_FINNEY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price_token\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"inputs\":[{\"name\":\"sendEtherTo\",\"type\":\"address\"},{\"name\":\"adddressOfToken\",\"type\":\"address\"},{\"name\":\"tokenPriceInFinney_1000FinneyIs_1Ether\",\"type\":\"uint256\"},{\"name\":\"durationInDays\",\"type\":\"uint256\"}],\"type\":\"constructor\"}]","ContractName":"swap","CompilerVersion":"v0.3.2-2016-05-05-1b7e2d3","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000001f14c8687f345f99c99a5d169ffa153af7b89840000000000000000000000000e0b7927c4af23765cb51314a0e0521a9645f0e2a00000000000000000000000000000000000000000000000000000000000002ee0000000000000000000000000000000000000000000000000000000000000001","Library":"","SwarmSource":""}]}