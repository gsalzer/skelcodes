{"status":"1","message":"OK","result":[{"SourceCode":"// <ORACLIZE_API>\r\n/*\r\nCopyright (c) 2015-2016 Oraclize srl, Thomas Bertani\r\n\r\n\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\n\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\n\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.\r\n*/\r\n\r\ncontract OraclizeI {\r\n    address public cbAddress;\r\n    function query(uint _timestamp, string _datasource, string _arg) returns (bytes32 _id);\r\n    function query_withGasLimit(uint _timestamp, string _datasource, string _arg, uint _gaslimit) returns (bytes32 _id);\r\n    function query2(uint _timestamp, string _datasource, string _arg1, string _arg2) returns (bytes32 _id);\r\n    function query2_withGasLimit(uint _timestamp, string _datasource, string _arg1, string _arg2, uint _gaslimit) returns (bytes32 _id);\r\n    function getPrice(string _datasource) returns (uint _dsprice);\r\n    function getPrice(string _datasource, uint gaslimit) returns (uint _dsprice);\r\n    function useCoupon(string _coupon);\r\n    function setProofType(byte _proofType);\r\n}\r\ncontract OraclizeAddrResolverI {\r\n    function getAddress() returns (address _addr);\r\n}\r\ncontract usingOraclize {\r\n    uint constant day = 60*60*24;\r\n    uint constant week = 60*60*24*7;\r\n    uint constant month = 60*60*24*30;\r\n    byte constant proofType_NONE = 0x00;\r\n    byte constant proofType_TLSNotary = 0x10;\r\n    byte constant proofStorage_IPFS = 0x01;\r\n    uint8 constant networkID_auto = 0;\r\n    uint8 constant networkID_mainnet = 1;\r\n    uint8 constant networkID_testnet = 2;\r\n    uint8 constant networkID_morden = 2;\r\n    uint8 constant networkID_consensys = 161;\r\n\r\n    OraclizeAddrResolverI OAR;\r\n\r\n    OraclizeI oraclize;\r\n    modifier oraclizeAPI {\r\n        address oraclizeAddr = OAR.getAddress();\r\n        if (oraclizeAddr == 0){\r\n            oraclize_setNetwork(networkID_auto);\r\n            oraclizeAddr = OAR.getAddress();\r\n        }\r\n        oraclize = OraclizeI(oraclizeAddr);\r\n        _\r\n    }\r\n    modifier coupon(string code){\r\n        oraclize = OraclizeI(OAR.getAddress());\r\n        oraclize.useCoupon(code);\r\n        _\r\n    }\r\n\r\n    function oraclize_setNetwork(uint8 networkID) internal returns(bool){\r\n        if (getCodeSize(0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed)>0){\r\n            OAR = OraclizeAddrResolverI(0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed);\r\n            return true;\r\n        }\r\n        if (getCodeSize(0x9efbea6358bed926b293d2ce63a730d6d98d43dd)>0){\r\n            OAR = OraclizeAddrResolverI(0x9efbea6358bed926b293d2ce63a730d6d98d43dd);\r\n            return true;\r\n        }\r\n        if (getCodeSize(0x20e12a1f859b3feae5fb2a0a32c18f5a65555bbf)>0){\r\n            OAR = OraclizeAddrResolverI(0x20e12a1f859b3feae5fb2a0a32c18f5a65555bbf);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function oraclize_query(string datasource, string arg) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource);\r\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\r\n        return oraclize.query.value(price)(0, datasource, arg);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string arg) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource);\r\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\r\n        return oraclize.query.value(price)(timestamp, datasource, arg);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource, gaslimit);\r\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\r\n        return oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource, gaslimit);\r\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\r\n        return oraclize.query_withGasLimit.value(price)(0, datasource, arg, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource);\r\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\r\n        return oraclize.query2.value(price)(0, datasource, arg1, arg2);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource);\r\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\r\n        return oraclize.query2.value(price)(timestamp, datasource, arg1, arg2);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource, gaslimit);\r\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\r\n        return oraclize.query2_withGasLimit.value(price)(timestamp, datasource, arg1, arg2, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource, gaslimit);\r\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\r\n        return oraclize.query2_withGasLimit.value(price)(0, datasource, arg1, arg2, gaslimit);\r\n    }\r\n    function oraclize_cbAddress() oraclizeAPI internal returns (address){\r\n        return oraclize.cbAddress();\r\n    }\r\n    function oraclize_setProof(byte proofP) oraclizeAPI internal {\r\n        return oraclize.setProofType(proofP);\r\n    }\r\n\r\n    function getCodeSize(address _addr) constant internal returns(uint _size) {\r\n        assembly {\r\n            _size := extcodesize(_addr)\r\n        }\r\n    }\r\n\r\n\r\n    function parseAddr(string _a) internal returns (address){\r\n        bytes memory tmp = bytes(_a);\r\n        uint160 iaddr = 0;\r\n        uint160 b1;\r\n        uint160 b2;\r\n        for (uint i=2; i<2+2*20; i+=2){\r\n            iaddr *= 256;\r\n            b1 = uint160(tmp[i]);\r\n            b2 = uint160(tmp[i+1]);\r\n            if ((b1 >= 97)&&(b1 <= 102)) b1 -= 87;\r\n            else if ((b1 >= 48)&&(b1 <= 57)) b1 -= 48;\r\n            if ((b2 >= 97)&&(b2 <= 102)) b2 -= 87;\r\n            else if ((b2 >= 48)&&(b2 <= 57)) b2 -= 48;\r\n            iaddr += (b1*16+b2);\r\n        }\r\n        return address(iaddr);\r\n    }\r\n\r\n\r\n    function strCompare(string _a, string _b) internal returns (int) {\r\n        bytes memory a = bytes(_a);\r\n        bytes memory b = bytes(_b);\r\n        uint minLength = a.length;\r\n        if (b.length < minLength) minLength = b.length;\r\n        for (uint i = 0; i < minLength; i ++)\r\n            if (a[i] < b[i])\r\n                return -1;\r\n            else if (a[i] > b[i])\r\n                return 1;\r\n        if (a.length < b.length)\r\n            return -1;\r\n        else if (a.length > b.length)\r\n            return 1;\r\n        else\r\n            return 0;\r\n   }\r\n\r\n    function indexOf(string _haystack, string _needle) internal returns (int)\r\n    {\r\n        bytes memory h = bytes(_haystack);\r\n        bytes memory n = bytes(_needle);\r\n        if(h.length < 1 || n.length < 1 || (n.length > h.length))\r\n            return -1;\r\n        else if(h.length > (2**128 -1))\r\n            return -1;\r\n        else\r\n        {\r\n            uint subindex = 0;\r\n            for (uint i = 0; i < h.length; i ++)\r\n            {\r\n                if (h[i] == n[0])\r\n                {\r\n                    subindex = 1;\r\n                    while(subindex < n.length && (i + subindex) < h.length && h[i + subindex] == n[subindex])\r\n                    {\r\n                        subindex++;\r\n                    }\r\n                    if(subindex == n.length)\r\n                        return int(i);\r\n                }\r\n            }\r\n            return -1;\r\n        }\r\n    }\r\n\r\n    function strConcat(string _a, string _b, string _c, string _d, string _e) internal returns (string){\r\n        bytes memory _ba = bytes(_a);\r\n        bytes memory _bb = bytes(_b);\r\n        bytes memory _bc = bytes(_c);\r\n        bytes memory _bd = bytes(_d);\r\n        bytes memory _be = bytes(_e);\r\n        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\r\n        bytes memory babcde = bytes(abcde);\r\n        uint k = 0;\r\n        for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\r\n        for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\r\n        for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\r\n        for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\r\n        for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];\r\n        return string(babcde);\r\n    }\r\n\r\n    function strConcat(string _a, string _b, string _c, string _d) internal returns (string) {\r\n        return strConcat(_a, _b, _c, _d, \"\");\r\n    }\r\n\r\n    function strConcat(string _a, string _b, string _c) internal returns (string) {\r\n        return strConcat(_a, _b, _c, \"\", \"\");\r\n    }\r\n\r\n    function strConcat(string _a, string _b) internal returns (string) {\r\n        return strConcat(_a, _b, \"\", \"\", \"\");\r\n    }\r\n\r\n    // parseInt\r\n    function parseInt(string _a) internal returns (uint) {\r\n        return parseInt(_a, 0);\r\n    }\r\n\r\n    // parseInt(parseFloat*10^_b)\r\n    function parseInt(string _a, uint _b) internal returns (uint) {\r\n        bytes memory bresult = bytes(_a);\r\n        uint mint = 0;\r\n        bool decimals = false;\r\n        for (uint i=0; i<bresult.length; i++){\r\n            if ((bresult[i] >= 48)&&(bresult[i] <= 57)){\r\n                if (decimals){\r\n                   if (_b == 0) break;\r\n                    else _b--;\r\n                }\r\n                mint *= 10;\r\n                mint += uint(bresult[i]) - 48;\r\n            } else if (bresult[i] == 46) decimals = true;\r\n        }\r\n        if (_b > 0) mint *= 10**_b;\r\n        return mint;\r\n    }\r\n\r\n\r\n}\r\n// </ORACLIZE_API>\r\n\r\ncontract Dice is usingOraclize {\r\n\r\n    uint public pwin = 5000; //probability of winning (10000 = 100%)\r\n    uint public edge = 200; //edge percentage (10000 = 100%)\r\n    uint public maxWin = 100; //max win (before edge is taken) as percentage of bankroll (10000 = 100%)\r\n    uint public minBet = 1 finney;\r\n    uint public maxInvestors = 5; //maximum number of investors\r\n    uint public houseEdge = 50; //edge percentage (10000 = 100%)\r\n    uint public divestFee = 50; //divest fee percentage (10000 = 100%)\r\n    uint public emergencyWithdrawalRatio = 90; //ratio percentage (100 = 100%)\r\n\r\n    uint safeGas = 25000;\r\n    uint constant ORACLIZE_GAS_LIMIT = 125000;\r\n    uint constant INVALID_BET_MARKER = 99999;\r\n    uint constant EMERGENCY_TIMEOUT = 7 days;\r\n\r\n    struct Investor {\r\n        address investorAddress;\r\n        uint amountInvested;\r\n        bool votedForEmergencyWithdrawal;\r\n    }\r\n\r\n    struct Bet {\r\n        address playerAddress;\r\n        uint amountBetted;\r\n        uint numberRolled;\r\n    }\r\n\r\n    struct WithdrawalProposal {\r\n        address toAddress;\r\n        uint atTime;\r\n    }\r\n\r\n    //Starting at 1\r\n    mapping(address => uint) investorIDs;\r\n    mapping(uint => Investor) investors;\r\n    uint public numInvestors = 0;\r\n\r\n    uint public invested = 0;\r\n\r\n    address owner;\r\n    address houseAddress;\r\n    bool public isStopped;\r\n\r\n    WithdrawalProposal proposedWithdrawal;\r\n\r\n    mapping (bytes32 => Bet) bets;\r\n    bytes32[] betsKeys;\r\n\r\n    uint public amountWagered = 0;\r\n    uint public investorsProfit = 0;\r\n    uint public investorsLoses = 0;\r\n    bool profitDistributed;\r\n\r\n    event BetWon(address playerAddress, uint numberRolled, uint amountWon);\r\n    event BetLost(address playerAddress, uint numberRolled);\r\n    event EmergencyWithdrawalProposed();\r\n    event EmergencyWithdrawalFailed(address withdrawalAddress);\r\n    event EmergencyWithdrawalSucceeded(address withdrawalAddress, uint amountWithdrawn);\r\n    event FailedSend(address receiver, uint amount);\r\n    event ValueIsTooBig();\r\n\r\n    function Dice(uint pwinInitial,\r\n                  uint edgeInitial,\r\n                  uint maxWinInitial,\r\n                  uint minBetInitial,\r\n                  uint maxInvestorsInitial,\r\n                  uint houseEdgeInitial,\r\n                  uint divestFeeInitial,\r\n                  uint emergencyWithdrawalRatioInitial\r\n                  ) {\r\n\r\n        oraclize_setProof(proofType_TLSNotary | proofStorage_IPFS);\r\n\r\n        pwin = pwinInitial;\r\n        edge = edgeInitial;\r\n        maxWin = maxWinInitial;\r\n        minBet = minBetInitial;\r\n        maxInvestors = maxInvestorsInitial;\r\n        houseEdge = houseEdgeInitial;\r\n        divestFee = divestFeeInitial;\r\n        emergencyWithdrawalRatio = emergencyWithdrawalRatioInitial;\r\n        owner = msg.sender;\r\n        houseAddress = msg.sender;\r\n    }\r\n\r\n    //SECTION I: MODIFIERS AND HELPER FUNCTIONS\r\n\r\n    //MODIFIERS\r\n\r\n    modifier onlyIfNotStopped {\r\n        if (isStopped) throw;\r\n        _\r\n    }\r\n\r\n    modifier onlyIfStopped {\r\n        if (!isStopped) throw;\r\n        _\r\n    }\r\n\r\n    modifier onlyInvestors {\r\n        if (investorIDs[msg.sender] == 0) throw;\r\n        _\r\n    }\r\n\r\n    modifier onlyNotInvestors {\r\n        if (investorIDs[msg.sender] != 0) throw;\r\n        _\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        if (owner != msg.sender) throw;\r\n        _\r\n    }\r\n\r\n    modifier onlyOraclize {\r\n        if (msg.sender != oraclize_cbAddress()) throw;\r\n        _\r\n    }\r\n\r\n    modifier onlyMoreThanMinInvestment {\r\n        if (msg.value <= getMinInvestment()) throw;\r\n        _\r\n    }\r\n\r\n    modifier onlyMoreThanZero {\r\n        if (msg.value == 0) throw;\r\n        _\r\n    }\r\n\r\n    modifier onlyIfBetSizeIsStillCorrect(bytes32 myid) {\r\n        Bet thisBet = bets[myid];\r\n        if ((((thisBet.amountBetted * ((10000 - edge) - pwin)) / pwin ) <= (maxWin * getBankroll()) / 10000)) {\r\n             _\r\n        }\r\n        else {\r\n            bets[myid].numberRolled = INVALID_BET_MARKER;\r\n            safeSend(thisBet.playerAddress, thisBet.amountBetted);\r\n            return;\r\n        }\r\n    }\r\n\r\n    modifier onlyIfValidRoll(bytes32 myid, string result) {\r\n        Bet thisBet = bets[myid];\r\n        uint numberRolled = parseInt(result);\r\n        if ((numberRolled < 1 || numberRolled > 10000) && thisBet.numberRolled == 0) {\r\n            bets[myid].numberRolled = INVALID_BET_MARKER;\r\n            safeSend(thisBet.playerAddress, thisBet.amountBetted);\r\n            return;\r\n        }\r\n        _\r\n    }\r\n\r\n    modifier onlyIfInvestorBalanceIsPositive(address currentInvestor) {\r\n        if (getBalance(currentInvestor) >= 0) {\r\n            _\r\n        }\r\n    }\r\n\r\n    modifier onlyWinningBets(uint numberRolled) {\r\n        if (numberRolled - 1 < pwin) {\r\n            _\r\n        }\r\n    }\r\n\r\n    modifier onlyLosingBets(uint numberRolled) {\r\n        if (numberRolled - 1 >= pwin) {\r\n            _\r\n        }\r\n    }\r\n\r\n    modifier onlyAfterProposed {\r\n        if (proposedWithdrawal.toAddress == 0) throw;\r\n        _\r\n    }\r\n\r\n    modifier rejectValue {\r\n        if (msg.value != 0) throw;\r\n        _\r\n    }\r\n\r\n    modifier onlyIfProfitNotDistributed {\r\n        if (!profitDistributed) {\r\n            _\r\n        }\r\n    }\r\n\r\n    modifier onlyIfValidGas(uint newGasLimit) {\r\n        if (newGasLimit < 25000) throw;\r\n        _\r\n    }\r\n\r\n    modifier onlyIfNotProcessed(bytes32 myid) {\r\n        Bet thisBet = bets[myid];\r\n        if (thisBet.numberRolled > 0) throw;\r\n        _\r\n    }\r\n\r\n    modifier onlyIfEmergencyTimeOutHasPassed {\r\n        if (proposedWithdrawal.atTime + EMERGENCY_TIMEOUT > now) throw;\r\n        _\r\n    }\r\n\r\n\r\n    //CONSTANT HELPER FUNCTIONS\r\n\r\n    function getBankroll() constant returns(uint) {\r\n        return invested + investorsProfit - investorsLoses;\r\n    }\r\n\r\n    function getMinInvestment() constant returns(uint) {\r\n        if (numInvestors == maxInvestors) {\r\n            uint investorID = searchSmallestInvestor();\r\n            return getBalance(investors[investorID].investorAddress);\r\n        }\r\n        else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function getStatus() constant returns(uint, uint, uint, uint, uint, uint, uint, uint, uint) {\r\n\r\n        uint bankroll = getBankroll();\r\n\r\n        if (this.balance < bankroll) {\r\n            bankroll = this.balance;\r\n        }\r\n\r\n        uint minInvestment = getMinInvestment();\r\n\r\n        return (bankroll, pwin, edge, maxWin, minBet, amountWagered, (investorsProfit - investorsLoses), minInvestment, betsKeys.length);\r\n    }\r\n\r\n    function getBet(uint id) constant returns(address, uint, uint) {\r\n        if (id < betsKeys.length) {\r\n            bytes32 betKey = betsKeys[id];\r\n            return (bets[betKey].playerAddress, bets[betKey].amountBetted, bets[betKey].numberRolled);\r\n        }\r\n    }\r\n\r\n    function numBets() constant returns(uint) {\r\n        return betsKeys.length;\r\n    }\r\n\r\n    function getMinBetAmount() constant returns(uint) {\r\n        uint oraclizeFee = OraclizeI(OAR.getAddress()).getPrice(\"URL\", ORACLIZE_GAS_LIMIT + safeGas);\r\n        return oraclizeFee + minBet;\r\n    }\r\n\r\n    function getMaxBetAmount() constant returns(uint) {\r\n        uint oraclizeFee = OraclizeI(OAR.getAddress()).getPrice(\"URL\", ORACLIZE_GAS_LIMIT + safeGas);\r\n        uint betValue =  (maxWin * getBankroll()) * pwin / (10000 * (10000 - edge - pwin));\r\n        return betValue + oraclizeFee;\r\n    }\r\n\r\n    function getLosesShare(address currentInvestor) constant returns (uint) {\r\n        return investors[investorIDs[currentInvestor]].amountInvested * (investorsLoses) / invested;\r\n    }\r\n\r\n    function getProfitShare(address currentInvestor) constant returns (uint) {\r\n        return investors[investorIDs[currentInvestor]].amountInvested * (investorsProfit) / invested;\r\n    }\r\n\r\n    function getBalance(address currentInvestor) constant returns (uint) {\r\n        return investors[investorIDs[currentInvestor]].amountInvested + getProfitShare(currentInvestor) - getLosesShare(currentInvestor);\r\n    }\r\n\r\n    // PRIVATE HELPERS FUNCTION\r\n\r\n    function searchSmallestInvestor() private returns(uint) {\r\n        uint investorID = 1;\r\n        for (uint i = 1; i <= numInvestors; i++) {\r\n            if (getBalance(investors[i].investorAddress) < getBalance(investors[investorID].investorAddress)) {\r\n                investorID = i;\r\n            }\r\n        }\r\n\r\n        return investorID;\r\n    }\r\n\r\n    function safeSend(address addr, uint value) private {\r\n        if (this.balance < value) {\r\n            ValueIsTooBig();\r\n            return;\r\n        }\r\n\r\n        if (!(addr.call.gas(safeGas).value(value)())) {\r\n            FailedSend(addr, value);\r\n            if (addr != houseAddress) {\r\n                //Forward to house address all change\r\n                if (!(houseAddress.call.gas(safeGas).value(value)())) FailedSend(houseAddress, value);\r\n            }\r\n        }\r\n    }\r\n\r\n    function addInvestorAtID(uint id) private {\r\n        investorIDs[msg.sender] = id;\r\n        investors[id].investorAddress = msg.sender;\r\n        investors[id].amountInvested = msg.value;\r\n        invested += msg.value;\r\n    }\r\n\r\n    function profitDistribution() private onlyIfProfitNotDistributed {\r\n        uint copyInvested;\r\n\r\n        for (uint i = 1; i <= numInvestors; i++) {\r\n            address currentInvestor = investors[i].investorAddress;\r\n            uint profitOfInvestor = getProfitShare(currentInvestor);\r\n            uint losesOfInvestor = getLosesShare(currentInvestor);\r\n            investors[i].amountInvested += profitOfInvestor - losesOfInvestor;\r\n            copyInvested += investors[i].amountInvested;\r\n        }\r\n\r\n        delete investorsProfit;\r\n        delete investorsLoses;\r\n        invested = copyInvested;\r\n\r\n        profitDistributed = true;\r\n    }\r\n\r\n    // SECTION II: BET & BET PROCESSING\r\n\r\n    function() {\r\n        bet();\r\n    }\r\n\r\n    function bet() onlyIfNotStopped onlyMoreThanZero {\r\n        uint oraclizeFee = OraclizeI(OAR.getAddress()).getPrice(\"URL\", ORACLIZE_GAS_LIMIT + safeGas);\r\n        uint betValue = msg.value - oraclizeFee;\r\n        if ((((betValue * ((10000 - edge) - pwin)) / pwin ) <= (maxWin * getBankroll()) / 10000) && (betValue >= minBet)) {\r\n            // encrypted arg: '\\n{\"jsonrpc\":2.0,\"method\":\"generateSignedIntegers\",\"params\":{\"apiKey\":\"YOUR_API_KEY\",\"n\":1,\"min\":1,\"max\":10000},\"id\":1}'\r\n            bytes32 myid = oraclize_query(\"URL\", \"json(https://api.random.org/json-rpc/1/invoke).result.random.data.0\",\"BK+rmSbo3sio5tjcOIXtPF0iYT1uQQcQpwf5JF9DKv/MpFNt35msnfl+AhZEHxYlZ0/p6s87HG10jRoS0coGTzMOBtpbB5iYU6i7mD7St0QvcCXkUvS7apB5O4eQFAkWwGTgEz1RJ9tbSkXilpgurZ+B+ig9s4g+kwPdsKuWx3+1KVDgNlK8a8DG7KfnIp1QZlDGfZ6wge39cY3BXkFXeoO3ZvUSbBAtyG8f36wx6rwhogQBeBQF6a9HHHlj9AFMj7D2nbf24aMfLyhWri7LIQitVHRs976j8F3T7RHp0gc=\", ORACLIZE_GAS_LIMIT + safeGas);\r\n            bets[myid] = Bet(msg.sender, betValue, 0);\r\n            betsKeys.push(myid);\r\n        }\r\n        else {\r\n            throw;\r\n        }\r\n    }\r\n\r\n    function __callback (bytes32 myid, string result, bytes proof)\r\n        onlyOraclize\r\n        onlyIfNotProcessed(myid)\r\n        onlyIfValidRoll(myid, result)\r\n        onlyIfBetSizeIsStillCorrect(myid)  {\r\n\r\n        Bet thisBet = bets[myid];\r\n        uint numberRolled = parseInt(result);\r\n        bets[myid].numberRolled = numberRolled;\r\n        isWinningBet(thisBet, numberRolled);\r\n        isLosingBet(thisBet, numberRolled);\r\n        amountWagered += thisBet.amountBetted;\r\n        delete profitDistributed;\r\n    }\r\n\r\n    function isWinningBet(Bet thisBet, uint numberRolled) private onlyWinningBets(numberRolled) {\r\n        uint winAmount = (thisBet.amountBetted * (10000 - edge)) / pwin;\r\n        BetWon(thisBet.playerAddress, numberRolled, winAmount);\r\n        safeSend(thisBet.playerAddress, winAmount);\r\n        investorsLoses += (winAmount - thisBet.amountBetted);\r\n    }\r\n\r\n    function isLosingBet(Bet thisBet, uint numberRolled) private onlyLosingBets(numberRolled) {\r\n        BetLost(thisBet.playerAddress, numberRolled);\r\n        safeSend(thisBet.playerAddress, 1);\r\n        investorsProfit += (thisBet.amountBetted - 1)*(10000 - houseEdge)/10000;\r\n        uint houseProfit = (thisBet.amountBetted - 1)*(houseEdge)/10000;\r\n        safeSend(houseAddress, houseProfit);\r\n    }\r\n\r\n    //SECTION III: INVEST & DIVEST\r\n\r\n    function increaseInvestment() onlyIfNotStopped onlyMoreThanZero onlyInvestors  {\r\n        profitDistribution();\r\n        investors[investorIDs[msg.sender]].amountInvested += msg.value;\r\n        invested += msg.value;\r\n    }\r\n\r\n    function newInvestor()\r\n        onlyIfNotStopped\r\n        onlyMoreThanZero\r\n        onlyNotInvestors\r\n        onlyMoreThanMinInvestment {\r\n        profitDistribution();\r\n\r\n        if (numInvestors < maxInvestors) {\r\n            numInvestors++;\r\n            addInvestorAtID(numInvestors);\r\n        }\r\n        else {\r\n            uint smallestInvestorID = searchSmallestInvestor();\r\n            divest(investors[smallestInvestorID].investorAddress);\r\n            addInvestorAtID(smallestInvestorID);\r\n            numInvestors++;\r\n        }\r\n    }\r\n\r\n    function divest() onlyInvestors rejectValue {\r\n        divest(msg.sender);\r\n    }\r\n\r\n    function divest(address currentInvestor)\r\n        private\r\n        onlyIfInvestorBalanceIsPositive(currentInvestor) {\r\n\r\n        profitDistribution();\r\n        uint currentID = investorIDs[currentInvestor];\r\n        uint amountToReturn = getBalance(currentInvestor);\r\n        invested -= investors[currentID].amountInvested;\r\n        uint divestFeeAmount =  (amountToReturn*divestFee)/10000;\r\n        amountToReturn -= divestFeeAmount;\r\n        //Clean up\r\n        numInvestors--;\r\n        delete investors[currentID];\r\n        delete investorIDs[currentInvestor];\r\n        safeSend(currentInvestor, amountToReturn);\r\n        safeSend(houseAddress, divestFeeAmount);\r\n    }\r\n\r\n    function forceDivestOfAllInvestors() onlyOwner rejectValue {\r\n        uint copyNumInvestors = numInvestors;\r\n        for (uint investorID = 1; investorID <= copyNumInvestors; investorID++) {\r\n            divest(investors[investorID].investorAddress);\r\n        }\r\n    }\r\n\r\n    /*\r\n    The owner can use this function to force the exit of an investor from the\r\n    contract during an emergency withdrawal in the following situations:\r\n        - Unresponsive investor\r\n        - Investor demanding to be paid in other to vote, the facto-blackmailing\r\n        other investors\r\n    */\r\n    function forceDivestOfOneInvestor(address currentInvestor)\r\n        onlyOwner\r\n        onlyIfStopped\r\n        rejectValue {\r\n\r\n        divest(currentInvestor);\r\n        //Resets emergency withdrawal proposal. Investors must vote again\r\n        delete proposedWithdrawal;\r\n    }\r\n\r\n    //SECTION IV: CONTRACT MANAGEMENT\r\n\r\n    function stopContract() onlyOwner rejectValue {\r\n        isStopped = true;\r\n    }\r\n\r\n    function resumeContract() onlyOwner rejectValue {\r\n        isStopped = false;\r\n    }\r\n\r\n    function changeHouseAddress(address newHouse) onlyOwner rejectValue {\r\n        houseAddress = newHouse;\r\n    }\r\n\r\n    function changeOwnerAddress(address newOwner) onlyOwner rejectValue {\r\n        owner = newOwner;\r\n    }\r\n\r\n    function changeGasLimitOfSafeSend(uint newGasLimit)\r\n        onlyOwner\r\n        onlyIfValidGas(newGasLimit)\r\n        rejectValue {\r\n        safeGas = newGasLimit;\r\n    }\r\n\r\n    //SECTION V: EMERGENCY WITHDRAWAL\r\n\r\n    function voteEmergencyWithdrawal(bool vote)\r\n        onlyInvestors\r\n        onlyAfterProposed\r\n        onlyIfStopped\r\n        rejectValue {\r\n        investors[investorIDs[msg.sender]].votedForEmergencyWithdrawal = vote;\r\n    }\r\n\r\n    function proposeEmergencyWithdrawal(address withdrawalAddress)\r\n        onlyIfStopped\r\n        onlyOwner\r\n        rejectValue {\r\n\r\n        //Resets previous votes\r\n        for (uint i = 1; i <= numInvestors; i++) {\r\n            delete investors[i].votedForEmergencyWithdrawal;\r\n        }\r\n\r\n        proposedWithdrawal = WithdrawalProposal(withdrawalAddress, now);\r\n        EmergencyWithdrawalProposed();\r\n    }\r\n\r\n    function executeEmergencyWithdrawal()\r\n        onlyOwner\r\n        onlyAfterProposed\r\n        onlyIfStopped\r\n        onlyIfEmergencyTimeOutHasPassed\r\n        rejectValue {\r\n\r\n        uint numOfVotesInFavour;\r\n        uint amountToWithdrawal = this.balance;\r\n\r\n        for (uint i = 1; i <= numInvestors; i++) {\r\n            if (investors[i].votedForEmergencyWithdrawal == true) {\r\n                numOfVotesInFavour++;\r\n                delete investors[i].votedForEmergencyWithdrawal;\r\n            }\r\n        }\r\n\r\n        if (numOfVotesInFavour >= emergencyWithdrawalRatio * numInvestors / 100) {\r\n            if (!proposedWithdrawal.toAddress.send(this.balance)) {\r\n                EmergencyWithdrawalFailed(proposedWithdrawal.toAddress);\r\n            }\r\n            else {\r\n                EmergencyWithdrawalSucceeded(proposedWithdrawal.toAddress, amountToWithdrawal);\r\n            }\r\n        }\r\n        else {\r\n            throw;\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"divest\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getBet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBankroll\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"bet\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"currentInvestor\",\"type\":\"address\"}],\"name\":\"getProfitShare\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopContract\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numInvestors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxWin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"emergencyWithdrawalRatio\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"vote\",\"type\":\"bool\"}],\"name\":\"voteEmergencyWithdrawal\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newHouse\",\"type\":\"address\"}],\"name\":\"changeHouseAddress\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"forceDivestOfAllInvestors\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorsLoses\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"myid\",\"type\":\"bytes32\"},{\"name\":\"result\",\"type\":\"string\"},{\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"__callback\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isStopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"withdrawalAddress\",\"type\":\"address\"}],\"name\":\"proposeEmergencyWithdrawal\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"divestFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"currentInvestor\",\"type\":\"address\"}],\"name\":\"forceDivestOfOneInvestor\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMaxBetAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorsProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMinInvestment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMinBetAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwnerAddress\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minBet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"increaseInvestment\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pwin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"edge\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxInvestors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resumeContract\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"invested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newGasLimit\",\"type\":\"uint256\"}],\"name\":\"changeGasLimitOfSafeSend\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountWagered\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"houseEdge\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numBets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"currentInvestor\",\"type\":\"address\"}],\"name\":\"getLosesShare\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"executeEmergencyWithdrawal\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"currentInvestor\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"newInvestor\",\"outputs\":[],\"type\":\"function\"},{\"inputs\":[{\"name\":\"pwinInitial\",\"type\":\"uint256\"},{\"name\":\"edgeInitial\",\"type\":\"uint256\"},{\"name\":\"maxWinInitial\",\"type\":\"uint256\"},{\"name\":\"minBetInitial\",\"type\":\"uint256\"},{\"name\":\"maxInvestorsInitial\",\"type\":\"uint256\"},{\"name\":\"houseEdgeInitial\",\"type\":\"uint256\"},{\"name\":\"divestFeeInitial\",\"type\":\"uint256\"},{\"name\":\"emergencyWithdrawalRatioInitial\",\"type\":\"uint256\"}],\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"numberRolled\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amountWon\",\"type\":\"uint256\"}],\"name\":\"BetWon\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"numberRolled\",\"type\":\"uint256\"}],\"name\":\"BetLost\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EmergencyWithdrawalProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"withdrawalAddress\",\"type\":\"address\"}],\"name\":\"EmergencyWithdrawalFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"withdrawalAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountWithdrawn\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdrawalSucceeded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FailedSend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ValueIsTooBig\",\"type\":\"event\"}]","ContractName":"Dice","CompilerVersion":"v0.3.5-2016-07-01-48238c9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000009c400000000000000000000000000000000000000000000000000000000000000be000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000002c68af0bb140000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000050","Library":"","SwarmSource":""}]}