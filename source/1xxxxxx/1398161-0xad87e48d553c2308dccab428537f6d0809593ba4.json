{"status":"1","message":"OK","result":[{"SourceCode":"contract GameRegistry {\r\n\r\n    // This struct keeps all data for a Record.\r\n    struct Record {\r\n        // Keeps the address of this record creator.\r\n        address owner;\r\n        // Keeps the time when this record was created.\r\n        uint time;\r\n        // Keeps the index of the keys array for fast lookup\r\n        uint keysIndex;\r\n        string description;\r\n        string url;\r\n    }\r\n\r\n    // This mapping keeps the records of this Registry.\r\n    mapping(address => Record) private records;\r\n\r\n    // Keeps the total numbers of records in this Registry.\r\n    uint private numRecords;\r\n\r\n    // Keeps a list of all keys to interate the recoreds.\r\n    address[] private keys;\r\n\r\n    // The owner of this registry.\r\n    address private owner;\r\n\r\n    uint private KEY_HOLDER_SHARE  = 50;\r\n    uint private REGISTRATION_COST = 500 finney;\r\n    uint private TRANSFER_COST     = 0;\r\n\r\n    // Constructor\r\n    function GameRegistry() {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    // public interface to the directory of games\r\n    function theGames(uint rindex) constant returns(address contractAddress, string description, string url, address submittedBy, uint time) {\r\n        Record record = records[keys[rindex]];\r\n        contractAddress = keys[rindex];\r\n        description = record.description;\r\n        url = record.url;\r\n        submittedBy = record.owner;\r\n        time = record.time;\r\n    }\r\n\r\n    function settings() constant public returns(uint registrationCost, uint percentSharedWithKeyHolders) {\r\n        registrationCost            = REGISTRATION_COST / 1 finney;\r\n        percentSharedWithKeyHolders = KEY_HOLDER_SHARE;\r\n    }\r\n\r\n    function distributeValue() private {\r\n        if (msg.value == 0) {\r\n            return;\r\n        }\r\n        // share value with all key holders\r\n        uint ownerPercentage  = 100 - KEY_HOLDER_SHARE;\r\n        uint valueForRegOwner = (ownerPercentage * msg.value) / 100;\r\n        owner.send(valueForRegOwner);\r\n        uint valueForEachOwner = (msg.value - valueForRegOwner) / numRecords;\r\n        if (valueForEachOwner <= 0) {\r\n            return;\r\n        }\r\n        for (uint k = 0; k < numRecords; k++) {\r\n            records[keys[k]].owner.send(valueForEachOwner);\r\n        }\r\n    }\r\n\r\n    // This is the function that actually inserts a record. \r\n    function addGame(address key, string description, string url) {\r\n        // Only allow registration if received value >= REGISTRATION_COST\r\n        if (msg.value < REGISTRATION_COST) {\r\n            // Return value back to sender.\r\n            if (msg.value > 0) {\r\n                msg.sender.send(msg.value);\r\n            }\r\n            return;\r\n        }\r\n        distributeValue();\r\n        if (records[key].time == 0) {\r\n            records[key].time = now;\r\n            records[key].owner = msg.sender;\r\n            records[key].keysIndex = keys.length;\r\n            keys.length++;\r\n            keys[keys.length - 1] = key;\r\n            records[key].description = description;\r\n            records[key].url = url;\r\n\r\n            numRecords++;\r\n        }\r\n    }\r\n\r\n    function () { distributeValue(); }\r\n\r\n    // Updates the values of the given record.\r\n    function update(address key, string description, string url) {\r\n        // Only the owner can update his record.\r\n        if (records[key].owner == msg.sender) {\r\n            records[key].description = description;\r\n            records[key].url = url;\r\n        }\r\n    }\r\n\r\n/*\r\n    // Transfer ownership of a given record.\r\n    function transfer(address key, address newOwner) {\r\n        // Only allow transfer if received value >= TRANSFER_COST\r\n        if (msg.value < TRANSFER_COST) {\r\n            // Return value back to sender\r\n            if (msg.value > 0) {\r\n                msg.sender.send(msg.value);\r\n            }\r\n            return;\r\n        }\r\n        distributeValue();\r\n        if (records[key].owner == msg.sender) {\r\n            records[key].owner = newOwner;\r\n        }\r\n    }\r\n*/\r\n\r\n    // Tells whether a given key is registered.\r\n    function isRegistered(address key) private constant returns(bool) {\r\n        return records[key].time != 0;\r\n    }\r\n\r\n    function getRecord(address key) private constant returns(address owner, uint time, string description, string url) {\r\n        Record record = records[key];\r\n        owner = record.owner;\r\n        time = record.time;\r\n        description = record.description;\r\n        url = record.url;\r\n    }\r\n\r\n    // Returns the owner of the given record. The owner could also be get\r\n    // by using the function getRecord but in that case all record attributes \r\n    // are returned.\r\n    function getOwner(address key) private constant returns(address) {\r\n        return records[key].owner;\r\n    }\r\n\r\n    // Returns the registration time of the given record. The time could also\r\n    // be get by using the function getRecord but in that case all record attributes\r\n    // are returned.\r\n    function getTime(address key) private constant returns(uint) {\r\n        return records[key].time;\r\n    }\r\n\r\n    // Registry owner can use this function to withdraw any surplus value owned by\r\n    // the registry.\r\n    function maintain(uint value, uint cost) {\r\n        if (msg.sender == owner) {\r\n            msg.sender.send(value);\r\n            REGISTRATION_COST = cost;\r\n        }\r\n    }\r\n\r\n    // Returns the total number of records in this registry.\r\n    function getTotalRecords() private constant returns(uint) {\r\n        return numRecords;\r\n    }\r\n\r\n    // This function is used by subcontracts when an error is detected and\r\n    // the value needs to be returned to the transaction originator.\r\n    function returnValue() internal {\r\n        if (msg.value > 0) {\r\n            msg.sender.send(msg.value);\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"address\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"url\",\"type\":\"string\"}],\"name\":\"addGame\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"address\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"url\",\"type\":\"string\"}],\"name\":\"update\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"rindex\",\"type\":\"uint256\"}],\"name\":\"theGames\",\"outputs\":[{\"name\":\"contractAddress\",\"type\":\"address\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"url\",\"type\":\"string\"},{\"name\":\"submittedBy\",\"type\":\"address\"},{\"name\":\"time\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"cost\",\"type\":\"uint256\"}],\"name\":\"maintain\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"settings\",\"outputs\":[{\"name\":\"registrationCost\",\"type\":\"uint256\"},{\"name\":\"percentSharedWithKeyHolders\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"inputs\":[],\"type\":\"constructor\"}]","ContractName":"GameRegistry","CompilerVersion":"v0.3.1-2016-04-12-3ad5e82","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}