{"status":"1","message":"OK","result":[{"SourceCode":"// A life-log, done for Charlyn Greeff, born 18 April 2016 @ 15h30 (1460993400)\r\n//    Mother: Mirana Hotz, 16 December 1977 (251078400)\r\n//    Father: Jaco Greeff, 11 June 1973 (108604800)\r\n//\r\n// version: 1.0.0\r\n// source: https://github.com/jacogr/ethcontracts/tree/master/src/LifeLog\r\n\r\ncontract CharlyLifeLog {\r\n  // allow a maximum 20% withdrawal at any time\r\n  uint private constant MAX_WITHDRAW_DIV = 5; // 100/20\r\n\r\n  // allow one withdrawal every 6 months/180 days\r\n  uint private constant WITHDRAW_INTERVAL = 180 days;\r\n\r\n  // all the actual events that can be created\r\n  event LogDonation(address indexed by, uint loggedAt, uint amount);\r\n  event LogWithdrawal(address indexed by, uint loggedAt, uint amount);\r\n  event LogPersonNew(address indexed by, uint loggedAt, uint index);\r\n  event LogPersonUpdate(address indexed by, uint loggedAt, uint index, string field);\r\n  event LogWhitelistAdd(address indexed by, uint loggedAt, address addr);\r\n  event LogWhitelistRemove(address indexed by, uint loggedAt);\r\n  event LogEvent(address indexed by, uint loggedAt, uint when, string description);\r\n\r\n  // a structure describing a person\r\n  struct Person {\r\n    bool active;\r\n    uint activatedAt;\r\n    uint deactivatedAt;\r\n    int dateOfBirth;\r\n    int dateOfDeath;\r\n    string name;\r\n    string relation;\r\n  }\r\n\r\n  // next time whitelist address is allowed to get some funds\r\n  uint public nextWithdrawal = now + WITHDRAW_INTERVAL;\r\n\r\n  // totals of received and withdrawn amounts\r\n  uint public totalDonated = 0;\r\n  uint public totalWithdrawn = 0;\r\n\r\n  // people in the life of ([0] == 'self')\r\n  Person[] public people;\r\n\r\n  // donations received\r\n  mapping(address => uint) public donations;\r\n\r\n  // whitelisted modifier accounts\r\n  mapping(address => bool) public whitelist;\r\n\r\n  // modifier to allow only the whitelisted addresses\r\n  modifier isOnWhitelist {\r\n    // if not in the whitelist, throw error\r\n    if (!whitelist[msg.sender]) {\r\n      throw;\r\n    }\r\n\r\n    // if any value attached, don't accept it\r\n    if (msg.value > 0) {\r\n      throw;\r\n    }\r\n\r\n    // original code executes in here\r\n    _\r\n  }\r\n\r\n  // construct a lifelog for this specific person\r\n  function CharlyLifeLog(string name, int dateOfBirth) {\r\n    // creator should go on the whitelist\r\n    whitelist[msg.sender] = true;\r\n\r\n    // add the first person\r\n    personAdd(name, dateOfBirth, 0, 'self');\r\n\r\n    // any donations?\r\n    if (msg.value > 0) {\r\n      donate();\r\n    }\r\n  }\r\n\r\n  // log an event\r\n  function log(string description, uint _when) public isOnWhitelist {\r\n    // infer timestamp or use specified\r\n    uint when = _when;\r\n    if (when == 0) {\r\n      when = now;\r\n    }\r\n\r\n    // create the event\r\n    LogEvent(msg.sender, now, when, description);\r\n  }\r\n\r\n  // add a specific person\r\n  function personAdd(string name, int dateOfBirth, int dateOfDeath, string relation) public isOnWhitelist {\r\n    // create the event\r\n    LogPersonNew(msg.sender, now, people.length);\r\n\r\n    // add the person\r\n    people.push(\r\n      Person({\r\n        active: true,\r\n        activatedAt: now,\r\n        deactivatedAt: 0,\r\n        dateOfBirth: dateOfBirth,\r\n        dateOfDeath: dateOfDeath,\r\n        name: name,\r\n        relation: relation\r\n      })\r\n    );\r\n  }\r\n\r\n  // activate/deactivate a specific person\r\n  function personUpdateActivity(uint index, bool active) public isOnWhitelist {\r\n    // set the flag\r\n    people[index].active = active;\r\n\r\n    // activate/deactivate\r\n    if (active) {\r\n      // create the event\r\n      LogPersonUpdate(msg.sender, now, index, 'active');\r\n\r\n      // make it so\r\n      people[index].activatedAt = now;\r\n      people[index].deactivatedAt = 0;\r\n    } else {\r\n      // create the event\r\n      LogPersonUpdate(msg.sender, now, index, 'inactive');\r\n\r\n      // make it so\r\n      people[index].deactivatedAt = now;\r\n    }\r\n  }\r\n\r\n  // update a person's name\r\n  function personUpdateName(uint index, string name) public isOnWhitelist {\r\n    // create the event\r\n    LogPersonUpdate(msg.sender, now, index, 'name');\r\n\r\n    // update\r\n    people[index].name = name;\r\n  }\r\n\r\n  // update a person's relation\r\n  function personUpdateRelation(uint index, string relation) public isOnWhitelist {\r\n    // create the event\r\n    LogPersonUpdate(msg.sender, now, index, 'relation');\r\n\r\n    // update\r\n    people[index].relation = relation;\r\n  }\r\n\r\n  // update a person's DOB\r\n  function personUpdateDOB(uint index, int dateOfBirth) public isOnWhitelist {\r\n    // create the event\r\n    LogPersonUpdate(msg.sender, now, index, 'dateOfBirth');\r\n\r\n    // update\r\n    people[index].dateOfBirth = dateOfBirth;\r\n  }\r\n\r\n  // update a person's DOD\r\n  function personUpdateDOD(uint index, int dateOfDeath) public isOnWhitelist {\r\n    // create the event\r\n    LogPersonUpdate(msg.sender, now, index, 'dateOfDeath');\r\n\r\n    // update\r\n    people[index].dateOfDeath = dateOfDeath;\r\n  }\r\n\r\n  // add a whitelist address\r\n  function whitelistAdd(address addr) public isOnWhitelist {\r\n    // create the event\r\n    LogWhitelistAdd(msg.sender, now, addr);\r\n\r\n    // update\r\n    whitelist[addr] = true;\r\n  }\r\n\r\n  // remove a whitelist address\r\n  function whitelistRemove(address addr) public isOnWhitelist {\r\n    // we can only remove ourselves, double-validate failsafe\r\n    if (msg.sender != addr) {\r\n      throw;\r\n    }\r\n\r\n    // create the event\r\n    LogWhitelistRemove(msg.sender, now);\r\n\r\n    // remove\r\n    whitelist[msg.sender] = false;\r\n  }\r\n\r\n  // withdraw funds as/when needed\r\n  function withdraw(uint amount) public isOnWhitelist {\r\n    // the maximum we are allowed to take out right now\r\n    uint max = this.balance / MAX_WITHDRAW_DIV;\r\n\r\n    // see that we are in range and the timing matches\r\n    if (amount > max || now < nextWithdrawal) {\r\n      throw;\r\n    }\r\n\r\n    // update the event log with the action\r\n    LogWithdrawal(msg.sender, now, amount);\r\n\r\n    // set the next withdrawal date/time & totals\r\n    nextWithdrawal = now + WITHDRAW_INTERVAL;\r\n    totalWithdrawn += amount;\r\n\r\n    // send and throw if not ok\r\n    if (!msg.sender.send(amount)) {\r\n      throw;\r\n    }\r\n  }\r\n\r\n  // accept donations from anywhere and give credit\r\n  function donate() public {\r\n    // there needs to be something here\r\n    if (msg.value == 0) {\r\n      throw;\r\n    }\r\n\r\n    // update the event log with the action\r\n    LogDonation(msg.sender, now, msg.value);\r\n\r\n    // store the donation\r\n    donations[msg.sender] += msg.value;\r\n    totalDonated += msg.value;\r\n  }\r\n\r\n  // fallback is a donation\r\n  function() public {\r\n    donate();\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"totalDonated\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"dateOfBirth\",\"type\":\"int256\"},{\"name\":\"dateOfDeath\",\"type\":\"int256\"},{\"name\":\"relation\",\"type\":\"string\"}],\"name\":\"personAdd\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"},{\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"personUpdateActivity\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"},{\"name\":\"relation\",\"type\":\"string\"}],\"name\":\"personUpdateRelation\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"string\"}],\"name\":\"personUpdateName\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalWithdrawn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"whitelistAdd\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"},{\"name\":\"dateOfBirth\",\"type\":\"int256\"}],\"name\":\"personUpdateDOB\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"},{\"name\":\"dateOfDeath\",\"type\":\"int256\"}],\"name\":\"personUpdateDOD\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"people\",\"outputs\":[{\"name\":\"active\",\"type\":\"bool\"},{\"name\":\"activatedAt\",\"type\":\"uint256\"},{\"name\":\"deactivatedAt\",\"type\":\"uint256\"},{\"name\":\"dateOfBirth\",\"type\":\"int256\"},{\"name\":\"dateOfDeath\",\"type\":\"int256\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"relation\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"whitelistRemove\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"_when\",\"type\":\"uint256\"}],\"name\":\"log\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextWithdrawal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"donations\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"donate\",\"outputs\":[],\"type\":\"function\"},{\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"dateOfBirth\",\"type\":\"int256\"}],\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"loggedAt\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogDonation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"loggedAt\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"loggedAt\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"LogPersonNew\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"loggedAt\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"field\",\"type\":\"string\"}],\"name\":\"LogPersonUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"loggedAt\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"LogWhitelistAdd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"loggedAt\",\"type\":\"uint256\"}],\"name\":\"LogWhitelistRemove\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"loggedAt\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"when\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"description\",\"type\":\"string\"}],\"name\":\"LogEvent\",\"type\":\"event\"}]","ContractName":"CharlyLifeLog","CompilerVersion":"v0.3.5-2016-06-21-b23c300","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}