{"status":"1","message":"OK","result":[{"SourceCode":"contract DataService {\r\n    event NewDataRequest(uint id, bool initialized, string dataUrl); \r\n    event GetDataRequestLength(uint length);\r\n    event GetDataRequest(uint id, bool initialized, string dataurl, uint dataPointsLength);\r\n\r\n    event AddDataPoint(uint dataRequestId, bool success, string response);\r\n    event GetDataPoint(uint dataRequestId, uint id, bool success, string response);\r\n\r\n    struct DataPoint {\r\n        bool initialized;\r\n        bool success;\r\n        string response; \r\n    }\r\n    struct DataRequest {\r\n        bool initialized;\r\n        string dataUrl;\r\n        DataPoint[] dataPoints;\r\n    }\r\n\r\n    address private organizer;\r\n    DataRequest[] private dataRequests;\r\n\r\n    // Create a new lottery with numOfBets supported bets.\r\n    function DataService() {\r\n        organizer = msg.sender;\r\n    }\r\n    \r\n    // Fallback function returns ether\r\n    function() {\r\n        throw;\r\n    }\r\n    \r\n    // Lets the organizer add a new data request\r\n    function addDataRequest(string dataUrl) {\r\n        // Only let organizer add requests for now\r\n        if(msg.sender != organizer) { throw; }\r\n\r\n        // Figure out where to store the new DataRequest (next available element)\r\n        uint nextIndex = dataRequests.length++;\r\n    \r\n        // Init the data request and save it\r\n        DataRequest newDataRequest = dataRequests[nextIndex];\r\n        newDataRequest.initialized = true;\r\n        newDataRequest.dataUrl = dataUrl;\r\n\r\n        NewDataRequest(dataRequests.length - 1, newDataRequest.initialized, newDataRequest.dataUrl);\r\n    }\r\n\r\n    // Returns the amount of dataRequests currently present\r\n    function getDataRequestLength() {\r\n        GetDataRequestLength(dataRequests.length);\r\n    }\r\n\r\n    // Logs the data request with the requested ID\r\n    function getDataRequest(uint id) {\r\n        DataRequest dataRequest = dataRequests[id];\r\n        GetDataRequest(id, dataRequest.initialized, dataRequest.dataUrl, dataRequest.dataPoints.length);\r\n    }\r\n\r\n    // Gets the data point associated with the provided dataRequest.\r\n    function getDataPoint(uint dataRequestId, uint dataPointId) {\r\n        DataRequest dataRequest = dataRequests[dataRequestId];\r\n        DataPoint dataPoint = dataRequest.dataPoints[dataPointId];\r\n\r\n        GetDataPoint(dataRequestId, dataPointId, dataPoint.success, dataPoint.response);\r\n    }\r\n\r\n    // Lets the organizer add a new data point\r\n    function addDataPoint(uint dataRequestId, bool success, string response) {\r\n        if(msg.sender != organizer) { throw; }\r\n        \r\n        // Get the DataRequest to edit, only allow adding a data point if initialized\r\n        DataRequest dataRequest = dataRequests[dataRequestId];\r\n        if(!dataRequest.initialized) { throw; }\r\n\r\n        // Init the new DataPoint and save it\r\n        DataPoint newDataPoint = dataRequest.dataPoints[dataRequest.dataPoints.length++];\r\n        newDataPoint.initialized = true;\r\n        newDataPoint.success = success;\r\n        newDataPoint.response = response;\r\n\r\n        AddDataPoint(dataRequestId, success, response);\r\n    }\r\n\r\n    // Suicide :(\r\n    function destroy() {\r\n        if(msg.sender != organizer) { throw; }\r\n        \r\n        suicide(organizer);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"dataUrl\",\"type\":\"string\"}],\"name\":\"addDataRequest\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getDataRequest\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dataRequestId\",\"type\":\"uint256\"},{\"name\":\"success\",\"type\":\"bool\"},{\"name\":\"response\",\"type\":\"string\"}],\"name\":\"addDataPoint\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dataRequestId\",\"type\":\"uint256\"},{\"name\":\"dataPointId\",\"type\":\"uint256\"}],\"name\":\"getDataPoint\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getDataRequestLength\",\"outputs\":[],\"type\":\"function\"},{\"inputs\":[],\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"initialized\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"dataUrl\",\"type\":\"string\"}],\"name\":\"NewDataRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"GetDataRequestLength\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"initialized\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"dataurl\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"dataPointsLength\",\"type\":\"uint256\"}],\"name\":\"GetDataRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"dataRequestId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"success\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"response\",\"type\":\"string\"}],\"name\":\"AddDataPoint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"dataRequestId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"success\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"response\",\"type\":\"string\"}],\"name\":\"GetDataPoint\",\"type\":\"event\"}]","ContractName":"DataService","CompilerVersion":"v0.3.1-2016-03-31-c492d9b","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}