{"status":"1","message":"OK","result":[{"SourceCode":"// This software is a subject to Ambisafe License Agreement.\r\n// No use or distribution is allowed without written permission from Ambisafe.\r\n// https://ambisafe.com/terms.pdf\r\n\r\ncontract Ambi {\r\n    function getNodeAddress(bytes32 _nodeName) constant returns(address);\r\n    function hasRelation(bytes32 _nodeName, bytes32 _relation, address _to) constant returns(bool);\r\n    function addNode(bytes32 _nodeName, address _nodeAddress) constant returns(bool);\r\n}\r\n\r\ncontract AmbiEnabled {\r\n    Ambi public ambiC;\r\n    bool public isImmortal;\r\n    bytes32 public name;\r\n\r\n    modifier checkAccess(bytes32 _role) {\r\n        if(address(ambiC) != 0x0 && ambiC.hasRelation(name, _role, msg.sender)){\r\n            _\r\n        }\r\n    }\r\n    \r\n    function getAddress(bytes32 _name) constant returns (address) {\r\n        return ambiC.getNodeAddress(_name);\r\n    }\r\n\r\n    function setAmbiAddress(address _ambi, bytes32 _name) returns (bool){\r\n        if(address(ambiC) != 0x0){\r\n            return false;\r\n        }\r\n        Ambi ambiContract = Ambi(_ambi);\r\n        if(ambiContract.getNodeAddress(_name)!=address(this)) {\r\n            if (!ambiContract.addNode(_name, address(this))){\r\n                return false;\r\n            }\r\n        }\r\n        name = _name;\r\n        ambiC = ambiContract;\r\n        return true;\r\n    }\r\n\r\n    function immortality() checkAccess(\"owner\") returns(bool) {\r\n        isImmortal = true;\r\n        return true;\r\n    }\r\n\r\n    function remove() checkAccess(\"owner\") returns(bool) {\r\n        if (isImmortal) {\r\n            return false;\r\n        }\r\n        selfdestruct(msg.sender);\r\n        return true;\r\n    }\r\n}\r\n\r\nlibrary StackDepthLib {\r\n    // This will probably work with a value of 390 but no need to cut it\r\n    // that close in the case that the optimizer changes slightly or\r\n    // something causing that number to rise slightly.\r\n    uint constant GAS_PER_DEPTH = 400;\r\n\r\n    function checkDepth(address self, uint n) constant returns(bool) {\r\n        if (n == 0) return true;\r\n        return self.call.gas(GAS_PER_DEPTH * n)(0x21835af6, n - 1);\r\n    }\r\n\r\n    function __dig(uint n) constant {\r\n        if (n == 0) return;\r\n        if (!address(this).delegatecall(0x21835af6, n - 1)) throw;\r\n    }\r\n}\r\n\r\ncontract Safe {\r\n    // Should always be placed as first modifier!\r\n    modifier noValue {\r\n        if (msg.value > 0) {\r\n            // Internal Out Of Gas/Throw: revert this transaction too;\r\n            // Call Stack Depth Limit reached: revert this transaction too;\r\n            // Recursive Call: safe, no any changes applied yet, we are inside of modifier.\r\n            _safeSend(msg.sender, msg.value);\r\n        }\r\n        _\r\n    }\r\n\r\n    modifier onlyHuman {\r\n        if (_isHuman()) {\r\n            _\r\n        }\r\n    }\r\n\r\n    modifier noCallback {\r\n        if (!isCall) {\r\n            _\r\n        }\r\n    }\r\n\r\n    modifier immutable(address _address) {\r\n        if (_address == 0) {\r\n            _\r\n        }\r\n    }\r\n\r\n    address stackDepthLib;\r\n    function setupStackDepthLib(address _stackDepthLib) immutable(address(stackDepthLib)) returns(bool) {\r\n        stackDepthLib = _stackDepthLib;\r\n        return true;\r\n    }\r\n\r\n    modifier requireStackDepth(uint16 _depth) {\r\n        if (stackDepthLib == 0x0) {\r\n            throw;\r\n        }\r\n        if (_depth > 1023) {\r\n            throw;\r\n        }\r\n        if (!stackDepthLib.delegatecall(0x32921690, stackDepthLib, _depth)) {\r\n            throw;\r\n        }\r\n        _\r\n    }\r\n\r\n    // Must not be used inside the functions that have noValue() modifier!\r\n    function _safeFalse() internal noValue() returns(bool) {\r\n        return false;\r\n    }\r\n\r\n    function _safeSend(address _to, uint _value) internal {\r\n        if (!_unsafeSend(_to, _value)) {\r\n            throw;\r\n        }\r\n    }\r\n\r\n    function _unsafeSend(address _to, uint _value) internal returns(bool) {\r\n        return _to.call.value(_value)();\r\n    }\r\n\r\n    function _isContract() constant internal returns(bool) {\r\n        return msg.sender != tx.origin;\r\n    }\r\n\r\n    function _isHuman() constant internal returns(bool) {\r\n        return !_isContract();\r\n    }\r\n\r\n    bool private isCall = false;\r\n    function _setupNoCallback() internal {\r\n        isCall = true;\r\n    }\r\n\r\n    function _finishNoCallback() internal {\r\n        isCall = false;\r\n    }\r\n}\r\n\r\ncontract RegistryICAP is AmbiEnabled, Safe {\r\n    function decodeIndirect(bytes _bban) constant returns(string, string, string) {\r\n        bytes memory asset = new bytes(3);\r\n        bytes memory institution = new bytes(4);\r\n        bytes memory client = new bytes(9);\r\n\r\n        uint8 k = 0;\r\n\r\n        for (uint8 i = 0; i < asset.length; i++) {\r\n            asset[i] = _bban[k++];\r\n        }\r\n        for (i = 0; i < institution.length; i++) {\r\n            institution[i] = _bban[k++];\r\n        }\r\n        for (i = 0; i < client.length; i++) {\r\n            client[i] = _bban[k++];\r\n        }\r\n        return (string(asset), string(institution), string(client));\r\n    }\r\n\r\n    function parse(bytes32 _icap) constant returns(address, bytes32, bool) {\r\n        // Should start with XE.\r\n        if (_icap[0] != 88 || _icap[1] != 69) {\r\n            return (0, 0, false);\r\n        }\r\n        // Should have 12 zero bytes at the end.\r\n        for (uint8 j = 20; j < 32; j++) {\r\n            if (_icap[j] != 0) {\r\n                return (0, 0, false);\r\n            }\r\n        }\r\n        bytes memory bban = new bytes(18);\r\n        for (uint8 i = 0; i < 16; i++) {\r\n             bban[i] = _icap[i + 4];\r\n        }\r\n        var (asset, institution, _) = decodeIndirect(bban);\r\n\r\n        bytes32 assetInstitutionHash = sha3(asset, institution);\r\n\r\n        uint8 parseChecksum = (uint8(_icap[2]) - 48) * 10 + (uint8(_icap[3]) - 48);\r\n        uint8 calcChecksum = 98 - mod9710(prepare(bban));\r\n        if (parseChecksum != calcChecksum) {\r\n            return (institutions[assetInstitutionHash], assets[sha3(asset)], false);\r\n        }\r\n        return (institutions[assetInstitutionHash], assets[sha3(asset)], registered[assetInstitutionHash]);\r\n    }\r\n\r\n    function prepare(bytes _bban) constant returns(bytes) {\r\n        for (uint8 i = 0; i < 16; i++) {\r\n            uint8 charCode = uint8(_bban[i]);\r\n            if (charCode >= 65 && charCode <= 90) {\r\n                _bban[i] = byte(charCode - 65 + 10);\r\n            }\r\n        }\r\n        _bban[16] = 33; // X\r\n        _bban[17] = 14; // E\r\n        //_bban[18] = 48; // 0\r\n        //_bban[19] = 48; // 0\r\n        return _bban;\r\n    }\r\n\r\n    function mod9710(bytes _prepared) constant returns(uint8) {\r\n        uint m = 0;\r\n        for (uint8 i = 0; i < 18; i++) {\r\n            uint8 charCode = uint8(_prepared[i]);\r\n            if (charCode >= 48) {\r\n                m *= 10;\r\n                m += charCode - 48; // number\r\n                m %= 97;\r\n            } else {\r\n                m *= 10;\r\n                m += charCode / 10; // part1\r\n                m %= 97;\r\n                m *= 10;\r\n                m += charCode % 10; // part2\r\n                m %= 97;\r\n            }\r\n        }\r\n        m *= 10;\r\n        //m += uint8(_prepared[18]) - 48;\r\n        m %= 97;\r\n        m *= 10;\r\n        //m += uint8(_prepared[19]) - 48;\r\n        m %= 97;\r\n        return uint8(m);\r\n    }\r\n\r\n    mapping(bytes32 => bool) public registered;\r\n    mapping(bytes32 => address) public institutions;\r\n    mapping(bytes32 => address) public institutionOwners;\r\n    mapping(bytes32 => bytes32) public assets;\r\n\r\n    modifier onlyInstitutionOwner(string _institution) {\r\n        if (msg.sender == institutionOwners[sha3(_institution)]) {\r\n            _\r\n        }\r\n    }\r\n\r\n    function changeInstitutionOwner(string _institution, address _address) noValue() onlyInstitutionOwner(_institution) returns(bool) {\r\n        institutionOwners[sha3(_institution)] = _address;\r\n        return true;\r\n    }\r\n\r\n    // web3js sendIBANTransaction interface\r\n    function addr(bytes32 _institution) constant returns(address) {\r\n        return institutions[sha3(\"ETH\", _institution[0], _institution[1], _institution[2], _institution[3])];\r\n    }\r\n\r\n    function registerInstitution(string _institution, address _address) noValue() checkAccess(\"admin\") returns(bool) {\r\n        if (bytes(_institution).length != 4) {\r\n            return false;\r\n        }\r\n        if (institutionOwners[sha3(_institution)] != 0) {\r\n            return false;\r\n        }\r\n        institutionOwners[sha3(_institution)] = _address;\r\n        return true;\r\n    }\r\n\r\n    function registerInstitutionAsset(string _asset, string _institution, address _address) noValue() onlyInstitutionOwner(_institution) returns(bool) {\r\n        if (!registered[sha3(_asset)]) {\r\n            return false;\r\n        }\r\n        bytes32 assetInstitutionHash = sha3(_asset, _institution);\r\n        if (registered[assetInstitutionHash]) {\r\n            return false;\r\n        }\r\n        registered[assetInstitutionHash] = true;\r\n        institutions[assetInstitutionHash] = _address;\r\n        return true;\r\n    }\r\n\r\n    function updateInstitutionAsset(string _asset, string _institution, address _address) noValue() onlyInstitutionOwner(_institution) returns(bool) {\r\n        bytes32 assetInstitutionHash = sha3(_asset, _institution);\r\n        if (!registered[assetInstitutionHash]) {\r\n            return false;\r\n        }\r\n        institutions[assetInstitutionHash] = _address;\r\n        return true;\r\n    }\r\n\r\n    function removeInstitutionAsset(string _asset, string _institution) noValue() onlyInstitutionOwner(_institution) returns(bool) {\r\n        bytes32 assetInstitutionHash = sha3(_asset, _institution);\r\n        if (!registered[assetInstitutionHash]) {\r\n            return false;\r\n        }\r\n        delete registered[assetInstitutionHash];\r\n        delete institutions[assetInstitutionHash];\r\n        return true;\r\n    }\r\n\r\n    function registerAsset(string _asset, bytes32 _symbol) noValue() checkAccess(\"admin\") returns(bool) {\r\n        if (bytes(_asset).length != 3) {\r\n            return false;\r\n        }\r\n        bytes32 asset = sha3(_asset);\r\n        if (registered[asset]) {\r\n            return false;\r\n        }\r\n        registered[asset] = true;\r\n        assets[asset] = _symbol;\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_stackDepthLib\",\"type\":\"address\"}],\"name\":\"setupStackDepthLib\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_name\",\"type\":\"bytes32\"}],\"name\":\"getAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_institution\",\"type\":\"bytes32\"}],\"name\":\"addr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_icap\",\"type\":\"bytes32\"}],\"name\":\"parse\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ambiC\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"registered\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_institution\",\"type\":\"string\"},{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"changeInstitutionOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_asset\",\"type\":\"string\"},{\"name\":\"_institution\",\"type\":\"string\"},{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"updateInstitutionAsset\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isImmortal\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ambi\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"bytes32\"}],\"name\":\"setAmbiAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_asset\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"bytes32\"}],\"name\":\"registerAsset\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_asset\",\"type\":\"string\"},{\"name\":\"_institution\",\"type\":\"string\"},{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"registerInstitutionAsset\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"institutions\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"assets\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"remove\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_institution\",\"type\":\"string\"},{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"registerInstitution\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"institutionOwners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_asset\",\"type\":\"string\"},{\"name\":\"_institution\",\"type\":\"string\"}],\"name\":\"removeInstitutionAsset\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_bban\",\"type\":\"bytes\"}],\"name\":\"prepare\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_prepared\",\"type\":\"bytes\"}],\"name\":\"mod9710\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_bban\",\"type\":\"bytes\"}],\"name\":\"decodeIndirect\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"immortality\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"}]","ContractName":"RegistryICAP","CompilerVersion":"v0.3.5-nightly.2016.7.1+commit.48238c9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}