{"status":"1","message":"OK","result":[{"SourceCode":"contract InsuranceAgent {\r\n    address public owner;\r\n    event CoinTransfer(address sender, address receiver, uint amount);\r\n\r\n    struct Client {\r\n        address addr;\r\n    }\r\n\r\n    struct Payment {\r\n        uint amount;\r\n        uint date; // timestamp\r\n    }\r\n\r\n    struct Payout {\r\n        bytes32 proof;\r\n        uint amount;\r\n        uint date; // timestamp\r\n        uint veto; // clientId\r\n    }\r\n\r\n    mapping (uint => Payout) public payouts; // clientId -> requested payout\r\n    mapping (uint => Payment[]) public payments; // clientId -> list of his Payments\r\n    mapping (uint => Client) public clients; // clientId -> info about Client\r\n\r\n    modifier costs(uint _amount) {\r\n        if (msg.value < _amount)\r\n            throw;\r\n        _\r\n    }\r\n\r\n    modifier onlyBy(address _account) {\r\n        if (msg.sender != _account)\r\n            throw;\r\n        _\r\n    }\r\n\r\n    function InsuranceAgent() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function newClient(uint clientId, address clientAddr) onlyBy(owner) {\r\n        clients[clientId] = Client({\r\n            addr: clientAddr\r\n        });\r\n    }\r\n\r\n    function newPayment(uint clientId, uint timestamp) costs(5000000000000000) {\r\n        payments[clientId].push(Payment({\r\n            amount: msg.value,\r\n            date: timestamp\r\n        }));\r\n    }\r\n\r\n    function requestPayout(uint clientId, uint amount, bytes32 proof, uint date, uint veto) onlyBy(owner) {\r\n        // only one payout at the same time for the same client available\r\n        // amount should be in wei\r\n        payouts[clientId] = Payout({\r\n            proof: proof,\r\n            amount: amount,\r\n            date: date,\r\n            veto: veto\r\n        });\r\n    }\r\n\r\n    function vetoPayout(uint clientId, uint proverId) onlyBy(owner) {\r\n        payouts[clientId].veto = proverId;\r\n    }\r\n\r\n    function payRequstedSum(uint clientId, uint date) onlyBy(owner) {\r\n        if (payouts[clientId].veto != 0) { throw; }\r\n        if (date - payouts[clientId].date < 60 * 60 * 24 * 3) { throw; }\r\n        clients[clientId].addr.send(payouts[clientId].amount);\r\n        delete payouts[clientId];\r\n    }\r\n\r\n    function getStatusOfPayout(uint clientId) constant returns (uint, uint, uint, bytes32) {\r\n        return (payouts[clientId].amount, payouts[clientId].date,\r\n                payouts[clientId].veto, payouts[clientId].proof);\r\n    }\r\n\r\n    function getNumberOfPayments(uint clientId) constant returns (uint) {\r\n        return payments[clientId].length;\r\n    }\r\n\r\n    function getPayment(uint clientId, uint paymentId) constant returns (uint, uint) {\r\n        return (payments[clientId][paymentId].amount, payments[clientId][paymentId].date);\r\n    }\r\n\r\n    function getClient(uint clientId) constant returns (address) {\r\n        return clients[clientId].addr;\r\n    }\r\n\r\n    function () {\r\n        // This function gets executed if a\r\n        // transaction with invalid data is sent to\r\n        // the contract or just ether without data.\r\n        // We revert the send so that no-one\r\n        // accidentally loses money when using the\r\n        // contract.\r\n        throw;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"clientId\",\"type\":\"uint256\"}],\"name\":\"getNumberOfPayments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"clientId\",\"type\":\"uint256\"}],\"name\":\"getStatusOfPayout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"payments\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"date\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"payouts\",\"outputs\":[{\"name\":\"proof\",\"type\":\"bytes32\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"date\",\"type\":\"uint256\"},{\"name\":\"veto\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"clientId\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"proof\",\"type\":\"bytes32\"},{\"name\":\"date\",\"type\":\"uint256\"},{\"name\":\"veto\",\"type\":\"uint256\"}],\"name\":\"requestPayout\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"clientId\",\"type\":\"uint256\"},{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"newPayment\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"clientId\",\"type\":\"uint256\"},{\"name\":\"paymentId\",\"type\":\"uint256\"}],\"name\":\"getPayment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"clientId\",\"type\":\"uint256\"},{\"name\":\"clientAddr\",\"type\":\"address\"}],\"name\":\"newClient\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"clientId\",\"type\":\"uint256\"},{\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"payRequstedSum\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"clientId\",\"type\":\"uint256\"}],\"name\":\"getClient\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"clientId\",\"type\":\"uint256\"},{\"name\":\"proverId\",\"type\":\"uint256\"}],\"name\":\"vetoPayout\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"clients\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"type\":\"function\"},{\"inputs\":[],\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CoinTransfer\",\"type\":\"event\"}]","ContractName":"InsuranceAgent","CompilerVersion":"v0.3.1-2016-04-12-3ad5e82","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}