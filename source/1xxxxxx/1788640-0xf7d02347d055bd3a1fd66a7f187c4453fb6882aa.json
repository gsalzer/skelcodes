{"status":"1","message":"OK","result":[{"SourceCode":"// <ORACLIZE_API>\r\n/*\r\nCopyright (c) 2015-2016 Oraclize srl, Thomas Bertani\r\n\r\n\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\n\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\n\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.\r\n*/\r\n\r\ncontract OraclizeI {\r\n    address public cbAddress;\r\n    function query(uint _timestamp, string _datasource, string _arg) returns (bytes32 _id);\r\n    function query_withGasLimit(uint _timestamp, string _datasource, string _arg, uint _gaslimit) returns (bytes32 _id);\r\n    function query2(uint _timestamp, string _datasource, string _arg1, string _arg2) returns (bytes32 _id);\r\n    function query2_withGasLimit(uint _timestamp, string _datasource, string _arg1, string _arg2, uint _gaslimit) returns (bytes32 _id);\r\n    function getPrice(string _datasource) returns (uint _dsprice);\r\n    function getPrice(string _datasource, uint gaslimit) returns (uint _dsprice);\r\n    function useCoupon(string _coupon);\r\n    function setProofType(byte _proofType);\r\n}\r\ncontract OraclizeAddrResolverI {\r\n    function getAddress() returns (address _addr);\r\n}\r\ncontract usingOraclize {\r\n    uint constant day = 60*60*24;\r\n    uint constant week = 60*60*24*7;\r\n    uint constant month = 60*60*24*30;\r\n    byte constant proofType_NONE = 0x00;\r\n    byte constant proofType_TLSNotary = 0x10;\r\n    byte constant proofStorage_IPFS = 0x01;\r\n    uint8 constant networkID_auto = 0;\r\n    uint8 constant networkID_mainnet = 1;\r\n    uint8 constant networkID_testnet = 2;\r\n    uint8 constant networkID_morden = 2;\r\n    uint8 constant networkID_consensys = 161;\r\n\r\n    OraclizeAddrResolverI OAR;\r\n    \r\n    OraclizeI oraclize;\r\n    modifier oraclizeAPI {\r\n        address oraclizeAddr = OAR.getAddress();\r\n        if (oraclizeAddr == 0){\r\n            oraclize_setNetwork(networkID_auto);\r\n            oraclizeAddr = OAR.getAddress();\r\n        }\r\n        oraclize = OraclizeI(oraclizeAddr);\r\n        _\r\n    }\r\n    modifier coupon(string code){\r\n        oraclize = OraclizeI(OAR.getAddress());\r\n        oraclize.useCoupon(code);\r\n        _\r\n    }\r\n\r\n    function oraclize_setNetwork(uint8 networkID) internal returns(bool){\r\n        if (getCodeSize(0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed)>0){\r\n            OAR = OraclizeAddrResolverI(0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed);\r\n            return true;\r\n        }\r\n        if (getCodeSize(0x9efbea6358bed926b293d2ce63a730d6d98d43dd)>0){\r\n            OAR = OraclizeAddrResolverI(0x9efbea6358bed926b293d2ce63a730d6d98d43dd);\r\n            return true;\r\n        }\r\n        if (getCodeSize(0x20e12a1f859b3feae5fb2a0a32c18f5a65555bbf)>0){\r\n            OAR = OraclizeAddrResolverI(0x20e12a1f859b3feae5fb2a0a32c18f5a65555bbf);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    function oraclize_query(string datasource, string arg) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource);\r\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\r\n        return oraclize.query.value(price)(0, datasource, arg);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string arg) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource);\r\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\r\n        return oraclize.query.value(price)(timestamp, datasource, arg);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource, gaslimit);\r\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\r\n        return oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource, gaslimit);\r\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\r\n        return oraclize.query_withGasLimit.value(price)(0, datasource, arg, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource);\r\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\r\n        return oraclize.query2.value(price)(0, datasource, arg1, arg2);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource);\r\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\r\n        return oraclize.query2.value(price)(timestamp, datasource, arg1, arg2);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource, gaslimit);\r\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\r\n        return oraclize.query2_withGasLimit.value(price)(timestamp, datasource, arg1, arg2, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource, gaslimit);\r\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\r\n        return oraclize.query2_withGasLimit.value(price)(0, datasource, arg1, arg2, gaslimit);\r\n    }\r\n    function oraclize_cbAddress() oraclizeAPI internal returns (address){\r\n        return oraclize.cbAddress();\r\n    }\r\n    function oraclize_setProof(byte proofP) oraclizeAPI internal {\r\n        return oraclize.setProofType(proofP);\r\n    }\r\n\r\n    function getCodeSize(address _addr) constant internal returns(uint _size) {\r\n        assembly {\r\n            _size := extcodesize(_addr)\r\n        }\r\n    }\r\n\r\n\r\n    function parseAddr(string _a) internal returns (address){\r\n        bytes memory tmp = bytes(_a);\r\n        uint160 iaddr = 0;\r\n        uint160 b1;\r\n        uint160 b2;\r\n        for (uint i=2; i<2+2*20; i+=2){\r\n            iaddr *= 256;\r\n            b1 = uint160(tmp[i]);\r\n            b2 = uint160(tmp[i+1]);\r\n            if ((b1 >= 97)&&(b1 <= 102)) b1 -= 87;\r\n            else if ((b1 >= 48)&&(b1 <= 57)) b1 -= 48;\r\n            if ((b2 >= 97)&&(b2 <= 102)) b2 -= 87;\r\n            else if ((b2 >= 48)&&(b2 <= 57)) b2 -= 48;\r\n            iaddr += (b1*16+b2);\r\n        }\r\n        return address(iaddr);\r\n    }\r\n\r\n\r\n    function strCompare(string _a, string _b) internal returns (int) {\r\n        bytes memory a = bytes(_a);\r\n        bytes memory b = bytes(_b);\r\n        uint minLength = a.length;\r\n        if (b.length < minLength) minLength = b.length;\r\n        for (uint i = 0; i < minLength; i ++)\r\n            if (a[i] < b[i])\r\n                return -1;\r\n            else if (a[i] > b[i])\r\n                return 1;\r\n        if (a.length < b.length)\r\n            return -1;\r\n        else if (a.length > b.length)\r\n            return 1;\r\n        else\r\n            return 0;\r\n   } \r\n\r\n    function indexOf(string _haystack, string _needle) internal returns (int)\r\n    {\r\n        bytes memory h = bytes(_haystack);\r\n        bytes memory n = bytes(_needle);\r\n        if(h.length < 1 || n.length < 1 || (n.length > h.length)) \r\n            return -1;\r\n        else if(h.length > (2**128 -1))\r\n            return -1;                                  \r\n        else\r\n        {\r\n            uint subindex = 0;\r\n            for (uint i = 0; i < h.length; i ++)\r\n            {\r\n                if (h[i] == n[0])\r\n                {\r\n                    subindex = 1;\r\n                    while(subindex < n.length && (i + subindex) < h.length && h[i + subindex] == n[subindex])\r\n                    {\r\n                        subindex++;\r\n                    }   \r\n                    if(subindex == n.length)\r\n                        return int(i);\r\n                }\r\n            }\r\n            return -1;\r\n        }   \r\n    }\r\n\r\n    function strConcat(string _a, string _b, string _c, string _d, string _e) internal returns (string){\r\n        bytes memory _ba = bytes(_a);\r\n        bytes memory _bb = bytes(_b);\r\n        bytes memory _bc = bytes(_c);\r\n        bytes memory _bd = bytes(_d);\r\n        bytes memory _be = bytes(_e);\r\n        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\r\n        bytes memory babcde = bytes(abcde);\r\n        uint k = 0;\r\n        for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\r\n        for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\r\n        for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\r\n        for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\r\n        for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];\r\n        return string(babcde);\r\n    }\r\n    \r\n    function strConcat(string _a, string _b, string _c, string _d) internal returns (string) {\r\n        return strConcat(_a, _b, _c, _d, \"\");\r\n    }\r\n\r\n    function strConcat(string _a, string _b, string _c) internal returns (string) {\r\n        return strConcat(_a, _b, _c, \"\", \"\");\r\n    }\r\n\r\n    function strConcat(string _a, string _b) internal returns (string) {\r\n        return strConcat(_a, _b, \"\", \"\", \"\");\r\n    }\r\n\r\n    // parseInt\r\n    function parseInt(string _a) internal returns (uint) {\r\n        return parseInt(_a, 0);\r\n    }\r\n\r\n    // parseInt(parseFloat*10^_b)\r\n    function parseInt(string _a, uint _b) internal returns (uint) {\r\n        bytes memory bresult = bytes(_a);\r\n        uint mint = 0;\r\n        bool decimals = false;\r\n        for (uint i=0; i<bresult.length; i++){\r\n            if ((bresult[i] >= 48)&&(bresult[i] <= 57)){\r\n                if (decimals){\r\n                   if (_b == 0) break;\r\n                    else _b--;\r\n                }\r\n                mint *= 10;\r\n                mint += uint(bresult[i]) - 48;\r\n            } else if (bresult[i] == 46) decimals = true;\r\n        }\r\n        return mint;\r\n    }\r\n    \r\n\r\n}\r\n// </ORACLIZE_API>\r\n\r\n\r\ncontract Ethereum_twelve_bagger is usingOraclize\r\n{\r\n\r\n \t\t\t\t\t\t\t//declares global variables\r\nstring hexcomparisonchr;\r\nstring A;\r\nstring B;\r\n\r\nuint8 lotteryticket;\r\naddress creator;\r\nint lastgainloss;\r\nstring lastresult;\r\nstring K;\r\nstring information;\r\n  \r\n \r\naddress player;\r\nuint8 gameResult;\r\nuint128 wager; \r\n mapping (bytes32=>uint) bets;\r\nmapping (bytes32 => address) gamesPlayer;\r\n \r\n\r\n   function  Ethereum_twelve_bagger() private \r\n    { \r\n        creator = msg.sender; \t\t\t\t\t\t\t\t\r\n    }\r\n\r\n    function Set_your_game_number_between_1_15(string Set_your_game_number_between_1_15)\t\t\t//sets game number\r\n {\r\n\tplayer=msg.sender;\r\n    \tA=Set_your_game_number_between_1_15;\r\n\twager =uint128(msg.value);\r\n\t\r\n\tlastresult = \"Waiting for a lottery number from Wolfram Alpha\";\r\n\tlastgainloss = 0;\r\n\tB=\"The new right lottery number is not ready yet\";\r\n\tinformation = \"The new right lottery number is not ready yet\";\r\n\ttestWager();\r\n\t\r\n\tWolframAlpha();\r\n}\r\n\r\n     \t \r\n\t \r\n\t\r\n\r\n\r\n    \r\n\r\n    function WolframAlpha() private {\r\n\tif (wager == 0) return;\t\t//if wager is 0, abort \r\n        \r\n        oraclize_setProof(proofType_TLSNotary | proofStorage_IPFS);\r\n     \tbytes32 myid =  oraclize_query(0,\"WolframAlpha\", \"random number between 1 and 15\");\r\n\tbets[myid] = wager;\r\n\tgamesPlayer[myid] = player;\r\n    }\r\n\r\n \t    function __callback(bytes32 myid, string result, bytes proof) {\r\n        if (msg.sender != oraclize_cbAddress()) throw;\r\n\t\r\n        B = result;\r\n\t\r\n\twager=uint128(bets[myid]);\r\n\tplayer=gamesPlayer[myid];\r\n\ttest(A,B);\r\n\treturnmoneycreator(gameResult,wager);\r\n\treturn;\r\n        \r\n}\r\n \r\nfunction test(string A,string B) private\r\n{ \r\ninformation =\"The right lottery number is now ready. One Eth is 10**18 Wei.\";\r\nK=\"K\";\r\nbytes memory test = bytes(A);\r\nbytes memory kill = bytes(K);\r\n\t if (test[0]==kill[0] && player == creator)\t\t\t//Creator can kill contract. Contract does not hold players money.\r\n\t{\r\n\t\tsuicide(creator);} \r\n \r\n    \t\r\n    \r\n\r\n\r\nif (equal(A,B))\r\n{\r\nlastgainloss =(12*wager);\r\n\t    \tlastresult = \"Win!\";\r\n\t    \tplayer.send(wager * 12);  \r\n\r\ngameResult=0;\r\nreturn;}\r\nelse \r\n{\r\nlastgainloss = int(wager) * -1;\r\n\t    \tlastresult = \"Loss\";\r\n\t    \tgameResult=1;\r\n\t    \t\t\t\t\t\t\t\t\t// Player lost. Return nothing.\r\n\t    \treturn;\r\n\r\n\r\n \r\n\t}\r\n}\r\n\r\n\r\n \r\nfunction testWager() private\r\n{if((wager*12) > this.balance) \t\t\t\t\t// contract has to have 12*wager funds to be able to pay out. (current balance includes the wager sent)\r\n    \t{\r\n    \t\tlastresult = \"Bet is larger than games's ability to pay\";\r\n    \t\tlastgainloss = 0;\r\n    \t\tplayer.send(wager); // return wager\r\n\t\tgameResult=0;\r\n\t\twager=0;\r\n\t\tB=\"Bet is larger than games's ability to pay\";\r\n\t\tinformation =\"Bet is larger than games's ability to pay\";\r\n    \t\treturn;\r\n}\r\n\r\nelse if (wager < 100000000000000000)\t\t\t\t\t// Minimum bet is 0.1 eth \r\n    \t{\r\n    \t\tlastresult = \"Minimum bet is 0.1 eth\";\r\n    \t\tlastgainloss = 0;\r\n    \t\tplayer.send(wager); // return wager\r\n\t\tgameResult=0;\r\n\t\twager=0;\r\n\t\tB=\"Minimum bet is 0.1 eth\";\r\n\t\tinformation =\"Minimum bet is 0.1 eth\";\r\n    \t\treturn;\r\n}\r\n\r\n\r\n\r\n\r\n\telse if (wager == 0)\r\n    \t{\r\n    \t\tlastresult = \"Wager was zero\";\r\n    \t\tlastgainloss = 0;\r\n\t\tgameResult=0;\r\n    \t\t// nothing wagered, nothing returned\r\n    \t\treturn;\r\n    \t}\r\n}\r\n\r\n\r\n\r\n    /// @dev Does a byte-by-byte lexicographical comparison of two strings.\r\n    /// @return a negative number if `_a` is smaller, zero if they are equal\r\n    /// and a positive numbe if `_b` is smaller.\r\n    function compare(string A, string B) private returns (int) {\r\n        bytes memory a = bytes(A);\r\n        bytes memory b = bytes(B);\r\n        uint minLength = a.length;\r\n        if (b.length < minLength) minLength = b.length;\r\n        //@todo unroll the loop into increments of 32 and do full 32 byte comparisons\r\n        for (uint i = 0; i < minLength; i ++)\r\n            if (a[i] < b[i])\r\n                return -1;\r\n            else if (a[i] > b[i])\r\n                return 1;\r\n        if (a.length < b.length)\r\n            return -1;\r\n        else if (a.length > b.length)\r\n            return 1;\r\n        else\r\n            return 0;\r\n    }\r\n    /// @dev Compares two strings and returns true iff they are equal.\r\n    function equal(string A, string B) private returns (bool) \r\n       {\r\n        return compare(A, B) == 0;\r\n}\r\n\r\nfunction returnmoneycreator(uint8 gameResult,uint wager) private\t\t//If game has over 50 eth, contract will send all additional eth to owner\r\n\t{\r\n\tif (gameResult==1&&this.balance>50000000000000000000)\r\n\t{creator.send(wager);\r\n\treturn; \r\n\t}\r\n \r\n\telse if\r\n\t(\r\n\tgameResult==1&&this.balance>20000000000000000000)\t\t\t\t//If game has over 20 eth, contract will send œ of any additional eth to owner\r\n\t{creator.send(wager/2);\r\n\treturn; }\r\n\t}\r\n \r\n/**********\r\nfunctions below give information about the game in Ethereum Wallet\r\n **********/\r\n \r\n \tfunction Results_of_the_last_round() constant returns (uint players_bet_in_Wei, string last_result,string Last_player_s_lottery_ticket,address last_player,string The_right_lottery_number,int Player_s_gain_or_Loss_in_Wei,string info)\r\n    { \r\n   \tlast_player=player;\t\r\n\tLast_player_s_lottery_ticket=A;\r\n\tThe_right_lottery_number=B;\r\n\tlast_result=lastresult;\r\n\tplayers_bet_in_Wei=wager;\r\n\tPlayer_s_gain_or_Loss_in_Wei=lastgainloss;\r\n\tinfo = information;\r\n\t\r\n \r\n    }\r\n\r\n \r\n    \r\n   \r\n\tfunction Game_balance_in_Ethers() constant returns (uint balance, string info)\r\n    { \r\n        info = \"Choose number between 1 and 15. Win pays wager*12. Minimum bet is 0.1 eth. Maximum bet is game balance/12. Game balance is shown in full Ethers.\";\r\n    \tbalance=(this.balance/10**18);\r\n\r\n    }\r\n    \r\n   \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"myid\",\"type\":\"bytes32\"},{\"name\":\"result\",\"type\":\"string\"},{\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"__callback\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Results_of_the_last_round\",\"outputs\":[{\"name\":\"players_bet_in_Wei\",\"type\":\"uint256\"},{\"name\":\"last_result\",\"type\":\"string\"},{\"name\":\"Last_player_s_lottery_ticket\",\"type\":\"string\"},{\"name\":\"last_player\",\"type\":\"address\"},{\"name\":\"The_right_lottery_number\",\"type\":\"string\"},{\"name\":\"Player_s_gain_or_Loss_in_Wei\",\"type\":\"int256\"},{\"name\":\"info\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Game_balance_in_Ethers\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"},{\"name\":\"info\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"Set_your_game_number_between_1_15\",\"type\":\"string\"}],\"name\":\"Set_your_game_number_between_1_15\",\"outputs\":[],\"type\":\"function\"},{\"inputs\":[],\"type\":\"constructor\"}]","ContractName":"Ethereum_twelve_bagger","CompilerVersion":"v0.3.1-2016-03-31-c492d9b","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}