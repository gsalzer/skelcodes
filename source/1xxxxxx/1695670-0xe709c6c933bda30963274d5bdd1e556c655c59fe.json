{"status":"1","message":"OK","result":[{"SourceCode":"contract owned {\r\n    address public owner;\r\n\r\n    function owned() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        if (msg.sender != owner) throw;\r\n        _\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n//token contract used as reward\r\ncontract token {\r\n    mapping (address => uint256) public totalInvestmentOf;\r\n    function transfer(address receiver, uint amount){  }\r\n    function updateInvestmentTotal(address _to, uint256 _value){ }\r\n    function burnUnsoldCoins(address _removeCoinsFrom){ }\r\n}\r\n\r\ncontract Crowdsale is owned {\r\n    uint public amountRaised;\r\n    //20160 minutes (two weeks)\r\n    uint public deadline;\r\n    //1 token for 1 ETH week 1\r\n    uint public price = 1 ether;\r\n    //address of token used as reward\r\n    token public tokenReward;\r\n    Funder[] public funders;\r\n    event FundTransfer(address backer, uint amount, bool isContribution);\r\n    //crowdsale is open\r\n    bool crowdsaleClosed = false;\r\n    //countdown to week two price increase\r\n    uint weekTwoPriceRiseBegin = now + 10080 * 1 minutes;\r\n    //refund any remainders\r\n    uint remainderRefund;\r\n    uint amountAfterRefund;\r\n    //80/20 split\r\n    uint bankrollBeneficiaryAmount;\r\n    uint etherollBeneficiaryAmount;\r\n    //80% sent here at end of crowdsale\r\n    address public beneficiary;\r\n    //20% to etheroll\r\n    address etherollBeneficiary = 0x5de92686587b10cd47e03b71f2e2350606fcaf14;\r\n\r\n    //data structure to hold information about campaign contributors\r\n    struct Funder {\r\n        address addr;\r\n        uint amount;\r\n    }\r\n\r\n    //owner\r\n    function Crowdsale(\r\n        address ifSuccessfulSendTo,\r\n        uint durationInMinutes,\r\n        //uint etherCostOfEachToken,\r\n        token addressOfTokenUsedAsReward\r\n    ) {\r\n        beneficiary = ifSuccessfulSendTo;\r\n        deadline = now + durationInMinutes * 1 minutes;\r\n        //price = price;\r\n        tokenReward = token(addressOfTokenUsedAsReward);\r\n    }\r\n\r\n\r\n\r\n    function () {\r\n        //crowdsale period is over\r\n        if(now > deadline) crowdsaleClosed = true;\r\n        if (crowdsaleClosed) throw;\r\n        uint amount = msg.value;\r\n\r\n        //refund if value sent is below token price\r\n        if(amount < price) throw;\r\n\r\n        //week 1 price\r\n        if(now < weekTwoPriceRiseBegin){\r\n            //return any ETH in case of remainder\r\n            remainderRefund = amount % price;\r\n            if(remainderRefund > 0){\r\n                //quietly refund any spare change\r\n                msg.sender.send(remainderRefund);\r\n                amountAfterRefund = amount-remainderRefund;\r\n                tokenReward.transfer(msg.sender, amountAfterRefund / price);\r\n                amountRaised += amountAfterRefund;\r\n                funders[funders.length++] = Funder({addr: msg.sender, amount: amountAfterRefund});\r\n                tokenReward.updateInvestmentTotal(msg.sender, amountAfterRefund);\r\n                FundTransfer(msg.sender, amountAfterRefund, true);\r\n            }\r\n\r\n            //same but no remainder\r\n            if(remainderRefund == 0){\r\n                 amountRaised += amount;\r\n                 tokenReward.transfer(msg.sender, amount / price);\r\n                 funders[funders.length++] = Funder({addr: msg.sender, amount: amount});\r\n                 tokenReward.updateInvestmentTotal(msg.sender, amount);\r\n                 FundTransfer(msg.sender, amount, true);\r\n            }\r\n        }\r\n\r\n        //week 2 price\r\n        if(now >= weekTwoPriceRiseBegin){\r\n            //price rise in week two\r\n            //1 token for 1.5ETH\r\n            if(price == 1 ether){price = (price*150)/100;}\r\n            //tokenReward.transfer(msg.sender, amount / price, amount);\r\n            //return any ETH in case of remainder\r\n            remainderRefund = amount % price;\r\n            if(remainderRefund > 0){\r\n                //quietly refund any spare change\r\n                msg.sender.send(remainderRefund);\r\n                amountAfterRefund = amount-remainderRefund;\r\n                tokenReward.transfer(msg.sender, amountAfterRefund / price);\r\n                amountRaised += amountAfterRefund;\r\n                funders[funders.length++] = Funder({addr: msg.sender, amount: amountAfterRefund});\r\n                tokenReward.updateInvestmentTotal(msg.sender, amountAfterRefund);\r\n                FundTransfer(msg.sender, amountAfterRefund, true);\r\n            }\r\n\r\n            //same but no remainder\r\n            if(remainderRefund == 0){\r\n                 tokenReward.transfer(msg.sender, amount / price);\r\n                 amountRaised += amount;\r\n                 funders[funders.length++] = Funder({addr: msg.sender, amount: amount});\r\n                 tokenReward.updateInvestmentTotal(msg.sender, amount);\r\n                 FundTransfer(msg.sender, amount, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    //modifier for only after end of crowdsale\r\n    modifier afterDeadline() { if (now >= deadline) _ }\r\n\r\n    //modifier for only after week 1 price rise\r\n    modifier afterPriceRise() { if (now >= weekTwoPriceRiseBegin) _ }\r\n\r\n    /*checks if the time limit has been reached and ends the campaign\r\n    anybody can call this after the deadline\r\n    80% of funds sent to final etheroll bankroll SC\r\n    20% of funds  sent to an address for etheroll salaries*/\r\n    function checkGoalReached() afterDeadline {\r\n        //house bankroll receives 80%\r\n        bankrollBeneficiaryAmount = (amountRaised*80)/100;\r\n        beneficiary.send(bankrollBeneficiaryAmount);\r\n        FundTransfer(beneficiary, bankrollBeneficiaryAmount, false);\r\n        //etheroll receives 20%\r\n        etherollBeneficiaryAmount = (amountRaised*20)/100;\r\n        etherollBeneficiary.send(etherollBeneficiaryAmount);\r\n        FundTransfer(etherollBeneficiary, etherollBeneficiaryAmount, false);\r\n        etherollBeneficiary.send(this.balance); // send any remaining balance to etherollBeneficiary anyway\r\n        //burn any remaining unsold coins\r\n        //tokenReward.burnUnsoldCoins();\r\n        crowdsaleClosed = true;\r\n    }\r\n\r\n    //update token price week two\r\n    //this does happen automatically when someone purchases tokens week 2\r\n    //but nice to update for users\r\n    function updateTokenPriceWeekTwo() afterPriceRise {\r\n        //funky price updates\r\n        if(price == 1 ether){price = (price*150)/100;}\r\n    }\r\n\r\n    function burnCoins(address _removeCoinsFrom)\r\n        onlyOwner\r\n    {\r\n        tokenReward.burnUnsoldCoins(_removeCoinsFrom);\r\n    }\r\n\r\n    //in case of absolute emergency\r\n    //returns all funds to investors\r\n    //divestment schedule is better in the beneficiary contract as no gas limit concerns\r\n    function returnFunds()\r\n        onlyOwner\r\n    {\r\n        for (uint i = 0; i < funders.length; ++i) {\r\n          funders[i].addr.send(funders[i].amount);\r\n          FundTransfer(funders[i].addr, funders[i].amount, false);\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"checkGoalReached\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"returnFunds\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateTokenPriceWeekTwo\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_removeCoinsFrom\",\"type\":\"address\"}],\"name\":\"burnCoins\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"funders\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"type\":\"function\"},{\"inputs\":[{\"name\":\"ifSuccessfulSendTo\",\"type\":\"address\"},{\"name\":\"durationInMinutes\",\"type\":\"uint256\"},{\"name\":\"addressOfTokenUsedAsReward\",\"type\":\"address\"}],\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isContribution\",\"type\":\"bool\"}],\"name\":\"FundTransfer\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.3.1-2016-03-31-c492d9b","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c7a6844f074be7f4b72082079d4bcd47b1d3ef970000000000000000000000000000000000000000000000000000000000004ec0000000000000000000000000962625e9342b44fabbcbca4cb0296c548643e771","Library":"","SwarmSource":""}]}