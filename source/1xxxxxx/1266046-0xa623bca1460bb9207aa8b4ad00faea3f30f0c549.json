{"status":"1","message":"OK","result":[{"SourceCode":"contract CSGOBets {\r\n\r\n        struct Bets {\r\n                address etherAddress;\r\n                uint amount;\r\n        }\r\n\r\n        Bets[] public voteA;\r\n        Bets[] public voteB;\r\n        uint public balanceA = 0; // balance of all bets on teamA\r\n        uint public balanceB = 0; // balance of all bets on teamB\r\n        uint8 public house_edge = 6; // percent\r\n        uint public betLockTime = 0; // block\r\n        uint public lastTransactionRec = 0; // block\r\n        address public owner;\r\n\r\n        modifier onlyowner {\r\n                if (msg.sender == owner) _\r\n        }\r\n\r\n        function CSGOBets() {\r\n                owner = msg.sender;\r\n                lastTransactionRec = block.number;\r\n        }\r\n\r\n        function() {\r\n                enter();\r\n        }\r\n\r\n        function enter() {\r\n                // if less than 0.25 ETH or bet locked return money\r\n                // If bet is locked for more than 28 days allow users to return all the money\r\n                if (msg.value < 250 finney ||\r\n                        (block.number >= betLockTime && betLockTime != 0 && block.number < betLockTime + 161280)) {\r\n                        msg.sender.send(msg.value);\r\n                        return;\r\n                }\r\n\r\n                uint amount;\r\n                // max 100 ETH\r\n                if (msg.value > 100 ether) {\r\n                        msg.sender.send(msg.value - 100 ether);\r\n                        amount = 100 ether;\r\n                } else {\r\n                        amount = msg.value;\r\n                }\r\n\r\n                if (lastTransactionRec + 161280 < block.number) { // 28 days after last transaction\r\n                        returnAll();\r\n                        betLockTime = block.number;\r\n                        lastTransactionRec = block.number;\r\n                        msg.sender.send(msg.value);\r\n                        return;\r\n                }\r\n                lastTransactionRec = block.number;\r\n\r\n                uint cidx;\r\n                //vote with finney (even = team A, odd = team B)\r\n                if ((amount / 1000000000000000) % 2 == 0) {\r\n                        balanceA += amount;\r\n                        cidx = voteA.length;\r\n                        voteA.length += 1;\r\n                        voteA[cidx].etherAddress = msg.sender;\r\n                        voteA[cidx].amount = amount;\r\n                } else {\r\n                        balanceB += amount;\r\n                        cidx = voteB.length;\r\n                        voteB.length += 1;\r\n                        voteB[cidx].etherAddress = msg.sender;\r\n                        voteB[cidx].amount = amount;\r\n                }\r\n        }\r\n\r\n        // no further ether will be accepted (fe match is now live)\r\n        function lockBet(uint blocknumber) onlyowner {\r\n                betLockTime = blocknumber;\r\n        }\r\n\r\n        // init payout\r\n        function payout(uint winner) onlyowner {\r\n                var winPot = (winner == 0) ? balanceA : balanceB;\r\n                var losePot_ = (winner == 0) ? balanceB : balanceA;\r\n                uint losePot = losePot_ * (100 - house_edge) / 100; // substract housecut\r\n                uint collectedFees = losePot_ * house_edge / 100;\r\n                var winners = (winner == 0) ? voteA : voteB;\r\n                for (uint idx = 0; idx < winners.length; idx += 1) {\r\n                        uint winAmount = winners[idx].amount + (winners[idx].amount * losePot / winPot);\r\n                        winners[idx].etherAddress.send(winAmount);\r\n                }\r\n\r\n                // pay housecut & reset for next bet\r\n                if (collectedFees != 0) {\r\n                        owner.send(collectedFees);\r\n                }\r\n                clear();\r\n        }\r\n\r\n        // basically private (only called if last transaction was 4 weeks ago)\r\n        // If a match is fixed or a party cheated, I will return all transactions manually.\r\n        function returnAll() onlyowner {\r\n                for (uint idx = 0; idx < voteA.length; idx += 1) {\r\n                        voteA[idx].etherAddress.send(voteA[idx].amount);\r\n                }\r\n                for (uint idxB = 0; idxB < voteB.length; idxB += 1) {\r\n                        voteB[idxB].etherAddress.send(voteB[idxB].amount);\r\n                }\r\n                clear();\r\n        }\r\n\r\n        function clear() private {\r\n                balanceA = 0;\r\n                balanceB = 0;\r\n                betLockTime = 0;\r\n                lastTransactionRec = block.number;\r\n                delete voteA;\r\n                delete voteB;\r\n        }\r\n\r\n        function changeHouseedge(uint8 cut) onlyowner {\r\n                // houseedge boundaries\r\n                if (cut <= 20 && cut > 0)\r\n                        house_edge = cut;\r\n        }\r\n\r\n        function setOwner(address _owner) onlyowner {\r\n                owner = _owner;\r\n        }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"house_edge\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voteA\",\"outputs\":[{\"name\":\"etherAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceB\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"betLockTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voteB\",\"outputs\":[{\"name\":\"etherAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastTransactionRec\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"returnAll\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"blocknumber\",\"type\":\"uint256\"}],\"name\":\"lockBet\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceA\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cut\",\"type\":\"uint8\"}],\"name\":\"changeHouseedge\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"winner\",\"type\":\"uint256\"}],\"name\":\"payout\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enter\",\"outputs\":[],\"type\":\"function\"},{\"inputs\":[],\"type\":\"constructor\"}]","ContractName":"CSGOBets","CompilerVersion":"v0.2.2-2016-03-10-34d714f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}