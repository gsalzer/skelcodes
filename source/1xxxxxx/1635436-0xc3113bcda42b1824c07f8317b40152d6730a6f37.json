{"status":"1","message":"OK","result":[{"SourceCode":"contract EtherTreasuryInterface {\r\n    function withdraw(address _to, uint _value) returns(bool);\r\n    function withdrawWithReference(address _to, uint _value, string _reference) returns(bool);\r\n}\r\n\r\ncontract MultiAsset {\r\n    function owner(bytes32 _symbol) constant returns(address);\r\n    function isCreated(bytes32 _symbol) constant returns(bool);\r\n    function totalSupply(bytes32 _symbol) constant returns(uint);\r\n    function balanceOf(address _holder, bytes32 _symbol) constant returns(uint);\r\n    function transfer(address _to, uint _value, bytes32 _symbol) returns(bool);\r\n    function proxyTransferWithReference(address _to, uint _value, bytes32 _symbol, string _reference) returns(bool);\r\n    function proxyTransferToICAPWithReference(bytes32 _icap, uint _value, string _reference) returns(bool);\r\n    function proxyApprove(address _spender, uint _value, bytes32 _symbol) returns(bool);\r\n    function allowance(address _from, address _spender, bytes32 _symbol) constant returns(uint);\r\n    function proxyTransferFromWithReference(address _from, address _to, uint _value, bytes32 _symbol, string _reference) returns(bool);\r\n    function proxyTransferFromToICAPWithReference(address _from, bytes32 _icap, uint _value, string _reference) returns(bool);\r\n    function proxySetCosignerAddress(address _address, bytes32 _symbol) returns(bool);\r\n}\r\n\r\ncontract Asset {\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approve(address indexed from, address indexed spender, uint value);\r\n\r\n    MultiAsset public multiAsset;\r\n    bytes32 public symbol;\r\n\r\n    function init(address _multiAsset, bytes32 _symbol) returns(bool) {\r\n        MultiAsset ma = MultiAsset(_multiAsset);\r\n        if (address(multiAsset) != 0x0 || !ma.isCreated(_symbol)) {\r\n            return false;\r\n        }\r\n        multiAsset = ma;\r\n        symbol = _symbol;\r\n        return true;\r\n    }\r\n\r\n    modifier onlyMultiAsset() {\r\n        if (msg.sender == address(multiAsset)) {\r\n            _\r\n        }\r\n    }\r\n\r\n    function totalSupply() constant returns(uint) {\r\n        return multiAsset.totalSupply(symbol);\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns(uint) {\r\n        return multiAsset.balanceOf(_owner, symbol);\r\n    }\r\n\r\n    function allowance(address _from, address _spender) constant returns(uint) {\r\n        return multiAsset.allowance(_from, _spender, symbol);\r\n    }\r\n\r\n    function transfer(address _to, uint _value) returns(bool) {\r\n        return transferWithReference(_to, _value, \"\");\r\n    }\r\n\r\n    function transferWithReference(address _to, uint _value, string _reference) returns(bool) {\r\n        if (!multiAsset.proxyTransferWithReference(_to, _value, symbol, _reference)) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function transferToICAP(bytes32 _icap, uint _value) returns(bool) {\r\n        return transferToICAPWithReference(_icap, _value, \"\");\r\n    }\r\n\r\n    function transferToICAPWithReference(bytes32 _icap, uint _value, string _reference) returns(bool) {\r\n        if (!multiAsset.proxyTransferToICAPWithReference(_icap, _value, _reference)) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint _value) returns(bool) {\r\n        return transferFromWithReference(_from, _to, _value, \"\");\r\n    }\r\n\r\n    function transferFromWithReference(address _from, address _to, uint _value, string _reference) returns(bool) {\r\n        if (!multiAsset.proxyTransferFromWithReference(_from, _to, _value, symbol, _reference)) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function transferFromToICAP(address _from, bytes32 _icap, uint _value) returns(bool) {\r\n        return transferFromToICAPWithReference(_from, _icap, _value, \"\");\r\n    }\r\n\r\n    function transferFromToICAPWithReference(address _from, bytes32 _icap, uint _value, string _reference) returns(bool) {\r\n        if (!multiAsset.proxyTransferFromToICAPWithReference(_from, _icap, _value, _reference)) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint _value) returns(bool) {\r\n        if (!multiAsset.proxyApprove(_spender, _value, symbol)) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function setCosignerAddress(address _cosigner) returns(bool) {\r\n        if (!multiAsset.proxySetCosignerAddress(_cosigner, symbol)) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function emitTransfer(address _from, address _to, uint _value) onlyMultiAsset() {\r\n        Transfer(_from, _to, _value);\r\n    }\r\n\r\n    function emitApprove(address _from, address _spender, uint _value) onlyMultiAsset() {\r\n        Approve(_from, _spender, _value);\r\n    }\r\n\r\n    function sendToOwner() returns(bool) {\r\n        return multiAsset.transfer(multiAsset.owner(symbol), balanceOf(address(this)), symbol);\r\n    }\r\n}\r\n\r\ncontract Ambi {\r\n    function getNodeAddress(bytes32) constant returns(address);\r\n    function addNode(bytes32, address) external returns(bool);    \r\n    function hasRelation(bytes32, bytes32, address) constant returns(bool);\r\n}\r\n\r\ncontract AmbiEnabled {\r\n    Ambi ambiC;\r\n    bytes32 public name;\r\n\r\n    modifier checkAccess(bytes32 _role) {\r\n        if(address(ambiC) != 0x0 && ambiC.hasRelation(name, _role, msg.sender)){\r\n            _\r\n        }\r\n    }\r\n    \r\n    function getAddress(bytes32 _name) constant returns (address) {\r\n        return ambiC.getNodeAddress(_name);\r\n    }\r\n\r\n    function setAmbiAddress(address _ambi, bytes32 _name) returns (bool){\r\n        if(address(ambiC) != 0x0){\r\n            return false;\r\n        }\r\n        Ambi ambiContract = Ambi(_ambi);\r\n        if(ambiContract.getNodeAddress(_name)!=address(this)) {\r\n            bool isNode = ambiContract.addNode(_name, address(this));\r\n            if (!isNode){\r\n                return false;\r\n            }   \r\n        }\r\n        name = _name;\r\n        ambiC = ambiContract;\r\n        return true;\r\n    }\r\n\r\n    function remove() checkAccess(\"owner\") {\r\n        suicide(msg.sender);\r\n    }\r\n}\r\n\r\ncontract OpenDollar is Asset, AmbiEnabled {\r\n    uint public txGasPriceLimit = 21000000000;\r\n    uint public refundGas = 40000;\r\n    uint public transferCallGas = 21000;\r\n    uint public transferWithReferenceCallGas = 21000;\r\n    uint public transferFromCallGas = 21000;\r\n    uint public transferFromWithReferenceCallGas = 21000;\r\n    uint public transferToICAPCallGas = 21000;\r\n    uint public transferToICAPWithReferenceCallGas = 21000;\r\n    uint public transferFromToICAPCallGas = 21000;\r\n    uint public transferFromToICAPWithReferenceCallGas = 21000;\r\n    uint public approveCallGas = 21000;\r\n    uint public forwardCallGas = 21000;\r\n    uint public setCosignerCallGas = 21000;\r\n    EtherTreasuryInterface public treasury;\r\n    mapping(uint32 => address) public allowedForwards;\r\n\r\n    function updateRefundGas() checkAccess(\"setup\") returns(uint) {\r\n        uint startGas = msg.gas;\r\n        uint refund = (startGas - msg.gas + refundGas) * tx.gasprice;\r\n        if (tx.gasprice > txGasPriceLimit) {\r\n            return 0;\r\n        }\r\n        if (!_refund(1)) {\r\n            return 0;\r\n        }\r\n        refundGas = startGas - msg.gas;\r\n        return refundGas;\r\n    }\r\n\r\n    function setOperationsCallGas\r\n        (\r\n            uint _transfer,\r\n            uint _transferFrom,\r\n            uint _transferToICAP,\r\n            uint _transferFromToICAP,\r\n            uint _transferWithReference,\r\n            uint _transferFromWithReference,\r\n            uint _transferToICAPWithReference,\r\n            uint _transferFromToICAPWithReference,\r\n            uint _approve,\r\n            uint _forward,\r\n            uint _setCosigner\r\n        ) checkAccess(\"setup\") returns(bool)\r\n    {\r\n        transferCallGas = _transfer;\r\n        transferFromCallGas = _transferFrom;\r\n        transferToICAPCallGas = _transferToICAP;\r\n        transferFromToICAPCallGas = _transferFromToICAP;\r\n        transferWithReferenceCallGas = _transferWithReference;\r\n        transferFromWithReferenceCallGas = _transferFromWithReference;\r\n        transferToICAPWithReferenceCallGas = _transferToICAPWithReference;\r\n        transferFromToICAPWithReferenceCallGas = _transferFromToICAPWithReference;\r\n        approveCallGas = _approve;\r\n        forwardCallGas = _forward;\r\n        setCosignerCallGas = _setCosigner;\r\n        return true;\r\n    }\r\n\r\n    function setupTreasury(address _treasury, uint _txGasPriceLimit) checkAccess(\"admin\") returns(bool) {\r\n        if (_txGasPriceLimit == 0) {\r\n            return false;\r\n        }\r\n        treasury = EtherTreasuryInterface(_treasury);\r\n        txGasPriceLimit = _txGasPriceLimit;\r\n        if (msg.value > 0 && !address(treasury).send(msg.value)) {\r\n            throw;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function setForward(bytes4 _msgSig, address _forward) checkAccess(\"admin\") returns(bool) {\r\n        allowedForwards[uint32(_msgSig)] = _forward;\r\n        return true;\r\n    }\r\n\r\n    function _stringGas(string _string) constant internal returns(uint) {\r\n        return bytes(_string).length * 75;\r\n    }\r\n\r\n    function _applyRefund(uint _startGas) internal returns(bool) {\r\n        if (tx.gasprice > txGasPriceLimit) {\r\n            return false;\r\n        }\r\n        uint refund = (_startGas - msg.gas + refundGas) * tx.gasprice;\r\n        return _refund(refund);\r\n    }\r\n\r\n    function _refund(uint _value) internal returns(bool) {\r\n        return treasury.withdraw(tx.origin, _value);\r\n    }\r\n\r\n    function _transfer(address _to, uint _value) internal returns(bool, bool) {\r\n        uint startGas = msg.gas + transferCallGas;\r\n        if (!multiAsset.proxyTransferWithReference(_to, _value, symbol, \"\")) {\r\n            return (false, false);\r\n        }\r\n        return (true, _applyRefund(startGas));\r\n    }\r\n\r\n    function _transferFrom(address _from, address _to, uint _value) internal returns(bool, bool) {\r\n        uint startGas = msg.gas + transferFromCallGas;\r\n        if (!multiAsset.proxyTransferFromWithReference(_from, _to, _value, symbol, \"\")) {\r\n            return (false, false);\r\n        }\r\n        return (true, _applyRefund(startGas));\r\n    }\r\n\r\n    function _transferToICAP(bytes32 _icap, uint _value) internal returns(bool, bool) {\r\n        uint startGas = msg.gas + transferToICAPCallGas;\r\n        if (!multiAsset.proxyTransferToICAPWithReference(_icap, _value, \"\")) {\r\n            return (false, false);\r\n        }\r\n        return (true, _applyRefund(startGas));\r\n    }\r\n\r\n    function _transferFromToICAP(address _from, bytes32 _icap, uint _value) internal returns(bool, bool) {\r\n        uint startGas = msg.gas + transferFromToICAPCallGas;\r\n        if (!multiAsset.proxyTransferFromToICAPWithReference(_from, _icap, _value, \"\")) {\r\n            return (false, false);\r\n        }\r\n        return (true, _applyRefund(startGas));\r\n    }\r\n\r\n    function _transferWithReference(address _to, uint _value, string _reference) internal returns(bool, bool) {\r\n        uint startGas = msg.gas + transferWithReferenceCallGas + _stringGas(_reference);\r\n        if (!multiAsset.proxyTransferWithReference(_to, _value, symbol, _reference)) {\r\n            return (false, false);\r\n        }\r\n        return (true, _applyRefund(startGas));\r\n    }\r\n\r\n    function _transferFromWithReference(address _from, address _to, uint _value, string _reference) internal returns(bool, bool) {\r\n        uint startGas = msg.gas + transferFromWithReferenceCallGas + _stringGas(_reference);\r\n        if (!multiAsset.proxyTransferFromWithReference(_from, _to, _value, symbol, _reference)) {\r\n            return (false, false);\r\n        }\r\n        return (true, _applyRefund(startGas));\r\n    }\r\n\r\n    function _transferToICAPWithReference(bytes32 _icap, uint _value, string _reference) internal returns(bool, bool) {\r\n        uint startGas = msg.gas + transferToICAPWithReferenceCallGas + _stringGas(_reference);\r\n        if (!multiAsset.proxyTransferToICAPWithReference(_icap, _value, _reference)) {\r\n            return (false, false);\r\n        }\r\n        return (true, _applyRefund(startGas));\r\n    }\r\n\r\n    function _transferFromToICAPWithReference(address _from, bytes32 _icap, uint _value, string _reference) internal returns(bool, bool) {\r\n        uint startGas = msg.gas + transferFromToICAPWithReferenceCallGas + _stringGas(_reference);\r\n        if (!multiAsset.proxyTransferFromToICAPWithReference(_from, _icap, _value, _reference)) {\r\n            return (false, false);\r\n        }\r\n        return (true, _applyRefund(startGas));\r\n    }\r\n\r\n    function _approve(address _spender, uint _value) internal returns(bool, bool) {\r\n        uint startGas = msg.gas + approveCallGas;\r\n        if (!multiAsset.proxyApprove(_spender, _value, symbol)) {\r\n            return (false, false);\r\n        }\r\n        return (true, _applyRefund(startGas));\r\n    }\r\n\r\n    function _setCosignerAddress(address _cosigner) internal returns(bool, bool) {\r\n        uint startGas = msg.gas + setCosignerCallGas;\r\n        if (!multiAsset.proxySetCosignerAddress(_cosigner, symbol)) {\r\n            return (false, false);\r\n        }\r\n        return (true, _applyRefund(startGas));\r\n    }\r\n\r\n    function transfer(address _to, uint _value) returns(bool) {\r\n        bool success;\r\n        (success,) = _transfer(_to, _value);\r\n        return success;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value) returns(bool) {\r\n        bool success;\r\n        (success,) = _transferFrom(_from, _to, _value);\r\n        return success;\r\n    }\r\n\r\n    function transferToICAP(bytes32 _icap, uint _value) returns(bool) {\r\n        bool success;\r\n        (success,) = _transferToICAP(_icap, _value);\r\n        return success;\r\n    }\r\n\r\n    function transferFromToICAP(address _from, bytes32 _icap, uint _value) returns(bool) {\r\n        bool success;\r\n        (success,) = _transferFromToICAP(_from, _icap, _value);\r\n        return success;\r\n    }\r\n\r\n    function transferWithReference(address _to, uint _value, string _reference) returns(bool) {\r\n        bool success;\r\n        (success,) = _transferWithReference(_to, _value, _reference);\r\n        return success;\r\n    }\r\n\r\n    function transferFromWithReference(address _from, address _to, uint _value, string _reference) returns(bool) {\r\n        bool success;\r\n        (success,) = _transferFromWithReference(_from, _to, _value, _reference);\r\n        return success;\r\n    }\r\n\r\n    function transferToICAPWithReference(bytes32 _icap, uint _value, string _reference) returns(bool) {\r\n        bool success;\r\n        (success,) = _transferToICAPWithReference(_icap, _value, _reference);\r\n        return success;\r\n    }\r\n\r\n    function transferFromToICAPWithReference(address _from, bytes32 _icap, uint _value, string _reference) returns(bool) {\r\n        bool success;\r\n        (success,) = _transferFromToICAPWithReference(_from, _icap, _value, _reference);\r\n        return success;\r\n    }\r\n\r\n    function approve(address _spender, uint _value) returns(bool) {\r\n        bool success;\r\n        (success,) = _approve(_spender, _value);\r\n        return success;\r\n    }\r\n\r\n    function setCosignerAddress(address _cosigner) returns(bool) {\r\n        bool success;\r\n        (success,) = _setCosignerAddress(_cosigner);\r\n        return success;\r\n    }\r\n\r\n    function checkTransfer(address _to, uint _value) constant returns(bool, bool) {\r\n        return _transfer(_to, _value);\r\n    }\r\n\r\n    function checkTransferFrom(address _from, address _to, uint _value) constant returns(bool, bool) {\r\n        return _transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function checkTransferToICAP(bytes32 _icap, uint _value) constant returns(bool, bool) {\r\n        return _transferToICAP(_icap, _value);\r\n    }\r\n\r\n    function checkTransferFromToICAP(address _from, bytes32 _icap, uint _value) constant returns(bool, bool) {\r\n        return _transferFromToICAP(_from, _icap, _value);\r\n    }\r\n\r\n    function checkTransferWithReference(address _to, uint _value, string _reference) constant returns(bool, bool) {\r\n        return _transferWithReference(_to, _value, _reference);\r\n    }\r\n\r\n    function checkTransferFromWithReference(address _from, address _to, uint _value, string _reference) constant returns(bool, bool) {\r\n        return _transferFromWithReference(_from, _to, _value, _reference);\r\n    }\r\n\r\n    function checkTransferToICAPWithReference(bytes32 _icap, uint _value, string _reference) constant returns(bool, bool) {\r\n        return _transferToICAPWithReference(_icap, _value, _reference);\r\n    }\r\n\r\n    function checkTransferFromToICAPWithReference(address _from, bytes32 _icap, uint _value, string _reference) constant returns(bool, bool) {\r\n        return _transferFromToICAPWithReference(_from, _icap, _value, _reference);\r\n    }\r\n\r\n    function checkApprove(address _spender, uint _value) constant returns(bool, bool) {\r\n        return _approve(_spender, _value);\r\n    }\r\n\r\n    function checkSetCosignerAddress(address _cosigner) constant returns(bool, bool) {\r\n        return _setCosignerAddress(_cosigner);\r\n    }\r\n\r\n    function _forward(address _to, bytes _data) internal returns(bool) {\r\n        uint startGas = msg.gas + forwardCallGas + (_data.length * 50);\r\n        if (_to == 0x0) {\r\n            return false;\r\n        }\r\n        _to.call.value(msg.value)(_data);\r\n        return _applyRefund(startGas);\r\n    }\r\n\r\n    function () returns(bool) {\r\n        return _forward(allowedForwards[uint32(msg.sig)], msg.data);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_icap\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"checkTransferFromToICAP\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multiAsset\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_msgSig\",\"type\":\"bytes4\"},{\"name\":\"_forward\",\"type\":\"address\"}],\"name\":\"setForward\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_icap\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"}],\"name\":\"checkTransferToICAPWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"setCosignerCallGas\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferFromToICAPCallGas\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"txGasPriceLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"approveCallGas\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_name\",\"type\":\"bytes32\"}],\"name\":\"getAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"emitApprove\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"emitTransfer\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateRefundGas\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_multiAsset\",\"type\":\"address\"},{\"name\":\"_symbol\",\"type\":\"bytes32\"}],\"name\":\"init\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_treasury\",\"type\":\"address\"},{\"name\":\"_txGasPriceLimit\",\"type\":\"uint256\"}],\"name\":\"setupTreasury\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refundGas\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferToICAPWithReferenceCallGas\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferFromCallGas\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"}],\"name\":\"transferFromWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_transfer\",\"type\":\"uint256\"},{\"name\":\"_transferFrom\",\"type\":\"uint256\"},{\"name\":\"_transferToICAP\",\"type\":\"uint256\"},{\"name\":\"_transferFromToICAP\",\"type\":\"uint256\"},{\"name\":\"_transferWithReference\",\"type\":\"uint256\"},{\"name\":\"_transferFromWithReference\",\"type\":\"uint256\"},{\"name\":\"_transferToICAPWithReference\",\"type\":\"uint256\"},{\"name\":\"_transferFromToICAPWithReference\",\"type\":\"uint256\"},{\"name\":\"_approve\",\"type\":\"uint256\"},{\"name\":\"_forward\",\"type\":\"uint256\"},{\"name\":\"_setCosigner\",\"type\":\"uint256\"}],\"name\":\"setOperationsCallGas\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sendToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"forwardCallGas\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_icap\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferToICAP\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_icap\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"}],\"name\":\"transferToICAPWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ambi\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"bytes32\"}],\"name\":\"setAmbiAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferFromWithReferenceCallGas\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cosigner\",\"type\":\"address\"}],\"name\":\"setCosignerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"checkTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_icap\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"checkTransferToICAP\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferWithReferenceCallGas\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_icap\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"}],\"name\":\"transferFromToICAPWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferFromToICAPWithReferenceCallGas\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_icap\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFromToICAP\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"remove\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"}],\"name\":\"transferWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferToICAPCallGas\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"allowedForwards\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_cosigner\",\"type\":\"address\"}],\"name\":\"checkSetCosignerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_icap\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"}],\"name\":\"checkTransferFromToICAPWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferCallGas\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"checkTransferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"}],\"name\":\"checkTransferFromWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"}],\"name\":\"checkTransferWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"checkApprove\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approve\",\"type\":\"event\"}]","ContractName":"OpenDollar","CompilerVersion":"v0.3.4-2016-05-31-7dab890","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}