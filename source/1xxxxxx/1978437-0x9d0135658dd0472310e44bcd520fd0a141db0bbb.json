{"status":"1","message":"OK","result":[{"SourceCode":"contract DAO {\r\n    function balanceOf(address addr) returns (uint);\r\n    function transferFrom(address from, address to, uint balance) returns (bool);\r\n    function getNewDAOAddress(uint _proposalID) constant returns(address _newDAO);\r\n    uint public totalSupply;\r\n}\r\n\r\n/**\r\n * @title trustedChildRefund\r\n * @author Paul Szczesny, Alexey Akhunov\r\n * A simple refund contract for trusted childDAOs affected by the hard fork.\r\n * Based on the official WithdrawDAO contract found here: https://etherscan.io/address/0xbf4ed7b27f1d666546e30d74d50d173d20bca754#code\r\n */\r\ncontract trustedChildRefund {\r\n\r\n  DAO constant public mainDAO = DAO(0xbb9bc244d798123fde783fcc1c72d3bb8c189413);\r\n  uint[] public trustedProposals = [7, 10, 16, 20, 23, 26, 27, 28, 29, 31, 34, 37, 39, 41, 44, 52, 54, 56, 57, 60, 61, 63, 64, 65, 66];\r\n  mapping (uint => DAO) public whiteList;\r\n\r\n  /**\r\n  * Populates the whiteList based on the list of trusted proposal Ids.\r\n  */\r\n  function trustedChildRefund() {\r\n      for(uint i=0; i<trustedProposals.length; i++) {\r\n          uint proposalId = trustedProposals[i];\r\n          whiteList[proposalId] = DAO(mainDAO.getNewDAOAddress(proposalId));\r\n      }\r\n  }\r\n\r\n  /**\r\n  * Convienience function for the Curator to calculate the required amount of Wei\r\n  * that needs to be transferred to this contract.\r\n  */\r\n  function requiredEndowment() constant returns (uint endowment) {\r\n      uint sum = 0;\r\n      for(uint i=0; i<trustedProposals.length; i++) {\r\n          uint proposalId = trustedProposals[i];\r\n          DAO childDAO = whiteList[proposalId];\r\n          sum += childDAO.totalSupply();\r\n      }\r\n      return sum;\r\n  }\r\n\r\n  /**\r\n   * Function call to refund ETH by burning childDao tokens.\r\n   * @param proposalId The split proposal ID which created the childDao\r\n   * @dev This requires that the token-holder authorizes this contract's address using the approve() function.\r\n   */\r\n  function refund(uint proposalId) {\r\n    //Check the token balance\r\n    uint balance = whiteList[proposalId].balanceOf(msg.sender);\r\n\r\n    // Transfer childDao tokens first, then send Ether back in return\r\n    if (!whiteList[proposalId].transferFrom(msg.sender, this, balance) || !msg.sender.send(balance))\r\n      throw;\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"refund\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"whiteList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"trustedProposals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mainDAO\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requiredEndowment\",\"outputs\":[{\"name\":\"endowment\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"inputs\":[],\"type\":\"constructor\"}]","ContractName":"trustedChildRefund","CompilerVersion":"v0.3.5-2016-06-10-5f97274","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}