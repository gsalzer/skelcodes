{"status":"1","message":"OK","result":[{"SourceCode":"contract ZeroDollarHomePage {\r\n    event InvalidPullRequest(uint indexed pullRequestId);\r\n    event PullRequestAlreadyClaimed(uint indexed pullRequestId, uint timeBeforeDisplay, bool past);\r\n    event PullRequestClaimed(uint indexed pullRequestId, uint timeBeforeDisplay);\r\n    event QueueIsEmpty();\r\n\r\n    bool _handledFirst;\r\n    uint[] _queue;\r\n    uint _current;\r\n    address owner;\r\n\r\n    function ZeroDollarHomePage() {\r\n        owner = msg.sender;\r\n        _handledFirst = false;\r\n        _current = 0;\r\n    }\r\n\r\n    function remove() {\r\n        if (msg.sender == owner){\r\n            suicide(owner);\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Register a new pull request.\r\n     */\r\n    function newRequest(uint pullRequestId) {\r\n        if (pullRequestId <= 0) {\r\n            InvalidPullRequest(pullRequestId);\r\n            return;\r\n        }\r\n\r\n        // Check that the pr hasn't already been claimed\r\n        bool found = false;\r\n        uint index = 0;\r\n\r\n        while (!found && index < _queue.length) {\r\n            if (_queue[index] == pullRequestId) {\r\n                found = true;\r\n                break;\r\n            } else {\r\n                index++;\r\n            }\r\n        }\r\n\r\n        if (found) {\r\n            PullRequestAlreadyClaimed(pullRequestId, (index - _current) * 1 days, _current > index);\r\n            return;\r\n        }\r\n\r\n        _queue.push(pullRequestId);\r\n        PullRequestClaimed(pullRequestId, (_queue.length - _current) * 1 days);\r\n    }\r\n\r\n    /*\r\n     * Close the current request in queue and move the queue to its next element.\r\n     */\r\n    function closeRequest() {\r\n        if (_handledFirst && _current < _queue.length - 1) {\r\n            _current += 1;\r\n        }\r\n\r\n        _handledFirst = true;\r\n    }\r\n\r\n    /*\r\n     * Get the last non published pull-request from the queue\r\n     */\r\n    function getLastNonPublished() constant returns (uint pullRequestId) {\r\n        if (_current >= _queue.length) {\r\n            return 0;\r\n        }\r\n\r\n        return _queue[_current];\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"pullRequestId\",\"type\":\"uint256\"}],\"name\":\"newRequest\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"remove\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLastNonPublished\",\"outputs\":[{\"name\":\"pullRequestId\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeRequest\",\"outputs\":[],\"type\":\"function\"},{\"inputs\":[],\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"pullRequestId\",\"type\":\"uint256\"}],\"name\":\"InvalidPullRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"pullRequestId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeBeforeDisplay\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"past\",\"type\":\"bool\"}],\"name\":\"PullRequestAlreadyClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"pullRequestId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeBeforeDisplay\",\"type\":\"uint256\"}],\"name\":\"PullRequestClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"QueueIsEmpty\",\"type\":\"event\"}]","ContractName":"ZeroDollarHomePage","CompilerVersion":"v0.3.2-2016-05-01-bee80f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}