{"status":"1","message":"OK","result":[{"SourceCode":"contract EscrowContract {\r\n\r\n    // TYPES\r\n    enum state {Funding, Paid, Accepted, Dispute, Closed}\r\n    \r\n    // PRIVATE VARIABLES\r\n    address private developer;\r\n    bool private mutex;\r\n    uint256 private dispute_limit;\r\n    \r\n    // PUBLIC VARIABLES\r\n    address public buyer;\r\n    address public seller;\r\n    address public escrow;\r\n    uint256 public amount;\r\n    uint256 public fee;\r\n    uint256 public tip;\r\n    uint256 public dispute_end;\r\n    state public status;\r\n    \r\n    // EVENTS\r\n    event CurrentStatus(uint8 s);\r\n    \r\n    // CONSTRUCTOR\r\n    function EscrowContract(address _developer, address _buyer, address _seller, address _escrow, uint256 _amount, uint256 _fee, uint256 _tip ,uint256 _dispute_limit)\r\n        private\r\n    {\r\n        developer = _developer;\r\n        mutex = false;\r\n        dispute_limit = _dispute_limit;     \r\n        buyer = _buyer;\r\n        seller = _seller;\r\n        escrow = _escrow;\r\n        amount = _amount;\r\n        fee = _fee;\r\n        tip = _tip;\r\n        dispute_end = 0;\r\n        status = state.Funding;\r\n        CurrentStatus(uint8(status));\r\n    }\r\n\r\n    // MODIFIERS\r\n    modifier only_when(state s) {\r\n        if (status != s)  throw;\r\n        _\r\n    }\r\n    modifier only_before(state s) {\r\n        if (status >= s)  throw;\r\n        _\r\n    }\r\n    modifier only_buyer() {\r\n        if (msg.sender != buyer) throw;\r\n        _\r\n    }\r\n    modifier only_seller() {\r\n        if (msg.sender != seller) throw;\r\n        _\r\n    }\r\n    modifier only_buyer_seller() {\r\n        if (msg.sender != buyer && msg.sender != seller) throw;\r\n        _\r\n    }\r\n    modifier only_escrow() {\r\n        if (msg.sender != escrow) throw;\r\n        _\r\n    }\r\n    modifier only_no_value() {\r\n        if (msg.value != 0)  throw;\r\n        _\r\n    }\r\n    modifier check_mutex() {\r\n        if (mutex) throw;\r\n        mutex = true;\r\n        _\r\n        mutex = false;\r\n    }\r\n    \r\n    // VALIDATE PERCENT\r\n    function validate_percent(uint8 val)\r\n        private\r\n        constant\r\n    {\r\n        if (val > 100) throw;\r\n    }   \r\n\r\n    // BUYER CANCEL\r\n    function buyer_cancel()\r\n        public\r\n        only_before(state.Accepted)\r\n        only_buyer()\r\n        only_no_value()\r\n        check_mutex()\r\n    {\r\n        if (this.balance > 0)\r\n            if (!buyer.send(this.balance)) throw;\r\n        status = state.Closed;\r\n        CurrentStatus(uint8(status));\r\n    }\r\n    \r\n    // SELLER ACCEPT\r\n    function seller_accept()\r\n        public\r\n        only_when(state.Paid)\r\n        only_seller()\r\n        only_no_value()\r\n        check_mutex()\r\n    {\r\n        status = state.Accepted;\r\n        CurrentStatus(uint8(status));\r\n    }\r\n\r\n    // BUYER PAY\r\n    function buyer_pay()\r\n        public\r\n        only_when(state.Accepted)\r\n        only_buyer()\r\n        only_no_value()\r\n        check_mutex()\r\n    {\r\n        if (amount > 0)\r\n            if (!seller.send(amount)) throw;\r\n        if (fee > 0)\r\n            if (!buyer.send(fee)) throw;\r\n        if (tip > 0)\r\n            if (!developer.send(tip)) throw;\r\n        status = state.Closed;\r\n        CurrentStatus(uint8(status));\r\n    }\r\n\r\n    // DISPUTE\r\n    function dispute()\r\n        public\r\n        only_when(state.Accepted)\r\n        only_buyer_seller()\r\n        only_no_value()\r\n        check_mutex()\r\n    {\r\n        status = state.Dispute;\r\n        dispute_end = block.timestamp + dispute_limit;\r\n        CurrentStatus(uint8(status));\r\n    }\r\n\r\n    // RESOLVE\r\n    function resolve(uint8 percent_buyer, uint8 percent_tip)\r\n        public\r\n        only_when(state.Dispute)\r\n        only_escrow()\r\n        only_no_value()\r\n        check_mutex()\r\n    {\r\n        validate_percent(percent_buyer);\r\n        validate_percent(percent_tip);\r\n        uint256 buyer_amount = uint256(amount * percent_buyer)/100;\r\n        uint256 seller_amount = amount - buyer_amount;\r\n        uint256 tip_amount = uint256(fee * percent_tip)/100;\r\n        uint256 escrow_amount = fee - tip_amount;\r\n        tip_amount = tip_amount + tip;\r\n        if (buyer_amount > 0)\r\n            if (!buyer.send(buyer_amount)) throw;\r\n        if (seller_amount > 0)\r\n            if (!seller.send(seller_amount)) throw;\r\n        if (escrow_amount > 0)\r\n            if (!escrow.send(escrow_amount)) throw;\r\n        if (tip_amount > 0)\r\n            if (!developer.send(tip_amount)) throw;\r\n        status = state.Closed;\r\n        CurrentStatus(uint8(status));\r\n    }\r\n\r\n    // FIFTY FIFTY\r\n    function fifty_fifty()\r\n        public\r\n        only_when(state.Dispute)\r\n        only_buyer_seller()\r\n        only_no_value()\r\n        check_mutex()\r\n    {\r\n        if (block.timestamp < dispute_end) throw;\r\n        uint256 buyer_amount = uint256(amount * 50)/100;\r\n        uint256 seller_amount = amount - buyer_amount;\r\n        buyer_amount = buyer_amount + fee;\r\n        if (buyer_amount > 0)\r\n            if (!buyer.send(buyer_amount)) throw;\r\n        if (seller_amount > 0)\r\n            if (!seller.send(seller_amount)) throw;\r\n        if (tip > 0)\r\n            if (!developer.send(tip)) throw;\r\n        status = state.Closed;\r\n        CurrentStatus(uint8(status));\r\n    }\r\n    \r\n    // DEFAULT FUNCTION\r\n    function()\r\n        public\r\n        only_before(state.Closed)\r\n        check_mutex()\r\n    {\r\n        if (status == state.Funding) {\r\n            if (this.balance >= (amount + fee + tip)) {\r\n                status = state.Paid;\r\n                CurrentStatus(uint8(status));\r\n            }\r\n        }\r\n        if (status >= state.Paid) tip = this.balance - (amount + fee);\r\n    }\r\n    \r\n}\r\n\r\n\r\ncontract EscrowFoundry {\r\n    \r\n    // PRIVATE VARIABLES\r\n    address private developer;\r\n    \r\n    // EVENTS\r\n    event NewContract(address a);\r\n    \r\n    // CONSTRUCTOR\r\n    function EscrowFoundry() \r\n        private\r\n    {\r\n        developer = msg.sender;\r\n    }\r\n    \r\n    // MODIFIERS\r\n    modifier only_no_value() {\r\n        if (msg.value != 0)  throw;\r\n        _\r\n    }\r\n\r\n    // VALIDATE PERCENT\r\n    function validate_percent(uint8 val)\r\n        private\r\n        constant\r\n    {\r\n        if (val > 100) throw;\r\n    }\r\n    \r\n    // CREATE\r\n    function create(address _buyer, address _seller, address _escrow, uint256 _amount, uint8 _percent_fee, uint8 _percent_tip, uint256 _dispute_limit)\r\n        public\r\n        constant\r\n        only_no_value()\r\n        returns (address)\r\n    {\r\n        validate_percent(_percent_fee);\r\n        validate_percent(_percent_tip);\r\n        uint256 fee = uint256(_amount * _percent_fee)/100;\r\n        uint256 tip = uint256(_amount * _percent_tip)/100;\r\n        EscrowContract c = new EscrowContract(developer, _buyer, _seller, _escrow, _amount, fee, tip, _dispute_limit);\r\n        NewContract(c);\r\n        return c;\r\n    }\r\n    \r\n    // DEFAULT FUNCTION\r\n    function()\r\n        public\r\n    {\r\n        throw;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_buyer\",\"type\":\"address\"},{\"name\":\"_seller\",\"type\":\"address\"},{\"name\":\"_escrow\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_percent_fee\",\"type\":\"uint8\"},{\"name\":\"_percent_tip\",\"type\":\"uint8\"},{\"name\":\"_dispute_limit\",\"type\":\"uint256\"}],\"name\":\"create\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"inputs\":[],\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"a\",\"type\":\"address\"}],\"name\":\"NewContract\",\"type\":\"event\"}]","ContractName":"EscrowFoundry","CompilerVersion":"v0.3.5-2016-07-01-48238c9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}