{"status":"1","message":"OK","result":[{"SourceCode":"// This MasterRegistry keeps a list of all registries created using Regis.\r\n// From it, you can search registries by its name, tags or owner and retrieve\r\n// registries info.\r\n\r\ncontract MasterRegistry {\r\n\r\n    // This struct keeps a list of attributes that all registries have.\r\n    struct RegistryAttributes {\r\n        uint      creationTime;\r\n        string    description;\r\n        address   owner;\r\n        string    name;\r\n        bytes32[] tags;\r\n        uint      version; // To keep backward compatibility\r\n        uint      addressIndex; // Index in the addresses array for quick lookup.\r\n\r\n        // Keeps the solidity source of the registry\r\n        // Storing the source on the blockchain is expensive but it is worth it. \r\n        // Previous version didn't store and was able to rebuild the registry\r\n        // source from its parameters. But this showed to be problematic in \r\n        // some cases.\r\n        string source; \r\n        // To keep backward compatibility with version 1, source will have \r\n        // keyType and recordAttributes stored in the source variable and the\r\n        // solidity source for those old registries will be unavailable.\r\n    }\r\n\r\n    // Maps registry's address to its record.\r\n    mapping (address => RegistryAttributes) public registries;\r\n    uint public numRegistries;\r\n\r\n    // Keeps a list of all registries' addresses\r\n    address[] public addresses;\r\n\r\n    // maps owner -> list of registries' addresses\r\n    mapping (address => address[]) public indexedByOwner;\r\n\r\n    // maps tag -> list of registries' addresses\r\n    mapping (bytes32 => address[]) public indexedByTag;\r\n\r\n    // maps name -> list of registries' addresses\r\n    mapping (string => address[]) indexedByName; // cant use public here because it's indexed by string\r\n\r\n    modifier onlyOwner(address regAddress) {\r\n        if (registries[regAddress].owner != msg.sender) throw;\r\n        _\r\n    }\r\n\r\n    function addRegistryIntoOwnerIndex(address regAddress, address owner) internal {\r\n        address[] regs = indexedByOwner[owner];\r\n        regs.length++;\r\n        regs[regs.length - 1] = regAddress;\r\n    }\r\n\r\n    function addRegistryIntoNameIndex(address regAddress) internal {\r\n        address[] regs = indexedByName[registries[regAddress].name];\r\n        regs.length++;\r\n        regs[regs.length - 1] = regAddress;\r\n    }\r\n\r\n    function addRegistryIntoTagsIndex(address regAddress) internal {\r\n        bytes32[] tags = registries[regAddress].tags;\r\n        for (uint i = 0; i < tags.length; i++) {\r\n            address[] regs = indexedByTag[tags[i]];\r\n            regs.length++;\r\n            regs[regs.length - 1] = regAddress;\r\n        }\r\n    }\r\n\r\n    function register(address regAddress, address owner, string name, string description, \r\n                      bytes32[] tags, uint version, string source) {\r\n\r\n        if (registries[regAddress].creationTime != 0) {\r\n            // throw;\r\n            return;\r\n        }\r\n\r\n        registries[regAddress].creationTime = now;\r\n        //registries[regAddress].owner        = msg.sender;\r\n        registries[regAddress].owner        = owner;\r\n        registries[regAddress].description  = description;\r\n        registries[regAddress].name         = name;\r\n        registries[regAddress].version      = version;\r\n        registries[regAddress].tags         = tags;\r\n        registries[regAddress].source       = source;\r\n        registries[regAddress].addressIndex = numRegistries;\r\n        numRegistries++;\r\n\r\n        addresses.length++;\r\n        addresses[numRegistries - 1] = regAddress;\r\n\r\n        addRegistryIntoOwnerIndex(regAddress, owner);\r\n\r\n        addRegistryIntoNameIndex(regAddress);\r\n\r\n        addRegistryIntoTagsIndex(regAddress);\r\n\r\n    }\r\n\r\n    function removeRegistryFromOwnerIndex(address regAddress) internal {\r\n        address[] regs = indexedByOwner[msg.sender];\r\n        for (uint i = 0; i < regs.length; i++) {\r\n            if (regs[i] == regAddress) {\r\n                regs[i] = regs[regs.length - 1];\r\n                regs.length--;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function removeRegistryFromNameIndex(address regAddress) internal {\r\n        address[] regs = indexedByName[registries[regAddress].name];\r\n        for (uint j = 0; j < regs.length; j++) {\r\n            if (regs[j] == regAddress) {\r\n                regs[j] = regs[regs.length - 1];\r\n                regs.length--;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function removeRegistryFromTagsIndex(address regAddress) internal {\r\n        uint numTags = registries[regAddress].tags.length;\r\n        for (uint k = 0; k < numTags; k++) {\r\n            address[] regs = indexedByTag[registries[regAddress].tags[k]];\r\n            for (uint l = 0; l < regs.length; l++) {\r\n                if (regs[l] == regAddress) {\r\n                    regs[l] = regs[regs.length - 1];\r\n                    regs.length--;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function unregister(address regAddress) onlyOwner(regAddress) {\r\n\r\n        removeRegistryFromOwnerIndex(regAddress);\r\n        removeRegistryFromNameIndex(regAddress);\r\n        removeRegistryFromTagsIndex(regAddress);\r\n\r\n        addresses[registries[regAddress].addressIndex] = addresses[addresses.length - 1];\r\n        addresses.length--;\r\n\r\n        delete registries[regAddress];\r\n        numRegistries--;\r\n    }\r\n\r\n    function changeDescription(address regAddress, string newDescription) onlyOwner(regAddress) {\r\n        registries[regAddress].description = newDescription;\r\n    }\r\n\r\n    function changeName(address regAddress, string newName) onlyOwner(regAddress) {\r\n        removeRegistryFromNameIndex(regAddress);\r\n        registries[regAddress].name = newName;\r\n        addRegistryIntoNameIndex(regAddress);\r\n    }\r\n\r\n    function transfer(address regAddress, address newOwner) onlyOwner(regAddress) {\r\n        removeRegistryFromOwnerIndex(regAddress);\r\n        registries[regAddress].owner = newOwner;\r\n        addRegistryIntoOwnerIndex(regAddress, newOwner);\r\n    }\r\n\r\n    function searchByName(string name) constant returns (address[]) {\r\n        return indexedByName[name];\r\n    }\r\n\r\n    function searchByTag(bytes32 tag) constant returns (address[]) {\r\n        return indexedByTag[tag];\r\n    }\r\n\r\n    function searchByOwner(address owner) constant returns (address[]) {\r\n        return indexedByOwner[owner];\r\n    }\r\n\r\n    function getRegInfo(address regAddress) constant returns (address owner, uint creationTime, \r\n                        string name, string description, uint version, bytes32[] tags, string source) {\r\n        owner        = registries[regAddress].owner;\r\n        creationTime = registries[regAddress].creationTime;\r\n        name         = registries[regAddress].name;\r\n        description  = registries[regAddress].description;\r\n        version      = registries[regAddress].version;\r\n        tags         = registries[regAddress].tags;\r\n        source       = registries[regAddress].source;\r\n    }\r\n\r\n    // This function is only valid for a very small amount of time\r\n    // after which it will become useless!\r\n    // It was used to migrate registries from old MasterRegistry\r\n    // into this new one and fix old registries creation_time (which\r\n    // are now inside the registry itself).\r\n    function setTime(address regAddress, uint time) {\r\n        if (now < 1469830946) { // Valid up to 29-Jul-2016 19:22:26\r\n            registries[regAddress].creationTime = time;\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"regAddress\",\"type\":\"address\"},{\"name\":\"newDescription\",\"type\":\"string\"}],\"name\":\"changeDescription\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"regAddress\",\"type\":\"address\"}],\"name\":\"unregister\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"searchByOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"regAddress\",\"type\":\"address\"},{\"name\":\"newName\",\"type\":\"string\"}],\"name\":\"changeName\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"indexedByTag\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"regAddress\",\"type\":\"address\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"tags\",\"type\":\"bytes32[]\"},{\"name\":\"version\",\"type\":\"uint256\"},{\"name\":\"source\",\"type\":\"string\"}],\"name\":\"register\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"regAddress\",\"type\":\"address\"},{\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setTime\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"regAddress\",\"type\":\"address\"}],\"name\":\"getRegInfo\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"creationTime\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"version\",\"type\":\"uint256\"},{\"name\":\"tags\",\"type\":\"bytes32[]\"},{\"name\":\"source\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"regAddress\",\"type\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transfer\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"indexedByOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tag\",\"type\":\"bytes32\"}],\"name\":\"searchByTag\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"registries\",\"outputs\":[{\"name\":\"creationTime\",\"type\":\"uint256\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"version\",\"type\":\"uint256\"},{\"name\":\"addressIndex\",\"type\":\"uint256\"},{\"name\":\"source\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numRegistries\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"}],\"name\":\"searchByName\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"}]","ContractName":"MasterRegistry","CompilerVersion":"v0.3.5-2016-07-21-6610add","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}