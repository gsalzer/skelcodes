{"status":"1","message":"OK","result":[{"SourceCode":"contract DaoAccount\r\n{\r\n\t/**************************\r\n\t\t\t    Constants\r\n\t***************************/\r\n\r\n\t/**************************\r\n\t\t\t\t\tEvents\r\n\t***************************/\r\n\r\n\t// No events\r\n\r\n\t/**************************\r\n\t     Public variables\r\n\t***************************/\r\n\r\n\r\n\t/**************************\r\n\t     Private variables\r\n\t***************************/\r\n\r\n\tuint256 tokenBalance; // number of tokens in this account\r\n  address owner;        // owner of the otkens\r\n\taddress daoChallenge; // the DaoChallenge this account belongs to\r\n\tuint256 tokenPrice;\r\n\r\n  // Owner of the challenge with backdoor access.\r\n  // Remove for a real DAO contract:\r\n  address challengeOwner;\r\n\r\n\t/**************************\r\n\t\t\t     Modifiers\r\n\t***************************/\r\n\r\n\tmodifier noEther() {if (msg.value > 0) throw; _}\r\n\r\n\tmodifier onlyOwner() {if (owner != msg.sender) throw; _}\r\n\r\n\tmodifier onlyDaoChallenge() {if (daoChallenge != msg.sender) throw; _}\r\n\r\n\tmodifier onlyChallengeOwner() {if (challengeOwner != msg.sender) throw; _}\r\n\r\n\t/**************************\r\n\t Constructor and fallback\r\n\t**************************/\r\n\r\n  function DaoAccount (address _owner, uint256 _tokenPrice, address _challengeOwner) noEther {\r\n    owner = _owner;\r\n\t\ttokenPrice = _tokenPrice;\r\n    daoChallenge = msg.sender;\r\n\t\ttokenBalance = 0;\r\n\r\n    // Remove for a real DAO contract:\r\n    challengeOwner = _challengeOwner;\r\n\t}\r\n\r\n\tfunction () {\r\n\t\tthrow;\r\n\t}\r\n\r\n\t/**************************\r\n\t     Private functions\r\n\t***************************/\r\n\r\n\t/**************************\r\n\t\t\t Public functions\r\n\t***************************/\r\n\r\n\tfunction getTokenBalance() constant returns (uint256 tokens) {\r\n\t\treturn tokenBalance;\r\n\t}\r\n\r\n\tfunction buyTokens() onlyDaoChallenge returns (uint256 tokens) {\r\n\t\tuint256 amount = msg.value;\r\n\r\n\t\t// No free tokens:\r\n\t\tif (amount == 0) throw;\r\n\r\n\t\t// No fractional tokens:\r\n\t\tif (amount % tokenPrice != 0) throw;\r\n\r\n\t\ttokens = amount / tokenPrice;\r\n\r\n\t\ttokenBalance += tokens;\r\n\r\n\t\treturn tokens;\r\n\t}\r\n\r\n\tfunction withdraw(uint256 tokens) noEther onlyDaoChallenge {\r\n\t\tif (tokens == 0 || tokenBalance == 0 || tokenBalance < tokens) throw;\r\n\t\ttokenBalance -= tokens;\r\n\t\tif(!owner.call.value(tokens * tokenPrice)()) throw;\r\n\t}\r\n\r\n\t// The owner of the challenge can terminate it. Don't use this in a real DAO.\r\n\tfunction terminate() noEther onlyChallengeOwner {\r\n\t\tsuicide(challengeOwner);\r\n\t}\r\n}\r\n\r\ncontract DaoChallenge\r\n{\r\n\t/**************************\r\n\t\t\t\t\tConstants\r\n\t***************************/\r\n\r\n\tuint256 constant public tokenPrice = 1000000000000000; // 1 finney\r\n\r\n\t/**************************\r\n\t\t\t\t\tEvents\r\n\t***************************/\r\n\r\n\tevent notifyTerminate(uint256 finalBalance);\r\n\r\n\tevent notifyNewAccount(address owner, address account);\r\n\tevent notifyBuyToken(address owner, uint256 tokens, uint256 price);\r\n\tevent notifyWithdraw(address owner, uint256 tokens);\r\n\r\n\t/**************************\r\n\t     Public variables\r\n\t***************************/\r\n\r\n\tmapping (address => DaoAccount) public daoAccounts;\r\n\r\n\t/**************************\r\n\t\t\t Private variables\r\n\t***************************/\r\n\r\n\t// Owner of the challenge; a real DAO doesn't an owner.\r\n\taddress challengeOwner;\r\n\r\n\t/**************************\r\n\t\t\t\t\t Modifiers\r\n\t***************************/\r\n\r\n\tmodifier noEther() {if (msg.value > 0) throw; _}\r\n\r\n\tmodifier onlyChallengeOwner() {if (challengeOwner != msg.sender) throw; _}\r\n\r\n\t/**************************\r\n\t Constructor and fallback\r\n\t**************************/\r\n\r\n\tfunction DaoChallenge () {\r\n\t\tchallengeOwner = msg.sender; // Owner of the challenge. Don't use this in a real DAO.\r\n\t}\r\n\r\n\tfunction () noEther {\r\n\t}\r\n\r\n\t/**************************\r\n\t     Private functions\r\n\t***************************/\r\n\r\n\tfunction accountFor (address accountOwner, bool createNew) private returns (DaoAccount) {\r\n\t\tDaoAccount account = daoAccounts[accountOwner];\r\n\r\n\t\tif(account == DaoAccount(0x00) && createNew) {\r\n\t\t\taccount = new DaoAccount(accountOwner, tokenPrice, challengeOwner);\r\n\t\t\tdaoAccounts[accountOwner] = account;\r\n\t\t\tnotifyNewAccount(accountOwner, address(account));\r\n\t\t}\r\n\r\n\t\treturn account;\r\n\t}\r\n\r\n\t/**************************\r\n\t     Public functions\r\n\t***************************/\r\n\r\n\tfunction getTokenBalance () constant noEther returns (uint256 tokens) {\r\n\t\tDaoAccount account = accountFor(msg.sender, false);\r\n\t\tif (account == DaoAccount(0x00)) return 0;\r\n\t\treturn account.getTokenBalance();\r\n\t}\r\n\r\n\tfunction buyTokens () returns (uint256 tokens) {\r\n\t  DaoAccount account = accountFor(msg.sender, true);\r\n\t\ttokens = account.buyTokens.value(msg.value)();\r\n\r\n\t\tnotifyBuyToken(msg.sender, tokens, msg.value);\r\n\t\treturn tokens;\r\n \t}\r\n\r\n\tfunction withdraw(uint256 tokens) noEther {\r\n\t\tDaoAccount account = accountFor(msg.sender, false);\r\n\t\tif (account == DaoAccount(0x00)) throw;\r\n\r\n\t\taccount.withdraw(tokens);\r\n\t\tnotifyWithdraw(msg.sender, tokens);\r\n\t}\r\n\r\n\t// The owner of the challenge can terminate it. Don't use this in a real DAO.\r\n\tfunction terminate() noEther onlyChallengeOwner {\r\n\t\tnotifyTerminate(this.balance);\r\n\t\tsuicide(challengeOwner);\r\n\t}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"terminate\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenBalance\",\"outputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"daoAccounts\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"inputs\":[],\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"notifyTerminate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"notifyNewAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"notifyBuyToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"notifyWithdraw\",\"type\":\"event\"}]","ContractName":"DaoChallenge","CompilerVersion":"v0.3.5-2016-07-21-6610add","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}