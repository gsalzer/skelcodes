{"status":"1","message":"OK","result":[{"SourceCode":"contract TheGame {\r\n    // Based on the open source castle script\r\n    // Definte the guy player\r\n    address public first_player;\r\n    // Last time someone contributed to the game\r\n    uint public regeneration;\r\n    // Define jackpot\r\n    uint public jackpot;\r\n\r\n    // Fees\r\n    uint public collectedFee;\r\n\r\n    // List of players who contributed\r\n    address[] public playersAddresses;\r\n    uint[] public playersAmounts;\r\n    uint32 public totalplayers;\r\n    uint32 public lastPlayerPaid;\r\n    // main Player who made the system work\r\n    address public mainPlayer;\r\n    // How many times the game stopped\r\n    uint32 public round;\r\n    // ETH paid in this round\r\n    uint public amountAlreadyPaidBack;\r\n    // ETH invested in this round\r\n    uint public amountInvested;\r\n\r\n    uint constant SIX_HOURS = 60 * 60 * 6;\r\n\r\n    function TheGame() {\r\n        // First game\r\n        mainPlayer = msg.sender;\r\n        first_player = msg.sender;\r\n        regeneration = block.timestamp;\r\n        amountAlreadyPaidBack = 0;\r\n        amountInvested = 0;\r\n        totalplayers = 0;\r\n    }\r\n\r\n    function contribute_toTheGame() returns(bool) {\r\n        uint amount = msg.value;\r\n        // Check if the minimum amount if reached\r\n        if (amount < 1 / 2 ether) {\r\n            msg.sender.send(msg.value);\r\n            return false;\r\n        }\r\n        // If the player sends more than 25 ETH it is returned to him\r\n        if (amount > 25 ether) {\r\n            msg.sender.send(msg.value - 25 ether);\r\n            amount = 25 ether;\r\n        }\r\n\r\n        // Check if the game is still on\r\n        if (regeneration + SIX_HOURS < block.timestamp) {\r\n            // Send the jacpot to the last 3 players\r\n            // If noone send ETH in the last 6 hours nothing happens\r\n            if (totalplayers == 1) {\r\n                // If only one person sent ETH in the last 6 hours he gets 100% of the jacpot\r\n                playersAddresses[playersAddresses.length - 1].send(jackpot);\r\n            } else if (totalplayers == 2) {\r\n                // If two players sent ETH the jacpot is split between them\r\n                playersAddresses[playersAddresses.length - 1].send(jackpot * 70 / 100);\r\n                playersAddresses[playersAddresses.length - 2].send(jackpot * 30 / 100);\r\n            } else if (totalplayers >= 3) {\r\n                // If there is 3 or more players\r\n                playersAddresses[playersAddresses.length - 1].send(jackpot * 70 / 100);\r\n                playersAddresses[playersAddresses.length - 2].send(jackpot * 20 / 100);\r\n                playersAddresses[playersAddresses.length - 3].send(jackpot * 10 / 100);\r\n            }\r\n\r\n            // Creation of new jackpot\r\n            jackpot = 0;\r\n\r\n            // Creation of new round of the game\r\n            first_player = msg.sender;\r\n            regeneration = block.timestamp;\r\n            playersAddresses.push(msg.sender);\r\n            playersAmounts.push(amount * 2);\r\n            totalplayers += 1;\r\n            amountInvested += amount;\r\n\r\n            // ETH sent to the jackpot\r\n            jackpot += amount;\r\n\r\n            // The player takes 3%\r\n            first_player.send(amount * 3 / 100);\r\n\r\n            // The Player takes 3%\r\n            collectedFee += amount * 3 / 100;\r\n\r\n            round += 1;\r\n        } else {\r\n            // The game is still on\r\n            regeneration = block.timestamp;\r\n            playersAddresses.push(msg.sender);\r\n            playersAmounts.push(amount * 2);\r\n            totalplayers += 1;\r\n            amountInvested += amount;\r\n\r\n            // 5% goes to the jackpot\r\n            jackpot += (amount * 5 / 100);\r\n\r\n            // The player takes 3%\r\n            first_player.send(amount * 3 / 100);\r\n\r\n            // The player takes 3%\r\n            collectedFee += amount * 3 / 100;\r\n\r\nwhile (playersAmounts[lastPlayerPaid] < (address(this).balance - jackpot - collectedFee) && lastPlayerPaid <= totalplayers) {\r\n                playersAddresses[lastPlayerPaid].send(playersAmounts[lastPlayerPaid]);\r\n                amountAlreadyPaidBack += playersAmounts[lastPlayerPaid];\r\n                lastPlayerPaid += 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    // fallback function\r\n    function() {\r\n        contribute_toTheGame();\r\n    }\r\n\r\n    // When the game stops\r\n    function restart() {\r\n        if (msg.sender == mainPlayer) {\r\n            mainPlayer.send(address(this).balance);\r\n            selfdestruct(mainPlayer);\r\n        }\r\n    }\r\n\r\n    // When the main player wants to transfer his function\r\n    function new_mainPlayer(address new_mainPlayer) {\r\n        if (msg.sender == mainPlayer) {\r\n            mainPlayer = new_mainPlayer;\r\n        }\r\n    }\r\n\r\n    // When the main Player decides to collect his fees\r\n    function collectFee() {\r\n        if (msg.sender == mainPlayer) {\r\n            mainPlayer.send(collectedFee);\r\n        }\r\n    }\r\n\r\n    // When the guy players wants to transfer his function\r\n    function newfirst_player(address newfirst_player) {\r\n        if (msg.sender == first_player) {\r\n            first_player = newfirst_player;\r\n        }\r\n    }       \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"round\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastPlayerPaid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalplayers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"restart\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"playersAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"first_player\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"regeneration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newfirst_player\",\"type\":\"address\"}],\"name\":\"newfirst_player\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"contribute_toTheGame\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_mainPlayer\",\"type\":\"address\"}],\"name\":\"new_mainPlayer\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"playersAmounts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mainPlayer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"collectFee\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountInvested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountAlreadyPaidBack\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collectedFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"inputs\":[],\"type\":\"constructor\"}]","ContractName":"TheGame","CompilerVersion":"v0.3.1-2016-04-05-12797ed","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}