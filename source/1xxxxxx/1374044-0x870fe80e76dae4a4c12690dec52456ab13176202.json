{"status":"1","message":"OK","result":[{"SourceCode":"contract ShinySquirrels {\r\n\r\n// all the things\r\nuint private minDeposit = 10 finney;\r\nuint private maxDeposit = 5 ether;\r\nuint private baseFee = 5;\r\nuint private baseMultiplier = 100;\r\nuint private maxMultiplier = 160;\r\nuint private currentPosition = 0;\r\nuint private balance = 0;\r\nuint private feeBalance = 0;\r\nuint private totalDeposits = 0;\r\nuint private totalPaid = 0;\r\nuint private totalSquirrels = 0;\r\nuint private totalShinyThings = 0;\r\nuint private totalSprockets = 0;\r\nuint private totalStars = 0;\r\nuint private totalHearts = 0;\r\nuint private totalSkips = 0;\r\naddress private owner = msg.sender;\r\n \r\nstruct PlayerEntry {\r\n    address addr;\r\n    uint deposit;\r\n    uint paid;\r\n    uint multiplier;\r\n    uint fee;\r\n    uint skip;\r\n    uint squirrels;\r\n    uint shinyThings;\r\n    uint sprockets;\r\n    uint stars;\r\n    uint hearts;\r\n}\r\n \r\nstruct PlayerStat {\r\n    address addr;\r\n    uint entries;\r\n    uint deposits;\r\n    uint paid;\r\n    uint skips;\r\n    uint squirrels;\r\n    uint shinyThings;\r\n    uint sprockets;\r\n    uint stars;\r\n    uint hearts;\r\n}\r\n\r\n// player entries in the order received\r\nPlayerEntry[] private players;\r\n\r\n// The Line of players, keeping track as new players cut in...\r\nuint[] theLine;\r\n\r\n// individual player totals\r\nmapping(address => PlayerStat) private playerStats;\r\n\r\n// Shiny new contract, no copy & paste here!\r\nfunction ShinySquirrels() {\r\n    owner = msg.sender;\r\n}\r\n \r\nfunction totals() constant returns(uint playerCount, uint currentPlaceInLine, uint playersWaiting, uint totalDepositsInFinneys, uint totalPaidOutInFinneys, uint squirrelFriends, uint shinyThingsFound, uint sprocketsCollected, uint starsWon, uint heartsEarned, uint balanceInFinneys, uint feeBalanceInFinneys) {\r\n    playerCount             = players.length;\r\n    currentPlaceInLine      = currentPosition;\r\n    playersWaiting          = waitingForPayout();\r\n    totalDepositsInFinneys  = totalDeposits / 1 finney;\r\n    totalPaidOutInFinneys   = totalPaid / 1 finney;\r\n    squirrelFriends         = totalSquirrels;\r\n    shinyThingsFound        = totalShinyThings;\r\n    sprocketsCollected      = totalSprockets;\r\n    starsWon                = totalStars;\r\n    heartsEarned            = totalHearts;\r\n    balanceInFinneys        = balance / 1 finney;\r\n    feeBalanceInFinneys     = feeBalance / 1 finney;\r\n}\r\n\r\nfunction settings() constant returns(uint minimumDepositInFinneys, uint maximumDepositInFinneys) {\r\n    minimumDepositInFinneys = minDeposit / 1 finney;\r\n    maximumDepositInFinneys = maxDeposit / 1 finney;\r\n}\r\n\r\nfunction playerByAddress(address addr) constant returns(uint entries, uint depositedInFinney, uint paidOutInFinney, uint skippedAhead, uint squirrels, uint shinyThings, uint sprockets, uint stars, uint hearts) {\r\n    entries          = playerStats[addr].entries;\r\n    depositedInFinney = playerStats[addr].deposits / 1 finney;\r\n    paidOutInFinney  = playerStats[addr].paid / 1 finney;\r\n    skippedAhead     = playerStats[addr].skips;\r\n    squirrels        = playerStats[addr].squirrels;\r\n    shinyThings      = playerStats[addr].shinyThings;\r\n    sprockets        = playerStats[addr].sprockets;\r\n    stars            = playerStats[addr].stars;\r\n    hearts           = playerStats[addr].hearts;\r\n}\r\n\r\n// current number of players still waiting for their payout\r\nfunction waitingForPayout() constant private returns(uint waiting) {\r\n    waiting = players.length - currentPosition;\r\n}\r\n\r\n// the total payout this entry in line will receive\r\nfunction entryPayout(uint index) constant private returns(uint payout) {\r\n    payout = players[theLine[index]].deposit * players[theLine[index]].multiplier / 100;\r\n}\r\n\r\n// the payout amount still due to this entry in line\r\nfunction entryPayoutDue(uint index) constant private returns(uint payoutDue) {\r\n    // subtract the amount they've been paid from the total they are to receive\r\n    payoutDue = entryPayout(index) - players[theLine[index]].paid;\r\n}\r\n \r\n// public interface to the line of players\r\nfunction lineOfPlayers(uint index) constant returns (address addr, uint orderJoined, uint depositInFinney, uint payoutInFinney, uint multiplierPercent, uint paid, uint skippedAhead, uint squirrels, uint shinyThings, uint sprockets, uint stars, uint hearts) {\r\n    PlayerEntry player = players[theLine[index]];\r\n    addr              = player.addr;\r\n    orderJoined       = theLine[index];\r\n    depositInFinney   = player.deposit / 1 finney;\r\n    payoutInFinney    = depositInFinney * player.multiplier / 100;\r\n    multiplierPercent = player.multiplier;\r\n    paid              = player.paid / 1 finney;\r\n    skippedAhead      = player.skip;\r\n    squirrels         = player.squirrels;\r\n    shinyThings       = player.shinyThings;\r\n    sprockets         = player.sprockets;\r\n    stars             = player.stars;\r\n    hearts            = player.hearts;\r\n}\r\n\r\nfunction () {\r\n    play();\r\n}\r\n \r\nfunction play() {\r\n    uint deposit = msg.value; // in wei\r\n     \r\n    // validate deposit is in range\r\n    if(deposit < minDeposit || deposit > maxDeposit) {\r\n        msg.sender.send(deposit);\r\n        return;\r\n    }\r\n     \r\n    uint multiplier  = baseMultiplier; // percent\r\n    uint fee         = baseFee; // percent\r\n    uint skip        = 0;\r\n    uint squirrels   = 0;\r\n    uint shinyThings = 0;\r\n    uint sprockets   = 0;\r\n    uint stars       = 0;\r\n    uint hearts      = 0;\r\n     \r\n    if(players.length % 5 == 0) {\r\n        multiplier += 2;\r\n        fee        += 1;\r\n        stars      += 1;\r\n         \r\n        if(deposit < 1 ether) {\r\n            multiplier  -= multiplier >= 7 ? 7 : multiplier;\r\n            fee         -= fee        >= 1 ? 1 : 0;\r\n            shinyThings += 1;\r\n        }\r\n        if(deposit >= 1 && waitingForPayout() >= 10) {\r\n            // at least 10 players waiting\r\n            skip += 4;\r\n            fee  += 3;\r\n        }\r\n        if(deposit >= 2 ether && deposit <= 3 ether) {\r\n            multiplier += 3;\r\n            fee        += 2;\r\n            hearts     += 1;\r\n        }\r\n        if(deposit >= 3 ether) {\r\n            stars += 1;\r\n        }\r\n\r\n    } else if (players.length % 5 == 1) {\r\n        multiplier += 4;\r\n        fee        += 2;\r\n        squirrels  += 1;\r\n\r\n        if(deposit < 1 ether) {\r\n            multiplier += 6;\r\n            fee        += 3;\r\n            squirrels  += 1;\r\n        }\r\n        if(deposit >= 2 ether) {\r\n            if(waitingForPayout() >= 20) {\r\n                // at least 20 players waiting\r\n                skip        += waitingForPayout() / 2; // skip half of them\r\n                fee         += 2;\r\n                shinyThings += 1;\r\n            } \r\n\r\n            multiplier += 4;\r\n            fee        += 4;\r\n            hearts     += 1;\r\n        }\r\n        if(deposit >= 4 ether) {\r\n            multiplier += 1;\r\n            fee       -= fee >= 1 ? 1 : 0;\r\n            skip      += 1;\r\n            hearts    += 1;\r\n            stars     += 1;\r\n        }\r\n\r\n    } else if (players.length % 5 == 2) {\r\n        multiplier += 7;\r\n        fee        += 6;\r\n        sprockets  += 1;\r\n         \r\n        if(waitingForPayout() >= 10) {\r\n            // at least 10 players waiting\r\n            multiplier -= multiplier >= 8 ? 8 : multiplier;\r\n            fee        -= fee >= 1 ? 1 : 0;\r\n            skip       += 1;\r\n            squirrels  += 1;\r\n        }\r\n        if(deposit >= 3 ether) {\r\n            multiplier  += 2;\r\n            skip        += 1;\r\n            stars       += 1;\r\n            shinyThings += 1;\r\n        }\r\n        if(deposit == maxDeposit) {\r\n            multiplier += 2;\r\n            skip       += 1;\r\n            hearts     += 1;\r\n            squirrels  += 1;\r\n        }\r\n     \r\n    } else if (players.length % 5 == 3) {\r\n        multiplier  -= multiplier >= 5 ? 5 : multiplier; // on noes!\r\n        fee         += 0;\r\n        skip        += 3; // oh yay!\r\n        shinyThings += 1;\r\n         \r\n        if(deposit < 1 ether) {\r\n            multiplier -= multiplier >= 5 ? 5 : multiplier;\r\n            fee        += 2;\r\n            skip       += 5;\r\n            squirrels  += 1;\r\n        }\r\n        if(deposit == 1 ether) {\r\n            multiplier += 10;\r\n            fee        += 4;\r\n            skip       += 2;\r\n            hearts     += 1;\r\n        }\r\n        if(deposit == maxDeposit) {\r\n            multiplier += 1;\r\n            fee       += 5;\r\n            skip      += 1;\r\n            sprockets += 1;\r\n            stars     += 1;\r\n            hearts    += 1;\r\n        }\r\n     \r\n    } else if (players.length % 5 == 4) {\r\n        multiplier += 2;\r\n        fee        -= fee >= 1 ? 1 : fee;\r\n        squirrels  += 1;\r\n         \r\n        if(deposit < 1 ether) {\r\n            multiplier += 3;\r\n            fee        += 2;\r\n            skip       += 3;\r\n        }\r\n        if(deposit >= 2 ether) {\r\n            multiplier += 2;\r\n            fee        += 2;\r\n            skip       += 1;\r\n            stars      += 1;\r\n        }\r\n        if(deposit == maxDeposit/2) {\r\n            multiplier  += 2;\r\n            fee         += 5;\r\n            skip        += 3;\r\n            shinyThings += 1;\r\n            sprockets   += 1;\r\n        }\r\n        if(deposit >= 3 ether) {\r\n            multiplier += 1;\r\n            fee        += 1;\r\n            skip       += 1;\r\n            sprockets  += 1;\r\n            hearts     += 1;\r\n        }\r\n    }\r\n\r\n    // track the accumulated bonus goodies!\r\n    playerStats[msg.sender].hearts      += hearts;\r\n    playerStats[msg.sender].stars       += stars;\r\n    playerStats[msg.sender].squirrels   += squirrels;\r\n    playerStats[msg.sender].shinyThings += shinyThings;\r\n    playerStats[msg.sender].sprockets   += sprockets;\r\n    \r\n    // track cummulative awarded goodies\r\n    totalHearts      += hearts;\r\n    totalStars       += stars;\r\n    totalSquirrels   += squirrels;\r\n    totalShinyThings += shinyThings;\r\n    totalSprockets   += sprockets;\r\n\r\n    // got squirrels? skip in front of that many players!\r\n    skip += playerStats[msg.sender].squirrels;\r\n     \r\n    // one squirrel ran away!\r\n    playerStats[msg.sender].squirrels -= playerStats[msg.sender].squirrels >= 1 ? 1 : 0;\r\n     \r\n    // got stars? 2% multiplier bonus for every star!\r\n    multiplier += playerStats[msg.sender].stars * 2;\r\n     \r\n    // got hearts? -2% fee for every heart!\r\n    fee -= playerStats[msg.sender].hearts;\r\n     \r\n    // got sprockets? 1% multiplier bonus and -1% fee for every sprocket!\r\n    multiplier += playerStats[msg.sender].sprockets;\r\n    fee        -= fee > playerStats[msg.sender].sprockets ? playerStats[msg.sender].sprockets : fee;\r\n     \r\n    // got shiny things? skip 1 more player and -1% fee!\r\n    if(playerStats[msg.sender].shinyThings >= 1) {\r\n        skip += 1;\r\n        fee  -= fee >= 1 ? 1 : 0;\r\n    }\r\n     \r\n    // got a heart, star, squirrel, shiny thin, and sprocket?!? 50% bonus multiplier!!!\r\n    if(playerStats[msg.sender].hearts >= 1 && playerStats[msg.sender].stars >= 1 && playerStats[msg.sender].squirrels >= 1 && playerStats[msg.sender].shinyThings >= 1 && playerStats[msg.sender].sprockets >= 1) {\r\n        multiplier += 30;\r\n    }\r\n     \r\n    // got a heart and a star? trade them for +20% multiplier!!!\r\n    if(playerStats[msg.sender].hearts >= 1 && playerStats[msg.sender].stars >= 1) {\r\n        multiplier                     += 15;\r\n        playerStats[msg.sender].hearts -= 1;\r\n        playerStats[msg.sender].stars  -= 1;\r\n    }\r\n     \r\n    // got a sprocket and a shiny thing? trade them for 5 squirrels!\r\n    if(playerStats[msg.sender].sprockets >= 1 && playerStats[msg.sender].shinyThings >= 1) {\r\n        playerStats[msg.sender].squirrels   += 5;\r\n        playerStats[msg.sender].sprockets   -= 1;\r\n        playerStats[msg.sender].shinyThings -= 1;\r\n    }\r\n\r\n    // stay within profitable and safe limits\r\n    if(multiplier > maxMultiplier) {\r\n        multiplier == maxMultiplier;\r\n    }\r\n    \r\n    // keep power players in check so regular players can still win some too\r\n    if(waitingForPayout() > 15 && skip > waitingForPayout()/2) {\r\n        // limit skip to half of waiting players\r\n        skip = waitingForPayout() / 2;\r\n    }\r\n\r\n    // ledgers within ledgers     \r\n    feeBalance += deposit * fee / 100;\r\n    balance    += deposit - deposit * fee / 100;\r\n    totalDeposits += deposit;\r\n\r\n    // prepare players array for a new entry    \r\n    uint playerIndex = players.length;\r\n    players.length += 1;\r\n\r\n    // make room in The Line for one more\r\n    uint lineIndex = theLine.length;\r\n    theLine.length += 1;\r\n\r\n    // skip ahead if you should be so lucky!\r\n    (skip, lineIndex) = skipInLine(skip, lineIndex);\r\n\r\n    // record the players entry\r\n    players[playerIndex].addr        = msg.sender;\r\n    players[playerIndex].deposit     = deposit;\r\n    players[playerIndex].multiplier  = multiplier;\r\n    players[playerIndex].fee         = fee;\r\n    players[playerIndex].squirrels   = squirrels;\r\n    players[playerIndex].shinyThings = shinyThings;\r\n    players[playerIndex].sprockets   = sprockets;\r\n    players[playerIndex].stars       = stars;\r\n    players[playerIndex].hearts      = hearts;\r\n    players[playerIndex].skip        = skip;\r\n    \r\n    // add the player to The Line at whatever position they snuck in at    \r\n    theLine[lineIndex] = playerIndex;\r\n\r\n    // track players cumulative stats\r\n    playerStats[msg.sender].entries  += 1;\r\n    playerStats[msg.sender].deposits += deposit;\r\n    playerStats[msg.sender].skips    += skip;\r\n    \r\n    // track total game skips\r\n    totalSkips += skip;\r\n    \r\n    // issue payouts while the balance allows\r\n    // rolling payouts occur as long as the balance is above zero\r\n    uint nextPayout = entryPayoutDue(currentPosition);\r\n    uint payout;\r\n    while(balance > 0) {\r\n        if(nextPayout <= balance) {\r\n            // the balance is great enough to pay the entire next balance due\r\n            // pay the balance due\r\n            payout = nextPayout;\r\n        } else {\r\n            // the balance is above zero, but less than the next balance due\r\n            // send them everything available\r\n            payout = balance;\r\n        }\r\n        // issue the payment\r\n        players[theLine[currentPosition]].addr.send(payout);\r\n        // mark the amount paid\r\n        players[theLine[currentPosition]].paid += payout;\r\n        // keep a global tally\r\n        playerStats[players[theLine[currentPosition]].addr].paid += payout;\r\n        balance    -= payout;\r\n        totalPaid  += payout;\r\n        // move to the next position in line if the last entry got paid out completely\r\n        if(balance > 0) {\r\n            currentPosition++;\r\n            nextPayout = entryPayoutDue(currentPosition);\r\n        }\r\n    }\r\n}\r\n \r\n// jump in line, moving entries back towards the end one at a time\r\n// presumes the line length has already been increased to accomodate the newcomer\r\n// return the the number of positions skipped and the index of the vacant position in line\r\nfunction skipInLine(uint skip, uint currentLineIndex) private returns (uint skipped, uint newLineIndex) {\r\n    // check for at least 1 player in line plus this new entry\r\n    if(skip > 0 && waitingForPayout() > 2) {\r\n        // -2 because we don't want to count the new empty slot at the end of the list\r\n        if(skip > waitingForPayout()-2) {\r\n            skip = waitingForPayout()-2;\r\n        }\r\n\r\n        // move entries forward one by one\r\n        uint i = 0;\r\n        while(i < skip) {\r\n            theLine[currentLineIndex-i] = theLine[currentLineIndex-1-i];\r\n            i++;\r\n        }\r\n        \r\n        // don't leave a duplicate copy of the last entry processed\r\n        delete(theLine[currentLineIndex-i]);\r\n        \r\n        // the newly vacant position is i slots from the end\r\n        newLineIndex = currentLineIndex-i;\r\n    } else {\r\n        // no change\r\n        newLineIndex = currentLineIndex;\r\n        skip = 0;\r\n    }\r\n    skipped = skip;\r\n}\r\n\r\nfunction DynamicPyramid() {\r\n    // Rubixi god-code, j/k :-P\r\n    playerStats[msg.sender].squirrels    = 0;\r\n    playerStats[msg.sender].shinyThings  = 0;\r\n    playerStats[msg.sender].sprockets    = 0;\r\n    playerStats[msg.sender].stars        = 0;\r\n    playerStats[msg.sender].hearts       = 0;\r\n}\r\n \r\nfunction collectFees() {\r\n    if(msg.sender != owner) {\r\n        throw;\r\n    }\r\n    // game balance will always be zero due to automatic rolling payouts\r\n    if(address(this).balance > balance + feeBalance) {\r\n        // collect any funds outside of the game balance\r\n        feeBalance = address(this).balance - balance;\r\n    }\r\n    owner.send(feeBalance);\r\n    feeBalance = 0;\r\n}\r\n\r\nfunction updateSettings(uint newMultiplier, uint newMaxMultiplier, uint newFee, uint newMinDeposit, uint newMaxDeposit, bool collect) {\r\n    // adjust the base settings within a small and limited range as the game matures and ether prices change\r\n    if(msg.sender != owner) throw;\r\n    if(newMultiplier < 80 || newMultiplier > 120) throw;\r\n    if(maxMultiplier < 125 || maxMultiplier > 200) throw;\r\n    if(newFee < 0 || newFee > 15) throw;\r\n    if(minDeposit < 1 finney || minDeposit > 1 ether) throw;\r\n    if(maxDeposit < 1 finney || maxDeposit > 25 ether) throw;\r\n    if(collect) collectFees();\r\n    baseMultiplier = newMultiplier;\r\n    maxMultiplier = newMaxMultiplier;\r\n    baseFee = newFee;\r\n    minDeposit = newMinDeposit;\r\n    maxDeposit = newMaxDeposit;\r\n}\r\n\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newMultiplier\",\"type\":\"uint256\"},{\"name\":\"newMaxMultiplier\",\"type\":\"uint256\"},{\"name\":\"newFee\",\"type\":\"uint256\"},{\"name\":\"newMinDeposit\",\"type\":\"uint256\"},{\"name\":\"newMaxDeposit\",\"type\":\"uint256\"},{\"name\":\"collect\",\"type\":\"bool\"}],\"name\":\"updateSettings\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"DynamicPyramid\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"play\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"lineOfPlayers\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"orderJoined\",\"type\":\"uint256\"},{\"name\":\"depositInFinney\",\"type\":\"uint256\"},{\"name\":\"payoutInFinney\",\"type\":\"uint256\"},{\"name\":\"multiplierPercent\",\"type\":\"uint256\"},{\"name\":\"paid\",\"type\":\"uint256\"},{\"name\":\"skippedAhead\",\"type\":\"uint256\"},{\"name\":\"squirrels\",\"type\":\"uint256\"},{\"name\":\"shinyThings\",\"type\":\"uint256\"},{\"name\":\"sprockets\",\"type\":\"uint256\"},{\"name\":\"stars\",\"type\":\"uint256\"},{\"name\":\"hearts\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totals\",\"outputs\":[{\"name\":\"playerCount\",\"type\":\"uint256\"},{\"name\":\"currentPlaceInLine\",\"type\":\"uint256\"},{\"name\":\"playersWaiting\",\"type\":\"uint256\"},{\"name\":\"totalDepositsInFinneys\",\"type\":\"uint256\"},{\"name\":\"totalPaidOutInFinneys\",\"type\":\"uint256\"},{\"name\":\"squirrelFriends\",\"type\":\"uint256\"},{\"name\":\"shinyThingsFound\",\"type\":\"uint256\"},{\"name\":\"sprocketsCollected\",\"type\":\"uint256\"},{\"name\":\"starsWon\",\"type\":\"uint256\"},{\"name\":\"heartsEarned\",\"type\":\"uint256\"},{\"name\":\"balanceInFinneys\",\"type\":\"uint256\"},{\"name\":\"feeBalanceInFinneys\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"collectFees\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"playerByAddress\",\"outputs\":[{\"name\":\"entries\",\"type\":\"uint256\"},{\"name\":\"depositedInFinney\",\"type\":\"uint256\"},{\"name\":\"paidOutInFinney\",\"type\":\"uint256\"},{\"name\":\"skippedAhead\",\"type\":\"uint256\"},{\"name\":\"squirrels\",\"type\":\"uint256\"},{\"name\":\"shinyThings\",\"type\":\"uint256\"},{\"name\":\"sprockets\",\"type\":\"uint256\"},{\"name\":\"stars\",\"type\":\"uint256\"},{\"name\":\"hearts\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"settings\",\"outputs\":[{\"name\":\"minimumDepositInFinneys\",\"type\":\"uint256\"},{\"name\":\"maximumDepositInFinneys\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"inputs\":[],\"type\":\"constructor\"}]","ContractName":"ShinySquirrels","CompilerVersion":"v0.3.1-2016-04-12-3ad5e82","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}