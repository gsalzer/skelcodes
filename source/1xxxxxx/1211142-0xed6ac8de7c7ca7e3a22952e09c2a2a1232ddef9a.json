{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n\r\nVerification submitted to etherscan.io by Noel Maersk\r\nSource with full comments: https://gist.github.com/alexvandesande/3abc9f741471e08a6356#file-unicorn-meat-token\r\n\r\n*/\r\n\r\n    contract owned {\r\n        address public owner;\r\n\r\n        function owned() {\r\n            owner = msg.sender;\r\n        }\r\n\r\n        modifier onlyOwner {\r\n            if (msg.sender != owner) throw;\r\n            _\r\n        }\r\n\r\n        function transferOwnership(address newOwner) onlyOwner {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n    \r\n    contract tokenRecipient { \r\n        function receiveApproval(address _from, uint256 _value, address _token); \r\n    }\r\n\r\n    contract MyToken is owned { \r\n        /* Public variables of the token */\r\n        string public name;\r\n        string public symbol;\r\n        uint8 public decimals;\r\n        uint256 public totalSupply;\r\n\r\n        /* This creates an array with all balances */\r\n        mapping (address => uint256) public balanceOf;\r\n        mapping (address => bool) public frozenAccount; \r\n        mapping (address => mapping (address => uint256)) public allowance;\r\n        mapping (address => mapping (address => uint256)) public spentAllowance;\r\n\r\n        /* This generates a public event on the blockchain that will notify clients */\r\n        event Transfer(address indexed from, address indexed to, uint256 value);\r\n        event FrozenFunds(address target, bool frozen);\r\n\r\n        /* Initializes contract with initial supply tokens to the creator of the contract */\r\n        function MyToken(\r\n            uint256 initialSupply, \r\n            string tokenName, \r\n            uint8 decimalUnits, \r\n            string tokenSymbol, \r\n            address centralMinter \r\n        ) { \r\n            if(centralMinter != 0 ) owner = msg.sender;         // Sets the minter\r\n            balanceOf[msg.sender] = initialSupply;              // Give the creator all initial tokens                    \r\n            name = tokenName;                                   // Set the name for display purposes     \r\n            symbol = tokenSymbol;                               // Set the symbol for display purposes    \r\n            decimals = decimalUnits;                            // Amount of decimals for display purposes\r\n            totalSupply = initialSupply; \r\n        }\r\n\r\n        /* Send coins */\r\n        function transfer(address _to, uint256 _value) {\r\n            if (balanceOf[msg.sender] < _value) throw;           // Check if the sender has enough   \r\n            if (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows\r\n            if (frozenAccount[msg.sender]) throw;                // Check if frozen\r\n            balanceOf[msg.sender] -= _value;                     // Subtract from the sender\r\n            balanceOf[_to] += _value;                            // Add the same to the recipient            \r\n            Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\r\n        }\r\n\r\n        /* Allow another contract to spend some tokens in your behalf */\r\n        function approveAndCall(address _spender, uint256 _value) returns (bool success) {\r\n            allowance[msg.sender][_spender] = _value;  \r\n            tokenRecipient spender = tokenRecipient(_spender);\r\n            spender.receiveApproval(msg.sender, _value, this); \r\n            return true;         \r\n        }\r\n\r\n        /* A contract attempts to get the coins */\r\n        function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n            if (balanceOf[_from] < _value) throw;                 // Check if the sender has enough   \r\n            if (balanceOf[_to] + _value < balanceOf[_to]) throw;  // Check for overflows\r\n            if (spentAllowance[_from][msg.sender] + _value > allowance[_from][msg.sender]) throw;   // Check allowance\r\n            balanceOf[_from] -= _value;                          // Subtract from the sender\r\n            balanceOf[_to] += _value;                            // Add the same to the recipient            \r\n            spentAllowance[_from][msg.sender] += _value;\r\n            Transfer(_from, _to, _value); \r\n            return true;\r\n        } \r\n\r\n        /* This unnamed function is called whenever someone tries to send ether to it */\r\n        function () {\r\n            throw;     // Prevents accidental sending of ether\r\n        }\r\n        \r\n        function mintToken(address target, uint256 mintedAmount) onlyOwner {\r\n            balanceOf[target] += mintedAmount; \r\n            totalSupply += mintedAmount; \r\n            Transfer(0, owner, mintedAmount);\r\n            Transfer(owner, target, mintedAmount);\r\n        }\r\n\r\n        function freezeAccount(address target, bool freeze) onlyOwner {\r\n            frozenAccount[target] = freeze;\r\n            FrozenFunds(target, freeze);\r\n        }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"spentAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"decimalUnits\",\"type\":\"uint8\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"name\":\"centralMinter\",\"type\":\"address\"}],\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"}]","ContractName":"MyToken","CompilerVersion":"v0.2.1+commit.91a6b35","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c556e69636f726e204d65617400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004f09f8d9600000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":""}]}