{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\nThank you ConsenSys, this contract originated from:\r\nhttps://github.com/ConsenSys/Tokens/blob/master/Token_Contracts/contracts/Standard_Token.sol\r\nWhich is itself based on the Ethereum standardized contract APIs:\r\nhttps://github.com/ethereum/wiki/wiki/Standardized_Contract_APIs\r\n*/\r\n\r\n/// @title Standard Token Contract.\r\ncontract TokenInterface {\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    uint256 public totalSupply;\r\n    function balanceOf(address _owner) constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _amount) returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _amount) returns (bool success);\r\n    function approve(address _spender, uint256 _amount) returns (bool success);\r\n    function allowance(\r\n        address _owner,\r\n        address _spender\r\n    ) constant returns (uint256 remaining);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\r\n    event Approval(\r\n        address indexed _owner,\r\n        address indexed _spender,\r\n        uint256 _amount\r\n    );\r\n}\r\n\r\n\r\n// compiled using https://ethereum.github.io/browser-solidity/#version=soljson-v0.3.2-2016-05-20-e3c5418.js&optimize=true\r\ncontract Token_Offer {\r\n  address public tokenHolder;\r\n  address public owner;\r\n  TokenInterface public tokenContract;\r\n  uint16 public price;  // price in ETH per 100000 tokens. Price 2250 means 2.25 ETH per 100 tokens\r\n  uint public tokensPurchasedTotal;\r\n  uint public ethCostTotal;\r\n\r\n  event TokensPurchased(address buyer, uint16 price, uint tokensPurchased, uint ethCost, uint ethSent, uint ethReturned, uint tokenSupplyLeft);\r\n  event Log(string msg, uint val);\r\n\r\n  modifier onlyOwnerAllowed() {if (tx.origin != owner) throw; _}\r\n\r\n  function Token_Offer(address _tokenContract, address _tokenHolder, uint16 _price)  {\r\n    owner = tx.origin;\r\n    tokenContract = TokenInterface(_tokenContract);\r\n    tokenHolder = _tokenHolder;\r\n    price = _price;\r\n  }\r\n\r\n  function tokenSupply() constant returns (uint tokens) {\r\n    uint allowance = tokenContract.allowance(tokenHolder, address(this));\r\n    uint balance = tokenContract.balanceOf(tokenHolder);\r\n    if (allowance < balance) return allowance;\r\n    else return balance;\r\n  }\r\n\r\n  function () {\r\n    buyTokens(price);\r\n  }\r\n\r\n  function buyTokens() {\r\n    buyTokens(price);\r\n  }\r\n\r\n  /// @notice DON'T BUY FROM EXCHANGE! Only buy from normal account in your full control (private key).\r\n  /// @param _bidPrice Price in ETH per 100000 tokens. _bidPrice 2250 means 2.25 ETH per 100 tokens.\r\n  function buyTokens(uint16 _bidPrice) {\r\n    if (tx.origin != msg.sender) { // buyer should be able to handle TheDAO (vote, transfer, ...)\r\n      if (!msg.sender.send(msg.value)) throw; // send ETH back to sender's contract\r\n      Log(\"Please send from a normal account, not contract/multisig\", 0);\r\n      return;\r\n    }\r\n    if (price == 0) {\r\n      if (!tx.origin.send(msg.value)) throw; // send ETH back\r\n      Log(\"Contract disabled\", 0);\r\n      return;\r\n    }\r\n    if (_bidPrice < price) {\r\n      if (!tx.origin.send(msg.value)) throw; // send ETH back\r\n      Log(\"Bid too low, price is:\", price);\r\n      return;\r\n    }\r\n    if (msg.value == 0) {\r\n      Log(\"No ether received\", 0);\r\n      return;\r\n    }\r\n    uint _tokenSupply = tokenSupply();\r\n    if (_tokenSupply == 0) {\r\n      if (!tx.origin.send(msg.value)) throw; // send ETH back\r\n      Log(\"No tokens available, please try later\", 0);\r\n      return;\r\n    }\r\n\r\n    uint _tokensToPurchase = (msg.value * 1000) / price;\r\n\r\n    if (_tokensToPurchase <= _tokenSupply) { // contract has enough tokens to complete order\r\n      if (!tokenContract.transferFrom(tokenHolder, tx.origin, _tokensToPurchase)) // send tokens\r\n        throw;\r\n      tokensPurchasedTotal += _tokensToPurchase;\r\n      ethCostTotal += msg.value;\r\n      TokensPurchased(tx.origin, price, _tokensToPurchase, msg.value, msg.value, 0, _tokenSupply-_tokensToPurchase);\r\n\r\n    } else { // contract low on tokens, partial order execution\r\n      uint _supplyInEth = (_tokenSupply * price) / 1000;\r\n      if (!tx.origin.send(msg.value-_supplyInEth)) // return extra eth\r\n        throw;\r\n      if (!tokenContract.transferFrom(tokenHolder, tx.origin, _tokenSupply)) // send tokens\r\n        throw;\r\n      tokensPurchasedTotal += _tokenSupply;\r\n      ethCostTotal += _supplyInEth;\r\n      TokensPurchased(tx.origin, price, _tokenSupply, _supplyInEth, msg.value, msg.value-_supplyInEth, 0);\r\n    }\r\n  }\r\n\r\n  /* == functions below are for owner only == */\r\n  function setPrice(uint16 _price) onlyOwnerAllowed {\r\n    price = _price;\r\n    Log(\"Price changed:\", price); // watch the contract to see updates\r\n  }\r\n  function tokenSupplyChanged() onlyOwnerAllowed {\r\n    Log(\"Supply changed, new supply:\", tokenSupply()); // watch the contract to see updates\r\n  }\r\n  function setTokenHolder(address _tokenHolder) onlyOwnerAllowed {\r\n    tokenHolder = _tokenHolder;\r\n  }\r\n  function setOwner(address _owner) onlyOwnerAllowed {\r\n    owner = _owner;\r\n  }\r\n  function transferETH(address _to, uint _amount) onlyOwnerAllowed {\r\n    if (_amount > address(this).balance) {\r\n      _amount = address(this).balance;\r\n    }\r\n    _to.send(_amount);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_bidPrice\",\"type\":\"uint16\"}],\"name\":\"buyTokens\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethCostTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensPurchasedTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenHolder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSupply\",\"outputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferETH\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint16\"}],\"name\":\"setPrice\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"tokenSupplyChanged\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenHolder\",\"type\":\"address\"}],\"name\":\"setTokenHolder\",\"outputs\":[],\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"},{\"name\":\"_tokenHolder\",\"type\":\"address\"},{\"name\":\"_price\",\"type\":\"uint16\"}],\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"tokensPurchased\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethCost\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethSent\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethReturned\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenSupplyLeft\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"msg\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"Log\",\"type\":\"event\"}]","ContractName":"Token_Offer","CompilerVersion":"v0.3.2-2016-05-20-e3c5418","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000bb9bc244d798123fde783fcc1c72d3bb8c1894130000000000000000000000003507d25c89959890b598f7844e10a1ad482f3ffd00000000000000000000000000000000000000000000000000000000000006a4","Library":"","SwarmSource":""}]}