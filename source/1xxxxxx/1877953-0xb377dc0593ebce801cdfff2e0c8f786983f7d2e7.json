{"status":"1","message":"OK","result":[{"SourceCode":"contract  Ballot{\r\n    struct Voter{\r\n        uint weight;\r\n        bool voted;\r\n        address delegate;\r\n        uint vote;\r\n    }\r\n    \r\n    struct Proposal{\r\n        bytes32 name;\r\n        uint voteCount;\r\n    }\r\n    \r\n    address public chairperson  ;\r\n    \r\n    mapping(address=>Voter) voters;\r\n    \r\n    Proposal[] public proposals;\r\n    \r\n    function Ballot(bytes32[] proposalNames) {\r\n        chairperson = msg.sender; \r\n        voters[chairperson].weight = 1;\r\n        \r\n        for(uint i = 0; i < proposalNames.length; i++) {\r\n            proposals.push(Proposal({\r\n                name: proposalNames[i],\r\n                voteCount:0\r\n            }));\r\n        }\r\n        \r\n    }\r\n    \r\n    function giveRightToVote(address voter) {\r\n        \r\n        if(msg.sender != chairperson || voters[voter].voted){\r\n            throw;\r\n        }\r\n        \r\n        voters[voter].weight = 1;\r\n        \r\n    }\r\n    \r\n    function delegate(address to){\r\n        \r\n        Voter sender = voters[msg.sender];\r\n        if (sender.voted)\r\n            throw;\r\n            \r\n        while ( \r\n            voters[to].delegate != address(0)&&\r\n            voters[to].delegate != msg.sender\r\n        ){\r\n            to = voters[to].delegate;\r\n        }\r\n        \r\n        if (to == msg.sender)\r\n            throw;\r\n            \r\n        sender.voted = true;\r\n        sender.delegate = to;\r\n        Voter delegate = voters[to];\r\n        if  (delegate.voted) {\r\n            proposals[delegate.vote].voteCount += sender.weight;\r\n        }else {\r\n            delegate.weight += sender.weight;\r\n        }\r\n        \r\n    }\r\n    \r\n    \r\n    function vote(uint proposal) {\r\n        Voter sender = voters[msg.sender];\r\n        if (sender.voted)\r\n            throw;\r\n        \r\n        sender.voted=true;\r\n        sender.vote=proposal;\r\n        proposals[proposal].voteCount += sender.weight;\r\n        \r\n    }\r\n    \r\n    function winningProtocal() returns (uint proposal) \r\n    {\r\n        proposal = 0;\r\n        uint maxCount = 0;\r\n        for (uint i = 0 ; i < proposals.length ; i++) {\r\n            if (proposals[i].voteCount > maxCount) {\r\n                proposal = i;\r\n                maxCount = proposals[i].voteCount;\r\n            }\r\n        }\r\n        \r\n        //return proposal;\r\n    }\r\n    \r\n    \r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"proposal\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"voteCount\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"chairperson\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"winningProtocal\",\"outputs\":[{\"name\":\"proposal\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"giveRightToVote\",\"outputs\":[],\"type\":\"function\"},{\"inputs\":[{\"name\":\"proposalNames\",\"type\":\"bytes32[]\"}],\"type\":\"constructor\"}]","ContractName":"Ballot","CompilerVersion":"v0.3.5-2016-07-01-48238c9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}