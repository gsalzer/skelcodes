{"status":"1","message":"OK","result":[{"SourceCode":"contract cEthereumlotteryNet {\r\n\t/*\r\n\t\tcEthereumlotteryNet\r\n\t\tCoded by: iFA\r\n\t\thttp://c.ethereumlottery.net\r\n\t\tver: 2.0.0\r\n\t*/\r\n\taddress owner;\r\n\tbool private contractEnabled = true;\r\n\tuint public constant ticketPrice = 10 finney;\r\n\tuint private constant defaultJackpot = 100 ether;\r\n\tuint private constant feep = 23;\r\n\tuint private constant hit3p = 35;\r\n\tuint private constant hit4p = 25;\r\n\tuint private constant hit5p = 40;\r\n\tuint8 private constant maxNumber = 30;\r\n\tuint private constant drawCheckStep = 100;\r\n\tuint private constant prepareBlockDelay = 5;\r\n\tuint private drawDelay = 7 days;\r\n\tuint private feeValue;\r\n\r\n\tstruct hits_s {\r\n\t\tuint prize;\r\n\t\tuint count;\r\n\t}\r\n\t\r\n\tenum drawStatus_ { Wait, Prepared ,InProcess, Done }\r\n\t\r\n\tstruct tickets_s {\r\n\t\tuint hits;\r\n\t\tbytes5 numbers;\r\n\t}\r\n\t\r\n\tstruct games_s {\r\n\t\tuint startTime;\r\n\t\tuint endTime;\r\n\t\tuint jackpot;\r\n\t\tuint8[5] winningNumbers;\r\n\t\tmapping (uint => hits_s) hits;\r\n\t\tuint prizePot;\r\n\t\tdrawStatus_ drawStatus;\r\n\t\tbytes32 winHash;\r\n\t\tmapping (uint => tickets_s) tickets;\r\n\t\tuint ticketsCount;\r\n\t\tuint checkedTickets;\r\n\t\tbytes32 nextHashOfSecretKey;\r\n\t\tuint prepareDrawBlock;\r\n\t}\r\n\t\r\n\tmapping(uint => games_s) private games;\r\n\t\r\n\tuint public CurrentGameId = 0;\r\n\t\r\n\tstruct player_s {\r\n\t\tbool paid;\r\n\t\tuint[] tickets;\r\n\t}\r\n\t\r\n\tmapping(address => mapping(uint => player_s)) private players;\r\n\tuint private playersSize;\r\n\t\r\n\tstring constant public Information = \"http://c.ethereumlottery.net\";\r\n\t\r\n\tfunction ContractStatus() constant returns (bool Enabled) {\r\n\t\tEnabled = contractEnabled;\r\n\t}\r\n\tfunction GameDetails(uint GameId) constant returns ( uint StartTime, uint EndTime, uint Jackpot, uint TicketsCount) {\r\n\t\tJackpot = games[GameId].jackpot;\r\n\t\tTicketsCount = games[GameId].ticketsCount;\r\n\t\tStartTime = games[GameId].startTime;\r\n\t\tEndTime = games[GameId].endTime;\r\n\t}\r\n\tfunction DrawDetails(uint GameId) constant returns (\r\n\t\tstring DrawStatus, bytes32 WinHash, uint8[5] WinningNumbers,\r\n\t\tuint Hit3Count, uint Hit4Count, uint Hit5Count,\r\n\t\tuint Hit3Prize, uint Hit4Prize, uint Hit5Prize) {\r\n\t\tDrawStatus = WritedrawStatus(games[GameId].drawStatus);\r\n\t\tif (games[GameId].drawStatus != drawStatus_.Wait) {\r\n\t\t\tWinningNumbers = games[GameId].winningNumbers;\r\n\t\t\tHit3Count = games[GameId].hits[3].count;\r\n\t\t\tHit4Count = games[GameId].hits[4].count;\r\n\t\t\tHit5Count = games[GameId].hits[5].count;\r\n\t\t\tHit3Prize = games[GameId].hits[3].prize;\r\n\t\t\tHit4Prize = games[GameId].hits[4].prize;\r\n\t\t\tHit5Prize = games[GameId].hits[5].prize;\r\n\t\t\tWinHash = games[GameId].winHash;\r\n\t\t} else {\r\n\t\t\tWinningNumbers = [0,0,0,0,0];\r\n\t\t\tHit3Count = 0;\r\n\t\t\tHit4Count = 0;\r\n\t\t\tHit5Count = 0;\r\n\t\t\tHit3Prize = 0;\r\n\t\t\tHit4Prize = 0;\r\n\t\t\tHit5Prize = 0;\r\n\t\t\tWinHash = 0;\r\n\t\t}\r\n\t}\r\n\tfunction CheckTickets(address Address,uint GameId,uint TicketNumber) constant returns (uint8[5] Numbers, uint Hits, bool Paid) {\r\n\t\tif (players[Address][GameId].tickets[TicketNumber] > 0) {\r\n\t\t\tNumbers[0] = uint8(uint40(games[GameId].tickets[players[Address][GameId].tickets[TicketNumber]].numbers) /256/256/256/256);\r\n\t\t\tNumbers[1] = uint8(uint40(games[GameId].tickets[players[Address][GameId].tickets[TicketNumber]].numbers) /256/256/256);\r\n\t\t\tNumbers[2] = uint8(uint40(games[GameId].tickets[players[Address][GameId].tickets[TicketNumber]].numbers) /256/256);\r\n\t\t\tNumbers[3] = uint8(uint40(games[GameId].tickets[players[Address][GameId].tickets[TicketNumber]].numbers) /256);\r\n\t\t\tNumbers[4] = uint8(games[GameId].tickets[players[Address][GameId].tickets[TicketNumber]].numbers);\r\n\t\t\tNumbers = sortWinningNumbers(Numbers);\r\n\t\t\tHits = games[GameId].tickets[players[Address][GameId].tickets[TicketNumber]].hits;\r\n\t\t\tPaid = players[Address][GameId].paid;\r\n\t\t}\r\n\t}\r\n\tfunction CheckPrize(address Address, uint GameId) constant returns(uint Value) {\r\n\t\tif (players[Address][GameId].paid == false) {\r\n\t\t    if (contractEnabled) { \r\n    \t\t\tif (games[GameId].drawStatus == drawStatus_.Done) {\r\n    \t\t\t\tfor (uint b = 0 ; b < players[Address][GameId].tickets.length ; b++) {\r\n    \t\t\t\t\tif (games[GameId].tickets[players[Address][GameId].tickets[b]].hits == 3){\r\n    \t\t\t\t\t\tValue += games[GameId].hits[3].prize;\r\n    \t\t\t\t\t} else if (games[GameId].tickets[players[Address][GameId].tickets[b]].hits == 4){\r\n    \t\t\t\t\t\tValue += games[GameId].hits[4].prize;\r\n    \t\t\t\t\t} else if (games[GameId].tickets[players[Address][GameId].tickets[b]].hits == 5){\r\n    \t\t\t\t\t\tValue += games[GameId].hits[5].prize;\r\n    \t\t\t\t\t}\r\n    \t\t\t\t}\r\n    \t\t\t}\r\n\t\t    } else {\r\n    \t\t    if (GameId == CurrentGameId) {\r\n    \t\t        Value = players[msg.sender][GameId].tickets.length * ticketPrice;\r\n    \t\t    }\r\n\t\t    }\r\n\t\t}\r\n\t}\r\n\tfunction cEthereumlotteryNet() {\r\n\t\towner = msg.sender;\r\n\t\tCreateNewDraw(defaultJackpot);\r\n\t}\r\n\tfunction GetPrize(uint GameId) external {\r\n\t\tuint Balance;\r\n\t\tuint GameBalance;\r\n\t\tif (players[msg.sender][GameId].paid == false) {\r\n    \t\tif (contractEnabled) { \r\n    \t\t    if (games[GameId].drawStatus != drawStatus_.Done) { throw; }\r\n        \t\tfor (uint b = 0 ; b < players[msg.sender][GameId].tickets.length ; b++) {\r\n        \t\t\tif (games[GameId].tickets[players[msg.sender][GameId].tickets[b]].hits == 3){\r\n        \t\t\t\tBalance += games[GameId].hits[3].prize;\r\n        \t\t\t} else if (games[GameId].tickets[players[msg.sender][GameId].tickets[b]].hits == 4){\r\n        \t\t\t\tBalance += games[GameId].hits[4].prize;\r\n        \t\t\t} else if (games[GameId].tickets[players[msg.sender][GameId].tickets[b]].hits == 5){\r\n        \t\t\t\tBalance += games[GameId].hits[5].prize;\r\n        \t\t\t}\r\n        \t\t}\r\n        \t\tplayers[msg.sender][GameId].paid = true;\r\n        \t\tgames[GameId].prizePot -= Balance;\r\n    \t\t} else {\r\n    \t\t    if (GameId == CurrentGameId) {\r\n    \t\t        Balance = players[msg.sender][GameId].tickets.length * ticketPrice;\r\n    \t\t        players[msg.sender][GameId].paid = true;\r\n    \t\t    }\r\n    \t\t}\r\n\t\t}\r\n\t\tif (Balance > 0) {\r\n\t\t\tif (msg.sender.send(Balance) == false) { throw; }\r\n\t\t} else {\r\n\t\t\tthrow;\r\n\t\t}\r\n\t}\r\n\tfunction AddTicket(bytes5[] tickets) OnlyEnabled IfInTime IfDrawWait external {\r\n\t\tuint ticketsCount = tickets.length;\r\n\t\tif (ticketsCount > 70 || ticketsCount == 0) { throw; }\r\n\t\tif (msg.value < ticketsCount * ticketPrice) { throw; }\r\n\t\tif (msg.value > (ticketsCount * ticketPrice)) { if (msg.sender.send(msg.value - (ticketsCount * ticketPrice)) == false) { throw; } }\r\n\t\tfor (uint a = 0 ; a < ticketsCount ; a++) {\r\n\t\t\tif (!CheckNumbers(ConvertNumbers(tickets[a]))) { throw; }\r\n\t\t\tgames[CurrentGameId].tickets[games[CurrentGameId].ticketsCount].numbers = tickets[a];\r\n\t\t\tplayers[msg.sender][CurrentGameId].tickets.length += 1;\r\n\t\t\tplayers[msg.sender][CurrentGameId].tickets[players[msg.sender][CurrentGameId].tickets.length-1] = games[CurrentGameId].ticketsCount;\r\n\t\t\tgames[CurrentGameId].ticketsCount++;\r\n\t\t}\r\n\t}\r\n\tfunction () {\r\n\t\tthrow;\r\n\t}\r\n\tfunction ProcessDraw() OnlyEnabled IfDrawProcess {\r\n\t\tuint StepCount = drawCheckStep;\r\n\t\tif (games[CurrentGameId].checkedTickets < games[CurrentGameId].ticketsCount) {\r\n\t\t\tfor (uint a = games[CurrentGameId].checkedTickets ; a < games[CurrentGameId].ticketsCount ; a++) {\r\n\t\t\t\tif (StepCount == 0) { break; }\r\n\t\t\t\tfor (uint b = 0 ; b < 5 ; b++) {\r\n\t\t\t\t\tfor (uint c = 0 ; c < 5 ; c++) {\r\n\t\t\t\t\t\tif (uint8(uint40(games[CurrentGameId].tickets[a].numbers) / (256**b)) == games[CurrentGameId].winningNumbers[c]) {\r\n\t\t\t\t\t\t\tgames[CurrentGameId].tickets[a].hits += 1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tgames[CurrentGameId].checkedTickets += 1;\r\n\t\t\t\tStepCount -= 1;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (games[CurrentGameId].checkedTickets == games[CurrentGameId].ticketsCount) {\r\n\t\t\tfor (a = 0 ; a < games[CurrentGameId].ticketsCount ; a++) {\r\n\t\t\t\tif (games[CurrentGameId].tickets[a].hits == 3) {\r\n\t\t\t\t\tgames[CurrentGameId].hits[3].count +=1;\r\n\t\t\t\t} else if (games[CurrentGameId].tickets[a].hits == 4) {\r\n\t\t\t\t\tgames[CurrentGameId].hits[4].count +=1;\r\n\t\t\t\t} else if (games[CurrentGameId].tickets[a].hits == 5) {\r\n\t\t\t\t\tgames[CurrentGameId].hits[5].count +=1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (games[CurrentGameId].hits[3].count > 0) { games[CurrentGameId].hits[3].prize = games[CurrentGameId].prizePot * hit3p / 100 / games[CurrentGameId].hits[3].count; }\r\n\t\t\tif (games[CurrentGameId].hits[4].count > 0) { games[CurrentGameId].hits[4].prize = games[CurrentGameId].prizePot * hit4p / 100 / games[CurrentGameId].hits[4].count; }\r\n\t\t\tif (games[CurrentGameId].hits[5].count > 0) { games[CurrentGameId].hits[5].prize = games[CurrentGameId].jackpot / games[CurrentGameId].hits[5].count; }\r\n\t\t\tuint NextJackpot;\r\n\t\t\tif (games[CurrentGameId].hits[5].count == 0) {\r\n\t\t\t\tNextJackpot = games[CurrentGameId].prizePot * hit5p / 100 + games[CurrentGameId].jackpot;\r\n\t\t\t} else {\r\n\t\t\t\tNextJackpot = defaultJackpot;\r\n\t\t\t}\r\n\t\t\tgames[CurrentGameId].prizePot = (games[CurrentGameId].hits[3].count*games[CurrentGameId].hits[3].prize) + (games[CurrentGameId].hits[4].count*games[CurrentGameId].hits[4].prize) + (games[CurrentGameId].hits[5].count*games[CurrentGameId].hits[5].prize);\r\n\t\t\tgames[CurrentGameId].drawStatus = drawStatus_.Done;\r\n\t\t\tCreateNewDraw(NextJackpot);\r\n\t\t}\r\n\t}\r\n\tfunction StartDraw() external OnlyEnabled IfDrawPrepared {\r\n\t\tif (games[CurrentGameId].prepareDrawBlock > block.number) { throw; }\r\n\t\tgames[CurrentGameId].drawStatus = drawStatus_.InProcess;\r\n\t\tgames[CurrentGameId].winHash = makeHash();\r\n\t\tgames[CurrentGameId].winningNumbers = sortWinningNumbers(GetNumbersFromHash(games[CurrentGameId].winHash));\r\n\t\tfeeValue += ticketPrice * games[CurrentGameId].ticketsCount * feep / 100;\r\n\t\tgames[CurrentGameId].prizePot = ticketPrice * games[CurrentGameId].ticketsCount - feeValue;\r\n\t\tProcessDraw();\r\n\t}\r\n\tfunction PrepareDraw() external OnlyEnabled ReadyForDraw {\r\n\t\tif (games[CurrentGameId].ticketsCount > 0) {\r\n\t\t\tgames[CurrentGameId].drawStatus = drawStatus_.Prepared;\r\n\t\t\tgames[CurrentGameId].prepareDrawBlock = block.number + prepareBlockDelay;\r\n\t\t} else {\r\n\t\t\tif (!contractEnabled) { throw; }\r\n\t\t\tgames[CurrentGameId].endTime = calcNextDrawTime();\r\n\t\t}\r\n\t}\r\n\tfunction OwnerCloseContract() external OnlyOwner OnlyEnabled {\r\n\t\tcontractEnabled = false;\r\n\t\tuint contractbalance = this.balance;\r\n\t\tfor (uint a=0 ; a <= CurrentGameId ; a++) {\r\n\t\t\tcontractbalance -= games[a].prizePot;\r\n\t\t}\r\n\t\tcontractbalance -= games[CurrentGameId].ticketsCount * ticketPrice;\r\n\t\tif (contractbalance == 0 ) { throw; }\r\n\t\tif (owner.send(contractbalance) == false) { throw; }\r\n\t\tfeeValue = 0;\r\n\t}\r\n\tfunction OwnerAddFunds() external OnlyOwner {\r\n\t\treturn;\r\n\t}\r\n\tfunction OwnerGetFee() external OnlyOwner {\r\n\t\tif (feeValue == 0) { throw; }\r\n\t\tif (owner.send(feeValue) == false) { throw; }\r\n\t\tfeeValue = 0;\r\n\t}\r\n\tfunction CreateNewDraw(uint Jackpot) private {\r\n\t\tCurrentGameId += 1;\r\n\t\tgames[CurrentGameId].startTime = now;\r\n\t\tgames[CurrentGameId].endTime = calcNextDrawTime();\r\n\t\tgames[CurrentGameId].jackpot = Jackpot;\r\n\t\tgames[CurrentGameId].drawStatus = drawStatus_.Wait;\r\n\t}\r\n\tfunction ConvertNumbers(bytes5 input) private returns (uint8[5] output){\r\n\t\toutput[0] = uint8(uint40(input) /256/256/256/256);\r\n\t\toutput[1] = uint8(uint40(input) /256/256/256);\r\n\t\toutput[2] = uint8(uint40(input) /256/256);\r\n\t\toutput[3] = uint8(uint40(input) /256);\r\n\t\toutput[4] = uint8(input);\r\n\t}\r\n\tfunction CheckNumbers(uint8[5] tickets) private returns (bool ok) {\r\n\t\tfor (uint8 a = 0 ; a < 5 ; a++) {\r\n\t\t\tif ((tickets[a] < 1 ) || (tickets[a] > maxNumber)) { return false; }\r\n\t\t\tfor (uint8 b = 0 ; b < 5 ; b++) { if ((tickets[a] == tickets[b]) && (a != b)) {\treturn false; }\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\tfunction GetNumbersFromHash(bytes32 hash) private returns (uint8[5] tickets) {\r\n\t\tbool ok = true;\r\n\t\tuint8 num = 0;\r\n\t\tuint hashpos = 0;\r\n\t\tuint8 a;\r\n\t\tfor (a = 0 ; a < 5 ; a++) {\r\n\t\t\twhile (true) {\r\n\t\t\t\tok = true;\r\n\t\t\t\tif (hashpos == 32) {\r\n\t\t\t\t\thashpos = 0;\r\n\t\t\t\t\thash = sha3(hash);\r\n\t\t\t\t}\r\n\t\t\t\tnum = GetPart(hash,hashpos);\r\n\t\t\t\tnum = num%maxNumber+1;\r\n\t\t\t\thashpos += 1;\r\n\t\t\t\tfor (uint8 b = 0 ; b < 5 ; b++) {\r\n\t\t\t\t\tif (tickets[b] == num) {\r\n\t\t\t\t\t\tok = false;\r\n\t\t\t\t\t\tbreak; \r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (ok == true) {\r\n\t\t\t\t\ttickets[a] = num;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tfunction GetPart(bytes32 a, uint i) private returns (uint8) { return uint8(byte(bytes32(uint(a) * 2 ** (8 * i)))); }\r\n\tfunction WritedrawStatus(drawStatus_ input) private returns (string drawStatus) {\r\n\t\tif (input == drawStatus_.Wait) {\r\n\t\t\tdrawStatus = \"Wait\";\r\n\t\t} else if (input == drawStatus_.InProcess) {\r\n\t\t\tdrawStatus = \"In Process\";\r\n\t\t} else if (input == drawStatus_.Done) {\r\n\t\t\tdrawStatus = \"Done\";\r\n\t\t} else if (input == drawStatus_.Prepared) {\r\n\t\t\tdrawStatus = \"Prepared\";\r\n\t\t}\r\n\t}\r\n\tfunction sortWinningNumbers(uint8[5] numbers) private returns(uint8[5] sortednumbers) {\r\n\t\tsortednumbers = numbers;\r\n\t\tfor (uint8 i=0; i<5; i++) {\r\n\t\t\tfor (uint8 j=i+1; j<5; j++) {\r\n\t\t\t\tif (sortednumbers[i] > sortednumbers[j]) {\r\n\t\t\t\t\tuint8 t = sortednumbers[i];\r\n\t\t\t\t\tsortednumbers[i] = sortednumbers[j];\r\n\t\t\t\t\tsortednumbers[j] = t;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tfunction makeHash() private returns (bytes32 hash) {\r\n\t\tfor ( uint a = 0 ; a <= prepareBlockDelay ; a++ ) {\r\n\t\t\thash = sha3(hash, games[CurrentGameId].prepareDrawBlock - a);\r\n\t\t}\r\n\t\thash = sha3(hash, block.difficulty, block.coinbase, block.timestamp, tx.origin, games[CurrentGameId].ticketsCount);\r\n\t}\r\n\tfunction calcNextDrawTime() private returns (uint ret) {\r\n\t\tret = 1461499200; // 2016.04.24 12:00:00\r\n\t\twhile (ret < now) {\r\n\t\t\tret += drawDelay;\r\n\t\t}\r\n\t}\r\n\tmodifier OnlyOwner() { if (owner != msg.sender) { throw; } _ }\r\n\tmodifier OnlyEnabled() { if (!contractEnabled) { throw; } _\t}\r\n\tmodifier IfDrawWait() { if (games[CurrentGameId].drawStatus != drawStatus_.Wait) { throw; } _\t}\r\n\tmodifier IfDrawPrepared() { if (games[CurrentGameId].drawStatus != drawStatus_.Prepared) { throw; } _\t}\r\n\tmodifier IfDrawProcess() { if (games[CurrentGameId].drawStatus != drawStatus_.InProcess) { throw; } _\t}\r\n\tmodifier IfInTime() { if (games[CurrentGameId].endTime < now) { throw; } _ }\r\n\tmodifier ReadyForDraw() { if (games[CurrentGameId].endTime > now || games[CurrentGameId].drawStatus != drawStatus_.Wait) { throw; } _ }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"GameId\",\"type\":\"uint256\"}],\"name\":\"DrawDetails\",\"outputs\":[{\"name\":\"DrawStatus\",\"type\":\"string\"},{\"name\":\"WinHash\",\"type\":\"bytes32\"},{\"name\":\"WinningNumbers\",\"type\":\"uint8[5]\"},{\"name\":\"Hit3Count\",\"type\":\"uint256\"},{\"name\":\"Hit4Count\",\"type\":\"uint256\"},{\"name\":\"Hit5Count\",\"type\":\"uint256\"},{\"name\":\"Hit3Prize\",\"type\":\"uint256\"},{\"name\":\"Hit4Prize\",\"type\":\"uint256\"},{\"name\":\"Hit5Prize\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ticketPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"GameId\",\"type\":\"uint256\"}],\"name\":\"GameDetails\",\"outputs\":[{\"name\":\"StartTime\",\"type\":\"uint256\"},{\"name\":\"EndTime\",\"type\":\"uint256\"},{\"name\":\"Jackpot\",\"type\":\"uint256\"},{\"name\":\"TicketsCount\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Information\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"OwnerAddFunds\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ProcessDraw\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"OwnerCloseContract\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CurrentGameId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tickets\",\"type\":\"bytes5[]\"}],\"name\":\"AddTicket\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"Address\",\"type\":\"address\"},{\"name\":\"GameId\",\"type\":\"uint256\"},{\"name\":\"TicketNumber\",\"type\":\"uint256\"}],\"name\":\"CheckTickets\",\"outputs\":[{\"name\":\"Numbers\",\"type\":\"uint8[5]\"},{\"name\":\"Hits\",\"type\":\"uint256\"},{\"name\":\"Paid\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"Address\",\"type\":\"address\"},{\"name\":\"GameId\",\"type\":\"uint256\"}],\"name\":\"CheckPrize\",\"outputs\":[{\"name\":\"Value\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"StartDraw\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"PrepareDraw\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ContractStatus\",\"outputs\":[{\"name\":\"Enabled\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"GameId\",\"type\":\"uint256\"}],\"name\":\"GetPrize\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"OwnerGetFee\",\"outputs\":[],\"type\":\"function\"},{\"inputs\":[],\"type\":\"constructor\"}]","ContractName":"cEthereumlotteryNet","CompilerVersion":"v0.3.1-2016-03-31-c492d9b","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}