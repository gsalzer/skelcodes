{"status":"1","message":"OK","result":[{"SourceCode":"contract aEthereumlotteryNet {\r\n\t/*\r\n\t\taEthereumlotteryNet\r\n\t\tCoded by: iFA\r\n\t\thttp://a.ethereumlottery.net\r\n\t\tver: 1.0.1\r\n\t*/\r\n\taddress private owner;\r\n\tuint private collectedFee;\r\n\tbool public contractEnabled = true;\r\n\tuint public ticketPrice = 1 finney; // 0.01 ether\r\n\tuint private feeP = 5; // 5 %\r\n\tuint private drawDelay = 7 days;\r\n\tuint private drawAtLeastTicketCount = 10000;\r\n\tuint private drawAtLeastPlayerCount = 10;\r\n\tuint private placeMultiple  =  10000;\r\n\tuint private place1P    \t= 600063; // 60.0063 %\r\n\tuint private place2P    \t= 240025; // 24.0025 %\r\n\tuint private place3P    \t=  96010; //  9.6010 %\r\n\tuint private place4P    \t=  38404; //  3.8404 %\r\n\tuint private place5P    \t=  15362; //  1.5362 %\r\n\tuint private place6P    \t=   6145; //  0.6145 %\r\n\tuint private place7P    \t=   2458; //  0.2458 %\r\n\tuint private place8P    \t=    983; //  0.0983 %\r\n\tuint private place9P    \t=    393; //  0.0393 %\r\n\tuint private place10P       =    157; //  0.0157 %\r\n\t\r\n\tuint private constant prepareBlockDelay = 5;\r\n\t\r\n\tenum drawStatus_ { Wait, Prepared ,Done }\r\n\t\r\n\tstruct players_s {\r\n\t\taddress addr;\r\n\t\tuint ticketCount;\r\n\t}\r\n\tstruct game_s {\r\n\t\tplayers_s[] players;\r\n\t\tuint startDate;\r\n\t\tuint endDate;\r\n\t\tuint totalTickets;\r\n\t\tuint prepareDrawBlock;\r\n\t\tdrawStatus_ drawStatus;\r\n\t}\r\n\tgame_s private game;\r\n\t\r\n\tmapping (address => uint) public balances;\r\n\t\r\n\tstring constant public Information = \"http://a.ethereumlottery.net\";\r\n\t\r\n\tfunction Details() constant returns(uint start, uint end, uint tickets, uint players) {\r\n\t\tstart = game.startDate;\r\n\t\tend = game.endDate;\r\n\t\ttickets = game.totalTickets;\r\n\t\tplayers = game.players.length;\r\n\t}\r\n\tfunction Prizes() constant returns(bool estimated, uint place1, uint place2, uint place3, \r\n\tuint place4, uint place5, uint place6, uint place7, uint place8, uint place9, uint place10) {\r\n\t\tuint pot;\r\n\t\tif (game.totalTickets < drawAtLeastTicketCount) {\r\n\t\t\testimated = true;\r\n\t\t\tpot = drawAtLeastTicketCount*ticketPrice*(100-feeP)/100;\r\n\t\t} else {\r\n\t\t\testimated = false;\r\n\t\t\tpot = game.totalTickets*ticketPrice*(100-feeP)/100;\r\n\t\t}\r\n\t\tplace1 = pot*place1P/placeMultiple/100;\r\n\t\tplace2 = pot*place2P/placeMultiple/100;\r\n\t\tplace3 = pot*place3P/placeMultiple/100;\r\n\t\tplace4 = pot*place4P/placeMultiple/100;\r\n\t\tplace5 = pot*place5P/placeMultiple/100;\r\n\t\tplace6 = pot*place6P/placeMultiple/100;\r\n\t\tplace7 = pot*place7P/placeMultiple/100;\r\n\t\tplace8 = pot*place8P/placeMultiple/100;\r\n\t\tplace9 = pot*place9P/placeMultiple/100;\r\n\t\tplace10 = pot*place10P/placeMultiple/100;\r\n\t}\r\n\tfunction aEthereumlotteryNet() {\r\n\t\towner = msg.sender;\r\n\t\tcreateNewDraw();\r\n\t}\r\n\tfunction () {\r\n\t\tBuyTickets();\r\n\t}\r\n\tfunction BuyTickets() OnlyInTime OnlyWhileWait onValidContract {\r\n\t\tif (msg.value < ticketPrice) { throw; }\r\n\t\tuint ticketsCount = msg.value / ticketPrice;\r\n\t\tif (game.totalTickets+ticketsCount >= 255**4) { throw; }\r\n\t\tif (msg.value > (ticketsCount * ticketPrice)) { if (msg.sender.send(msg.value - (ticketsCount * ticketPrice)) == false) { throw; } }\r\n\t\tgame.totalTickets += ticketsCount;\r\n\t\tuint a;\r\n\t\tuint playersid = game.players.length;\r\n\t\tfor ( a = 0 ; a < playersid ; a++ ) {\r\n\t\t\tif (game.players[a].addr == msg.sender) {\r\n\t\t\t\tgame.players[a].ticketCount += ticketsCount;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t\tgame.players.length += 1;\r\n\t\tgame.players[playersid].addr = msg.sender;\r\n\t\tgame.players[playersid].ticketCount = ticketsCount;\r\n\t}\r\n\tfunction PrepareDraw() external ReadyForPrepare onValidContract {\r\n\t    reFund();\r\n\t\tif (game.players.length < drawAtLeastPlayerCount && game.totalTickets < drawAtLeastTicketCount) {\r\n\t\t\tgame.endDate = calcNextDrawTime();\r\n\t\t} else {\r\n\t\t\tgame.prepareDrawBlock = block.number + prepareBlockDelay;\r\n\t\t\tgame.drawStatus = drawStatus_.Prepared;\r\n\t\t}\r\n\t}\r\n\tevent announceWinner(address addr,uint prize);\r\n\tfunction Draw() external OnlyWhilePrepared ReadyForDraw onValidContract {\r\n\t    reFund();\r\n\t\tbytes32 WinHash = makeHash();\r\n\t\tuint a;\r\n\t\tuint b;\r\n\t\tuint c;\r\n\t\tuint d;\r\n\t\tuint e;\r\n\t\tuint num;\r\n\t\taddress[10] memory winners;\r\n\t\tbool next;\r\n\t\tfor ( a = 0 ; a < 10 ; a++ ) {\r\n\t\t\twhile (true) {\r\n\t\t\t\tnext = true;\r\n\t\t\t\tif (b == 8) {\r\n\t\t\t\t\tWinHash = sha3(WinHash);\r\n\t\t\t\t\tb = 0;\r\n\t\t\t\t}\r\n\t\t\t\tnum = getNum(WinHash,b) % game.totalTickets;\r\n\t\t\t\td = 0;\r\n\t\t\t\tfor ( c = 0 ; c < game.players.length ; c++ ) {\r\n\t\t\t\t\td += game.players[c].ticketCount;\r\n\t\t\t\t\tif (d >= num) {\r\n\t\t\t\t\t\tfor ( e = 0 ; e < 10 ; e++ ){\r\n\t\t\t\t\t\t\tif (game.players[c].addr == winners[e]) {\r\n\t\t\t\t\t\t\t\tnext = false;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (next == true) {\r\n\t\t\t\t\t\t\twinners[a] = game.players[c].addr;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tb++;\r\n\t\t\t\tif (next == true) { break; }\r\n\t\t\t}\r\n\t\t}\r\n\t\tuint fee = game.totalTickets * ticketPrice * feeP / 100;\r\n\t\tuint pot = game.totalTickets * ticketPrice - fee;\r\n\t\tcollectedFee += fee;\r\n\t\tbalances[winners[0]] += pot * place1P / placeMultiple / 100;\r\n\t\tbalances[winners[1]] += pot * place2P / placeMultiple / 100;\r\n\t\tbalances[winners[2]] += pot * place3P / placeMultiple / 100;\r\n\t\tbalances[winners[3]] += pot * place4P / placeMultiple / 100;\r\n\t\tbalances[winners[4]] += pot * place5P / placeMultiple / 100;\r\n\t\tbalances[winners[5]] += pot * place6P / placeMultiple / 100;\r\n\t\tbalances[winners[6]] += pot * place7P / placeMultiple / 100;\r\n\t\tbalances[winners[7]] += pot * place8P / placeMultiple / 100;\r\n\t\tbalances[winners[8]] += pot * place9P / placeMultiple / 100;\r\n\t\tbalances[winners[9]] += pot * place10P / placeMultiple / 100;\r\n\t\tannounceWinner(winners[0],balances[winners[0]]);\r\n\t\tannounceWinner(winners[1],balances[winners[1]]);\r\n\t\tannounceWinner(winners[2],balances[winners[2]]);\r\n\t\tannounceWinner(winners[3],balances[winners[3]]);\r\n\t\tannounceWinner(winners[4],balances[winners[4]]);\r\n\t\tannounceWinner(winners[5],balances[winners[5]]);\r\n\t\tannounceWinner(winners[6],balances[winners[6]]);\r\n\t\tannounceWinner(winners[7],balances[winners[7]]);\r\n\t\tannounceWinner(winners[8],balances[winners[8]]);\r\n\t\tannounceWinner(winners[9],balances[winners[9]]);\r\n\t\tif (contractEnabled == true) {\r\n\t\t\tcreateNewDraw();\r\n\t\t} else {\r\n\t\t\tgame.drawStatus = drawStatus_.Done;\r\n\t\t}\r\n\t}\r\n\tfunction GetPrize() external {\r\n\t    reFund();\r\n\t    if (contractEnabled) { \r\n            if (balances[msg.sender] == 0) { throw; }\r\n        \tif (msg.sender.send(balances[msg.sender]) == false) { throw; }\r\n        \tbalances[msg.sender] = 0;\r\n\t    } else {\r\n            for ( uint a = 0 ; a < game.players.length ; a++ ) {\r\n    \t\t\tif (game.players[a].addr == msg.sender) {\r\n    \t\t\t    if (game.players[a].ticketCount > 0) {\r\n    \t\t\t        if ( ! msg.sender.send(game.players[a].ticketCount * ticketPrice)) { throw; }\r\n    \t\t\t        game.totalTickets -= game.players[a].ticketCount;\r\n    \t\t\t        delete game.players[a];\r\n    \t\t\t    } else {\r\n    \t\t\t        throw;\r\n    \t\t\t    }\r\n    \t\t\t}\r\n    \t\t}\r\n\t    }\r\n\t}\r\n\tfunction OwnerGetFee() external OnlyOwner {\r\n\t    reFund();\r\n\t\tif (owner.send(collectedFee) == false) { throw; }\r\n\t\tcollectedFee = 0;\r\n\t}\r\n\tfunction OwnerCloseContract() external OnlyOwner {\r\n\t    reFund();\r\n\t    if (!contractEnabled) { throw; }\r\n\t\tcontractEnabled = false;\r\n\t}\r\n\tfunction createNewDraw() private {\r\n\t\tgame.startDate = now;\r\n\t\tgame.endDate = calcNextDrawTime();\r\n\t\tgame.players.length = 0;\r\n\t\tgame.totalTickets = 0;\r\n\t\tgame.prepareDrawBlock = 0;\r\n\t\tgame.drawStatus = drawStatus_.Wait;\r\n\t}\r\n\tfunction calcNextDrawTime() private returns (uint ret) {\r\n\t\tret = 1461499200; // 2016.04.24 12:00:00\r\n\t\twhile (ret < now) {\r\n\t\t\tret += drawDelay;\r\n\t\t}\r\n\t}\r\n\tfunction makeHash() private returns (bytes32 hash) {\r\n\t\tfor ( uint a = 0 ; a <= prepareBlockDelay ; a++ ) {\r\n\t\t\thash = sha3(hash, block.blockhash(game.prepareDrawBlock - prepareBlockDelay + a));\r\n\t\t}\r\n\t\thash = sha3(hash, game.players.length, game.totalTickets);\r\n\t}\r\n\tfunction reFund() private { if (msg.value > 0) { if (msg.sender.send(msg.value) == false) { throw; } } }\r\n\tfunction getNum(bytes32 a, uint i) private returns (uint) { return uint32(bytes4(bytes32(uint(a) * 2 ** (8 * (i*4))))); }\r\n\tmodifier onValidContract() { if (!contractEnabled) { throw; } _ }\r\n\tmodifier OnlyInTime() { if (game.endDate < now) { throw; } _ }\r\n\tmodifier OnlyWhileWait() { if (game.drawStatus != drawStatus_.Wait) { throw; } _ }\r\n\tmodifier OnlyWhilePrepared() { if (game.drawStatus != drawStatus_.Prepared) { throw; } _ }\r\n\tmodifier ReadyForPrepare() { if (game.endDate > now || game.drawStatus != drawStatus_.Wait) { throw; } _ }\r\n\tmodifier ReadyForDraw() { if (game.prepareDrawBlock > block.number) { throw; } _ }\r\n\tmodifier OnlyOwner() { if (owner != msg.sender) { throw; } _ }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"ticketPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Prizes\",\"outputs\":[{\"name\":\"estimated\",\"type\":\"bool\"},{\"name\":\"place1\",\"type\":\"uint256\"},{\"name\":\"place2\",\"type\":\"uint256\"},{\"name\":\"place3\",\"type\":\"uint256\"},{\"name\":\"place4\",\"type\":\"uint256\"},{\"name\":\"place5\",\"type\":\"uint256\"},{\"name\":\"place6\",\"type\":\"uint256\"},{\"name\":\"place7\",\"type\":\"uint256\"},{\"name\":\"place8\",\"type\":\"uint256\"},{\"name\":\"place9\",\"type\":\"uint256\"},{\"name\":\"place10\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Information\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"OwnerCloseContract\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"BuyTickets\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"GetPrize\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Details\",\"outputs\":[{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"end\",\"type\":\"uint256\"},{\"name\":\"tickets\",\"type\":\"uint256\"},{\"name\":\"players\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"PrepareDraw\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Draw\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"OwnerGetFee\",\"outputs\":[],\"type\":\"function\"},{\"inputs\":[],\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"prize\",\"type\":\"uint256\"}],\"name\":\"announceWinner\",\"type\":\"event\"}]","ContractName":"aEthereumlotteryNet","CompilerVersion":"v0.3.4-2016-05-31-7dab890","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}