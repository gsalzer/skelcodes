{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n\r\nTokenSaleFactory interface:\r\n\r\n[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenSalesByOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenSalesAll\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_asset\",\"type\":\"address\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"createSale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenSalesByAsset\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"TokenSaleCreation\",\"type\":\"event\"}]\r\n\r\n\r\nTokenSale interface:\r\n\r\n[{\"constant\":true,\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer_eth\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer_token\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"type\":\"function\"},{\"inputs\":[{\"name\":\"_asset\",\"type\":\"address\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"type\":\"constructor\"}]\r\n\r\nSeller usage:\r\n\r\nFollow the TokenSaleFactory contract using the TokenSaleFactory interface.\r\nUse the createSale function to launch a sale given the subcurrency address \r\nand the price measured in wei for the smallest of that subcurrency \r\nfor example 0.75 ETH per DGD would be 0.75 * 10^18 / 10^9\r\n\r\nFind your tokensale by entering your address into the tokenSalesByOwner owner field\r\nthen entering the number you get into the tokensalesall field which is a list of all sales created\r\n\r\nDeposit subcurrency to allow people to buy it at the pice you specified.\r\n\r\nTo withdraw funds use the function transfer_eth and give the amount in wei\r\nTo withdraw left over subcurrency use transfer_token given the address of the subcurrency you have deposited\r\nor transfer_asset. Amounts are in the smallest unit of that subcurrency for example 1 DGD would be 10^9\r\n\r\n\r\nBuyer usage:\r\n\r\nSend ETH to a TokenSale address to automatically receive the token being sold.\r\n\r\nTo verify a TokenSale contract obtain the index and address. Folow the TokenSaleFactory and enter the index into the TokenSalesAll field to verify the address is the same.\r\nFollow the TokenSale addresswith the TokenSale interface to verify the asset being sold is the right subcurrency and that the price is right.\r\n\r\n*/\r\n\r\ncontract Token {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    function transfer(address _to, uint256 _value);\r\n    function balanceOf(address) returns (uint256);\r\n}\r\n\r\ncontract owned {\r\n    address public owner;\r\n\r\n    function owned() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        if (msg.sender != owner) throw;\r\n        _\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract TokenSale is owned {\r\n\r\n\taddress public asset;\r\n\tuint256 public price;\r\n\r\n\tfunction TokenSale(address _asset, uint256 _price)\r\n\t{\r\n\t    asset = _asset; // addreress of subcurrency\r\n\t    price = _price; // number of wei per smallest unit of subcurrency. \r\n\t                    // for example 0.75 ETH per DGD would be 0.75 * 10^18 / 10^9\r\n\t                    // 10^18 being the conversion to ETH and 10^9 being the conversion to DGD\r\n\t}\r\n\r\n\r\n\tfunction transfer_token(address _token, address _to, uint256 _value)\r\n\tonlyOwner()\r\n\t{\r\n\t\tToken(_token).transfer(_to,_value); // Oner can Transfer any subcurrency out of this contract\r\n\t}\r\n\r\n\tfunction transfer_asset(address _to, uint256 _value)\r\n\tonlyOwner()\r\n\t{\r\n\t\tToken(asset).transfer(_to,_value); // transfer the sale asset\r\n\t}\r\n\r\n\tfunction transfer_eth(address _to, uint256 _value)\r\n\tonlyOwner()\r\n\t{\r\n            _to.send(_value); // owner can send ETH out. _value is in wei\r\n\t}\r\n\r\n   \tfunction () {\r\n\r\n\t\tuint order   = msg.value / price;\r\n\t\t\r\n\t\tif(order == 0) throw;\r\n\t\t\r\n\t\tuint256 balance = Token(asset).balanceOf(address(this));\r\n\t\t\r\n\t\tif(balance == 0) throw;\r\n\t\t\r\n\t\tif(order > balance )\r\n\t\t{\r\n\t\t    order = balance;\r\n\t\t    uint256 change = msg.value - order * price;\r\n\t\t    msg.sender.send(change);\r\n\t\t}\r\n\r\n\t\tToken(asset).transfer(msg.sender,order);\r\n    }\r\n}\r\n\r\n\r\ncontract TokenSaleFactory {\r\n    \r\n    event TokenSaleCreation(uint256 index, address saleAddress);\r\n\r\n    address[] public tokenSalesAll; // this public array stores all tokensales created\r\n\r\n    mapping (address => uint256[]) public tokenSalesByOwner; // this mapping stores an index in tokenSalesAll of all tokensales created by a specific address\r\n    mapping (address => uint256[]) public tokenSalesByAsset; // this mapping stores an index in tokenSalesAll of all tokensales for a particular subcurrency\r\n    \r\n    function createSale (address _asset, uint256 _price) returns (address) {\r\n        address c = new TokenSale(_asset,_price);       // Create a tokensale\r\n        TokenSale(c).transferOwnership(msg.sender);     // set the owner to whoever called the function\r\n        uint256 index = tokenSalesAll.push(c) -1;\r\n        tokenSalesByOwner[msg.sender].push(index);  \r\n        tokenSalesByAsset[msg.sender].push(index);\r\n        TokenSaleCreation(index,c);                       // alert interested client that a tokensale has been created\r\n    }\r\n    \r\n    function () {\r\n        throw;     // Prevents accidental sending of ether to the factory\r\n                   // Do not send subcurrency to the factory either as it will become trapped\r\n                   // you will send subcurrency to the TokenSale contracts this factory creates\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenSalesByOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenSalesAll\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_asset\",\"type\":\"address\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"createSale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenSalesByAsset\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"saleAddress\",\"type\":\"address\"}],\"name\":\"TokenSaleCreation\",\"type\":\"event\"}]","ContractName":"TokenSaleFactory","CompilerVersion":"v0.3.2-2016-04-22-dd4300d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}