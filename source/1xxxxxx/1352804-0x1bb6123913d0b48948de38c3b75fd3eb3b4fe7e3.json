{"status":"1","message":"OK","result":[{"SourceCode":"contract EtherAds {\r\n    // define some events\r\n    event BuyAd(address etherAddress, uint amount, string href, string anchor, string imgId, uint headerColor, uint8 countryId, address referral);\r\n    event ResetContract();\r\n    event PayoutEarnings(address etherAddress, uint amount, uint8 referralLevel);\r\n    struct Ad {\r\n        address etherAddress;\r\n        uint amount;\r\n        string href;\r\n        string anchor;\r\n        string imgId;\r\n        uint8 countryId;\r\n        int refId;\r\n    }\r\n    struct charityFundation {\r\n        string href;\r\n        string anchor;\r\n        string imgId;\r\n    }\r\n    charityFundation[] public charityFundations;\r\n    uint public charityFoundationIdx = 0;\r\n    string public officialWebsite;\r\n    Ad[] public ads;\r\n    uint public payoutIdx = 0;\r\n    uint public balance = 0;\r\n    uint public fees = 0;\r\n    uint public contractExpirationTime;\r\n    uint public headerColor = 0x000000;\r\n    uint public maximumDeposit = 42 ether;\r\n    // keep prices levels\r\n    uint[7] public txsThreshold = [10, 20, 50, 100, 200, 500, 1000];\r\n    // prolongate hours for each txs level\r\n    uint[8] public prolongH = [\r\n        336 hours, 168 hours, 67 hours, 33 hours,\r\n        16 hours, 6 hours, 3 hours, 1 hours\r\n    ];\r\n    // minimal deposits for each txs level\r\n    uint[8] public minDeposits = [\r\n        100 szabo, 400 szabo, 2500 szabo, 10 finney,\r\n        40 finney, 250 finney, 1 ether, 5 ether\r\n    ];\r\n    // this array stores number of txs per each hour\r\n    uint[24] public txsPerHour;\r\n    uint public lastHour; // store last hour for txs number calculation\r\n    uint public frozenMinDeposit = 0;\r\n    // owners\r\n    address[3] owners;\r\n    // simple onlyowners function modifier\r\n    modifier onlyowners {\r\n        if (msg.sender == owners[0] || msg.sender == owners[1] || msg.sender == owners[2]) _\r\n    }\r\n    // create contract with 3 owners\r\n    function EtherAds(address owner0, address owner1, address owner2) {\r\n        owners[0] = owner0;\r\n        owners[1] = owner1;\r\n        owners[2] = owner2;\r\n    }\r\n    // // dont allow to waste money\r\n    // function() {\r\n    //     // the creators are like Satoshi\r\n    //     // Bitcoin is important,\r\n    //     // but Ethereum is better :-)\r\n    //     throw;\r\n    // }\r\n    // buy add for charity fundation if just ethers was sent\r\n    function() {\r\n        buyAd(\r\n            charityFundations[charityFoundationIdx].href,\r\n            charityFundations[charityFoundationIdx].anchor,\r\n            charityFundations[charityFoundationIdx].imgId,\r\n            0xff8000,\r\n            0, // charity flag\r\n            msg.sender\r\n        );\r\n        charityFoundationIdx += 1;\r\n        if (charityFoundationIdx >= charityFundations.length) {\r\n            charityFoundationIdx = 0;\r\n        }\r\n    }\r\n    // buy add\r\n    function buyAd(string href, string anchor, string imgId, uint _headerColor, uint8 countryId, address referral) {\r\n        uint value = msg.value;\r\n        uint minimalDeposit = getMinimalDeposit();\r\n        // dont allow to get in with too low deposit\r\n        if (value < minimalDeposit) throw;\r\n        // dont allow to invest more than 42\r\n        if (value > maximumDeposit) {\r\n            msg.sender.send(value - maximumDeposit);\r\n            value = maximumDeposit;\r\n        }\r\n        // cancel buy if strings are too long\r\n        if (bytes(href).length > 100 || bytes(anchor).length > 50) throw;\r\n        // reset ads if last transaction reached outdateDuration\r\n        resetContract();\r\n        // store new ad id\r\n        uint id = ads.length;\r\n        // add new ad entry in storage\r\n        ads.length += 1;\r\n        ads[id].etherAddress = msg.sender;\r\n        ads[id].amount = value;\r\n        ads[id].href = href;\r\n        ads[id].imgId = imgId;\r\n        ads[id].anchor = anchor;\r\n        ads[id].countryId = countryId;\r\n        // add sent value to balance\r\n        balance += value;\r\n        // set header color\r\n        headerColor = _headerColor;\r\n        // call event\r\n        BuyAd(msg.sender, value, href, anchor, imgId, _headerColor, countryId, referral);\r\n        updateTxStats();\r\n        // find referral id in ads and keep its id in storage\r\n        setReferralId(id, referral);\r\n        distributeEarnings();\r\n    }\r\n    function prolongateContract() private {\r\n        uint level = getCurrentLevel();\r\n        contractExpirationTime = now + prolongH[level];\r\n    }\r\n    function getMinimalDeposit() returns (uint) {\r\n        uint txsThresholdIndex = getCurrentLevel();\r\n        if (minDeposits[txsThresholdIndex] > frozenMinDeposit) {\r\n            frozenMinDeposit = minDeposits[txsThresholdIndex];\r\n        }\r\n        return frozenMinDeposit;\r\n    }\r\n    function getCurrentLevel() returns (uint) {\r\n        uint txsPerLast24hours = 0;\r\n        uint i = 0;\r\n        while (i < 24) {\r\n            txsPerLast24hours += txsPerHour[i];\r\n            i += 1;\r\n        }\r\n        i = 0;\r\n        while (txsPerLast24hours > txsThreshold[i]) {\r\n            i = i + 1;\r\n        }\r\n        return i;\r\n    }\r\n    function updateTxStats() private {\r\n        uint currtHour = now / (60 * 60);\r\n        uint txsCounter = txsPerHour[currtHour];\r\n        if (lastHour < currtHour) {\r\n            txsCounter = 0;\r\n            lastHour = currtHour;\r\n        }\r\n        txsCounter += 1;\r\n        txsPerHour[currtHour] = txsCounter;\r\n    }\r\n    // distribute earnings to participants\r\n    function distributeEarnings() private {\r\n        // start infinite payout while ;)\r\n        while (true) {\r\n            // calculate doubled payout\r\n            uint amount = ads[payoutIdx].amount * 2;\r\n            // if balance is enough to pay participant\r\n            if (balance >= amount) {\r\n                // send earnings - fee to participant\r\n                ads[payoutIdx].etherAddress.send(amount / 100 * 80);\r\n                PayoutEarnings(ads[payoutIdx].etherAddress, amount / 100 * 80, 0);\r\n                // collect 15% fees\r\n                fees += amount / 100 * 15;\r\n                // calculate 5% 3-levels fees\r\n                uint level0Fee = amount / 1000 * 25; // 2.5%\r\n                uint level1Fee = amount / 1000 * 15; // 1.5%\r\n                uint level2Fee = amount / 1000 * 10; // 1.0%\r\n                // find \r\n                int refId = ads[payoutIdx].refId;\r\n                if (refId == -1) {\r\n                    // no refs, no fun :-)\r\n                    balance += level0Fee + level1Fee + level2Fee;\r\n                } else {\r\n                    ads[uint(refId)].etherAddress.send(level0Fee);\r\n                    PayoutEarnings(ads[uint(refId)].etherAddress, level0Fee, 1);\r\n                    \r\n                    refId = ads[uint(refId)].refId;\r\n                    if (refId == -1) {\r\n                        // no grand refs, no grand fun\r\n                        balance += level1Fee + level2Fee;\r\n                    } else {\r\n                        // have grand children :-)\r\n                        ads[uint(refId)].etherAddress.send(level1Fee);\r\n                        PayoutEarnings(ads[uint(refId)].etherAddress, level1Fee, 2);\r\n                     \r\n                        refId = ads[uint(refId)].refId;\r\n                        if (refId == -1) {\r\n                            // no grand grand refs, no grand grand fun (great grandfather - satoshi is drunk)\r\n                            balance += level2Fee;\r\n                        } else {\r\n                            // have grand grand children :-)\r\n                            ads[uint(refId)].etherAddress.send(level2Fee);\r\n                            PayoutEarnings(ads[uint(refId)].etherAddress, level2Fee, 3);\r\n                        }\r\n                    }\r\n                }\r\n                balance -= amount;\r\n                payoutIdx += 1;\r\n            } else {\r\n                // if there was no any payouts (too low balance), cancel while loop\r\n                // YOU CANNOT GET BLOOD OUT OF A STONE :-)\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    // check if contract is outdate which means there was no any transacions\r\n    // since (now - outdateDuration) seconds and its going to reset\r\n    function resetContract() private {\r\n        // like in bible, the last are the first :-)\r\n        if (now > contractExpirationTime) {\r\n            // pay 50% of balance to last investor\r\n            balance = balance / 2;\r\n            ads[ads.length-1].etherAddress.send(balance);\r\n            // clear ads storage\r\n            ads.length = 0;\r\n            // reset payout counter\r\n            payoutIdx = 0;\r\n            contractExpirationTime = now + 14 days;\r\n            frozenMinDeposit = 0;\r\n            // clear txs counter\r\n            uint i = 0;\r\n            while (i < 24) {\r\n                txsPerHour[i] = 0;\r\n                i += 1;\r\n            }\r\n            // call event\r\n            ResetContract();\r\n        }\r\n    }\r\n    // find and set referral Id\r\n    function setReferralId(uint id, address referral) private {\r\n        uint i = 0;\r\n        // if referral address will be not found than keep -1 value\r\n        // which means that ad purshared was not referred by anyone\r\n        int refId = -1;\r\n        // go through all ads and try to find referral address in this array\r\n        while (i < ads.length) {\r\n            // if ref was found end while\r\n            if (ads[i].etherAddress == referral) {\r\n                refId = int(i);\r\n                break;\r\n            }\r\n            i += 1;\r\n        }\r\n        // if ref was not found than we have -1 value here\r\n        ads[id].refId = refId;\r\n    }\r\n\r\n    // send fees to all contract owners\r\n    function collectFees() onlyowners {\r\n        if (fees == 0) return; // buy more ads\r\n        uint sharedFee = fees / 3;\r\n        uint i = 0;\r\n        while (i < 3) {\r\n            owners[i].send(sharedFee);\r\n            i += 1;\r\n        }\r\n        // reset fees counter\r\n        fees = 0;\r\n    }\r\n    // change single ownership\r\n    function changeOwner(address newOwner) onlyowners {\r\n        uint i = 0;\r\n        while (i < 3) {\r\n            // check if you are owner\r\n            if (msg.sender == owners[i]) {\r\n                // change ownership\r\n                owners[i] = newOwner;\r\n            }\r\n            i += 1;\r\n        }\r\n    }\r\n    // set official contract front-end website\r\n    function setOfficialWebsite(string url) onlyowners {\r\n        officialWebsite = url;\r\n    }\r\n    // add new charity foundation to the list\r\n    function addCharityFundation(string href, string anchor, string imgId) onlyowners {\r\n        uint id = charityFundations.length;\r\n        // add new ad entry in storage\r\n        charityFundations.length += 1;\r\n        charityFundations[id].href = href;\r\n        charityFundations[id].anchor = anchor;\r\n        charityFundations[id].imgId = imgId;\r\n    }\r\n    // clear charity foundations list, to make new one\r\n    function resetFoundationtList() onlyowners {\r\n        charityFundations.length = 0;\r\n    }\r\n    function giveMeat() onlyowners {\r\n        // add free financig to contract, lets FUN!\r\n        balance += msg.value;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ads\",\"outputs\":[{\"name\":\"etherAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"href\",\"type\":\"string\"},{\"name\":\"anchor\",\"type\":\"string\"},{\"name\":\"imgId\",\"type\":\"string\"},{\"name\":\"countryId\",\"type\":\"uint8\"},{\"name\":\"refId\",\"type\":\"int256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"charityFundations\",\"outputs\":[{\"name\":\"href\",\"type\":\"string\"},{\"name\":\"anchor\",\"type\":\"string\"},{\"name\":\"imgId\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"txsThreshold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"prolongH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"headerColor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"charityFoundationIdx\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractExpirationTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maximumDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"href\",\"type\":\"string\"},{\"name\":\"anchor\",\"type\":\"string\"},{\"name\":\"imgId\",\"type\":\"string\"},{\"name\":\"_headerColor\",\"type\":\"uint256\"},{\"name\":\"countryId\",\"type\":\"uint8\"},{\"name\":\"referral\",\"type\":\"address\"}],\"name\":\"buyAd\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getCurrentLevel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"frozenMinDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getMinimalDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"href\",\"type\":\"string\"},{\"name\":\"anchor\",\"type\":\"string\"},{\"name\":\"imgId\",\"type\":\"string\"}],\"name\":\"addCharityFundation\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fees\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payoutIdx\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"minDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"url\",\"type\":\"string\"}],\"name\":\"setOfficialWebsite\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"giveMeat\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"officialWebsite\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"collectFees\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"txsPerHour\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastHour\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resetFoundationtList\",\"outputs\":[],\"type\":\"function\"},{\"inputs\":[{\"name\":\"owner0\",\"type\":\"address\"},{\"name\":\"owner1\",\"type\":\"address\"},{\"name\":\"owner2\",\"type\":\"address\"}],\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"etherAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"href\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"anchor\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"imgId\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"headerColor\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"countryId\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"referral\",\"type\":\"address\"}],\"name\":\"BuyAd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ResetContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"etherAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"referralLevel\",\"type\":\"uint8\"}],\"name\":\"PayoutEarnings\",\"type\":\"event\"}]","ContractName":"EtherAds","CompilerVersion":"v0.3.1-2016-04-12-3ad5e82","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000057c2d5333ee18c6c593e95e64c47e1e83776ea31000000000000000000000000dc0c83b569f7aad0d93432ba2b41fdc3ff4121ba000000000000000000000000b4513f0c2711dca30d45df85e0404899ffe44f54","Library":"","SwarmSource":""}]}