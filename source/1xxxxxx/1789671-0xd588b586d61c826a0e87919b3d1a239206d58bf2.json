{"status":"1","message":"OK","result":[{"SourceCode":"// Ethereum Name Registrar as it should be!\r\n//\r\n// Written by Alexandre Naverniouk\r\n// twitter @AlexNa\r\n\r\n\r\ncontract EtherId {\r\n\r\nuint constant MAX_PROLONG = 2000000; // Maximum number of blocks to prolong the ownership. About one year.\r\n\r\nuint public n_domains = 0;      // total number of registered domains\r\nuint public root_domain = 0;    // name of the first domain in the linked list\r\naddress contract_owner = 0; //\r\n\r\nstruct Id {                     // Id record. Double linked list. Allows to delete ID\r\n    uint value;\r\n    uint next_id;\r\n    uint prev_id;\r\n}\r\n\r\nstruct Domain {                 // Domain record. Linked list. \r\n    address owner;              // Owner of the domain\r\n    uint expires;               // Expiration block namber\r\n    uint price;                 // Sale price ( 0 - not for sale )\r\n    address transfer;           // Address of the new owner\r\n    uint next_domain;           // Makes linked list for scanning\r\n    uint root_id;               // Name of the first ID in the list\r\n    mapping (uint => Id) ids;   // Map of the ID's\r\n}\r\n\r\nmapping (uint => Domain) domains; // Map of the domains\r\n\r\nfunction EtherId()\r\n{\r\n    contract_owner = msg.sender;\r\n}\r\n\r\nevent DomainChanged( address indexed sender, uint domain, uint id ); // Fired every time the registry is changed\r\n\r\nfunction getId( uint domain, uint id ) constant returns (uint v, uint next_id, uint prev_id )\r\n{\r\n    Id i = domains[domain].ids[id]; \r\n\r\n    v = i.value;\r\n    next_id = i.next_id;\r\n    prev_id = i.prev_id;\r\n}\r\n\r\nfunction getDomain( uint domain ) constant returns \r\n    (address owner, uint expires, uint price, address transfer, uint next_domain, uint root_id )\r\n{\r\n    Domain d = domains[ domain ];\r\n    \r\n    owner = d.owner;\r\n    expires = d.expires;\r\n    price = d.price;\r\n    transfer = d.transfer;\r\n    next_domain = d.next_domain;\r\n    root_id = d.root_id;    \r\n}\r\n\r\n\r\nfunction changeDomain( uint domain, uint expires, uint price, address transfer ) \r\n{\r\n    uint money_used = 0;            // How much was spent here\r\n\r\n    if( expires > MAX_PROLONG )     // Not prolong for too long\r\n    {\r\n        expires = MAX_PROLONG;\r\n    }\r\n    \r\n    if( domain == 0 ) throw;        // Prevents creating 0 domain\r\n\r\n    Domain d = domains[ domain ];\r\n\r\n    if( d.owner == 0 )              // 0 means the domain is not yet registered\r\n    { \r\n        d.owner = msg.sender;       // Simple calim\r\n        d.price = price;\r\n        d.transfer = transfer;\r\n        d.expires = block.number + expires;\r\n        \r\n        d.next_domain = root_domain;// Put the new domain into the linked list\r\n        root_domain = domain;\r\n        \r\n        //****************************************************************************\r\n        //*** SPECIAL CODE FOR TRANSFERING FIRST 32301 DOMAINS INTO THE NEW CONTRACT\r\n        if( msg.sender == contract_owner && n_domains < 32301 && transfer != 0 ) { \r\n            d.owner = transfer; // immediately transfer the ownership to the old owner\r\n            d.transfer = 0;\r\n        }\r\n        //****************************************************************************\r\n        \r\n        \r\n        n_domains = n_domains + 1;\r\n        DomainChanged( msg.sender, domain, 0 );\r\n    }\r\n    else                            // The domain already has an owner\r\n    {\r\n        if( d.owner == msg.sender || block.number > d.expires ) { // If it is yours or expired, you have all rights to change\r\n            d.owner = msg.sender;   // Possible change of the ownershp if expired\r\n            d.price = price;\r\n            d.transfer = transfer;\r\n            d.expires = block.number + expires;\r\n            DomainChanged( msg.sender, domain, 0 );\r\n        }\r\n        else                        // Not yours and not expired\r\n        {\r\n            if( d.transfer != 0 ) { // The new owner is specified and ...\r\n                if( d.transfer == msg.sender && msg.value >= d.price ) // ... it is you and enought money \r\n                {\r\n                    if( d.price > 0 ) \r\n                    { \r\n                        if( address( d.owner ).send( d.price ) ) // The money goes to the owner\r\n                        {\r\n                            money_used = d.price;   // remember how much spent\r\n                        }\r\n                        else throw; // problem with send()\r\n                    }\r\n\r\n                    d.owner = msg.sender;   // Change the ownership\r\n                    d.price = price;        // New price\r\n                    d.transfer = transfer;  // New transfer\r\n                    d.expires = block.number + expires; //New expiration\r\n                    DomainChanged( msg.sender, domain, 0 );\r\n                }\r\n            } \r\n            else  // not set for transfer, but...\r\n            {\r\n                if( d.price > 0 &&  msg.value >= d.price ) // ... on sale, and enough money\r\n                {\r\n                    if( address( d.owner ).send( d.price ) ) // The money goes to the owner\r\n                    {\r\n                        money_used = d.price; // remember how much spent\r\n                    }\r\n                    else throw; // problem with send()\r\n\r\n                    d.owner = msg.sender;   // Change the ownership\r\n                    d.price = price;        // New price\r\n                    d.transfer = transfer;  // New transfer\r\n                    d.expires = block.number + expires; // New expiration\r\n                    DomainChanged( msg.sender, domain, 0 );\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    if( msg.value > money_used ) // If transaction has more money than was needed\r\n    {\r\n        if( !msg.sender.send( msg.value - money_used ) ) throw; // We do not need your leftover\r\n    }\r\n}\r\n\r\nfunction changeId( uint domain, uint name, uint value ) {\r\n\r\n    if( domain == 0 ) throw;        // Prevents creating 0 domain\r\n    if( name == 0 ) throw;          // Prevents creating 0 id\r\n    \r\n    Domain d = domains[ domain ];\r\n\r\n    if( d.owner == msg.sender )     // Only owner can change the ID\r\n    {\r\n        Id id = d.ids[ name ];\r\n\r\n        if( id.value == 0 ) {       // 0 means the ID was not found\r\n            if( value != 0 ) {      // Only add non zero values\r\n                id.value = value;   \r\n                id.next_id = d.root_id; // Put into the head of the list\r\n                // id.prev_id = 0;  // 0 is the default, no need to assign\r\n                \r\n                if( d.root_id != 0 ) \r\n                {\r\n                    d.ids[ d.root_id ].prev_id = name; // link the next ID back\r\n                }\r\n\r\n                d.root_id = name;   \r\n                DomainChanged( msg.sender, domain, name );\r\n            }\r\n        }\r\n        else                        // The ID was found\r\n        {\r\n            if( value != 0 )        // Simple change of the value\r\n            {\r\n                id.value = value;\r\n                DomainChanged( msg.sender, domain, name );\r\n            }\r\n            else                    // Deleting the ID\r\n            {\r\n                if( id.prev_id != 0 ) // Modify the double linked list\r\n                {\r\n                    d.ids[ id.prev_id ].next_id = id.next_id;   \r\n                }\r\n                else\r\n                {\r\n                    d.root_id = id.next_id;\r\n                }\r\n\r\n                if( id.next_id != 0 )\r\n                {\r\n                    d.ids[ id.next_id ].prev_id = id.prev_id;   \r\n                }\r\n                \r\n                id.prev_id = 0;   // Clear the storage\r\n                id.next_id = 0;   \r\n                id.value = 0;   \r\n                DomainChanged( msg.sender, domain, name );\r\n            }\r\n        }\r\n    }\r\n    \r\n    if( msg.value > 0 ) // If transaction has any money...\r\n    {\r\n        if( !msg.sender.send( msg.value ) ) throw; // ... it is a mistake, so send it back\r\n    }\r\n}\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"root_domain\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"domain\",\"type\":\"uint256\"}],\"name\":\"getDomain\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"expires\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"transfer\",\"type\":\"address\"},{\"name\":\"next_domain\",\"type\":\"uint256\"},{\"name\":\"root_id\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"n_domains\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"domain\",\"type\":\"uint256\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getId\",\"outputs\":[{\"name\":\"v\",\"type\":\"uint256\"},{\"name\":\"next_id\",\"type\":\"uint256\"},{\"name\":\"prev_id\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"domain\",\"type\":\"uint256\"},{\"name\":\"expires\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"transfer\",\"type\":\"address\"}],\"name\":\"changeDomain\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"domain\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"uint256\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"changeId\",\"outputs\":[],\"type\":\"function\"},{\"inputs\":[],\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"domain\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"DomainChanged\",\"type\":\"event\"}]","ContractName":"EtherId","CompilerVersion":"v0.3.5-2016-06-21-b23c300","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}