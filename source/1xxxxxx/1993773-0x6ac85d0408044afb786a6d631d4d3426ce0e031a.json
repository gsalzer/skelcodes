{"status":"1","message":"OK","result":[{"SourceCode":"contract DAO {\r\n    function balanceOf(address addr) returns (uint);\r\n    function transferFrom(address from, address to, uint balance) returns (bool);\r\n    function getNewDAOAddress(uint _proposalID) constant returns(address _newDAO);\r\n    uint public totalSupply;\r\n}\r\n\r\n/**\r\n * @title untrustedChildWithdraw\r\n * @author Paul Szczesny, Alexey Akhunov\r\n * A withdraw contract for untrusted childDAOs affected by the hard fork.\r\n * Based on the official WithdrawDAO contract found here: https://etherscan.io/address/0xbf4ed7b27f1d666546e30d74d50d173d20bca754#code\r\n */\r\ncontract untrustedChildWithdraw {\r\n\r\n  struct childDAO {\r\n\t  DAO dao;\r\n    uint numerator;\r\n\t}\r\n\r\n  DAO constant public mainDAO = DAO(0xbb9bc244d798123fde783fcc1c72d3bb8c189413);\r\n  uint[] public untrustedProposals = [35, 36, 53, 62, 67, 68, 70, 71, 73, 76, 87];\r\n  uint public ratioDenominator = 1000000000;\r\n  uint[] public untrustedTokenNumerator = [1458321331, 1458321331, 1399760834, 1457994374, 1457994374, 1146978827, 1457994374, 1458321336, 1458307000, 1458328768, 1458376290];\r\n  mapping (uint => childDAO) public whiteList;\r\n\r\n  /**\r\n  * Populates the whiteList based on the list of trusted proposal Ids.\r\n  */\r\n  function untrustedChildWithdraw() {\r\n      for(uint i=0; i<untrustedProposals.length; i++) {\r\n          uint proposalId = untrustedProposals[i];\r\n          whiteList[proposalId] = childDAO(DAO(mainDAO.getNewDAOAddress(proposalId)), untrustedTokenNumerator[i]);\r\n      }\r\n  }\r\n\r\n  /**\r\n  * Convienience function for the Curator to calculate the required amount of Wei\r\n  * that needs to be transferred to this contract.\r\n  */\r\n  function requiredEndowment() constant returns (uint endowment) {\r\n      uint sum = 0;\r\n      for(uint i=0; i<untrustedProposals.length; i++) {\r\n          uint proposalId = untrustedProposals[i];\r\n          DAO child = whiteList[proposalId].dao;\r\n          sum += (child.totalSupply() * (untrustedTokenNumerator[i] / ratioDenominator) );\r\n      }\r\n      return sum;\r\n  }\r\n\r\n  /**\r\n   * Function call to withdraw ETH by burning childDao tokens.\r\n   * @param proposalId The split proposal ID which created the childDao\r\n   * @dev This requires that the token-holder authorizes this contract's address using the approve() function.\r\n   */\r\n  function withdraw(uint proposalId) {\r\n    //Check the token balance\r\n    uint balance = whiteList[proposalId].dao.balanceOf(msg.sender);\r\n    uint adjustedBalance = balance * (whiteList[proposalId].numerator / ratioDenominator);\r\n\r\n    // Transfer childDao tokens first, then send Ether back in return\r\n    if (!whiteList[proposalId].dao.transferFrom(msg.sender, this, balance) || !msg.sender.send(adjustedBalance))\r\n      throw;\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"untrustedProposals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ratioDenominator\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"whiteList\",\"outputs\":[{\"name\":\"dao\",\"type\":\"address\"},{\"name\":\"numerator\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"untrustedTokenNumerator\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mainDAO\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requiredEndowment\",\"outputs\":[{\"name\":\"endowment\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"inputs\":[],\"type\":\"constructor\"}]","ContractName":"untrustedChildWithdraw","CompilerVersion":"v0.3.5-2016-07-21-6610add","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}