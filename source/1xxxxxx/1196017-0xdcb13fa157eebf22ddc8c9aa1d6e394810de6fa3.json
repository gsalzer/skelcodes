{"status":"1","message":"OK","result":[{"SourceCode":"contract PiggyBank {\r\n\r\n  struct InvestorArray {\r\n      address etherAddress;\r\n      uint amount;\r\n  }\r\n\r\n  InvestorArray[] public investors;\r\n\r\n  uint public k = 0;\r\n  uint public fees;\r\n  uint public balance = 0;\r\n  address public owner;\r\n\r\n  // simple single-sig function modifier\r\n  modifier onlyowner { if (msg.sender == owner) _ }\r\n\r\n  // this function is executed at initialization and sets the owner of the contract\r\n  function PiggyBank() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  // fallback function - simple transactions trigger this\r\n  function() {\r\n    enter();\r\n  }\r\n  \r\n  function enter() {\r\n    if (msg.value < 50 finney) {\r\n        msg.sender.send(msg.value);\r\n        return;\r\n    }\r\n\t\r\n    uint amount=msg.value;\r\n\r\n\r\n    // add a new participant to array\r\n    uint total_inv = investors.length;\r\n    investors.length += 1;\r\n    investors[total_inv].etherAddress = msg.sender;\r\n    investors[total_inv].amount = amount;\r\n    \r\n    // collect fees and update contract balance\r\n \r\n      fees += amount / 33;             // 3% Fee\r\n      balance += amount;               // balance update\r\n\r\n\r\n     if (fees != 0) \r\n     {\r\n     \tif(balance>fees)\r\n\t{\r\n      \towner.send(fees);\r\n      \tbalance -= fees;                 //balance update\r\n\t}\r\n     }\r\n \r\n\r\n   // 4% interest distributed to the investors\r\n    uint transactionAmount;\r\n\t\r\n    while (balance > investors[k].amount * 3/100 && k<total_inv)  //exit condition to avoid infinite loop\r\n    { \r\n     \r\n     if(k%25==0 &&  balance > investors[k].amount * 9/100)\r\n     {\r\n      transactionAmount = investors[k].amount * 9/100;  \r\n      investors[k].etherAddress.send(transactionAmount);\r\n      balance -= investors[k].amount * 9/100;                      //balance update\r\n      }\r\n     else\r\n     {\r\n      transactionAmount = investors[k].amount *3/100;  \r\n      investors[k].etherAddress.send(transactionAmount);\r\n      balance -= investors[k].amount *3/100;                         //balance update\r\n      }\r\n      \r\n      k += 1;\r\n    }\r\n    \r\n    //----------------end enter\r\n  }\r\n\r\n\r\n\r\n  function setOwner(address new_owner) onlyowner {\r\n      owner = new_owner;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"new_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investors\",\"outputs\":[{\"name\":\"etherAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fees\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"k\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enter\",\"outputs\":[],\"type\":\"function\"},{\"inputs\":[],\"type\":\"constructor\"}]","ContractName":"PiggyBank","CompilerVersion":"v0.2.2-2016-03-10-34d714f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}