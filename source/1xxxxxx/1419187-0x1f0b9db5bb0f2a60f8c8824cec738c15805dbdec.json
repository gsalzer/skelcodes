{"status":"1","message":"OK","result":[{"SourceCode":"contract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }\r\n\r\n    contract Nexium { \r\n        /* Public variables of the token */\r\n        string public name;\r\n        string public symbol;\r\n        uint8 public decimals;\r\n\r\n        /* This creates an array with all balances */\r\n        mapping (address => uint256) public balanceOf;\r\n        mapping (address => mapping (address => uint)) public allowance;\r\n        mapping (address => mapping (address => uint)) public spentAllowance;\r\n\r\n        /* This generates a public event on the blockchain that will notify clients */\r\n        event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n        /* Initializes contract with initial supply tokens to the creator of the contract */\r\n        function Nexium() {\r\n            balanceOf[msg.sender] = 100000000000;              // Give the creator all initial tokens                    \r\n            name = 'Nexium';                                   // Set the name for display purposes     \r\n            symbol = 'NxC';                               // Set the symbol for display purposes    \r\n            decimals = 3;                            // Amount of decimals for display purposes        \r\n        }\r\n\r\n        /* Send coins */\r\n        function transfer(address _to, uint256 _value) {\r\n            if (balanceOf[msg.sender] < _value) throw;           // Check if the sender has enough   \r\n            if (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows\r\n            balanceOf[msg.sender] -= _value;                     // Subtract from the sender\r\n            balanceOf[_to] += _value;                            // Add the same to the recipient            \r\n            Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\r\n        }\r\n\r\n        /* Allow another contract to spend some tokens in your behalf */\r\n\r\n        function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\r\n            allowance[msg.sender][_spender] = _value;     \r\n            tokenRecipient spender = tokenRecipient(_spender);\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n\t\t\t\r\n\t\t\treturn true;\r\n        }\r\n\r\n        /* A contract attempts to get the coins */\r\n\r\n        function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n            if (balanceOf[_from] < _value) throw;                 // Check if the sender has enough   \r\n            if (balanceOf[_to] + _value < balanceOf[_to]) throw;  // Check for overflows\r\n            if (spentAllowance[_from][msg.sender] + _value > allowance[_from][msg.sender]) throw;   // Check allowance\r\n            balanceOf[_from] -= _value;                          // Subtract from the sender\r\n            balanceOf[_to] += _value;                            // Add the same to the recipient            \r\n            spentAllowance[_from][msg.sender] += _value;\r\n            Transfer(msg.sender, _to, _value); \r\n\t\t\t\r\n\t\t\treturn true;\r\n        } \r\n\r\n        /* This unnamed function is called whenever someone tries to send ether to it */\r\n        function () {\r\n            throw;     // Prevents accidental sending of ether\r\n        }        \r\n    }","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"spentAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"inputs\":[],\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"Nexium","CompilerVersion":"v0.3.1-2016-04-12-3ad5e82","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}