{"status":"1","message":"OK","result":[{"SourceCode":"contract dEthereumlotteryNet {\r\n\t/*\r\n\t\tdEthereumlotteryNet\r\n\t\tCoded by: iFA\r\n\t\thttps://d.ethereumlottery.net\r\n\t\tver: 1.0.0\r\n\t*/\r\n\taddress private owner;\r\n\tuint private constant fee = 5;\r\n\tuint private constant investorFee = 50;\r\n\tuint private constant prepareBlockDelay = 4;\r\n\tuint private constant rollLossBlockDelay = 30;\r\n\tuint private constant investUnit = 1 ether;\r\n\tuint private constant extraDifficulty = 130;\r\n\tuint private constant minimumRollPrice = 10 finney;\r\n\tuint private constant minimumRollDiv = 10;\r\n\tuint private constant difficultyMultipler = 1000000;\r\n\tuint private constant investMinDuration = 1 days;\r\n\t\r\n    bool public ContractEnabled = true;\r\n    uint public ContractDisabledBlock;\r\n\tuint public Jackpot;\r\n\tuint public RollCount;\r\n\tuint public JackpotHits;\r\n\t\r\n\tuint private jackpot_;\r\n\tuint private extraJackpot_;\r\n\tuint private feeValue;\r\n\t\r\n\tstruct rolls_s {\r\n\t\tuint blockNumber;\r\n\t\tbytes32 extraHash;\r\n\t\tbool valid;\r\n\t\tuint value;\r\n\t\tuint game;\r\n\t}\r\n\t\r\n\tmapping(address => rolls_s[]) private players;\r\n\t\r\n\tstruct investors_s {\r\n\t\taddress owner;\r\n\t\tuint value;\r\n\t\tuint balance;\r\n\t\tbool live;\r\n\t\tbool valid;\r\n\t\tuint timestamp;\r\n\t}\r\n\t\r\n\tinvestors_s[] investors;\r\n\t\r\n\tstring constant public Information = \"https://d.ethereumlottery.net\";\r\n\t\r\n\tfunction ChanceOfWinning(uint Bet) constant returns(uint Rate) {\r\n\t\tRate = getDifficulty(Bet);\r\n\t\tif (Bet < minimumRollPrice) { Rate = 0; }\r\n\t\tif (jackpot_/minimumRollDiv < Bet) { Rate = 0; }\r\n\t}\r\n\tfunction BetPriceLimit() constant returns(uint min,uint max) {\r\n\t\tmin = minimumRollPrice;\r\n\t\tmax = jackpot_/minimumRollDiv;\r\n\t}\r\n\tfunction Investors(uint id) constant returns(address Owner, uint Investment, uint Balance, bool Live) {\r\n\t\tif (id < investors.length) {\r\n\t\t\tOwner = investors[id].owner;\r\n\t\t\tInvestment = investors[id].value;\r\n\t\t\tBalance = investors[id].balance;\r\n\t\t\tLive = investors[id].live;\r\n\t\t} else {\r\n\t\t\tOwner = 0;\r\n\t\t\tInvestment = 0;\r\n\t\t\tBalance = 0;\r\n\t\t\tLive = false;\r\n\t\t}\r\n\t}\r\n\tfunction dEthereumlotteryNet() {\r\n\t\towner = msg.sender;\r\n\t}\r\n\tfunction Invest() OnlyEnabled external {\r\n\t\tuint value_ = msg.value;\r\n\t\tif (value_ < investUnit) { throw; }\r\n\t\tif (value_ % investUnit > 0) { \r\n\t\t\tif (msg.sender.send(value_ % investUnit) == false) { throw; } \r\n\t\t\tvalue_ = value_ - (value_ % investUnit);\r\n\t\t}\r\n\t\tfor ( uint a=0 ; a < investors.length ; a++ ) {\r\n\t\t\tif (investors[a].valid == false) {\r\n\t\t\t\tnewInvest(a,msg.sender,value_);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t\tinvestors.length++;\r\n\t\tnewInvest(investors.length-1,msg.sender,value_);\r\n\t}\r\n\tfunction newInvest(uint investorsID, address investor, uint value) private {\r\n\t\tinvestors[investorsID].owner = investor;\r\n\t\tinvestors[investorsID].value = value;\r\n\t\tinvestors[investorsID].balance = 0;\r\n\t\tinvestors[investorsID].valid = true;\r\n\t\tinvestors[investorsID].live = true;\r\n\t\tinvestors[investorsID].timestamp = now + investMinDuration;\r\n\t\tjackpot_ += value;\r\n\t\tsetJackpot();\r\n\t}\r\n\tfunction GetMyInvestFee() external {\r\n\t\treFund();\r\n\t\tuint balance_;\r\n\t\tfor ( uint a=0 ; a < investors.length ; a++ ) {\r\n\t\t\tif (investors[a].owner == msg.sender && investors[a].valid == true) {\r\n\t\t\t\tbalance_ = investors[a].balance;\r\n\t\t\t\tinvestors[a].valid = false;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (balance_ > 0) { if (msg.sender.send(balance_) == false) { throw; } }\r\n\t}\r\n\tfunction CancelMyInvest() external {\r\n\t\treFund();\r\n\t\tuint balance_;\r\n\t\tfor ( uint a=0 ; a < investors.length ; a++ ) {\r\n\t\t\tif (investors[a].owner == msg.sender && investors[a].valid == true && investors[a].timestamp < now) {\r\n\t\t\t\tif (investors[a].live == true) {\r\n\t\t\t\t\tbalance_ = investors[a].value + investors[a].balance;\r\n\t\t\t\t\tjackpot_ -= investors[a].value;\r\n\t\t\t\t\tdelete investors[a];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tbalance_ = investors[a].balance;\r\n\t\t\t\t\tdelete investors[a];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tsetJackpot();\r\n\t\tif (balance_ > 0) { if (msg.sender.send(balance_) == false) { throw; } }\r\n\t}\r\n\tfunction setJackpot() private {\r\n\t\tJackpot = extraJackpot_ + jackpot_;\r\n\t}\r\n\tfunction DoRoll() external {\r\n\t\treFund();\r\n\t\tuint value_;\r\n\t\tbool found;\r\n\t\tfor ( uint a=0 ; a < players[msg.sender].length ; a++ ) {\r\n\t\t\tif (players[msg.sender][a].valid == true) {\r\n\t\t\t    if (players[msg.sender][a].blockNumber+rollLossBlockDelay <= block.number) {\r\n\t\t\t        uint feeValue_ = players[msg.sender][a].value/2;\r\n\t\t\t        feeValue += feeValue_;\r\n\t\t\t        investorAddFee(players[msg.sender][a].value - feeValue_);\r\n\t\t\t\t\tdelete players[msg.sender][a];\r\n\t\t\t\t\tfound = true;\r\n\t\t\t\t\tcontinue;\r\n\t\t\t    }\r\n\t\t\t\tif (ContractEnabled == false || jackpot_ == 0 || players[msg.sender][a].game != JackpotHits) {\r\n\t\t\t\t\tvalue_ += players[msg.sender][a].value;\r\n\t\t\t\t\tdelete players[msg.sender][a];\r\n\t\t\t\t\tfound = true;\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tif (players[msg.sender][a].blockNumber < block.number) {\r\n\t\t\t\t\tvalue_ += makeRoll(a);\r\n\t\t\t\t\tdelete players[msg.sender][a];\r\n\t\t\t\t\tfound = true;\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (value_ > 0) { if (msg.sender.send(value_) == false) { throw; } }\r\n\t\tif (found == false) { throw; }\r\n\t}\r\n\tevent RollEvent(address Player,uint Difficulty, uint Result, uint Number, uint Win);\r\n\tfunction makeRoll(uint id) private returns(uint win) {\r\n\t\tuint feeValue_ = players[msg.sender][id].value * fee / 100 ;\r\n\t\tfeeValue += feeValue_;\r\n\t\tuint investorFee_ = players[msg.sender][id].value * investorFee / 100;\r\n\t\tinvestorAddFee(investorFee_);\r\n\t\textraJackpot_ += players[msg.sender][id].value - feeValue_ - investorFee_;\r\n\t\tsetJackpot();\r\n\t\tbytes32 hash_ = players[msg.sender][id].extraHash;\r\n\t\tfor ( uint a = 1 ; a <= prepareBlockDelay ; a++ ) {\r\n\t\t\thash_ = sha3(hash_, block.blockhash(players[msg.sender][id].blockNumber - prepareBlockDelay+a));\r\n\t\t}\r\n\t\tuint difficulty_ = getDifficulty(players[msg.sender][id].value);\r\n\t\tuint bigNumber = uint64(hash_);\r\n\t\tif (bigNumber * difficultyMultipler % difficulty_ == 0) {\r\n\t\t\twin = Jackpot;\r\n\t\t\tfor ( a=0 ; a < investors.length ; a++ ) {\r\n\t\t\t\tinvestors[a].live = false;\r\n\t\t\t}\r\n\t\t\tJackpotHits++;\r\n\t\t\textraJackpot_ = 0;\r\n\t\t\tjackpot_ = 0;\r\n\t\t\tJackpot = 0;\r\n\t\t}\r\n\t\tRollEvent(msg.sender, difficulty_, bigNumber * difficultyMultipler % difficulty_, bigNumber * difficultyMultipler,win);\r\n\t\tdelete players[msg.sender][id];\r\n\t}\r\n\tfunction getDifficulty(uint value) private returns(uint){\r\n\t\treturn jackpot_ * difficultyMultipler / value * 100 / investorFee * extraDifficulty / 100;\r\n\t}\r\n\tfunction investorAddFee(uint value) private {\r\n\t\tfor ( uint a=0 ; a < investors.length ; a++ ) {\r\n\t\t\tif (investors[a].live == true) {\r\n\t\t\t\tinvestors[a].balance += value * investors[a].value / jackpot_;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tevent PrepareRollEvent(address Player, uint Block);\r\n\tfunction prepareRoll(uint rollID, uint seed) private {\r\n\t\tplayers[msg.sender][rollID].blockNumber = block.number + prepareBlockDelay;\r\n\t\tplayers[msg.sender][rollID].extraHash = sha3(RollCount, now, seed);\r\n\t\tplayers[msg.sender][rollID].valid = true;\r\n\t\tplayers[msg.sender][rollID].value = msg.value;\r\n\t\tplayers[msg.sender][rollID].game = JackpotHits;\r\n\t\tRollCount++;\r\n\t\tPrepareRollEvent(msg.sender, players[msg.sender][rollID].blockNumber);\r\n\t}\r\n\tfunction PrepareRoll(uint seed) OnlyEnabled {\r\n\t\tif (msg.value < minimumRollPrice) { throw; }\r\n\t\tif (jackpot_/minimumRollDiv < msg.value) { throw; }\r\n\t\tif (jackpot_ == 0) { throw; }\r\n\t\tfor (uint a = 0 ; a < players[msg.sender].length ; a++) {\r\n\t\t\tif (players[msg.sender][a].valid == false) {\r\n\t\t\t\tprepareRoll(a,seed);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t\tplayers[msg.sender].length++;\r\n\t\tprepareRoll(players[msg.sender].length-1,seed);\r\n\t}\r\n\tfunction () {\r\n\t\tPrepareRoll(0);\r\n\t}\r\n\tfunction reFund() private { if (msg.value > 0) { if (msg.sender.send(msg.value) == false) { throw; } } }\r\n\tfunction OwnerCloseContract() external OnlyOwner {\r\n\t\treFund();\r\n\t\tif (ContractEnabled == false) {\r\n\t\t    if (ContractDisabledBlock < block.number) {\r\n\t\t        uint balance_ = this.balance;\r\n\t\t        for ( uint a=0 ; a < investors.length ; a++ ) {\r\n\t\t            balance_ -= investors[a].balance;\r\n\t\t        }\r\n\t\t        if (balance_ > 0) {\r\n                    if (msg.sender.send(balance_) == false) { throw; }\r\n\t\t        }\r\n\t\t    }\r\n\t\t} else {\r\n    \t\tContractEnabled = false;\r\n    \t\tContractDisabledBlock = block.number+rollLossBlockDelay;\r\n    \t\tfeeValue += extraJackpot_;\r\n    \t\textraJackpot_ = 0;\r\n\t\t}\r\n\t}\r\n\tfunction OwnerGetFee() external OnlyOwner {\r\n\t\treFund();\r\n\t\tif (feeValue == 0) { throw; }\r\n\t\tif (owner.send(feeValue) == false) { throw; }\r\n\t\tfeeValue = 0;\r\n\t}\r\n\tmodifier OnlyOwner() { if (owner != msg.sender) { throw; } _ }\r\n\tmodifier OnlyEnabled() { if (!ContractEnabled) { throw; } _\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"Bet\",\"type\":\"uint256\"}],\"name\":\"ChanceOfWinning\",\"outputs\":[{\"name\":\"Rate\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"GetMyInvestFee\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"CancelMyInvest\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"seed\",\"type\":\"uint256\"}],\"name\":\"PrepareRoll\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Information\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"DoRoll\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"JackpotHits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"OwnerCloseContract\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Jackpot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BetPriceLimit\",\"outputs\":[{\"name\":\"min\",\"type\":\"uint256\"},{\"name\":\"max\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ContractEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Invest\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ContractDisabledBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RollCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"OwnerGetFee\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Investors\",\"outputs\":[{\"name\":\"Owner\",\"type\":\"address\"},{\"name\":\"Investment\",\"type\":\"uint256\"},{\"name\":\"Balance\",\"type\":\"uint256\"},{\"name\":\"Live\",\"type\":\"bool\"}],\"type\":\"function\"},{\"inputs\":[],\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"Player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"Difficulty\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"Result\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"Number\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"Win\",\"type\":\"uint256\"}],\"name\":\"RollEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"Player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"Block\",\"type\":\"uint256\"}],\"name\":\"PrepareRollEvent\",\"type\":\"event\"}]","ContractName":"dEthereumlotteryNet","CompilerVersion":"v0.2.2-2016-02-19-3738107","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}