{"status":"1","message":"OK","result":[{"SourceCode":"contract JackPot {\r\n    address public host;\r\n\tuint minAmount;\r\n    uint[] public contributions;\r\n    address[] public contributors;\r\n\tuint public numPlayers;\r\n\tuint public nextDraw;\r\n\tbytes32 public seedHash;\r\n\tbytes32 random;\t\r\n\r\n    struct Win {\r\n        address winner;\r\n        uint timestamp;\r\n        uint contribution;\r\n\t\tuint amountWon;\r\n    }\r\n\r\n    Win[] public recentWins;\r\n    uint recentWinsCount = 10;\r\n\t\r\n\tfunction insert_contribution(address addr, uint value) internal {\r\n\t\t// check if array needs extending\r\n\t\tif(numPlayers == contributions.length) {\r\n\t\t\t// extend the arrays\r\n\t\t\tcontributions.length += 1;\r\n\t\t\tcontributors.length += 1;\r\n\t\t}\r\n\t\tcontributions[numPlayers] = value;\r\n\t\tcontributors[numPlayers++] = addr;\r\n\t}\r\n\t\r\n\tfunction getContributions(address addr) constant returns (uint) {\r\n        uint i;\r\n        for (i=0; i < numPlayers; i++) {\r\n\t\t\tif (contributors[i] == addr) { // if in the list already\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif(i == numPlayers) { // Did not find sender already in the list\r\n            return 0;\r\n        } else {\r\n\t\t\treturn contributions[i];\r\n\t\t}\r\n    }\r\n\t\r\n\tfunction JackPot() {\r\n        host = msg.sender;\r\n\t\tseedHash = sha3('aaaa');\r\n\t\tminAmount = 10 * 1 finney;\r\n        recentWinsCount = 10;\r\n\t\tnextDraw = 1234;\r\n    }\r\n\r\n    function() {\r\n        addToContribution();\r\n    }\r\n\r\n    function addToContribution() {\r\n        addValueToContribution(msg.value);\r\n    }\r\n\r\n    function addValueToContribution(uint value) internal {\r\n        // First, make sure this is a valid transaction.\r\n        if(value < minAmount) throw;\r\n\t    uint i;\r\n        for (i=0; i < numPlayers; i++) {\r\n\t\t\tif (contributors[i] == msg.sender) { // Already contributed?\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif(i == numPlayers) { // Did not find sender already in the list\r\n\t\t\tinsert_contribution(msg.sender, value);\r\n        } else {\r\n\t\t\tcontributions[i]+= value; // Update amount\r\n\t\t}\r\n\t\t\r\n\t\trandom = sha3(random, block.blockhash(block.number - 1));\t\t\r\n    }\r\n\t\r\n\t//drawPot triggered from Host after time has passed or pot is matured.\r\n\tfunction drawPot(string seed, string newSeed) {\r\n\t\tif(msg.sender != host) throw;\r\n\t\tif (sha3(seed) == seedHash) {\r\n\t\t\t\r\n\t\t\t// Initialize seedHash for next draw\r\n\t\t\tseedHash = sha3(newSeed);\r\n\t\t\t// Choose a winner using the seed as random\r\n\t\t\tuint winner_index = selectWinner(seed);\r\n\r\n\t\t\t// Send the developer a 1% fee\r\n\t\t\thost.send(this.balance / 100);\r\n\t\t\t\r\n\t\t\tuint amountWon = this.balance; \r\n\t\t\t\r\n\t\t\t// Send the winner the remaining balance on the contract.\r\n\t\t\tcontributors[winner_index].send(this.balance);\r\n\t\t\t\r\n\t\t\t// Make a note that someone won, then start all over!\r\n\t\t\trecordWin(winner_index, amountWon);\r\n\r\n\t\t\treset();\r\n\t\t\tnextDraw = now + 7 days;\t\r\n\r\n\t\t}\r\n\t}\r\n\r\n\tfunction setDrawDate(uint _newDraw) {\r\n\t\tif(msg.sender != host) throw;\r\n\t\tnextDraw = _newDraw;\r\n\t}\r\n\t\r\n\t\r\n    function selectWinner(string seed) internal returns (uint winner_index) {\r\n\r\n        uint semirandom = uint(sha3(random, seed)) % this.balance;\r\n        for(uint i = 0; i < numPlayers; ++i) {\r\n            if(semirandom < contributions[i]) return i;\r\n            semirandom -= contributions[i];\r\n        }\r\n    }\r\n\r\n    function recordWin(uint winner_index, uint amount) internal {\r\n        if(recentWins.length < recentWinsCount) {\r\n            recentWins.length++;\r\n        } else {\r\n            // Already at capacity for the number of winners to remember.\r\n            // Forget the oldest one by shifting each entry 'left'\r\n            for(uint i = 0; i < recentWinsCount - 1; ++i) {\r\n                recentWins[i] = recentWins[i + 1];\r\n            }\r\n        }\r\n\r\n        recentWins[recentWins.length - 1] = Win(contributors[winner_index], block.timestamp, contributions[winner_index], amount);\r\n    }\r\n\r\n    function reset() internal {\r\n        // Clear the lists with min gas after the draw.\r\n\t\tnumPlayers = 0;\r\n    }\r\n\r\n\r\n    /* This should only be needed if a bug is discovered\r\n    in the code and the contract must be destroyed. */\r\n    function destroy() {\r\n        if(msg.sender != host) throw;\r\n\r\n        // Refund everyone's contributions.\r\n        for(uint i = 0; i < numPlayers; ++i) {\r\n            contributors[i].send(contributions[i]);\r\n        }\r\n\r\n\t\treset();\r\n        selfdestruct(host);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contributions\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextDraw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contributors\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getContributions\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"seed\",\"type\":\"string\"},{\"name\":\"newSeed\",\"type\":\"string\"}],\"name\":\"drawPot\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newDraw\",\"type\":\"uint256\"}],\"name\":\"setDrawDate\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numPlayers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"seedHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"addToContribution\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"recentWins\",\"outputs\":[{\"name\":\"winner\",\"type\":\"address\"},{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"contribution\",\"type\":\"uint256\"},{\"name\":\"amountWon\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"host\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"inputs\":[],\"type\":\"constructor\"}]","ContractName":"JackPot","CompilerVersion":"v0.2.1-2016-01-30-91a6b35","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}