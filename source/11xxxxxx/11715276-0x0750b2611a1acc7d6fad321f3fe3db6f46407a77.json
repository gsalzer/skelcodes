{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/zechariahmalachi/stage_1/contracts/custodian/MultisigGHOST.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\nimport \\\"../utils/Address.sol\\\";\\n\\ncontract MultiSigWallet {\\n\\tevent Deposit(address indexed sender, uint amount, uint balance);\\n\\tevent SubmitTransaction(\\n\\t\\taddress indexed owner,\\n\\t\\tuint indexed txIndex,\\n\\t\\taddress indexed to,\\n\\t\\tuint value,\\n\\t\\tbytes data\\n\\t);\\n\\tevent ConfirmTransaction(address indexed owner, uint indexed txIndex);\\n\\tevent RevokeConfirmation(address indexed owner, uint indexed txIndex);\\n\\tevent ExecuteTransaction(address indexed owner, uint indexed txIndex);\\n\\t\\n\\taddress[] private owners;\\n\\tmapping(address => bool) private isOwner;\\n\\tuint private numConfirmationsRequired;\\n\\t\\n\\tstruct Transaction {\\n\\t\\taddress to;\\n\\t\\tuint value;\\n\\t\\tbytes data;\\n\\t\\tbool executed;\\n\\t\\tuint numConfirmations;\\n\\t}\\n\\t\\n\\t// mapping from tx index => owner => bool\\n\\tmapping(uint => mapping(address => bool)) public isConfirmed;\\n\\t\\n\\tTransaction[] public transactions;\\n\\t\\n\\n\\t/**\\n\\t * @dev Throws if sender is not one of the owners.\\n\\t */\\n\\tmodifier onlyOwner() {\\n\\t\\trequire(isOwner[msg.sender], \\\"not owner\\\");\\n\\t\\t_;\\n\\t}\\n\\t\\n\\n\\t/**\\n\\t * @dev Throws if txIndex exists in transactions array.\\n\\t * @param _txIndex Transaction index.\\n\\t */\\n\\tmodifier txExists(uint _txIndex) {\\n\\t\\trequire(_txIndex < transactions.length, \\\"tx does not exist\\\");\\n\\t\\t_;\\n\\t}\\n\\t\\n\\n\\t/**\\n\\t * @dev Throws if field `executed` equal to `true`.\\n\\t * @param _txIndex Transaction index.\\n\\t */\\n\\tmodifier notExecuted(uint _txIndex) {\\n\\t\\trequire(!transactions[_txIndex].executed, \\\"tx already executed\\\");\\n\\t\\t_;\\n\\t}\\n\\t\\n\\n\\t/**\\n\\t * @dev Throws if transaction not confirmed by sender.\\n\\t * @param _txIndex Transaction index.\\n\\t */\\n\\tmodifier notConfirmed(uint _txIndex) {\\n\\t\\trequire(!isConfirmed[_txIndex][msg.sender], \\\"tx already confirmed\\\");\\n\\t\\t_;\\n\\t}\\n\\t\\n\\t\\n\\t/**\\n\\t * @dev Constructor for MultiSigWallet.\\n\\t * Required: array of owners to be not empty.\\n\\t * Required: confirmations to be between 1 and length of owners array.\\n\\t * Required: every owner not to be zero-address.\\n\\t * Required: every onwer not to be smart-contract???\\n\\t * Required: no duplicates in owner array.\\n\\t * \\n\\t * @param _owners Array of owners addresses.\\n\\t * @param _numConfirmationsRequired Minimal number of confirmations needed to pass transaction.\\n\\t */\\n\\tconstructor(address[] memory _owners, uint _numConfirmationsRequired) {\\n\\t\\trequire(_owners.length > 0, \\\"owners required\\\");\\n\\t\\trequire(_numConfirmationsRequired > 0, \\\"invalid number of required confirmations, less zero\\\");\\n\\t\\trequire(_numConfirmationsRequired <= _owners.length, \\\"invalid number of required confirmations, more than owners\\\");\\n\\t\\t\\n\\t\\tfor (uint i = 0; i < _owners.length; i++) {\\n\\t\\t\\taddress owner = _owners[i];\\n\\t\\t\\t\\n\\t\\t\\trequire(owner != address(0), \\\"invalid owner\\\");\\n\\t\\t\\trequire(!isOwner[owner], \\\"owner not unique\\\");\\n\\t\\t\\trequire(!Address.isContract(owner), \\\"owner is smart contract\\\");\\n\\t\\t\\t\\n\\t\\t\\tisOwner[owner] = true;\\n\\t\\t\\towners.push(owner);\\n\\t\\t}\\n\\t\\t\\n\\t\\tnumConfirmationsRequired = _numConfirmationsRequired;\\n\\t}\\n\\t\\n\\t\\n\\t/**\\n\\t * @dev Fallback function that will take ether and log event.\\n\\t */\\n\\treceive() payable external {\\n\\t\\temit Deposit(msg.sender, msg.value, address(this).balance);\\n\\t}\\n\\t\\n\\t\\n\\t/**\\n\\t * @dev Offers withdrawal transaction.\\n\\t *\\n\\t * @param _to Address where to withdraw funds.\\n\\t * @param _value Amount of wei to withdraw.\\n\\t * @param _data Complete calldata. \\n\\t */\\n\\tfunction submitTransaction(address _to, uint _value, bytes memory _data) public onlyOwner {\\n\\t\\trequire(!Address.isContract(_to), \\\"cannot withdraw to smart contract\\\");\\n\\t\\trequire(_to != address(0), \\\"canot withdraw to zero-address\\\");\\n\\t\\trequire(_value > 0.3 ether, \\\"cannot withdraw less 0.3 ETH\\\");\\n\\t\\t\\n\\t\\tuint txIndex = transactions.length;\\n\\t\\ttransactions.push(Transaction({\\n\\t\\t\\tto: _to,\\n\\t\\t\\tvalue: _value,\\n\\t\\t\\tdata: _data,\\n\\t\\t\\texecuted: false,\\n\\t\\t\\tnumConfirmations: 0\\n\\t\\t}));\\n\\t\\t\\n\\t\\temit SubmitTransaction(msg.sender, txIndex, _to, _value, _data);\\n\\t}\\n\\t\\n\\t\\n\\t/**\\n\\t * @dev Confirm proposed withdrawal transaction.\\n\\t * Only address from owners array can use this function.\\n\\t * Transaction should exist.\\n\\t * Transaction should not be executed before.\\n\\t * Transaction should not be confirmed by sender address.\\n\\t * \\n\\t * @param _txIndex Transaction index.\\n\\t */\\n\\tfunction confirmTransaction(uint _txIndex) public onlyOwner txExists(_txIndex) notExecuted(_txIndex) notConfirmed(_txIndex) {\\n\\t\\tTransaction storage transaction = transactions[_txIndex];\\n\\t\\t\\n\\t\\ttransaction.numConfirmations += 1;\\n\\t\\tisConfirmed[_txIndex][msg.sender] = true;\\n\\t\\t\\n\\t\\temit ConfirmTransaction(msg.sender, _txIndex);\\n\\t}\\n\\t\\n\\t\\n\\t/**\\n\\t * @dev Execute transaction that previously was confirmed by\\n\\t * majority of owners (>= numConfirmationsRequired)\\n\\t *\\n\\t * Only address from owners array can execute it.\\n\\t * Transaction should exist.\\n\\t * Transaction should not be executed before.\\n\\t *\\n\\t * @param _txIndex Transaction index\\n\\t */\\n\\tfunction executeTransaction(uint _txIndex) public onlyOwner txExists(_txIndex) notExecuted(_txIndex) {\\n\\t\\tTransaction storage transaction = transactions[_txIndex];\\n\\t\\t\\n\\t\\trequire(transaction.numConfirmations >= numConfirmationsRequired, \\\"cannot execute tx\\\");\\n\\t\\t\\n\\t\\ttransaction.executed = true;\\n\\t\\t\\n\\t\\t(bool success, ) = transaction.to.call{value: transaction.value}(transaction.data);\\n\\t\\trequire(success, \\\"tx failed\\\");\\n\\t\\t\\n\\t\\temit ExecuteTransaction(msg.sender, _txIndex);\\n\\t}\\n\\t\\n\\t\\n\\t/**\\n\\t * @dev Revoke vote for withdrawal transaction.\\n\\t *\\n\\t * Only address from the owners array.\\n\\t * Transaction should exists.\\n\\t * Transaction should not be executed before.\\n\\t * Transaction should be confirmed by this address before.\\n\\t * \\n\\t * @param _txIndex Transaction index.\\n\\t */\\n\\tfunction revokeConfirmation(uint _txIndex) public onlyOwner txExists(_txIndex) notExecuted(_txIndex) {\\n\\t\\tTransaction storage transaction = transactions[_txIndex];\\n\\t\\t\\n\\t\\trequire(isConfirmed[_txIndex][msg.sender], \\\"tx not confirmed\\\");\\n\\t\\t\\n\\t\\ttransaction.numConfirmations -= 1;\\n\\t\\tisConfirmed[_txIndex][msg.sender] = false;\\n\\t\\t\\n\\t\\temit RevokeConfirmation(msg.sender, _txIndex);\\n\\t}\\n\\t\\n\\t\\n\\t/**\\n\\t * @return Array of owners.\\n\\t */\\n\\tfunction getOwners() public view returns (address[] memory) {\\n\\t\\treturn owners;\\n\\t}\\n\\t\\n\\t\\n\\t/**\\n\\t * @return Number of minimum confirmations required\\n\\t */\\n\\tfunction getConfirmationsCount() public view returns (uint) {\\n\\t\\treturn numConfirmationsRequired;\\n\\t}\\n\\t\\n\\t\\n\\t/**\\n\\t * @return Total amount of transactions.\\n\\t */\\n\\tfunction getTransactionCount() public view returns (uint) {\\n\\t\\treturn transactions.length;\\n\\t}\\n\\t\\n\\t\\n\\t/**\\n\\t * @dev Get transaction full information.\\n\\t * @param _txIndex Transaction index.\\n\\t */\\n\\tfunction getTransaction(uint _txIndex) public view txExists(_txIndex) returns (address to, uint value, bytes memory data, bool executed, uint numConfirmations) {\\n\\t\\tTransaction storage transaction = transactions[_txIndex];\\n\\t\\t\\n\\t\\treturn (\\n\\t\\t\\ttransaction.to,\\n\\t\\t\\ttransaction.value,\\n\\t\\t\\ttransaction.data,\\n\\t\\t\\ttransaction.executed,\\n\\t\\t\\ttransaction.numConfirmations\\n\\t\\t);\\n\\t}\\n\\t\\n\\t\\n\\t/**\\n\\t * @return Balance of current smart contract.\\n\\t */\\n\\tfunction balance() public view returns (uint256) {\\n\\t\\treturn address(this).balance;\\n\\t}\\n\\t\\n\\t\\n\\t/**\\n\\t * @dev Funciton that will clean up wallet balance.\\n\\t * Only main owner can call.\\n\\t * Balance should be less 0.3 ETH (otherwise call submitTransaction).\\n\\t * Address to withdraw not zero-address.\\n\\t * Address to withdraw not smart contract.\\n\\t * \\n\\t * @param _to Address where all funds of smart-contract should go.\\n\\t */\\n\\tfunction destructor(address payable _to) public {\\n\\t\\trequire(msg.sender == owners[0], \\\"not the master\\\");\\n\\t\\trequire(address(this).balance <= 0.3 ether, \\\"too much balance\\\");\\n\\t\\trequire(address(this).balance > 0, \\\"not due payment\\\");\\n\\t\\trequire(_to != address(0), \\\"cannot be zero-address\\\");\\n\\t\\trequire(!Address.isContract(_to), \\\"cannot be smart contract\\\");\\n\\t\\t\\n\\t\\tselfdestruct(_to);\\n\\t}\\n\\n}\\n\"\r\n    },\r\n    \"/Users/zechariahmalachi/stage_1/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 5000\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_numConfirmationsRequired\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"txIndex\",\"type\":\"uint256\"}],\"name\":\"ConfirmTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"txIndex\",\"type\":\"uint256\"}],\"name\":\"ExecuteTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"txIndex\",\"type\":\"uint256\"}],\"name\":\"RevokeConfirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"txIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"SubmitTransaction\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_txIndex\",\"type\":\"uint256\"}],\"name\":\"confirmTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"destructor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_txIndex\",\"type\":\"uint256\"}],\"name\":\"executeTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConfirmationsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_txIndex\",\"type\":\"uint256\"}],\"name\":\"getTransaction\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"numConfirmations\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTransactionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isConfirmed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_txIndex\",\"type\":\"uint256\"}],\"name\":\"revokeConfirmation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"submitTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transactions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"numConfirmations\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"MultiSigWallet","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"5000","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003000000000000000000000000800cac0a547d601bcbe7b014e017a4f6b08391070000000000000000000000005c745b97856ca81ca759f7283922013cd45607340000000000000000000000005be43488d5175a013484db32e9f01ead6b80f0a3","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}