{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2021-01-07\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.5.15;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function decimals() external view returns (uint);\r\n    function name() external view returns (string memory);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface Controller {\r\n    function vaults(address) external view returns (address);\r\n    function rewards() external view returns (address);\r\n}\r\n\r\n\r\ninterface yERC20 {\r\n  function deposit(uint256 _pid, uint256 _amount) external;\r\n  function withdraw(uint256 _pid, uint256 _amount) external;\r\n  function pendingSushi(uint256 _pid, address _user) external view returns (uint);\r\n}\r\n\r\ninterface UniswapRouter {\r\n  function swapExactTokensForTokens(\r\n      uint amountIn,\r\n      uint amountOutMin,\r\n      address[] calldata path,\r\n      address to,\r\n      uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n}\r\n\r\ninterface ZAPPER {\r\n    function ZapIn(\r\n        address _FromTokenContractAddress,\r\n        address _pairAddress,\r\n        uint256 _amount,\r\n        uint256 _minPoolTokens,\r\n        address _allowanceTarget,\r\n        address _swapTarget,\r\n        bytes calldata swapData\r\n    ) external payable returns (uint256);\r\n}\r\n\r\n/*\r\n\r\n A strategy must implement the following calls;\r\n\r\n - deposit()\r\n - withdraw(address) must exclude any tokens used in the yield - Controller role - withdraw should return to Controller\r\n - withdraw(uint) - Controller | Vault role - withdraw should always return to vault\r\n - withdrawAll() - Controller | Vault role - withdraw should always return to vault\r\n - balanceOf()\r\n\r\n Where possible, strategies must remain as immutable as possible, instead of updating variables, we update the contract by linking it in the controller\r\n\r\n*/\r\ncontract StrategySUSHISLPSUSHI  {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n    uint public sushiIndex = 12;\r\n\r\n    address constant public unirouter = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    address constant public weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n\taddress constant public bt = address(0x76c5449F4950f6338A393F53CdA8b53B0cd3Ca3a);\r\n\r\n    address constant public want = address(0x795065dCc9f64b5614C407a6EFDC400DA6221FB0); //SUSHI_ETH SLP\r\n\r\n\taddress constant public SushiSwap = address(0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd);\r\n\r\n    address constant public SUSHI = address(0x6B3595068778DD592e39A122f4f5a5cF09C90fE2);\r\n\r\n    address constant public zapper = address(0xfF350eDc2242Ca4d7252A64746aec4A5487a852B);\r\n    address constant public pair = address(0x795065dCc9f64b5614C407a6EFDC400DA6221FB0); //SUSHI_ETH SLP\r\n    address constant public swap = address(0xDef1C0ded9bec7F1a1670819833240f027b25EfF);\r\n\r\n    address public governance;\r\n    address public controller;\r\n\r\n    uint256 public pledgeSLP = 0;\r\n    uint256 public redeliverynum = 100 * 1e18;\r\n\r\n    modifier onlyController {\r\n        require(msg.sender == controller, \"!controller\");\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        governance = tx.origin;\r\n        controller = 0x03D2079c54967f463Fd6e89E76012F74EBC62615;\r\n        doApprove();\r\n    }\r\n\r\n\tfunction doApprove () internal{\r\n        IERC20(SUSHI).approve(unirouter, uint(-1));\r\n    }\r\n\r\n    function deposit() public {\r\n\t\tuint256 _want = IERC20(want).balanceOf(address(this));\r\n\t\tif (_want > 0)\r\n\t\t{\r\n\t\t    IERC20(want).safeApprove(SushiSwap, 0);\r\n            IERC20(want).safeApprove(SushiSwap, _want);\r\n\t\t    yERC20(SushiSwap).deposit(sushiIndex,_want);\r\n            pledgeSLP = pledgeSLP.add(_want);\r\n\t\t}\r\n    }\r\n\r\n\r\n    // Withdraw partial funds, normally used with a vault withdrawal\r\n    function withdraw(uint _amount) external onlyController\r\n\t{\r\n\t\tuint amount = _withdraw(_amount);\r\n\t\taddress _vault = Controller(controller).vaults(address(want));\r\n        require(_vault != address(0), \"!vault\");\r\n        IERC20(want).safeTransfer(_vault, amount);\r\n\t}\r\n\r\n\r\n    function _withdraw(uint _amount) internal returns(uint) {\r\n\t\tuint amount = IERC20(want).balanceOf(address(this));\r\n\t\tif (amount < _amount) {\r\n            amount = _amount.sub(amount);\r\n            if(amount > pledgeSLP){\r\n                amount = pledgeSLP;\r\n            }\r\n\t\t\tyERC20(SushiSwap).withdraw(sushiIndex,amount);\r\n            pledgeSLP = pledgeSLP.sub(amount);\r\n\t\t\tamount = IERC20(want).balanceOf(address(this));\r\n            if (amount < _amount){\r\n                return amount;\r\n            }\r\n        }\r\n\t\treturn _amount;\r\n    }\r\n\r\n\tfunction withdrawAll() external onlyController returns (uint balance){\r\n\t\tuint amount = balanceOf();\r\n\t\tbalance = _withdraw(amount);\r\n\r\n\t\taddress _vault = Controller(controller).vaults(address(want));\r\n        require(_vault != address(0), \"!vault\");\r\n        IERC20(want).safeTransfer(_vault, balance);\r\n\t}\r\n\r\n\tfunction balanceOfwant() public view returns (uint256) {\r\n\t\treturn IERC20(want).balanceOf(address(this));\r\n\t}\r\n\r\n\r\n    function balanceOf() public view returns (uint256) {\r\n        return balanceOfwant().add(pledgeSLP);\r\n    }\r\n\r\n    function getPending() public view returns (uint256) {\r\n        return yERC20(SushiSwap).pendingSushi(sushiIndex,address(this));\r\n    }\r\n\r\n\tfunction getSUSHI() public view returns(uint256)\r\n\t{\r\n\t\treturn IERC20(SUSHI).balanceOf(address(this));\r\n\t}\r\n\r\n    function harvest() public\r\n    {\r\n        yERC20(SushiSwap).deposit(sushiIndex,0);    //get reward\r\n        redelivery();\r\n    }\r\n\r\n    function redelivery() internal {\r\n        uint256 reward = IERC20(SUSHI).balanceOf(address(this));\r\n        if (reward > redeliverynum) {\r\n            uint256 _2weth = reward.mul(80).div(100); //80%\r\n\t\t    uint256 _2bt = reward.sub(_2weth);  //20%\r\n            _swapUniswap(SUSHI,weth, _2weth);\r\n\t\t\t_redelivery();\r\n\t\t    _swapUniswap(SUSHI,bt,_2bt);\r\n            IERC20(bt).safeTransfer(Controller(controller).rewards(), IERC20(bt).balanceOf(address(this)));\r\n\t\t}\r\n        deposit();\r\n    }\r\n\r\n    function _redelivery() internal\r\n    {\r\n         uint256 _weth = IERC20(weth).balanceOf(address(this));\r\n        if (_weth > 0) {\r\n            IERC20(weth).safeApprove(zapper,0);\r\n\t\t    IERC20(weth).safeApprove(zapper, _weth);\r\n            ZAPPER(zapper).ZapIn(\r\n                weth,\r\n                pair,\r\n                _weth,\r\n                0,\r\n                swap,\r\n                swap,\r\n                new bytes(0));\r\n        }\r\n    }\r\n\r\n     function _swapUniswap(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    ) internal {\r\n        require(_to != address(0));\r\n\r\n        // Swap with uniswap\r\n        IERC20(_from).safeApprove(unirouter, 0);\r\n        IERC20(_from).safeApprove(unirouter, _amount);\r\n\r\n        address[] memory path;\r\n\r\n        if (_from == weth || _to == weth) {\r\n            path = new address[](2);\r\n            path[0] = _from;\r\n            path[1] = _to;\r\n        } else {\r\n            path = new address[](3);\r\n            path[0] = _from;\r\n            path[1] = weth;\r\n            path[2] = _to;\r\n        }\r\n\r\n        UniswapRouter(unirouter).swapExactTokensForTokens(\r\n            _amount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            now.add(1800)\r\n        );\r\n    }\r\n\r\n    function setredeliverynum(uint256 value) public\r\n    {\r\n        require(msg.sender == governance, \"!governance\");\r\n        redeliverynum = value;\r\n    }\r\n\r\n    function setGovernance(address _governance) public {\r\n        require(msg.sender == governance, \"!governance\");\r\n        governance = _governance;\r\n    }\r\n\r\n    function setController(address _controller) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        controller = _controller;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[],\"name\":\"SUSHI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SushiSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceOfwant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPending\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSUSHI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pledgeSLP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"redeliverynum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setredeliverynum\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sushiIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unirouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"zapper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"StrategySUSHISLPSUSHI","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://54fac2a9393d33c3a972a9ebdbe28588e42aef030fb95bc05c6d770f88b7ec09"}]}