{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2021-03-02\r\n*/\r\n\r\n// Copyright (C) 2020, 2021 Lev Livnev <lev@liv.nev.org.uk>\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\npragma solidity 0.5.12;\r\n\r\n// https://github.com/dapphub/ds-token/blob/master/src/token.sol\r\ninterface DSTokenAbstract {\r\n    function name() external view returns (bytes32);\r\n    function symbol() external view returns (bytes32);\r\n    function decimals() external view returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address) external view returns (uint256);\r\n    function transfer(address, uint256) external returns (bool);\r\n    function allowance(address, address) external view returns (uint256);\r\n    function approve(address, uint256) external returns (bool);\r\n    function approve(address) external returns (bool);\r\n    function transferFrom(address, address, uint256) external returns (bool);\r\n    function push(address, uint256) external;\r\n    function pull(address, uint256) external;\r\n    function move(address, address, uint256) external;\r\n    function mint(uint256) external;\r\n    function mint(address,uint) external;\r\n    function burn(uint256) external;\r\n    function burn(address,uint) external;\r\n    function setName(bytes32) external;\r\n    function authority() external view returns (address);\r\n    function owner() external view returns (address);\r\n    function setOwner(address) external;\r\n    function setAuthority(address) external;\r\n}\r\n\r\ncontract RwaInputConduit {\r\n    DSTokenAbstract public gov;\r\n    DSTokenAbstract public dai;\r\n    address public to;\r\n\r\n    event Push(address indexed to, uint256 wad);\r\n\r\n    constructor(address _gov, address _dai, address _to) public {\r\n        gov = DSTokenAbstract(_gov);\r\n        dai = DSTokenAbstract(_dai);\r\n        to = _to;\r\n    }\r\n\r\n    function push() external {\r\n        require(gov.balanceOf(msg.sender) > 0);\r\n        uint256 balance = dai.balanceOf(address(this));\r\n        emit Push(to, balance);\r\n        dai.transfer(to, balance);\r\n    }\r\n}\r\n\r\ncontract RwaOutputConduit {\r\n    // --- auth ---\r\n    mapping (address => uint256) public wards;\r\n    mapping (address => uint256) public can;\r\n    function rely(address usr) external auth {\r\n        wards[usr] = 1;\r\n        emit Rely(usr);\r\n    }\r\n    function deny(address usr) external auth {\r\n        wards[usr] = 0;\r\n        emit Deny(usr);\r\n    }\r\n    modifier auth {\r\n        require(wards[msg.sender] == 1, \"RwaConduit/not-authorized\");\r\n        _;\r\n    }\r\n    function hope(address usr) external auth {\r\n        can[usr] = 1;\r\n        emit Hope(usr);\r\n    }\r\n    function nope(address usr) external auth {\r\n        can[usr] = 0;\r\n        emit Nope(usr);\r\n    }\r\n    modifier operator {\r\n        require(can[msg.sender] == 1, \"RwaConduit/not-operator\");\r\n        _;\r\n    }\r\n\r\n    DSTokenAbstract public gov;\r\n    DSTokenAbstract public dai;\r\n\r\n    address public to;\r\n    mapping (address => uint256) public bud;\r\n\r\n    // Events\r\n    event Rely(address indexed usr);\r\n    event Deny(address indexed usr);\r\n    event Hope(address indexed usr);\r\n    event Nope(address indexed usr);\r\n    event Kiss(address indexed who);\r\n    event Diss(address indexed who);\r\n    event Pick(address indexed who);\r\n    event Push(address indexed to, uint256 wad);\r\n\r\n    constructor(address _gov, address _dai) public {\r\n        wards[msg.sender] = 1;\r\n        gov = DSTokenAbstract(_gov);\r\n        dai = DSTokenAbstract(_dai);\r\n        emit Rely(msg.sender);\r\n    }\r\n\r\n    // --- administration ---\r\n    function kiss(address who) public auth {\r\n        bud[who] = 1;\r\n        emit Kiss(who);\r\n    }\r\n    function diss(address who) public auth {\r\n        if (to == who) to = address(0);\r\n        bud[who] = 0;\r\n        emit Diss(who);\r\n    }\r\n\r\n    // --- routing ---\r\n    function pick(address who) public operator {\r\n        require(bud[who] == 1 || who == address(0), \"RwaConduit/not-bud\");\r\n        to = who;\r\n        emit Pick(who);\r\n    }\r\n    function push() external {\r\n        require(to != address(0), \"RwaConduit/to-not-set\");\r\n        require(gov.balanceOf(msg.sender) > 0, \"RwaConduit/no-gov\");\r\n        uint256 balance = dai.balanceOf(address(this));\r\n        emit Push(to, balance);\r\n        dai.transfer(to, balance);\r\n        to = address(0);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dai\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"Deny\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"Diss\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"Hope\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"Kiss\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"Nope\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"Pick\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Push\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"Rely\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bud\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"can\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"internalType\":\"contract DSTokenAbstract\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"deny\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"diss\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gov\",\"outputs\":[{\"internalType\":\"contract DSTokenAbstract\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"hope\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"kiss\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"nope\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"pick\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"push\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"rely\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"to\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"wards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"RwaOutputConduit","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000009f8f72aa9304c8b593d555f12ef6589cc3a579a20000000000000000000000006b175474e89094c44da98b954eedeac495271d0f","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://e8c094d12ad881b86d1643076eb86b49673f327cb863ddfddee8f421738b9796"}]}