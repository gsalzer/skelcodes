{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.17;\r\n\r\n//revision 4\r\n// can mint from contract and dai only\r\n\r\ncontract ERC20 {\r\n\r\n   \t   function totalSupply() public view returns (uint256);\r\n       function balanceOf(address tokenOwner) public view returns (uint256 balance);\r\n       function allowance(address tokenOwner, address spender) public view returns (uint256 remaining);\r\n\r\n       function transfer(address to, uint256 tokens) public returns (bool success);\r\n       \r\n       function approve(address spender, uint256 tokens) public returns (bool success);\r\n       function transferFrom(address from, address to, uint256 tokens) public returns (bool success);\r\n\r\n       function decimals() public view returns(uint256);\r\n       function intTransfer(address _from, address _to, uint256 _amount) public returns(bool);\r\n\r\n}\r\n\r\ncontract ERC20USDT {\r\n   \r\n    function totalSupply() public view returns (uint);\r\n    function balanceOf(address who) public view returns (uint);\r\n    function transfer(address to, uint value) public;\r\n    function transferFrom(address from, address to, uint value) public;\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  function mul(uint256 a, uint256 b,uint256 decimal) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    require(c / a == b,\"MUL ERROR\");\r\n    c = c / (10 ** decimal);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b,uint256 decimal) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    c = c * (10 ** decimal);\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a,\"Sub Error\");\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a,\"add ERROR\");\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\ncontract Permissions {\r\n\r\n  \r\n  mapping (address=>bool) public permits;\r\n\r\n  event AddPermit(address _addr);\r\n  event RemovePermit(address _addr);\r\n  event ChangeAdmin(address indexed _newAdmin,address indexed _oldAdmin);\r\n  \r\n  address public admin;\r\n  bytes32 public adminChangeKey;\r\n  \r\n  \r\n  function verify(bytes32 root,bytes32 leaf,bytes32[] memory proof) public pure returns (bool)\r\n  {\r\n      bytes32 computedHash = leaf;\r\n\r\n      for (uint256 i = 0; i < proof.length; i++) {\r\n        bytes32 proofElement = proof[i];\r\n\r\n        if (computedHash < proofElement) {\r\n        // Hash(current computed hash + current element of the proof)\r\n        computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\r\n        } else {\r\n        // Hash(current element of the proof + current computed hash)\r\n        computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\r\n       }\r\n      }\r\n\r\n     // Check if the computed hash (root) is equal to the provided root\r\n      return computedHash == root;\r\n   }    \r\n  function changeAdmin(address _newAdmin,bytes32 _keyData,bytes32[] memory merkleProof,bytes32 _newRootKey) public onlyAdmin {\r\n         bytes32 leaf = keccak256(abi.encodePacked(msg.sender,'CATToken',_keyData));\r\n         require(verify(adminChangeKey, leaf,merkleProof), 'Invalid proof.');\r\n         \r\n         admin = _newAdmin;\r\n         adminChangeKey = _newRootKey;\r\n         \r\n         emit ChangeAdmin(_newAdmin,msg.sender);      \r\n  }\r\n  \r\n  constructor() public {\r\n    permits[msg.sender] = true;\r\n    admin = msg.sender;\r\n    adminChangeKey = 0xc07b01d617f249e77fe6f0df68daa292fe6ec653a9234d277713df99c0bb8ebf;\r\n  }\r\n  \r\n  modifier onlyAdmin(){\r\n      require(msg.sender == admin);\r\n      _;\r\n  }\r\n\r\n  modifier onlyPermits(){\r\n    require(permits[msg.sender] == true);\r\n    _;\r\n  }\r\n\r\n  function isPermit(address _addr) public view returns(bool){\r\n    return permits[_addr];\r\n  }\r\n  \r\n  function addPermit(address _addr) public onlyAdmin{\r\n    if(permits[_addr] == false){\r\n        permits[_addr] = true;\r\n        emit AddPermit(_addr);\r\n    }\r\n  }\r\n  \r\n  function removePermit(address _addr) public onlyAdmin{\r\n    permits[_addr] = false;\r\n    emit RemovePermit(_addr);\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\ncontract Control is Permissions {\r\n\r\n  address payable public withdrawalAddress;\r\n  bool public pause;\r\n  mapping(address=>bool) usdtERC20;\r\n \r\n\r\n  function setS1Global(address _addr) external onlyAdmin returns(bool){\r\n        S1Global  s1 = S1Global(_addr);\r\n        for(uint256 i=0;i<s1.getAllMaxAddr();i++){\r\n            addPermit(s1.getAddress(i));\r\n        }\r\n  }\r\n\r\n  function setERC20USDT(address _addr,bool _set) public onlyAdmin{\r\n      usdtERC20[_addr] = _set;\r\n  }\r\n\r\n  function setWithdrawalAddress(address payable _newWithdrawalAddress) external onlyAdmin {\r\n    require(_newWithdrawalAddress != address(0));\r\n    withdrawalAddress = _newWithdrawalAddress;\r\n  }\r\n\r\n \r\n  function withdrawBalance() external onlyAdmin {\r\n    require(withdrawalAddress != address(0));\r\n    withdrawalAddress.transfer(address(this).balance);\r\n  }\r\n  \r\n  function withdrawToken(uint256 amount,address _token)external onlyAdmin {\r\n        require(pause == false);\r\n        require(withdrawalAddress != address(0));\r\n        if(usdtERC20[_token] == true)\r\n            ERC20USDT(_token).transfer(withdrawalAddress,amount);\r\n        else\r\n            ERC20(_token).transfer(withdrawalAddress,amount);\r\n  }\r\n\r\n//Emegency Pause Contract;\r\n  function stopContract() external onlyAdmin{\r\n      pause = true;\r\n  }\r\n\r\n}\r\n\r\ncontract S1Global{\r\n    function getAllMaxAddr() public returns(uint256);\r\n    function getAddress(uint256 idx) public returns(address);\r\n}\r\n\r\ncontract RatToken{\r\n     \r\n     function isValidToken(uint256 _tokeID) public view  returns (bool);\r\n     function ownerOf(uint256 tokenId) public view returns (address);\r\n     function getRatDetail(uint256 _tokenID) public view returns(uint256 _tokenType,uint256 _docID,address _contract);\r\n  \r\n     \r\n}\r\n\r\ncontract CheckMint{\r\n  // 3 improtant function for mint from RAT \r\n     function canMintCat(uint256 _tokenID) public view returns (bool);\r\n     function setAlreadyMint(uint256 _tokeID) public;\r\n     function getMintAmount(uint256 _tokeID) public view returns(uint256);\r\n\r\n}\r\n\r\n\r\ncontract CAT is Control {\r\n    \r\n    using SafeMath for uint256;\r\n\r\n    RatToken public ratToken;\r\n    \r\n    string public name     = \"Credit Application\";\r\n    string public symbol   = \"CAT\";\r\n    uint8  public decimals = 18;\r\n    string public company  = \"ShuttleOne Pte Ltd\";\r\n    uint8  public version  = 6;\r\n    \r\n    mapping (address=>bool) public allowDeposit;\r\n    mapping (address=>uint256) public depositExRate; // address 0 mean ETH\r\n    mapping (address=>bool) public notAllowControl;\r\n\r\n\r\n    event  Approval(address indexed _tokenOwner, address indexed _spender, uint256 _amount);\r\n    event  Transfer(address indexed _from, address indexed _to, uint256 _amount);\r\n   \r\n    event  MintFromToken(address indexed _to,uint256 amount);\r\n    event  MintFromContract(address indexed _from,address indexed _to,uint256 _amount,uint256 _contractID);\r\n   \r\n    event  DepositToken(address indexed _tokenAddr,uint256 _exrate,string _symbol);\r\n    event  RemoveToken(address indexed _tokenAddr);\r\n    event  NewExchangeRate(string indexed _type,uint256 exRate);\r\n    \r\n    mapping (address => uint256) public  balance;\r\n    mapping (address => mapping (address => uint256)) public  allowed;\r\n\r\n    mapping (address => bool) blacklist;\r\n    uint256  _totalSupply;\r\n\r\n    address coldWallet;\r\n\r\n    // Exrate 1 = 1000000000000000000  18 digit only\r\n    function addDepositToken(address _conAddr,string memory _symbol,uint256 exRate) public onlyPermits {\r\n        \r\n        allowDeposit[_conAddr] = true;\r\n        depositExRate[_conAddr] = exRate;\r\n        emit DepositToken(_conAddr,exRate,_symbol);\r\n    }\r\n\r\n    function removeDepositToken(address _conAddr) public onlyPermits {\r\n        allowDeposit[_conAddr] = false;\r\n        emit RemoveToken(_conAddr);\r\n    }\r\n    \r\n    function setColdWallet(address _coldWallet) public onlyPermits{\r\n        coldWallet = _coldWallet;\r\n    }\r\n    \r\n    function setDepositRate(address _addr,uint256 _newRate) public onlyPermits{\r\n        depositExRate[_addr] = _newRate;\r\n        emit NewExchangeRate(\"Deposit\",_newRate);\r\n    }\r\n\r\n     constructor() public {\r\n        ratToken = RatToken(0x8bE308B0A4CB6753783E078cF12E4A236c11a85A); //(V19)\r\n        \r\n        allowDeposit[0xd80BcbbEeFE8225224Eeb71f4EDb99e64cCC9c99] = true;\r\n        depositExRate[0xd80BcbbEeFE8225224Eeb71f4EDb99e64cCC9c99] = 1000000000000000000; // 18 digit\r\n        emit DepositToken(0xd80BcbbEeFE8225224Eeb71f4EDb99e64cCC9c99,1000000000000000000,\"SZDAI\");\r\n    \r\n        allowDeposit[0xA298508BaBF033f69B33f4d44b5241258344A91e] = true;\r\n        depositExRate[0xA298508BaBF033f69B33f4d44b5241258344A91e] = 1000000000000000000; // 18 digit\r\n        emit DepositToken(0xA298508BaBF033f69B33f4d44b5241258344A91e,1000000000000000000,\"SZUSDT\");\r\n         \r\n        allowDeposit[0x55b123B169400Da201Dd69814BAe2B8C2660c2Bf] = true;\r\n        depositExRate[0x55b123B169400Da201Dd69814BAe2B8C2660c2Bf] = 1000000000000000000; // 18 digit\r\n        emit DepositToken(0x55b123B169400Da201Dd69814BAe2B8C2660c2Bf,1000000000000000000,\"SZUSDC\");\r\n        \r\n     }\r\n\r\n     function setRatToken(address _addr) public onlyAdmin{\r\n        ratToken = RatToken(_addr);\r\n     }\r\n     \r\n     function mintToken(address _token,uint256 _amount) public {\r\n         require(allowDeposit[_token] == true,\"DEPOSIT ERROR This token not allow\");\r\n         require(_amount > 0,\"Amount should > 0\");\r\n         ERC20 token = ERC20(_token);\r\n\r\n         uint256 dec = token.decimals();\r\n         if(dec < 18) _amount *= 10 ** (18-dec);\r\n\r\n         uint256 catAmount = _amount.mul(depositExRate[_token],18);\r\n         \r\n \r\n         if(token.transferFrom(msg.sender,address(this),_amount) == true){\r\n           _totalSupply += catAmount;\r\n           balance[msg.sender] = balance[msg.sender].add(catAmount);\r\n           emit Transfer(address(0),msg.sender,catAmount);\r\n           emit MintFromToken(msg.sender,_amount);\r\n       }\r\n       //  balanceDeposit[msg.sender][_token] =  balanceDeposit[msg.sender][_token].add(catAmount);\r\n         \r\n         \r\n     }\r\n\r\n     function mintFromWarpToken(address _token,uint256 _amount,address to) public onlyPermits returns(bool) {\r\n         require(allowDeposit[_token] == true,\"DEPOSIT ERROR This token not allow\");\r\n         require(_amount > 0,\"Amount should > 0\");\r\n         ERC20 token = ERC20(_token);\r\n\r\n         uint256 dec = token.decimals();\r\n         if(dec < 18) _amount *= 10 ** (18-dec);\r\n\r\n         uint256 catAmount = _amount.mul(depositExRate[_token],18);\r\n         \r\n\r\n         if(token.intTransfer(to,address(this),_amount) == true){\r\n           _totalSupply += catAmount;\r\n           balance[to] = balance[to].add(catAmount);\r\n           emit Transfer(address(0),to,catAmount);\r\n           emit MintFromToken(to,_amount);\r\n           return true;\r\n       }\r\n      \r\n         return false;\r\n         \r\n     }\r\n\r\n\r\n     function mintFromRATToken(uint256 _tokenID) public returns(string memory result){\r\n          require(ratToken.isValidToken(_tokenID) == true,\"Token Invalid\");\r\n          address _to = ratToken.ownerOf(_tokenID);\r\n          address _contract;\r\n          uint256 amount;\r\n           (,,_contract) = ratToken.getRatDetail(_tokenID);\r\n           CheckMint  checkToken = CheckMint(_contract);\r\n\r\n          if(checkToken.canMintCat(_tokenID) == false)\r\n          {\r\n             return \"ERROR This Token Can't mint\";\r\n          }\r\n\r\n          amount = checkToken.getMintAmount(_tokenID);\r\n          checkToken.setAlreadyMint(_tokenID);\r\n          balance[_to] = balance[_to].add(amount);\r\n          _totalSupply += amount;\r\n          emit Transfer(address(0),_to,amount);\r\n        return \"OK\";\r\n\r\n     }\r\n\r\n     \r\n    function balanceOf(address _addr) public view returns (uint256){\r\n        return balance[_addr]; \r\n     }\r\n\r\n    function totalSupply() public view returns (uint) {\r\n        return _totalSupply;\r\n    }\r\n\r\n     function approve(address _spender, uint256 _amount) public returns (bool){\r\n            require(blacklist[msg.sender] == false,\"Approve:have blacklist\");\r\n            allowed[msg.sender][_spender] = _amount;\r\n            emit Approval(msg.sender, _spender, _amount);\r\n            return true;\r\n    }\r\n    \r\n    function allowance(address _owner, address _spender) public view returns (uint256){\r\n          return allowed[_owner][_spender];\r\n    }\r\n\r\n    function transfer(address _to, uint256 _amount) public returns (bool) {\r\n        require(balance[msg.sender] >= _amount,\"CAT/ERROR-out-of-balance-transfer\");\r\n        require(_to != address(0),\"CAT/ERROR-transfer-addr-0\");\r\n        require(blacklist[msg.sender] == false,\"Transfer blacklist\");\r\n\r\n        balance[msg.sender] -= _amount;\r\n        balance[_to] += _amount;\r\n        emit Transfer(msg.sender,_to,_amount);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool)\r\n    {\r\n        require(balance[_from] >= _amount,\"WDAI/ERROR-transFrom-out-of\");\r\n        require(allowed[_from][msg.sender] >= _amount,\"WDAI/ERROR-spender-outouf\"); \r\n        require(blacklist[_from] == false,\"transferFrom blacklist\");\r\n\r\n        balance[_from] -= _amount;\r\n        balance[_to] += _amount;\r\n        allowed[_from][msg.sender] -= _amount;\r\n        emit Transfer(_from, _to, _amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function setNotAllow(bool _set) public returns(bool){\r\n       notAllowControl[msg.sender] = _set;\r\n    }\r\n    \r\n    function intTransfer(address _from, address _to, uint256 _amount) external onlyPermits returns(bool){\r\n           require(notAllowControl[_from] == false,\"This Address not Allow\");\r\n           require(balance[_from] >= _amount,\"WDAI/ERROR-intran-outof\");\r\n           \r\n           \r\n           balance[_from] -= _amount; \r\n           balance[_to] += _amount;\r\n    \r\n           emit Transfer(_from,_to,_amount);\r\n           return true;\r\n    }\r\n\r\n    function burnToken(address _from,uint256 _amount) external onlyPermits {\r\n        require(balance[_from] >= _amount,\"burn out of fund\");\r\n        balance[_from] -= _amount;\r\n        _totalSupply -= _amount;\r\n        \r\n        emit Transfer(_from, address(0), _amount);\r\n    }\r\n    \r\n    \r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"AddPermit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oldAdmin\",\"type\":\"address\"}],\"name\":\"ChangeAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_exrate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"DepositToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_contractID\",\"type\":\"uint256\"}],\"name\":\"MintFromContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MintFromToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"_type\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exRate\",\"type\":\"uint256\"}],\"name\":\"NewExchangeRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"RemovePermit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"name\":\"RemoveToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_conAddr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"exRate\",\"type\":\"uint256\"}],\"name\":\"addDepositToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addPermit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminChangeKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowDeposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_keyData\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"_newRootKey\",\"type\":\"bytes32\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"company\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositExRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"intTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isPermit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"mintFromRATToken\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"result\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mintFromWarpToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"notAllowControl\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"permits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ratToken\",\"outputs\":[{\"internalType\":\"contract RatToken\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_conAddr\",\"type\":\"address\"}],\"name\":\"removeDepositToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"removePermit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_coldWallet\",\"type\":\"address\"}],\"name\":\"setColdWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newRate\",\"type\":\"uint256\"}],\"name\":\"setDepositRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_set\",\"type\":\"bool\"}],\"name\":\"setERC20USDT\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_set\",\"type\":\"bool\"}],\"name\":\"setNotAllow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setRatToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setS1Global\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newWithdrawalAddress\",\"type\":\"address\"}],\"name\":\"setWithdrawalAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawalAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"CAT","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://487a9893452edd24c59161ee815ccb69af166992a0678cf70cf0de2b4435c719"}]}