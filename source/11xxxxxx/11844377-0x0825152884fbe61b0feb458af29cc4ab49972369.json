{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: AGPL-3.0-or-later\r\n// hevm: flattened sources of src/DssSpell.sol\r\npragma solidity =0.6.11 >=0.5.12 >=0.6.11 <0.7.0;\r\n\r\n////// lib/dss-exec-lib/src/CollateralOpts.sol\r\n/* pragma solidity ^0.6.11; */\r\n\r\nstruct CollateralOpts {\r\n    bytes32 ilk;\r\n    address gem;\r\n    address join;\r\n    address flip;\r\n    address pip;\r\n    bool    isLiquidatable;\r\n    bool    isOSM;\r\n    bool    whitelistOSM;\r\n    uint256 ilkDebtCeiling;\r\n    uint256 minVaultAmount;\r\n    uint256 maxLiquidationAmount;\r\n    uint256 liquidationPenalty;\r\n    uint256 ilkStabilityFee;\r\n    uint256 bidIncrease;\r\n    uint256 bidDuration;\r\n    uint256 auctionDuration;\r\n    uint256 liquidationRatio;\r\n}\r\n\r\n////// lib/dss-exec-lib/src/MathLib.sol\r\n//\r\n// MathLib.sol -- Math Functions\r\n//\r\n// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n/* pragma solidity ^0.6.11; */\r\n\r\nlibrary MathLib {\r\n\r\n    uint256 constant internal WAD      = 10 ** 18;\r\n    uint256 constant internal RAY      = 10 ** 27;\r\n    uint256 constant internal RAD      = 10 ** 45;\r\n    uint256 constant internal THOUSAND = 10 ** 3;\r\n    uint256 constant internal MILLION  = 10 ** 6;\r\n\r\n    uint256 constant internal BPS_ONE_PCT             = 100;\r\n    uint256 constant internal BPS_ONE_HUNDRED_PCT     = 100 * BPS_ONE_PCT;\r\n    uint256 constant internal RATES_ONE_HUNDRED_PCT   = 1000000021979553151239153027;\r\n\r\n    // --- SafeMath Functions ---\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x);\r\n    }\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x);\r\n    }\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n    function rmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n}\r\n\r\n////// lib/dss-exec-lib/src/DssExecLib.sol\r\n// DssExecLib.sol -- MakerDAO Executive Spellcrafting Library\r\n//\r\n// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n/* pragma solidity ^0.6.11; */\r\n\r\n/* import \"./MathLib.sol\"; */\r\n\r\ninterface Initializable {\r\n    function init(bytes32) external;\r\n}\r\n\r\ninterface Authorizable {\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n}\r\n\r\ninterface Fileable {\r\n    function file(bytes32, address) external;\r\n    function file(bytes32, uint256) external;\r\n    function file(bytes32, bytes32, uint256) external;\r\n    function file(bytes32, bytes32, address) external;\r\n}\r\n\r\ninterface Drippable {\r\n    function drip() external returns (uint256);\r\n    function drip(bytes32) external returns (uint256);\r\n}\r\n\r\ninterface Pricing {\r\n    function poke(bytes32) external;\r\n}\r\n\r\ninterface ERC20 {\r\n    function decimals() external returns (uint8);\r\n}\r\n\r\ninterface DssVat {\r\n    function ilks(bytes32) external returns (uint256 Art, uint256 rate, uint256 spot, uint256 line, uint256 dust);\r\n    function Line() external view returns (uint256);\r\n}\r\n\r\ninterface AuctionLike {\r\n    function vat() external returns (address);\r\n    function cat() external returns (address); // Only flip\r\n    function beg() external returns (uint256);\r\n    function pad() external returns (uint256); // Only flop\r\n    function ttl() external returns (uint256);\r\n    function tau() external returns (uint256);\r\n    function ilk() external returns (bytes32); // Only flip\r\n    function gem() external returns (bytes32); // Only flap/flop\r\n}\r\n\r\ninterface JoinLike {\r\n    function vat() external returns (address);\r\n    function ilk() external returns (bytes32);\r\n    function gem() external returns (address);\r\n    function dec() external returns (uint256);\r\n}\r\n\r\n// Includes Median and OSM functions\r\ninterface OracleLike {\r\n    function src() external view returns (address);\r\n    function lift(address[] calldata) external;\r\n    function drop(address[] calldata) external;\r\n    function setBar(uint256) external;\r\n    function kiss(address) external;\r\n    function diss(address) external;\r\n    function kiss(address[] calldata) external;\r\n    function diss(address[] calldata) external;\r\n}\r\n\r\ninterface MomLike {\r\n    function setOsm(bytes32, address) external;\r\n}\r\n\r\ninterface RegistryLike {\r\n    function add(address) external;\r\n    function info(bytes32) external view returns (\r\n        string memory, string memory, uint256, address, address, address, address\r\n    );\r\n    function ilkData(bytes32) external view returns (\r\n        uint256       pos,\r\n        address       gem,\r\n        address       pip,\r\n        address       join,\r\n        address       flip,\r\n        uint256       dec,\r\n        string memory name,\r\n        string memory symbol\r\n    );\r\n}\r\n\r\n// https://github.com/makerdao/dss-chain-log\r\ninterface ChainlogLike {\r\n    function setVersion(string calldata) external;\r\n    function setIPFS(string calldata) external;\r\n    function setSha256sum(string calldata) external;\r\n    function getAddress(bytes32) external view returns (address);\r\n    function setAddress(bytes32, address) external;\r\n    function removeAddress(bytes32) external;\r\n}\r\n\r\ninterface IAMLike {\r\n    function ilks(bytes32) external view returns (uint256,uint256,uint48,uint48,uint48);\r\n    function setIlk(bytes32,uint256,uint256,uint256) external;\r\n    function remIlk(bytes32) external;\r\n    function exec(bytes32) external returns (uint256);\r\n}\r\n\r\n\r\nlibrary DssExecLib {\r\n\r\n    using MathLib for *;\r\n\r\n    /****************************/\r\n    /*** Changelog Management ***/\r\n    /****************************/\r\n    /**\r\n        @dev Set an address in the MCD on-chain changelog.\r\n        @param _log Address of the chainlog contract\r\n        @param _key Access key for the address (e.g. \"MCD_VAT\")\r\n        @param _val The address associated with the _key\r\n    */\r\n    function setChangelogAddress(address _log, bytes32 _key, address _val) public {\r\n        ChainlogLike(_log).setAddress(_key, _val);\r\n    }\r\n\r\n    /**\r\n        @dev Set version in the MCD on-chain changelog.\r\n        @param _log Address of the chainlog contract\r\n        @param _version Changelog version (e.g. \"1.1.2\")\r\n    */\r\n    function setChangelogVersion(address _log, string memory _version) public {\r\n        ChainlogLike(_log).setVersion(_version);\r\n    }\r\n    /**\r\n        @dev Set IPFS hash of IPFS changelog in MCD on-chain changelog.\r\n        @param _log Address of the chainlog contract\r\n        @param _ipfsHash IPFS hash (e.g. \"QmefQMseb3AiTapiAKKexdKHig8wroKuZbmLtPLv4u2YwW\")\r\n    */\r\n    function setChangelogIPFS(address _log, string memory _ipfsHash) public {\r\n        ChainlogLike(_log).setIPFS(_ipfsHash);\r\n    }\r\n    /**\r\n        @dev Set SHA256 hash in MCD on-chain changelog.\r\n        @param _log Address of the chainlog contract\r\n        @param _SHA256Sum SHA256 hash (e.g. \"e42dc9d043a57705f3f097099e6b2de4230bca9a020c797508da079f9079e35b\")\r\n    */\r\n    function setChangelogSHA256(address _log, string memory _SHA256Sum) public {\r\n        ChainlogLike(_log).setSha256sum(_SHA256Sum);\r\n    }\r\n\r\n\r\n    /**********************/\r\n    /*** Authorizations ***/\r\n    /**********************/\r\n    /**\r\n        @dev Give an address authorization to perform auth actions on the contract.\r\n        @param _base   The address of the contract where the authorization will be set\r\n        @param _ward   Address to be authorized\r\n    */\r\n    function authorize(address _base, address _ward) public {\r\n        Authorizable(_base).rely(_ward);\r\n    }\r\n    /**\r\n        @dev Revoke contract authorization from an address.\r\n        @param _base   The address of the contract where the authorization will be revoked\r\n        @param _ward   Address to be deauthorized\r\n    */\r\n    function deauthorize(address _base, address _ward) public {\r\n        Authorizable(_base).deny(_ward);\r\n    }\r\n\r\n    /**************************/\r\n    /*** Accumulating Rates ***/\r\n    /**************************/\r\n    /**\r\n        @dev Update rate accumulation for the Dai Savings Rate (DSR).\r\n        @param _pot   Address of the MCD_POT core contract\r\n    */\r\n    function accumulateDSR(address _pot) public {\r\n        Drippable(_pot).drip();\r\n    }\r\n    /**\r\n        @dev Update rate accumulation for the stability fees of a given collateral type.\r\n        @param _jug   Address of the MCD_JUG core contract\r\n        @param _ilk   Collateral type\r\n    */\r\n    function accumulateCollateralStabilityFees(address _jug, bytes32 _ilk) public {\r\n        Drippable(_jug).drip(_ilk);\r\n    }\r\n\r\n    /*********************/\r\n    /*** Price Updates ***/\r\n    /*********************/\r\n    /**\r\n        @dev Update price of a given collateral type.\r\n        @param _spot  Spotter contract address\r\n        @param _ilk   Collateral type\r\n    */\r\n    function updateCollateralPrice(address _spot, bytes32 _ilk) public {\r\n        Pricing(_spot).poke(_ilk);\r\n    }\r\n\r\n    /****************************/\r\n    /*** System Configuration ***/\r\n    /****************************/\r\n    /**\r\n        @dev Set a contract in another contract, defining the relationship (ex. set a new Cat contract in the Vat)\r\n        @param _base   The address of the contract where the new contract address will be filed\r\n        @param _what   Name of contract to file\r\n        @param _addr   Address of contract to file\r\n    */\r\n    function setContract(address _base, bytes32 _what, address _addr) public {\r\n        Fileable(_base).file(_what, _addr);\r\n    }\r\n    /**\r\n        @dev Set a contract in another contract, defining the relationship (ex. set a new Cat contract in the Vat)\r\n        @param _base   The address of the contract where the new contract address will be filed\r\n        @param _ilk    Collateral type\r\n        @param _what   Name of contract to file\r\n        @param _addr   Address of contract to file\r\n    */\r\n    function setContract(address _base, bytes32 _ilk, bytes32 _what, address _addr) public {\r\n        Fileable(_base).file(_ilk, _what, _addr);\r\n    }\r\n\r\n    /******************************/\r\n    /*** System Risk Parameters ***/\r\n    /******************************/\r\n    // function setGlobalDebtCeiling(uint256 _amount) public { setGlobalDebtCeiling(vat(), _amount); }\r\n    /**\r\n        @dev Set the global debt ceiling. Amount will be converted to the correct internal precision.\r\n        @param _vat    The address of the Vat core accounting contract\r\n        @param _amount The amount to set in DAI (ex. 10m DAI amount == 10000000)\r\n    */\r\n    function setGlobalDebtCeiling(address _vat, uint256 _amount) public {\r\n        require(_amount < MathLib.WAD);  // \"LibDssExec/incorrect-global-Line-precision\"\r\n        Fileable(_vat).file(\"Line\", _amount * MathLib.RAD);\r\n    }\r\n    /**\r\n        @dev Increase the global debt ceiling by a specific amount. Amount will be converted to the correct internal precision.\r\n        @param _vat    The address of the Vat core accounting contract\r\n        @param _amount The amount to add in DAI (ex. 10m DAI amount == 10000000)\r\n    */\r\n    function increaseGlobalDebtCeiling(address _vat, uint256 _amount) public {\r\n        require(_amount < MathLib.WAD);  // \"LibDssExec/incorrect-Line-increase-precision\"\r\n        Fileable(_vat).file(\"Line\", MathLib.add(DssVat(_vat).Line(), _amount * MathLib.RAD));\r\n    }\r\n    /**\r\n        @dev Decrease the global debt ceiling by a specific amount. Amount will be converted to the correct internal precision.\r\n        @param _vat    The address of the Vat core accounting contract\r\n        @param _amount The amount to reduce in DAI (ex. 10m DAI amount == 10000000)\r\n    */\r\n    function decreaseGlobalDebtCeiling(address _vat, uint256 _amount) public {\r\n        require(_amount < MathLib.WAD);  // \"LibDssExec/incorrect-Line-decrease-precision\"\r\n        Fileable(_vat).file(\"Line\", MathLib.sub(DssVat(_vat).Line(), _amount * MathLib.RAD));\r\n    }\r\n    /**\r\n        @dev Set the Dai Savings Rate. See: docs/rates.txt\r\n        @param _pot    The address of the Pot core contract\r\n        @param _rate   The accumulated rate (ex. 4% => 1000000001243680656318820312)\r\n    */\r\n    function setDSR(address _pot, uint256 _rate) public {\r\n        require((_rate >= MathLib.RAY) && (_rate <= MathLib.RATES_ONE_HUNDRED_PCT));  // \"LibDssExec/dsr-out-of-bounds\"\r\n        Fileable(_pot).file(\"dsr\", _rate);\r\n    }\r\n    /**\r\n        @dev Set the DAI amount for system surplus auctions. Amount will be converted to the correct internal precision.\r\n        @param _vow    The address of the Vow core contract\r\n        @param _amount The amount to set in DAI (ex. 10m DAI amount == 10000000)\r\n    */\r\n    function setSurplusAuctionAmount(address _vow, uint256 _amount) public {\r\n        require(_amount < MathLib.WAD);  // \"LibDssExec/incorrect-vow-bump-precision\"\r\n        Fileable(_vow).file(\"bump\", _amount * MathLib.RAD);\r\n    }\r\n    /**\r\n        @dev Set the DAI amount for system surplus buffer, must be exceeded before surplus auctions start. Amount will be converted to the correct internal precision.\r\n        @param _vow    The address of the Vow core contract\r\n        @param _amount The amount to set in DAI (ex. 10m DAI amount == 10000000)\r\n    */\r\n    function setSurplusBuffer(address _vow, uint256 _amount) public {\r\n        require(_amount < MathLib.WAD);  // \"LibDssExec/incorrect-vow-hump-precision\"\r\n        Fileable(_vow).file(\"hump\", _amount * MathLib.RAD);\r\n    }\r\n    /**\r\n        @dev Set minimum bid increase for surplus auctions. Amount will be converted to the correct internal precision.\r\n        @dev Equation used for conversion is (1 + pct / 10,000) * WAD\r\n        @param _flap    The address of the Flapper core contract\r\n        @param _pct_bps The pct, in basis points, to set in integer form (x100). (ex. 5% = 5 * 100 = 500)\r\n    */\r\n    function setMinSurplusAuctionBidIncrease(address _flap, uint256 _pct_bps) public {\r\n        require(_pct_bps < MathLib.BPS_ONE_HUNDRED_PCT);  // \"LibDssExec/incorrect-flap-beg-precision\"\r\n        Fileable(_flap).file(\"beg\", MathLib.add(MathLib.WAD, MathLib.wdiv(_pct_bps, MathLib.BPS_ONE_HUNDRED_PCT)));\r\n    }\r\n    /**\r\n        @dev Set bid duration for surplus auctions.\r\n        @param _flap   The address of the Flapper core contract\r\n        @param _duration Amount of time for bids.\r\n    */\r\n    function setSurplusAuctionBidDuration(address _flap, uint256 _duration) public {\r\n        Fileable(_flap).file(\"ttl\", _duration);\r\n    }\r\n    /**\r\n        @dev Set total auction duration for surplus auctions.\r\n        @param _flap   The address of the Flapper core contract\r\n        @param _duration Amount of time for auctions.\r\n    */\r\n    function setSurplusAuctionDuration(address _flap, uint256 _duration) public {\r\n        Fileable(_flap).file(\"tau\", _duration);\r\n    }\r\n    /**\r\n        @dev Set the number of seconds that pass before system debt is auctioned for MKR tokens.\r\n        @param _vow    The address of the Vow core contract\r\n        @param _duration Duration in seconds\r\n    */\r\n    function setDebtAuctionDelay(address _vow, uint256 _duration) public {\r\n        Fileable(_vow).file(\"wait\", _duration);\r\n    }\r\n    /**\r\n        @dev Set the DAI amount for system debt to be covered by each debt auction. Amount will be converted to the correct internal precision.\r\n        @param _vow    The address of the Vow core contract\r\n        @param _amount The amount to set in DAI (ex. 10m DAI amount == 10000000)\r\n    */\r\n    function setDebtAuctionDAIAmount(address _vow, uint256 _amount) public {\r\n        require(_amount < MathLib.WAD);  // \"LibDssExec/incorrect-vow-sump-precision\"\r\n        Fileable(_vow).file(\"sump\", _amount * MathLib.RAD);\r\n    }\r\n    /**\r\n        @dev Set the starting MKR amount to be auctioned off to cover system debt in debt auctions. Amount will be converted to the correct internal precision.\r\n        @param _vow    The address of the Vow core contract\r\n        @param _amount The amount to set in MKR (ex. 250 MKR amount == 250)\r\n    */\r\n    function setDebtAuctionMKRAmount(address _vow, uint256 _amount) public {\r\n        require(_amount < MathLib.WAD);  // \"LibDssExec/incorrect-vow-dump-precision\"\r\n        Fileable(_vow).file(\"dump\", _amount * MathLib.WAD);\r\n    }\r\n    /**\r\n        @dev Set minimum bid increase for debt auctions. Amount will be converted to the correct internal precision.\r\n        @dev Equation used for conversion is (1 + pct / 10,000) * WAD\r\n        @param _flop   The address of the Flopper core contract\r\n        @param _pct_bps    The pct, in basis points, to set in integer form (x100). (ex. 5% = 5 * 100 = 500)\r\n    */\r\n    function setMinDebtAuctionBidIncrease(address _flop, uint256 _pct_bps) public {\r\n        require(_pct_bps < MathLib.BPS_ONE_HUNDRED_PCT);  // \"LibDssExec/incorrect-flap-beg-precision\"\r\n        Fileable(_flop).file(\"beg\", MathLib.add(MathLib.WAD, MathLib.wdiv(_pct_bps, MathLib.BPS_ONE_HUNDRED_PCT)));\r\n    }\r\n    /**\r\n        @dev Set bid duration for debt auctions.\r\n        @param _flop   The address of the Flopper core contract\r\n        @param _duration Amount of time for bids.\r\n    */\r\n    function setDebtAuctionBidDuration(address _flop, uint256 _duration) public {\r\n        Fileable(_flop).file(\"ttl\", _duration);\r\n    }\r\n    /**\r\n        @dev Set total auction duration for debt auctions.\r\n        @param _flop   The address of the Flopper core contract\r\n        @param _duration Amount of time for auctions.\r\n    */\r\n    function setDebtAuctionDuration(address _flop, uint256 _duration) public {\r\n        Fileable(_flop).file(\"tau\", _duration);\r\n    }\r\n    /**\r\n        @dev Set the rate of increasing amount of MKR out for auction during debt auctions. Amount will be converted to the correct internal precision.\r\n        @dev MKR amount is increased by this rate every \"tick\" (if auction duration has passed and no one has bid on the MKR)\r\n        @dev Equation used for conversion is (1 + pct / 10,000) * WAD\r\n        @param _flop   The address of the Flopper core contract\r\n        @param _pct_bps    The pct, in basis points, to set in integer form (x100). (ex. 5% = 5 * 100 = 500)\r\n    */\r\n    function setDebtAuctionMKRIncreaseRate(address _flop, uint256 _pct_bps) public {\r\n        Fileable(_flop).file(\"pad\", MathLib.add(MathLib.WAD, MathLib.wdiv(_pct_bps, MathLib.BPS_ONE_HUNDRED_PCT)));\r\n    }\r\n    /**\r\n        @dev Set the maximum total DAI amount that can be out for liquidation in the system at any point. Amount will be converted to the correct internal precision.\r\n        @param _cat    The address of the Cat core contract\r\n        @param _amount The amount to set in DAI (ex. 250,000 DAI amount == 250000)\r\n    */\r\n    function setMaxTotalDAILiquidationAmount(address _cat, uint256 _amount) public {\r\n        require(_amount < MathLib.WAD);  // \"LibDssExec/incorrect-vow-dump-precision\"\r\n        Fileable(_cat).file(\"box\", _amount * MathLib.RAD);\r\n    }\r\n    /**\r\n        @dev Set the duration of time that has to pass during emergency shutdown before collateral can start being claimed by DAI holders.\r\n        @param _end    The address of the End core contract\r\n        @param _duration Time in seconds to set for ES processing time\r\n    */\r\n    function setEmergencyShutdownProcessingTime(address _end, uint256 _duration) public {\r\n        Fileable(_end).file(\"wait\", _duration);\r\n    }\r\n    /**\r\n        @dev Set the global stability fee (is not typically used, currently is 0).\r\n            Many of the settings that change weekly rely on the rate accumulator\r\n            described at https://docs.makerdao.com/smart-contract-modules/rates-module\r\n            To check this yourself, use the following rate calculation (example 8%):\r\n\r\n            $ bc -l <<< 'scale=27; e( l(1.08)/(60 * 60 * 24 * 365) )'\r\n\r\n            A table of rates can also be found at:\r\n            https://ipfs.io/ipfs/QmefQMseb3AiTapiAKKexdKHig8wroKuZbmLtPLv4u2YwW\r\n        @param _jug    The address of the Jug core accounting contract\r\n        @param _rate   The accumulated rate (ex. 4% => 1000000001243680656318820312)\r\n    */\r\n    function setGlobalStabilityFee(address _jug, uint256 _rate) public {\r\n        require((_rate >= MathLib.RAY) && (_rate <= MathLib.RATES_ONE_HUNDRED_PCT));  // \"LibDssExec/global-stability-fee-out-of-bounds\"\r\n        Fileable(_jug).file(\"base\", _rate);\r\n    }\r\n    /**\r\n        @dev Set the value of DAI in the reference asset (e.g. $1 per DAI). Value will be converted to the correct internal precision.\r\n        @dev Equation used for conversion is value * RAY / 1000\r\n        @param _spot   The address of the Spot core contract\r\n        @param _value The value to set as integer (x1000) (ex. $1.025 == 1025)\r\n    */\r\n    function setDAIReferenceValue(address _spot, uint256 _value) public {\r\n        require(_value < MathLib.WAD);  // \"LibDssExec/incorrect-ilk-dunk-precision\"\r\n        Fileable(_spot).file(\"par\", MathLib.rdiv(_value, 1000));\r\n    }\r\n\r\n    /*****************************/\r\n    /*** Collateral Management ***/\r\n    /*****************************/\r\n    /**\r\n        @dev Set a collateral debt ceiling. Amount will be converted to the correct internal precision.\r\n        @param _vat    The address of the Vat core accounting contract\r\n        @param _ilk    The ilk to update (ex. bytes32(\"ETH-A\"))\r\n        @param _amount The amount to set in DAI (ex. 10m DAI amount == 10000000)\r\n    */\r\n    function setIlkDebtCeiling(address _vat, bytes32 _ilk, uint256 _amount) public {\r\n        require(_amount < MathLib.WAD);  // \"LibDssExec/incorrect-ilk-line-precision\"\r\n        Fileable(_vat).file(_ilk, \"line\", _amount * MathLib.RAD);\r\n    }\r\n    /**\r\n        @dev Increase a collateral debt ceiling. Amount will be converted to the correct internal precision.\r\n        @param _vat    The address of the Vat core accounting contract\r\n        @param _ilk    The ilk to update (ex. bytes32(\"ETH-A\"))\r\n        @param _amount The amount to increase in DAI (ex. 10m DAI amount == 10000000)\r\n        @param _global If true, increases the global debt ceiling by _amount\r\n    */\r\n    function increaseIlkDebtCeiling(address _vat, bytes32 _ilk, uint256 _amount, bool _global) public {\r\n        require(_amount < MathLib.WAD);  // \"LibDssExec/incorrect-ilk-line-precision\"\r\n        (,,,uint256 line_,) = DssVat(_vat).ilks(_ilk);\r\n        Fileable(_vat).file(_ilk, \"line\", MathLib.add(line_, _amount * MathLib.RAD));\r\n        if (_global) { increaseGlobalDebtCeiling(_vat, _amount); }\r\n    }\r\n    /**\r\n        @dev Decrease a collateral debt ceiling. Amount will be converted to the correct internal precision.\r\n        @param _vat    The address of the Vat core accounting contract\r\n        @param _ilk    The ilk to update (ex. bytes32(\"ETH-A\"))\r\n        @param _amount The amount to decrease in DAI (ex. 10m DAI amount == 10000000)\r\n        @param _global If true, decreases the global debt ceiling by _amount\r\n    */\r\n    function decreaseIlkDebtCeiling(address _vat, bytes32 _ilk, uint256 _amount, bool _global) public {\r\n        require(_amount < MathLib.WAD);  // \"LibDssExec/incorrect-ilk-line-precision\"\r\n        (,,,uint256 line_,) = DssVat(_vat).ilks(_ilk);\r\n        Fileable(_vat).file(_ilk, \"line\", MathLib.sub(line_, _amount * MathLib.RAD));\r\n        if (_global) { decreaseGlobalDebtCeiling(_vat, _amount); }\r\n    }\r\n    /**\r\n        @dev Set the parameters for an ilk in the \"MCD_IAM_AUTO_LINE\" auto-line\r\n        @param _iam    The address of the Vat core accounting contract\r\n        @param _ilk    The ilk to update (ex. bytes32(\"ETH-A\"))\r\n        @param _amount The Maximum value (ex. 100m DAI amount == 100000000)\r\n        @param _gap    The amount of Dai per step (ex. 5m Dai == 5000000)\r\n        @param _ttl    The amount of time (in seconds)\r\n    */\r\n    function setIlkAutoLineParameters(address _iam, bytes32 _ilk, uint256 _amount, uint256 _gap, uint256 _ttl) public {\r\n        require(_amount < MathLib.WAD);  // \"LibDssExec/incorrect-auto-line-amount-precision\"\r\n        require(_gap < MathLib.WAD);  // \"LibDssExec/incorrect-auto-line-gap-precision\"\r\n        IAMLike(_iam).setIlk(_ilk, _amount * MathLib.RAD, _gap * MathLib.RAD, _ttl);\r\n    }\r\n    /**\r\n        @dev Set the debt ceiling for an ilk in the \"MCD_IAM_AUTO_LINE\" auto-line without updating the time values\r\n        @param _iam    The address of the Vat core accounting contract\r\n        @param _ilk    The ilk to update (ex. bytes32(\"ETH-A\"))\r\n        @param _amount The amount to decrease in DAI (ex. 10m DAI amount == 10000000)\r\n    */\r\n    function setIlkAutoLineDebtCeiling(address _iam, bytes32 _ilk, uint256 _amount) public {\r\n        (, uint256 gap, uint48 ttl,,) = IAMLike(_iam).ilks(_ilk);\r\n        require(gap != 0 && ttl != 0);  // \"LibDssExec/auto-line-not-configured\"\r\n        IAMLike(_iam).setIlk(_ilk, _amount * MathLib.RAD, uint256(gap), uint256(ttl));\r\n    }\r\n    /**\r\n        @dev Remove an ilk in the \"MCD_IAM_AUTO_LINE\" auto-line\r\n        @param _iam    The address of the MCD_IAM_AUTO_LINE core accounting contract\r\n        @param _ilk    The ilk to remove (ex. bytes32(\"ETH-A\"))\r\n    */\r\n    function removeIlkFromAutoLine(address _iam, bytes32 _ilk) public {\r\n        IAMLike(_iam).remIlk(_ilk);\r\n    }\r\n    /**\r\n        @dev Set a collateral minimum vault amount. Amount will be converted to the correct internal precision.\r\n        @param _vat    The address of the Vat core accounting contract\r\n        @param _ilk    The ilk to update (ex. bytes32(\"ETH-A\"))\r\n        @param _amount The amount to set in DAI (ex. 10m DAI amount == 10000000)\r\n    */\r\n    function setIlkMinVaultAmount(address _vat, bytes32 _ilk, uint256 _amount) public {\r\n        require(_amount < MathLib.WAD);  // \"LibDssExec/incorrect-ilk-dust-precision\"\r\n        Fileable(_vat).file(_ilk, \"dust\", _amount * MathLib.RAD);\r\n    }\r\n    /**\r\n        @dev Set a collateral liquidation penalty. Amount will be converted to the correct internal precision.\r\n        @dev Equation used for conversion is (1 + pct / 10,000) * WAD\r\n        @param _cat    The address of the Cat core accounting contract (will need to revisit for LIQ-2.0)\r\n        @param _ilk    The ilk to update (ex. bytes32(\"ETH-A\"))\r\n        @param _pct_bps    The pct, in basis points, to set in integer form (x100). (ex. 10.25% = 10.25 * 100 = 1025)\r\n    */\r\n    function setIlkLiquidationPenalty(address _cat, bytes32 _ilk, uint256 _pct_bps) public {\r\n        require(_pct_bps < MathLib.BPS_ONE_HUNDRED_PCT);  // \"LibDssExec/incorrect-ilk-chop-precision\"\r\n        Fileable(_cat).file(_ilk, \"chop\", MathLib.add(MathLib.WAD, MathLib.wdiv(_pct_bps, MathLib.BPS_ONE_HUNDRED_PCT)));\r\n    }\r\n    /**\r\n        @dev Set max DAI amount for liquidation per vault for collateral. Amount will be converted to the correct internal precision.\r\n        @param _cat    The address of the Cat core accounting contract (will need to revisit for LIQ-2.0)\r\n        @param _ilk    The ilk to update (ex. bytes32(\"ETH-A\"))\r\n        @param _amount The amount to set in DAI (ex. 10m DAI amount == 10000000)\r\n    */\r\n    function setIlkMaxLiquidationAmount(address _cat, bytes32 _ilk, uint256 _amount) public {\r\n        require(_amount < MathLib.WAD);  // \"LibDssExec/incorrect-ilk-dunk-precision\"\r\n        Fileable(_cat).file(_ilk, \"dunk\", _amount * MathLib.RAD);\r\n    }\r\n    /**\r\n        @dev Set a collateral liquidation ratio. Amount will be converted to the correct internal precision.\r\n        @dev Equation used for conversion is pct * RAY / 10,000\r\n        @param _spot   The address of the Spot core accounting contract\r\n        @param _ilk    The ilk to update (ex. bytes32(\"ETH-A\"))\r\n        @param _pct_bps    The pct, in basis points, to set in integer form (x100). (ex. 150% = 150 * 100 = 15000)\r\n    */\r\n    function setIlkLiquidationRatio(address _spot, bytes32 _ilk, uint256 _pct_bps) public {\r\n        require(_pct_bps < 10 * MathLib.BPS_ONE_HUNDRED_PCT); // \"LibDssExec/incorrect-ilk-mat-precision\" // Fails if pct >= 1000%\r\n        require(_pct_bps >= MathLib.BPS_ONE_HUNDRED_PCT); // the liquidation ratio has to be bigger or equal to 100%\r\n        Fileable(_spot).file(_ilk, \"mat\", MathLib.rdiv(_pct_bps, MathLib.BPS_ONE_HUNDRED_PCT));\r\n    }\r\n    /**\r\n        @dev Set minimum bid increase for collateral. Amount will be converted to the correct internal precision.\r\n        @dev Equation used for conversion is (1 + pct / 10,000) * WAD\r\n        @param _flip   The address of the ilk's flip core accounting contract\r\n        @param _pct_bps    The pct, in basis points, to set in integer form (x100). (ex. 5% = 5 * 100 = 500)\r\n    */\r\n    function setIlkMinAuctionBidIncrease(address _flip, uint256 _pct_bps) public {\r\n        require(_pct_bps < MathLib.BPS_ONE_HUNDRED_PCT);  // \"LibDssExec/incorrect-ilk-chop-precision\"\r\n        Fileable(_flip).file(\"beg\", MathLib.add(MathLib.WAD, MathLib.wdiv(_pct_bps, MathLib.BPS_ONE_HUNDRED_PCT)));\r\n    }\r\n    /**\r\n        @dev Set bid duration for a collateral type.\r\n        @param _flip   The address of the ilk's flip core accounting contract\r\n        @param _duration Amount of time for bids.\r\n    */\r\n    function setIlkBidDuration(address _flip, uint256 _duration) public {\r\n        Fileable(_flip).file(\"ttl\", _duration);\r\n    }\r\n    /**\r\n        @dev Set auction duration for a collateral type.\r\n        @param _flip   The address of the ilk's flip core accounting contract\r\n        @param _duration Amount of time for auctions.\r\n    */\r\n    function setIlkAuctionDuration(address _flip, uint256 _duration) public {\r\n        Fileable(_flip).file(\"tau\", _duration);\r\n    }\r\n    /**\r\n        @dev Set the stability fee for a given ilk.\r\n            Many of the settings that change weekly rely on the rate accumulator\r\n            described at https://docs.makerdao.com/smart-contract-modules/rates-module\r\n            To check this yourself, use the following rate calculation (example 8%):\r\n\r\n            $ bc -l <<< 'scale=27; e( l(1.08)/(60 * 60 * 24 * 365) )'\r\n\r\n            A table of rates can also be found at:\r\n            https://ipfs.io/ipfs/QmefQMseb3AiTapiAKKexdKHig8wroKuZbmLtPLv4u2YwW\r\n\r\n        @param _jug    The address of the Jug core accounting contract\r\n        @param _ilk    The ilk to update (ex. bytes32(\"ETH-A\") )\r\n        @param _rate   The accumulated rate (ex. 4% => 1000000001243680656318820312)\r\n        @param _doDrip `true` to accumulate stability fees for the collateral\r\n    */\r\n    function setIlkStabilityFee(address _jug, bytes32 _ilk, uint256 _rate, bool _doDrip) public {\r\n        require((_rate >= MathLib.RAY) && (_rate <= MathLib.RATES_ONE_HUNDRED_PCT));  // \"LibDssExec/ilk-stability-fee-out-of-bounds\"\r\n        if (_doDrip) Drippable(_jug).drip(_ilk);\r\n\r\n        Fileable(_jug).file(_ilk, \"duty\", _rate);\r\n    }\r\n\r\n    /***********************/\r\n    /*** Core Management ***/\r\n    /***********************/\r\n    /**\r\n        @dev Update collateral auction contracts.\r\n        @param _vat        Vat core contract address\r\n        @param _cat        Cat core contract address\r\n        @param _end        End core contract address\r\n        @param _flipperMom Flipper Mom core contract address\r\n        @param _ilk        The collateral's auction contract to update\r\n        @param _newFlip    New auction contract address\r\n        @param _oldFlip    Old auction contract address\r\n    */\r\n    function updateCollateralAuctionContract(\r\n        address _vat,\r\n        address _cat,\r\n        address _end,\r\n        address _flipperMom,\r\n        bytes32 _ilk,\r\n        address _newFlip,\r\n        address _oldFlip\r\n    ) public {\r\n        // Add new flip address to Cat\r\n        setContract(_cat, _ilk, \"flip\", _newFlip);\r\n\r\n        // Authorize MCD contracts for new flip\r\n        authorize(_newFlip, _cat);\r\n        authorize(_newFlip, _end);\r\n        authorize(_newFlip, _flipperMom);\r\n\r\n        // Deauthorize MCD contracts for old flip\r\n        deauthorize(_oldFlip, _cat);\r\n        deauthorize(_oldFlip, _end);\r\n        deauthorize(_oldFlip, _flipperMom);\r\n\r\n        // Transfer auction params from old flip to new flip\r\n        Fileable(_newFlip).file(\"beg\", AuctionLike(_oldFlip).beg());\r\n        Fileable(_newFlip).file(\"ttl\", AuctionLike(_oldFlip).ttl());\r\n        Fileable(_newFlip).file(\"tau\", AuctionLike(_oldFlip).tau());\r\n\r\n        // Sanity checks\r\n        require(AuctionLike(_newFlip).ilk() == _ilk);  // \"non-matching-ilk\"\r\n        require(AuctionLike(_newFlip).vat() == _vat);  // \"non-matching-vat\"\r\n    }\r\n    /**\r\n        @dev Update surplus auction contracts.\r\n        @param _vat     Vat core contract address\r\n        @param _vow     Vow core contract address\r\n        @param _newFlap New surplus auction contract address\r\n        @param _oldFlap Old surplus auction contract address\r\n    */\r\n    function updateSurplusAuctionContract(address _vat, address _vow, address _newFlap, address _oldFlap) public {\r\n\r\n        // Add new flap address to Vow\r\n        setContract(_vow, \"flapper\", _newFlap);\r\n\r\n        // Authorize MCD contracts for new flap\r\n        authorize(_newFlap, _vow);\r\n\r\n        // Deauthorize MCD contracts for old flap\r\n        deauthorize(_oldFlap, _vow);\r\n\r\n        // Transfer auction params from old flap to new flap\r\n        Fileable(_newFlap).file(\"beg\", AuctionLike(_oldFlap).beg());\r\n        Fileable(_newFlap).file(\"ttl\", AuctionLike(_oldFlap).ttl());\r\n        Fileable(_newFlap).file(\"tau\", AuctionLike(_oldFlap).tau());\r\n\r\n        // Sanity checks\r\n        require(AuctionLike(_newFlap).gem() == AuctionLike(_oldFlap).gem());  // \"non-matching-gem\"\r\n        require(AuctionLike(_newFlap).vat() == _vat);  // \"non-matching-vat\"\r\n    }\r\n    /**\r\n        @dev Update debt auction contracts.\r\n        @param _vat          Vat core contract address\r\n        @param _vow          Vow core contract address\r\n        @param _mkrAuthority MKRAuthority core contract address\r\n        @param _newFlop      New debt auction contract address\r\n        @param _oldFlop      Old debt auction contract address\r\n    */\r\n    function updateDebtAuctionContract(address _vat, address _vow, address _mkrAuthority, address _newFlop, address _oldFlop) public {\r\n        // Add new flop address to Vow\r\n        setContract(_vow, \"flopper\", _newFlop);\r\n\r\n        // Authorize MCD contracts for new flop\r\n        authorize(_newFlop, _vow);\r\n        authorize(_vat, _newFlop);\r\n        authorize(_mkrAuthority, _newFlop);\r\n\r\n        // Deauthorize MCD contracts for old flop\r\n        deauthorize(_oldFlop, _vow);\r\n        deauthorize(_vat, _oldFlop);\r\n        deauthorize(_mkrAuthority, _oldFlop);\r\n\r\n        // Transfer auction params from old flop to new flop\r\n        Fileable(_newFlop).file(\"beg\", AuctionLike(_oldFlop).beg());\r\n        Fileable(_newFlop).file(\"pad\", AuctionLike(_oldFlop).pad());\r\n        Fileable(_newFlop).file(\"ttl\", AuctionLike(_oldFlop).ttl());\r\n        Fileable(_newFlop).file(\"tau\", AuctionLike(_oldFlop).tau());\r\n\r\n        // Sanity checks\r\n        require(AuctionLike(_newFlop).gem() == AuctionLike(_oldFlop).gem()); // \"non-matching-gem\"\r\n        require(AuctionLike(_newFlop).vat() == _vat);  // \"non-matching-vat\"\r\n    }\r\n\r\n    /*************************/\r\n    /*** Oracle Management ***/\r\n    /*************************/\r\n    /**\r\n        @dev Adds oracle feeds to the Median's writer whitelist, allowing the feeds to write prices.\r\n        @param _median Median core contract address\r\n        @param _feeds      Array of oracle feed addresses to add to whitelist\r\n    */\r\n    function addWritersToMedianWhitelist(address _median, address[] memory _feeds) public {\r\n        OracleLike(_median).lift(_feeds);\r\n    }\r\n    /**\r\n        @dev Removes oracle feeds to the Median's writer whitelist, disallowing the feeds to write prices.\r\n        @param _median Median core contract address\r\n        @param _feeds      Array of oracle feed addresses to remove from whitelist\r\n    */\r\n    function removeWritersFromMedianWhitelist(address _median, address[] memory _feeds) public {\r\n        OracleLike(_median).drop(_feeds);\r\n    }\r\n    /**\r\n        @dev Adds addresses to the Median's reader whitelist, allowing the addresses to read prices from the median.\r\n        @param _median Median core contract address\r\n        @param _readers    Array of addresses to add to whitelist\r\n    */\r\n    function addReadersToMedianWhitelist(address _median, address[] memory _readers) public {\r\n        OracleLike(_median).kiss(_readers);\r\n    }\r\n    /**\r\n        @dev Adds an address to the Median's reader whitelist, allowing the address to read prices from the median.\r\n        @param _median Median core contract address\r\n        @param _reader     Address to add to whitelist\r\n    */\r\n    function addReaderToMedianWhitelist(address _median, address _reader) public {\r\n        OracleLike(_median).kiss(_reader);\r\n    }\r\n    /**\r\n        @dev Removes addresses from the Median's reader whitelist, disallowing the addresses to read prices from the median.\r\n        @param _median Median core contract address\r\n        @param _readers    Array of addresses to remove from whitelist\r\n    */\r\n    function removeReadersFromMedianWhitelist(address _median, address[] memory _readers) public {\r\n        OracleLike(_median).diss(_readers);\r\n    }\r\n    /**\r\n        @dev Removes an address to the Median's reader whitelist, disallowing the address to read prices from the median.\r\n        @param _median Median core contract address\r\n        @param _reader     Address to remove from whitelist\r\n    */\r\n    function removeReaderFromMedianWhitelist(address _median, address _reader) public {\r\n        OracleLike(_median).diss(_reader);\r\n    }\r\n    /**\r\n        @dev Sets the minimum number of valid messages from whitelisted oracle feeds needed to update median price.\r\n        @param _median Median core contract address\r\n        @param _minQuorum  Minimum number of valid messages from whitelisted oracle feeds needed to update median price (NOTE: MUST BE ODD NUMBER)\r\n    */\r\n    function setMedianWritersQuorum(address _median, uint256 _minQuorum) public {\r\n        OracleLike(_median).setBar(_minQuorum);\r\n    }\r\n    /**\r\n        @dev Adds an address to the Median's reader whitelist, allowing the address to read prices from the OSM.\r\n        @param _osm        Oracle Security Module (OSM) core contract address\r\n        @param _reader     Address to add to whitelist\r\n    */\r\n    function addReaderToOSMWhitelist(address _osm, address _reader) public {\r\n        OracleLike(_osm).kiss(_reader);\r\n    }\r\n    /**\r\n        @dev Removes an address to the Median's reader whitelist, disallowing the address to read prices from the OSM.\r\n        @param _osm        Oracle Security Module (OSM) core contract address\r\n        @param _reader     Address to remove from whitelist\r\n    */\r\n    function removeReaderFromOSMWhitelist(address _osm, address _reader) public {\r\n        OracleLike(_osm).diss(_reader);\r\n    }\r\n    /**\r\n        @dev Add OSM address to OSM mom, allowing it to be frozen by governance.\r\n        @param _osmMom     OSM Mom core contract address\r\n        @param _osm        Oracle Security Module (OSM) core contract address\r\n        @param _ilk        Collateral type using OSM\r\n    */\r\n    function allowOSMFreeze(address _osmMom, address _osm, bytes32 _ilk) public {\r\n        MomLike(_osmMom).setOsm(_ilk, _osm);\r\n    }\r\n\r\n\r\n    /*****************************/\r\n    /*** Collateral Onboarding ***/\r\n    /*****************************/\r\n\r\n    /**\r\n        @dev Performs basic functions and sanity checks to add a new collateral type to the MCD system\r\n        @param _vat      MCD_VAT\r\n        @param _cat      MCD_CAT\r\n        @param _jug      MCD_JUG\r\n        @param _end      MCD_END\r\n        @param _spot     MCD_SPOT\r\n        @param _reg      ILK_REGISTRY\r\n        @param _ilk      Collateral type key code [Ex. \"ETH-A\"]\r\n        @param _gem      Address of token contract\r\n        @param _join     Address of join adapter\r\n        @param _flip     Address of flipper\r\n        @param _pip      Address of price feed\r\n    */\r\n    function addCollateralBase(\r\n        address _vat,\r\n        address _cat,\r\n        address _jug,\r\n        address _end,\r\n        address _spot,\r\n        address _reg,\r\n        bytes32 _ilk,\r\n        address _gem,\r\n        address _join,\r\n        address _flip,\r\n        address _pip\r\n    ) public {\r\n        // Sanity checks\r\n        require(JoinLike(_join).vat() == _vat);     // \"join-vat-not-match\"\r\n        require(JoinLike(_join).ilk() == _ilk);     // \"join-ilk-not-match\"\r\n        require(JoinLike(_join).gem() == _gem);     // \"join-gem-not-match\"\r\n        require(JoinLike(_join).dec() ==\r\n                   ERC20(_gem).decimals());         // \"join-dec-not-match\"\r\n        require(AuctionLike(_flip).vat() == _vat);  // \"flip-vat-not-match\"\r\n        require(AuctionLike(_flip).cat() == _cat);  // \"flip-cat-not-match\"\r\n        require(AuctionLike(_flip).ilk() == _ilk);  // \"flip-ilk-not-match\"\r\n\r\n        // Set the token PIP in the Spotter\r\n        setContract(_spot, _ilk, \"pip\", _pip);\r\n\r\n        // Set the ilk Flipper in the Cat\r\n        setContract(_cat, _ilk, \"flip\", _flip);\r\n\r\n        // Init ilk in Vat & Jug\r\n        Initializable(_vat).init(_ilk);  // Vat\r\n        Initializable(_jug).init(_ilk);  // Jug\r\n\r\n        // Allow ilk Join to modify Vat registry\r\n        authorize(_vat, _join);\r\n\t\t// Allow the ilk Flipper to reduce the Cat litterbox on deal()\r\n        authorize(_cat, _flip);\r\n        // Allow Cat to kick auctions in ilk Flipper\r\n        authorize(_flip, _cat);\r\n        // Allow End to yank auctions in ilk Flipper\r\n        authorize(_flip, _end);\r\n\r\n        // Add new ilk to the IlkRegistry\r\n        RegistryLike(_reg).add(_join);\r\n    }\r\n}\r\n\r\n////// lib/dss-exec-lib/src/DssAction.sol\r\n//\r\n// DssAction.sol -- DSS Executive Spell Actions\r\n//\r\n// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity ^0.6.11; */\r\n\r\n/* import \"./CollateralOpts.sol\"; */\r\n/* import \"./DssExecLib.sol\"; */\r\n\r\nabstract contract DssAction {\r\n\r\n    using DssExecLib for *;\r\n\r\n    bool    public immutable officeHours;\r\n\r\n    // Changelog address applies to MCD deployments on\r\n    //        mainnet, kovan, rinkeby, ropsten, and goerli\r\n    address constant public LOG = 0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F;\r\n\r\n    constructor(bool officeHours_) public {\r\n        officeHours = officeHours_;\r\n    }\r\n\r\n    // DssExec calls execute. We limit this function subject to officeHours modifier.\r\n    function execute() external limited {\r\n        actions();\r\n    }\r\n\r\n    // DssAction developer must override `actions()` and place all actions to be called inside.\r\n    //   The DssExec function will call this subject to the officeHours limiter\r\n    //   By keeping this function public we allow simulations of `execute()` on the actions outside of the cast time.\r\n    function actions() public virtual;\r\n\r\n    // Modifier required to\r\n    modifier limited {\r\n        if (officeHours) {\r\n            uint day = (block.timestamp / 1 days + 3) % 7;\r\n            require(day < 5, \"Can only be cast on a weekday\");\r\n            uint hour = block.timestamp / 1 hours % 24;\r\n            require(hour >= 14 && hour < 21, \"Outside office hours\");\r\n        }\r\n        _;\r\n    }\r\n\r\n    /****************************/\r\n    /*** Core Address Helpers ***/\r\n    /****************************/\r\n    function vat()        internal view returns (address) { return getChangelogAddress(\"MCD_VAT\"); }\r\n    function cat()        internal view returns (address) { return getChangelogAddress(\"MCD_CAT\"); }\r\n    function jug()        internal view returns (address) { return getChangelogAddress(\"MCD_JUG\"); }\r\n    function pot()        internal view returns (address) { return getChangelogAddress(\"MCD_POT\"); }\r\n    function vow()        internal view returns (address) { return getChangelogAddress(\"MCD_VOW\"); }\r\n    function end()        internal view returns (address) { return getChangelogAddress(\"MCD_END\"); }\r\n    function reg()        internal view returns (address) { return getChangelogAddress(\"ILK_REGISTRY\"); }\r\n    function spot()       internal view returns (address) { return getChangelogAddress(\"MCD_SPOT\"); }\r\n    function flap()       internal view returns (address) { return getChangelogAddress(\"MCD_FLAP\"); }\r\n    function flop()       internal view returns (address) { return getChangelogAddress(\"MCD_FLOP\"); }\r\n    function osmMom()     internal view returns (address) { return getChangelogAddress(\"OSM_MOM\"); }\r\n    function govGuard()   internal view returns (address) { return getChangelogAddress(\"GOV_GUARD\"); }\r\n    function flipperMom() internal view returns (address) { return getChangelogAddress(\"FLIPPER_MOM\"); }\r\n    function autoLine()   internal view returns (address) { return getChangelogAddress(\"MCD_IAM_AUTO_LINE\"); }\r\n\r\n    function flip(bytes32 ilk) internal view returns (address) {\r\n        (,,,, address _flip,,,) = RegistryLike(reg()).ilkData(ilk);\r\n        return _flip;\r\n    }\r\n\r\n    function getChangelogAddress(bytes32 key) internal view returns (address) {\r\n        return ChainlogLike(LOG).getAddress(key);\r\n    }\r\n\r\n\r\n    /****************************/\r\n    /*** Changelog Management ***/\r\n    /****************************/\r\n    function setChangelogAddress(bytes32 key, address value) internal {\r\n        DssExecLib.setChangelogAddress(LOG, key, value);\r\n    }\r\n\r\n    function setChangelogVersion(string memory version) internal {\r\n        DssExecLib.setChangelogVersion(LOG, version);\r\n    }\r\n\r\n    function setChangelogIPFS(string memory ipfs) internal {\r\n        DssExecLib.setChangelogIPFS(LOG, ipfs);\r\n    }\r\n\r\n    function setChangelogSHA256(string memory SHA256) internal {\r\n        DssExecLib.setChangelogSHA256(LOG, SHA256);\r\n    }\r\n\r\n    /**********************/\r\n    /*** Authorizations ***/\r\n    /**********************/\r\n    function authorize(address base, address ward) internal virtual {\r\n        DssExecLib.authorize(base, ward);\r\n    }\r\n\r\n    function deauthorize(address base, address ward) internal {\r\n        DssExecLib.deauthorize(base, ward);\r\n    }\r\n\r\n    /**************************/\r\n    /*** Accumulating Rates ***/\r\n    /**************************/\r\n    function accumulateDSR() internal {\r\n        DssExecLib.accumulateDSR(pot());\r\n    }\r\n\r\n    function accumulateCollateralStabilityFees(bytes32 ilk) internal {\r\n        DssExecLib.accumulateCollateralStabilityFees(jug(), ilk);\r\n    }\r\n\r\n    /*********************/\r\n    /*** Price Updates ***/\r\n    /*********************/\r\n    function updateCollateralPrice(bytes32 ilk) internal {\r\n        DssExecLib.updateCollateralPrice(spot(), ilk);\r\n    }\r\n\r\n    /****************************/\r\n    /*** System Configuration ***/\r\n    /****************************/\r\n    function setContract(address base, bytes32 what, address addr) internal {\r\n        DssExecLib.setContract(base, what, addr);\r\n    }\r\n\r\n    function setContract(address base, bytes32 ilk, bytes32 what, address addr) internal {\r\n        DssExecLib.setContract(base, ilk, what, addr);\r\n    }\r\n\r\n    /******************************/\r\n    /*** System Risk Parameters ***/\r\n    /******************************/\r\n    function setGlobalDebtCeiling(uint256 amount) internal {\r\n        DssExecLib.setGlobalDebtCeiling(vat(), amount);\r\n    }\r\n\r\n    function increaseGlobalDebtCeiling(uint256 amount) internal {\r\n        DssExecLib.increaseGlobalDebtCeiling(vat(), amount);\r\n    }\r\n\r\n    function decreaseGlobalDebtCeiling(uint256 amount) internal {\r\n        DssExecLib.decreaseGlobalDebtCeiling(vat(), amount);\r\n    }\r\n\r\n    function setDSR(uint256 rate) internal {\r\n        DssExecLib.setDSR(pot(), rate);\r\n    }\r\n\r\n    function setSurplusAuctionAmount(uint256 amount) internal {\r\n        DssExecLib.setSurplusAuctionAmount(vow(), amount);\r\n    }\r\n\r\n    function setSurplusBuffer(uint256 amount) internal {\r\n        DssExecLib.setSurplusBuffer(vow(), amount);\r\n    }\r\n\r\n    function setMinSurplusAuctionBidIncrease(uint256 pct_bps) internal {\r\n        DssExecLib.setMinSurplusAuctionBidIncrease(flap(), pct_bps);\r\n    }\r\n\r\n    function setSurplusAuctionBidDuration(uint256 duration) internal {\r\n        DssExecLib.setSurplusAuctionBidDuration(flap(), duration);\r\n    }\r\n\r\n    function setSurplusAuctionDuration(uint256 duration) internal {\r\n        DssExecLib.setSurplusAuctionDuration(flap(), duration);\r\n    }\r\n\r\n    function setDebtAuctionDelay(uint256 duration) internal {\r\n        DssExecLib.setDebtAuctionDelay(vow(), duration);\r\n    }\r\n\r\n    function setDebtAuctionDAIAmount(uint256 amount) internal {\r\n        DssExecLib.setDebtAuctionDAIAmount(vow(), amount);\r\n    }\r\n\r\n    function setDebtAuctionMKRAmount(uint256 amount) internal {\r\n        DssExecLib.setDebtAuctionMKRAmount(vow(), amount);\r\n    }\r\n\r\n    function setMinDebtAuctionBidIncrease(uint256 pct_bps) internal {\r\n        DssExecLib.setMinDebtAuctionBidIncrease(flop(), pct_bps);\r\n    }\r\n\r\n    function setDebtAuctionBidDuration(uint256 duration) internal {\r\n        DssExecLib.setDebtAuctionBidDuration(flop(), duration);\r\n    }\r\n\r\n    function setDebtAuctionDuration(uint256 duration) internal {\r\n        DssExecLib.setDebtAuctionDuration(flop(), duration);\r\n    }\r\n\r\n    function setDebtAuctionMKRIncreaseRate(uint256 pct_bps) internal {\r\n        DssExecLib.setDebtAuctionMKRIncreaseRate(flop(), pct_bps);\r\n    }\r\n\r\n    function setMaxTotalDAILiquidationAmount(uint256 amount) internal {\r\n        DssExecLib.setMaxTotalDAILiquidationAmount(cat(), amount);\r\n    }\r\n\r\n    function setEmergencyShutdownProcessingTime(uint256 duration) internal {\r\n        DssExecLib.setEmergencyShutdownProcessingTime(end(), duration);\r\n    }\r\n\r\n    function setGlobalStabilityFee(uint256 rate) internal {\r\n        DssExecLib.setGlobalStabilityFee(jug(), rate);\r\n    }\r\n\r\n    function setDAIReferenceValue(uint256 value) internal {\r\n        DssExecLib.setDAIReferenceValue(spot(), value);\r\n    }\r\n\r\n    /*****************************/\r\n    /*** Collateral Management ***/\r\n    /*****************************/\r\n    function setIlkDebtCeiling(bytes32 ilk, uint256 amount) internal {\r\n        DssExecLib.setIlkDebtCeiling(vat(), ilk, amount);\r\n    }\r\n\r\n    function increaseIlkDebtCeiling(bytes32 ilk, uint256 amount, bool global) internal {\r\n        DssExecLib.increaseIlkDebtCeiling(vat(), ilk, amount, global);\r\n    }\r\n\r\n    function increaseIlkDebtCeiling(bytes32 ilk, uint256 amount) internal {\r\n        DssExecLib.increaseIlkDebtCeiling(vat(), ilk, amount, true);\r\n    }\r\n\r\n    function decreaseIlkDebtCeiling(bytes32 ilk, uint256 amount, bool global) internal {\r\n        DssExecLib.decreaseIlkDebtCeiling(vat(), ilk, amount, global);\r\n    }\r\n\r\n    function decreaseIlkDebtCeiling(bytes32 ilk, uint256 amount) internal {\r\n        DssExecLib.decreaseIlkDebtCeiling(vat(), ilk, amount, true);\r\n    }\r\n\r\n    function setIlkAutoLineParameters(bytes32 ilk, uint256 amount, uint256 gap, uint256 ttl) internal {\r\n        DssExecLib.setIlkAutoLineParameters(autoLine(), ilk, amount, gap, ttl);\r\n    }\r\n\r\n    function setIlkAutoLineDebtCeiling(bytes32 ilk, uint256 amount) internal {\r\n        DssExecLib.setIlkAutoLineDebtCeiling(autoLine(), ilk, amount);\r\n    }\r\n\r\n    function removeIlkFromAutoLine(bytes32 ilk) internal {\r\n        DssExecLib.removeIlkFromAutoLine(autoLine(), ilk);\r\n    }\r\n\r\n    function setIlkMinVaultAmount(bytes32 ilk, uint256 amount) internal {\r\n        DssExecLib.setIlkMinVaultAmount(vat(), ilk, amount);\r\n    }\r\n\r\n    function setIlkLiquidationPenalty(bytes32 ilk, uint256 pct_bps) internal {\r\n        DssExecLib.setIlkLiquidationPenalty(cat(), ilk, pct_bps);\r\n    }\r\n\r\n    function setIlkMaxLiquidationAmount(bytes32 ilk, uint256 amount) internal {\r\n        DssExecLib.setIlkMaxLiquidationAmount(cat(), ilk, amount);\r\n    }\r\n\r\n    function setIlkLiquidationRatio(bytes32 ilk, uint256 pct_bps) internal {\r\n        DssExecLib.setIlkLiquidationRatio(spot(), ilk, pct_bps);\r\n    }\r\n\r\n    function setIlkMinAuctionBidIncrease(bytes32 ilk, uint256 pct_bps) internal {\r\n        DssExecLib.setIlkMinAuctionBidIncrease(flip(ilk), pct_bps);\r\n    }\r\n\r\n    function setIlkBidDuration(bytes32 ilk, uint256 duration) internal {\r\n        DssExecLib.setIlkBidDuration(flip(ilk), duration);\r\n    }\r\n\r\n    function setIlkAuctionDuration(bytes32 ilk, uint256 duration) internal {\r\n        DssExecLib.setIlkAuctionDuration(flip(ilk), duration);\r\n    }\r\n\r\n    function setIlkStabilityFee(bytes32 ilk, uint256 rate, bool doDrip) internal {\r\n        DssExecLib.setIlkStabilityFee(jug(), ilk, rate, doDrip);\r\n    }\r\n\r\n    function setIlkStabilityFee(bytes32 ilk, uint256 rate) internal {\r\n        DssExecLib.setIlkStabilityFee(jug(), ilk, rate, true);\r\n    }\r\n\r\n    /***********************/\r\n    /*** Core Management ***/\r\n    /***********************/\r\n    function updateCollateralAuctionContract(bytes32 ilk, address newFlip, address oldFlip) internal {\r\n        DssExecLib.updateCollateralAuctionContract(vat(), cat(), end(), flipperMom(), ilk, newFlip, oldFlip);\r\n    }\r\n\r\n    function updateSurplusAuctionContract(address newFlap, address oldFlap) internal {\r\n        DssExecLib.updateSurplusAuctionContract(vat(), vow(), newFlap, oldFlap);\r\n    }\r\n\r\n    function updateDebtAuctionContract(address newFlop, address oldFlop) internal {\r\n        DssExecLib.updateDebtAuctionContract(vat(), vow(), govGuard(), newFlop, oldFlop);\r\n    }\r\n\r\n    /*************************/\r\n    /*** Oracle Management ***/\r\n    /*************************/\r\n    function addWritersToMedianWhitelist(address medianizer, address[] memory feeds) internal {\r\n        DssExecLib.addWritersToMedianWhitelist(medianizer, feeds);\r\n    }\r\n\r\n    function removeWritersFromMedianWhitelist(address medianizer, address[] memory feeds) internal {\r\n        DssExecLib.removeWritersFromMedianWhitelist(medianizer, feeds);\r\n    }\r\n\r\n    function addReadersToMedianWhitelist(address medianizer, address[] memory readers) internal {\r\n        DssExecLib.addReadersToMedianWhitelist(medianizer, readers);\r\n    }\r\n\r\n    function addReaderToMedianWhitelist(address medianizer, address reader) internal {\r\n        DssExecLib.addReaderToMedianWhitelist(medianizer, reader);\r\n    }\r\n\r\n    function removeReadersFromMedianWhitelist(address medianizer, address[] memory readers) internal {\r\n        DssExecLib.removeReadersFromMedianWhitelist(medianizer, readers);\r\n    }\r\n\r\n    function removeReaderFromMedianWhitelist(address medianizer, address reader) internal {\r\n        DssExecLib.removeReaderFromMedianWhitelist(medianizer, reader);\r\n    }\r\n\r\n    function setMedianWritersQuorum(address medianizer, uint256 minQuorum) internal {\r\n        DssExecLib.setMedianWritersQuorum(medianizer, minQuorum);\r\n    }\r\n\r\n    function addReaderToOSMWhitelist(address osm, address reader) internal {\r\n        DssExecLib.addReaderToOSMWhitelist(osm, reader);\r\n    }\r\n\r\n    function removeReaderFromOSMWhitelist(address osm, address reader) internal {\r\n        DssExecLib.removeReaderFromOSMWhitelist(osm, reader);\r\n    }\r\n\r\n    function allowOSMFreeze(address osm, bytes32 ilk) internal {\r\n        DssExecLib.allowOSMFreeze(osmMom(), osm, ilk);\r\n    }\r\n\r\n    /*****************************/\r\n    /*** Collateral Onboarding ***/\r\n    /*****************************/\r\n\r\n    // Minimum actions to onboard a collateral to the system with 0 line.\r\n    function addCollateralBase(bytes32 ilk, address gem, address join, address flipper, address pip) internal {\r\n        DssExecLib.addCollateralBase(vat(), cat(), jug(), end(), spot(), reg(), ilk, gem, join, flipper, pip);\r\n    }\r\n\r\n    // Complete collateral onboarding logic.\r\n    function addNewCollateral(CollateralOpts memory co) internal {\r\n        // Add the collateral to the system.\r\n        addCollateralBase(co.ilk, co.gem, co.join, co.flip, co.pip);\r\n\r\n        // Allow FlipperMom to access to the ilk Flipper\r\n        authorize(co.flip, flipperMom());\r\n        // Disallow Cat to kick auctions in ilk Flipper\r\n        if(!co.isLiquidatable) deauthorize(flipperMom(), co.flip);\r\n\r\n        if(co.isOSM) { // If pip == OSM\r\n            // Allow OsmMom to access to the TOKEN OSM\r\n            authorize(co.pip, osmMom());\r\n            if (co.whitelistOSM) { // If median is src in OSM\r\n                // Whitelist OSM to read the Median data (only necessary if it is the first time the token is being added to an ilk)\r\n                addReaderToMedianWhitelist(address(OracleLike(co.pip).src()), co.pip);\r\n            }\r\n            // Whitelist Spotter to read the OSM data (only necessary if it is the first time the token is being added to an ilk)\r\n            addReaderToOSMWhitelist(co.pip, spot());\r\n            // Whitelist End to read the OSM data (only necessary if it is the first time the token is being added to an ilk)\r\n            addReaderToOSMWhitelist(co.pip, end());\r\n            // Set TOKEN OSM in the OsmMom for new ilk\r\n            allowOSMFreeze(co.pip, co.ilk);\r\n        }\r\n        // Increase the global debt ceiling by the ilk ceiling\r\n        increaseGlobalDebtCeiling(co.ilkDebtCeiling);\r\n        // Set the ilk debt ceiling\r\n        setIlkDebtCeiling(co.ilk, co.ilkDebtCeiling);\r\n        // Set the ilk dust\r\n        setIlkMinVaultAmount(co.ilk, co.minVaultAmount);\r\n        // Set the dunk size\r\n        setIlkMaxLiquidationAmount(co.ilk, co.maxLiquidationAmount);\r\n        // Set the ilk liquidation penalty\r\n        setIlkLiquidationPenalty(co.ilk, co.liquidationPenalty);\r\n\r\n        // Set the ilk stability fee\r\n        setIlkStabilityFee(co.ilk, co.ilkStabilityFee);\r\n\r\n        // Set the ilk percentage between bids\r\n        setIlkMinAuctionBidIncrease(co.ilk, co.bidIncrease);\r\n        // Set the ilk time max time between bids\r\n        setIlkBidDuration(co.ilk, co.bidDuration);\r\n        // Set the ilk max auction duration\r\n        setIlkAuctionDuration(co.ilk, co.auctionDuration);\r\n        // Set the ilk min collateralization ratio\r\n        setIlkLiquidationRatio(co.ilk, co.liquidationRatio);\r\n\r\n        // Update ilk spot value in Vat\r\n        updateCollateralPrice(co.ilk);\r\n    }\r\n}\r\n\r\n////// lib/dss-exec-lib/src/DssExec.sol\r\n//\r\n// DssExec.sol -- MakerDAO Executive Spell Template\r\n//\r\n// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity ^0.6.11; */\r\n\r\ninterface PauseAbstract {\r\n    function delay() external view returns (uint256);\r\n    function plot(address, bytes32, bytes calldata, uint256) external;\r\n    function exec(address, bytes32, bytes calldata, uint256) external returns (bytes memory);\r\n}\r\n\r\ninterface Changelog {\r\n    function getAddress(bytes32) external view returns (address);\r\n}\r\n\r\ninterface SpellAction {\r\n    function officeHours() external view returns (bool);\r\n}\r\n\r\ncontract DssExec {\r\n\r\n    Changelog      constant public log   = Changelog(0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F);\r\n    uint256                 public eta;\r\n    bytes                   public sig;\r\n    bool                    public done;\r\n    bytes32       immutable public tag;\r\n    address       immutable public action;\r\n    uint256       immutable public expiration;\r\n    PauseAbstract immutable public pause;\r\n\r\n    // Provides a descriptive tag for bot consumption\r\n    // This should be modified weekly to provide a summary of the actions\r\n    // Hash: seth keccak -- \"$(wget https://<executive-vote-canonical-post> -q -O - 2>/dev/null)\"\r\n    string                  public description;\r\n\r\n    function officeHours() external view returns (bool) {\r\n        return SpellAction(action).officeHours();\r\n    }\r\n\r\n    function nextCastTime() external view returns (uint256 castTime) {\r\n        require(eta != 0, \"DssExec/spell-not-scheduled\");\r\n        castTime = block.timestamp > eta ? block.timestamp : eta; // Any day at XX:YY\r\n\r\n        if (SpellAction(action).officeHours()) {\r\n            uint256 day    = (castTime / 1 days + 3) % 7;\r\n            uint256 hour   = castTime / 1 hours % 24;\r\n            uint256 minute = castTime / 1 minutes % 60;\r\n            uint256 second = castTime % 60;\r\n\r\n            if (day >= 5) {\r\n                castTime += (6 - day) * 1 days;                 // Go to Sunday XX:YY\r\n                castTime += (24 - hour + 14) * 1 hours;         // Go to 14:YY UTC Monday\r\n                castTime -= minute * 1 minutes + second;        // Go to 14:00 UTC\r\n            } else {\r\n                if (hour >= 21) {\r\n                    if (day == 4) castTime += 2 days;           // If Friday, fast forward to Sunday XX:YY\r\n                    castTime += (24 - hour + 14) * 1 hours;     // Go to 14:YY UTC next day\r\n                    castTime -= minute * 1 minutes + second;    // Go to 14:00 UTC\r\n                } else if (hour < 14) {\r\n                    castTime += (14 - hour) * 1 hours;          // Go to 14:YY UTC same day\r\n                    castTime -= minute * 1 minutes + second;    // Go to 14:00 UTC\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // @param _description  A string description of the spell\r\n    // @param _expiration   The timestamp this spell will expire. (Ex. now + 30 days)\r\n    // @param _spellAction  The address of the spell action\r\n    constructor(string memory _description, uint256 _expiration, address _spellAction) public {\r\n        pause       = PauseAbstract(log.getAddress(\"MCD_PAUSE\"));\r\n        description = _description;\r\n        expiration  = _expiration;\r\n        action      = _spellAction;\r\n\r\n        sig = abi.encodeWithSignature(\"execute()\");\r\n        bytes32 _tag;                    // Required for assembly access\r\n        address _action = _spellAction;  // Required for assembly access\r\n        assembly { _tag := extcodehash(_action) }\r\n        tag = _tag;\r\n    }\r\n\r\n    function schedule() public {\r\n        require(now <= expiration, \"This contract has expired\");\r\n        require(eta == 0, \"This spell has already been scheduled\");\r\n        eta = now + PauseAbstract(pause).delay();\r\n        pause.plot(action, tag, sig, eta);\r\n    }\r\n\r\n    function cast() public {\r\n        require(!done, \"spell-already-cast\");\r\n        done = true;\r\n        pause.exec(action, tag, sig, eta);\r\n    }\r\n}\r\n\r\n////// lib/dss-interfaces/src/dss/DaiAbstract.sol\r\n/* pragma solidity >=0.5.12; */\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/dai.sol\r\ninterface DaiAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function version() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address) external view returns (uint256);\r\n    function allowance(address, address) external view returns (uint256);\r\n    function nonces(address) external view returns (uint256);\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external view returns (bytes32);\r\n    function transfer(address, uint256) external;\r\n    function transferFrom(address, address, uint256) external returns (bool);\r\n    function mint(address, uint256) external;\r\n    function burn(address, uint256) external;\r\n    function approve(address, uint256) external returns (bool);\r\n    function push(address, uint256) external;\r\n    function pull(address, uint256) external;\r\n    function move(address, address, uint256) external;\r\n    function permit(address, address, uint256, uint256, bool, uint8, bytes32, bytes32) external;\r\n}\r\n\r\n////// lib/dss-interfaces/src/dss/DaiJoinAbstract.sol\r\n/* pragma solidity >=0.5.12; */\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/join.sol\r\ninterface DaiJoinAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address usr) external;\r\n    function deny(address usr) external;\r\n    function vat() external view returns (address);\r\n    function dai() external view returns (address);\r\n    function live() external view returns (uint256);\r\n    function cage() external;\r\n    function join(address, uint256) external;\r\n    function exit(address, uint256) external;\r\n}\r\n\r\n////// lib/dss-interfaces/src/dss/VatAbstract.sol\r\n/* pragma solidity >=0.5.12; */\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/vat.sol\r\ninterface VatAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function can(address, address) external view returns (uint256);\r\n    function hope(address) external;\r\n    function nope(address) external;\r\n    function ilks(bytes32) external view returns (uint256, uint256, uint256, uint256, uint256);\r\n    function urns(bytes32, address) external view returns (uint256, uint256);\r\n    function gem(bytes32, address) external view returns (uint256);\r\n    function dai(address) external view returns (uint256);\r\n    function sin(address) external view returns (uint256);\r\n    function debt() external view returns (uint256);\r\n    function vice() external view returns (uint256);\r\n    function Line() external view returns (uint256);\r\n    function live() external view returns (uint256);\r\n    function init(bytes32) external;\r\n    function file(bytes32, uint256) external;\r\n    function file(bytes32, bytes32, uint256) external;\r\n    function cage() external;\r\n    function slip(bytes32, address, int256) external;\r\n    function flux(bytes32, address, address, uint256) external;\r\n    function move(address, address, uint256) external;\r\n    function frob(bytes32, address, address, address, int256, int256) external;\r\n    function fork(bytes32, address, address, int256, int256) external;\r\n    function grab(bytes32, address, address, address, int256, int256) external;\r\n    function heal(uint256) external;\r\n    function suck(address, address, uint256) external;\r\n    function fold(bytes32, address, int256) external;\r\n}\r\n\r\n////// src/DssSpell.sol\r\n// Copyright (C) 2021 Maker Ecosystem Growth Holdings, INC.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n/* pragma solidity 0.6.11; */\r\n\r\n/* import \"dss-exec-lib/DssExec.sol\"; */\r\n/* import \"dss-exec-lib/DssAction.sol\"; */\r\n/* import \"lib/dss-interfaces/src/dss/VatAbstract.sol\"; */\r\n/* import \"lib/dss-interfaces/src/dss/DaiJoinAbstract.sol\"; */\r\n/* import \"lib/dss-interfaces/src/dss/DaiAbstract.sol\"; */\r\n\r\ninterface ChainlogAbstract_2 {\r\n    function removeAddress(bytes32) external;\r\n}\r\n\r\ninterface LPOracle {\r\n    function orb0() external view returns (address);\r\n    function orb1() external view returns (address);\r\n}\r\n\r\ninterface GnosisAllowanceModule {\r\n    function executeAllowanceTransfer(address safe, address token, address to, uint96 amount, address paymentToken, uint96 payment, address delegate, bytes memory signature) external;\r\n}\r\n\r\ncontract DssSpellAction is DssAction {\r\n\r\n    // Provides a descriptive tag for bot consumption\r\n    // This should be modified weekly to provide a summary of the actions\r\n    // Hash: seth keccak -- \"$(wget https://raw.githubusercontent.com/makerdao/community/9b7eba966a6f43e95935276313cac2490ec44e71/governance/votes/Executive%20vote%20-%20February%2012%2C%202021.md -q -O - 2>/dev/null)\"\r\n    string public constant description =\r\n        \"2021-02-12 MakerDAO Executive Spell | Hash: 0x82215e761ec28f92aa02ac1c3533a9315a9accc2847b9dac99ae2aa65d9a9b27\";\r\n\r\n\r\n    // Many of the settings that change weekly rely on the rate accumulator\r\n    // described at https://docs.makerdao.com/smart-contract-modules/rates-module\r\n    // To check this yourself, use the following rate calculation (example 8%):\r\n    //\r\n    // $ bc -l <<< 'scale=27; e( l(1.08)/(60 * 60 * 24 * 365) )'\r\n    //\r\n    // A table of rates can be found at\r\n    //    https://ipfs.io/ipfs/QmefQMseb3AiTapiAKKexdKHig8wroKuZbmLtPLv4u2YwW\r\n    //\r\n    uint256 constant TWO_PCT            = 1000000000627937192491029810;\r\n    uint256 constant TWO_PT_FIVE_PCT    = 1000000000782997609082909351;\r\n    uint256 constant THREE_PCT          = 1000000000937303470807876289;\r\n    uint256 constant THREE_PT_FIVE_PCT  = 1000000001090862085746321732;\r\n    uint256 constant FOUR_PCT           = 1000000001243680656318820312;\r\n    uint256 constant FOUR_PT_FIVE_PCT   = 1000000001395766281313196627;\r\n    uint256 constant FIVE_PT_FIVE_PCT   = 1000000001697766583380253701;\r\n    uint256 constant SIX_PCT            = 1000000001847694957439350562;\r\n    uint256 constant SEVEN_PT_FIVE_PCT  = 1000000002293273137447730714;\r\n\r\n    /**\r\n        @dev constructor (required)\r\n        @param officeHours true if officehours enabled\r\n    */\r\n    constructor(bool officeHours) public DssAction(officeHours) {}\r\n\r\n    uint256 constant WAD        = 10**18;\r\n    uint256 constant RAD        = 10**45;\r\n    uint256 constant MILLION    = 10**6;\r\n\r\n    bytes32 constant ETH_A_ILK          = \"ETH-A\";\r\n    bytes32 constant ETH_B_ILK          = \"ETH-B\";\r\n    bytes32 constant UNI_ILK            = \"UNI-A\";\r\n    bytes32 constant AAVE_ILK           = \"AAVE-A\";\r\n    bytes32 constant COMP_ILK           = \"COMP-A\";\r\n    bytes32 constant LINK_ILK           = \"LINK-A\";\r\n    bytes32 constant WBTC_ILK           = \"WBTC-A\";\r\n    bytes32 constant YFI_ILK            = \"YFI-A\";\r\n    bytes32 constant BAL_ILK            = \"BAL-A\";\r\n    bytes32 constant BAT_ILK            = \"BAT-A\";\r\n    bytes32 constant UNIV2DAIETH_ILK    = \"UNIV2DAIETH-A\";\r\n    bytes32 constant UNIV2USDCETH_ILK   = \"UNIV2USDCETH-A\";\r\n    bytes32 constant UNIV2WBTCETH_ILK   = \"UNIV2WBTCETH-A\";\r\n\r\n    bytes32 constant UNIV2LINKETH_ILK   = \"UNIV2LINKETH-A\";\r\n    address constant UNIV2LINKETH_GEM   = 0xa2107FA5B38d9bbd2C461D6EDf11B11A50F6b974;\r\n    address constant UNIV2LINKETH_JOIN  = 0xDae88bDe1FB38cF39B6A02b595930A3449e593A6;\r\n    address constant UNIV2LINKETH_FLIP  = 0xb79f818E3c73FCA387845f892356224CA75eac4b;\r\n    address constant UNIV2LINKETH_PIP   = 0x628009F5F5029544AE84636Ef676D3Cc5755238b;\r\n\r\n    bytes32 constant UNIV2UNIETH_ILK    = \"UNIV2UNIETH-A\";\r\n    address constant UNIV2UNIETH_GEM    = 0xd3d2E2692501A5c9Ca623199D38826e513033a17;\r\n    address constant UNIV2UNIETH_JOIN   = 0xf11a98339FE1CdE648e8D1463310CE3ccC3d7cC1;\r\n    address constant UNIV2UNIETH_FLIP   = 0xe5ED7da0483e291485011D5372F3BF46235EB277;\r\n    address constant UNIV2UNIETH_PIP    = 0x8Ce9E9442F2791FC63CD6394cC12F2dE4fbc1D71;\r\n\r\n    // Interim Budget Addresses\r\n    address constant DAO_MULTISIG       = 0x73f09254a81e1F835Ee442d1b3262c1f1d7A13ff;\r\n    address constant ALLOWANCE_MODULE   = 0xCFbFaC74C26F8647cBDb8c5caf80BB5b32E43134;\r\n\r\n    function actions() public override {\r\n        // DC-IAM\r\n        setIlkAutoLineParameters(UNI_ILK, 50 * MILLION, 3 * MILLION, 12 hours);\r\n        setIlkAutoLineParameters(AAVE_ILK, 25 * MILLION, 2 * MILLION, 12 hours);\r\n        setIlkAutoLineParameters(COMP_ILK, 10 * MILLION, 2 * MILLION, 12 hours);\r\n        setIlkAutoLineParameters(LINK_ILK, 140 * MILLION, 7 * MILLION, 12 hours);\r\n        setIlkAutoLineParameters(WBTC_ILK, 350 * MILLION, 15 * MILLION, 12 hours);\r\n        setIlkAutoLineParameters(YFI_ILK, 45 * MILLION, 5 * MILLION, 12 hours);\r\n\r\n        // add UNI-V2-LINK-ETH-A collateral type\r\n        addReaderToMedianWhitelist(\r\n            LPOracle(UNIV2LINKETH_PIP).orb0(),\r\n            UNIV2LINKETH_PIP\r\n        );\r\n        addReaderToMedianWhitelist(\r\n            LPOracle(UNIV2LINKETH_PIP).orb1(),\r\n            UNIV2LINKETH_PIP\r\n        );\r\n        CollateralOpts memory UNIV2LINKETH_A = CollateralOpts({\r\n            ilk: UNIV2LINKETH_ILK,\r\n            gem: UNIV2LINKETH_GEM,\r\n            join: UNIV2LINKETH_JOIN,\r\n            flip: UNIV2LINKETH_FLIP,\r\n            pip: UNIV2LINKETH_PIP,\r\n            isLiquidatable: true,\r\n            isOSM: true,\r\n            whitelistOSM: false,\r\n            ilkDebtCeiling: 3 * MILLION, // initially 3 million\r\n            minVaultAmount: 2000,\r\n            maxLiquidationAmount: 50000,\r\n            liquidationPenalty: 1300,\r\n            ilkStabilityFee: FOUR_PCT, // 4%\r\n            bidIncrease: 300, // 3%\r\n            bidDuration: 6 hours,\r\n            auctionDuration: 6 hours,\r\n            liquidationRatio: 16500 // 165%\r\n        });\r\n        addNewCollateral(UNIV2LINKETH_A);\r\n\r\n        // add UNI-V2-ETH-USDT-A collateral type\r\n        addReaderToMedianWhitelist(\r\n            LPOracle(UNIV2UNIETH_PIP).orb0(),\r\n            UNIV2UNIETH_PIP\r\n        );\r\n        addReaderToMedianWhitelist(\r\n            LPOracle(UNIV2UNIETH_PIP).orb1(),\r\n            UNIV2UNIETH_PIP\r\n        );\r\n        CollateralOpts memory UNIV2UNIETH_A = CollateralOpts({\r\n            ilk: UNIV2UNIETH_ILK,\r\n            gem: UNIV2UNIETH_GEM,\r\n            join: UNIV2UNIETH_JOIN,\r\n            flip: UNIV2UNIETH_FLIP,\r\n            pip: UNIV2UNIETH_PIP,\r\n            isLiquidatable: true,\r\n            isOSM: true,\r\n            whitelistOSM: false,\r\n            ilkDebtCeiling: 3 * MILLION, // initially 3 million\r\n            minVaultAmount: 2000,\r\n            maxLiquidationAmount: 50000,\r\n            liquidationPenalty: 1300,\r\n            ilkStabilityFee: FOUR_PCT, // 4%\r\n            bidIncrease: 300, // 3%\r\n            bidDuration: 6 hours,\r\n            auctionDuration: 6 hours,\r\n            liquidationRatio: 16500 // 165%\r\n        });\r\n        addNewCollateral(UNIV2UNIETH_A);\r\n\r\n        // Rates changes\r\n        setIlkStabilityFee(ETH_A_ILK, FOUR_PT_FIVE_PCT, true);\r\n        setIlkStabilityFee(ETH_B_ILK, SEVEN_PT_FIVE_PCT, true);\r\n        setIlkStabilityFee(WBTC_ILK, FOUR_PT_FIVE_PCT, true);\r\n        setIlkStabilityFee(LINK_ILK, THREE_PT_FIVE_PCT, true);\r\n        setIlkStabilityFee(COMP_ILK, THREE_PCT, true);\r\n        setIlkStabilityFee(BAL_ILK, THREE_PT_FIVE_PCT, true);\r\n        setIlkStabilityFee(UNIV2DAIETH_ILK, TWO_PCT, true);\r\n        setIlkStabilityFee(UNIV2USDCETH_ILK, TWO_PT_FIVE_PCT, true);\r\n        setIlkStabilityFee(UNIV2WBTCETH_ILK, THREE_PT_FIVE_PCT, true);\r\n        setIlkStabilityFee(BAT_ILK, SIX_PCT, true);\r\n        setIlkStabilityFee(YFI_ILK, FIVE_PT_FIVE_PCT, true);\r\n\r\n        // Interim DAO Budget (Note: we are leaving daiJoin hope'd from the Pause Proxy for future payments)\r\n        // Sending 100,001 DAI to the DAO multi-sig (1 extra to test retrieval)\r\n        address MCD_JOIN_DAI    = getChangelogAddress(\"MCD_JOIN_DAI\");\r\n        address MCD_DAI         = getChangelogAddress(\"MCD_DAI\");\r\n        address MCD_PAUSE_PROXY = getChangelogAddress(\"MCD_PAUSE_PROXY\");\r\n        VatAbstract(vat()).suck(vow(), address(this), 100_001 * RAD);\r\n        VatAbstract(vat()).hope(MCD_JOIN_DAI);\r\n        DaiJoinAbstract(MCD_JOIN_DAI).exit(DAO_MULTISIG, 100_001 * WAD);\r\n        // Testing the ability for governance to retrieve funds from the multi-sig\r\n        GnosisAllowanceModule(ALLOWANCE_MODULE).executeAllowanceTransfer(\r\n            DAO_MULTISIG,\r\n            MCD_DAI,\r\n            MCD_PAUSE_PROXY,\r\n            uint96(1 * WAD),\r\n            address(0),\r\n            uint96(0),\r\n            address(this),\r\n            \"\"\r\n        );\r\n        DaiAbstract(MCD_DAI).approve(MCD_JOIN_DAI, 1 * WAD);\r\n        DaiJoinAbstract(MCD_JOIN_DAI).join(vow(), 1 * WAD);\r\n\r\n        // add UNIV2LINKETH to Changelog\r\n        setChangelogAddress(\"UNIV2LINKETH\",             UNIV2LINKETH_GEM);\r\n        setChangelogAddress(\"MCD_JOIN_UNIV2LINKETH_A\",  UNIV2LINKETH_JOIN);\r\n        setChangelogAddress(\"MCD_FLIP_UNIV2LINKETH_A\",  UNIV2LINKETH_FLIP);\r\n        setChangelogAddress(\"PIP_UNIV2LINKETH\",         UNIV2LINKETH_PIP);\r\n\r\n        // add UNIV2UNIETH to Changelog\r\n        setChangelogAddress(\"UNIV2UNIETH\",             UNIV2UNIETH_GEM);\r\n        setChangelogAddress(\"MCD_JOIN_UNIV2UNIETH_A\",  UNIV2UNIETH_JOIN);\r\n        setChangelogAddress(\"MCD_FLIP_UNIV2UNIETH_A\",  UNIV2UNIETH_FLIP);\r\n        setChangelogAddress(\"PIP_UNIV2UNIETH\",         UNIV2UNIETH_PIP);\r\n\r\n        // bump Changelog version\r\n        setChangelogVersion(\"1.2.6\");\r\n    }\r\n}\r\n\r\ncontract DssSpell is DssExec {\r\n    DssSpellAction public spell = new DssSpellAction(true);\r\n    constructor() DssExec(spell.description(), now + 30 days, address(spell)) public {}\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"action\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cast\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"done\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expiration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"log\",\"outputs\":[{\"internalType\":\"contract Changelog\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextCastTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"castTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"officeHours\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"contract PauseAbstract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"schedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spell\",\"outputs\":[{\"internalType\":\"contract DssSpellAction\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tag\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DssSpell","CompilerVersion":"v0.6.11+commit.5ef660b1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"DssExecLib:25da9fce914fa6914631add105d83691e19e23a3","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://38a7b8388a0e769f5b8412ed15f48fac280f67998bf6c56492f5a8db081c4ce1"}]}