{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity =0.6.6;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address owner) external view returns (uint);\r\n}\r\n\r\ninterface UniswapOracleProxy {\r\n    function quote(address tokenIn, address tokenOut, uint amountIn) external view returns (uint);\r\n}\r\n\r\ninterface UniswapRouter {\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external view returns (uint amountB);\r\n}\r\n\r\ncontract UniswapInsuranceQuote {\r\n    using SafeMath for uint;\r\n    UniswapOracleProxy constant ORACLE = UniswapOracleProxy(0x0b5A6b318c39b60e7D8462F888e7fbA89f75D02F);\r\n    UniswapRouter constant ROUTER = UniswapRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    \r\n    function getReserves(IUniswapV2Pair pair, address tokenOut) public view returns (uint, uint) {\r\n        (uint _reserve0, uint _reserve1,) = pair.getReserves();\r\n        if (tokenOut == pair.token1()) {\r\n            return (_reserve0, _reserve1);\r\n        } else {\r\n            return (_reserve1, _reserve0);\r\n        }\r\n    }\r\n    \r\n    function oracleQuoteOnly(IUniswapV2Pair pair, address tokenOut, uint amountIn) external view returns (uint) {\r\n        (uint _amountIn, uint _baseOut, address _tokenIn) = calculateReturn(pair, amountIn);\r\n        \r\n        if (_tokenIn == tokenOut) {\r\n            _tokenIn = pair.token1();\r\n            uint _temp = _amountIn;\r\n            _amountIn = _baseOut;\r\n            _baseOut = _temp;\r\n        }\r\n        return ORACLE.quote(_tokenIn, tokenOut, _amountIn);\r\n    }\r\n    \r\n    function routerQuoteOnly(IUniswapV2Pair pair, address tokenOut, uint amountIn) external view returns (uint) {\r\n        (uint _amountIn, uint _baseOut, address _tokenIn) = calculateReturn(pair, amountIn);\r\n        (uint _reserveA, uint _reserveB) = getReserves(pair, tokenOut);\r\n        \r\n        if (_tokenIn == tokenOut) {\r\n            _tokenIn = pair.token1();\r\n            uint _temp = _amountIn;\r\n            _amountIn = _baseOut;\r\n            _baseOut = _temp;\r\n        }\r\n        return ROUTER.quote(_amountIn, _reserveA, _reserveB);\r\n    }\r\n    \r\n    function calculateReturn(IUniswapV2Pair pair, uint amountIn) public view returns (uint balanceA, uint balanceB, address tokenA) {\r\n        tokenA = pair.token0();\r\n        address _tokenB = pair.token1();\r\n        balanceA = IERC20(tokenA).balanceOf(address(pair));\r\n        balanceB = IERC20(_tokenB).balanceOf(address(pair));\r\n        uint _totalSupply = pair.totalSupply();\r\n        \r\n        balanceA = balanceA.mul(amountIn).div(_totalSupply);\r\n        balanceB = balanceB.mul(amountIn).div(_totalSupply);\r\n    }\r\n    \r\n    function quote(IUniswapV2Pair pair, address tokenOut, uint amountIn) external view returns (uint) {\r\n        (uint _amountIn, uint _baseOut, address _tokenIn) = calculateReturn(pair, amountIn);\r\n        (uint _reserveA, uint _reserveB) = getReserves(pair, tokenOut);\r\n        \r\n        if (_tokenIn == tokenOut) {\r\n            _tokenIn = pair.token1();\r\n            uint _temp = _amountIn;\r\n            _amountIn = _baseOut;\r\n            _baseOut = _temp;\r\n        }\r\n        uint _quote1 = ORACLE.quote(_tokenIn, tokenOut, _amountIn);\r\n        uint _quote2 = ROUTER.quote(_amountIn, _reserveA, _reserveB);\r\n        uint _quote = Math.max(_quote1, _quote2);\r\n        return _baseOut.add(_quote);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"calculateReturn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balanceA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceB\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"oracleQuoteOnly\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"routerQuoteOnly\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"UniswapInsuranceQuote","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a0c0284c1545ff6a1558e47a33b3bc75445b837ad4d88d4a59ca97e35d168b4d"}]}