{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/XdefTokenOrchestrator.sol\": {\r\n      \"content\": \"pragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./XdefTokenMonetaryPolicy.sol\\\";\\n\\n\\n/**\\n * @title XdefTokenOrchestrator\\n * @notice The orchestrator is the main entry point for rebase operations. It coordinates the policy\\n * actions with external consumers.\\n */\\ncontract XdefTokenOrchestrator is Ownable {\\n\\n    event TransactionFailed(address indexed destination, uint index, bytes data);\\n\\n    // Stable ordering is not guaranteed.\\n    bool[] transactionEnabled;\\n    address[] transactionDestination;\\n    bytes[] transactionData;\\n\\n    XdefTokenMonetaryPolicy public policy;\\n\\n    function setMonetaryPolicy(address _policy)\\n        public\\n        onlyOwner\\n    {\\n        policy = XdefTokenMonetaryPolicy(_policy);\\n    }\\n\\n    /**\\n     * @param policy_ Address of the XdefToken policy.\\n     */\\n    constructor (address policy_)\\n        public\\n    {\\n        policy = XdefTokenMonetaryPolicy(policy_);\\n    }\\n\\n    /**\\n     * @notice Main entry point to initiate a rebase operation.\\n     *         The XdefTokenOrchestrator calls rebase on the policy and notifies downstream applications.\\n     *         Contracts are guarded from calling, to avoid flash loan attacks on liquidity\\n     *         providers.\\n     *         If a transaction in the transaction list reverts, it is swallowed and the remaining\\n     *         transactions are executed.\\n     */\\n    function rebase()\\n        external\\n    {\\n        require(msg.sender == tx.origin);  // solhint-disable-line avoid-tx-origin\\n\\n        policy.rebase();\\n\\n        for (uint i = 0; i < transactionEnabled.length; i++) {\\n            // Transaction storage t = transactions[i];\\n            if (transactionEnabled[i]) {\\n                bool result = externalCall(transactionDestination[i], transactionData[i]);\\n                if (!result) {\\n                    emit TransactionFailed(transactionDestination[i], i, transactionData[i]);\\n                    revert(\\\"Transaction Failed\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Adds a transaction that gets called for a downstream receiver of rebases\\n     * @param destination Address of contract destination\\n     * @param data Transaction data payload\\n     */\\n    function addTransaction(address destination, bytes memory data)\\n        external\\n        onlyOwner\\n    {\\n        transactionEnabled.push(true);\\n        transactionDestination.push(destination);\\n        transactionData.push(data);\\n    }\\n\\n    /**\\n     * @param index Index of transaction to remove.\\n     *              Transaction ordering may have changed since adding.\\n     */\\n    function removeTransaction(uint index)\\n        external\\n        onlyOwner\\n    {\\n        require(index < transactionEnabled.length, \\\"index out of bounds\\\");\\n\\n        if (index < transactionEnabled.length - 1) {\\n            transactionEnabled[index] = transactionEnabled[transactionEnabled.length - 1];\\n            transactionDestination[index] = transactionDestination[transactionEnabled.length - 1];\\n            transactionData[index] = transactionData[transactionEnabled.length - 1];\\n        }\\n\\n        transactionEnabled.pop();\\n        transactionDestination.pop();\\n        transactionData.pop();\\n    }\\n\\n    /**\\n     * @param index Index of transaction. Transaction ordering may have changed since adding.\\n     * @param enabled True for enabled, false for disabled.\\n     */\\n    function setTransactionEnabled(uint index, bool enabled)\\n        external\\n        onlyOwner\\n    {\\n        require(index < transactionEnabled.length, \\\"index must be in range of stored tx list\\\");\\n        transactionEnabled[index] = enabled;\\n    }\\n\\n    /**\\n     * @return Number of transactions, both enabled and disabled, in transactions list.\\n     */\\n    function transactionsSize()\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return transactionEnabled.length;\\n    }\\n\\n    /**\\n     * @dev wrapper to call the encoded transactions on downstream consumers.\\n     * @param destination Address of destination contract.\\n     * @param data The encoded data payload.\\n     * @return True on success\\n     */\\n    function externalCall(address destination, bytes memory data)\\n        internal\\n        returns (bool)\\n    {\\n        bool result;\\n        assembly {  // solhint-disable-line no-inline-assembly\\n            // \\\"Allocate\\\" memory for output\\n            // (0x40 is where \\\"free memory\\\" pointer is stored by convention)\\n            let outputAddress := mload(0x40)\\n\\n            // First 32 bytes are the padded length of data, so exclude that\\n            let dataAddress := add(data, 32)\\n\\n            result := call(\\n                // 34710 is the value that solidity is currently emitting\\n                // It includes callGas (700) + callVeryLow (3, to pay for SUB)\\n                // + callValueTransferGas (9000) + callNewAccountGas\\n                // (25000, in case the destination address does not exist and needs creating)\\n                sub(gas(), 34710),\\n\\n\\n                destination,\\n                0, // transfer value in wei\\n                dataAddress,\\n                mload(data),  // Size of the input, in bytes. Stored in position 0 of the array.\\n                outputAddress,\\n                0  // Output is ignored, therefore the output size is zero\\n            )\\n        }\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/XdefTokenMonetaryPolicy.sol\": {\r\n      \"content\": \"pragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n \\nimport \\\"./lib/SafeMathInt.sol\\\";\\nimport \\\"./lib/UInt256Lib.sol\\\";\\nimport \\\"./XdefToken.sol\\\";\\n\\ninterface IOracle {\\n    function getData() external view returns (uint256, bool);\\n}\\n\\ninterface ISync {\\n    function sync() external;\\n}\\n\\n/*\\ninterface IGulp {\\n    function gulp(address token) external;\\n}\\n*/\\n\\n/**\\n * @title XdefToken Monetary Supply Policy\\n * @dev This is an implementation of the XdefToken Index Fund protocol.\\n *      XdefToken operates symmetrically on expansion and contraction. It will both split and\\n *      combine coins to maintain a stable unit price.\\n *\\n *      This component regulates the token supply of the XdefToken ERC20 token in response to\\n *      market oracles.\\n */\\ncontract XdefTokenMonetaryPolicy is Ownable {\\n    using SafeMath for uint256;\\n    using SafeMathInt for int256;\\n    using UInt256Lib for uint256;\\n\\n    event LogRebase(\\n        uint256 indexed epoch,\\n        uint256 exchangeRate,\\n        uint256 tvl,\\n        int256 requestedSupplyAdjustment,\\n        uint256 timestampSec\\n    );\\n\\n    XdefToken public Xdef;\\n\\n    // Provides the current market cap, as an 18 decimal fixed point number.\\n    IOracle public tvlOracle;\\n\\n    // Market oracle provides the token/USD exchange rate as an 18 decimal fixed point number.\\n    // (eg) An oracle value of 1.5e18 it would mean 1 Xdef is trading for $1.50.\\n    IOracle public tokenPriceOracle;\\n\\n    // If the current exchange rate is within this fractional distance from the target, no supply\\n    // update is performed. Fixed point number--same format as the rate.\\n    // (ie) abs(rate - targetRate) / targetRate < deviationThreshold, then no supply change.\\n    // DECIMALS Fixed point number.\\n    uint256 public deviationThreshold;\\n\\n    // The rebase lag parameter, used to dampen the applied supply adjustment by 1 / rebaseLag\\n    // Check setRebaseLag comments for more details.\\n    // Natural number, no decimal places.\\n    uint256 public rebaseLag;\\n\\n    // More than this much time must pass between rebase operations.\\n    uint256 public minRebaseTimeIntervalSec;\\n\\n    // Block timestamp of last rebase operation\\n    uint256 public lastRebaseTimestampSec;\\n\\n    // The rebase window begins this many seconds into the minRebaseTimeInterval period.\\n    // For example if minRebaseTimeInterval is 24hrs, it represents the time of day in seconds.\\n    uint256 public rebaseWindowOffsetSec;\\n\\n    // The length of the time window where a rebase operation is allowed to execute, in seconds.\\n    uint256 public rebaseWindowLengthSec;\\n\\n    // The number of rebase cycles since inception\\n    uint256 public epoch;\\n\\n    uint256 private constant DECIMALS = 18;\\n\\n    // Due to the expression in computeSupplyDelta(), MAX_RATE * MAX_SUPPLY must fit into an int256.\\n    // Both are 18 decimals fixed point numbers.\\n    uint256 private constant MAX_RATE = 10**6 * 10**DECIMALS;\\n    // MAX_SUPPLY = MAX_INT256 / MAX_RATE\\n    uint256 private constant MAX_SUPPLY = ~(uint256(1) << 255) / MAX_RATE;\\n\\n    // This module orchestrates the rebase execution and downstream notification.\\n    address public orchestrator;\\n\\n    address[] public unipairs;\\n\\n    function setXdefToken(address _Xdef)\\n        external\\n        onlyOwner\\n    {\\n        Xdef = XdefToken(_Xdef);\\n    }\\n\\n    /**\\n     * @notice Initiates a new rebase operation, provided the minimum time period has elapsed.\\n     *\\n     * @dev The supply adjustment equals (_totalSupply * DeviationFromTargetRate) / rebaseLag\\n     *      Where DeviationFromTargetRate is (TokenPriceOracleRate - targetPrice) / targetPrice\\n     *      and targetPrice is TvlOracleRate / xdefTvl\\n     */\\n    function rebase() external {\\n        require(msg.sender == orchestrator, \\\"you are not the orchestrator\\\");\\n        require(inRebaseWindow(), \\\"the rebase window is closed\\\");\\n\\n        // This comparison also ensures there is no reentrancy.\\n        require(lastRebaseTimestampSec.add(minRebaseTimeIntervalSec) < now, \\\"cannot rebase yet\\\");\\n\\n        // Snap the rebase time to the start of this window.\\n        lastRebaseTimestampSec = now.sub(now.mod(minRebaseTimeIntervalSec)).add(rebaseWindowOffsetSec);\\n\\n        epoch = epoch.add(1);\\n\\n        int256 supplyDelta;\\n        uint256 tvl;\\n        uint256 tokenPrice;\\n        (supplyDelta, tvl, tokenPrice) = getNextSupplyDelta();\\n        if (supplyDelta == 0) {\\n            emit LogRebase(epoch, tokenPrice, tvl, supplyDelta, now);\\n            return;\\n        }\\n\\n        if (supplyDelta > 0 && Xdef.totalSupply().add(uint256(supplyDelta)) > MAX_SUPPLY) {\\n            supplyDelta = (MAX_SUPPLY.sub(Xdef.totalSupply())).toInt256Safe();\\n        }\\n\\n        uint256 supplyAfterRebase = Xdef.rebase(epoch, supplyDelta);\\n        assert(supplyAfterRebase <= MAX_SUPPLY);\\n        sync();\\n        emit LogRebase(epoch, tokenPrice, tvl, supplyDelta, now);\\n    }\\n\\n    function getNextSupplyDelta()\\n        public\\n        view\\n        returns (int256 supplyDelta, uint256 tvl, uint256 tokenPrice)\\n    {\\n        uint256 tvl;\\n        bool tvlValid;\\n        (tvl, tvlValid) = tvlOracle.getData();\\n        require(tvlValid, \\\"invalid tvl\\\");\\n\\n        uint256 tokenPrice;\\n        bool tokenPriceValid;\\n        (tokenPrice, tokenPriceValid) = tokenPriceOracle.getData();\\n        require(tokenPriceValid, \\\"invalid token price\\\");\\n\\n        if (tokenPrice > MAX_RATE) {\\n            tokenPrice = MAX_RATE;\\n        }\\n\\n        supplyDelta = computeSupplyDelta(tokenPrice, tvl);\\n\\n        // Apply the Dampening factor.\\n        supplyDelta = supplyDelta.div(rebaseLag.toInt256Safe());\\n        return (supplyDelta, tvl, tokenPrice);\\n    }\\n\\n    function addUniPair(address addr)\\n        external\\n        onlyOwner\\n    {\\n        unipairs.push(addr);\\n    }\\n\\n    function removeUniPair(address addr)\\n        external\\n        onlyOwner\\n    {\\n        for (uint i = 0; i < unipairs.length; i++) {\\n            if (unipairs[i] == addr) {\\n                unipairs[i] = unipairs[unipairs.length - 1];\\n                unipairs.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    function sync() public {\\n        for (uint i = 0; i < unipairs.length; i++) {\\n            ISync(unipairs[i]).sync(); \\n        }\\n    }\\n    \\n    /**\\n     * @notice Sets the reference to the market cap oracle.\\n     * @param tvlOracle_ The address of the tvl oracle contract.\\n     */\\n    function setTvlOracle(IOracle tvlOracle_)\\n        external\\n        onlyOwner\\n    {\\n        tvlOracle = tvlOracle_;\\n    }\\n\\n    /**\\n     * @notice Sets the reference to the token price oracle.\\n     * @param tokenPriceOracle_ The address of the token price oracle contract.\\n     */\\n    function setTokenPriceOracle(IOracle tokenPriceOracle_)\\n        external\\n        onlyOwner\\n    {\\n        tokenPriceOracle = tokenPriceOracle_;\\n    }\\n\\n    /**\\n     * @notice Sets the reference to the orchestrator.\\n     * @param orchestrator_ The address of the orchestrator contract.\\n     */\\n    function setOrchestrator(address orchestrator_)\\n        external\\n        onlyOwner\\n    {\\n        orchestrator = orchestrator_;\\n    }\\n\\n    /**\\n     * @notice Sets the deviation threshold fraction. If the exchange rate given by the market\\n     *         oracle is within this fractional distance from the targetRate, then no supply\\n     *         modifications are made. DECIMALS fixed point number.\\n     * @param deviationThreshold_ The new exchange rate threshold fraction.\\n     */\\n    function setDeviationThreshold(uint256 deviationThreshold_)\\n        external\\n        onlyOwner\\n    {\\n        deviationThreshold = deviationThreshold_;\\n    }\\n\\n    /**\\n     * @notice Sets the rebase lag parameter.\\n               It is used to dampen the applied supply adjustment by 1 / rebaseLag\\n               If the rebase lag R, equals 1, the smallest value for R, then the full supply\\n               correction is applied on each rebase cycle.\\n               If it is greater than 1, then a correction of 1/R of is applied on each rebase.\\n     * @param rebaseLag_ The new rebase lag parameter.\\n     */\\n    function setRebaseLag(uint256 rebaseLag_)\\n        external\\n        onlyOwner\\n    {\\n        require(rebaseLag_ > 0);\\n        rebaseLag = rebaseLag_;\\n    }\\n\\n    /**\\n     * @notice Sets the parameters which control the timing and frequency of\\n     *         rebase operations.\\n     *         a) the minimum time period that must elapse between rebase cycles.\\n     *         b) the rebase window offset parameter.\\n     *         c) the rebase window length parameter.\\n     * @param minRebaseTimeIntervalSec_ More than this much time must pass between rebase\\n     *        operations, in seconds.\\n     * @param rebaseWindowOffsetSec_ The number of seconds from the beginning of\\n              the rebase interval, where the rebase window begins.\\n     * @param rebaseWindowLengthSec_ The length of the rebase window in seconds.\\n     */\\n    function setRebaseTimingParameters(\\n        uint256 minRebaseTimeIntervalSec_,\\n        uint256 rebaseWindowOffsetSec_,\\n        uint256 rebaseWindowLengthSec_)\\n        external\\n        onlyOwner\\n    {\\n        require(minRebaseTimeIntervalSec_ > 0, \\\"minRebaseTimeIntervalSec cannot be 0\\\");\\n        require(rebaseWindowOffsetSec_ < minRebaseTimeIntervalSec_, \\\"rebaseWindowOffsetSec_ >= minRebaseTimeIntervalSec_\\\");\\n\\n        minRebaseTimeIntervalSec = minRebaseTimeIntervalSec_;\\n        rebaseWindowOffsetSec = rebaseWindowOffsetSec_;\\n        rebaseWindowLengthSec = rebaseWindowLengthSec_;\\n    }\\n\\n\\n    constructor (XdefToken Xdef_)\\n        public\\n    {\\n\\n        deviationThreshold = 0;\\n        rebaseLag = 1;\\n        minRebaseTimeIntervalSec = 1 days;\\n        rebaseWindowOffsetSec = 0;  // 00:00 UTC\\n        rebaseWindowLengthSec = 60 minutes;\\n        lastRebaseTimestampSec = 0;\\n        deviationThreshold = 50000000000000000; // 5%\\n        epoch = 0;\\n\\n        Xdef = Xdef_;\\n    }\\n\\n    /**\\n     * @return If the latest block timestamp is within the rebase time window it, returns true.\\n     *         Otherwise, returns false.\\n     */\\n    function inRebaseWindow() public view returns (bool) {\\n        return (\\n            now.mod(minRebaseTimeIntervalSec) >= rebaseWindowOffsetSec &&\\n            now.mod(minRebaseTimeIntervalSec) < (rebaseWindowOffsetSec.add(rebaseWindowLengthSec))\\n        );\\n    }\\n\\n    /**\\n     * @return Computes the total supply adjustment in response to the exchange rate\\n     *         and the targetRate.\\n     */\\n    function computeSupplyDelta(uint256 price, uint256 tvl)\\n        private\\n        view\\n        returns (int256)\\n    {\\n        if (withinDeviationThreshold(price, tvl.div(100000000000))) {\\n            return 0;\\n        }\\n\\n        // supplyDelta = totalSupply * (price - targetPrice) / targetPrice\\n        int256 pricex1T       = price.mul(100000000000).toInt256Safe();\\n        int256 targetPricex1T = tvl.toInt256Safe();\\n        return Xdef.totalSupply().toInt256Safe()\\n            .mul(pricex1T.sub(targetPricex1T))\\n            .div(targetPricex1T);\\n    }\\n\\n    /**\\n     * @param rate The current exchange rate, an 18 decimal fixed point number.\\n     * @param targetRate The target exchange rate, an 18 decimal fixed point number.\\n     * @return If the rate is within the deviation threshold from the target rate, returns true.\\n     *         Otherwise, returns false.\\n     */\\n    function withinDeviationThreshold(uint256 rate, uint256 targetRate)\\n        private\\n        view\\n        returns (bool)\\n    {\\n        if (deviationThreshold == 0) {\\n            return false;\\n        }\\n\\n        uint256 absoluteDeviationThreshold = targetRate.mul(deviationThreshold).div(10 ** DECIMALS);\\n\\n        return (rate >= targetRate && rate.sub(targetRate) < absoluteDeviationThreshold)\\n            || (rate < targetRate && targetRate.sub(rate) < absoluteDeviationThreshold);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/SafeMathInt.sol\": {\r\n      \"content\": \"/*\\nMIT License\\n\\nCopyright (c) 2018 requestnetwork\\nCopyright (c) 2018 Fragments, Inc.\\nCopyright (c) 2020 Base Protocol, Inc.\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \\\"Software\\\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n\\n/**\\n * @title SafeMathInt\\n * @dev Math operations for int256 with overflow safety checks.\\n */\\nlibrary SafeMathInt {\\n    int256 private constant MIN_INT256 = int256(1) << 255;\\n    int256 private constant MAX_INT256 = ~(int256(1) << 255);\\n\\n    /**\\n     * @dev Multiplies two int256 variables and fails on overflow.\\n     */\\n    function mul(int256 a, int256 b)\\n        internal\\n        pure\\n        returns (int256)\\n    {\\n        int256 c = a * b;\\n\\n        // Detect overflow when multiplying MIN_INT256 with -1\\n        require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\\n        require((b == 0) || (c / b == a));\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Division of two int256 variables and fails on overflow.\\n     */\\n    function div(int256 a, int256 b)\\n        internal\\n        pure\\n        returns (int256)\\n    {\\n        // Prevent overflow when dividing MIN_INT256 by -1\\n        require(b != -1 || a != MIN_INT256);\\n\\n        // Solidity already throws when dividing by 0.\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Subtracts two int256 variables and fails on overflow.\\n     */\\n    function sub(int256 a, int256 b)\\n        internal\\n        pure\\n        returns (int256)\\n    {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Adds two int256 variables and fails on overflow.\\n     */\\n    function add(int256 a, int256 b)\\n        internal\\n        pure\\n        returns (int256)\\n    {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Converts to absolute value, and fails on overflow.\\n     */\\n    function abs(int256 a)\\n        internal\\n        pure\\n        returns (int256)\\n    {\\n        require(a != MIN_INT256);\\n        return a < 0 ? -a : a;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/UInt256Lib.sol\": {\r\n      \"content\": \"pragma solidity 0.6.12;\\n\\n\\n/**\\n * @title Various utilities useful for uint256.\\n */\\nlibrary UInt256Lib {\\n\\n    uint256 private constant MAX_INT256 = ~(uint256(1) << 255);\\n\\n    /**\\n     * @dev Safely converts a uint256 to an int256.\\n     */\\n    function toInt256Safe(uint256 a)\\n        internal\\n        pure\\n        returns (int256)\\n    {\\n        require(a <= MAX_INT256);\\n        return int256(a);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/XdefToken.sol\": {\r\n      \"content\": \"pragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\nimport \\\"./lib/SafeMathInt.sol\\\";\\nimport \\\"./ERC677Token.sol\\\";\\n\\n/**\\n * @title Xdef ERC20 token\\n * @dev This is part of an implementation of the Xdef Index Fund protocol.\\n *      Xdef is a normal ERC20 token, but its supply can be adjusted by splitting and\\n *      combining tokens proportionally across all wallets.\\n *\\n *      Xdef balances are internally represented with a hidden denomination, 'shares'.\\n *      We support splitting the currency in expansion and combining the currency on contraction by\\n *      changing the exchange rate between the hidden 'shares' and the public 'Xdef'.\\n */\\ncontract XdefToken is ERC20(\\\"xDEF Finance\\\", \\\"xDEF\\\"), ERC677Token, Ownable {\\n    // PLEASE READ BEFORE CHANGING ANY ACCOUNTING OR MATH\\n    // Anytime there is division, there is a risk of numerical instability from rounding errors. In\\n    // order to minimize this risk, we adhere to the following guidelines:\\n    // 1) The conversion rate adopted is the number of shares that equals 1 Xdef.\\n    //    The inverse rate must not be used--totalShares is always the numerator and _totalSupply is\\n    //    always the denominator. (i.e. If you want to convert shares to Xdef instead of\\n    //    multiplying by the inverse rate, you should divide by the normal rate)\\n    // 2) Share balances converted into XdefToken are always rounded down (truncated).\\n    //\\n    // We make the following guarantees:\\n    // - If address 'A' transfers x XdefToken to address 'B'. A's resulting external balance will\\n    //   be decreased by precisely x XdefToken, and B's external balance will be precisely\\n    //   increased by x XdefToken.\\n    //\\n    // We do not guarantee that the sum of all balances equals the result of calling totalSupply().\\n    // This is because, for any conversion function 'f()' that has non-zero rounding error,\\n    // f(x0) + f(x1) + ... + f(xn) is not always equal to f(x0 + x1 + ... xn).\\n    using SafeMath for uint256;\\n    using SafeMathInt for int256;\\n\\n    event LogRebase(uint256 indexed epoch, uint256 totalSupply);\\n    event LogMonetaryPolicyUpdated(address monetaryPolicy);\\n    event LogUserBanStatusUpdated(address user, bool banned);\\n\\n    // Used for authentication\\n    address public monetaryPolicy;\\n\\n    modifier validRecipient(address to) {\\n        require(to != address(0x0));\\n        require(to != address(this));\\n        _;\\n    }\\n\\n    uint256 private constant DECIMALS = 9;\\n    uint256 private constant MAX_UINT256 = ~uint256(0);\\n    uint256 private constant INITIAL_SUPPLY = 17000000 * 10**DECIMALS;\\n    uint256 private constant INITIAL_SHARES =\\n        (MAX_UINT256 / (10**36)) - ((MAX_UINT256 / (10**36)) % INITIAL_SUPPLY);\\n    uint256 private constant MAX_SUPPLY = ~uint128(0);\\n\\n    uint256 private _totalShares;\\n    uint256 private _totalSupply;\\n    uint256 private _sharesPerXdef;\\n    mapping(address => uint256) private _shareBalances;\\n\\n    mapping(address => bool) public bannedUsers;\\n\\n    // This is denominated in XdefToken, because the shares-Xdef conversion might change before\\n    // it's fully paid.\\n    mapping(address => mapping(address => uint256)) private _allowedXdef;\\n\\n    bool public transfersPaused;\\n    bool public rebasesPaused;\\n\\n    mapping(address => bool) public transferPauseExemptList;\\n\\n    constructor() public {\\n        _setupDecimals(uint8(DECIMALS));\\n\\n        _totalShares = INITIAL_SHARES;\\n        _totalSupply = INITIAL_SUPPLY;\\n        _shareBalances[owner()] = _totalShares;\\n        _sharesPerXdef = _totalShares.div(_totalSupply);\\n\\n        emit Transfer(address(0x0), owner(), _totalSupply);\\n    }\\n\\n    function setTransfersPaused(bool _transfersPaused) external onlyOwner {\\n        transfersPaused = _transfersPaused;\\n    }\\n\\n    function setTransferPauseExempt(address user, bool exempt)\\n        external\\n        onlyOwner\\n    {\\n        if (exempt) {\\n            transferPauseExemptList[user] = true;\\n        } else {\\n            delete transferPauseExemptList[user];\\n        }\\n    }\\n\\n    function setRebasesPaused(bool _rebasesPaused) public onlyOwner {\\n        rebasesPaused = _rebasesPaused;\\n    }\\n\\n    /**\\n     * @param monetaryPolicy_ The address of the monetary policy contract to use for authentication.\\n     */\\n    function setMonetaryPolicy(address monetaryPolicy_) external onlyOwner {\\n        monetaryPolicy = monetaryPolicy_;\\n        emit LogMonetaryPolicyUpdated(monetaryPolicy_);\\n    }\\n\\n    /**\\n     * @dev Notifies XdefToken contract about a new rebase cycle.\\n     * @param supplyDelta The number of new Xdef tokens to add into circulation via expansion.\\n     * @return The total number of Xdef after the supply adjustment.\\n     */\\n    function rebase(uint256 epoch, int256 supplyDelta)\\n        external\\n        returns (uint256)\\n    {\\n        require(msg.sender == monetaryPolicy, \\\"only monetary policy\\\");\\n        require(!rebasesPaused, \\\"rebases paused\\\");\\n\\n        if (supplyDelta == 0) {\\n            emit LogRebase(epoch, _totalSupply);\\n            return _totalSupply;\\n        }\\n\\n        if (supplyDelta < 0) {\\n            _totalSupply = _totalSupply.sub(uint256(supplyDelta.abs()));\\n        } else {\\n            _totalSupply = _totalSupply.add(uint256(supplyDelta));\\n        }\\n\\n        if (_totalSupply > MAX_SUPPLY) {\\n            _totalSupply = MAX_SUPPLY;\\n        }\\n\\n        _sharesPerXdef = _totalShares.div(_totalSupply);\\n\\n        // From this point forward, _sharesPerXdef is taken as the source of truth.\\n        // We recalculate a new _totalSupply to be in agreement with the _sharesPerXdef\\n        // conversion rate.\\n        // This means our applied supplyDelta can deviate from the requested supplyDelta,\\n        // but this deviation is guaranteed to be < (_totalSupply^2)/(totalShares - _totalSupply).\\n        //\\n        // In the case of _totalSupply <= MAX_UINT128 (our current supply cap), this\\n        // deviation is guaranteed to be < 1, so we can omit this step. If the supply cap is\\n        // ever increased, it must be re-included.\\n\\n        emit LogRebase(epoch, _totalSupply);\\n        return _totalSupply;\\n    }\\n\\n    function totalShares() public view returns (uint256) {\\n        return _totalShares;\\n    }\\n\\n    function sharesOf(address user) external view returns (uint256) {\\n        return _shareBalances[user];\\n    }\\n\\n    function setUserBanStatus(address user, bool banned) external onlyOwner {\\n        if (banned) {\\n            bannedUsers[user] = true;\\n        } else {\\n            delete bannedUsers[user];\\n        }\\n        emit LogUserBanStatusUpdated(user, banned);\\n    }\\n\\n    /**\\n     * @return The total number of Xdef.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @param who The address to query.\\n     * @return The balance of the specified address.\\n     */\\n    function balanceOf(address who) public view override returns (uint256) {\\n        return _shareBalances[who].div(_sharesPerXdef);\\n    }\\n\\n    /**\\n     * @dev Transfer tokens to a specified address.\\n     * @param to The address to transfer to.\\n     * @param value The amount to be transferred.\\n     * @return True on success, false otherwise.\\n     */\\n    function transfer(address to, uint256 value)\\n        public\\n        override(ERC20, ERC677)\\n        validRecipient(to)\\n        returns (bool)\\n    {\\n        require(bannedUsers[msg.sender] == false, \\\"you are banned\\\");\\n        require(\\n            !transfersPaused || transferPauseExemptList[msg.sender],\\n            \\\"paused\\\"\\n        );\\n\\n        uint256 shareValue = value.mul(_sharesPerXdef);\\n        _shareBalances[msg.sender] = _shareBalances[msg.sender].sub(shareValue);\\n        _shareBalances[to] = _shareBalances[to].add(shareValue);\\n        emit Transfer(msg.sender, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Function to check the amount of tokens that an owner has allowed to a spender.\\n     * @param owner_ The address which owns the funds.\\n     * @param spender The address which will spend the funds.\\n     * @return The number of tokens still available for the spender.\\n     */\\n    function allowance(address owner_, address spender)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _allowedXdef[owner_][spender];\\n    }\\n\\n    /**\\n     * @dev Transfer tokens from one address to another.\\n     * @param from The address you want to send tokens from.\\n     * @param to The address you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) public override validRecipient(to) returns (bool) {\\n        require(bannedUsers[msg.sender] == false, \\\"you are banned\\\");\\n        require(\\n            !transfersPaused || transferPauseExemptList[msg.sender],\\n            \\\"paused\\\"\\n        );\\n\\n        _allowedXdef[from][msg.sender] = _allowedXdef[from][msg.sender].sub(\\n            value\\n        );\\n\\n        uint256 shareValue = value.mul(_sharesPerXdef);\\n        _shareBalances[from] = _shareBalances[from].sub(shareValue);\\n        _shareBalances[to] = _shareBalances[to].add(shareValue);\\n        emit Transfer(from, to, value);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of\\n     * msg.sender. This method is included for ERC20 compatibility.\\n     * increaseAllowance and decreaseAllowance should be used instead.\\n     * Changing an allowance with this method brings the risk that someone may transfer both\\n     * the old and the new allowance - if they are both greater than zero - if a transfer\\n     * transaction is mined before the later approve() call is mined.\\n     *\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     */\\n    function approve(address spender, uint256 value)\\n        public\\n        override\\n        returns (bool)\\n    {\\n        require(\\n            !transfersPaused || transferPauseExemptList[msg.sender],\\n            \\\"paused\\\"\\n        );\\n\\n        _allowedXdef[msg.sender][spender] = value;\\n        emit Approval(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Increase the amount of tokens that an owner has allowed to a spender.\\n     * This method should be used instead of approve() to avoid the double approval vulnerability\\n     * described above.\\n     * @param spender The address which will spend the funds.\\n     * @param addedValue The amount of tokens to increase the allowance by.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        public\\n        override\\n        returns (bool)\\n    {\\n        require(\\n            !transfersPaused || transferPauseExemptList[msg.sender],\\n            \\\"paused\\\"\\n        );\\n\\n        _allowedXdef[msg.sender][spender] = _allowedXdef[msg.sender][spender]\\n            .add(addedValue);\\n        emit Approval(msg.sender, spender, _allowedXdef[msg.sender][spender]);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Decrease the amount of tokens that an owner has allowed to a spender.\\n     *\\n     * @param spender The address which will spend the funds.\\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        public\\n        override\\n        returns (bool)\\n    {\\n        require(\\n            !transfersPaused || transferPauseExemptList[msg.sender],\\n            \\\"paused\\\"\\n        );\\n\\n        uint256 oldValue = _allowedXdef[msg.sender][spender];\\n        if (subtractedValue >= oldValue) {\\n            _allowedXdef[msg.sender][spender] = 0;\\n        } else {\\n            _allowedXdef[msg.sender][spender] = oldValue.sub(subtractedValue);\\n        }\\n        emit Approval(msg.sender, spender, _allowedXdef[msg.sender][spender]);\\n        return true;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"contracts/ERC677Token.sol\": {\r\n      \"content\": \"pragma solidity 0.6.12;\\n\\nimport \\\"./interfaces/ERC677.sol\\\";\\nimport \\\"./interfaces/ERC677Receiver.sol\\\";\\n\\n\\nabstract contract ERC677Token is ERC677 {\\n    /**\\n    * @dev transfer token to a contract address with additional data if the recipient is a contact.\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    * @param _data The extra data to be passed to the receiving contract.\\n    */\\n    function transferAndCall(address _to, uint _value, bytes memory _data)\\n        public\\n        override\\n        returns (bool success)\\n    {\\n        transfer(_to, _value);\\n        if (isContract(_to)) {\\n            contractFallback(_to, _value, _data);\\n        }\\n        return true;\\n    }\\n\\n    function contractFallback(address _to, uint _value, bytes memory _data)\\n        private\\n    {\\n        ERC677Receiver receiver = ERC677Receiver(_to);\\n        receiver.onTokenTransfer(msg.sender, _value, _data);\\n    }\\n\\n    function isContract(address _addr)\\n        private\\n        view\\n        returns (bool hasCode)\\n    {\\n        uint length;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { length := extcodesize(_addr) }\\n        return length > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ERC677.sol\": {\r\n      \"content\": \"pragma solidity 0.6.12;\\n\\n\\nabstract contract ERC677 {\\n    function transfer(address to, uint256 value) public virtual returns (bool);\\n    function transferAndCall(address to, uint value, bytes memory data) public virtual returns (bool success);\\n\\n    // event Transfer(address indexed from, address indexed to, uint value, bytes data);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ERC677Receiver.sol\": {\r\n      \"content\": \"pragma solidity 0.6.12;\\n\\n\\nabstract contract ERC677Receiver {\\n    function onTokenTransfer(address _sender, uint _value, bytes memory _data) virtual public;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"policy_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"TransactionFailed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"addTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"policy\",\"outputs\":[{\"internalType\":\"contract XdefTokenMonetaryPolicy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"removeTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_policy\",\"type\":\"address\"}],\"name\":\"setMonetaryPolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setTransactionEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transactionsSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"XdefTokenOrchestrator","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000f96e5d4d2c8a7c7d866122b4ab53b46725953e6","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}