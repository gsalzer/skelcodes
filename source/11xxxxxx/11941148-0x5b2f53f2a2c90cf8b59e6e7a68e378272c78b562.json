{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2017-11-28\r\n*/\r\n\r\npragma solidity  ^0.4.0 ;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\n  \r\nlibrary SafeMath {\r\n  function safeMul(uint256 a, uint256 b) internal pure returns (uint256) { \r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b > 0);\r\n    uint256 c = a / b;\r\n    assert(a == b * c + a % b);\r\n    return c;\r\n  }\r\n\r\n  function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c>=a && c>=b);\r\n    return c;\r\n  }\r\n\r\n//   function assert(bool assertion) internal {\r\n//     if (!assertion) {\r\n//       throw;\r\n//     }\r\n//   }\r\n}\r\n  \r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\n \r\n contract Ownable {\r\n    address public owner;\r\n    mapping (address =>  bool) public admins;\r\n\r\n    function owned() public {\r\n        owner = msg.sender;\r\n        admins[msg.sender]=true;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner,\"Caller is not the owner\");\r\n        _;\r\n    }\r\n     modifier onlyAdmin   {\r\n        require(admins[msg.sender] == true,\"Caller is not the admin\");\r\n        _;\r\n    }\r\n\r\n    // function transferOwnership(address newOwner) onlyOwner public {\r\n    //     owner = newOwner;\r\n    // }\r\n     function makeAdmin(address newAdmin, bool isAdmin) onlyOwner public{\r\n        admins[newAdmin] = isAdmin;\r\n    }\r\n}\r\n  \r\n \r\ncontract ERC20Basic{\r\n    uint256 public totalSupply_; \r\n    string public  name  ;\r\n    string public   symbol ;\r\n    uint8 public constant decimals = 18;\r\n    \r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    mapping(address => uint256) balances;\r\n    mapping(address => mapping (address => uint256)) allowed;\r\n     \r\n     \r\n    using SafeMath for uint256;\r\n  \r\n   /**\r\n    * @dev Fix for the ERC20 short address attack.\r\n    */\r\n    modifier onlyPayloadSize(uint size) {\r\n        require(!(msg.data.length < size + 4));\r\n        _;\r\n    }\r\n     \r\n    function totalSupply() public   view returns (uint256 ) {\r\n    return totalSupply_;\r\n    }\r\n\r\n    function balanceOf(address owner_) public  view returns (uint256 ) {\r\n        return (balances[owner_]);\r\n    }\r\n\r\n\r\n\r\n    function approve(address delegate, uint256 amount) public   returns (bool) {\r\n        allowed[msg.sender][delegate] = amount;\r\n        emit Approval(msg.sender, delegate, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner_, address delegate) public   view returns (uint256) {\r\n        return allowed[owner_][delegate];\r\n    }\r\n\r\n   \r\n   \r\n} \r\ncontract BlackList is Ownable, ERC20Basic {\r\n    \r\n     mapping (address => bool) public isBlackListed; \r\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded AEDC) ///////\r\n    function getBlackListStatus(address _maker) external view returns (bool) {\r\n        return isBlackListed[_maker];\r\n    } \r\n    function getOwner() external view returns (address) {\r\n        return owner;\r\n    } \r\n    function addBlackList (address _evilUser) public onlyAdmin {\r\n        isBlackListed[_evilUser] = true;\r\n       emit AddedBlackList(_evilUser);\r\n    } \r\n    function removeBlackList (address _clearedUser) public onlyAdmin {\r\n        isBlackListed[_clearedUser] = false;\r\n       emit RemovedBlackList(_clearedUser);\r\n    } \r\n    function destroyBlackFunds (address _blackListedUser) public onlyAdmin {\r\n        require(isBlackListed[_blackListedUser]);\r\n        uint dirtyFunds = balanceOf(_blackListedUser);\r\n        balances[_blackListedUser] = 0;\r\n        totalSupply_ =totalSupply_.safeSub(dirtyFunds);\r\n       emit DestroyedBlackFunds(_blackListedUser, dirtyFunds);\r\n    }\r\n\r\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\r\n\r\n    event AddedBlackList(address _user);\r\n\r\n    event RemovedBlackList(address _user);\r\n\r\n}\r\n\r\n  \r\n \r\n /******************************************/\r\n/*       ADVANCED TOKEN STARTS HERE       */\r\n/******************************************/\r\n\r\ncontract AEDC is  BlackList {\r\n    uint256 public totalIcoSupply;\r\n    uint256  buyPrice;\r\n    uint256  buyBackPrice; \r\n    uint256  icoBuyPrice; \r\n    uint256  transactionFee;  \r\n    uint256  icoStartTime;\r\n    uint256  icoEndTime;\r\n    mapping(address => uint256) icoBalances;\r\n    event TransferICO(address indexed from, address indexed to, uint256 value); // transfer ico  \r\n    event IcoWithdrawn(address indexed owner_ , uint256 value,  uint256 time); // generates event when ico holder convert into AEDC coin \r\n    event Withdrawn(address indexed _to, uint256 value);// transfer balance to owner \r\n    event Issue(uint256 amount);// Called when new token are issued \r\n    event Redeem(uint256 amount); // Called when tokens are redeemed \r\n    event BuyPrice(uint256 value); // generates event on chenge coin buy price from ETH\r\n    event BuyBackPrice(uint256 value);// generates event on chenge coin sell price in ETH\r\n    event IcoBuyPrice(uint256 value); // generates event on chenge ico buy price from ETH\r\n    event Bought(uint256 amount);\r\n    event BoughtICO(uint256 amount);\r\n    event Sold(uint256 amount);\r\n    /* Initializes contract with initial supply tokens to the creator of the contract */ \r\n    constructor(uint256  initialSupply,uint256 icoInitialSupply,string memory tokenName, string memory tokenSymbol,uint256 icoSatrtTime_,uint256 icoEndTime_,uint256 buyPrice_,uint256 buyBackPrice_,uint256 icoBuyPrice_,uint256 transactionFee_) public {\r\n        owned() ;\r\n        totalSupply_ = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\r\n        totalIcoSupply = icoInitialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\r\n        balances[this] = totalSupply_;                // Give the creator all initial tokens \r\n        icoBalances[this] = totalIcoSupply;          // Give the creator all initial ico Coins\r\n        name = tokenName;                                   // Set the name for display purposes\r\n        symbol = tokenSymbol;                               // Set the symbol for display purposes\r\n        icoStartTime = icoSatrtTime_; // start ico   \r\n        icoEndTime = icoEndTime_;    \r\n        buyPrice = buyPrice_;\r\n        buyBackPrice = buyBackPrice_;\r\n        icoBuyPrice = icoBuyPrice_;\r\n        transactionFee = transactionFee_;\r\n      } \r\n      \r\n    using SafeMath for uint256;\r\n      \r\n    /* Internal transfer  ICO, only can be called by this contract */\r\n    function _transferICO(address _from, address _to, uint256 _value) internal {\r\n        require (_to != 0x0);      // Prevent transfer to 0x0 address. Use burn() instead\r\n        require (icoBalances[_from] >= _value ,\"Don't have enough ICO  balances.\");               // Check if the sender has enough\r\n        require ( (icoBalances[_to] + _value) > icoBalances[_to]); // Check for overflows\r\n        require(!isBlackListed[_from],\"Sender is black Listed\");                     // Check if sender is isBlackListed\r\n        require(!isBlackListed[_to],\"Recipient is black listed\");                       // Check if recipient is isBlackListed\r\n        icoBalances[_from] = icoBalances[_from].safeSub( _value);                         // Subtract from the sender\r\n        icoBalances[_to] = icoBalances[_to].safeAdd( _value);                           // Add the same to the recipient\r\n        emit TransferICO(_from, _to, _value);\r\n    } \r\n      /* Transfer ICO Coins from other address By owner */\r\n    function transferICO( address _to, uint256 _value)  public  returns (bool success) {  \r\n        _transferICO(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n      /* Transfer ICO Coins from other address By owner */\r\n    function transferICOFrom(address _from, address _to, uint256 _value) onlyAdmin public  returns (bool success) {  \r\n        require (icoBalances[_from] >=  (_value+transactionFee),\"Don't have enough ICO balances.\");\r\n        icoBalances[_from] = icoBalances[_from].safeSub(transactionFee);// Subtract from the targeted balance \r\n        icoBalances[this] = icoBalances[this].safeAdd(transactionFee); //return tokens to owner \r\n        _transferICO(_from, _to, _value);\r\n        return true;\r\n    }\r\n     \r\n    /* Internal transfer, only can be called by this contract */\r\n    function _transfer(address _from, address _to, uint256 _value) internal {\r\n        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\r\n        require (balances[_from] >= _value,\"Don't have enough balances.\");               // Check if the sender has enough\r\n        require ( (balances[_to] + _value) > balances[_to]); // Check for overflows\r\n        require(!isBlackListed[_from],\"Sender  is black listed\");                     // Check if sender is isBlackListed\r\n        require(!isBlackListed[_to],\"Recipient is black listed\");                       // Check if recipient is isBlackListed\r\n        balances[_from] = balances[_from].safeSub( _value);                         // Subtract from the sender\r\n        balances[_to] = balances[_to].safeAdd( _value);                           // Add the same to the recipient\r\n        emit Transfer(_from, _to, _value);\r\n    } \r\n    \r\n     function sell_(uint256 amount) internal  {\r\n        require(!isBlackListed[msg.sender],\"Sender is black listed\");                     // Check if sender is black listed\r\n        require(balances[msg.sender] >= amount,\"You need to sell at least some AEDC\");         // checks if the sender has enough to sell\r\n        uint256 revenue=amount.safeMul(buyBackPrice);\r\n        revenue=revenue.safeDiv(10 ** uint256(decimals));\r\n        require(revenue<=address(this).balance,\"Not enough ether balance in the reserve to Buy AEDC\");\r\n        balances[this] = balances[this].safeAdd(amount)  ;                       // adds the amount to owner's balance\r\n        balances[msg.sender] = balances[msg.sender].safeSub(amount);             // subtracts the amount from seller's balance\r\n        msg.sender.transfer(revenue); \r\n        emit Sold(amount);              // executes an event reflecting on the change\r\n                                            // ends function and returns\r\n    }\r\n    \r\n    // transfer coin \r\n     function transfer( address _to, uint256 _value)  public  returns (bool) { \r\n         \r\n         if( _to==address(this))\r\n         {\r\n            sell_(_value); \r\n            emit Transfer(msg.sender, this, _value);\r\n            \r\n         }\r\n         else \r\n         {\r\n              _transfer(msg.sender, _to, _value);\r\n         }\r\n       \r\n        return true;\r\n    } \r\n     function transferFrom(address owner_, address buyer, uint256 amount_) public   returns (bool) {\r\n        require(amount_ <= balances[owner_],\"Don't have enough balances.\");\r\n        require(amount_ <= allowed[owner_][msg.sender]);  \r\n        allowed[owner_][msg.sender] = allowed[owner_][msg.sender].safeSub(amount_); \r\n        _transfer(owner_, buyer, amount_); \r\n        return true;\r\n    }\r\n    \r\n   /** * Transfer Coins from other address By owner  */\r\n    function transferCoinFrom(address _from, address _to, uint256 _value) onlyAdmin public  returns (bool success) {  \r\n        require (balances[_from] >=  (_value+transactionFee),\"Don't have enough balances.\");\r\n        balances[_from] = balances[_from].safeSub(  transactionFee);// Subtract from the targeted balance \r\n        balances[this] =balances[this].safeAdd(transactionFee); \r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n     /* Internal ico Withdrawn, only can be called by this contract */\r\n    function _icoWithdrawn(address owner_, uint256 _value) internal {\r\n        require( block.timestamp >=icoEndTime,\"ICO Withdrawn not allowed\"); \r\n        require (icoBalances[owner_] >= _value,\"Don't have enough ICO balances.\");               // Check if the sender has enough\r\n        require ( (balances[owner_] + _value) > balances[owner_]); // Check for overflows\r\n        require(!isBlackListed[owner_],\"Owner is black listed \");                     // Check if sender is isBlackListed  \r\n        icoBalances[owner_] =  icoBalances[owner_].safeSub( _value);                         // Subtract from the sender\r\n        totalIcoSupply=totalIcoSupply.safeSub(_value);  // subtract from total ico supply \r\n        _transfer(address(this), owner_, _value); // transer ADEC coin from contract to address \r\n        emit IcoWithdrawn(owner_, _value, block.timestamp);\r\n    } \r\n\r\n   // Ico Withdrawn by AEDC\r\n     function icoWithdrawn(  uint256 _value)  public  returns (bool) { \r\n        _icoWithdrawn(msg.sender, _value);\r\n        return true;\r\n    } \r\n    // ico Withdrawn\r\n     function icoWithdrawnFrom(address owner_, uint256 _value) onlyAdmin public   returns (bool) { \r\n        require (icoBalances[owner_] >=  (_value+transactionFee),\"Don't have enough ICO balances.\");\r\n        icoBalances[owner_] = icoBalances[owner_].safeSub(  transactionFee);// Subtract from the targeted balance \r\n        totalIcoSupply=totalIcoSupply.safeSub(transactionFee); \r\n        _icoWithdrawn(owner_, _value);\r\n        return true;\r\n    }\r\n\r\n    \r\n    /// @notice Allow users to buy tokens for `newBuyPrice`  \r\n    /// @param newBuyPrice Price users can buy from the contract denominator\r\n    function setBuyPrices( uint256 newBuyPrice) internal { \r\n        buyPrice = newBuyPrice; \r\n        emit BuyPrice(newBuyPrice);\r\n    }\r\n    /// @notice Allow users to sell tokens for `newBuyBackPrice`  \r\n    /// @param newBuyBackPrice Price users can buy from the contract denominator\r\n    function setBuyBackPrices( uint256 newBuyBackPrice) internal {\r\n        buyBackPrice = newBuyBackPrice; \r\n        emit BuyBackPrice(newBuyBackPrice);\r\n    }\r\n      /// @notice Allow owner to Set Per tokens Transfer Fee  \r\n    /// @param _transactionFee Price users pay on token transfer \r\n    function setTransactionFees( uint256 _transactionFee) internal {\r\n        transactionFee =_transactionFee ;\r\n    }\r\n     \r\n    function setPrices(uint256 newBuyPrice,uint256 newBuyBackPrice, uint256 newTransationFee) onlyAdmin public{\r\n        require(newBuyPrice>0);\r\n        require(newBuyBackPrice>0);\r\n        require(newTransationFee>0);\r\n      setBuyPrices(newBuyPrice);  \r\n      setBuyBackPrices(newBuyBackPrice);\r\n      setTransactionFees(newTransationFee);\r\n    \r\n    }\r\n     function setIcoBuyPrices( uint256 newIcoBuyPrice) onlyAdmin public {\r\n         require(newIcoBuyPrice>0);\r\n        icoBuyPrice = newIcoBuyPrice; \r\n        emit IcoBuyPrice(newIcoBuyPrice);\r\n    }\r\n   \r\n    \r\n    function setIcoTimePeriod( uint256 _icoStartTime,uint256 _icoEndTime) onlyAdmin public {\r\n        require(_icoStartTime>0);\r\n        require(_icoEndTime>0);\r\n        icoStartTime=_icoStartTime;\r\n        icoEndTime=_icoEndTime;\r\n    }\r\n    \r\n    /// @notice Buy tokens from contract by sending ether\r\n    function buy() payable public returns (uint256 amount){\r\n        require(msg.value > 0, \"You need to send some Ether\");\r\n        amount =  msg.value.safeMul(10 ** uint256(decimals)); \r\n        amount= amount.safeDiv(buyPrice);  // calculates the  amount\r\n        require(balanceOf(this)>=amount,\"Not enough balance in the reserve to sell\") ;//// checks if it has enough to sell  \r\n        balances[msg.sender] = balances[msg.sender].safeAdd(amount);    // adds the amount to buyer's balance\r\n        balances[this] = balances[this].safeSub(amount);     // subtracts amount from seller's balance\r\n        emit Transfer(this, msg.sender, amount);               // execute an event reflecting the change\r\n        return amount;                                    // ends function and returns\r\n    }\r\n     /// @notice Buy tokens from contract by sending ether\r\n    function buyICO() payable public returns (uint256 amount){\r\n        require(now <= icoEndTime,\"Ico purchase not allowed\");\r\n        require(msg.value > 0, \"You need to send some Ether\");\r\n         amount =  msg.value.safeMul(10 ** uint256(decimals)); \r\n         amount= amount.safeDiv(icoBuyPrice);  // calculates the  amount \r\n         require(icoBalances[this]>=amount,\"Not enough ICO balance in the reserve to sell\") ;//// checks if it has enough to sell  \r\n        icoBalances[msg.sender] = icoBalances[msg.sender].safeAdd(amount);    // adds the amount to buyer's balance\r\n        icoBalances[this] = icoBalances[this].safeSub(amount);     // subtracts amount from seller's balance\r\n        emit TransferICO(this, msg.sender, amount);               // execute an event reflecting the change\r\n        return amount;                                    // ends function and returns\r\n    }\r\n    \r\n    // Sell token on behalf of admins\r\n    // function  buyBackFrom(address _from,uint256 amount) onlyAdmin public returns (uint256 revenue){\r\n    //     require(!isBlackListed[_from],\"Sender is black listed\");                     // Check if sender is frozen\r\n    //     require(balances[_from] >= amount*10 ** uint256(decimals) +transactionFee,\"Sender has not enough amount to sell\");         // checks if the sender has enough to sell\r\n    //     balances[this] += amount*10 ** uint256(decimals) ;                       // adds the amount to owner's balance\r\n    //     balances[_from] -= amount*10 ** uint256(decimals) +transactionFee;            // subtracts the amount from seller's balance\r\n    //     revenue =  amount*buyBackPrice;\r\n    //     _from.transfer(revenue); \r\n    //     emit  Transfer(_from, this, amount*10 ** uint256(decimals));               // executes an event reflecting on the change\r\n    //     return revenue;                                   // ends function and returns\r\n    // } \r\n    \r\n     // Sell token on behalf of admins\r\n    function  buyBackFrom(uint256 amount)  onlyAdmin public returns (uint256 revenue){\r\n        require(!isBlackListed[msg.sender],\"Sender is black listed\");                     // Check if sender is black listed\r\n        require(balances[msg.sender] >= amount +transactionFee,\"You need to sell at least some AEDC\");         // checks if the sender has enough to sell\r\n        revenue=amount.safeMul(buyBackPrice);\r\n        revenue=revenue.safeDiv(10 ** uint256(decimals));\r\n        require(revenue<=address(this).balance,\"Not enough ether balance in the reserve to Buy AEDC\");\r\n        balances[this] = balances[this].safeAdd(amount)  ; \r\n        balances[this] = balances[this].safeAdd(transactionFee)  ; // adds the amount to owner's balance\r\n        balances[msg.sender] = balances[msg.sender].safeSub(amount);             // subtracts the amount from seller's balance\r\n        balances[msg.sender] = balances[msg.sender].safeSub(transactionFee);  \r\n        msg.sender.transfer(revenue); \r\n        emit Sold(amount);              // executes an event reflecting on the change\r\n        return revenue;                                   // ends function and returns\r\n    } \r\n    \r\n    function sell(uint256 amount) public returns (uint256 revenue){\r\n        require(!isBlackListed[msg.sender],\"Sender is black listed\");                     // Check if sender is black listed\r\n        require(balances[msg.sender] >= amount,\"You need to sell at least some AEDC\");         // checks if the sender has enough to sell\r\n        revenue=amount.safeMul(buyBackPrice);\r\n        revenue=revenue.safeDiv(10 ** uint256(decimals));\r\n        require(revenue<=address(this).balance,\"Not enough ether balance in the reserve to Buy AEDC\");\r\n        balances[this] = balances[this].safeAdd(amount)  ;                       // adds the amount to owner's balance\r\n        balances[msg.sender] = balances[msg.sender].safeSub(amount);             // subtracts the amount from seller's balance\r\n        msg.sender.transfer(revenue); \r\n        emit Sold(amount);              // executes an event reflecting on the change\r\n        return revenue;                                   // ends function and returns\r\n    }\r\n      \r\n      \r\n      \r\n    // transfer ether to admins\r\n\tfunction withdrawEther(uint256 amount) onlyAdmin public {\r\n\t    require(admins[msg.sender]==true,\"\");  \r\n\t    msg.sender.transfer(amount);\r\n\t    emit  Withdrawn(msg.sender, amount);\r\n\t\t\r\n\t} \r\n\t // transfer balance to owner\r\n\tfunction withdrawEtherToOwner(uint256 amount) onlyOwner public {\r\n\t\trequire(msg.sender == owner);\r\n\t\tmsg.sender.transfer(amount);\r\n\t}\r\n\t \t// can accept ether\r\n\tfunction() public payable { \r\n\t    require(msg.value > 0, \"You need to send some Ether\");\r\n        uint256 amount =  msg.value.safeMul(10 ** uint256(decimals)); \r\n        amount= amount.safeDiv(buyPrice);  // calculates the  amount\r\n        require(balanceOf(this)>=amount,\"Not enough balance in the reserve to sell\") ;//// checks if it has enough to sell  \r\n        balances[msg.sender] = balances[msg.sender].safeAdd(amount);    // adds the amount to buyer's balance\r\n        balances[this] = balances[this].safeSub(amount);     // subtracts amount from seller's balance\r\n        emit Transfer(this, msg.sender, amount);               // execute an event reflecting the change\r\n \r\n    } \r\n   function TranserEtherToContract() payable public  {\r\n           \r\n    }\r\n\t  \r\n\t  // get ico balance\r\n\t  function icoBalanceOf(address owner_) public  view returns (uint256) {\r\n        return icoBalances[owner_];\r\n    }\r\n\t  \r\n\t // get buyPrice\r\n\tfunction getBuyPrice() public   view returns (uint256) {\r\n        return buyPrice;\r\n    }\r\n\t // get buyBackPrice\r\n\tfunction getBuyBackPrice() public   view returns (uint256) {\r\n        return buyBackPrice;\r\n    }\r\n\t // get transaction Fee\r\n\t   function getTransactionFee() public   view returns (uint256) {\r\n        return transactionFee;\r\n    }\r\n\t // get icoBuyPrice\r\n\tfunction getIcoBuyPrice() public   view returns (uint256) {\r\n        return icoBuyPrice;\r\n    }\r\n\t \r\n    function getTotalIcoSupply() public   view returns (uint256) {\r\n        return totalIcoSupply;\r\n    }\r\n    function getIcoStartTime() public view returns(uint256)\r\n\t{\r\n\t\treturn icoStartTime;\r\n\t} \r\n\t function getIcoEndTime() public view returns(uint256)\r\n\t{\r\n\t\treturn icoEndTime;\r\n\t} \r\n\tfunction getIcoTimePeriod() public view returns(uint256)\r\n\t{\r\n\t\treturn icoEndTime.safeSub(icoStartTime);\r\n\t} \r\n      \r\n\tfunction TimeNow() public view returns(uint256)\r\n\t{\r\n\t\treturn now;\r\n\t}\r\n \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getBuyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"delegate\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newIcoBuyPrice\",\"type\":\"uint256\"}],\"name\":\"setIcoBuyPrices\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_evilUser\",\"type\":\"address\"}],\"name\":\"addBlackList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferICO\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getIcoTimePeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner_\",\"type\":\"address\"},{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBuyBackPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferICOFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"},{\"name\":\"isAdmin\",\"type\":\"bool\"}],\"name\":\"makeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyBackFrom\",\"outputs\":[{\"name\":\"revenue\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferCoinFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"icoBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_maker\",\"type\":\"address\"}],\"name\":\"getBlackListStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"icoWithdrawn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTransactionFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBuyPrice\",\"type\":\"uint256\"},{\"name\":\"newBuyBackPrice\",\"type\":\"uint256\"},{\"name\":\"newTransationFee\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"TranserEtherToContract\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getIcoStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalIcoSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getIcoBuyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TimeNow\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getIcoEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEtherToOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyICO\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner_\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"icoWithdrawnFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalIcoSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner_\",\"type\":\"address\"},{\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"owned\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlackListed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[{\"name\":\"revenue\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_clearedUser\",\"type\":\"address\"}],\"name\":\"removeBlackList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_blackListedUser\",\"type\":\"address\"}],\"name\":\"destroyBlackFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_icoStartTime\",\"type\":\"uint256\"},{\"name\":\"_icoEndTime\",\"type\":\"uint256\"}],\"name\":\"setIcoTimePeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"icoInitialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"name\":\"icoSatrtTime_\",\"type\":\"uint256\"},{\"name\":\"icoEndTime_\",\"type\":\"uint256\"},{\"name\":\"buyPrice_\",\"type\":\"uint256\"},{\"name\":\"buyBackPrice_\",\"type\":\"uint256\"},{\"name\":\"icoBuyPrice_\",\"type\":\"uint256\"},{\"name\":\"transactionFee_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferICO\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner_\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"IcoWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Issue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"BuyPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"BuyBackPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"IcoBuyPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Bought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BoughtICO\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Sold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_blackListedUser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"DestroyedBlackFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"AddedBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"RemovedBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"AEDC","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000002dc6c0000000000000000000000000000000000000000000000000000000000007a12000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000006037a6f80000000000000000000000000000000000000000000000000000000061264678000000000000000000000000000000000000000000000000000571588bcbc00000000000000000000000000000000000000000000000000000047481a08c60000000000000000000000000000000000000000000000000000003f52d5647a00000000000000000000000000000000000000000000000000029a2241af62c00000000000000000000000000000000000000000000000000000000000000000004414544430000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044145444300000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://bcaa5a2ebbd4a948a281d44311d4c8c6d5ab515c7a38d1b96d4ca6a6fefb0e52"}]}