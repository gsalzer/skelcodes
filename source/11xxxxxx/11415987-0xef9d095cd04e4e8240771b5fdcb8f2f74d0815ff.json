{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n *\r\n * _Since v2.5.0:_ this module is now much more gas efficient, given net gas\r\n * metering changes introduced in the Istanbul hardfork.\r\n */\r\ncontract ReentrancyGuard {\r\n    bool private _notEntered;\r\n\r\n    constructor () internal {\r\n        // Storing an initial non-zero value makes deployment a bit more\r\n        // expensive, but in exchange the refund on every call to nonReentrant\r\n        // will be lower in amount. Since refunds are capped to a percetange of\r\n        // the total transaction's gas, it is best to keep them low in cases\r\n        // like this one, to increase the likelihood of the full refund coming\r\n        // into effect.\r\n        _notEntered = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_notEntered, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _notEntered = false;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _notEntered = true;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/Math.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Arrays.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to array types.\r\n */\r\nlibrary Arrays {\r\n   /**\r\n     * @dev Searches a sorted `array` and returns the first index that contains\r\n     * a value greater or equal to `element`. If no such index exists (i.e. all\r\n     * values in the array are strictly less than `element`), the array length is\r\n     * returned. Time complexity O(log n).\r\n     *\r\n     * `array` is expected to be sorted in ascending order, and to contain no\r\n     * repeated elements.\r\n     */\r\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\r\n        if (array.length == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 low = 0;\r\n        uint256 high = array.length;\r\n\r\n        while (low < high) {\r\n            uint256 mid = Math.average(low, high);\r\n\r\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\r\n            // because Math.average rounds down (it does integer division with truncation).\r\n            if (array[mid] > element) {\r\n                high = mid;\r\n            } else {\r\n                low = mid + 1;\r\n            }\r\n        }\r\n\r\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\r\n        if (low > 0 && array[low - 1] == element) {\r\n            return low - 1;\r\n        } else {\r\n            return low;\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/drafts/Counters.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title Counters\r\n * @author Matt Condon (@shrugs)\r\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\r\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\r\n *\r\n * Include with `using Counters for Counters.Counter;`\r\n * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath}\r\n * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\r\n * directly accessed.\r\n */\r\nlibrary Counters {\r\n    using SafeMath for uint256;\r\n\r\n    struct Counter {\r\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\r\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\r\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\r\n        uint256 _value; // default: 0\r\n    }\r\n\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n        return counter._value;\r\n    }\r\n\r\n    function increment(Counter storage counter) internal {\r\n        // The {SafeMath} overflow check can be skipped here, see the comment at the top\r\n        counter._value += 1;\r\n    }\r\n\r\n    function decrement(Counter storage counter) internal {\r\n        counter._value = counter._value.sub(1);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20Mintable}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/drafts/ERC20Snapshot.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 token with snapshots.\r\n * @dev Inspired by Jordi Baylina's\r\n * https://github.com/Giveth/minimd/blob/ea04d950eea153a04c51fa510b068b9dded390cb/contracts/MiniMeToken.sol[MiniMeToken]\r\n * to record historical balances.\r\n *\r\n * When a snapshot is made, the balances and total supply at the time of the snapshot are recorded for later\r\n * access.\r\n *\r\n * To make a snapshot, call the {snapshot} function, which will emit the {Snapshot} event and return a snapshot id.\r\n * To get the total supply from a snapshot, call the function {totalSupplyAt} with the snapshot id.\r\n * To get the balance of an account from a snapshot, call the {balanceOfAt} function with the snapshot id and the\r\n * account address.\r\n * @author Validity Labs AG <info@validitylabs.org>\r\n */\r\ncontract ERC20Snapshot is ERC20 {\r\n    using SafeMath for uint256;\r\n    using Arrays for uint256[];\r\n    using Counters for Counters.Counter;\r\n\r\n    // Snapshotted values have arrays of ids and the value corresponding to that id. These could be an array of a\r\n    // Snapshot struct, but that would impede usage of functions that work on an array.\r\n    struct Snapshots {\r\n        uint256[] ids;\r\n        uint256[] values;\r\n    }\r\n\r\n    mapping (address => Snapshots) private _accountBalanceSnapshots;\r\n    Snapshots private _totalSupplySnapshots;\r\n\r\n    // Snapshot ids increase monotonically, with the first value being 1. An id of 0 is invalid.\r\n    Counters.Counter private _currentSnapshotId;\r\n\r\n    event Snapshot(uint256 id);\r\n\r\n    // Creates a new snapshot id. Balances are only stored in snapshots on demand: unless a snapshot was taken, a\r\n    // balance change will not be recorded. This means the extra added cost of storing snapshotted balances is only paid\r\n    // when required, but is also flexible enough that it allows for e.g. daily snapshots.\r\n    function snapshot() public returns (uint256) {\r\n        _currentSnapshotId.increment();\r\n\r\n        uint256 currentId = _currentSnapshotId.current();\r\n        emit Snapshot(currentId);\r\n        return currentId;\r\n    }\r\n\r\n    function balanceOfAt(address account, uint256 snapshotId) public view returns (uint256) {\r\n        (bool snapshotted, uint256 value) = _valueAt(snapshotId, _accountBalanceSnapshots[account]);\r\n\r\n        return snapshotted ? value : balanceOf(account);\r\n    }\r\n\r\n    function totalSupplyAt(uint256 snapshotId) public view returns(uint256) {\r\n        (bool snapshotted, uint256 value) = _valueAt(snapshotId, _totalSupplySnapshots);\r\n\r\n        return snapshotted ? value : totalSupply();\r\n    }\r\n\r\n    // _transfer, _mint and _burn are the only functions where the balances are modified, so it is there that the\r\n    // snapshots are updated. Note that the update happens _before_ the balance change, with the pre-modified value.\r\n    // The same is true for the total supply and _mint and _burn.\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        _updateAccountSnapshot(from);\r\n        _updateAccountSnapshot(to);\r\n\r\n        super._transfer(from, to, value);\r\n    }\r\n\r\n    function _mint(address account, uint256 value) internal {\r\n        _updateAccountSnapshot(account);\r\n        _updateTotalSupplySnapshot();\r\n\r\n        super._mint(account, value);\r\n    }\r\n\r\n    function _burn(address account, uint256 value) internal {\r\n        _updateAccountSnapshot(account);\r\n        _updateTotalSupplySnapshot();\r\n\r\n        super._burn(account, value);\r\n    }\r\n\r\n    // When a valid snapshot is queried, there are three possibilities:\r\n    //  a) The queried value was not modified after the snapshot was taken. Therefore, a snapshot entry was never\r\n    //  created for this id, and all stored snapshot ids are smaller than the requested one. The value that corresponds\r\n    //  to this id is the current one.\r\n    //  b) The queried value was modified after the snapshot was taken. Therefore, there will be an entry with the\r\n    //  requested id, and its value is the one to return.\r\n    //  c) More snapshots were created after the requested one, and the queried value was later modified. There will be\r\n    //  no entry for the requested id: the value that corresponds to it is that of the smallest snapshot id that is\r\n    //  larger than the requested one.\r\n    //\r\n    // In summary, we need to find an element in an array, returning the index of the smallest value that is larger if\r\n    // it is not found, unless said value doesn't exist (e.g. when all values are smaller). Arrays.findUpperBound does\r\n    // exactly this.\r\n    function _valueAt(uint256 snapshotId, Snapshots storage snapshots)\r\n        private view returns (bool, uint256)\r\n    {\r\n        require(snapshotId > 0, \"ERC20Snapshot: id is 0\");\r\n        // solhint-disable-next-line max-line-length\r\n        require(snapshotId <= _currentSnapshotId.current(), \"ERC20Snapshot: nonexistent id\");\r\n\r\n        uint256 index = snapshots.ids.findUpperBound(snapshotId);\r\n\r\n        if (index == snapshots.ids.length) {\r\n            return (false, 0);\r\n        } else {\r\n            return (true, snapshots.values[index]);\r\n        }\r\n    }\r\n\r\n    function _updateAccountSnapshot(address account) private {\r\n        _updateSnapshot(_accountBalanceSnapshots[account], balanceOf(account));\r\n    }\r\n\r\n    function _updateTotalSupplySnapshot() private {\r\n        _updateSnapshot(_totalSupplySnapshots, totalSupply());\r\n    }\r\n\r\n    function _updateSnapshot(Snapshots storage snapshots, uint256 currentValue) private {\r\n        uint256 currentId = _currentSnapshotId.current();\r\n        if (_lastSnapshotId(snapshots.ids) < currentId) {\r\n            snapshots.ids.push(currentId);\r\n            snapshots.values.push(currentValue);\r\n        }\r\n    }\r\n\r\n    function _lastSnapshotId(uint256[] storage ids) private view returns (uint256) {\r\n        if (ids.length == 0) {\r\n            return 0;\r\n        } else {\r\n            return ids[ids.length - 1];\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\r\n * tokens and those that they have an allowance for, in a way that can be\r\n * recognized off-chain (via event analysis).\r\n */\r\ncontract ERC20Burnable is Context, ERC20 {\r\n    /**\r\n     * @dev Destroys `amount` tokens from the caller.\r\n     *\r\n     * See {ERC20-_burn}.\r\n     */\r\n    function burn(uint256 amount) public {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC20-_burnFrom}.\r\n     */\r\n    function burnFrom(address account, uint256 amount) public {\r\n        _burnFrom(account, amount);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Roles.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/roles/MinterRole.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract MinterRole is Context {\r\n    using Roles for Roles.Role;\r\n\r\n    event MinterAdded(address indexed account);\r\n    event MinterRemoved(address indexed account);\r\n\r\n    Roles.Role private _minters;\r\n\r\n    constructor () internal {\r\n        _addMinter(_msgSender());\r\n    }\r\n\r\n    modifier onlyMinter() {\r\n        require(isMinter(_msgSender()), \"MinterRole: caller does not have the Minter role\");\r\n        _;\r\n    }\r\n\r\n    function isMinter(address account) public view returns (bool) {\r\n        return _minters.has(account);\r\n    }\r\n\r\n    function addMinter(address account) public onlyMinter {\r\n        _addMinter(account);\r\n    }\r\n\r\n    function renounceMinter() public {\r\n        _removeMinter(_msgSender());\r\n    }\r\n\r\n    function _addMinter(address account) internal {\r\n        _minters.add(account);\r\n        emit MinterAdded(account);\r\n    }\r\n\r\n    function _removeMinter(address account) internal {\r\n        _minters.remove(account);\r\n        emit MinterRemoved(account);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20Mintable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Extension of {ERC20} that adds a set of accounts with the {MinterRole},\r\n * which have permission to mint (create) new tokens as they see fit.\r\n *\r\n * At construction, the deployer of the contract is the only minter.\r\n */\r\ncontract ERC20Mintable is ERC20, MinterRole {\r\n    /**\r\n     * @dev See {ERC20-_mint}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have the {MinterRole}.\r\n     */\r\n    function mint(address account, uint256 amount) public onlyMinter returns (bool) {\r\n        _mint(account, amount);\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: contracts/external/FsToken.sol\r\n\r\npragma solidity ^0.5.17;\r\n\r\n\r\n\r\n\r\n// The 'code' of FS token.\r\n// The token is non transferable.\r\n// Note: that any changes to layout of storage have to work with the proxy.\r\n// To be safe here one should only be adding to storage and needs to make sure\r\n// that none of the base classes change their storage layout.\r\ncontract FsToken is ERC20Snapshot, ERC20Mintable, ERC20Burnable {\r\n    constructor() public {}\r\n\r\n    function transferFrom(\r\n        address, /*sender*/\r\n        address, /*recipient*/\r\n        uint256 /*amount*/\r\n    ) public returns (bool) {\r\n        revert(\"FST are not transferable\");\r\n    }\r\n\r\n    function transfer(\r\n        address, /*recipient*/\r\n        uint256 /*amount*/\r\n    ) public returns (bool) {\r\n        revert(\"FST are not transferable\");\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return \"Futureswap\";\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return \"FST\";\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return 18;\r\n    }\r\n}\r\n\r\n// File: contracts/registry/IRegistry.sol\r\n\r\npragma solidity ^0.5.17;\r\n\r\ncontract IRegistry {\r\n    function getVotingAddress() public view returns (address);\r\n\r\n    function getExchangeFactoryAddress() public view returns (address);\r\n\r\n    function getWethAddress() public view returns (address);\r\n\r\n    function getMessageProcessorAddress() public view returns (address);\r\n\r\n    function getFsTokenAddress() public view returns (address);\r\n\r\n    function getFsTokenProxyAdminAddress() public view returns (address);\r\n\r\n    function getIncentivesAddress() public view returns (address);\r\n\r\n    function getWalletAddress() public view returns (address payable);\r\n\r\n    function getReplayTrackerAddress() public view returns (address);\r\n\r\n    function getLiquidityTokenFactoryAddress() public view returns (address);\r\n\r\n    function hasLiquidityTokensnapshotAccess(address sender) public view returns (bool);\r\n\r\n    function hasWalletAccess(address sender) public view returns (bool);\r\n\r\n    function removeWalletAccess(address _walletAccessor) public;\r\n\r\n    function isValidOracleAddress(address oracleAddress) public view returns (bool);\r\n\r\n    function isValidVerifierAddress(address verifierAddress) public view returns (bool);\r\n\r\n    function isValidStamperAddress(address stamperAddress) public view returns (bool);\r\n\r\n    function isExchange(address exchangeAddress) public view returns (bool);\r\n\r\n    function addExchange(address _exchange) public;\r\n\r\n    function removeExchange(address _exchange) public;\r\n\r\n    function updateVotingAddress(address _address) public;\r\n}\r\n\r\n// File: contracts/registry/IRegistryUpdateConsumer.sol\r\n\r\npragma solidity ^0.5.17;\r\n\r\n// Implemented by objects that need to know about registry updates.\r\ninterface IRegistryUpdateConsumer {\r\n    function onRegistryRefresh() external;\r\n}\r\n\r\n// File: contracts/registry/RegistryHolder.sol\r\n\r\npragma solidity ^0.5.17;\r\n\r\n\r\n\r\n// Holds a reference to the registry\r\n// Eventually Ownership will be renounced\r\ncontract RegistryHolder is Ownable {\r\n    address private registryAddress;\r\n\r\n    function getRegistryAddress() public view returns (address) {\r\n        return registryAddress;\r\n    }\r\n\r\n    // Change the address of registry, if the caller is the voting system as identified by the old\r\n    // registry.\r\n    function updateRegistry(address _newAddress) public {\r\n        require(isOwner() || isVotingSystem(), \"Only owner or voting system\");\r\n        require(_newAddress != address(0), \"Zero address\");\r\n        registryAddress = _newAddress;\r\n    }\r\n\r\n    function isVotingSystem() private view returns (bool) {\r\n        if (registryAddress == address(0)) {\r\n            return false;\r\n        }\r\n        return IRegistry(registryAddress).getVotingAddress() == msg.sender;\r\n    }\r\n}\r\n\r\n// File: contracts/registry/KnowsRegistry.sol\r\n\r\npragma solidity ^0.5.17;\r\n\r\n\r\n\r\n\r\n// Base class for objects that need to know about other objects in the system\r\n// This allows us to share modifiers and have a unified way of looking up other objects.\r\ncontract KnowsRegistry is IRegistryUpdateConsumer {\r\n    RegistryHolder private registryHolder;\r\n\r\n    modifier onlyVotingSystem() {\r\n        require(isVotingSystem(msg.sender), \"Only voting system\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyExchangeFactory() {\r\n        require(isExchangeFactory(msg.sender), \"Only exchange factory\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyExchangeFactoryOrVotingSystem() {\r\n        require(isExchangeFactory(msg.sender) || isVotingSystem(msg.sender), \"Only exchange factory or voting\");\r\n        _;\r\n    }\r\n\r\n    modifier requiresWalletAcccess() {\r\n        require(getRegistry().hasWalletAccess(msg.sender), \"requires wallet access\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyMessageProcessor() {\r\n        require(getRegistry().getMessageProcessorAddress() == msg.sender, \"only MessageProcessor\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyExchange() {\r\n        require(getRegistry().isExchange(msg.sender), \"Only exchange\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyRegistry() {\r\n        require(getRegistryAddress() == msg.sender, \"only registry\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOracle() {\r\n        require(isValidOracleAddress(msg.sender), \"only oracle\");\r\n        _;\r\n    }\r\n\r\n    modifier requiresLiquidityTokenSnapshotAccess() {\r\n        require(getRegistry().hasLiquidityTokensnapshotAccess(msg.sender), \"only incentives\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _registryHolder) public {\r\n        registryHolder = RegistryHolder(_registryHolder);\r\n    }\r\n\r\n    function getRegistryHolder() internal view returns (RegistryHolder) {\r\n        return registryHolder;\r\n    }\r\n\r\n    function getRegistry() internal view returns (IRegistry) {\r\n        return IRegistry(getRegistryAddress());\r\n    }\r\n\r\n    function getRegistryAddress() internal view returns (address) {\r\n        return registryHolder.getRegistryAddress();\r\n    }\r\n\r\n    function isRegistryHolder(address a) internal view returns (bool) {\r\n        return a == address(registryHolder);\r\n    }\r\n\r\n    function isValidOracleAddress(address oracleAddress) public view returns (bool) {\r\n        return getRegistry().isValidOracleAddress(oracleAddress);\r\n    }\r\n\r\n    function isValidVerifierAddress(address verifierAddress) public view returns (bool) {\r\n        return getRegistry().isValidVerifierAddress(verifierAddress);\r\n    }\r\n\r\n    function isValidStamperAddress(address stamperAddress) public view returns (bool) {\r\n        return getRegistry().isValidStamperAddress(stamperAddress);\r\n    }\r\n\r\n    function isVotingSystem(address a) public view returns (bool) {\r\n        return a == getRegistry().getVotingAddress();\r\n    }\r\n\r\n    function isExchangeFactory(address a) public view returns (bool) {\r\n        return a == getRegistry().getExchangeFactoryAddress();\r\n    }\r\n\r\n    function checkNotNull(address a) internal pure returns (address) {\r\n        require(a != address(0), \"address must be non zero\");\r\n        return a;\r\n    }\r\n\r\n    function checkNotNullAP(address payable a) internal pure returns (address payable) {\r\n        require(a != address(0), \"address must be non zero\");\r\n        return a;\r\n    }\r\n}\r\n\r\n// File: contracts/voting/Voting.sol\r\n\r\npragma solidity ^0.5.17;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Voting is KnowsRegistry, Ownable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public constant proposalFstStake = 100 ether;\r\n    uint256 public constant minimumVoteTime = 2 days;\r\n    uint256 public proposalCount;\r\n    uint256 public pauseTimestamp;\r\n\r\n    event ProposalCreated(uint256 indexed proposalId, string action, string title, string description);\r\n    event VotedCasted(address indexed voter, uint256 indexed proposalId, uint256 amountOfVotes, bool isYesVote);\r\n    event ProposalAccepted(uint256 indexed proposalId);\r\n    event ProposalRejected(uint256 indexed proposalId);\r\n    event ProposalCallFailed(uint256 indexed proposalId);\r\n\r\n    struct Proposal {\r\n        uint256 id;\r\n        uint256 votingEnds; // epoch time in seconds when a vote will be able to be resolved and further votes will be rejected\r\n        address to; // The address to which the result of the vote will be sent to\r\n        bool isVoteResolved;\r\n        bool isUpgradeProposal; // bool if the true the proposal is an upgrade proposal that goes to this specific address and assumes the data is a 20 byte address, if false it is a regular vote\r\n        uint256 yesVotes; // amount of yes votes\r\n        uint256 noVotes; // amount of no votes\r\n        uint256 fstSnapshotId; // snapshot of tokens when the proposal was started\r\n        address proposer; // the address of the creator of the vote\r\n        mapping(address => bool) didVote; // tracks which addresses have voted\r\n        bytes data; // byte data to use in a call (regular vote abi encoded data) - upgrade vote 20 bytes address\r\n        bool ownerApproved; // is initially used by the owner to force votes to succeed without a full vote. Ownership will be phased out\r\n    }\r\n\r\n    mapping(uint256 => Proposal) public proposals;\r\n\r\n    constructor(address _registryHolder) public KnowsRegistry(_registryHolder) {}\r\n\r\n    function createProposal(\r\n        address _to,\r\n        bytes memory _data,\r\n        string memory _action,\r\n        string memory _title,\r\n        string memory _description\r\n    ) public {\r\n        require(pauseTimestamp == 0, \"proposals are paused\");\r\n\r\n        // We make users stake FST for creating a proposal to avoid\r\n        // spammers creating proposals.\r\n        // Funds are only returned on a successful proposal.\r\n        FsToken fsToken = getFsToken();\r\n        fsToken.burnFrom(msg.sender, proposalFstStake);\r\n\r\n        bool isUpgradeProposal = _to == address(this);\r\n        if (isUpgradeProposal) {\r\n            // If this is an upgrade propsal the update address is saved\r\n            // in the data field. We ensure here that the bytes field\r\n            // has the length of a address (20 bytes).\r\n            require(_data.length == 20, \"data needs to be 20 bytes long\");\r\n        }\r\n\r\n        Proposal storage p = proposals[proposalCount];\r\n        p.id = proposalCount;\r\n        p.votingEnds = now.add(minimumVoteTime);\r\n        p.data = _data;\r\n        p.to = _to;\r\n        p.fstSnapshotId = fsToken.snapshot();\r\n        p.proposer = msg.sender;\r\n        p.isUpgradeProposal = isUpgradeProposal;\r\n\r\n        emit ProposalCreated(proposalCount, _action, _title, _description);\r\n        proposalCount++;\r\n    }\r\n\r\n    function vote(uint256 _proposalId, bool _isYesVote) public {\r\n        requireProposalExists(_proposalId);\r\n        Proposal storage p = proposals[_proposalId];\r\n        require(now <= p.votingEnds, \"vote is not open\");\r\n        require(!p.didVote[msg.sender], \"already voted\");\r\n\r\n        p.didVote[msg.sender] = true;\r\n\r\n        uint256 amountOfVotes = getFsToken().balanceOfAt(msg.sender, p.fstSnapshotId);\r\n\r\n        if (_isYesVote) {\r\n            p.yesVotes = p.yesVotes.add(amountOfVotes);\r\n        } else {\r\n            p.noVotes = p.noVotes.add(amountOfVotes);\r\n        }\r\n        emit VotedCasted(msg.sender, _proposalId, amountOfVotes, _isYesVote);\r\n    }\r\n\r\n    function pause(uint256 _proposalId) public {\r\n        requireProposalExists(_proposalId);\r\n        Proposal storage p = proposals[_proposalId];\r\n        requireProposalCanBeResolved(p);\r\n        require(p.isUpgradeProposal);\r\n\r\n        require(pauseTimestamp == 0, \"system already paused\");\r\n        pauseTimestamp = now;\r\n    }\r\n\r\n    function resolve(uint256 _proposalId) public nonReentrant {\r\n        // Gas estimation is broken in ethereum for contract\r\n        // factories. This has been reported a long time ago but never\r\n        // got resolved:\r\n        // https://github.com/ethereum/go-ethereum/issues/1590\r\n        //\r\n        // Requiring a high gas amount to start here makes this work for now\r\n        // Note: this does not mean that all the gas will actually be used.\r\n        // If the particular vote requires less gas users will be refunded.\r\n        require(gasleft() >= 8000000, \"Please use 8M+ gas to resolve\");\r\n\r\n        requireProposalExists(_proposalId);\r\n        Proposal storage p = proposals[_proposalId];\r\n        requireProposalCanBeResolved(p);\r\n\r\n        if (p.isUpgradeProposal && !p.ownerApproved) {\r\n            require(pauseTimestamp != 0, \"pause first\");\r\n            require(now >= pauseTimestamp.add(minimumVoteTime), \"pauseVotes\");\r\n        }\r\n\r\n        p.isVoteResolved = true;\r\n\r\n        bool votePassed = p.yesVotes > p.noVotes || p.ownerApproved;\r\n\r\n        if (!votePassed) {\r\n            emit ProposalRejected(_proposalId);\r\n            return;\r\n        }\r\n\r\n        bool successful = p.isUpgradeProposal ? upgradeVoteExecution(p) : regularVoteExecution(p);\r\n        if (!successful) {\r\n            emit ProposalCallFailed(_proposalId);\r\n            return;\r\n        }\r\n\r\n        emit ProposalAccepted(_proposalId);\r\n    }\r\n\r\n    function regularVoteExecution(Proposal storage p) private returns (bool) {\r\n        (bool success, ) = p.to.call(p.data);\r\n        if (success) {\r\n            // Only mint initial tokens back if the vote passed\r\n            FsToken fsToken = getFsToken();\r\n            fsToken.mint(p.proposer, proposalFstStake);\r\n        }\r\n        return success;\r\n    }\r\n\r\n    function upgradeVoteExecution(Proposal storage p) private returns (bool) {\r\n        address newAddress = bytesToAddress(p.data);\r\n        // We update all other contracts with the new address\r\n        // If any of these calls should fail we let the entire transaction fail.\r\n        // This would allow anybody to call resolve again and retry since the\r\n        // vote would have not gotten marked as resolved.\r\n        // However if any of the steps here fail the system is in a problematic state.\r\n        // All of these contracts have been written by us and should not fail.\r\n        getFsToken().mint(p.proposer, proposalFstStake);\r\n        doUpgrade(newAddress);\r\n\r\n        return true;\r\n    }\r\n\r\n    function didAddressVote(uint256 _proposalId, address _voter) public view returns (bool) {\r\n        return proposals[_proposalId].didVote[_voter];\r\n    }\r\n\r\n    // Allows owners to approve a vote, ownership will be phased out.\r\n    function approve(uint256 _proposalId) public onlyOwner {\r\n        proposals[_proposalId].ownerApproved = true;\r\n    }\r\n\r\n    // Allows owners to veto a vote, ownership will be phased out.\r\n    function veto(uint256 _proposalId) public onlyOwner {\r\n        proposals[_proposalId].isVoteResolved = true;\r\n    }\r\n\r\n    // Allows owners to upgrade the contract without a vote, ownership will be phased out.\r\n    function ownableUpgrade(address _newAddress) public onlyOwner {\r\n        doUpgrade(_newAddress);\r\n    }\r\n\r\n    function doUpgrade(address newAddress) private {\r\n        Ownable(getRegistry().getFsTokenProxyAdminAddress()).transferOwnership(newAddress);\r\n        FsToken fsToken = getFsToken();\r\n        fsToken.addMinter(newAddress);\r\n        fsToken.renounceMinter();\r\n        getRegistry().updateVotingAddress(newAddress);\r\n    }\r\n\r\n    function requireProposalExists(uint256 proposalId) private view {\r\n        require(proposalId < proposalCount, \"Nonexisting proposal\");\r\n    }\r\n\r\n    function requireProposalCanBeResolved(Proposal memory p) private view {\r\n        require(now > p.votingEnds || p.ownerApproved, \"vote is still open\");\r\n        require(!p.isVoteResolved, \"already resolved\");\r\n\r\n        FsToken fsToken = getFsToken();\r\n        uint256 totalFstSupply = fsToken.totalSupplyAt(p.fstSnapshotId);\r\n        uint256 totalVotes = p.yesVotes.add(p.noVotes);\r\n        bool aboveThreshold = (totalFstSupply / 10) <= totalVotes;\r\n        require(aboveThreshold || p.ownerApproved, \"The voting threshold has not been met\");\r\n    }\r\n\r\n    function bytesToAddress(bytes memory bys) private pure returns (address addr) {\r\n        require(bys.length == 20, \"data needs to be 20 bytes long\");\r\n        // A quick way to load 2 bytes into the address variable\r\n        assembly {\r\n            addr := mload(add(bys, 20))\r\n        }\r\n    }\r\n\r\n    function getFsToken() private view returns (FsToken) {\r\n        return FsToken(getRegistry().getFsTokenAddress());\r\n    }\r\n\r\n    function onRegistryRefresh() public onlyRegistry {\r\n        // No op since we always read all address directly from the registryHolder pointer\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registryHolder\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"ProposalAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"ProposalCallFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"ProposalRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOfVotes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isYesVote\",\"type\":\"bool\"}],\"name\":\"VotedCasted\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"_action\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"}],\"name\":\"createProposal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"didAddressVote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"isExchangeFactory\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"}],\"name\":\"isValidOracleAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"stamperAddress\",\"type\":\"address\"}],\"name\":\"isValidStamperAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"verifierAddress\",\"type\":\"address\"}],\"name\":\"isValidVerifierAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"isVotingSystem\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumVoteTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"onRegistryRefresh\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"ownableUpgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"}],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pauseTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proposalCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proposalFstStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingEnds\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isVoteResolved\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isUpgradeProposal\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"yesVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"noVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fstSnapshotId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"ownerApproved\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"}],\"name\":\"resolve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"}],\"name\":\"veto\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isYesVote\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Voting","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"100","ConstructorArguments":"000000000000000000000000d9cf4ca71d2ed15040cc702c2b146bfb848b7a1b","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"bzzr://21000abbba9b436ddfb34ac825f3c493c11f5f00d4daf06ee7d518d07af822b3"}]}