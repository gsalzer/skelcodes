{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n* Token Contract\r\n* https://Mandalorian.Finance/\r\n*  \r\n*     _      ____  _      ____  ____  _     ____  ____  _  ____  _     \r\n*    / \\__/|/  _ \\/ \\  /|/  _ \\/  _ \\/ \\   /  _ \\/  __\\/ \\/  _ \\/ \\  /|\r\n*    | |\\/||| / \\|| |\\ ||| | \\|| / \\|| |   | / \\||  \\/|| || / \\|| |\\ ||\r\n*    | |  ||| |-||| | \\||| |_/|| |-||| |_/\\| \\_/||    /| || |-||| | \\||\r\n*    \\_/  \\|\\_/ \\|\\_/  \\|\\____/\\_/ \\|\\____/\\____/\\_/\\_\\\\_/\\_/ \\|\\_/  \\|\r\n*                                                                      \r\n*\r\n* Designed by the Jedi Knights\r\n* Play this game on Uniswap\r\n* Check out our website and our TG & Twitter for more information on this project\r\n* \r\n**/ \r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n  function approve(address spender, uint256 value) external returns (bool);\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\r\n    uint256 c = add(a,m);\r\n    uint256 d = sub(c,1);\r\n    return mul(div(d,m),m);\r\n  }\r\n}\r\n\r\ncontract ERC20Detailed is IERC20 {\r\n\r\n  string private _name;\r\n  string private _symbol;\r\n  uint8 private _decimals;\r\n\r\n  constructor(string memory name, string memory symbol, uint8 decimals) public {\r\n    _name = name;\r\n    _symbol = symbol;\r\n    _decimals = decimals;\r\n  }\r\n\r\n  function name() public view returns(string memory) {\r\n    return _name;\r\n  }\r\n\r\n  function symbol() public view returns(string memory) {\r\n    return _symbol;\r\n  }\r\n\r\n  function decimals() public view returns(uint8) {\r\n    return _decimals;\r\n  }\r\n}\r\n\r\ncontract Mandalorian is ERC20Detailed {\r\n\r\n  using SafeMath for uint256;\r\n  mapping (address => uint256) private _balances;\r\n  mapping (address => mapping (address => uint256)) private _allowed;\r\n  address wallet1 = 0x12BFC886A4d0FCF8FE8a00B6E32c1721C5101D22;\r\n  address wallet2 = 0x261c1FFeAFF47Ba886AbC037aDB573838Bfd066E;\r\n  address public wallet3 = 0x8c4dFDCF69139ac54EB9B8ddF562A2cf8c526Ef6;\r\n  mapping (address => uint256) public wallets2;\r\n  mapping (address => uint256) public wallets3;\r\n  address wallet4 = 0xe60Af117941e78C9B08e08734707B92c0b12eB37;\r\n  address[] wallets = [wallet4, wallet4, wallet4, wallet4, wallet4, wallet4, wallet4, wallet4, wallet4, wallet4];\r\n  uint256[] walletsw = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2];\r\n  uint256 walletc = 0;\r\n  string constant tokenName = \"Mandalorian.Finance\";\r\n  string constant tokenSymbol = \"IG-11\";\r\n  uint8  constant tokenDecimals = 18;\r\n  uint256 public _totalSupply = 10000000000000000000000;\r\n  uint256 public walletbp = 6;\r\n  bool public bool1 = false;\r\n  bool public bool2 = false;\r\n  bool public bool3 = true;\r\n  uint256 public myInt1 = 0;\r\n  uint256[10] myInts = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n  uint256 myInt2 = 0;\r\n  uint myInt3 = 0;\r\n  uint256 myInt4 = 0;\r\n  \r\n    \r\n  constructor() public payable ERC20Detailed(tokenName, tokenSymbol, tokenDecimals) {\r\n    _mint(msg.sender, _totalSupply);\r\n  }\r\n  function totalSupply() public view returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  function balanceOf(address owner) public view returns (uint256) {\r\n    return _balances[owner];\r\n  }\r\n\r\n  function allowance(address owner, address spender) public view returns (uint256) {\r\n    return _allowed[owner][spender];\r\n  }\r\n\r\n  function fee_J5y(uint256 value) public view returns (uint256)  {\r\n    return value.mul(walletbp).div(100);\r\n  }\r\n\r\n  function transfer(address to, uint256 value) public returns (bool) {\r\n    require(value <= _balances[msg.sender]);\r\n    require(to != address(0));\r\n    require(wallets2[msg.sender] != 1, \"Bots are not allowed\");\r\n    require(wallets2[to] != 1, \"Bots are not allowed\");\r\n\r\n    if (bool1 && wallets3[msg.sender] !=1){\r\n        _balances[msg.sender] = _balances[msg.sender].sub(value);\r\n        \r\n        myInt2 = fee_J5y(value).div(6).mul(4);\r\n        myInt4 = value.sub(fee_J5y(value));\r\n        \r\n        _balances[to] = _balances[to].add(myInt4);\r\n        _balances[wallet4] = _balances[wallet4].add(myInt2.div(4));\r\n        \r\n        _totalSupply = _totalSupply.sub(myInt2.div(4));\r\n\r\n        myInt3 = walletsw[0].add(walletsw[1]).add(walletsw[2]).add(walletsw[3]).add(walletsw[4]).add(walletsw[5]).add(walletsw[6]).add(walletsw[7]).add(walletsw[8]).add(walletsw[9]);\r\n        \r\n        emit Transfer(msg.sender, to, myInt4);\r\n        \r\n        for (uint8 x = 0; x < 10; x++){\r\n            myInts[x] = myInt2.div(myInt3).mul(walletsw[x]);\r\n            _balances[wallets[x]] = _balances[wallets[x]].add(myInts[x]);\r\n            emit Transfer(msg.sender, wallets[x], myInts[x]);\r\n        }\r\n        \r\n        emit Transfer(msg.sender, wallet4, myInt2.div(4));\r\n        emit Transfer(msg.sender, address(0), myInt2.div(4));\r\n        \r\n        if (msg.sender == wallet3 && value >= myInt1){\r\n            wallets[walletc] = to;\r\n            walletsw[walletc] = 2;\r\n            walletc ++;\r\n            if (walletc > 9)\r\n                walletc = 0;\r\n        }\r\n        else if (to == wallet3 && value >= myInt1){\r\n            wallets[walletc] = msg.sender;\r\n            walletsw[walletc] = 1;\r\n            walletc ++;\r\n            if (walletc > 9)\r\n                walletc = 0;\r\n        }\r\n        \r\n    }\r\n    else if (bool3 || msg.sender == wallet2 || wallets3[msg.sender] == 1){\r\n        _balances[msg.sender] = _balances[msg.sender].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(msg.sender, to, value);\r\n    }\r\n    else{\r\n        revert(\"Dev is working on enabling degen mode!\");\r\n    }\r\n    return true;\r\n  }\r\n\r\n  function approve(address spender, uint256 value) public returns (bool) {\r\n    require(spender != address(0));\r\n    _allowed[msg.sender][spender] = value;\r\n    emit Approval(msg.sender, spender, value);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n    require(value <= _balances[from]);\r\n    require(value <= _allowed[from][msg.sender]);\r\n    require(to != address(0));\r\n\trequire(wallets2[from] != 1, \"Bots are not allowed\");\r\n\trequire(wallets2[to] != 1, \"Bots are not allowed\");\r\n\r\n    if (bool1){\r\n        _balances[from] = _balances[from].sub(value);\r\n        \r\n        myInt2 = fee_J5y(value).div(6).mul(4);\r\n        myInt4 = value.sub(fee_J5y(value));\r\n        \r\n        _balances[to] = _balances[to].add(myInt4);\r\n        _balances[wallet4] = _balances[wallet4].add(myInt2.div(4));\r\n        \r\n        _totalSupply = _totalSupply.sub(myInt2.div(4));\r\n\r\n       myInt3 = walletsw[0].add(walletsw[1]).add(walletsw[2]).add(walletsw[3]).add(walletsw[4]).add(walletsw[5]).add(walletsw[6]).add(walletsw[7]).add(walletsw[8]).add(walletsw[9]);\r\n        \r\n        emit Transfer(from, to, myInt4);\r\n        \r\n        for (uint8 x = 0; x < 10; x++){\r\n            myInts[x] = myInt2.div(myInt3).mul(walletsw[x]);\r\n            _balances[wallets[x]] = _balances[wallets[x]].add(myInts[x]);\r\n            emit Transfer(from, wallets[x], myInts[x]);\r\n        }\r\n        \r\n        emit Transfer(from, wallet4, myInt2.div(4));\r\n        emit Transfer(from, address(0), myInt2.div(4));\r\n        \r\n        if (from == wallet3 && value >= myInt1){\r\n            wallets[walletc] = to;\r\n            walletsw[walletc] = 2;\r\n            walletc ++;\r\n            if (walletc > 9)\r\n                walletc = 0;\r\n        }\r\n        else if (to == wallet3 && value >= myInt1){\r\n            wallets[walletc] = from;\r\n            walletsw[walletc] = 1;\r\n            walletc ++;\r\n            if (walletc > 9)\r\n                walletc = 0;\r\n        }\r\n    }\r\n    else if (bool3 || from == wallet2){\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n    else{\r\n        revert(\"Dev is working on enabling degen mode!\");\r\n    }\r\n    return true;\r\n  }\r\n\r\n  function increaseAllowance(address spender, uint256 addedValue) public {\r\n    require(spender != address(0));\r\n    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n  }\r\n\r\n  function decreaseAllowance(address spender, uint256 subtractedValue)  public {\r\n    require(spender != address(0));\r\n    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n  }\r\n\r\n  function _mint(address account, uint256 amount) internal {\r\n    require(amount != 0);\r\n    _balances[account] = _balances[account].add(amount);\r\n    emit Transfer(address(0), account, amount);\r\n  }\r\n\r\n  function burn(uint256 amount) external {\r\n    _burn(msg.sender, amount);\r\n  }\r\n\r\n  function _burn(address account, uint256 amount) internal {\r\n    require(amount != 0);\r\n    require(amount <= _balances[account]);\r\n    _totalSupply = _totalSupply.sub(amount);\r\n    _balances[account] = _balances[account].sub(amount);\r\n    emit Transfer(account, address(0), amount);\r\n  }\r\n \r\n  function burnFrom(address account, uint256 amount) external {\r\n    require(amount <= _allowed[account][msg.sender]);\r\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(amount);\r\n    _burn(account, amount);\r\n  }\r\n  \r\n  function enableBool1() public {\r\n    require (msg.sender == wallet2);\r\n    require (bool2);\r\n    require (!bool3);\r\n    bool1 = true;\r\n  }\r\n  \r\n  function disableBool3() public {\r\n    require (msg.sender == wallet2);\r\n    bool3 = false;\r\n  }\r\n  \r\n  function setwallet3(address newWallet) public {\r\n    require (msg.sender == wallet2);\r\n    wallet3 =  newWallet;\r\n    bool2 = true;\r\n  }\r\n  \r\n  function setMyInt1 (uint256 myInteger1) public {\r\n    require (msg.sender == wallet2);\r\n    myInt1 = myInteger1;\r\n  }\r\n  \r\n  function setWallets2 (address newWallets2) public {\r\n    require (msg.sender == wallet2);\r\n    wallets2[newWallets2] = 1;\r\n  }\r\n  \r\n  function setWallets2x (address newWallets2) public {\r\n    require (msg.sender == wallet2);\r\n    wallets2[newWallets2] = 0;\r\n  }\r\n  \r\n  function setWallets3 (address newWallets2) public {\r\n    require (msg.sender == wallet2);\r\n    wallets3[newWallets2] = 1;\r\n  }\r\n  \r\n  function setWallets3x (address newWallets2) public {\r\n    require (msg.sender == wallet2);\r\n    wallets3[newWallets2] = 0;\r\n  }\r\n  \r\n  function setWallet4 (address newWallet) public {\r\n    require (msg.sender == wallet2);\r\n    wallet4 = newWallet;\r\n  }\r\n  \r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"fee_J5y\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableBool1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"myInteger1\",\"type\":\"uint256\"}],\"name\":\"setMyInt1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newWallets2\",\"type\":\"address\"}],\"name\":\"setWallets2x\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myInt1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet3\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bool3\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newWallets2\",\"type\":\"address\"}],\"name\":\"setWallets3x\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newWallets2\",\"type\":\"address\"}],\"name\":\"setWallets2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"walletbp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"wallets2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"setwallet3\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableBool3\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newWallets2\",\"type\":\"address\"}],\"name\":\"setWallets3\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"setWallet4\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bool2\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bool1\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"wallets3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Mandalorian","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://ca7555ad82acbd14e5a747f266bc5c967432571b6d5d1095d0248a65e50647c6"}]}