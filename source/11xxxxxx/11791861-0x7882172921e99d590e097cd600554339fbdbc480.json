{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/harvest-core/community/universal-liquidator/UniversalLiquidatorRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"ozV3/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IUniversalLiquidatorRegistry.sol\\\";\\n\\ncontract UniversalLiquidatorRegistry is Ownable, IUniversalLiquidatorRegistry {\\n  address constant public farm = address(0xa0246c9032bC3A600820415aE600c6388619A14D);\\n\\n  address constant public usdc = address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\\n  address constant public usdt = address(0xdAC17F958D2ee523a2206206994597C13D831ec7);\\n  address constant public dai = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);\\n\\n  address constant public wbtc = address(0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599);\\n  address constant public renBTC = address(0xEB4C2781e4ebA804CE9a9803C67d0893436bB27D);\\n  address constant public sushi = address(0x6B3595068778DD592e39A122f4f5a5cF09C90fE2);\\n  address constant public dego = address(0x88EF27e69108B2633F8E1C184CC37940A075cC02);\\n  address constant public uni = address(0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984);\\n  address constant public comp = address(0xc00e94Cb662C3520282E6f5717214004A7f26888);\\n  address constant public crv = address(0xD533a949740bb3306d119CC777fa900bA034cd52);\\n\\n  address constant public idx = address(0x0954906da0Bf32d5479e25f46056d22f08464cab);\\n  address constant public idle = address(0x875773784Af8135eA0ef43b5a374AaD105c5D39e);\\n\\n  address constant public ycrv = address(0xdF5e0e81Dff6FAF3A7e52BA697820c5e32D806A8);\\n\\n  address constant public weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\n  address constant public mis = address(0x4b4D2e899658FB59b1D518b68fe836B100ee8958);\\n  address constant public bsg = address(0xB34Ab2f65c6e4F764fFe740ab83F982021Faed6d);\\n  address constant public bas = address(0xa7ED29B253D8B4E3109ce07c80fc570f81B63696);\\n  address constant public bsgs = address(0xA9d232cC381715aE791417B624D7C4509D2c28DB);\\n  address constant public kbtc = address(0xE6C3502997f97F9BDe34CB165fBce191065E068f);\\n\\n  address public override universalLiquidator;\\n\\n  function setUniversalLiquidator(address _ul) public override onlyOwner {\\n    require(_ul != address(0), \\\"new universal liquidator is nill\\\");\\n    universalLiquidator = _ul;\\n  }\\n\\n  // path[UNISWAP][tokenA][tokenB]\\n  mapping (bytes32 => mapping(address => mapping(address => address[])) ) public dexPaths;\\n\\n  constructor() public {\\n    bytes32 uniDex = bytes32(uint256(keccak256(\\\"uni\\\")));\\n    bytes32 sushiDex = bytes32(uint256(keccak256(\\\"sushi\\\")));\\n\\n    // preset for the already in use crops\\n    dexPaths[uniDex][weth][farm] = [weth, farm];\\n    dexPaths[uniDex][dai][farm] = [dai, weth, farm];\\n    dexPaths[uniDex][usdc][farm] = [usdc, farm];\\n    dexPaths[uniDex][usdt][farm] = [usdt, weth, farm];\\n\\n    dexPaths[uniDex][wbtc][farm] = [wbtc, weth, farm];\\n    dexPaths[uniDex][renBTC][farm] = [renBTC, weth, farm];\\n\\n    // use Sushiswap for SUSHI, convert into WETH\\n    dexPaths[sushiDex][sushi][weth] = [sushi, weth];\\n\\n    dexPaths[uniDex][dego][farm] = [dego, weth, farm];\\n    dexPaths[uniDex][crv][farm] = [crv, weth, farm];\\n    dexPaths[uniDex][comp][farm] = [comp, weth, farm];\\n\\n    dexPaths[uniDex][idx][farm] = [idx, weth, farm];\\n    dexPaths[uniDex][idle][farm] = [idle, weth, farm];\\n\\n    // use Sushiswap for MIS -> USDT\\n    dexPaths[sushiDex][mis][usdt] = [mis, usdt];\\n    dexPaths[uniDex][bsg][farm] = [bsg, dai, weth, farm];\\n    dexPaths[uniDex][bas][farm] = [bas, dai, weth, farm];\\n    dexPaths[uniDex][bsgs][farm] = [bsgs, dai, weth, farm];\\n    dexPaths[uniDex][kbtc][farm] = [kbtc, wbtc, weth, farm];\\n  }\\n\\n  function getPath(bytes32 dex, address inputToken, address outputToken) public override view returns(address[] memory) {\\n    require(dexPaths[dex][inputToken][outputToken].length > 1, \\\"Liquidation path is not set\\\");\\n    return dexPaths[dex][inputToken][outputToken];\\n  }\\n\\n  function setPath(bytes32 dex, address inputToken, address outputToken, address[] memory path) external override onlyOwner {\\n    // path could also be an empty array\\n\\n    require(inputToken == path[0],\\n      \\\"The first token of the Uniswap route must be the from token\\\");\\n    require(outputToken == path[path.length - 1],\\n      \\\"The last token of the Uniswap route must be the to token\\\");\\n\\n    // path can also be empty\\n    dexPaths[dex][inputToken][outputToken] = path;\\n  }\\n}\\n\"\r\n    },\r\n    \"ozV3/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/harvest-core/community/universal-liquidator/interfaces/IUniversalLiquidatorRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\ninterface IUniversalLiquidatorRegistry {\\n\\n  function universalLiquidator() external view returns(address);\\n\\n  function setUniversalLiquidator(address _ul) external;\\n\\n  function getPath(\\n    bytes32 dex,\\n    address inputToken,\\n    address outputToken\\n  ) external view returns(address[] memory);\\n\\n  function setPath(\\n    bytes32 dex,\\n    address inputToken,\\n    address outputToken,\\n    address[] memory path\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"ozV3/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bas\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bsg\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bsgs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dego\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dexPaths\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farm\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dex\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"}],\"name\":\"getPath\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"idle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"idx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kbtc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mis\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renBTC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dex\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"setPath\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ul\",\"type\":\"address\"}],\"name\":\"setUniversalLiquidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushi\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uni\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"universalLiquidator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wbtc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ycrv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"UniversalLiquidatorRegistry","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}