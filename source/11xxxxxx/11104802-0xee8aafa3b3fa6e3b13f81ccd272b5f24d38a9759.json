{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.6.10;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's uintXX casting operators with added overflow\r\n * checks.\r\n *\r\n * Downcasting from uint256 in Solidity does not revert on overflow. This can\r\n * easily result in undesired exploitation or bugs, since developers usually\r\n * assume that overflows raise errors. `SafeCast` restores this intuition by\r\n * reverting the transaction when such an operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n *\r\n * Can be combined with {SafeMath} to extend it to smaller types, by performing\r\n * all math on `uint256` and then downcasting.\r\n */\r\nlibrary SafeCast {\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint128 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint128).\r\n     *\r\n     * Counterpart to Solidity's `uint128` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 128 bits\r\n     */\r\n    function toUint128(uint256 value) internal pure returns (uint128) {\r\n        require(value < 2**128, \"SafeCast: value doesn\\'t fit in 128 bits\");\r\n        return uint128(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint64 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint64).\r\n     *\r\n     * Counterpart to Solidity's `uint64` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 64 bits\r\n     */\r\n    function toUint64(uint256 value) internal pure returns (uint64) {\r\n        require(value < 2**64, \"SafeCast: value doesn\\'t fit in 64 bits\");\r\n        return uint64(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint32 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint32).\r\n     *\r\n     * Counterpart to Solidity's `uint32` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 32 bits\r\n     */\r\n    function toUint32(uint256 value) internal pure returns (uint32) {\r\n        require(value < 2**32, \"SafeCast: value doesn\\'t fit in 32 bits\");\r\n        return uint32(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint16 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint16).\r\n     *\r\n     * Counterpart to Solidity's `uint16` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 16 bits\r\n     */\r\n    function toUint16(uint256 value) internal pure returns (uint16) {\r\n        require(value < 2**16, \"SafeCast: value doesn\\'t fit in 16 bits\");\r\n        return uint16(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint8 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint8).\r\n     *\r\n     * Counterpart to Solidity's `uint8` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 8 bits.\r\n     */\r\n    function toUint8(uint256 value) internal pure returns (uint8) {\r\n        require(value < 2**8, \"SafeCast: value doesn\\'t fit in 8 bits\");\r\n        return uint8(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a signed int256 into an unsigned uint256.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must be greater than or equal to 0.\r\n     */\r\n    function toUint256(int256 value) internal pure returns (uint256) {\r\n        require(value >= 0, \"SafeCast: value must be positive\");\r\n        return uint256(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an unsigned uint256 into a signed int256.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must be less than or equal to maxInt256.\r\n     */\r\n    function toInt256(uint256 value) internal pure returns (int256) {\r\n        require(value < 2**255, \"SafeCast: value doesn't fit in an int256\");\r\n        return int256(value);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @title SignedSafeMath\r\n * @dev Signed math operations with safety checks that revert on error.\r\n */\r\nlibrary SignedSafeMath {\r\n    int256 constant private _INT256_MIN = -2**255;\r\n\r\n    /**\r\n     * @dev Multiplies two signed integers, reverts on overflow.\r\n     */\r\n    function mul(int256 a, int256 b) internal pure returns (int256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        require(!(a == -1 && b == _INT256_MIN), \"SignedSafeMath: multiplication overflow\");\r\n\r\n        int256 c = a * b;\r\n        require(c / a == b, \"SignedSafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two signed integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(int256 a, int256 b) internal pure returns (int256) {\r\n        require(b != 0, \"SignedSafeMath: division by zero\");\r\n        require(!(b == -1 && a == _INT256_MIN), \"SignedSafeMath: division overflow\");\r\n\r\n        int256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two signed integers, reverts on overflow.\r\n     */\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a - b;\r\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \"SignedSafeMath: subtraction overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two signed integers, reverts on overflow.\r\n     */\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a + b;\r\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \"SignedSafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\nlibrary LibConstant {\r\n    int256 internal constant SIGNED_ONE = 10 ** 18;\r\n    uint256 internal constant UNSIGNED_ONE = 10 ** 18;\r\n\r\n    uint256 internal constant MAX_COLLATERAL_DECIMALS = 18;\r\n\r\n    uint256 internal constant SECONDS_PER_YEAR = 365 * 86400;\r\n    uint256 internal constant RATE_UPPERBOUND = 10 ** 18 * 1;\r\n\r\n    uint256 internal constant MAX_LEVERAGE = 10 ** 18 * 10; // 10x\r\n    uint256 internal constant MAX_DRAWDOWN = 10 ** 16 * 50; // 50%\r\n}\r\n\r\nlibrary LibMathEx {\r\n\r\n    using SafeMath for uint256;\r\n    using SignedSafeMath for int256;\r\n\r\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = x.mul(y).add(LibConstant.UNSIGNED_ONE / 2) / LibConstant.UNSIGNED_ONE;\r\n    }\r\n\r\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = x.mul(LibConstant.UNSIGNED_ONE).add(y / 2).div(y);\r\n    }\r\n\r\n    function wfrac(uint256 x, uint256 y, uint256 z) internal pure returns (uint256 r) {\r\n        r = x.mul(y).div(z);\r\n    }\r\n\r\n    function wmul(int256 x, int256 y) internal pure returns (int256 z) {\r\n        z = roundHalfUp(x.mul(y), LibConstant.SIGNED_ONE) / LibConstant.SIGNED_ONE;\r\n    }\r\n\r\n    function wdiv(int256 x, int256 y) internal pure returns (int256 z) {\r\n        if (y < 0) {\r\n            y = neg(y);\r\n            x = neg(x);\r\n        }\r\n        z = roundHalfUp(x.mul(LibConstant.SIGNED_ONE), y).div(y);\r\n    }\r\n\r\n    function wfrac(int256 x, int256 y, int256 z) internal pure returns (int256 r) {\r\n        int256 t = x.mul(y);\r\n        if (z < 0) {\r\n            z = neg(z);\r\n            t = neg(t);\r\n        }\r\n        r = roundHalfUp(t, z).div(z);\r\n    }\r\n\r\n    function abs(int256 x) internal pure returns (int256) {\r\n        return x >= 0? x: neg(x);\r\n    }\r\n\r\n    function neg(int256 a) internal pure returns (int256) {\r\n        return SignedSafeMath.sub(int256(0), a);\r\n    }\r\n\r\n    // ROUND_HALF_UP rule helper. You have to call roundHalfUp(x, y) / y to finish the rounding operation\r\n    // 0.5 ≈ 1, 0.4 ≈ 0, -0.5 ≈ -1, -0.4 ≈ 0\r\n    function roundHalfUp(int256 x, int256 y) internal pure returns (int256) {\r\n        require(y > 0, \"roundHalfUp only supports y > 0\");\r\n        if (x >= 0) {\r\n            return x.add(y / 2);\r\n        }\r\n        return x.sub(y / 2);\r\n    }\r\n}\r\n\r\nlibrary LibTypes {\r\n    enum Side {FLAT, SHORT, LONG}\r\n\r\n    enum Status {NORMAL, EMERGENCY, SETTLED}\r\n\r\n    function opposite(Side side) internal pure returns (Side) {\r\n        if (side == Side.LONG) {\r\n            return Side.SHORT;\r\n        } else if (side == Side.SHORT) {\r\n            return Side.LONG;\r\n        }\r\n        return side;\r\n    }\r\n\r\n    struct MarginAccount {\r\n        Side side;\r\n        uint256 size;\r\n        uint256 entryValue;\r\n        int256 entrySocialLoss;\r\n        int256 entryFundingLoss;\r\n        int256 cashBalance;\r\n    }\r\n\r\n    struct PerpGovernanceConfig {\r\n        uint256 initialMarginRate;\r\n        uint256 maintenanceMarginRate;\r\n        uint256 liquidationPenaltyRate;\r\n        uint256 penaltyFundRate;\r\n        int256 takerDevFeeRate;\r\n        int256 makerDevFeeRate;\r\n        uint256 lotSize;\r\n        uint256 tradingLotSize;\r\n    }\r\n}\r\n\r\ninterface IPerpetual {\r\n\r\n    function amm() external view returns (address);\r\n\r\n    function getMarginAccount(address trader) external view returns (LibTypes.MarginAccount memory);\r\n\r\n    function getGovernance() external view returns (LibTypes.PerpGovernanceConfig memory);\r\n\r\n    function status() external view returns (LibTypes.Status);\r\n\r\n    function paused() external view returns (bool);\r\n\r\n    function withdrawDisabled() external view returns (bool);\r\n\r\n    function globalConfig() external view returns (address);\r\n\r\n    function collateral() external view returns (address);\r\n\r\n    function markPrice() external returns (uint256);\r\n\r\n    function marginBalance(address trader) external returns (int256);\r\n\r\n    function availableMargin(address trader) external returns (int256);\r\n\r\n    function positionMargin(address trader) external view returns (uint256);\r\n\r\n    function pnl(address trader) external returns (int256);\r\n\r\n    function isSafe(address trader) external returns (bool);\r\n\r\n    function isSafeWithPrice(address trader, uint256 currentMarkPrice) external returns (bool);\r\n\r\n    function isIMSafe(address trader) external returns (bool);\r\n\r\n    function isIMSafeWithPrice(address trader, uint256 currentMarkPrice) external returns (bool);\r\n\r\n    function tradePosition(\r\n        address taker,\r\n        address maker,\r\n        LibTypes.Side side,\r\n        uint256 price,\r\n        uint256 amount\r\n    ) external returns (uint256, uint256);\r\n\r\n    function transferCashBalance(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    function deposit(uint256 amount) external payable;\r\n\r\n    function withdraw(uint256 amount) external;\r\n\r\n    function settle() external;\r\n\r\n    function depositFor(address trader, uint256 amount) external payable;\r\n\r\n    function withdrawFor(address payable trader, uint256 amount) external;\r\n\r\n    function isValidLotSize(uint256 amount) external view returns (bool);\r\n\r\n    function isValidTradingLotSize(uint256 amount) external view returns (bool);\r\n}\r\n\r\nlibrary LibTargetCalculator {\r\n\r\n    using SafeCast for uint256;\r\n    using SafeMath for uint256;\r\n    using LibMathEx for int256;\r\n    using SafeCast for int256;\r\n    using SignedSafeMath for int256;\r\n\r\n    function signedSize(IPerpetual perpetual)\r\n        internal\r\n        view\r\n        returns (int256)\r\n    {\r\n        LibTypes.MarginAccount memory marginAccount = perpetual.getMarginAccount(address(this));\r\n        int256 size = marginAccount.size.toInt256();\r\n        return marginAccount.side == LibTypes.Side.SHORT? size.neg(): size;\r\n    }\r\n\r\n    /**\r\n     * @notice  Get amount / side to rebalance.\r\n     *          To compact with _tradePosition, side is reversed.\r\n     *          delta is, eg:\r\n     *           - expected = 1,  current = 1  -->  no adjust\r\n     *           - expected = 2,  current = 1  -->  2 -  1 =  1,   LONG for 1\r\n     *           - expected = 0,  current = 1  -->  0 -  1 = -1,   SHORT for 1\r\n     *           - expected = 0,  current = -1  -->  0 -  -1 = 1,   LONG for 1\r\n     *           - expected = -1, current = 1  --> -1 -  1 = -2,   SHORT for 2\r\n     *           - expected = 2,  current = -1 -->  2 - -1 =  3,   LONG for 3\r\n     *           - expected = -2, current = -1 --> -2 - -1 = -1,   SHORT for 1\r\n     *           ...\r\n     * @return  amount  Amount of positions needed for rebalance to target leverage.\r\n     * @return  side    Side of positions needed for rebalance to target leverage.\r\n     */\r\n    function calculateRebalanceTarget(\r\n        IPerpetual perpetual,\r\n        uint256 netAssetValue,\r\n        int256 nextTargetLeverage\r\n    )\r\n        public\r\n        returns (uint256 amount, LibTypes.Side side)\r\n    {\r\n        uint256 markPrice = perpetual.markPrice();\r\n        require(markPrice != 0, \"mark price is 0\");\r\n        int256 currentSize = signedSize(perpetual);\r\n        int256 targetMargin = netAssetValue.toInt256().wmul(nextTargetLeverage);\r\n        int256 targetSize = targetMargin.wdiv(markPrice.toInt256());\r\n        int256 target = targetSize.sub(currentSize);\r\n        amount = target.abs().toUint256();\r\n        side = target > 0? LibTypes.Side.LONG: LibTypes.Side.SHORT;\r\n    }\r\n\r\n}","ABI":"[]","ContractName":"LibTargetCalculator","CompilerVersion":"v0.6.10+commit.00c0fcaf","OptimizationUsed":"1","Runs":"1","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://3da7f28fc471f934f71f5bf350fc43fe6826af7d851ad6321569da94f6925ad3"}]}