{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/intf/IDODO.sol\r\n\r\n/*\r\n\r\n    Copyright 2020 DODO ZOO.\r\n    SPDX-License-Identifier: Apache-2.0\r\n\r\n*/\r\n\r\npragma solidity 0.6.9;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\ninterface IDODO {\r\n    function init(\r\n        address owner,\r\n        address supervisor,\r\n        address maintainer,\r\n        address baseToken,\r\n        address quoteToken,\r\n        address oracle,\r\n        uint256 lpFeeRate,\r\n        uint256 mtFeeRate,\r\n        uint256 k,\r\n        uint256 gasPriceLimit\r\n    ) external;\r\n\r\n    function transferOwnership(address newOwner) external;\r\n\r\n    function claimOwnership() external;\r\n\r\n    function sellBaseToken(\r\n        uint256 amount,\r\n        uint256 minReceiveQuote,\r\n        bytes calldata data\r\n    ) external returns (uint256);\r\n\r\n    function buyBaseToken(\r\n        uint256 amount,\r\n        uint256 maxPayQuote,\r\n        bytes calldata data\r\n    ) external returns (uint256);\r\n\r\n    function querySellBaseToken(uint256 amount) external view returns (uint256 receiveQuote);\r\n\r\n    function queryBuyBaseToken(uint256 amount) external view returns (uint256 payQuote);\r\n\r\n    function depositBaseTo(address to, uint256 amount) external returns (uint256);\r\n\r\n    function withdrawBase(uint256 amount) external returns (uint256);\r\n\r\n    function withdrawAllBase() external returns (uint256);\r\n\r\n    function depositQuoteTo(address to, uint256 amount) external returns (uint256);\r\n\r\n    function withdrawQuote(uint256 amount) external returns (uint256);\r\n\r\n    function withdrawAllQuote() external returns (uint256);\r\n\r\n    function _BASE_CAPITAL_TOKEN_() external returns (address);\r\n\r\n    function _QUOTE_CAPITAL_TOKEN_() external returns (address);\r\n\r\n    function _BASE_TOKEN_() external returns (address);\r\n\r\n    function _QUOTE_TOKEN_() external returns (address);\r\n\r\n    function _R_STATUS_() external view returns (uint8);\r\n\r\n    function _QUOTE_BALANCE_() external view returns (uint256);\r\n\r\n    function _BASE_BALANCE_() external view returns (uint256);\r\n\r\n    function _K_() external view returns (uint256);\r\n\r\n    function _MT_FEE_RATE_() external view returns (uint256);\r\n\r\n    function _LP_FEE_RATE_() external view returns (uint256);\r\n\r\n    function getExpectedTarget() external view returns (uint256 baseTarget, uint256 quoteTarget);\r\n\r\n    function getOraclePrice() external view returns (uint256);\r\n}\r\n\r\n\r\n// File: contracts/lib/SafeMath.sol\r\n\r\n/*\r\n\r\n    Copyright 2020 DODO ZOO.\r\n\r\n*/\r\n\r\n/**\r\n * @title SafeMath\r\n * @author DODO Breeder\r\n *\r\n * @notice Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"MUL_ERROR\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"DIVIDING_ERROR\");\r\n        return a / b;\r\n    }\r\n\r\n    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 quotient = div(a, b);\r\n        uint256 remainder = a - quotient * b;\r\n        if (remainder > 0) {\r\n            return quotient + 1;\r\n        } else {\r\n            return quotient;\r\n        }\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SUB_ERROR\");\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"ADD_ERROR\");\r\n        return c;\r\n    }\r\n\r\n    function sqrt(uint256 x) internal pure returns (uint256 y) {\r\n        uint256 z = x / 2 + 1;\r\n        y = x;\r\n        while (z < y) {\r\n            y = z;\r\n            z = (x / z + z) / 2;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File: contracts/lib/DecimalMath.sol\r\n\r\n/*\r\n\r\n    Copyright 2020 DODO ZOO.\r\n\r\n*/\r\n\r\n/**\r\n * @title DecimalMath\r\n * @author DODO Breeder\r\n *\r\n * @notice Functions for fixed point number with 18 decimals\r\n */\r\nlibrary DecimalMath {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 constant ONE = 10**18;\r\n\r\n    function mul(uint256 target, uint256 d) internal pure returns (uint256) {\r\n        return target.mul(d) / ONE;\r\n    }\r\n\r\n    function mulCeil(uint256 target, uint256 d) internal pure returns (uint256) {\r\n        return target.mul(d).divCeil(ONE);\r\n    }\r\n\r\n    function divFloor(uint256 target, uint256 d) internal pure returns (uint256) {\r\n        return target.mul(ONE).div(d);\r\n    }\r\n\r\n    function divCeil(uint256 target, uint256 d) internal pure returns (uint256) {\r\n        return target.mul(ONE).divCeil(d);\r\n    }\r\n}\r\n\r\n\r\n// File: contracts/lib/DODOMath.sol\r\n\r\n/*\r\n\r\n    Copyright 2020 DODO ZOO.\r\n\r\n*/\r\n\r\n/**\r\n * @title DODOMath\r\n * @author DODO Breeder\r\n *\r\n * @notice Functions for complex calculating. Including ONE Integration and TWO Quadratic solutions\r\n */\r\nlibrary DODOMath {\r\n    using SafeMath for uint256;\r\n\r\n    /*\r\n        Integrate dodo curve fron V1 to V2\r\n        require V0>=V1>=V2>0\r\n        res = (1-k)i(V1-V2)+ikV0*V0(1/V2-1/V1)\r\n        let V1-V2=delta\r\n        res = i*delta*(1-k+k(V0^2/V1/V2))\r\n    */\r\n    function _GeneralIntegrate(\r\n        uint256 V0,\r\n        uint256 V1,\r\n        uint256 V2,\r\n        uint256 i,\r\n        uint256 k\r\n    ) internal pure returns (uint256) {\r\n        uint256 fairAmount = DecimalMath.mul(i, V1.sub(V2)); // i*delta\r\n        uint256 V0V0V1V2 = DecimalMath.divCeil(V0.mul(V0).div(V1), V2);\r\n        uint256 penalty = DecimalMath.mul(k, V0V0V1V2); // k(V0^2/V1/V2)\r\n        return DecimalMath.mul(fairAmount, DecimalMath.ONE.sub(k).add(penalty));\r\n    }\r\n\r\n    /*\r\n        The same with integration expression above, we have:\r\n        i*deltaB = (Q2-Q1)*(1-k+kQ0^2/Q1/Q2)\r\n        Given Q1 and deltaB, solve Q2\r\n        This is a quadratic function and the standard version is\r\n        aQ2^2 + bQ2 + c = 0, where\r\n        a=1-k\r\n        -b=(1-k)Q1-kQ0^2/Q1+i*deltaB\r\n        c=-kQ0^2\r\n        and Q2=(-b+sqrt(b^2+4(1-k)kQ0^2))/2(1-k)\r\n        note: another root is negative, abondan\r\n        if deltaBSig=true, then Q2>Q1\r\n        if deltaBSig=false, then Q2<Q1\r\n    */\r\n    function _SolveQuadraticFunctionForTrade(\r\n        uint256 Q0,\r\n        uint256 Q1,\r\n        uint256 ideltaB,\r\n        bool deltaBSig,\r\n        uint256 k\r\n    ) internal pure returns (uint256) {\r\n        // calculate -b value and sig\r\n        // -b = (1-k)Q1-kQ0^2/Q1+i*deltaB\r\n        uint256 kQ02Q1 = DecimalMath.mul(k, Q0).mul(Q0).div(Q1); // kQ0^2/Q1\r\n        uint256 b = DecimalMath.mul(DecimalMath.ONE.sub(k), Q1); // (1-k)Q1\r\n        bool minusbSig = true;\r\n        if (deltaBSig) {\r\n            b = b.add(ideltaB); // (1-k)Q1+i*deltaB\r\n        } else {\r\n            kQ02Q1 = kQ02Q1.add(ideltaB); // i*deltaB+kQ0^2/Q1\r\n        }\r\n        if (b >= kQ02Q1) {\r\n            b = b.sub(kQ02Q1);\r\n            minusbSig = true;\r\n        } else {\r\n            b = kQ02Q1.sub(b);\r\n            minusbSig = false;\r\n        }\r\n\r\n        // calculate sqrt\r\n        uint256 squareRoot = DecimalMath.mul(\r\n            DecimalMath.ONE.sub(k).mul(4),\r\n            DecimalMath.mul(k, Q0).mul(Q0)\r\n        ); // 4(1-k)kQ0^2\r\n        squareRoot = b.mul(b).add(squareRoot).sqrt(); // sqrt(b*b+4(1-k)kQ0*Q0)\r\n\r\n        // final res\r\n        uint256 denominator = DecimalMath.ONE.sub(k).mul(2); // 2(1-k)\r\n        uint256 numerator;\r\n        if (minusbSig) {\r\n            numerator = b.add(squareRoot);\r\n        } else {\r\n            numerator = squareRoot.sub(b);\r\n        }\r\n\r\n        if (deltaBSig) {\r\n            return DecimalMath.divFloor(numerator, denominator);\r\n        } else {\r\n            return DecimalMath.divCeil(numerator, denominator);\r\n        }\r\n    }\r\n\r\n    /*\r\n        Start from the integration function\r\n        i*deltaB = (Q2-Q1)*(1-k+kQ0^2/Q1/Q2)\r\n        Assume Q2=Q0, Given Q1 and deltaB, solve Q0\r\n        let fairAmount = i*deltaB\r\n    */\r\n    function _SolveQuadraticFunctionForTarget(\r\n        uint256 V1,\r\n        uint256 k,\r\n        uint256 fairAmount\r\n    ) internal pure returns (uint256 V0) {\r\n        // V0 = V1+V1*(sqrt-1)/2k\r\n        uint256 sqrt = DecimalMath.divCeil(DecimalMath.mul(k, fairAmount).mul(4), V1);\r\n        sqrt = sqrt.add(DecimalMath.ONE).mul(DecimalMath.ONE).sqrt();\r\n        uint256 premium = DecimalMath.divCeil(sqrt.sub(DecimalMath.ONE), k.mul(2));\r\n        // V0 is greater than or equal to V1 according to the solution\r\n        return DecimalMath.mul(V1, DecimalMath.ONE.add(premium));\r\n    }\r\n}\r\n\r\n\r\n// File: contracts/helper/DODOSellHelper.sol\r\n\r\n/*\r\n\r\n    Copyright 2020 DODO ZOO.\r\n\r\n*/\r\n\r\ncontract DODOSellHelper {\r\n    using SafeMath for uint256;\r\n\r\n    enum RStatus {ONE, ABOVE_ONE, BELOW_ONE}\r\n\r\n    uint256 constant ONE = 10**18;\r\n\r\n    struct DODOState {\r\n        uint256 oraclePrice;\r\n        uint256 K;\r\n        uint256 B;\r\n        uint256 Q;\r\n        uint256 baseTarget;\r\n        uint256 quoteTarget;\r\n        RStatus rStatus;\r\n    }\r\n\r\n    function querySellBaseToken(address dodo, uint256 amount) public view returns (uint256) {\r\n        return IDODO(dodo).querySellBaseToken(amount);\r\n    }\r\n\r\n    function querySellQuoteToken(address dodo, uint256 amount) public view returns (uint256) {\r\n        DODOState memory state;\r\n        (state.baseTarget, state.quoteTarget) = IDODO(dodo).getExpectedTarget();\r\n        state.rStatus = RStatus(IDODO(dodo)._R_STATUS_());\r\n        state.oraclePrice = IDODO(dodo).getOraclePrice();\r\n        state.Q = IDODO(dodo)._QUOTE_BALANCE_();\r\n        state.B = IDODO(dodo)._BASE_BALANCE_();\r\n        state.K = IDODO(dodo)._K_();\r\n\r\n        uint256 boughtAmount;\r\n        // Determine the status (RStatus) and calculate the amount\r\n        // based on the state\r\n        if (state.rStatus == RStatus.ONE) {\r\n            boughtAmount = _ROneSellQuoteToken(amount, state);\r\n        } else if (state.rStatus == RStatus.ABOVE_ONE) {\r\n            boughtAmount = _RAboveSellQuoteToken(amount, state);\r\n        } else {\r\n            uint256 backOneBase = state.B.sub(state.baseTarget);\r\n            uint256 backOneQuote = state.quoteTarget.sub(state.Q);\r\n            if (amount <= backOneQuote) {\r\n                boughtAmount = _RBelowSellQuoteToken(amount, state);\r\n            } else {\r\n                boughtAmount = backOneBase.add(\r\n                    _ROneSellQuoteToken(amount.sub(backOneQuote), state)\r\n                );\r\n            }\r\n        }\r\n        // Calculate fees\r\n        return\r\n            DecimalMath.divFloor(\r\n                boughtAmount,\r\n                DecimalMath.ONE.add(IDODO(dodo)._MT_FEE_RATE_()).add(IDODO(dodo)._LP_FEE_RATE_())\r\n            );\r\n    }\r\n\r\n    function _ROneSellQuoteToken(uint256 amount, DODOState memory state)\r\n        internal\r\n        pure\r\n        returns (uint256 receiveBaseToken)\r\n    {\r\n        uint256 i = DecimalMath.divFloor(ONE, state.oraclePrice);\r\n        uint256 B2 = DODOMath._SolveQuadraticFunctionForTrade(\r\n            state.baseTarget,\r\n            state.baseTarget,\r\n            DecimalMath.mul(i, amount),\r\n            false,\r\n            state.K\r\n        );\r\n        return state.baseTarget.sub(B2);\r\n    }\r\n\r\n    function _RAboveSellQuoteToken(uint256 amount, DODOState memory state)\r\n        internal\r\n        pure\r\n        returns (uint256 receieBaseToken)\r\n    {\r\n        uint256 i = DecimalMath.divFloor(ONE, state.oraclePrice);\r\n        uint256 B2 = DODOMath._SolveQuadraticFunctionForTrade(\r\n            state.baseTarget,\r\n            state.B,\r\n            DecimalMath.mul(i, amount),\r\n            false,\r\n            state.K\r\n        );\r\n        return state.B.sub(B2);\r\n    }\r\n\r\n    function _RBelowSellQuoteToken(uint256 amount, DODOState memory state)\r\n        internal\r\n        pure\r\n        returns (uint256 receiveBaseToken)\r\n    {\r\n        uint256 Q1 = state.Q.add(amount);\r\n        uint256 i = DecimalMath.divFloor(ONE, state.oraclePrice);\r\n        return DODOMath._GeneralIntegrate(state.quoteTarget, Q1, state.Q, i, state.K);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dodo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"querySellBaseToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dodo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"querySellQuoteToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DODOSellHelper","CompilerVersion":"v0.6.9+commit.3e3065ac","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"ipfs://324d535cc593acbc58a5ba34b59bd056f4df239e96de737e3c12ec0626f84c9e"}]}