{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.15;\r\n\r\ninterface IUniswapRouter {\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x + y) >= x);\r\n    }\r\n\r\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x - y) <= x);\r\n    }\r\n\r\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n\r\n    function div(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(y > 0);\r\n        z = x / y;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ninterface IYAMIncentivizer {\r\n    function DURATION() external view returns (uint256);\r\n\r\n    function rewardRate() external view returns (uint256);\r\n\r\n    function uni_lp() external view returns (IERC20);\r\n}\r\n\r\ninterface IUniswap {\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n}\r\n\r\ncontract CalculateApy {\r\n    using SafeMath for uint256;\r\n    bool private initialized;\r\n\r\n    address public owner;\r\n    address private uniRouter = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    // Stable coin: USDx.\r\n    address private reserveAddress = 0xeb269732ab75A6fD61Ea60b06fE994cD32a83549;\r\n    address private yuanAddress;\r\n\r\n    mapping(address => address[]) poolPath;\r\n    uint256 constant BASE = 10 ** 18;\r\n    uint256 constant year_seconds = 3600 * 24 * 365;\r\n\r\n    constructor(address _yuanAddress) public {\r\n        initialize(_yuanAddress);\r\n    }\r\n\r\n    function initialize(address _yuanAddress) public {\r\n        require(!initialized, \"initialize: Already initialized!\");\r\n        yuanAddress = _yuanAddress;\r\n        owner = msg.sender;\r\n        initialized = true;\r\n    }\r\n\r\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = x.mul(y) / BASE;\r\n    }\r\n\r\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = x.mul(BASE).div(y);\r\n    }\r\n\r\n    function rdivup(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = x.mul(BASE).add(y.sub(1)).div(y);\r\n    }\r\n\r\n    function getTokenPrice(address _token) internal view returns (uint256) {\r\n        uint256[] memory res = IUniswapRouter(uniRouter).getAmountsOut(\r\n            BASE,\r\n            poolPath[_token]\r\n        );\r\n        uint256 price = res[res.length - 1];\r\n        return price;\r\n    }\r\n\r\n    function setPoolPath(address[] calldata _path) external {\r\n        require(msg.sender == owner, \"setPath: Permission denied!\");\r\n        poolPath[_path[0]] = _path;\r\n    }\r\n\r\n    function setYuanAddress(address _token) external {\r\n        require(msg.sender == owner, \"setYuanAddress: Permission denied!\");\r\n        yuanAddress = _token;\r\n    }\r\n\r\n    function setReserveAddress(address _token) external {\r\n        require(msg.sender == owner, \"setReserveAddress: Permission denied!\");\r\n        reserveAddress = _token;\r\n    }\r\n\r\n    function getUniAddress(address _pool) public view returns (address) {\r\n        IYAMIncentivizer _contract = IYAMIncentivizer(_pool);\r\n        IERC20 uniswapFactory = _contract.uni_lp();\r\n        return address(uniswapFactory);\r\n    }\r\n\r\n    function getLpPrice(address _uniPool)\r\n        public\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            address,\r\n            address\r\n        )\r\n    {\r\n        address token0 = IUniswap(_uniPool).token0();\r\n        address token1 = IUniswap(_uniPool).token1();\r\n        uint256 totalValue;\r\n        address token;\r\n        if (token0 == reserveAddress || token1 == reserveAddress) {\r\n            if (token0 == reserveAddress) {\r\n                totalValue = (IERC20(token0)).balanceOf(_uniPool) << 1;\r\n            } else {\r\n                totalValue = (IERC20(token1)).balanceOf(_uniPool) << 1;\r\n            }\r\n        } else {\r\n            if (poolPath[token0].length != 0) {\r\n                token = token0;\r\n            } else if (poolPath[token1].length != 0) {\r\n                token = token1;\r\n            } else {\r\n                return (0, 0, 0, token0, token1);\r\n            }\r\n            uint256 tokenPrice = getTokenPrice(token);\r\n            uint256 _totalSupply = (IERC20(token)).balanceOf(_uniPool) << 1;\r\n            totalValue = rmul(_totalSupply, tokenPrice);\r\n        }\r\n        uint256 lpUniBalance = (IERC20(_uniPool)).totalSupply();\r\n        uint256 lpPrice = rdiv(totalValue, lpUniBalance);\r\n        return (lpPrice, totalValue, lpUniBalance, token0, token1);\r\n    }\r\n\r\n    function calcuateApy(address _pool)\r\n        external\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        IYAMIncentivizer totalIncentive_contract = IYAMIncentivizer(_pool);\r\n        uint256 yuanPrice = getTokenPrice(yuanAddress);\r\n        address uniPool = getUniAddress(_pool);\r\n        (uint256 lpPrice, , , , ) = getLpPrice(uniPool);\r\n        uint256 rewardRate = totalIncentive_contract.rewardRate();\r\n        uint256 lpStakingBalance = (IERC20(uniPool)).balanceOf(_pool);\r\n        if (lpStakingBalance == 0) {\r\n            return (uint256(0), uint256(0), uint256(0));\r\n        }\r\n        uint256 apy = rdiv(\r\n            rmul(rewardRate, yuanPrice),\r\n            rmul(lpStakingBalance, lpPrice)\r\n        );\r\n        return (apy.mul(year_seconds), rewardRate, yuanPrice);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_yuanAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"calcuateApy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniPool\",\"type\":\"address\"}],\"name\":\"getLpPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"getUniAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_yuanAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"}],\"name\":\"setPoolPath\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setReserveAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setYuanAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CalculateApy","CompilerVersion":"v0.5.15+commit.6a57276f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000004a3e164684812dfb684ac36457e7fa805087c68e","EVMVersion":"Default","Library":"","LicenseType":"GNU LGPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://99539ceb1eeb87e9fc38dd7f8a99111f121494b4a17add6b106ef9155cd7dda7"}]}