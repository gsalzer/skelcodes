{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/5/ConfigurableInterestStationConfig.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\nimport \\\"openzeppelin-solidity-2.3.0/contracts/ownership/Ownable.sol\\\";\\nimport \\\"openzeppelin-solidity-2.3.0/contracts/math/SafeMath.sol\\\";\\nimport \\\"./StationConfig.sol\\\";\\nimport \\\"./OrbitConfig.sol\\\";\\n\\n\\ninterface InterestModel {\\n    /// @dev Return the interest rate per second, using 1e18 as denom.\\n    function getInterestRate(uint256 debt, uint256 floating) external view returns (uint256);\\n}\\n\\ncontract ThreeDegreeTrajectory {\\n    using SafeMath for uint256;\\n\\n    /// @dev Return the interest rate per second, using 1e18 as denom.\\n    function getInterestRate(uint256 debt, uint256 floating) external pure returns (uint256) {\\n        uint256 total = debt.add(floating);\\n        uint256 utilization = debt.mul(100e18).div(total);\\n        if (utilization < 80e18) {\\n            // Less than 80% utilization - 0%-10% APY\\n            return utilization.mul(10e16).div(80e18) / 365 days;\\n        } else if (utilization < 90e18) {\\n            // Between 80% and 90% - 10% APY\\n            return uint256(10e16) / 365 days;\\n        } else if (utilization < 100e18) {\\n            // Between 90% and 100% - 10%-50% APY\\n            return (10e16 + utilization.sub(90e18).mul(40e16).div(10e18)) / 365 days;\\n        } else {\\n            // Not possible, but just in case - 50% APY\\n            return uint256(50e16) / 365 days;\\n        }\\n    }\\n}\\n\\ncontract ConfigurableInterestStationConfig is StationConfig, Ownable {\\n    /// The minimum ETH debt size per position.\\n    uint256 public minDebtSize;\\n    /// The portion of interests allocated to the reserve pool.\\n    uint256 public getStarGateBps;\\n    /// The reward for successfully killing a position.\\n    uint256 public getTerminateBps;\\n    /// Mapping for orbit address to its configuration.\\n    mapping (address => OrbitConfig) public orbits;\\n    /// Interest rate model\\n    InterestModel public interestModel;\\n\\n    constructor(\\n        uint256 _minDebtSize,\\n        uint256 _reserveGateBps,\\n        uint256 _terminateBps,\\n        InterestModel _interestModel\\n    ) public {\\n        setParams(_minDebtSize, _reserveGateBps, _terminateBps, _interestModel);\\n    }\\n\\n    /// @dev Set all the basic parameters. Must only be called by the owner.\\n    /// @param _minDebtSize The new minimum debt size value.\\n    /// @param _reserveGateBps The new interests allocated to the reserve pool value.\\n    /// @param _terminateBps The new reward for killing a position value.\\n    /// @param _interestModel The new interest rate model contract.\\n    function setParams(\\n        uint256 _minDebtSize,\\n        uint256 _reserveGateBps,\\n        uint256 _terminateBps,\\n        InterestModel _interestModel\\n    ) public onlyOwner {\\n        minDebtSize = _minDebtSize;\\n        getStarGateBps = _reserveGateBps;\\n        getTerminateBps = _terminateBps;\\n        interestModel = _interestModel;\\n    }\\n\\n    /// @dev Set the configuration for the given orbits. Must only be called by the owner.\\n    function setOrbits(address[] calldata addrs, OrbitConfig[] calldata configs) external onlyOwner {\\n        require(addrs.length == configs.length, \\\"bad length\\\");\\n        for (uint256 idx = 0; idx < addrs.length; idx++) {\\n            orbits[addrs[idx]] = configs[idx];\\n        }\\n    }\\n\\n    /// @dev Return the interest rate per second, using 1e18 as denom.\\n    function getInterestRate(uint256 debt, uint256 floating) external view returns (uint256) {\\n        return interestModel.getInterestRate(debt, floating);\\n    }\\n\\n    /// @dev Return whether the given address is a orbit.\\n    function isOrbit(address orbit) external view returns (bool) {\\n        return address(orbits[orbit]) != address(0);\\n    }\\n\\n    /// @dev Return whether the given orbit accepts more debt. Revert on non-orbit.\\n    function acceptDebt(address orbit) external view returns (bool) {\\n        return orbits[orbit].acceptDebt(orbit);\\n    }\\n\\n    /// @dev Return the work factor for the orbit + ETH debt, using 1e4 as denom. Revert on non-orbit.\\n    function launcher(address orbit, uint256 debt) external view returns (uint256) {\\n        return orbits[orbit].launcher(orbit, debt);\\n    }\\n\\n    /// @dev Return the kill factor for the orbit + ETH debt, using 1e4 as denom. Revert on non-orbit.\\n    function terminator(address orbit, uint256 debt) external view returns (uint256) {\\n        return orbits[orbit].terminator(orbit, debt);\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity-2.3.0/contracts/ownership/Ownable.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        _owner = msg.sender;\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return msg.sender == _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * > Note: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity-2.3.0/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/5/StationConfig.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ninterface StationConfig {\\n    /// @dev Return minimum ETH debt size per position.\\n    function minDebtSize() external view returns (uint256);\\n\\n    /// @dev Return the interest rate per second, using 1e18 as denom.\\n    function getInterestRate(uint256 debt, uint256 floating) external view returns (uint256);\\n\\n    /// @dev Return the bps rate for reserve pool.\\n    function getStarGateBps() external view returns (uint256);\\n\\n    /// @dev Return the bps rate for Avada Kill caster.\\n    function getTerminateBps() external view returns (uint256);\\n\\n    /// @dev Return whether the given address is a orbit.\\n    function isOrbit(address orbit) external view returns (bool);\\n\\n    /// @dev Return whether the given orbit accepts more debt. Revert on non-orbit.\\n    function acceptDebt(address orbit) external view returns (bool);\\n\\n    /// @dev Return the work factor for the orbit + ETH debt, using 1e4 as denom. Revert on non-orbit.\\n    function launcher(address orbit, uint256 debt) external view returns (uint256);\\n\\n    /// @dev Return the kill factor for the orbit + ETH debt, using 1e4 as denom. Revert on non-orbit.\\n    function terminator(address orbit, uint256 debt) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/5/OrbitConfig.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ninterface OrbitConfig {\\n    /// @dev Return whether the given orbit accepts more debt.\\n    function acceptDebt(address orbit) external view returns (bool);\\n    /// @dev Return the work factor for the orbit + ETH debt, using 1e4 as denom.\\n    function launcher(address orbit, uint256 debt) external view returns (uint256);\\n    /// @dev Return the kill factor for the orbit + ETH debt, using 1e4 as denom.\\n    function terminator(address orbit, uint256 debt) external view returns (uint256);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minDebtSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reserveGateBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_terminateBps\",\"type\":\"uint256\"},{\"internalType\":\"contract InterestModel\",\"name\":\"_interestModel\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"orbit\",\"type\":\"address\"}],\"name\":\"acceptDebt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"floating\",\"type\":\"uint256\"}],\"name\":\"getInterestRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStarGateBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTerminateBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"interestModel\",\"outputs\":[{\"internalType\":\"contract InterestModel\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"orbit\",\"type\":\"address\"}],\"name\":\"isOrbit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"orbit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"}],\"name\":\"launcher\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minDebtSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"orbits\",\"outputs\":[{\"internalType\":\"contract OrbitConfig\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"},{\"internalType\":\"contract OrbitConfig[]\",\"name\":\"configs\",\"type\":\"address[]\"}],\"name\":\"setOrbits\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minDebtSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reserveGateBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_terminateBps\",\"type\":\"uint256\"},{\"internalType\":\"contract InterestModel\",\"name\":\"_interestModel\",\"type\":\"address\"}],\"name\":\"setParams\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"orbit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"}],\"name\":\"terminator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ConfigurableInterestStationConfig","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000001bc16d674ec8000000000000000000000000000000000000000000000000000000000000000003e800000000000000000000000000000000000000000000000000000000000001f4000000000000000000000000aec95aab5adef53afe2b2fe0487b8ef94629ed99","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}