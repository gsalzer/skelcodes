{"status":"1","message":"OK","result":[{"SourceCode":"{\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"IOwnershipTransferrable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ninterface IOwnershipTransferrable {\\n    function transferOwnership(address owner) external;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n}\\n\"},\"IVybeStake.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport \\\"./IOwnershipTransferrable.sol\\\";\\n\\ninterface IVybeStake is IOwnershipTransferrable {\\n    event StakeIncreased(address indexed staker, uint256 amount);\\n    event StakeDecreased(address indexed staker, uint256 amount);\\n    event Rewards(\\n        address indexed staker,\\n        uint256 mintage,\\n        uint256 developerFund\\n    );\\n    event MelodyAdded(address indexed melody);\\n    event MelodyRemoved(address indexed melody);\\n\\n    function vybe() external returns (address);\\n\\n    function totalStaked() external returns (uint256);\\n\\n    function staked(address staker) external returns (uint256);\\n\\n    function lastClaim(address staker) external returns (uint256);\\n\\n    function addMelody(address melody) external;\\n\\n    function removeMelody(address melody) external;\\n\\n    function upgrade(address owned, address upgraded) external;\\n}\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport \\\"./IOwnershipTransferrable.sol\\\";\\n\\nabstract contract Ownable is IOwnershipTransferrable {\\n    address private _owner;\\n\\n    constructor(address owner) public {\\n        _owner = owner;\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(_owner == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function transferOwnership(address newOwner) external override onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"},\"ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nabstract contract ReentrancyGuard {\\n    bool private _entered;\\n\\n    modifier noReentrancy() {\\n        require(!_entered);\\n        _entered = true;\\n        _;\\n        _entered = false;\\n    }\\n}\\n\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nlibrary SafeMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a);\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b \\u003c= a);\\n        uint256 c = a - b;\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        require(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b \\u003e 0);\\n        uint256 c = a / b;\\n        return c;\\n    }\\n\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0);\\n        return a % b;\\n    }\\n}\\n\"},\"Vybe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\n\\ncontract Vybe is Ownable {\\n    using SafeMath for uint256;\\n\\n    uint256 constant UINT256_MAX = ~uint256(0);\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    uint256 private _totalSupply;\\n    mapping(address =\\u003e uint256) private _balances;\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) private _allowances;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    constructor() public Ownable(msg.sender) {\\n        _name = \\\"Vybe\\\";\\n        _symbol = \\\"VYBE\\\";\\n        _decimals = 18;\\n\\n        _totalSupply = 2000000 * 1e18;\\n        _balances[msg.sender] = _totalSupply;\\n        emit Transfer(address(0), msg.sender, _totalSupply);\\n    }\\n\\n    function name() external view returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() external view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() external view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function totalSupply() external view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) external view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool)\\n    {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    function approve(address spender, uint256 amount) external returns (bool) {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        if (_allowances[msg.sender][sender] != UINT256_MAX) {\\n            _approve(\\n                sender,\\n                msg.sender,\\n                _allowances[sender][msg.sender].sub(amount)\\n            );\\n        }\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        external\\n        returns (bool)\\n    {\\n        _approve(\\n            msg.sender,\\n            spender,\\n            _allowances[msg.sender][spender].add(addedValue)\\n        );\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        external\\n        returns (bool)\\n    {\\n        _approve(\\n            msg.sender,\\n            spender,\\n            _allowances[msg.sender][spender].sub(subtractedValue)\\n        );\\n        return true;\\n    }\\n\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal {\\n        require(sender != address(0));\\n        require(recipient != address(0));\\n\\n        _balances[sender] = _balances[sender].sub(amount);\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        require(owner != address(0));\\n        require(spender != address(0));\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function mint(address account, uint256 amount) external onlyOwner {\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    function burn(uint256 amount) external returns (bool) {\\n        _balances[msg.sender] = _balances[msg.sender].sub(amount);\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(msg.sender, address(0), amount);\\n        return true;\\n    }\\n}\\n\"},\"VybeStake.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./IOwnershipTransferrable.sol\\\";\\nimport \\\"./ReentrancyGuard.sol\\\";\\nimport \\\"./Vybe.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\n\\ncontract VybeStake is ReentrancyGuard, Ownable {\\n    using SafeMath for uint256;\\n\\n    uint256 constant UINT256_MAX = ~uint256(0);\\n    uint256 constant MONTH = 30 days;\\n    // =============Vybe===================/\\n    Vybe private _VYBE;\\n\\n    bool private _dated;\\n    bool private _migrated;\\n    uint256 _deployedAt;\\n\\n    uint256 _totalStaked;\\n\\n    mapping(address =\\u003e uint256) private _staked;\\n    mapping(address =\\u003e uint256) private _lastClaim;\\n    mapping(address =\\u003e uint256) private _lastSignificantDecrease;\\n    mapping(address =\\u003e uint256) private _lastDecrease;\\n    mapping(address =\\u003e bool) private _migratedFunds;\\n\\n    address private _developerFund;\\n    address private _oldStakingContract;\\n\\n    event StakeIncreased(address indexed staker, uint256 amount);\\n    event StakeDecreased(address indexed staker, uint256 amount);\\n    event Rewards(\\n        address indexed staker,\\n        uint256 mintage,\\n        uint256 developerFund\\n    );\\n    event MelodyAdded(address indexed melody);\\n    event MelodyRemoved(address indexed melody);\\n\\n    // ========== Vybe LP =========== //\\n    IERC20 private _LP;\\n    mapping(address =\\u003e uint256) private _lpStaked;\\n    mapping(address =\\u003e uint256) private _lpLastClaim;\\n    uint256 _totalLpStaked;\\n    uint256 totalLpStakedUnrewarded;\\n    uint256 startOfPeriod;\\n    uint256 monthlyLPReward;\\n\\n    event StakeIncreasedLP(address indexed lpStaker, uint256 amount);\\n    event StakeDecreasedLP(address indexed lpStaker, uint256 amount);\\n    event RewardsLP(address indexed staker, uint256 mintage);\\n\\n    constructor(\\n        address vybe,\\n        address lpvybe,\\n        address oldStakingContract\\n    ) public Ownable(msg.sender) {\\n        _VYBE = Vybe(vybe);\\n        _developerFund = msg.sender;\\n        _deployedAt = block.timestamp;\\n        _oldStakingContract = oldStakingContract;\\n        _LP = IERC20(lpvybe);\\n        monthlyLPReward = _VYBE.totalSupply().div(10000).mul(16);\\n        // resets the start date\\n        startOfPeriod = block.timestamp;\\n    }\\n\\n    //===============VYBE=================//\\n    function upgradeDevelopmentFund(address fund) external onlyOwner {\\n        _developerFund = fund;\\n    }\\n\\n    function vybe() external view returns (address) {\\n        return address(_VYBE);\\n    }\\n\\n    function previousStake() external view returns (address) {\\n        return address(_oldStakingContract);\\n    }\\n\\n    function totalStaked() external view returns (uint256) {\\n        return _totalStaked;\\n    }\\n\\n    function migrate() external {\\n        require(!_migratedFunds[msg.sender]);\\n        uint256 staked = VybeStake(_oldStakingContract).staked(msg.sender);\\n        uint256 lastClaim = VybeStake(_oldStakingContract).lastClaim(\\n            msg.sender\\n        );\\n        require(lastClaim \\u003c _deployedAt);\\n        _staked[msg.sender] = staked;\\n        _lastClaim[msg.sender] = lastClaim;\\n        _migratedFunds[msg.sender] = true;\\n        emit StakeIncreased(msg.sender, staked);\\n    }\\n\\n    function migrateFunds(uint256 amount) external {\\n        require(!_migrated, \\\"migrate is true\\\");\\n        require(\\n            _VYBE.transferFrom(_oldStakingContract, address(this), amount),\\n            \\\"transaction failed\\\"\\n        );\\n        _totalStaked = _totalStaked.add(amount);\\n        _migrated = true;\\n    }\\n\\n    function migratedFunds(address staker) external view returns (bool) {\\n        return _migratedFunds[staker];\\n    }\\n\\n    function migrated() external view returns (bool) {\\n        return _migrated;\\n    }\\n\\n    function staked(address staker) external view returns (uint256) {\\n        return _staked[staker];\\n    }\\n\\n    function lastClaim(address staker) external view returns (uint256) {\\n        return _lastClaim[staker];\\n    }\\n\\n    function rewardAvailable(address staker) external view returns (bool) {\\n        if (block.timestamp.sub(_lastClaim[staker]) \\u003e= 24 hours) {\\n            return false;\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    function increaseStake(uint256 amount) external {\\n        require(!_dated);\\n\\n        require(_VYBE.transferFrom(msg.sender, address(this), amount));\\n        _totalStaked = _totalStaked.add(amount);\\n        _lastClaim[msg.sender] = block.timestamp;\\n        _staked[msg.sender] = _staked[msg.sender].add(amount);\\n        emit StakeIncreased(msg.sender, amount);\\n    }\\n\\n    function decreaseStake(uint256 amount) external {\\n        _staked[msg.sender] = _staked[msg.sender].sub(amount);\\n        _totalStaked = _totalStaked.sub(amount);\\n        require(_VYBE.transfer(address(msg.sender), amount));\\n        uint256 cutoffPercentage = 5;\\n        // checks is the amount they are withdrawing in more than 5% and if it has been over a month since they withdrew less than 5%\\n        if (\\n            amount \\u003e= _staked[msg.sender] * (cutoffPercentage.div(10)) \\u0026\\u0026\\n            _lastDecrease[msg.sender] \\u003e MONTH\\n        ) {\\n            _lastSignificantDecrease[msg.sender] = block.timestamp;\\n            _lastDecrease[msg.sender] = block.timestamp;\\n            // If they withdraw more than 5% or withdraw less then 5% twice in 1 month then their tier is reset\\n        } else {\\n            _lastClaim[msg.sender] = block.timestamp;\\n\\n            emit StakeDecreased(msg.sender, amount);\\n        }\\n    }\\n\\n    // New function for calculating profit\\n    function _calculateStakerReward(address staker)\\n        private\\n        view\\n        returns (uint256)\\n    {\\n        uint256 interestPerMonth;\\n        uint256 StakerReward;\\n        uint256 claimFrom = _lastClaim[staker];\\n        if (_lastSignificantDecrease[staker] \\u003e _lastClaim[staker]) {\\n            claimFrom = _lastSignificantDecrease[staker];\\n        }\\n        uint256 stakedTime = block.timestamp.sub(claimFrom);\\n\\n        // Platinum Tier\\n        if (stakedTime \\u003e MONTH.mul(6)) {\\n            // in basis points (10% APY)\\n            interestPerMonth = 28;\\n            // Gold Tier\\n        } else if (stakedTime \\u003e MONTH.mul(3)) {\\n            // in basis points (8% APY)\\n            interestPerMonth = 22;\\n            // Silver tier\\n        } else {\\n            // in basis points (5% APY)\\n            interestPerMonth = 14;\\n        }\\n        if (stakedTime \\u003e= 24 hours) {\\n            stakedTime = stakedTime.div(24 hours);\\n            uint256 interest = interestPerMonth.mul(stakedTime);\\n\\n            StakerReward = _staked[staker].div(1e5).mul(interest);\\n        }\\n\\n        return StakerReward;\\n    }\\n\\n    function calculateRewards(address staker) public view returns (uint256) {\\n        return _calculateStakerReward(staker);\\n    }\\n\\n    function claimRewards() external noReentrancy {\\n        require(!_dated);\\n        require(_staked[msg.sender] \\u003e 0, \\\"user has 0 staked\\\");\\n\\n        uint256 stakerReward = _calculateStakerReward(msg.sender);\\n        uint256 devPiece = stakerReward.div(100);\\n\\n        stakerReward = stakerReward - devPiece;\\n\\n        require(stakerReward \\u003e 0);\\n        _lastClaim[msg.sender] = block.timestamp;\\n\\n        _staked[msg.sender] = _staked[msg.sender].add(stakerReward);\\n        _totalStaked = _totalStaked.add(stakerReward);\\n        _VYBE.mint(address(this), stakerReward);\\n        _VYBE.mint(_developerFund, devPiece);\\n\\n        emit Rewards(msg.sender, stakerReward, devPiece);\\n    }\\n\\n    function addMelody(address melody) external onlyOwner {\\n        _VYBE.approve(melody, UINT256_MAX);\\n        emit MelodyAdded(melody);\\n    }\\n\\n    function removeMelody(address melody) external onlyOwner {\\n        _VYBE.approve(melody, 0);\\n        emit MelodyRemoved(melody);\\n    }\\n\\n    function upgrade(address owned, address upgraded) external onlyOwner {\\n        _dated = true;\\n        IOwnershipTransferrable(owned).transferOwnership(upgraded);\\n    }\\n\\n    function totalLpStaked() external view returns (uint256) {\\n        return _totalLpStaked;\\n    }\\n\\n    function increaseLpStake(uint256 amount) external {\\n        require(!_dated);\\n\\n        require(\\n            _LP.transferFrom(msg.sender, address(this), amount),\\n            \\\"Can\\u0027t transfer\\\"\\n        );\\n        _totalLpStaked = _totalLpStaked.add(amount);\\n        _lpLastClaim[msg.sender] = block.timestamp;\\n        _lpStaked[msg.sender] = _lpStaked[msg.sender].add(amount);\\n        emit StakeIncreasedLP(msg.sender, amount);\\n    }\\n\\n    function decreaseLpStake(uint256 amount) external {\\n        _lpStaked[msg.sender] = _lpStaked[msg.sender].sub(amount);\\n        _totalLpStaked = _totalLpStaked.sub(amount);\\n        require(_LP.transfer(address(msg.sender), amount));\\n\\n        _lpLastClaim[msg.sender] = block.timestamp;\\n        emit StakeDecreasedLP(msg.sender, amount);\\n    }\\n\\n    function lpBalanceOf(address account) public view returns (uint256) {\\n        return _lpStaked[account];\\n    }\\n\\n    function timeLeftTillNextClaim() public view returns (uint256) {\\n        return block.timestamp.sub(startOfPeriod).sub(30 days);\\n    }\\n\\n    function _monthlyLPReward() public view returns (uint256) {\\n        return monthlyLPReward;\\n    }\\n\\n    function _totalLpStakedUnrewarded() public view returns (uint256) {\\n        return totalLpStakedUnrewarded;\\n    }\\n\\n    function claimLpRewards() external noReentrancy updateLPReward() {\\n        require(_lpLastClaim[msg.sender] \\u003c startOfPeriod);\\n        uint256 lpRewardPerToken = monthlyLPReward.div(totalLpStakedUnrewarded);\\n        uint256 lpReward = lpRewardPerToken.mul(_lpStaked[msg.sender]);\\n        totalLpStakedUnrewarded = totalLpStakedUnrewarded.sub(\\n            _lpStaked[msg.sender]\\n        );\\n        monthlyLPReward = monthlyLPReward.sub(lpReward);\\n        _VYBE.mint(msg.sender, lpReward);\\n        emit RewardsLP(msg.sender, lpReward);\\n    }\\n\\n    modifier updateLPReward() {\\n        if (block.timestamp.sub(startOfPeriod) \\u003e 30 days) {\\n            monthlyLPReward = _VYBE.totalSupply().div(10000).mul(41);\\n            startOfPeriod = block.timestamp;\\n            totalLpStakedUnrewarded = _totalLpStaked;\\n        }\\n        _;\\n    }\\n}\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vybe\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lpvybe\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oldStakingContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"melody\",\"type\":\"address\"}],\"name\":\"MelodyAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"melody\",\"type\":\"address\"}],\"name\":\"MelodyRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"developerFund\",\"type\":\"uint256\"}],\"name\":\"Rewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintage\",\"type\":\"uint256\"}],\"name\":\"RewardsLP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeDecreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lpStaker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeDecreasedLP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lpStaker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeIncreasedLP\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_monthlyLPReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalLpStakedUnrewarded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"melody\",\"type\":\"address\"}],\"name\":\"addMelody\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"calculateRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimLpRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"decreaseLpStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"decreaseStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"increaseLpStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"increaseStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"lastClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"lpBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"migrateFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"migratedFunds\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"previousStake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"melody\",\"type\":\"address\"}],\"name\":\"removeMelody\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"rewardAvailable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"staked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeLeftTillNextClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLpStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owned\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"upgraded\",\"type\":\"address\"}],\"name\":\"upgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fund\",\"type\":\"address\"}],\"name\":\"upgradeDevelopmentFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vybe\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"VybeStake","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"250","ConstructorArguments":"0000000000000000000000003a1c1d1c06be03cddc4d3332f7c20e1b37c97ce900000000000000000000000027c41e23b9ea6e8672ba205a8449f37f46a96e030000000000000000000000001bcc32ac1c994ce7e9526fbaf95f37abc0b2ec39","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d04a0434d0cdcc86f2a72e7c46c85cb33c37c8896a15fdb0c9b1a42de597a751"}]}