{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity =0.6.6;\r\n\r\n/*  ____                            \r\n / ___|_      _(_)_ __   __ _ _   _ \r\n \\___ \\ \\ /\\ / / | '_ \\ / _` | | | |\r\n  ___) \\ V  V /| | | | | (_| | |_| |\r\n |____/ \\_/\\_/ |_|_| |_|\\__, |\\__, |\r\n                        |___/ |___/   \r\n                        \r\n A price adaptive cryptocurrency designed for traders*/\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n    }\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n   \r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n   \r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n    }\r\n\r\ninterface IERC20 {\r\n   \r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n   \r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n   \r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    }\r\n\r\nlibrary SafeMath {\r\n \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n    }\r\n\r\nlibrary Address {\r\n \r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n       \r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n         } else {\r\n            if (returndata.length > 0) {\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n         } else {\r\n                revert(errorMessage);\r\n    }\r\n    }\r\n    }\r\n    }\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n        require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n    }\r\n    }\r\n    }\r\n\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) internal _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 internal _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    constructor (string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n   \r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n   \r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n   \r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n    }\r\n    \r\n// \r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\ncontract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor () internal {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n    }\r\n    \r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n    }\r\n\r\nlibrary FixedPoint {\r\n   \r\n    struct uq112x112 {\r\n        uint224 _x;\r\n    }\r\n   \r\n    struct uq144x112 {\r\n        uint _x;\r\n    }\r\n\r\n    uint8 private constant RESOLUTION = 112;\r\n\r\n    function encode(uint112 x) internal pure returns (uq112x112 memory) {\r\n        return uq112x112(uint224(x) << RESOLUTION);\r\n    }\r\n\r\n    function encode144(uint144 x) internal pure returns (uq144x112 memory) {\r\n        return uq144x112(uint256(x) << RESOLUTION);\r\n    }\r\n\r\n    function div(uq112x112 memory self, uint112 x) internal pure returns (uq112x112 memory) {\r\n        require(x != 0, 'FixedPoint: DIV_BY_ZERO');\r\n        return uq112x112(self._x / uint224(x));\r\n    }\r\n   \r\n    function mul(uq112x112 memory self, uint y) internal pure returns (uq144x112 memory) {\r\n        uint z;\r\n        require(y == 0 || (z = uint(self._x) * y) / y == uint(self._x), \"FixedPoint: MULTIPLICATION_OVERFLOW\");\r\n        return uq144x112(z);\r\n    }\r\n\r\n    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\r\n        require(denominator > 0, \"FixedPoint: DIV_BY_ZERO\");\r\n        return uq112x112((uint224(numerator) << RESOLUTION) / denominator);\r\n    }\r\n\r\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\r\n        return uint112(self._x >> RESOLUTION);\r\n    }\r\n\r\n    function decode144(uq144x112 memory self) internal pure returns (uint144) {\r\n        return uint144(self._x >> RESOLUTION);\r\n    }\r\n    }\r\n\r\nlibrary UniswapV2OracleLibrary {\r\n    using FixedPoint for *;\r\n\r\n    function currentBlockTimestamp() internal view returns (uint32) {\r\n        return uint32(block.timestamp % 2 ** 32);\r\n    }\r\n\r\n    function currentCumulativePrices(\r\n        address pair\r\n    ) internal view returns (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) {\r\n        blockTimestamp = currentBlockTimestamp();\r\n        price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\r\n        price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\r\n\r\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(pair).getReserves();\r\n        if (blockTimestampLast != blockTimestamp) {\r\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\r\n            price0Cumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\r\n            price1Cumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\r\n    }\r\n    }\r\n    }\r\n\r\nlibrary UniswapV2Library {\r\n    using SafeMath for uint;\r\n\r\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\r\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\r\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\r\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\r\n    }\r\n\r\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\r\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\r\n        pair = address(uint(keccak256(abi.encodePacked(\r\n                hex'ff',\r\n                factory,\r\n                keccak256(abi.encodePacked(token0, token1)),\r\n                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\r\n            ))));\r\n    }\r\n\r\n    }\r\n\r\ncontract SwingySeesaw {\r\n   \r\n   function SwingyRewardsTransfer(uint256 amount, uint256 durationSec) external {}\r\n \r\n    }\r\n    \r\ncontract Swingy is ERC20, Ownable, Pausable {\r\n    using SafeMath for uint256;\r\n   \r\n    uint256 private constant abcdefg01000110 = 15;\r\n    \r\n    uint256 private constant abcdefghi01010101 = 6 * 1e4;\r\n   \r\n    uint256 private constant abcdefgh01001110 = 26 * 1e4;\r\n\r\n    uint256 private constant abcdefghij01101000 = 45;\r\n   \r\n    uint256 private constant abcdefghijk01100001 = 11 * 1e2;\r\n   \r\n    uint256 private constant minburn = 22 * 1e3;\r\n   \r\n    uint256 private constant minmint = 36560;\r\n   \r\n    uint256 private constant maxmint = 9 * 1e4;\r\n    \r\n    uint256 private constant maxtransfer = 5 * 1e21;\r\n    \r\n    uint32 public blockTimestampLast;\r\n   \r\n    uint256 public TransferLast;\r\n\r\n    uint256 public priceCumulativeLast;\r\n\r\n    uint256 public priceAverageLast;\r\n\r\n    uint256 public PriceUpdateInterval;\r\n   \r\n    uint256 public TransferInterval;\r\n   \r\n    uint256 public SeesawReleaseDuration;\r\n    \r\n    address private SwingyToken = address(this);\r\n   \r\n    address public constant WETH = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n\r\n    address public constant uniswapV2Factory = address(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f);\r\n    \r\n    address public immutable InitialSwingyAddress;  \r\n    \r\n    address public uniswapPair;\r\n   \r\n    mapping(address => bool) public whitelistedSenders;\r\n   \r\n    bool public isThisToken0;\r\n    \r\n    bool public TransferVariables; \r\n\r\n    event TwapUpdated(uint256 priceCumulativeLast, uint256 blockTimestampLast, uint256 priceAverageLast);\r\n   \r\n    event updateTransfer(uint256 TransferLast);\r\n    \r\n    SwingySeesaw _Seesaw;\r\n   \r\n \r\n    constructor(address _InitialSwingyAddress, uint256 _PriceUpdateInterval, uint256 _SeesawReleaseDuration)\r\n    public\r\n    Ownable()\r\n    ERC20(\"Swingy\", \"SWING\")\r\n    {\r\n        setPriceUpdateInterval(_PriceUpdateInterval);\r\n        setSeesawReleaseDuration(_SeesawReleaseDuration);\r\n        CalcTransferInterval();\r\n        InitialSwingyAddress = _InitialSwingyAddress;\r\n        _distributeSwing(_InitialSwingyAddress);\r\n        _initializeSwingxETHPair();\r\n        TransferVariables = true;\r\n        _pause();\r\n    \r\n       \r\n    }\r\n    \r\n    /*Modifier to be used with transfer function for initial launch to prevent early liquidity adds */\r\n    modifier whenNotPausedOrWhitelisted(address sender) {\r\n        require(!paused() || _isWhitelisted(sender), \"SwingyToken is paused or you are not whitelisted\");\r\n        _;\r\n    }\r\n    \r\n    /*unpause, unpauses SwingyToken to be tradeable after initial liquidity add */\r\n     function unpause() external virtual onlyOwner {\r\n        super._unpause();\r\n    }\r\n    \r\n    /*SeesawReleaseDuration, the time in seconds for the transferred Swingy rewards to linearly release.*/\r\n    function setSeesawReleaseDuration(uint256 _SeesawReleaseDuration) public onlyOwner {\r\n        SeesawReleaseDuration = _SeesawReleaseDuration;\r\n    }\r\n\r\n    \r\n    /*PriceUpdateInterval, the time in seconds of how often the SWINGETH pair price is updated.*/\r\n    function setPriceUpdateInterval(uint256 _PriceUpdateInterval) public onlyOwner {\r\n        PriceUpdateInterval = _PriceUpdateInterval;\r\n    }\r\n    \r\n    /*initializePriceUpdates, initializes price tracking*/\r\n    function initializePriceUpdates() external onlyOwner {\r\n        require(blockTimestampLast == 0, \"Price tracking already initialized\");\r\n        (uint256 price0Cumulative, uint256 price1Cumulative, uint32 blockTimestamp) =\r\n            UniswapV2OracleLibrary.currentCumulativePrices(uniswapPair);\r\n\r\n        uint256 priceCumulative = isThisToken0 ? price1Cumulative : price0Cumulative;\r\n       \r\n        blockTimestampLast = blockTimestamp;\r\n        priceCumulativeLast = priceCumulative;\r\n        priceAverageLast = abcdefg01000110; \r\n    }\r\n    \r\n    /*setwhitelisted, immune to transfer variables, Uniswap pools + Seesaw pools.*/\r\n    function setWhitelistedSender(address _address, bool _whitelisted) public onlyOwner {\r\n        whitelistedSenders[_address] = _whitelisted;\r\n    }\r\n    \r\n    /*EnableDisableTransferVariables, enable or disable transfer variables (mints/burns).*/\r\n    function EnableDisableTransferVariables(bool _status) external onlyOwner {\r\n        TransferVariables  = _status;\r\n    }\r\n    \r\n    /*_distributeSwing, distributes SWING to the Initial Swingy Address for further distribution.*/\r\n    function _distributeSwing(address _InitialSwingyAddress) internal {  \r\n        _mint(address(_InitialSwingyAddress), 26 * 1e4 * 1e18);\r\n        setWhitelistedSender(msg.sender, true);\r\n        setWhitelistedSender(address(this), true);\r\n    }\r\n    \r\n    /*_initializeSwingxETHPair, initializes the SWING/ETH uniswapPair.*/\r\n    function _initializeSwingxETHPair() internal {\r\n        (address token0, address token1) = UniswapV2Library.sortTokens(address(this), address(WETH));\r\n        isThisToken0 = (token0 == address(this));\r\n        uniswapPair = UniswapV2Library.pairFor(uniswapV2Factory, token0, token1);\r\n        \r\n    }\r\n    \r\n    /*_isWhitelisted, returns a bool (true/false) as of which an address is whitelisted or not.*/\r\n    function _isWhitelisted(address _sender) internal view returns (bool) {\r\n        return whitelistedSenders[_sender];\r\n    }\r\n    \r\n    /*_TheSeesaw, sets the Seesaw Address*/\r\n    function _TheSeesaw(address TheSeesaw) external onlyOwner {\r\n        _Seesaw = SwingySeesaw(TheSeesaw);\r\n        setWhitelistedSender(TheSeesaw, true);\r\n\r\n    }\r\n    \r\n    /*approveSeesaw, SwingyToken contract approves the Seesaw address to spend SWING for _TransferSwingyRewards().*/\r\n    function approveSeesaw() external onlyOwner returns (bool) {\r\n        _approve(address(this), address(_Seesaw), 115792089237316195423570985008687907853269984665640564039457584007913129639935);\r\n        return true;\r\n    }\r\n    \r\n     /*CalcTransferInterval, the randomly generated time in seconds of how often tranfers to the Seesaw can occur with a range of 1-3 hours*/\r\n    function CalcTransferInterval() internal returns(uint256) {\r\n    uint256 seed = uint256(keccak256(abi.encodePacked(\r\n        block.timestamp + block.difficulty +\r\n        ((uint256(keccak256(abi.encodePacked(block.coinbase)))) / (now)) +\r\n        block.gaslimit + \r\n        ((uint256(keccak256(abi.encodePacked(msg.sender)))) / (now)) +\r\n        block.number\r\n    )));\r\n    \r\n            TransferInterval = (seed - ((seed / 7200) * 7200)) +3600;\r\n            return TransferInterval;\r\n    }\r\n    \r\n    /*_TransferSwingyRewards, transfers minted Swingy Rewards to the Seesaw with release according to SeesawReleaseDuration. Cap of 5k SWING per interval, leaves .1%*/       \r\n    function _TransferSwingyRewards() internal {\r\n        uint256 LastTransfer = now - TransferLast;\r\n        \r\n        if (LastTransfer > TransferInterval) {\r\n            ERC20 _SwingyToken = ERC20(SwingyToken);\r\n            uint256 InitialRewardstoTransfer = _SwingyToken.balanceOf(address(this));\r\n            uint256 abc01101011011001010110101100001010 = InitialRewardstoTransfer.div(1e3);\r\n            uint256 abc01100110 = InitialRewardstoTransfer - abc01101011011001010110101100001010;\r\n            uint256 zxy01110101 = abc01100110;\r\n            uint256 fuk01101110 = abc01100110;\r\n            uint256 RewardstoBurn;\r\n        \r\n           \r\n        if (abc01100110 > maxtransfer) {\r\n            abc01100110 = maxtransfer; \r\n            fuk01101110 = abc01100110;\r\n            RewardstoBurn = zxy01110101 - fuk01101110;\r\n            _Seesaw.SwingyRewardsTransfer(fuk01101110, SeesawReleaseDuration);\r\n            super._burn(address(this), RewardstoBurn);\r\n            TransferLast = now;\r\n            CalcTransferInterval();\r\n            \r\n    }\r\n    \r\n        if (abc01100110 < maxtransfer) {\r\n            _Seesaw.SwingyRewardsTransfer(fuk01101110, SeesawReleaseDuration);\r\n            TransferLast = now;\r\n            CalcTransferInterval();\r\n       \r\n\r\n    }\r\n            emit updateTransfer(TransferLast);\r\n    }\r\n           \r\n    }  \r\n    \r\n    /*_updateSwingyPrice, updates the current tracked SWING/ETH uniswapPair price according to PriceUpdateInterval.*/  \r\n    function _updateSwingyPrice() internal virtual returns (uint256) {\r\n        (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) =\r\n            UniswapV2OracleLibrary.currentCumulativePrices(uniswapPair);\r\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast;\r\n\r\n        if (timeElapsed > PriceUpdateInterval) {\r\n            uint256 priceCumulative = isThisToken0 ? price1Cumulative : price0Cumulative;\r\n\r\n            FixedPoint.uq112x112 memory priceAverage = FixedPoint.uq112x112(\r\n                uint224((priceCumulative - priceCumulativeLast) / timeElapsed)\r\n            );\r\n\r\n            priceCumulativeLast = priceCumulative;\r\n            blockTimestampLast = blockTimestamp;\r\n\r\n            priceAverageLast = FixedPoint.decode144(FixedPoint.mul(priceAverage, 1 ether));\r\n\r\n            emit TwapUpdated(priceCumulativeLast, blockTimestampLast, priceAverageLast);\r\n    }\r\n\r\n            return priceAverageLast;\r\n       \r\n    }\r\n    \r\n    /*_transfer, the general transfer function with variable mint/burns based on current SWING/ETH uniswapPair price. \r\n     * Mints can only occur when routing through Uniswap, but burns can and will take place outside.\r\n     * Have fun with the rest.\r\n     */ \r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual override whenNotPausedOrWhitelisted(sender) {  \r\n        \r\n        if (!TransferVariables == false) {\r\n             \r\n        if (!_isWhitelisted(sender)) {\r\n        uint256 a01010011 = _updateSwingyPrice();\r\n        uint256 ab01010111 = abcdefgh01001110.mul(1e18);\r\n        uint256 abc01001001 = ab01010111.mul(abcdefghij01101000).div(a01010011);\r\n        uint256 abcd01001110 = abcdefg01000110;\r\n        uint256 abcde01000111 = abcdefghi01010101;\r\n        uint256 abcdef01011001 = abc01001001;\r\n           \r\n        if (abc01001001 >= maxmint) {\r\n            abc01001001 = maxmint;\r\n    }\r\n       \r\n        if (_isWhitelisted(recipient) == false) {\r\n            abc01001001 = 1;\r\n            abcd01001110 = 1;\r\n            abcde01000111 = 1;\r\n           \r\n    }  \r\n    \r\n        uint256 abcdefghijklmnopqrstuvwxy0101001101010111010000010100111001000111 = amount.div(abcdef01011001).mul(abcdefghijk01100001);\r\n        uint256 abcdefghijklmnopqrstuvwxyz0101001101010111010010010100111001000111 = amount.mul(abc01001001).div(abcd01001110).div(abcde01000111);\r\n       \r\n        if (abc01001001 >= minmint) {\r\n            super._mint(address(this), abcdefghijklmnopqrstuvwxyz0101001101010111010010010100111001000111);\r\n            _TransferSwingyRewards();\r\n    }\r\n\r\n        if (abc01001001 <= minburn) {\r\n           super._burn(sender, abcdefghijklmnopqrstuvwxy0101001101010111010000010100111001000111);\r\n           amount = amount.sub(abcdefghijklmnopqrstuvwxy0101001101010111010000010100111001000111);\r\n           _totalSupply = _totalSupply.sub(abcdefghijklmnopqrstuvwxy0101001101010111010000010100111001000111);\r\n           \r\n    }    \r\n   \r\n    }  \r\n    \r\n    }\r\n        super._transfer(sender, recipient, amount);\r\n        \r\n    }\r\n    \r\n    /*getCurrentSwingPerEth, grabs the current SWING per ETH.*/  \r\n    function getCurrentSwingPerEth() public view returns (uint256) {\r\n        (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) =\r\n            UniswapV2OracleLibrary.currentCumulativePrices(uniswapPair);\r\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast;\r\n\r\n        uint256 priceCumulative = isThisToken0 ? price1Cumulative : price0Cumulative;\r\n\r\n        FixedPoint.uq112x112 memory priceAverage = FixedPoint.uq112x112(\r\n            uint224((priceCumulative - priceCumulativeLast) / timeElapsed)\r\n        );\r\n\r\n        return FixedPoint.decode144(FixedPoint.mul(priceAverage, 1 ether));\r\n    }\r\n    \r\n    /*getLastSwingPerEth, grabs the last SWING per ETH.*/ \r\n    function getLastSwingPerEth() public view returns (uint256) {\r\n        return priceAverageLast;\r\n    }\r\n   \r\n    }","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_InitialSwingyAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_PriceUpdateInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_SeesawReleaseDuration\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceCumulativeLast\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockTimestampLast\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceAverageLast\",\"type\":\"uint256\"}],\"name\":\"TwapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"TransferLast\",\"type\":\"uint256\"}],\"name\":\"updateTransfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"EnableDisableTransferVariables\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"InitialSwingyAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PriceUpdateInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SeesawReleaseDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TransferInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TransferLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TransferVariables\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"TheSeesaw\",\"type\":\"address\"}],\"name\":\"_TheSeesaw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveSeesaw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockTimestampLast\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentSwingPerEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastSwingPerEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializePriceUpdates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isThisToken0\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceAverageLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceCumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_PriceUpdateInterval\",\"type\":\"uint256\"}],\"name\":\"setPriceUpdateInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_SeesawReleaseDuration\",\"type\":\"uint256\"}],\"name\":\"setSeesawReleaseDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_whitelisted\",\"type\":\"bool\"}],\"name\":\"setWhitelistedSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedSenders\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Swingy","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000003e5fbe046757e7196b2e6def27bbf6db54dac908000000000000000000000000000000000000000000000000000000000000003c00000000000000000000000000000000000000000000000000000000003b5380","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://af0615cdf0715c071e4e8ab50710bf28f0a5f9a31a4b9e90f91ac2961da0de7c"}]}