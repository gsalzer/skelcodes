{"status":"1","message":"OK","result":[{"SourceCode":"/*MMMMMMMMMMMMMMMMMMMMMKd:;:kXWMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMNkxKd,;cl0WMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMKdOWklxo'cKMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMM0o0WkdXO,;OMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMkl0WkdXO;,kWMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMWxlKWkdX0;'xWMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMWdlXWxdN0:'dWMMMMMM\r\nMMMMMMMMMMMMMMMMMMMNXOclXWxdNK:.oNMMMMMM\r\nMMMMMMMMMMMMMMMMWXkllc,lXNddNK:.oNMMMMMM\r\nMMMMMMMMMMMMMWKkxo;l0Kkdko,oXx,.oNMMMMMM\r\nMMMMMMMMMMMMNk:oXXxxXNWXd,.:l,..oNMMMMMM\r\nMMMMMMMMMWKko:'lXMKkkKMMNk;'....lXMMMMMM\r\nMMMMMMMMM0lo0KkcxNWX0XWMMWKo'...:0MMMMMM\r\nMMMMMMMMKl;xNMWkcOWMMW0KWMMNO:'.'xWMMMMM\r\nMMMMMMMKoll:oXMNocKMMWOlkWMMMXx;.cXMMMMM\r\nMMMMMMM0kNNd,dNM0:oXMMXc,xNMMWN0l;kWMMMM\r\nMMMMMMMX0XXc.,xNNd;dKK0xoxKKxlxKdl0MMMMM\r\nMMMMMMMW00Nd'.,ldc';lxKNWWO:..:ccOWMMMMM\r\nMMMMMMMMX0X0:':;..,kXNWKxl,....,kWMMMMMM\r\nMMMMMMMMWKKN0Ok:..oNMWO:......'dNMMMMMMM\r\nMMMMMMMMMX0NWKc..'dNW0:.......lXMMMMMMMM\r\nMMMMMMMMMWKXWk,...oXXd,''....;OWMMMMMMMM\r\nMWMMMMMMMMX0N0oc,.lKKkol:'..'dNMMMMMMMMM\r\nOoodxkO0XNWO0WWNd'oko:'.....cKNXKOkxdooO\r\nKl'....,cldkONMWk:kkc,.....'lolc,....'cK\r\nNx,...',;,';dKWW0o0Oc,.,:,.',',;,'...,xN\r\nl,....;:,;:;;coolcdo:,'oX0c',,,':;....,l\r\n0Oxd:';;c0NklooxOOOOOklxNNK0KOc.,:':dxO0\r\nMMMW0c;';k0l,,c0W0kNMXo:llOWNd'.';c0WMMM\r\nMMMMWk;.',,...;OWxdNWKc..cKNx,...,xNMMMM\r\nMMMMMNkc;''...;xOllO0x;.'coc,'';cxXMMMMM\r\nMMMMMMWNKOdoc:;:;,',,,'',;:codkKNWMMMM*/\r\n\r\n/// Only 3000GRP (GroupToken)\r\n/// 3% burn rate and trade will be effected from Tue, 10 Nov 2020 13:00:00 GMT. Burning process will be implemented \r\n//  until the remain of tokens hit 1000\r\n\r\n/// dev no token, no any sales, no marketing for this token and trust in the community to see it through \r\n/// no mint function, 100% add LQ\r\n\r\npragma solidity ^0.4.25;\r\n\r\ninterface ERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n  function approve(address spender, uint256 value) external returns (bool);\r\n  function approveAndCall(address spender, uint tokens, bytes data) external returns (bool success);\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) external;\r\n}\r\ncontract ERC20Details is ERC20 {\r\n\r\n  uint8 public _decimal;\r\n  string public _name;\r\n  string public _symbol;\r\n\r\n  constructor(string memory name, string memory symbol, uint8 decimals) public {\r\n    _decimal = decimals;\r\n    _name = name;\r\n    _symbol = symbol; \r\n  }\r\n\r\n  function name() public view returns(string memory) {\r\n    return _name;\r\n  }\r\n\r\n  function symbol() public view returns(string memory) {\r\n    return _symbol;\r\n  }\r\n\r\n  function decimals() public view returns(uint8) {\r\n    return _decimal;\r\n  }\r\n}\r\n\r\ncontract GroupFinance is ERC20Details {\r\n  using SafeMath for uint256;\r\n\r\n  mapping (address => uint256) private balances;\r\n  mapping (address => mapping (address => uint256)) private allowed;\r\n  \r\n  string private constant _NAME  = \"Group.Finance\";\r\n  string private constant _SYMBOL = \"GRP\";\r\n  uint8 private constant _DECIMALS = 18;\r\n  uint16 private constant supply = 3000;\r\n  address owner = msg.sender;\r\n  address constant public deployer = 0xC331b3a9f2F02a5B3Be2FBf07C398e8f61C44C87;\r\n  uint256 private constant releaseTime = 1605013200;\r\n  uint256 _totalSupply = supply * 10 ** uint256(_DECIMALS);\r\n  uint256 private constant burnrate = 3;\r\n  uint16 private constant minimum = 1000;\r\n  uint256 _minimumSupply = minimum * 10 ** uint256(_DECIMALS);\r\n\r\n  constructor() public payable ERC20Details(_NAME, _SYMBOL, _DECIMALS){\r\n    mint(msg.sender, _totalSupply);\r\n  }\r\n  \r\n  function mint(address account, uint256 amount) internal {\r\n    require(amount != 0);\r\n    balances[account] = balances[account].add(amount);\r\n    emit Transfer(address(0), account, amount);\r\n  }\r\n\r\n  function totalSupply() public view returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  function balanceOf(address player) public view returns (uint256) {\r\n    return balances[player];\r\n  }\r\n\r\n  function allowance(address player, address spender) public view returns (uint256) {\r\n    return allowed[player][spender];\r\n  }\r\n\r\n  function burnToken(uint256 value) private view returns (uint256){\r\n      uint256 burnable = _totalSupply - _minimumSupply;\r\n      if (burnable <= 0)\r\n        return 0;\r\n        \r\n      uint256 tokenForburn = 0;\r\n      uint256 _burn = value.mul(burnrate).div(100);\r\n      if (burnable >= _burn)\r\n        tokenForburn = _burn;\r\n      else\r\n        tokenForburn = burnable;\r\n      return tokenForburn;\r\n  }\r\n  function transfer(address to, uint256 value) public returns (bool) {\r\n    require(value <= balances[msg.sender]);\r\n    require(to != address(0));\r\n    if (msg.sender != deployer)\r\n        require(now > releaseTime);\r\n    uint256 needBurn = 0;\r\n    if (now > releaseTime)\r\n        needBurn = burnToken(value);\r\n    uint256 _transfer = value.sub(needBurn);\r\n    balances[msg.sender] = balances[msg.sender].sub(value);\r\n    balances[to] = balances[to].add(_transfer);\r\n    _totalSupply = _totalSupply.sub(needBurn);\r\n\r\n    emit Transfer(msg.sender, to, _transfer);\r\n    emit Transfer(msg.sender, address(0), needBurn);\r\n    return true;\r\n  }\r\n    \r\n  //Buy back and airdrop\r\n  function multiTransfer(address[] memory receivers, uint256[] memory amounts) public {\r\n    for (uint256 i = 0; i < receivers.length; i++) {\r\n      transfer(receivers[i], amounts[i]);\r\n    }\r\n  }\r\n\r\n  function approve(address spender, uint256 value) public returns (bool) {\r\n    require(spender != address(0));\r\n    allowed[msg.sender][spender] = value;\r\n    emit Approval(msg.sender, spender, value);\r\n    return true;\r\n  }\r\n\r\n  function approveAndCall(address spender, uint256 tokens, bytes data) external returns (bool) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\r\n        return true;\r\n    }\r\n\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n    require(value <= balances[from]);\r\n    require(value <= allowed[from][msg.sender]);\r\n    require(to != address(0));\r\n    \r\n    if (from != deployer)\r\n        require(now > releaseTime);\r\n    uint256 needBurn = 0;\r\n    if (now > releaseTime)\r\n        needBurn = burnToken(value);\r\n    uint256 _transfer = value.sub(needBurn);\r\n\r\n    balances[from] = balances[from].sub(value);\r\n    balances[to] = balances[to].add(_transfer);\r\n    _totalSupply = _totalSupply.sub(needBurn);\r\n\r\n    allowed[from][msg.sender] = allowed[from][msg.sender].sub(value);\r\n\r\n    emit Transfer(from, to, _transfer);\r\n    emit Transfer(from, address(0), needBurn);\r\n    \r\n    return true;\r\n  }\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\r\n    uint256 c = add(a,m);\r\n    uint256 d = sub(c,1);\r\n    return mul(div(d,m),m);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receivers\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"multiTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_decimal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deployer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"GroupFinance","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://333b316f68a1426be9d61884905a3f7fe6a79489c7d94eb48b1bc671461943d8"}]}