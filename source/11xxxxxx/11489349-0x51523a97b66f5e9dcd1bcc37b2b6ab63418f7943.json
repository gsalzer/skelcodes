{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Volumes/Work/Lid/simplified-presales-1.1/contracts/LidSimplifiedPresale.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/lifecycle/Pausable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/ownership/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\r\\nimport \\\"./uniswapV2Periphery/interfaces/IUniswapV2Router01.sol\\\";\\r\\nimport \\\"./library/BasisPoints.sol\\\";\\r\\nimport \\\"./LidSimplifiedPresaleTimer.sol\\\";\\r\\nimport \\\"./LidSimplifiedPresaleRedeemer.sol\\\";\\r\\nimport \\\"./LidSimplifiedPresaleAccess.sol\\\";\\r\\n\\r\\ncontract LidSimplifiedPresale is\\r\\n    Initializable,\\r\\n    Ownable,\\r\\n    ReentrancyGuard,\\r\\n    Pausable\\r\\n{\\r\\n    using BasisPoints for uint256;\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    uint256 public maxBuyPerAddress;\\r\\n\\r\\n    uint256 public uniswapEthBP;\\r\\n    address[] public ethPools;\\r\\n    uint256[] public ethPoolBPs;\\r\\n\\r\\n    uint256 public uniswapTokenBP;\\r\\n    uint256 public presaleTokenBP;\\r\\n    address[] public tokenPools;\\r\\n    uint256[] public tokenPoolBPs;\\r\\n\\r\\n    uint256 public hardcap;\\r\\n    uint256 public totalTokens;\\r\\n\\r\\n    bool public hasSentToUniswap;\\r\\n    bool public hasIssuedTokens;\\r\\n    bool public hasIssuedEths;\\r\\n\\r\\n    uint256 public finalEndTime;\\r\\n    uint256 public finalEth;\\r\\n\\r\\n    IERC20 private token;\\r\\n    IUniswapV2Router01 private uniswapRouter;\\r\\n    LidSimplifiedPresaleTimer private timer;\\r\\n    LidSimplifiedPresaleRedeemer private redeemer;\\r\\n    LidSimplifiedPresaleAccess private access;\\r\\n\\r\\n    mapping(address => uint256) public earnedReferrals;\\r\\n\\r\\n    mapping(address => uint256) public referralCounts;\\r\\n\\r\\n    mapping(address => uint256) public refundedEth;\\r\\n\\r\\n    bool public isRefunding;\\r\\n\\r\\n    modifier whenPresaleActive {\\r\\n        require(timer.isStarted(), \\\"Presale not yet started.\\\");\\r\\n        require(!isPresaleEnded(), \\\"Presale has ended.\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier whenPresaleFinished {\\r\\n        require(timer.isStarted(), \\\"Presale not yet started.\\\");\\r\\n        require(isPresaleEnded(), \\\"Presale has not yet ended.\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function initialize(\\r\\n        uint256 _maxBuyPerAddress,\\r\\n        uint256 _hardcap,\\r\\n        address owner,\\r\\n        LidSimplifiedPresaleTimer _timer,\\r\\n        LidSimplifiedPresaleRedeemer _redeemer,\\r\\n        LidSimplifiedPresaleAccess _access,\\r\\n        IERC20 _token,\\r\\n        IUniswapV2Router01 _uniswapRouter\\r\\n    ) external initializer {\\r\\n        Ownable.initialize(msg.sender);\\r\\n        Pausable.initialize(msg.sender);\\r\\n        ReentrancyGuard.initialize();\\r\\n\\r\\n        token = _token;\\r\\n        timer = _timer;\\r\\n        redeemer = _redeemer;\\r\\n        access = _access;\\r\\n        uniswapRouter = _uniswapRouter;\\r\\n\\r\\n        hardcap = _hardcap;\\r\\n        maxBuyPerAddress = _maxBuyPerAddress;\\r\\n\\r\\n        totalTokens = token.totalSupply();\\r\\n        token.approve(address(uniswapRouter), token.totalSupply());\\r\\n\\r\\n        //Due to issue in oz testing suite, the msg.sender might not be owner\\r\\n        _transferOwnership(owner);\\r\\n    }\\r\\n\\r\\n    function deposit() external payable whenNotPaused {\\r\\n        deposit(address(0x0));\\r\\n    }\\r\\n\\r\\n    function setEthPools(\\r\\n        uint256 _uniswapEthBP,\\r\\n        address[] calldata _ethPools,\\r\\n        uint256[] calldata _ethPoolBPs\\r\\n    ) external onlyOwner whenNotPaused {\\r\\n        require(\\r\\n            _ethPools.length == _ethPoolBPs.length,\\r\\n            \\\"Must have exactly one tokenPool addresses for each BP.\\\"\\r\\n        );\\r\\n        delete ethPools;\\r\\n        delete ethPoolBPs;\\r\\n        uniswapEthBP = _uniswapEthBP;\\r\\n        for (uint256 i = 0; i < _ethPools.length; ++i) {\\r\\n            ethPools.push(_ethPools[i]);\\r\\n        }\\r\\n\\r\\n        uint256 totalEthPoolBPs = uniswapEthBP;\\r\\n        for (uint256 i = 0; i < _ethPoolBPs.length; ++i) {\\r\\n            ethPoolBPs.push(_ethPoolBPs[i]);\\r\\n            totalEthPoolBPs = totalEthPoolBPs.add(_ethPoolBPs[i]);\\r\\n        }\\r\\n        require(\\r\\n            totalEthPoolBPs == 10000,\\r\\n            \\\"Must allocate exactly 100% (10000 BP) of eths to pools\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function setTokenPools(\\r\\n        uint256 _uniswapTokenBP,\\r\\n        uint256 _presaleTokenBP,\\r\\n        address[] calldata _tokenPools,\\r\\n        uint256[] calldata _tokenPoolBPs\\r\\n    ) external onlyOwner whenNotPaused {\\r\\n        require(\\r\\n            _tokenPools.length == _tokenPoolBPs.length,\\r\\n            \\\"Must have exactly one tokenPool addresses for each BP.\\\"\\r\\n        );\\r\\n        delete tokenPools;\\r\\n        delete tokenPoolBPs;\\r\\n        uniswapTokenBP = _uniswapTokenBP;\\r\\n        presaleTokenBP = _presaleTokenBP;\\r\\n        for (uint256 i = 0; i < _tokenPools.length; ++i) {\\r\\n            tokenPools.push(_tokenPools[i]);\\r\\n        }\\r\\n        uint256 totalTokenPoolBPs = uniswapTokenBP.add(presaleTokenBP);\\r\\n        for (uint256 i = 0; i < _tokenPoolBPs.length; ++i) {\\r\\n            tokenPoolBPs.push(_tokenPoolBPs[i]);\\r\\n            totalTokenPoolBPs = totalTokenPoolBPs.add(_tokenPoolBPs[i]);\\r\\n        }\\r\\n        require(\\r\\n            totalTokenPoolBPs == 10000,\\r\\n            \\\"Must allocate exactly 100% (10000 BP) of tokens to pools\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function sendToUniswap()\\r\\n        external\\r\\n        whenPresaleFinished\\r\\n        nonReentrant\\r\\n        whenNotPaused\\r\\n    {\\r\\n        require(\\r\\n            msg.sender == tx.origin,\\r\\n            \\\"Sender must be origin - no contract calls.\\\"\\r\\n        );\\r\\n        require(tokenPools.length > 0, \\\"Must have set token pools\\\");\\r\\n        require(!hasSentToUniswap, \\\"Has already sent to Uniswap.\\\");\\r\\n        finalEndTime = now;\\r\\n        finalEth = address(this).balance;\\r\\n        hasSentToUniswap = true;\\r\\n        uint256 uniswapTokens = totalTokens.mulBP(uniswapTokenBP);\\r\\n        uint256 uniswapEth = finalEth.mulBP(uniswapEthBP);\\r\\n        uniswapRouter.addLiquidityETH.value(uniswapEth)(\\r\\n            address(token),\\r\\n            uniswapTokens,\\r\\n            uniswapTokens,\\r\\n            uniswapEth,\\r\\n            address(0x000000000000000000000000000000000000dEaD),\\r\\n            now\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function issueEths() external whenPresaleFinished whenNotPaused {\\r\\n        require(hasSentToUniswap, \\\"Has not yet sent to Uniswap.\\\");\\r\\n        require(!hasIssuedEths, \\\"Has already issued eths.\\\");\\r\\n        hasIssuedEths = true;\\r\\n        uint256 last = ethPools.length.sub(1);\\r\\n        for (uint256 i = 0; i < last; ++i) {\\r\\n            address payable poolAddress = address(uint160(ethPools[i]));\\r\\n            poolAddress.transfer(finalEth.mulBP(ethPoolBPs[i]));\\r\\n        }\\r\\n\\r\\n        // in case rounding error, send all to final\\r\\n        address payable poolAddress = address(uint160(ethPools[last]));\\r\\n        poolAddress.transfer(finalEth.mulBP(ethPoolBPs[last]));\\r\\n    }\\r\\n\\r\\n    function issueTokens() external whenPresaleFinished whenNotPaused {\\r\\n        require(hasSentToUniswap, \\\"Has not yet sent to Uniswap.\\\");\\r\\n        require(!hasIssuedTokens, \\\"Has already issued tokens.\\\");\\r\\n        hasIssuedTokens = true;\\r\\n        uint256 last = tokenPools.length.sub(1);\\r\\n        for (uint256 i = 0; i < last; ++i) {\\r\\n            token.transfer(tokenPools[i], totalTokens.mulBP(tokenPoolBPs[i]));\\r\\n        }\\r\\n        // in case rounding error, send all to final\\r\\n        token.transfer(tokenPools[last], totalTokens.mulBP(tokenPoolBPs[last]));\\r\\n    }\\r\\n\\r\\n    function releaseEthToAddress(address payable receiver, uint256 amount)\\r\\n        external\\r\\n        onlyOwner\\r\\n        whenNotPaused\\r\\n        returns (uint256)\\r\\n    {\\r\\n        require(hasSentToUniswap, \\\"Has not yet sent to Uniswap.\\\");\\r\\n        receiver.transfer(amount);\\r\\n    }\\r\\n\\r\\n    function recoverTokens(address _receiver) external onlyOwner {\\r\\n        require(isRefunding, \\\"Refunds not active\\\");\\r\\n        token.transfer(_receiver, token.balanceOf(address(this)));\\r\\n    }\\r\\n\\r\\n    function redeem() external whenPresaleFinished whenNotPaused {\\r\\n        require(\\r\\n            hasSentToUniswap,\\r\\n            \\\"Must have sent to Uniswap before any redeems.\\\"\\r\\n        );\\r\\n        uint256 claimable = redeemer.calculateReedemable(\\r\\n            msg.sender,\\r\\n            finalEndTime,\\r\\n            totalTokens.mulBP(presaleTokenBP)\\r\\n        );\\r\\n        redeemer.setClaimed(msg.sender, claimable);\\r\\n        token.transfer(msg.sender, claimable);\\r\\n    }\\r\\n\\r\\n    function startRefund() external onlyOwner {\\r\\n        _startRefund();\\r\\n    }\\r\\n\\r\\n    function claimRefund(address payable account) external whenPaused {\\r\\n        require(isRefunding, \\\"Refunds not active\\\");\\r\\n        uint256 refundAmt = getRefundableEth(account);\\r\\n        require(refundAmt > 0, \\\"Nothing to refund\\\");\\r\\n        refundedEth[account] = refundedEth[account].add(refundAmt);\\r\\n        account.transfer(refundAmt);\\r\\n    }\\r\\n\\r\\n    function updateHardcap(uint256 valueWei) external onlyOwner {\\r\\n        hardcap = valueWei;\\r\\n    }\\r\\n\\r\\n    function updateMaxBuy(uint256 valueWei) external onlyOwner {\\r\\n        maxBuyPerAddress = valueWei;\\r\\n    }\\r\\n\\r\\n    function deposit(address payable referrer)\\r\\n        public\\r\\n        payable\\r\\n        nonReentrant\\r\\n        whenNotPaused\\r\\n    {\\r\\n        require(timer.isStarted(), \\\"Presale not yet started.\\\");\\r\\n        require(\\r\\n            now >= access.getAccessTime(msg.sender, timer.startTime()),\\r\\n            \\\"Time must be at least access time.\\\"\\r\\n        );\\r\\n        require(msg.sender != referrer, \\\"Sender cannot be referrer.\\\");\\r\\n        require(\\r\\n            address(this).balance.sub(msg.value) <= hardcap,\\r\\n            \\\"Cannot deposit more than hardcap.\\\"\\r\\n        );\\r\\n        require(!hasSentToUniswap, \\\"Presale Ended, Uniswap has been called.\\\");\\r\\n        uint256 endTime = timer.endTime();\\r\\n        require(\\r\\n            !(now > endTime && endTime != 0),\\r\\n            \\\"Presale Ended, time over limit.\\\"\\r\\n        );\\r\\n        require(\\r\\n            redeemer.accountDeposits(msg.sender).add(msg.value) <=\\r\\n                maxBuyPerAddress,\\r\\n            \\\"Deposit exceeds max buy per address.\\\"\\r\\n        );\\r\\n        bool _isRefunding = timer.updateRefunding();\\r\\n        if (_isRefunding) {\\r\\n            _startRefund();\\r\\n            return;\\r\\n        }\\r\\n        uint256 depositEther = msg.value;\\r\\n        uint256 excess = 0;\\r\\n\\r\\n        //Refund eth in case final purchase needed to end sale without dust errors\\r\\n        if (address(this).balance > hardcap) {\\r\\n            excess = address(this).balance.sub(hardcap);\\r\\n            depositEther = depositEther.sub(excess);\\r\\n        }\\r\\n\\r\\n        redeemer.setDeposit(msg.sender, depositEther);\\r\\n\\r\\n        if (excess != 0) {\\r\\n            msg.sender.transfer(excess);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getRefundableEth(address account) public view returns (uint256) {\\r\\n        if (!isRefunding) return 0;\\r\\n\\r\\n        return redeemer.accountDeposits(account).sub(refundedEth[account]);\\r\\n    }\\r\\n\\r\\n    function isPresaleEnded() public view returns (bool) {\\r\\n        uint256 endTime = timer.endTime();\\r\\n        if (hasSentToUniswap) return true;\\r\\n        return ((address(this).balance >= hardcap) ||\\r\\n            (timer.isStarted() && (now > endTime && endTime != 0)));\\r\\n    }\\r\\n\\r\\n    function _startRefund() internal {\\r\\n        //TODO: Automatically start refund after timer is passed for softcap reach\\r\\n        pause();\\r\\n        isRefunding = true;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/Volumes/Work/Lid/simplified-presales-1.1/contracts/LidSimplifiedPresaleAccess.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\r\\n\\r\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\r\\n//TODO: Replace with abstract sc or interface. mocks should only be for testing\\r\\nimport \\\"./mocks/LidStaking.sol\\\";\\r\\n\\r\\ncontract LidSimplifiedPresaleAccess is Initializable {\\r\\n    using SafeMath for uint256;\\r\\n    LidStaking private staking;\\r\\n\\r\\n    uint256[5] private cutoffs;\\r\\n\\r\\n    function initialize(LidStaking _staking) external initializer {\\r\\n        staking = _staking;\\r\\n        //Precalculated\\r\\n        cutoffs = [\\r\\n            500000 ether,\\r\\n            100000 ether,\\r\\n            50000 ether,\\r\\n            25000 ether,\\r\\n            1 ether\\r\\n        ];\\r\\n    }\\r\\n\\r\\n    function getAccessTime(address account, uint256 startTime)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 accessTime)\\r\\n    {\\r\\n        uint256 stakeValue = staking.stakeValue(account);\\r\\n        if (stakeValue == 0) return startTime.add(15 minutes);\\r\\n        if (stakeValue >= cutoffs[0]) return startTime;\\r\\n        uint256 i = 0;\\r\\n        uint256 stake2 = cutoffs[0];\\r\\n        while (stake2 > stakeValue && i < cutoffs.length) {\\r\\n            i++;\\r\\n            stake2 = cutoffs[i];\\r\\n        }\\r\\n        return startTime.add(i.mul(3 minutes));\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/Volumes/Work/Lid/simplified-presales-1.1/contracts/LidSimplifiedPresaleRedeemer.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/ownership/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\r\\nimport \\\"./uniswapV2Periphery/interfaces/IUniswapV2Router01.sol\\\";\\r\\nimport \\\"./library/BasisPoints.sol\\\";\\r\\nimport \\\"./LidSimplifiedPresaleTimer.sol\\\";\\r\\n\\r\\ncontract LidSimplifiedPresaleRedeemer is Initializable, Ownable {\\r\\n    using BasisPoints for uint256;\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    uint256 public redeemBP;\\r\\n    uint256 public redeemInterval;\\r\\n\\r\\n    uint256 public totalShares;\\r\\n    uint256 public totalDepositors;\\r\\n    mapping(address => uint256) public accountDeposits;\\r\\n    mapping(address => uint256) public accountShares;\\r\\n    mapping(address => uint256) public accountClaimedTokens;\\r\\n\\r\\n    address private presale;\\r\\n\\r\\n    modifier onlyPresaleContract {\\r\\n        require(msg.sender == presale, \\\"Only callable by presale contract.\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function initialize(\\r\\n        uint256 _redeemBP,\\r\\n        uint256 _redeemInterval,\\r\\n        address _presale,\\r\\n        address owner\\r\\n    ) external initializer {\\r\\n        Ownable.initialize(owner);\\r\\n\\r\\n        redeemBP = _redeemBP;\\r\\n        redeemInterval = _redeemInterval;\\r\\n        presale = _presale;\\r\\n    }\\r\\n\\r\\n    function setClaimed(address account, uint256 amount)\\r\\n        external\\r\\n        onlyPresaleContract\\r\\n    {\\r\\n        accountClaimedTokens[account] = accountClaimedTokens[account].add(\\r\\n            amount\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function setDeposit(address account, uint256 deposit)\\r\\n        external\\r\\n        onlyPresaleContract\\r\\n    {\\r\\n        if (accountDeposits[account] == 0)\\r\\n            totalDepositors = totalDepositors.add(1);\\r\\n        accountDeposits[account] = accountDeposits[account].add(deposit);\\r\\n        uint256 sharesToAdd = deposit;\\r\\n        accountShares[account] = accountShares[account].add(sharesToAdd);\\r\\n        totalShares = totalShares.add(sharesToAdd);\\r\\n    }\\r\\n\\r\\n    function calculateRatePerEth(uint256 totalPresaleTokens, uint256 hardCap)\\r\\n        external\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return totalPresaleTokens.mul(1 ether).div(getMaxShares(hardCap));\\r\\n    }\\r\\n\\r\\n    function calculateReedemable(\\r\\n        address account,\\r\\n        uint256 finalEndTime,\\r\\n        uint256 totalPresaleTokens\\r\\n    ) external view returns (uint256) {\\r\\n        if (finalEndTime == 0) return 0;\\r\\n        if (finalEndTime >= now) return 0;\\r\\n        uint256 earnedTokens = accountShares[account]\\r\\n            .mul(totalPresaleTokens)\\r\\n            .div(totalShares);\\r\\n        uint256 claimedTokens = accountClaimedTokens[account];\\r\\n        uint256 cycles = now.sub(finalEndTime).div(redeemInterval).add(1);\\r\\n        uint256 totalRedeemable = earnedTokens.mulBP(redeemBP).mul(cycles);\\r\\n        uint256 claimable;\\r\\n        if (totalRedeemable >= earnedTokens) {\\r\\n            claimable = earnedTokens.sub(claimedTokens);\\r\\n        } else {\\r\\n            claimable = totalRedeemable.sub(claimedTokens);\\r\\n        }\\r\\n        return claimable;\\r\\n    }\\r\\n\\r\\n    function getMaxShares(uint256 hardCap) public pure returns (uint256) {\\r\\n        return hardCap;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/Volumes/Work/Lid/simplified-presales-1.1/contracts/LidSimplifiedPresaleTimer.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/ownership/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\r\\n\\r\\ncontract LidSimplifiedPresaleTimer is Initializable, Ownable {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    uint256 public startTime;\\r\\n    uint256 public endTime;\\r\\n    uint256 public softCap;\\r\\n    address public presale;\\r\\n\\r\\n    uint256 public refundTime;\\r\\n    uint256 public maxBalance;\\r\\n\\r\\n    function initialize(\\r\\n        uint256 _startTime,\\r\\n        uint256 _refundTime,\\r\\n        uint256 _endTime,\\r\\n        uint256 _softCap,\\r\\n        address _presale,\\r\\n        address owner\\r\\n    ) external initializer {\\r\\n        Ownable.initialize(msg.sender);\\r\\n        startTime = _startTime;\\r\\n        refundTime = _refundTime;\\r\\n        endTime = _endTime;\\r\\n        softCap = _softCap;\\r\\n        presale = _presale;\\r\\n        //Due to issue in oz testing suite, the msg.sender might not be owner\\r\\n        _transferOwnership(owner);\\r\\n    }\\r\\n\\r\\n    function setStartTime(uint256 time) external onlyOwner {\\r\\n        startTime = time;\\r\\n    }\\r\\n\\r\\n    function setRefundTime(uint256 time) external onlyOwner {\\r\\n        refundTime = time;\\r\\n    }\\r\\n\\r\\n    function setEndTime(uint256 time) external onlyOwner {\\r\\n        endTime = time;\\r\\n    }\\r\\n\\r\\n    function updateSoftCap(uint256 valueWei) external onlyOwner {\\r\\n        softCap = valueWei;\\r\\n    }\\r\\n\\r\\n    function updateRefunding() external returns (bool) {\\r\\n        if (maxBalance < presale.balance) maxBalance = presale.balance;\\r\\n        if (maxBalance < softCap && now > refundTime) return true;\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    function isStarted() external view returns (bool) {\\r\\n        return (startTime != 0 && now > startTime);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/Volumes/Work/Lid/simplified-presales-1.1/contracts/interfaces/ILidCertifiableToken.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\r\\n\\r\\n\\r\\ninterface ILidCertifiableToken {\\r\\n    function activateTransfers() external;\\r\\n    function activateTax() external;\\r\\n    function mint(address account, uint256 amount) external returns (bool);\\r\\n    function addMinter(address account) external;\\r\\n    function renounceMinter() external;\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n    function isMinter(address account) external view returns (bool);\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"/Volumes/Work/Lid/simplified-presales-1.1/contracts/interfaces/IStakeHandler.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\r\\n\\r\\n\\r\\ninterface IStakeHandler {\\r\\n    function handleStake(address staker, uint stakerDeltaValue, uint stakerFinalValue) external;\\r\\n    function handleUnstake(address staker, uint stakerDeltaValue, uint stakerFinalValue) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/Volumes/Work/Lid/simplified-presales-1.1/contracts/library/BasisPoints.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\r\\n\\r\\n\\r\\nlibrary BasisPoints {\\r\\n    using SafeMath for uint;\\r\\n\\r\\n    uint constant private BASIS_POINTS = 10000;\\r\\n\\r\\n    function mulBP(uint amt, uint bp) internal pure returns (uint) {\\r\\n        if (amt == 0) return 0;\\r\\n        return amt.mul(bp).div(BASIS_POINTS);\\r\\n    }\\r\\n\\r\\n    function divBP(uint amt, uint bp) internal pure returns (uint) {\\r\\n        require(bp > 0, \\\"Cannot divide by zero.\\\");\\r\\n        if (amt == 0) return 0;\\r\\n        return amt.mul(BASIS_POINTS).div(bp);\\r\\n    }\\r\\n\\r\\n    function addBP(uint amt, uint bp) internal pure returns (uint) {\\r\\n        if (amt == 0) return 0;\\r\\n        if (bp == 0) return amt;\\r\\n        return amt.add(mulBP(amt, bp));\\r\\n    }\\r\\n\\r\\n    function subBP(uint amt, uint bp) internal pure returns (uint) {\\r\\n        if (amt == 0) return 0;\\r\\n        if (bp == 0) return amt;\\r\\n        return amt.sub(mulBP(amt, bp));\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/Volumes/Work/Lid/simplified-presales-1.1/contracts/mocks/LidStaking.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/ownership/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\r\\nimport \\\"../library/BasisPoints.sol\\\";\\r\\nimport \\\"../interfaces/IStakeHandler.sol\\\";\\r\\nimport \\\"../interfaces/ILidCertifiableToken.sol\\\";\\r\\n\\r\\n\\r\\ncontract LidStaking is Initializable, Ownable {\\r\\n    using BasisPoints for uint;\\r\\n    using SafeMath for uint;\\r\\n\\r\\n    uint256 constant internal DISTRIBUTION_MULTIPLIER = 2 ** 64;\\r\\n\\r\\n    uint public stakingTaxBP;\\r\\n    uint public unstakingTaxBP;\\r\\n    ILidCertifiableToken private lidToken;\\r\\n\\r\\n    mapping(address => uint) public stakeValue;\\r\\n    mapping(address => int) public stakerPayouts;\\r\\n\\r\\n\\r\\n    uint public totalDistributions;\\r\\n    uint public totalStaked;\\r\\n    uint public totalStakers;\\r\\n    uint public profitPerShare;\\r\\n    uint private emptyStakeTokens; //These are tokens given to the contract when there are no stakers.\\r\\n\\r\\n    IStakeHandler[] public stakeHandlers;\\r\\n    uint public startTime;\\r\\n\\r\\n    uint public registrationFeeWithReferrer;\\r\\n    uint public registrationFeeWithoutReferrer;\\r\\n    mapping(address => uint) public accountReferrals;\\r\\n    mapping(address => bool) public stakerIsRegistered;\\r\\n\\r\\n    event OnDistribute(address sender, uint amountSent);\\r\\n    event OnStake(address sender, uint amount, uint tax);\\r\\n    event OnUnstake(address sender, uint amount, uint tax);\\r\\n    event OnReinvest(address sender, uint amount, uint tax);\\r\\n    event OnWithdraw(address sender, uint amount);\\r\\n\\r\\n    modifier onlyLidToken {\\r\\n        require(msg.sender == address(lidToken), \\\"Can only be called by LidToken contract.\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier whenStakingActive {\\r\\n        require(startTime != 0 && now > startTime, \\\"Staking not yet started.\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function initialize(\\r\\n        uint _stakingTaxBP,\\r\\n        uint _ustakingTaxBP,\\r\\n        uint _registrationFeeWithReferrer,\\r\\n        uint _registrationFeeWithoutReferrer,\\r\\n        address owner,\\r\\n        ILidCertifiableToken _lidToken\\r\\n    ) external initializer {\\r\\n        Ownable.initialize(msg.sender);\\r\\n        stakingTaxBP = _stakingTaxBP;\\r\\n        unstakingTaxBP = _ustakingTaxBP;\\r\\n        lidToken = _lidToken;\\r\\n        registrationFeeWithReferrer = _registrationFeeWithReferrer;\\r\\n        registrationFeeWithoutReferrer = _registrationFeeWithoutReferrer;\\r\\n        //Due to issue in oz testing suite, the msg.sender might not be owner\\r\\n        _transferOwnership(owner);\\r\\n    }\\r\\n\\r\\n    function registerAndStake(uint amount) public {\\r\\n        registerAndStake(amount, address(0x0));\\r\\n    }\\r\\n\\r\\n    function registerAndStake(uint amount, address referrer) public whenStakingActive {\\r\\n        require(!stakerIsRegistered[msg.sender], \\\"Staker must not be registered\\\");\\r\\n        require(lidToken.balanceOf(msg.sender) >= amount, \\\"Must have enough balance to stake amount\\\");\\r\\n        uint finalAmount;\\r\\n        if(address(0x0) == referrer) {\\r\\n            //No referrer\\r\\n            require(amount >= registrationFeeWithoutReferrer, \\\"Must send at least enough LID to pay registration fee.\\\");\\r\\n            distribute(registrationFeeWithoutReferrer);\\r\\n            finalAmount = amount.sub(registrationFeeWithoutReferrer);\\r\\n        } else {\\r\\n            //has referrer\\r\\n            require(amount >= registrationFeeWithReferrer, \\\"Must send at least enough LID to pay registration fee.\\\");\\r\\n            require(lidToken.transferFrom(msg.sender, referrer, registrationFeeWithReferrer), \\\"Stake failed due to failed referral transfer.\\\");\\r\\n            accountReferrals[referrer] = accountReferrals[referrer].add(1);\\r\\n            finalAmount = amount.sub(registrationFeeWithReferrer);\\r\\n        }\\r\\n        stakerIsRegistered[msg.sender] = true;\\r\\n        stake(finalAmount);\\r\\n    }\\r\\n\\r\\n    function stake(uint amount) public whenStakingActive {\\r\\n        require(stakerIsRegistered[msg.sender] == true, \\\"Must be registered to stake.\\\");\\r\\n        require(amount >= 1e18, \\\"Must stake at least one LID.\\\");\\r\\n        require(lidToken.balanceOf(msg.sender) >= amount, \\\"Cannot stake more LID than you hold unstaked.\\\");\\r\\n        if (stakeValue[msg.sender] == 0) totalStakers = totalStakers.add(1);\\r\\n        uint tax = _addStake(amount);\\r\\n        require(lidToken.transferFrom(msg.sender, address(this), amount), \\\"Stake failed due to failed transfer.\\\");\\r\\n        emit OnStake(msg.sender, amount, tax);\\r\\n    }\\r\\n\\r\\n    function unstake(uint amount) external whenStakingActive {\\r\\n        require(amount >= 1e18, \\\"Must unstake at least one LID.\\\");\\r\\n        require(stakeValue[msg.sender] >= amount, \\\"Cannot unstake more LID than you have staked.\\\");\\r\\n        //must withdraw all dividends, to prevent overflows\\r\\n        withdraw(dividendsOf(msg.sender));\\r\\n        if (stakeValue[msg.sender] == amount) totalStakers = totalStakers.sub(1);\\r\\n        totalStaked = totalStaked.sub(amount);\\r\\n        stakeValue[msg.sender] = stakeValue[msg.sender].sub(amount);\\r\\n\\r\\n        uint tax = findTaxAmount(amount, unstakingTaxBP);\\r\\n        uint earnings = amount.sub(tax);\\r\\n        _increaseProfitPerShare(tax);\\r\\n        stakerPayouts[msg.sender] = uintToInt(profitPerShare.mul(stakeValue[msg.sender]));\\r\\n\\r\\n        for (uint i=0; i < stakeHandlers.length; i++) {\\r\\n            stakeHandlers[i].handleUnstake(msg.sender, amount, stakeValue[msg.sender]);\\r\\n        }\\r\\n\\r\\n        require(lidToken.transferFrom(address(this), msg.sender, earnings), \\\"Unstake failed due to failed transfer.\\\");\\r\\n        emit OnUnstake(msg.sender, amount, tax);\\r\\n    }\\r\\n\\r\\n    function withdraw(uint amount) public whenStakingActive {\\r\\n        require(dividendsOf(msg.sender) >= amount, \\\"Cannot withdraw more dividends than you have earned.\\\");\\r\\n        stakerPayouts[msg.sender] = stakerPayouts[msg.sender] + uintToInt(amount.mul(DISTRIBUTION_MULTIPLIER));\\r\\n        lidToken.transfer(msg.sender, amount);\\r\\n        emit OnWithdraw(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    function reinvest(uint amount) external whenStakingActive {\\r\\n        require(dividendsOf(msg.sender) >= amount, \\\"Cannot reinvest more dividends than you have earned.\\\");\\r\\n        uint payout = amount.mul(DISTRIBUTION_MULTIPLIER);\\r\\n        stakerPayouts[msg.sender] = stakerPayouts[msg.sender] + uintToInt(payout);\\r\\n        uint tax = _addStake(amount);\\r\\n        emit OnReinvest(msg.sender, amount, tax);\\r\\n    }\\r\\n\\r\\n    function distribute(uint amount) public {\\r\\n        require(lidToken.balanceOf(msg.sender) >= amount, \\\"Cannot distribute more LID than you hold unstaked.\\\");\\r\\n        totalDistributions = totalDistributions.add(amount);\\r\\n        _increaseProfitPerShare(amount);\\r\\n        require(\\r\\n            lidToken.transferFrom(msg.sender, address(this), amount),\\r\\n            \\\"Distribution failed due to failed transfer.\\\"\\r\\n        );\\r\\n        emit OnDistribute(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    function handleTaxDistribution(uint amount) external onlyLidToken {\\r\\n        totalDistributions = totalDistributions.add(amount);\\r\\n        _increaseProfitPerShare(amount);\\r\\n        emit OnDistribute(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    function dividendsOf(address staker) public view returns (uint) {\\r\\n        int divPayout = uintToInt(profitPerShare.mul(stakeValue[staker]));\\r\\n        require(divPayout >= stakerPayouts[staker], \\\"dividend calc overflow\\\");\\r\\n        return uint(divPayout - stakerPayouts[staker])\\r\\n            .div(DISTRIBUTION_MULTIPLIER);\\r\\n    }\\r\\n\\r\\n    function findTaxAmount(uint value, uint taxBP) public pure returns (uint) {\\r\\n        return value.mulBP(taxBP);\\r\\n    }\\r\\n\\r\\n    function numberStakeHandlersRegistered() external view returns (uint) {\\r\\n        return stakeHandlers.length;\\r\\n    }\\r\\n\\r\\n    function registerStakeHandler(IStakeHandler sc) external onlyOwner {\\r\\n        stakeHandlers.push(sc);\\r\\n    }\\r\\n\\r\\n    function unregisterStakeHandler(uint index) external onlyOwner {\\r\\n        IStakeHandler sc = stakeHandlers[stakeHandlers.length-1];\\r\\n        stakeHandlers.pop();\\r\\n        stakeHandlers[index] = sc;\\r\\n    }\\r\\n\\r\\n    function setStakingBP(uint valueBP) external onlyOwner {\\r\\n        require(valueBP < 10000, \\\"Tax connot be over 100% (10000 BP)\\\");\\r\\n        stakingTaxBP = valueBP;\\r\\n    }\\r\\n\\r\\n    function setUnstakingBP(uint valueBP) external onlyOwner {\\r\\n        require(valueBP < 10000, \\\"Tax connot be over 100% (10000 BP)\\\");\\r\\n        unstakingTaxBP = valueBP;\\r\\n    }\\r\\n\\r\\n    function setStartTime(uint _startTime) external onlyOwner {\\r\\n        startTime = _startTime;\\r\\n    }\\r\\n\\r\\n    function setRegistrationFees(uint valueWithReferrer, uint valueWithoutReferrer) external onlyOwner {\\r\\n        registrationFeeWithReferrer = valueWithReferrer;\\r\\n        registrationFeeWithoutReferrer = valueWithoutReferrer;\\r\\n    }\\r\\n\\r\\n    function uintToInt(uint val) internal pure returns (int) {\\r\\n        if (val >= uint(-1).div(2)) {\\r\\n            require(false, \\\"Overflow. Cannot convert uint to int.\\\");\\r\\n        } else {\\r\\n            return int(val);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _addStake(uint amount) internal returns (uint tax) {\\r\\n        tax = findTaxAmount(amount, stakingTaxBP);\\r\\n        uint stakeAmount = amount.sub(tax);\\r\\n        totalStaked = totalStaked.add(stakeAmount);\\r\\n        stakeValue[msg.sender] = stakeValue[msg.sender].add(stakeAmount);\\r\\n        for (uint i=0; i < stakeHandlers.length; i++) {\\r\\n            stakeHandlers[i].handleStake(msg.sender, stakeAmount, stakeValue[msg.sender]);\\r\\n        }\\r\\n        uint payout = profitPerShare.mul(stakeAmount);\\r\\n        stakerPayouts[msg.sender] = stakerPayouts[msg.sender] + uintToInt(payout);\\r\\n        _increaseProfitPerShare(tax);\\r\\n    }\\r\\n\\r\\n    function _increaseProfitPerShare(uint amount) internal {\\r\\n        if (totalStaked != 0) {\\r\\n            if (emptyStakeTokens != 0) {\\r\\n                amount = amount.add(emptyStakeTokens);\\r\\n                emptyStakeTokens = 0;\\r\\n            }\\r\\n            profitPerShare = profitPerShare.add(amount.mul(DISTRIBUTION_MULTIPLIER).div(totalStaked));\\r\\n        } else {\\r\\n            emptyStakeTokens = emptyStakeTokens.add(amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"/Volumes/Work/Lid/simplified-presales-1.1/contracts/uniswapV2Periphery/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity =0.5.16;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n\\n    function WETH() external view returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context is Initializable {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor () internal { }\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/access/Roles.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @title Roles\\n * @dev Library for managing addresses assigned to a Role.\\n */\\nlibrary Roles {\\n    struct Role {\\n        mapping (address => bool) bearer;\\n    }\\n\\n    /**\\n     * @dev Give an account access to this role.\\n     */\\n    function add(Role storage role, address account) internal {\\n        require(!has(role, account), \\\"Roles: account already has role\\\");\\n        role.bearer[account] = true;\\n    }\\n\\n    /**\\n     * @dev Remove an account's access to this role.\\n     */\\n    function remove(Role storage role, address account) internal {\\n        require(has(role, account), \\\"Roles: account does not have role\\\");\\n        role.bearer[account] = false;\\n    }\\n\\n    /**\\n     * @dev Check if an account has this role.\\n     * @return bool\\n     */\\n    function has(Role storage role, address account) internal view returns (bool) {\\n        require(account != address(0), \\\"Roles: account is the zero address\\\");\\n        return role.bearer[account];\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/access/roles/PauserRole.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"../Roles.sol\\\";\\n\\ncontract PauserRole is Initializable, Context {\\n    using Roles for Roles.Role;\\n\\n    event PauserAdded(address indexed account);\\n    event PauserRemoved(address indexed account);\\n\\n    Roles.Role private _pausers;\\n\\n    function initialize(address sender) public initializer {\\n        if (!isPauser(sender)) {\\n            _addPauser(sender);\\n        }\\n    }\\n\\n    modifier onlyPauser() {\\n        require(isPauser(_msgSender()), \\\"PauserRole: caller does not have the Pauser role\\\");\\n        _;\\n    }\\n\\n    function isPauser(address account) public view returns (bool) {\\n        return _pausers.has(account);\\n    }\\n\\n    function addPauser(address account) public onlyPauser {\\n        _addPauser(account);\\n    }\\n\\n    function renouncePauser() public {\\n        _removePauser(_msgSender());\\n    }\\n\\n    function _addPauser(address account) internal {\\n        _pausers.add(account);\\n        emit PauserAdded(account);\\n    }\\n\\n    function _removePauser(address account) internal {\\n        _pausers.remove(account);\\n        emit PauserRemoved(account);\\n    }\\n\\n    uint256[50] private ______gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/lifecycle/Pausable.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\n\\nimport \\\"../GSN/Context.sol\\\";\\nimport \\\"../access/roles/PauserRole.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\ncontract Pausable is Initializable, Context, PauserRole {\\n    /**\\n     * @dev Emitted when the pause is triggered by a pauser (`account`).\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by a pauser (`account`).\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state. Assigns the Pauser role\\n     * to the deployer.\\n     */\\n    function initialize(address sender) public initializer {\\n        PauserRole.initialize(sender);\\n\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!_paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     */\\n    modifier whenPaused() {\\n        require(_paused, \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Called by a pauser to pause, triggers stopped state.\\n     */\\n    function pause() public onlyPauser whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Called by a pauser to unpause, returns to normal state.\\n     */\\n    function unpause() public onlyPauser whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    uint256[50] private ______gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/ownership/Ownable.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\n\\nimport \\\"../GSN/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Initializable, Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function initialize(address sender) public initializer {\\n        _owner = sender;\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * > Note: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n\\n    uint256[50] private ______gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n */\\ncontract ReentrancyGuard is Initializable {\\n    // counter to allow mutex lock with only one SSTORE operation\\n    uint256 private _guardCounter;\\n\\n    function initialize() public initializer {\\n        // The counter starts at one to prevent changing it from zero to a non-zero\\n        // value, which is a more expensive operation.\\n        _guardCounter = 1;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _guardCounter += 1;\\n        uint256 localCounter = _guardCounter;\\n        _;\\n        require(localCounter == _guardCounter, \\\"ReentrancyGuard: reentrant call\\\");\\n    }\\n\\n    uint256[50] private ______gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/upgrades/contracts/Initializable.sol\": {\r\n      \"content\": \"pragma solidity >=0.4.24 <0.7.0;\\n\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    address self = address(this);\\n    uint256 cs;\\n    assembly { cs := extcodesize(self) }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"byzantium\",\r\n    \"libraries\": {\r\n      \"\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"claimRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"earnedReferrals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ethPoolBPs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ethPools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getRefundableEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardcap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasIssuedEths\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasIssuedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasSentToUniswap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxBuyPerAddress\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_hardcap\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"contract LidSimplifiedPresaleTimer\",\"name\":\"_timer\",\"type\":\"address\"},{\"internalType\":\"contract LidSimplifiedPresaleRedeemer\",\"name\":\"_redeemer\",\"type\":\"address\"},{\"internalType\":\"contract LidSimplifiedPresaleAccess\",\"name\":\"_access\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV2Router01\",\"name\":\"_uniswapRouter\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPresaleEnded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isRefunding\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"issueEths\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"issueTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxBuyPerAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleTokenBP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"recoverTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"redeem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"refundedEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"releaseEthToAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sendToUniswap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_uniswapEthBP\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_ethPools\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_ethPoolBPs\",\"type\":\"uint256[]\"}],\"name\":\"setEthPools\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_uniswapTokenBP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_presaleTokenBP\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_tokenPools\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenPoolBPs\",\"type\":\"uint256[]\"}],\"name\":\"setTokenPools\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenPoolBPs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenPools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"uniswapEthBP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"uniswapTokenBP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"valueWei\",\"type\":\"uint256\"}],\"name\":\"updateHardcap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"valueWei\",\"type\":\"uint256\"}],\"name\":\"updateMaxBuy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"LidSimplifiedPresale","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"byzantium","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}