{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.12;\r\n\r\ninterface IKeep3rV1Oracle {\r\n    function sample(address tokenIn, uint amountIn, address tokenOut, uint points, uint window) external view returns (uint[] memory);\r\n    function current(address tokenIn, uint amountIn, address tokenOut) external view returns (uint amountOut);\r\n}\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint);\r\n}\r\n\r\ncontract Keep3rV1Volatility {\r\n    \r\n    uint private constant FIXED_1 = 0x080000000000000000000000000000000;\r\n    uint private constant FIXED_2 = 0x100000000000000000000000000000000;\r\n    uint private constant SQRT_1 = 13043817825332782212;\r\n    uint private constant LNX = 3988425491;\r\n    uint private constant LOG_10_2 = 3010299957;\r\n    uint private constant LOG_E_2 = 6931471806;\r\n    uint private constant BASE = 1e10;\r\n    \r\n    IKeep3rV1Oracle public constant KV1O = IKeep3rV1Oracle(0x73353801921417F465377c8d898c6f4C0270282C);\r\n    address public constant WETH = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n\r\n    function floorLog2(uint256 _n) public pure returns (uint8) {\r\n        uint8 res = 0;\r\n\r\n        if (_n < 256) {\r\n            // At most 8 iterations\r\n            while (_n > 1) {\r\n                _n >>= 1;\r\n                res += 1;\r\n            }\r\n        } else {\r\n            // Exactly 8 iterations\r\n            for (uint8 s = 128; s > 0; s >>= 1) {\r\n                if (_n >= (uint(1) << s)) {\r\n                    _n >>= s;\r\n                    res |= s;\r\n                }\r\n            }\r\n        }\r\n\r\n        return res;\r\n    }\r\n    \r\n    function ln(uint256 x) public pure returns (uint) {\r\n        uint res = 0;\r\n\r\n        // If x >= 2, then we compute the integer part of log2(x), which is larger than 0.\r\n        if (x >= FIXED_2) {\r\n            uint8 count = floorLog2(x / FIXED_1);\r\n            x >>= count; // now x < 2\r\n            res = count * FIXED_1;\r\n        }\r\n\r\n        // If x > 1, then we compute the fraction part of log2(x), which is larger than 0.\r\n        if (x > FIXED_1) {\r\n            for (uint8 i = 127; i > 0; --i) {\r\n                x = (x * x) / FIXED_1; // now 1 < x < 4\r\n                if (x >= FIXED_2) {\r\n                    x >>= 1; // now 1 < x < 2\r\n                    res += uint(1) << (i - 1);\r\n                }\r\n            }\r\n        }\r\n\r\n        return res * LOG_E_2 / BASE;\r\n    }\r\n    \r\n    /**\r\n     * @dev computes e ^ (x / FIXED_1) * FIXED_1\r\n     * input range: 0 <= x <= OPT_EXP_MAX_VAL - 1\r\n     * auto-generated via 'PrintFunctionOptimalExp.py'\r\n     * Detailed description:\r\n     * - Rewrite the input as a sum of binary exponents and a single residual r, as small as possible\r\n     * - The exponentiation of each binary exponent is given (pre-calculated)\r\n     * - The exponentiation of r is calculated via Taylor series for e^x, where x = r\r\n     * - The exponentiation of the input is calculated by multiplying the intermediate results above\r\n     * - For example: e^5.521692859 = e^(4 + 1 + 0.5 + 0.021692859) = e^4 * e^1 * e^0.5 * e^0.021692859\r\n     */\r\n    function optimalExp(uint256 x) public pure returns (uint256) {\r\n        uint256 res = 0;\r\n\r\n        uint256 y;\r\n        uint256 z;\r\n\r\n        z = y = x % 0x10000000000000000000000000000000; // get the input modulo 2^(-3)\r\n        z = (z * y) / FIXED_1;\r\n        res += z * 0x10e1b3be415a0000; // add y^02 * (20! / 02!)\r\n        z = (z * y) / FIXED_1;\r\n        res += z * 0x05a0913f6b1e0000; // add y^03 * (20! / 03!)\r\n        z = (z * y) / FIXED_1;\r\n        res += z * 0x0168244fdac78000; // add y^04 * (20! / 04!)\r\n        z = (z * y) / FIXED_1;\r\n        res += z * 0x004807432bc18000; // add y^05 * (20! / 05!)\r\n        z = (z * y) / FIXED_1;\r\n        res += z * 0x000c0135dca04000; // add y^06 * (20! / 06!)\r\n        z = (z * y) / FIXED_1;\r\n        res += z * 0x0001b707b1cdc000; // add y^07 * (20! / 07!)\r\n        z = (z * y) / FIXED_1;\r\n        res += z * 0x000036e0f639b800; // add y^08 * (20! / 08!)\r\n        z = (z * y) / FIXED_1;\r\n        res += z * 0x00000618fee9f800; // add y^09 * (20! / 09!)\r\n        z = (z * y) / FIXED_1;\r\n        res += z * 0x0000009c197dcc00; // add y^10 * (20! / 10!)\r\n        z = (z * y) / FIXED_1;\r\n        res += z * 0x0000000e30dce400; // add y^11 * (20! / 11!)\r\n        z = (z * y) / FIXED_1;\r\n        res += z * 0x000000012ebd1300; // add y^12 * (20! / 12!)\r\n        z = (z * y) / FIXED_1;\r\n        res += z * 0x0000000017499f00; // add y^13 * (20! / 13!)\r\n        z = (z * y) / FIXED_1;\r\n        res += z * 0x0000000001a9d480; // add y^14 * (20! / 14!)\r\n        z = (z * y) / FIXED_1;\r\n        res += z * 0x00000000001c6380; // add y^15 * (20! / 15!)\r\n        z = (z * y) / FIXED_1;\r\n        res += z * 0x000000000001c638; // add y^16 * (20! / 16!)\r\n        z = (z * y) / FIXED_1;\r\n        res += z * 0x0000000000001ab8; // add y^17 * (20! / 17!)\r\n        z = (z * y) / FIXED_1;\r\n        res += z * 0x000000000000017c; // add y^18 * (20! / 18!)\r\n        z = (z * y) / FIXED_1;\r\n        res += z * 0x0000000000000014; // add y^19 * (20! / 19!)\r\n        z = (z * y) / FIXED_1;\r\n        res += z * 0x0000000000000001; // add y^20 * (20! / 20!)\r\n        res = res / 0x21c3677c82b40000 + y + FIXED_1; // divide by 20! and then add y^1 / 1! + y^0 / 0!\r\n\r\n        if ((x & 0x010000000000000000000000000000000) != 0)\r\n            res = (res * 0x1c3d6a24ed82218787d624d3e5eba95f9) / 0x18ebef9eac820ae8682b9793ac6d1e776; // multiply by e^2^(-3)\r\n        if ((x & 0x020000000000000000000000000000000) != 0)\r\n            res = (res * 0x18ebef9eac820ae8682b9793ac6d1e778) / 0x1368b2fc6f9609fe7aceb46aa619baed4; // multiply by e^2^(-2)\r\n        if ((x & 0x040000000000000000000000000000000) != 0)\r\n            res = (res * 0x1368b2fc6f9609fe7aceb46aa619baed5) / 0x0bc5ab1b16779be3575bd8f0520a9f21f; // multiply by e^2^(-1)\r\n        if ((x & 0x080000000000000000000000000000000) != 0)\r\n            res = (res * 0x0bc5ab1b16779be3575bd8f0520a9f21e) / 0x0454aaa8efe072e7f6ddbab84b40a55c9; // multiply by e^2^(+0)\r\n        if ((x & 0x100000000000000000000000000000000) != 0)\r\n            res = (res * 0x0454aaa8efe072e7f6ddbab84b40a55c5) / 0x00960aadc109e7a3bf4578099615711ea; // multiply by e^2^(+1)\r\n        if ((x & 0x200000000000000000000000000000000) != 0)\r\n            res = (res * 0x00960aadc109e7a3bf4578099615711d7) / 0x0002bf84208204f5977f9a8cf01fdce3d; // multiply by e^2^(+2)\r\n        if ((x & 0x400000000000000000000000000000000) != 0)\r\n            res = (res * 0x0002bf84208204f5977f9a8cf01fdc307) / 0x0000003c6ab775dd0b95b4cbee7e65d11; // multiply by e^2^(+3)\r\n\r\n        return res;\r\n    }\r\n    \r\n    function quote(address tokenIn, address tokenOut, uint t) public view returns (uint call, uint put) {\r\n        uint _price = price(tokenIn, tokenOut);\r\n        return quotePrice(tokenIn, tokenIn == WETH ? tokenOut : WETH, t, _price, _price);\r\n    }\r\n    \r\n    function price(address tokenIn, address tokenOut) public view returns (uint) {\r\n        if (tokenIn == WETH) {\r\n            return KV1O.current(WETH, 1e18, tokenOut);\r\n        } else {\r\n            uint _weth = KV1O.current(tokenIn, uint(10)**IERC20(tokenIn).decimals(), WETH);\r\n            if (tokenOut == WETH) {\r\n                return _weth;\r\n            } else {\r\n                return KV1O.current(WETH, _weth, tokenOut);\r\n            }\r\n        }\r\n    }\r\n    \r\n    function quotePrice(address tokenIn, address tokenOut, uint t, uint sp, uint st) public view returns (uint call, uint put) {\r\n        uint v = rVol(tokenIn, tokenOut, 4, 24);\r\n        return quoteAll(t, v, sp, st);\r\n    }\r\n    \r\n    function quoteAll(uint t, uint v, uint sp, uint st) public pure returns (uint call, uint put) {\r\n        uint _c;\r\n        uint _p;\r\n        \r\n        if (sp > st) {\r\n            _c = C(t, v, sp, st);\r\n            _p = st-sp+_c;\r\n        } else {\r\n            _p = C(t, v, st, sp);\r\n            _c = st-sp+_p;\r\n        }\r\n        return (_c, _p);\r\n    }\r\n\t\r\n\tfunction C(uint t, uint v, uint sp, uint st) public pure returns (uint) {\r\n\t    if (sp == st) {\r\n\t        return LNX * sp / 1e10 * v / 1e18 * sqrt(1e18 * t / 365) / 1e9;\r\n\t    }\r\n\t    uint sigma = ((v**2)/2);\r\n        uint sigmaB = 1e36;\r\n        \r\n        uint sig = 1e18 * sigma / sigmaB * t / 365;\r\n        \r\n        uint sSQRT = v * sqrt(1e18 * t / 365) / 1e9;\r\n        \r\n        uint d1 = 1e18 * ln(FIXED_1 * sp / st) / FIXED_1;\r\n        d1 = (d1 + sig) * 1e18 / sSQRT;\r\n        uint d2 = d1 - sSQRT;\r\n        \r\n        uint cdfD1 = ncdf(FIXED_1 * d1 / 1e18);\r\n        uint cdfD2 = cdf(int(FIXED_1) * int(d2) / 1e18);\r\n        \r\n        return sp * cdfD1 / 1e14 - st * cdfD2 / 1e14;\r\n\t}\r\n    \r\n    function ncdf(uint x) public pure returns (uint) {\r\n        int t1 = int(1e7 + (2315419 * x / FIXED_1));\r\n        uint exp = x / 2 * x / FIXED_1;\r\n        int d = int(3989423 * FIXED_1 / optimalExp(uint(exp)));\r\n        uint prob = uint(d * (3193815 + ( -3565638 + (17814780 + (-18212560 + 13302740 * 1e7 / t1) * 1e7 / t1) * 1e7 / t1) * 1e7 / t1) * 1e7 / t1);\r\n        if( x > 0 ) prob = 1e14 - prob;\r\n        return prob;\r\n    }\r\n\r\n    /**\r\n     * @notice Takes the absolute value of a given number\r\n     * @dev Helper function\r\n     * @param _number The specified number\r\n     * @return The absolute value of the number\r\n     */\r\n    function abs(int256 _number) public pure returns (uint256) {\r\n        return _number < 0 ? uint256(_number * (-1)) : uint256(_number);\r\n    }\r\n    \r\n    function cdf(int x) public pure returns (uint) {\r\n        int t1 = int(1e7 + int(2315419 * abs(x) / FIXED_1));\r\n        uint exp = uint(x / 2 * x) / FIXED_1;\r\n        int d = int(3989423 * FIXED_1 / optimalExp(uint(exp)));\r\n        uint prob = uint(d * (3193815 + ( -3565638 + (17814780 + (-18212560 + 13302740 * 1e7 / t1) * 1e7 / t1) * 1e7 / t1) * 1e7 / t1) * 1e7 / t1);\r\n        if( x > 0 ) prob = 1e14 - prob;\r\n        return prob;\r\n    }\r\n    \r\n    function generalLog(uint256 x) public pure returns (uint) {\r\n        uint res = 0;\r\n\r\n        // If x >= 2, then we compute the integer part of log2(x), which is larger than 0.\r\n        if (x >= FIXED_2) {\r\n            uint8 count = floorLog2(x / FIXED_1);\r\n            x >>= count; // now x < 2\r\n            res = count * FIXED_1;\r\n        }\r\n\r\n        // If x > 1, then we compute the fraction part of log2(x), which is larger than 0.\r\n        if (x > FIXED_1) {\r\n            for (uint8 i = 127; i > 0; --i) {\r\n                x = (x * x) / FIXED_1; // now 1 < x < 4\r\n                if (x >= FIXED_2) {\r\n                    x >>= 1; // now 1 < x < 2\r\n                    res += uint(1) << (i - 1);\r\n                }\r\n            }\r\n        }\r\n\r\n        return res * LOG_10_2 / BASE;\r\n    }\r\n    \r\n    function sqrt(uint x) public pure returns (uint y) {\r\n        uint z = (x + 1) / 2;\r\n        y = x;\r\n        while (z < y) {\r\n            y = z;\r\n            z = (x / z + z) / 2;\r\n        }\r\n    }\r\n    \r\n    function vol(uint[] memory p) public pure returns (uint x) {\r\n        for (uint8 i = 1; i <= (p.length-1); i++) {\r\n            x += ((generalLog(p[i] * FIXED_1) - generalLog(p[i-1] * FIXED_1)))**2;\r\n            //denom += FIXED_1**2;\r\n        }\r\n        //return (sum, denom);\r\n        x = sqrt(uint(252) * sqrt(x / (p.length-1)));\r\n        return uint(1e18) * x / SQRT_1;\r\n    }\r\n    \r\n    function rVol(address tokenIn, address tokenOut, uint points, uint window) public view returns (uint) {\r\n        return vol(KV1O.sample(tokenIn, uint(10)**IERC20(tokenIn).decimals(), tokenOut, points, window));\r\n    }\r\n    \r\n    function rVolHourly(address tokenIn, address tokenOut, uint points) external view returns (uint) {\r\n        return rVol(tokenIn, tokenOut, points, 2);\r\n    }\r\n    \r\n    function rVolDaily(address tokenIn, address tokenOut, uint points) external view returns (uint) {\r\n        return rVol(tokenIn, tokenOut, points, 48);\r\n    }\r\n    \r\n    function rVolWeekly(address tokenIn, address tokenOut, uint points) external view returns (uint) {\r\n        return rVol(tokenIn, tokenOut, points, 336);\r\n    }\r\n    \r\n    function rVolHourlyRecent(address tokenIn, address tokenOut) external view returns (uint) {\r\n        return rVol(tokenIn, tokenOut, 2, 2);\r\n    }\r\n    \r\n    function rVolDailyRecent(address tokenIn, address tokenOut) external view returns (uint) {\r\n        return rVol(tokenIn, tokenOut, 2, 48);\r\n    }\r\n    \r\n    function rVolWeeklyRecent(address tokenIn, address tokenOut) external view returns (uint) {\r\n        return rVol(tokenIn, tokenOut, 2, 336);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"v\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"st\",\"type\":\"uint256\"}],\"name\":\"C\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"KV1O\",\"outputs\":[{\"internalType\":\"contract IKeep3rV1Oracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_number\",\"type\":\"int256\"}],\"name\":\"abs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"}],\"name\":\"cdf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_n\",\"type\":\"uint256\"}],\"name\":\"floorLog2\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"generalLog\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"ln\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"ncdf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"optimalExp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"call\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"put\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"v\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"st\",\"type\":\"uint256\"}],\"name\":\"quoteAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"call\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"put\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"st\",\"type\":\"uint256\"}],\"name\":\"quotePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"call\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"put\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"window\",\"type\":\"uint256\"}],\"name\":\"rVol\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"}],\"name\":\"rVolDaily\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"name\":\"rVolDailyRecent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"}],\"name\":\"rVolHourly\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"name\":\"rVolHourlyRecent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"}],\"name\":\"rVolWeekly\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"name\":\"rVolWeeklyRecent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"sqrt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"p\",\"type\":\"uint256[]\"}],\"name\":\"vol\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"Keep3rV1Volatility","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://fcab0c31071415bfa6951b11db8135372563799b35f350c3c950c160aed15140"}]}