{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.2;\r\n\r\n/***************\r\n**            **\r\n** INTERFACES **\r\n**            **\r\n***************/\r\n\r\n/**\r\n * @title  Interface for Kong ERC20 Token Contract.\r\n */\r\ninterface KongERC20Interface {\r\n\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n  function mint(uint256 mintedAmount, address recipient) external;\r\n  function getMintingLimit() external returns(uint256);\r\n\r\n}\r\n\r\n/**\r\n * @title Interface for EllipticCurve contract.\r\n */\r\ninterface EllipticCurveInterface {\r\n\r\n    function validateSignature(bytes32 message, uint[2] calldata rs, uint[2] calldata Q) external view returns (bool);\r\n\r\n}\r\n\r\n/****************************\r\n**                         **\r\n** OPEN ZEPPELIN CONTRACTS **\r\n**                         **\r\n****************************/\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**********************************\r\n**                               **\r\n** REGISTER DIRECT MINT CONTRACT **\r\n**                               **\r\n**********************************/\r\n\r\n/**\r\n * @title Register Contract.\r\n */\r\ncontract RegisterDirectMint {\r\n  using SafeMath for uint256;\r\n\r\n  // Account with the right to adjust the set of minters.\r\n  address public _owner;\r\n\r\n  // Address of the Kong ERC20 account.\r\n  address public _kongERC20Address;\r\n\r\n  // Sum of Kong amounts marked as mintable for registered devices.\r\n  uint256 public _totalMintable;\r\n\r\n  // Minters.\r\n  mapping (address => bool) public _minters;\r\n\r\n  // Minting caps.\r\n  mapping (address => uint256) public _mintingCaps;\r\n\r\n  //\r\n  struct Device {\r\n    bytes32 tertiaryPublicKeyHash;\r\n    bytes32 hardwareHash;\r\n    uint256 kongAmount;\r\n    uint256 mintableTime;\r\n    bool mintable;\r\n  }\r\n\r\n  // Registered devices.\r\n  mapping(bytes32 => Device) internal _devices;\r\n\r\n  /**\r\n   * @dev Emit when device is registered.\r\n   */\r\n  event Registration(\r\n    bytes32 primaryPublicKeyHash,\r\n    bytes32 tertiaryPublicKeyHash,\r\n    bytes32 hardwareHash,\r\n    uint256 kongAmount,\r\n    uint256 mintableTime,\r\n    bool mintable\r\n  );\r\n\r\n  /**\r\n   * @dev Emit when minting rights are delegated / removed.\r\n   */\r\n  event MinterAddition (\r\n    address minter,\r\n    uint256 mintingCap\r\n  );\r\n\r\n  event MinterRemoval (\r\n    address minter\r\n  );\r\n\r\n  /**\r\n   * @dev Constructor.\r\n   */\r\n  constructor(address owner, address kongAddress) public {\r\n\r\n    // Set address of owner.\r\n    _owner = owner;\r\n\r\n    // Set address of Kong ERC20 contract.\r\n    _kongERC20Address = kongAddress;\r\n\r\n    // Set minting cap of owner account.\r\n    _mintingCaps[_owner] = (2 ** 25 + 2 ** 24 + 2 ** 23 + 2 ** 22) * 10 ** 18;\r\n\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account but owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(_owner == msg.sender, 'Can only be called by owner.');\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account but owner or registered minter.\r\n   */\r\n  modifier onlyOwnerOrMinter() {\r\n    require(_owner == msg.sender || _minters[msg.sender] == true, 'Can only be called by owner or minter.');\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Endow `newMinter` with right to add mintable devices up to `mintingCap`.\r\n   */\r\n  function delegateMintingRights(\r\n    address newMinter,\r\n    uint256 mintingCap\r\n  )\r\n    public\r\n    onlyOwner\r\n  {\r\n    // Delegate minting rights.\r\n    _mintingCaps[_owner] = _mintingCaps[_owner].sub(mintingCap);\r\n    _mintingCaps[newMinter] = _mintingCaps[newMinter].add(mintingCap);\r\n\r\n    // Add newMinter to dictionary of minters.\r\n    _minters[newMinter] = true;\r\n\r\n    // Emit event.\r\n    emit MinterAddition(newMinter, _mintingCaps[newMinter]);\r\n  }\r\n\r\n  /**\r\n   * @dev Remove address from the mapping of _minters.\r\n   */\r\n  function removeMintingRights(\r\n    address minter\r\n  )\r\n    public\r\n    onlyOwner\r\n  {\r\n    // Cannot remove rights from _owner.\r\n    require(_owner != minter, 'Cannot remove owner from minters.');\r\n\r\n    // Adjust minting rights.\r\n    _mintingCaps[_owner] = _mintingCaps[_owner].add(_mintingCaps[minter]);\r\n    _mintingCaps[minter] = 0;\r\n\r\n    // Deactivate minter.\r\n    _minters[minter] = false;\r\n\r\n    // Emit event.\r\n    emit MinterRemoval(minter);\r\n  }\r\n\r\n  /**\r\n   * @dev Register a new device.\r\n   */\r\n  function registerDevice(\r\n    bytes32 primaryPublicKeyHash,\r\n    bytes32 tertiaryPublicKeyHash,\r\n    bytes32 hardwareHash,\r\n    uint256 kongAmount,\r\n    uint256 mintableTime,\r\n    bool mintable\r\n  )\r\n    public\r\n    onlyOwnerOrMinter\r\n  {\r\n    // Verify that this device has not been registered yet.\r\n    require(_devices[primaryPublicKeyHash].tertiaryPublicKeyHash == \"\", 'Already registered.');\r\n\r\n    // Verify the cumulative limit for mintable Kong has not been exceeded.\r\n    if (mintable) {\r\n\r\n      uint256 _maxMinted = KongERC20Interface(_kongERC20Address).getMintingLimit();\r\n      require(_totalMintable.add(kongAmount) <= _maxMinted, 'Exceeds cumulative limit.');\r\n\r\n      // Increment _totalMintable.\r\n      _totalMintable += kongAmount;\r\n\r\n      // Adjust minting cap. Throws on underflow / Guarantees minter does not exceed its limit.\r\n      _mintingCaps[msg.sender] = _mintingCaps[msg.sender].sub(kongAmount);\r\n    }\r\n\r\n    // Create device struct.\r\n    _devices[primaryPublicKeyHash] = Device(\r\n      tertiaryPublicKeyHash,\r\n      hardwareHash,\r\n      kongAmount,\r\n      mintableTime,\r\n      mintable\r\n    );\r\n\r\n    // Emit event.\r\n    emit Registration(\r\n      primaryPublicKeyHash,\r\n      tertiaryPublicKeyHash,\r\n      hardwareHash,      \r\n      kongAmount,\r\n      mintableTime,\r\n      mintable\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Mint registered `kongAmount` for `_devices[primaryPublicKeyHash]` to `recipient`.\r\n   */\r\n  function mintKong(\r\n    bytes32 primaryPublicKeyHash,\r\n    address recipient\r\n  )\r\n    external\r\n    onlyOwnerOrMinter\r\n  {\r\n    // Get Kong details.\r\n    Device memory d = _devices[primaryPublicKeyHash];\r\n\r\n    // Verify that Kong is mintable.\r\n    require(d.mintable, 'Not mintable / already minted.');\r\n    require(block.timestamp >= d.mintableTime, 'Cannot mint yet.');\r\n\r\n    // Set status to minted.\r\n    _devices[primaryPublicKeyHash].mintable = false;\r\n\r\n    // Mint.\r\n    KongERC20Interface(_kongERC20Address).mint(d.kongAmount, recipient);\r\n  }\r\n\r\n  /**\r\n   * @dev Return the stored details for a registered device.\r\n   */\r\n  function getRegistrationDetails(\r\n    bytes32 primaryPublicKeyHash\r\n  )\r\n    external\r\n    view\r\n    returns (bytes32, bytes32, uint256, uint256, bool)\r\n  {\r\n    Device memory d = _devices[primaryPublicKeyHash];\r\n\r\n    return (\r\n      d.tertiaryPublicKeyHash,\r\n      d.hardwareHash,\r\n      d.kongAmount,\r\n      d.mintableTime,\r\n      d.mintable\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Return the hashed minting key for a registered device.\r\n   */\r\n  function getTertiaryKeyHash(\r\n    bytes32 primaryPublicKeyHash\r\n  )\r\n    external\r\n    view\r\n    returns (bytes32)\r\n  {\r\n    Device memory d = _devices[primaryPublicKeyHash];\r\n\r\n    return d.tertiaryPublicKeyHash;\r\n  }\r\n\r\n  /**\r\n   * @dev Return Kong amount for a registered device.\r\n   */\r\n  function getKongAmount(\r\n    bytes32 primaryPublicKeyHash\r\n  )\r\n    external\r\n    view\r\n    returns (uint)\r\n  {\r\n    Device memory d = _devices[primaryPublicKeyHash];\r\n\r\n    return d.kongAmount;\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"primaryPublicKeyHash\",\"type\":\"bytes32\"},{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"mintKong\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMinter\",\"type\":\"address\"},{\"name\":\"mintingCap\",\"type\":\"uint256\"}],\"name\":\"delegateMintingRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_kongERC20Address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"_minters\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"primaryPublicKeyHash\",\"type\":\"bytes32\"}],\"name\":\"getKongAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalMintable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"removeMintingRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"primaryPublicKeyHash\",\"type\":\"bytes32\"}],\"name\":\"getTertiaryKeyHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"_mintingCaps\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"primaryPublicKeyHash\",\"type\":\"bytes32\"}],\"name\":\"getRegistrationDetails\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"primaryPublicKeyHash\",\"type\":\"bytes32\"},{\"name\":\"tertiaryPublicKeyHash\",\"type\":\"bytes32\"},{\"name\":\"hardwareHash\",\"type\":\"bytes32\"},{\"name\":\"kongAmount\",\"type\":\"uint256\"},{\"name\":\"mintableTime\",\"type\":\"uint256\"},{\"name\":\"mintable\",\"type\":\"bool\"}],\"name\":\"registerDevice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"kongAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"primaryPublicKeyHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"tertiaryPublicKeyHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"hardwareHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"kongAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"mintableTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"mintable\",\"type\":\"bool\"}],\"name\":\"Registration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"mintingCap\",\"type\":\"uint256\"}],\"name\":\"MinterAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"MinterRemoval\",\"type\":\"event\"}]","ContractName":"RegisterDirectMint","CompilerVersion":"v0.5.2+commit.1df8f40c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000ab35d3476251c6b614dc2eb36380d7af1232d822000000000000000000000000177f2ace25f81fc50f9f6e9193adf5ac758e8098","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://4edea3c761515e23474527a73c87bea6d62cf9a6f51e2156e5b1e805d6220f60"}]}