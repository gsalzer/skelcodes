{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-11-05\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.7.3;\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ninterface ItokenRecipient { \r\n    function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external returns (bool); \r\n}\r\n\r\ninterface IstakeContract { \r\n    function createStake(address _wallet, uint8 _timeFrame, uint256 _value) external returns (bool); \r\n}\r\n\r\ninterface IERC20Token {\r\n    function totalSupply() external view returns (uint256 supply);\r\n    function transfer(address _to, uint256 _value) external  returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\r\n}\r\n\r\ncontract Ownable {\r\n\r\n    address private owner;\r\n    \r\n    event OwnerSet(address indexed oldOwner, address indexed newOwner);\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Caller is not owner\");\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        owner = msg.sender; // 'msg.sender' is sender of current call, contract deployer for a constructor\r\n        emit OwnerSet(address(0), owner);\r\n    }\r\n\r\n\r\n    function changeOwner(address newOwner) public onlyOwner {\r\n        emit OwnerSet(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    function getOwner() external view returns (address) {\r\n        return owner;\r\n    }\r\n}\r\n\r\ncontract StandardToken is IERC20Token {\r\n    \r\n    using SafeMath for uint256;\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    uint256 public _totalSupply;\r\n    \r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    \r\n    function totalSupply() override public view returns (uint256 supply) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) override virtual public returns (bool success) {\r\n        require(_to != address(0x0), \"Use burn function instead\");                               // Prevent transfer to 0x0 address. Use burn() instead\r\n\t\trequire(_value >= 0, \"Invalid amount\"); \r\n\t\trequire(balances[msg.sender] >= _value, \"Not enough balance\");\r\n\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\r\n\t\tbalances[_to] = balances[_to].add(_value);\r\n\t\temit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) override virtual public returns (bool success) {\r\n        require(_to != address(0x0), \"Use burn function instead\");                               // Prevent transfer to 0x0 address. Use burn() instead\r\n\t\trequire(_value >= 0, \"Invalid amount\"); \r\n\t\trequire(balances[_from] >= _value, \"Not enough balance\");\r\n\t\trequire(allowed[_from][msg.sender] >= _value, \"You need to increase allowance\");\r\n\t\tbalances[_from] = balances[_from].sub(_value);\r\n\t\tbalances[_to] = balances[_to].add(_value);\r\n\t\temit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) override public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) override public returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) override public view returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    \r\n}\r\n\r\ncontract ECONTokenF is Ownable, StandardToken {\r\n\r\n    using SafeMath for uint256;\r\n    string public name;\r\n    uint8 public decimals;\r\n    string public symbol;\r\n    address public stakeContract;\r\n    address public crowdSaleContract;\r\n    uint256 public soldTokensUnlockTime;\r\n    mapping (address => uint256) frozenBalances;\r\n    mapping (address => uint256) timelock;\r\n    \r\n    event Burn(address indexed from, uint256 value);\r\n    event StakeContractSet(address indexed contractAddress);\r\n\r\n    \r\n    constructor() {\r\n        name = \" Economy Finance Token\";\r\n        decimals = 18;\r\n        symbol = \"ECON\";\r\n        stakeContract = address(0x0);\r\n        crowdSaleContract = 0x09CA35e4d35A7dd6Fa8519d83BF7640300aA37c8;                 // contract for ICO tokens (SEP)\r\n        address teamWallet =  0xD821DEadebaE498A4cfD2aD6C09f98e4a32466d0;               // wallet for team tokens (WALL)\r\n        address privateSaleWallet = 0xD821DEadebaE498A4cfD2aD6C09f98e4a32466d0;         // wallet for private sale tokens (WALL)\r\n        \r\n        address marketingWallet = 0xD821DEadebaE498A4cfD2aD6C09f98e4a32466d0;           // wallet for marketing (WALL)\r\n        address exchangesLiquidity = 0xD821DEadebaE498A4cfD2aD6C09f98e4a32466d0;        // add liquidity to exchanges (WALL)\r\n        address stakeWallet = 0xC7442aA35c556a3716c42A0f9B74B23490eBB00e;               // tokens for the stake contract (WALL)\r\n        uint256 teamReleaseTime = 1607061599;                                           // lock team tokens for 6 months (BLOCK)\r\n        uint256 marketingReleaseTime = 1607061599;                                      // lock marketing tokens - 1k tokens for 3 months (BLOCK)\r\n        uint256 stakesReleaseTime = 1607061599;                                         // lock stakeContract tokens - 7.5k tokens for 3 weeks(BLOCK)\r\n\r\n        balances[teamWallet] = 20000 ether;\r\n        emit Transfer(address(0x0), teamWallet, (20000 ether));\r\n        frozenBalances[teamWallet] = 5000 ether;\r\n        timelock[teamWallet] = teamReleaseTime;\r\n        \r\n        balances[stakeWallet] = 30000 ether;\r\n        emit Transfer(address(0x0), address(stakeWallet), (30000 ether));\r\n        frozenBalances[stakeWallet] = 7500 ether;\r\n        timelock[stakeWallet] = stakesReleaseTime;\r\n        \r\n        balances[marketingWallet] = 2000 ether;\r\n        emit Transfer(address(0x0), address(marketingWallet), (2000 ether));\r\n        frozenBalances[marketingWallet] = 1000 ether;\r\n        timelock[marketingWallet] = marketingReleaseTime;\r\n        \r\n        balances[privateSaleWallet] = 2000 ether;\r\n        emit Transfer(address(0x0), address(privateSaleWallet), (2000 ether));\r\n        \r\n        balances[crowdSaleContract] = 4000 ether;\r\n        emit Transfer(address(0x0), address(crowdSaleContract), (4000 ether));\r\n\r\n        balances[exchangesLiquidity] = 2000 ether;\r\n        emit Transfer(address(0x0), address(exchangesLiquidity), (2000 ether));\r\n\r\n        _totalSupply = 60000 ether;\r\n        \r\n        soldTokensUnlockTime = 1607061600;\r\n\r\n    }\r\n    \r\n    function frozenBalanceOf(address _owner) public view returns (uint256 balance) {\r\n        return frozenBalances[_owner];\r\n    }\r\n    \r\n    function unlockTimeOf(address _owner) public view returns (uint256 time) {\r\n        return timelock[_owner];\r\n    }\r\n    \r\n    function transfer(address _to, uint256 _value) override public  returns (bool success) {\r\n        require(txAllowed(msg.sender, _value), \"Crowdsale tokens are still frozen\");\r\n        return super.transfer(_to, _value);\r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _value) override public returns (bool success) {\r\n        require(txAllowed(msg.sender, _value), \"Crowdsale tokens are still frozen\");\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n    \r\n    function setStakeContract(address _contractAddress) onlyOwner public {\r\n        stakeContract = _contractAddress;\r\n        emit StakeContractSet(_contractAddress);\r\n    }\r\n    \r\n    function setCrowdSaleContract(address _contractAddress) onlyOwner public {\r\n        crowdSaleContract = _contractAddress;\r\n    }\r\n    \r\n        // Tokens sold by crowdsale contract will be frozen ultil crowdsale ends\r\n    function txAllowed(address sender, uint256 amount) private returns (bool isAllowed) {\r\n        if (timelock[sender] > block.timestamp) {\r\n            return isBalanceFree(sender, amount);\r\n        } else {\r\n            if (frozenBalances[sender] > 0) frozenBalances[sender] = 0;\r\n            return true;\r\n        }\r\n        \r\n    }\r\n    \r\n    function isBalanceFree(address sender, uint256 amount) private view returns (bool isfree) {\r\n        if (amount <= (balances[sender] - frozenBalances[sender])) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    \r\n    function burn(uint256 _value) public onlyOwner returns (bool success) {\r\n        require(balances[msg.sender] >= _value, \"Not enough balance\");\r\n\t\trequire(_value >= 0, \"Invalid amount\"); \r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        _totalSupply = _totalSupply.sub(_value);\r\n        emit Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    function approveStake(uint8 _timeFrame, uint256 _value) public returns (bool success) {\r\n        require(stakeContract != address(0x0));\r\n        allowed[msg.sender][stakeContract] = _value;\r\n        emit Approval(msg.sender, stakeContract, _value);\r\n        IstakeContract recipient = IstakeContract(stakeContract);\r\n        require(recipient.createStake(msg.sender, _timeFrame, _value));\r\n        return true;\r\n    }\r\n    \r\n    function approveAndCall(address _spender, uint256 _value, bytes memory _extraData) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        ItokenRecipient recipient = ItokenRecipient(_spender);\r\n        require(recipient.receiveApproval(msg.sender, _value, address(this), _extraData));\r\n        return true;\r\n    }\r\n    \r\n    function tokensSold(address buyer, uint256 amount) public returns (bool success) {\r\n        require(msg.sender == crowdSaleContract);\r\n        frozenBalances[buyer] += amount;\r\n        if (timelock[buyer] == 0 ) timelock[buyer] = soldTokensUnlockTime;\r\n        return super.transfer(buyer, amount);\r\n    }\r\n    \r\n\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"StakeContractSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_timeFrame\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approveStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crowdSaleContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"frozenBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"setCrowdSaleContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"setStakeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"soldTokensUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"tokensSold\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"unlockTimeOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ECONTokenF","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d383f904bc8bfb1e4431ec9bc7ce29cb887e2d9fce19f027e4e34745fd9ee1ac"}]}