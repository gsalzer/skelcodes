{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"temp-contracts/interfaces/IPoolFactoryAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.6.0;\\n\\n\\ninterface IPoolFactoryAccessControl {\\n/* ==========  Events  ========== */\\n\\n  event AdminAccessGranted(address newAdmin);\\n  event AdminAccessRevoked(address newAdmin);\\n\\n/* ==========  Queries  ========== */\\n\\n  function poolFactory() external view returns (address);\\n\\n  function hasAdminAccess(address) external view returns (bool);\\n\\n/* ==========  Owner Controls  ========== */\\n\\n  function grantAdminAccess(address admin) external;\\n\\n  function revokeAdminAccess(address admin) external;\\n\\n  function transferPoolFactoryOwnership(address) external;\\n\\n  function disapprovePoolController(address) external;\\n\\n/* ==========  Admin Controls  ========== */\\n\\n  function approvePoolController(address) external;\\n}\"\r\n    },\r\n    \"temp-contracts/PoolFactoryAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.6.0;\\n\\n/* ========== External Inheritance ========== */\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/* ========== Internal Interfaces ========== */\\nimport \\\"./interfaces/IPoolFactoryAccessControl.sol\\\";\\n\\n\\ncontract PoolFactoryAccessControl is IPoolFactoryAccessControl, Ownable {\\n/* ==========  Constants  ========== */\\n\\n  address public immutable override poolFactory;\\n\\n/* ==========  Storage  ========== */\\n\\n  mapping(address => bool) public override hasAdminAccess;\\n\\n/* ==========  Modifiers  ========== */\\n\\n  modifier onlyAdminOrOwner {\\n    require(\\n      hasAdminAccess[msg.sender] || msg.sender == owner(),\\n      \\\"ERR_NOT_ADMIN_OR_OWNER\\\"\\n    );\\n    _;\\n  }\\n\\n/* ==========  Constructor  ========== */\\n\\n  constructor(address poolFactory_) public Ownable() {\\n    poolFactory = poolFactory_;\\n  }\\n\\n/* ==========  Owner Controls  ========== */\\n\\n  /**\\n   * @dev Transfer ownership of the pool factory to another account.\\n   */\\n  function transferPoolFactoryOwnership(address newOwner) external override onlyOwner {\\n    Ownable(poolFactory).transferOwnership(newOwner);\\n  }\\n\\n  /**\\n   * @dev Grants admin access to `admin`.\\n   */\\n  function grantAdminAccess(address admin) external override onlyOwner {\\n    hasAdminAccess[admin] = true;\\n    emit AdminAccessGranted(admin);\\n  }\\n\\n  /**\\n   * @dev Revokes admin access from `admin`.\\n   */\\n  function revokeAdminAccess(address admin) external override onlyOwner {\\n    hasAdminAccess[admin] = false;\\n    emit AdminAccessRevoked(admin);\\n  }\\n\\n  /** @dev Removes the ability of `controller` to deploy pools. */\\n  function disapprovePoolController(address controller) external override onlyOwner {\\n    IPoolFactory(poolFactory).disapprovePoolController(controller);\\n  }\\n\\n/* ==========  Admin Controls  ========== */\\n\\n  /** @dev Approves `controller` to deploy pools. */\\n  function approvePoolController(address controller) external override onlyAdminOrOwner {\\n    IPoolFactory(poolFactory).approvePoolController(controller);\\n  }\\n}\\n\\n\\ninterface IPoolFactory {\\n  function approvePoolController(address controller) external;\\n\\n  function disapprovePoolController(address controller) external;\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolFactory_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminAccessGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminAccessRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"approvePoolController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"disapprovePoolController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"grantAdminAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasAdminAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"revokeAdminAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferPoolFactoryOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PoolFactoryAccessControl","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000592f70ce43a310d15ff59be1460f38ab6df3fe65","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://17f105e34ff757cb4365c7a97c2e35557731fa3dae25c4347d3c6c4788ce00ca"}]}