{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.8;\r\npragma experimental ABIEncoderV2;\r\n\r\ncontract OrganizationDeployer {\r\n\r\n    address public immutable tokenImplementation;\r\n    address public immutable timelockImplementation;\r\n    address public immutable governanceImplementation;\r\n    \r\n    struct OrgData {\r\n        /// @notice Name of the organisation\r\n        string organisationName;\r\n\r\n        /// @notice Token Symbol\r\n        string symbol;\r\n\r\n        /// @notice Initial supply of the token\r\n        uint256 initialSupply;\r\n\r\n        /// @notice Address to receive the initial supply\r\n        address tokenOwner;\r\n\r\n        /// @notice Timestamp at which minting more tokens is allowed\r\n        uint256 mintingAllowedAfter;\r\n\r\n        /// @notice Cap for miniting everytime\r\n        uint8 mintCap;\r\n\r\n        /// @notice Minimun time to minting the tokens again \r\n        uint32 minimumTimeBetweenMints;\r\n\r\n        /// @notice The number of votes in support of a proposal required in order for a quorum to be reached and for a vote to succeed. Should be lower than initial supply\r\n        uint256 quorumVotes;\r\n\r\n        /// @notice The number of votes required in order for a voter to become a proposer\r\n        uint256 proposalThreshold;\r\n\r\n        /// @notice The delay before voting on a proposal may take place, once proposed. In number of blocks\r\n        uint256 votingDelay;\r\n\r\n        /// @notice The duration of voting on a proposal, in number blocks\r\n        uint256 votingPeriod;\r\n\r\n        /// @notice Delay in the timelock contract\r\n        uint256 delay;\r\n\r\n        /// @notice Minimum delay in the timelock contract\r\n        uint256 minDelay;\r\n\r\n        /// @notice Maximum delay in the timelock contract\r\n        uint256 maxDelay;\r\n\r\n        /// @notice Grace period in the timelock contract\r\n        uint256 gracePeriod;\r\n\r\n        /// @notice Token transferable after deployment\r\n        bool transferPaused;\r\n    }\r\n\r\n    event LogDeployedOrg(\r\n        address indexed token_,\r\n        address indexed timelock_,\r\n        address indexed governance_\r\n    );\r\n\r\n    constructor(address token_, address timelock_, address governance_) public {\r\n        tokenImplementation = token_;\r\n        timelockImplementation = timelock_;\r\n        governanceImplementation = governance_;\r\n    }\r\n\r\n    function _deployer() private returns (address token, address timelock, address governance) {\r\n        uint timestamp_ = now;\r\n\r\n        token = _deployLogic(timestamp_, tokenImplementation);\r\n        timelock = _deployLogic(timestamp_, timelockImplementation);\r\n        governance = _deployLogic(timestamp_, governanceImplementation);\r\n    }\r\n\r\n    function _deployLogic(uint timestamp_, address logic) private returns (address proxy) {\r\n        bytes32 salt = keccak256(abi.encodePacked(timestamp_)); // TODO : change salt to something that we can control\r\n        bytes20 targetBytes = bytes20(logic);\r\n        assembly {\r\n            let clone := mload(0x40)\r\n            mstore(\r\n                clone,\r\n                0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000\r\n            )\r\n            mstore(add(clone, 0x14), targetBytes)\r\n            mstore(\r\n                add(clone, 0x28),\r\n                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\r\n            )\r\n            proxy := create2(0, clone, 0x37, salt)\r\n        }\r\n    }\r\n\r\n    function createOrg(OrgData calldata d) external returns (address token, address timelock, address governance) {\r\n\r\n        require(d.initialSupply > d.quorumVotes, \"Initial Supply should be greater than quoroum\");\r\n        require(d.initialSupply > d.proposalThreshold, \"Initial Supply should be greater than proposal threshold\");\r\n        \r\n        (token, timelock, governance) = _deployer();\r\n\r\n        bytes memory initData = abi.encodeWithSignature(\r\n            \"initialize(string,string,uint256,address,address,uint256,uint8,uint32,bool)\",\r\n            d.organisationName,\r\n            d.symbol,\r\n            d.initialSupply,\r\n            d.tokenOwner,\r\n            timelock,\r\n            d.mintingAllowedAfter,\r\n            d.mintCap,\r\n            d.minimumTimeBetweenMints,\r\n            d.transferPaused\r\n        );\r\n\r\n        (bool success,) = token.call(initData);\r\n        require(success, \"Failed to initialize token\");\r\n\r\n        initData = abi.encodeWithSignature(\r\n            \"initialize(address,uint256,uint256,uint256,uint256)\",\r\n            governance,\r\n            d.delay,\r\n            d.minDelay,\r\n            d.maxDelay,\r\n            d.gracePeriod\r\n        );\r\n\r\n        (success,) = timelock.call(initData);\r\n        require(success, \"Failed to initialize timelock\");\r\n\r\n        initData = abi.encodeWithSignature(\r\n            \"initialize(string,address,address,uint256,uint256,uint256,uint256)\",\r\n            string(abi.encodePacked(d.organisationName, \" Governor Alpha\")),\r\n            token,\r\n            timelock,\r\n            d.quorumVotes,\r\n            d.proposalThreshold,\r\n            d.votingDelay,\r\n            d.votingPeriod\r\n        );\r\n\r\n        (success,) = governance.call(initData);\r\n        require(success, \"Failed to initialize governance\");\r\n\r\n        emit LogDeployedOrg(token, timelock, governance);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"timelock_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"governance_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"timelock_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"governance_\",\"type\":\"address\"}],\"name\":\"LogDeployedOrg\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"organisationName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mintingAllowedAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"mintCap\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"minimumTimeBetweenMints\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"quorumVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proposalThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingDelay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDelay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDelay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gracePeriod\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"transferPaused\",\"type\":\"bool\"}],\"internalType\":\"struct OrganizationDeployer.OrgData\",\"name\":\"d\",\"type\":\"tuple\"}],\"name\":\"createOrg\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"timelock\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"governance\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governanceImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelockImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"OrganizationDeployer","CompilerVersion":"v0.6.8+commit.0bbfe453","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000050fedfc7c5625602f31b01345026d3cd3b738949000000000000000000000000e46adcb46e9e36dcf3cd46c7c232fdc52a18a33a00000000000000000000000071f3950d8847d2e2d0de1117129064033d482502","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://92a5f4b4aa5944a2c7207ac910c8f08772a5653564a3fd2abc978d13ced88cab"}]}