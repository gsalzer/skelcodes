{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: contracts/Pausable.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n */\r\ncontract Pausable is Context {\r\n    event Paused(address account);\r\n    event Shutdown(address account);\r\n    event Unpaused(address account);\r\n    event Open(address account);\r\n\r\n    bool public paused;\r\n    bool public stopEverything;\r\n\r\n    modifier whenNotPaused() {\r\n        require(!paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n    modifier whenPaused() {\r\n        require(paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    modifier whenNotShutdown() {\r\n        require(!stopEverything, \"Pausable: shutdown\");\r\n        _;\r\n    }\r\n\r\n    modifier whenShutdown() {\r\n        require(stopEverything, \"Pausable: not shutdown\");\r\n        _;\r\n    }\r\n\r\n    /// @dev Pause contract operations, if contract is not paused.\r\n    function _pause() internal virtual whenNotPaused {\r\n        paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /// @dev Unpause contract operations, allow only if contract is paused and not shutdown.\r\n    function _unpause() internal virtual whenPaused whenNotShutdown {\r\n        paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n\r\n    /// @dev Shutdown contract operations, if not already shutdown.\r\n    function _shutdown() internal virtual whenNotShutdown {\r\n        stopEverything = true;\r\n        paused = true;\r\n        emit Shutdown(_msgSender());\r\n    }\r\n\r\n    /// @dev Open contract operations, if contract is in shutdown state\r\n    function _open() internal virtual whenShutdown {\r\n        stopEverything = false;\r\n        emit Open(_msgSender());\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/compound/ICompound.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface CToken {\r\n    function accrueInterest() external returns (uint256);\r\n\r\n    function balanceOfUnderlying(address owner) external returns (uint256);\r\n\r\n    function exchangeRateCurrent() external returns (uint256);\r\n\r\n    function exchangeRateStored() external view returns (uint256);\r\n\r\n    function mint() external payable; // For ETH\r\n\r\n    function mint(uint256 mintAmount) external returns (uint256); // For ERC20\r\n\r\n    function redeem(uint256 redeemTokens) external returns (uint256);\r\n\r\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\r\n\r\n    function transfer(address user, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address owner,\r\n        address user,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n}\r\n\r\ninterface Comptroller {\r\n    function claimComp(address holder, address[] memory) external;\r\n\r\n    function compAccrued(address holder) external view returns (uint256);\r\n}\r\n\r\n// File: contracts/interfaces/vesper/IController.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IController {\r\n    function aaveReferralCode() external view returns (uint16);\r\n\r\n    function feeCollector(address) external view returns (address);\r\n\r\n    function founderFee() external view returns (uint256);\r\n\r\n    function founderVault() external view returns (address);\r\n\r\n    function interestFee(address) external view returns (uint256);\r\n\r\n    function isPool(address) external view returns (bool);\r\n\r\n    function pools() external view returns (address);\r\n\r\n    function strategy(address) external view returns (address);\r\n\r\n    function rebalanceFriction(address) external view returns (uint256);\r\n\r\n    function poolRewards(address) external view returns (address);\r\n\r\n    function treasuryPool() external view returns (address);\r\n\r\n    function uniswapRouter() external view returns (address);\r\n\r\n    function withdrawFee(address) external view returns (uint256);\r\n}\r\n\r\n// File: contracts/interfaces/vesper/IStrategy.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IStrategy {\r\n    function rebalance() external;\r\n\r\n    function deposit(uint256 amount) external;\r\n\r\n    function beforeWithdraw() external;\r\n\r\n    function withdraw(uint256 amount) external;\r\n\r\n    function withdrawAll() external;\r\n\r\n    function isUpgradable() external view returns (bool);\r\n\r\n    function isReservedToken(address _token) external view returns (bool);\r\n\r\n    function token() external view returns (address);\r\n\r\n    function pool() external view returns (address);\r\n\r\n    function totalLocked() external view returns (uint256);\r\n\r\n    //Lifecycle functions\r\n    function pause() external;\r\n\r\n    function unpause() external;\r\n}\r\n\r\n// File: contracts/interfaces/vesper/IVesperPool.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\ninterface IVesperPool is IERC20 {\r\n    function approveToken() external;\r\n\r\n    function deposit() external payable;\r\n\r\n    function deposit(uint256) external;\r\n\r\n    function multiTransfer(uint256[] memory) external returns (bool);\r\n\r\n    function permit(\r\n        address,\r\n        address,\r\n        uint256,\r\n        uint256,\r\n        uint8,\r\n        bytes32,\r\n        bytes32\r\n    ) external;\r\n\r\n    function rebalance() external;\r\n\r\n    function resetApproval() external;\r\n\r\n    function sweepErc20(address) external;\r\n\r\n    function withdraw(uint256) external;\r\n\r\n    function withdrawETH(uint256) external;\r\n\r\n    function withdrawByStrategy(uint256) external;\r\n\r\n    function feeCollector() external view returns (address);\r\n\r\n    function getPricePerShare() external view returns (uint256);\r\n\r\n    function token() external view returns (address);\r\n\r\n    function tokensHere() external view returns (uint256);\r\n\r\n    function totalValue() external view returns (uint256);\r\n\r\n    function withdrawFee() external view returns (uint256);\r\n}\r\n\r\n// File: contracts/interfaces/uniswap/IUniswapV2Router01.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n\r\n// File: contracts/interfaces/uniswap/IUniswapV2Router02.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\n// File: contracts/strategies/CompoundStrategy.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title This strategy will deposit collateral token in Compound and earn interest.\r\nabstract contract CompoundStrategy is IStrategy, Pausable {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    IController public immutable controller;\r\n    IERC20 public immutable collateralToken;\r\n    address public immutable override pool;\r\n    uint256 public pendingFee;\r\n\r\n    CToken internal immutable cToken;\r\n    address internal immutable rewardToken;\r\n    Comptroller internal immutable comptroller;\r\n    address internal constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    address internal constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    uint256 internal exchangeRateStored;\r\n\r\n    constructor(\r\n        address _controller,\r\n        address _pool,\r\n        address _cToken,\r\n        address _rewardToken,\r\n        address _comptroller\r\n    ) public {\r\n        require(_controller != address(0), \"Controller address is zero\");\r\n        require(_rewardToken != address(0), \"RewardToken address is zero\");\r\n        require(IController(_controller).isPool(_pool), \"Not a valid pool\");\r\n        controller = IController(_controller);\r\n        pool = _pool;\r\n        collateralToken = IERC20(IVesperPool(_pool).token());\r\n        cToken = CToken(_cToken);\r\n        rewardToken = _rewardToken;\r\n        comptroller = Comptroller(_comptroller);\r\n    }\r\n\r\n    modifier live() {\r\n        require(!paused || _msgSender() == address(controller), \"Contract has paused\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyController() {\r\n        require(_msgSender() == address(controller), \"Caller is not the controller\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyPool() {\r\n        require(_msgSender() == pool, \"Caller is not pool\");\r\n        _;\r\n    }\r\n\r\n    function pause() external override onlyController {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() external override onlyController {\r\n        _unpause();\r\n    }\r\n\r\n    /**\r\n     * @notice Deposit all collateral token from pool into Compound.\r\n     * Anyone can call it except when paused.\r\n     */\r\n    function depositAll() external live {\r\n        deposit(collateralToken.balanceOf(pool));\r\n    }\r\n\r\n    /// @notice Vesper pools are using this function so it should exist in all strategies.\r\n    //solhint-disable-next-line no-empty-blocks\r\n    function beforeWithdraw() external override onlyPool {}\r\n\r\n    /**\r\n     * @dev Withdraw collateral token from Compound.\r\n     * @param _amount Amount of collateral token\r\n     */\r\n    function withdraw(uint256 _amount) external override onlyPool {\r\n        _withdraw(_amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw all collateral from Compound and deposit into pool.\r\n     * Controller only function, called when migrating strategy.\r\n     */\r\n    function withdrawAll() external override onlyController {\r\n        _withdrawAll();\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate interest fee on earning from Compound and transfer fee to fee collector.\r\n     * Deposit available collateral from pool into Compound.\r\n     * Anyone can call it except when paused.\r\n     */\r\n    function rebalance() external override live {\r\n        _rebalanceEarned();\r\n        uint256 balance = collateralToken.balanceOf(pool);\r\n        if (balance != 0) {\r\n            _deposit(balance);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Sweep given token to vesper pool\r\n     * @dev Reserved tokens are not allowed to sweep.\r\n     * @param _fromToken token address to sweep\r\n     */\r\n    function sweepErc20(address _fromToken) external {\r\n        require(_fromToken != address(cToken) && _fromToken != rewardToken, \"Not allowed to sweep\");\r\n\r\n        if (_fromToken == ETH) {\r\n            payable(pool).transfer(address(this).balance);\r\n        } else {\r\n            uint256 amount = IERC20(_fromToken).balanceOf(address(this));\r\n            IERC20(_fromToken).safeTransfer(pool, amount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Returns interest earned in COMP since last rebalance.\r\n     * @dev Make sure to return value in collateral token and in order to do that\r\n     * we are using Uniswap to get collateral amount for earned DAI.\r\n     */\r\n    function interestEarned() external view returns (uint256) {\r\n        uint256 compAccrued = comptroller.compAccrued(address(this));\r\n        if (compAccrued != 0) {\r\n            IUniswapV2Router02 uniswapRouter = IUniswapV2Router02(controller.uniswapRouter());\r\n            address[] memory path = _getPath(rewardToken, address(collateralToken));\r\n            return uniswapRouter.getAmountsOut(compAccrued, path)[path.length - 1];\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /// @notice Returns true if strategy can be upgraded.\r\n    function isUpgradable() external view override returns (bool) {\r\n        return totalLocked() == 0;\r\n    }\r\n\r\n    /// @notice This method is deprecated and will be removed from Strategies in next release\r\n    function isReservedToken(address _token) external view override returns (bool) {\r\n        return _token == address(cToken) || _token == rewardToken;\r\n    }\r\n\r\n    /// @dev Returns address of Compound token correspond to collateral token\r\n    function token() external view override returns (address) {\r\n        return address(cToken);\r\n    }\r\n\r\n    /**\r\n     * @notice Deposit collateral token from pool into Compound.\r\n     * @dev Update pendingFee before deposit. Anyone can call it except when paused.\r\n     * @param _amount Amount of collateral token to deposit\r\n     */\r\n    function deposit(uint256 _amount) public override live {\r\n        _updatePendingFee();\r\n        _deposit(_amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Total collateral locked in Compound.\r\n     * @dev This value will be used in pool share calculation, so true totalLocked\r\n     * will be balance in Compound minus any pending fee to collect.\r\n     * @return Return value will be in collateralToken defined decimal.\r\n     */\r\n    function totalLocked() public view override returns (uint256) {\r\n        uint256 collateralBalance = _convertToCollateral(cToken.balanceOf(address(this)));\r\n        return collateralBalance.sub(_calculatePendingFee());\r\n    }\r\n\r\n    /**\r\n     * @dev Claim rewardToken and convert rewardToken into collateral token.\r\n     * Calculate interest fee on earning from rewardToken and transfer balance minus\r\n     * fee to pool.\r\n     * @dev Transferring collateral to pool will increase pool share price.\r\n     */\r\n    function _claimComp() internal {\r\n        address[] memory markets = new address[](1);\r\n        markets[0] = address(cToken);\r\n        comptroller.claimComp(address(this), markets);\r\n        uint256 amt = IERC20(rewardToken).balanceOf(address(this));\r\n        if (amt != 0) {\r\n            IUniswapV2Router02 uniswapRouter = IUniswapV2Router02(controller.uniswapRouter());\r\n            address[] memory path = _getPath(rewardToken, address(collateralToken));\r\n            uint256 amountOut = uniswapRouter.getAmountsOut(amt, path)[path.length - 1];\r\n            if (amountOut != 0) {\r\n                IERC20(rewardToken).safeApprove(address(uniswapRouter), 0);\r\n                IERC20(rewardToken).safeApprove(address(uniswapRouter), amt);\r\n                uniswapRouter.swapExactTokensForTokens(amt, 1, path, address(this), now + 30);\r\n                uint256 _collateralEarned = collateralToken.balanceOf(address(this));\r\n                uint256 _fee = _collateralEarned.mul(controller.interestFee(pool)).div(1e18);\r\n                collateralToken.safeTransfer(pool, _collateralEarned.sub(_fee));\r\n            }\r\n        }\r\n    }\r\n\r\n    function _deposit(uint256 _amount) internal virtual {\r\n        collateralToken.safeTransferFrom(pool, address(this), _amount);\r\n        collateralToken.safeApprove(address(cToken), 0);\r\n        collateralToken.safeApprove(address(cToken), _amount);\r\n        require(cToken.mint(_amount) == 0, \"deposit-failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate interest fee earning and transfer it to fee collector.\r\n     * RebalanceEarned completes in following steps,\r\n     *      Claim rewardToken and earn fee.\r\n     *      Update pending fee.\r\n     *      Withdraw collateral equal to pendingFee from compound.\r\n     *      Now we have collateral equal to pendingFee + fee earning from rewardToken.\r\n     *      Deposit collateral in Pool and get shares.\r\n     *      Transfer shares to feeCollector.\r\n     */\r\n    function _rebalanceEarned() internal {\r\n        _claimComp();\r\n        _updatePendingFee();\r\n        // Read state variable once to save gas\r\n        uint256 _pendingFee = pendingFee;\r\n        uint256 _cTokenAmount = _convertToCToken(_pendingFee);\r\n        if (_cTokenAmount != 0) {\r\n            require(cToken.redeemUnderlying(_pendingFee) == 0, \"rebalanceEarned::withdraw-failed\");\r\n            // Update state variable\r\n            pendingFee = 0;\r\n            _afterRedeem();\r\n        }\r\n\r\n        uint256 _collateralBalance = collateralToken.balanceOf(address(this));\r\n        if (_collateralBalance != 0) {\r\n            collateralToken.safeApprove(pool, 0);\r\n            collateralToken.safeApprove(pool, _collateralBalance);\r\n            IVesperPool(pool).deposit(_collateralBalance);\r\n            uint256 _feeInShare = IERC20(pool).balanceOf(address(this));\r\n            IERC20(pool).safeTransfer(controller.feeCollector(pool), _feeInShare);\r\n        }\r\n    }\r\n\r\n    function _withdraw(uint256 _amount) internal {\r\n        _updatePendingFee();\r\n        require(cToken.redeemUnderlying(_amount) == 0, \"withdraw-failed\");\r\n        _afterRedeem();\r\n        collateralToken.safeTransfer(pool, collateralToken.balanceOf(address(this)));\r\n    }\r\n\r\n    function _withdrawAll() internal {\r\n        pendingFee = 0;\r\n        require(cToken.redeem(cToken.balanceOf(address(this))) == 0, \"withdraw-all-failed\");\r\n        _afterRedeem();\r\n        collateralToken.safeTransfer(pool, collateralToken.balanceOf(address(this)));\r\n    }\r\n\r\n    /// @dev Hook to call after collateral is redeemed from Compound\r\n    /// @notice We did empty implementation as not all derived are going to implement it.\r\n    //solhint-disable-next-line no-empty-blocks\r\n    function _afterRedeem() internal virtual {}\r\n\r\n    function _convertToCToken(uint256 _collateralAmount) internal view returns (uint256) {\r\n        return _collateralAmount.mul(1e18).div(cToken.exchangeRateStored());\r\n    }\r\n\r\n    function _convertToCollateral(uint256 _cTokenAmount) internal view returns (uint256) {\r\n        return _cTokenAmount.mul(cToken.exchangeRateStored()).div(1e18);\r\n    }\r\n\r\n    function _calculatePendingFee() internal view returns (uint256) {\r\n        uint256 interest =\r\n            cToken\r\n                .exchangeRateStored()\r\n                .sub(exchangeRateStored)\r\n                .mul(cToken.balanceOf(address(this)))\r\n                .div(1e18);\r\n        uint256 fee = interest.mul(controller.interestFee(pool)).div(1e18);\r\n        return pendingFee.add(fee);\r\n    }\r\n\r\n    function _updatePendingFee() internal {\r\n        pendingFee = _calculatePendingFee();\r\n        exchangeRateStored = cToken.exchangeRateStored();\r\n    }\r\n\r\n    function _getPath(address _from, address _to) internal pure returns (address[] memory) {\r\n        address[] memory path;\r\n        if (_from == WETH || _to == WETH) {\r\n            path = new address[](2);\r\n            path[0] = _from;\r\n            path[1] = _to;\r\n        } else {\r\n            path = new address[](3);\r\n            path[0] = _from;\r\n            path[1] = WETH;\r\n            path[2] = _to;\r\n        }\r\n        return path;\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/token/IToken.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface TokenLike {\r\n    function approve(address, uint256) external returns (bool);\r\n\r\n    function balanceOf(address) external view returns (uint256);\r\n\r\n    function transfer(address, uint256) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address,\r\n        address,\r\n        uint256\r\n    ) external returns (bool);\r\n\r\n    function deposit() external payable;\r\n\r\n    function withdraw(uint256) external;\r\n}\r\n\r\n// File: contracts/strategies/CompoundStrategyWBTC.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n//solhint-disable no-empty-blocks\r\ncontract CompoundStrategyWBTC is CompoundStrategy {\r\n    string public constant NAME = \"Strategy-Compound-WBTC\";\r\n    string public constant VERSION = \"1.0.10\";\r\n\r\n    constructor(address _controller, address _pool)\r\n        public\r\n        CompoundStrategy(\r\n            _controller,\r\n            _pool,\r\n            0xC11b1268C1A384e55C48c2391d8d480264A3A7F4,\r\n            0xc00e94Cb662C3520282E6f5717214004A7f26888,\r\n            0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B\r\n        )\r\n    {}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Open\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Shutdown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beforeWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract IController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isReservedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isUpgradable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopEverything\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"}],\"name\":\"sweepErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CompoundStrategyWBTC","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000a4f1671d3aee73c05b552d57f2d16d3cfcbd02170000000000000000000000004b2e76ebbc9f2923d83f5fbde695d8733db1a17b","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b34ba309a2a5cd907ddb3209372128f6a6976ff2b5506a2476567db3824bed8e"}]}