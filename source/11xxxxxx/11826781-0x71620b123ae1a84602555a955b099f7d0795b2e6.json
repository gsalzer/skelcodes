{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\n\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract Context {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n    constructor() internal {}\n\n    // solhint-disable-previous-line no-empty-blocks\n\n    function _msgSender() internal view returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Returns true if the caller is the current owner.\n     */\n    function isOwner() public view returns (bool) {\n        return _msgSender() == _owner;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n * the optional functions; to access them see {ERC20Detailed}.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount)\n        external\n        returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\ninterface IERC1155 {\n    // Events\n\n    /**\n     * @dev Either TransferSingle or TransferBatch MUST emit when tokens are transferred, including zero amount transfers as well as minting or burning\n     *   Operator MUST be msg.sender\n     *   When minting/creating tokens, the `_from` field MUST be set to `0x0`\n     *   When burning/destroying tokens, the `_to` field MUST be set to `0x0`\n     *   The total amount transferred from address 0x0 minus the total amount transferred to 0x0 may be used by clients and exchanges to be added to the \"circulating supply\" for a given token ID\n     *   To broadcast the existence of a token ID with no initial balance, the contract SHOULD emit the TransferSingle event from `0x0` to `0x0`, with the token creator as `_operator`, and a `_amount` of 0\n     */\n    event TransferSingle(\n        address indexed _operator,\n        address indexed _from,\n        address indexed _to,\n        uint256 _id,\n        uint256 _amount\n    );\n\n    /**\n     * @dev Either TransferSingle or TransferBatch MUST emit when tokens are transferred, including zero amount transfers as well as minting or burning\n     *   Operator MUST be msg.sender\n     *   When minting/creating tokens, the `_from` field MUST be set to `0x0`\n     *   When burning/destroying tokens, the `_to` field MUST be set to `0x0`\n     *   The total amount transferred from address 0x0 minus the total amount transferred to 0x0 may be used by clients and exchanges to be added to the \"circulating supply\" for a given token ID\n     *   To broadcast the existence of multiple token IDs with no initial balance, this SHOULD emit the TransferBatch event from `0x0` to `0x0`, with the token creator as `_operator`, and a `_amount` of 0\n     */\n    event TransferBatch(\n        address indexed _operator,\n        address indexed _from,\n        address indexed _to,\n        uint256[] _ids,\n        uint256[] _amounts\n    );\n\n    /**\n     * @dev MUST emit when an approval is updated\n     */\n    event ApprovalForAll(\n        address indexed _owner,\n        address indexed _operator,\n        bool _approved\n    );\n\n    /**\n     * @dev MUST emit when the URI is updated for a token ID\n     *   URIs are defined in RFC 3986\n     *   The URI MUST point a JSON file that conforms to the \"ERC-1155 Metadata JSON Schema\"\n     */\n    event URI(string _amount, uint256 indexed _id);\n\n    /**\n     * @notice Transfers amount of an _id from the _from address to the _to address specified\n     * @dev MUST emit TransferSingle event on success\n     * Caller must be approved to manage the _from account's tokens (see isApprovedForAll)\n     * MUST throw if `_to` is the zero address\n     * MUST throw if balance of sender for token `_id` is lower than the `_amount` sent\n     * MUST throw on any other error\n     * When transfer is complete, this function MUST check if `_to` is a smart contract (code size > 0). If so, it MUST call `onERC1155Received` on `_to` and revert if the return amount is not `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * @param _from    Source address\n     * @param _to      Target address\n     * @param _id      ID of the token type\n     * @param _amount  Transfered amount\n     * @param _data    Additional data with no specified format, sent in call to `_to`\n     */\n    function safeTransferFrom(\n        address _from,\n        address _to,\n        uint256 _id,\n        uint256 _amount,\n        bytes calldata _data\n    ) external;\n\n    /**\n     * @notice Send multiple types of Tokens from the _from address to the _to address (with safety call)\n     * @dev MUST emit TransferBatch event on success\n     * Caller must be approved to manage the _from account's tokens (see isApprovedForAll)\n     * MUST throw if `_to` is the zero address\n     * MUST throw if length of `_ids` is not the same as length of `_amounts`\n     * MUST throw if any of the balance of sender for token `_ids` is lower than the respective `_amounts` sent\n     * MUST throw on any other error\n     * When transfer is complete, this function MUST check if `_to` is a smart contract (code size > 0). If so, it MUST call `onERC1155BatchReceived` on `_to` and revert if the return amount is not `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * Transfers and events MUST occur in the array order they were submitted (_ids[0] before _ids[1], etc)\n     * @param _from     Source addresses\n     * @param _to       Target addresses\n     * @param _ids      IDs of each token type\n     * @param _amounts  Transfer amounts per token type\n     * @param _data     Additional data with no specified format, sent in call to `_to`\n     */\n    function safeBatchTransferFrom(\n        address _from,\n        address _to,\n        uint256[] calldata _ids,\n        uint256[] calldata _amounts,\n        bytes calldata _data\n    ) external;\n\n    /**\n     * @notice Get the balance of an account's Tokens\n     * @param _owner  The address of the token holder\n     * @param _id     ID of the Token\n     * @return        The _owner's balance of the Token type requested\n     */\n    function balanceOf(address _owner, uint256 _id)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @notice Get the balance of multiple account/token pairs\n     * @param _owners The addresses of the token holders\n     * @param _ids    ID of the Tokens\n     * @return        The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)\n     */\n    function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @notice Enable or disable approval for a third party (\"operator\") to manage all of caller's tokens\n     * @dev MUST emit the ApprovalForAll event on success\n     * @param _operator  Address to add to the set of authorized operators\n     * @param _approved  True if the operator is approved, false to revoke approval\n     */\n    function setApprovalForAll(address _operator, bool _approved) external;\n\n    /**\n     * @notice Queries the approval status of an operator for a given owner\n     * @param _owner     The owner of the Tokens\n     * @param _operator  Address of authorized operator\n     * @return           True if the operator is approved, false if not\n     */\n    function isApprovedForAll(address _owner, address _operator)\n        external\n        view\n        returns (bool isOperator);\n}\n\ninterface IERC1155Metadata {\n    /***********************************|\n    |     Metadata Public Function s    |\n    |__________________________________*/\n\n    /**\n     * @notice A distinct Uniform Resource Identifier (URI) for a given token.\n     * @dev URIs are defined in RFC 3986.\n     *      URIs are assumed to be deterministically generated based on token ID\n     *      Token IDs are assumed to be represented in their hex format in URIs\n     * @return URI string\n     */\n    function uri(uint256 _id) external view returns (string memory);\n}\n\nlibrary Strings {\n    // via https://github.com/oraclize/ethereum-api/blob/master/oraclizeAPI_0.5.sol\n    function strConcat(\n        string memory _a,\n        string memory _b,\n        string memory _c,\n        string memory _d,\n        string memory _e\n    ) internal pure returns (string memory) {\n        bytes memory _ba = bytes(_a);\n        bytes memory _bb = bytes(_b);\n        bytes memory _bc = bytes(_c);\n        bytes memory _bd = bytes(_d);\n        bytes memory _be = bytes(_e);\n        string memory abcde = new string(\n            _ba.length + _bb.length + _bc.length + _bd.length + _be.length\n        );\n        bytes memory babcde = bytes(abcde);\n        uint256 k = 0;\n        for (uint256 i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\n        for (uint256 i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\n        for (uint256 i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\n        for (uint256 i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\n        for (uint256 i = 0; i < _be.length; i++) babcde[k++] = _be[i];\n        return string(babcde);\n    }\n\n    function strConcat(\n        string memory _a,\n        string memory _b,\n        string memory _c,\n        string memory _d\n    ) internal pure returns (string memory) {\n        return strConcat(_a, _b, _c, _d, \"\");\n    }\n\n    function strConcat(\n        string memory _a,\n        string memory _b,\n        string memory _c\n    ) internal pure returns (string memory) {\n        return strConcat(_a, _b, _c, \"\", \"\");\n    }\n\n    function strConcat(string memory _a, string memory _b)\n        internal\n        pure\n        returns (string memory)\n    {\n        return strConcat(_a, _b, \"\", \"\", \"\");\n    }\n\n    function uint2str(uint256 _i)\n        internal\n        pure\n        returns (string memory _uintAsString)\n    {\n        if (_i == 0) {\n            return \"0\";\n        }\n        uint256 j = _i;\n        uint256 len;\n        while (j != 0) {\n            len++;\n            j /= 10;\n        }\n        bytes memory bstr = new bytes(len);\n        uint256 k = len - 1;\n        while (_i != 0) {\n            bstr[k--] = bytes1(uint8(48 + (_i % 10)));\n            _i /= 10;\n        }\n        return string(bstr);\n    }\n}\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath#mul: OVERFLOW\");\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, \"SafeMath#div: DIVISION_BY_ZERO\");\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath#sub: UNDERFLOW\");\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath#add: OVERFLOW\");\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath#mod: DIVISION_BY_ZERO\");\n        return a % b;\n    }\n}\n\n/**\n * Copyright 2018 ZeroEx Intl.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *   http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Utility library of inline functions on addresses\n */\nlibrary Address {\n    /**\n     * Returns whether the target address is a contract\n     * @dev This function will return false if invoked during the constructor of a contract,\n     * as the code is not actually created until after the constructor finishes.\n     * @param account address of the account to check\n     * @return whether the target address is a contract\n     */\n    function isContract(address account) internal view returns (bool) {\n        bytes32 codehash;\n\n\n            bytes32 accountHash\n         = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n\n        // XXX Currently there is no better way to check if there is a contract in an address\n        // than to check the size of the code at that address.\n        // See https://ethereum.stackexchange.com/a/14016/36603\n        // for more details about how this works.\n        // TODO Check this again before the Serenity release, because all addresses will be\n        // contracts then.\n        assembly {\n            codehash := extcodehash(account)\n        }\n        return (codehash != 0x0 && codehash != accountHash);\n    }\n}\n\ncontract BCCGDistributor is Ownable {\n    using Strings for string;\n    using SafeMath for uint256;\n    using Address for address;\n\n    uint256 public _currentCardId = 0;\n    address private _salesperson;\n    uint256 private _limitPerWallet;\n    bool public _saleStarted = false;\n\n    struct Card {\n        uint256 cardId;\n        address contractAddress;\n        uint256 tokenId;\n        uint256 totalAmount;\n        uint256 currentAmount;\n        address paymentToken;\n        uint256 basePrice;\n        uint256 limitForFree;\n        bool isFinished;\n        bool isPrivate;\n        mapping(address => bool) whitelist;\n    }\n\n    struct History {\n        address contractAddress;\n        mapping(uint256 => mapping(address => uint256)) purchasedHistories;\n    }\n\n    // Events\n    event CreateCard(\n        address indexed _from,\n        uint256 _cardId,\n        address indexed _contractAddress,\n        uint256 _tokenId,\n        uint256 _totalAmount,\n        address _paymentToken,\n        uint256 _basePrice\n    );\n\n    event PurchaseCard(address indexed _from, uint256 _cardId, uint256 _amount);\n    event CardChanged(uint256 _cardId);\n    event WhiteListAdded(uint256 _cardId, address indexed addr);\n    event WhiteListRemoved(uint256 _cardId, address indexed addr);\n    event BatchWhiteListAdded(uint256 _cardId, address[] addr);\n    event BatchWhiteListRemoved(uint256 _cardId, address[] addr);\n\n    mapping(uint256 => Card) internal _cards;\n    mapping(uint256 => uint256) internal _earning;\n    mapping(address => History) internal _history;\n\n    constructor() public {\n        _salesperson = msg.sender;\n        _limitPerWallet = 1;\n    }\n\n    function setLimitPerWallet(uint256 limit) public onlyOwner returns (bool) {\n        _limitPerWallet = limit;\n        return true;\n    }\n\n    function setSalesPerson(address newSalesPerson)\n        public\n        onlyOwner\n        returns (bool)\n    {\n        _salesperson = newSalesPerson;\n        return true;\n    }\n\n    function getEarning(uint256 _cardId) public view returns (uint256) {\n        return _earning[_cardId];\n    }\n\n    function startSale() public onlyOwner returns (bool) {\n        _saleStarted = true;\n        return true;\n    }\n\n    function stopSale() public onlyOwner returns (bool) {\n        _saleStarted = false;\n        return false;\n    }\n\n    function createCard(\n        address _contractAddress,\n        uint256 _tokenId,\n        uint256 _totalAmount,\n        address _paymentToken,\n        uint256 _basePrice,\n        uint256 _limitForFree,\n        bool _isPrivate\n    ) public onlyOwner returns (uint256) {\n        IERC1155 _contract = IERC1155(_contractAddress);\n        require(\n            _contract.balanceOf(msg.sender, _tokenId) >= _totalAmount,\n            \"Initial supply cannot be more than available supply\"\n        );\n        require(\n            _contract.isApprovedForAll(msg.sender, address(this)) == true,\n            \"Contract must be whitelisted by owner\"\n        );\n        uint256 _id = _getNextCardID();\n        _incrementCardId();\n        Card memory _newCard;\n        _newCard.cardId = _id;\n        _newCard.contractAddress = _contractAddress;\n        _newCard.tokenId = _tokenId;\n        _newCard.totalAmount = _totalAmount;\n        _newCard.currentAmount = _totalAmount;\n        _newCard.paymentToken = _paymentToken;\n        _newCard.basePrice = _basePrice;\n        _newCard.limitForFree = _limitForFree;\n        _newCard.isFinished = false;\n        _newCard.isPrivate = _isPrivate;\n\n        _cards[_id] = _newCard;\n        _earning[_id] = 0;\n        emit CreateCard(\n            msg.sender,\n            _id,\n            _contractAddress,\n            _tokenId,\n            _totalAmount,\n            _paymentToken,\n            _basePrice\n        );\n        return _id;\n    }\n\n    function purchaseNFT(uint256 _cardId, uint256 _amount)\n        public\n        returns (bool)\n    {\n        require(_saleStarted == true, \"Sale stopped\");\n\n        Card storage _currentCard = _cards[_cardId];\n        require(_currentCard.isFinished == false, \"Card is finished\");\n\n        require(\n            _currentCard.isPrivate == false ||\n                _currentCard.whitelist[msg.sender] == true,\n            \"Not allowed to buy\"\n        );\n\n        IERC1155 _contract = IERC1155(_currentCard.contractAddress);\n        require(\n            _currentCard.currentAmount >= _amount,\n            \"Order exceeds the max number of available NFTs\"\n        );\n\n        History storage _currentHistory =\n            _history[_currentCard.contractAddress];\n        uint256 _currentBoughtAmount =\n            _currentHistory.purchasedHistories[_currentCard.tokenId][\n                msg.sender\n            ];\n\n        require(\n            _currentBoughtAmount < _limitPerWallet,\n            \"Order exceeds the max limit of NFTs per wallet\"\n        );\n\n        uint256 availableAmount = _limitPerWallet.sub(_currentBoughtAmount);\n        if (availableAmount > _amount) {\n            availableAmount = _amount;\n        }\n\n        if (_currentCard.basePrice != 0) {\n            IERC20 _paymentContract = IERC20(_currentCard.paymentToken);\n            uint256 _price = _currentCard.basePrice.mul(availableAmount);\n            require(\n                _paymentContract.balanceOf(msg.sender) >= _price,\n                \"Do not have enough funds\"\n            );\n            require(\n                _paymentContract.allowance(msg.sender, address(this)) >= _price,\n                \"Must be approved for purchase\"\n            );\n\n            _paymentContract.transferFrom(msg.sender, _salesperson, _price);\n            _earning[_cardId] = _earning[_cardId].add(_price);\n        } else {\n            IERC20 _paymentContract = IERC20(_currentCard.paymentToken);\n            uint256 accountBalance = msg.sender.balance;\n            require(\n                _paymentContract.balanceOf(msg.sender).add(accountBalance) >=\n                    _currentCard.limitForFree,\n                \"Do not have enough funds\"\n            );\n        }\n\n        _contract.safeTransferFrom(\n            owner(),\n            msg.sender,\n            _currentCard.tokenId,\n            availableAmount,\n            \"\"\n        );\n        _currentCard.currentAmount = _currentCard.currentAmount.sub(\n            availableAmount\n        );\n        _currentHistory.purchasedHistories[_currentCard.tokenId][\n            msg.sender\n        ] = _currentBoughtAmount.add(availableAmount);\n\n        emit PurchaseCard(msg.sender, _cardId, availableAmount);\n\n        return true;\n    }\n\n    function _getNextCardID() private view returns (uint256) {\n        return _currentCardId.add(1);\n    }\n\n    function _incrementCardId() private {\n        _currentCardId++;\n    }\n\n    function cancelCard(uint256 _cardId) public onlyOwner returns (bool) {\n        _cards[_cardId].isFinished = true;\n\n        emit CardChanged(_cardId);\n        return true;\n    }\n\n    function setCardPaymentToken(uint256 _cardId, address _newTokenAddress)\n        public\n        onlyOwner\n        returns (bool)\n    {\n        _cards[_cardId].paymentToken = _newTokenAddress;\n\n        emit CardChanged(_cardId);\n        return true;\n    }\n\n    function setCardPrice(\n        uint256 _cardId,\n        uint256 _newPrice,\n        uint256 _newLimit\n    ) public onlyOwner returns (bool) {\n        _cards[_cardId].basePrice = _newPrice;\n        _cards[_cardId].limitForFree = _newLimit;\n\n        emit CardChanged(_cardId);\n        return true;\n    }\n\n    function setCardAmount(uint256 _cardId, uint256 _amount)\n        public\n        onlyOwner\n        returns (bool)\n    {\n        _cards[_cardId].currentAmount = _cards[_cardId].currentAmount.sub(\n            _amount\n        );\n\n        emit CardChanged(_cardId);\n        return true;\n    }\n\n    function setCardVisibility(uint256 _cardId, bool _isPrivate)\n        public\n        onlyOwner\n        returns (bool)\n    {\n        _cards[_cardId].isPrivate = _isPrivate;\n\n        emit CardChanged(_cardId);\n        return true;\n    }\n\n    function addWhiteListAddress(uint256 _cardId, address addr)\n        public\n        onlyOwner\n        returns (bool)\n    {\n        _cards[_cardId].whitelist[addr] = true;\n\n        emit WhiteListAdded(_cardId, addr);\n        return true;\n    }\n\n    function batchAddWhiteListAddress(uint256 _cardId, address[] memory addr)\n        public\n        onlyOwner\n        returns (bool)\n    {\n        Card storage currentCard = _cards[_cardId];\n        for (uint256 i = 0; i < addr.length; i++) {\n            currentCard.whitelist[addr[i]] = true;\n        }\n\n        emit BatchWhiteListAdded(_cardId, addr);\n        return true;\n    }\n\n    function removeWhiteListAddress(uint256 _cardId, address addr)\n        public\n        onlyOwner\n        returns (bool)\n    {\n        _cards[_cardId].whitelist[addr] = false;\n\n        emit WhiteListRemoved(_cardId, addr);\n        return true;\n    }\n\n    function batchRemoveWhiteListAddress(uint256 _cardId, address[] memory addr)\n        public\n        onlyOwner\n        returns (bool)\n    {\n        Card storage currentCard = _cards[_cardId];\n        for (uint256 i = 0; i < addr.length; i++) {\n            currentCard.whitelist[addr[i]] = false;\n        }\n\n        emit BatchWhiteListRemoved(_cardId, addr);\n        return true;\n    }\n\n    function isCardPrivate(uint256 _cardId) public view returns (bool) {\n        return _cards[_cardId].isPrivate;\n    }\n\n    function isAllowedCard(uint256 _cardId) public view returns (bool) {\n        return _cards[_cardId].whitelist[msg.sender];\n    }\n\n    function isCardCompleted(uint256 _cardId) public view returns (bool) {\n        return _cards[_cardId].isFinished;\n    }\n\n    function isCardFree(uint256 _cardId) public view returns (bool) {\n        if (_cards[_cardId].basePrice == 0) return true;\n\n        return false;\n    }\n\n    function getCardPaymentToken(uint256 _cardId)\n        public\n        view\n        returns (address)\n    {\n        return _cards[_cardId].paymentToken;\n    }\n\n    function getCardRequirement(uint256 _cardId) public view returns (uint256) {\n        return _cards[_cardId].limitForFree;\n    }\n\n    function getCardContract(uint256 _cardId) public view returns (address) {\n        return _cards[_cardId].contractAddress;\n    }\n\n    function getCardTokenId(uint256 _cardId) public view returns (uint256) {\n        return _cards[_cardId].tokenId;\n    }\n\n    function getCardTotalAmount(uint256 _cardId) public view returns (uint256) {\n        return _cards[_cardId].totalAmount;\n    }\n\n    function getCardCurrentAmount(uint256 _cardId)\n        public\n        view\n        returns (uint256)\n    {\n        return _cards[_cardId].currentAmount;\n    }\n\n    function getCardBasePrice(uint256 _cardId) public view returns (uint256) {\n        return _cards[_cardId].basePrice;\n    }\n\n    function getCardURL(uint256 _cardId) public view returns (string memory) {\n        return\n            IERC1155Metadata(_cards[_cardId].contractAddress).uri(\n                _cards[_cardId].tokenId\n            );\n    }\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_cardId\",\"type\":\"uint256\"}],\"name\":\"getCardPaymentToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cardId\",\"type\":\"uint256\"},{\"name\":\"addr\",\"type\":\"address[]\"}],\"name\":\"batchRemoveWhiteListAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_cardId\",\"type\":\"uint256\"}],\"name\":\"getCardBasePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cardId\",\"type\":\"uint256\"},{\"name\":\"_isPrivate\",\"type\":\"bool\"}],\"name\":\"setCardVisibility\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_cardId\",\"type\":\"uint256\"}],\"name\":\"getCardContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_cardId\",\"type\":\"uint256\"}],\"name\":\"getCardURL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_currentCardId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_cardId\",\"type\":\"uint256\"}],\"name\":\"isCardCompleted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_cardId\",\"type\":\"uint256\"}],\"name\":\"getCardTokenId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_cardId\",\"type\":\"uint256\"}],\"name\":\"isCardFree\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cardId\",\"type\":\"uint256\"}],\"name\":\"cancelCard\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cardId\",\"type\":\"uint256\"},{\"name\":\"_newTokenAddress\",\"type\":\"address\"}],\"name\":\"setCardPaymentToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"setLimitPerWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cardId\",\"type\":\"uint256\"},{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addWhiteListAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_cardId\",\"type\":\"uint256\"}],\"name\":\"getCardRequirement\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_saleStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cardId\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setCardAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cardId\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"purchaseNFT\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newSalesPerson\",\"type\":\"address\"}],\"name\":\"setSalesPerson\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_cardId\",\"type\":\"uint256\"}],\"name\":\"isCardPrivate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cardId\",\"type\":\"uint256\"},{\"name\":\"_newPrice\",\"type\":\"uint256\"},{\"name\":\"_newLimit\",\"type\":\"uint256\"}],\"name\":\"setCardPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_cardId\",\"type\":\"uint256\"}],\"name\":\"getCardTotalAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_cardId\",\"type\":\"uint256\"}],\"name\":\"getCardCurrentAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contractAddress\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_totalAmount\",\"type\":\"uint256\"},{\"name\":\"_paymentToken\",\"type\":\"address\"},{\"name\":\"_basePrice\",\"type\":\"uint256\"},{\"name\":\"_limitForFree\",\"type\":\"uint256\"},{\"name\":\"_isPrivate\",\"type\":\"bool\"}],\"name\":\"createCard\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_cardId\",\"type\":\"uint256\"}],\"name\":\"getEarning\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cardId\",\"type\":\"uint256\"},{\"name\":\"addr\",\"type\":\"address[]\"}],\"name\":\"batchAddWhiteListAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cardId\",\"type\":\"uint256\"},{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeWhiteListAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_cardId\",\"type\":\"uint256\"}],\"name\":\"isAllowedCard\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_cardId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_paymentToken\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_basePrice\",\"type\":\"uint256\"}],\"name\":\"CreateCard\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_cardId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"PurchaseCard\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_cardId\",\"type\":\"uint256\"}],\"name\":\"CardChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_cardId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"WhiteListAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_cardId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"WhiteListRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_cardId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"addr\",\"type\":\"address[]\"}],\"name\":\"BatchWhiteListAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_cardId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"addr\",\"type\":\"address[]\"}],\"name\":\"BatchWhiteListRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"BCCGDistributor","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}