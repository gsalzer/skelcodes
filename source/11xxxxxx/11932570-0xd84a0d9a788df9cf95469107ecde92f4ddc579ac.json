{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\r\n//   _    _ _   _                __ _                            \r\n//  | |  (_) | | |              / _(_)                           \r\n//  | | ___| |_| |_ ___ _ __   | |_ _ _ __   __ _ _ __   ___ ___ \r\n//  | |/ / | __| __/ _ \\ '_ \\  |  _| | '_ \\ / _` | '_ \\ / __/ _ \\\r\n//  |   <| | |_| ||  __/ | | |_| | | | | | | (_| | | | | (_|  __/\r\n//  |_|\\_\\_|\\__|\\__\\___|_| |_(_)_| |_|_| |_|\\__,_|_| |_|\\___\\___|\r\n//\r\n//  KittenSwap Lending v0\r\n//\r\n//  https://www.KittenSwap.org/\r\n//\r\npragma solidity ^0.6.12;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require (c >= a, \"!!add\");\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require (b <= a, \"!!sub\");\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require (b <= a, errorMessage);\r\n        uint c = a - b;\r\n        return c;\r\n    }    \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require (c / a == b, \"!!mul\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require (b > 0, \"!!div\");\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract ERC20Detailed {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\n////////////////////////////////////////////////////////////////////////////////\r\n\r\ninterface LIQUID_TOKEN {\r\n    function totalSupply (  ) external view returns ( uint256 );\r\n    function getTokenReserve (  ) external view returns ( uint256 );\r\n    function getEthReserve (  ) external view returns ( uint256 );\r\n    \r\n    function balanceOf ( address account ) external view returns ( uint256 );\r\n    function transfer ( address recipient, uint256 amount ) external returns ( bool );\r\n    function transferFrom ( address sender, address recipient, uint256 amount ) external returns ( bool );    \r\n    \r\n    function buyToken ( uint256 minTokenAmt, uint256 expireTimestamp ) external payable;    \r\n    function sellToken ( uint256 tokenAmt, uint256 minEthAmt, uint256 expireTimestamp ) external;\r\n}\r\n\r\n////////////////////////////////////////////////////////////////////////////////\r\n\r\ncontract KittenETHv0 is ERC20Detailed\r\n{\r\n    using SafeMath for uint;\r\n    \r\n    address public constant LIQUID_ADDR = 0xC618D56b6D606E59c6B87Af724AB5a91eb40D1cb;\r\n    uint public MIGRATION_TIMESTAMP = 0;               // for migration\r\n    uint public MIGRATION_LIQUIDATION_WAIT = 14 days;  // gov can liquidate forgotten loans some days after migration starts\r\n    uint public FLASH_LOAN_BP = 10;                    // in terms of basis points\r\n    \r\n    ////////////////////////////////////////////////////////////////////////////////\r\n    \r\n    LIQUID_TOKEN private constant LIQUID = LIQUID_TOKEN(LIQUID_ADDR);\r\n    address public govAddr;\r\n        \r\n    constructor () public ERC20Detailed(\"KittenETHv0\", \"KittenETHv0\", 18) {\r\n        govAddr = msg.sender;\r\n    }\r\n    \r\n    modifier govOnly() {\r\n    \trequire (msg.sender == govAddr, \"!gov\");\r\n    \t_;\r\n    }\r\n    \r\n    function govTransferAddr(address newAddr) external govOnly {\r\n    \trequire (newAddr != address(0), \"!addr\");\r\n    \tgovAddr = newAddr;\r\n    }\r\n    \r\n    function govSetMIGRATION_TIMESTAMP(uint $MIGRATION_TIMESTAMP) external govOnly {\r\n        require ($MIGRATION_TIMESTAMP > block.timestamp);\r\n    \tMIGRATION_TIMESTAMP = $MIGRATION_TIMESTAMP;\r\n    }\r\n    \r\n    function govSetFLASH_LOAN_BP(uint $FLASH_LOAN_BP) external govOnly {\r\n        require (FLASH_LOAN_BP <= 60);\r\n    \tFLASH_LOAN_BP = $FLASH_LOAN_BP;\r\n    }    \r\n    \r\n    ////////////////////////////////////////////////////////////////////////////////\r\n    \r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    \r\n    mapping (address => uint) private _balances;\r\n    mapping (address => mapping (address => uint)) private _allowances;\r\n\r\n    uint private _totalSupply;\r\n    function totalSupply() public view returns (uint) {\r\n        return _totalSupply;\r\n    }\r\n    function balanceOf(address account) public view returns (uint) {\r\n        return _balances[account];\r\n    }\r\n    function transfer(address recipient, uint amount) public returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n    function transferFrom(address sender, address recipient, uint amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n    function _transfer(address sender, address recipient, uint amount) internal {\r\n        require (sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require (recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        \r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n    \r\n    //------------------------------------------------------------------------------\r\n    \r\n    function allowance(address owner, address spender) public view returns (uint) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    function approve(address spender, uint amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    function _approve(address owner, address spender, uint amount) internal {\r\n        require (owner != address(0), \"ERC20: approve from the zero address\");\r\n        require (spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    \r\n    //------------------------------------------------------------------------------\r\n    \r\n    function _mint(address account, uint amount) internal {\r\n        require (account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _balances[account] = _balances[account].add(amount);\r\n        _totalSupply = _totalSupply.add(amount);\r\n\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n    function _burn(address account, uint amount) internal {\r\n        require (account != address(0), \"ERC20: burn from the zero address\");\r\n        \r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n    \r\n    ////////////////////////////////////////////////////////////////////////////////\r\n\r\n    uint constant PRICE_SCALE = 10 ** 10;\r\n    function getLiqEthFloorPriceScaled() internal view returns (uint)\r\n    {\r\n        uint AMM_PRODUCT = (LIQUID.getTokenReserve()).mul(LIQUID.getEthReserve());\r\n        uint TOTAL_SUPPLY = LIQUID.totalSupply();\r\n\r\n        return PRICE_SCALE.mul(AMM_PRODUCT).div(TOTAL_SUPPLY).div(TOTAL_SUPPLY);\r\n    }\r\n    \r\n    ////////////////////////////////////////////////////////////////////////////////\r\n\r\n    event LOCK_ETH(address indexed user, uint ethAmt, uint kethAmt);\r\n    event UNLOCK_ETH(address indexed user, uint ethAmt, uint kethAmt);\r\n    \r\n    function getContractValueInEth() public view returns (uint)\r\n    {\r\n        uint ethValue = (address(this).balance);\r\n        \r\n        uint liqValue = (LIQUID.balanceOf(address(this))).mul(getLiqEthFloorPriceScaled()) / (PRICE_SCALE);\r\n        \r\n        return ethValue.add(liqValue);\r\n    }\r\n\r\n    function lockEth() external payable // lock ETH for lending, and mint KittenEth\r\n    {\r\n        //-------- receive ETH from user --------\r\n        address user = msg.sender;\r\n        uint ethInAmt = msg.value;\r\n        require (ethInAmt > 0, '!ethInAmt');\r\n        \r\n        //-------- compute KittenETH mint amt --------\r\n        uint kethMintAmt = 0;\r\n        if (_totalSupply == 0) { \r\n            kethMintAmt = ethInAmt; // initial price: 1 kETH = 1 ETH\r\n        }\r\n        else {                \r\n            kethMintAmt = ethInAmt.mul(_totalSupply).div(getContractValueInEth().sub(ethInAmt));\r\n        }\r\n        \r\n        //-------- mint KittenETH to user --------\r\n        _mint(user, kethMintAmt);\r\n        emit LOCK_ETH(user, ethInAmt, kethMintAmt);\r\n    }\r\n    \r\n    function unlockEth(uint kethBurnAmt) external // unlock ETH, and burn KittenEth\r\n    {\r\n        require (kethBurnAmt > 0, '!kethBurnAmt');\r\n        address payable user = msg.sender;\r\n\r\n        //-------- compute ETH out amt --------\r\n        uint ethOutAmt = kethBurnAmt.mul(getContractValueInEth()).div(_totalSupply);\r\n        require (address(this).balance >= ethOutAmt, '!ethInContract');\r\n\r\n        //-------- burn KittenETH from user --------\r\n        _burn(user, kethBurnAmt);\r\n        \r\n        //-------- send ETH to user --------\r\n        user.transfer(ethOutAmt);\r\n        emit UNLOCK_ETH(user, ethOutAmt, kethBurnAmt);\r\n    }\r\n    \r\n    ////////////////////////////////////////////////////////////////////////////////\r\n    \r\n    mapping (address => uint) public liqLocked;\r\n    \r\n    event LOCK_LIQ(address indexed user, uint liqAmt, uint ethAmt);\r\n    event UNLOCK_LIQ(address indexed user, uint liqAmt, uint ethAmt);    \r\n    \r\n    function lockLiq(uint liqInAmt) external // lock LIQUID to borrow ETH\r\n    {\r\n        require (liqInAmt > 0, '!liqInAmt');\r\n        require (block.timestamp < MIGRATION_TIMESTAMP, '!migration'); // can't lock after migration starts\r\n        address payable user = msg.sender;\r\n\r\n        //-------- compute ETH out amt --------\r\n        uint ethOutAmt = liqInAmt.mul(getLiqEthFloorPriceScaled()) / (PRICE_SCALE);\r\n        require (address(this).balance >= ethOutAmt, '!ethInContract');\r\n\r\n        //--------  send LIQUID to contract --------\r\n        LIQUID.transferFrom(user, address(this), liqInAmt); \r\n        liqLocked[user] = liqLocked[user].add(liqInAmt);\r\n        \r\n        //-------- send ETH to user --------\r\n        user.transfer(ethOutAmt);\r\n        emit LOCK_LIQ(user, liqInAmt, ethOutAmt);\r\n    }\r\n    \r\n    function unlockLiq() external payable // payback ETH to unlock LIQUID\r\n    {\r\n        //-------- receive ETH from user --------\r\n        uint ethInAmt = msg.value;\r\n        require (ethInAmt > 0, '!ethInAmt');\r\n        uint ethReturnAmt = 0;\r\n        address payable user = msg.sender;\r\n\r\n        //-------- compute LIQUID out amt --------\r\n        uint LiqEthFloorPriceScaled = getLiqEthFloorPriceScaled();\r\n\r\n        uint liqOutAmt = ethInAmt.mul(PRICE_SCALE).div(LiqEthFloorPriceScaled);\r\n        if (liqOutAmt > liqLocked[user])\r\n        {\r\n            liqOutAmt = liqLocked[user];\r\n            ethReturnAmt = ethInAmt.sub(\r\n                    liqOutAmt.mul(LiqEthFloorPriceScaled) / (PRICE_SCALE)\r\n                );\r\n        }\r\n        \r\n        //--------  send LIQUID to user --------\r\n        liqLocked[user] = liqLocked[user].sub(liqOutAmt);\r\n        LIQUID.transfer(user, liqOutAmt);\r\n        \r\n        //-------- return extra ETH to user --------\r\n        if (ethReturnAmt > 10 ** 8) { // ignore dust\r\n            user.transfer(ethReturnAmt);\r\n        }\r\n        emit UNLOCK_LIQ(user, liqOutAmt, ethInAmt.sub(ethReturnAmt));\r\n    }\r\n    \r\n    ////////////////////////////////////////////////////////////////////////////////\r\n    \r\n    receive() external payable { // receive ETH (from selling LIQUID)\r\n        require(msg.sender == LIQUID_ADDR, '!sender');\r\n    }\r\n\r\n    function flashUnlockLiqAndSell(address payable user, uint liqUnlockAmt, uint liqSellAmt, uint liqSellMinEthAmt, uint liqSellExpireTimestamp) external payable\r\n    {\r\n        require (\r\n            (user == msg.sender) \r\n            || // gov can liquidate forgotten loans some days after migration starts\r\n            ((block.timestamp.sub(MIGRATION_LIQUIDATION_WAIT) > MIGRATION_TIMESTAMP) && (govAddr == msg.sender))\r\n        , '!user');\r\n        \r\n        if (liqUnlockAmt > liqLocked[user])\r\n            liqUnlockAmt = liqLocked[user];\r\n        if (liqSellAmt > liqUnlockAmt)\r\n            liqSellAmt = liqUnlockAmt;\r\n\r\n        //-------- receive ETH from user --------\r\n        uint ethInAmt = msg.value;\r\n        \r\n        //-------- compute ETH required for unlocking LIQUID --------\r\n        uint ethBorrowAmt = 0;\r\n        uint ethOutAmt = 0;\r\n        \r\n        uint ethRequiredForUnlock = liqUnlockAmt.mul(getLiqEthFloorPriceScaled()) / (PRICE_SCALE);\r\n        if (ethRequiredForUnlock > ethInAmt) {\r\n            ethBorrowAmt = (ethRequiredForUnlock - ethInAmt).mul(10000 + FLASH_LOAN_BP) / 10000; // add FLASH_LOAN_BP fee\r\n        } else {\r\n            ethOutAmt = ethInAmt - ethRequiredForUnlock;\r\n        }\r\n\r\n        //-------- sell LIQUID --------\r\n        uint liqLoss = 0;\r\n        uint ethGain = 0;\r\n        if (liqSellAmt > 0)\r\n        {\r\n            uint liqBefore = LIQUID.balanceOf(address(this));\r\n            uint ethBefore = address(this).balance;\r\n            \r\n            LIQUID.sellToken(liqSellAmt, liqSellMinEthAmt, liqSellExpireTimestamp); // sell LIQUID\r\n    \r\n            liqLoss = liqBefore.sub(LIQUID.balanceOf(address(this)), '!liqLoss'); // now contract has less LIQUID\r\n            ethGain = (address(this).balance).sub(ethBefore, '!ethGain'); // now contract has more ETH            \r\n        }\r\n        \r\n        //-------- payback flash-loan (if occured) --------\r\n        if (ethBorrowAmt > 0) { // ethOutAmt = 0\r\n            ethOutAmt = ethGain.sub(ethBorrowAmt, '!ethBorrowAmt'); // will throw if not enough\r\n        } else { // ethBorrowAmt = 0\r\n            ethOutAmt = ethOutAmt.add(ethGain);\r\n        }\r\n\r\n        //-------- unlock LIQUID --------\r\n        liqLocked[user] = liqLocked[user].sub(liqUnlockAmt, '!liqUnlockAmt');\r\n        \r\n        //-------- send LIQUID to user --------\r\n        if (liqUnlockAmt > liqLoss) {\r\n            LIQUID.transfer(user, liqUnlockAmt - liqLoss);\r\n        }\r\n        //-------- send ETH to user --------\r\n        if (ethOutAmt > 10 ** 8) { // ignore dust\r\n            user.transfer(ethOutAmt);\r\n        }\r\n        \r\n        emit UNLOCK_LIQ(user, liqUnlockAmt, ethRequiredForUnlock);\r\n    }\r\n    \r\n    function flashBuyLiqAndLock(uint ethBorrowAmt, uint liqLockAmt, uint liqBuyMinAmt, uint liqBuyExpireTimestamp) external payable\r\n    {\r\n        require (block.timestamp < MIGRATION_TIMESTAMP, '!migration'); // can't lock after migration starts        \r\n        address payable user = msg.sender;\r\n        \r\n        //-------- receive ETH from user --------\r\n        uint ethInAmt = msg.value;\r\n        \r\n        //-------- buy LIQUID --------\r\n        uint liqGain = 0;\r\n        uint ethLoss = 0;\r\n        {\r\n            uint liqBefore = LIQUID.balanceOf(address(this));\r\n            uint ethBefore = address(this).balance;\r\n            \r\n            //-------- borrow flash-loan --------\r\n            uint ethTotalInAmt = ethInAmt.add(ethBorrowAmt);\r\n            \r\n            require (ethBefore >= ethTotalInAmt, '!ethInContract');\r\n            LIQUID.buyToken {value: ethTotalInAmt} (liqBuyMinAmt, liqBuyExpireTimestamp); // buy LIQUID\r\n    \r\n            liqGain = (LIQUID.balanceOf(address(this))).sub(liqBefore, '!liqGain'); // now contract has more LIQUID\r\n            ethLoss = ethBefore.sub(address(this).balance, '!ethLoss'); // now contract has less ETH            \r\n        }\r\n        \r\n        //-------- compute ETH gain from locking LIQUID --------\r\n        if (liqLockAmt > liqGain) {\r\n            liqLockAmt = liqGain;\r\n        }\r\n        uint ethLockOutAmt = liqLockAmt.mul(getLiqEthFloorPriceScaled()) / (PRICE_SCALE);\r\n        \r\n        //-------- payback flash-loan --------\r\n        uint ethOutAmt = ethInAmt.add(ethLockOutAmt).sub(ethLoss, '!ethLockOutAmt'); // will throw if not enough\r\n        ethOutAmt = ethOutAmt.sub(ethBorrowAmt.mul(FLASH_LOAN_BP) / 10000, '!ethBorrowAmt');\r\n\r\n        //-------- lock LIQUID --------\r\n        liqLocked[user] = liqLocked[user].add(liqLockAmt);\r\n        \r\n        //-------- send LIQUID to user --------\r\n        if (liqGain > liqLockAmt) {\r\n            LIQUID.transfer(user, liqGain - liqLockAmt);\r\n        }\r\n        //-------- send ETH to user --------\r\n        if (ethOutAmt > 10 ** 8) { // ignore dust\r\n            require (address(this).balance >= ethOutAmt, '!ethOutAmt');\r\n            user.transfer(ethOutAmt);\r\n        }\r\n        \r\n        emit LOCK_LIQ(user, liqLockAmt, ethLockOutAmt);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"kethAmt\",\"type\":\"uint256\"}],\"name\":\"LOCK_ETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liqAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmt\",\"type\":\"uint256\"}],\"name\":\"LOCK_LIQ\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"kethAmt\",\"type\":\"uint256\"}],\"name\":\"UNLOCK_ETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liqAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmt\",\"type\":\"uint256\"}],\"name\":\"UNLOCK_LIQ\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FLASH_LOAN_BP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUID_ADDR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIGRATION_LIQUIDATION_WAIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIGRATION_TIMESTAMP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethBorrowAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liqLockAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liqBuyMinAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liqBuyExpireTimestamp\",\"type\":\"uint256\"}],\"name\":\"flashBuyLiqAndLock\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liqUnlockAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liqSellAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liqSellMinEthAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liqSellExpireTimestamp\",\"type\":\"uint256\"}],\"name\":\"flashUnlockLiqAndSell\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractValueInEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"govAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"$FLASH_LOAN_BP\",\"type\":\"uint256\"}],\"name\":\"govSetFLASH_LOAN_BP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"$MIGRATION_TIMESTAMP\",\"type\":\"uint256\"}],\"name\":\"govSetMIGRATION_TIMESTAMP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddr\",\"type\":\"address\"}],\"name\":\"govTransferAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liqLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liqInAmt\",\"type\":\"uint256\"}],\"name\":\"lockLiq\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"kethBurnAmt\",\"type\":\"uint256\"}],\"name\":\"unlockEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockLiq\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"KittenETHv0","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"999","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c5a926da78506474e82c8b52a22f26414e5780fe9150d7e446c639d81942f635"}]}