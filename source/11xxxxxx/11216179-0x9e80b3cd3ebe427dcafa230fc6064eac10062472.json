{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity >=0.4.22 <0.8.0;\r\n\r\ncontract VatLike {\r\n    function hope(address usr) external;\r\n    function frob(bytes32 i, address u, address v, address w, int dink, int dart) external;\r\n    function fork(bytes32 ilk, address src, address dst, int dink, int dart) external;\r\n    function ilks(bytes32 ilk) public view returns(uint Art, uint rate, uint spot, uint line, uint dust);\r\n    function urns(bytes32 ilk, address urn) public view returns(uint art, uint ink);\r\n}\r\n\r\ncontract Hoper {\r\n    constructor(VatLike vat) public {\r\n        vat.hope(msg.sender);\r\n        selfdestruct(address(0));\r\n    }\r\n}\r\n\r\ncontract Experiment {\r\n    VatLike vat = VatLike(0x35D1b3F3D7966A1DFe207aa4514C12a259A0492B);\r\n    address admin;\r\n    bytes32 constant ILK = bytes32(0x4554482d41000000000000000000000000000000000000000000000000000000);\r\n\r\n    constructor() public {\r\n        admin = msg.sender;\r\n        vat.hope(msg.sender);\r\n    }\r\n\r\n    function liquidationPrice(uint ink, uint art) public view returns(uint) {\r\n        (,uint rate,,,) = vat.ilks(ILK);\r\n        uint daiDebt = rate * art / 1e27;\r\n        return 1e18 * daiDebt * 15 / (ink * 10);\r\n    }\r\n\r\n    function openVault(uint ink, uint dart) public {\r\n        require(msg.sender == admin);\r\n        address me = address(this);\r\n        vat.frob(ILK,me,me,me,int(ink),int(dart));\r\n    }\r\n\r\n    event NewAddress(address a);\r\n\r\n    function splitVault(uint numVaults, uint vaultInk, uint vaultArt) public {\r\n        require(msg.sender == admin);\r\n        VatLike theVat = vat;\r\n        address me = address(this);\r\n        for(uint i = 0 ; i < numVaults ; i++) {\r\n            address h = address(new Hoper(theVat));\r\n            emit NewAddress(h);\r\n            theVat.fork(ILK,me,h,int(vaultInk),int(vaultArt));\r\n            //theVat.frob(ILK,h,me,me,int(vaultInk),int(vaultArt));\r\n        }\r\n    }\r\n\r\n    function repay(address[] memory urns, uint ink, uint art) public {\r\n        require(msg.sender == admin);\r\n        VatLike theVat = vat;\r\n        address me = address(this);\r\n        for(uint i = 0 ; i < urns.length ; i++) {\r\n            theVat.frob(ILK,urns[i],me,me,-int(ink),-int(art));\r\n        }\r\n    }\r\n\r\n    event IsSafe(address urn, bool isSafe);\r\n    function safe(address[] memory urns) public {\r\n        (, uint rate, uint spot,,) = vat.ilks(ILK);\r\n        for(uint i = 0 ; i < urns.length ; i++) {\r\n            (uint art, uint ink) = vat.urns(ILK, urns[i]);\r\n            uint tab = art * rate;\r\n            bool isSafe = (tab <= ink * spot);\r\n            emit IsSafe(urns[i], isSafe);\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"urn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isSafe\",\"type\":\"bool\"}],\"name\":\"IsSafe\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"NewAddress\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ink\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"art\",\"type\":\"uint256\"}],\"name\":\"liquidationPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ink\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dart\",\"type\":\"uint256\"}],\"name\":\"openVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"urns\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"ink\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"art\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"urns\",\"type\":\"address[]\"}],\"name\":\"safe\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numVaults\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vaultInk\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vaultArt\",\"type\":\"uint256\"}],\"name\":\"splitVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Experiment","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"BSD-3-Clause","Proxy":"0","Implementation":"","SwarmSource":"bzzr://d9b03ff41b1e42143bd687c5fa2e440dc6ffc9e9b990c050fffe7a8e56adcdc3"}]}