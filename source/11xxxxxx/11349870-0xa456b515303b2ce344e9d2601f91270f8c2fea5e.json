{"status":"1","message":"OK","result":[{"SourceCode":"# @version 0.2.7\r\nfrom vyper.interfaces import ERC20\r\n\r\nimplements: ERC20\r\n\r\nevent Transfer:\r\n    sender: indexed(address)\r\n    receiver: indexed(address)\r\n    value: uint256\r\n\r\nevent Approval:\r\n    owner: indexed(address)\r\n    spender: indexed(address)\r\n    value: uint256\r\n\r\nevent Pickled:\r\n    receiver: indexed(address)\r\n    corn: uint256\r\n    dai: uint256\r\n\r\nstruct Permit:\r\n    owner: address\r\n    spender: address\r\n    amount: uint256\r\n    nonce: uint256\r\n    expiry: uint256\r\n\r\n\r\nname: public(String[64])\r\nsymbol: public(String[32])\r\ndecimals: public(uint256)\r\nbalanceOf: public(HashMap[address, uint256])\r\nnonces: public(HashMap[address, uint256])\r\nallowances: HashMap[address, HashMap[address, uint256]]\r\ntotal_supply: uint256\r\ndai: ERC20\r\nDOMAIN_SEPARATOR: public(bytes32)\r\ncontract_version: constant(String[32]) = \"1\"\r\nDOMAIN_TYPE_HASH: constant(bytes32) = keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)')\r\nPERMIT_TYPE_HASH: constant(bytes32) = keccak256(\"Permit(address owner,address spender,uint256 amount,uint256 nonce,uint256 expiry)\")\r\n\r\n\r\n@external\r\ndef __init__(_name: String[64], _symbol: String[32], _supply: uint256):\r\n    self.name = _name\r\n    self.symbol = _symbol\r\n    self.decimals = 18\r\n    self.dai = ERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F)\r\n    self.balanceOf[msg.sender] = _supply\r\n    self.total_supply = _supply\r\n    log Transfer(ZERO_ADDRESS, msg.sender, _supply)\r\n\r\n    self.DOMAIN_SEPARATOR = keccak256(\r\n        concat(\r\n            DOMAIN_TYPE_HASH,\r\n            keccak256(convert(self.name, Bytes[64])),\r\n            keccak256(convert(contract_version, Bytes[32])),\r\n            convert(chain.id, bytes32),\r\n            convert(self, bytes32)\r\n        )\r\n    )\r\n\r\n\r\n@view\r\n@external\r\ndef totalSupply() -> uint256:\r\n    return self.total_supply\r\n\r\n\r\n@view\r\n@external\r\ndef version() -> String[32]:\r\n    return contract_version\r\n\r\n\r\n@view\r\n@external\r\ndef allowance(owner: address, spender: address) -> uint256:\r\n    return self.allowances[owner][spender]\r\n\r\n\r\n@internal\r\ndef _transfer(sender: address, source: address, receiver: address, amount: uint256) -> bool:\r\n    assert not receiver in [self, ZERO_ADDRESS]\r\n    self.balanceOf[source] -= amount\r\n    self.balanceOf[receiver] += amount\r\n    if source != sender and self.allowances[source][sender] != MAX_UINT256:\r\n        self.allowances[source][sender] -= amount\r\n        log Approval(source, sender, amount)\r\n    log Transfer(source, receiver, amount)\r\n    return True\r\n\r\n\r\n@external\r\ndef transfer(receiver: address, amount: uint256) -> bool:\r\n    return self._transfer(msg.sender, msg.sender, receiver, amount)\r\n\r\n\r\n@external\r\ndef transferFrom(source: address, receiver: address, amount: uint256) -> bool:\r\n    return self._transfer(msg.sender, source, receiver, amount)\r\n\r\n\r\n@external\r\ndef approve(spender: address, amount: uint256) -> bool:\r\n    self.allowances[msg.sender][spender] = amount\r\n    log Approval(msg.sender, spender, amount)\r\n    return True\r\n\r\n\r\n@view\r\n@internal\r\ndef _rate(amount: uint256) -> uint256:\r\n    if self.total_supply == 0:\r\n        return 0\r\n    return amount * self.dai.balanceOf(self) / self.total_supply\r\n\r\n\r\n@view\r\n@external\r\ndef rate() -> uint256:\r\n    return self._rate(10 ** self.decimals)\r\n\r\n\r\n@internal\r\ndef _burn(sender: address, source: address, amount: uint256):\r\n    assert source != ZERO_ADDRESS\r\n    redeemed: uint256 = self._rate(amount)\r\n    self.dai.transfer(source, redeemed)\r\n    log Pickled(source, amount, redeemed)\r\n    self.total_supply -= amount\r\n    self.balanceOf[source] -= amount\r\n    if source != sender and self.allowances[source][sender] != MAX_UINT256:\r\n        self.allowances[source][sender] -= amount\r\n        log Approval(source, sender, amount)\r\n    log Transfer(source, ZERO_ADDRESS, amount)\r\n\r\n\r\n@external\r\ndef burn(_amount: uint256 = MAX_UINT256):\r\n    \"\"\"\r\n    Burn CORN for DAI at a rate of (DAI in contract / CORN supply)\r\n    \"\"\"\r\n    amount: uint256 = min(_amount, self.balanceOf[msg.sender])\r\n    self._burn(msg.sender, msg.sender, amount)\r\n\r\n\r\n@external\r\ndef burnFrom(source: address, amount: uint256):\r\n    self._burn(msg.sender, source, amount)\r\n\r\n\r\n@view\r\n@internal\r\ndef message_digest(owner: address, spender: address, amount: uint256, nonce: uint256, expiry: uint256) -> bytes32:\r\n    return keccak256(\r\n        concat(\r\n            b'\\x19\\x01',\r\n            self.DOMAIN_SEPARATOR,\r\n            keccak256(\r\n                concat(\r\n                    PERMIT_TYPE_HASH,\r\n                    convert(owner, bytes32),\r\n                    convert(spender, bytes32),\r\n                    convert(amount, bytes32),\r\n                    convert(nonce, bytes32),\r\n                    convert(expiry, bytes32),\r\n                )\r\n            )\r\n        )\r\n    )\r\n\r\n\r\n@external\r\ndef permit(owner: address, spender: address, amount: uint256, nonce: uint256, expiry: uint256, signature: Bytes[65]) -> bool:\r\n    assert expiry >= block.timestamp  # dev: permit expired\r\n    assert owner != ZERO_ADDRESS  # dev: invalid owner\r\n    assert nonce == self.nonces[owner]  # dev: invalid nonce\r\n    digest: bytes32 = self.message_digest(owner, spender, amount, nonce, expiry)\r\n    # NOTE: signature is packed as r, s, v\r\n    r: uint256 = convert(slice(signature, 0, 32), uint256)\r\n    s: uint256 = convert(slice(signature, 32, 32), uint256)\r\n    v: uint256 = convert(slice(signature, 64, 1), uint256)\r\n    assert ecrecover(digest, v, r, s) == owner  # dev: invalid signature\r\n\r\n    self.allowances[owner][spender] = amount\r\n    self.nonces[owner] += 1\r\n    log Approval(owner, spender, amount)\r\n    return True","ABI":"[{\"name\":\"Transfer\",\"inputs\":[{\"type\":\"address\",\"name\":\"sender\",\"indexed\":true},{\"type\":\"address\",\"name\":\"receiver\",\"indexed\":true},{\"type\":\"uint256\",\"name\":\"value\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Approval\",\"inputs\":[{\"type\":\"address\",\"name\":\"owner\",\"indexed\":true},{\"type\":\"address\",\"name\":\"spender\",\"indexed\":true},{\"type\":\"uint256\",\"name\":\"value\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Pickled\",\"inputs\":[{\"type\":\"address\",\"name\":\"receiver\",\"indexed\":true},{\"type\":\"uint256\",\"name\":\"corn\",\"indexed\":false},{\"type\":\"uint256\",\"name\":\"dai\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"outputs\":[],\"inputs\":[{\"type\":\"string\",\"name\":\"_name\"},{\"type\":\"string\",\"name\":\"_symbol\"},{\"type\":\"uint256\",\"name\":\"_supply\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"name\":\"totalSupply\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1061},{\"name\":\"version\",\"outputs\":[{\"type\":\"string\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":4519},{\"name\":\"allowance\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"owner\"},{\"type\":\"address\",\"name\":\"spender\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1551},{\"name\":\"transfer\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"receiver\"},{\"type\":\"uint256\",\"name\":\"amount\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":115661},{\"name\":\"transferFrom\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"source\"},{\"type\":\"address\",\"name\":\"receiver\"},{\"type\":\"uint256\",\"name\":\"amount\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":115795},{\"name\":\"approve\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"spender\"},{\"type\":\"uint256\",\"name\":\"amount\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":37884},{\"name\":\"rate\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":6113},{\"name\":\"burn\",\"outputs\":[],\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"name\":\"burn\",\"outputs\":[],\"inputs\":[{\"type\":\"uint256\",\"name\":\"_amount\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"name\":\"burnFrom\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"source\"},{\"type\":\"uint256\",\"name\":\"amount\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":127210},{\"name\":\"permit\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"owner\"},{\"type\":\"address\",\"name\":\"spender\"},{\"type\":\"uint256\",\"name\":\"amount\"},{\"type\":\"uint256\",\"name\":\"nonce\"},{\"type\":\"uint256\",\"name\":\"expiry\"},{\"type\":\"bytes\",\"name\":\"signature\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":83136},{\"name\":\"name\",\"outputs\":[{\"type\":\"string\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":7883},{\"name\":\"symbol\",\"outputs\":[{\"type\":\"string\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":6936},{\"name\":\"decimals\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1541},{\"name\":\"balanceOf\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"arg0\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1786},{\"name\":\"nonces\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"arg0\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1816},{\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"type\":\"bytes32\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1631}]","ContractName":"Vyper_contract","CompilerVersion":"vyper:0.2.7","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000001058bab3f81eaa02af73ce0000000000000000000000000000000000000000000000000000000000000009436f726e6963686f6e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004434f524e00000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}