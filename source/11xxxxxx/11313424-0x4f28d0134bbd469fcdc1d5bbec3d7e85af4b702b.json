{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.2;\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface USDT {\r\n    function approve(address guy, uint256 wad) external;\r\n\r\n    function transfer(address _to, uint256 _value) external;\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) external;\r\n}\r\n\r\ninterface ICurveFi_4 {\r\n    function add_liquidity(uint256[4] calldata amounts, uint256 min_mint_amount) external;\r\n}\r\n\r\ninterface IVault {\r\n    function deposit(uint256) external;\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\nlibrary Math {\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\ncontract ToolYcrv {\r\n    using SafeMath for uint256;\r\n\r\n    address public constant yDeposit = 0xbBC81d23Ea2c3ec7e56D39296F0cbB648873a5d3;\r\n    address public constant yCrv = 0xdF5e0e81Dff6FAF3A7e52BA697820c5e32D806A8;\r\n    address public constant bYcrv = 0x50DFDdA590eA1C38A6F041A4F383818C9caF3b16;\r\n\r\n    // stablecoins\r\n    address public constant dai = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\r\n    address public constant usdc = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\r\n    address public constant usdt = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\r\n    address public constant tusd = 0x0000000000085d4780B73119b644AE5ecd22b376;\r\n\r\n    event Recycled(address indexed user, uint256 sentDai, uint256 sentUsdc,\r\n        uint256 sentUsdt, uint256 sentTusd, uint256 sentYcrv, uint256 receivedYusd);\r\n\r\n    constructor() public {\r\n        IERC20(dai).approve(yDeposit, uint256(- 1));\r\n        IERC20(usdc).approve(yDeposit, uint256(- 1));\r\n        USDT(usdt).approve(yDeposit, uint256(- 1));\r\n        IERC20(tusd).approve(yDeposit, uint256(- 1));\r\n        IERC20(yCrv).approve(bYcrv, uint256(- 1));\r\n    }\r\n\r\n    function recycleExactAmounts(address sender, uint256 _dai, uint256 _usdc, uint256 _usdt, uint256 _tusd, uint256 _ycrv) internal {\r\n        if (_dai > 0) {\r\n            IERC20(dai).transferFrom(sender, address(this), _dai);\r\n        }\r\n        if (_usdc > 0) {\r\n            IERC20(usdc).transferFrom(sender, address(this), _usdc);\r\n        }\r\n        if (_usdt > 0) {\r\n            USDT(usdt).transferFrom(sender, address(this), _usdt);\r\n        }\r\n        if (_tusd > 0) {\r\n            IERC20(tusd).transferFrom(sender, address(this), _tusd);\r\n        }\r\n        if (_ycrv > 0) {\r\n            IERC20(yCrv).transferFrom(sender, address(this), _ycrv);\r\n        }\r\n\r\n        uint256[4] memory depositAmounts = [_dai, _usdc, _usdt, _tusd];\r\n        if (_dai.add(_usdc).add(_usdt).add(_tusd) > 0) {\r\n            ICurveFi_4(yDeposit).add_liquidity(depositAmounts, 0);\r\n        }\r\n\r\n        uint256 ycrvBalance = IERC20(yCrv).balanceOf(address(this));\r\n        if (ycrvBalance > 0) {\r\n            IVault(bYcrv).deposit(ycrvBalance);\r\n        }\r\n\r\n        uint256 _bYcrv = IERC20(bYcrv).balanceOf(address(this));\r\n        if (_bYcrv > 0) {\r\n            IERC20(bYcrv).transfer(sender, _bYcrv);\r\n        }\r\n\r\n        assert(IERC20(bYcrv).balanceOf(address(this)) == 0);\r\n\r\n        emit Recycled(sender, _dai, _usdc, _usdt, _tusd, _ycrv, _bYcrv);\r\n    }\r\n\r\n    function recycle() external {\r\n        uint256 _dai = Math.min(IERC20(dai).balanceOf(msg.sender), IERC20(dai).allowance(msg.sender, address(this)));\r\n        uint256 _usdc = Math.min(IERC20(usdc).balanceOf(msg.sender), IERC20(usdc).allowance(msg.sender, address(this)));\r\n        uint256 _usdt = Math.min(IERC20(usdt).balanceOf(msg.sender), IERC20(usdt).allowance(msg.sender, address(this)));\r\n        uint256 _tusd = Math.min(IERC20(tusd).balanceOf(msg.sender), IERC20(tusd).allowance(msg.sender, address(this)));\r\n        uint256 _ycrv = Math.min(IERC20(yCrv).balanceOf(msg.sender), IERC20(yCrv).allowance(msg.sender, address(this)));\r\n\r\n        recycleExactAmounts(msg.sender, _dai, _usdc, _usdt, _tusd, _ycrv);\r\n    }\r\n\r\n\r\n    function recycleExact(uint256 _dai, uint256 _usdc, uint256 _usdt, uint256 _tusd, uint256 _ycrv) external {\r\n        recycleExactAmounts(msg.sender, _dai, _usdc, _usdt, _tusd, _ycrv);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sentDai\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sentUsdc\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sentUsdt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sentTusd\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sentYcrv\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receivedYusd\",\"type\":\"uint256\"}],\"name\":\"Recycled\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bYcrv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recycle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dai\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_usdc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_usdt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tusd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ycrv\",\"type\":\"uint256\"}],\"name\":\"recycleExact\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tusd\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yCrv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yDeposit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ToolYcrv","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"istanbul","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://254bd31db1865c1017b2b2bbfc5d9d1d888b4dcd66939d614fb3caf9eb85ab37"}]}