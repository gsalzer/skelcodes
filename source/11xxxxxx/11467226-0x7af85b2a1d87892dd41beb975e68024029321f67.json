{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/home/mark/src/carson/smart-contract/contracts/UniswapStakingGetter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.7.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IERC20.sol\\\";\\n\\nstruct PoolInfo {\\n    address contractAddr;\\n    address token0Addr;\\n    address token1Addr;\\n    string token0Symbol;\\n    string token1Symbol;\\n    uint8 token0Digits;\\n    uint8 token1Digits;\\n}\\n\\nstruct PoolBalance {\\n    address walletAddr;\\n    address contractAddr;\\n    uint tokenBalance;\\n    uint totalSupply;\\n    uint112 reserves0;\\n    uint112 reserves1;\\n}\\n\\ncontract UniswapStakingGetter {\\n    constructor() public {}\\n\\n    function getPoolInfos(address[] memory contracts) public view returns (PoolInfo[] memory) {\\n        PoolInfo[] memory output = new PoolInfo[](contracts.length);\\n        for (uint i = 0; i < contracts.length; ++i) {\\n            IUniswapV2Pair pair = IUniswapV2Pair(contracts[i]);\\n            IERC20 token0 = IERC20(pair.token0());\\n            IERC20 token1 = IERC20(pair.token1());\\n            address token0Addr = pair.token0();\\n            address token1Addr = pair.token1();\\n            string memory token0Symbol = token0.symbol();\\n            string memory token1Symbol = token1.symbol();\\n            uint8 token0Digits = token0.decimals();\\n            uint8 token1Digits = token1.decimals();\\n            output[i] = PoolInfo(contracts[i], token0Addr, token1Addr, token0Symbol, token1Symbol, token0Digits, token1Digits);\\n        }\\n\\n        return output;\\n    }\\n\\n    function getBalance(address[] memory wallets, address[] memory pools) public view returns (PoolBalance[] memory) {\\n        PoolBalance[] memory output = new PoolBalance[](wallets.length * pools.length);\\n        uint outIdx = 0;\\n        \\n        for (uint i = 0; i < pools.length; ++i) {\\n            IUniswapV2Pair pair = IUniswapV2Pair(pools[i]);\\n            (uint112 reserves0, uint112 reserves1,) = pair.getReserves();\\n            uint totalSupply = pair.totalSupply();\\n\\n            for (uint j = 0; j < wallets.length; ++j) {\\n                uint balance = pair.balanceOf(wallets[j]);\\n                output[outIdx++] = PoolBalance(wallets[j], pools[i], balance, totalSupply, reserves0, reserves1);\\n            }\\n        }\\n\\n        return output;\\n    }\\n}\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {\r\n      \"\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"wallets\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"pools\",\"type\":\"address[]\"}],\"name\":\"getBalance\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"walletAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint112\",\"name\":\"reserves0\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"reserves1\",\"type\":\"uint112\"}],\"internalType\":\"struct PoolBalance[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"contracts\",\"type\":\"address[]\"}],\"name\":\"getPoolInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token0Addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1Addr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"token0Symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"token1Symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"token0Digits\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"token1Digits\",\"type\":\"uint8\"}],\"internalType\":\"struct PoolInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"UniswapStakingGetter","CompilerVersion":"v0.7.5+commit.eb77ed08","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}