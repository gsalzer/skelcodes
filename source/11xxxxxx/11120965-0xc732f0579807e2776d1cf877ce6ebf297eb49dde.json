{"status":"1","message":"OK","result":[{"SourceCode":"// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity >=0.6.7;\r\n\r\ninterface DSAuthority {\r\n    function canCall(\r\n        address src, address dst, bytes4 sig\r\n    ) external view returns (bool);\r\n}\r\n\r\nabstract contract DSAuthEvents {\r\n    event LogSetAuthority (address indexed authority);\r\n    event LogSetOwner     (address indexed owner);\r\n}\r\n\r\ncontract DSAuth is DSAuthEvents {\r\n    DSAuthority  public  authority;\r\n    address      public  owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        emit LogSetOwner(msg.sender);\r\n    }\r\n\r\n    function setOwner(address owner_)\r\n        virtual\r\n        public\r\n        auth\r\n    {\r\n        owner = owner_;\r\n        emit LogSetOwner(owner);\r\n    }\r\n\r\n    function setAuthority(DSAuthority authority_)\r\n        virtual\r\n        public\r\n        auth\r\n    {\r\n        authority = authority_;\r\n        emit LogSetAuthority(address(authority));\r\n    }\r\n\r\n    modifier auth {\r\n        require(isAuthorized(msg.sender, msg.sig), \"ds-auth-unauthorized\");\r\n        _;\r\n    }\r\n\r\n    function isAuthorized(address src, bytes4 sig) virtual internal view returns (bool) {\r\n        if (src == address(this)) {\r\n            return true;\r\n        } else if (src == owner) {\r\n            return true;\r\n        } else if (authority == DSAuthority(0)) {\r\n            return false;\r\n        } else {\r\n            return authority.canCall(src, address(this), sig);\r\n        }\r\n    }\r\n}\r\n\r\n// Copyright (C) 2019 David Terry <me@xwvvvvwx.com>\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\ncontract DSProtestPause is DSAuth {\r\n    // --- Admin ---\r\n    modifier isDelayed { require(msg.sender == address(proxy), \"ds-protest-pause-undelayed-call\"); _; }\r\n\r\n    function setOwner(address owner_) override public isDelayed {\r\n        owner = owner_;\r\n        emit LogSetOwner(owner);\r\n    }\r\n    function setAuthority(DSAuthority authority_) override public isDelayed {\r\n        authority = authority_;\r\n        emit LogSetAuthority(address(authority));\r\n    }\r\n    function setProtester(address protester_) public isDelayed {\r\n        protester = protester_;\r\n        emit SetProtester(address(protester));\r\n    }\r\n    function setDelay(uint delay_) public isDelayed {\r\n        require(delay_ <= MAX_DELAY, \"ds-protest-pause-delay-not-within-bounds\");\r\n        delay = delay_;\r\n        emit SetDelay(delay_);\r\n    }\r\n    function setDelayMultiplier(uint multiplier_) public isDelayed {\r\n        require(both(multiplier_ >= 1, multiplier_ <= MAX_DELAY_MULTIPLIER), \"ds-protest-pause-multiplier-exceeds-bounds\");\r\n        delayMultiplier = multiplier_;\r\n        emit ChangeDelayMultiplier(multiplier_);\r\n    }\r\n\r\n    // --- Structs ---\r\n    struct TransactionDelay {\r\n        bool protested;\r\n        uint scheduleTime;\r\n        uint totalDelay;\r\n    }\r\n\r\n    // --- Data ---\r\n    mapping (bytes32 => bool)             public scheduledTransactions;\r\n    mapping (bytes32 => TransactionDelay) internal transactionDelays;\r\n\r\n    DSPauseProxy     public proxy;\r\n    address          public protester;\r\n\r\n    uint             public delay;\r\n    uint             public delayMultiplier = 1;\r\n    uint             public currentlyScheduledTransactions;\r\n    uint             public deploymentTime;\r\n    uint             public protesterLifetime;\r\n\r\n    uint256 constant public EXEC_TIME                = 3 days;\r\n    uint256 constant public MAX_DELAY                = 28 days;\r\n    uint256 constant public maxScheduledTransactions = 10;\r\n    uint256 constant public protestEnd               = 500;                 // a tx can be protested against if max 1/2 of the time until earliest execution has passed\r\n    uint256 constant public MAX_DELAY_MULTIPLIER     = 3;\r\n    bytes32 constant public DS_PAUSE_TYPE            = bytes32(\"PROTEST\");\r\n\r\n    // --- Events ---\r\n    event SetDelay(uint256 delay);\r\n    event SetProtester(address protester);\r\n    event ChangeDelayMultiplier(uint256 multiplier);\r\n    event ScheduleTransaction(address sender, address usr, bytes32 codeHash, bytes parameters, uint earliestExecutionTime);\r\n    event AbandonTransaction(address sender, address usr, bytes32 codeHash, bytes parameters, uint earliestExecutionTime);\r\n    event ProtestAgainstTransaction(address sender, address usr, bytes32 codeHash, bytes parameters, uint totalDelay);\r\n    event ExecuteTransaction(address sender, address usr, bytes32 codeHash, bytes parameters, uint earliestExecutionTime);\r\n    event AttachTransactionDescription(address sender, address usr, bytes32 codeHash, bytes parameters, uint earliestExecutionTime, string description);\r\n\r\n    // --- Init ---\r\n    constructor(uint protesterLifetime_, uint delay_, address owner_, DSAuthority authority_) public {\r\n        require(delay_ <= MAX_DELAY, \"ds-protest-pause-delay-not-within-bounds\");\r\n        require(both(protestEnd > 0, protestEnd < 1000), \"ds-protest-pause-invalid-protest-deadline\");\r\n        delay = delay_;\r\n        owner = owner_;\r\n        authority = authority_;\r\n        deploymentTime = now;\r\n        protesterLifetime = protesterLifetime_;\r\n        proxy = new DSPauseProxy();\r\n    }\r\n\r\n    // --- Math ---\r\n    function addition(uint x, uint y) internal pure returns (uint z) {\r\n        z = x + y;\r\n        require(z >= x, \"ds-protest-pause-add-overflow\");\r\n    }\r\n    function subtract(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, \"ds-protest-pause-sub-underflow\");\r\n    }\r\n    function multiply(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"ds-protest-pause-mul-invalid\");\r\n    }\r\n\r\n    // --- Boolean Logic ---\r\n    function both(bool x, bool y) internal pure returns (bool z) {\r\n        assembly{ z := and(x, y)}\r\n    }\r\n\r\n    // --- Util ---\r\n    function getTransactionDataHash(address usr, bytes32 codeHash, bytes memory parameters, uint earliestExecutionTime)\r\n        public pure\r\n        returns (bytes32)\r\n    {\r\n        return keccak256(abi.encode(usr, codeHash, parameters, earliestExecutionTime));\r\n    }\r\n    function getTransactionDataHash(address usr, bytes32 codeHash, bytes memory parameters)\r\n        public pure\r\n        returns (bytes32)\r\n    {\r\n        return keccak256(abi.encode(usr, codeHash, parameters));\r\n    }\r\n    function getExtCodeHash(address usr)\r\n        internal view\r\n        returns (bytes32 codeHash)\r\n    {\r\n        assembly { codeHash := extcodehash(usr) }\r\n    }\r\n    function protestWindowAvailable(address usr, bytes32 codeHash, bytes calldata parameters) external view returns (bool) {\r\n        bytes32 partiallyHashedTx = getTransactionDataHash(usr, codeHash, parameters);\r\n        (bool protested, ,) = getTransactionDelays(partiallyHashedTx);\r\n        if (protested) return false;\r\n        return (\r\n          now < protestDeadline(partiallyHashedTx)\r\n        );\r\n    }\r\n    function protestWindowAvailable(bytes32 txHash) external view returns (bool) {\r\n        (bool protested, ,) = getTransactionDelays(txHash);\r\n        if (protested) return false;\r\n        return (\r\n          now < protestDeadline(txHash)\r\n        );\r\n    }\r\n    function timeUntilProposalProtestDeadline(address usr, bytes32 codeHash, bytes calldata parameters) external view returns (uint256) {\r\n        bytes32 partiallyHashedTx = getTransactionDataHash(usr, codeHash, parameters);\r\n        (bool protested, ,) = getTransactionDelays(partiallyHashedTx);\r\n        if (protested) return 0;\r\n        uint protestDeadline = protestDeadline(partiallyHashedTx);\r\n        if (now >= protestDeadline) return 0;\r\n        return subtract(protestDeadline, now);\r\n    }\r\n    function timeUntilProposalProtestDeadline(bytes32 txHash) external view returns (uint256) {\r\n        (bool protested, ,) = getTransactionDelays(txHash);\r\n        if (protested) return 0;\r\n        uint protestDeadline = protestDeadline(txHash);\r\n        if (now >= protestDeadline) return 0;\r\n        return subtract(protestDeadline, now);\r\n    }\r\n    function protestDeadline(bytes32 txHash) internal view returns (uint256) {\r\n        return addition(transactionDelays[txHash].scheduleTime, (multiply(transactionDelays[txHash].totalDelay, protestEnd) / 1000));\r\n    }\r\n\r\n    // --- Operations ---\r\n    function scheduleTransaction(address usr, bytes32 codeHash, bytes memory parameters, uint earliestExecutionTime)\r\n        public auth\r\n    {\r\n        schedule(usr, codeHash, parameters, earliestExecutionTime);\r\n    }\r\n    function scheduleTransaction(address usr, bytes32 codeHash, bytes memory parameters, uint earliestExecutionTime, string memory description)\r\n        public auth\r\n    {\r\n        schedule(usr, codeHash, parameters, earliestExecutionTime);\r\n        emit AttachTransactionDescription(msg.sender, usr, codeHash, parameters, earliestExecutionTime, description);\r\n    }\r\n    function attachTransactionDescription(address usr, bytes32 codeHash, bytes memory parameters, uint earliestExecutionTime, string memory description)\r\n        public auth\r\n    {\r\n        bytes32 partiallyHashedTx = getTransactionDataHash(usr, codeHash, parameters);\r\n        require(transactionDelays[partiallyHashedTx].scheduleTime > 0, \"ds-protest-pause-cannot-attach-for-null\");\r\n        emit AttachTransactionDescription(msg.sender, usr, codeHash, parameters, earliestExecutionTime, description);\r\n    }\r\n    function protestAgainstTransaction(address usr, bytes32 codeHash, bytes memory parameters)\r\n        public\r\n    {\r\n        require(msg.sender == protester, \"ds-protest-pause-sender-not-protester\");\r\n        require(addition(protesterLifetime, deploymentTime) > now, \"ds-protest-pause-protester-lifetime-passed\");\r\n        bytes32 partiallyHashedTx = getTransactionDataHash(usr, codeHash, parameters);\r\n        require(transactionDelays[partiallyHashedTx].scheduleTime > 0, \"ds-protest-pause-null-inexistent-transaction\");\r\n        require(!transactionDelays[partiallyHashedTx].protested, \"ds-protest-pause-tx-already-protested\");\r\n        require(\r\n          now < protestDeadline(partiallyHashedTx),\r\n          \"ds-protest-pause-exceed-protest-deadline\"\r\n        );\r\n\r\n        transactionDelays[partiallyHashedTx].protested = true;\r\n\r\n        uint multipliedDelay = multiply(delay, delayMultiplier);\r\n        if (multipliedDelay > MAX_DELAY) {\r\n          multipliedDelay = MAX_DELAY;\r\n        }\r\n        if (transactionDelays[partiallyHashedTx].totalDelay < multipliedDelay) {\r\n          transactionDelays[partiallyHashedTx].totalDelay = multipliedDelay;\r\n        }\r\n\r\n        emit ProtestAgainstTransaction(msg.sender, usr, codeHash, parameters, transactionDelays[partiallyHashedTx].totalDelay);\r\n    }\r\n    function abandonTransaction(address usr, bytes32 codeHash, bytes memory parameters, uint earliestExecutionTime)\r\n        public auth\r\n    {\r\n        bytes32 fullyHashedTx = getTransactionDataHash(usr, codeHash, parameters, earliestExecutionTime);\r\n        bytes32 partiallyHashedTx = getTransactionDataHash(usr, codeHash, parameters);\r\n        require(transactionDelays[partiallyHashedTx].scheduleTime > 0, \"ds-protest-pause-cannot-abandon-null\");\r\n        scheduledTransactions[fullyHashedTx] = false;\r\n        delete(transactionDelays[partiallyHashedTx]);\r\n        currentlyScheduledTransactions = subtract(currentlyScheduledTransactions, 1);\r\n        emit AbandonTransaction(msg.sender, usr, codeHash, parameters, earliestExecutionTime);\r\n    }\r\n    function executeTransaction(address usr, bytes32 codeHash, bytes memory parameters, uint earliestExecutionTime)\r\n        public\r\n        returns (bytes memory out)\r\n    {\r\n        bytes32 fullyHashedTx = getTransactionDataHash(usr, codeHash, parameters, earliestExecutionTime);\r\n        bytes32 partiallyHashedTx = getTransactionDataHash(usr, codeHash, parameters);\r\n        uint executionStart = addition(transactionDelays[partiallyHashedTx].scheduleTime, transactionDelays[partiallyHashedTx].totalDelay);\r\n        require(scheduledTransactions[fullyHashedTx], \"ds-protest-pause-inexistent-transaction\");\r\n        require(getExtCodeHash(usr) == codeHash, \"ds-protest-pause-wrong-codehash\");\r\n        require(now >= executionStart, \"ds-protest-pause-premature-exec\");\r\n        require(now < addition(executionStart, EXEC_TIME), \"ds-protest-pause-expired-tx\");\r\n\r\n        scheduledTransactions[fullyHashedTx] = false;\r\n        delete(transactionDelays[partiallyHashedTx]);\r\n        currentlyScheduledTransactions = subtract(currentlyScheduledTransactions, 1);\r\n\r\n        emit ExecuteTransaction(msg.sender, usr, codeHash, parameters, earliestExecutionTime);\r\n\r\n        out = proxy.executeTransaction(usr, parameters);\r\n        require(proxy.owner() == address(this), \"ds-protest-pause-illegal-storage-change\");\r\n    }\r\n\r\n    // --- Internal ---\r\n    function schedule(address usr, bytes32 codeHash, bytes memory parameters, uint earliestExecutionTime) internal {\r\n        require(subtract(earliestExecutionTime, now) <= MAX_DELAY, \"ds-protest-pause-delay-not-within-bounds\");\r\n        require(earliestExecutionTime >= addition(now, delay), \"ds-protest-pause-delay-not-respected\");\r\n        bytes32 fullyHashedTx = getTransactionDataHash(usr, codeHash, parameters, earliestExecutionTime);\r\n        bytes32 partiallyHashedTx = getTransactionDataHash(usr, codeHash, parameters);\r\n        require(transactionDelays[partiallyHashedTx].scheduleTime == 0, \"ds-protest-pause-cannot-schedule-same-tx-twice\");\r\n        require(currentlyScheduledTransactions < maxScheduledTransactions, \"ds-protest-pause-too-many-scheduled\");\r\n        currentlyScheduledTransactions = addition(currentlyScheduledTransactions, 1);\r\n        scheduledTransactions[fullyHashedTx] = true;\r\n        transactionDelays[partiallyHashedTx] = TransactionDelay(false, now, subtract(earliestExecutionTime, now));\r\n        emit ScheduleTransaction(msg.sender, usr, codeHash, parameters, earliestExecutionTime);\r\n    }\r\n\r\n    // --- Getters ---\r\n    function getTransactionDelays(address usr, bytes32 codeHash, bytes memory parameters) public view returns (bool, uint256, uint256) {\r\n        bytes32 hashedTx = getTransactionDataHash(usr, codeHash, parameters);\r\n        return (\r\n          transactionDelays[hashedTx].protested,\r\n          transactionDelays[hashedTx].scheduleTime,\r\n          transactionDelays[hashedTx].totalDelay\r\n        );\r\n    }\r\n    function getTransactionDelays(bytes32 txHash) public view returns (bool, uint256, uint256) {\r\n        return (\r\n          transactionDelays[txHash].protested,\r\n          transactionDelays[txHash].scheduleTime,\r\n          transactionDelays[txHash].totalDelay\r\n        );\r\n    }\r\n}\r\n\r\n// scheduled txs are executed in an isolated storage context to protect the pause from\r\n// malicious storage modification during plan execution\r\ncontract DSPauseProxy {\r\n    address public owner;\r\n    modifier isAuthorized { require(msg.sender == owner, \"ds-protest-pause-proxy-unauthorized\"); _; }\r\n    constructor() public { owner = msg.sender; }\r\n\r\n    function executeTransaction(address usr, bytes memory parameters)\r\n        public isAuthorized\r\n        returns (bytes memory out)\r\n    {\r\n        bool ok;\r\n        (ok, out) = usr.delegatecall(parameters);\r\n        require(ok, \"ds-protest-pause-delegatecall-error\");\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"protesterLifetime_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delay_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"contract DSAuthority\",\"name\":\"authority_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"codeHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"parameters\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"earliestExecutionTime\",\"type\":\"uint256\"}],\"name\":\"AbandonTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"codeHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"parameters\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"earliestExecutionTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"AttachTransactionDescription\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"}],\"name\":\"ChangeDelayMultiplier\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"codeHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"parameters\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"earliestExecutionTime\",\"type\":\"uint256\"}],\"name\":\"ExecuteTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"codeHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"parameters\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalDelay\",\"type\":\"uint256\"}],\"name\":\"ProtestAgainstTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"codeHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"parameters\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"earliestExecutionTime\",\"type\":\"uint256\"}],\"name\":\"ScheduleTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"SetDelay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"protester\",\"type\":\"address\"}],\"name\":\"SetProtester\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DS_PAUSE_TYPE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXEC_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_DELAY_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"codeHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"parameters\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"earliestExecutionTime\",\"type\":\"uint256\"}],\"name\":\"abandonTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"codeHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"parameters\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"earliestExecutionTime\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"attachTransactionDescription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contract DSAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentlyScheduledTransactions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delayMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deploymentTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"codeHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"parameters\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"earliestExecutionTime\",\"type\":\"uint256\"}],\"name\":\"executeTransaction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"out\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"codeHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"parameters\",\"type\":\"bytes\"}],\"name\":\"getTransactionDataHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"codeHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"parameters\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"earliestExecutionTime\",\"type\":\"uint256\"}],\"name\":\"getTransactionDataHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"}],\"name\":\"getTransactionDelays\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"codeHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"parameters\",\"type\":\"bytes\"}],\"name\":\"getTransactionDelays\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxScheduledTransactions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"codeHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"parameters\",\"type\":\"bytes\"}],\"name\":\"protestAgainstTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protestEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"codeHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"parameters\",\"type\":\"bytes\"}],\"name\":\"protestWindowAvailable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"}],\"name\":\"protestWindowAvailable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protester\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protesterLifetime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxy\",\"outputs\":[{\"internalType\":\"contract DSPauseProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"codeHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"parameters\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"earliestExecutionTime\",\"type\":\"uint256\"}],\"name\":\"scheduleTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"codeHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"parameters\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"earliestExecutionTime\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"scheduleTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"scheduledTransactions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract DSAuthority\",\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"delay_\",\"type\":\"uint256\"}],\"name\":\"setDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"multiplier_\",\"type\":\"uint256\"}],\"name\":\"setDelayMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"protester_\",\"type\":\"address\"}],\"name\":\"setProtester\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"}],\"name\":\"timeUntilProposalProtestDeadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"codeHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"parameters\",\"type\":\"bytes\"}],\"name\":\"timeUntilProposalProtestDeadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DSProtestPause","CompilerVersion":"v0.6.7+commit.b8d736ae","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000002d1cd400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000092321cf8530fe33e9b36750154922a55306d5143","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://3c0147066f99a4b79f15b8c64b6e0669a4bf5e82fb5e8ef0c86dffcfe3328f7d"}]}