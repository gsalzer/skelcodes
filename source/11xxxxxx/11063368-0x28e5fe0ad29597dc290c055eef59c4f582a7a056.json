{"status":"1","message":"OK","result":[{"SourceCode":"{\"Exet.sol\":{\"content\":\"pragma solidity ^0.4.24;\\r\\n\\r\\nimport \\\"./Rootex.sol\\\";\\r\\n\\r\\ncontract Exet is Rootex {\\r\\n  address public owner;\\r\\n\\r\\n  address[] public adminsList;\\r\\n  mapping (address =\\u003e bool) public listedAdmins;\\r\\n  mapping (address =\\u003e bool) public activeAdmins;\\r\\n\\r\\n  string[] public symbolsList;\\r\\n  mapping (bytes32 =\\u003e bool) public listedCoins;\\r\\n  mapping (bytes32 =\\u003e bool) public lockedCoins;\\r\\n  mapping (bytes32 =\\u003e uint256) public coinPrices;\\r\\n\\r\\n  string constant ETH = \\\"ETH\\\";\\r\\n  bytes32 constant ETHEREUM = 0xaaaebeba3810b1e6b70781f14b2d72c1cb89c0b2b320c43bb67ff79f562f5ff4;\\r\\n  address constant PROJECT = 0x537ca62B4c232af1ef82294BE771B824cCc078Ff;\\r\\n\\r\\n  event Admin (address user, bool active);\\r\\n  event Coin (string indexed coinSymbol, string coinName, address maker, uint256 rate);\\r\\n  event Deposit (string indexed coinSymbol, address indexed maker, uint256 value);\\r\\n  event Withdraw (string indexed coinSymbol, address indexed maker, uint256 value);\\r\\n\\r\\n  constructor (uint sysCost, uint ethCost) public {\\r\\n    author = \\\"ASINERUM INTERNATIONAL\\\";\\r\\n    name = \\\"ETHEREUM CRYPTO EXCHANGE TOKEN\\\";\\r\\n    symbol = \\\"EXET\\\";\\r\\n    owner = msg.sender;\\r\\n    newadmin (owner, true);\\r\\n    SYMBOL = tocoin(symbol);\\r\\n    newcoin (symbol, name, sysCost*PPT);\\r\\n    newcoin (ETH, \\\"ETHEREUM\\\", ethCost*PPT);\\r\\n  }\\r\\n\\r\\n  function newadmin (address user, bool active)\\r\\n  internal {\\r\\n    if (!listedAdmins[user]) {\\r\\n      listedAdmins[user] = true;\\r\\n      adminsList.push (user);\\r\\n    }\\r\\n    activeAdmins[user] = active;\\r\\n    emit Admin (user, active);\\r\\n  }\\r\\n\\r\\n  function newcoin (string memory coinSymbol, string memory coinName, uint256 rate)\\r\\n  internal {\\r\\n    bytes32 coin = tocoin (coinSymbol);\\r\\n    if (!listedCoins[coin]) {\\r\\n      listedCoins[coin] = true;\\r\\n      symbolsList.push (coinSymbol);\\r\\n    }\\r\\n    coinPrices[coin] = rate;\\r\\n    emit Coin (coinSymbol, coinName, msg.sender, rate);\\r\\n  }\\r\\n\\r\\n  // GOVERNANCE FUNCTIONS\\r\\n\\r\\n  function adminer (address user, bool active) public {\\r\\n    require (msg.sender==owner, \\\"#owner\\\");\\r\\n    newadmin (user, active);\\r\\n  }\\r\\n\\r\\n  function coiner (string memory coinSymbol, string memory coinName, uint256 rate) public {\\r\\n    require (activeAdmins[msg.sender], \\\"#admin\\\");\\r\\n    newcoin (coinSymbol, coinName, rate);\\r\\n  }\\r\\n\\r\\n  function lock (bytes32 coin) public {\\r\\n    require (msg.sender==owner, \\\"#owner\\\");\\r\\n    require (!lockedCoins[coin], \\\"#coin\\\");\\r\\n    lockedCoins[coin] = true;\\r\\n  }\\r\\n\\r\\n  function lim (bytes32 coin, uint256 value) public {\\r\\n    require (activeAdmins[msg.sender], \\\"#admin\\\");\\r\\n    require (limits[coin]==0, \\\"#coin\\\");\\r\\n    limits[coin] = value;\\r\\n  }\\r\\n\\r\\n  // PUBLIC METHODS\\r\\n\\r\\n  function () public payable {\\r\\n    deposit (ETH);\\r\\n  }\\r\\n\\r\\n  function deposit () public payable returns (bool success) {\\r\\n    return deposit (symbol);\\r\\n  }\\r\\n\\r\\n  function deposit (string memory coinSymbol) public payable returns (bool success) {\\r\\n    return deposit (coinSymbol, msg.sender);\\r\\n  }\\r\\n\\r\\n  function deposit (string memory coinSymbol, address to) public payable returns (bool success) {\\r\\n    bytes32 coin = tocoin (coinSymbol);\\r\\n    uint256 crate = coinPrices[coin];\\r\\n    uint256 erate = coinPrices[ETHEREUM];\\r\\n    require (!lockedCoins[coin], \\\"#coin\\\");\\r\\n    require (crate\\u003e0, \\\"#token\\\");\\r\\n    require (erate\\u003e0, \\\"#ether\\\");\\r\\n    require (msg.value\\u003e0, \\\"#value\\\");\\r\\n    uint256 value = msg.value*erate/crate;\\r\\n    mint (coin, to, value);\\r\\n    mint (SYMBOL, PROJECT, value);\\r\\n    emit Deposit (coinSymbol, to, value);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function withdraw (string memory coinSymbol, uint256 value) public returns (bool success) {\\r\\n    bytes32 coin = tocoin (coinSymbol);\\r\\n    uint256 crate = coinPrices[coin];\\r\\n    uint256 erate = coinPrices[ETHEREUM];\\r\\n    require (crate\\u003e0, \\\"#token\\\");\\r\\n    require (erate\\u003e0, \\\"#ether\\\");\\r\\n    require (value\\u003e0, \\\"#value\\\");\\r\\n    burn (coin, msg.sender, value);\\r\\n    mint (SYMBOL, PROJECT, value);\\r\\n    msg.sender.transfer (value*crate/erate);\\r\\n    emit Withdraw (coinSymbol, msg.sender, value);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function swap (bytes32 coin1, uint256 value1, bytes32 coin2) public returns (bool success) {\\r\\n    require (!lockedCoins[coin2], \\\"#target\\\");\\r\\n    uint256 price1 = coinPrices[coin1];\\r\\n    uint256 price2 = coinPrices[coin2];\\r\\n    require (price1\\u003e0, \\\"#coin1\\\");\\r\\n    require (price2\\u003e0, \\\"#coin2\\\");\\r\\n    require (value1\\u003e0, \\\"#input\\\");\\r\\n    uint256 value2 = value1*price1/price2;\\r\\n    swap (coin1, value1, coin2, value2);\\r\\n    mint (SYMBOL, PROJECT, value2);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function lens () public view returns (uint admins, uint symbols) {\\r\\n    admins = adminsList.length;\\r\\n    symbols = symbolsList.length;\\r\\n  }\\r\\n}\"},\"Rootex.sol\":{\"content\":\"pragma solidity ^0.4.24;\\r\\n\\r\\ncontract Rootex {\\r\\n  string public name;\\r\\n  string public symbol;\\r\\n  uint8 public decimals;\\r\\n\\r\\n  string public author;\\r\\n  uint public offerRef;\\r\\n  uint256 internal PPT;\\r\\n\\r\\n  bytes32 internal SYMBOL;\\r\\n  mapping (bytes32 =\\u003e uint256) public limits;\\r\\n  mapping (bytes32 =\\u003e uint256) public supplies;\\r\\n  mapping (bytes32 =\\u003e mapping (address =\\u003e uint256)) public balances;\\r\\n\\r\\n  mapping (uint =\\u003e Market) public markets;\\r\\n  struct Market {\\r\\n    bytes32 askCoin;\\r\\n    bytes32 ownCoin;\\r\\n    uint256 ask2own;\\r\\n    uint256 value;\\r\\n    uint256 taken;\\r\\n    address maker;\\r\\n    uint time; }\\r\\n\\r\\n  event Transfer (address indexed from, address indexed to, uint256 value);\\r\\n  event Move (bytes32 indexed coin, address indexed from, address indexed to, uint256 value);\\r\\n  event Sell (uint refno, bytes32 indexed askCoin, bytes32 indexed ownCoin, uint256 ask2own, address indexed maker);\\r\\n  event Buy (uint indexed refno, address indexed taker, uint256 paidValue);\\r\\n\\r\\n  constructor () public {\\r\\n    PPT = 10**18;\\r\\n    decimals = 18;\\r\\n  }\\r\\n\\r\\n  function tocoin (string memory coinSymbol)\\r\\n  internal pure returns (bytes32) {\\r\\n    return (keccak256(abi.encodePacked(coinSymbol)));\\r\\n  }\\r\\n\\r\\n  function move (bytes32 coin, address from, address to, uint256 value)\\r\\n  internal {\\r\\n    require (value\\u003c=balances[coin][from]);\\r\\n    require (balances[coin][to]+value\\u003ebalances[coin][to]);\\r\\n    uint256 sum = balances[coin][from]+balances[coin][to];\\r\\n    balances[coin][from] -= value;\\r\\n    balances[coin][to] += value;\\r\\n    assert (balances[coin][from]+balances[coin][to]==sum);\\r\\n  }\\r\\n\\r\\n  function mint (bytes32 coin, address to, uint256 value)\\r\\n  internal {\\r\\n    require (limits[coin]==0||limits[coin]\\u003e=supplies[coin]+value);\\r\\n    require (balances[coin][to]+value\\u003ebalances[coin][to]);\\r\\n    uint256 dif = supplies[coin]-balances[coin][to];\\r\\n    supplies[coin] += value;\\r\\n    balances[coin][to] += value;\\r\\n    assert (supplies[coin]-balances[coin][to]==dif);\\r\\n  }\\r\\n\\r\\n  function burn (bytes32 coin, address from, uint256 value)\\r\\n  internal {\\r\\n    require (value\\u003c=balances[coin][from]);\\r\\n    uint256 dif = supplies[coin]-balances[coin][from];\\r\\n    supplies[coin] -= value;\\r\\n    balances[coin][from] -= value;\\r\\n    assert (supplies[coin]-balances[coin][from]==dif);\\r\\n  }\\r\\n\\r\\n  function swap (bytes32 coin1, uint256 value1, bytes32 coin2, uint256 value2)\\r\\n  internal {\\r\\n    burn (coin1, msg.sender, value1);\\r\\n    mint (coin2, msg.sender, value2);\\r\\n  }\\r\\n\\r\\n  function deduct (Market storage mi, uint256 value)\\r\\n  internal {\\r\\n    uint256 sum = mi.value+mi.taken;\\r\\n    mi.value -= value;\\r\\n    mi.taken += value;\\r\\n    assert (mi.value+mi.taken==sum);\\r\\n  }\\r\\n\\r\\n  function take (uint refno, address taker, uint256 fitValue)\\r\\n  internal returns (uint256) {\\r\\n    Market storage mi = markets[refno];\\r\\n    require (mi.value\\u003e0\\u0026\\u0026mi.ask2own\\u003e0, \\\"#data\\\");\\r\\n    require (mi.time==0||mi.time\\u003e=now, \\\"#time\\\");\\r\\n    uint256 askValue = PPT*mi.value/mi.ask2own;\\r\\n    uint256 ownValue = fitValue*mi.ask2own/PPT;\\r\\n    if (askValue\\u003efitValue) askValue = fitValue;\\r\\n    if (ownValue\\u003emi.value) ownValue = mi.value;\\r\\n    move (mi.askCoin, taker, mi.maker, askValue);\\r\\n    move (mi.ownCoin, address(this), taker, ownValue);\\r\\n    deduct (mi, ownValue);\\r\\n    return askValue;\\r\\n  }\\r\\n\\r\\n  // PUBLIC METHODS\\r\\n\\r\\n  function post (bytes32 askCoin, bytes32 ownCoin, uint256 ask2own, uint256 value, uint time) public returns (bool success) {\\r\\n    require (time==0||time\\u003enow, \\\"#time\\\");\\r\\n    require (value\\u003e0\\u0026\\u0026ask2own\\u003e0, \\\"#values\\\");\\r\\n    move (ownCoin, msg.sender, address(this), value);\\r\\n    Market memory mi;\\r\\n    mi.askCoin = askCoin;\\r\\n    mi.ownCoin = ownCoin;\\r\\n    mi.ask2own = ask2own;\\r\\n    mi.maker = msg.sender;\\r\\n    mi.value = value;\\r\\n    mi.time = time;\\r\\n    markets[++offerRef] = mi;\\r\\n    emit Sell (offerRef, mi.askCoin, mi.ownCoin, mi.ask2own, mi.maker);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function unpost (uint refno) public returns (bool success) {\\r\\n    Market storage mi = markets[refno];\\r\\n    require (mi.value\\u003e0, \\\"#data\\\");\\r\\n    require (mi.maker==msg.sender, \\\"#user\\\");\\r\\n    require (mi.time==0||mi.time\\u003cnow, \\\"#time\\\");\\r\\n    move (mi.ownCoin, address(this), mi.maker, mi.value);\\r\\n    mi.value = 0;\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function acquire (uint refno, uint256 fitValue) public returns (bool success) {\\r\\n    fitValue = take (refno, msg.sender, fitValue);\\r\\n    emit Buy (refno, msg.sender, fitValue);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function who (uint surf, bytes32 askCoin, bytes32 ownCoin, uint256 ask2own, uint256 value) public view returns (uint found) {\\r\\n    uint pos = offerRef\\u003csurf?1:offerRef-surf+1;\\r\\n    for (uint i=pos; i\\u003c=offerRef; i++) {\\r\\n      Market memory mi = markets[i];\\r\\n      if (mi.askCoin==askCoin\\u0026\\u0026mi.ownCoin==ownCoin\\u0026\\u0026mi.value\\u003evalue\\u0026\\u0026mi.ask2own\\u003e=ask2own\\u0026\\u0026(mi.time==0||mi.time\\u003e=now)) return(i);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  // ERC20 METHODS\\r\\n\\r\\n  function balanceOf (address wallet) public view returns (uint256) {\\r\\n    return balances[SYMBOL][wallet];\\r\\n  }\\r\\n\\r\\n  function totalSupply () public view returns (uint256) {\\r\\n    return supplies[SYMBOL];\\r\\n  }\\r\\n\\r\\n  function transfer (address to, uint256 value) public returns (bool success) {\\r\\n    move (SYMBOL, msg.sender, to, value);\\r\\n    emit Transfer (msg.sender, to, value);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function transfer (bytes32 coin, address to, uint256 value) public returns (bool success) {\\r\\n    move (coin, msg.sender, to, value);\\r\\n    emit Move (coin, msg.sender, to, value);\\r\\n    return true;\\r\\n  }\\r\\n}\"}}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"coin\",\"type\":\"bytes32\"}],\"name\":\"lock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lens\",\"outputs\":[{\"name\":\"admins\",\"type\":\"uint256\"},{\"name\":\"symbols\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"listedCoins\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"coinSymbol\",\"type\":\"string\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"coin\",\"type\":\"bytes32\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"symbolsList\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"refno\",\"type\":\"uint256\"},{\"name\":\"fitValue\",\"type\":\"uint256\"}],\"name\":\"acquire\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"limits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"coinSymbol\",\"type\":\"string\"},{\"name\":\"coinName\",\"type\":\"string\"},{\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"coiner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"refno\",\"type\":\"uint256\"}],\"name\":\"unpost\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"offerRef\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"activeAdmins\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"coin1\",\"type\":\"bytes32\"},{\"name\":\"value1\",\"type\":\"uint256\"},{\"name\":\"coin2\",\"type\":\"bytes32\"}],\"name\":\"swap\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"coin\",\"type\":\"bytes32\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"lim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"listedAdmins\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"lockedCoins\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"coinSymbol\",\"type\":\"string\"},{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"coinSymbol\",\"type\":\"string\"}],\"name\":\"deposit\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"adminsList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"author\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"surf\",\"type\":\"uint256\"},{\"name\":\"askCoin\",\"type\":\"bytes32\"},{\"name\":\"ownCoin\",\"type\":\"bytes32\"},{\"name\":\"ask2own\",\"type\":\"uint256\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"who\",\"outputs\":[{\"name\":\"found\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"markets\",\"outputs\":[{\"name\":\"askCoin\",\"type\":\"bytes32\"},{\"name\":\"ownCoin\",\"type\":\"bytes32\"},{\"name\":\"ask2own\",\"type\":\"uint256\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"taken\",\"type\":\"uint256\"},{\"name\":\"maker\",\"type\":\"address\"},{\"name\":\"time\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"coinPrices\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"askCoin\",\"type\":\"bytes32\"},{\"name\":\"ownCoin\",\"type\":\"bytes32\"},{\"name\":\"ask2own\",\"type\":\"uint256\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"post\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"adminer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"supplies\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"sysCost\",\"type\":\"uint256\"},{\"name\":\"ethCost\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"Admin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"coinSymbol\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"coinName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"Coin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"coinSymbol\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"coinSymbol\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"coin\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Move\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"refno\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"askCoin\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"ownCoin\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"ask2own\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"maker\",\"type\":\"address\"}],\"name\":\"Sell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"refno\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"paidValue\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"}]","ContractName":"Exet","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000015e","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://de704b3364840a0e3e7b4cf808df630abde395e607a691d5cd0d28a9bbc95056"}]}