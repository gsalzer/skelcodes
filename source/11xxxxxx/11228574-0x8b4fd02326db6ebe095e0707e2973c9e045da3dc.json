{"status":"1","message":"OK","result":[{"SourceCode":"// https://github.com/RyanHendricks/Black-Scholes-Solidity\r\n\r\npragma solidity ^0.6.12;\r\n\r\n\r\ncontract BlackScholesEstimate {\r\n    \r\n    /**\r\n     * @dev sqrt calculates the square root of a given number x\r\n     * @dev for precision into decimals the number must first\r\n     * @dev be multiplied by the precision factor desired\r\n     * @param x uint256 number for the calculation of square root\r\n     */\r\n    function sqrt(uint256 x) public pure returns (uint256) {\r\n        uint256 c = (x + 1) / 2;\r\n        uint256 b = x;\r\n        while (c < b) {\r\n            b = c;\r\n            c = (x / c + c) / 2;\r\n        }\r\n        return b;\r\n    }\r\n    \r\n    /**\r\n     * @dev stddev calculates the standard deviation for an array of integers\r\n     * @dev precision is the same as sqrt above meaning for higher precision\r\n     * @dev the decimal place must be moved prior to passing the params\r\n     * @param numbers uint[] array of numbers to be used in calculation\r\n     */\r\n    function stddev(uint[] memory numbers) public pure returns (uint256 sd) {\r\n        uint sum = 0;\r\n        for(uint i = 0; i < numbers.length; i++) {\r\n            sum += numbers[i];\r\n        }\r\n        uint256 mean = sum / numbers.length;        // Integral value; float not supported in Solidity\r\n        sum = 0;\r\n        uint i;\r\n        for(i = 0; i < numbers.length; i++) {\r\n            sum += (numbers[i] - mean) ** 2;\r\n        }\r\n        sd = sqrt(sum / (numbers.length - 1));      //Integral value; float not supported in Solidity\r\n        return sd;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * @dev blackScholesEstimate calculates a rough price estimate for an ATM option\r\n     * @dev input parameters should be transformed prior to being passed to the function\r\n     * @dev so as to remove decimal places otherwise results will be far less accurate\r\n     * @param _vol uint256 volatility of the underlying converted to remove decimals\r\n     * @param _underlying uint256 price of the underlying asset\r\n     * @param _time uint256 days to expiration in years multiplied to remove decimals\r\n     */\r\n    function blackScholesEstimate(\r\n        uint256 _vol,\r\n        uint256 _underlying,\r\n        uint256 _time\r\n    ) public pure returns (uint256 estimate) {\r\n        estimate = 40 * _vol * _underlying * sqrt(_time);\r\n        return estimate;\r\n    }\r\n    \r\n    /**\r\n     * @dev fromReturnsBSestimate first calculates the stddev of an array of price returns\r\n     * @dev then uses that as the volatility param for the blackScholesEstimate\r\n     * @param _numbers uint256[] array of price returns for volatility calculation\r\n     * @param _underlying uint256 price of the underlying asset\r\n     * @param _time uint256 days to expiration in years multiplied to remove decimals\r\n     */\r\n    function retBasedBlackScholesEstimate(\r\n        uint256[] memory _numbers,\r\n        uint256 _underlying,\r\n        uint256 _time\r\n    ) public pure {\r\n        uint _vol = stddev(_numbers);\r\n        blackScholesEstimate(_vol, _underlying, _time);\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vol\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_underlying\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"blackScholesEstimate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"estimate\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_numbers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_underlying\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"retBasedBlackScholesEstimate\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"sqrt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"numbers\",\"type\":\"uint256[]\"}],\"name\":\"stddev\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sd\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"BlackScholesEstimate","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b0643e448ebbf53237242a6231437ad34a5f02f6dc9c519a916873b554113577"}]}