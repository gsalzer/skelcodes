{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface Gauge {\r\n    function deposit(uint) external;\r\n    function balanceOf(address) external view returns (uint);\r\n    function withdraw(uint) external;\r\n    function claimable_tokens(address) external view returns (uint);\r\n}\r\n\r\ninterface Mintr {\r\n    function mint(address) external;\r\n}\r\n\r\ninterface Uni {\r\n    function swapExactTokensForTokens(uint, uint, address[] calldata, address, uint) external;\r\n}\r\n\r\ninterface Balancer {\r\n    function joinPool(uint poolAmountOut, uint[] calldata maxAmountsIn) external;\r\n    function exitPool(uint poolAmountIn, uint[] calldata minAmountsOut) external;\r\n    function swapExactAmountIn(\r\n        address tokenIn,\r\n        uint tokenAmountIn,\r\n        address tokenOut,\r\n        uint minAmountOut,\r\n        uint maxPrice\r\n    ) external returns (uint tokenAmountOut, uint spotPriceAfter);\r\n    function swapExactAmountOut(\r\n        address tokenIn,\r\n        uint maxAmountIn,\r\n        address tokenOut,\r\n        uint tokenAmountOut,\r\n        uint maxPrice\r\n    ) external returns (uint tokenAmountIn, uint spotPriceAfter);\r\n    function joinswapExternAmountIn(address tokenIn, uint tokenAmountIn, uint minPoolAmountOut) external returns (uint poolAmountOut);\r\n    function exitswapPoolAmountIn(address tokenOut, uint poolAmountIn, uint minAmountOut) external returns (uint tokenAmountOut);\r\n}\r\n\r\n// 0: DAI, 1: USDC, 2: USDT\r\ninterface IStableSwap3Pool {\r\n    function get_virtual_price() external view returns (uint);\r\n    function balances(uint) external view returns (uint);\r\n    function calc_token_amount(uint[3] calldata amounts, bool deposit) external view returns (uint);\r\n    function calc_withdraw_one_coin(uint _token_amount, int128 i) external view returns (uint);\r\n    function get_dy(int128 i, int128 j, uint dx) external view returns (uint);\r\n    function add_liquidity(uint[3] calldata amounts, uint min_mint_amount) external;\r\n    function remove_liquidity_one_coin(uint _token_amount, int128 i, uint min_amount) external;\r\n    function exchange(int128 i, int128 j, uint dx, uint min_dy) external;\r\n}\r\n\r\ninterface IValueMultiVault {\r\n    function cap() external view returns (uint);\r\n    function getConverter(address _want) external view returns (address);\r\n    function getVaultMaster() external view returns (address);\r\n    function balance() external view returns (uint);\r\n    function token() external view returns (address);\r\n    function available(address _want) external view returns (uint);\r\n    function accept(address _input) external view returns (bool);\r\n\r\n    function claimInsurance() external;\r\n    function earn(address _want) external;\r\n    function harvest(address reserve, uint amount) external;\r\n\r\n    function withdraw_fee(uint _shares) external view returns (uint);\r\n    function calc_token_amount_deposit(uint[] calldata _amounts) external view returns (uint);\r\n    function calc_token_amount_withdraw(uint _shares, address _output) external view returns (uint);\r\n    function convert_rate(address _input, uint _amount) external view returns (uint);\r\n    function getPricePerFullShare() external view returns (uint);\r\n    function get_virtual_price() external view returns (uint); // average dollar value of vault share token\r\n\r\n    function deposit(address _input, uint _amount, uint _min_mint_amount) external returns (uint _mint_amount);\r\n    function depositFor(address _account, address _to, address _input, uint _amount, uint _min_mint_amount) external returns (uint _mint_amount);\r\n    function depositAll(uint[] calldata _amounts, uint _min_mint_amount) external returns (uint _mint_amount);\r\n    function depositAllFor(address _account, address _to, uint[] calldata _amounts, uint _min_mint_amount) external returns (uint _mint_amount);\r\n    function withdraw(uint _shares, address _output, uint _min_output_amount) external returns (uint);\r\n    function withdrawFor(address _account, uint _shares, address _output, uint _min_output_amount) external returns (uint _output_amount);\r\n\r\n    function harvestStrategy(address _strategy) external;\r\n    function harvestWant(address _want) external;\r\n    function harvestAllStrategies() external;\r\n}\r\n\r\ninterface IMultiVaultController {\r\n    function vault() external view returns (address);\r\n\r\n    function wantQuota(address _want) external view returns (uint);\r\n    function wantStrategyLength(address _want) external view returns (uint);\r\n    function wantStrategyBalance(address _want) external view returns (uint);\r\n\r\n    function getStrategyCount() external view returns(uint);\r\n    function strategies(address _want, uint _stratId) external view returns (address _strategy, uint _quota, uint _percent);\r\n    function getBestStrategy(address _want) external view returns (address _strategy);\r\n\r\n    function basedWant() external view returns (address);\r\n    function want() external view returns (address);\r\n    function wantLength() external view returns (uint);\r\n\r\n    function balanceOf(address _want, bool _sell) external view returns (uint);\r\n    function withdraw_fee(address _want, uint _amount) external view returns (uint); // eg. 3CRV => pJar: 0.5% (50/10000)\r\n    function investDisabled(address _want) external view returns (bool);\r\n\r\n    function withdraw(address _want, uint) external returns (uint _withdrawFee);\r\n    function earn(address _token, uint _amount) external;\r\n\r\n    function harvestStrategy(address _strategy) external;\r\n    function harvestWant(address _want) external;\r\n    function harvestAllStrategies() external;\r\n}\r\n\r\ninterface IValueVaultMaster {\r\n    function bank(address) view external returns (address);\r\n    function isVault(address) view external returns (bool);\r\n    function isController(address) view external returns (bool);\r\n    function isStrategy(address) view external returns (bool);\r\n\r\n    function slippage(address) view external returns (uint);\r\n    function convertSlippage(address _input, address _output) view external returns (uint);\r\n\r\n    function valueToken() view external returns (address);\r\n    function govVault() view external returns (address);\r\n    function insuranceFund() view external returns (address);\r\n    function performanceReward() view external returns (address);\r\n\r\n    function govVaultProfitShareFee() view external returns (uint);\r\n    function gasFee() view external returns (uint);\r\n    function insuranceFee() view external returns (uint);\r\n    function withdrawalProtectionFee() view external returns (uint);\r\n}\r\n\r\n/*\r\n\r\n A strategy must implement the following calls;\r\n\r\n - deposit()\r\n - withdraw(address) must exclude any tokens used in the yield - Controller role - withdraw should return to Controller\r\n - withdraw(uint) - Controller | Vault role - withdraw should always return to vault\r\n - withdrawAll() - Controller | Vault role - withdraw should always return to vault\r\n - balanceOf()\r\n\r\n Where possible, strategies must remain as immutable as possible, instead of updating variables, we update the contract by linking it in the controller\r\n\r\n*/\r\nabstract contract StrategyCurveBase {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using SafeMath for uint;\r\n\r\n    Uni public unirouter = Uni(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n\r\n    // used for Crv -> weth -> [dai/usdc/usdt] -> 3crv route\r\n    address public crv = address(0xD533a949740bb3306d119CC777fa900bA034cd52);\r\n    address public weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n    address public t3crv = address(0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490);\r\n\r\n    // for add_liquidity via curve.fi to get back 3CRV (use getMostPremium() for the best stable coin used in the route)\r\n    address public dai = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);\r\n    address public usdc = address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\r\n    address public usdt = address(0xdAC17F958D2ee523a2206206994597C13D831ec7);\r\n\r\n    Mintr public crvMintr = Mintr(0xd061D61a4d941c39E5453435B6345Dc261C2fcE0);\r\n\r\n    address public want;\r\n    Gauge public gauge;\r\n\r\n    uint public withdrawalFee = 0; // over 10000\r\n\r\n    address public governance;\r\n    address public timelock;\r\n    address public controller;\r\n    address public strategist;\r\n\r\n    IValueMultiVault public vault;\r\n    IValueVaultMaster public vaultMaster;\r\n    IStableSwap3Pool public stableSwap3Pool;\r\n\r\n    mapping(address => mapping(address => address[])) public uniswapPaths; // [input -> output] => uniswap_path\r\n    mapping(address => mapping(address => address)) public balancerPools; // [input -> output] => balancer_pool\r\n\r\n    constructor(address _want, address _crv, address _weth, address _t3crv,\r\n        address _dai, address _usdc, address _usdt,\r\n        Gauge _gauge, Mintr _crvMintr,\r\n        IStableSwap3Pool _stableSwap3Pool, address _controller) public {\r\n        want = _want;\r\n        crv = _crv;\r\n        weth = _weth;\r\n        t3crv = _t3crv;\r\n        dai = _dai;\r\n        usdc = _usdc;\r\n        usdt = _usdt;\r\n        stableSwap3Pool = _stableSwap3Pool;\r\n        gauge = _gauge;\r\n        crvMintr = _crvMintr;\r\n        controller = _controller;\r\n        vault = IValueMultiVault(IMultiVaultController(_controller).vault());\r\n        require(address(vault) != address(0), \"!vault\");\r\n        vaultMaster = IValueVaultMaster(vault.getVaultMaster());\r\n        governance = msg.sender;\r\n        strategist = msg.sender;\r\n        IERC20(want).safeApprove(address(gauge), type(uint256).max);\r\n        IERC20(weth).safeApprove(address(unirouter), type(uint256).max);\r\n        IERC20(crv).safeApprove(address(unirouter), type(uint256).max);\r\n        IERC20(dai).safeApprove(address(stableSwap3Pool), type(uint256).max);\r\n        IERC20(usdc).safeApprove(address(stableSwap3Pool), type(uint256).max);\r\n        IERC20(usdt).safeApprove(address(stableSwap3Pool), type(uint256).max);\r\n        IERC20(t3crv).safeApprove(address(stableSwap3Pool), type(uint256).max);\r\n    }\r\n\r\n    function getMostPremium() public view returns (address, uint256)\r\n    {\r\n        uint256[] memory balances = new uint256[](3);\r\n        balances[0] = stableSwap3Pool.balances(0); // DAI\r\n        balances[1] = stableSwap3Pool.balances(1).mul(10**12); // USDC\r\n        balances[2] = stableSwap3Pool.balances(2).mul(10**12); // USDT\r\n\r\n        // DAI\r\n        if (balances[0] < balances[1] && balances[0] < balances[2]) {\r\n            return (dai, 0);\r\n        }\r\n\r\n        // USDC\r\n        if (balances[1] < balances[0] && balances[1] < balances[2]) {\r\n            return (usdc, 1);\r\n        }\r\n\r\n        // USDT\r\n        if (balances[2] < balances[0] && balances[2] < balances[1]) {\r\n            return (usdt, 2);\r\n        }\r\n\r\n        // If they're somehow equal, we just want DAI\r\n        return (dai, 0);\r\n    }\r\n\r\n    function getName() public virtual pure returns (string memory);\r\n\r\n    function setStrategist(address _strategist) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        strategist = _strategist;\r\n    }\r\n\r\n    function setWithdrawalFee(uint _withdrawalFee) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        withdrawalFee = _withdrawalFee;\r\n    }\r\n\r\n    function approveForSpender(IERC20 _token, address _spender, uint _amount) external {\r\n        require(msg.sender == controller || msg.sender == governance, \"!authorized\");\r\n        _token.safeApprove(_spender, _amount);\r\n    }\r\n\r\n    function setUnirouter(Uni _unirouter) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        unirouter = _unirouter;\r\n        IERC20(weth).safeApprove(address(unirouter), type(uint256).max);\r\n        IERC20(crv).safeApprove(address(unirouter), type(uint256).max);\r\n    }\r\n\r\n    function deposit() public {\r\n        uint _wantBal = IERC20(want).balanceOf(address(this));\r\n        if (_wantBal > 0) {\r\n            // deposit [want] to Gauge\r\n            gauge.deposit(_wantBal);\r\n        }\r\n    }\r\n\r\n    function skim() external {\r\n        uint _balance = IERC20(want).balanceOf(address(this));\r\n        IERC20(want).safeTransfer(controller, _balance);\r\n    }\r\n\r\n    // Controller only function for creating additional rewards from dust\r\n    function withdraw(IERC20 _asset) external returns (uint balance) {\r\n        require(msg.sender == controller || msg.sender == governance || msg.sender == strategist, \"!authorized\");\r\n\r\n        require(want != address(_asset), \"want\");\r\n\r\n        balance = _asset.balanceOf(address(this));\r\n        _asset.safeTransfer(controller, balance);\r\n    }\r\n\r\n    function withdrawToController(uint _amount) external {\r\n        require(msg.sender == controller || msg.sender == governance || msg.sender == strategist, \"!authorized\");\r\n        require(controller != address(0), \"!controller\"); // additional protection so we don't burn the funds\r\n\r\n        uint _balance = IERC20(want).balanceOf(address(this));\r\n        if (_balance < _amount) {\r\n            _amount = _withdrawSome(_amount.sub(_balance));\r\n            _amount = _amount.add(_balance);\r\n        }\r\n\r\n        IERC20(want).safeTransfer(controller, _amount);\r\n    }\r\n\r\n    // Withdraw partial funds, normally used with a vault withdrawal\r\n    function withdraw(uint _amount) external returns (uint) {\r\n        require(msg.sender == controller || msg.sender == governance || msg.sender == strategist, \"!authorized\");\r\n\r\n        uint _balance = IERC20(want).balanceOf(address(this));\r\n        if (_balance < _amount) {\r\n            _amount = _withdrawSome(_amount.sub(_balance));\r\n            _amount = _amount.add(_balance);\r\n        }\r\n\r\n        IERC20(want).safeTransfer(address(vault), _amount);\r\n        return _amount;\r\n    }\r\n\r\n    // Withdraw all funds, normally used when migrating strategies\r\n    function withdrawAll() external returns (uint balance) {\r\n        require(msg.sender == controller || msg.sender == governance || msg.sender == strategist, \"!authorized\");\r\n        _withdrawAll();\r\n\r\n        balance = IERC20(want).balanceOf(address(this));\r\n\r\n        IERC20(want).safeTransfer(address(vault), balance);\r\n    }\r\n\r\n    function claimReward() public {\r\n        crvMintr.mint(address(gauge));\r\n    }\r\n\r\n    function _withdrawAll() internal {\r\n        uint _bal = gauge.balanceOf(address(this));\r\n        gauge.withdraw(_bal);\r\n    }\r\n\r\n    function setUnirouterPath(address _input, address _output, address [] memory _path) public {\r\n        require(msg.sender == governance || msg.sender == strategist, \"!authorized\");\r\n        uniswapPaths[_input][_output] = _path;\r\n    }\r\n\r\n    function setBalancerPools(address _input, address _output, address _pool) public {\r\n        require(msg.sender == governance || msg.sender == strategist, \"!authorized\");\r\n        balancerPools[_input][_output] = _pool;\r\n        IERC20(_input).safeApprove(_pool, type(uint256).max);\r\n    }\r\n\r\n    function _swapTokens(address _input, address _output, uint256 _amount) internal {\r\n        address _pool = balancerPools[_input][_output];\r\n        if (_pool != address(0)) { // use balancer/vliquid\r\n            Balancer(_pool).swapExactAmountIn(_input, _amount, _output, 1, type(uint256).max);\r\n        } else { // use Uniswap\r\n            address[] memory path = uniswapPaths[_input][_output];\r\n            if (path.length == 0) {\r\n                // path: _input -> _output\r\n                path = new address[](2);\r\n                path[0] = _input;\r\n                path[1] = _output;\r\n            }\r\n            unirouter.swapExactTokensForTokens(_amount, 1, path, address(this), now.add(1800));\r\n        }\r\n    }\r\n\r\n    function _addLiquidity() internal {\r\n        uint[3] memory amounts;\r\n        amounts[0] = IERC20(dai).balanceOf(address(this));\r\n        amounts[1] = IERC20(usdc).balanceOf(address(this));\r\n        amounts[2] = IERC20(usdt).balanceOf(address(this));\r\n        stableSwap3Pool.add_liquidity(amounts, 1);\r\n    }\r\n\r\n    function harvest(address _mergedStrategy) external {\r\n        require(msg.sender == controller || msg.sender == strategist || msg.sender == governance, \"!authorized\");\r\n        claimReward();\r\n        uint _crvBal = IERC20(crv).balanceOf(address(this));\r\n\r\n        _swapTokens(crv, weth, _crvBal);\r\n        uint256 _wethBal = IERC20(weth).balanceOf(address(this));\r\n\r\n        if (_wethBal > 0) {\r\n            if (_mergedStrategy != address(0)) {\r\n                require(vaultMaster.isStrategy(_mergedStrategy), \"!strategy\"); // additional protection so we don't burn the funds\r\n                IERC20(weth).safeTransfer(_mergedStrategy, _wethBal); // forward WETH to one strategy and do the profit split all-in-one there (gas saving)\r\n            } else {\r\n                address govVault = vaultMaster.govVault();\r\n                address performanceReward = vaultMaster.performanceReward();\r\n\r\n                if (vaultMaster.govVaultProfitShareFee() > 0 && govVault != address(0)) {\r\n                    address _valueToken = vaultMaster.valueToken();\r\n                    uint256 _govVaultProfitShareFee = _wethBal.mul(vaultMaster.govVaultProfitShareFee()).div(10000);\r\n                    _swapTokens(weth, _valueToken, _govVaultProfitShareFee);\r\n                    IERC20(_valueToken).safeTransfer(govVault, IERC20(_valueToken).balanceOf(address(this)));\r\n                }\r\n\r\n                if (vaultMaster.gasFee() > 0 && performanceReward != address(0)) {\r\n                    uint256 _gasFee = _wethBal.mul(vaultMaster.gasFee()).div(10000);\r\n                    IERC20(weth).safeTransfer(performanceReward, _gasFee);\r\n                }\r\n\r\n                _wethBal = IERC20(weth).balanceOf(address(this));\r\n                // stablecoin we want to convert to\r\n                (address _stableCoin,) = getMostPremium();\r\n                _swapTokens(weth, _stableCoin, _wethBal);\r\n                _addLiquidity();\r\n\r\n                uint _3crvBal = IERC20(t3crv).balanceOf(address(this));\r\n                if (_3crvBal > 0) {\r\n                    IERC20(t3crv).safeTransfer(address(vault), _3crvBal); // send back 3Crv (basedWant) to vault for auto-compounding\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function _withdrawSome(uint _amount) internal returns (uint) {\r\n        uint _before = IERC20(want).balanceOf(address(this));\r\n        gauge.withdraw(_amount);\r\n        uint _after = IERC20(want).balanceOf(address(this));\r\n        _amount = _after.sub(_before);\r\n\r\n        return _amount;\r\n    }\r\n\r\n    function balanceOfWant() public view returns (uint) {\r\n        return IERC20(want).balanceOf(address(this));\r\n    }\r\n\r\n    function balanceOfPool() public view returns (uint) {\r\n        return gauge.balanceOf(address(this));\r\n    }\r\n\r\n    function balanceOf() public view returns (uint) {\r\n        return balanceOfWant()\r\n               .add(balanceOfPool());\r\n    }\r\n\r\n    function claimable_tokens() external view returns (uint) {\r\n        return gauge.claimable_tokens(address(this));\r\n    }\r\n\r\n    function withdrawFee(uint _amount) external view returns (uint) {\r\n        return _amount.mul(withdrawalFee).div(10000);\r\n    }\r\n\r\n    function setGovernance(address _governance) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        governance = _governance;\r\n    }\r\n\r\n    function setTimelock(address _timelock) external {\r\n        require(msg.sender == timelock, \"!timelock\");\r\n        timelock = _timelock;\r\n    }\r\n\r\n    function setController(address _controller) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        controller = _controller;\r\n        vault = IValueMultiVault(IMultiVaultController(_controller).vault());\r\n        require(address(vault) != address(0), \"!vault\");\r\n        vaultMaster = IValueVaultMaster(vault.getVaultMaster());\r\n    }\r\n\r\n    event ExecuteTransaction(address indexed target, uint value, string signature, bytes data);\r\n\r\n    /**\r\n     * @dev This is from Timelock contract, the governance should be a Timelock contract before calling this emergency function!\r\n     */\r\n    function executeTransaction(address target, uint value, string memory signature, bytes memory data) public returns (bytes memory) {\r\n        require(msg.sender == timelock, \"!timelock\");\r\n\r\n        bytes memory callData;\r\n\r\n        if (bytes(signature).length == 0) {\r\n            callData = data;\r\n        } else {\r\n            callData = abi.encodePacked(bytes4(keccak256(bytes(signature))), data);\r\n        }\r\n\r\n        // solium-disable-next-line security/no-call-value\r\n        (bool success, bytes memory returnData) = target.call{value : value}(callData);\r\n        require(success, string(abi.encodePacked(getName(), \"::executeTransaction: Transaction execution reverted.\")));\r\n\r\n        emit ExecuteTransaction(target, value, signature, data);\r\n\r\n        return returnData;\r\n    }\r\n}\r\n\r\ncontract StrategyCurveCCrv is StrategyCurveBase {\r\n    // want  = 0x845838DF265Dcd2c412A1Dc9e959c7d08537f8a2 (CCrv)\r\n    // gauge = 0x7ca5b0a2910B33e9759DC7dDB0413949071D7575 (CCrv Gauge)\r\n    constructor(address _want, address _crv, address _weth, address _t3crv,\r\n        address _dai, address _usdc, address _usdt,\r\n        Gauge _gauge, Mintr _crvMintr,\r\n        IStableSwap3Pool _stableSwap3Pool, address _controller) public\r\n            StrategyCurveBase(_want, _crv, _weth, _t3crv, _dai, _usdc, _usdt, _gauge, _crvMintr, _stableSwap3Pool, _controller) {\r\n    }\r\n\r\n    function getName() public override pure returns (string memory) {\r\n        return \"mvUSD:StrategyCurveCCrv\";\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_want\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_crv\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_t3crv\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dai\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"},{\"internalType\":\"contract Gauge\",\"name\":\"_gauge\",\"type\":\"address\"},{\"internalType\":\"contract Mintr\",\"name\":\"_crvMintr\",\"type\":\"address\"},{\"internalType\":\"contract IStableSwap3Pool\",\"name\":\"_stableSwap3Pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"signature\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ExecuteTransaction\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approveForSpender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfWant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balancerPools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimable_tokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crvMintr\",\"outputs\":[{\"internalType\":\"contract Mintr\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"signature\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"executeTransaction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gauge\",\"outputs\":[{\"internalType\":\"contract Gauge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMostPremium\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mergedStrategy\",\"type\":\"address\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_input\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_output\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"setBalancerPools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"}],\"name\":\"setStrategist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_timelock\",\"type\":\"address\"}],\"name\":\"setTimelock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Uni\",\"name\":\"_unirouter\",\"type\":\"address\"}],\"name\":\"setUnirouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_input\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_output\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"}],\"name\":\"setUnirouterPath\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawalFee\",\"type\":\"uint256\"}],\"name\":\"setWithdrawalFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"skim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableSwap3Pool\",\"outputs\":[{\"internalType\":\"contract IStableSwap3Pool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"t3crv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelock\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unirouter\",\"outputs\":[{\"internalType\":\"contract Uni\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uniswapPaths\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IValueMultiVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultMaster\",\"outputs\":[{\"internalType\":\"contract IValueVaultMaster\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"StrategyCurveCCrv","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000845838df265dcd2c412a1dc9e959c7d08537f8a2000000000000000000000000d533a949740bb3306d119cc777fa900ba034cd52000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000006c3f90f043a72fa612cbac8115ee7e52bde6e4900000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec70000000000000000000000007ca5b0a2910b33e9759dc7ddb0413949071d7575000000000000000000000000d061d61a4d941c39e5453435b6345dc261c2fce0000000000000000000000000bebc44782c7db0a1a60cb6fe97d0b483032ff1c7000000000000000000000000ba5d28f4ecee5586d616024c74e4d791e01adee7","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a74128170dbd6a3ce04ed0ae49bd60324a4fe17a47bdf582c9be1c6358f63771"}]}