{"status":"1","message":"OK","result":[{"SourceCode":"/// GebProxyActions.sol\r\n\r\n// Copyright (C) 2018-2020 Maker Ecosystem Growth Holdings, INC.\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\npragma solidity 0.6.7;\r\n\r\nabstract contract CollateralLike {\r\n    function approve(address, uint) virtual public;\r\n    function transfer(address, uint) virtual public;\r\n    function transferFrom(address, address, uint) virtual public;\r\n    function deposit() virtual public payable;\r\n    function withdraw(uint) virtual public;\r\n}\r\n\r\nabstract contract ManagerLike {\r\n    function safeCan(address, uint, address) virtual public view returns (uint);\r\n    function collateralTypes(uint) virtual public view returns (bytes32);\r\n    function ownsSAFE(uint) virtual public view returns (address);\r\n    function safes(uint) virtual public view returns (address);\r\n    function safeEngine() virtual public view returns (address);\r\n    function openSAFE(bytes32, address) virtual public returns (uint);\r\n    function transferSAFEOwnership(uint, address) virtual public;\r\n    function allowSAFE(uint, address, uint) virtual public;\r\n    function allowHandler(address, uint) virtual public;\r\n    function modifySAFECollateralization(uint, int, int) virtual public;\r\n    function transferCollateral(uint, address, uint) virtual public;\r\n    function transferInternalCoins(uint, address, uint) virtual public;\r\n    function quitSystem(uint, address) virtual public;\r\n    function enterSystem(address, uint) virtual public;\r\n    function moveSAFE(uint, uint) virtual public;\r\n    function protectSAFE(uint, address, address) virtual public;\r\n}\r\n\r\nabstract contract SAFEEngineLike {\r\n    function canModifySAFE(address, address) virtual public view returns (uint);\r\n    function collateralTypes(bytes32) virtual public view returns (uint, uint, uint, uint, uint);\r\n    function coinBalance(address) virtual public view returns (uint);\r\n    function safes(bytes32, address) virtual public view returns (uint, uint);\r\n    function modifySAFECollateralization(bytes32, address, address, address, int, int) virtual public;\r\n    function approveSAFEModification(address) virtual public;\r\n    function transferInternalCoins(address, address, uint) virtual public;\r\n}\r\n\r\nabstract contract CollateralJoinLike {\r\n    function decimals() virtual public returns (uint);\r\n    function collateral() virtual public returns (CollateralLike);\r\n    function join(address, uint) virtual public payable;\r\n    function exit(address, uint) virtual public;\r\n}\r\n\r\nabstract contract DSTokenLike {\r\n    function balanceOf(address) virtual public view returns (uint);\r\n    function approve(address, uint) virtual public;\r\n    function transfer(address, uint) virtual public returns (bool);\r\n    function transferFrom(address, address, uint) virtual public returns (bool);\r\n}\r\n\r\nabstract contract WethLike {\r\n    function balanceOf(address) virtual public view returns (uint);\r\n    function approve(address, uint) virtual public;\r\n    function transfer(address, uint) virtual public;\r\n    function transferFrom(address, address, uint) virtual public;\r\n    function deposit() virtual public payable;\r\n    function withdraw(uint) virtual public;\r\n}\r\n\r\nabstract contract CoinJoinLike {\r\n    function safeEngine() virtual public returns (SAFEEngineLike);\r\n    function systemCoin() virtual public returns (DSTokenLike);\r\n    function join(address, uint) virtual public payable;\r\n    function exit(address, uint) virtual public;\r\n}\r\n\r\nabstract contract ApproveSAFEModificationLike {\r\n    function approveSAFEModification(address) virtual public;\r\n    function denySAFEModification(address) virtual public;\r\n}\r\n\r\nabstract contract GlobalSettlementLike {\r\n    function collateralCashPrice(bytes32) virtual public view returns (uint);\r\n    function redeemCollateral(bytes32, uint) virtual public;\r\n    function freeCollateral(bytes32) virtual public;\r\n    function prepareCoinsForRedeeming(uint) virtual public;\r\n    function processSAFE(bytes32, address) virtual public;\r\n}\r\n\r\nabstract contract ProxyRegistryLike {\r\n    function proxies(address) virtual public view returns (address);\r\n    function build(address) virtual public returns (address);\r\n}\r\n\r\nabstract contract ProxyLike {\r\n    function owner() virtual public view returns (address);\r\n}\r\n\r\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n// WARNING: These functions meant to be used as a a library for a DSProxy. Some are unsafe if you call them directly.\r\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n\r\ncontract Common {\r\n    uint256 constant RAY = 10 ** 27;\r\n\r\n    // Internal functions\r\n    function multiply(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"mul-overflow\");\r\n    }\r\n\r\n    function _coinJoin_join(address apt, address safeHandler, uint wad) internal {\r\n        // Approves adapter to take the COIN amount\r\n        CoinJoinLike(apt).systemCoin().approve(apt, wad);\r\n        // Joins COIN into the safeEngine\r\n        CoinJoinLike(apt).join(safeHandler, wad);\r\n    }\r\n\r\n    // Public functions\r\n    function coinJoin_join(address apt, address safeHandler, uint wad) public {\r\n        // Gets COIN from the user's wallet\r\n        CoinJoinLike(apt).systemCoin().transferFrom(msg.sender, address(this), wad);\r\n\r\n        _coinJoin_join(apt, safeHandler, wad);\r\n    }\r\n}\r\n\r\ncontract GebProxyActionsGlobalSettlement is Common {\r\n\r\n    // Internal functions\r\n    function _freeCollateral(\r\n        address manager,\r\n        address globalSettlement,\r\n        uint safe\r\n    ) internal returns (uint lockedCollateral) {\r\n        bytes32 collateralType = ManagerLike(manager).collateralTypes(safe);\r\n        address safeHandler = ManagerLike(manager).safes(safe);\r\n        SAFEEngineLike safeEngine = SAFEEngineLike(ManagerLike(manager).safeEngine());\r\n        uint generatedDebt;\r\n        (lockedCollateral, generatedDebt) = safeEngine.safes(collateralType, safeHandler);\r\n\r\n        // If SAFE still has debt, it needs to be paid\r\n        if (generatedDebt > 0) {\r\n            GlobalSettlementLike(globalSettlement).processSAFE(collateralType, safeHandler);\r\n            (lockedCollateral,) = safeEngine.safes(collateralType, safeHandler);\r\n        }\r\n        // Approves the manager to transfer the position to proxy's address in the safeEngine\r\n        if (safeEngine.canModifySAFE(address(this), address(manager)) == 0) {\r\n            safeEngine.approveSAFEModification(manager);\r\n        }\r\n        // Transfers position from SAFE to the proxy address\r\n        ManagerLike(manager).quitSystem(safe, address(this));\r\n        // Frees the position and recovers the collateral in the safeEngine registry\r\n        GlobalSettlementLike(globalSettlement).freeCollateral(collateralType);\r\n    }\r\n\r\n    // Public functions\r\n    function freeETH(\r\n        address manager,\r\n        address ethJoin,\r\n        address globalSettlement,\r\n        uint safe\r\n    ) external {\r\n        uint wad = _freeCollateral(manager, globalSettlement, safe);\r\n        // Exits WETH amount to proxy address as a token\r\n        CollateralJoinLike(ethJoin).exit(address(this), wad);\r\n        // Converts WETH to ETH\r\n        CollateralJoinLike(ethJoin).collateral().withdraw(wad);\r\n        // Sends ETH back to the user's wallet\r\n        msg.sender.transfer(wad);\r\n    }\r\n\r\n    function freeTokenCollateral(\r\n        address manager,\r\n        address collateralJoin,\r\n        address globalSettlement,\r\n        uint safe\r\n    ) public {\r\n        uint amt = _freeCollateral(manager, globalSettlement, safe) / 10 ** (18 - CollateralJoinLike(collateralJoin).decimals());\r\n        // Exits token amount to the user's wallet as a token\r\n        CollateralJoinLike(collateralJoin).exit(msg.sender, amt);\r\n    }\r\n\r\n    function prepareCoinsForRedeeming(\r\n        address coinJoin,\r\n        address globalSettlement,\r\n        uint wad\r\n    ) public {\r\n        coinJoin_join(coinJoin, address(this), wad);\r\n        SAFEEngineLike safeEngine = CoinJoinLike(coinJoin).safeEngine();\r\n        // Approves the globalSettlement to take out COIN from the proxy's balance in the safeEngine\r\n        if (safeEngine.canModifySAFE(address(this), address(globalSettlement)) == 0) {\r\n            safeEngine.approveSAFEModification(globalSettlement);\r\n        }\r\n        GlobalSettlementLike(globalSettlement).prepareCoinsForRedeeming(wad);\r\n    }\r\n\r\n    function redeemETH(\r\n        address ethJoin,\r\n        address globalSettlement,\r\n        bytes32 collateralType,\r\n        uint wad\r\n    ) public {\r\n        GlobalSettlementLike(globalSettlement).redeemCollateral(collateralType, wad);\r\n        uint collateralWad = multiply(wad, GlobalSettlementLike(globalSettlement).collateralCashPrice(collateralType)) / RAY;\r\n        // Exits WETH amount to proxy address as a token\r\n        CollateralJoinLike(ethJoin).exit(address(this), collateralWad);\r\n        // Converts WETH to ETH\r\n        CollateralJoinLike(ethJoin).collateral().withdraw(collateralWad);\r\n        // Sends ETH back to the user's wallet\r\n        msg.sender.transfer(collateralWad);\r\n    }\r\n\r\n    function redeemTokenCollateral(\r\n        address collateralJoin,\r\n        address globalSettlement,\r\n        bytes32 collateralType,\r\n        uint wad\r\n    ) public {\r\n        GlobalSettlementLike(globalSettlement).redeemCollateral(collateralType, wad);\r\n        // Exits token amount to the user's wallet as a token\r\n        uint amt = multiply(wad, GlobalSettlementLike(globalSettlement).collateralCashPrice(collateralType)) / RAY / 10 ** (18 - CollateralJoinLike(collateralJoin).decimals());\r\n        CollateralJoinLike(collateralJoin).exit(msg.sender, amt);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"apt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"safeHandler\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"coinJoin_join\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ethJoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"globalSettlement\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"safe\",\"type\":\"uint256\"}],\"name\":\"freeETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralJoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"globalSettlement\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"safe\",\"type\":\"uint256\"}],\"name\":\"freeTokenCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"coinJoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"globalSettlement\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"prepareCoinsForRedeeming\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ethJoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"globalSettlement\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"redeemETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateralJoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"globalSettlement\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"redeemTokenCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"GebProxyActionsGlobalSettlement","CompilerVersion":"v0.6.7+commit.b8d736ae","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://1ae136d3ef6eecbadbf6d4fa0a81ad8d208a551d6efcb52b9ce5f8a9c09fe060"}]}