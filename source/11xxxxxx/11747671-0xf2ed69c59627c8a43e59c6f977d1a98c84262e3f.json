{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\nlibrary Constants {\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private constant _launchSupply = 50000 * 10**9;\r\n    uint256 private constant _largeTotal = (MAX - (MAX % _launchSupply));\r\n\r\n    uint256 private constant _baseExpansionFactor = 100;\r\n    uint256 private constant _baseContractionFactor = 100;\r\n    uint256 private constant _baseUtilityFee = 50;\r\n    uint256 private constant _baseContractionCap = 1000;\r\n\r\n    uint256 private constant _stabilizerFee = 250;\r\n    uint256 private constant _stabilizationLowerBound = 50;\r\n    uint256 private constant _stabilizationLowerReset = 75;\r\n    uint256 private constant _stabilizationUpperBound = 150;\r\n    uint256 private constant _stabilizationUpperReset = 125;\r\n    uint256 private constant _stabilizePercent = 10;\r\n\r\n    uint256 private constant _treasuryFee = 250;\r\n\r\n    uint256 private constant _presaleMinIndividualCap = 1 ether;\r\n    uint256 private constant _presaleMaxIndividualCap = 3 ether;\r\n    uint256 private constant _presaleCap = 27500 * 10**9;\r\n    uint256 private constant _maxPresaleGas = 200000000000;\r\n\r\n    uint256 private constant _epochLength = 4 hours;\r\n\r\n    uint256 private constant _liquidityReward = 2 * 10**9;\r\n    uint256 private constant _minForLiquidity = 10 * 10**9;\r\n    uint256 private constant _minForCallerLiquidity = 10 * 10**9;\r\n\r\n    address private constant _routerAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    address private constant _factoryAddress = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\r\n    address payable private constant _deployerAddress = 0x1e3d51F276cf92eE8BDa0A6394423dbaBb46268F;\r\n    address private constant _treasuryAddress = 0x1e3d51F276cf92eE8BDa0A6394423dbaBb46268F;\r\n\r\n    uint256 private constant _presaleRate = 22916;\r\n    uint256 private constant _listingRate = 19444;\r\n\r\n    string private constant _name = \"ZStable\";\r\n    string private constant _symbol = \"ZST\";\r\n    uint8 private constant _decimals = 9;\r\n\r\n    /****** Getters *******/\r\n    function getPresaleRate() internal pure returns (uint256) {\r\n        return _presaleRate;\r\n    }\r\n     function getListingRate() internal pure returns (uint256) {\r\n        return _listingRate;\r\n    }\r\n    function getLaunchSupply() internal pure returns (uint256) {\r\n        return _launchSupply;\r\n    }\r\n    function getLargeTotal() internal pure returns (uint256) {\r\n        return _largeTotal;\r\n    }\r\n    function getPresaleCap() internal pure returns (uint256) {\r\n        return _presaleCap;\r\n    }\r\n    function getPresaleMinIndividualCap() internal pure returns (uint256) {\r\n        return _presaleMinIndividualCap;\r\n    }\r\n    function getPresaleMaxIndividualCap() internal pure returns (uint256) {\r\n        return _presaleMaxIndividualCap;\r\n    }\r\n    function getMaxPresaleGas() internal pure returns (uint256) {\r\n        return _maxPresaleGas;\r\n    }\r\n    function getBaseExpansionFactor() internal pure returns (uint256) {\r\n        return _baseExpansionFactor;\r\n    }\r\n    function getBaseContractionFactor() internal pure returns (uint256) {\r\n        return _baseContractionFactor;\r\n    }\r\n    function getBaseContractionCap() internal pure returns (uint256) {\r\n        return _baseContractionCap;\r\n    }\r\n    function getBaseUtilityFee() internal pure returns (uint256) {\r\n        return _baseUtilityFee;\r\n    }\r\n    function getStabilizerFee() internal pure returns (uint256) {\r\n        return _stabilizerFee;\r\n    }\r\n    function getStabilizationLowerBound() internal pure returns (uint256) {\r\n        return _stabilizationLowerBound;\r\n    }\r\n    function getStabilizationLowerReset() internal pure returns (uint256) {\r\n        return _stabilizationLowerReset;\r\n    }\r\n    function getStabilizationUpperBound() internal pure returns (uint256) {\r\n        return _stabilizationUpperBound;\r\n    }\r\n    function getStabilizationUpperReset() internal pure returns (uint256) {\r\n        return _stabilizationUpperReset;\r\n    }\r\n    function getStabilizePercent() internal pure returns (uint256) {\r\n        return _stabilizePercent;\r\n    }\r\n    function getTreasuryFee() internal pure returns (uint256) {\r\n        return _treasuryFee;\r\n    }\r\n    function getEpochLength() internal pure returns (uint256) {\r\n        return _epochLength;\r\n    }\r\n    function getLiquidityReward() internal pure returns (uint256) {\r\n        return _liquidityReward;\r\n    }\r\n    function getMinForLiquidity() internal pure returns (uint256) {\r\n        return _minForLiquidity;\r\n    }\r\n    function getMinForCallerLiquidity() internal pure returns (uint256) {\r\n        return _minForCallerLiquidity;\r\n    }\r\n    function getRouterAdd() internal pure returns (address) {\r\n        return _routerAddress;\r\n    }\r\n    function getFactoryAdd() internal pure returns (address) {\r\n        return _factoryAddress;\r\n    }\r\n    function getDeployerAdd() internal pure returns (address payable) {\r\n        return _deployerAddress;\r\n    }\r\n    function getTreasuryAdd() internal pure returns (address) {\r\n        return _treasuryAddress;\r\n    }\r\n    function getName() internal pure returns (string memory)  {\r\n        return _name;\r\n    }\r\n    function getSymbol() internal pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function getDecimals() internal pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\ncontract State {\r\n\r\n    mapping (address => uint256) _largeBalances;\r\n    mapping (address => mapping (address => uint256)) _allowances;\r\n\r\n    // Supported pools and data for measuring mint & burn factors\r\n    struct PoolCounter {\r\n        address pairToken;\r\n        uint256 tokenBalance;\r\n        uint256 pairTokenBalance;\r\n        uint256 lpBalance;\r\n        uint256 startTokenBalance;\r\n        uint256 startPairTokenBalance;\r\n    }\r\n    address[] _supportedPools;\r\n    mapping (address => PoolCounter) _poolCounters;\r\n    mapping (address => bool) _isSupportedPool;\r\n    address _mainPool;\r\n\r\n    uint256 _currentEpoch;\r\n    \r\n    //Creating locked balances\r\n    struct LockBox {\r\n        address beneficiary;\r\n        uint256 lockedBalance;\r\n        uint256 unlockTime;\r\n        bool locked;\r\n    }\r\n    LockBox[] _lockBoxes;\r\n    mapping(address => uint256) _lockedBalance;\r\n    mapping(address => bool) _hasLockedBalance;\r\n    uint256 _totalLockedBalance;\r\n \r\n    uint256 _largeTotal;\r\n    uint256 _totalSupply;\r\n\r\n    address _liquidityReserve;\r\n    address _stabilizer;\r\n\r\n    bool _presaleDone;\r\n    address _presaleCon;\r\n    \r\n    bool _paused;\r\n    \r\n    bool _taxLess;\r\n    mapping(address=>bool) _isTaxlessSetter;\r\n}\r\ncontract Getters is State {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function getLargeBalances(address account) public view returns (uint256) {\r\n        return _largeBalances[account];\r\n    }\r\n    function getAllowances(address account, address spender) public view returns (uint256) {\r\n        return _allowances[account][spender];\r\n    } \r\n    function getSupportedPools(uint256 index) public view returns (address) {\r\n        return _supportedPools[index];\r\n    }\r\n    function getPoolCounters(address pool) public view returns (address, uint256, uint256, uint256, uint256, uint256) {\r\n        PoolCounter memory pc = _poolCounters[pool];\r\n        return (pc.pairToken, pc.tokenBalance, pc.pairTokenBalance, pc.lpBalance, pc.startTokenBalance, pc.startPairTokenBalance);\r\n    }\r\n    function isSupportedPool(address pool) public view returns (bool) {\r\n        return _isSupportedPool[pool];\r\n    }\r\n    function mainPool() public view returns (address) {\r\n        return _mainPool;\r\n    }\r\n    function getCurrentEpoch() public view returns (uint256) {\r\n        return _currentEpoch;\r\n    }\r\n    function getLockBoxes(uint256 box) public view returns (address, uint256, uint256, bool) {\r\n        LockBox memory lb = _lockBoxes[box];\r\n        return (lb.beneficiary, lb.lockedBalance, lb.unlockTime, lb.locked);\r\n    }\r\n    function getLockedBalance(address account) public view returns (uint256) {\r\n        return _lockedBalance[account];\r\n    }\r\n    function hasLockedBalance(address account) public view returns (bool) {\r\n        return _hasLockedBalance[account];\r\n    }\r\n    function getTotalLockedBalance() public view returns (uint256) {\r\n        return _totalLockedBalance;\r\n    }\r\n    function getLargeTotal() public view returns (uint256) {\r\n        return _largeTotal;\r\n    }\r\n    function getTotalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    function getLiquidityReserve() public view returns (address) {\r\n        return _liquidityReserve;\r\n    }\r\n    function getStabilizer() public view returns (address) {\r\n        return _stabilizer;\r\n    }\r\n    function isPresaleDone() public view returns (bool) {\r\n        return _presaleDone;\r\n    }\r\n    function getPresaleAddress() public view returns (address) {\r\n        return _presaleCon;\r\n    }\r\n    function isPaused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n    function isTaxLess() public view returns (bool) {\r\n        return _taxLess;\r\n    }\r\n    function isTaxlessSetter(address account) public view returns (bool) {\r\n        return _isTaxlessSetter[account];\r\n    }\r\n    function getUniswapRouter() public view returns (IUniswapV2Router02) {\r\n        return IUniswapV2Router02(Constants.getRouterAdd());\r\n    }\r\n    function getUniswapFactory() public view returns (IUniswapV2Factory) {\r\n        return IUniswapV2Factory(Constants.getFactoryAdd());\r\n    }\r\n    function getFactor() public view returns(uint256) {\r\n        if (_presaleDone) {\r\n            return _largeTotal.div(_totalSupply);\r\n        } else {\r\n            return _largeTotal.div(Constants.getLaunchSupply());\r\n        }\r\n    }\r\n    function getUpdatedPoolCounters(address pool, address pairToken) public view returns (uint256, uint256, uint256) {\r\n        uint256 lpBalance = IERC20(pool).totalSupply();\r\n        uint256 tokenBalance = IERC20(address(this)).balanceOf(pool);\r\n        uint256 pairTokenBalance = IERC20(address(pairToken)).balanceOf(pool);\r\n        return (tokenBalance, pairTokenBalance, lpBalance);\r\n    }\r\n    function getMintValue(address sender, uint256 amount) internal view returns(uint256, uint256, uint256) {\r\n        uint256 expansionR = (_poolCounters[sender].pairTokenBalance).mul(_poolCounters[sender].startTokenBalance).mul(100).div(_poolCounters[sender].startPairTokenBalance).div(_poolCounters[sender].tokenBalance);\r\n        uint256 mintAmount;\r\n        if (expansionR > (Constants.getBaseExpansionFactor()).add(10000).div(100)) {\r\n            uint256 mintFactor = expansionR.mul(expansionR);\r\n            mintAmount = amount.mul(mintFactor.sub(10000)).div(10000);\r\n        } else {\r\n            mintAmount = amount.mul(Constants.getBaseExpansionFactor()).div(10000);\r\n        }\r\n        return (mintAmount.mul(Constants.getStabilizerFee()).div(10000),mintAmount.mul(Constants.getTreasuryFee()).div(10000),mintAmount);\r\n    }\r\n\r\n    function getBurnValues(address recipient, uint256 amount) internal view returns(uint256, uint256) {\r\n        uint256 currentFactor = getFactor();\r\n        uint256 contractionR;\r\n        if (isSupportedPool(recipient)) {\r\n            contractionR = (_poolCounters[recipient].tokenBalance).mul(_poolCounters[recipient].startPairTokenBalance).mul(100).div(_poolCounters[recipient].pairTokenBalance).div(_poolCounters[recipient].startTokenBalance);\r\n        } else {\r\n            contractionR = (_poolCounters[_mainPool].tokenBalance).mul(_poolCounters[_mainPool].startPairTokenBalance).mul(100).div(_poolCounters[_mainPool].pairTokenBalance).div(_poolCounters[_mainPool].startTokenBalance);\r\n        }\r\n        uint256 burnAmount;\r\n        if (contractionR > (Constants.getBaseContractionFactor().add(10000)).div(100)) {\r\n            uint256 burnFactor = contractionR.mul(contractionR);\r\n            burnAmount = amount.mul(burnFactor.sub(10000)).div(10000);\r\n            if (burnAmount > amount.mul(Constants.getBaseContractionCap()).div(10000)) burnAmount = amount.mul(Constants.getBaseContractionCap()).div(10000);\r\n        } else {\r\n            burnAmount = amount.mul(Constants.getBaseContractionFactor()).div(10000);\r\n        }\r\n        return (burnAmount, burnAmount.mul(currentFactor));\r\n    }\r\n\r\n    function getUtilityFee(uint256 amount) internal view returns(uint256, uint256) {\r\n        uint256 currentFactor = getFactor();\r\n        uint256 utilityFee = amount.mul(Constants.getBaseUtilityFee()).div(10000);\r\n        return (utilityFee, utilityFee.mul(currentFactor));\r\n    }\r\n    function getMintRate(address pool) external view returns (uint256) {\r\n        uint256 expansionR = (_poolCounters[pool].pairTokenBalance).mul(_poolCounters[pool].startTokenBalance).mul(100).div(_poolCounters[pool].startPairTokenBalance).div(_poolCounters[pool].tokenBalance);\r\n        if (expansionR > (Constants.getBaseExpansionFactor()).add(10000).div(100)) {\r\n            uint256 mintFactor = expansionR.mul(expansionR);\r\n            return mintFactor.sub(10000);\r\n        } else {\r\n            return Constants.getBaseExpansionFactor();\r\n        }\r\n    }\r\n    function getBurnRate(address pool) external view returns (uint256) {\r\n        uint256 contractionR = (_poolCounters[pool].tokenBalance).mul(_poolCounters[pool].startPairTokenBalance).mul(100).div(_poolCounters[pool].pairTokenBalance).div(_poolCounters[pool].startTokenBalance);\r\n        uint256 burnRate;\r\n        if (contractionR > (Constants.getBaseContractionFactor().add(10000)).div(100)) {\r\n            uint256 burnFactor = contractionR.mul(contractionR);\r\n            burnRate = burnFactor.sub(10000);\r\n            if (burnRate > Constants.getBaseContractionCap()) {\r\n                return Constants.getBaseContractionCap();\r\n            }\r\n            return burnRate;\r\n\r\n        } else {\r\n            return Constants.getBaseContractionFactor();\r\n        }\r\n    }\r\n}\r\ncontract Setters is State, Getters {\r\n    function updatePresaleAddress(address presaleAddress) internal {\r\n        _presaleCon = presaleAddress;\r\n    }\r\n    function setAllowances(address owner, address spender, uint256 amount) internal {\r\n        _allowances[owner][spender] = amount;\r\n    }\r\n    function addToAccount(address account, uint256 amount) internal {\r\n        uint256 currentFactor = getFactor();\r\n        uint256 largeAmount = amount.mul(currentFactor);\r\n        _largeBalances[account] = _largeBalances[account].add(largeAmount);\r\n        _totalSupply = _totalSupply.add(amount);\r\n    }\r\n    function addToAll(uint256 amount) internal {\r\n        _totalSupply = _totalSupply.add(amount);\r\n    }\r\n    function initializeEpoch() internal {\r\n        _currentEpoch = now;\r\n    }\r\n    function updateEpoch() internal {\r\n        initializeEpoch();\r\n        for (uint256 i=0; i<_supportedPools.length; i++) {\r\n            _poolCounters[_supportedPools[i]].startTokenBalance = _poolCounters[_supportedPools[i]].tokenBalance;\r\n            _poolCounters[_supportedPools[i]].startPairTokenBalance = _poolCounters[_supportedPools[i]].pairTokenBalance;\r\n        }\r\n    }\r\n    function initializeLargeTotal() internal {\r\n        _largeTotal = Constants.getLargeTotal();\r\n    }\r\n    function syncPair(address pool) internal returns(bool) {\r\n        (uint256 tokenBalance, uint256 pairTokenBalance, uint256 lpBalance) = getUpdatedPoolCounters(pool, _poolCounters[pool].pairToken);\r\n        bool lpBurn = lpBalance < _poolCounters[pool].lpBalance;\r\n        _poolCounters[pool].lpBalance = lpBalance;\r\n        _poolCounters[pool].tokenBalance = tokenBalance;\r\n        _poolCounters[pool].pairTokenBalance = pairTokenBalance;\r\n        return (lpBurn);\r\n    }\r\n    function silentSyncPair(address pool) public {\r\n        (uint256 tokenBalance, uint256 pairTokenBalance, uint256 lpBalance) = getUpdatedPoolCounters(pool, _poolCounters[pool].pairToken);\r\n        _poolCounters[pool].lpBalance = lpBalance;\r\n        _poolCounters[pool].tokenBalance = tokenBalance;\r\n        _poolCounters[pool].pairTokenBalance = pairTokenBalance;\r\n    }\r\n    function addSupportedPool(address pool, address pairToken) internal {\r\n        require(!isSupportedPool(pool),\"This pool is already supported\");\r\n        _isSupportedPool[pool] = true;\r\n        _supportedPools.push(pool);\r\n        (uint256 tokenBalance, uint256 pairTokenBalance, uint256 lpBalance) = getUpdatedPoolCounters(pool, pairToken);\r\n        _poolCounters[pool] = PoolCounter(pairToken, tokenBalance, pairTokenBalance, lpBalance, tokenBalance, pairTokenBalance);\r\n    }\r\n    function removeSupportedPool(address pool) internal {\r\n        require(isSupportedPool(pool), \"This pool is currently not supported\");\r\n        for (uint256 i = 0; i < _supportedPools.length; i++) {\r\n            if (_supportedPools[i] == pool) {\r\n                _supportedPools[i] = _supportedPools[_supportedPools.length - 1];\r\n                _isSupportedPool[pool] = false;\r\n                delete _poolCounters[pool];\r\n                _supportedPools.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\ncontract Stabilizer {\r\n    constructor() public {\r\n\r\n    }\r\n}\r\ncontract ZStable is Setters, Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    modifier onlyTaxless {\r\n        require(isTaxlessSetter(_msgSender()),\"not taxless\");\r\n        _;\r\n    }\r\n    modifier onlyPresale {\r\n        require(_msgSender()==getPresaleAddress(),\"not presale\");\r\n        require(!isPresaleDone(), \"Presale over\");\r\n        _;\r\n    }\r\n    modifier pausable {\r\n        require(!isPaused(), \"Paused\");\r\n        _;\r\n    }\r\n    modifier taxlessTx {\r\n        _taxLess = true;\r\n        _;\r\n        _taxLess = false;\r\n    }\r\n\r\n    constructor() public {\r\n        updateEpoch();\r\n        initializeLargeTotal();\r\n        setStabilizer(address(new Stabilizer()));\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return Constants.getName();\r\n    }\r\n    \r\n    function symbol() public view returns (string memory) {\r\n        return Constants.getSymbol();\r\n    }\r\n    \r\n    function decimals() public view returns (uint8) {\r\n        return Constants.getDecimals();\r\n    }\r\n    \r\n    function totalSupply() public view override returns (uint256) {\r\n        return getTotalSupply();\r\n    }\r\n    \r\n    function circulatingSupply() public view returns (uint256) {\r\n        uint256 currentFactor = getFactor();\r\n        return getTotalSupply().sub(getTotalLockedBalance().div(currentFactor)).sub(balanceOf(address(this))).sub(balanceOf(getStabilizer()));\r\n    }\r\n    \r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        uint256 currentFactor = getFactor();\r\n        if (hasLockedBalance(account)) return (getLargeBalances(account).add(getLockedBalance(account)).div(currentFactor));\r\n        return getLargeBalances(account).div(currentFactor);\r\n    }\r\n    \r\n    function unlockedBalanceOf(address account) public view returns (uint256) {\r\n        uint256 currentFactor = getFactor();\r\n        return getLargeBalances(account).div(currentFactor); \r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return getAllowances(owner,spender);\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), getAllowances(sender,_msgSender()).sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, getAllowances(_msgSender(),spender).add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, getAllowances(_msgSender(),spender).sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function mint(address to, uint256 amount) public onlyPresale {\r\n        addToAccount(to,amount);\r\n        emit Transfer(address(0),to,amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        setAllowances(owner, spender, amount);\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) private pausable {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Amount must be greater than zero\");\r\n        require(amount <= balanceOf(sender),\"Amount exceeds balance\");\r\n        require(amount <= unlockedBalanceOf(sender),\"Amount exceeds unlocked balance\");\r\n        require(isPresaleDone(),\"Presale yet to close\");\r\n        if (now > getCurrentEpoch().add(Constants.getEpochLength())) updateEpoch();\r\n        uint256 currentFactor = getFactor();\r\n        uint256 largeAmount = amount.mul(currentFactor);\r\n        uint256 txType;\r\n        if (isTaxLess()) {\r\n            txType = 3;\r\n        } else {\r\n            bool lpBurn;\r\n            if (isSupportedPool(sender)) {\r\n                lpBurn = syncPair(sender);\r\n            } else if (isSupportedPool(recipient)){\r\n                silentSyncPair(recipient);\r\n            } else {\r\n                silentSyncPair(_mainPool);\r\n            }\r\n            txType = _getTxType(sender, recipient, lpBurn);\r\n        }\r\n        // Buy Transaction from supported pools - requires mint, no utility fee\r\n        if (txType == 1) {\r\n            (uint256 stabilizerMint, uint256 treasuryMint, uint256 totalMint) = getMintValue(sender, amount);\r\n            // uint256 mintSize = amount.div(100);\r\n            _largeBalances[sender] = _largeBalances[sender].sub(largeAmount);\r\n            _largeBalances[recipient] = _largeBalances[recipient].add(largeAmount);\r\n            _largeBalances[getStabilizer()] = _largeBalances[getStabilizer()].add(stabilizerMint.mul(currentFactor));\r\n            _largeBalances[Constants.getTreasuryAdd()] = _largeBalances[Constants.getTreasuryAdd()].add(treasuryMint.mul(currentFactor));\r\n            _totalSupply = _totalSupply.add(totalMint);\r\n            emit Transfer(sender, recipient, amount);\r\n            emit Transfer(address(0),getStabilizer(),stabilizerMint);\r\n            emit Transfer(address(0),Constants.getTreasuryAdd(),treasuryMint);\r\n        }\r\n        // Sells to supported pools or unsupported transfer - requires exit burn and utility fee\r\n        else if (txType == 2) {\r\n            (uint256 burnSize, uint256 largeBurnSize) = getBurnValues(recipient, amount);\r\n            (uint256 utilityFee, uint256 largeUtilityFee) = getUtilityFee(amount);\r\n            uint256 actualTransferAmount = amount.sub(burnSize).sub(utilityFee);\r\n            uint256 largeTransferAmount = actualTransferAmount.mul(currentFactor);\r\n            _largeBalances[sender] = _largeBalances[sender].sub(largeAmount);\r\n            _largeBalances[recipient] = _largeBalances[recipient].add(largeTransferAmount);\r\n            _largeBalances[_liquidityReserve] = _largeBalances[_liquidityReserve].add(largeUtilityFee);\r\n            _totalSupply = _totalSupply.sub(burnSize);\r\n            _largeTotal = _largeTotal.sub(largeBurnSize);\r\n            emit Transfer(sender, recipient, actualTransferAmount);\r\n            emit Transfer(sender, address(0), burnSize);\r\n            emit Transfer(sender, _liquidityReserve, utilityFee);\r\n        } \r\n        // Add Liquidity via interface or Remove Liquidity Transaction to supported pools - no fee of any sort\r\n        else if (txType == 3) {\r\n            _largeBalances[sender] = _largeBalances[sender].sub(largeAmount);\r\n            _largeBalances[recipient] = _largeBalances[recipient].add(largeAmount);\r\n            emit Transfer(sender, recipient, amount);\r\n        }\r\n    }\r\n\r\n    function _getTxType(address sender, address recipient, bool lpBurn) private returns(uint256) {\r\n        uint256 txType = 2;\r\n        if (isSupportedPool(sender)) {\r\n            if (lpBurn) {\r\n                txType = 3;\r\n            } else {\r\n                txType = 1;\r\n            }\r\n        } else if (sender == Constants.getRouterAdd()) {\r\n            txType = 3;\r\n        }\r\n        return txType;\r\n    }\r\n\r\n    function setPresale(address presaleAdd) external onlyOwner() {\r\n        require(!isPresaleDone(), \"Presale is already completed\");\r\n        updatePresaleAddress(presaleAdd);\r\n    }\r\n\r\n    function setPresaleDone() public payable onlyPresale {\r\n        require(totalSupply() <= Constants.getLaunchSupply(), \"Total supply is already minted\");\r\n        _mintRemaining();\r\n        _presaleDone = true;\r\n        _createEthPool();\r\n    }\r\n\r\n    function _mintRemaining() private {\r\n        require(!isPresaleDone(), \"Cannot mint post presale\");\r\n        addToAccount(Constants.getDeployerAdd(), 5000 * 10**9);\r\n        Constants.getDeployerAdd().transfer(address(this).balance.div(4));\r\n        uint256 toMint = Constants.getLaunchSupply().sub(totalSupply());\r\n        uint256 tokensToAdd = address(this).balance.div(10**11).mul(Constants.getListingRate());\r\n        if(toMint > tokensToAdd) {\r\n            addToAccount(address(0),toMint.sub(tokensToAdd));\r\n            emit Transfer(address(0),address(0),toMint.sub(tokensToAdd));\r\n        }\r\n        addToAccount(address(this), tokensToAdd);\r\n        emit Transfer(address(0),Constants.getDeployerAdd(),5000 * 10**9);\r\n        emit Transfer(address(0),address(this),tokensToAdd);\r\n    }\r\n\r\n    function mintLockedTranche(address account, uint256 unlockTime, uint256 amount) external onlyOwner() {\r\n        require(!isPresaleDone(), \"Cannot mint post presale\");\r\n        uint256 currentFactor = getFactor();\r\n        uint256 largeAmount = amount.mul(currentFactor);\r\n        _lockBoxes.push(LockBox(account, largeAmount, unlockTime, true));\r\n        _lockedBalance[account] = _lockedBalance[account].add(largeAmount);\r\n        _hasLockedBalance[account] = true;\r\n        _totalLockedBalance = _totalLockedBalance.add(largeAmount);\r\n        _totalSupply = _totalSupply.add(amount);\r\n        emit Transfer(address(0),account,amount);\r\n    }\r\n    \r\n    function mintUnlockedTranche(address account, uint256 amount) external onlyOwner() {\r\n        require(!isPresaleDone(), \"Cannot mint post presale\");\r\n        addToAccount(account, amount);\r\n        emit Transfer(address(0),account,amount);\r\n    }\r\n\r\n    function unlockTranche(uint256 tranche) external {\r\n        require(hasLockedBalance(_msgSender()),\"Caller has no locked balance\");\r\n        (address beneficiary, uint256 balance, uint256 unlockTime, bool locked) = getLockBoxes(tranche);\r\n        require(unlockTime <= now,\"This tranche cannot be unlocked yet\");\r\n        require(beneficiary == _msgSender(),\"You are not the owner of this tranche\");\r\n        require(locked ==  true, \"This tranche has already been unlocked\");\r\n        _totalLockedBalance = _totalLockedBalance.sub(balance);\r\n        _largeBalances[_msgSender()] = _largeBalances[_msgSender()].add(balance);\r\n        _lockedBalance[_msgSender()] = _lockedBalance[_msgSender()].sub(balance);\r\n        if (_lockedBalance[_msgSender()] <= 0) _hasLockedBalance[_msgSender()] = false;\r\n        _lockBoxes[tranche].lockedBalance = 0;\r\n        _lockBoxes[tranche].locked = false;\r\n    }\r\n\r\n    function reassignTranche(uint256 tranche, address beneficiary) external onlyOwner() {\r\n        (address oldBeneficiary, uint256 balance, uint256 unlockTime, bool locked) = getLockBoxes(tranche);\r\n        require(locked == true, \"This tranche has already been unlocked\");\r\n        require(unlockTime > now,\"This tranche has already been vested\");\r\n        _lockedBalance[oldBeneficiary] = _lockedBalance[oldBeneficiary].sub(balance);\r\n        _lockedBalance[beneficiary] = _lockedBalance[beneficiary].add(balance);\r\n        if (_lockedBalance[oldBeneficiary] == 0) _hasLockedBalance[oldBeneficiary] = false;\r\n        _hasLockedBalance[beneficiary] = true; \r\n        _lockBoxes[tranche].beneficiary = beneficiary;\r\n        uint256 currentFactor = getFactor();\r\n        emit Transfer(oldBeneficiary,beneficiary,balance.div(currentFactor));\r\n    }\r\n\r\n    function _createEthPool() private taxlessTx {\r\n        IUniswapV2Router02 uniswapRouterV2 = getUniswapRouter();\r\n        IUniswapV2Factory uniswapFactory = getUniswapFactory();\r\n        address tokenUniswapPair;\r\n        if (uniswapFactory.getPair(address(uniswapRouterV2.WETH()), address(this)) == address(0)) {\r\n            tokenUniswapPair = uniswapFactory.createPair(\r\n            address(uniswapRouterV2.WETH()), address(this));\r\n        } else {\r\n            tokenUniswapPair = uniswapFactory.getPair(address(this),uniswapRouterV2.WETH());\r\n        }\r\n        uint256 tokensToAdd = balanceOf(address(this));        \r\n        _approve(address(this), 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, tokensToAdd);\r\n        uniswapRouterV2.addLiquidityETH{value: address(this).balance}(address(this),\r\n           tokensToAdd, 0, 0, Constants.getDeployerAdd(), block.timestamp);\r\n        addSupportedPool(tokenUniswapPair, address(uniswapRouterV2.WETH()));\r\n        _mainPool = tokenUniswapPair;\r\n    }\r\n\r\n    function createTokenPool(address pairToken, uint256 amount) external onlyOwner() taxlessTx {\r\n        IUniswapV2Router02 uniswapRouterV2 = getUniswapRouter();\r\n        IUniswapV2Factory uniswapFactory = getUniswapFactory();\r\n        address tokenUniswapPair;\r\n        if (uniswapFactory.getPair(pairToken, address(this)) == address(0)) {\r\n            tokenUniswapPair = uniswapFactory.createPair(\r\n            pairToken, address(this));\r\n        } else {\r\n            tokenUniswapPair = uniswapFactory.getPair(pairToken,address(this));\r\n        }\r\n        require(uniswapFactory.getPair(pairToken,address(uniswapRouterV2.WETH())) != address(0), \"Eth pairing does not exist\");\r\n        require(balanceOf(address(this)) >= amount, \"Amount exceeds the token balance\");\r\n        uint256 toConvert = amount.div(2);\r\n        uint256 toAdd = amount.sub(toConvert);\r\n        uint256 initialBalance = IERC20(pairToken).balanceOf(address(this));\r\n        address[] memory path = new address[](3);\r\n        path[0] = address(this);\r\n        path[1] = uniswapRouterV2.WETH();\r\n        path[2] = pairToken;\r\n        _approve(address(this), address(uniswapRouterV2), toConvert);\r\n        uniswapRouterV2.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            toConvert, 0, path, address(this), block.timestamp);\r\n        uint256 newBalance = IERC20(pairToken).balanceOf(address(this)).sub(initialBalance);\r\n        _approve(address(this), address(uniswapRouterV2), toAdd);\r\n        IERC20(pairToken).approve(address(uniswapRouterV2), newBalance);\r\n        uniswapRouterV2.addLiquidity(address(this),pairToken,toAdd,newBalance,0,0,address(this),block.timestamp);\r\n        addSupportedPool(tokenUniswapPair, pairToken);\r\n    }\r\n\r\n    function addNewSupportedPool(address pool, address pairToken) external onlyOwner() {\r\n        addSupportedPool(pool, pairToken);\r\n    }\r\n\r\n    function removeOldSupportedPool(address pool) external onlyOwner() {\r\n        removeSupportedPool(pool);\r\n    }\r\n\r\n    function setTaxlessSetter(address cont) external onlyOwner() {\r\n        require(!isTaxlessSetter(cont),\"already setter\");\r\n        _isTaxlessSetter[cont] = true;\r\n    }\r\n\r\n    function setTaxless(bool flag) public onlyTaxless {\r\n        _taxLess = flag;\r\n    }\r\n\r\n    function removeTaxlessSetter(address cont) external onlyOwner() {\r\n        require(isTaxlessSetter(cont),\"not setter\");\r\n        _isTaxlessSetter[cont] = false;\r\n    }\r\n\r\n    function setLiquidityReserve(address reserve) external onlyOwner() {\r\n        require(Address.isContract(reserve),\"Need a contract\");\r\n        _isTaxlessSetter[_liquidityReserve] = false;\r\n        uint256 oldBalance = balanceOf(_liquidityReserve);\r\n        if (oldBalance > 0) {\r\n            _transfer(_liquidityReserve, reserve, oldBalance);\r\n            emit Transfer(_liquidityReserve, reserve, oldBalance);\r\n        }\r\n        _liquidityReserve = reserve;\r\n        _isTaxlessSetter[reserve] = true;\r\n    }\r\n\r\n    function setStabilizer(address reserve) public onlyOwner() taxlessTx {\r\n        require(Address.isContract(reserve),\"Need a contract\");\r\n        _isTaxlessSetter[_stabilizer] = false;\r\n        uint256 oldBalance = balanceOf(_stabilizer);\r\n        if (oldBalance > 0) {\r\n            _transfer(_stabilizer, reserve, oldBalance);\r\n            emit Transfer(_stabilizer, reserve, oldBalance);\r\n        }\r\n        _stabilizer = reserve;\r\n        _isTaxlessSetter[reserve] = true;\r\n    }\r\n    \r\n    function pauseContract(bool flag) external onlyOwner() {\r\n        _paused = flag;\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pairToken\",\"type\":\"address\"}],\"name\":\"addNewSupportedPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circulatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pairToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"createTokenPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"getAllowances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getBurnRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getLargeBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLargeTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidityReserve\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"box\",\"type\":\"uint256\"}],\"name\":\"getLockBoxes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getLockedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getMintRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolCounters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPresaleAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStabilizer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getSupportedPools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalLockedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUniswapFactory\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUniswapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pairToken\",\"type\":\"address\"}],\"name\":\"getUpdatedPoolCounters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasLockedBalance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPresaleDone\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"isSupportedPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTaxLess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isTaxlessSetter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintLockedTranche\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintUnlockedTranche\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"pauseContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tranche\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"reassignTranche\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"removeOldSupportedPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cont\",\"type\":\"address\"}],\"name\":\"removeTaxlessSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"}],\"name\":\"setLiquidityReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"presaleAdd\",\"type\":\"address\"}],\"name\":\"setPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setPresaleDone\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"}],\"name\":\"setStabilizer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"setTaxless\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cont\",\"type\":\"address\"}],\"name\":\"setTaxlessSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"silentSyncPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tranche\",\"type\":\"uint256\"}],\"name\":\"unlockTranche\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unlockedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ZStable","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU LGPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://36e154ea1d2b67244508fa3d207283398cf096302154e927b9cc1d149a6bf74e"}]}