{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\r\n// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.4.24 <0.7.0;\r\n\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n// File: contracts/token/Ownable.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n */\r\ncontract Ownable is Initializable {\r\n    address private _owner;\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner, \"not called by owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     * @param newOwner Address of new owner.\r\n     */\r\n    function __Ownable_init(address newOwner) internal initializer {\r\n        _owner = newOwner;\r\n    }\r\n\r\n    // reserved storage slots\r\n    uint256[50] private __gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/token/ERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n// import \"openzeppelin-eth/contracts/token/ERC20/IERC20.sol\";\r\n// import \"openzeppelin-eth/contracts/math/SafeMath.sol\";\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract ERC20 is Initializable, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowed;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    function __ERC20_init(\r\n        string memory name,\r\n        string memory symbol,\r\n        uint8 decimals\r\n    ) internal initializer {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Total number of tokens in existence\r\n     */\r\n    function totalSupply() public override view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     * @param owner The address to query the the balance of.\r\n     * @return An uint256 representing the amount owned by the passed address.\r\n     */\r\n    function balanceOf(address owner) public override view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param owner address The address which owns the funds.\r\n     * @param spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        public\r\n        virtual\r\n        override\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens to a specified address\r\n     * @param to The address to transfer to.\r\n     * @param value The amount to be transferred.\r\n     */\r\n    function transfer(address to, uint256 value)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param spender The address which will spend the funds.\r\n     * @param value The amount of tokens to be spent.\r\n     */\r\n    function approve(address spender, uint256 value)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        require(spender != address(0), \"spender must not be 0x0\");\r\n\r\n        _allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param from address The address which you want to send tokens from\r\n     * @param to address The address which you want to transfer to\r\n     * @param value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) public virtual override returns (bool) {\r\n        require(\r\n            value <= _allowed[from][msg.sender],\r\n            \"allowance is smaller than the value to transfer\"\r\n        );\r\n\r\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n        _transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     * @param spender The address which will spend the funds.\r\n     * @param addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        require(spender != address(0), \"spender must not be 0x0\");\r\n\r\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     * @param spender The address which will spend the funds.\r\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        require(spender != address(0), \"spender must not be 0x0\");\r\n\r\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens between specified addresses\r\n     * @param from The address to transfer from.\r\n     * @param to The address to transfer to.\r\n     * @param value The amount to be transferred.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        require(value <= _balances[from], \"balance is smaller than value\");\r\n        require(from != address(0), \"from must not be 0x0\");\r\n        require(to != address(0), \"to must not be 0x0\");\r\n\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that mints an amount of the token and assigns it to\r\n     * an account. This encapsulates the modification of balances such that the\r\n     * proper events are emitted.\r\n     * @param account The account that will receive the created tokens.\r\n     * @param amount The amount that will be created.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"account must not be 0x0\");\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account.\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param amount The amount that will be burnt.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"account must not be 0x0\");\r\n        require(\r\n            amount <= _balances[account],\r\n            \"balance is smaller than the amount to burn\"\r\n        );\r\n\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        _balances[account] = _balances[account].sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    // reserved storage slots\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n// File: contracts/token/ERC20WithFees.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n/**\r\n * @title ERC20WithFees\r\n */\r\ncontract ERC20WithFees is Ownable, ERC20 {\r\n    struct Fee {\r\n        uint256 numerator;\r\n        uint256 denominator;\r\n    }\r\n\r\n    address public transferFeeReceiver;\r\n    Fee private _transferFee;\r\n    mapping(address => Fee) _individualTransferFee;\r\n\r\n    event SetTransferFeeReceiver(address transferFeeReceiver);\r\n    event SetTransferFee(uint256 numerator, uint256 denominator);\r\n    event SetIndividualTransferFee(\r\n        address addr,\r\n        uint256 numerator,\r\n        uint256 denominator\r\n    );\r\n\r\n    function __ERC20WithFees_init(address _transferFeeReceiver)\r\n        internal\r\n        initializer\r\n    {\r\n        require(\r\n            _transferFeeReceiver != address(0),\r\n            \"_transferFeeReceiver is zero\"\r\n        );\r\n\r\n        transferFeeReceiver = _transferFeeReceiver;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets transferFeeReceiver.\r\n     */\r\n    function setTransferFeeReceiver(address receiver) public onlyOwner {\r\n        require(receiver != address(0), \"receiver is zero\");\r\n        transferFeeReceiver = receiver;\r\n        emit SetTransferFeeReceiver(receiver);\r\n    }\r\n\r\n    /**\r\n     * @return Numerator of transferFee.\r\n     */\r\n    function transferFeeNumerator() public view returns (uint256) {\r\n        return _transferFee.numerator;\r\n    }\r\n\r\n    /**\r\n     * @return Denominator of transferFee.\r\n     */\r\n    function transferFeeDenominator() public view returns (uint256) {\r\n        return _transferFee.denominator;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets transferFee.\r\n     */\r\n    function setTransferFee(uint256 numerator, uint256 denominator)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(\r\n            numerator < denominator,\r\n            \"numerator is equal to or greater than denominator\"\r\n        );\r\n        _transferFee = Fee(numerator, denominator);\r\n        emit SetTransferFee(numerator, denominator);\r\n    }\r\n\r\n    /**\r\n     * @return Numerator of addr's transferFee.\r\n     */\r\n    function individualTransferFeeNumerator(address addr)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _individualTransferFee[addr].numerator;\r\n    }\r\n\r\n    /**\r\n     * @return Denominator of addr's transferFee.\r\n     */\r\n    function individualTransferFeeDenominator(address addr)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _individualTransferFee[addr].denominator;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets individual's transferFeeNumerator and transferFeeDenominator. Its precedence is higher than global transfer fee.\r\n     */\r\n    function setIndividualTransferFee(\r\n        address addr,\r\n        uint256 numerator,\r\n        uint256 denominator\r\n    ) public onlyOwner {\r\n        require(\r\n            numerator < denominator,\r\n            \"numerator is equal to or greater than denominator\"\r\n        );\r\n        _individualTransferFee[addr].numerator = numerator;\r\n        _individualTransferFee[addr].denominator = denominator;\r\n        emit SetIndividualTransferFee(addr, numerator, denominator);\r\n    }\r\n\r\n    /**\r\n     * @return Calculated transfer fee for the given value.\r\n     */\r\n    function calculateTransferFee(address sender, uint256 value)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (_individualTransferFee[sender].denominator > 0) {\r\n            return\r\n                value.mul(_individualTransferFee[sender].numerator).div(\r\n                    _individualTransferFee[sender].denominator\r\n                );\r\n        } else {\r\n            if (_transferFee.denominator > 0) {\r\n                return\r\n                    value.mul(_transferFee.numerator).div(\r\n                        _transferFee.denominator\r\n                    );\r\n            } else {\r\n                return 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    // reserved storage slots\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n// File: contracts/token/ERC20WithBlacklist.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n/**\r\n * @title ERC20WithBlacklist\r\n */\r\ncontract ERC20WithBlacklist is Ownable, ERC20 {\r\n    address[] private _blacklist;\r\n    mapping(address => bool) private _blacklistMap;\r\n\r\n    event AddedToBlacklist(address addr);\r\n    event RemovedFromBlacklist(address addr);\r\n\r\n    /**\r\n     * @dev Throws if addr is blacklisted.\r\n     */\r\n    modifier notBlacklisted(address addr) {\r\n        require(!_blacklistMap[addr], \"addr is blacklisted\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @param addr The address to check if blacklisted\r\n     * @return true if addr is blacklisted, false otherwise\r\n     */\r\n    function isBlacklisted(address addr) public view returns (bool) {\r\n        return _blacklistMap[addr];\r\n    }\r\n\r\n    /**\r\n     * @dev Function to add an address to the blacklist\r\n     * @param addr The address to add to the blacklist\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function addToBlacklist(address addr) public onlyOwner returns (bool) {\r\n        require(!_blacklistMap[addr], \"addr is already blacklisted\");\r\n        _blacklistMap[addr] = true;\r\n        _blacklist.push(addr);\r\n        emit AddedToBlacklist(addr);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to remove an address from the blacklist\r\n     * @param addr The address to remove from the blacklist\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function removeFromBlacklist(address addr) public onlyOwner returns (bool) {\r\n        require(_blacklistMap[addr], \"addr is not blacklisted\");\r\n        _blacklistMap[addr] = false;\r\n        for (uint256 i = 0; i < _blacklist.length; i++) {\r\n            if (_blacklist[i] == addr) {\r\n                _blacklist[i] = _blacklist[_blacklist.length - 1];\r\n                _blacklist.pop();\r\n                break;\r\n            }\r\n        }\r\n        emit RemovedFromBlacklist(addr);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @return Length of the blacklist\r\n     */\r\n    function getBlacklistLength() public view returns (uint256) {\r\n        return _blacklist.length;\r\n    }\r\n\r\n    /**\r\n     * @return Blacklisted address at index\r\n     */\r\n    function getBlacklist(uint256 index) public view returns (address) {\r\n        require(index < _blacklist.length, \"index out of range\");\r\n        return _blacklist[index];\r\n    }\r\n\r\n    // reserved storage slots\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n// File: contracts/token/PausableERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n/**\r\n * @title PausableERC20\r\n */\r\ncontract PausableERC20 is Ownable, ERC20 {\r\n    event Paused();\r\n    event Unpaused();\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \"not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if the contract is paused, false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Called by the owner to pause, triggers stopped state\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function pause() public onlyOwner whenNotPaused returns (bool) {\r\n        _paused = true;\r\n        emit Paused();\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Called by the owner to unpause, returns to normal state\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function unpause() public onlyOwner whenPaused returns (bool) {\r\n        _paused = false;\r\n        emit Unpaused();\r\n        return true;\r\n    }\r\n\r\n    // reserved storage slots\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n// File: contracts/token/BurnableERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n/**\r\n * @title BurnableERC20\r\n */\r\ncontract BurnableERC20 is Ownable, ERC20 {\r\n    uint256 public burnMin;\r\n    uint256 public burnMax;\r\n\r\n    event Burned(address from, uint256 amount);\r\n    event SetBurnBounds(uint256 min, uint256 max);\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens from the owner account\r\n     * @param amount uint256 The amount of token to be burned\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function burn(uint256 amount) public virtual onlyOwner returns (bool) {\r\n        require(amount >= burnMin, \"amount to burn is smaller than burnMin\");\r\n        require(\r\n            burnMax == 0 || amount <= burnMax,\r\n            \"amount to burn is greater than burnMax\"\r\n        );\r\n        _burn(owner(), amount);\r\n        emit Burned(owner(), amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Set boundaries for the minimum and maximum amount of tokens. Set both values to ZERO to not set boundary.\r\n     * @param min uint256 Minimum amount of tokens that can be burnt\r\n     * @param max uint256 Maximum amount of tokens that can be burnt\r\n     */\r\n    function setBurnBounds(uint256 min, uint256 max) public onlyOwner {\r\n        require(min <= max, \"min must be at most max\");\r\n        burnMin = min;\r\n        burnMax = max;\r\n        emit SetBurnBounds(min, max);\r\n    }\r\n\r\n    // reserved storage slots\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n// File: contracts/token/MintableERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n/**\r\n * @title MintableERC20\r\n */\r\ncontract MintableERC20 is Ownable, ERC20 {\r\n    uint256 public mintMin;\r\n    uint256 public mintMax;\r\n\r\n    event Minted(address to, uint256 amount);\r\n    event SetMintBounds(uint256 min, uint256 max);\r\n\r\n    address[] private _mintWhitelist;\r\n    mapping(address => bool) private _mintWhitelistMap;\r\n\r\n    event AddedToMintWhitelist(address addr);\r\n    event RemovedFromMintWhitelist(address addr);\r\n\r\n    /**\r\n     * @dev Throws if addr is not mint-whitelisted.\r\n     */\r\n    modifier mintWhitelisted(address addr) {\r\n        require(_mintWhitelistMap[addr], \"addr is not mint-whitelisted\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @param addr The address to check if mint-whitelisted\r\n     * @return true if addr is mint-whitelisted, false otherwise\r\n     */\r\n    function isMintWhitelisted(address addr) public view returns (bool) {\r\n        return _mintWhitelistMap[addr];\r\n    }\r\n\r\n    /**\r\n     * @dev Function to add an address to the mint-whitelist\r\n     * @param addr The address to add to the mint-whitelist\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function addToMintWhitelist(address addr) public onlyOwner returns (bool) {\r\n        require(!_mintWhitelistMap[addr], \"addr is already mint-whitelisted\");\r\n        _mintWhitelistMap[addr] = true;\r\n        _mintWhitelist.push(addr);\r\n        emit AddedToMintWhitelist(addr);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to remove an address from the mint-whitelist\r\n     * @param addr The address to remove from the mint-whitelist\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function removeFromMintWhitelist(address addr)\r\n        public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        require(_mintWhitelistMap[addr], \"addr is not mint-whitelisted\");\r\n        _mintWhitelistMap[addr] = false;\r\n        for (uint256 i = 0; i < _mintWhitelist.length; i++) {\r\n            if (_mintWhitelist[i] == addr) {\r\n                _mintWhitelist[i] = _mintWhitelist[_mintWhitelist.length - 1];\r\n                _mintWhitelist.pop();\r\n                break;\r\n            }\r\n        }\r\n        emit RemovedFromMintWhitelist(addr);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @return Length of the mint-whitelist\r\n     */\r\n    function getMintWhitelistLength() public view returns (uint256) {\r\n        return _mintWhitelist.length;\r\n    }\r\n\r\n    /**\r\n     * @return MintWhitelisted address at index\r\n     */\r\n    function getMintWhitelist(uint256 index) public view returns (address) {\r\n        require(index < _mintWhitelist.length, \"index out of range\");\r\n        return _mintWhitelist[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Function to mint tokens\r\n     * @param to The address that will receive the minted tokens.\r\n     * @param amount The amount of tokens to mint.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function mint(address to, uint256 amount)\r\n        public\r\n        virtual\r\n        onlyOwner\r\n        mintWhitelisted(to)\r\n        returns (bool)\r\n    {\r\n        require(amount >= mintMin, \"amount to mint is smaller than mintMin\");\r\n        require(\r\n            mintMax == 0 || amount <= mintMax,\r\n            \"amount to mint is greater than mintMax\"\r\n        );\r\n        _mint(to, amount);\r\n        emit Minted(to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Set boundaries for the minimum and maximum amount of tokens. Set both values to ZERO to not set boundary.\r\n     * @param min uint256 Minimum amount of tokens that can be minted\r\n     * @param max uint256 Maximum amount of tokens that can be minted\r\n     */\r\n    function setMintBounds(uint256 min, uint256 max) public onlyOwner {\r\n        require(min <= max, \"min must be at most max\");\r\n        mintMin = min;\r\n        mintMax = max;\r\n        emit SetMintBounds(min, max);\r\n    }\r\n\r\n    // reserved storage slots\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n// File: contracts/token/BKRW.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title BKRW is a stable token backed 100% by KRW. 1-to-1 ratio of BKRW to KRW sitting in a transparent and audited Korean bank account.\r\n */\r\ncontract BKRW is\r\n    Ownable,\r\n    ERC20,\r\n    ERC20WithFees,\r\n    ERC20WithBlacklist,\r\n    PausableERC20,\r\n    BurnableERC20,\r\n    MintableERC20\r\n{\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n     * @param initialOwner The address who can control the token.\r\n     */\r\n    function initialize(address initialOwner) public initializer {\r\n        require(initialOwner != address(0), \"owner is zero\");\r\n\r\n        Ownable.__Ownable_init(initialOwner);\r\n        ERC20.__ERC20_init(\"BKRW Token\", \"BKRW\", 2);\r\n        ERC20WithFees.__ERC20WithFees_init(initialOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens to a specified address\r\n     * @param to The address to transfer to.\r\n     * @param value The amount to be transferred.\r\n     */\r\n    function transfer(address to, uint256 value)\r\n        public\r\n        override\r\n        whenNotPaused\r\n        notBlacklisted(msg.sender)\r\n        returns (bool)\r\n    {\r\n        bool transferred = super.transfer(to, value);\r\n        if (transferred) {\r\n            uint256 transferFee = calculateTransferFee(msg.sender, value);\r\n            if (transferFee > 0) {\r\n                _transfer(to, transferFeeReceiver, transferFee);\r\n            }\r\n        }\r\n        return transferred;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param spender The address which will spend the funds.\r\n     * @param value The amount of tokens to be spent.\r\n     */\r\n    function approve(address spender, uint256 value)\r\n        public\r\n        override\r\n        whenNotPaused\r\n        notBlacklisted(msg.sender)\r\n        returns (bool)\r\n    {\r\n        return super.approve(spender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param from address The address which you want to send tokens from\r\n     * @param to address The address which you want to transfer to\r\n     * @param value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) public override whenNotPaused notBlacklisted(msg.sender) notBlacklisted(from) returns (bool) {\r\n        bool transferred = super.transferFrom(from, to, value);\r\n        if (transferred) {\r\n            uint256 transferFee = calculateTransferFee(from, value);\r\n            if (transferFee > 0) {\r\n                _transfer(to, transferFeeReceiver, transferFee);\r\n            }\r\n        }\r\n        return transferred;\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     * @param spender The address which will spend the funds.\r\n     * @param addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        override\r\n        whenNotPaused\r\n        notBlacklisted(msg.sender)\r\n        returns (bool)\r\n    {\r\n        return super.increaseAllowance(spender, addedValue);\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     * @param spender The address which will spend the funds.\r\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        override\r\n        whenNotPaused\r\n        notBlacklisted(msg.sender)\r\n        returns (bool)\r\n    {\r\n        return super.decreaseAllowance(spender, subtractedValue);\r\n    }\r\n\r\n    /**\r\n     * @dev Function to mint tokens\r\n     * @param to The address that will receive the minted tokens.\r\n     * @param amount The amount of tokens to mint.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function mint(address to, uint256 amount)\r\n        public\r\n        override\r\n        whenNotPaused\r\n        returns (bool)\r\n    {\r\n        return super.mint(to, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens from the owner account\r\n     * @param amount uint256 The amount of tokens to be burned\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function burn(uint256 amount) public override whenNotPaused returns (bool) {\r\n        return super.burn(amount);\r\n    }\r\n\r\n    // reserved storage slots\r\n    uint256[50] private ______gap;\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"AddedToBlacklist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"AddedToMintWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"RemovedFromBlacklist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"RemovedFromMintWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"SetBurnBounds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"SetIndividualTransferFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"SetMintBounds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"SetTransferFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"transferFeeReceiver\",\"type\":\"address\"}],\"name\":\"SetTransferFeeReceiver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addToBlacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addToMintWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"calculateTransferFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getBlacklist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlacklistLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getMintWhitelist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMintWhitelistLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"individualTransferFeeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"individualTransferFeeNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isMintWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeFromBlacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeFromMintWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"setBurnBounds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"setIndividualTransferFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"setMintBounds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"setTransferFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"setTransferFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFeeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFeeNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"BKRW","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://1b35efb1a17c40e94e4038ad0e2b7dddf1ad14ce99761e719dafcf5865d28a9e"}]}