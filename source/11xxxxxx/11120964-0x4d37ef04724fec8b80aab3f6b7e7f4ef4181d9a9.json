{"status":"1","message":"OK","result":[{"SourceCode":"/// GlobalSettlement.sol\r\n\r\n// Copyright (C) 2018 Rain <rainbreak@riseup.net>\r\n// Copyright (C) 2018 Lev Livnev <lev@liv.nev.org.uk>\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.6.7;\r\n\r\nabstract contract SAFEEngineLike {\r\n    function coinBalance(address) virtual public view returns (uint256);\r\n    function collateralTypes(bytes32) virtual public view returns (\r\n        uint256 debtAmount,        // [wad]\r\n        uint256 accumulatedRate,   // [ray]\r\n        uint256 safetyPrice,       // [ray]\r\n        uint256 debtCeiling,       // [rad]\r\n        uint256 debtFloor,         // [rad]\r\n        uint256 liquidationPrice   // [ray]\r\n    );\r\n    function safes(bytes32,address) virtual public view returns (\r\n        uint256 lockedCollateral, // [wad]\r\n        uint256 generatedDebt     // [wad]\r\n    );\r\n    function globalDebt() virtual public returns (uint256);\r\n    function transferInternalCoins(address src, address dst, uint256 rad) virtual external;\r\n    function approveSAFEModification(address) virtual external;\r\n    function transferCollateral(bytes32 collateralType, address src, address dst, uint256 wad) virtual external;\r\n    function confiscateSAFECollateralAndDebt(bytes32 collateralType, address safe, address collateralSource, address debtDestination, int256 deltaCollateral, int256 deltaDebt) virtual external;\r\n    function createUnbackedDebt(address debtDestination, address coinDestination, uint256 rad) virtual external;\r\n    function disableContract() virtual external;\r\n}\r\nabstract contract LiquidationEngineLike {\r\n    function collateralTypes(bytes32) virtual public view returns (\r\n        address collateralAuctionHouse,\r\n        uint256 liquidationPenalty,     // [wad]\r\n        uint256 liquidationQuantity     // [rad]\r\n    );\r\n    function disableContract() virtual external;\r\n}\r\nabstract contract StabilityFeeTreasuryLike {\r\n    function disableContract() virtual external;\r\n}\r\nabstract contract AccountingEngineLike {\r\n    function disableContract() virtual external;\r\n}\r\nabstract contract CoinSavingsAccountLike {\r\n    function disableContract() virtual external;\r\n}\r\nabstract contract CollateralAuctionHouseLike {\r\n    function bidAmount(uint id) virtual public view returns (uint256);\r\n    function remainingAmountToSell(uint id) virtual public view returns (uint256);\r\n    function forgoneCollateralReceiver(uint id) virtual public view returns (address);\r\n    function amountToRaise(uint id) virtual public view returns (uint256);\r\n    function terminateAuctionPrematurely(uint auctionId) virtual external;\r\n}\r\nabstract contract OracleLike {\r\n    function read() virtual public view returns (uint256);\r\n}\r\nabstract contract OracleRelayerLike {\r\n    function redemptionPrice() virtual public returns (uint256);\r\n    function collateralTypes(bytes32) virtual public view returns (\r\n        OracleLike orcl,\r\n        uint256 safetyCRatio,\r\n        uint256 liquidationCRatio\r\n    );\r\n    function disableContract() virtual external;\r\n}\r\n\r\n/*\r\n    This is the Global Settlement module. It is an\r\n    involved, stateful process that takes place over nine steps.\r\n    First we freeze the system and lock the prices for each collateral type.\r\n    1. `shutdownSystem()`:\r\n        - freezes user entrypoints\r\n        - cancels collateral/surplus auctions\r\n        - starts cooldown period\r\n    2. `freezeCollateralType(collateralType)`:\r\n       - set the final price for each collateralType, reading off the price feed\r\n    We must process some system state before it is possible to calculate\r\n    the final coin / collateral price. In particular, we need to determine:\r\n      a. `collateralShortfall` (considers under-collateralised SAFEs)\r\n      b. `outstandingCoinSupply` (after including system surplus / deficit)\r\n    We determine (a) by processing all under-collateralised SAFEs with\r\n    `processSAFE`\r\n    3. `processSAFE(collateralType, safe)`:\r\n       - cancels SAFE debt\r\n       - any excess collateral remains\r\n       - backing collateral taken\r\n    We determine (b) by processing ongoing coin generating processes,\r\n    i.e. auctions. We need to ensure that auctions will not generate any\r\n    further coin income. In the two-way auction model this occurs when\r\n    all auctions are in the reverse (`decreaseSoldAmount`) phase. There are two ways\r\n    of ensuring this:\r\n    4.  i) `shutdownCooldown`: set the cooldown period to be at least as long as the\r\n           longest auction duration, which needs to be determined by the\r\n           shutdown administrator.\r\n           This takes a fairly predictable time to occur but with altered\r\n           auction dynamics due to the now varying price of the system coin.\r\n       ii) `fastTrackAuction`: cancel all ongoing auctions and seize the collateral.\r\n           This allows for faster processing at the expense of more\r\n           processing calls. This option allows coin holders to retrieve\r\n           their collateral faster.\r\n           `fastTrackAuction(collateralType, auctionId)`:\r\n            - cancel individual collateral auctions in the `increaseBidSize` (forward) phase\r\n            - retrieves collateral and returns coins to bidder\r\n            - `decreaseSoldAmount` (reverse) phase auctions can continue normally\r\n    Option (i), `shutdownCooldown`, is sufficient for processing the system\r\n    settlement but option (ii), `fastTrackAuction`, will speed it up. Both options\r\n    are available in this implementation, with `fastTrackAuction` being enabled on a\r\n    per-auction basis.\r\n    When a SAFE has been processed and has no debt remaining, the\r\n    remaining collateral can be removed.\r\n    5. `freeCollateral(collateralType)`:\r\n        - remove collateral from the caller's SAFE\r\n        - owner can call as needed\r\n    After the processing period has elapsed, we enable calculation of\r\n    the final price for each collateral type.\r\n    6. `setOutstandingCoinSupply()`:\r\n       - only callable after processing time period elapsed\r\n       - assumption that all under-collateralised SAFEs are processed\r\n       - fixes the total outstanding supply of coin\r\n       - may also require extra SAFE processing to cover system surplus\r\n    7. `calculateCashPrice(collateralType)`:\r\n        - calculate `collateralCashPrice`\r\n        - adjusts `collateralCashPrice` in the case of deficit / surplus\r\n    At this point we have computed the final price for each collateral\r\n    type and coin holders can now turn their coin into collateral. Each\r\n    unit coin can claim a fixed basket of collateral.\r\n    Coin holders must first `prepareCoinsForRedeeming` into a `coinBag`. Once prepared,\r\n    coins cannot be transferred out of the bag. More coin can be added to a bag later.\r\n    8. `prepareCoinsForRedeeming(coinAmount)`:\r\n        - put some coins into a bag in order to 'redeemCollateral'. The bigger the bag, the more collateral the user can claim.\r\n    9. `redeemCollateral(collateralType, collateralAmount)`:\r\n        - exchange some coin from your bag for tokens from a specific collateral type\r\n        - the amount of collateral available to redeem is limited by how big your bag is\r\n*/\r\n\r\ncontract GlobalSettlement {\r\n    // --- Auth ---\r\n    mapping (address => uint) public authorizedAccounts;\r\n    function addAuthorization(address account) external isAuthorized {\r\n        authorizedAccounts[account] = 1;\r\n        emit AddAuthorization(account);\r\n    }\r\n    function removeAuthorization(address account) external isAuthorized {\r\n        authorizedAccounts[account] = 0;\r\n        emit RemoveAuthorization(account);\r\n    }\r\n    modifier isAuthorized {\r\n        require(authorizedAccounts[msg.sender] == 1, \"GlobalSettlement/account-not-authorized\");\r\n        _;\r\n    }\r\n\r\n    // --- Data ---\r\n    SAFEEngineLike            public safeEngine;\r\n    LiquidationEngineLike    public liquidationEngine;\r\n    AccountingEngineLike     public accountingEngine;\r\n    OracleRelayerLike        public oracleRelayer;\r\n    CoinSavingsAccountLike   public coinSavingsAccount;\r\n    StabilityFeeTreasuryLike public stabilityFeeTreasury;\r\n\r\n    uint256  public contractEnabled;\r\n    uint256  public shutdownTime;\r\n    uint256  public shutdownCooldown;\r\n    uint256  public outstandingCoinSupply;                                      // [rad]\r\n\r\n    mapping (bytes32 => uint256) public finalCoinPerCollateralPrice;            // [ray]\r\n    mapping (bytes32 => uint256) public collateralShortfall;                    // [wad]\r\n    mapping (bytes32 => uint256) public collateralTotalDebt;                    // [wad]\r\n    mapping (bytes32 => uint256) public collateralCashPrice;                    // [ray]\r\n\r\n    mapping (address => uint256)                      public coinBag;           // [wad]\r\n    mapping (bytes32 => mapping (address => uint256)) public coinsUsedToRedeem; // [wad]\r\n\r\n    // --- Events ---\r\n    event AddAuthorization(address account);\r\n    event RemoveAuthorization(address account);\r\n    event ModifyParameters(bytes32 parameter, uint data);\r\n    event ModifyParameters(bytes32 parameter, address data);\r\n    event ShutdownSystem();\r\n    event FreezeCollateralType(bytes32 collateralType, uint finalCoinPerCollateralPrice);\r\n    event FastTrackAuction(bytes32 collateralType, uint256 auctionId, uint256 collateralTotalDebt);\r\n    event ProcessSAFE(bytes32 collateralType, address safe, uint256 collateralShortfall);\r\n    event FreeCollateral(bytes32 collateralType, address sender, int collateralAmount);\r\n    event SetOutstandingCoinSupply(uint256 outstandingCoinSupply);\r\n    event CalculateCashPrice(bytes32 collateralType, uint collateralCashPrice);\r\n    event PrepareCoinsForRedeeming(address sender, uint coinBag);\r\n    event RedeemCollateral(bytes32 collateralType, address sender, uint coinsAmount, uint collateralAmount);\r\n\r\n    // --- Init ---\r\n    constructor() public {\r\n        authorizedAccounts[msg.sender] = 1;\r\n        contractEnabled = 1;\r\n        emit AddAuthorization(msg.sender);\r\n    }\r\n\r\n    // --- Math ---\r\n    function addition(uint x, uint y) internal pure returns (uint z) {\r\n        z = x + y;\r\n        require(z >= x);\r\n    }\r\n    function subtract(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x);\r\n    }\r\n    function multiply(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n    function minimum(uint x, uint y) internal pure returns (uint z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    uint constant WAD = 10 ** 18;\r\n    uint constant RAY = 10 ** 27;\r\n    function rmultiply(uint x, uint y) internal pure returns (uint z) {\r\n        z = multiply(x, y) / RAY;\r\n    }\r\n    function rdivide(uint x, uint y) internal pure returns (uint z) {\r\n        z = multiply(x, RAY) / y;\r\n    }\r\n    function wdivide(uint x, uint y) internal pure returns (uint z) {\r\n        z = multiply(x, WAD) / y;\r\n    }\r\n\r\n    // --- Administration ---\r\n    function modifyParameters(bytes32 parameter, address data) external isAuthorized {\r\n        require(contractEnabled == 1, \"GlobalSettlement/contract-not-enabled\");\r\n        if (parameter == \"safeEngine\") safeEngine = SAFEEngineLike(data);\r\n        else if (parameter == \"liquidationEngine\") liquidationEngine = LiquidationEngineLike(data);\r\n        else if (parameter == \"accountingEngine\") accountingEngine = AccountingEngineLike(data);\r\n        else if (parameter == \"oracleRelayer\") oracleRelayer = OracleRelayerLike(data);\r\n        else if (parameter == \"coinSavingsAccount\") coinSavingsAccount = CoinSavingsAccountLike(data);\r\n        else if (parameter == \"stabilityFeeTreasury\") stabilityFeeTreasury = StabilityFeeTreasuryLike(data);\r\n        else revert(\"GlobalSettlement/modify-unrecognized-parameter\");\r\n        emit ModifyParameters(parameter, data);\r\n    }\r\n    function modifyParameters(bytes32 parameter, uint256 data) external isAuthorized {\r\n        require(contractEnabled == 1, \"GlobalSettlement/contract-not-enabled\");\r\n        if (parameter == \"shutdownCooldown\") shutdownCooldown = data;\r\n        else revert(\"GlobalSettlement/modify-unrecognized-parameter\");\r\n        emit ModifyParameters(parameter, data);\r\n    }\r\n\r\n    // --- Settlement ---\r\n    function shutdownSystem() external isAuthorized {\r\n        require(contractEnabled == 1, \"GlobalSettlement/contract-not-enabled\");\r\n        contractEnabled = 0;\r\n        shutdownTime = now;\r\n        safeEngine.disableContract();\r\n        liquidationEngine.disableContract();\r\n        // treasury must be disabled before AccountingEngine so that all surplus is gathered in one place\r\n        if (address(stabilityFeeTreasury) != address(0)) {\r\n          stabilityFeeTreasury.disableContract();\r\n        }\r\n        accountingEngine.disableContract();\r\n        oracleRelayer.disableContract();\r\n        if (address(coinSavingsAccount) != address(0)) {\r\n          coinSavingsAccount.disableContract();\r\n        }\r\n        emit ShutdownSystem();\r\n    }\r\n\r\n    function freezeCollateralType(bytes32 collateralType) external {\r\n        require(contractEnabled == 0, \"GlobalSettlement/contract-still-enabled\");\r\n        require(finalCoinPerCollateralPrice[collateralType] == 0, \"GlobalSettlement/final-collateral-price-already-defined\");\r\n        (collateralTotalDebt[collateralType],,,,,) = safeEngine.collateralTypes(collateralType);\r\n        (OracleLike orcl,,) = oracleRelayer.collateralTypes(collateralType);\r\n        // redemptionPrice is a ray, orcl returns a wad\r\n        finalCoinPerCollateralPrice[collateralType] = wdivide(oracleRelayer.redemptionPrice(), uint(orcl.read()));\r\n        emit FreezeCollateralType(collateralType, finalCoinPerCollateralPrice[collateralType]);\r\n    }\r\n    function fastTrackAuction(bytes32 collateralType, uint256 auctionId) external {\r\n        require(finalCoinPerCollateralPrice[collateralType] != 0, \"GlobalSettlement/final-collateral-price-not-defined\");\r\n\r\n        (address auctionHouse_,,)    = liquidationEngine.collateralTypes(collateralType);\r\n        CollateralAuctionHouseLike collateralAuctionHouse = CollateralAuctionHouseLike(auctionHouse_);\r\n        (, uint accumulatedRate,,,,) = safeEngine.collateralTypes(collateralType);\r\n\r\n        uint bidAmount                    = collateralAuctionHouse.bidAmount(auctionId);\r\n        uint collateralToSell             = collateralAuctionHouse.remainingAmountToSell(auctionId);\r\n        address forgoneCollateralReceiver = collateralAuctionHouse.forgoneCollateralReceiver(auctionId);\r\n        uint amountToRaise                = collateralAuctionHouse.amountToRaise(auctionId);\r\n\r\n        safeEngine.createUnbackedDebt(address(accountingEngine), address(accountingEngine), amountToRaise);\r\n        safeEngine.createUnbackedDebt(address(accountingEngine), address(this), bidAmount);\r\n        safeEngine.approveSAFEModification(address(collateralAuctionHouse));\r\n        collateralAuctionHouse.terminateAuctionPrematurely(auctionId);\r\n\r\n        uint debt_ = amountToRaise / accumulatedRate;\r\n        collateralTotalDebt[collateralType] = addition(collateralTotalDebt[collateralType], debt_);\r\n        require(int(collateralToSell) >= 0 && int(debt_) >= 0, \"GlobalSettlement/overflow\");\r\n        safeEngine.confiscateSAFECollateralAndDebt(collateralType, forgoneCollateralReceiver, address(this), address(accountingEngine), int(collateralToSell), int(debt_));\r\n        emit FastTrackAuction(collateralType, auctionId, collateralTotalDebt[collateralType]);\r\n    }\r\n    function processSAFE(bytes32 collateralType, address safe) external {\r\n        require(finalCoinPerCollateralPrice[collateralType] != 0, \"GlobalSettlement/final-collateral-price-not-defined\");\r\n        (, uint accumulatedRate,,,,) = safeEngine.collateralTypes(collateralType);\r\n        (uint safeCollateral, uint safeDebt) = safeEngine.safes(collateralType, safe);\r\n\r\n        uint amountOwed = rmultiply(rmultiply(safeDebt, accumulatedRate), finalCoinPerCollateralPrice[collateralType]);\r\n        uint minCollateral = minimum(safeCollateral, amountOwed);\r\n        collateralShortfall[collateralType] = addition(\r\n            collateralShortfall[collateralType],\r\n            subtract(amountOwed, minCollateral)\r\n        );\r\n\r\n        require(minCollateral <= 2**255 && safeDebt <= 2**255, \"GlobalSettlement/overflow\");\r\n        safeEngine.confiscateSAFECollateralAndDebt(\r\n            collateralType,\r\n            safe,\r\n            address(this),\r\n            address(accountingEngine),\r\n            -int(minCollateral),\r\n            -int(safeDebt)\r\n        );\r\n\r\n        emit ProcessSAFE(collateralType, safe, collateralShortfall[collateralType]);\r\n    }\r\n    function freeCollateral(bytes32 collateralType) external {\r\n        require(contractEnabled == 0, \"GlobalSettlement/contract-still-enabled\");\r\n        (uint safeCollateral, uint safeDebt) = safeEngine.safes(collateralType, msg.sender);\r\n        require(safeDebt == 0, \"GlobalSettlement/art-not-zero\");\r\n        require(safeCollateral <= 2**255, \"GlobalSettlement/overflow\");\r\n        safeEngine.confiscateSAFECollateralAndDebt(\r\n          collateralType,\r\n          msg.sender,\r\n          msg.sender,\r\n          address(accountingEngine),\r\n          -int(safeCollateral),\r\n          0\r\n        );\r\n        emit FreeCollateral(collateralType, msg.sender, -int(safeCollateral));\r\n    }\r\n    function setOutstandingCoinSupply() external {\r\n        require(contractEnabled == 0, \"GlobalSettlement/contract-still-enabled\");\r\n        require(outstandingCoinSupply == 0, \"GlobalSettlement/outstanding-coin-supply-not-zero\");\r\n        require(safeEngine.coinBalance(address(accountingEngine)) == 0, \"GlobalSettlement/surplus-not-zero\");\r\n        require(now >= addition(shutdownTime, shutdownCooldown), \"GlobalSettlement/shutdown-cooldown-not-finished\");\r\n        outstandingCoinSupply = safeEngine.globalDebt();\r\n        emit SetOutstandingCoinSupply(outstandingCoinSupply);\r\n    }\r\n    function calculateCashPrice(bytes32 collateralType) external {\r\n        require(outstandingCoinSupply != 0, \"GlobalSettlement/outstanding-coin-supply-zero\");\r\n        require(collateralCashPrice[collateralType] == 0, \"GlobalSettlement/collateral-cash-price-already-defined\");\r\n\r\n        (, uint accumulatedRate,,,,) = safeEngine.collateralTypes(collateralType);\r\n        uint256 redemptionAdjustedDebt = rmultiply(\r\n          rmultiply(collateralTotalDebt[collateralType], accumulatedRate), finalCoinPerCollateralPrice[collateralType]\r\n        );\r\n        collateralCashPrice[collateralType] = rdivide(\r\n          multiply(subtract(redemptionAdjustedDebt, collateralShortfall[collateralType]), RAY), outstandingCoinSupply\r\n        );\r\n        emit CalculateCashPrice(collateralType, collateralCashPrice[collateralType]);\r\n    }\r\n    function prepareCoinsForRedeeming(uint256 coinAmount) external {\r\n        require(outstandingCoinSupply != 0, \"GlobalSettlement/outstanding-coin-supply-zero\");\r\n        safeEngine.transferInternalCoins(msg.sender, address(accountingEngine), multiply(coinAmount, RAY));\r\n        coinBag[msg.sender] = addition(coinBag[msg.sender], coinAmount);\r\n        emit PrepareCoinsForRedeeming(msg.sender, coinBag[msg.sender]);\r\n    }\r\n    function redeemCollateral(bytes32 collateralType, uint coinsAmount) external {\r\n        require(collateralCashPrice[collateralType] != 0, \"GlobalSettlement/collateral-cash-price-not-defined\");\r\n        uint collateralAmount = rmultiply(coinsAmount, collateralCashPrice[collateralType]);\r\n        safeEngine.transferCollateral(\r\n          collateralType,\r\n          address(this),\r\n          msg.sender,\r\n          collateralAmount\r\n        );\r\n        coinsUsedToRedeem[collateralType][msg.sender] = addition(coinsUsedToRedeem[collateralType][msg.sender], coinsAmount);\r\n        require(coinsUsedToRedeem[collateralType][msg.sender] <= coinBag[msg.sender], \"GlobalSettlement/insufficient-bag-balance\");\r\n        emit RedeemCollateral(collateralType, msg.sender, coinsAmount, collateralAmount);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralCashPrice\",\"type\":\"uint256\"}],\"name\":\"CalculateCashPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralTotalDebt\",\"type\":\"uint256\"}],\"name\":\"FastTrackAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"collateralAmount\",\"type\":\"int256\"}],\"name\":\"FreeCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalCoinPerCollateralPrice\",\"type\":\"uint256\"}],\"name\":\"FreezeCollateralType\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"ModifyParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"}],\"name\":\"ModifyParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coinBag\",\"type\":\"uint256\"}],\"name\":\"PrepareCoinsForRedeeming\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"safe\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralShortfall\",\"type\":\"uint256\"}],\"name\":\"ProcessSAFE\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coinsAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"name\":\"RedeemCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemoveAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outstandingCoinSupply\",\"type\":\"uint256\"}],\"name\":\"SetOutstandingCoinSupply\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ShutdownSystem\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accountingEngine\",\"outputs\":[{\"internalType\":\"contract AccountingEngineLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedAccounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"}],\"name\":\"calculateCashPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"coinBag\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coinSavingsAccount\",\"outputs\":[{\"internalType\":\"contract CoinSavingsAccountLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"coinsUsedToRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"collateralCashPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"collateralShortfall\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"collateralTotalDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractEnabled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"fastTrackAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"finalCoinPerCollateralPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"}],\"name\":\"freeCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"}],\"name\":\"freezeCollateralType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationEngine\",\"outputs\":[{\"internalType\":\"contract LiquidationEngineLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleRelayer\",\"outputs\":[{\"internalType\":\"contract OracleRelayerLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outstandingCoinSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"coinAmount\",\"type\":\"uint256\"}],\"name\":\"prepareCoinsForRedeeming\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"safe\",\"type\":\"address\"}],\"name\":\"processSAFE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"coinsAmount\",\"type\":\"uint256\"}],\"name\":\"redeemCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeEngine\",\"outputs\":[{\"internalType\":\"contract SAFEEngineLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setOutstandingCoinSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shutdownCooldown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shutdownSystem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shutdownTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stabilityFeeTreasury\",\"outputs\":[{\"internalType\":\"contract StabilityFeeTreasuryLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"GlobalSettlement","CompilerVersion":"v0.6.7+commit.b8d736ae","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://4040a7ac67fb15b07454ff0cf6904d2bcb17140fca8065a5843b14815c84aa21"}]}