{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity >=0.4.22 <0.8.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\ninterface ERC20 {\r\n    function balanceOf(address _owner) external view returns(uint balance);\r\n    function allowance(address _owner, address _spender) external view returns(uint remaining);\r\n    function decimals() external view returns(uint digits);\r\n}\r\n\r\ninterface externalPlatformContract{\r\n    function getAPR(address _farmAddress, address _tokenAddress) external view returns(uint apy);\r\n    function getStakedPoolBalanceByUser(address _owner, address tokenAddress) external view returns(uint256);\r\n    function commission() external view returns(uint256);\r\n    function totalAmountStaked(address tokenAddress) external view returns(uint256);\r\n    function depositBalances(address userAddress, address tokenAddress) external view returns(uint256);\r\n\r\n}\r\n\r\ninterface IUniswapV2RouterLite {\r\n\r\n    function getAmountsOut(uint amountIn, address[] memory  path) external view returns (uint[] memory amounts);\r\n\r\n}\r\n\r\ninterface Reward{\r\n\r\n  function addTokenToWhitelist ( address newTokenAddress ) external returns ( bool );\r\n  function calculateRewards ( uint256 timestampStart, uint256 timestampEnd, uint256 principalAmount, uint256 apr ) external view returns ( uint256 );\r\n  function depositBalances ( address, address, uint256 ) external view returns ( uint256 );\r\n  function depositBalancesDelegated ( address, address, uint256 ) external view returns ( uint256 );\r\n  function lpTokensInRewardsReserve (  ) external view returns ( uint256 );\r\n  function owner (  ) external view returns ( address );\r\n  function removeTokenFromWhitelist ( address tokenAddress ) external returns ( bool );\r\n  function stake ( uint256 amount, address tokenAddress, address onBehalfOf ) external returns ( bool );\r\n  function stakeDelegated ( uint256 amount, address tokenAddress, address onBehalfOf ) external returns ( bool );\r\n  function stakingLPTokensAddress (  ) external view returns ( address );\r\n  function stakingTokenWhitelist ( address ) external view returns ( bool );\r\n  function stakingTokensAddress (  ) external view returns ( address );\r\n  function tokenAPRs ( address ) external view returns ( uint256 );\r\n  function tokenDeposits ( address, address ) external view returns ( uint256 );\r\n  function tokenDepositsDelegated ( address, address ) external view returns ( uint256 );\r\n  function tokensInRewardsReserve (  ) external view returns ( uint256 );\r\n  function unstakeAndClaim ( address onBehalfOf, address tokenAddress, address recipient ) external returns ( uint256 );\r\n  function unstakeAndClaimDelegated ( address onBehalfOf, address tokenAddress, address recipient ) external returns ( uint256 );\r\n  function updateAPR ( uint256 newAPR, address stakedToken ) external returns ( bool );\r\n  function updateLPStakingTokenAddress ( address newAddress ) external returns ( bool );\r\n  function updateStakingTokenAddress ( address newAddress ) external returns ( bool );\r\n\r\n\r\n}\r\n\r\ninterface TVLOracle{\r\n    function getTotalValueLockedInternalByToken(address tokenAddress, address tier2Address) external view returns (uint256);\r\n    function getTotalValueLockedAggregated(uint256 optionIndex) external view returns (uint256);\r\n}\r\n\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal view returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal view returns (uint256) {\r\n    assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n\r\n\r\n  function sub(uint256 a, uint256 b) internal view returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal view returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract Oracle{\r\n\r\n  using SafeMath\r\n    for uint256;\r\n\r\n\r\n  address payable public owner;\r\n  address burnaddress  = address(0x0);\r\n  mapping (string => address) farmDirectoryByName;\r\n  mapping (address => mapping(address =>uint256)) farmManuallyEnteredAPYs;\r\n  mapping (address => mapping (address  => address )) farmOracleObtainedAPYs;\r\n  string [] public farmTokenPlusFarmNames;\r\n  address [] public farmAddresses;\r\n  address [] public farmTokens;\r\n  address uniswapAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n  IUniswapV2RouterLite uniswap = IUniswapV2RouterLite(uniswapAddress);\r\n  address usdcCoinAddress = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\r\n  address rewardAddress;\r\n  Reward reward;\r\n  address tvlOracleAddress;\r\n  TVLOracle tvlOracle;\r\n  //core contract adress that users interact with\r\n  address public coreAddress;\r\n  mapping (string  => address) public platformDirectory;\r\n\r\n\r\n  modifier onlyOwner {\r\n         require(\r\n             msg.sender == owner,\r\n             \"Only owner can call this function.\"\r\n         );\r\n         _;\r\n }\r\n\r\n\r\n  constructor() public payable {\r\n        owner= msg.sender;\r\n  }\r\n\r\n\r\n    function getTotalValueLockedInternalByToken(address tokenAddress, address tier2Address) external view returns (uint256){\r\n        uint256 result = tvlOracle.getTotalValueLockedInternalByToken(tokenAddress, tier2Address);\r\n        return result;\r\n    }\r\n\r\n    function getTotalValueLockedAggregated(uint256 optionIndex) external view returns (uint256){\r\n      uint256 result = tvlOracle.getTotalValueLockedAggregated(optionIndex);\r\n      return result;\r\n    }\r\n\r\n    function getStakableTokens() view external  returns (address[] memory, string[] memory){\r\n      address[] memory stakableAddrs = farmAddresses;\r\n      string[] memory stakableNames = farmTokenPlusFarmNames;\r\n      return (stakableAddrs, stakableNames);\r\n    }\r\n\r\n    function getAPR(address farmAddress, address farmToken)public view returns(uint256){\r\n      uint obtainedAPY = farmManuallyEnteredAPYs[farmAddress][farmToken];\r\n\r\n      if(obtainedAPY ==0){\r\n        externalPlatformContract exContract = externalPlatformContract(farmOracleObtainedAPYs[farmAddress][farmToken]);\r\n        try exContract.getAPR(farmAddress, farmToken) returns (uint apy) {\r\n          return apy;\r\n        }\r\n        catch (bytes memory ) {\r\n          return (0);\r\n        }\r\n\r\n      }\r\n\r\n      else{\r\n        return obtainedAPY;\r\n      }\r\n    }\r\n\r\n    function getAmountStakedByUser(address tokenAddress, address userAddress, address tier2Address) external view returns(uint256){\r\n      externalPlatformContract exContract = externalPlatformContract(tier2Address);\r\n      return exContract.getStakedPoolBalanceByUser(userAddress, tokenAddress);\r\n    }\r\n\r\n    function getUserCurrentReward(address userAddress, address tokenAddress, address tier2FarmAddress) view external returns(uint256){\r\n        uint256 userStartTime = reward.depositBalancesDelegated(userAddress, tokenAddress,0);\r\n\r\n        uint256 principalAmount = reward.depositBalancesDelegated(userAddress, tokenAddress,1);\r\n        uint256 apr = reward.tokenAPRs(tokenAddress);\r\n        uint256 result = reward.calculateRewards( userStartTime, block.timestamp,  principalAmount, apr);\r\n        return result;\r\n    }\r\n\r\n    function getTokenPrice(address tokenAddress, uint256 amount) view external returns(uint256){\r\n      address [] memory addresses = new address[](2);\r\n      addresses[0] = tokenAddress;\r\n      addresses[1] = usdcCoinAddress;\r\n      uint256 [] memory amounts = getUniswapPrice(addresses, amount );\r\n      uint256 resultingTokens = amounts[1];\r\n      return resultingTokens;\r\n    }\r\n\r\n    function getUserWalletBalance(address userAddress, address tokenAddress) external view returns (uint256){\r\n      ERC20 token = ERC20(tokenAddress);\r\n      return token.balanceOf(userAddress);\r\n    }\r\n\r\n\r\n    function getAddress(string memory component) public view returns (address){\r\n          return platformDirectory[component];\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n//BELOW is other (admin and otherwise)\r\n\r\n    function updateTVLAddress(address theAddress) onlyOwner public returns(bool){\r\n    tvlOracleAddress = theAddress;\r\n    tvlOracle = TVLOracle(theAddress);\r\n    updateDirectory(\"TVLORACLE\", theAddress);\r\n    return true;\r\n  }\r\n\r\n  function updatePriceOracleAddress(address theAddress) onlyOwner public returns(bool){\r\n    uniswapAddress = theAddress;\r\n    uniswap = IUniswapV2RouterLite(theAddress);\r\n    updateDirectory(\"UNISWAP\", theAddress);\r\n    return true;\r\n  }\r\n\r\n  function updateUSD(address theAddress) onlyOwner public returns(bool){\r\n    usdcCoinAddress = theAddress;\r\n    updateDirectory(\"USD\", theAddress);\r\n    return true;\r\n  }\r\n\r\n  function updateRewardAddress(address theAddress) onlyOwner public returns(bool){\r\n    rewardAddress = theAddress;\r\n    reward = Reward(theAddress);\r\n    updateDirectory(\"REWARDS\", theAddress);\r\n    return true;\r\n  }\r\n\r\n  function updateCoreAddress(address theAddress) onlyOwner public returns(bool){\r\n    coreAddress = theAddress;\r\n    updateDirectory(\"CORE\", theAddress);\r\n    return true;\r\n  }\r\n\r\n  function updateDirectory(string memory name, address theAddress) onlyOwner public returns(bool){\r\n    platformDirectory[name] = theAddress;\r\n    return true;\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  function setPlatformContract(string memory name, address farmAddress, address farmToken, address platformAddress) public onlyOwner returns(bool){\r\n    farmTokenPlusFarmNames.push(name);\r\n    farmAddresses.push(farmAddress);\r\n    farmTokens.push(farmToken);\r\n\r\n    farmOracleObtainedAPYs[farmAddress][farmToken] = platformAddress;\r\n    farmDirectoryByName[name] = platformAddress;\r\n\r\n    return true;\r\n\r\n  }\r\n\r\n\r\n  function calculateCommission(uint256 amount, uint256 commission) view public returns(uint256){\r\n    uint256 commissionForDAO = (amount.mul(1000).mul(commission)).div(10000000);\r\n    return commissionForDAO;\r\n  }\r\n\r\n\r\n  function getCommissionByContract(address platformContract) public view returns (uint256){\r\n    externalPlatformContract exContract = externalPlatformContract(platformContract);\r\n    return exContract.commission();\r\n\r\n  }\r\n\r\n\r\n  function getTotalStakedByContract(address platformContract, address tokenAddress) public view returns (uint256){\r\n    externalPlatformContract exContract = externalPlatformContract(platformContract);\r\n    return exContract.totalAmountStaked(tokenAddress);\r\n\r\n  }\r\n\r\n  function getAmountCurrentlyDepositedByContract(address platformContract, address tokenAddress, address userAddress) public view returns (uint256){\r\n\r\n    externalPlatformContract exContract = externalPlatformContract(platformContract);\r\n    return exContract.depositBalances(userAddress, tokenAddress);\r\n\r\n  }\r\n\r\n  function replaceAllStakableDirectory (string [] memory theNames, address[] memory theFarmAddresses, address[] memory theFarmTokens) onlyOwner public returns (bool){\r\n    farmTokenPlusFarmNames = theNames;\r\n    farmAddresses = theFarmAddresses;\r\n    farmTokens = theFarmTokens;\r\n    return true;\r\n\r\n  }\r\n\r\n  function getAmountCurrentlyFarmStakedByContract(address platformContract, address tokenAddress, address userAddress) public view returns (uint256){\r\n\r\n    externalPlatformContract exContract = externalPlatformContract(platformContract);\r\n    return exContract.getStakedPoolBalanceByUser(userAddress, tokenAddress);\r\n  }\r\n\r\n  function getUserTokenBalance(address userAddress, address tokenAddress) public view returns (uint256){\r\n    ERC20 token = ERC20(tokenAddress);\r\n    return token.balanceOf(userAddress);\r\n\r\n  }\r\n  function getUniswapPrice(address  [] memory theAddresses, uint amount) internal view returns (uint256[] memory amounts1){\r\n        uint256 [] memory amounts = uniswap.getAmountsOut(amount,theAddresses );\r\n\r\n        return amounts;\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commission\",\"type\":\"uint256\"}],\"name\":\"calculateCommission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coreAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"farmAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"farmTokenPlusFarmNames\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"farmTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"farmAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"farmToken\",\"type\":\"address\"}],\"name\":\"getAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"component\",\"type\":\"string\"}],\"name\":\"getAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"platformContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getAmountCurrentlyDepositedByContract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"platformContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getAmountCurrentlyFarmStakedByContract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tier2Address\",\"type\":\"address\"}],\"name\":\"getAmountStakedByUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"platformContract\",\"type\":\"address\"}],\"name\":\"getCommissionByContract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakableTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"platformContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getTotalStakedByContract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"optionIndex\",\"type\":\"uint256\"}],\"name\":\"getTotalValueLockedAggregated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tier2Address\",\"type\":\"address\"}],\"name\":\"getTotalValueLockedInternalByToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tier2FarmAddress\",\"type\":\"address\"}],\"name\":\"getUserCurrentReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getUserTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getUserWalletBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"platformDirectory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"theNames\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"theFarmAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"theFarmTokens\",\"type\":\"address[]\"}],\"name\":\"replaceAllStakableDirectory\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"farmAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"farmToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"platformAddress\",\"type\":\"address\"}],\"name\":\"setPlatformContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"theAddress\",\"type\":\"address\"}],\"name\":\"updateCoreAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"theAddress\",\"type\":\"address\"}],\"name\":\"updateDirectory\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"theAddress\",\"type\":\"address\"}],\"name\":\"updatePriceOracleAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"theAddress\",\"type\":\"address\"}],\"name\":\"updateRewardAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"theAddress\",\"type\":\"address\"}],\"name\":\"updateTVLAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"theAddress\",\"type\":\"address\"}],\"name\":\"updateUSD\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Oracle","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://efbf6c46ee2a16e22068c354f43efb864e459aa91a55278ed8fd591e9529a8fc"}]}