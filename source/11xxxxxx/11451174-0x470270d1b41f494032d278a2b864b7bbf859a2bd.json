{"status":"1","message":"OK","result":[{"SourceCode":"// File: node_modules\\@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: node_modules\\@openzeppelin\\contracts\\math\\SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts\\Ownable.sol\r\n\r\npragma solidity ^0.5.10;\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts\\DreamStakePool.sol\r\n\r\npragma solidity ^0.5.10;\r\n\r\n\r\n\r\n\r\ninterface ITokenRewardPool {\r\n \r\n    function stake (address account, uint256 amount) external returns (bool);\r\n\r\n\r\n    function Unstake (address account) external returns (bool);\r\n\r\n\r\n    function claimReward (address account) external returns (bool);\r\n\r\n\r\n    function emergencyTokenExit (address account) external returns (bool);\r\n\r\n\r\n    function totalStakedAmount() external view returns (uint256);\r\n\r\n\r\n    function stakedAmount(address account) external view returns (uint256);\r\n\r\n\r\n    function rewardAmount(address account) external view returns (uint256);\r\n\r\n\r\n    function beginRewardAmount() external view returns (uint256);\r\n\r\n\r\n    function remainRewardAmount() external view returns (uint256);\r\n\t\r\n\r\n    function ratePool() external view returns (uint256);\r\n\r\n\r\n    function IsRunningPool() external view returns (bool);\r\n\r\n}\r\n\r\ncontract TokenRewardPool is ITokenRewardPool{\r\n    using SafeMath for uint256;\r\n    bool private IS_RUNNING_POOL;\r\n\r\n    uint256 private TOTAL_STAKED_AMOUNT; \r\n    uint256 private BEGIN_REWARD; \r\n    uint256 private REMAIN_REWARD; \r\n    uint256 private REWARD_RATE; \r\n\r\n    IERC20 private rewardToken; \r\n    IERC20 private stakeToken; \r\n\r\n    address private TEAM_POOL; \r\n\r\n    mapping (address => uint256) private USER_STAKED_AMOUNT; \r\n    mapping (address => uint256) private USER_REWARD; \r\n    mapping (address => bool) private IS_REGISTED;\r\n    address[] private CONTRACT_LIST;\r\n    mapping (address => uint256) private UPDATED_TIMESTAMP;\r\n\r\n    event Stake(address indexed user, uint256 amount);\r\n    event Withdraw(address indexed user, uint256 amount);\r\n    event EmergencyWithdraw(address indexed user, uint256 amount);\r\n\r\n    mapping (address => uint256) private USER_STAKE_TIME; \r\n\r\n    constructor (\r\n        uint256 _rewardRate, \r\n        address _rewardToken,\r\n        address _stakeToken, \r\n        address _teamPool\r\n    ) internal {\r\n        rewardToken = IERC20(_rewardToken);\r\n        stakeToken = IERC20(_stakeToken);\r\n        REWARD_RATE = _rewardRate;\r\n        TEAM_POOL = _teamPool;\r\n        IS_RUNNING_POOL = false;\r\n    }\r\n    \r\n    function stake (address account, uint256 amount) external returns (bool){\r\n\r\n        require(IS_RUNNING_POOL == true, \"The pool has ended.\");\r\n        require(amount > 0, \"The pool has ended.\");\r\n\r\n        _registAddress(account); \r\n        // _updateReward(account); \r\n        _updateAllReward();\r\n\r\n        if(UPDATED_TIMESTAMP[account] <= 0){\r\n            UPDATED_TIMESTAMP[account] = block.timestamp;\r\n        }\r\n        \r\n        USER_STAKE_TIME[account] = block.timestamp;\r\n        \r\n        stakeToken.transferFrom(account, address(this), amount); \r\n\r\n        USER_STAKED_AMOUNT[account] = USER_STAKED_AMOUNT[account].add(amount);\r\n\r\n        TOTAL_STAKED_AMOUNT = TOTAL_STAKED_AMOUNT.add(amount);\r\n        \r\n        emit Stake(account, amount);\r\n    }\r\n\r\n    function Unstake (address account) external returns (bool){\r\n\r\n        // _updateReward(account);\r\n        _updateAllReward();\r\n\r\n        if(USER_REWARD[account] > 0){\r\n            uint256 rewards = USER_REWARD[account];\r\n            USER_REWARD[account] = 0;\r\n            rewardToken.transfer(account, rewards);\r\n        }\r\n        USER_STAKE_TIME[account] = 0;\r\n      \r\n        _stake_token_withdraw(account, USER_STAKED_AMOUNT[account]);\r\n    }\r\n\r\n    function claimReward (address account) external returns (bool){\r\n        \r\n        // _updateReward(account);\r\n        _updateAllReward();\r\n\r\n        require(USER_REWARD[account] > 0, \"Nothing to claim\");\r\n\r\n        uint256 withrawAmount = USER_REWARD[account];\r\n        USER_REWARD[account] = 0; \r\n\r\n        USER_STAKE_TIME[account] = block.timestamp; \r\n\r\n        rewardToken.transfer(account, withrawAmount);\r\n    }\r\n\r\n    function totalStakedAmount() external view returns (uint256){\r\n        return TOTAL_STAKED_AMOUNT;\r\n    }\r\n\r\n    function stakedAmount(address account) external view returns (uint256){\r\n        return USER_STAKED_AMOUNT[account];\r\n    }\r\n\r\n    function rewardAmount(address account) external view returns (uint256){\r\n        return USER_REWARD[account];\r\n    }\r\n\r\n    function beginRewardAmount() external view returns (uint256){\r\n         return BEGIN_REWARD;\r\n    }\r\n\r\n    function remainRewardAmount() external view returns (uint256){\r\n         return REMAIN_REWARD;\r\n    }\r\n\t\r\n    function ratePool() external view returns (uint256){\r\n        return REWARD_RATE;\r\n    }\r\n\r\n    function IsRunningPool() external view returns (bool){\r\n        return IS_RUNNING_POOL;\r\n    }\r\n\r\n    function emergencyTokenExit (address account) external returns (bool){\r\n        uint256 amount = USER_STAKED_AMOUNT[account];\r\n        _stake_token_withdraw(account, amount);\r\n\r\n        USER_STAKED_AMOUNT[account] = 0;\r\n        USER_REWARD[account] = 0;\r\n\r\n        emit EmergencyWithdraw(account, amount);\r\n    }\r\n\r\n   function _initPool() internal {\r\n\r\n        BEGIN_REWARD = rewardToken.balanceOf(address(this));\r\n\r\n        if(BEGIN_REWARD <= 0){\r\n            return;\r\n        }else{\r\n            REMAIN_REWARD = BEGIN_REWARD;\r\n\r\n            _setIsRunningPool(true);\r\n        }\r\n    }\r\n\r\n    function _setIsRunningPool(bool _isRunningPool) internal {\r\n        IS_RUNNING_POOL = _isRunningPool;\r\n    }\r\n\r\n    function _stake_token_withdraw (address host, uint256 amount) internal {\r\n\r\n        require(USER_STAKED_AMOUNT[host] >= 0);\r\n\r\n        USER_STAKED_AMOUNT[host] = USER_STAKED_AMOUNT[host].sub(amount);\r\n\r\n        TOTAL_STAKED_AMOUNT = TOTAL_STAKED_AMOUNT.sub(amount);\r\n\r\n        stakeToken.transfer(host, amount);\r\n    }\r\n\r\n    function _updateReward (address host) internal {\r\n\r\n        uint256 elapsed = _elapsedBlock(UPDATED_TIMESTAMP[host]);\r\n        \r\n        if(elapsed <= 0){\r\n            return;\r\n        }\r\n        \r\n        uint256 stakeAmount = USER_STAKED_AMOUNT[host];\r\n        if(stakeAmount <= 0){\r\n            return;\r\n        }\r\n        UPDATED_TIMESTAMP[host] = block.timestamp;\r\n        uint256 baseEarned = _calculateEarn(elapsed, stakeAmount);\r\n\r\n        if(REMAIN_REWARD >= baseEarned){\r\n\r\n            USER_REWARD[host] = baseEarned.mul(95).div(100).add(USER_REWARD[host]);\r\n            USER_REWARD[TEAM_POOL] = baseEarned.mul(5).div(100).add(USER_REWARD[TEAM_POOL]);\r\n            REMAIN_REWARD = REMAIN_REWARD.sub(baseEarned);\r\n        }else{\r\n            if(REMAIN_REWARD > 0){\r\n                uint256 remainAll = REMAIN_REWARD;\r\n                REMAIN_REWARD = 0;\r\n                USER_REWARD[host] = remainAll.mul(95).div(100).add(USER_REWARD[host]);\r\n                USER_REWARD[TEAM_POOL] = remainAll.mul(5).div(100).add(USER_REWARD[TEAM_POOL]);\r\n     \r\n            }\r\n            _setIsRunningPool(false);\r\n        }\r\n    }\r\n\r\n    function _elapsedBlock (uint256 updated) internal view returns (uint256) {\r\n        uint256 open = updated; \r\n        uint256 close = block.timestamp; \r\n        return open >= close ? 0 : close - open;   \r\n    }\r\n\r\n    function _registAddress (address host) internal {\r\n        if(IS_REGISTED[host]){return;}\r\n\r\n        IS_REGISTED[host] = true;\r\n        CONTRACT_LIST.push(host);\r\n    }\r\n\r\n    function _endPool(address owner) internal {\r\n        _updateAllReward();\r\n\r\n        //First User Stake & Reward withdraw\r\n        for(uint256 i=0; i<CONTRACT_LIST.length; i++){\r\n            address account = CONTRACT_LIST[i];\r\n            if(USER_REWARD[account] > 0){\r\n                uint256 rewards = USER_REWARD[account];\r\n                USER_REWARD[account] = 0;\r\n                rewardToken.transfer(account, rewards);\r\n            }\r\n            _stake_token_withdraw(account, USER_STAKED_AMOUNT[account]);\r\n        }   \r\n\r\n        //Second Team Reward withdraw\r\n        if(TEAM_POOL != address(0)){\r\n            if(USER_REWARD[TEAM_POOL] > 0){\r\n                uint256 rewards = USER_REWARD[TEAM_POOL];\r\n                USER_REWARD[TEAM_POOL] = 0;\r\n                rewardToken.transfer(TEAM_POOL, rewards);\r\n            }\r\n        }\r\n\r\n        //Third Owner saved reward withdraw\r\n        uint256 endRewardAmount = rewardToken.balanceOf(address(this));\r\n        if(endRewardAmount > 0){\r\n            rewardToken.transfer(owner, endRewardAmount);\r\n        }\r\n\r\n        //Third End\r\n        _setIsRunningPool(false);\r\n    }\r\n\r\n    function _updatePool() internal {\r\n        _updateAllReward();\r\n    }\r\n\r\n\r\n    function rewordForSecond(address account) public view returns (uint256){\r\n        uint256 stakeAmount = USER_STAKED_AMOUNT[account];\r\n        if(stakeAmount <= 0){\r\n            return 0;\r\n        }\r\n\r\n        uint256 oneYearReward = stakeAmount.mul(REWARD_RATE).div(100);\r\n        uint256 oneDayReward = oneYearReward.div(365);\r\n        uint256 oneTimesReward = oneDayReward.div(24);\r\n        uint256 oneMinReward = oneTimesReward.div(60);\r\n        uint256 oneSeconReward = oneMinReward.div(60);\r\n        return oneSeconReward;        \r\n    }\r\n\r\n    function userReward(address account) public view returns (uint256){\r\n       return USER_REWARD[account];\r\n    }\r\n    \r\n    function teamPoolAddress() public view returns (address){\r\n       return TEAM_POOL;\r\n    }\r\n\r\n    function _updateAllReward () internal {\r\n        for(uint256 i=0; i<CONTRACT_LIST.length; i++){\r\n            if(IS_RUNNING_POOL){\r\n                _updateReward(CONTRACT_LIST[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _calculateEarn (uint256 elapsed, uint256 staked) internal view returns (uint256) {\r\n        if(staked == 0){return 0;}\r\n        \r\n        if(elapsed <= 0){return 0;}\r\n\r\n        uint256 oneYearReward = staked.mul(REWARD_RATE).div(100);\r\n        uint256 oneDayReward = oneYearReward.div(365);\r\n        uint256 oneTimesReward = oneDayReward.div(24);\r\n        uint256 oneMinReward = oneTimesReward.div(60);\r\n        uint256 oneSeconReward = oneMinReward.div(60);\r\n        uint256 secondReward = oneSeconReward.mul(elapsed); // ?꾩옱 珥덈떦?댁옄\r\n     \r\n        return secondReward;\r\n    }\r\n\r\n    function _changeRewardRate (uint256 _rate) internal {\r\n        _updateAllReward();\r\n        REWARD_RATE = _rate;\r\n    }\r\n\r\n    function contractListCount () external view returns (uint256) {\r\n        return CONTRACT_LIST.length;\r\n    }\r\n    \r\n    function userStakeTime (address account) external view returns (uint256) {\r\n        return USER_STAKE_TIME[account];\r\n    }\r\n    \r\n}\r\n\r\ncontract FRIStakePool is Ownable, TokenRewardPool{\r\n    \r\n    string private name = \"PoolName\";\r\n       \r\n    constructor (   \r\n        string memory _name,//Pool Name\r\n        uint256 _rate, \r\n        address _rewardToken, \r\n        address _stakeToken, \r\n        address _teamPool) TokenRewardPool(_rate, _rewardToken, _stakeToken, _teamPool) onlyOwner public{\r\n        name = _name;\r\n    }\r\n\r\n    function initTotalReward () public onlyOwner {\r\n        _initPool();\r\n    }\r\n\r\n    function endPool() public onlyOwner {\r\n          _endPool(owner());\r\n    }\r\n\r\n    function changeRewardRate (uint256 rate) public onlyOwner {\r\n       _changeRewardRate(rate);\r\n    }\r\n\r\n    function updatePool () public onlyOwner {\r\n       _updatePool();\r\n    }  \r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"userReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainRewardAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractListCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamPoolAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalStakedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"IsRunningPool\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"rewardAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"changeRewardRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"emergencyTokenExit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initTotalReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"claimReward\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ratePool\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beginRewardAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updatePool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unstake\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"rewordForSecond\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"stakedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"userStakeTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_rewardToken\",\"type\":\"address\"},{\"name\":\"_stakeToken\",\"type\":\"address\"},{\"name\":\"_teamPool\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"FRIStakePool","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000002da00000000000000000000000028cccacd3d981e562ab71f835170b6c1d73c01d900000000000000000000000028cccacd3d981e562ab71f835170b6c1d73c01d9000000000000000000000000c0819a462d891e6a414a5963166b65e40695f444000000000000000000000000000000000000000000000000000000000000000c465249546f6b656e506f6f6c0000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://06d3ed7dd62642f689de612d32c0c1e229bc5be099720c99d5732833bbe275e8"}]}