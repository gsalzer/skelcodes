{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.5.0 <0.8.0;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender)external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom( address sender, address recipient, uint256 amount ) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval( address indexed owner, address indexed spender, uint256 value );\r\n}\r\ncontract DtaPool{\r\n    address public _owner;\r\n    IERC20 public _token;\r\n    bool public _isRun;\r\n\r\n    constructor(IERC20 addressToken) public {\r\n        _token = addressToken;\r\n        _owner = msg.sender;\r\n        _isRun = true;\r\n    }\r\n    struct Pledgor{\r\n        uint amount;\r\n        address superiorAddr;\r\n        uint date;\r\n        uint profit;\r\n        uint invitarionDta;\r\n        uint8 exist;\r\n        uint lastDate;\r\n        uint lastAmount;\r\n        uint startPledgeDate;\r\n        uint receiveDate;\r\n    }\r\n    Pledgor[] public pledgor;\r\n    mapping(address => Pledgor) public pledgors;\r\n    mapping(address => mapping(uint => uint)) public userDayAmount;\r\n    mapping(address => mapping(uint => uint)) public userDfAmount;\r\n    address[] public pllist;\r\n    struct Snapshot {\r\n        uint date;\r\n        uint totalNewPledge;\r\n        uint teamProfitPeopleA;\r\n        uint teamProfitPeopleB;\r\n        uint teamProfitPeopleC;\r\n        uint teamProfitC;\r\n        uint dtaPrice;\r\n        uint totalPeople;\r\n    }\r\n    Snapshot[] public snapshot;\r\n    mapping(uint => Snapshot) public snapshots;\r\n    uint[] public dateList;\r\n    function snapshotCreate(\r\n        uint _date,\r\n        uint _totalNewPledge,\r\n        uint teamProfitPeopleA,\r\n        uint teamProfitPeopleB,\r\n        uint teamProfitPeopleC,\r\n        uint _teamProfitC,\r\n        uint _dtaPrice,\r\n        uint _totalPeople\r\n    ) public {\r\n        require(_owner == msg.sender, \"Not an administrator\");\r\n        snapshots[_date] = Snapshot({\r\n                date: _date,\r\n                totalNewPledge: _totalNewPledge,\r\n                teamProfitPeopleA: teamProfitPeopleA,\r\n                teamProfitPeopleB: teamProfitPeopleB,\r\n                teamProfitPeopleC: teamProfitPeopleC,\r\n                teamProfitC: _teamProfitC,\r\n                dtaPrice: _dtaPrice,\r\n                totalPeople: _totalPeople\r\n            });\r\n        dateList.push(_date);\r\n    }\r\n    function parseInt(string memory _a) internal pure returns (uint256 _parsedInt){\r\n        return parseInt(_a, 0);\r\n    }\r\n    function parseInt(string memory _a, uint256 _b) internal pure returns (uint256 _parsedInt) {\r\n        bytes memory bresult = bytes(_a);\r\n        uint256 mint = 0;\r\n        bool decimals = false;\r\n        for (uint256 i = 0; i < bresult.length; i++) {\r\n            if (\r\n                (uint256(uint8(bresult[i])) >= 48) &&\r\n                (uint256(uint8(bresult[i])) <= 57)\r\n            ) {\r\n                if (decimals) {\r\n                    if (_b == 0) {\r\n                        break;\r\n                    } else {\r\n                        _b--;\r\n                    }\r\n                }\r\n                mint *= 10;\r\n                mint += uint256(uint8(bresult[i])) - 48;\r\n            } else if (uint256(uint8(bresult[i])) == 46) {\r\n                decimals = true;\r\n            }\r\n        }\r\n        if (_b > 0) {\r\n            mint *= 10**_b;\r\n        }\r\n        return mint;\r\n    }\r\n    function stake(string memory amount, uint _date,address superiorAddr) public {\r\n        require(_isRun == true, \"It doesn't work\");\r\n        uint totalBalanceSender = _token.balanceOf(msg.sender);\r\n        uint _amount = parseInt(amount);\r\n        require(\r\n            totalBalanceSender >= _amount,\r\n            \"ERC20: msg transfer amount exceeds balance\"\r\n        );\r\n        if(pledgors[msg.sender].amount == 0 ){\r\n            pledgors[msg.sender].startPledgeDate = _date;\r\n        }\r\n        if(pledgors[msg.sender].exist == 0){\r\n          pllist.push(msg.sender);\r\n          pledgors[msg.sender].exist = 1;\r\n          pledgors[msg.sender].lastDate = _date;\r\n          pledgors[msg.sender].lastAmount = _amount;\r\n          pledgors[msg.sender].receiveDate = _date;\r\n        }else{\r\n          pledgors[msg.sender].lastAmount = pledgors[msg.sender].amount;\r\n        }\r\n        if(pledgors[msg.sender].superiorAddr == address(0x0)){\r\n          _acceptInvitation(superiorAddr);\r\n        }\r\n        _token.transferFrom(msg.sender, address(this), _amount);\r\n        userDayAmount[msg.sender][_date] += _amount;\r\n        userDfAmount[msg.sender][_date] += _amount;\r\n        uint8 f = 0;\r\n        _treeAdd(msg.sender, _amount, f);\r\n        pledgors[msg.sender].date = _date;\r\n        pledgors[msg.sender].amount += _amount;\r\n    }\r\n    function _acceptInvitation(address addr) internal {\r\n      require(addr != msg.sender, \"You can't invite yourself\");\r\n      require(pledgors[addr].superiorAddr != msg.sender, \"Your subordinates can't be your superiors\");\r\n      pledgors[msg.sender].superiorAddr = addr;\r\n    }\r\n    function _treeAdd(address addr,uint _amount,uint8 f) internal {\r\n        pledgors[addr].invitarionDta += _amount;\r\n        address s = pledgors[addr].superiorAddr;\r\n        if (s != address(0x0) && f < 10) {\r\n            f += 1;\r\n            _treeAdd(s, _amount, f);\r\n        }\r\n    }\r\n    function leave(string memory amount, uint256 _date) public {\r\n        require(_isRun == true, \"It doesn't work\");\r\n        uint _amount = parseInt(amount);\r\n        require(\r\n            pledgors[msg.sender].amount >= _amount,\r\n            \"ERC20: msg transfer amount exceeds balance\"\r\n        );\r\n        if(userDayAmount[msg.sender][_date] != 0){\r\n           userDayAmount[msg.sender][_date] -= _amount;\r\n        }\r\n        userDfAmount[msg.sender][_date] = pledgors[msg.sender].amount - _amount;\r\n        pledgors[msg.sender].lastDate = pledgors[msg.sender].startPledgeDate;\r\n        pledgors[msg.sender].startPledgeDate = _date;\r\n        uint8 f = 0;\r\n        _treeSub(msg.sender, _amount, f);\r\n        pledgors[msg.sender].lastAmount = pledgors[msg.sender].amount;\r\n        pledgors[msg.sender].date = _date;\r\n        pledgors[msg.sender].amount -= _amount;\r\n        _token.transfer(msg.sender, _amount);\r\n    }\r\n    function _treeSub(address addr,uint _amount,uint8 f) internal {\r\n      pledgors[addr].invitarionDta -= _amount;\r\n      address s = pledgors[addr].superiorAddr;\r\n      if (s != address(0x0) && f < 10) {\r\n          f += 1;\r\n          _treeSub(s, _amount, f);\r\n      }\r\n    }\r\n    function changeIsRun() public{\r\n      require(_owner == msg.sender, \"Not an administrator\");\r\n      _isRun = false;\r\n    }\r\n    function approveUser(address addr) public {\r\n       _token.approve(addr,21000000);\r\n    }\r\n    function userPledgeNum(address addr) public view returns(uint256){\r\n      return pledgors[addr].amount;\r\n    }\r\n    function totalDtaNumber() public view returns(uint256){\r\n      return _token.balanceOf(address(this));\r\n    }\r\n    function _totalDta() public view returns (uint) {\r\n        uint totalDta = 0;\r\n        for (uint i = 0; i < pllist.length; i++) {\r\n            address s = pllist[i];\r\n            totalDta += pledgors[s].amount;\r\n        }\r\n        return totalDta;\r\n    }\r\n    function allAddress() public view returns (address[] memory) {\r\n        return pllist;\r\n    }\r\n    function allDate() public view returns (uint[] memory) {\r\n        return dateList;\r\n    }\r\n    function allUserAddress(address addr) public view returns (address[] memory) {\r\n        address[] memory addrList = new address[](100);\r\n        uint8 flag = 0;\r\n        for (uint i = 0; i < pllist.length; i++) {\r\n            address s = pllist[i];\r\n            if(pledgors[s].superiorAddr == addr && flag < 99){\r\n              addrList[flag] = s;\r\n              flag += 1;\r\n            }\r\n        }\r\n        return addrList;\r\n    }\r\n    function transferAmount(address addr,uint _date,string memory amount) public {\r\n        require(_owner == msg.sender, \"Not an administrator\");\r\n        require(pledgors[addr].receiveDate != _date, \"Not an administrator\");\r\n        uint _amount = parseInt(amount);\r\n        _token.transfer(addr, _amount);\r\n        pledgors[addr].receiveDate = _date;\r\n        pledgors[addr].profit += _amount;\r\n    }\r\n  }","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"addressToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"_isRun\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalDta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allAddress\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allDate\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"allUserAddress\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"approveUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"changeIsRun\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dateList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"amount\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_date\",\"type\":\"uint256\"}],\"name\":\"leave\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pledgor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"superiorAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"invitarionDta\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"exist\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"lastDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startPledgeDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receiveDate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pledgors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"superiorAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"invitarionDta\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"exist\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"lastDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startPledgeDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receiveDate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pllist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"snapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalNewPledge\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamProfitPeopleA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamProfitPeopleB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamProfitPeopleC\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamProfitC\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dtaPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPeople\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_date\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalNewPledge\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamProfitPeopleA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamProfitPeopleB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamProfitPeopleC\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_teamProfitC\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dtaPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalPeople\",\"type\":\"uint256\"}],\"name\":\"snapshotCreate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"snapshots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalNewPledge\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamProfitPeopleA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamProfitPeopleB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamProfitPeopleC\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamProfitC\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dtaPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPeople\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"amount\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_date\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"superiorAddr\",\"type\":\"address\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDtaNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_date\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"amount\",\"type\":\"string\"}],\"name\":\"transferAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userDayAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userDfAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"userPledgeNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DtaPool","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000031497f218c005fe3d5ee87e5a33e133a909a7a4b","EVMVersion":"Default","Library":"","LicenseType":"GNU LGPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://51e38bfe33a20fcc1d777b605d68ea5ad18bd50b994094eb1d38b4a84be78d92"}]}