{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\npragma experimental ABIEncoderV2;\r\n\r\n// These are the core Yearn libraries\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nstruct StrategyParams {\r\n    uint256 performanceFee;\r\n    uint256 activation;\r\n    uint256 debtLimit;\r\n    uint256 rateLimit;\r\n    uint256 lastReport;\r\n    uint256 totalDebt;\r\n    uint256 totalGain;\r\n    uint256 totalLoss;\r\n}\r\n\r\ninterface VaultAPI is IERC20 {\r\n    function apiVersion() external view returns (string memory);\r\n\r\n    function token() external view returns (address);\r\n\r\n    function strategies(address _strategy) external view returns (StrategyParams memory);\r\n\r\n    /*\r\n     * View how much the Vault would increase this strategy's borrow limit,\r\n     * based on it's present performance (since its last report). Can be used to\r\n     * determine expectedReturn in your strategy.\r\n     */\r\n    function creditAvailable() external view returns (uint256);\r\n\r\n    /*\r\n     * View how much the Vault would like to pull back from the Strategy,\r\n     * based on it's present performance (since its last report). Can be used to\r\n     * determine expectedReturn in your strategy.\r\n     */\r\n    function debtOutstanding() external view returns (uint256);\r\n\r\n    /*\r\n     * View how much the Vault expect this strategy to return at the current block,\r\n     * based on it's present performance (since its last report). Can be used to\r\n     * determine expectedReturn in your strategy.\r\n     */\r\n    function expectedReturn() external view returns (uint256);\r\n\r\n    /*\r\n     * This is the main contact point where the strategy interacts with the Vault.\r\n     * It is critical that this call is handled as intended by the Strategy.\r\n     * Therefore, this function will be called by BaseStrategy to make sure the\r\n     * integration is correct.\r\n     */\r\n    function report(uint256 _gain, uint256 _loss) external returns (uint256);\r\n\r\n    /*\r\n     * This function is used in the scenario where there is a newer strategy that\r\n     * would hold the same positions as this one, and those positions are easily\r\n     * transferrable to the newer strategy. These positions must be able to be\r\n     * transferred at the moment this call is made, if any prep is required to\r\n     * execute a full transfer in one transaction, that must be accounted for\r\n     * separately from this call.\r\n     */\r\n    function migrateStrategy(address _newStrategy) external;\r\n\r\n    /*\r\n     * This function should only be used in the scenario where the strategy is\r\n     * being retired but no migration of the positions are possible, or in the\r\n     * extreme scenario that the Strategy needs to be put into \"Emergency Exit\"\r\n     * mode in order for it to exit as quickly as possible. The latter scenario\r\n     * could be for any reason that is considered \"critical\" that the Strategy\r\n     * exits it's position as fast as possible, such as a sudden change in market\r\n     * conditions leading to losses, or an imminent failure in an external\r\n     * dependency.\r\n     */\r\n    function revokeStrategy() external;\r\n\r\n    /*\r\n     * View the governance address of the Vault to assert privileged functions\r\n     * can only be called by governance. The Strategy serves the Vault, so it\r\n     * is subject to governance defined by the Vault.\r\n     *\r\n     */\r\n    function governance() external view returns (address);\r\n}\r\n\r\n/*\r\n * This interface is here for the keeper bot to use\r\n */\r\ninterface StrategyAPI {\r\n    function apiVersion() external pure returns (string memory);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function vault() external view returns (address);\r\n\r\n    function keeper() external view returns (address);\r\n\r\n    function tendTrigger(uint256 callCost) external view returns (bool);\r\n\r\n    function tend() external;\r\n\r\n    function harvestTrigger(uint256 callCost) external view returns (bool);\r\n\r\n    function harvest() external;\r\n\r\n    event Harvested(uint256 profit);\r\n}\r\n\r\n/*\r\n * BaseStrategy implements all of the required functionality to interoperate closely\r\n * with the core protocol. This contract should be inherited and the abstract methods\r\n * implemented to adapt the strategy to the particular needs it has to create a return.\r\n */\r\n\r\nabstract contract BaseStrategy {\r\n    using SafeMath for uint256;\r\n\r\n    // Version of this contract's StrategyAPI (must match Vault)\r\n    function apiVersion() public pure returns (string memory) {\r\n        return \"0.1.3\";\r\n    }\r\n\r\n    // Name of this contract's Strategy (Must override!)\r\n    // NOTE: You can use this field to manage the \"version\" of this strategy\r\n    //       e.g. `StrategySomethingOrOtherV1`. It's up to you!\r\n    function name() external virtual pure returns (string memory);\r\n\r\n    VaultAPI public vault;\r\n    address public strategist;\r\n    address public rewards;\r\n    address public keeper;\r\n\r\n    IERC20 public want;\r\n\r\n    // So indexers can keep track of this\r\n    event Harvested(uint256 profit);\r\n\r\n    // The minimum number of blocks between harvest calls\r\n    // NOTE: Override this value with your own, or set dynamically below\r\n    uint256 public minReportDelay = 6300; // ~ once a day\r\n\r\n    // The minimum multiple that `callCost` must be above the credit/profit to be \"justifiable\"\r\n    // NOTE: Override this value with your own, or set dynamically below\r\n    uint256 public profitFactor = 100;\r\n\r\n    // Use this to adjust the threshold at which running a debt causes a harvest trigger\r\n    uint256 public debtThreshold = 0;\r\n\r\n    // Adjust this using `setReserve(...)` to keep some of the position in reserve in the strategy,\r\n    // to accomodate larger variations needed to sustain the strategy's core positon(s)\r\n    uint256 private reserve = 0;\r\n\r\n    function getReserve() internal view returns (uint256) {\r\n        return reserve;\r\n    }\r\n\r\n    function setReserve(uint256 _reserve) internal {\r\n        if (_reserve != reserve) reserve = _reserve;\r\n    }\r\n\r\n    bool public emergencyExit;\r\n\r\n    constructor(address _vault) public {\r\n        vault = VaultAPI(_vault);\r\n        want = IERC20(vault.token());\r\n        want.approve(_vault, uint256(-1)); // Give Vault unlimited access (might save gas)\r\n        strategist = msg.sender;\r\n        rewards = msg.sender;\r\n        keeper = msg.sender;\r\n    }\r\n\r\n    function setStrategist(address _strategist) external {\r\n        require(msg.sender == strategist || msg.sender == governance(), \"!authorized\");\r\n        strategist = _strategist;\r\n    }\r\n\r\n    function setKeeper(address _keeper) external {\r\n        require(msg.sender == strategist || msg.sender == governance(), \"!authorized\");\r\n        keeper = _keeper;\r\n    }\r\n\r\n    function setRewards(address _rewards) external {\r\n        require(msg.sender == strategist, \"!authorized\");\r\n        rewards = _rewards;\r\n    }\r\n\r\n    function setMinReportDelay(uint256 _delay) external {\r\n        require(msg.sender == strategist || msg.sender == governance(), \"!authorized\");\r\n        minReportDelay = _delay;\r\n    }\r\n\r\n    function setProfitFactor(uint256 _profitFactor) external {\r\n        require(msg.sender == strategist || msg.sender == governance(), \"!authorized\");\r\n        profitFactor = _profitFactor;\r\n    }\r\n\r\n    function setDebtThreshold(uint256 _debtThreshold) external {\r\n        require(msg.sender == strategist || msg.sender == governance(), \"!authorized\");\r\n        debtThreshold = _debtThreshold;\r\n    }\r\n\r\n    /*\r\n     * Resolve governance address from Vault contract, used to make\r\n     * assertions on protected functions in the Strategy\r\n     */\r\n    function governance() internal view returns (address) {\r\n        return vault.governance();\r\n    }\r\n\r\n    /*\r\n     * Provide an accurate estimate for the total amount of assets (principle + return)\r\n     * that this strategy is currently managing, denominated in terms of `want` tokens.\r\n     * This total should be \"realizable\" e.g. the total value that could *actually* be\r\n     * obtained from this strategy if it were to divest it's entire position based on\r\n     * current on-chain conditions.\r\n     *\r\n     * NOTE: care must be taken in using this function, since it relies on external\r\n     *       systems, which could be manipulated by the attacker to give an inflated\r\n     *       (or reduced) value produced by this function, based on current on-chain\r\n     *       conditions (e.g. this function is possible to influence through flashloan\r\n     *       attacks, oracle manipulations, or other DeFi attack mechanisms).\r\n     *\r\n     * NOTE: It is up to governance to use this function to correctly order this strategy\r\n     *       relative to its peers in the withdrawal queue to minimize losses for the Vault\r\n     *       based on sudden withdrawals. This value should be higher than the total debt of\r\n     *       the strategy and higher than it's expected value to be \"safe\".\r\n     */\r\n    function estimatedTotalAssets() public virtual view returns (uint256);\r\n\r\n    /*\r\n     * Perform any strategy unwinding or other calls necessary to capture\r\n     * the \"free return\" this strategy has generated since the last time it's\r\n     * core position(s) were adusted. Examples include unwrapping extra rewards.\r\n     * This call is only used during \"normal operation\" of a Strategy, and should\r\n     * be optimized to minimize losses as much as possible. It is okay to report\r\n     * \"no returns\", however this will affect the credit limit extended to the\r\n     * strategy and reduce it's overall position if lower than expected returns\r\n     * are sustained for long periods of time.\r\n     */\r\n    function prepareReturn(uint256 _debtOutstanding) internal virtual returns (uint256 _profit, uint256 _loss);\r\n\r\n    /*\r\n     * Perform any adjustments to the core position(s) of this strategy given\r\n     * what change the Vault made in the \"investable capital\" available to the\r\n     * strategy. Note that all \"free capital\" in the strategy after the report\r\n     * was made is available for reinvestment. Also note that this number could\r\n     * be 0, and you should handle that scenario accordingly.\r\n     */\r\n    function adjustPosition(uint256 _debtOutstanding) internal virtual;\r\n\r\n    /*\r\n     * Make as much capital as possible \"free\" for the Vault to take. Some slippage\r\n     * is allowed, since when this method is called the strategist is no longer receiving\r\n     * their performance fee. The goal is for the strategy to divest as quickly as possible\r\n     * while not suffering exorbitant losses. This function is used during emergency exit\r\n     * instead of `prepareReturn()`\r\n     */\r\n    function exitPosition() internal virtual returns (uint256 _loss);\r\n\r\n    /*\r\n     * Vault calls this function after shares are created during `Vault.report()`.\r\n     * You can customize this function to any share distribution mechanism you want.\r\n     */\r\n    function distributeRewards(uint256 _shares) external virtual {\r\n        // Send 100% of newly-minted shares to the rewards address.\r\n        vault.transfer(rewards, _shares);\r\n    }\r\n\r\n    /*\r\n     * Provide a signal to the keeper that `tend()` should be called. The keeper will provide\r\n     * the estimated gas cost that they would pay to call `tend()`, and this function should\r\n     * use that estimate to make a determination if calling it is \"worth it\" for the keeper.\r\n     * This is not the only consideration into issuing this trigger, for example if the position\r\n     * would be negatively affected if `tend()` is not called shortly, then this can return `true`\r\n     * even if the keeper might be \"at a loss\" (keepers are always reimbursed by Yearn)\r\n     *\r\n     * NOTE: `callCost` must be priced in terms of `want`\r\n     *\r\n     * NOTE: this call and `harvestTrigger` should never return `true` at the same time.\r\n     */\r\n    function tendTrigger(uint256 callCost) public virtual view returns (bool) {\r\n        // We usually don't need tend, but if there are positions that need active maintainence,\r\n        // overriding this function is how you would signal for that\r\n        return false;\r\n    }\r\n\r\n    function tend() external {\r\n        if (keeper != address(0)) {\r\n            require(msg.sender == keeper || msg.sender == strategist || msg.sender == governance(), \"!authorized\");\r\n        }\r\n\r\n        // Don't take profits with this call, but adjust for better gains\r\n        adjustPosition(vault.debtOutstanding());\r\n    }\r\n\r\n    /*\r\n     * Provide a signal to the keeper that `harvest()` should be called. The keeper will provide\r\n     * the estimated gas cost that they would pay to call `harvest()`, and this function should\r\n     * use that estimate to make a determination if calling it is \"worth it\" for the keeper.\r\n     * This is not the only consideration into issuing this trigger, for example if the position\r\n     * would be negatively affected if `harvest()` is not called shortly, then this can return `true`\r\n     * even if the keeper might be \"at a loss\" (keepers are always reimbursed by Yearn)\r\n     *\r\n     * NOTE: `callCost` must be priced in terms of `want`\r\n     *\r\n     * NOTE: this call and `tendTrigger` should never return `true` at the same time.\r\n     */\r\n    function harvestTrigger(uint256 callCost) public virtual view returns (bool) {\r\n        StrategyParams memory params = vault.strategies(address(this));\r\n\r\n        // Should not trigger if strategy is not activated\r\n        if (params.activation == 0) return false;\r\n\r\n        // Should trigger if hadn't been called in a while\r\n        if (block.number.sub(params.lastReport) >= minReportDelay) return true;\r\n\r\n        // If some amount is owed, pay it back\r\n        // NOTE: Since debt is adjusted in step-wise fashion, it is appropiate to always trigger here,\r\n        //       because the resulting change should be large (might not always be the case)\r\n        uint256 outstanding = vault.debtOutstanding();\r\n        if (outstanding > 0) return true;\r\n\r\n        // Check for profits and losses\r\n        uint256 total = estimatedTotalAssets();\r\n        // Trigger if we have a loss to report\r\n        if (total.add(debtThreshold) < params.totalDebt) return true;\r\n\r\n        uint256 profit = 0;\r\n        if (total > params.totalDebt) profit = total.sub(params.totalDebt); // We've earned a profit!\r\n\r\n        // Otherwise, only trigger if it \"makes sense\" economically (gas cost is <N% of value moved)\r\n        uint256 credit = vault.creditAvailable();\r\n        return (profitFactor * callCost < credit.add(profit));\r\n    }\r\n\r\n    function harvest() external {\r\n        if (keeper != address(0)) {\r\n            require(msg.sender == keeper || msg.sender == strategist || msg.sender == governance(), \"!authorized\");\r\n        }\r\n\r\n        uint256 profit = 0;\r\n        uint256 loss = 0;\r\n        if (emergencyExit) {\r\n            loss = exitPosition(); // Free up as much capital as possible\r\n            // NOTE: Don't take performance fee in this scenario\r\n        } else {\r\n            // Free up returns for Vault to pull\r\n            (profit, loss) = prepareReturn(vault.debtOutstanding());\r\n        }\r\n\r\n        if (reserve > want.balanceOf(address(this))) reserve = want.balanceOf(address(this));\r\n\r\n        // Allow Vault to take up to the \"harvested\" balance of this contract, which is\r\n        // the amount it has earned since the last time it reported to the Vault\r\n        uint256 outstanding = vault.report(want.balanceOf(address(this)).sub(reserve), loss);\r\n\r\n        // Check if free returns are left, and re-invest them\r\n        adjustPosition(outstanding);\r\n\r\n        emit Harvested(profit);\r\n    }\r\n\r\n    /*\r\n     * Liquidate as many assets as possible to `want`, irregardless of slippage,\r\n     * up to `_amountNeeded`. Any excess should be re-invested here as well.\r\n     */\r\n    function liquidatePosition(uint256 _amountNeeded) internal virtual returns (uint256 _amountFreed);\r\n\r\n    function withdraw(uint256 _amountNeeded) external {\r\n        require(msg.sender == address(vault), \"!vault\");\r\n        // Liquidate as much as possible to `want`, up to `_amount`\r\n        uint256 amountFreed = liquidatePosition(_amountNeeded);\r\n        // Send it directly back (NOTE: Using `msg.sender` saves some gas here)\r\n        want.transfer(msg.sender, amountFreed);\r\n        // Adjust reserve to what we have after the freed amount is sent to the Vault\r\n        reserve = want.balanceOf(address(this));\r\n    }\r\n\r\n    /*\r\n     * Do anything necesseary to prepare this strategy for migration, such\r\n     * as transfering any reserve or LP tokens, CDPs, or other tokens or stores of value.\r\n     */\r\n    function prepareMigration(address _newStrategy) internal virtual;\r\n\r\n    function migrate(address _newStrategy) external {\r\n        require(msg.sender == address(vault) || msg.sender == governance());\r\n        require(BaseStrategy(_newStrategy).vault() == vault);\r\n        prepareMigration(_newStrategy);\r\n        want.transfer(_newStrategy, want.balanceOf(address(this)));\r\n    }\r\n\r\n    function setEmergencyExit() external {\r\n        require(msg.sender == strategist || msg.sender == governance(), \"!authorized\");\r\n        emergencyExit = true;\r\n        exitPosition();\r\n        vault.revokeStrategy();\r\n        if (reserve > want.balanceOf(address(this))) reserve = want.balanceOf(address(this));\r\n    }\r\n\r\n    // Override this to add all tokens/tokenized positions this contract manages\r\n    // on a *persistant* basis (e.g. not just for swapping back to want ephemerally)\r\n    // NOTE: Do *not* include `want`, already included in `sweep` below\r\n    //\r\n    // Example:\r\n    //\r\n    //    function protectedTokens() internal override view returns (address[] memory) {\r\n    //      address[] memory protected = new address[](3);\r\n    //      protected[0] = tokenA;\r\n    //      protected[1] = tokenB;\r\n    //      protected[2] = tokenC;\r\n    //      return protected;\r\n    //    }\r\n    function protectedTokens() internal virtual view returns (address[] memory);\r\n\r\n    function sweep(address _token) external {\r\n        require(msg.sender == governance(), \"!authorized\");\r\n        require(_token != address(want), \"!want\");\r\n\r\n        address[] memory _protectedTokens = protectedTokens();\r\n        for (uint256 i; i < _protectedTokens.length; i++) require(_token != _protectedTokens[i], \"!protected\");\r\n\r\n        IERC20(_token).transfer(governance(), IERC20(_token).balanceOf(address(this)));\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n\r\ninterface PickleJar {\r\n    function deposit(uint256 _amount) external;\r\n    function withdraw(uint256 _shares) external;\r\n    function token() external view returns (address);\r\n    function getRatio() external view returns (uint256);\r\n}\r\n\r\ninterface PickleChef {\r\n    function deposit(uint256 _pid, uint256 _amount) external;\r\n    function withdraw(uint256 _pid, uint256 _amount) external;\r\n    function poolInfo(uint256 _pid) external view returns (address, uint256, uint256, uint256);\r\n    function pendingPickle(uint256 _pid, address _user) external view returns (uint256);\r\n    function userInfo(uint256 _pid, address _user) external view returns (uint256, uint256);\r\n}\r\n\r\ninterface PickleStaking {\r\n    function earned(address account) external view returns (uint256);\r\n    function stake(uint256 amount) external;\r\n    function withdraw(uint256 amount) external;\r\n    function getReward() external;\r\n    function exit() external;\r\n}\r\n\r\ninterface UniswapPair {\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n}\r\n\r\ninterface Uniswap {\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n    \r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n/*\r\n    Uniswap LP => Pickle Jar => Pickle Farm => Pickle Staking => WETH rewards\r\n\r\n    Builds up a Pickle position in Pickle Staking.\r\n*/\r\n\r\ncontract StrategyUniswapPairPickle is BaseStrategy {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n\r\n    string public constant override name = \"StrategyUniswapPairPickle\";\r\n    address public constant chef = 0xbD17B1ce622d73bD438b9E658acA5996dc394b0d;\r\n    address public constant staking = 0xa17a8883dA1aBd57c690DF9Ebf58fC194eDAb66F;\r\n    address public constant pickle = 0x429881672B9AE42b8EbA0E26cD9C73711b891Ca5;\r\n    address public constant uniswap = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    address public constant weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    address public jar;\r\n    uint256 public pid;\r\n    address token0;\r\n    address token1;\r\n    uint256 gasFactor = 200;\r\n    uint256 interval = 1000;\r\n\r\n    constructor(address _vault, address _jar, uint256 _pid) public BaseStrategy(_vault) {\r\n        jar = _jar;\r\n        pid = _pid;\r\n\r\n        require(PickleJar(jar).token() == address(want), \"wrong jar\");\r\n        (address lp,,,) = PickleChef(chef).poolInfo(pid);\r\n        require(lp == jar, \"wrong pid\");\r\n\r\n        token0 = UniswapPair(address(want)).token0();\r\n        token1 = UniswapPair(address(want)).token1();\r\n        want.safeApprove(jar, type(uint256).max);\r\n        IERC20(jar).safeApprove(chef, type(uint256).max);\r\n        IERC20(pickle).safeApprove(staking, type(uint256).max);\r\n        IERC20(token0).safeApprove(uniswap, type(uint256).max);\r\n        IERC20(token1).safeApprove(uniswap, type(uint256).max);\r\n    }\r\n\r\n    // ******** OVERRIDE THESE METHODS FROM BASE CONTRACT ************\r\n\r\n    function expectedReturn() public view returns (uint256) {\r\n        uint256 _earned = PickleStaking(staking).earned(address(this));\r\n        if (_earned / 2 == 0) return 0;\r\n        uint256 _amount0 = quote(weth, token0, _earned / 2);\r\n        uint256 _amount1 = quote(weth, token1, _earned / 2);\r\n        (uint112 _reserve0, uint112 _reserve1, ) = UniswapPair(address(want)).getReserves();\r\n        uint256 _supply = IERC20(want).totalSupply();\r\n        return Math.min(\r\n            _amount0.mul(_supply).div(_reserve0),\r\n            _amount1.mul(_supply).div(_reserve1)\r\n        );\r\n    }\r\n\r\n    /*\r\n     * Provide an accurate estimate for the total amount of assets (principle + return)\r\n     * that this strategy is currently managing, denominated in terms of `want` tokens.\r\n     * This total should be \"realizable\" e.g. the total value that could *actually* be\r\n     * obtained from this strategy if it were to divest it's entire position based on\r\n     * current on-chain conditions.\r\n     *\r\n     * NOTE: care must be taken in using this function, since it relies on external\r\n     *       systems, which could be manipulated by the attacker to give an inflated\r\n     *       (or reduced) value produced by this function, based on current on-chain\r\n     *       conditions (e.g. this function is possible to influence through flashloan\r\n     *       attacks, oracle manipulations, or other DeFi attack mechanisms).\r\n     *\r\n     * NOTE: It is up to governance to use this function to correctly order this strategy\r\n     *       relative to its peers in the withdrawal queue to minimize losses for the Vault\r\n     *       based on sudden withdrawals. This value should be higher than the total debt of\r\n     *       the strategy and higher than it's expected value to be \"safe\".\r\n     */\r\n    function estimatedTotalAssets() public override view returns (uint256) {\r\n        uint256 _want = want.balanceOf(address(this));\r\n        (uint256 _staked, ) = PickleChef(chef).userInfo(pid, address(this));\r\n        uint256 _ratio = PickleJar(jar).getRatio();\r\n        uint256 _earned = expectedReturn();\r\n        return _want.add(_staked.mul(_ratio).div(1e18)).add(_earned);\r\n    }\r\n\r\n    /*\r\n     * Perform any strategy unwinding or other calls necessary to capture\r\n     * the \"free return\" this strategy has generated since the last time it's\r\n     * core position(s) were adusted. Examples include unwrapping extra rewards.\r\n     * This call is only used during \"normal operation\" of a Strategy, and should\r\n     * be optimized to minimize losses as much as possible. It is okay to report\r\n     * \"no returns\", however this will affect the credit limit extended to the\r\n     * strategy and reduce it's overall position if lower than expected returns\r\n     * are sustained for long periods of time.\r\n     */\r\n    function prepareReturn(uint256 _debtOutstanding) internal override returns (uint256 _profit, uint256 _loss) {\r\n        // Claim Pickle rewards from Pickle Chef\r\n        PickleChef(chef).deposit(pid, 0);\r\n        // Claim WETH rewards from Pickle Staking\r\n        PickleStaking(staking).getReward();\r\n        // Swap WETH to LP token underlying and add liquidity\r\n        uint _weth = IERC20(weth).balanceOf(address(this));\r\n        if (_weth > 1 gwei) {\r\n            swap(weth, token0, _weth / 2);\r\n            swap(weth, token1, _weth / 2);\r\n            add_liquidity();\r\n        }\r\n\r\n        uint256 totalDebt = vault.strategies(address(this)).totalDebt;\r\n        uint256 totalAssets = estimatedTotalAssets();\r\n\r\n        uint256 looseBalance = want.balanceOf(address(this));\r\n        uint256 neededLooseBalance;\r\n\r\n        if (totalAssets < totalDebt) {\r\n            _loss = totalDebt.sub(totalAssets);\r\n            neededLooseBalance = _debtOutstanding;\r\n        } else {\r\n            _profit = totalAssets.sub(totalDebt);\r\n            neededLooseBalance = _debtOutstanding.add(_profit);\r\n        }\r\n\r\n        if (neededLooseBalance > looseBalance) liquidatePosition(neededLooseBalance.sub(looseBalance));\r\n\r\n        looseBalance = want.balanceOf(address(this));\r\n        if (looseBalance > neededLooseBalance) {\r\n            setReserve(looseBalance.sub(neededLooseBalance));\r\n        } else {\r\n            setReserve(0);\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Perform any adjustments to the core position(s) of this strategy given\r\n     * what change the Vault made in the \"investable capital\" available to the\r\n     * strategy. Note that all \"free capital\" in the strategy after the report\r\n     * was made is available for reinvestment. Also note that this number could\r\n     * be 0, and you should handle that scenario accordingly.\r\n     */\r\n    function adjustPosition(uint256 _debtOutstanding) internal override {\r\n        setReserve(0);\r\n        // Stake LP tokens into Pickle Jar\r\n        uint _want = want.balanceOf(address(this));\r\n        _want = _want.sub(Math.min(_want, _debtOutstanding));\r\n        if (_want > 0) PickleJar(jar).deposit(_want);\r\n        // Stake Jar tokens into Pickle Farm\r\n        uint _jar = IERC20(jar).balanceOf(address(this));\r\n        if (_jar > 0) PickleChef(chef).deposit(pid, _jar);\r\n        // Stake Pickle into Pickle Staking\r\n        uint _pickle = IERC20(pickle).balanceOf(address(this));\r\n        if (_pickle > 0) PickleStaking(staking).stake(_pickle);\r\n    }\r\n\r\n    /*\r\n     * Make as much capital as possible \"free\" for the Vault to take. Some slippage\r\n     * is allowed, since when this method is called the strategist is no longer receiving\r\n     * their performance fee. The goal is for the strategy to divest as quickly as possible\r\n     * while not suffering exorbitant losses. This function is used during emergency exit\r\n     * instead of `prepareReturn()`\r\n     */\r\n    function exitPosition() internal override returns (uint256 _loss) {\r\n        // Withdraw Jar tokens from Pickle Chef\r\n        (uint _staked, ) = PickleChef(chef).userInfo(pid, address(this));\r\n        PickleChef(chef).withdraw(pid, _staked);\r\n        // Withdraw LP tokens from Jar\r\n        uint _jar = IERC20(jar).balanceOf(address(this));\r\n        if (_jar > 0) PickleJar(jar).withdraw(_jar);\r\n        // Withdraw Pickle from Pickle Staking and transfer to governance\r\n        uint _pickle_staked = IERC20(staking).balanceOf(address(this));\r\n        if (_pickle_staked > 0) PickleStaking(staking).exit();\r\n        uint _pickle = IERC20(pickle).balanceOf(address(this));\r\n        if (_pickle > 0) IERC20(pickle).safeTransfer(governance(), _pickle);\r\n        return 0;\r\n    }\r\n    /*\r\n     * Liquidate as many assets as possible to `want`, irregardless of slippage,\r\n     * up to `_amountNeeded`. Any excess should be re-invested here as well.\r\n     */\r\n    function liquidatePosition(uint256 _amountNeeded) internal override returns (uint256 _amountFreed) {\r\n        uint _before = want.balanceOf(address(this));\r\n        (uint _staked, ) = PickleChef(chef).userInfo(pid, address(this));\r\n        // This could result in less amount freed because of rounding error\r\n        uint _withdraw = _amountNeeded.mul(1e18).div(PickleJar(jar).getRatio());\r\n        PickleChef(chef).withdraw(pid, Math.min(_staked, _withdraw));\r\n        // This could result in less amount freed because of withdrawal fees\r\n        uint _jar = IERC20(jar).balanceOf(address(this));\r\n        PickleJar(jar).withdraw(_jar);\r\n        return Math.min(want.balanceOf(address(this)).sub(_before), _amountNeeded);\r\n    }\r\n\r\n    /*\r\n     * Provide a signal to the keeper that `tend()` should be called. The keeper will provide\r\n     * the estimated gas cost that they would pay to call `tend()`, and this function should\r\n     * use that estimate to make a determination if calling it is \"worth it\" for the keeper.\r\n     * This is not the only consideration into issuing this trigger, for example if the position\r\n     * would be negatively affected if `tend()` is not called shortly, then this can return `true`\r\n     * even if the keeper might be \"at a loss\" (keepers are always reimbursed by Yearn)\r\n     *\r\n     * NOTE: `callCost` must be priced in terms of `want`\r\n     *\r\n     * NOTE: this call and `harvestTrigger` should never return `true` at the same time.\r\n     */\r\n    function tendTrigger(uint256 gasCost) public override view returns (bool) {\r\n        return false;\r\n    }\r\n\r\n    /*\r\n     * Provide a signal to the keeper that `harvest()` should be called. The keeper will provide\r\n     * the estimated gas cost that they would pay to call `harvest()`, and this function should\r\n     * use that estimate to make a determination if calling it is \"worth it\" for the keeper.\r\n     * This is not the only consideration into issuing this trigger, for example if the position\r\n     * would be negatively affected if `harvest()` is not called shortly, then this can return `true`\r\n     * even if the keeper might be \"at a loss\" (keepers are always reimbursed by Yearn)\r\n     *\r\n     * NOTE: `callCost` must be priced in terms of `want`\r\n     *\r\n     * NOTE: this call and `tendTrigger` should never return `true` at the same time.\r\n     */\r\n    function harvestTrigger(uint256 gasCost) public override view returns (bool) {\r\n        uint256 _credit = vault.creditAvailable().mul(wantPrice()).div(1e18);\r\n        uint256 _earned = PickleChef(chef).pendingPickle(pid, address(this));\r\n        uint256 _return = quote(pickle, weth, _earned);\r\n        uint256 last_sync = vault.strategies(address(this)).lastReport;\r\n        bool time_trigger = block.number.sub(last_sync) >= interval;\r\n        bool cost_trigger = _return > gasCost.mul(gasFactor);\r\n        bool credit_trigger = _credit > gasCost.mul(gasFactor);\r\n        return time_trigger && (cost_trigger || credit_trigger);\r\n    }\r\n\r\n    /*\r\n     * Do anything necesseary to prepare this strategy for migration, such\r\n     * as transfering any reserve or LP tokens, CDPs, or other tokens or stores of value.\r\n     */\r\n    function prepareMigration(address _newStrategy) internal override {\r\n        // Pickle is unstaked and sent to governance in this call\r\n        exitPosition();\r\n        want.transfer(_newStrategy, want.balanceOf(address(this)));\r\n    }\r\n\r\n    function protectedTokens() internal override view returns (address[] memory) {\r\n        address[] memory protected = new address[](5);\r\n        protected[0] = address(want);\r\n        protected[1] = pickle;\r\n        protected[2] = jar;\r\n        protected[3] = token0;\r\n        protected[4] = token1;\r\n        return protected;\r\n    }\r\n\r\n    function setGasFactor(uint256 _gasFactor) public {\r\n        require(msg.sender == strategist || msg.sender == governance());\r\n        gasFactor = _gasFactor;\r\n    }\r\n\r\n    function setInterval(uint256 _interval) public {\r\n        require(msg.sender == strategist || msg.sender == governance());\r\n        interval = _interval;\r\n    }\r\n\r\n    // ******** HELPER METHODS ************\r\n\r\n    // Quote want token in ether.\r\n    function wantPrice() public view returns (uint256) {\r\n        require(token0 == weth || token1 == weth);  // dev: can only quote weth pairs\r\n        (uint112 _reserve0, uint112 _reserve1, ) = UniswapPair(address(want)).getReserves();\r\n        uint256 _supply = IERC20(want).totalSupply();\r\n        // Assume that pool is perfectly balanced\r\n        return 2e18 * uint256(token0 == weth ? _reserve0 : _reserve1) / _supply;\r\n    }\r\n\r\n    function quote(address token_in, address token_out, uint256 amount_in) internal view returns (uint256) {\r\n        if (token_in == token_out) return amount_in;\r\n        bool is_weth = token_in == weth || token_out == weth;\r\n        address[] memory path = new address[](is_weth ? 2 : 3);\r\n        path[0] = token_in;\r\n        if (is_weth) {\r\n            path[1] = token_out;\r\n        } else {\r\n            path[1] = weth;\r\n            path[2] = token_out;\r\n        }\r\n        uint256[] memory amounts = Uniswap(uniswap).getAmountsOut(amount_in, path);\r\n        return amounts[amounts.length - 1];\r\n    }\r\n\r\n    function swap(address token_in, address token_out, uint amount_in) internal {\r\n        if (token_in == token_out) return;\r\n        bool is_weth = token_in == weth || token_out == weth;\r\n        address[] memory path = new address[](is_weth ? 2 : 3);\r\n        path[0] = token_in;\r\n        if (is_weth) {\r\n            path[1] = token_out;\r\n        } else {\r\n            path[1] = weth;\r\n            path[2] = token_out;\r\n        }\r\n        if (IERC20(token_in).allowance(address(this), uniswap) < amount_in)\r\n            IERC20(token_in).safeApprove(uniswap, type(uint256).max);\r\n        Uniswap(uniswap).swapExactTokensForTokens(\r\n            amount_in,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function add_liquidity() internal {\r\n        Uniswap(uniswap).addLiquidity(\r\n            token0,\r\n            token1,\r\n            IERC20(token0).balanceOf(address(this)),\r\n            IERC20(token1).balanceOf(address(this)),\r\n            0, 0,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_jar\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"}],\"name\":\"Harvested\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"apiVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chef\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"distributeRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyExit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimatedTotalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expectedReturn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gasCost\",\"type\":\"uint256\"}],\"name\":\"harvestTrigger\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jar\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newStrategy\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minReportDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pickle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_debtThreshold\",\"type\":\"uint256\"}],\"name\":\"setDebtThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setEmergencyExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gasFactor\",\"type\":\"uint256\"}],\"name\":\"setGasFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_interval\",\"type\":\"uint256\"}],\"name\":\"setInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"}],\"name\":\"setKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_delay\",\"type\":\"uint256\"}],\"name\":\"setMinReportDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_profitFactor\",\"type\":\"uint256\"}],\"name\":\"setProfitFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewards\",\"type\":\"address\"}],\"name\":\"setRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"}],\"name\":\"setStrategist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gasCost\",\"type\":\"uint256\"}],\"name\":\"tendTrigger\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract VaultAPI\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wantPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountNeeded\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StrategyUniswapPairPickle","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000007b9cb3cfee697cd1761945e8b42032c8cce407da000000000000000000000000cffa068f1e44d98d3753966ebd58d4cfe3bb5162000000000000000000000000000000000000000000000000000000000000000a","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://bb277e5b21d3e214e259f10147f7eb5c5c24db07911412e754baac6619c58c8a"}]}