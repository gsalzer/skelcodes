{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\npragma solidity >=0.6.12;\npragma experimental ABIEncoderV2;\n\nenum State {Inactive, Active, Exercised, Expired}\nenum OptionType {Invalid, Put, Call}\n\nstruct Option {\n    State state;\n    address payable holder;\n    uint256 strike;\n    uint256 amount;\n    uint256 lockedAmount;\n    uint256 premium;\n    uint256 expiration;\n    OptionType optionType;\n}\n\ninterface IHegicPool {\n    function totalBalance() external view returns (uint256 amount);\n\n    function availableBalance() external view returns (uint256 amount);\n}\n\ninterface IHegicOptions {\n\n    function pool() external view returns (address poolAddress);\n\n    function unlockAll(uint256[] calldata optionsIDs) external;\n\n    function options(uint256) external view returns (Option memory);\n\n}\n\ninterface IHegicPoolKeep3r {\n  function ethOptions (  ) external view returns ( address );\n  function wbtcOptions (  ) external view returns ( address );\n}\n\ncontract HegicOptionsDataHelper {\n\n    IHegicPoolKeep3r iJob = IHegicPoolKeep3r(0xB1aCE96072654e3A2564A90D64Be99Dd3Ac195F4);\n    \n    function getUnlockableOptionsCount(address optionpoolAddr,uint start,uint limit) public view returns (uint256 count) {\n        count = 0;\n        for(uint i=start;i<limit;i++) {\n            if(unlockable(optionpoolAddr,limit))\n               ++count;\n        }\n    }\n    \n    function GetUnlockableOptions(uint poolindex , uint start,uint limit) public view returns (uint256[] memory unlockableIDS) {\n        address optionpool = poolindex == 0 ? iJob.ethOptions() : iJob.wbtcOptions();\n        unlockableIDS = new uint256[](getUnlockableOptionsCount(optionpool,start,limit));\n        uint256 index = 0;\n        for(uint i=start;i<limit;i++){\n            if(unlockable(optionpool,limit)){\n                unlockableIDS[index] = i;\n                index++;\n            }\n        }\n    }\n    \n    function unlockable(address hegic, uint256 optionID) public view returns (bool) {\n        Option memory option = IHegicOptions(hegic).options(optionID);\n        // if one of the options is not active or not expired, do not continue\n        if (option.state != State.Active || option.expiration >= block.timestamp) {\n                return false;\n        }\n        return true;\n    }\n\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolindex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"GetUnlockableOptions\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"unlockableIDS\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"optionpoolAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"getUnlockableOptionsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hegic\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"optionID\",\"type\":\"uint256\"}],\"name\":\"unlockable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"HegicOptionsDataHelper","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}