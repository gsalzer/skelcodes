{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/home/bob/KingSwap_V2/contracts/KingDecks.sol\": {\r\n      \"content\": \"// File: contracts/libraries/TokenList.sol\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ncontract TokenList {\\n\\n    // \\\"Listed\\\" (hard-coded) tokens\\n    address private constant KingAddr = 0x5a731151d6510Eb475cc7a0072200cFfC9a3bFe5;\\n    address private constant KingNftAddr = 0x4c9c971fbEFc93E0900988383DC050632dEeC71E;\\n    address private constant QueenNftAddr = 0x3068b3313281f63536042D24562896d080844c95;\\n    address private constant KnightNftAddr = 0xF85C874eA05E2225982b48c93A7C7F701065D91e;\\n    address private constant KingWerewolfNftAddr = 0x39C8788B19b0e3CeFb3D2f38c9063b03EB1E2A5a;\\n    address private constant QueenVampzNftAddr = 0x440116abD7338D9ccfdc8b9b034F5D726f615f6d;\\n    address private constant KnightMummyNftAddr = 0x91cC2cf7B0BD7ad99C0D8FA4CdfC93C15381fb2d;\\n    //\\n    address private constant UsdtAddr = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\\n    address private constant UsdcAddr = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\n    address private constant DaiAddr = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\\n    address private constant WethAddr = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    address private constant WbtcAddr = 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599;\\n    address private constant NewKingAddr = 0xd2057d71fE3F5b0dc1E3e7722940E1908Fc72078;\\n\\n    // Index of _extraTokens[0] + 1\\n    uint256 private constant extraTokensStartId = 33;\\n\\n    enum TokenType {unknown, Erc20, Erc721, Erc1155}\\n\\n    struct Token {\\n        address addr;\\n        TokenType _type;\\n    }\\n\\n    // Extra tokens (addition to the hard-coded tokens list)\\n    Token[] private _extraTokens;\\n\\n    function _listedToken(\\n        uint8 tokenId\\n    ) internal pure virtual returns(address, TokenType) {\\n        if (tokenId == 1) return (KingAddr, TokenType.Erc20);\\n        if (tokenId == 2) return (UsdtAddr, TokenType.Erc20);\\n        if (tokenId == 3) return (UsdcAddr, TokenType.Erc20);\\n        if (tokenId == 4) return (DaiAddr, TokenType.Erc20);\\n        if (tokenId == 5) return (WethAddr, TokenType.Erc20);\\n        if (tokenId == 6) return (WbtcAddr, TokenType.Erc20);\\n        if (tokenId == 7) return (NewKingAddr, TokenType.Erc20);\\n\\n        if (tokenId == 16) return (KingNftAddr, TokenType.Erc721);\\n        if (tokenId == 17) return (QueenNftAddr, TokenType.Erc721);\\n        if (tokenId == 18) return (KnightNftAddr, TokenType.Erc721);\\n        if (tokenId == 19) return (KingWerewolfNftAddr, TokenType.Erc721);\\n        if (tokenId == 20) return (QueenVampzNftAddr, TokenType.Erc721);\\n        if (tokenId == 21) return (KnightMummyNftAddr, TokenType.Erc721);\\n\\n        return (address(0), TokenType.unknown);\\n    }\\n\\n    function _tokenAddr(uint8 tokenId) internal view returns(address) {\\n        (address addr, ) = _token(tokenId);\\n        return addr;\\n    }\\n\\n    function _token(\\n        uint8 tokenId\\n    ) internal view returns(address, TokenType) {\\n        if (tokenId < extraTokensStartId) return _listedToken(tokenId);\\n\\n        uint256 i = tokenId - extraTokensStartId;\\n        Token memory token = _extraTokens[i];\\n        return (token.addr, token._type);\\n    }\\n\\n    function _addTokens(\\n        address[] memory addresses,\\n        TokenType[] memory types\\n    ) internal {\\n        require(\\n            addresses.length + _extraTokens.length + extraTokensStartId <= 256,\\n            \\\"TokList:TOO_MANY_TOKENS\\\"\\n        );\\n        for (uint256 i = 0; i < addresses.length; i++) {\\n            require(addresses[i] != address(0), \\\"TokList:INVALID_TOKEN_ADDRESS\\\");\\n            require(types[i] != TokenType.unknown, \\\"TokList:INVALID_TOKEN_TYPE\\\");\\n            _extraTokens.push(Token(addresses[i], types[i]));\\n        }\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/GSN/Context.sol\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/access/Ownable.sol\\n\\n// License: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/math/SafeMath.sol\\n\\n// License: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\\n\\n// License: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n// File: @openzeppelin/contracts/introspection/IERC165.sol\\n\\n// License: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\\n\\n// License: MIT\\n\\npragma solidity ^0.6.2;\\n\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\\n// File: @openzeppelin/contracts/utils/Address.sol\\n\\n// License: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\\n\\n// License: MIT\\n\\npragma solidity ^0.6.0;\\n\\n\\n\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\\n\\n// License: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\\n// File: contracts/KingDecks.sol\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n * It accepts deposits of a pre-defined ERC-20 token(s), the \\\"deposit\\\" token.\\n * The deposit token will be repaid with another ERC-20 token, the \\\"repay\\\"\\n * token (e.g. a stable-coin), at a pre-defined rate.\\n *\\n * On top of the deposit token, a particular NFT (ERC-721) instance may be\\n * required to be deposited as well. If so, this exact NFT will be returned.\\n *\\n * Note the `treasury` account that borrows and repays tokens.\\n */\\ncontract KingDecks is Ownable, ReentrancyGuard, TokenList {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    // On a deposit withdrawal, a user receives the \\\"repay\\\" token\\n    // (but not the originally deposited ERC-20 token).\\n    // The amount (in the  \\\"repay\\\" token units) to be repaid is:\\n    // `amountDue = Deposit.amount * TermSheet.rate/1e+6`                (1)\\n\\n    // If interim withdrawals allowed, the amount which can not be withdrawn\\n    // before the deposit period ends is:\\n    // `minBalance = Deposit.amountDue * Deposit.lockedShare / 65535`    (2)\\n    //\\n    // (note: `TermSheet.earlyRepayableShare` defines `Deposit.lockedShare`)\\n\\n    // Limit on the deposited ERC-20 token amount\\n    struct Limit {\\n        // Min token amount to deposit\\n        uint224 minAmount;\\n        // Max deposit amount multiplier, scaled by 1e+4\\n        // (no limit, if set to 0):\\n        // `maxAmount = minAmount * maxAmountFactor/1e4`\\n        uint32 maxAmountFactor;\\n    }\\n\\n    // Terms of deposit(s)\\n    struct TermSheet {\\n        // Remaining number of deposits allowed under this term sheet\\n        // (if set to zero, deposits disabled; 255 - no limitations applied)\\n        uint8 availableQty;\\n        // ID of the ERC-20 token to deposit\\n        uint8 inTokenId;\\n        // ID of the ERC-721 token (contract) to deposit\\n        // (if set to 0, no ERC-721 token is required to be deposited)\\n        uint8 nfTokenId;\\n        // ID of the ERC-20 token to return instead of the deposited token\\n        uint8 outTokenId;\\n        // Maximum amount that may be withdrawn before the deposit period ends,\\n        // in 1/255 shares of the deposit amount.\\n        // The amount linearly increases from zero to this value with time.\\n        // (if set to zero, early withdrawals are disabled)\\n        uint8 earlyRepayableShare;\\n        // Fees on early withdrawal, in 1/255 shares of the amount withdrawn\\n        // (fees linearly decline to zero towards the repayment time)\\n        // (if set to zero, no fees charged)\\n        uint8 earlyWithdrawFees;\\n        // ID of the deposit amount limit (equals to: index in `_limits` + 1)\\n        // (if set to 0, no limitations on the amount applied)\\n        uint16 limitId;\\n        // Deposit period in hours\\n        uint16 depositHours;\\n        // Min time between interim (early) withdrawals\\n        // (if set to 0, no limits on interim withdrawal time)\\n        uint16 minInterimHours;\\n        // Rate to compute the \\\"repay\\\" amount, scaled by 1e+6 (see (1))\\n        uint64 rate;\\n        // Bit-mask for NFT IDs (in the range 1..64) allowed to deposit\\n        // (if set to 0, no limitations on NFT IDs applied)\\n        uint64 allowedNftNumBitMask;\\n    }\\n\\n    // Parameters of a deposit\\n    struct Deposit {\\n        uint176 amountDue;      // Amount due, in \\\"repay\\\" token units\\n        uint32 maturityTime;    // Time the final withdrawal is allowed since\\n        uint32 lastWithdrawTime;// Time of the most recent interim withdrawal\\n        uint16 lockedShare;     // in 1/65535 shares of `amountDue` (see (2))\\n        // Note:\\n        // - the depositor account and the deposit ID linked via mappings\\n        // - other props (eg.: `termsId`) encoded within the ID of a deposit\\n    }\\n\\n    // Deposits of a user\\n    struct UserDeposits {\\n        // Set of (unique) deposit IDs\\n        uint256[] ids;\\n        // Mapping from deposit ID to deposit data\\n        mapping(uint256 => Deposit) data;\\n    }\\n\\n    // Number of deposits made so far\\n    uint32 public depositQty;\\n\\n    // Account that controls the tokens deposited\\n    address public treasury;\\n\\n    // Limits on \\\"deposit\\\" token amount\\n    Limit[] private _limits;\\n\\n    // Info on each TermSheet\\n    TermSheet[] internal _termSheets;\\n\\n    // Mappings from a \\\"repay\\\" token ID to the total amount due\\n    mapping(uint256 => uint256) public totalDue; // in \\\"repay\\\" token units\\n\\n    // Mapping from user account to user deposits\\n    mapping(address => UserDeposits) internal _deposits;\\n\\n    event NewDeposit(\\n        uint256 indexed inTokenId,\\n        uint256 indexed outTokenId,\\n        address indexed user,\\n        uint256 depositId,\\n        uint256 termsId,\\n        uint256 amount, // amount deposited (in deposit token units)\\n        uint256 amountDue, // amount to be returned (in \\\"repay\\\" token units)\\n        uint256 maturityTime // UNIX-time when the deposit is unlocked\\n    );\\n\\n    // User withdraws the deposit\\n    event Withdraw(\\n        address indexed user,\\n        uint256 depositId,\\n        uint256 amount // amount sent to user (in deposit token units)\\n    );\\n\\n    event InterimWithdraw(\\n        address indexed user,\\n        uint256 depositId,\\n        uint256 amount, // amount sent to user (in \\\"repay\\\" token units)\\n        uint256 fees // withheld fees (in \\\"repay\\\" token units)\\n    );\\n\\n    // termsId is the index in the `_termSheets` array + 1\\n    event NewTermSheet(uint256 indexed termsId);\\n    event TermsEnabled(uint256 indexed termsId);\\n    event TermsDisabled(uint256 indexed termsId);\\n\\n    constructor(address _treasury) public {\\n        _setTreasury(_treasury);\\n    }\\n\\n    function depositIds(\\n        address user\\n    ) external view returns (uint256[] memory) {\\n        _revertZeroAddress(user);\\n        UserDeposits storage userDeposits = _deposits[user];\\n        return userDeposits.ids;\\n    }\\n\\n    function depositData(\\n        address user,\\n        uint256 depositId\\n    ) external view returns(uint256 termsId, Deposit memory params) {\\n        params = _deposits[_nonZeroAddr(user)].data[depositId];\\n        termsId = 0;\\n        if (params.maturityTime !=0) {\\n            (termsId, , , ) = _decodeDepositId(depositId);\\n        }\\n    }\\n\\n    function termSheet(\\n        uint256 termsId\\n    ) external view returns (TermSheet memory) {\\n        return _termSheets[_validTermsID(termsId) - 1];\\n    }\\n\\n    function termSheetsNum() external view returns (uint256) {\\n        return _termSheets.length;\\n    }\\n\\n    function allTermSheets() external view returns(TermSheet[] memory) {\\n        return _termSheets;\\n    }\\n\\n    function depositLimit(\\n        uint256 limitId\\n    ) external view returns (Limit memory) {\\n        return _limits[_validLimitID(limitId) - 1];\\n    }\\n\\n    function depositLimitsNum() external view returns (uint256) {\\n        return _limits.length;\\n    }\\n\\n    function getTokenData(\\n        uint256 tokenId\\n    ) external view returns(address, TokenType) {\\n        return _token(uint8(tokenId));\\n    }\\n\\n    function isAcceptableNft(\\n        uint256 termsId,\\n        address nftContract,\\n        uint256 nftId\\n    ) external view returns(bool) {\\n        TermSheet memory tS = _termSheets[_validTermsID(termsId) - 1];\\n        if (tS.nfTokenId != 0 && _tokenAddr(tS.nfTokenId) == nftContract) {\\n            return _isAllowedNftId(nftId, tS.allowedNftNumBitMask);\\n        }\\n        return false;\\n    }\\n\\n    function idsToBitmask(\\n        uint256[] memory ids\\n    ) pure external returns(uint256 bitmask) {\\n        bitmask = 0;\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            require(id != 0 && id <= 64, \\\"KDecks:unsupported NFT ID\\\");\\n            bitmask = bitmask | (id == 1 ? 1 : 2 << (id - 2));\\n        }\\n    }\\n\\n    function computeEarlyWithdrawal(\\n        address user,\\n        uint256 depositId\\n    ) external view returns (uint256 amountToUser, uint256 fees) {\\n        Deposit memory _deposit = _deposits[user].data[depositId];\\n        require(_deposit.amountDue != 0, \\\"KDecks:unknown or repaid deposit\\\");\\n\\n        (uint256 termsId, , , ) = _decodeDepositId(depositId);\\n        TermSheet memory tS = _termSheets[termsId - 1];\\n\\n        (amountToUser, fees, ) = _computeEarlyWithdrawal(_deposit, tS, now);\\n    }\\n\\n    function deposit(\\n        uint256 termsId,    // term sheet ID\\n        uint256 amount,     // amount in deposit token units\\n        uint256 nftId       // ID of the NFT instance (0 if no NFT required)\\n    ) public nonReentrant {\\n        TermSheet memory tS = _termSheets[_validTermsID(termsId) - 1];\\n        require(tS.availableQty != 0, \\\"KDecks:terms disabled or unknown\\\");\\n\\n        if (tS.availableQty != 255) {\\n            _termSheets[termsId - 1].availableQty = --tS.availableQty;\\n            if ( tS.availableQty == 0) emit TermsDisabled(termsId);\\n        }\\n\\n        if (tS.limitId != 0) {\\n            Limit memory l = _limits[tS.limitId - 1];\\n            require(amount >= l.minAmount, \\\"KDecks:too small deposit amount\\\");\\n            if (l.maxAmountFactor != 0) {\\n                require(\\n                    amount <=\\n                        uint256(l.minAmount).mul(l.maxAmountFactor) / 1e4,\\n                    \\\"KDecks:too big deposit amount\\\"\\n                );\\n            }\\n        }\\n\\n        uint256 serialNum = depositQty + 1;\\n        depositQty = uint32(serialNum); // overflow risk ignored\\n\\n        uint256 depositId = _encodeDepositId(\\n            serialNum,\\n            termsId,\\n            tS.outTokenId,\\n            tS.nfTokenId,\\n            nftId\\n        );\\n\\n        uint256 amountDue = amount.mul(tS.rate).div(1e6);\\n        require(amountDue < 2**178, \\\"KDecks:O2\\\");\\n        uint32 maturityTime = safe32(now.add(uint256(tS.depositHours) *3600));\\n\\n        if (tS.nfTokenId == 0) {\\n            require(nftId == 0, \\\"KDecks:unexpected non-zero nftId\\\");\\n        } else {\\n            require(\\n                nftId < 2**16 &&\\n                _isAllowedNftId(nftId, tS.allowedNftNumBitMask),\\n                \\\"KDecks:disallowed NFT instance\\\"\\n            );\\n            IERC721(_tokenAddr(tS.nfTokenId))\\n                .safeTransferFrom(msg.sender, address(this), nftId, _NFT_PASS);\\n        }\\n\\n        IERC20(_tokenAddr(tS.inTokenId))\\n            .safeTransferFrom(msg.sender, treasury, amount);\\n\\n        // inverted and re-scaled from 255 to 65535\\n        uint256 lockedShare = uint(255 - tS.earlyRepayableShare) * 65535/255;\\n        _registerDeposit(\\n            _deposits[msg.sender],\\n            depositId,\\n            Deposit(\\n                uint176(amountDue),\\n                maturityTime,\\n                safe32(now),\\n                uint16(lockedShare)\\n            )\\n        );\\n        totalDue[tS.outTokenId] = totalDue[tS.outTokenId].add(amountDue);\\n\\n        emit NewDeposit(\\n            tS.inTokenId,\\n            tS.outTokenId,\\n            msg.sender,\\n            depositId,\\n            termsId,\\n            amount,\\n            amountDue,\\n            maturityTime\\n        );\\n    }\\n\\n    // Entirely withdraw the deposit (when the deposit period ends)\\n    function withdraw(uint256 depositId) public nonReentrant {\\n        _withdraw(depositId, false);\\n    }\\n\\n    // Early withdrawal of the unlocked \\\"repay\\\" token amount (beware of fees!!)\\n    function interimWithdraw(uint256 depositId) public nonReentrant {\\n        _withdraw(depositId, true);\\n    }\\n\\n    function addTerms(TermSheet[] memory termSheets) public onlyOwner {\\n        for (uint256 i = 0; i < termSheets.length; i++) {\\n            _addTermSheet(termSheets[i]);\\n        }\\n    }\\n\\n    function updateAvailableQty(\\n        uint256 termsId,\\n        uint256 newQty\\n    ) external onlyOwner {\\n        require(newQty <= 255, \\\"KDecks:INVALID_availableQty\\\");\\n        _termSheets[_validTermsID(termsId) - 1].availableQty = uint8(newQty);\\n        if (newQty == 0) {\\n            emit TermsDisabled(termsId);\\n        } else {\\n            emit TermsEnabled(termsId);\\n        }\\n    }\\n\\n    function addLimits(Limit[] memory limits) public onlyOwner {\\n        // Risk of `limitId` (16 bits) overflow ignored\\n        for (uint256 i = 0; i < limits.length; i++) {\\n            _addLimit(limits[i]);\\n        }\\n    }\\n\\n    function addTokens(\\n        address[] memory addresses,\\n        TokenType[] memory types\\n    ) external onlyOwner {\\n        _addTokens(addresses, types);\\n    }\\n\\n    function setTreasury(address _treasury) public onlyOwner {\\n        _setTreasury(_treasury);\\n    }\\n\\n    // Save occasional airdrop or mistakenly transferred tokens\\n    function transferFromContract(IERC20 token, uint256 amount, address to)\\n        external\\n        onlyOwner\\n    {\\n        _revertZeroAddress(to);\\n        token.safeTransfer(to, amount);\\n    }\\n\\n    // Equals to `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\\n    // Equals to `bytes4(keccak256(\\\"KingDecks\\\"))`\\n    bytes private constant _NFT_PASS = abi.encodePacked(bytes4(0xb0e68bdd));\\n\\n    // Implementation of the ERC721 Receiver\\n    function onERC721Received(address, address, uint256, bytes calldata data)\\n        external\\n        pure\\n        returns (bytes4)\\n    {\\n        // Only accept transfers with _NFT_PASS passed as `data`\\n        return (data.length == 4 && data[0] == 0xb0 && data[3] == 0xdd)\\n        ? _ERC721_RECEIVED\\n        : bytes4(0);\\n    }\\n\\n    // Other parameters, except `serialNum`, encoded for gas saving & UI sake\\n    function _encodeDepositId(\\n        uint256 serialNum,  // Incremental num, unique for every deposit\\n        uint256 termsId,    // ID of the applicable term sheet\\n        uint256 outTokenId, // ID of the ERC-20 token to repay deposit in\\n        uint256 nfTokenId,  // ID of the deposited ERC-721 token (contract)\\n        uint256 nftId       // ID of the deposited ERC-721 token instance\\n    ) internal pure returns (uint256 depositId) {\\n        depositId = nftId\\n        | (nfTokenId << 16)\\n        | (outTokenId << 24)\\n        | (termsId << 32)\\n        | (serialNum << 48);\\n    }\\n\\n    function _decodeDepositId(uint256 depositId) internal pure\\n    returns (\\n        uint16 termsId,\\n        uint8 outTokenId,\\n        uint8 nfTokenId,\\n        uint16 nftId\\n    ) {\\n        termsId = uint16(depositId >> 32);\\n        outTokenId = uint8(depositId >> 24);\\n        nfTokenId = uint8(depositId >> 16);\\n        nftId = uint16(depositId);\\n    }\\n\\n    function _withdraw(uint256 depositId, bool isInterim) internal {\\n        UserDeposits storage userDeposits = _deposits[msg.sender];\\n        Deposit memory _deposit = userDeposits.data[depositId];\\n\\n        require(_deposit.amountDue != 0, \\\"KDecks:unknown or repaid deposit\\\");\\n\\n        uint256 amountToUser;\\n        uint256 amountDue = 0;\\n        uint256 fees = 0;\\n\\n        (\\n            uint16 termsId,\\n            uint8 outTokenId,\\n            uint8 nfTokenId,\\n            uint16 nftId\\n        ) = _decodeDepositId(depositId);\\n\\n        if (isInterim) {\\n            TermSheet memory tS = _termSheets[termsId - 1];\\n            require(\\n                now >= uint256(_deposit.lastWithdrawTime) + tS.minInterimHours * 3600,\\n                \\\"KDecks:withdrawal not yet allowed\\\"\\n            );\\n\\n            uint256 lockedShare;\\n            (amountToUser, fees, lockedShare) = _computeEarlyWithdrawal(\\n                _deposit,\\n                tS,\\n                now\\n            );\\n            amountDue = uint256(_deposit.amountDue).sub(amountToUser).sub(fees);\\n            _deposit.lockedShare = uint16(lockedShare);\\n\\n            emit InterimWithdraw(msg.sender, depositId, amountToUser, fees);\\n        } else {\\n            require(now >= _deposit.maturityTime, \\\"KDecks:deposit is locked\\\");\\n            amountToUser = uint256(_deposit.amountDue);\\n\\n            if (nftId != 0) {\\n                IERC721(_tokenAddr(nfTokenId)).safeTransferFrom(\\n                    address(this),\\n                    msg.sender,\\n                    nftId,\\n                    _NFT_PASS\\n                );\\n            }\\n            _deregisterDeposit(userDeposits, depositId);\\n\\n            emit Withdraw(msg.sender, depositId, amountToUser);\\n        }\\n\\n        _deposit.lastWithdrawTime = safe32(now);\\n        _deposit.amountDue = uint176(amountDue);\\n        userDeposits.data[depositId] = _deposit;\\n\\n        totalDue[outTokenId] = totalDue[outTokenId]\\n            .sub(amountToUser)\\n            .sub(fees);\\n\\n        IERC20(_tokenAddr(outTokenId))\\n            .safeTransferFrom(treasury, msg.sender, amountToUser);\\n    }\\n\\n    function _computeEarlyWithdrawal(\\n        Deposit memory d,\\n        TermSheet memory tS,\\n        uint256 timeNow\\n    ) internal pure returns (\\n        uint256 amountToUser,\\n        uint256 fees,\\n        uint256 newlockedShare\\n    ) {\\n        require(d.lockedShare != 65535, \\\"KDecks:early withdrawals banned\\\");\\n\\n        amountToUser = 0;\\n        fees = 0;\\n        newlockedShare = 0;\\n\\n        if (timeNow > d.lastWithdrawTime && timeNow < d.maturityTime) {\\n            // values are too small for overflow; if not, safemath used\\n            {\\n                uint256 timeSincePrev = timeNow - d.lastWithdrawTime;\\n                uint256 timeLeftPrev = d.maturityTime - d.lastWithdrawTime;\\n                uint256 repayable = uint256(d.amountDue)\\n                    .mul(65535 - d.lockedShare)\\n                    / 65535;\\n\\n                amountToUser = repayable.mul(timeSincePrev).div(timeLeftPrev);\\n                newlockedShare = uint256(65535).sub(\\n                    repayable.sub(amountToUser)\\n                    .mul(65535)\\n                    .div(uint256(d.amountDue).sub(amountToUser))\\n                );\\n            }\\n            {\\n                uint256 term = uint256(tS.depositHours) * 3600; // can't be 0\\n                uint256 timeLeft = d.maturityTime - timeNow;\\n                fees = amountToUser\\n                    .mul(uint256(tS.earlyWithdrawFees))\\n                    .mul(timeLeft)\\n                    / term // fee rate linearly drops to 0\\n                    / 255; // `earlyWithdrawFees` scaled down\\n\\n            }\\n            amountToUser = amountToUser.sub(fees); // fees withheld\\n        }\\n    }\\n\\n    function _addTermSheet(TermSheet memory tS) internal {\\n        ( , TokenType _type) = _token(tS.inTokenId);\\n        require(_type == TokenType.Erc20, \\\"KDecks:INVALID_DEPOSIT_TOKEN\\\");\\n        ( , _type) = _token(tS.outTokenId);\\n        require(_type == TokenType.Erc20, \\\"KDecks:INVALID_REPAY_TOKEN\\\");\\n        if (tS.nfTokenId != 0) {\\n            (, _type) = _token(tS.nfTokenId);\\n            require(_type == TokenType.Erc721, \\\"KDecks:INVALID_NFT_TOKEN\\\");\\n        }\\n        if (tS.earlyRepayableShare == 0) {\\n            require(\\n                tS.earlyWithdrawFees == 0 && tS.minInterimHours == 0,\\n                \\\"KDecks:INCONSISTENT_PARAMS\\\"\\n            );\\n        }\\n\\n        if (tS.limitId != 0) _validLimitID(tS.limitId);\\n        require(\\n             tS.depositHours != 0 && tS.rate != 0,\\n            \\\"KDecks:INVALID_ZERO_PARAM\\\"\\n        );\\n\\n        // Risk of termsId (16 bits) overflow ignored\\n        _termSheets.push(tS);\\n\\n        emit NewTermSheet(_termSheets.length);\\n        if (tS.availableQty != 0 ) emit TermsEnabled(_termSheets.length);\\n    }\\n\\n    function _addLimit(Limit memory l) internal {\\n        require(l.minAmount != 0, \\\"KDecks:INVALID_minAmount\\\");\\n        _limits.push(l);\\n    }\\n\\n    function _isAllowedNftId(\\n        uint256 nftId,\\n        uint256 allowedBitMask\\n    ) internal pure returns(bool) {\\n        if (allowedBitMask == 0) return true;\\n        uint256 idBitMask = nftId == 1 ? 1 : (2 << (nftId - 2));\\n        return (allowedBitMask & idBitMask) != 0;\\n    }\\n\\n    function _registerDeposit(\\n        UserDeposits storage userDeposits,\\n        uint256 depositId,\\n        Deposit memory _deposit\\n    ) internal {\\n        userDeposits.data[depositId] = _deposit;\\n        userDeposits.ids.push(depositId);\\n    }\\n\\n    function _deregisterDeposit(\\n        UserDeposits storage userDeposits,\\n        uint256 depositId\\n    ) internal {\\n        _removeArrayElement(userDeposits.ids, depositId);\\n    }\\n\\n    // Assuming the given array does contain the given element\\n    function _removeArrayElement(uint256[] storage arr, uint256 el) internal {\\n        uint256 lastIndex = arr.length - 1;\\n        if (lastIndex != 0) {\\n            uint256 replaced = arr[lastIndex];\\n            if (replaced != el) {\\n                // Shift elements until the one being removed is replaced\\n                do {\\n                    uint256 replacing = replaced;\\n                    replaced = arr[lastIndex - 1];\\n                    lastIndex--;\\n                    arr[lastIndex] = replacing;\\n                } while (replaced != el && lastIndex != 0);\\n            }\\n        }\\n        // Remove the last (and quite probably the only) element\\n        arr.pop();\\n    }\\n\\n    function _setTreasury(address _treasury) internal {\\n        _revertZeroAddress(_treasury);\\n        treasury = _treasury;\\n    }\\n\\n    function _revertZeroAddress(address _address) private pure {\\n        require(_address != address(0), \\\"KDecks:ZERO_ADDRESS\\\");\\n    }\\n\\n    function _nonZeroAddr(address _address) private pure returns (address) {\\n        _revertZeroAddress(_address);\\n        return _address;\\n    }\\n\\n    function _validTermsID(uint256 termsId) private view returns (uint256) {\\n        require(\\n            termsId != 0 && termsId <= _termSheets.length,\\n            \\\"KDecks:INVALID_TERMS_ID\\\"\\n        );\\n        return termsId;\\n    }\\n\\n    function _validLimitID(uint256 limitId) private view returns (uint256) {\\n        require(\\n            limitId != 0 && limitId <= _limits.length,\\n            \\\"KDecks:INVALID_LIMITS_ID\\\"\\n        );\\n        return limitId;\\n    }\\n\\n    function safe32(uint256 n) private pure returns (uint32) {\\n        require(n < 2**32, \\\"KDecks:UNSAFE_UINT32\\\");\\n        return uint32(n);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"}],\"name\":\"InterimWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"inTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"outTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"termsId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountDue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maturityTime\",\"type\":\"uint256\"}],\"name\":\"NewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termsId\",\"type\":\"uint256\"}],\"name\":\"NewTermSheet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termsId\",\"type\":\"uint256\"}],\"name\":\"TermsDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termsId\",\"type\":\"uint256\"}],\"name\":\"TermsEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint224\",\"name\":\"minAmount\",\"type\":\"uint224\"},{\"internalType\":\"uint32\",\"name\":\"maxAmountFactor\",\"type\":\"uint32\"}],\"internalType\":\"struct KingDecks.Limit[]\",\"name\":\"limits\",\"type\":\"tuple[]\"}],\"name\":\"addLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"availableQty\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"inTokenId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"nfTokenId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"outTokenId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"earlyRepayableShare\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"earlyWithdrawFees\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"limitId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"depositHours\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"minInterimHours\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"rate\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"allowedNftNumBitMask\",\"type\":\"uint64\"}],\"internalType\":\"struct KingDecks.TermSheet[]\",\"name\":\"termSheets\",\"type\":\"tuple[]\"}],\"name\":\"addTerms\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"enum TokenList.TokenType[]\",\"name\":\"types\",\"type\":\"uint8[]\"}],\"name\":\"addTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allTermSheets\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"availableQty\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"inTokenId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"nfTokenId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"outTokenId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"earlyRepayableShare\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"earlyWithdrawFees\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"limitId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"depositHours\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"minInterimHours\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"rate\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"allowedNftNumBitMask\",\"type\":\"uint64\"}],\"internalType\":\"struct KingDecks.TermSheet[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"}],\"name\":\"computeEarlyWithdrawal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termsId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"}],\"name\":\"depositData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"termsId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint176\",\"name\":\"amountDue\",\"type\":\"uint176\"},{\"internalType\":\"uint32\",\"name\":\"maturityTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"lastWithdrawTime\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"lockedShare\",\"type\":\"uint16\"}],\"internalType\":\"struct KingDecks.Deposit\",\"name\":\"params\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"depositIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limitId\",\"type\":\"uint256\"}],\"name\":\"depositLimit\",\"outputs\":[{\"components\":[{\"internalType\":\"uint224\",\"name\":\"minAmount\",\"type\":\"uint224\"},{\"internalType\":\"uint32\",\"name\":\"maxAmountFactor\",\"type\":\"uint32\"}],\"internalType\":\"struct KingDecks.Limit\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositLimitsNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositQty\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"enum TokenList.TokenType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"idsToBitmask\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bitmask\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"}],\"name\":\"interimWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termsId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"isAcceptableNft\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termsId\",\"type\":\"uint256\"}],\"name\":\"termSheet\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"availableQty\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"inTokenId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"nfTokenId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"outTokenId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"earlyRepayableShare\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"earlyWithdrawFees\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"limitId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"depositHours\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"minInterimHours\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"rate\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"allowedNftNumBitMask\",\"type\":\"uint64\"}],\"internalType\":\"struct KingDecks.TermSheet\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"termSheetsNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalDue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferFromContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termsId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newQty\",\"type\":\"uint256\"}],\"name\":\"updateAvailableQty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"KingDecks","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000d31e459ac72e2ccad9a35b5b3367cfb4bab0274f","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}