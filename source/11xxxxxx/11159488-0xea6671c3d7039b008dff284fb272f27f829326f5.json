{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity >=0.4.25 <=0.7.3;\r\n\r\n/* SafeMath functions */\r\n\r\ncontract SafeMath {\r\n    \r\n  function safeMul(uint256 a, uint256 b) pure internal returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function safeDiv(uint256 a, uint256 b) pure internal returns (uint256) {\r\n    assert(b > 0);\r\n    uint256 c = a / b;\r\n    assert(a == b * c + a % b);\r\n    return c;\r\n  }\r\n\r\n  function safeSub(uint256 a, uint256 b) pure internal returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function safeAdd(uint256 a, uint256 b) pure internal returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c>=a && c>=b);\r\n    return c;\r\n  } \r\n\r\n}\r\n\r\ninterface ICUSD {\r\n    \r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    \r\n    \r\n    /**\r\n     * @dev burns 'amount' tokens from the total supply & from his address\r\n     * \r\n     */\r\n    \r\n    function burn(uint256 amount) external returns (bool);\r\n    \r\n    /**\r\n     * @dev mints 'amount' tokens from the 0 contract to the owner's address. This function has to be called by one\r\n     * of the three governors\r\n     */\r\n    \r\n    function mint(uint256 amount) external returns (bool);\r\n    \r\n     /**\r\n     * @dev adds 'New Owners or Governors' to the smart contract.\r\n     * Limite to three governors\r\n     */\r\n    \r\n    function addGovernor(address governor,uint256 index) external returns (bool);\r\n    \r\n}\r\n\r\ncontract CUSD is SafeMath,ICUSD {\r\n    \r\n    string public constant name = \"Cube Dollar\";\r\n    string public constant symbol = \"CUSD\";\r\n    uint256 public constant decimals = 18;\r\n    uint256 public override totalSupply;\r\n    address public owner;\r\n    address[3] public governors;\r\n\r\n    constructor(){\r\n        uint256 initalSupply = SafeMath.safeMul(20000000,10**18);\r\n        owner = msg.sender;\r\n        balanceOf[msg.sender]=initalSupply;\r\n        totalSupply+=initalSupply;\r\n        emit Transfer(address(0), owner, initalSupply);\r\n     }\r\n\r\n\r\n    mapping (address => uint256) public override balanceOf;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Burn(address indexed from, uint256 value);\r\n    event Mint(address indexed from,address indexed to, uint256 value);\r\n\r\n    \r\n    function transfer(address _reciever, uint256 _value) public override returns (bool){\r\n         require(balanceOf[msg.sender]>_value);\r\n         balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender],_value);\r\n         balanceOf[_reciever] = SafeMath.safeAdd(balanceOf[_reciever],_value);\r\n         emit Transfer(msg.sender,_reciever,_value);\r\n         return true;\r\n    }\r\n    \r\n     function transferFrom( address _from, address _to, uint256 _amount )public override returns (bool) {\r\n     require( _to != address(0));\r\n     require(balanceOf[_from] >= _amount && allowed[_from][msg.sender] >= _amount && _amount >= 0);\r\n     balanceOf[_from] = SafeMath.safeSub(balanceOf[_from],_amount);\r\n     allowed[_from][msg.sender] = SafeMath.safeSub(allowed[_from][msg.sender],_amount);\r\n     balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to],_amount);\r\n     emit Transfer(_from, _to, _amount);\r\n     return true;\r\n     }\r\n     \r\n     function burn(uint256 _value) public override returns(bool){\r\n         require(balanceOf[msg.sender]>=_value);\r\n         balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender],_value);\r\n         totalSupply = SafeMath.safeSub(totalSupply,_value);\r\n         emit Burn(msg.sender,_value);\r\n        emit Transfer(msg.sender,address(0),_value);\r\n         return true;\r\n    }\r\n    \r\n    function mint(uint256 _value) public override returns(bool){\r\n        require(msg.sender == governors[0] || msg.sender == governors[1] || msg.sender == governors[2],'Not Elligible to mint');\r\n        balanceOf[msg.sender] = SafeMath.safeAdd(balanceOf[msg.sender],_value);\r\n        totalSupply = SafeMath.safeAdd(totalSupply,_value);\r\n        emit Mint(address(0),msg.sender,_value);\r\n        emit Transfer(address(0),msg.sender,_value);\r\n        return true;\r\n    }\r\n     \r\n    function addGovernor(address _governor,uint256 _index) public override returns(bool){\r\n        require(msg.sender == owner);\r\n        governors[_index] = _governor;\r\n        return false;\r\n    } \r\n     \r\n    function approve(address _spender, uint256 _amount) public override returns (bool) {\r\n         require( _spender != address(0));\r\n         allowed[msg.sender][_spender] = _amount;\r\n         emit  Approval(msg.sender, _spender, _amount);\r\n         return true;\r\n     }\r\n     \r\n     function reverseApprove(address _spender, uint256 _amount) public returns (bool){\r\n        require( _spender != address(0));\r\n        if(SafeMath.safeSub(allowed[msg.sender][_spender],_amount) >= 0){\r\n        allowed[msg.sender][_spender] = SafeMath.safeSub(allowed[msg.sender][_spender],_amount);\r\n        emit  Approval(msg.sender, _spender, SafeMath.safeSub(allowed[msg.sender][_spender],_amount));\r\n        return true;\r\n        }\r\n        return false;\r\n     }\r\n     \r\n     \r\n     function allowance(address _owner, address _spender)public view override returns (uint256 remaining) {\r\n         require( _owner != address(0) && _spender != address(0));\r\n         return allowed[_owner][_spender];\r\n     }\r\n     \r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"addGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"governors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"reverseApprove\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reciever\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CUSD","CompilerVersion":"v0.7.0+commit.9e61f92b","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://f29225e8c694761b058206ad6b6885008450a78e4c6efd969864263c6610d640"}]}