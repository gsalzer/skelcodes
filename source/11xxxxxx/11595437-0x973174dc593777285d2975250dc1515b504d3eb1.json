{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts\\openzeppelin\\contracts\\GSN\\Context.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: contracts\\openzeppelin\\contracts\\access\\Ownable.sol\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        revert(\"Renouncing ownership is blocked\");\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: owner is 0x0 address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts\\lib\\Helpers.sol\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\nlibrary Helpers {\r\n    function genUnencodedIntAddress(\r\n        bytes1 netByte,\r\n        bytes32 pubSpend,\r\n        bytes32 pubView,\r\n        bytes8 pId\r\n    ) internal pure returns (bytes memory) {\r\n        bytes memory preAddr = abi.encodePacked(\r\n            netByte,\r\n            pubSpend,\r\n            pubView,\r\n            pId\r\n        );\r\n        bytes4 preAddrHash = bytes4(\r\n            keccak256(preAddr) &\r\n                0xffffffff00000000000000000000000000000000000000000000000000000000\r\n        );\r\n        return abi.encodePacked(preAddr, preAddrHash);\r\n    }\r\n\r\n    function padLeft(\r\n        bytes memory source,\r\n        bytes1 padChar,\r\n        uint8 maxLen\r\n    ) internal pure returns (bytes memory) {\r\n        uint256 sourceLen = source.length;\r\n        if (sourceLen >= maxLen) return source;\r\n\r\n        bytes memory res = new bytes(maxLen);\r\n        for (uint256 i = 0; i < maxLen; i++) {\r\n            if (i < sourceLen) res[i] = source[i];\r\n            else res[i] = padChar;\r\n        }\r\n\r\n        return res;\r\n    }\r\n\r\n    function padRight(\r\n        bytes memory source,\r\n        bytes1 padChar,\r\n        uint8 maxLen\r\n    ) internal pure returns (bytes memory) {\r\n        uint256 sourceLen = source.length;\r\n        if (sourceLen >= maxLen) return source;\r\n\r\n        bytes memory res = new bytes(maxLen);\r\n        for (uint256 i = 0; i < maxLen; i++) {\r\n            if (i < maxLen - sourceLen) res[i] = padChar;\r\n            else res[i] = source[i - (maxLen - sourceLen)];\r\n        }\r\n\r\n        return res;\r\n    }\r\n\r\n    function hashEquals(bytes memory left, bytes memory right)\r\n        internal\r\n        pure\r\n        returns (bool)\r\n    {\r\n        if (left.length != right.length) return false;\r\n        for (uint256 i = 0; i < left.length; i++)\r\n            if (uint8(left[i]) - uint8(right[i]) != 0) return false;\r\n        return true;\r\n    }\r\n\r\n    function toBytes(uint256 _i) internal pure returns (bytes memory) {\r\n        if (_i == 0) return \"0\";\r\n\r\n        uint256 j = _i;\r\n        uint256 len;\r\n        while (j != 0) {\r\n            len++;\r\n            j /= 10;\r\n        }\r\n        bytes memory bstr = new bytes(len);\r\n        uint256 k = len - 1;\r\n        while (_i != 0) {\r\n            bstr[k--] = bytes1(uint8(48 + (_i % 10)));\r\n            _i /= 10;\r\n        }\r\n        return bstr;\r\n    }\r\n\r\n    function random() internal view returns (uint8) {\r\n        return\r\n            uint8(\r\n                uint256(\r\n                    keccak256(\r\n                        abi.encodePacked(block.timestamp, block.difficulty)\r\n                    )\r\n                ) % 0xFF\r\n            );\r\n    }\r\n\r\n    function random(uint256 height) internal view returns (bytes8) {\r\n        return\r\n            bytes8(\r\n                uint64(\r\n                    uint256(\r\n                        keccak256(\r\n                            abi.encodePacked(\r\n                                block.timestamp,\r\n                                block.difficulty,\r\n                                height\r\n                            )\r\n                        )\r\n                    ) % 0xFFFFFFFFFFFFFFFF\r\n                )\r\n            );\r\n    }\r\n}\r\n\r\n// File: contracts\\lib\\Monero.sol\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\nlibrary Monero {\r\n    using Helpers for bytes;\r\n    using Helpers for uint256;\r\n\r\n    uint8 constant full_block_size = 8;\r\n    uint8 constant full_encoded_block_size = 11;\r\n    bytes constant Alphabet = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\r\n    bytes9 constant encoded_block_sizes = 0x000203050607090a0b;\r\n\r\n    function b58_encode(bytes memory data) internal pure returns (bytes memory) {\r\n        uint256 full_block_count = data.length / full_block_size;\r\n        uint256 last_block_size = data.length % full_block_size;\r\n\r\n        uint256 res_size = (full_block_count * full_encoded_block_size) +\r\n            uint8(encoded_block_sizes[last_block_size]);\r\n\r\n        bytes memory res = new bytes(res_size);\r\n\r\n        for (uint256 i = 0; i < res_size; ++i) {\r\n            res[i] = Alphabet[0];\r\n        }\r\n\r\n        for (uint256 i = 0; i < full_block_count; i++) {\r\n            res = encodeBlock(\r\n                subarray(\r\n                    data,\r\n                    i * full_block_size,\r\n                    i * full_block_size + full_block_size\r\n                ),\r\n                res,\r\n                i * full_encoded_block_size\r\n            );\r\n        }\r\n        if (last_block_size > 0) {\r\n            res = encodeBlock(\r\n                subarray(\r\n                    data,\r\n                    full_block_count * full_block_size,\r\n                    full_block_count * full_block_size + last_block_size\r\n                ),\r\n                res,\r\n                full_block_count * full_encoded_block_size\r\n            );\r\n        }\r\n\r\n        return res;\r\n    }\r\n\r\n    function b58_decode(bytes memory data) internal pure returns (bytes memory) {\r\n        require(data.length > 0, \"Invalid address length\");\r\n\r\n        uint256 full_block_count = data.length / full_encoded_block_size;\r\n        uint256 last_block_size = data.length % full_encoded_block_size;\r\n\r\n        int256 lbds = indexOf(encoded_block_sizes, uint8(last_block_size));\r\n\r\n        require(lbds > 0, \"Invalid encoded length\");\r\n        uint256 last_block_decoded_size = uint256(lbds);\r\n\r\n        uint256 res_size = full_block_count *\r\n            full_block_size +\r\n            last_block_decoded_size;\r\n\r\n        bytes memory res = new bytes(res_size);\r\n\r\n        for (uint256 i = 0; i < full_block_count; i++) {\r\n            res = decodeBlock(\r\n                subarray(\r\n                    data,\r\n                    i * full_encoded_block_size,\r\n                    i * full_encoded_block_size + full_encoded_block_size\r\n                ),\r\n                res,\r\n                i * full_block_size\r\n            );\r\n        }\r\n        if (last_block_size > 0) {\r\n            res = decodeBlock(\r\n                subarray(\r\n                    data,\r\n                    full_block_count * full_encoded_block_size,\r\n                    full_block_count * full_encoded_block_size + last_block_size\r\n                ),\r\n                res,\r\n                full_block_count * full_block_size\r\n            );\r\n        }\r\n\r\n        return res;\r\n    }\r\n\r\n    function encodeBlock(\r\n        bytes memory data,\r\n        bytes memory buf,\r\n        uint256 index\r\n    ) private pure returns (bytes memory) {\r\n        require(\r\n            data.length > 1 || data.length <= full_block_size,\r\n            \"Invalid block length\"\r\n        );\r\n\r\n        uint64 num = toUint64(data);\r\n\r\n        uint256 i = uint8(encoded_block_sizes[data.length]) - 1;\r\n\r\n        while (num > 0) {\r\n            uint256 remainder = num % Alphabet.length;\r\n            num = uint64(num / Alphabet.length);\r\n            buf[index + i] = Alphabet[remainder];\r\n            i--;\r\n        }\r\n        return buf;\r\n    }\r\n\r\n    function decodeBlock(\r\n        bytes memory data,\r\n        bytes memory buf,\r\n        uint256 index\r\n    ) private pure returns (bytes memory) {\r\n        require(\r\n            data.length > 1 && data.length <= full_encoded_block_size,\r\n            \"Invalid block length\"\r\n        );\r\n\r\n        int256 res = indexOf(encoded_block_sizes, uint8(data.length));\r\n        require(res > 0, \"Invalid encoded length\");\r\n\r\n        uint256 res_size = uint256(res);\r\n        uint256 res_num = 0;\r\n        uint256 order = 1;\r\n\r\n        for (uint256 i = data.length; i > 0; i--) {\r\n            int256 digit = indexOf(Alphabet, uint8(data[i - 1]));\r\n            require(digit >= 0, \"Invalid symbol\");\r\n\r\n            res_num = (order * uint8(digit)) + res_num;\r\n            require(res_num < 2**64, \"Overflow1\");\r\n            order = order * Alphabet.length;\r\n        }\r\n        if (res_size < full_block_size && 2**(8 * res_size) <= res_num)\r\n            revert(\"Overflow2 \");\r\n\r\n        for (uint256 i = res_size; i > 0; i--) {\r\n            buf[index + i - 1] = bytes1(uint8(res_num % 0x100));\r\n            res_num = res_num / 0x100;\r\n        }\r\n        return buf;\r\n    }\r\n\r\n    function validateHex(bytes memory xmrAddress, bytes3 netBytes) internal pure {\r\n        bytes1 _netByteStd = netBytes[0];\r\n        bytes1 _netByteInt = netBytes[1];\r\n        bytes1 _netByteSub = netBytes[2];\r\n\r\n        require(\r\n            xmrAddress.length == 69 || xmrAddress.length == 77,\r\n            \"Invalid address length\"\r\n        );\r\n        require(\r\n            xmrAddress[0] == _netByteStd ||\r\n                xmrAddress[0] == _netByteInt ||\r\n                xmrAddress[0] == _netByteSub,\r\n            \"Invalid network byte\"\r\n        );\r\n        require(\r\n            (xmrAddress.length == 69 &&\r\n                (xmrAddress[0] == _netByteStd ||\r\n                    xmrAddress[0] == _netByteSub)) ||\r\n                (xmrAddress.length == 77 && xmrAddress[0] == _netByteInt),\r\n            \"Invalid address type\"\r\n        );\r\n\r\n        bytes memory preAddr = slice(xmrAddress, 0, xmrAddress.length - 4);\r\n        bytes memory preHash = slice(xmrAddress, xmrAddress.length - 4, 4);\r\n        bytes memory calcHash = abi.encodePacked(\r\n            bytes4(\r\n                keccak256(preAddr) &\r\n                    0xffffffff00000000000000000000000000000000000000000000000000000000\r\n            )\r\n        );\r\n        require(hashEquals(preHash, calcHash), \"Invalid address hash\");\r\n    }\r\n\r\n    function encodeAddress(\r\n        bytes memory xmrAddress,\r\n        bytes3 netBytes,\r\n        bool validate\r\n    ) internal pure returns (bytes memory) {\r\n        if (validate) validateHex(xmrAddress, netBytes);\r\n        return b58_encode(xmrAddress);\r\n    }\r\n\r\n    function decodeAddress(\r\n        bytes memory xmrAddress,\r\n        bytes3 netBytes,\r\n        bool validate\r\n    ) internal pure returns (bytes memory) {\r\n        if (validate) validateHex(xmrAddress, netBytes);\r\n        return b58_encode(xmrAddress);\r\n    }\r\n\r\n    function toStringAmount(uint256 amount)\r\n        internal\r\n        pure\r\n        returns (string memory)\r\n    {\r\n        uint256 amt = amount / 1000000000000;\r\n        uint256 rem = amount % 1000000000000;\r\n        string memory amts = string(amt.toBytes());\r\n        string memory rems = string(rem.toBytes().padRight(bytes1(\"0\"), 12));\r\n        return string(abi.encodePacked(amts, \".\", rems));\r\n    }\r\n\r\n    function slice(\r\n        bytes memory source,\r\n        uint256 start,\r\n        uint256 length\r\n    ) private pure returns (bytes memory) {\r\n        require(source.length >= start + length, \"Slice out of bounds\");\r\n\r\n        bytes memory tmpBytes = new bytes(length);\r\n        for (uint256 i = 0; i < length; i++) {\r\n            tmpBytes[i] = source[start + i];\r\n        }\r\n        return tmpBytes;\r\n    }\r\n\r\n    function hashEquals(bytes memory left, bytes memory right)\r\n        private\r\n        pure\r\n        returns (bool)\r\n    {\r\n        if (left.length != right.length) return false;\r\n        for (uint256 i = 0; i < left.length; i++)\r\n            if (uint8(left[i]) - uint8(right[i]) != 0) return false;\r\n        return true;\r\n    }\r\n\r\n    function toUint64(bytes memory _bytes) private pure returns (uint64) {\r\n        uint64 tempUint;\r\n        uint256 len = _bytes.length;\r\n        uint256 start = 8 - len;\r\n        assembly {\r\n            tempUint := mload(add(add(_bytes, len), start))\r\n        }\r\n        tempUint = tempUint >> (start * 8);\r\n        return tempUint;\r\n    }\r\n\r\n    function subarray(\r\n        bytes memory data,\r\n        uint256 begin,\r\n        uint256 end\r\n    ) private pure returns (bytes memory) {\r\n        bytes memory out = new bytes(end - begin);\r\n        for (uint256 i = 0; i < end - begin; i++) {\r\n            out[i] = data[i + begin];\r\n        }\r\n        return out;\r\n    }\r\n\r\n    function toBytes(bytes32 input) private pure returns (bytes memory) {\r\n        bytes memory output = new bytes(32);\r\n        for (uint8 i = 0; i < 32; i++) {\r\n            output[i] = input[i];\r\n        }\r\n        return output;\r\n    }\r\n\r\n    function equal(bytes memory one, bytes memory two)\r\n        private\r\n        pure\r\n        returns (bool)\r\n    {\r\n        if (!(one.length == two.length)) {\r\n            return false;\r\n        }\r\n        for (uint8 i = 0; i < one.length; i++) {\r\n            if (!(one[i] == two[i])) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function truncate(uint8[] memory array, uint8 length)\r\n        private\r\n        pure\r\n        returns (uint8[] memory)\r\n    {\r\n        uint8[] memory output = new uint8[](length);\r\n        for (uint8 i = 0; i < length; i++) {\r\n            output[i] = array[i];\r\n        }\r\n        return output;\r\n    }\r\n\r\n    function reverse(uint8[] memory input)\r\n        private\r\n        pure\r\n        returns (uint8[] memory)\r\n    {\r\n        uint8[] memory output = new uint8[](input.length);\r\n        for (uint8 i = 0; i < input.length; i++) {\r\n            output[i] = input[input.length - 1 - i];\r\n        }\r\n        return output;\r\n    }\r\n\r\n    function toAlphabet(uint8[] memory indices)\r\n        private\r\n        pure\r\n        returns (bytes memory)\r\n    {\r\n        bytes memory output = new bytes(indices.length);\r\n        for (uint8 i = 0; i < indices.length; i++) {\r\n            output[i] = Alphabet[indices[i]];\r\n        }\r\n        return output;\r\n    }\r\n\r\n    function indexOf(bytes9 array, uint8 v) private pure returns (int256) {\r\n        for (uint256 i = 0; i < 9; i++) {\r\n            if (uint8(array[i]) == v) return int256(i);\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    function indexOf(bytes memory array, uint8 v)\r\n        private\r\n        pure\r\n        returns (int256)\r\n    {\r\n        for (uint256 i = 0; i < array.length; i++) {\r\n            if (uint8(array[i]) == v) return int256(i);\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    function random() internal view returns (uint8) {\r\n        return\r\n            uint8(\r\n                uint256(\r\n                    keccak256(\r\n                        abi.encodePacked(block.timestamp, block.difficulty)\r\n                    )\r\n                ) % 0xFF\r\n            );\r\n    }\r\n\r\n    function random(uint256 height) internal view returns (bytes8) {\r\n        return\r\n            bytes8(\r\n                uint64(\r\n                    uint256(\r\n                        keccak256(\r\n                            abi.encodePacked(\r\n                                block.timestamp,\r\n                                block.difficulty,\r\n                                height\r\n                            )\r\n                        )\r\n                    ) % 0xFFFFFFFFFFFFFFFF\r\n                )\r\n            );\r\n    }\r\n}\r\n\r\n// File: contracts\\IWXMRAddress.sol\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\ninterface IWXMRAddress{\r\n    /**\r\n     * @dev Returns an account or integrated address\r\n     */\r\n    function getAddress() external returns (bytes memory xmrAddress);\r\n    function validateAddress(bytes memory xmrAddress, bool decode) external;\r\n    function b58_encode(bytes memory xmrAddress) external view returns(bytes memory);\r\n    function b58_decode(bytes memory xmrAddress) external view returns(bytes memory);\r\n    function encodeAddress(bytes memory xmrAddress) external view returns(bytes memory);\r\n    function decodeAddress(bytes memory xmrAddress) external view returns(bytes memory);\r\n}\r\n\r\n// File: contracts\\WXMRAddress.sol\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\ncontract WXMRAddress is Context, Ownable, IWXMRAddress {\r\n    address private _wxmr;\r\n\r\n    bytes3 private _netBytes;\r\n    bytes32 private _pubSpend;\r\n    bytes32 private _pubView;\r\n    uint256 private _intHeight;\r\n    bool private _intAddressEnabled = false;\r\n\r\n    bytes[] _xmrPool;\r\n\r\n    constructor (address wxmr) {\r\n        _wxmr = wxmr;\r\n    }\r\n    \r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyWxmr() {\r\n        require(_wxmr == _msgSender(), \"Ownable: caller is not WXMR\");\r\n        _;\r\n    }\r\n\r\n    /*\r\n     * @dev Function to set integrated addresses parameters\r\n     */\r\n    function setParameters(\r\n        bytes3 netBytes,\r\n        bytes32 pubSpend,\r\n        bytes32 pubView,\r\n        uint256 initialHeight,\r\n        bool intAddressEnabled\r\n    ) public onlyOwner {\r\n        _netBytes = netBytes;\r\n        _pubSpend = pubSpend;\r\n        _pubView = pubView;\r\n\r\n        if (initialHeight > 0)\r\n            _intHeight = initialHeight;\r\n\r\n        _intAddressEnabled = intAddressEnabled;\r\n        emit SetParameters(netBytes, pubSpend, pubView, intAddressEnabled);\r\n    }\r\n\r\n    /*\r\n     * @dev Function to get xmr addresses\r\n     */\r\n    function getAddress() override public onlyWxmr returns (bytes memory xmrAddress) {\r\n        if (_intAddressEnabled)\r\n            return getXmrIntegratedAddress();\r\n        return getXmrAddress();\r\n    }\r\n\r\n    /*\r\n     * @dev Function to validate xmr addresses\r\n     */\r\n    function validateAddress(bytes memory xmrAddress,bool decode) override public view onlyWxmr {\r\n        if (decode)\r\n            xmrAddress = Monero.b58_decode(xmrAddress);\r\n        Monero.validateHex(xmrAddress,_netBytes);\r\n    }\r\n     /*\r\n     * @dev Function to get address from pool\r\n     */\r\n    function getXmrAddress() private returns (bytes memory) {\r\n        require(_xmrPool.length > 0, \"No address available\");\r\n\r\n        bytes memory xmrAddress = _xmrPool[_xmrPool.length - 1];\r\n        _xmrPool.pop();\r\n        emit PoolSize(_xmrPool.length);\r\n\r\n        return xmrAddress;\r\n    }\r\n\r\n    /*\r\n     * @dev Function to get integrated address\r\n     */\r\n    function getXmrIntegratedAddress() private returns (bytes memory) {\r\n        _intHeight += Helpers.random();\r\n        bytes8 pId = Helpers.random(_intHeight);\r\n        return Helpers.genUnencodedIntAddress(\r\n            _netBytes[1],\r\n            _pubSpend,\r\n            _pubView,\r\n            pId\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Function get size of address pool\r\n     *     *\r\n     */\r\n    function getPoolSize() public view onlyOwner returns (uint256){\r\n        return _xmrPool.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Function empty address pool\r\n     *     *\r\n     */\r\n    function flushPool() public onlyOwner{\r\n        _xmrPool = new bytes[](0);\r\n    }\r\n\r\n    /**\r\n     * @dev Function address to pool\r\n     *     *\r\n     */\r\n    function pushAddress(bytes memory xmrAddress) public onlyOwner{\r\n        _xmrPool.push(xmrAddress);\r\n        emit PoolSize(_xmrPool.length);\r\n    }\r\n\r\n    /**\r\n     * @dev Function base58 encode XMR address\r\n     *     *\r\n     */\r\n    function b58_encode(bytes memory xmrAddress) override public pure returns(bytes memory){\r\n        return Monero.b58_encode(xmrAddress);\r\n    }\r\n    \r\n    /**\r\n     * @dev Function base58 decode XMR address\r\n     *     *\r\n     */\r\n    function b58_decode(bytes memory xmrAddress) override public pure returns(bytes memory){\r\n        return Monero.b58_decode(xmrAddress);\r\n    }\r\n\r\n    /**\r\n     * @dev Function base58 encode XMR address with hash check\r\n     *     *\r\n     */\r\n    function encodeAddress(bytes memory xmrAddress) override public view returns(bytes memory){\r\n        return Monero.encodeAddress(xmrAddress, _netBytes, true);\r\n    }\r\n    \r\n    /**\r\n     * @dev Function base58 decode XMR address with hash check\r\n     *     *\r\n     */\r\n    function decodeAddress(bytes memory xmrAddress) override public view returns(bytes memory){\r\n        return Monero.decodeAddress(xmrAddress, _netBytes, true);\r\n    }\r\n\r\n    event PoolSize(uint256 entries);\r\n     /**\r\n     * @dev Emitted when setting contract parameters\r\n     */\r\n    event SetParameters(\r\n        bytes3 netBytes, \r\n        bytes32 pubSpend,\r\n        bytes32 pubView, \r\n        bool intAddressEnabled\r\n    );\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wxmr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"entries\",\"type\":\"uint256\"}],\"name\":\"PoolSize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes3\",\"name\":\"netBytes\",\"type\":\"bytes3\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"pubSpend\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"pubView\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"intAddressEnabled\",\"type\":\"bool\"}],\"name\":\"SetParameters\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"xmrAddress\",\"type\":\"bytes\"}],\"name\":\"b58_decode\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"xmrAddress\",\"type\":\"bytes\"}],\"name\":\"b58_encode\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"xmrAddress\",\"type\":\"bytes\"}],\"name\":\"decodeAddress\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"xmrAddress\",\"type\":\"bytes\"}],\"name\":\"encodeAddress\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flushPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddress\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"xmrAddress\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"xmrAddress\",\"type\":\"bytes\"}],\"name\":\"pushAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes3\",\"name\":\"netBytes\",\"type\":\"bytes3\"},{\"internalType\":\"bytes32\",\"name\":\"pubSpend\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"pubView\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"initialHeight\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"intAddressEnabled\",\"type\":\"bool\"}],\"name\":\"setParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"xmrAddress\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"decode\",\"type\":\"bool\"}],\"name\":\"validateAddress\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"WXMRAddress","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000cf76715f101dcbfa3efc4ce635dd0a9f8a03de78","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://524ca41ed6fe9154da0163335dccd752d4b26bea91339013ef59ca457e68288f"}]}