{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.12;\r\n\r\n// SPDX-License-Identifier: GPL-3.0-only\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\n library SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IStafiStorage {\r\n\r\n    // Getters\r\n    function getAddress(bytes32 _key) external view returns (address);\r\n    function getUint(bytes32 _key) external view returns (uint);\r\n    function getString(bytes32 _key) external view returns (string memory);\r\n    function getBytes(bytes32 _key) external view returns (bytes memory);\r\n    function getBool(bytes32 _key) external view returns (bool);\r\n    function getInt(bytes32 _key) external view returns (int);\r\n    function getBytes32(bytes32 _key) external view returns (bytes32);\r\n\r\n    // Setters\r\n    function setAddress(bytes32 _key, address _value) external;\r\n    function setUint(bytes32 _key, uint _value) external;\r\n    function setString(bytes32 _key, string calldata _value) external;\r\n    function setBytes(bytes32 _key, bytes calldata _value) external;\r\n    function setBool(bytes32 _key, bool _value) external;\r\n    function setInt(bytes32 _key, int _value) external;\r\n    function setBytes32(bytes32 _key, bytes32 _value) external;\r\n\r\n    // Deleters\r\n    function deleteAddress(bytes32 _key) external;\r\n    function deleteUint(bytes32 _key) external;\r\n    function deleteString(bytes32 _key) external;\r\n    function deleteBytes(bytes32 _key) external;\r\n    function deleteBool(bytes32 _key) external;\r\n    function deleteInt(bytes32 _key) external;\r\n    function deleteBytes32(bytes32 _key) external;\r\n\r\n}\r\n\r\n\r\nabstract contract StafiBase {\r\n\r\n    // Version of the contract\r\n    uint8 public version;\r\n\r\n    // The main storage contract where primary persistant storage is maintained\r\n    IStafiStorage stafiStorage = IStafiStorage(0);\r\n\r\n\r\n    /**\r\n    * @dev Throws if called by any sender that doesn't match a network contract\r\n    */\r\n    modifier onlyLatestNetworkContract() {\r\n        require(getBool(keccak256(abi.encodePacked(\"contract.exists\", msg.sender))), \"Invalid or outdated network contract\");\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev Throws if called by any sender that doesn't match one of the supplied contract or is the latest version of that contract\r\n    */\r\n    modifier onlyLatestContract(string memory _contractName, address _contractAddress) {\r\n        require(_contractAddress == getAddress(keccak256(abi.encodePacked(\"contract.address\", _contractName))), \"Invalid or outdated contract\");\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev Throws if called by any sender that isn't a trusted node\r\n    */\r\n    modifier onlyTrustedNode(address _nodeAddress) {\r\n        require(getBool(keccak256(abi.encodePacked(\"node.trusted\", _nodeAddress))), \"Invalid trusted node\");\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev Throws if called by any sender that isn't a registered staking pool\r\n    */\r\n    modifier onlyRegisteredStakingPool(address _stakingPoolAddress) {\r\n        require(getBool(keccak256(abi.encodePacked(\"stakingpool.exists\", _stakingPoolAddress))), \"Invalid staking pool\");\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(roleHas(\"owner\", msg.sender), \"Account is not the owner\");\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev Modifier to scope access to admins\r\n    */\r\n    modifier onlyAdmin() {\r\n        require(roleHas(\"admin\", msg.sender), \"Account is not an admin\");\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev Modifier to scope access to admins\r\n    */\r\n    modifier onlySuperUser() {\r\n        require(roleHas(\"owner\", msg.sender) || roleHas(\"admin\", msg.sender), \"Account is not a super user\");\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev Reverts if the address doesn't have this role\r\n    */\r\n    modifier onlyRole(string memory _role) {\r\n        require(roleHas(_role, msg.sender), \"Account does not match the specified role\");\r\n        _;\r\n    }\r\n\r\n\r\n    /// @dev Set the main Storage address\r\n    constructor(address _stafiStorageAddress) public {\r\n        // Update the contract address\r\n        stafiStorage = IStafiStorage(_stafiStorageAddress);\r\n    }\r\n\r\n\r\n    /// @dev Get the address of a network contract by name\r\n    function getContractAddress(string memory _contractName) internal view returns (address) {\r\n        // Get the current contract address\r\n        address contractAddress = getAddress(keccak256(abi.encodePacked(\"contract.address\", _contractName)));\r\n        // Check it\r\n        require(contractAddress != address(0x0), \"Contract not found\");\r\n        // Return\r\n        return contractAddress;\r\n    }\r\n\r\n\r\n    /// @dev Get the name of a network contract by address\r\n    function getContractName(address _contractAddress) internal view returns (string memory) {\r\n        // Get the contract name\r\n        string memory contractName = getString(keccak256(abi.encodePacked(\"contract.name\", _contractAddress)));\r\n        // Check it\r\n        require(keccak256(abi.encodePacked(contractName)) != keccak256(abi.encodePacked(\"\")), \"Contract not found\");\r\n        // Return\r\n        return contractName;\r\n    }\r\n\r\n\r\n    /// @dev Storage get methods\r\n    function getAddress(bytes32 _key) internal view returns (address) { return stafiStorage.getAddress(_key); }\r\n    function getUint(bytes32 _key) internal view returns (uint256) { return stafiStorage.getUint(_key); }\r\n    function getString(bytes32 _key) internal view returns (string memory) { return stafiStorage.getString(_key); }\r\n    function getBytes(bytes32 _key) internal view returns (bytes memory) { return stafiStorage.getBytes(_key); }\r\n    function getBool(bytes32 _key) internal view returns (bool) { return stafiStorage.getBool(_key); }\r\n    function getInt(bytes32 _key) internal view returns (int256) { return stafiStorage.getInt(_key); }\r\n    function getBytes32(bytes32 _key) internal view returns (bytes32) { return stafiStorage.getBytes32(_key); }\r\n    function getAddressS(string memory _key) internal view returns (address) { return stafiStorage.getAddress(keccak256(abi.encodePacked(_key))); }\r\n    function getUintS(string memory _key) internal view returns (uint256) { return stafiStorage.getUint(keccak256(abi.encodePacked(_key))); }\r\n    function getStringS(string memory _key) internal view returns (string memory) { return stafiStorage.getString(keccak256(abi.encodePacked(_key))); }\r\n    function getBytesS(string memory _key) internal view returns (bytes memory) { return stafiStorage.getBytes(keccak256(abi.encodePacked(_key))); }\r\n    function getBoolS(string memory _key) internal view returns (bool) { return stafiStorage.getBool(keccak256(abi.encodePacked(_key))); }\r\n    function getIntS(string memory _key) internal view returns (int256) { return stafiStorage.getInt(keccak256(abi.encodePacked(_key))); }\r\n    function getBytes32S(string memory _key) internal view returns (bytes32) { return stafiStorage.getBytes32(keccak256(abi.encodePacked(_key))); }\r\n\r\n    /// @dev Storage set methods\r\n    function setAddress(bytes32 _key, address _value) internal { stafiStorage.setAddress(_key, _value); }\r\n    function setUint(bytes32 _key, uint256 _value) internal { stafiStorage.setUint(_key, _value); }\r\n    function setString(bytes32 _key, string memory _value) internal { stafiStorage.setString(_key, _value); }\r\n    function setBytes(bytes32 _key, bytes memory _value) internal { stafiStorage.setBytes(_key, _value); }\r\n    function setBool(bytes32 _key, bool _value) internal { stafiStorage.setBool(_key, _value); }\r\n    function setInt(bytes32 _key, int256 _value) internal { stafiStorage.setInt(_key, _value); }\r\n    function setBytes32(bytes32 _key, bytes32 _value) internal { stafiStorage.setBytes32(_key, _value); }\r\n    function setAddressS(string memory _key, address _value) internal { stafiStorage.setAddress(keccak256(abi.encodePacked(_key)), _value); }\r\n    function setUintS(string memory _key, uint256 _value) internal { stafiStorage.setUint(keccak256(abi.encodePacked(_key)), _value); }\r\n    function setStringS(string memory _key, string memory _value) internal { stafiStorage.setString(keccak256(abi.encodePacked(_key)), _value); }\r\n    function setBytesS(string memory _key, bytes memory _value) internal { stafiStorage.setBytes(keccak256(abi.encodePacked(_key)), _value); }\r\n    function setBoolS(string memory _key, bool _value) internal { stafiStorage.setBool(keccak256(abi.encodePacked(_key)), _value); }\r\n    function setIntS(string memory _key, int256 _value) internal { stafiStorage.setInt(keccak256(abi.encodePacked(_key)), _value); }\r\n    function setBytes32S(string memory _key, bytes32 _value) internal { stafiStorage.setBytes32(keccak256(abi.encodePacked(_key)), _value); }\r\n\r\n    /// @dev Storage delete methods\r\n    function deleteAddress(bytes32 _key) internal { stafiStorage.deleteAddress(_key); }\r\n    function deleteUint(bytes32 _key) internal { stafiStorage.deleteUint(_key); }\r\n    function deleteString(bytes32 _key) internal { stafiStorage.deleteString(_key); }\r\n    function deleteBytes(bytes32 _key) internal { stafiStorage.deleteBytes(_key); }\r\n    function deleteBool(bytes32 _key) internal { stafiStorage.deleteBool(_key); }\r\n    function deleteInt(bytes32 _key) internal { stafiStorage.deleteInt(_key); }\r\n    function deleteBytes32(bytes32 _key) internal { stafiStorage.deleteBytes32(_key); }\r\n    function deleteAddressS(string memory _key) internal { stafiStorage.deleteAddress(keccak256(abi.encodePacked(_key))); }\r\n    function deleteUintS(string memory _key) internal { stafiStorage.deleteUint(keccak256(abi.encodePacked(_key))); }\r\n    function deleteStringS(string memory _key) internal { stafiStorage.deleteString(keccak256(abi.encodePacked(_key))); }\r\n    function deleteBytesS(string memory _key) internal { stafiStorage.deleteBytes(keccak256(abi.encodePacked(_key))); }\r\n    function deleteBoolS(string memory _key) internal { stafiStorage.deleteBool(keccak256(abi.encodePacked(_key))); }\r\n    function deleteIntS(string memory _key) internal { stafiStorage.deleteInt(keccak256(abi.encodePacked(_key))); }\r\n    function deleteBytes32S(string memory _key) internal { stafiStorage.deleteBytes32(keccak256(abi.encodePacked(_key))); }\r\n\r\n\r\n    /**\r\n    * @dev Check if an address has this role\r\n    */\r\n    function roleHas(string memory _role, address _address) internal view returns (bool) {\r\n        return getBool(keccak256(abi.encodePacked(\"access.role\", _role, _address)));\r\n    }\r\n\r\n}\r\n\r\n\r\ninterface IStafiEther {\r\n    function balanceOf(address _contractAddress) external view returns (uint256);\r\n    function depositEther() external payable;\r\n    function withdrawEther(uint256 _amount) external;\r\n}\r\n\r\ninterface IStafiEtherWithdrawer {\r\n    function receiveEtherWithdrawal() external payable;\r\n}\r\n\r\n\r\n// ETH are stored here to prevent contract upgrades from affecting balances\r\n// The contract must not be upgraded\r\ncontract StafiEther is StafiBase, IStafiEther {\r\n\r\n    // Libs\r\n    using SafeMath for uint256;\r\n\r\n    // Contract balances\r\n    mapping(bytes32 => uint256) balances;\r\n\r\n    // Events\r\n    event EtherDeposited(bytes32 indexed by, uint256 amount, uint256 time);\r\n    event EtherWithdrawn(bytes32 indexed by, uint256 amount, uint256 time);\r\n\r\n\t// Construct\r\n    constructor(address _stafiStorageAddress) StafiBase(_stafiStorageAddress) public {\r\n        version = 1;\r\n    }\r\n\r\n    // Get a contract's ETH balance by address\r\n    function balanceOf(address _contractAddress) override public view returns (uint256) {\r\n        return balances[keccak256(abi.encodePacked(getContractName(_contractAddress)))];\r\n    }\r\n\r\n    // Accept an ETH deposit from a network contract\r\n    function depositEther() override external payable onlyLatestNetworkContract {\r\n        // Get contract key\r\n        bytes32 contractKey = keccak256(abi.encodePacked(getContractName(msg.sender)));\r\n        // Update contract balance\r\n        balances[contractKey] = balances[contractKey].add(msg.value);\r\n        // Emit ether deposited event\r\n        emit EtherDeposited(contractKey, msg.value, now);\r\n    }\r\n\r\n    // Withdraw an amount of ETH to a network contract\r\n    function withdrawEther(uint256 _amount) override external onlyLatestNetworkContract {\r\n        // Get contract key\r\n        bytes32 contractKey = keccak256(abi.encodePacked(getContractName(msg.sender)));\r\n        // Check and update contract balance\r\n        require(balances[contractKey] >= _amount, \"Insufficient contract ETH balance\");\r\n        balances[contractKey] = balances[contractKey].sub(_amount);\r\n        // Withdraw\r\n        IStafiEtherWithdrawer withdrawer = IStafiEtherWithdrawer(msg.sender);\r\n        withdrawer.receiveEtherWithdrawal{value: _amount}();\r\n        // Emit ether withdrawn event\r\n        emit EtherWithdrawn(contractKey, _amount, now);\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stafiStorageAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"by\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"EtherDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"by\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"EtherWithdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositEther\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StafiEther","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000006c2f7b6110a37b3b0fbdd811876be368df02e8b0","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://127cb9446533f0a9352d4f96229d6d9aa2a8714a7fbb78e89db61ccde9d51ca9"}]}