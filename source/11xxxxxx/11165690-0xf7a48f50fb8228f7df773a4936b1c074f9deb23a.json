{"status":"1","message":"OK","result":[{"SourceCode":"// Copyright (C) 2020 Easy Chain. <https://easychain.tech>\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\r\n\r\npragma experimental ABIEncoderV2;\r\npragma solidity 0.6.5;\r\n\r\ninterface ERC20 {\r\n    function approve(address, uint256) external returns (bool);\r\n    function transfer(address, uint256) external returns (bool);\r\n    function transferFrom(address, address, uint256) external returns (bool);\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address) external view returns (uint256);\r\n}\r\n\r\n\r\nstruct ProtocolBalance {\r\n    ProtocolMetadata metadata;\r\n    AdapterBalance[] adapterBalances;\r\n}\r\n\r\n\r\nstruct ProtocolMetadata {\r\n    string name;\r\n    string description;\r\n    string websiteURL;\r\n    string iconURL;\r\n    uint256 version;\r\n}\r\n\r\n\r\nstruct AdapterBalance {\r\n    AdapterMetadata metadata;\r\n    FullTokenBalance[] balances;\r\n}\r\n\r\n\r\nstruct AdapterMetadata {\r\n    address adapterAddress;\r\n    string adapterType; // \"Asset\", \"Debt\"\r\n}\r\n\r\n\r\n// token and its underlying tokens (if exist) balances\r\nstruct FullTokenBalance {\r\n    TokenBalance base;\r\n    TokenBalance[] underlying;\r\n}\r\n\r\n\r\nstruct TokenBalance {\r\n    TokenMetadata metadata;\r\n    uint256 amount;\r\n}\r\n\r\n\r\n// ERC20-style token metadata\r\n// 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE address is used for ETH\r\nstruct TokenMetadata {\r\n    address token;\r\n    string name;\r\n    string symbol;\r\n    uint8 decimals;\r\n}\r\n\r\n\r\nstruct Component {\r\n    address token;\r\n    string tokenType;  // \"ERC20\" by default\r\n    uint256 rate;  // price per full share (1e18)\r\n}\r\n\r\n\r\ninterface IOneSplit {\r\n\r\n    function getExpectedReturn(\r\n        ERC20 fromToken,\r\n        ERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags\r\n    )\r\n        external\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256[] memory distribution\r\n        );\r\n}\r\n\r\ninterface IAdapterRegistry {\r\n\r\n    function getFinalFullTokenBalance(\r\n        string calldata tokenType,\r\n        address token\r\n    )\r\n        external\r\n        view\r\n        returns (FullTokenBalance memory);\r\n\r\n    function getFullTokenBalance(\r\n        string calldata tokenType,\r\n        address token\r\n    )\r\n        external\r\n        view\r\n        returns (FullTokenBalance memory);\r\n}\r\n\r\ninterface IBerezkaPriceOverride {\r\n\r\n    function computePrice(\r\n        address _token,\r\n        uint256 _amount\r\n    ) \r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function hasOverride(\r\n        address _token\r\n    ) \r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n}\r\n\r\nstruct AdaptedBalance {\r\n    address token;\r\n    int256 amount; // can be negative, thus int\r\n}\r\n\r\n/**\r\n * @dev BerezkaPriceTracker contract.\r\n * This adapter provides on chain price tracking using 1inch exchange api\r\n * @author Vasin Denis <denis.vasin@easychain.tech>\r\n */\r\ncontract BerezkaPriceTracker {\r\n\r\n    string BEREZKA = \"Berezka DAO\";\r\n\r\n    address internal constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n\r\n    ERC20 immutable USDC = ERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\r\n    ERC20 immutable DAI  = ERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F);\r\n    ERC20 immutable USDT = ERC20(0xdAC17F958D2ee523a2206206994597C13D831ec7);\r\n\r\n    IOneSplit immutable iOneSplit = IOneSplit(0xC586BeF4a0992C495Cf22e1aeEE4E446CECDee0E);\r\n    IAdapterRegistry adapterRegistry;\r\n    IBerezkaPriceOverride berezkaPriceOverride;\r\n\r\n    constructor(address _registryAddress, address _berezkaPriceOverride) public {\r\n        require(_registryAddress != address(0), \"Regisry address should be set\");\r\n        require(_berezkaPriceOverride != address(0), \"Price Override address should be set\");\r\n\r\n        adapterRegistry = IAdapterRegistry(_registryAddress);\r\n        berezkaPriceOverride = IBerezkaPriceOverride(_berezkaPriceOverride);\r\n    }\r\n\r\n    function getPrice(\r\n        address _token\r\n    ) \r\n        public\r\n        view \r\n        returns (int256) \r\n    {\r\n        AdaptedBalance[] memory nonEmptyBalances\r\n            = getNonEmptyTokenBalances(_token);\r\n        return _getTokenBalancePrice(nonEmptyBalances); \r\n    }\r\n\r\n\r\n    // Internal functions\r\n\r\n    function _getTokenBalancePrice(\r\n        AdaptedBalance[] memory _balances\r\n    )\r\n        internal\r\n        view\r\n        returns (int256) \r\n    {\r\n        int256 result = 0;\r\n        uint256 length = _balances.length;\r\n        for (uint256 i = 0; i < length; i++) {\r\n            result += getTokenPrice(_balances[i].amount, _balances[i].token);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function getNonEmptyTokenBalances(\r\n        address _token\r\n    ) \r\n        public\r\n        view \r\n        returns (AdaptedBalance[] memory) \r\n    {\r\n        FullTokenBalance memory fullTokenBalance\r\n            = adapterRegistry.getFinalFullTokenBalance(BEREZKA, _token);\r\n        TokenBalance[] memory tokenBalances = fullTokenBalance.underlying;\r\n        uint256 count = 0;\r\n        uint256 length = tokenBalances.length;\r\n        for (uint256 i = 0; i < length; i++) {\r\n            if (tokenBalances[i].amount > 0) {\r\n                count++;\r\n            }\r\n        }\r\n        AdaptedBalance[] memory result = new AdaptedBalance[](count);\r\n        uint256 index = 0;\r\n        for (uint256 i = 0; i < length; i++) {\r\n            if (tokenBalances[i].amount > 0) {\r\n                result[index] = AdaptedBalance(\r\n                    tokenBalances[i].metadata.token,\r\n                    normalizeTokenPrice(tokenBalances[i].amount)\r\n                );\r\n                index++;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function normalizeTokenPrice(\r\n        uint256 _amount\r\n    )\r\n        public\r\n        pure\r\n        returns (int256)\r\n    {\r\n        return int256(_amount * 1e18) / 1e18;\r\n    }\r\n\r\n    function unsignedWithSign(\r\n        int256 _amount\r\n    )\r\n        public\r\n        pure\r\n        returns (int8, uint256)\r\n    {\r\n        int8     sign      = _amount < 0 ? -1 : int8(1);\r\n        uint256  absAmount = _amount < 0 ? uint256(-_amount) : uint256(_amount);\r\n        return (sign, absAmount);\r\n    }\r\n\r\n    function getTokenPrice(\r\n        int256 _amount,\r\n        address _token\r\n    )\r\n        public\r\n        view\r\n        returns (int256) \r\n    {\r\n        if (!berezkaPriceOverride.hasOverride(_token)) {\r\n            return getExchangeTokenPrice(_amount, _token);\r\n        } else {\r\n            int256 result = getOverrideTokenPrice(_amount, _token);\r\n            if (result == 0) {\r\n                result = getExchangeTokenPrice(_amount, _token);\r\n            }\r\n            return result;\r\n        }\r\n    }\r\n\r\n    function getOverrideTokenPrice(\r\n        int256 _amount,\r\n        address _token\r\n    )\r\n        public\r\n        view\r\n        returns (int256) \r\n    {\r\n        (int8 sign, uint256 absAmount) = unsignedWithSign(_amount);\r\n        uint256 price = berezkaPriceOverride.computePrice(_token, absAmount);\r\n        return sign * int256(price);\r\n    }\r\n\r\n    function getExchangeTokenPrice(\r\n        int256 _amount,\r\n        address _token\r\n    )\r\n        public\r\n        view\r\n        returns (int256) \r\n    {\r\n        (int8 sign, uint256 absAmount) = unsignedWithSign(_amount);\r\n\r\n        ERC20    token     = ERC20(_token);\r\n        uint8    count     = 0;\r\n        \r\n        uint256 priceUSDC = _getExpectedReturn(token, USDC, absAmount);\r\n        if (priceUSDC > 0) {\r\n            count++;\r\n        }\r\n\r\n        uint256 priceUSDT = _getExpectedReturn(token, USDT, absAmount);\r\n        if (priceUSDT > 0) {\r\n            count++;\r\n        }\r\n\r\n        uint256 priceDAIUSDC = 0;\r\n        uint256 priceDAI = _getExpectedReturn(token, DAI, absAmount);\r\n        if (priceDAI > 0) {\r\n            priceDAIUSDC = _getExpectedReturn(DAI, USDC, priceDAI);\r\n            if (priceDAIUSDC > 0) {\r\n                count++;\r\n            }\r\n        }\r\n\r\n        if (count == 0) {\r\n            return 0;\r\n        } else {\r\n            return sign * int256(((priceUSDC + priceDAIUSDC + priceUSDT) / count));\r\n        }\r\n    }\r\n\r\n    function getExpectedReturn(\r\n        ERC20 _fromToken,\r\n        ERC20 _destToken,\r\n        uint256 _amount\r\n    )\r\n        public\r\n        view\r\n        returns (uint256) \r\n    {\r\n        return _getExpectedReturn(_fromToken, _destToken, _amount);    \r\n    }\r\n\r\n    function _getExpectedReturn(\r\n        ERC20 _fromToken,\r\n        ERC20 _destToken,\r\n        uint256 _amount\r\n    )\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        try iOneSplit.getExpectedReturn(\r\n            _fromToken,\r\n            _destToken,\r\n            _amount,\r\n            1,\r\n            0\r\n        ) returns (uint256 returnAmount, uint256[] memory) {\r\n            return returnAmount;\r\n        } catch {\r\n            return 0;\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_berezkaPriceOverride\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_amount\",\"type\":\"int256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getExchangeTokenPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"_destToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getExpectedReturn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getNonEmptyTokenBalances\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"amount\",\"type\":\"int256\"}],\"internalType\":\"struct AdaptedBalance[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_amount\",\"type\":\"int256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getOverrideTokenPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_amount\",\"type\":\"int256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getTokenPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"normalizeTokenPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_amount\",\"type\":\"int256\"}],\"name\":\"unsignedWithSign\",\"outputs\":[{\"internalType\":\"int8\",\"name\":\"\",\"type\":\"int8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"BerezkaPriceTracker","CompilerVersion":"v0.6.5+commit.f956cc89","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000006fe76b2f432fdfecaef1a7d4f6c3d41b58616720000000000000000000000003ebd4b37e4780f9eb37e9c11e248ba8bc90fe9d8","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ce1bf4a5a7e35ec5a18f8700fa54b26628d4291be9c2848fca37e9041bfe874c"}]}