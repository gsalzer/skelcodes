{"status":"1","message":"OK","result":[{"SourceCode":"{\"Admin.sol\":{\"content\":\"/* SPDX-License-Identifier: MIT */\\npragma solidity ^0.7.0;\\n\\nimport \\\"./AdminInterface.sol\\\";\\n\\n/**\\n * @title Admin\\n * @author Paul Razvan Berg\\n * @notice Contract module which provides a basic access control mechanism, where there is\\n * an account (an admin) that can be granted exclusive access to specific functions.\\n *\\n * By default, the admin account will be the one that deploys the contract. This can later\\n * be changed with {transferAdmin}.\\n *\\n * This module is used through inheritance. It will make available the modifier `onlyAdmin`,\\n * which can be applied to your functions to restrict their use to the admin.\\n *\\n * @dev Forked from OpenZeppelin\\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.1.0/contracts/access/Ownable.sol\\n */\\nabstract contract Admin is AdminInterface {\\n    /**\\n     * @notice Throws if called by any account other than the admin.\\n     */\\n    modifier onlyAdmin() {\\n        require(admin == msg.sender, \\\"ERR_NOT_ADMIN\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initializes the contract setting the deployer as the initial admin.\\n     */\\n    constructor() {\\n        address msgSender = msg.sender;\\n        admin = msgSender;\\n        emit TransferAdmin(address(0x00), msgSender);\\n    }\\n\\n    /**\\n     * @notice Leaves the contract without admin, so it will not be possible to call\\n     * `onlyAdmin` functions anymore.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must be the administrator.\\n     *\\n     * WARNING: Doing this will leave the contract without an admin,\\n     * thereby removing any functionality that is only available to the admin.\\n     */\\n    function _renounceAdmin() external virtual override onlyAdmin {\\n        emit TransferAdmin(admin, address(0x00));\\n        admin = address(0x00);\\n    }\\n\\n    /**\\n     * @notice Transfers the admin of the contract to a new account (`newAdmin`).\\n     * Can only be called by the current admin.\\n     * @param newAdmin The acount of the new admin.\\n     */\\n    function _transferAdmin(address newAdmin) external virtual override onlyAdmin {\\n        require(newAdmin != address(0x00), \\\"ERR_SET_ADMIN_ZERO_ADDRESS\\\");\\n        emit TransferAdmin(admin, newAdmin);\\n        admin = newAdmin;\\n    }\\n}\\n\"},\"AdminInterface.sol\":{\"content\":\"/* SPDX-License-Identifier: MIT */\\npragma solidity ^0.7.0;\\n\\nimport \\\"./AdminStorage.sol\\\";\\n\\n/**\\n * @title AdminInterface\\n * @author Paul Razvan Berg\\n */\\nabstract contract AdminInterface is AdminStorage {\\n    /**\\n     * NON-CONSTANT FUNCTIONS\\n     */\\n    function _renounceAdmin() external virtual;\\n\\n    function _transferAdmin(address newAdmin) external virtual;\\n\\n    /**\\n     * EVENTS\\n     */\\n    event TransferAdmin(address indexed oldAdmin, address indexed newAdmin);\\n}\\n\"},\"AdminStorage.sol\":{\"content\":\"/* SPDX-License-Identifier: MIT */\\npragma solidity ^0.7.0;\\n\\nabstract contract AdminStorage {\\n    /**\\n     * @notice The address of the administrator account or contract.\\n     */\\n    address public admin;\\n}\\n\"},\"AggregatorV3Interface.sol\":{\"content\":\"/* SPDX-License-Identifier: LGPL-3.0-or-later */\\npragma solidity ^0.7.0;\\n\\n/**\\n * @title AggregatorV3Interface\\n * @author Hifi\\n * @dev Forked from Chainlink\\n * https://github.com/smartcontractkit/chainlink/blob/v0.9.9/evm-contracts/src/v0.7/interfaces/AggregatorV3Interface.sol\\n */\\ninterface AggregatorV3Interface {\\n    function decimals() external view returns (uint8);\\n\\n    function description() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n\\n    /*\\n     * getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n     * if they do not have data to report, instead of returning unset values\\n     * which could be misinterpreted as actual reported values.\\n     */\\n    function getRoundData(uint80 _roundId)\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\"},\"BalanceSheetInterface.sol\":{\"content\":\"/* SPDX-License-Identifier: LGPL-3.0-or-later */\\npragma solidity ^0.7.0;\\n\\nimport \\\"./BalanceSheetStorage.sol\\\";\\n\\n/**\\n * @title BalanceSheetInterface\\n * @author Hifi\\n */\\nabstract contract BalanceSheetInterface is BalanceSheetStorage {\\n    /**\\n     * CONSTANT FUNCTIONS\\n     */\\n    function getClutchableCollateral(FyTokenInterface fyToken, uint256 repayAmount)\\n        external\\n        view\\n        virtual\\n        returns (uint256);\\n\\n    function getCurrentCollateralizationRatio(FyTokenInterface fyToken, address borrower)\\n        public\\n        view\\n        virtual\\n        returns (uint256);\\n\\n    function getHypotheticalCollateralizationRatio(\\n        FyTokenInterface fyToken,\\n        address borrower,\\n        uint256 lockedCollateral,\\n        uint256 debt\\n    ) public view virtual returns (uint256);\\n\\n    function getVault(FyTokenInterface fyToken, address borrower)\\n        external\\n        view\\n        virtual\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            bool\\n        );\\n\\n    function getVaultDebt(FyTokenInterface fyToken, address borrower) external view virtual returns (uint256);\\n\\n    function getVaultLockedCollateral(FyTokenInterface fyToken, address borrower)\\n        external\\n        view\\n        virtual\\n        returns (uint256);\\n\\n    function isAccountUnderwater(FyTokenInterface fyToken, address borrower) external view virtual returns (bool);\\n\\n    function isVaultOpen(FyTokenInterface fyToken, address borrower) external view virtual returns (bool);\\n\\n    /**\\n     * NON-CONSTANT FUNCTIONS\\n     */\\n\\n    function clutchCollateral(\\n        FyTokenInterface fyToken,\\n        address liquidator,\\n        address borrower,\\n        uint256 clutchedCollateralAmount\\n    ) external virtual returns (bool);\\n\\n    function depositCollateral(FyTokenInterface fyToken, uint256 collateralAmount) external virtual returns (bool);\\n\\n    function freeCollateral(FyTokenInterface fyToken, uint256 collateralAmount) external virtual returns (bool);\\n\\n    function lockCollateral(FyTokenInterface fyToken, uint256 collateralAmount) external virtual returns (bool);\\n\\n    function openVault(FyTokenInterface fyToken) external virtual returns (bool);\\n\\n    function setVaultDebt(\\n        FyTokenInterface fyToken,\\n        address borrower,\\n        uint256 newVaultDebt\\n    ) external virtual returns (bool);\\n\\n    function withdrawCollateral(FyTokenInterface fyToken, uint256 collateralAmount) external virtual returns (bool);\\n\\n    /**\\n     * EVENTS\\n     */\\n\\n    event ClutchCollateral(\\n        FyTokenInterface indexed fyToken,\\n        address indexed liquidator,\\n        address indexed borrower,\\n        uint256 clutchedCollateralAmount\\n    );\\n\\n    event DepositCollateral(FyTokenInterface indexed fyToken, address indexed borrower, uint256 collateralAmount);\\n\\n    event FreeCollateral(FyTokenInterface indexed fyToken, address indexed borrower, uint256 collateralAmount);\\n\\n    event LockCollateral(FyTokenInterface indexed fyToken, address indexed borrower, uint256 collateralAmount);\\n\\n    event OpenVault(FyTokenInterface indexed fyToken, address indexed borrower);\\n\\n    event SetVaultDebt(FyTokenInterface indexed fyToken, address indexed borrower, uint256 oldDebt, uint256 newDebt);\\n\\n    event WithdrawCollateral(FyTokenInterface indexed fyToken, address indexed borrower, uint256 collateralAmount);\\n}\\n\"},\"BalanceSheetStorage.sol\":{\"content\":\"/* SPDX-License-Identifier: LGPL-3.0-or-later */\\npragma solidity ^0.7.0;\\n\\nimport \\\"./FyTokenInterface.sol\\\";\\n\\n/**\\n * @title BalanceSheetStorage\\n * @author Hifi\\n */\\nabstract contract BalanceSheetStorage {\\n    struct Vault {\\n        uint256 debt;\\n        uint256 freeCollateral;\\n        uint256 lockedCollateral;\\n        bool isOpen;\\n    }\\n\\n    /**\\n     * @notice The unique Fintroller associated with this contract.\\n     */\\n    FintrollerInterface public fintroller;\\n\\n    /**\\n     * @dev One vault for each fyToken for each account.\\n     */\\n    mapping(address =\\u003e mapping(address =\\u003e Vault)) internal vaults;\\n\\n    /**\\n     * @notice Indicator that this is a BalanceSheet contract, for inspection.\\n     */\\n    bool public constant isBalanceSheet = true;\\n}\\n\"},\"CarefulMath.sol\":{\"content\":\"/* SPDX-License-Identifier: MIT */\\npragma solidity ^0.7.0;\\n\\n/**\\n * @notice Possible error codes that can be returned.\\n */\\nenum MathError { NO_ERROR, DIVISION_BY_ZERO, INTEGER_OVERFLOW, INTEGER_UNDERFLOW, MODULO_BY_ZERO }\\n\\n/**\\n * @title CarefulMath\\n * @author Paul Razvan Berg\\n * @notice Exponential module for storing fixed-precision decimals.\\n * @dev Forked from Compound\\n * https://github.com/compound-finance/compound-protocol/blob/v2.8.1/contracts/CarefulMath.sol\\n */\\nabstract contract CarefulMath {\\n    /**\\n     * @notice Adds two numbers, returns an error on overflow.\\n     */\\n    function addUInt(uint256 a, uint256 b) internal pure returns (MathError, uint256) {\\n        uint256 c = a + b;\\n\\n        if (c \\u003e= a) {\\n            return (MathError.NO_ERROR, c);\\n        } else {\\n            return (MathError.INTEGER_OVERFLOW, 0);\\n        }\\n    }\\n\\n    /**\\n     * @notice Add `a` and `b` and then subtract `c`.\\n     */\\n    function addThenSubUInt(\\n        uint256 a,\\n        uint256 b,\\n        uint256 c\\n    ) internal pure returns (MathError, uint256) {\\n        (MathError err0, uint256 sum) = addUInt(a, b);\\n\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, 0);\\n        }\\n\\n        return subUInt(sum, c);\\n    }\\n\\n    /**\\n     * @notice Integer division of two numbers, truncating the quotient.\\n     */\\n    function divUInt(uint256 a, uint256 b) internal pure returns (MathError, uint256) {\\n        if (b == 0) {\\n            return (MathError.DIVISION_BY_ZERO, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, a / b);\\n    }\\n\\n    /**\\n     * @notice Returns the remainder of dividing two numbers.\\n     * @dev Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     */\\n    function modUInt(uint256 a, uint256 b) internal pure returns (MathError, uint256) {\\n        if (b == 0) {\\n            return (MathError.MODULO_BY_ZERO, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, a % b);\\n    }\\n\\n    /**\\n     * @notice Multiplies two numbers, returns an error on overflow.\\n     */\\n    function mulUInt(uint256 a, uint256 b) internal pure returns (MathError, uint256) {\\n        if (a == 0) {\\n            return (MathError.NO_ERROR, 0);\\n        }\\n\\n        uint256 c = a * b;\\n\\n        if (c / a != b) {\\n            return (MathError.INTEGER_OVERFLOW, 0);\\n        } else {\\n            return (MathError.NO_ERROR, c);\\n        }\\n    }\\n\\n    /**\\n     * @notice Subtracts two numbers, returns an error on overflow (i.e. if subtrahend is greater than minuend).\\n     */\\n    function subUInt(uint256 a, uint256 b) internal pure returns (MathError, uint256) {\\n        if (b \\u003c= a) {\\n            return (MathError.NO_ERROR, a - b);\\n        } else {\\n            return (MathError.INTEGER_UNDERFLOW, 0);\\n        }\\n    }\\n}\\n\"},\"ChainlinkOperatorInterface.sol\":{\"content\":\"/* SPDX-License-Identifier: LGPL-3.0-or-later */\\npragma solidity ^0.7.0;\\n\\nimport \\\"./CarefulMath.sol\\\";\\nimport \\\"./Erc20Interface.sol\\\";\\n\\nimport \\\"./ChainlinkOperatorStorage.sol\\\";\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\n/**\\n * @title ChainlinkOperatorInterface\\n * @author Hifi\\n */\\nabstract contract ChainlinkOperatorInterface is ChainlinkOperatorStorage {\\n    /**\\n     * EVENTS\\n     */\\n    event DeleteFeed(Erc20Interface indexed asset, AggregatorV3Interface indexed feed);\\n\\n    event SetFeed(Erc20Interface indexed asset, AggregatorV3Interface indexed feed);\\n\\n    /**\\n     * CONSTANT FUNCTIONS.\\n     */\\n    function getAdjustedPrice(string memory symbol) external view virtual returns (uint256);\\n\\n    function getFeed(string memory symbol)\\n        external\\n        view\\n        virtual\\n        returns (\\n            Erc20Interface,\\n            AggregatorV3Interface,\\n            bool\\n        );\\n\\n    function getPrice(string memory symbol) public view virtual returns (uint256);\\n\\n    /**\\n     * NON-CONSTANT FUNCTIONS.\\n     */\\n    function deleteFeed(string memory symbol) external virtual returns (bool);\\n\\n    function setFeed(Erc20Interface asset, AggregatorV3Interface feed) external virtual returns (bool);\\n}\\n\"},\"ChainlinkOperatorStorage.sol\":{\"content\":\"/* SPDX-License-Identifier: LGPL-3.0-or-later */\\npragma solidity ^0.7.0;\\n\\nimport \\\"./Erc20Interface.sol\\\";\\n\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\n/**\\n * @title ChainlinkOperatorStorage\\n * @author Hifi\\n */\\nabstract contract ChainlinkOperatorStorage {\\n    struct Feed {\\n        Erc20Interface asset;\\n        AggregatorV3Interface id;\\n        bool isSet;\\n    }\\n\\n    /**\\n     * @dev Mapping between Erc20 symbols and Feed structs.\\n     */\\n    mapping(string =\\u003e Feed) internal feeds;\\n\\n    /**\\n     * @notice Chainlink price precision for USD-quoted data.\\n     */\\n    uint256 public constant pricePrecision = 8;\\n\\n    /**\\n     * @notice The ratio between mantissa precision (1e18) and the Chainlink price precision (1e8).\\n     */\\n    uint256 public constant pricePrecisionScalar = 1.0e10;\\n}\\n\"},\"Erc20Interface.sol\":{\"content\":\"/* SPDX-License-Identifier: MIT */\\npragma solidity ^0.7.0;\\n\\nimport \\\"./Erc20Storage.sol\\\";\\n\\n/**\\n * @title Erc20Interface\\n * @author Paul Razvan Berg\\n * @notice Interface of the Erc20 standard\\n * @dev Forked from OpenZeppelin\\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.2.0/contracts/token/ERC20/IERC20.sol\\n */\\nabstract contract Erc20Interface is Erc20Storage {\\n    /**\\n     * CONSTANT FUNCTIONS\\n     */\\n    function allowance(address owner, address spender) external view virtual returns (uint256);\\n\\n    function balanceOf(address account) external view virtual returns (uint256);\\n\\n    /**\\n     * NON-CONSTANT FUNCTIONS\\n     */\\n    function approve(address spender, uint256 amount) external virtual returns (bool);\\n\\n    function transfer(address recipient, uint256 amount) external virtual returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external virtual returns (bool);\\n\\n    /**\\n     * EVENTS\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    event Burn(address indexed holder, uint256 burnAmount);\\n\\n    event Mint(address indexed beneficiary, uint256 mintAmount);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n}\\n\"},\"Erc20Storage.sol\":{\"content\":\"/* SPDX-License-Identifier: MIT */\\npragma solidity ^0.7.0;\\n\\n/**\\n * @title ExponentialStorage\\n * @author Paul Razvan Berg\\n * @notice The storage interface ancillary to an Erc20 contract.\\n */\\nabstract contract Erc20Storage {\\n    /**\\n     * @notice Returns the number of decimals used to get its user representation.\\n     */\\n    uint8 public decimals;\\n\\n    /**\\n     * @notice Returns the name of the token.\\n     */\\n    string public name;\\n\\n    /**\\n     * @notice Returns the symbol of the token, usually a shorter version of\\n     * the name.\\n     */\\n    string public symbol;\\n\\n    /**\\n     * @notice Returns the amount of tokens in existence.\\n     */\\n    uint256 public totalSupply;\\n\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) internal allowances;\\n\\n    mapping(address =\\u003e uint256) internal balances;\\n}\\n\"},\"Exponential.sol\":{\"content\":\"/* SPDX-License-Identifier: MIT */\\npragma solidity ^0.7.0;\\n\\nimport \\\"./CarefulMath.sol\\\";\\nimport \\\"./ExponentialStorage.sol\\\";\\n\\n/**\\n * @title Exponential module for storing fixed-precision decimals.\\n * @author Paul Razvan Berg\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\n * Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is: `Exp({mantissa: 5100000000000000000})`.\\n * @dev Forked from Compound\\n * https://github.com/compound-finance/compound-protocol/blob/v2.6/contracts/Exponential.sol\\n */\\nabstract contract Exponential is\\n    CarefulMath, /* no dependency */\\n    ExponentialStorage /* no dependency */\\n{\\n    /**\\n     * @dev Adds two exponentials, returning a new exponential.\\n     */\\n    function addExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\n        (MathError error, uint256 result) = addUInt(a.mantissa, b.mantissa);\\n\\n        return (error, Exp({ mantissa: result }));\\n    }\\n\\n    /**\\n     * @dev Divides two exponentials, returning a new exponential.\\n     * (a/scale) / (b/scale) = (a/scale) * (scale/b) = a/b.\\n     * NOTE: Returns an error if (`num` * 10e18) \\u003e MAX_INT, or if `denom` is zero.\\n     */\\n    function divExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\n        (MathError err0, uint256 scaledNumerator) = mulUInt(a.mantissa, expScale);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({ mantissa: 0 }));\\n        }\\n\\n        (MathError err1, uint256 rational) = divUInt(scaledNumerator, b.mantissa);\\n        if (err1 != MathError.NO_ERROR) {\\n            return (err1, Exp({ mantissa: 0 }));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({ mantissa: rational }));\\n    }\\n\\n    /**\\n     * @dev Multiplies two exponentials, returning a new exponential.\\n     */\\n    function mulExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\n        (MathError err0, uint256 doubleScaledProduct) = mulUInt(a.mantissa, b.mantissa);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({ mantissa: 0 }));\\n        }\\n\\n        /*\\n         * We add half the scale before dividing so that we get rounding instead of truncation.\\n         * See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717\\n         * Without this change, a result like 6.6...e-19 will be truncated to 0 instead of being rounded to 1e-18.\\n         */\\n        (MathError err1, uint256 doubleScaledProductWithHalfScale) = addUInt(halfExpScale, doubleScaledProduct);\\n        if (err1 != MathError.NO_ERROR) {\\n            return (err1, Exp({ mantissa: 0 }));\\n        }\\n\\n        (MathError err2, uint256 product) = divUInt(doubleScaledProductWithHalfScale, expScale);\\n        /* The only possible error `div` is MathError.DIVISION_BY_ZERO but we control `expScale` and it\\u0027s not zero. */\\n        assert(err2 == MathError.NO_ERROR);\\n\\n        return (MathError.NO_ERROR, Exp({ mantissa: product }));\\n    }\\n\\n    /**\\n     * @dev Multiplies three exponentials, returning a new exponential.\\n     */\\n    function mulExp3(\\n        Exp memory a,\\n        Exp memory b,\\n        Exp memory c\\n    ) internal pure returns (MathError, Exp memory) {\\n        (MathError err, Exp memory ab) = mulExp(a, b);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, ab);\\n        }\\n        return mulExp(ab, c);\\n    }\\n\\n    /**\\n     * @dev Subtracts two exponentials, returning a new exponential.\\n     */\\n    function subExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\n        (MathError error, uint256 result) = subUInt(a.mantissa, b.mantissa);\\n\\n        return (error, Exp({ mantissa: result }));\\n    }\\n}\\n\"},\"ExponentialStorage.sol\":{\"content\":\"/* SPDX-License-Identifier: LPGL-3.0-or-later */\\npragma solidity ^0.7.0;\\n\\n/**\\n * @title ExponentialStorage\\n * @author Paul Razvan Berg\\n * @notice The storage interface ancillary to an Exponential contract.\\n */\\nabstract contract ExponentialStorage {\\n    struct Exp {\\n        uint256 mantissa;\\n    }\\n\\n    /**\\n     * @dev In Exponential denomination, 1e18 is 1.\\n     */\\n    uint256 internal constant expScale = 1e18;\\n    uint256 internal constant halfExpScale = expScale / 2;\\n    uint256 internal constant mantissaOne = expScale;\\n}\\n\"},\"FintrollerInterface.sol\":{\"content\":\"/* SPDX-License-Identifier: LPGL-3.0-or-later */\\npragma solidity ^0.7.0;\\n\\nimport \\\"./FintrollerStorage.sol\\\";\\nimport \\\"./FyTokenInterface.sol\\\";\\nimport \\\"./ChainlinkOperatorInterface.sol\\\";\\n\\nabstract contract FintrollerInterface is FintrollerStorage {\\n    /**\\n     * CONSTANT FUNCTIONS\\n     */\\n\\n    function getBond(FyTokenInterface fyToken)\\n        external\\n        view\\n        virtual\\n        returns (\\n            uint256 debtCeiling,\\n            uint256 collateralizationRatioMantissa,\\n            bool isBorrowAllowed,\\n            bool isDepositCollateralAllowed,\\n            bool isLiquidateBorrowAllowed,\\n            bool isListed,\\n            bool isRedeemFyTokenAllowed,\\n            bool isRepayBorrowAllowed,\\n            bool isSupplyUnderlyingAllowed\\n        );\\n\\n    function getBorrowAllowed(FyTokenInterface fyToken) external view virtual returns (bool);\\n\\n    function getBondCollateralizationRatio(FyTokenInterface fyToken) external view virtual returns (uint256);\\n\\n    function getBondDebtCeiling(FyTokenInterface fyToken) external view virtual returns (uint256);\\n\\n    function getDepositCollateralAllowed(FyTokenInterface fyToken) external view virtual returns (bool);\\n\\n    function getLiquidateBorrowAllowed(FyTokenInterface fyToken) external view virtual returns (bool);\\n\\n    function getRedeemFyTokensAllowed(FyTokenInterface fyToken) external view virtual returns (bool);\\n\\n    function getRepayBorrowAllowed(FyTokenInterface fyToken) external view virtual returns (bool);\\n\\n    function getSupplyUnderlyingAllowed(FyTokenInterface fyToken) external view virtual returns (bool);\\n\\n    /**\\n     * NON-CONSTANT FUNCTIONS\\n     */\\n\\n    function listBond(FyTokenInterface fyToken) external virtual returns (bool);\\n\\n    function setBondCollateralizationRatio(FyTokenInterface fyToken, uint256 newCollateralizationRatioMantissa)\\n        external\\n        virtual\\n        returns (bool);\\n\\n    function setBondDebtCeiling(FyTokenInterface fyToken, uint256 newDebtCeiling) external virtual returns (bool);\\n\\n    function setBorrowAllowed(FyTokenInterface fyToken, bool state) external virtual returns (bool);\\n\\n    function setDepositCollateralAllowed(FyTokenInterface fyToken, bool state) external virtual returns (bool);\\n\\n    function setLiquidateBorrowAllowed(FyTokenInterface fyToken, bool state) external virtual returns (bool);\\n\\n    function setLiquidationIncentive(uint256 newLiquidationIncentiveMantissa) external virtual returns (bool);\\n\\n    function setOracle(ChainlinkOperatorInterface newOracle) external virtual returns (bool);\\n\\n    function setRedeemFyTokensAllowed(FyTokenInterface fyToken, bool state) external virtual returns (bool);\\n\\n    function setRepayBorrowAllowed(FyTokenInterface fyToken, bool state) external virtual returns (bool);\\n\\n    function setSupplyUnderlyingAllowed(FyTokenInterface fyToken, bool state) external virtual returns (bool);\\n\\n    /**\\n     * EVENTS\\n     */\\n    event ListBond(address indexed admin, FyTokenInterface indexed fyToken);\\n\\n    event SetBorrowAllowed(address indexed admin, FyTokenInterface indexed fyToken, bool state);\\n\\n    event SetBondCollateralizationRatio(\\n        address indexed admin,\\n        FyTokenInterface indexed fyToken,\\n        uint256 oldCollateralizationRatio,\\n        uint256 newCollateralizationRatio\\n    );\\n\\n    event SetBondDebtCeiling(\\n        address indexed admin,\\n        FyTokenInterface indexed fyToken,\\n        uint256 oldDebtCeiling,\\n        uint256 newDebtCeiling\\n    );\\n\\n    event SetDepositCollateralAllowed(address indexed admin, FyTokenInterface indexed fyToken, bool state);\\n\\n    event SetLiquidateBorrowAllowed(address indexed admin, FyTokenInterface indexed fyToken, bool state);\\n\\n    event SetLiquidationIncentive(\\n        address indexed admin,\\n        uint256 oldLiquidationIncentive,\\n        uint256 newLiquidationIncentive\\n    );\\n\\n    event SetRedeemFyTokensAllowed(address indexed admin, FyTokenInterface indexed fyToken, bool state);\\n\\n    event SetRepayBorrowAllowed(address indexed admin, FyTokenInterface indexed fyToken, bool state);\\n\\n    event SetOracle(address indexed admin, address oldOracle, address newOracle);\\n\\n    event SetSupplyUnderlyingAllowed(address indexed admin, FyTokenInterface indexed fyToken, bool state);\\n}\\n\"},\"FintrollerStorage.sol\":{\"content\":\"/* SPDX-License-Identifier: LGPL-3.0-or-later */\\npragma solidity ^0.7.0;\\n\\nimport \\\"./Exponential.sol\\\";\\n\\nimport \\\"./FyTokenInterface.sol\\\";\\nimport \\\"./ChainlinkOperatorInterface.sol\\\";\\n\\n/**\\n * @title FintrollerStorage\\n * @author Hifi\\n */\\nabstract contract FintrollerStorage is Exponential {\\n    struct Bond {\\n        Exp collateralizationRatio;\\n        uint256 debtCeiling;\\n        bool isBorrowAllowed;\\n        bool isDepositCollateralAllowed;\\n        bool isLiquidateBorrowAllowed;\\n        bool isListed;\\n        bool isRedeemFyTokenAllowed;\\n        bool isRepayBorrowAllowed;\\n        bool isSupplyUnderlyingAllowed;\\n    }\\n\\n    /**\\n     * @dev Maps the fyToken address to the Bond structs.\\n     */\\n    mapping(FyTokenInterface =\\u003e Bond) internal bonds;\\n\\n    /**\\n     * @notice The contract that provides price data for the collateral and the underlying asset.\\n     */\\n    ChainlinkOperatorInterface public oracle;\\n\\n    /**\\n     * @notice Multiplier representing the discount on collateral that a liquidator receives.\\n     */\\n    uint256 public liquidationIncentiveMantissa;\\n\\n    /**\\n     * @dev The threshold below which the collateralization ratio cannot be set, equivalent to 100%.\\n     */\\n    uint256 internal constant collateralizationRatioLowerBoundMantissa = 1.0e18;\\n\\n    /**\\n     * @dev The threshold above which the collateralization ratio cannot be set, equivalent to 10,000%.\\n     */\\n    uint256 internal constant collateralizationRatioUpperBoundMantissa = 1.0e20;\\n\\n    /**\\n     * @dev The dafault collateralization ratio set when a new bond is listed, equivalent to 150%.\\n     */\\n    uint256 internal constant defaultCollateralizationRatioMantissa = 1.5e18;\\n\\n    /**\\n     * @dev The threshold below which the liquidation incentive cannot be set, equivalent to 100%.\\n     */\\n    uint256 internal constant liquidationIncentiveLowerBoundMantissa = 1.0e18;\\n\\n    /**\\n     * @dev The threshold above which the liquidation incentive cannot be set, equivalent to 150%.\\n     */\\n    uint256 internal constant liquidationIncentiveUpperBoundMantissa = 1.5e18;\\n\\n    /**\\n     * @notice Indicator that this is a Fintroller contract, for inspection.\\n     */\\n    bool public constant isFintroller = true;\\n}\\n\"},\"FyTokenInterface.sol\":{\"content\":\"/* SPDX-License-Identifier: LGPL-3.0-or-later */\\npragma solidity ^0.7.0;\\n\\nimport \\\"./Erc20Interface.sol\\\";\\nimport \\\"./FyTokenStorage.sol\\\";\\n\\n/**\\n * @title FyTokenInterface\\n * @author Hifi\\n */\\nabstract contract FyTokenInterface is\\n    FyTokenStorage, /* no dependency */\\n    Erc20Interface /* one dependency */\\n{\\n    /**\\n     * CONSTANT FUNCTIONS\\n     */\\n    function isMatured() public view virtual returns (bool);\\n\\n    /**\\n     * NON-CONSTANT FUNCTIONS\\n     */\\n    function borrow(uint256 borrowAmount) external virtual returns (bool);\\n\\n    function burn(address holder, uint256 burnAmount) external virtual returns (bool);\\n\\n    function liquidateBorrow(address borrower, uint256 repayAmount) external virtual returns (bool);\\n\\n    function mint(address beneficiary, uint256 mintAmount) external virtual returns (bool);\\n\\n    function repayBorrow(uint256 repayAmount) external virtual returns (bool);\\n\\n    function repayBorrowBehalf(address borrower, uint256 repayAmount) external virtual returns (bool);\\n\\n    function _setFintroller(FintrollerInterface newFintroller) external virtual returns (bool);\\n\\n    /**\\n     * EVENTS\\n     */\\n    event Borrow(address indexed borrower, uint256 borrowAmount);\\n\\n    event LiquidateBorrow(\\n        address indexed liquidator,\\n        address indexed borrower,\\n        uint256 repayAmount,\\n        uint256 clutchedCollateralAmount\\n    );\\n\\n    event RepayBorrow(address indexed payer, address indexed borrower, uint256 repayAmount, uint256 newDebt);\\n\\n    event SetFintroller(address indexed admin, FintrollerInterface oldFintroller, FintrollerInterface newFintroller);\\n}\\n\"},\"FyTokenStorage.sol\":{\"content\":\"/* SPDX-License-Identifier: LGPL-3.0-or-later */\\npragma solidity ^0.7.0;\\n\\nimport \\\"./Erc20Interface.sol\\\";\\nimport \\\"./BalanceSheetInterface.sol\\\";\\nimport \\\"./FintrollerInterface.sol\\\";\\nimport \\\"./RedemptionPoolInterface.sol\\\";\\n\\n/**\\n * @title FyTokenStorage\\n * @author Hifi\\n */\\nabstract contract FyTokenStorage {\\n    /**\\n     * STORAGE PROPERTIES\\n     */\\n\\n    /**\\n     * @notice The global debt registry.\\n     */\\n    BalanceSheetInterface public balanceSheet;\\n\\n    /**\\n     * @notice The Erc20 asset that backs the borrows of this fyToken.\\n     */\\n    Erc20Interface public collateral;\\n\\n    /**\\n     * @notice The ratio between mantissa precision (1e18) and the collateral precision.\\n     */\\n    uint256 public collateralPrecisionScalar;\\n\\n    /**\\n     * @notice Unix timestamp in seconds for when this token expires.\\n     */\\n    uint256 public expirationTime;\\n\\n    /**\\n     * @notice The unique Fintroller associated with this contract.\\n     */\\n    FintrollerInterface public fintroller;\\n\\n    /**\\n     * @notice The unique Redemption Pool associated with this contract.\\n     */\\n    RedemptionPoolInterface public redemptionPool;\\n\\n    /**\\n     * @notice The Erc20 underlying, or target, asset for this fyToken.\\n     */\\n    Erc20Interface public underlying;\\n\\n    /**\\n     * @notice The ratio between mantissa precision (1e18) and the underlying precision.\\n     */\\n    uint256 public underlyingPrecisionScalar;\\n\\n    /**\\n     * @notice Indicator that this is a FyToken contract, for inspection.\\n     */\\n    bool public constant isFyToken = true;\\n}\\n\"},\"HifiFlashSwap.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity ^0.7.0;\\n\\nimport \\\"./Admin.sol\\\";\\nimport \\\"./Erc20Interface.sol\\\";\\nimport \\\"./BalanceSheetInterface.sol\\\";\\nimport \\\"./FyTokenInterface.sol\\\";\\nimport \\\"./RedemptionPoolInterface.sol\\\";\\n\\nimport \\\"./HifiFlashSwapInterface.sol\\\";\\nimport \\\"./UniswapV2PairLike.sol\\\";\\n\\n/// @title HifiFlashSwap\\n/// @author Hifi\\ncontract HifiFlashSwap is\\n    HifiFlashSwapInterface, // one dependency\\n    Admin // two dependencies\\n{\\n    constructor(address balanceSheet_, address pair_) Admin() {\\n        balanceSheet = BalanceSheetInterface(balanceSheet_);\\n        pair = UniswapV2PairLike(pair_);\\n        wbtc = Erc20Interface(pair.token0());\\n        usdc = Erc20Interface(pair.token1());\\n    }\\n\\n    /// @dev Calculate the amount of WBTC that has to be repaid to Uniswap. The formula applied is:\\n    ///\\n    ///              (wbtcReserves * usdcAmount) * 1000\\n    /// repayment = ------------------------------------\\n    ///              (usdcReserves - usdcAmount) * 997\\n    ///\\n    /// See \\\"getAmountIn\\\" and \\\"getAmountOut\\\" in UniswapV2Library.sol. Flash swaps that are repaid via\\n    /// the corresponding pair token is akin to a normal swap, so the 0.3% LP fee applies.\\n    function getRepayWbtcAmount(uint256 usdcAmount) public view returns (uint256) {\\n        (uint112 wbtcReserves, uint112 usdcReserves, ) = pair.getReserves();\\n\\n        // Note that we don\\u0027t need CarefulMath because the UniswapV2Pair.sol contract performs sanity\\n        // checks on \\\"wbtcAmount\\\" and \\\"usdcAmount\\\" before calling the current contract.\\n        uint256 numerator = wbtcReserves * usdcAmount * 1000;\\n        uint256 denominator = (usdcReserves - usdcAmount) * 997;\\n        uint256 wbtcRepaymentAmount = numerator / denominator + 1;\\n\\n        return wbtcRepaymentAmount;\\n    }\\n\\n    /// @dev Called by the UniswapV2Pair contract.\\n    function uniswapV2Call(\\n        address sender,\\n        uint256 wbtcAmount,\\n        uint256 usdcAmount,\\n        bytes calldata data\\n    ) external override {\\n        require(msg.sender == address(pair), \\\"ERR_UNISWAP_V2_CALL_NOT_AUTHORIZED\\\");\\n        require(wbtcAmount == 0, \\\"ERR_WBTC_AMOUNT_ZERO\\\");\\n\\n        // Unpack the ABI encoded data passed by the UniswapV2Pair contract.\\n        (address fyTokenAddress, address borrower, uint256 minProfit) = abi.decode(data, (address, address, uint256));\\n        FyTokenInterface fyToken = FyTokenInterface(fyTokenAddress);\\n        fyToken.isFyToken();\\n\\n        // Mint fyUSDC and liquidate the borrower.\\n        uint256 mintedFyUsdcAmount = mintFyUsdc(fyToken, usdcAmount);\\n        uint256 clutchedWbtcAmount = liquidateBorrow(fyToken, borrower, mintedFyUsdcAmount);\\n\\n        // Calculate the amount of WBTC required.\\n        uint256 repayWbtcAmount = getRepayWbtcAmount(usdcAmount);\\n        require(clutchedWbtcAmount \\u003e repayWbtcAmount + minProfit, \\\"ERR_INSUFFICIENT_PROFIT\\\");\\n\\n        // Pay back the loan.\\n        require(wbtc.transfer(address(pair), repayWbtcAmount), \\\"ERR_WBTC_TRANSFER\\\");\\n\\n        // Reap the profit.\\n        uint256 profit = clutchedWbtcAmount - repayWbtcAmount;\\n        wbtc.transfer(sender, profit);\\n\\n        emit FlashLiquidate(\\n            sender,\\n            borrower,\\n            fyTokenAddress,\\n            usdcAmount,\\n            mintedFyUsdcAmount,\\n            clutchedWbtcAmount,\\n            profit\\n        );\\n    }\\n\\n    /// @dev Supply the USDC to the RedemptionPool and mint fyUSDC.\\n    function mintFyUsdc(FyTokenInterface fyToken, uint256 usdcAmount) internal returns (uint256) {\\n        RedemptionPoolInterface redemptionPool = fyToken.redemptionPool();\\n\\n        // Allow the RedemptionPool to spend USDC if allowance not enough.\\n        uint256 allowance = usdc.allowance(address(this), address(redemptionPool));\\n        if (allowance \\u003c usdcAmount) {\\n            usdc.approve(address(redemptionPool), type(uint256).max);\\n        }\\n\\n        uint256 oldFyTokenBalance = fyToken.balanceOf(address(this));\\n        redemptionPool.supplyUnderlying(usdcAmount);\\n        uint256 newFyTokenBalance = fyToken.balanceOf(address(this));\\n        uint256 mintedFyUsdcAmount = newFyTokenBalance - oldFyTokenBalance;\\n        return mintedFyUsdcAmount;\\n    }\\n\\n    /// @dev Liquidate the borrower by transferring the USDC to the BalanceSheet. In doing this,\\n    /// the liquidator receives WBTC at a discount.\\n    function liquidateBorrow(\\n        FyTokenInterface fyToken,\\n        address borrower,\\n        uint256 mintedFyUsdcAmount\\n    ) internal returns (uint256) {\\n        uint256 oldWbtcBalance = wbtc.balanceOf(address(this));\\n        fyToken.liquidateBorrow(borrower, mintedFyUsdcAmount);\\n        uint256 newWbtcBalance = wbtc.balanceOf(address(this));\\n        uint256 clutchedWbtcAmount = newWbtcBalance - oldWbtcBalance;\\n        return clutchedWbtcAmount;\\n    }\\n}\\n\"},\"HifiFlashSwapInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./HifiFlashSwapStorage.sol\\\";\\nimport \\\"./UniswapV2CalleeLike.sol\\\";\\n\\nabstract contract HifiFlashSwapInterface is\\n    HifiFlashSwapStorage, // no dependency\\n    UniswapV2CalleeLike // no dependency\\n{\\n    event FlashLiquidate(\\n        address indexed liquidator,\\n        address indexed borrower,\\n        address indexed fyToken,\\n        uint256 flashBorrowedUsdcAmount,\\n        uint256 mintedFyUsdcAmount,\\n        uint256 clutchedWbtcAmount,\\n        uint256 wbtcProfit\\n    );\\n}\\n\"},\"HifiFlashSwapStorage.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity ^0.7.0;\\n\\nimport \\\"./Erc20Interface.sol\\\";\\nimport \\\"./BalanceSheetInterface.sol\\\";\\n\\nimport \\\"./UniswapV2PairLike.sol\\\";\\n\\n/// @title HifiFlashSwapStorage\\n/// @author Hifi\\nabstract contract HifiFlashSwapStorage {\\n    BalanceSheetInterface public balanceSheet;\\n    UniswapV2PairLike public pair;\\n    Erc20Interface public usdc;\\n    Erc20Interface public wbtc;\\n}\\n\"},\"RedemptionPoolInterface.sol\":{\"content\":\"/* SPDX-License-Identifier: LGPL-3.0-or-later */\\npragma solidity ^0.7.0;\\n\\nimport \\\"./RedemptionPoolStorage.sol\\\";\\n\\n/**\\n * @title RedemptionPoolInterface\\n * @author Hifi\\n */\\nabstract contract RedemptionPoolInterface is RedemptionPoolStorage {\\n    /**\\n     * NON-CONSTANT FUNCTIONS\\n     */\\n    function redeemFyTokens(uint256 fyTokenAmount) external virtual returns (bool);\\n\\n    function supplyUnderlying(uint256 underlyingAmount) external virtual returns (bool);\\n\\n    /**\\n     * EVENTS\\n     */\\n    event RedeemFyTokens(address indexed account, uint256 fyTokenAmount, uint256 underlyingAmount);\\n\\n    event SupplyUnderlying(address indexed account, uint256 underlyingAmount, uint256 fyTokenAmount);\\n}\\n\"},\"RedemptionPoolStorage.sol\":{\"content\":\"/* SPDX-License-Identifier: LGPL-3.0-or-later */\\npragma solidity ^0.7.0;\\n\\nimport \\\"./FintrollerInterface.sol\\\";\\nimport \\\"./FyTokenInterface.sol\\\";\\n\\n/**\\n * @title RedemptionPoolStorage\\n * @author Hifi\\n */\\nabstract contract RedemptionPoolStorage {\\n    /**\\n     * @notice The unique Fintroller associated with this contract.\\n     */\\n    FintrollerInterface public fintroller;\\n\\n    /**\\n     * @notice The amount of the underlying asset available to be redeemed after maturation.\\n     */\\n    uint256 public totalUnderlyingSupply;\\n\\n    /**\\n     * The unique fyToken associated with this Redemption Pool.\\n     */\\n    FyTokenInterface public fyToken;\\n\\n    /**\\n     * @notice Indicator that this is a Redemption Pool contract, for inspection.\\n     */\\n    bool public constant isRedemptionPool = true;\\n}\\n\"},\"UniswapV2CalleeLike.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity ^0.7.0;\\n\\ninterface UniswapV2CalleeLike {\\n    function uniswapV2Call(\\n        address sender,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n}\\n\"},\"UniswapV2PairLike.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity ^0.7.0;\\n\\ninterface UniswapV2PairLike {\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n}\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"balanceSheet_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pair_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fyToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"flashBorrowedUsdcAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintedFyUsdcAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"clutchedWbtcAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wbtcProfit\",\"type\":\"uint256\"}],\"name\":\"FlashLiquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"TransferAdmin\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_renounceAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"_transferAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceSheet\",\"outputs\":[{\"internalType\":\"contract BalanceSheetInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdcAmount\",\"type\":\"uint256\"}],\"name\":\"getRepayWbtcAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"contract UniswapV2PairLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wbtcAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdcAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"uniswapV2Call\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"contract Erc20Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wbtc\",\"outputs\":[{\"internalType\":\"contract Erc20Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"HifiFlashSwap","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000010fc2350baa7d3690bf6a8d680e9c1fb55d90a7c000000000000000000000000004375dff511095cc5a197a54140a24efef3a416","EVMVersion":"Default","Library":"","LicenseType":"GNU LGPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c368c50cbfa84cdb32b59e8bcd22daa6ae3532d87b14f9c25d70a478deee2b3d"}]}