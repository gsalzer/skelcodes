{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/Math.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n// File: contracts/interface/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function mint(address account, uint amount) external;\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/interface/IPlayerBook.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ninterface IPlayerBook {\r\n    function settleReward( address from,uint256 amount ) external returns (uint256);\r\n    function bindRefer( address from,string calldata  affCode )  external returns (bool);\r\n    function hasRefer(address from) external returns(bool);\r\n\r\n    function addPool(address poolAddr, address rewardToken) external;\r\n}\r\n\r\n// File: contracts/interface/IPool.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ninterface IPool {\r\n    function totalSupply( ) external view returns (uint256);\r\n    function balanceOf( address player ) external view returns (uint256);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following \r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: contracts/library/SafeERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    bytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SELECTOR, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SafeERC20: TRANSFER_FAILED');\r\n    }\r\n    // function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n    //     callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    // }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/library/Governance.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\ncontract Governance {\r\n\r\n    address public _governance;\r\n\r\n    constructor() public {\r\n        _governance = tx.origin;\r\n    }\r\n\r\n    event GovernanceTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    modifier onlyGovernance {\r\n        require(msg.sender == _governance, \"not governance\");\r\n        _;\r\n    }\r\n\r\n    function setGovernance(address governance)  public  onlyGovernance\r\n    {\r\n        require(governance != address(0), \"new governance the zero address\");\r\n        emit GovernanceTransferred(_governance, governance);\r\n        _governance = governance;\r\n    }\r\n\r\n\r\n}\r\n\r\n// File: contracts/interface/IPowerStrategy.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ninterface IPowerStrategy {\r\n    function lpIn(address sender, uint256 amount) external;\r\n    function lpOut(address sender, uint256 amount) external;\r\n    \r\n    function getPower(address sender) view  external returns (uint256);\r\n}\r\n\r\n// File: contracts/library/SegmentPowerStrategy.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract SegmentPowerStrategy is IPowerStrategy {\r\n    using SafeMath for uint256;\r\n    ////\r\n    struct degoSegment {\r\n        uint256 min;\r\n        uint256 max;\r\n    }\r\n    struct countSegment {\r\n        uint32 length;\r\n        uint32 curCount;\r\n    }\r\n    struct playerInfo {\r\n        uint256 amount;\r\n        uint8 segIndex;\r\n        uint32 playerId;\r\n        uint32 offset;\r\n    }\r\n\r\n    mapping(address => uint32) public _addressXId;\r\n    mapping(uint8 => degoSegment) public _degoSegment;\r\n    mapping(uint8 => countSegment) public _countSegment;\r\n    mapping(uint8 => mapping(uint32 => uint32)) public _playerIds;\r\n    mapping(uint32 => playerInfo) public _playerMap;\r\n\r\n    uint8[3] public _ruler = [8, 1, 1];\r\n    uint8[3] public _factor = [3, 5, 1];\r\n\r\n    uint8 public _high = 3;\r\n    uint8 public _mid = 2;\r\n    uint8 public _low = 1;\r\n\r\n    uint32 public _playerId = 0;\r\n    uint32 public _base = 100;\r\n    uint32 public _anchor = _base;\r\n    uint32 public _grouthCondition = 100;\r\n    uint32 public _grouthStep = 10;\r\n    uint32 constant public _highMax = 50;\r\n    uint32 constant public _midMax = 50;\r\n\r\n    uint256 constant public  _initMaxValue = 500 * (10**18);  //500lp,10w usdt,100 eth\r\n\r\n    address public _contractCaller = address(0x0);\r\n\r\n    /**\r\n     * check pool\r\n     */\r\n    modifier isNormalPool(){\r\n        require( msg.sender==_contractCaller,\"invalid pool address!\");\r\n        _;\r\n    }\r\n\r\n    constructor()\r\n        public\r\n    {\r\n        _contractCaller = msg.sender;\r\n        _playerId = 0;\r\n\r\n        initSegment();\r\n        updateRuler(_initMaxValue);\r\n    }\r\n\r\n    function lpIn(address sender, uint256 amount) \r\n    isNormalPool()\r\n    external {\r\n\r\n        uint32 playerId = _addressXId[sender];\r\n        if ( playerId > 0 ) {\r\n            _playerMap[playerId].amount = _playerMap[playerId].amount.add(amount);\r\n        } else {\r\n            //new addr\r\n            _playerId = _playerId+1;\r\n            _addressXId[sender] = _playerId;\r\n\r\n            playerId = _playerId;\r\n            _playerMap[playerId].playerId = playerId;\r\n            _playerMap[playerId].amount = amount;\r\n            _playerMap[playerId].segIndex = 0;\r\n            _playerMap[playerId].offset =  0;\r\n\r\n            //update segment\r\n            updateSegment();\r\n        }\r\n\r\n        settlePowerData(playerId);\r\n    }\r\n\r\n    function lpOut(address sender, uint256 amount) \r\n    isNormalPool()\r\n    external{\r\n        uint32 playerId = _addressXId[sender];\r\n        if ( playerId > 0 ) {\r\n            _playerMap[playerId].amount = _playerMap[playerId].amount.sub(amount);\r\n        } else {\r\n            return;\r\n        }\r\n\r\n        settlePowerData(playerId);\r\n    }\r\n    \r\n    function getPower(address sender) \r\n    view external\r\n    returns (uint256) {\r\n\r\n        uint32 playerId = _addressXId[sender];\r\n        if ( playerId > 0 ) {\r\n            uint8 segment = _playerMap[playerId].segIndex;\r\n            if(segment>0){\r\n                return uint256(_factor[segment-1]).mul(_playerMap[playerId].amount);\r\n            }\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    function updateRuler( uint256 maxCount ) internal{\r\n\r\n        uint256 lastBegin = 0;\r\n        uint256 lastEnd = 0;\r\n        uint256 splitPoint = 0;\r\n        for (uint8 i = 1; i <= _ruler.length; i++) {\r\n            splitPoint = maxCount * _ruler[i - 1]/10;\r\n            if (splitPoint <= 0) {\r\n                splitPoint = 1;\r\n            }\r\n            lastEnd = lastBegin + splitPoint;\r\n            if (i == _ruler.length) {\r\n                lastEnd = maxCount;\r\n            }\r\n            _degoSegment[i].min = lastBegin + 1;\r\n            _degoSegment[i].max = lastEnd;\r\n            lastBegin = lastEnd;\r\n        }\r\n    }\r\n\r\n    function initSegment() internal {    \r\n\r\n        _countSegment[_low].length = 80;\r\n        _countSegment[_mid].length = 10;\r\n        _countSegment[_high].length = 10;\r\n\r\n        _countSegment[_low].curCount = 0;\r\n        _countSegment[_mid].curCount = 0;\r\n        _countSegment[_high].curCount = 0;\r\n    }\r\n\r\n    function updateSegment( ) internal {\r\n\r\n        if (_playerId >= _grouthCondition+_anchor ) {\r\n            if (_countSegment[_high].length + _grouthStep > _highMax) {\r\n                _countSegment[_high].length = _highMax;\r\n            } else {\r\n                _countSegment[_high].length = _countSegment[_high].length+_grouthStep;\r\n            }\r\n\r\n            if (_countSegment[_mid].length + _grouthStep > _midMax) {\r\n                _countSegment[_mid].length = _midMax;\r\n            } else {\r\n                _countSegment[_mid].length = _countSegment[_mid].length+_grouthStep;\r\n            }\r\n            _anchor = _playerId;\r\n        }\r\n    }\r\n\r\n    function hasCountSegmentSlot(uint8 segIndex) internal view returns (bool){\r\n        uint32 value = _countSegment[segIndex].length-_countSegment[segIndex].curCount;\r\n        if (value > 0) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function findSegmentMinPlayer(uint8 segIndex) internal view returns (uint32,uint256){\r\n        uint256 firstMinAmount = _degoSegment[segIndex].max;\r\n        uint256 secondMinAmount = _degoSegment[segIndex].max;\r\n        uint32 minPlayerOffset = 0;\r\n        for (uint8 i = 0; i < _countSegment[segIndex].curCount; i++) {\r\n            uint32 playerId = _playerIds[segIndex][i];\r\n            if( playerId==0 ){\r\n                continue;\r\n            }\r\n            uint256 amount = _playerMap[playerId].amount;\r\n\r\n            //find min amount;\r\n            if ( amount < firstMinAmount) {\r\n                if (firstMinAmount < secondMinAmount) {\r\n                    secondMinAmount = firstMinAmount;\r\n                }\r\n                firstMinAmount = amount;\r\n                minPlayerOffset = i;\r\n            }else{\r\n                //find second min amount\r\n                if(amount < secondMinAmount ){\r\n                    secondMinAmount = amount;\r\n                }\r\n            }\r\n        }\r\n\r\n        return (minPlayerOffset,secondMinAmount);\r\n    }\r\n\r\n    //swap the player data from old segment to the new segment\r\n    function segmentSwap(uint32 playerId, uint8 segIndex) internal {\r\n\r\n        uint8 oldSegIndex = _playerMap[playerId].segIndex;\r\n\r\n        uint32 oldOffset = _playerMap[playerId].offset;\r\n        uint32 tail = _countSegment[segIndex].curCount;\r\n\r\n        _playerMap[playerId].segIndex = segIndex;\r\n        _playerMap[playerId].offset = tail;\r\n\r\n        _countSegment[segIndex].curCount = _countSegment[segIndex].curCount+1;\r\n        _playerIds[segIndex][tail] = playerId;\r\n\r\n        if (oldSegIndex>0 && segIndex != oldSegIndex && _playerIds[oldSegIndex][oldOffset] > 0) {\r\n\r\n            uint32 originTail = _countSegment[oldSegIndex].curCount-1;\r\n            uint32 originTailPlayer = _playerIds[oldSegIndex][originTail];\r\n\r\n            if(originTailPlayer != playerId){\r\n\r\n                _playerMap[originTailPlayer].segIndex = oldSegIndex;\r\n                _playerMap[originTailPlayer].offset = oldOffset;\r\n                _playerIds[oldSegIndex][oldOffset] = originTailPlayer;\r\n            }\r\n\r\n            _playerIds[oldSegIndex][originTail] = 0;\r\n            _countSegment[oldSegIndex].curCount = _countSegment[oldSegIndex].curCount-1;\r\n        }\r\n    }\r\n\r\n    //swap the player data with tail \r\n    function tailSwap( uint8 segIndex) internal returns (uint32){\r\n\r\n        uint32 minPlayerOffset;\r\n        uint256 secondMinAmount;\r\n        (minPlayerOffset,secondMinAmount) = findSegmentMinPlayer(segIndex);\r\n        _degoSegment[segIndex].min = secondMinAmount;\r\n\r\n        uint32 leftPlayerId = _playerIds[segIndex][minPlayerOffset];\r\n\r\n        //segmentSwap to reset\r\n        uint32 tail = _countSegment[segIndex].curCount - 1;\r\n        uint32 tailPlayerId = _playerIds[segIndex][tail];\r\n        _playerIds[segIndex][minPlayerOffset] = tailPlayerId;\r\n\r\n        _playerMap[tailPlayerId].offset = minPlayerOffset;\r\n\r\n        return leftPlayerId;\r\n    }\r\n\r\n    function joinHigh(uint32 playerId) internal {\r\n        uint8 segIndex = _high;\r\n        if (hasCountSegmentSlot(segIndex)) {\r\n            segmentSwap(playerId, segIndex);\r\n        } else {\r\n            uint32 leftPlayerId = tailSwap(segIndex);\r\n            joinMid(leftPlayerId);\r\n            segmentSwap(playerId, segIndex);\r\n\r\n        }\r\n    }\r\n\r\n    function joinMid(uint32 playerId) internal {\r\n        uint8 segIndex = _mid;\r\n        if (hasCountSegmentSlot(segIndex)) {\r\n            segmentSwap(playerId, segIndex);\r\n        } else {\r\n            uint32 leftPlayerId = tailSwap(segIndex);\r\n            joinLow(leftPlayerId);\r\n            segmentSwap(playerId, segIndex);\r\n        }\r\n        _degoSegment[segIndex].max = _degoSegment[segIndex + 1].min;\r\n    }\r\n\r\n    function joinLow(uint32 playerId) internal {\r\n\r\n        uint8 segIndex = _low;\r\n        segmentSwap(playerId, segIndex);\r\n        _degoSegment[segIndex].max = _degoSegment[segIndex + 1].min;\r\n        //_low segment length update\r\n        if( _countSegment[segIndex].curCount > _countSegment[segIndex].length){\r\n            _countSegment[segIndex].length = _countSegment[segIndex].curCount;\r\n        }\r\n    }\r\n\r\n    function settlePowerData(uint32 playerId) internal {\r\n\r\n        uint256 amount = _playerMap[playerId].amount;\r\n        uint8 segIndex = 0;\r\n        for (uint8 i = 1; i <= _high; i++) {\r\n            if (amount < _degoSegment[i].max) {\r\n                segIndex = i;\r\n                break;\r\n            }\r\n        }\r\n        if (segIndex == 0) {\r\n            _degoSegment[_high].max = amount;\r\n            segIndex = _high;\r\n        }\r\n\r\n        if (_playerMap[playerId].segIndex == segIndex) {\r\n            return;\r\n        }\r\n\r\n        if (segIndex == _high) {\r\n            joinHigh(playerId);\r\n        } else if (segIndex == _mid) {\r\n            joinMid(playerId);\r\n        } else {\r\n            joinLow(playerId);\r\n        }\r\n    }\r\n\r\n    ////////////////////////////\r\n}\r\n\r\n// File: contracts/library/LPTokenWrapper.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract LPTokenWrapper is IPool,Governance {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    IERC20 public _lpToken;\r\n\r\n    address public _playerBook = address(0x178f005e3BB10604a47c4F8212C8959caC9c94aA);\r\n\r\n    uint256 private _totalSupply;\r\n    mapping(address => uint256) private _balances;\r\n\r\n    uint256 private _totalPower;\r\n    mapping(address => uint256) private _powerBalances;\r\n    \r\n    address public _powerStrategy = address(0x0);\r\n    address public powerStrategy = address(0x0);\r\n\r\n    constructor(address lpToken_) public {\r\n        require(lpToken_ != address(0), 'LPTokenWrapper::constructor: lpToken_ is empty');\r\n        _lpToken = IERC20(lpToken_);\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function enablePowerStragegy()  public  onlyGovernance{\r\n        if( powerStrategy == address(0x0)){\r\n            powerStrategy = address(new SegmentPowerStrategy());\r\n        }\r\n        _powerStrategy = powerStrategy;\r\n    }\r\n\r\n    function disablePowerStragegy()  public  onlyGovernance{\r\n        _powerStrategy = address(0x0);\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function balanceOfPower(address account) public view returns (uint256) {\r\n        return _powerBalances[account];\r\n    }\r\n\r\n    function totalPower() public view returns (uint256) {\r\n        return _totalPower;\r\n    }\r\n\r\n\r\n    function stake(uint256 amount, string memory affCode) public {\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[msg.sender] = _balances[msg.sender].add(amount);\r\n\r\n        if( _powerStrategy != address(0x0)){ \r\n            _totalPower = _totalPower.sub(_powerBalances[msg.sender]);\r\n            IPowerStrategy(_powerStrategy).lpIn(msg.sender, amount);\r\n\r\n            _powerBalances[msg.sender] = IPowerStrategy(_powerStrategy).getPower(msg.sender);\r\n            _totalPower = _totalPower.add(_powerBalances[msg.sender]);\r\n        }else{\r\n            _totalPower = _totalSupply;\r\n            _powerBalances[msg.sender] = _balances[msg.sender];\r\n        }\r\n\r\n        _lpToken.safeTransferFrom(msg.sender, address(this), amount);\r\n\r\n\r\n        if (!IPlayerBook(_playerBook).hasRefer(msg.sender)) {\r\n            IPlayerBook(_playerBook).bindRefer(msg.sender, affCode);\r\n        }\r\n\r\n        \r\n    }\r\n\r\n    function withdraw(uint256 amount) public {\r\n        require(amount > 0, \"amount > 0\");\r\n\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        _balances[msg.sender] = _balances[msg.sender].sub(amount);\r\n        \r\n        if( _powerStrategy != address(0x0)){ \r\n            _totalPower = _totalPower.sub(_powerBalances[msg.sender]);\r\n            IPowerStrategy(_powerStrategy).lpOut(msg.sender, amount);\r\n            _powerBalances[msg.sender] = IPowerStrategy(_powerStrategy).getPower(msg.sender);\r\n            _totalPower = _totalPower.add(_powerBalances[msg.sender]);\r\n\r\n        }else{\r\n            _totalPower = _totalSupply;\r\n            _powerBalances[msg.sender] = _balances[msg.sender];\r\n        }\r\n        _lpToken.safeTransfer( msg.sender, amount);\r\n    }\r\n\r\n\r\n    function setPlayerBook(address playerbook) public onlyGovernance{\r\n        _playerBook = playerbook;\r\n    }\r\n}\r\n\r\n// File: contracts/reward/UniswapReward.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract RewardsDistributionRecipient {\r\n    address public rewardsDistribution;\r\n\r\n    modifier onlyRewardsDistribution() {\r\n        require(msg.sender == rewardsDistribution, \"Caller is not RewardsDistribution contract\");\r\n        _;\r\n    }\r\n}\r\n\r\n\r\ninterface IUniswapV2ERC20 {\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n}\r\n\r\n\r\ncontract UniswapReward is LPTokenWrapper,RewardsDistributionRecipient{\r\n    using SafeERC20 for IERC20;\r\n\r\n    IERC20 public _rewardsToken;\r\n    address public _teamWallet = 0x1F91db93e06ffeb06c942BB6A0b2756Ad6Aaa5FC;\r\n    address public _rewardPool = 0x25655b50d6f9Ff59cA145F3E6976E954bE17B177;\r\n\r\n    uint256 public constant DURATION = 7 days;\r\n\r\n    uint256 public _initReward;\r\n    uint256 public _periodFinish = 0;\r\n    uint256 public _rewardRate = 0;\r\n    uint256 public _lastUpdateTime;\r\n    uint256 public _rewardPerTokenStored;\r\n\r\n    uint256 public _teamRewardRate = 500;\r\n    uint256 public _poolRewardRate = 1000;\r\n    uint256 public _baseRate = 10000;\r\n    uint256 public _punishTime = 3 days;\r\n\r\n    mapping(address => uint256) public _userRewardPerTokenPaid;\r\n    mapping(address => uint256) public _rewards;\r\n    mapping(address => uint256) public _lastStakedTime;\r\n\r\n    event RewardAdded(uint256 reward);\r\n    event Staked(address indexed user, uint256 amount);\r\n    event Withdrawn(address indexed user, uint256 amount);\r\n    event RewardPaid(address indexed user, uint256 reward);\r\n\r\n\r\n    modifier updateReward(address account) {\r\n        _rewardPerTokenStored = rewardPerToken();\r\n        _lastUpdateTime = lastTimeRewardApplicable();\r\n        if (account != address(0)) {\r\n            _rewards[account] = earned(account);\r\n            _userRewardPerTokenPaid[account] = _rewardPerTokenStored;\r\n        }\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        address rewardsDistribution_,\r\n        address token_,\r\n        address lpToken_\r\n    ) LPTokenWrapper(lpToken_) public {\r\n        require(token_ != address(0), 'UniswapReward::constructor: _token is empty');\r\n\r\n        _rewardsToken = IERC20(token_);\r\n        rewardsDistribution = rewardsDistribution_;\r\n    }\r\n\r\n    /* Fee collection for any other token */\r\n    function seize(IERC20 token, uint256 amount) external onlyGovernance{\r\n        require(token != _rewardsToken, \"reward\");\r\n        require(token != _lpToken, \"stake\");\r\n        token.safeTransfer(_governance, amount);\r\n    }\r\n\r\n    function setTeamRewardRate( uint256 teamRewardRate ) public onlyGovernance{\r\n        _teamRewardRate = teamRewardRate;\r\n    }\r\n\r\n    function setPoolRewardRate( uint256  poolRewardRate ) public onlyGovernance{\r\n        _poolRewardRate = poolRewardRate;\r\n    }\r\n\r\n    function setWithDrawPunishTime( uint256  punishTime ) public onlyGovernance{\r\n        _punishTime = punishTime;\r\n    }\r\n\r\n    function lastTimeRewardApplicable() public view returns (uint256) {\r\n        return Math.min(block.timestamp, _periodFinish);\r\n    }\r\n\r\n    function rewardPerToken() public view returns (uint256) {\r\n        if (totalPower() == 0) {\r\n            return _rewardPerTokenStored;\r\n        }\r\n        return\r\n            _rewardPerTokenStored.add(\r\n                lastTimeRewardApplicable()\r\n                    .sub(_lastUpdateTime)\r\n                    .mul(_rewardRate)\r\n                    .mul(1e18)\r\n                    .div(totalPower())\r\n            );\r\n    }\r\n\r\n    function earned(address account) public view returns (uint256) {\r\n        return\r\n            balanceOfPower(account)\r\n                .mul(rewardPerToken().sub(_userRewardPerTokenPaid[account]))\r\n                .div(1e18)\r\n                .add(_rewards[account]);\r\n    }\r\n\r\n    // stake visibility is public as overriding LPTokenWrapper's stake() function\r\n    function stake(uint256 amount, string memory affCode)\r\n        public\r\n        updateReward(msg.sender)\r\n    {\r\n        require(amount > 0, \"Cannot stake 0\");\r\n        super.stake(amount, affCode);\r\n\r\n        _lastStakedTime[msg.sender] = now;\r\n\r\n        emit Staked(msg.sender, amount);\r\n    }\r\n\r\n    // stake visibility is public as overriding LPTokenWrapper's stake() function\r\n    function stakeWithPermit(uint256 amount, string memory affCode, uint deadline, uint8 v, bytes32 r, bytes32 s)\r\n        public\r\n        updateReward(msg.sender)\r\n    {\r\n        require(amount > 0, \"Cannot stake 0\");\r\n\r\n        // permit\r\n        IUniswapV2ERC20(address(_lpToken)).permit(msg.sender, address(this), amount, deadline, v, r, s);\r\n\r\n        super.stake(amount, affCode);\r\n\r\n        _lastStakedTime[msg.sender] = now;\r\n\r\n        emit Staked(msg.sender, amount);\r\n    }\r\n\r\n\r\n\r\n    function withdraw(uint256 amount)\r\n    public\r\n    updateReward(msg.sender)\r\n    {\r\n        require(amount > 0, \"Cannot withdraw 0\");\r\n        super.withdraw(amount);\r\n        emit Withdrawn(msg.sender, amount);\r\n    }\r\n\r\n    function exit() external {\r\n        withdraw(balanceOf(msg.sender));\r\n        getReward();\r\n    }\r\n\r\n    function getReward() public updateReward(msg.sender) {\r\n        uint256 reward = earned(msg.sender);\r\n        if (reward > 0) {\r\n            _rewards[msg.sender] = 0;\r\n            uint256 fee = IPlayerBook(_playerBook).settleReward(msg.sender, reward);\r\n            if(fee > 0){\r\n                _rewardsToken.safeTransfer(_playerBook, fee);\r\n            }\r\n            \r\n            uint256 teamReward = reward.mul(_teamRewardRate).div(_baseRate);\r\n            if(teamReward>0){\r\n                _rewardsToken.safeTransfer(_teamWallet, teamReward);\r\n            }\r\n            uint256 leftReward = reward.sub(fee).sub(teamReward);\r\n            uint256 poolReward = 0;\r\n\r\n            //withdraw time check\r\n\r\n            if(now  < (_lastStakedTime[msg.sender] + _punishTime) ){\r\n                poolReward = leftReward.mul(_poolRewardRate).div(_baseRate);\r\n            }\r\n            if(poolReward>0){\r\n                _rewardsToken.safeTransfer(_rewardPool, poolReward);\r\n                leftReward = leftReward.sub(poolReward);\r\n            }\r\n\r\n            if(leftReward>0){\r\n                _rewardsToken.safeTransfer(msg.sender, leftReward );\r\n            }\r\n      \r\n            emit RewardPaid(msg.sender, leftReward);\r\n        }\r\n    }\r\n\r\n    //for extra reward\r\n    function notifyRewardAmount(uint256 reward)\r\n        external\r\n        onlyRewardsDistribution\r\n        updateReward(address(0))\r\n    {\r\n        if (block.timestamp >= _periodFinish) {\r\n            _rewardRate = reward.div(DURATION);\r\n        } else {\r\n            uint256 remaining = _periodFinish.sub(block.timestamp);\r\n            uint256 leftover = remaining.mul(_rewardRate);\r\n            _rewardRate = reward.add(leftover).div(DURATION);\r\n        }\r\n        _lastUpdateTime = block.timestamp;\r\n        _periodFinish = block.timestamp.add(DURATION);\r\n        emit RewardAdded(reward);\r\n    }\r\n}\r\n\r\n// File: contracts/reward/StakingRewardsFactory.sol\r\n\r\n/**\r\n *Submitted for verification at Etherscan.io on 2020-09-16\r\n*/\r\n\r\npragma solidity ^0.5.16;\r\n\r\n\r\n\r\n\r\ninterface IMinterV2ERC20 {\r\n    function mint(address dst, uint rawAmount) external;\r\n}\r\n\r\ncontract StakingRewardsFactory is Governance {\r\n    using SafeMath for uint;\r\n    // immutables\r\n    address public rewardsToken;\r\n    address public govRewardAccount;\r\n    address public devRewardAccount;\r\n    uint public stakingRateGenesis=95400;\r\n    uint public stakingRateTotal=950000;//95%Percent * 10000\r\n    uint public stakingRewardsGenesis;\r\n\r\n    // the staking tokens for which the rewards contract has been deployed\r\n    address[] public stakingTokens;\r\n\r\n    uint public rewardRateTotal=0;\r\n\r\n    // info about rewards for a particular staking token\r\n    struct StakingRewardsInfo {\r\n        address stakingRewards;\r\n        uint rewardRate;\r\n    }\r\n\r\n    // rewards info by staking token\r\n    mapping(address => StakingRewardsInfo) public stakingRewardsInfoByStakingToken;\r\n\r\n    constructor(\r\n        address _rewardsToken,\r\n        address _govRewardAccount,\r\n        address _devRewardAccount,\r\n        uint _stakingRewardsGenesis\r\n    ) Governance() public {\r\n        require(_stakingRewardsGenesis >= block.timestamp, 'StakingRewardsFactory::constructor: genesis too soon');\r\n\r\n        rewardsToken = _rewardsToken;\r\n        govRewardAccount = _govRewardAccount;\r\n        devRewardAccount = _devRewardAccount;\r\n        stakingRewardsGenesis = _stakingRewardsGenesis;\r\n    }\r\n\r\n    ///// permissioned functions\r\n\r\n    // deploy a staking reward contract for the staking token, and store the reward amount\r\n    // the reward will be distributed to the staking reward contract no sooner than the genesis\r\n    function deploy(address[] memory _stakingTokens, uint[] memory _rewardRates) public onlyGovernance {\r\n        require(_stakingTokens.length == _rewardRates.length, \"stakingTokens and rewardRates lengths mismatch\");\r\n\r\n        for (uint i = 0; i < _rewardRates.length; i++) {\r\n            require(_stakingTokens[i] != address(0), \"StakingRewardsFactory::deploy: stakingToken empty\");\r\n\r\n            StakingRewardsInfo storage  info = stakingRewardsInfoByStakingToken[_stakingTokens[i]];\r\n\r\n            rewardRateTotal = rewardRateTotal.sub(info.rewardRate).add(_rewardRates[i]);\r\n            info.rewardRate = _rewardRates[i];\r\n\r\n            if(info.stakingRewards == address(0)){\r\n                info.stakingRewards = address(new UniswapReward(\r\n                    /*rewardsDistribution_=*/ address(this),\r\n                    /*token_=*/     rewardsToken,\r\n                    /*lpToken_=*/     _stakingTokens[i]\r\n                    ));\r\n                stakingTokens.push(_stakingTokens[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    function setStakingRate(address stakingToken,uint rewardRate) public onlyGovernance {\r\n        StakingRewardsInfo storage info = stakingRewardsInfoByStakingToken[stakingToken];\r\n        require(info.stakingRewards != address(0), 'StakingRewardsFactory::setStakingEnabled: not deployed');\r\n\r\n        rewardRateTotal = rewardRateTotal.sub(info.rewardRate).add(rewardRate);\r\n        info.rewardRate = rewardRate;\r\n    }\r\n\r\n    function rewardTotalToken() public view returns (uint256) {\r\n        if (stakingRateGenesis >= stakingRateTotal) {\r\n            return stakingRateTotal.mul(100).mul(1e18);\r\n        }\r\n        return stakingRateGenesis.mul(100).mul(1e18);\r\n    }\r\n\r\n    ///// permissionless functions\r\n\r\n    // call notifyRewardAmount for all staking tokens.\r\n    function notifyRewardAmounts() public {\r\n        require(stakingTokens.length > 0, 'StakingRewardsFactory::notifyRewardAmounts: called before any deploys');\r\n        require(block.timestamp >= stakingRewardsGenesis, 'StakingRewardsFactory::notifyRewardAmounts: reward not start');\r\n        require(stakingRateTotal > 0, 'StakingRewardsFactory::notifyRewardAmounts: reward is over');\r\n\r\n        if(stakingRateGenesis >= stakingRateTotal){\r\n            stakingRateGenesis = stakingRateTotal;\r\n        }\r\n        uint _totalRewardAmount = rewardTotalToken();// equal 100_000_000 * 95400 / 10000 / 100\r\n\r\n        stakingRewardsGenesis = stakingRewardsGenesis + 7 days;\r\n        stakingRateTotal = stakingRateTotal.sub(stakingRateGenesis);\r\n        if(stakingRateGenesis > 57400){//next stop rate 5.7400%\r\n            stakingRateGenesis = stakingRateGenesis.mul(9300).div(10000);//next reward rate equal stakingRateGenesis * (1-7%)\r\n        }else if(stakingRateGenesis > 20023){\r\n            stakingRateGenesis = 20023;//next reward rate equal 2.0023%\r\n        }else{\r\n            stakingRateGenesis = stakingRateGenesis.mul(9487).div(10000);//next reward rate equal stakingRateGenesis * (1-5.13%)\r\n        }\r\n\r\n        _mint(_totalRewardAmount);\r\n\r\n        uint _govFundAmount = _totalRewardAmount.mul(5).div(100);// 5%\r\n        uint _devFundAmount = _totalRewardAmount.mul(15).div(100);// 15%\r\n        _reserveRewards(govRewardAccount,_govFundAmount);\r\n        _reserveRewards(devRewardAccount,_devFundAmount);\r\n\r\n        uint _poolRewardAmount = _totalRewardAmount.sub(_govFundAmount).sub(_devFundAmount); // 80%\r\n        _notifyPoolRewardAmounts(_poolRewardAmount);\r\n    }\r\n\r\n    function _notifyPoolRewardAmounts(uint _poolRewardAmount) private {\r\n        uint _surplusRewardAmount = _poolRewardAmount;\r\n        uint _rewardAmount = 0;\r\n        address farmAddr;\r\n\r\n        for (uint i = 0; i < stakingTokens.length; i++) {\r\n            StakingRewardsInfo memory info = stakingRewardsInfoByStakingToken[stakingTokens[i]];\r\n            if(info.rewardRate <= 0){\r\n                continue;\r\n            }\r\n            if(stakingTokens[i] == rewardsToken){\r\n                farmAddr = info.stakingRewards;\r\n                continue;\r\n            }\r\n            _rewardAmount = _poolRewardAmount.mul(info.rewardRate).div(rewardRateTotal);\r\n            if(_rewardAmount >= _surplusRewardAmount){\r\n                _rewardAmount = _surplusRewardAmount;\r\n            }\r\n            _surplusRewardAmount = _surplusRewardAmount.sub(_rewardAmount);\r\n            _notifyRewardAmount(info.stakingRewards,_rewardAmount);\r\n        }\r\n        _surplusRewardAmount = IERC20(rewardsToken).balanceOf(address(this));\r\n        if(_surplusRewardAmount > 0 && farmAddr != address(0)){\r\n            _notifyRewardAmount(farmAddr,_surplusRewardAmount);\r\n        }\r\n    }\r\n\r\n\r\n    // notify reward amount for an individual staking token.\r\n    // this is a fallback in case the notifyRewardAmounts costs too much gas to call for all contracts\r\n    function _notifyRewardAmount(address _stakingToken,uint _rewardAmount) private {\r\n        require(_stakingToken != address(0), 'StakingRewardsFactory::notifyRewardAmount: not deployed');\r\n\r\n        if (_rewardAmount > 0) {\r\n            require(\r\n                IERC20(rewardsToken).transfer(_stakingToken, _rewardAmount),\r\n                'StakingRewardsFactory::notifyRewardAmount: transfer failed'\r\n            );\r\n            UniswapReward(_stakingToken).notifyRewardAmount(_rewardAmount);\r\n        }\r\n    }\r\n\r\n    function _reserveRewards(address _account,uint _rawRewardsAmount) private {\r\n        require(_account != address(0), 'StakingRewardsFactory::_reserveRewards: not deployed');\r\n\r\n        require(\r\n            IERC20(rewardsToken).transfer(_account, _rawRewardsAmount),\r\n            'StakingRewardsFactory::_reserveRewards: transfer failed'\r\n        );\r\n    }\r\n\r\n    function _mint(uint _mintAmount) private {\r\n        require(_mintAmount > 0, 'StakingRewardsFactory::_mint: mintAmount is zero');\r\n\r\n        IMinterV2ERC20(rewardsToken).mint(address(this), _mintAmount);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_govRewardAccount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devRewardAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakingRewardsGenesis\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"GovernanceTransferred\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"_governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_stakingTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardRates\",\"type\":\"uint256[]\"}],\"name\":\"deploy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"devRewardAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"govRewardAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"notifyRewardAmounts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardRateTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardTotalToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardsToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"}],\"name\":\"setStakingRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingRateGenesis\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingRateTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingRewardsGenesis\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakingRewardsInfoByStakingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"stakingRewards\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakingTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"StakingRewardsFactory","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000034d3d2b46881588387dbe17e3b478dcb8b1a24500000000000000000000000009a23d1ba797d6f18733467b1da7e1739ba1eea8b0000000000000000000000001f91db93e06ffeb06c942bb6a0b2756ad6aaa5fc000000000000000000000000000000000000000000000000000000006008e020","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://3206878fabfbc2b5ffb5e2d9e7e28d7b5e6848f6ee464b2c07c35b92e0487703"}]}