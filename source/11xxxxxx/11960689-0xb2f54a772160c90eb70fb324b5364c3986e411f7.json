{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts\\presto\\PrestoData.sol\r\n\r\n//SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.6;\r\n\r\nstruct PrestoOperation {\r\n\r\n    address inputTokenAddress;\r\n    uint256 inputTokenAmount;\r\n\r\n    address ammPlugin;\r\n    address[] liquidityPoolAddresses;\r\n    address[] swapPath;\r\n    bool enterInETH;\r\n    bool exitInETH;\r\n\r\n    address[] receivers;\r\n    uint256[] receiversPercentages;\r\n}\r\n\r\n// File: contracts\\presto\\IPresto.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\npragma solidity ^0.7.6;\r\npragma abicoder v2;\r\n\r\n\r\ninterface IPresto {\r\n\r\n    function ONE_HUNDRED() external view returns (uint256);\r\n    function doubleProxy() external view returns (address);\r\n    function feePercentage() external view returns (uint256);\r\n\r\n    function feePercentageInfo() external view returns (uint256, address);\r\n\r\n    function setDoubleProxy(address _doubleProxy) external;\r\n\r\n    function setFeePercentage(uint256 _feePercentage) external;\r\n\r\n    function execute(PrestoOperation[] memory operations) external payable;\r\n}\r\n\r\n// File: contracts\\presto\\util\\IERC20.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\npragma solidity ^0.7.6;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns(uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: contracts\\presto\\util\\DFOHub.sol\r\n\r\n// SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.7.6;\r\n\r\ninterface IDoubleProxy {\r\n    function proxy() external view returns (address);\r\n}\r\n\r\ninterface IMVDProxy {\r\n    function getMVDFunctionalitiesManagerAddress() external view returns(address);\r\n    function getMVDWalletAddress() external view returns (address);\r\n    function getStateHolderAddress() external view returns(address);\r\n    function submit(string calldata codeName, bytes calldata data) external payable returns(bytes memory returnData);\r\n}\r\n\r\ninterface IMVDFunctionalitiesManager {\r\n    function isAuthorizedFunctionality(address functionality) external view returns(bool);\r\n}\r\n\r\ninterface IStateHolder {\r\n    function getUint256(string calldata name) external view returns(uint256);\r\n    function getAddress(string calldata name) external view returns(address);\r\n    function clear(string calldata varName) external returns(string memory oldDataType, bytes memory oldVal);\r\n}\r\n\r\n// File: contracts\\amm-aggregator\\common\\AMMData.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\npragma solidity ^0.7.6;\r\n\r\nstruct LiquidityPoolData {\r\n    address liquidityPoolAddress;\r\n    uint256 amount;\r\n    address tokenAddress;\r\n    bool amountIsLiquidityPool;\r\n    bool involvingETH;\r\n    address receiver;\r\n}\r\n\r\nstruct SwapData {\r\n    bool enterInETH;\r\n    bool exitInETH;\r\n    address[] liquidityPoolAddresses;\r\n    address[] path;\r\n    address inputToken;\r\n    uint256 amount;\r\n    address receiver;\r\n}\r\n\r\n// File: contracts\\amm-aggregator\\common\\IAMM.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\npragma solidity ^0.7.6;\r\n//pragma abicoder v2;\r\n\r\n\r\ninterface IAMM {\r\n\r\n    event NewLiquidityPoolAddress(address indexed);\r\n\r\n    function info() external view returns(string memory name, uint256 version);\r\n\r\n    function data() external view returns(address ethereumAddress, uint256 maxTokensPerLiquidityPool, bool hasUniqueLiquidityPools);\r\n\r\n    function balanceOf(address liquidityPoolAddress, address owner) external view returns(uint256, uint256[] memory, address[] memory);\r\n\r\n    function byLiquidityPool(address liquidityPoolAddress) external view returns(uint256, uint256[] memory, address[] memory);\r\n\r\n    function byTokens(address[] calldata liquidityPoolTokens) external view returns(uint256, uint256[] memory, address, address[] memory);\r\n\r\n    function byPercentage(address liquidityPoolAddress, uint256 numerator, uint256 denominator) external view returns (uint256, uint256[] memory, address[] memory);\r\n\r\n    function byLiquidityPoolAmount(address liquidityPoolAddress, uint256 liquidityPoolAmount) external view returns(uint256[] memory, address[] memory);\r\n\r\n    function byTokenAmount(address liquidityPoolAddress, address tokenAddress, uint256 tokenAmount) external view returns(uint256, uint256[] memory, address[] memory);\r\n\r\n    function createLiquidityPoolAndAddLiquidity(address[] calldata tokenAddresses, uint256[] calldata amounts, bool involvingETH, address receiver) external payable returns(uint256, uint256[] memory, address, address[] memory);\r\n\r\n    function addLiquidity(LiquidityPoolData calldata data) external payable returns(uint256, uint256[] memory, address[] memory);\r\n    function addLiquidityBatch(LiquidityPoolData[] calldata data) external payable returns(uint256[] memory, uint256[][] memory, address[][] memory);\r\n\r\n    function removeLiquidity(LiquidityPoolData calldata data) external returns(uint256, uint256[] memory, address[] memory);\r\n    function removeLiquidityBatch(LiquidityPoolData[] calldata data) external returns(uint256[] memory, uint256[][] memory, address[][] memory);\r\n\r\n    function getSwapOutput(address tokenAddress, uint256 tokenAmount, address[] calldata, address[] calldata path) view external returns(uint256[] memory);\r\n\r\n    function swapLiquidity(SwapData calldata data) external payable returns(uint256);\r\n    function swapLiquidityBatch(SwapData[] calldata data) external payable returns(uint256[] memory);\r\n}\r\n\r\n// File: contracts\\presto\\Presto.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\npragma solidity ^0.7.6;\r\n//pragma abicoder v2;\r\n\r\n\r\n\r\n\r\n\r\ncontract Presto is IPresto {\r\n\r\n    uint256 public override constant ONE_HUNDRED = 1e18;\r\n\r\n    mapping(address => uint256) private _tokenIndex;\r\n    address[] private _tokensToTransfer;\r\n    uint256[] private _tokenAmounts;\r\n\r\n    address public override doubleProxy;\r\n    uint256 public override feePercentage;\r\n\r\n    constructor(address _doubleProxy, uint256 _feePercentage) {\r\n        doubleProxy = _doubleProxy;\r\n        feePercentage = _feePercentage;\r\n    }\r\n\r\n    modifier onlyDFO() {\r\n        require(IMVDFunctionalitiesManager(IMVDProxy(IDoubleProxy(doubleProxy).proxy()).getMVDFunctionalitiesManagerAddress()).isAuthorizedFunctionality(msg.sender), \"Unauthorized.\");\r\n        _;\r\n    }\r\n\r\n    function feePercentageInfo() public override view returns (uint256, address) {\r\n        return (feePercentage, IMVDProxy(IDoubleProxy(doubleProxy).proxy()).getMVDWalletAddress());\r\n    }\r\n\r\n    function setDoubleProxy(address _doubleProxy) public override onlyDFO {\r\n        doubleProxy = _doubleProxy;\r\n    }\r\n\r\n    function setFeePercentage(uint256 _feePercentage) public override onlyDFO {\r\n        feePercentage = _feePercentage;\r\n    }\r\n\r\n    function execute(PrestoOperation[] memory operations) public override payable {\r\n        _transferToMe(operations);\r\n        for(uint256 i = 0 ; i < operations.length; i++) {\r\n            PrestoOperation memory operation = operations[i];\r\n            if(operation.ammPlugin == address(0)) {\r\n                _transferTo(operation.inputTokenAddress, operation.inputTokenAmount, operation.receivers, operation.receiversPercentages);\r\n            } else if(operation.liquidityPoolAddresses.length == 0) {\r\n                _addLiquidity(operation);\r\n            } else {\r\n                _swap(operation);\r\n            }\r\n        }\r\n        _flushAndClear();\r\n    }\r\n\r\n    function _transferToMe(PrestoOperation[] memory operations) private {\r\n        _collectTokens(operations);\r\n        for(uint256 i = 0; i < _tokensToTransfer.length; i++) {\r\n            if(_tokensToTransfer[i] == address(0)) {\r\n                require(msg.value == _tokenAmounts[i], \"Incorrect ETH value\");\r\n            } else {\r\n                _safeTransferFrom(_tokensToTransfer[i], msg.sender, address(this), _tokenAmounts[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _collectTokens(PrestoOperation[] memory operations) private {\r\n        for(uint256 i = 0; i < operations.length; i++) {\r\n            PrestoOperation memory operation = operations[i];\r\n            if(operation.ammPlugin != address(0) && operation.liquidityPoolAddresses.length == 0) {\r\n                IAMM amm = IAMM(operation.ammPlugin);\r\n                (address ethereumAddress,,) = (amm.data());\r\n                (uint256[] memory amounts, address[] memory tokensAddresses) = amm.byLiquidityPoolAmount(operation.inputTokenAddress, operation.inputTokenAmount);\r\n                bool hasEth = false;\r\n                for(uint256 z = 0; z < tokensAddresses.length; z++) {\r\n                    if(tokensAddresses[z] == ethereumAddress) {\r\n                        hasEth = true;\r\n                    }\r\n                    _collectTokenData(operation.enterInETH && tokensAddresses[z] == ethereumAddress ? address(0) : tokensAddresses[z], amounts[z]);\r\n                }\r\n                require(!operation.enterInETH || hasEth, \"Wrong use of enterInETH in addLiquidity\");\r\n            } else {\r\n                _collectTokenData(operation.ammPlugin != address(0) && operation.enterInETH ? address(0) : operation.inputTokenAddress, operation.inputTokenAmount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _collectTokenData(address inputTokenAddress, uint256 inputTokenAmount) private {\r\n        if(inputTokenAmount == 0) {\r\n            return;\r\n        }\r\n\r\n        uint256 position = _tokenIndex[inputTokenAddress];\r\n\r\n        if(_tokensToTransfer.length == 0 || _tokensToTransfer[position] != inputTokenAddress) {\r\n            _tokenIndex[inputTokenAddress] = (position = _tokensToTransfer.length);\r\n            _tokensToTransfer.push(inputTokenAddress);\r\n            _tokenAmounts.push(0);\r\n        }\r\n        _tokenAmounts[position] = _tokenAmounts[position] + inputTokenAmount;\r\n    }\r\n\r\n    function _flushAndClear() private {\r\n        for(uint256 i = 0; i < _tokensToTransfer.length; i++) {\r\n            _safeTransfer(_tokensToTransfer[i], msg.sender, _balanceOf(_tokensToTransfer[i]));\r\n            delete _tokenIndex[_tokensToTransfer[i]];\r\n        }\r\n        delete _tokensToTransfer;\r\n        delete _tokenAmounts;\r\n    }\r\n\r\n    function _balanceOf(address tokenAddress) private view returns(uint256) {\r\n        if(tokenAddress == address(0)) {\r\n            return address(this).balance;\r\n        }\r\n        return IERC20(tokenAddress).balanceOf(address(this));\r\n    }\r\n\r\n    function _addLiquidity(PrestoOperation memory operation) private {\r\n        LiquidityPoolData memory liquidityPoolData = LiquidityPoolData(\r\n            operation.inputTokenAddress,\r\n            operation.inputTokenAmount,\r\n            address(0),\r\n            true,\r\n            operation.enterInETH,\r\n            address(this)\r\n        );\r\n        (uint256 amountOut,,) = IAMM(operation.ammPlugin).addLiquidity(liquidityPoolData);\r\n        _transferTo(operation.inputTokenAddress, amountOut, operation.receivers, operation.receiversPercentages);\r\n    }\r\n\r\n    function _swap(PrestoOperation memory operation) private {\r\n\r\n        (address ethereumAddress,,) = IAMM(operation.ammPlugin).data();\r\n\r\n        if(operation.exitInETH) {\r\n            operation.swapPath[operation.swapPath.length - 1] = ethereumAddress;\r\n        }\r\n\r\n        address outputToken = operation.swapPath[operation.swapPath.length - 1];\r\n\r\n        SwapData memory swapData = SwapData(\r\n            operation.enterInETH,\r\n            operation.exitInETH,\r\n            operation.liquidityPoolAddresses,\r\n            operation.swapPath,\r\n            operation.enterInETH ? ethereumAddress : operation.inputTokenAddress,\r\n            operation.inputTokenAmount,\r\n            address(this)\r\n        );\r\n\r\n        if(swapData.inputToken != address(0) && !swapData.enterInETH) {\r\n            _safeApprove(swapData.inputToken, operation.ammPlugin, swapData.amount);\r\n        }\r\n\r\n        uint256 amountOut;\r\n        if(swapData.enterInETH) {\r\n            amountOut = IAMM(operation.ammPlugin).swapLiquidity{value : operation.inputTokenAmount}(swapData);\r\n        } else {\r\n            amountOut = IAMM(operation.ammPlugin).swapLiquidity(swapData);\r\n        }\r\n        _transferTo(operation.exitInETH ? address(0) : outputToken, amountOut, operation.receivers, operation.receiversPercentages);\r\n    }\r\n\r\n    function _calculateRewardPercentage(uint256 totalAmount, uint256 rewardPercentage) private pure returns (uint256) {\r\n        return (totalAmount * ((rewardPercentage * 1e18) / ONE_HUNDRED)) / 1e18;\r\n    }\r\n\r\n    function _transferTo(address erc20TokenAddress, uint256 totalAmount, address[] memory receivers, uint256[] memory receiversPercentages) private {\r\n        uint256 availableAmount = totalAmount;\r\n\r\n        (uint256 dfoFeePercentage, address dfoWallet) = feePercentageInfo();\r\n        uint256 currentPartialAmount = dfoFeePercentage == 0 || dfoWallet == address(0) ? 0 : _calculateRewardPercentage(availableAmount, dfoFeePercentage);\r\n        _safeTransfer(erc20TokenAddress, dfoWallet, currentPartialAmount);\r\n        availableAmount -= currentPartialAmount;\r\n\r\n        uint256 stillAvailableAmount = availableAmount;\r\n\r\n        for(uint256 i = 0; i < receivers.length - 1; i++) {\r\n            _safeTransfer(erc20TokenAddress, receivers[i], currentPartialAmount = _calculateRewardPercentage(stillAvailableAmount, receiversPercentages[i]));\r\n            availableAmount -= currentPartialAmount;\r\n        }\r\n\r\n        _safeTransfer(erc20TokenAddress, receivers[receivers.length - 1], availableAmount);\r\n    }\r\n\r\n    function _safeApprove(address erc20TokenAddress, address to, uint256 value) internal {\r\n        bytes memory returnData = _call(erc20TokenAddress, abi.encodeWithSelector(IERC20(erc20TokenAddress).approve.selector, to, value));\r\n        require(returnData.length == 0 || abi.decode(returnData, (bool)), 'APPROVE_FAILED');\r\n    }\r\n\r\n    function _safeTransfer(address erc20TokenAddress, address to, uint256 value) private {\r\n        if(value == 0) {\r\n            return;\r\n        }\r\n        if(erc20TokenAddress == address(0)) {\r\n            (bool result,) = to.call{value:value}(\"\");\r\n            require(result, \"ETH transfer failed\");\r\n            return;\r\n        }\r\n        bytes memory returnData = _call(erc20TokenAddress, abi.encodeWithSelector(IERC20(erc20TokenAddress).transfer.selector, to, value));\r\n        require(returnData.length == 0 || abi.decode(returnData, (bool)), 'TRANSFER_FAILED');\r\n    }\r\n\r\n    function _safeTransferFrom(address erc20TokenAddress, address from, address to, uint256 value) internal {\r\n        bytes memory returnData = _call(erc20TokenAddress, abi.encodeWithSelector(IERC20(erc20TokenAddress).transferFrom.selector, from, to, value));\r\n        require(returnData.length == 0 || abi.decode(returnData, (bool)), 'TRANSFERFROM_FAILED');\r\n    }\r\n\r\n    function _call(address location, bytes memory payload) private returns(bytes memory returnData) {\r\n        assembly {\r\n            let result := call(gas(), location, 0, add(payload, 0x20), mload(payload), 0, 0)\r\n            let size := returndatasize()\r\n            returnData := mload(0x40)\r\n            mstore(returnData, size)\r\n            let returnDataPayloadStart := add(returnData, 0x20)\r\n            returndatacopy(returnDataPayloadStart, 0, size)\r\n            mstore(0x40, add(returnDataPayloadStart, size))\r\n            switch result case 0 {revert(returnDataPayloadStart, size)}\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_doubleProxy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_feePercentage\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ONE_HUNDRED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"doubleProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"inputTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ammPlugin\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"liquidityPoolAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"swapPath\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enterInETH\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exitInETH\",\"type\":\"bool\"},{\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"receiversPercentages\",\"type\":\"uint256[]\"}],\"internalType\":\"struct PrestoOperation[]\",\"name\":\"operations\",\"type\":\"tuple[]\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePercentageInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_doubleProxy\",\"type\":\"address\"}],\"name\":\"setDoubleProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercentage\",\"type\":\"uint256\"}],\"name\":\"setFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Presto","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000f869538e3904778a0cb1ff620c8e83c7df36b9460000000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://db0f11a150756ea0dff847628ca7ec71b99aa758227946b30bca2de60a63263c"}]}