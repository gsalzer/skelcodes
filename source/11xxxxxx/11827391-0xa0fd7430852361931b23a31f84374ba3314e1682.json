{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/ownership/Ownable.sol\r\n\r\npragma solidity <6.0 >=0.4.0;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n// File: contracts/lifecycle/Pausable.sol\r\n\r\npragma solidity <0.6 >=0.4.24;\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n// File: contracts/iotube/TokenCashier.sol\r\n\r\npragma solidity <6.0 >=0.4.24;\r\n\r\n\r\ninterface ITokenList {\r\n    function isAllowed(address) external returns (bool);\r\n    function maxAmount(address) external returns (uint256);\r\n    function minAmount(address) external returns (uint256);\r\n}\r\n\r\ninterface IWrappedCoin {\r\n    function deposit() external payable;\r\n}\r\n\r\ncontract TokenCashier is Pausable {\r\n    event Receipt(address indexed token, uint256 indexed id, address sender, address recipient, uint256 amount, uint256 fee);\r\n\r\n    ITokenList[] public tokenLists;\r\n    address[] public tokenSafes;\r\n    mapping(address => uint256) public counts;\r\n    uint256 public depositFee;\r\n    IWrappedCoin public wrappedCoin;\r\n\r\n    constructor(IWrappedCoin _wrappedCoin, ITokenList[] memory _tokenLists, address[] memory _tokenSafes) public {\r\n        require(_tokenLists.length == _tokenSafes.length, \"# of token lists is not equal to # of safes\");\r\n        wrappedCoin = _wrappedCoin;\r\n        tokenLists = _tokenLists;\r\n        tokenSafes = _tokenSafes;\r\n    }\r\n\r\n    function() external {\r\n        revert();\r\n    }\r\n\r\n    function count(address _token) public view returns (uint256) {\r\n        return counts[_token];\r\n    }\r\n\r\n    function setDepositFee(uint256 _fee) public onlyOwner {\r\n        depositFee = _fee;\r\n    }\r\n\r\n    function depositTo(address _token, address _to, uint256 _amount) public whenNotPaused payable {\r\n        require(_to != address(0), \"invalid destination\");\r\n        bool isCoin = false;\r\n        uint256 fee = msg.value;\r\n        if (_token == address(0)) {\r\n            require(msg.value >= _amount, \"insufficient msg.value\");\r\n            fee = msg.value - _amount;\r\n            wrappedCoin.deposit.value(_amount)();\r\n            _token = address(wrappedCoin);\r\n            isCoin = true;\r\n        }\r\n        require(fee >= depositFee, \"insufficient fee\");\r\n        for (uint256 i = 0; i < tokenLists.length; i++) {\r\n            if (tokenLists[i].isAllowed(_token)) {\r\n                require(_amount >= tokenLists[i].minAmount(_token), \"amount too low\");\r\n                require(_amount <= tokenLists[i].maxAmount(_token), \"amount too high\");\r\n                if (tokenSafes[i] == address(0)) {\r\n                    require(!isCoin && safeTransferFrom(_token, msg.sender, address(this), _amount), \"fail to transfer token to cashier\");\r\n                    // selector = bytes4(keccak256(bytes('burn(uint256)')))\r\n                    (bool success, bytes memory data) = _token.call(abi.encodeWithSelector(0x42966c68, _amount));\r\n                    require(success && (data.length == 0 || abi.decode(data, (bool))), \"fail to burn token\");\r\n                } else {\r\n                    if (isCoin) {\r\n                        require(safeTransfer(_token, tokenSafes[i], _amount), \"failed to put into safe\");\r\n                    } else {\r\n                        require(safeTransferFrom(_token, msg.sender, tokenSafes[i], _amount), \"failed to put into safe\");\r\n                    }\r\n                }\r\n                counts[_token] += 1;\r\n                emit Receipt(_token, counts[_token], msg.sender, _to, _amount, fee);\r\n                return;\r\n            }\r\n        }\r\n        revert(\"not a whitelisted token\");\r\n    }\r\n\r\n    function deposit(address _token, uint256 _amount) public payable {\r\n        depositTo(_token, msg.sender, _amount);\r\n    }\r\n\r\n    function withdraw() external onlyOwner {\r\n        msg.sender.transfer(address(this).balance);\r\n    }\r\n\r\n    function withdrawToken(address _token) public onlyOwner {\r\n        // selector = bytes4(keccak256(bytes('balanceOf(address)')))\r\n        (bool success, bytes memory balance) = _token.call(abi.encodeWithSelector(0x70a08231, address(this)));\r\n        require(success, \"failed to call balanceOf\");\r\n        uint256 bal = abi.decode(balance, (uint256));\r\n        if (bal > 0) {\r\n            require(safeTransfer(_token, msg.sender, bal), \"failed to withdraw token\");\r\n        }\r\n    }\r\n\r\n    function safeTransferFrom(address _token, address _from, address _to, uint256 _amount) internal returns (bool) {\r\n        // selector = bytes4(keccak256(bytes('transferFrom(address,address,uint256)')))\r\n        (bool success, bytes memory data) = _token.call(abi.encodeWithSelector(0x23b872dd, _from, _to, _amount));\r\n        return success && (data.length == 0 || abi.decode(data, (bool)));\r\n    }\r\n\r\n    function safeTransfer(address _token, address _to, uint256 _amount) internal returns (bool) {\r\n        // selector = bytes4(keccak256(bytes('transfer(address,uint256)')))\r\n        (bool success, bytes memory data) = _token.call(abi.encodeWithSelector(0xa9059cbb, _to, _amount));\r\n        return success && (data.length == 0 || abi.decode(data, (bool)));\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IWrappedCoin\",\"name\":\"_wrappedCoin\",\"type\":\"address\"},{\"internalType\":\"contract ITokenList[]\",\"name\":\"_tokenLists\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_tokenSafes\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"Receipt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"counts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositTo\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setDepositFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenLists\",\"outputs\":[{\"internalType\":\"contract ITokenList\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenSafes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wrappedCoin\",\"outputs\":[{\"internalType\":\"contract IWrappedCoin\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"TokenCashier","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000020000000000000000000000007c0bef36e1b1cbeb1f1a5541300786a7b608aede00000000000000000000000073ffdfc98983ad59fb441fc5fe855c1589e35b3e0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000c2e0f31d739cb3153ba5760a203b3bd7c27f0d7a0000000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"bzzr://5c624abb2a0b49a962ae92a3e03c06fab4115b995ef8910aa55d6215cd911989"}]}