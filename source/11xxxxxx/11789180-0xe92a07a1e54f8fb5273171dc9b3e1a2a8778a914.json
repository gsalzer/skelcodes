{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.7.2;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a,uint256 b,string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n\r\ninterface IUniswapV2Factory {\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\n\r\ninterface Chi {\r\n\r\n    function freeFromUpTo(address from, uint256 value) external returns (uint256);\r\n    function freeUpTo(uint256 value) external returns (uint256);\r\n    \r\n}\r\n\r\ninterface Uniswap {\r\n    \r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\nabstract contract Token {\r\n    \r\n    function transfer(address to, uint256 value) public virtual returns (bool);\r\n    \r\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool);\r\n    \r\n    function approve(address _spender, uint256 _value) public virtual returns (bool);\r\n    \r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ncontract SIP {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    \r\n    event SubscribeToSpp(uint256 indexed sppID,address indexed customerAddress,uint256 value,uint256 period,address indexed tokenGet,address tokenGive);\r\n    event ChargeSpp(uint256 sppID);\r\n    event CloseSpp(uint256 sppID);\r\n    event Deposit(address indexed token,address indexed user,uint256 amount,uint256 balance);\r\n    event Withdraw(address indexed token,address indexed user,uint256 amount,uint256 balance);\r\n\r\n    modifier _ownerOnly() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier _ifNotLocked() {\r\n        require(scLock == false);\r\n        _;\r\n    }\r\n    \r\n    modifier discountCHI {\r\n        uint256 gasStart = gasleft();\r\n        _;\r\n        uint256 gasSpent = 21000 +  gasStart -  gasleft() +  (16 * msg.data.length);\r\n        uint256 _feeTokenAmt = Math.min(((gasSpent + 14154) / 41947), tokens[chiToken][msg.sender]);\r\n        if(_feeTokenAmt > 0){\r\n           tokens[chiToken][msg.sender] = tokens[chiToken][msg.sender].sub(_feeTokenAmt);\r\n           Chi(chiToken).freeUpTo(_feeTokenAmt); \r\n        }\r\n    }\r\n\r\n    function setLock() external _ownerOnly {\r\n        scLock = !scLock;\r\n    }\r\n\r\n    function changeOwner(address owner_) external _ownerOnly {\r\n        potentialAdmin = owner_;\r\n    }\r\n\r\n    function becomeOwner() external {\r\n        if (potentialAdmin == msg.sender) owner = msg.sender;\r\n    }\r\n\r\n    function depositToken(address token, uint256 amount) external {\r\n        require(token != address(0), \"IT\");\r\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\r\n        //require(Token(token).transferFrom(msg.sender, address(this), amount), \"TF\");\r\n        tokens[token][msg.sender] = SafeMath.add(\r\n            tokens[token][msg.sender],\r\n            amount\r\n        );\r\n        emit Deposit(token, msg.sender, amount, tokens[token][msg.sender]);\r\n    }\r\n\r\n    function withdrawToken(address token, uint256 amount) external {\r\n        require(token != address(0), \"IT\");\r\n        //require(tokens[token][msg.sender] >= amount, \"IB\");\r\n        tokens[token][msg.sender] = SafeMath.sub(\r\n            tokens[token][msg.sender],\r\n            amount\r\n        );\r\n        IERC20(token).safeTransfer(msg.sender, amount);\r\n        //require(Token(token).transfer(msg.sender, amount), \"WF\");\r\n        emit Withdraw(token, msg.sender, amount, tokens[token][msg.sender]);\r\n    }\r\n\r\n    function tokenBalanceOf(address token, address user) public view returns (uint256 balance) {\r\n        return tokens[token][user];\r\n    }\r\n    \r\n    function _storePairDetails(address _token0, address _token1, address _pair) internal {\r\n         if(pairDetails[_token0][_token1]==address(0)){ // NOT SET YET\r\n             pairDetails[_token0][_token1] = _pair;\r\n         }\r\n    }    \r\n    \r\n\r\n    function subscribeToSpp(uint256 value, uint256 period, address tokenGet, address tokenGive) external _ifNotLocked returns (uint256 sID) {\r\n        address customerAddress = msg.sender;\r\n        require(period >= minPeriod, \"MIN_FREQUENCY\");\r\n        require(period.mod(3600) == 0, \"INTEGRAL_MULTIPLE_OF_HOUR_NEEDED\");\r\n        require(tokenBalanceOf(tokenGive,customerAddress) >= value, \"INSUFFICENT_BALANCE\");\r\n            _deductFee(customerAddress, WETH, initFee);\r\n            sppID += 1;\r\n            \r\n            require(tokenGet != tokenGive, 'IDENTICAL_ADDRESSES');\r\n            (address token0, address token1) = tokenGet < tokenGive ? (tokenGet, tokenGive) : (tokenGive, tokenGet);\r\n            require(token0 != address(0), 'ZERO_ADDRESS');\r\n            address pair = IUniswapV2Factory(factory).getPair(tokenGet, tokenGive); //reverse this and try\r\n            \r\n            require(pair != address(0), 'NO_SUCH_PAIR');\r\n            \r\n            if(token0==tokenGet){\r\n                if(map1[pair].exists== false){\r\n                    map1[pair].token.push(tokenGive);\r\n                    map1[pair].token.push(tokenGet);\r\n                    map1[pair].exists = true;\r\n                    map1[pair].position = 0;\r\n                    _storePairDetails(token0, token1, pair);\r\n                }\r\n                map1[pair].sppList.push(sppID);\r\n            }\r\n            else{\r\n                if(map2[pair].exists== false){\r\n                    map2[pair].token.push(tokenGive);\r\n                    map2[pair].token.push(tokenGet);\r\n                    map2[pair].exists = true;\r\n                    map2[pair].position = 0;\r\n                    _storePairDetails(token0, token1, pair);\r\n                }\r\n                map2[pair].sppList.push(sppID);\r\n            }\r\n            \r\n            sppSubscriptionStats[sppID] = sppSubscribers({\r\n                exists: true,\r\n                customerAddress: customerAddress,\r\n                value: value,\r\n                period: period,\r\n                lastPaidAt: (block.timestamp).sub(period)\r\n            });\r\n            tokenStats[sppID] = currentTokenStats({\r\n                TokenToGet: tokenGet,\r\n                TokenToGive: tokenGive,\r\n                amountGotten: 0,\r\n                amountGiven: 0\r\n            });\r\n            sppSubList[customerAddress].arr.push(sppID);\r\n            emit SubscribeToSpp(sppID,customerAddress,value,period,tokenGet,tokenGive);\r\n            return sppID;\r\n    }\r\n    \r\n    \r\n    function possibleToCharge(uint256 _sppID) public view returns (bool) {\r\n        \r\n        sppSubscribers storage _subscriptionData = sppSubscriptionStats[_sppID];\r\n        currentTokenStats storage _tokenStats = tokenStats[_sppID];\r\n        address tokenGive = _tokenStats.TokenToGive;\r\n        if(_subscriptionData.exists==false){\r\n            return false; // SIP is not active\r\n        }\r\n        else if(tokens[WETH][_subscriptionData.customerAddress] < minWETH){\r\n            return false; // No WETH to pay for fee\r\n        }\r\n        else if(_subscriptionData.value > tokens[tokenGive][_subscriptionData.customerAddress]){\r\n            return false; // Insufficient Balance\r\n        }\r\n        \r\n        return true;\r\n    }\r\n\r\n\r\n    function chargeWithSPPIndexes(address pair, uint256[] calldata _indexes, bool _upwards) external _ownerOnly _ifNotLocked discountCHI {\r\n        \r\n        uint256 gasStart = 21000 + gasleft() + 3000 +  (16 * msg.data.length);\r\n\r\n        uint256[] memory result;\r\n        pairStats storage _pairData = map1[pair]; \r\n        \r\n        if(!_upwards){\r\n           _pairData = map2[pair]; \r\n        }\r\n        \r\n        uint256[] storage sppList = _pairData.sppList;\r\n        \r\n        require(sppList.length!=0, \"No SIP to charge\");\r\n        \r\n        address[] storage pathSwap = _pairData.token;\r\n        \r\n        uint256 finalAmountGive = 0;\r\n        uint256 finalAmountGotten = 0;\r\n        \r\n        chargeSppStruct[] memory sppCharged = new chargeSppStruct[]((_indexes.length + 1));\r\n        \r\n        uint successIndex = 0;\r\n        \r\n        for(uint256 i=0; i< _indexes.length; i++){\r\n            if(_indexes[i] > (sppList.length-1)){\r\n                continue; // No such SIP index. Invalid input. Return and save GAS\r\n            }\r\n            uint256 _sppID = sppList[_indexes[i]];\r\n            sppSubscribers storage _subscriptionData = sppSubscriptionStats[_sppID];\r\n            if(_subscriptionData.exists==false){\r\n                continue; // SIP is not active\r\n            }\r\n            else if(tokens[WETH][_subscriptionData.customerAddress] < minWETH){\r\n                continue; // No WETH to pay for fee\r\n            }\r\n            else if(_subscriptionData.lastPaidAt + _subscriptionData.period > block.timestamp){\r\n                continue; // Charging too early\r\n            }\r\n            else if(_subscriptionData.value > tokens[pathSwap[0]][_subscriptionData.customerAddress]){\r\n                continue; // Insufficient Balance\r\n            }\r\n            else {\r\n                finalAmountGive += _subscriptionData.value;\r\n                _deductTokens(_subscriptionData.value, _subscriptionData.customerAddress, pathSwap[0]);\r\n                sppCharged[successIndex] = chargeSppStruct({\r\n                    sppId: _sppID,\r\n                    amt: _subscriptionData.value,\r\n                    custAdd: _subscriptionData.customerAddress\r\n                });\r\n                successIndex++;\r\n            }\r\n        }\r\n        \r\n        require(finalAmountGive > 0 , \"Nothing to charge\");\r\n        \r\n        uint256[] memory amounts = Uniswap(uniswapContractAddress).getAmountsOut(finalAmountGive, pathSwap);\r\n        \r\n        require(Token(pathSwap[0]).approve(uniswapContractAddress,finalAmountGive),\"approve failed\");\r\n        result = Uniswap(uniswapContractAddress).swapExactTokensForTokens(finalAmountGive, amounts[1], pathSwap, address(this), block.timestamp+1000);\r\n        \r\n        // take some fee here first\r\n        finalAmountGotten = result[1];\r\n        finalAmountGotten = finalAmountGotten.sub(_deductSppFee(finalAmountGotten, pathSwap[1]));\r\n\r\n        uint256 txFee = (gasStart - gasleft() +  (successIndex * 50000)) * tx.gasprice;\r\n        uint256 _feeDed = txFee;\r\n        \r\n        for(uint256 k=0; k<successIndex; k++){\r\n            uint256 _credAmt = ((sppCharged[k].amt).mul(finalAmountGotten)).div(finalAmountGive);\r\n            uint256 _feeWETH = ((sppCharged[k].amt).mul(txFee)).div(finalAmountGive);\r\n            _creditTokens( _credAmt, sppCharged[k].custAdd, pathSwap[1]);\r\n            _deductTokens(Math.min(_feeWETH, tokens[WETH][sppCharged[k].custAdd]), sppCharged[k].custAdd, WETH);\r\n            _feeDed = _feeDed - Math.min(_feeWETH, tokens[WETH][sppCharged[k].custAdd]);\r\n            require(setcurrentTokenStats(sppCharged[k].sppId, _credAmt, sppCharged[k].amt),\"setcurrentTokenStats failed\");\r\n            require(setLastPaidAt(sppCharged[k].sppId),\"setLastPaidAt failed\");\r\n        }\r\n        _creditTokens((txFee - _feeDed), feeAccount, WETH);\r\n    }\r\n\r\n    function chargeSppByID(uint256 _sppId) external _ifNotLocked discountCHI {\r\n        \r\n        uint256[] memory result;\r\n        currentTokenStats storage _tokenStats = tokenStats[_sppId];\r\n        \r\n        address tokenGive = _tokenStats.TokenToGive;\r\n        address tokenGet = _tokenStats.TokenToGet;\r\n        \r\n        uint256 finalAmountGive = 0;\r\n        uint256 finalAmountGotten = 0;\r\n        \r\n        address[] memory paths = new address[](2);\r\n        paths[0] = tokenGive;\r\n        paths[1] = tokenGet;\r\n        \r\n\r\n        sppSubscribers storage _subscriptionData = sppSubscriptionStats[_sppId];\r\n        require(_subscriptionData.exists==true, \"NVS\");\r\n        require(_subscriptionData.lastPaidAt + _subscriptionData.period <= block.timestamp, \"CTE\");\r\n        require(_subscriptionData.value <= tokens[tokenGive][_subscriptionData.customerAddress], \"IB\");\r\n\r\n        finalAmountGive = _subscriptionData.value;\r\n        require(finalAmountGive > 0 , \"Nothing to charge\");\r\n        \r\n        \r\n        _deductTokens(_subscriptionData.value, _subscriptionData.customerAddress, tokenGive);\r\n        \r\n        \r\n        uint256[] memory amounts = Uniswap(uniswapContractAddress).getAmountsOut(finalAmountGive, paths);\r\n        \r\n        require(Token(tokenGive).approve(uniswapContractAddress,finalAmountGive),\"approve failed\");\r\n        result = Uniswap(uniswapContractAddress).swapExactTokensForTokens(finalAmountGive, amounts[1], paths, address(this), block.timestamp+1000);\r\n        \r\n        // take some fee here first\r\n        finalAmountGotten = result[1];\r\n        finalAmountGotten = finalAmountGotten.sub(_deductSppFee(finalAmountGotten, tokenGet));\r\n\r\n        _creditTokens( finalAmountGotten, _subscriptionData.customerAddress, tokenGet);\r\n        require(setcurrentTokenStats(_sppId, finalAmountGotten, _subscriptionData.value),\"setcurrentTokenStats failed\");\r\n        require(setLastPaidAt(_sppId),\"setLastPaidAt failed\");\r\n\r\n    }\r\n    \r\n \r\n    function _deductSppFee(uint256 _amt, address _token) internal returns (uint256) {\r\n        uint256 _feeAmt = ((_amt).mul(fee)).div(10000);\r\n        _creditTokens(_feeAmt, feeAccount, _token);\r\n        return _feeAmt;\r\n    }\r\n    \r\n    function _deductTokens(uint256 _amt, address _custAdd, address _token) internal {\r\n        tokens[_token][_custAdd] = SafeMath.sub(tokens[_token][_custAdd],_amt);\r\n    }\r\n    \r\n    function _creditTokens(uint256 _amt, address _custAdd, address _token) internal {\r\n        tokens[_token][_custAdd] = SafeMath.add(tokens[_token][_custAdd],_amt);\r\n    }\r\n    \r\n\r\n    function closeSpp(uint256 _sppId) external returns (bool success) {\r\n        require(msg.sender == sppSubscriptionStats[_sppId].customerAddress, \"NA\");\r\n        sppSubscriptionStats[_sppId].exists = false;\r\n        inactiveSIP[_sppId] = true;\r\n        emit CloseSpp(_sppId);\r\n        return true;\r\n    }\r\n    \r\n    function _deductFee(address customerAddress, address token, uint256 amount) internal {\r\n        tokens[token][customerAddress] = tokens[token][customerAddress].sub(amount);\r\n        tokens[token][feeAccount] = tokens[token][feeAccount].add(amount);\r\n    }\r\n    \r\n\r\n    function setAddresses(address feeAccount1, address uniswapContractAddress1, address factory1, address _chi, address _weth) external _ownerOnly {\r\n        feeAccount = feeAccount1;\r\n        uniswapContractAddress = uniswapContractAddress1;\r\n        factory = factory1;\r\n        chiToken = _chi;\r\n        WETH = _weth;\r\n    }\r\n\r\n    function setMinPeriod(uint256 p) external _ownerOnly {\r\n        minPeriod = p;\r\n    }\r\n\r\n    function setLastPaidAt(uint256 _sppID) internal returns (bool success) {\r\n        sppSubscribers storage _subscriptionData = sppSubscriptionStats[_sppID];\r\n        _subscriptionData.lastPaidAt = getNearestHour(block.timestamp);\r\n        return true;\r\n    }\r\n\r\n    function setcurrentTokenStats(uint256 _sppID, uint256 amountGotten, uint256 amountGiven) internal returns (bool success) {\r\n        currentTokenStats storage _tokenStats = tokenStats[_sppID];\r\n        _tokenStats.amountGotten = _tokenStats.amountGotten.add(amountGotten);\r\n        _tokenStats.amountGiven = _tokenStats.amountGiven.add(amountGiven);\r\n        return true;\r\n    }\r\n\r\n    function isActiveSpp(uint256 _sppID) public view returns (bool res) {\r\n        return sppSubscriptionStats[_sppID].exists;\r\n    }\r\n    \r\n     function getLatestSppId() public view returns (uint256 sppId) {\r\n        return sppID;\r\n    }\r\n\r\n    function getlistOfSppSubscriptions(address _from) public view returns (uint256[] memory arr) {\r\n        return sppSubList[_from].arr;\r\n    }\r\n\r\n    function getcurrentTokenAmounts(uint256 _sppID) public view returns (uint256[2] memory arr) {\r\n        arr[0] = tokenStats[_sppID].amountGotten;\r\n        arr[1] = tokenStats[_sppID].amountGiven;\r\n        return arr;\r\n    }\r\n\r\n    function getTokenStats(uint256 _sppID) public view returns (address[2] memory arr) {\r\n        arr[0] = tokenStats[_sppID].TokenToGet;\r\n        arr[1] = tokenStats[_sppID].TokenToGive;\r\n        return arr;\r\n    }\r\n    \r\n    function fetchPairAndDirection(uint256 _sppID) public view returns (bool direction, address pair) {\r\n        currentTokenStats storage _tokenStats = tokenStats[_sppID];\r\n        \r\n        address tokenGive = _tokenStats.TokenToGive;\r\n        address tokenGet = _tokenStats.TokenToGet;\r\n\r\n        (address token0, address token1) = tokenGet < tokenGive ? (tokenGet, tokenGive) : (tokenGive, tokenGet);\r\n\r\n        address _pair = pairDetails[token0][token1];\r\n        bool _direction = false;\r\n\r\n        if(token0==tokenGet){\r\n            _direction = true;\r\n        }\r\n        return (_direction, _pair);\r\n    }\r\n    \r\n    function fetchPathDetailsAdd(address _pair, bool _upwards) public view returns (address[] memory arr) {\r\n        if (_upwards){\r\n           return map1[_pair].token; \r\n        }\r\n        else {\r\n            return map2[_pair].token;\r\n        }\r\n    }\r\n    \r\n    function fetchPathDetailsSPP(address _pair, bool _upwards) public view returns (uint256[] memory arr) {\r\n        if (_upwards){\r\n           return map1[_pair].sppList; \r\n        }\r\n        else {\r\n            return map2[_pair].sppList;\r\n        }\r\n    }\r\n\r\n    function getTimeRemainingToCharge(uint256 _sppID) public view returns (uint256 time) {\r\n        if((sppSubscriptionStats[_sppID].lastPaidAt).add(sppSubscriptionStats[_sppID].period) < block.timestamp){\r\n            return 0;\r\n        }\r\n        else {\r\n          return ((sppSubscriptionStats[_sppID].lastPaidAt).add(sppSubscriptionStats[_sppID].period).sub(block.timestamp));  \r\n        }\r\n    }\r\n    \r\n    // Update dev address by initiating with the previous dev.\r\n    function changeFee(uint8 _fee) external _ownerOnly{\r\n        require(_fee <= 25, \"Cannot increase fee beyond 25\");\r\n        fee = _fee;\r\n    }\r\n\r\n    // Update min WETH needed for cgarge SIP to run.\r\n    function changeMinWETH(uint256 _minWETH) external _ownerOnly{\r\n        minWETH = _minWETH;\r\n    }\r\n\r\n    // Update min WETH needed for cgarge SIP to run.\r\n    function setInitFee(uint256 _initFee) external _ownerOnly{\r\n        initFee = _initFee;\r\n    }\r\n    \r\n    // Change starting position of a pair.\r\n    function changePosition(address pair, uint256 _index, bool _upwards) external _ownerOnly{\r\n        if(_upwards){\r\n            map1[pair].position = _index;\r\n        }\r\n        else {\r\n            map2[pair].position = _index;\r\n        }\r\n    }\r\n    \r\n    // This function is to optimise batching process\r\n    function getNearestHour(uint256 _time) public pure returns (uint256) {\r\n        uint256 _secondsExtra = _time.mod(3600);\r\n        if(_secondsExtra > 1800){\r\n            return ((_time).add(3600)).sub(_secondsExtra);\r\n        }\r\n        else {\r\n            return (_time).sub(_secondsExtra);\r\n        }\r\n    }\r\n\r\n    struct sppSubscribers {\r\n        bool exists;\r\n        address customerAddress;\r\n        uint256 value; \r\n        uint256 period;\r\n        uint256 lastPaidAt;\r\n    }\r\n\r\n    struct currentTokenStats {\r\n        address TokenToGet;\r\n        uint256 amountGotten;\r\n        address TokenToGive;\r\n        uint256 amountGiven;\r\n    }\r\n\r\n    struct listOfSppByAddress {\r\n        uint256[] arr;\r\n    }\r\n    \r\n    struct pairStats{\r\n        address[] token;\r\n        uint256[] sppList;\r\n        bool exists;\r\n        uint256 position;\r\n    }\r\n    \r\n    struct chargeSppStruct {\r\n        uint256 sppId;\r\n        uint256 amt;\r\n        address custAdd;\r\n    }\r\n    \r\n    mapping(uint256 => uint256) public sppAmounts;\r\n    mapping(address => pairStats) private map1;\r\n    mapping(address => pairStats) private map2;\r\n    mapping(uint256 => currentTokenStats) tokenStats;\r\n    mapping(address => listOfSppByAddress) sppSubList;\r\n    mapping(uint256 => sppSubscribers) public sppSubscriptionStats;\r\n    mapping(address => mapping(address => uint256)) public tokens;\r\n\r\n    mapping(uint256 => bool) public inactiveSIP; // contains a SIP ID only if it existed and now has been deactivated\r\n    \r\n    // TOKEN0 -> TOKEN1 -> PAIRADD\r\n    mapping(address => mapping(address => address)) public pairDetails;\r\n\r\n    \r\n    address public uniswapContractAddress;\r\n    address public factory;\r\n    address public owner;\r\n    address public chiToken;\r\n    address public WETH;\r\n    address private potentialAdmin;\r\n    uint256 public sppID;\r\n    address public feeAccount;\r\n    bool public scLock = false;\r\n    uint8 public fee = 25;\r\n    uint256 public minPeriod = 3600;\r\n    uint256 public minWETH;\r\n    uint256 public initFee;\r\n    \r\n}\r\n\r\ncontract SIPDapp is SIP {\r\n    receive() external payable {\r\n        revert();\r\n    }\r\n\r\n    string public name;\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n        name = \"BNS SIP Dapp\";\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sppID\",\"type\":\"uint256\"}],\"name\":\"ChargeSpp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sppID\",\"type\":\"uint256\"}],\"name\":\"CloseSpp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sppID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenGet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenGive\",\"type\":\"address\"}],\"name\":\"SubscribeToSpp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"becomeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_fee\",\"type\":\"uint8\"}],\"name\":\"changeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minWETH\",\"type\":\"uint256\"}],\"name\":\"changeMinWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_upwards\",\"type\":\"bool\"}],\"name\":\"changePosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sppId\",\"type\":\"uint256\"}],\"name\":\"chargeSppByID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_indexes\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"_upwards\",\"type\":\"bool\"}],\"name\":\"chargeWithSPPIndexes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chiToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sppId\",\"type\":\"uint256\"}],\"name\":\"closeSpp\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sppID\",\"type\":\"uint256\"}],\"name\":\"fetchPairAndDirection\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"direction\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_upwards\",\"type\":\"bool\"}],\"name\":\"fetchPathDetailsAdd\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"arr\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_upwards\",\"type\":\"bool\"}],\"name\":\"fetchPathDetailsSPP\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"arr\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestSppId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sppId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"getNearestHour\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sppID\",\"type\":\"uint256\"}],\"name\":\"getTimeRemainingToCharge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sppID\",\"type\":\"uint256\"}],\"name\":\"getTokenStats\",\"outputs\":[{\"internalType\":\"address[2]\",\"name\":\"arr\",\"type\":\"address[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sppID\",\"type\":\"uint256\"}],\"name\":\"getcurrentTokenAmounts\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"arr\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"}],\"name\":\"getlistOfSppSubscriptions\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"arr\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"inactiveSIP\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sppID\",\"type\":\"uint256\"}],\"name\":\"isActiveSpp\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"res\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minWETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pairDetails\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sppID\",\"type\":\"uint256\"}],\"name\":\"possibleToCharge\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeAccount1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uniswapContractAddress1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factory1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_chi\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_initFee\",\"type\":\"uint256\"}],\"name\":\"setInitFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"p\",\"type\":\"uint256\"}],\"name\":\"setMinPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sppAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sppID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sppSubscriptionStats\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"customerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastPaidAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenGet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenGive\",\"type\":\"address\"}],\"name\":\"subscribeToSpp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sID\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"tokenBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"SIPDapp","CompilerVersion":"v0.7.2+commit.51b20bc0","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://5a00ef279a43f8ef739f240cbe7aeb040df99602ce9cb57ca0e293d59ef59fd9"}]}