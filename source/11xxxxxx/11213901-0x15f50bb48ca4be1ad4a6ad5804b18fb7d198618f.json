{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: Apache-2.0\r\npragma solidity ^0.7.0;\r\npragma experimental ABIEncoderV2;\r\n// File: contracts/iface/Wallet.sol\r\n\r\n// Copyright 2017 Loopring Technology Limited.\r\n\r\n\r\n/// @title Wallet\r\n/// @dev Base contract for smart wallets.\r\n///      Sub-contracts must NOT use non-default constructor to initialize\r\n///      wallet states, instead, `init` shall be used. This is to enable\r\n///      proxies to be deployed in front of the real wallet contract for\r\n///      saving gas.\r\n///\r\n/// @author Daniel Wang - <daniel@loopring.org>\r\ninterface Wallet\r\n{\r\n    function version() external pure returns (string memory);\r\n\r\n    function owner() external view returns (address);\r\n\r\n    /// @dev Set a new owner.\r\n    function setOwner(address newOwner) external;\r\n\r\n    /// @dev Adds a new module. The `init` method of the module\r\n    ///      will be called with `address(this)` as the parameter.\r\n    ///      This method must throw if the module has already been added.\r\n    /// @param _module The module's address.\r\n    function addModule(address _module) external;\r\n\r\n    /// @dev Removes an existing module. This method must throw if the module\r\n    ///      has NOT been added or the module is the wallet's only module.\r\n    /// @param _module The module's address.\r\n    function removeModule(address _module) external;\r\n\r\n    /// @dev Checks if a module has been added to this wallet.\r\n    /// @param _module The module to check.\r\n    /// @return True if the module exists; False otherwise.\r\n    function hasModule(address _module) external view returns (bool);\r\n\r\n    /// @dev Binds a method from the given module to this\r\n    ///      wallet so the method can be invoked using this wallet's default\r\n    ///      function.\r\n    ///      Note that this method must throw when the given module has\r\n    ///      not been added to this wallet.\r\n    /// @param _method The method's 4-byte selector.\r\n    /// @param _module The module's address. Use address(0) to unbind the method.\r\n    function bindMethod(bytes4 _method, address _module) external;\r\n\r\n    /// @dev Returns the module the given method has been bound to.\r\n    /// @param _method The method's 4-byte selector.\r\n    /// @return _module The address of the bound module. If no binding exists,\r\n    ///                 returns address(0) instead.\r\n    function boundMethodModule(bytes4 _method) external view returns (address _module);\r\n\r\n    /// @dev Performs generic transactions. Any module that has been added to this\r\n    ///      wallet can use this method to transact on any third-party contract with\r\n    ///      msg.sender as this wallet itself.\r\n    ///\r\n    ///      Note: 1) this method must ONLY allow invocations from a module that has\r\n    ///      been added to this wallet. The wallet owner shall NOT be permitted\r\n    ///      to call this method directly. 2) Reentrancy inside this function should\r\n    ///      NOT cause any problems.\r\n    ///\r\n    /// @param mode The transaction mode, 1 for CALL, 2 for DELEGATECALL.\r\n    /// @param to The desitination address.\r\n    /// @param value The amount of Ether to transfer.\r\n    /// @param data The data to send over using `to.call{value: value}(data)`\r\n    /// @return returnData The transaction's return value.\r\n    function transact(\r\n        uint8    mode,\r\n        address  to,\r\n        uint     value,\r\n        bytes    calldata data\r\n        )\r\n        external\r\n        returns (bytes memory returnData);\r\n}\r\n\r\n// File: contracts/base/DataStore.sol\r\n\r\n// Copyright 2017 Loopring Technology Limited.\r\n\r\n\r\n\r\n/// @title DataStore\r\n/// @dev Modules share states by accessing the same storage instance.\r\n///      Using ModuleStorage will achieve better module decoupling.\r\n///\r\n/// @author Daniel Wang - <daniel@loopring.org>\r\nabstract contract DataStore\r\n{\r\n    modifier onlyWalletModule(address wallet)\r\n    {\r\n        requireWalletModule(wallet);\r\n        _;\r\n    }\r\n\r\n    function requireWalletModule(address wallet) view internal\r\n    {\r\n        require(Wallet(wallet).hasModule(msg.sender), \"UNAUTHORIZED\");\r\n    }\r\n}\r\n\r\n// File: contracts/iface/PriceOracle.sol\r\n\r\n// Copyright 2017 Loopring Technology Limited.\r\n\r\n\r\n/// @title PriceOracle\r\ninterface PriceOracle\r\n{\r\n    // @dev Return's the token's value in ETH\r\n    function tokenValue(address token, uint amount)\r\n        external\r\n        view\r\n        returns (uint value);\r\n}\r\n\r\n// File: contracts/lib/MathUint.sol\r\n\r\n// Copyright 2017 Loopring Technology Limited.\r\n\r\n\r\n/// @title Utility Functions for uint\r\n/// @author Daniel Wang - <daniel@loopring.org>\r\nlibrary MathUint\r\n{\r\n    function mul(\r\n        uint a,\r\n        uint b\r\n        )\r\n        internal\r\n        pure\r\n        returns (uint c)\r\n    {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b, \"MUL_OVERFLOW\");\r\n    }\r\n\r\n    function sub(\r\n        uint a,\r\n        uint b\r\n        )\r\n        internal\r\n        pure\r\n        returns (uint)\r\n    {\r\n        require(b <= a, \"SUB_UNDERFLOW\");\r\n        return a - b;\r\n    }\r\n\r\n    function add(\r\n        uint a,\r\n        uint b\r\n        )\r\n        internal\r\n        pure\r\n        returns (uint c)\r\n    {\r\n        c = a + b;\r\n        require(c >= a, \"ADD_OVERFLOW\");\r\n    }\r\n}\r\n\r\n// File: contracts/thirdparty/SafeCast.sol\r\n\r\n// Taken from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/SafeCast.sol\r\n\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\r\n * checks.\r\n *\r\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\r\n * easily result in undesired exploitation or bugs, since developers usually\r\n * assume that overflows raise errors. `SafeCast` restores this intuition by\r\n * reverting the transaction when such an operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n *\r\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\r\n * all math on `uint256` and `int256` and then downcasting.\r\n */\r\nlibrary SafeCast {\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint128 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint128).\r\n     *\r\n     * Counterpart to Solidity's `uint128` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 128 bits\r\n     */\r\n    function toUint128(uint256 value) internal pure returns (uint128) {\r\n        require(value < 2**128, \"SafeCast: value doesn\\'t fit in 128 bits\");\r\n        return uint128(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint96 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint96).\r\n     *\r\n     * Counterpart to Solidity's `uint96` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 96 bits\r\n     */\r\n    function toUint96(uint256 value) internal pure returns (uint96) {\r\n        require(value < 2**96, \"SafeCast: value doesn\\'t fit in 96 bits\");\r\n        return uint96(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint64 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint64).\r\n     *\r\n     * Counterpart to Solidity's `uint64` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 64 bits\r\n     */\r\n    function toUint64(uint256 value) internal pure returns (uint64) {\r\n        require(value < 2**64, \"SafeCast: value doesn\\'t fit in 64 bits\");\r\n        return uint64(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint32 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint32).\r\n     *\r\n     * Counterpart to Solidity's `uint32` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 32 bits\r\n     */\r\n    function toUint32(uint256 value) internal pure returns (uint32) {\r\n        require(value < 2**32, \"SafeCast: value doesn\\'t fit in 32 bits\");\r\n        return uint32(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint40 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint40).\r\n     *\r\n     * Counterpart to Solidity's `uint32` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 40 bits\r\n     */\r\n    function toUint40(uint256 value) internal pure returns (uint40) {\r\n        require(value < 2**40, \"SafeCast: value doesn\\'t fit in 40 bits\");\r\n        return uint40(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint16 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint16).\r\n     *\r\n     * Counterpart to Solidity's `uint16` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 16 bits\r\n     */\r\n    function toUint16(uint256 value) internal pure returns (uint16) {\r\n        require(value < 2**16, \"SafeCast: value doesn\\'t fit in 16 bits\");\r\n        return uint16(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint8 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint8).\r\n     *\r\n     * Counterpart to Solidity's `uint8` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 8 bits.\r\n     */\r\n    function toUint8(uint256 value) internal pure returns (uint8) {\r\n        require(value < 2**8, \"SafeCast: value doesn\\'t fit in 8 bits\");\r\n        return uint8(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a signed int256 into an unsigned uint256.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must be greater than or equal to 0.\r\n     */\r\n    function toUint256(int256 value) internal pure returns (uint256) {\r\n        require(value >= 0, \"SafeCast: value must be positive\");\r\n        return uint256(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int128 from int256, reverting on\r\n     * overflow (when the input is less than smallest int128 or\r\n     * greater than largest int128).\r\n     *\r\n     * Counterpart to Solidity's `int128` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 128 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt128(int256 value) internal pure returns (int128) {\r\n        require(value >= -2**127 && value < 2**127, \"SafeCast: value doesn\\'t fit in 128 bits\");\r\n        return int128(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int64 from int256, reverting on\r\n     * overflow (when the input is less than smallest int64 or\r\n     * greater than largest int64).\r\n     *\r\n     * Counterpart to Solidity's `int64` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 64 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt64(int256 value) internal pure returns (int64) {\r\n        require(value >= -2**63 && value < 2**63, \"SafeCast: value doesn\\'t fit in 64 bits\");\r\n        return int64(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int32 from int256, reverting on\r\n     * overflow (when the input is less than smallest int32 or\r\n     * greater than largest int32).\r\n     *\r\n     * Counterpart to Solidity's `int32` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 32 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt32(int256 value) internal pure returns (int32) {\r\n        require(value >= -2**31 && value < 2**31, \"SafeCast: value doesn\\'t fit in 32 bits\");\r\n        return int32(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int16 from int256, reverting on\r\n     * overflow (when the input is less than smallest int16 or\r\n     * greater than largest int16).\r\n     *\r\n     * Counterpart to Solidity's `int16` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 16 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt16(int256 value) internal pure returns (int16) {\r\n        require(value >= -2**15 && value < 2**15, \"SafeCast: value doesn\\'t fit in 16 bits\");\r\n        return int16(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int8 from int256, reverting on\r\n     * overflow (when the input is less than smallest int8 or\r\n     * greater than largest int8).\r\n     *\r\n     * Counterpart to Solidity's `int8` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 8 bits.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt8(int256 value) internal pure returns (int8) {\r\n        require(value >= -2**7 && value < 2**7, \"SafeCast: value doesn\\'t fit in 8 bits\");\r\n        return int8(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an unsigned uint256 into a signed int256.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must be less than or equal to maxInt256.\r\n     */\r\n    function toInt256(uint256 value) internal pure returns (int256) {\r\n        require(value < 2**255, \"SafeCast: value doesn't fit in an int256\");\r\n        return int256(value);\r\n    }\r\n}\r\n\r\n// File: contracts/stores/QuotaStore.sol\r\n\r\n// Copyright 2017 Loopring Technology Limited.\r\n\r\n\r\n\r\n\r\n\r\n/// @title QuotaStore\r\n/// @dev This store maintains daily spending quota for each wallet.\r\n///      A rolling daily limit is used.\r\ncontract QuotaStore is DataStore\r\n{\r\n    using MathUint for uint;\r\n    using SafeCast for uint;\r\n\r\n    uint128 public constant MAX_QUOTA = uint128(-1);\r\n\r\n    // Optimized to fit into 64 bytes (2 slots)\r\n    struct Quota\r\n    {\r\n        uint128 currentQuota;\r\n        uint128 pendingQuota;\r\n        uint128 spentAmount;\r\n        uint64  spentTimestamp;\r\n        uint64  pendingUntil;\r\n    }\r\n\r\n    mapping (address => Quota) public quotas;\r\n\r\n    event QuotaScheduled(\r\n        address wallet,\r\n        uint    pendingQuota,\r\n        uint64  pendingUntil\r\n    );\r\n\r\n    constructor()\r\n        DataStore()\r\n    {\r\n    }\r\n\r\n    // 0 for newQuota indicates unlimited quota, or daily quota is disabled.\r\n    function changeQuota(\r\n        address wallet,\r\n        uint    newQuota,\r\n        uint    effectiveTime\r\n        )\r\n        external\r\n        onlyWalletModule(wallet)\r\n    {\r\n        require(newQuota <= MAX_QUOTA, \"INVALID_VALUE\");\r\n        if (newQuota == MAX_QUOTA) {\r\n            newQuota = 0;\r\n        }\r\n\r\n        quotas[wallet].currentQuota = currentQuota(wallet).toUint128();\r\n        quotas[wallet].pendingQuota = newQuota.toUint128();\r\n        quotas[wallet].pendingUntil = effectiveTime.toUint64();\r\n\r\n        emit QuotaScheduled(\r\n            wallet,\r\n            newQuota,\r\n            quotas[wallet].pendingUntil\r\n        );\r\n    }\r\n\r\n    function checkAndAddToSpent(\r\n        address     wallet,\r\n        address     token,\r\n        uint        amount,\r\n        PriceOracle priceOracle\r\n        )\r\n        external\r\n    {\r\n        Quota memory q = quotas[wallet];\r\n        uint available = _availableQuota(q);\r\n        if (available != MAX_QUOTA) {\r\n            uint value = (token == address(0)) ?\r\n                amount :\r\n                priceOracle.tokenValue(token, amount);\r\n            if (value > 0) {\r\n                require(available >= value, \"QUOTA_EXCEEDED\");\r\n                requireWalletModule(wallet);\r\n                _addToSpent(wallet, q, value);\r\n            }\r\n        }\r\n    }\r\n\r\n    function addToSpent(\r\n        address wallet,\r\n        uint    amount\r\n        )\r\n        external\r\n        onlyWalletModule(wallet)\r\n    {\r\n        _addToSpent(wallet, quotas[wallet], amount);\r\n    }\r\n\r\n    // Returns 0 to indiciate unlimited quota\r\n    function currentQuota(address wallet)\r\n        public\r\n        view\r\n        returns (uint)\r\n    {\r\n        return _currentQuota(quotas[wallet]);\r\n    }\r\n\r\n    // Returns 0 to indiciate unlimited quota\r\n    function pendingQuota(address wallet)\r\n        public\r\n        view\r\n        returns (\r\n            uint __pendingQuota,\r\n            uint __pendingUntil\r\n        )\r\n    {\r\n        return _pendingQuota(quotas[wallet]);\r\n    }\r\n\r\n    function spentQuota(address wallet)\r\n        public\r\n        view\r\n        returns (uint)\r\n    {\r\n        return _spentQuota(quotas[wallet]);\r\n    }\r\n\r\n    function availableQuota(address wallet)\r\n        public\r\n        view\r\n        returns (uint)\r\n    {\r\n        return _availableQuota(quotas[wallet]);\r\n    }\r\n\r\n    function hasEnoughQuota(\r\n        address wallet,\r\n        uint    requiredAmount\r\n        )\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _hasEnoughQuota(quotas[wallet], requiredAmount);\r\n    }\r\n\r\n    // Internal\r\n\r\n    function _currentQuota(Quota memory q)\r\n        private\r\n        view\r\n        returns (uint)\r\n    {\r\n        return q.pendingUntil <= block.timestamp ? q.pendingQuota : q.currentQuota;\r\n    }\r\n\r\n    function _pendingQuota(Quota memory q)\r\n        private\r\n        view\r\n        returns (\r\n            uint __pendingQuota,\r\n            uint __pendingUntil\r\n        )\r\n    {\r\n        if (q.pendingUntil > 0 && q.pendingUntil > block.timestamp) {\r\n            __pendingQuota = q.pendingQuota;\r\n            __pendingUntil = q.pendingUntil;\r\n        }\r\n    }\r\n\r\n    function _spentQuota(Quota memory q)\r\n        private\r\n        view\r\n        returns (uint)\r\n    {\r\n        uint timeSinceLastSpent = block.timestamp.sub(q.spentTimestamp);\r\n        if (timeSinceLastSpent < 1 days) {\r\n            return uint(q.spentAmount).sub(timeSinceLastSpent.mul(q.spentAmount) / 1 days);\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function _availableQuota(Quota memory q)\r\n        private\r\n        view\r\n        returns (uint)\r\n    {\r\n        uint quota = _currentQuota(q);\r\n        if (quota == 0) {\r\n            return MAX_QUOTA;\r\n        }\r\n        uint spent = _spentQuota(q);\r\n        return quota > spent ? quota - spent : 0;\r\n    }\r\n\r\n    function _hasEnoughQuota(\r\n        Quota   memory q,\r\n        uint    requiredAmount\r\n        )\r\n        private\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _availableQuota(q) >= requiredAmount;\r\n    }\r\n\r\n    function _addToSpent(\r\n        address wallet,\r\n        Quota   memory q,\r\n        uint    amount\r\n        )\r\n        private\r\n    {\r\n        Quota storage s = quotas[wallet];\r\n        s.spentAmount = _spentQuota(q).add(amount).toUint128();\r\n        s.spentTimestamp = uint64(block.timestamp);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pendingQuota\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"pendingUntil\",\"type\":\"uint64\"}],\"name\":\"QuotaScheduled\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_QUOTA\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addToSpent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"availableQuota\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newQuota\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"effectiveTime\",\"type\":\"uint256\"}],\"name\":\"changeQuota\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"contract PriceOracle\",\"name\":\"priceOracle\",\"type\":\"address\"}],\"name\":\"checkAndAddToSpent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"currentQuota\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"requiredAmount\",\"type\":\"uint256\"}],\"name\":\"hasEnoughQuota\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"pendingQuota\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"__pendingQuota\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__pendingUntil\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"quotas\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"currentQuota\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"pendingQuota\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"spentAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"spentTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"pendingUntil\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"spentQuota\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"QuotaStore","CompilerVersion":"v0.7.0+commit.9e61f92b","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"ipfs://14e214188d95543fea32556df58748511850dcfea0056be029751c5e076096fc"}]}