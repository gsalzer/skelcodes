{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.6;\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function balanceOf(address owner) external view returns (uint);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n\r\n    function transfer(address to, uint value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n}\r\ncontract BatchTransfer{\r\n    function batchTransferEth(address payable[] memory to,uint256[] memory values) payable public{//添加payable,支持在调用方法的时候，value往合约里面传eth，注意该value最终平分发给所有账户\r\n        //require(to.length == values.length);\r\n        uint256 remainValue = msg.value;\r\n        for(uint32 i=0;i<to.length;i++){\r\n            require(remainValue >= values[i]);\r\n            remainValue -= values[i];\r\n            to[i].transfer(values[i]);\r\n        }\r\n        if(remainValue>0){\r\n            msg.sender.transfer(remainValue);\r\n        }\r\n    }\r\n    // function batchTransferErc20V0(address erc20Address,address payable[] memory to,uint256[] memory values) public{\r\n    //这个方法不好，因为transferFrom操作比较消耗GAS,所以应该先把token划转到合约，再转账出去，批量转账3次内本方法较高，3次以上先划转的方法效率高\r\n    //     //require(to.length == values.length);\r\n    //     IERC20 erc20Token = IERC20(erc20Address);\r\n    //     for(uint32 i=0;i<to.length;i++){\r\n    //         erc20Token.transferFrom(msg.sender,to[i],values[i]);\r\n    //     }\r\n    // }\r\n    function batchTransferErc20(address erc20Address,address payable[] memory to,uint256[] memory values) public{\r\n        //require(to.length == values.length);\r\n        uint256 totalValue = 0;\r\n        for(uint32 i=0;i<to.length;i++){\r\n            totalValue += values[i];\r\n        }\r\n        \r\n        IERC20 erc20Token = IERC20(erc20Address);\r\n        erc20Token.transferFrom(msg.sender,address(this),totalValue);\r\n        for(uint32 i=0;i<to.length;i++){\r\n            erc20Token.transfer(to[i],values[i]);\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20Address\",\"type\":\"address\"},{\"internalType\":\"address payable[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"batchTransferErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"batchTransferEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"BatchTransfer","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://1ead3b051971b9ec9e96b00b848e4318bb92ad075404ef8b24b92a8f3ce76dc9"}]}