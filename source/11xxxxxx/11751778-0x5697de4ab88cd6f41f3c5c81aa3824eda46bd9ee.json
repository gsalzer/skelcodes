{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin\\contracts\\math\\SafeMath.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: node_modules\\@openzeppelin\\contracts\\GSN\\Context.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\access\\Ownable.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts\\StakingLocker.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\ninterface ICldrn {\r\n    function burnFrom(address account, uint256 amount) external;\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n}\r\ncontract StakingLocker is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    address public chef;\r\n    ICldrn public cldrn;\r\n    uint256 public allActiveBatches;\r\n    uint256 public PERCENT_SCALE_FACTOR = 1000000000;\r\n\r\n    modifier onlyChef(){\r\n        require(msg.sender == chef, \"onlychef\");\r\n        _;\r\n    }\r\n\r\n    struct PoolLockInfo {\r\n        uint256 lockDuration;\r\n        uint256 percentReleasedPerSec; //5% per hour -> PERCENT_SCALE_FACTOR * 5/3600\r\n    }\r\n    struct BurnBonus {\r\n        uint256 startTime;\r\n        uint256 endTime;\r\n        uint256 bonusPercentPerSec; // 1% per hour -> PERCENT_SCALE_FACTOR * 1/3600n\r\n    }\r\n    struct UserLockInfo {\r\n        uint256 totalEarnedFromPool;\r\n        uint256 totalClaimed;\r\n\r\n        uint256 pendingBatchSize;\r\n        uint256 totalClaimedFromPendingBatch;\r\n        uint256 lastLockStartTime;\r\n        BurnBonus[] burnBonuses;\r\n    }\r\n    struct BonusTier {\r\n        uint256 baseCost;\r\n        uint256 bonusPercentPerSec; // 1% per hour -> PERCENT_SCALE_FACTOR * 1/3600\r\n        uint256 durationInSecs;\r\n        uint256 whalePowFac; //e.g. 2 => cost of bonus = (percentage of pool)*2*baseCost . penalise whales with bigger batches by charging more for burn. pendingBatchSize will be scaled with this factor.\r\n    }\r\n    \r\n    event BoughtBonus(address indexed owner, uint256 indexed poolId, uint256 indexed bonusId, uint256 paid);\r\n    event Locked(address indexed owner, uint256 indexed poolId, uint256 amt);\r\n\r\n    // poolid => address => lockinfo\r\n    mapping (uint256 => mapping (address => UserLockInfo)) public userLockInfo;\r\n    mapping (uint256 => PoolLockInfo) public poolLockInfo;\r\n    mapping (uint256 => BonusTier) public bonuses;\r\n    function getUserLockInfo(uint256 _pid, address owner) external view returns (uint256,uint256,uint256,uint256,uint256){\r\n        UserLockInfo storage l = userLockInfo[_pid][owner];\r\n        return (l.totalEarnedFromPool, l.totalClaimed, l.pendingBatchSize, l.totalClaimedFromPendingBatch, l.lastLockStartTime);\r\n    }\r\n    function getUserBurnBonus(uint256 _pid, address owner, uint256 bonusIdx) external view returns (uint256,uint256,uint256){\r\n        BurnBonus storage b = userLockInfo[_pid][owner].burnBonuses[bonusIdx];\r\n        return (b.startTime, b.endTime,b.bonusPercentPerSec);\r\n    }\r\n    function getUserBurnBonusLength(uint256 _pid, address owner) external view returns (uint256){\r\n        return userLockInfo[_pid][owner].burnBonuses.length;\r\n    }\r\n    constructor(address _chef, address _cldrn) public{\r\n        chef = _chef;\r\n        cldrn = ICldrn(_cldrn);\r\n    }\r\n    function setChef(address _a) public onlyOwner{\r\n        chef = _a;\r\n    }\r\n    function setCldrn(address _a) public onlyOwner{\r\n        cldrn = ICldrn(_a);\r\n    }\r\n    function setPoolLockInfo(uint256 pid, uint256 lockDuration, uint256 percentReleasedPerSec) external onlyOwner {\r\n        poolLockInfo[pid] = PoolLockInfo(lockDuration, percentReleasedPerSec);\r\n    }\r\n    function setBonusTierInfo(uint256 bonusId, uint256 baseCost, uint256 bonusPercentPerSec, uint256 durationInSecs, uint256 whalePowFac) external onlyOwner {\r\n        bonuses[bonusId] = BonusTier(baseCost, bonusPercentPerSec, durationInSecs,whalePowFac);\r\n    }\r\n\r\n    function getCost(uint256 bonusTierId, uint256 poolId, address buyer) public view returns (uint256){\r\n\r\n        BonusTier storage t = bonuses[bonusTierId];\r\n        UserLockInfo storage userInfo = userLockInfo[poolId][buyer];\r\n        uint256 scalingFactor = PERCENT_SCALE_FACTOR ** t.whalePowFac;\r\n\r\n        uint256 percentOwnershipOfBatches = userInfo.pendingBatchSize.mul(100 * PERCENT_SCALE_FACTOR).div(allActiveBatches); //percent is scaled by 1mil\r\n\r\n        uint256 percentPremium = percentOwnershipOfBatches ** t.whalePowFac; //scaled by PERCENT_SCALE_FACTOR ** whalePowFac\r\n\r\n        return t.baseCost.mul(scalingFactor.mul(100).add(percentPremium)).div(scalingFactor.mul(100));\r\n    }\r\n    function buyBonus(uint256 bonusTierId, uint256 poolId) external {\r\n        BonusTier storage t = bonuses[bonusTierId];\r\n        UserLockInfo storage userInfo = userLockInfo[poolId][msg.sender];\r\n        uint256 cost = getCost(bonusTierId, poolId, msg.sender);\r\n        cldrn.burnFrom(msg.sender, cost);\r\n        BurnBonus memory b = BurnBonus(now, now+t.durationInSecs, t.bonusPercentPerSec);\r\n        userInfo.burnBonuses.push(b);\r\n        emit BoughtBonus(msg.sender, poolId, bonusTierId, cost);\r\n    }\r\n    // rewards already pre-transferred to this contract before this method is called\r\n    function lockRewards(address owner, uint256 poolId, uint256 amt) public onlyChef{\r\n        UserLockInfo storage i = userLockInfo[poolId][owner];\r\n        allActiveBatches -= i.pendingBatchSize;\r\n        i.totalEarnedFromPool += amt;\r\n        i.lastLockStartTime = now;\r\n\r\n        i.pendingBatchSize = i.totalEarnedFromPool - i.totalClaimed;\r\n        allActiveBatches += i.pendingBatchSize;\r\n\r\n        i.totalClaimedFromPendingBatch = 0;\r\n        emit Locked(owner, poolId, amt);\r\n    }\r\n    function getAvgReleaseRate(address owner, uint256 poolId) public view returns (uint256){\r\n        uint256 percentRewards = getPercentOverTime(owner, poolId);\r\n        if (percentRewards== 0){\r\n            return 0;\r\n        }else {\r\n            UserLockInfo storage i = userLockInfo[poolId][owner];\r\n            uint256 validTrickleStart = i.lastLockStartTime + poolLockInfo[poolId].lockDuration;\r\n            uint256 numSecs = now - validTrickleStart;\r\n            return percentRewards.div(numSecs).mul(3600);\r\n        }\r\n    }\r\n    function getPercentOverTime2(address owner, uint256 poolId) public view returns (uint256,uint256,uint256,uint256,uint256) {\r\n        UserLockInfo storage i = userLockInfo[poolId][owner];\r\n        if (i.pendingBatchSize == 0){\r\n            return (0,0,0,0,0);\r\n        } \r\n        uint256 validTrickleStart = i.lastLockStartTime + poolLockInfo[poolId].lockDuration;\r\n        \r\n        if (validTrickleStart >= now){\r\n            return (validTrickleStart,now,0,0,0);\r\n        } else {\r\n            // calculate\r\n            uint256 numSecs = now - validTrickleStart;\r\n            uint256 baseRewards = poolLockInfo[poolId].percentReleasedPerSec.mul(numSecs);\r\n            uint256 bonusRewards = 0;\r\n            // (totalEarned - totalClaimed) * percentage\r\n            for (uint k = 0 ; k < i.burnBonuses.length; k++){\r\n                bonusRewards += getBurnBonusPercent(validTrickleStart, now, i.burnBonuses[k].startTime,i.burnBonuses[k].endTime,i.burnBonuses[k].bonusPercentPerSec);\r\n            }\r\n            uint256 totalRewards = baseRewards + bonusRewards;\r\n\r\n            // percentage points are inflated by PERCENT_SCALE_FACTOR to allow representing decimals. max percentRewards = 100 * PERCENT_SCALE_FACTOR.\r\n            if (totalRewards > 100 * PERCENT_SCALE_FACTOR){\r\n                totalRewards = 100 * PERCENT_SCALE_FACTOR;\r\n            }\r\n            return (validTrickleStart, now, baseRewards, bonusRewards, totalRewards);\r\n        }\r\n    }\r\n    function getPercentOverTime(address owner, uint256 poolId) internal view returns (uint256){\r\n        UserLockInfo storage i = userLockInfo[poolId][owner];\r\n        if (i.pendingBatchSize == 0){\r\n            return 0;\r\n        } \r\n        uint256 validTrickleStart = i.lastLockStartTime + poolLockInfo[poolId].lockDuration;\r\n        \r\n        if (validTrickleStart >= now){\r\n            return 0;\r\n        } else {\r\n            // calculate\r\n            uint256 numSecs = now - validTrickleStart;\r\n            uint256 percentRewards = poolLockInfo[poolId].percentReleasedPerSec.mul(numSecs);\r\n            // (totalEarned - totalClaimed) * percentage\r\n            for (uint k = 0 ; k < i.burnBonuses.length; k++){\r\n                percentRewards += getBurnBonusPercent(validTrickleStart, now, i.burnBonuses[k].startTime,i.burnBonuses[k].endTime,i.burnBonuses[k].bonusPercentPerSec);\r\n            }\r\n            // percentage points are inflated by PERCENT_SCALE_FACTOR to allow representing decimals. max percentRewards = 100 * PERCENT_SCALE_FACTOR.\r\n            if (percentRewards > 100 * PERCENT_SCALE_FACTOR){\r\n                percentRewards = 100 * PERCENT_SCALE_FACTOR;\r\n            }\r\n            return percentRewards;\r\n        }\r\n    }\r\n    function pendingUnlock(address owner, uint256 poolId) public view returns (uint256){\r\n        uint256 percentRewards = getPercentOverTime(owner, poolId);\r\n        if (percentRewards== 0){\r\n            return 0;\r\n        }else {\r\n            UserLockInfo storage i = userLockInfo[poolId][owner];\r\n            uint256 pending = i.pendingBatchSize.mul(percentRewards).div(100).div(PERCENT_SCALE_FACTOR).sub(i.totalClaimedFromPendingBatch);\r\n            return pending;\r\n        }\r\n    }\r\n    function claimRewards(address owner, uint256 poolId) public returns (uint256){\r\n        UserLockInfo storage i = userLockInfo[poolId][owner];\r\n        if (i.totalEarnedFromPool == 0){\r\n            return 0;\r\n        }\r\n        uint256 pending = pendingUnlock(owner, poolId);\r\n        if (pending > 0){\r\n            i.totalClaimed += pending;\r\n            i.totalClaimedFromPendingBatch += pending;\r\n            require(cldrn.transfer(owner, pending),\"failed to claim\");\r\n        }\r\n\r\n    }\r\n    function getOverlap(uint256 start1, uint256 end1, uint256 start2, uint256 end2) public pure returns (uint256) {\r\n        \r\n        uint256 start = (start1 > start2) ? start1 : start2;\r\n        uint256 end = (end1 < end2) ? end1 : end2;\r\n        if (start >= end){\r\n            return 0;\r\n        }else{\r\n            return end-start;\r\n        }\r\n    }\r\n    function getBurnBonusPercent(uint256 windowStart, uint256 windowEnd, uint256 bonusStart, uint256 bonusEnd, uint256 bonusPercentPerSec) public pure returns (uint256){\r\n        return getOverlap(windowStart, windowEnd, bonusStart, bonusEnd).mul(bonusPercentPerSec);\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_chef\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cldrn\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bonusId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid\",\"type\":\"uint256\"}],\"name\":\"BoughtBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PERCENT_SCALE_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allActiveBatches\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bonuses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"baseCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusPercentPerSec\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"durationInSecs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"whalePowFac\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bonusTierId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"buyBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chef\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"claimRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cldrn\",\"outputs\":[{\"internalType\":\"contract ICldrn\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"getAvgReleaseRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"windowStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"windowEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusPercentPerSec\",\"type\":\"uint256\"}],\"name\":\"getBurnBonusPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bonusTierId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"getCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end2\",\"type\":\"uint256\"}],\"name\":\"getOverlap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"getPercentOverTime2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bonusIdx\",\"type\":\"uint256\"}],\"name\":\"getUserBurnBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getUserBurnBonusLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getUserLockInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"lockRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"pendingUnlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolLockInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentReleasedPerSec\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bonusId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusPercentPerSec\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"durationInSecs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"whalePowFac\",\"type\":\"uint256\"}],\"name\":\"setBonusTierInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_a\",\"type\":\"address\"}],\"name\":\"setChef\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_a\",\"type\":\"address\"}],\"name\":\"setCldrn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentReleasedPerSec\",\"type\":\"uint256\"}],\"name\":\"setPoolLockInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userLockInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalEarnedFromPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingBatchSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimedFromPendingBatch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastLockStartTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"StakingLocker","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000b2cdb99bd13b29fe0f17a32386bcd61e8f8a0ca6000000000000000000000000dad8e1a33b199b5a60dd3b95bb7c679c828ff607","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://5cc044730ad251cc08c50e26b6b9b6f159c798086a5ca0db8158501e3c8875af"}]}