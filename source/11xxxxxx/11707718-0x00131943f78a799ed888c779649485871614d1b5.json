{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal virtual view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal virtual view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n\r\n\r\n            bytes32 accountHash\r\n         = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            codehash := extcodehash(account)\r\n        }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transfer.selector, to, value)\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, value)\r\n        );\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(\r\n            value\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\r\n            value,\r\n            \"SafeERC20: decreased allowance below zero\"\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(\r\n                abi.decode(returndata, (bool)),\r\n                \"SafeERC20: ERC20 operation did not succeed\"\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/PrivateSale.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\ncontract PrivateSale is Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    struct TokenLock {\r\n        uint256 timestamp;\r\n        uint256 amount;\r\n        bool isUnlocked;\r\n    }\r\n    struct User {\r\n        uint256 alloc;\r\n        uint256 bought;\r\n        uint256 locked;\r\n        TokenLock[] releases;\r\n        uint256 boughtWithNerdz;\r\n    }\r\n    mapping(address => User) public whitelist;\r\n    IERC20 public trop;\r\n    IERC20 public nerd;\r\n    uint256 public totalSold;\r\n    uint256 public totalLocked;\r\n    uint256 public totalUnlocked;\r\n    uint256 public saleStart;\r\n    uint256 public saleStop;\r\n    address payable public tokenOwner;\r\n\r\n    uint256 public ethPegged; //in usd: i.e. 1150, 1200\r\n    uint256 public nerdzPegged; //in usd: i.e. 1150, 1200\r\n\r\n    uint256 public constant MAX_SALE_DURATION = 14 days;\r\n\r\n    event AddedToWhitelist(address[] account);\r\n    event RemovedFromWhitelist(address[] account);\r\n\r\n    constructor(\r\n        uint256 _start,\r\n        uint256 _duration,\r\n        uint256 _ethPegged,\r\n        uint256 _nerdzPegged,\r\n        address _trop\r\n    ) public {\r\n        saleStart = _start == 0 ? block.timestamp : _start;\r\n        require(saleStart >= block.timestamp);\r\n        require(_duration <= MAX_SALE_DURATION);\r\n        saleStop = saleStart.add(_duration);\r\n\r\n        ethPegged = _ethPegged;\r\n        nerdzPegged = _nerdzPegged;\r\n        nerd = IERC20(0x32C868F6318D6334B2250F323D914Bc2239E4EeE);\r\n        trop = IERC20(_trop);\r\n        tokenOwner = msg.sender;\r\n    }\r\n\r\n    function setTokenOwner(address payable _tokenOwner) external onlyOwner {\r\n        tokenOwner = _tokenOwner;\r\n    }\r\n\r\n    function setPegged(uint256 _ethPegged, uint256 _nerdzPegged)\r\n        external\r\n        onlyOwner\r\n    {\r\n        ethPegged = _ethPegged;\r\n        nerdzPegged = _nerdzPegged;\r\n    }\r\n\r\n    function setSaleTime(uint256 _start, uint256 _duration) external onlyOwner {\r\n        if (saleStart == 0) saleStart = _start;\r\n        require(_duration < MAX_SALE_DURATION);\r\n        saleStop = saleStart.add(_duration);\r\n    }\r\n\r\n    modifier onlyWhitelisted() {\r\n        require(isWhitelisted(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function setTrop(address _trop) external onlyOwner {\r\n        trop = IERC20(_trop);\r\n    }\r\n\r\n    function add(address[] memory _addresses, uint256[] memory _allocations)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(_addresses.length == _allocations.length);\r\n        for (uint256 i = 0; i < _addresses.length; i++) {\r\n            setAllocation(_addresses[i], _allocations[i]);\r\n        }\r\n        emit AddedToWhitelist(_addresses);\r\n    }\r\n\r\n    function setAllocation(address _addr, uint256 alloc) public onlyOwner {\r\n        whitelist[_addr].alloc = alloc;\r\n    }\r\n\r\n    function remove(address[] calldata _addresses) external onlyOwner {\r\n        for (uint256 i = 0; i > _addresses.length; i++) {\r\n            whitelist[_addresses[i]].alloc = 0;\r\n        }\r\n        emit RemovedFromWhitelist(_addresses);\r\n    }\r\n\r\n    function isWhitelisted(address _address) public view returns (bool) {\r\n        return whitelist[_address].alloc > 0;\r\n    }\r\n\r\n    function withdrawToken(address _token) external onlyOwner {\r\n        if (_token == address(trop)) {\r\n            //withdraw remaining, unsold trop\r\n            require(block.timestamp > saleStop);\r\n            uint256 bal = trop.balanceOf(address(this));\r\n            trop.transfer(tokenOwner, bal.sub(totalLocked));\r\n        } else if (_token == address(0)) {\r\n            tokenOwner.transfer(address(this).balance);\r\n        } else {\r\n            IERC20 t = IERC20(_token);\r\n            uint256 bal = t.balanceOf(address(this));\r\n            t.safeTransfer(tokenOwner, bal);\r\n        }\r\n    }\r\n\r\n    fallback() external payable {\r\n        buyTokenWithETH();\r\n    }\r\n\r\n    receive() external payable {\r\n        buyTokenWithETH();\r\n    }\r\n\r\n    function lockTrop(address _user) internal {\r\n        uint256 lockedAmount = whitelist[_user].locked;\r\n        delete whitelist[_user].releases; //clear old data\r\n        whitelist[_user].releases.push(\r\n            TokenLock({\r\n                timestamp: saleStart.add(30 days),\r\n                amount: lockedAmount.mul(30).div(100),\r\n                isUnlocked: false\r\n            })\r\n        );\r\n        whitelist[_user].releases.push(\r\n            TokenLock({\r\n                timestamp: saleStart.add(60 days),\r\n                amount: lockedAmount.mul(20).div(100),\r\n                isUnlocked: false\r\n            })\r\n        );\r\n        whitelist[_user].releases.push(\r\n            TokenLock({\r\n                timestamp: saleStart.add(90 days),\r\n                amount: lockedAmount.mul(20).div(100),\r\n                isUnlocked: false\r\n            })\r\n        );\r\n        whitelist[_user].releases.push(\r\n            TokenLock({\r\n                timestamp: saleStart.add(120 days),\r\n                amount: lockedAmount.mul(20).div(100),\r\n                isUnlocked: false\r\n            })\r\n        );\r\n        whitelist[_user].releases.push(\r\n            TokenLock({\r\n                timestamp: saleStart.add(150 days),\r\n                amount: lockedAmount.mul(10).div(100),\r\n                isUnlocked: false\r\n            })\r\n        );\r\n    }\r\n\r\n    function buyTokenWithETH() public payable onlyWhitelisted {\r\n        require(\r\n            block.timestamp >= saleStart && block.timestamp <= saleStop,\r\n            \"invalid time\"\r\n        );\r\n        uint256 tokenAmount = msg.value.mul(ethPegged).div(11);\r\n        uint256 ethReturn = 0;\r\n        if (\r\n            whitelist[msg.sender].bought.add(tokenAmount) >\r\n            whitelist[msg.sender].alloc\r\n        ) {\r\n            tokenAmount = whitelist[msg.sender].alloc.sub(\r\n                whitelist[msg.sender].bought\r\n            );\r\n            uint256 actualETHSpentInWei = tokenAmount.mul(11).div(ethPegged);\r\n            ethReturn = msg.value.sub(actualETHSpentInWei);\r\n        }\r\n        if (tokenAmount > 0) {\r\n            //send 50%, locked 50%\r\n            uint256 toSend = tokenAmount.div(2);\r\n            uint256 locked = tokenAmount.sub(toSend);\r\n            trop.safeTransfer(msg.sender, toSend);\r\n            whitelist[msg.sender].bought = whitelist[msg.sender].bought.add(\r\n                tokenAmount\r\n            );\r\n            whitelist[msg.sender].locked = whitelist[msg.sender].locked.add(\r\n                locked\r\n            );\r\n            totalSold = totalSold.add(tokenAmount);\r\n            totalLocked = totalLocked.add(locked);\r\n            lockTrop(msg.sender);\r\n        }\r\n\r\n        if (ethReturn > 0) {\r\n            msg.sender.transfer(ethReturn); //revert if fallback of msg.sender has heavy opertions\r\n        }\r\n    }\r\n\r\n    function buyTokenWithNERDz(uint256 _nerdzAmount) external onlyWhitelisted {\r\n        require(\r\n            block.timestamp >= saleStart && block.timestamp <= saleStop,\r\n            \"invalid time\"\r\n        );\r\n        require(\r\n            whitelist[msg.sender].boughtWithNerdz <\r\n                whitelist[msg.sender].alloc.mul(30).div(100),\r\n            \"cannot buy with nerdz any more\"\r\n        );\r\n        uint256 nerdzBefore = nerd.balanceOf(address(this));\r\n        nerd.safeTransferFrom(msg.sender, address(this), _nerdzAmount);\r\n        uint256 nerdzReceive = nerd.balanceOf(address(this)).sub(nerdzBefore);\r\n        //5% discount\r\n        uint256 tokenAmount = nerdzReceive\r\n            .mul(nerdzPegged)\r\n            .div(11)\r\n            .mul(100)\r\n            .div(95);\r\n        uint256 nerdzReturn = 0;\r\n        if (\r\n            whitelist[msg.sender].bought.add(tokenAmount) >\r\n            whitelist[msg.sender].alloc\r\n        ) {\r\n            tokenAmount = whitelist[msg.sender].alloc.sub(\r\n                whitelist[msg.sender].bought\r\n            );\r\n            uint256 actualNerdzSpentInWei = tokenAmount\r\n                .mul(11)\r\n                .div(nerdzPegged)\r\n                .mul(95)\r\n                .div(100);\r\n            nerdzReturn = nerdzReceive.sub(actualNerdzSpentInWei);\r\n        }\r\n\r\n        if (\r\n            whitelist[msg.sender].boughtWithNerdz.add(tokenAmount) >=\r\n            whitelist[msg.sender].alloc.mul(30).div(100)\r\n        ) {\r\n            tokenAmount = whitelist[msg.sender].alloc.mul(30).div(100).sub(\r\n                whitelist[msg.sender].boughtWithNerdz\r\n            );\r\n            uint256 actualNerdzSpentInWei = tokenAmount\r\n                .mul(11)\r\n                .div(nerdzPegged)\r\n                .mul(95)\r\n                .div(100);\r\n            nerdzReturn = nerdzReceive.sub(actualNerdzSpentInWei);\r\n        }\r\n\r\n        if (tokenAmount > 0) {\r\n            //send 50%, locked 50%\r\n            uint256 toSend = tokenAmount.div(2);\r\n            uint256 locked = tokenAmount.sub(toSend);\r\n            trop.safeTransfer(msg.sender, toSend);\r\n            whitelist[msg.sender].bought = whitelist[msg.sender].bought.add(\r\n                tokenAmount\r\n            );\r\n            whitelist[msg.sender].locked = whitelist[msg.sender].locked.add(\r\n                locked\r\n            );\r\n            whitelist[msg.sender].boughtWithNerdz = whitelist[msg.sender]\r\n                .boughtWithNerdz\r\n                .add(tokenAmount);\r\n            totalSold = totalSold.add(tokenAmount);\r\n            totalLocked = totalLocked.add(locked);\r\n            lockTrop(msg.sender);\r\n        }\r\n\r\n        if (nerdzReturn > 0) {\r\n            nerd.safeTransfer(msg.sender, nerdzReturn); //revert if fallback of msg.sender has heavy opertions\r\n        }\r\n    }\r\n\r\n    function withdrawLockedToken() external {\r\n        require(whitelist[msg.sender].locked > 0);\r\n        User storage user = whitelist[msg.sender];\r\n        uint256 totalRelease = 0;\r\n        for (uint256 i = 0; i < user.releases.length; i++) {\r\n            if (\r\n                !user.releases[i].isUnlocked &&\r\n                user.releases[i].timestamp < block.timestamp\r\n            ) {\r\n                totalRelease = totalRelease.add(user.releases[i].amount);\r\n                user.releases[i].isUnlocked = true;\r\n            }\r\n        }\r\n        if (totalRelease > 0) {\r\n            trop.safeTransfer(msg.sender, totalRelease);\r\n            totalUnlocked = totalUnlocked.add(totalRelease);\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ethPegged\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nerdzPegged\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_trop\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"account\",\"type\":\"address[]\"}],\"name\":\"AddedToWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"account\",\"type\":\"address[]\"}],\"name\":\"RemovedFromWhitelist\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MAX_SALE_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_allocations\",\"type\":\"uint256[]\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTokenWithETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nerdzAmount\",\"type\":\"uint256\"}],\"name\":\"buyTokenWithNERDz\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethPegged\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nerd\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nerdzPegged\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"remove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleStop\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"alloc\",\"type\":\"uint256\"}],\"name\":\"setAllocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ethPegged\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nerdzPegged\",\"type\":\"uint256\"}],\"name\":\"setPegged\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"setSaleTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_tokenOwner\",\"type\":\"address\"}],\"name\":\"setTokenOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trop\",\"type\":\"address\"}],\"name\":\"setTrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenOwner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUnlocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trop\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"alloc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bought\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"locked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boughtWithNerdz\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawLockedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"PrivateSale","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012750000000000000000000000000000000000000000000000000000000000000004b0000000000000000000000000000000000000000000000000000000000000011a0000000000000000000000002ec75589856562646afe393455986cad26c4cc5f","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8e4429f818f32fcb0cd2c9aa184cc92958b20345e016dd451101f9601f934a66"}]}