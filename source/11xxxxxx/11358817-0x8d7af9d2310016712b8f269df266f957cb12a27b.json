{"status":"1","message":"OK","result":[{"SourceCode":"// hevm: flattened sources of src/DrillTakeBack.sol\r\npragma solidity >0.4.13 >=0.4.23 >=0.6.0 <0.7.0 >=0.6.7 <0.7.0;\r\n\r\n////// lib/ds-auth/src/auth.sol\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity >=0.4.23; */\r\n\r\ninterface DSAuthority {\r\n    function canCall(\r\n        address src, address dst, bytes4 sig\r\n    ) external view returns (bool);\r\n}\r\n\r\ncontract DSAuthEvents {\r\n    event LogSetAuthority (address indexed authority);\r\n    event LogSetOwner     (address indexed owner);\r\n}\r\n\r\ncontract DSAuth is DSAuthEvents {\r\n    DSAuthority  public  authority;\r\n    address      public  owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        emit LogSetOwner(msg.sender);\r\n    }\r\n\r\n    function setOwner(address owner_)\r\n        public\r\n        auth\r\n    {\r\n        owner = owner_;\r\n        emit LogSetOwner(owner);\r\n    }\r\n\r\n    function setAuthority(DSAuthority authority_)\r\n        public\r\n        auth\r\n    {\r\n        authority = authority_;\r\n        emit LogSetAuthority(address(authority));\r\n    }\r\n\r\n    modifier auth {\r\n        require(isAuthorized(msg.sender, msg.sig), \"ds-auth-unauthorized\");\r\n        _;\r\n    }\r\n\r\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\r\n        if (src == address(this)) {\r\n            return true;\r\n        } else if (src == owner) {\r\n            return true;\r\n        } else if (authority == DSAuthority(0)) {\r\n            return false;\r\n        } else {\r\n            return authority.canCall(src, address(this), sig);\r\n        }\r\n    }\r\n}\r\n\r\n////// lib/ds-math/src/math.sol\r\n/// math.sol -- mixin for inline numerical wizardry\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity >0.4.13; */\r\n\r\ncontract DSMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, \"ds-math-add-overflow\");\r\n    }\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\r\n    }\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\r\n    }\r\n\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function max(uint x, uint y) internal pure returns (uint z) {\r\n        return x >= y ? x : y;\r\n    }\r\n    function imin(int x, int y) internal pure returns (int z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function imax(int x, int y) internal pure returns (int z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n    uint constant RAY = 10 ** 27;\r\n\r\n    //rounds to zero if x*y < WAD / 2\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n    //rounds to zero if x*y < WAD / 2\r\n    function rmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n    //rounds to zero if x*y < WAD / 2\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n    //rounds to zero if x*y < RAY / 2\r\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n\r\n    // This famous algorithm is called \"exponentiation by squaring\"\r\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\r\n    //\r\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\r\n    //\r\n    // These facts are why it works:\r\n    //\r\n    //  If n is even, then x^n = (x^2)^(n/2).\r\n    //  If n is odd,  then x^n = x * x^(n-1),\r\n    //   and applying the equation for even x gives\r\n    //    x^n = x * (x^2)^((n-1) / 2).\r\n    //\r\n    //  Also, EVM division is flooring and\r\n    //    floor[(n-1) / 2] = floor[n / 2].\r\n    //\r\n    function rpow(uint x, uint n) internal pure returns (uint z) {\r\n        z = n % 2 != 0 ? x : RAY;\r\n\r\n        for (n /= 2; n != 0; n /= 2) {\r\n            x = rmul(x, x);\r\n\r\n            if (n % 2 != 0) {\r\n                z = rmul(z, x);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n////// lib/ds-stop/lib/ds-note/src/note.sol\r\n/// note.sol -- the `note' modifier, for logging calls as events\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity >=0.4.23; */\r\n\r\ncontract DSNote {\r\n    event LogNote(\r\n        bytes4   indexed  sig,\r\n        address  indexed  guy,\r\n        bytes32  indexed  foo,\r\n        bytes32  indexed  bar,\r\n        uint256           wad,\r\n        bytes             fax\r\n    ) anonymous;\r\n\r\n    modifier note {\r\n        bytes32 foo;\r\n        bytes32 bar;\r\n        uint256 wad;\r\n\r\n        assembly {\r\n            foo := calldataload(4)\r\n            bar := calldataload(36)\r\n            wad := callvalue()\r\n        }\r\n\r\n        _;\r\n\r\n        emit LogNote(msg.sig, msg.sender, foo, bar, wad, msg.data);\r\n    }\r\n}\r\n\r\n////// lib/ds-stop/src/stop.sol\r\n/// stop.sol -- mixin for enable/disable functionality\r\n\r\n// Copyright (C) 2017  DappHub, LLC\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity >=0.4.23; */\r\n\r\n/* import \"ds-auth/auth.sol\"; */\r\n/* import \"ds-note/note.sol\"; */\r\n\r\ncontract DSStop is DSNote, DSAuth {\r\n    bool public stopped;\r\n\r\n    modifier stoppable {\r\n        require(!stopped, \"ds-stop-is-stopped\");\r\n        _;\r\n    }\r\n    function stop() public auth note {\r\n        stopped = true;\r\n    }\r\n    function start() public auth note {\r\n        stopped = false;\r\n    }\r\n\r\n}\r\n\r\n////// lib/zeppelin-solidity/src/token/ERC20/IERC20.sol\r\n// SPDX-License-Identifier: MIT\r\n\r\n/* pragma solidity ^0.6.0; */\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n////// src/interfaces/IDrillBase.sol\r\n/* pragma solidity ^0.6.7; */\r\n\r\ninterface IDrillBase {\r\n\tfunction createDrill(uint16 grade, address to) external returns (uint256);\r\n\r\n    function destroyDrill(address to, uint256 tokenId) external;\r\n}\r\n\r\n////// src/interfaces/ISettingsRegistry.sol\r\n/* pragma solidity ^0.6.7; */\r\n\r\ninterface ISettingsRegistry {\r\n    enum SettingsValueTypes { NONE, UINT, STRING, ADDRESS, BYTES, BOOL, INT }\r\n\r\n    function uintOf(bytes32 _propertyName) external view returns (uint256);\r\n\r\n    function stringOf(bytes32 _propertyName) external view returns (string memory);\r\n\r\n    function addressOf(bytes32 _propertyName) external view returns (address);\r\n\r\n    function bytesOf(bytes32 _propertyName) external view returns (bytes memory);\r\n\r\n    function boolOf(bytes32 _propertyName) external view returns (bool);\r\n\r\n    function intOf(bytes32 _propertyName) external view returns (int);\r\n\r\n    function setUintProperty(bytes32 _propertyName, uint _value) external;\r\n\r\n    function setStringProperty(bytes32 _propertyName, string calldata _value) external;\r\n\r\n    function setAddressProperty(bytes32 _propertyName, address _value) external;\r\n\r\n    function setBytesProperty(bytes32 _propertyName, bytes calldata _value) external;\r\n\r\n    function setBoolProperty(bytes32 _propertyName, bool _value) external;\r\n\r\n    function setIntProperty(bytes32 _propertyName, int _value) external;\r\n\r\n    function getValueTypeOf(bytes32 _propertyName) external view returns (uint /* SettingsValueTypes */ );\r\n\r\n    event ChangeProperty(bytes32 indexed _propertyName, uint256 _type);\r\n}\r\n\r\n////// src/DrillTakeBack.sol\r\n/* pragma solidity ^0.6.7; */\r\n\r\n/* import \"ds-stop/stop.sol\"; */\r\n/* import \"ds-math/math.sol\"; */\r\n/* import \"zeppelin-solidity/token/ERC20/IERC20.sol\"; */\r\n/* import \"./interfaces/ISettingsRegistry.sol\"; */\r\n/* import \"./interfaces/IDrillBase.sol\"; */\r\n\r\ncontract DrillTakeBack is DSMath, DSStop {\r\n\tevent TakeBackDrill(\r\n\t\taddress indexed user,\r\n\t\tuint256 indexed id,\r\n\t\tuint256 tokenId\r\n\t);\r\n\tevent OpenBox(\r\n\t\taddress indexed user,\r\n\t\tuint256 indexed id,\r\n\t\tuint256 tokenId,\r\n\t\tuint256 value\r\n\t);\r\n\tevent ClaimedTokens(\r\n\t\taddress indexed token,\r\n\t\taddress indexed to,\r\n\t\tuint256 amount\r\n\t);\r\n\r\n\t// 0x434f4e54524143545f52494e475f45524332305f544f4b454e00000000000000\r\n\tbytes32 public constant CONTRACT_RING_ERC20_TOKEN =\r\n\t\t\"CONTRACT_RING_ERC20_TOKEN\";\r\n\r\n\t// 0x434f4e54524143545f4954454d5f424153450000000000000000000000000000\r\n\tbytes32 public constant CONTRACT_DRILL_BASE = \"CONTRACT_DRILL_BASE\";\r\n\r\n\taddress public supervisor;\r\n\r\n\tuint256 public networkId;\r\n\r\n\tmapping(uint256 => bool) public ids;\r\n\r\n\tISettingsRegistry public registry;\r\n\r\n\tmodifier isHuman() {\r\n\t\t// solhint-disable-next-line avoid-tx-origin\r\n\t\trequire(msg.sender == tx.origin, \"robot is not permitted\");\r\n\t\t_;\r\n\t}\r\n\r\n\tconstructor(\r\n\t\taddress _registry,\r\n\t\taddress _supervisor,\r\n\t\tuint256 _networkId\r\n\t) public {\r\n\t\tsupervisor = _supervisor;\r\n\t\tnetworkId = _networkId;\r\n\t\tregistry = ISettingsRegistry(_registry);\r\n\t}\r\n\r\n\t// _hashmessage = hash(\"${address(this)}{_user}${networkId}${ids[]}${grade[]}\")\r\n\t// _v, _r, _s are from supervisor's signature on _hashmessage\r\n\t// takeBack(...) is invoked by the user who want to clain drill.\r\n\t// while the _hashmessage is signed by supervisor\r\n\tfunction takeBack(\r\n\t\tuint256[] memory _ids,\r\n\t\tuint16[] memory _grades,\r\n\t\tbytes32 _hashmessage,\r\n\t\tuint8 _v,\r\n\t\tbytes32 _r,\r\n\t\tbytes32 _s\r\n\t) public isHuman stoppable {\r\n\t\taddress _user = msg.sender;\r\n\t\t// verify the _hashmessage is signed by supervisor\r\n\t\trequire(\r\n\t\t\tsupervisor == _verify(_hashmessage, _v, _r, _s),\r\n\t\t\t\"verify failed\"\r\n\t\t);\r\n\t\t// verify that the address(this), _user, networkId, _ids, _grades are exactly what they should be\r\n\t\trequire(\r\n\t\t\tkeccak256(\r\n\t\t\t\tabi.encodePacked(address(this), _user, networkId, _ids, _grades)\r\n\t\t\t) == _hashmessage,\r\n\t\t\t\"hash invaild\"\r\n\t\t);\r\n\t\trequire(_ids.length == _grades.length, \"length invalid.\");\r\n\t\trequire(_grades.length > 0, \"no drill.\");\r\n\t\tfor (uint256 i = 0; i < _ids.length; i++) {\r\n\t\t\tuint256 id = _ids[i];\r\n\t\t\trequire(ids[id] == false, \"already taked back.\");\r\n\t\t\tuint16 grade = _grades[i];\r\n\t\t\tuint256 tokenId = _rewardDrill(grade, _user);\r\n\t\t\tids[id] = true;\r\n\t\t\temit TakeBackDrill(_user, id, tokenId);\r\n\t\t}\r\n\t}\r\n\r\n\t// _hashmessage = hash(\"${address(this)}${_user}${networkId}${boxId[]}${amount[]}\")\r\n\tfunction openBoxes(\r\n\t\tuint256[] memory _ids,\r\n\t\tuint256[] memory _amounts,\r\n\t\tbytes32 _hashmessage,\r\n\t\tuint8 _v,\r\n\t\tbytes32 _r,\r\n\t\tbytes32 _s\r\n\t) public isHuman stoppable {\r\n\t\taddress _user = msg.sender;\r\n\t\t// verify the _hashmessage is signed by supervisor\r\n\t\trequire(\r\n\t\t\tsupervisor == _verify(_hashmessage, _v, _r, _s),\r\n\t\t\t\"verify failed\"\r\n\t\t);\r\n\t\t// verify that the _user, _value are exactly what they should be\r\n\t\trequire(\r\n\t\t\tkeccak256(\r\n\t\t\t\tabi.encodePacked(\r\n\t\t\t\t\taddress(this),\r\n\t\t\t\t\t_user,\r\n\t\t\t\t\tnetworkId,\r\n\t\t\t\t\t_ids,\r\n\t\t\t\t\t_amounts\r\n\t\t\t\t)\r\n\t\t\t) == _hashmessage,\r\n\t\t\t\"hash invaild\"\r\n\t\t);\r\n\t\trequire(_ids.length == _amounts.length, \"length invalid.\");\r\n\t\trequire(_ids.length > 0, \"no box.\");\r\n\t\tfor (uint256 i = 0; i < _ids.length; i++) {\r\n\t\t\tuint256 id = _ids[i];\r\n\t\t\trequire(ids[id] == false, \"box already opened.\");\r\n\t\t\t_openBox(_user, id, _amounts[i]);\r\n\t\t\tids[id] = true;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _openBox(\r\n\t\taddress _user,\r\n\t\tuint256 _boxId,\r\n\t\tuint256 _amount\r\n\t) internal {\r\n\t\t(uint256 prizeDrill, uint256 prizeRing) = _random(_boxId);\r\n\t\tuint256 tokenId;\r\n\t\tuint256 value;\r\n\t\tuint256 boxType = _boxId >> 255;\r\n\t\tif (boxType == 1) {\r\n\t\t\t// gold box\r\n\t\t\tif (prizeRing == 1 && _amount > 1) {\r\n\t\t\t\taddress ring = registry.addressOf(CONTRACT_RING_ERC20_TOKEN);\r\n\t\t\t\tvalue = _amount / 2;\r\n\t\t\t\tIERC20(ring).transfer(_user, value);\r\n\t\t\t}\r\n\t\t\tif (prizeDrill < 10) {\r\n\t\t\t\ttokenId = _rewardDrill(3, _user);\r\n\t\t\t} else {\r\n\t\t\t\ttokenId = _rewardDrill(2, _user);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t// silver box\r\n\t\t\tif (prizeDrill == 0) {\r\n\t\t\t\ttokenId = _rewardDrill(3, _user);\r\n\t\t\t} else if (prizeDrill < 10) {\r\n\t\t\t\ttokenId = _rewardDrill(2, _user);\r\n\t\t\t} else {\r\n\t\t\t\ttokenId = _rewardDrill(1, _user);\r\n\t\t\t}\r\n\t\t}\r\n\t\temit OpenBox(_user, _boxId, tokenId, value);\r\n\t}\r\n\r\n\tfunction _rewardDrill(uint16 _grade, address _owner)\r\n\t\tinternal\r\n\t\treturns (uint256)\r\n\t{\r\n\t\taddress drill = registry.addressOf(CONTRACT_DRILL_BASE);\r\n\t\treturn IDrillBase(drill).createDrill(_grade, _owner);\r\n\t}\r\n\r\n\t// random algorithm\r\n\tfunction _random(uint256 _boxId) internal view returns (uint256, uint256) {\r\n\t\tuint256 seed =\r\n\t\t\tuint256(\r\n\t\t\t\tkeccak256(\r\n\t\t\t\t\tabi.encodePacked(\r\n\t\t\t\t\t\tblockhash(block.number),\r\n\t\t\t\t\t\tblock.timestamp, // solhint-disable-line not-rely-on-time\r\n\t\t\t\t\t\tblock.difficulty,\r\n\t\t\t\t\t\t_boxId\r\n\t\t\t\t\t)\r\n\t\t\t\t)\r\n\t\t\t);\r\n\t\treturn (seed % 100, seed >> 255);\r\n\t}\r\n\r\n\tfunction _verify(\r\n\t\tbytes32 _hashmessage,\r\n\t\tuint8 _v,\r\n\t\tbytes32 _r,\r\n\t\tbytes32 _s\r\n\t) internal pure returns (address) {\r\n\t\tbytes memory prefix = \"\\x19EvolutionLand Signed Message:\\n32\";\r\n\t\tbytes32 prefixedHash =\r\n\t\t\tkeccak256(abi.encodePacked(prefix, _hashmessage));\r\n\t\taddress signer = ecrecover(prefixedHash, _v, _r, _s);\r\n\t\treturn signer;\r\n\t}\r\n\r\n\tfunction changeSupervisor(address _newSupervisor) public auth {\r\n\t\tsupervisor = _newSupervisor;\r\n\t}\r\n\r\n\t//////////\r\n\t// Safety Methods\r\n\t//////////\r\n\r\n\t/// @notice This method can be used by the controller to extract mistakenly\r\n\t///  sent tokens to this contract.\r\n\t/// @param _token The address of the token contract that you want to recover\r\n\t///  set to 0 in case you want to extract ether.\r\n\tfunction claimTokens(address _token) public auth {\r\n\t\tif (_token == address(0)) {\r\n\t\t\t_makePayable(owner).transfer(address(this).balance);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tIERC20 token = IERC20(_token);\r\n\t\tuint256 balance = token.balanceOf(address(this));\r\n\t\ttoken.transfer(owner, balance);\r\n\t\temit ClaimedTokens(_token, owner, balance);\r\n\t}\r\n\r\n\tfunction _makePayable(address x) internal pure returns (address payable) {\r\n\t\treturn address(uint160(x));\r\n\t}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_supervisor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_networkId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimedTokens\",\"type\":\"event\"},{\"anonymous\":true,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"foo\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"bar\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"fax\",\"type\":\"bytes\"}],\"name\":\"LogNote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"OpenBox\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TakeBackDrill\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CONTRACT_DRILL_BASE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONTRACT_RING_ERC20_TOKEN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contract DSAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newSupervisor\",\"type\":\"address\"}],\"name\":\"changeSupervisor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ids\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"networkId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32\",\"name\":\"_hashmessage\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"openBoxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract ISettingsRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract DSAuthority\",\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supervisor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint16[]\",\"name\":\"_grades\",\"type\":\"uint16[]\"},{\"internalType\":\"bytes32\",\"name\":\"_hashmessage\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"takeBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DrillTakeBack","CompilerVersion":"v0.6.7+commit.b8d736ae","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000006b0940772516b69088904564a56d09cfe6bb3d85000000000000000000000000536deacedc6e972822b9e78571786b5a6dd10c8a0000000000000000000000000000000000000000000000000000000000000001","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://1fbe6144af1c8e252dbda1a2eeecc5b4089b127be25fe3fe4e5e898c8dc6ee38"}]}