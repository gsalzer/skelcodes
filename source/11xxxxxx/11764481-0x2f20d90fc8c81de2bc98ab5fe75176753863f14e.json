{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n\r\n// \r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    \r\n    \r\n    \r\n    \r\n    function calculateBurnFee(uint256 _amount) external view returns (uint256);\r\n    \r\n    \r\n    function mint(address account, uint256 amount) external;\r\n    \r\n    \r\n    function burn(address account, uint256 amount) external;\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// \r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n\r\n// \r\n/**\r\n * @dev Interface of the DAO token / NFT rewards % boost\r\n */\r\ninterface percStrategy {\r\n    \r\n    function returnPerc(address investor) external view returns (uint256);\r\n    \r\n}\r\n\r\n\r\ncontract MoondayPlusCapital is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n   \r\n    uint256 public REFERRAL_PERCENTS = 50;\r\n    \r\n    //thats about 25% monthly base not including the strategy dao/nft\r\n    uint256 constant public PERCENTS_DIVIDER = 100000;\r\n\tuint256 public PERCENTS_DAILY = 833;\r\n\t\r\n\t\r\n    uint256 constant public TIME_STEP = 1 days;\r\n    \r\n    \r\n\t\r\n\t\r\n\tIERC20 MoondayToken;\r\n\t\r\n\t\r\n\tpercStrategy strategyContract;\r\n\t\r\n\r\n    uint256 public totalUsers;\r\n    uint256 public totalInvested;\r\n    uint256 public totalWithdrawn;\r\n    uint256 public totalDeposits;\r\n\r\n \r\n\r\n    struct Deposit {\r\n        uint256 amount;\r\n        uint256 withdrawn;\r\n        uint256 start;\r\n    }\r\n\r\n    struct User {\r\n        Deposit[] deposits;\r\n        uint256 checkpoint;\r\n        address referrer;\r\n        uint256 bonus;\r\n    }\r\n\r\n    mapping (address => User) internal users;\r\n\r\n    event Newbie(address user);\r\n    event NewDeposit(address indexed user, uint256 amount);\r\n    event Withdrawn(address indexed user, uint256 amount);\r\n    event RefBonus(address indexed referrer, address indexed referral, uint256 amount);\r\n \r\n\r\n    constructor(address _MoondayToken) public {\r\n     \r\n        MoondayToken = IERC20(_MoondayToken);\r\n    }\r\n\r\n    function invest(address referrer, uint256 amount) external {\r\n\r\n        uint256 received = amount.sub(MoondayToken.calculateBurnFee(amount));\r\n\r\n\t\t\r\n\t    \r\n\t    MoondayToken.burn(msg.sender, amount);\r\n      \r\n        User storage user = users[msg.sender];\r\n\r\n        if (user.referrer == address(0) && users[referrer].deposits.length > 0 && referrer != msg.sender) {\r\n            user.referrer = referrer;\r\n        }\r\n\r\n        if (user.referrer != address(0)) {\r\n\r\n            address upline = user.referrer;\r\n            \r\n\t\t\tif (upline != address(0)) {\r\n\t\t\t\tuint256 _amount = received.mul(REFERRAL_PERCENTS).div(PERCENTS_DIVIDER);\r\n\t\t\t\tusers[upline].bonus = users[upline].bonus.add(_amount);\r\n\t\t\t\temit RefBonus(upline, msg.sender, _amount);\r\n\t\t\t}\r\n        }\r\n\r\n        if (user.deposits.length == 0) {\r\n            user.checkpoint = block.timestamp;\r\n            totalUsers = totalUsers.add(1);\r\n            emit Newbie(msg.sender);\r\n        }\r\n\r\n        user.deposits.push(Deposit(received, 0, block.timestamp));\r\n\r\n        totalInvested = totalInvested.add(received);\r\n        totalDeposits = totalDeposits.add(1);\r\n\r\n        emit NewDeposit(msg.sender, received);\r\n\r\n    }\r\n\r\n\r\n    function withdraw() external {\r\n        User storage user = users[msg.sender];\r\n\r\n        uint256 userPercentRate = getUserPerc(msg.sender);\r\n\r\n        uint256 totalAmount;\r\n        uint256 dividends;\r\n\r\n        for (uint256 i = 0; i < user.deposits.length; i++) {\r\n\r\n            if (user.deposits[i].withdrawn < user.deposits[i].amount.mul(85).div(100)) {\r\n\r\n                if (user.deposits[i].start > user.checkpoint) {\r\n\r\n                    dividends = (user.deposits[i].amount.mul(userPercentRate).div(PERCENTS_DIVIDER))\r\n\t\t\t\t\t\t.mul(block.timestamp.sub(user.deposits[i].start))\r\n\t\t\t\t\t\t.div(TIME_STEP);\r\n\r\n                } else {\r\n\r\n                    dividends = (user.deposits[i].amount.mul(userPercentRate).div(PERCENTS_DIVIDER))\r\n                        .mul(block.timestamp.sub(user.checkpoint))\r\n                        .div(TIME_STEP);\r\n\r\n                }\r\n\r\n                if (user.deposits[i].withdrawn.add(dividends) > user.deposits[i].amount.mul(85).div(100)) {\r\n                    dividends = (user.deposits[i].amount.mul(85).div(100)).sub(user.deposits[i].withdrawn);\r\n                }\r\n\r\n                user.deposits[i].withdrawn = user.deposits[i].withdrawn.add(dividends); /// changing of storage data\r\n                totalAmount = totalAmount.add(dividends);\r\n\r\n            }\r\n        }\r\n\r\n        uint256 referralBonus = getUserReferralBonus(msg.sender);\r\n        if (referralBonus > 0) {\r\n            totalAmount = totalAmount.add(referralBonus);\r\n            user.bonus = 0;\r\n        }\r\n\r\n        require(totalAmount > 0, \"User has no dividends\");\r\n\r\n        \r\n\r\n        user.checkpoint = block.timestamp;\r\n\t\t\r\n\t\r\n\t\tMoondayToken.mint(msg.sender, totalAmount);\r\n\r\n        totalWithdrawn = totalWithdrawn.add(totalAmount);\r\n\r\n        emit Withdrawn(msg.sender, totalAmount);\r\n\r\n    }\r\n    \r\n    \r\n    function withdrawSafe(uint256 _start, uint256 _stop) external {\r\n        User storage user = users[msg.sender];\r\n\r\n        uint256 userPercentRate = getUserPerc(msg.sender);\r\n\r\n        uint256 totalAmount;\r\n        uint256 dividends;\r\n\r\n        for (uint256 i = _start; i < _stop; i++) {\r\n\r\n            if (user.deposits[i].withdrawn < user.deposits[i].amount.mul(85).div(100)) {\r\n\r\n                if (user.deposits[i].start > user.checkpoint) {\r\n\r\n                    dividends = (user.deposits[i].amount.mul(userPercentRate).div(PERCENTS_DIVIDER))\r\n\t\t\t\t\t\t.mul(block.timestamp.sub(user.deposits[i].start))\r\n\t\t\t\t\t\t.div(TIME_STEP);\r\n\r\n                } else {\r\n\r\n                    dividends = (user.deposits[i].amount.mul(userPercentRate).div(PERCENTS_DIVIDER))\r\n                        .mul(block.timestamp.sub(user.checkpoint))\r\n                        .div(TIME_STEP);\r\n\r\n                }\r\n\r\n                if (user.deposits[i].withdrawn.add(dividends) > user.deposits[i].amount.mul(85).div(100)) {\r\n                    dividends = (user.deposits[i].amount.mul(85).div(100)).sub(user.deposits[i].withdrawn);\r\n                }\r\n\r\n                user.deposits[i].withdrawn = user.deposits[i].withdrawn.add(dividends); /// changing of storage data\r\n                totalAmount = totalAmount.add(dividends);\r\n\r\n            }\r\n        }\r\n\r\n        uint256 referralBonus = getUserReferralBonus(msg.sender);\r\n        if (referralBonus > 0) {\r\n            totalAmount = totalAmount.add(referralBonus);\r\n            user.bonus = 0;\r\n        }\r\n\r\n        require(totalAmount > 0, \"User has no dividends\");\r\n\r\n        \r\n\r\n        user.checkpoint = block.timestamp;\r\n\t\t\r\n\t\r\n\t\tMoondayToken.mint(msg.sender, totalAmount);\r\n\r\n        totalWithdrawn = totalWithdrawn.add(totalAmount);\r\n\r\n        emit Withdrawn(msg.sender, totalAmount);\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    function getUserDividends(address userAddress) public view returns (uint256) {\r\n        User storage user = users[userAddress];\r\n\r\n        uint256 userPercentRate = getUserPerc(userAddress);\r\n\r\n        uint256 totalDividends;\r\n        uint256 dividends;\r\n\r\n        for (uint256 i = 0; i < user.deposits.length; i++) {\r\n\r\n            if (user.deposits[i].withdrawn < user.deposits[i].amount.mul(85).div(100)) {\r\n\r\n                if (user.deposits[i].start > user.checkpoint) {\r\n\r\n                    dividends = (user.deposits[i].amount.mul(userPercentRate).div(PERCENTS_DIVIDER))\r\n\t\t\t\t\t\t.mul(block.timestamp.sub(user.deposits[i].start))\r\n\t\t\t\t\t\t.div(TIME_STEP);\r\n\r\n                } else {\r\n\r\n                    dividends = (user.deposits[i].amount.mul(userPercentRate).div(PERCENTS_DIVIDER))\r\n\t\t\t\t\t\t.mul(block.timestamp.sub(user.checkpoint))\r\n\t\t\t\t\t\t.div(TIME_STEP);\r\n                }\r\n\r\n                if (user.deposits[i].withdrawn.add(dividends) > user.deposits[i].amount.mul(85).div(100)) {\r\n                    dividends = (user.deposits[i].amount.mul(85).div(100)).sub(user.deposits[i].withdrawn);\r\n                }\r\n\r\n                totalDividends = totalDividends.add(dividends);\r\n\r\n            }\r\n\r\n        }\r\n\r\n        return totalDividends;\r\n    }\r\n    \r\n    \r\n    function getUserPerc(address userAddress) public view returns(uint256) {\r\n        \r\n        \r\n        if(address(strategyContract) == address(0)){\r\n            return PERCENTS_DAILY;\r\n        }else{\r\n           return PERCENTS_DAILY.add(strategyContract.returnPerc(userAddress)); \r\n        }\r\n        \r\n       \r\n    }\r\n    \r\n\r\n    function getUserCheckpoint(address userAddress) external view returns(uint256) {\r\n        return users[userAddress].checkpoint;\r\n    }\r\n\r\n    function getUserReferrer(address userAddress) external view returns(address) {\r\n        return users[userAddress].referrer;\r\n    }\r\n\r\n    function getUserReferralBonus(address userAddress) public view returns(uint256) {\r\n        return users[userAddress].bonus;\r\n    }\r\n\r\n    function getUserAvailable(address userAddress) external view returns(uint256) {\r\n        return getUserReferralBonus(userAddress).add(getUserDividends(userAddress));\r\n    }\r\n\r\n    function isActive(address userAddress) external view returns (bool) {\r\n        User storage user = users[userAddress];\r\n\r\n        if (user.deposits.length > 0) {\r\n            if (user.deposits[user.deposits.length-1].withdrawn < user.deposits[user.deposits.length-1].amount.mul(85).div(100)) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n\r\n    function getUserDepositInfo(address userAddress, uint256 index) external view returns(uint256, uint256, uint256) {\r\n        User storage user = users[userAddress];\r\n\r\n        return (user.deposits[index].amount, user.deposits[index].withdrawn, user.deposits[index].start);\r\n    }\r\n\r\n    function getUserAmountOfDeposits(address userAddress) external view returns(uint256) {\r\n        return users[userAddress].deposits.length;\r\n    }\r\n\r\n    function getUserTotalDeposits(address userAddress) external view returns(uint256) {\r\n        User storage user = users[userAddress];\r\n\r\n        uint256 amount;\r\n\r\n        for (uint256 i = 0; i < user.deposits.length; i++) {\r\n            amount = amount.add(user.deposits[i].amount);\r\n        }\r\n\r\n        return amount;\r\n    }\r\n\r\n    function getUserTotalWithdrawn(address userAddress) external view returns(uint256) {\r\n        User storage user = users[userAddress];\r\n\r\n        uint256 amount;\r\n\r\n        for (uint256 i = 0; i < user.deposits.length; i++) {\r\n            amount = amount.add(user.deposits[i].withdrawn);\r\n        }\r\n\r\n        return amount;\r\n    }\r\n    \r\n    function setStrategy(address strategy) external onlyOwner {\r\n          strategyContract = percStrategy(strategy);\r\n       } \r\n       \r\n       \r\n    function setRefPerc(uint256 _newPerc) external onlyOwner {\r\n          REFERRAL_PERCENTS = _newPerc;\r\n       } \r\n       \r\n    function setBasePerc(uint256 _newPerc) external onlyOwner {\r\n          PERCENTS_DAILY = _newPerc;\r\n       } \r\n       \r\n       \r\n       \r\n       \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_MoondayToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Newbie\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PERCENTS_DAILY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTS_DIVIDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REFERRAL_PERCENTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIME_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserAmountOfDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserCheckpoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getUserDepositInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserPerc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferralBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPerc\",\"type\":\"uint256\"}],\"name\":\"setBasePerc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPerc\",\"type\":\"uint256\"}],\"name\":\"setRefPerc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"setStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stop\",\"type\":\"uint256\"}],\"name\":\"withdrawSafe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MoondayPlusCapital","CompilerVersion":"v0.6.2+commit.bacdbe57","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000cb696c86917175dfb4f0037ddc4f2e877a9f081a","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://212c45a958ed842897c2c026590019d05eb609ed1bcdc1f53618d2d67ad3ad4a"}]}