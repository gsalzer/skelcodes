{"status":"1","message":"OK","result":[{"SourceCode":"{\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"IProtocolWallet.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity 0.6.12;\\nimport \\\"./IERC20.sol\\\";\\n\\n/// @title Protocol Wallet interface\\ninterface IProtocolWallet {\\n    event FundsAddedToPool(uint256 added, uint256 total);\\n\\n    /*\\n    * External functions\\n    */\\n\\n    /// @dev Returns the address of the underlying staked token.\\n    /// @return balance uint256 the balance\\n    function getBalance() external view returns (uint256 balance);\\n\\n    /// @dev Transfers the given amount of orbs tokens form the sender to this contract an update the pool.\\n    function topUp(uint256 amount) external;\\n\\n    /// @dev Withdraw from pool to a the sender\\u0027s address, limited by the pool\\u0027s MaxRate.\\n    /// A maximum of MaxRate x time period since the last Orbs transfer may be transferred out.\\n    function withdraw(uint256 amount) external; /* onlyClient */\\n\\n\\n    /*\\n    * Governance functions\\n    */\\n\\n    event ClientSet(address client);\\n    event MaxAnnualRateSet(uint256 maxAnnualRate);\\n    event EmergencyWithdrawal(address addr);\\n    event OutstandingTokensReset(uint256 startTime);\\n\\n    /// @dev Sets a new transfer rate for the Orbs pool.\\n    function setMaxAnnualRate(uint256 annual_rate) external; /* onlyMigrationManager */\\n\\n    function getMaxAnnualRate() external view returns (uint256);\\n\\n    /// @dev transfer the entire pool\\u0027s balance to a new wallet.\\n    function emergencyWithdraw() external; /* onlyMigrationManager */\\n\\n    /// @dev sets the address of the new contract\\n    function setClient(address client) external; /* onlyFunctionalManager */\\n\\n    function resetOutstandingTokens(uint256 startTime) external; /* onlyMigrationOwner */\\n\\n    }\\n\"},\"ProtocolWallet.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./IProtocolWallet.sol\\\";\\nimport \\\"./WithClaimableMigrationOwnership.sol\\\";\\nimport \\\"./WithClaimableFunctionalOwnership.sol\\\";\\n\\ncontract ProtocolWallet is IProtocolWallet, WithClaimableMigrationOwnership, WithClaimableFunctionalOwnership {\\n    using SafeMath for uint256;\\n\\n    IERC20 public token;\\n    address public client;\\n    uint256 public lastWithdrawal;\\n    uint256 maxAnnualRate;\\n\\n    constructor(IERC20 _token, address _client, uint256 _maxAnnualRate) public {\\n        token = _token;\\n        client = _client;\\n        lastWithdrawal = now;\\n\\n        setMaxAnnualRate(_maxAnnualRate);\\n    }\\n\\n    modifier onlyClient() {\\n        require(msg.sender == client, \\\"caller is not the wallet client\\\");\\n\\n        _;\\n    }\\n\\n    /*\\n    * External functions\\n    */\\n\\n    /// @dev Returns the address of the underlying staked token.\\n    /// @return balance IERC20 The address of the token.\\n    function getBalance() public override view returns (uint256 balance) {\\n        return token.balanceOf(address(this));\\n    }\\n\\n    /// @dev Transfers the given amount of orbs tokens form the sender to this contract an update the pool.\\n    function topUp(uint256 amount) external override {\\n        emit FundsAddedToPool(amount, getBalance() + amount);\\n        require(token.transferFrom(msg.sender, address(this), amount), \\\"ProtocolWallet::topUp - insufficient allowance\\\");\\n    }\\n\\n    /// @dev withdraws from the pool to a spender, limited by the pool\\u0027s MaxRate.\\n    /// A maximum of MaxRate x time period since the last Orbs transfer may be transferred out.\\n    function withdraw(uint256 amount) external override onlyClient {\\n        uint duration = now - lastWithdrawal;\\n        uint maxAmount = duration.mul(maxAnnualRate).div(365 * 24 * 60 * 60);\\n        require(amount \\u003c= maxAmount, \\\"ProtocolWallet::withdraw - requested amount is larger than allowed by rate\\\");\\n\\n        lastWithdrawal = now;\\n        if (amount \\u003e 0) {\\n            require(token.transfer(msg.sender, amount), \\\"ProtocolWallet::withdraw - transfer failed\\\");\\n        }\\n    }\\n\\n    /*\\n    * Governance functions\\n    */\\n\\n    /// @dev Sets a new transfer rate for the Orbs pool.\\n    function setMaxAnnualRate(uint256 _annualRate) public override onlyMigrationOwner {\\n        maxAnnualRate = _annualRate;\\n        emit MaxAnnualRateSet(_annualRate);\\n    }\\n\\n    function getMaxAnnualRate() external override view returns (uint256) {\\n        return maxAnnualRate;\\n    }\\n\\n    /// @dev Sets a new transfer rate for the Orbs pool.\\n    function resetOutstandingTokens(uint256 startTime) external override onlyMigrationOwner { //TODO add test\\n        lastWithdrawal = startTime;\\n        emit OutstandingTokensReset(startTime);\\n    }\\n\\n    /// @dev transfer the entire pool\\u0027s balance to a new wallet.\\n    function emergencyWithdraw() external override onlyMigrationOwner {\\n        emit EmergencyWithdrawal(msg.sender);\\n        require(token.transfer(msg.sender, getBalance()), \\\"ProtocolWallet::emergencyWithdraw - transfer failed\\\");\\n    }\\n\\n    /// @dev sets the address of the new contract\\n    function setClient(address _client) external override onlyFunctionalOwner {\\n        client = _client;\\n        emit ClientSet(_client);\\n    }\\n}\\n\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"},\"WithClaimableFunctionalOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity 0.6.12;\\n\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @title Claimable\\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\\n * This allows the new owner to accept the transfer.\\n */\\ncontract WithClaimableFunctionalOwnership is Context{\\n    address private _functionalOwner;\\n    address private _pendingFunctionalOwner;\\n\\n    event FunctionalOwnershipTransferred(address indexed previousFunctionalOwner, address indexed newFunctionalOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial functionalFunctionalOwner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _functionalOwner = msgSender;\\n        emit FunctionalOwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current functionalOwner.\\n     */\\n    function functionalOwner() public view returns (address) {\\n        return _functionalOwner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the functionalOwner.\\n     */\\n    modifier onlyFunctionalOwner() {\\n        require(isFunctionalOwner(), \\\"WithClaimableFunctionalOwnership: caller is not the functionalOwner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current functionalOwner.\\n     */\\n    function isFunctionalOwner() public view returns (bool) {\\n        return _msgSender() == _functionalOwner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without functionalOwner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current functionalOwner.\\n     *\\n     * NOTE: Renouncing functionalOwnership will leave the contract without an functionalOwner,\\n     * thereby removing any functionality that is only available to the functionalOwner.\\n     */\\n    function renounceFunctionalOwnership() public onlyFunctionalOwner {\\n        emit FunctionalOwnershipTransferred(_functionalOwner, address(0));\\n        _functionalOwner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers functionalOwnership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferFunctionalOwnership(address newFunctionalOwner) internal {\\n        require(newFunctionalOwner != address(0), \\\"FunctionalOwner: new functionalOwner is the zero address\\\");\\n        emit FunctionalOwnershipTransferred(_functionalOwner, newFunctionalOwner);\\n        _functionalOwner = newFunctionalOwner;\\n    }\\n\\n    /**\\n     * @dev Modifier throws if called by any account other than the pendingOwner.\\n     */\\n    modifier onlyPendingFunctionalOwner() {\\n        require(msg.sender == _pendingFunctionalOwner, \\\"Caller is not the pending functionalOwner\\\");\\n        _;\\n    }\\n    /**\\n     * @dev Allows the current functionalOwner to set the pendingOwner address.\\n     * @param newFunctionalOwner The address to transfer functionalOwnership to.\\n     */\\n    function transferFunctionalOwnership(address newFunctionalOwner) public onlyFunctionalOwner {\\n        _pendingFunctionalOwner = newFunctionalOwner;\\n    }\\n    /**\\n     * @dev Allows the _pendingFunctionalOwner address to finalize the transfer.\\n     */\\n    function claimFunctionalOwnership() external onlyPendingFunctionalOwner {\\n        _transferFunctionalOwnership(_pendingFunctionalOwner);\\n        _pendingFunctionalOwner = address(0);\\n    }\\n\\n    /**\\n     * @dev Returns the current _pendingFunctionalOwner\\n    */\\n    function pendingFunctionalOwner() public view returns (address) {\\n       return _pendingFunctionalOwner;  \\n    }\\n}\"},\"WithClaimableMigrationOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity 0.6.12;\\n\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @title Claimable\\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\\n * This allows the new owner to accept the transfer.\\n */\\ncontract WithClaimableMigrationOwnership is Context{\\n    address private _migrationOwner;\\n    address private _pendingMigrationOwner;\\n\\n    event MigrationOwnershipTransferred(address indexed previousMigrationOwner, address indexed newMigrationOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial migrationMigrationOwner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _migrationOwner = msgSender;\\n        emit MigrationOwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current migrationOwner.\\n     */\\n    function migrationOwner() public view returns (address) {\\n        return _migrationOwner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the migrationOwner.\\n     */\\n    modifier onlyMigrationOwner() {\\n        require(isMigrationOwner(), \\\"WithClaimableMigrationOwnership: caller is not the migrationOwner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current migrationOwner.\\n     */\\n    function isMigrationOwner() public view returns (bool) {\\n        return _msgSender() == _migrationOwner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without migrationOwner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current migrationOwner.\\n     *\\n     * NOTE: Renouncing migrationOwnership will leave the contract without an migrationOwner,\\n     * thereby removing any functionality that is only available to the migrationOwner.\\n     */\\n    function renounceMigrationOwnership() public onlyMigrationOwner {\\n        emit MigrationOwnershipTransferred(_migrationOwner, address(0));\\n        _migrationOwner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers migrationOwnership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferMigrationOwnership(address newMigrationOwner) internal {\\n        require(newMigrationOwner != address(0), \\\"MigrationOwner: new migrationOwner is the zero address\\\");\\n        emit MigrationOwnershipTransferred(_migrationOwner, newMigrationOwner);\\n        _migrationOwner = newMigrationOwner;\\n    }\\n\\n    /**\\n     * @dev Modifier throws if called by any account other than the pendingOwner.\\n     */\\n    modifier onlyPendingMigrationOwner() {\\n        require(msg.sender == _pendingMigrationOwner, \\\"Caller is not the pending migrationOwner\\\");\\n        _;\\n    }\\n    /**\\n     * @dev Allows the current migrationOwner to set the pendingOwner address.\\n     * @param newMigrationOwner The address to transfer migrationOwnership to.\\n     */\\n    function transferMigrationOwnership(address newMigrationOwner) public onlyMigrationOwner {\\n        _pendingMigrationOwner = newMigrationOwner;\\n    }\\n    /**\\n     * @dev Allows the _pendingMigrationOwner address to finalize the transfer.\\n     */\\n    function claimMigrationOwnership() external onlyPendingMigrationOwner {\\n        _transferMigrationOwnership(_pendingMigrationOwner);\\n        _pendingMigrationOwner = address(0);\\n    }\\n\\n    /**\\n     * @dev Returns the current _pendingMigrationOwner\\n    */\\n    function pendingMigrationOwner() public view returns (address) {\\n       return _pendingMigrationOwner;  \\n    }\\n}\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_client\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxAnnualRate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"}],\"name\":\"ClientSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"EmergencyWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousFunctionalOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFunctionalOwner\",\"type\":\"address\"}],\"name\":\"FunctionalOwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"added\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"FundsAddedToPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxAnnualRate\",\"type\":\"uint256\"}],\"name\":\"MaxAnnualRateSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousMigrationOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newMigrationOwner\",\"type\":\"address\"}],\"name\":\"MigrationOwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"name\":\"OutstandingTokensReset\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimFunctionalOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimMigrationOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"client\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"functionalOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxAnnualRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFunctionalOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMigrationOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastWithdrawal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingFunctionalOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingMigrationOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceFunctionalOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceMigrationOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"name\":\"resetOutstandingTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_client\",\"type\":\"address\"}],\"name\":\"setClient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_annualRate\",\"type\":\"uint256\"}],\"name\":\"setMaxAnnualRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"topUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFunctionalOwner\",\"type\":\"address\"}],\"name\":\"transferFunctionalOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMigrationOwner\",\"type\":\"address\"}],\"name\":\"transferMigrationOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ProtocolWallet","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"10000","ConstructorArguments":"000000000000000000000000ff56cc6b1e6ded347aa0b7676c85ab0b3d08b0fa000000000000000000000000281e714ee8bfd7208b07205fb93d7c9298f3a80700000000000000000000000000000000000000000000028a857425466f800000","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://24c00784b8976af64e847b2277ae827b031834a38c1fd5b69df3ad727c7e2a0c"}]}