{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(a >= b);\r\n        return a - b;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\n// 智能矩阵\r\ncontract SmartMatrix {\r\n    struct User {\r\n        uint id;            // 用户ID\r\n        uint8 level;        // 用户等级\r\n        address payable referrer;       // 推荐人地址\r\n        address payable[] referrals;    // 下级地址\r\n\r\n        uint8[] dividendsType;    // 收益类型\r\n        uint[]  dividendsAmount;  // 收益数量\r\n        uint[]  dividendsTime;    // 收益时间\r\n\r\n        uint[] upgradeTime;  // 升级时间\r\n    }\r\n\r\n    uint8 public constant _LAST_LEVEL = 16;     // 定义最高等级\r\n    mapping(uint8 => uint) public _levelPrice;  // 每一等级的价格\r\n    address payable public _owner;      // 合约拥有者地址\r\n\r\n    mapping(address => User) public _users;     // 所有用户数据：地址——>用户数据\r\n    mapping(uint => address payable) public _userIds;\r\n    uint public lastUserId = 2;         // 最新的ID，目前为2\r\n    \r\n    using SafeMath for uint;\r\n\r\n    event Registration(address indexed user, address indexed referrer, uint indexed userId, uint referrerId);\r\n    event Upgrade(address indexed user, uint8 level);\r\n\r\n    constructor(address payable ownerAddress) public {\r\n        // 初始化等级价格\r\n        // 0.1  0.5  1  1.5  2  2.5   3   3.5   4   4.5   5   5.5   6   6.5   7   7.5       \r\n        _levelPrice[1] = 0.1 ether;\r\n        _levelPrice[2] = 0.5 ether;\r\n        for (uint8 i = 3; i <= _LAST_LEVEL; i++) {\r\n            _levelPrice[i] = _levelPrice[i-1] + 0.5 ether;\r\n        }\r\n\r\n        // 初始化用户数据\r\n        User memory user = User({\r\n            id: 1,                  // ID为1\r\n            level: 16,\r\n            referrer: address(0),   // 推荐人为空\r\n            referrals: new address payable[](0),\r\n\r\n            dividendsType: new uint8[](0),\r\n            dividendsAmount: new uint[](0),\r\n            dividendsTime: new uint[](0),\r\n            upgradeTime: new uint[](0)\r\n        });\r\n        _users[ownerAddress] = user;\r\n        _userIds[1] = ownerAddress;\r\n        \r\n        _owner = ownerAddress;       \r\n    }\r\n\r\n    receive() external payable {\r\n        if(msg.data.length == 0) {\r\n            return registration(msg.sender, _owner);\r\n        }\r\n        registration(msg.sender, bytesToAddress(msg.data));\r\n    }\r\n\r\n    // 地址转换器\r\n    function bytesToAddress(bytes memory bys) private pure returns (address payable addr) {\r\n        assembly {\r\n            addr := mload(add(bys, 20))\r\n        }\r\n    }\r\n\r\n    function registrationExt(address payable referrerAddress) external payable {\r\n        registration(msg.sender, referrerAddress);\r\n    }\r\n\r\n    // 新用户注册：新用户地址、推荐人地址\r\n    function registration(address payable userAddress, address payable referrerAddress) private {\r\n        require(msg.value == 0.1 ether, \"registration cost 0.1\");\r\n        require(!isUserExists(userAddress), \"user exists\");\r\n        require(isUserExists(referrerAddress), \"referrer not exists\");\r\n        \r\n        // 计算新用户地址长度（大小）\r\n        uint32 size;\r\n        assembly {\r\n            size := extcodesize(userAddress)\r\n        }\r\n        // 如果长度（大小）为0，出错\r\n        require(size == 0, \"cannot be a contract\");\r\n        \r\n        // 创建新用户对象\r\n        User memory user = User({\r\n            id: lastUserId,             // 新用户的ID为最新ID\r\n            level: 1,\r\n            referrer: referrerAddress,  // 推荐人地址为传入的推荐人地址\r\n            referrals: new address payable [](0),\r\n            \r\n            dividendsType: new uint8[](0),\r\n            dividendsAmount: new uint[](0),\r\n            dividendsTime: new uint[](0),\r\n            upgradeTime: new uint[](1)\r\n        });\r\n        user.upgradeTime[0] = block.timestamp;\r\n\r\n        // 保存新用户数据：新用户地址——>新用户数据\r\n        _users[userAddress] = user;\r\n\r\n        // 把新用户地址记录到ID总册里，然后最新的ID+1，等待下一个新用户\r\n        _userIds[lastUserId] = userAddress;\r\n        lastUserId++;\r\n        \r\n        bool luck;\r\n        uint res = _users[referrerAddress].referrals.length % 4; \r\n        if ( res == 0 || res == 1){\r\n            luck = true;\r\n        }\r\n\r\n        _users[referrerAddress].referrals.push(userAddress);\r\n        \r\n        sendETH(referrerAddress, 1, luck);\r\n\r\n        // 发送注册消息：新用户地址、推荐人地址、用户ID、用户推荐人ID\r\n        emit Registration(userAddress, referrerAddress, _users[userAddress].id, _users[referrerAddress].id);\r\n    }\r\n\r\n    // 外用查询接口【查询用户是否注册】：输入用户地址；输出该用户是否存在\r\n    function isUserExists(address payable user) public view returns (bool) {\r\n        return (_users[user].id != 0);\r\n    }\r\n\r\n    // 购买新的等级\r\n    function buyNewLevel(uint8 level) external payable {\r\n        require(isUserExists(msg.sender), \"user is not exists. Register first.\");\r\n        require(msg.value == _levelPrice[level], \"invalid price\");\r\n        require(level > 1 && level <= _LAST_LEVEL, \"invalid level\");\r\n\r\n        require(_users[msg.sender].level < level, \"level already activated\");\r\n        require(_users[msg.sender].level == level -1);  // 请先购买 level - 1\r\n\r\n        _users[msg.sender].level = level;   // 升级\r\n        _users[msg.sender].upgradeTime.push(block.timestamp);   // 记录升级时间\r\n\r\n\r\n        bool luck;\r\n        uint i = 0;\r\n        for ( ; i < _users[_users[msg.sender].referrer].referrals.length; i++){\r\n            if (_users[_users[msg.sender].referrer].referrals[i] == msg.sender){\r\n                break;\r\n            }\r\n        }\r\n        if (i % 4 == 0 || i % 4 == 1){\r\n            luck = true;\r\n        }\r\n\r\n        sendETH(_users[msg.sender].referrer, level, luck);\r\n\r\n        // 发送升级消息：用户地址、对应等级\r\n        emit Upgrade(msg.sender, level);\r\n    }\r\n\r\n    function sendETH(address payable referrer, uint8 level, bool luck) private {\r\n        if (luck && _users[referrer].level >= level) {\r\n            uint fee = _levelPrice[level].div(10);\r\n            uint dividend = _levelPrice[level].sub(fee);\r\n\r\n            _owner.transfer(fee);\r\n            transferDividends(referrer, dividend, 0);   // 0 直荐\r\n        }else{\r\n            sendETHDividends(referrer, level);      // 上6代内均分奖励\r\n        }\r\n    }\r\n\r\n    function sendETHDividends(address payable referrer, uint8 level) private {\r\n        address payable[] memory referrers = new address payable[](6);  // 获利地址, 最高6代\r\n        uint  referrerid;           // 如果查找到创始人，则停止\r\n        uint8 i = 0;\r\n        for (; i < 6 && referrerid != 1; ) {\r\n            if (_users[referrer].level >= level) {\r\n\r\n                referrerid = _users[referrer].id;\r\n                referrers[i] = referrer;    // 存入数组\r\n                i++;\r\n            }\r\n            referrer = _users[referrer].referrer;   // 向上查找推荐人\r\n        }\r\n\r\n        uint  fee = _levelPrice[level].div(10); // 手续费\r\n        uint  dividend = fee.mul(9).div(i);     // 每个地址，获得的利润\r\n\r\n        _owner.transfer(fee);                   // 创始人获取 10% 手续费\r\n        for (uint8 j = 0; j < i; j++){\r\n            transferDividends(referrers[j], dividend, 1);  // 1 均分\r\n        }\r\n    }\r\n\r\n    function transferDividends(address payable referrer, uint dividends, uint8 dividendsType) private {\r\n        referrer.transfer(dividends);\r\n\r\n        _users[referrer].dividendsType.push(dividendsType);\r\n        _users[referrer].dividendsAmount.push(dividends);\r\n        _users[referrer].dividendsTime.push(block.timestamp);\r\n    }\r\n\r\n    // 外用查询接口: 查询用户地址的信息\r\n    function usersInfo(address payable userAddress) public view returns(uint, uint8, address) {\r\n        return (_users[userAddress].id, _users[userAddress].level, _users[userAddress].referrer);\r\n    }\r\n\r\n    // 查询下级地址及其等级\r\n    function getReferrals(address payable userAddress) public view returns(address payable[] memory, uint8[] memory) {\r\n        uint8[] memory levels = new uint8[](_users[userAddress].referrals.length);\r\n        for (uint i = 0; i < _users[userAddress].referrals.length; i++){\r\n            levels[i] = _users[_users[userAddress].referrals[i]].level;\r\n        }\r\n        return (_users[userAddress].referrals, levels);\r\n    }\r\n\r\n    // 外用查询接口: 查询升级记录\r\n    function upgradeInfo(address payable userAddress) public view returns(uint[] memory) {\r\n        return _users[userAddress].upgradeTime;\r\n    }\r\n\r\n    // 查询收益记录\r\n    function getDividends(address payable userAddress) public view returns(uint[] memory, uint8[] memory, uint[] memory, uint, uint) {\r\n        uint teamNumber = 0;\r\n        uint teamDividends = 0;\r\n\r\n        (teamNumber, teamDividends) = getTeam(userAddress, teamNumber, teamDividends);\r\n        return(_users[userAddress].dividendsTime, _users[userAddress].dividendsType, _users[userAddress].dividendsAmount, teamNumber, teamDividends);\r\n    }\r\n\r\n    function getTeam(address payable userAddress, uint teamNumber, uint teamDividends) private view returns(uint, uint){\r\n        teamNumber = teamNumber + 1;\r\n        for (uint i = 0; i < _users[userAddress].dividendsAmount.length; i++){\r\n            teamDividends = teamDividends + _users[userAddress].dividendsAmount[i];\r\n        }\r\n        for (uint i = 0; i < _users[userAddress].referrals.length; i++){\r\n            (teamNumber, teamDividends) = getTeam(_users[userAddress].referrals[i], teamNumber, teamDividends);\r\n        }\r\n        return (teamNumber, teamDividends);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"}],\"name\":\"Registration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"Upgrade\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_LAST_LEVEL\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"_levelPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_userIds\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"address payable\",\"name\":\"referrer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"buyNewLevel\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getDividends\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getReferrals\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isUserExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUserId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"referrerAddress\",\"type\":\"address\"}],\"name\":\"registrationExt\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"upgradeInfo\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"usersInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"SmartMatrix","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000063e5368fade001074f77a78f70d4268885fbd6cc","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7d131b30d34da97fee6dc9047c79299704399b342aba580ab9968c385c3ff2e1"}]}