{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin\\contracts\\introspection\\IERC165.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: orchestrator\\IEthItemOrchestratorDependantElement.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\ninterface IEthItemOrchestratorDependantElement is IERC165 {\r\n\r\n    /**\r\n     * @dev GET - The DoubleProxy of the DFO linked to this Contract\r\n     */\r\n    function doubleProxy() external view returns (address);\r\n\r\n    /**\r\n     * @dev SET - The DoubleProxy of the DFO linked to this Contract\r\n     * It can be done only by the Factory controller\r\n     * @param newDoubleProxy the new DoubleProxy address\r\n     */\r\n    function setDoubleProxy(address newDoubleProxy) external;\r\n\r\n    function isAuthorizedOrchestrator(address operator) external view returns(bool);\r\n}\r\n\r\n// File: factory\\IEthItemFactory.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @title IEthItemFactory\r\n * @dev This contract represents the Factory Used to deploy all the EthItems, keeping track of them.\r\n */\r\ninterface IEthItemFactory is IEthItemOrchestratorDependantElement {\r\n\r\n    /**\r\n     * @dev GET - The address of the Smart Contract whose code will serve as a model for all the EthItemERC20Wrappers (please see the eth-item-token-standard for further information).\r\n     */\r\n    function ethItemInteroperableInterfaceModel() external view returns (address ethItemInteroperableInterfaceModelAddress, uint256 ethItemInteroperableInterfaceModelVersion);\r\n\r\n    /**\r\n     * @dev SET - The address of the Smart Contract whose code will serve as a model for all the EthItemERC20Wrappers (please see the eth-item-token-standard for further information).\r\n     * It can be done only by the Factory controller\r\n     */\r\n    function setEthItemInteroperableInterfaceModel(address ethItemInteroperableInterfaceModelAddress) external;\r\n\r\n    /**\r\n     * @dev GET - The address of the Smart Contract whose code will serve as a model for all the Native EthItems.\r\n     * Every EthItem will have its own address, but the code will be cloned from this one.\r\n     */\r\n    function nativeModel() external view returns (address nativeModelAddress, uint256 nativeModelVersion);\r\n\r\n    /**\r\n     * @dev SET - The address of the Native EthItem model.\r\n     * It can be done only by the Factory controller\r\n     */\r\n    function setNativeModel(address nativeModelAddress) external;\r\n\r\n    /**\r\n     * @dev GET - The address of the Smart Contract whose code will serve as a model for all the Wrapped ERC1155 EthItems.\r\n     * Every EthItem will have its own address, but the code will be cloned from this one.\r\n     */\r\n    function erc1155WrapperModel() external view returns (address erc1155WrapperModelAddress, uint256 erc1155WrapperModelVersion);\r\n\r\n    /**\r\n     * @dev SET - The address of the ERC1155 NFT-Based EthItem model.\r\n     * It can be done only by the Factory controller\r\n     */\r\n    function setERC1155WrapperModel(address erc1155WrapperModelAddress) external;\r\n\r\n    /**\r\n     * @dev GET - The address of the Smart Contract whose code will serve as a model for all the Wrapped ERC20 EthItems.\r\n     */\r\n    function erc20WrapperModel() external view returns (address erc20WrapperModelAddress, uint256 erc20WrapperModelVersion);\r\n\r\n    /**\r\n     * @dev SET - The address of the Smart Contract whose code will serve as a model for all the Wrapped ERC20 EthItems.\r\n     * It can be done only by the Factory controller\r\n     */\r\n    function setERC20WrapperModel(address erc20WrapperModelAddress) external;\r\n\r\n    /**\r\n     * @dev GET - The address of the Smart Contract whose code will serve as a model for all the Wrapped ERC721 EthItems.\r\n     */\r\n    function erc721WrapperModel() external view returns (address erc721WrapperModelAddress, uint256 erc721WrapperModelVersion);\r\n\r\n    /**\r\n     * @dev SET - The address of the Smart Contract whose code will serve as a model for all the Wrapped ERC721 EthItems.\r\n     * It can be done only by the Factory controller\r\n     */\r\n    function setERC721WrapperModel(address erc721WrapperModelAddress) external;\r\n\r\n    /**\r\n     * @dev GET - The elements (numerator and denominator) useful to calculate the percentage fee to be transfered to the DFO for every new Minted EthItem\r\n     */\r\n    function mintFeePercentage() external view returns (uint256 mintFeePercentageNumerator, uint256 mintFeePercentageDenominator);\r\n\r\n    /**\r\n     * @dev SET - The element useful to calculate the Percentage fee\r\n     * It can be done only by the Factory controller\r\n     */\r\n    function setMintFeePercentage(uint256 mintFeePercentageNumerator, uint256 mintFeePercentageDenominator) external;\r\n\r\n    /**\r\n     * @dev Useful utility method to calculate the percentage fee to transfer to the DFO for the minted EthItem amount.\r\n     * @param erc20WrapperAmount The amount of minted EthItem\r\n     */\r\n    function calculateMintFee(uint256 erc20WrapperAmount) external view returns (uint256 mintFee, address dfoWalletAddress);\r\n\r\n    /**\r\n     * @dev GET - The elements (numerator and denominator) useful to calculate the percentage fee to be transfered to the DFO for every Burned EthItem\r\n     */\r\n    function burnFeePercentage() external view returns (uint256 burnFeePercentageNumerator, uint256 burnFeePercentageDenominator);\r\n\r\n    /**\r\n     * @dev SET - The element useful to calculate the Percentage fee\r\n     * It can be done only by the Factory controller\r\n     */\r\n    function setBurnFeePercentage(uint256 burnFeePercentageNumerator, uint256 burnFeePercentageDenominator) external;\r\n\r\n    /**\r\n     * @dev Useful utility method to calculate the percentage fee to transfer to the DFO for the burned EthItem amount.\r\n     * @param erc20WrapperAmount The amount of burned EthItem\r\n     */\r\n    function calculateBurnFee(uint256 erc20WrapperAmount) external view returns (uint256 burnFee, address dfoWalletAddress);\r\n\r\n    /**\r\n     * @dev Business Logic to create a brand-new EthItem.\r\n     * It raises the 'NewNativeCreated' events.\r\n     * @param modelInitCallPayload The ABI-encoded input parameters to be passed to the model to phisically create the NFT.\r\n     * It changes according to the Model Version.\r\n     * @param ethItemAddress The address of the new EthItem\r\n     * @param ethItemInitResponse The ABI-encoded output response eventually received by the Model initialization procedure.\r\n     */\r\n    function createNative(bytes calldata modelInitCallPayload) external returns (address ethItemAddress, bytes memory ethItemInitResponse);\r\n\r\n    event NewNativeCreated(uint256 indexed standardVersion, uint256 indexed wrappedItemModelVersion, uint256 indexed modelVersion, address tokenCreated);\r\n    event NewNativeCreated(address indexed model, uint256 indexed modelVersion, address indexed tokenCreated, address creator);\r\n\r\n    /**\r\n     * @dev Business Logic to wrap already existing ERC1155 Tokens to obtain a new NFT-Based EthItem.\r\n     * It raises the 'NewWrappedERC1155Created' events.\r\n     * @param modelInitCallPayload The ABI-encoded input parameters to be passed to the model to phisically create the NFT.\r\n     * It changes according to the Model Version.\r\n     * @param ethItemAddress The address of the new EthItem\r\n     * @param ethItemInitResponse The ABI-encoded output response eventually received by the Model initialization procedure.\r\n     */\r\n    function createWrappedERC1155(bytes calldata modelInitCallPayload) external returns (address ethItemAddress, bytes memory ethItemInitResponse);\r\n\r\n    event NewWrappedERC1155Created(uint256 indexed standardVersion, uint256 indexed wrappedItemModelVersion, uint256 indexed modelVersion, address tokenCreated);\r\n    event NewWrappedERC1155Created(address indexed model, uint256 indexed modelVersion, address indexed tokenCreated, address creator);\r\n\r\n    /**\r\n     * @dev Business Logic to wrap already existing ERC20 Tokens to obtain a new NFT-Based EthItem.\r\n     * It raises the 'NewWrappedERC20Created' events.\r\n     * @param modelInitCallPayload The ABI-encoded input parameters to be passed to the model to phisically create the NFT.\r\n     * It changes according to the Model Version.\r\n     * @param ethItemAddress The address of the new EthItem\r\n     * @param ethItemInitResponse The ABI-encoded output response eventually received by the Model initialization procedure.\r\n     */\r\n    function createWrappedERC20(bytes calldata modelInitCallPayload) external returns (address ethItemAddress, bytes memory ethItemInitResponse);\r\n\r\n    event NewWrappedERC20Created(uint256 indexed standardVersion, uint256 indexed wrappedItemModelVersion, uint256 indexed modelVersion, address tokenCreated);\r\n    event NewWrappedERC20Created(address indexed model, uint256 indexed modelVersion, address indexed tokenCreated, address creator);\r\n\r\n    /**\r\n     * @dev Business Logic to wrap already existing ERC721 Tokens to obtain a new NFT-Based EthItem.\r\n     * It raises the 'NewWrappedERC721Created' events.\r\n     * @param modelInitCallPayload The ABI-encoded input parameters to be passed to the model to phisically create the NFT.\r\n     * It changes according to the Model Version.\r\n     * @param ethItemAddress The address of the new EthItem\r\n     * @param ethItemInitResponse The ABI-encoded output response eventually received by the Model initialization procedure.\r\n     */\r\n    function createWrappedERC721(bytes calldata modelInitCallPayload) external returns (address ethItemAddress, bytes memory ethItemInitResponse);\r\n\r\n    event NewWrappedERC721Created(uint256 indexed standardVersion, uint256 indexed wrappedItemModelVersion, uint256 indexed modelVersion, address tokenCreated);\r\n    event NewWrappedERC721Created(address indexed model, uint256 indexed modelVersion, address indexed tokenCreated, address creator);\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\token\\ERC1155\\IERC1155.sol\r\n\r\n// SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.6.2;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\r\n     */\r\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\r\n\r\n    /**\r\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\r\n     * transfers.\r\n     */\r\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\r\n\r\n    /**\r\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\r\n     * `approved`.\r\n     */\r\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\r\n     *\r\n     * If an {URI} event was emitted for `id`, the standard\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\r\n     * returned by {IERC1155MetadataURI-uri}.\r\n     */\r\n    event URI(string value, uint256 indexed id);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `accounts` and `ids` must have the same length.\r\n     */\r\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\r\n\r\n    /**\r\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `operator` cannot be the caller.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\r\n     *\r\n     * See {setApprovalForAll}.\r\n     */\r\n    function isApprovedForAll(address account, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\r\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\token\\ERC1155\\IERC1155Receiver.sol\r\n\r\n// SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155Receiver is IERC165 {\r\n\r\n    /**\r\n        @dev Handles the receipt of a single ERC1155 token type. This function is\r\n        called at the end of a `safeTransferFrom` after the balance has been updated.\r\n        To accept the transfer, this must return\r\n        `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n        (i.e. 0xf23a6e61, or its own function selector).\r\n        @param operator The address which initiated the transfer (i.e. msg.sender)\r\n        @param from The address which previously owned the token\r\n        @param id The ID of the token being transferred\r\n        @param value The amount of tokens being transferred\r\n        @param data Additional data with no specified format\r\n        @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\r\n    */\r\n    function onERC1155Received(\r\n        address operator,\r\n        address from,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata data\r\n    )\r\n        external\r\n        returns(bytes4);\r\n\r\n    /**\r\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\r\n        is called at the end of a `safeBatchTransferFrom` after the balances have\r\n        been updated. To accept the transfer(s), this must return\r\n        `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n        (i.e. 0xbc197c81, or its own function selector).\r\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\r\n        @param from The address which previously owned the token\r\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\r\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\r\n        @param data Additional data with no specified format\r\n        @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\r\n    */\r\n    function onERC1155BatchReceived(\r\n        address operator,\r\n        address from,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values,\r\n        bytes calldata data\r\n    )\r\n        external\r\n        returns(bytes4);\r\n}\r\n\r\n// File: node_modules\\eth-item-token-standard\\IERC1155Views.sol\r\n\r\n// SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @title IERC1155Views - An optional utility interface to improve the ERC-1155 Standard.\r\n * @dev This interface introduces some additional capabilities for ERC-1155 Tokens.\r\n */\r\ninterface IERC1155Views {\r\n\r\n    /**\r\n     * @dev Returns the total supply of the given token id\r\n     * @param objectId the id of the token whose availability you want to know \r\n     */\r\n    function totalSupply(uint256 objectId) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the name of the given token id\r\n     * @param objectId the id of the token whose name you want to know \r\n     */\r\n    function name(uint256 objectId) external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the given token id\r\n     * @param objectId the id of the token whose symbol you want to know \r\n     */\r\n    function symbol(uint256 objectId) external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals of the given token id\r\n     * @param objectId the id of the token whose decimals you want to know \r\n     */\r\n    function decimals(uint256 objectId) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the uri of the given token id\r\n     * @param objectId the id of the token whose uri you want to know \r\n     */\r\n    function uri(uint256 objectId) external view returns (string memory);\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\token\\ERC20\\IERC20.sol\r\n\r\n// SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: node_modules\\eth-item-token-standard\\IBaseTokenData.sol\r\n\r\n// SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\ninterface IBaseTokenData {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n}\r\n\r\n// File: node_modules\\eth-item-token-standard\\IERC20Data.sol\r\n\r\n// SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\ninterface IERC20Data is IBaseTokenData, IERC20 {\r\n    function decimals() external view returns (uint256);\r\n}\r\n\r\n// File: node_modules\\eth-item-token-standard\\IEthItemInteroperableInterface.sol\r\n\r\n// SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\ninterface IEthItemInteroperableInterface is IERC20, IERC20Data {\r\n\r\n    function init(uint256 objectId, string memory name, string memory symbol, uint256 decimals) external;\r\n\r\n    function mainInterface() external view returns (address);\r\n\r\n    function objectId() external view returns (uint256);\r\n\r\n    function mint(address owner, uint256 amount) external;\r\n\r\n    function burn(address owner, uint256 amount) external;\r\n\r\n    function permitNonce(address sender) external view returns(uint256);\r\n\r\n    function permit(address owner, address spender, uint value, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    function interoperableInterfaceVersion() external pure returns(uint256 ethItemInteroperableInterfaceVersion);\r\n}\r\n\r\n// File: eth-item-token-standard\\IEthItemMainInterface.sol\r\n\r\n// SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface IEthItemMainInterface is IERC1155, IERC1155Views, IBaseTokenData {\r\n\r\n    function init(\r\n        address interoperableInterfaceModel,\r\n        string calldata name,\r\n        string calldata symbol\r\n    ) external;\r\n\r\n    function mainInterfaceVersion() external pure returns(uint256 ethItemInteroperableVersion);\r\n\r\n    function toInteroperableInterfaceAmount(uint256 objectId, uint256 ethItemAmount) external view returns (uint256 interoperableInterfaceAmount);\r\n\r\n    function toMainInterfaceAmount(uint256 objectId, uint256 erc20WrapperAmount) external view returns (uint256 mainInterfaceAmount);\r\n\r\n    function interoperableInterfaceModel() external view returns (address, uint256);\r\n\r\n    function asInteroperable(uint256 objectId) external view returns (IEthItemInteroperableInterface);\r\n\r\n    function emitTransferSingleEvent(address sender, address from, address to, uint256 objectId, uint256 amount) external;\r\n\r\n    function mint(uint256 amount, string calldata partialUri)\r\n        external\r\n        returns (uint256, address);\r\n\r\n    function burn(\r\n        uint256 objectId,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    function burnBatch(\r\n        uint256[] calldata objectIds,\r\n        uint256[] calldata amounts\r\n    ) external;\r\n\r\n    event NewItem(uint256 indexed objectId, address indexed tokenAddress);\r\n    event Mint(uint256 objectId, address tokenAddress, uint256 amount);\r\n}\r\n\r\n// File: models\\common\\IEthItemModelBase.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @dev This interface contains the commonn data provided by all the EthItem models\r\n */\r\ninterface IEthItemModelBase is IEthItemMainInterface {\r\n\r\n    /**\r\n     * @dev Contract Initialization, the caller of this method should be a Contract containing the logic to provide the EthItemERC20WrapperModel to be used to create ERC20-based objectIds\r\n     * @param name the chosen name for this NFT\r\n     * @param symbol the chosen symbol (Ticker) for this NFT\r\n     */\r\n    function init(string calldata name, string calldata symbol) external;\r\n\r\n    /**\r\n     * @return modelVersionNumber The version number of the Model, it should be progressive\r\n     */\r\n    function modelVersion() external pure returns(uint256 modelVersionNumber);\r\n\r\n    /**\r\n     * @return factoryAddress the address of the Contract which initialized this EthItem\r\n     */\r\n    function factory() external view returns(address factoryAddress);\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\introspection\\ERC165.sol\r\n\r\n// SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts may inherit from this and call {_registerInterface} to declare\r\n * their support of an interface.\r\n */\r\ncontract ERC165 is IERC165 {\r\n    /*\r\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\r\n\r\n    /**\r\n     * @dev Mapping of interface ids to whether or not it's supported.\r\n     */\r\n    mapping(bytes4 => bool) private _supportedInterfaces;\r\n\r\n    constructor () internal {\r\n        // Derived contracts need only register support for their own interfaces,\r\n        // we register support for ERC165 itself here\r\n        _registerInterface(_INTERFACE_ID_ERC165);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     *\r\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\r\n        return _supportedInterfaces[interfaceId];\r\n    }\r\n\r\n    /**\r\n     * @dev Registers the contract as an implementer of the interface defined by\r\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\r\n     * registering its interface id is not required.\r\n     *\r\n     * See {IERC165-supportsInterface}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\r\n     */\r\n    function _registerInterface(bytes4 interfaceId) internal virtual {\r\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\r\n        _supportedInterfaces[interfaceId] = true;\r\n    }\r\n}\r\n\r\n// File: orchestrator\\EthItemOrchestratorDependantElement.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\nabstract contract EthItemOrchestratorDependantElement is IEthItemOrchestratorDependantElement, ERC165 {\r\n\r\n    string internal constant ETHITEM_ORCHESTRATOR_AUTHORIZED_KEY_PREFIX = \"ehtitem.orchestrator.authorized\";\r\n\r\n    address internal _doubleProxy;\r\n\r\n    constructor(address doubleProxy) public {\r\n        _doubleProxy = doubleProxy;\r\n        _registerInterfaces();\r\n        _registerSpecificInterfaces();\r\n    }\r\n\r\n    function _registerInterfaces() internal {\r\n        _registerInterface(this.setDoubleProxy.selector);\r\n    }\r\n\r\n    function _registerSpecificInterfaces() internal virtual;\r\n\r\n    modifier byOrchestrator virtual {\r\n        require(isAuthorizedOrchestrator(msg.sender), \"Unauthorized Action!\");\r\n        _;\r\n    }\r\n\r\n    function doubleProxy() public view override returns(address) {\r\n        return _doubleProxy;\r\n    }\r\n\r\n    function setDoubleProxy(address newDoubleProxy) public override byOrchestrator {\r\n        _doubleProxy = newDoubleProxy;\r\n    }\r\n\r\n    function isAuthorizedOrchestrator(address operator) public view override returns(bool) {\r\n        return IStateHolder(IMVDProxy(IDoubleProxy(_doubleProxy).proxy()).getStateHolderAddress()).getBool(_toStateHolderKey(ETHITEM_ORCHESTRATOR_AUTHORIZED_KEY_PREFIX, _toString(operator)));\r\n    }\r\n\r\n    function _toStateHolderKey(string memory a, string memory b) internal pure returns(string memory) {\r\n        return _toLowerCase(string(abi.encodePacked(a, \".\", b)));\r\n    }\r\n\r\n    function _toString(address _addr) internal pure returns(string memory) {\r\n        bytes32 value = bytes32(uint256(_addr));\r\n        bytes memory alphabet = \"0123456789abcdef\";\r\n\r\n        bytes memory str = new bytes(42);\r\n        str[0] = '0';\r\n        str[1] = 'x';\r\n        for (uint i = 0; i < 20; i++) {\r\n            str[2+i*2] = alphabet[uint(uint8(value[i + 12] >> 4))];\r\n            str[3+i*2] = alphabet[uint(uint8(value[i + 12] & 0x0f))];\r\n        }\r\n        return string(str);\r\n    }\r\n\r\n    function _toLowerCase(string memory str) internal pure returns(string memory) {\r\n        bytes memory bStr = bytes(str);\r\n        for (uint i = 0; i < bStr.length; i++) {\r\n            bStr[i] = bStr[i] >= 0x41 && bStr[i] <= 0x5A ? bytes1(uint8(bStr[i]) + 0x20) : bStr[i];\r\n        }\r\n        return string(bStr);\r\n    }\r\n}\r\n\r\ninterface IDoubleProxy {\r\n    function proxy() external view returns (address);\r\n}\r\n\r\ninterface IMVDProxy {\r\n    function getMVDFunctionalitiesManagerAddress() external view returns(address);\r\n    function getMVDWalletAddress() external view returns (address);\r\n    function getStateHolderAddress() external view returns(address);\r\n}\r\n\r\ninterface IMVDFunctionalitiesManager {\r\n    function isAuthorizedFunctionality(address functionality) external view returns(bool);\r\n}\r\n\r\ninterface IStateHolder {\r\n    function getBool(string calldata varName) external view returns (bool);\r\n    function getUint256(string calldata name) external view returns(uint256);\r\n    function getAddress(string calldata name) external view returns(address);\r\n    function clear(string calldata varName) external returns(string memory oldDataType, bytes memory oldVal);\r\n}\r\n\r\n// File: factory\\EthItemFactory.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\ncontract EthItemFactory is IEthItemFactory, EthItemOrchestratorDependantElement {\r\n\r\n    uint256[] private _mintFeePercentage;\r\n    uint256[] private _burnFeePercentage;\r\n    address private _ethItemInteroperableInterfaceModelAddress;\r\n    address private _nativeModelAddress;\r\n    address private _erc1155WrapperModelAddress;\r\n    address private _erc721WrapperModelAddress;\r\n    address private _erc20WrapperModelAddress;\r\n\r\n    constructor(\r\n        address doubleProxy,\r\n        address ethItemInteroperableInterfaceModelAddress,\r\n        address nativeModelAddress,\r\n        address erc1155WrapperModelAddress,\r\n        address erc721WrapperModelAddress,\r\n        address erc20WrapperModelAddress,\r\n        uint256 mintFeePercentageNumerator, uint256 mintFeePercentageDenominator,\r\n        uint256 burnFeePercentageNumerator, uint256 burnFeePercentageDenominator) public EthItemOrchestratorDependantElement(doubleProxy) {\r\n        _ethItemInteroperableInterfaceModelAddress = ethItemInteroperableInterfaceModelAddress;\r\n        _nativeModelAddress = nativeModelAddress;\r\n        _erc1155WrapperModelAddress = erc1155WrapperModelAddress;\r\n        _erc721WrapperModelAddress = erc721WrapperModelAddress;\r\n        _erc20WrapperModelAddress = erc20WrapperModelAddress;\r\n        _mintFeePercentage = new uint256[](2);\r\n        _mintFeePercentage[0] = mintFeePercentageNumerator;\r\n        _mintFeePercentage[1] = mintFeePercentageDenominator;\r\n        _burnFeePercentage = new uint256[](2);\r\n        _burnFeePercentage[0] = burnFeePercentageNumerator;\r\n        _burnFeePercentage[1] = burnFeePercentageDenominator;\r\n    }\r\n\r\n    function _registerSpecificInterfaces() internal virtual override {\r\n        _registerInterface(this.setEthItemInteroperableInterfaceModel.selector);\r\n        _registerInterface(this.setNativeModel.selector);\r\n        _registerInterface(this.setERC1155WrapperModel.selector);\r\n        _registerInterface(this.setERC20WrapperModel.selector);\r\n        _registerInterface(this.setERC721WrapperModel.selector);\r\n        _registerInterface(this.setMintFeePercentage.selector);\r\n        _registerInterface(this.setBurnFeePercentage.selector);\r\n        _registerInterface(this.createNative.selector);\r\n        _registerInterface(this.createWrappedERC1155.selector);\r\n        _registerInterface(this.createWrappedERC20.selector);\r\n        _registerInterface(this.createWrappedERC721.selector);\r\n    }\r\n\r\n    function ethItemInteroperableInterfaceModel() public override view returns (address ethItemInteroperableInterfaceModelAddress, uint256 ethItemInteroperableInterfaceModelVersion) {\r\n        return (_ethItemInteroperableInterfaceModelAddress, IEthItemInteroperableInterface(_ethItemInteroperableInterfaceModelAddress).interoperableInterfaceVersion());\r\n    }\r\n\r\n    function setEthItemInteroperableInterfaceModel(address ethItemInteroperableInterfaceModelAddress) public override byOrchestrator {\r\n        _ethItemInteroperableInterfaceModelAddress = ethItemInteroperableInterfaceModelAddress;\r\n    }\r\n\r\n    function nativeModel() public override view returns (address nativeModelAddress, uint256 nativeModelVersion) {\r\n        return (_nativeModelAddress, IEthItemModelBase(_nativeModelAddress).modelVersion());\r\n    }\r\n\r\n    function setNativeModel(address nativeModelAddress) public override byOrchestrator {\r\n        _nativeModelAddress = nativeModelAddress;\r\n    }\r\n\r\n    function erc1155WrapperModel() public override view returns (address erc1155WrapperModelAddress, uint256 erc1155WrapperModelVersion) {\r\n        return (_erc1155WrapperModelAddress, IEthItemModelBase(_erc1155WrapperModelAddress).modelVersion());\r\n    }\r\n\r\n    function setERC1155WrapperModel(address erc1155WrapperModelAddress) public override byOrchestrator {\r\n        _erc1155WrapperModelAddress = erc1155WrapperModelAddress;\r\n    }\r\n\r\n    function erc20WrapperModel() public override view returns (address erc20WrapperModelAddress, uint256 erc20WrapperModelVersion) {\r\n        return (_erc20WrapperModelAddress, IEthItemModelBase(_erc20WrapperModelAddress).modelVersion());\r\n    }\r\n\r\n    function setERC20WrapperModel(address erc20WrapperModelAddress) public override byOrchestrator {\r\n        _erc20WrapperModelAddress = erc20WrapperModelAddress;\r\n    }\r\n\r\n    function erc721WrapperModel() public override view returns (address erc721WrapperModelAddress, uint256 erc721WrapperModelVersion) {\r\n        return (_erc721WrapperModelAddress, IEthItemModelBase(_erc721WrapperModelAddress).modelVersion());\r\n    }\r\n\r\n    function setERC721WrapperModel(address erc721WrapperModelAddress) public override byOrchestrator {\r\n        _erc721WrapperModelAddress = erc721WrapperModelAddress;\r\n    }\r\n\r\n    function mintFeePercentage() public override view returns (uint256 mintFeePercentageNumerator, uint256 mintFeePercentageDenominator) {\r\n        return (_mintFeePercentage[0], _mintFeePercentage[1]);\r\n    }\r\n\r\n    function setMintFeePercentage(uint256 mintFeePercentageNumerator, uint256 mintFeePercentageDenominator) public override byOrchestrator {\r\n        _mintFeePercentage[0] = mintFeePercentageNumerator;\r\n        _mintFeePercentage[1] = mintFeePercentageDenominator;\r\n    }\r\n\r\n    function calculateMintFee(uint256 amountInDecimals) public override view returns (uint256 mintFee, address dfoWalletAddress) {\r\n        if(_mintFeePercentage[0] == 0 || _mintFeePercentage[1] == 0) {\r\n            return (0, address(0));\r\n        }\r\n        mintFee = ((amountInDecimals * _mintFeePercentage[0]) / _mintFeePercentage[1]);\r\n        require(mintFee > 0, \"Inhexistent mint fee, amount too low.\");\r\n        dfoWalletAddress = IMVDProxy(IDoubleProxy(_doubleProxy).proxy()).getMVDWalletAddress();\r\n    }\r\n\r\n    function burnFeePercentage() public override view returns (uint256 burnFeePercentageNumerator, uint256 burnFeePercentageDenominator) {\r\n        return (_burnFeePercentage[0], _burnFeePercentage[1]);\r\n    }\r\n\r\n    function setBurnFeePercentage(uint256 burnFeePercentageNumerator, uint256 burnFeePercentageDenominator) public override byOrchestrator {\r\n        _burnFeePercentage[0] = burnFeePercentageNumerator;\r\n        _burnFeePercentage[1] = burnFeePercentageDenominator;\r\n    }\r\n\r\n    function calculateBurnFee(uint256 amountInDecimals) public override view returns (uint256 burnFee, address dfoWalletAddress) {\r\n        if(_burnFeePercentage[0] == 0 || _burnFeePercentage[1] == 0) {\r\n            return (0, address(0));\r\n        }\r\n        burnFee = ((amountInDecimals * _burnFeePercentage[0]) / _burnFeePercentage[1]);\r\n        require(burnFee > 0, \"Inhexistent burn fee, amount too low.\");\r\n        dfoWalletAddress = IMVDProxy(IDoubleProxy(_doubleProxy).proxy()).getMVDWalletAddress();\r\n    }\r\n\r\n    function createNative(bytes memory modelInitCallPayload) public override byOrchestrator returns (address newNativeAddress, bytes memory modelInitCallResponse) {\r\n        bool modelInitCallResult = false;\r\n        (modelInitCallResult, modelInitCallResponse) = (newNativeAddress = _clone(_nativeModelAddress)).call(modelInitCallPayload);\r\n        require(modelInitCallResult, \"Model Init call failed\");\r\n        IEthItemModelBase createdToken = IEthItemModelBase(newNativeAddress);\r\n        (, uint256 itemModelVersion) = createdToken.interoperableInterfaceModel();\r\n        uint256 modelVersion = createdToken.modelVersion();\r\n        emit NewNativeCreated(createdToken.mainInterfaceVersion(), itemModelVersion, modelVersion, newNativeAddress);\r\n        emit NewNativeCreated(_nativeModelAddress, modelVersion, newNativeAddress, msg.sender);\r\n    }\r\n\r\n    function createWrappedERC1155(bytes memory modelInitCallPayload) public override byOrchestrator returns (address newERC1155WrapperAddress, bytes memory modelInitCallResponse) {\r\n        bool modelInitCallResult = false;\r\n        (modelInitCallResult, modelInitCallResponse) = (newERC1155WrapperAddress = _clone(_erc1155WrapperModelAddress)).call(modelInitCallPayload);\r\n        require(modelInitCallResult, \"Model Init call failed\");\r\n        IEthItemModelBase createdToken = IEthItemModelBase(newERC1155WrapperAddress);\r\n        (, uint256 itemModelVersion) = createdToken.interoperableInterfaceModel();\r\n        uint256 modelVersion = createdToken.modelVersion();\r\n        emit NewWrappedERC1155Created(createdToken.mainInterfaceVersion(), itemModelVersion, modelVersion, newERC1155WrapperAddress);\r\n        emit NewWrappedERC1155Created(_erc1155WrapperModelAddress, modelVersion, newERC1155WrapperAddress, msg.sender);\r\n    }\r\n\r\n    function createWrappedERC20(bytes memory modelInitCallPayload) public override byOrchestrator returns (address newERC20Address, bytes memory modelInitCallResponse) {\r\n        bool modelInitCallResult = false;\r\n        (modelInitCallResult, modelInitCallResponse) = (newERC20Address = _clone(_erc20WrapperModelAddress)).call(modelInitCallPayload);\r\n        require(modelInitCallResult, \"Model Init call failed\");\r\n        IEthItemModelBase createdToken = IEthItemModelBase(newERC20Address);\r\n        (, uint256 itemModelVersion) = createdToken.interoperableInterfaceModel();\r\n        uint256 modelVersion = createdToken.modelVersion();\r\n        emit NewWrappedERC20Created(createdToken.mainInterfaceVersion(), itemModelVersion, modelVersion, newERC20Address);\r\n        emit NewWrappedERC20Created(_erc20WrapperModelAddress, modelVersion, newERC20Address, msg.sender);\r\n    }\r\n\r\n    function createWrappedERC721(bytes memory modelInitCallPayload) public override byOrchestrator returns (address newERC721Address, bytes memory modelInitCallResponse) {\r\n        bool modelInitCallResult = false;\r\n        (modelInitCallResult, modelInitCallResponse) = (newERC721Address = _clone(_erc721WrapperModelAddress)).call(modelInitCallPayload);\r\n        require(modelInitCallResult, \"Model Init call failed\");\r\n        IEthItemModelBase createdToken = IEthItemModelBase(newERC721Address);\r\n        (, uint256 itemModelVersion) = createdToken.interoperableInterfaceModel();\r\n        uint256 modelVersion = createdToken.modelVersion();\r\n        emit NewWrappedERC721Created(createdToken.mainInterfaceVersion(), itemModelVersion, modelVersion, newERC721Address);\r\n        emit NewWrappedERC721Created(_erc721WrapperModelAddress, modelVersion, newERC721Address, msg.sender);\r\n    }\r\n\r\n    function _clone(address original) internal returns (address copy) {\r\n        assembly {\r\n            mstore(\r\n                0,\r\n                or(\r\n                    0x5880730000000000000000000000000000000000000000803b80938091923cF3,\r\n                    mul(original, 0x1000000000000000000)\r\n                )\r\n            )\r\n            copy := create(0, 0, 32)\r\n            switch extcodesize(copy)\r\n                case 0 {\r\n                    invalid()\r\n                }\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"doubleProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ethItemInteroperableInterfaceModelAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nativeModelAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"erc1155WrapperModelAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"erc721WrapperModelAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"erc20WrapperModelAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mintFeePercentageNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintFeePercentageDenominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFeePercentageNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFeePercentageDenominator\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"standardVersion\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"wrappedItemModelVersion\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"modelVersion\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenCreated\",\"type\":\"address\"}],\"name\":\"NewNativeCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"model\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"modelVersion\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenCreated\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"NewNativeCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"standardVersion\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"wrappedItemModelVersion\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"modelVersion\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenCreated\",\"type\":\"address\"}],\"name\":\"NewWrappedERC1155Created\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"model\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"modelVersion\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenCreated\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"NewWrappedERC1155Created\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"standardVersion\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"wrappedItemModelVersion\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"modelVersion\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenCreated\",\"type\":\"address\"}],\"name\":\"NewWrappedERC20Created\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"model\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"modelVersion\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenCreated\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"NewWrappedERC20Created\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"standardVersion\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"wrappedItemModelVersion\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"modelVersion\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenCreated\",\"type\":\"address\"}],\"name\":\"NewWrappedERC721Created\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"model\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"modelVersion\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenCreated\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"NewWrappedERC721Created\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"burnFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"burnFeePercentageNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFeePercentageDenominator\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountInDecimals\",\"type\":\"uint256\"}],\"name\":\"calculateBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dfoWalletAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountInDecimals\",\"type\":\"uint256\"}],\"name\":\"calculateMintFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mintFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dfoWalletAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"modelInitCallPayload\",\"type\":\"bytes\"}],\"name\":\"createNative\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newNativeAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"modelInitCallResponse\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"modelInitCallPayload\",\"type\":\"bytes\"}],\"name\":\"createWrappedERC1155\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newERC1155WrapperAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"modelInitCallResponse\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"modelInitCallPayload\",\"type\":\"bytes\"}],\"name\":\"createWrappedERC20\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newERC20Address\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"modelInitCallResponse\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"modelInitCallPayload\",\"type\":\"bytes\"}],\"name\":\"createWrappedERC721\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newERC721Address\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"modelInitCallResponse\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"doubleProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc1155WrapperModel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"erc1155WrapperModelAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"erc1155WrapperModelVersion\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc20WrapperModel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"erc20WrapperModelAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"erc20WrapperModelVersion\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc721WrapperModel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"erc721WrapperModelAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"erc721WrapperModelVersion\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethItemInteroperableInterfaceModel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"ethItemInteroperableInterfaceModelAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ethItemInteroperableInterfaceModelVersion\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isAuthorizedOrchestrator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mintFeePercentageNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintFeePercentageDenominator\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeModel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"nativeModelAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nativeModelVersion\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"burnFeePercentageNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFeePercentageDenominator\",\"type\":\"uint256\"}],\"name\":\"setBurnFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDoubleProxy\",\"type\":\"address\"}],\"name\":\"setDoubleProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc1155WrapperModelAddress\",\"type\":\"address\"}],\"name\":\"setERC1155WrapperModel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20WrapperModelAddress\",\"type\":\"address\"}],\"name\":\"setERC20WrapperModel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc721WrapperModelAddress\",\"type\":\"address\"}],\"name\":\"setERC721WrapperModel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ethItemInteroperableInterfaceModelAddress\",\"type\":\"address\"}],\"name\":\"setEthItemInteroperableInterfaceModel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mintFeePercentageNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintFeePercentageDenominator\",\"type\":\"uint256\"}],\"name\":\"setMintFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nativeModelAddress\",\"type\":\"address\"}],\"name\":\"setNativeModel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"EthItemFactory","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000b451103a905144a0cd9c98ce4b1feeda82b1a7200000000000000000000000002059495b1c70fb3362aa4124c0fb9ad43f018afe000000000000000000000000b97ee368c60cd790338b766b05c31a516106c4b4000000000000000000000000d250ad57f02f6cb21b1eb9fe951eb9db9b6fa905000000000000000000000000e32b9a0b799d895c89fe62da6e76b8a7e678b1ac000000000000000000000000c57938f4de6d51c6405765da4df1d87f9c64f5ee0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://22251b30487fb62001a88e75cc3cee13e22528afc6dc9c43dd3fcb66c3bd4b09"}]}