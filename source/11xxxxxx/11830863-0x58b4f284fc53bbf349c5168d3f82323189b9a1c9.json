{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-FileCopyrightText: Â© 2020 Velox <code@velox.io>\r\n// SPDX-License-Identifier: BSD-3-Clause\r\n\r\npragma solidity >=0.8.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nabstract contract BackingStore {\r\n    address public MAIN_CONTRACT;\r\n    address public UNISWAP_FACTORY_ADDRESS = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\r\n    address public UNISWAP_ROUTER_ADDRESS = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    address public ADMIN_ADDRESS;\r\n}\r\n\r\n/**\r\n  * @title VeloxProxy (Proxy Contract)\r\n  *\r\n  * @dev Call:\r\n  *\r\n  * VeloxProxy.at(VeloxProxy.address).setContract(VeloxSwap.address)\r\n  * VeloxSwap.at(VeloxProxy.address).sellTokenForETH(seller, token, tokenAmount, deadline\r\n  * VeloxSwap.at(VeloxProxy.address).setUniswapRouter(0xbeefc0debeefbeef)\r\n  *\r\n  */\r\ncontract VeloxProxy is BackingStore, Ownable {\r\n\r\n    function setAdminAddress(address _c) public onlyOwner returns (bool succeeded) {\r\n        require(_c != owner(), \"VELOXPROXY_ADMIN_OWNER\");\r\n        ADMIN_ADDRESS = _c;\r\n        return true;\r\n    }\r\n\r\n    // Set main Velox contract address\r\n    function setMainContract(address _c) public onlyOwner returns (bool succeeded) {\r\n        require(_c != address(this), \"VELOXPROXY_CIRCULAR_REFERENCE\");\r\n        require(isContract(_c), \"VELOXPROXY_NOT_CONTRACT\");\r\n        MAIN_CONTRACT = _c;\r\n        return true;\r\n    }\r\n\r\n    // ASM fallback function\r\n    function _fallback () internal {\r\n        address target = MAIN_CONTRACT;\r\n\r\n        assembly {\r\n            // Copy the data sent to the memory address starting free mem position\r\n            let ptr := mload(0x40)\r\n            calldatacopy(ptr, 0, calldatasize())\r\n\r\n            // Proxy the call to the contract address with the provided gas and data\r\n            let result := delegatecall(gas(), target, ptr, calldatasize(), 0, 0)\r\n\r\n            // Copy the data returned by the proxied call to memory\r\n            let size := returndatasize()\r\n            returndatacopy(ptr, 0, size)\r\n\r\n            // Check what the result is, return and revert accordingly\r\n            switch result\r\n            case 0 { revert(ptr, size) }\r\n            case 1 { return(ptr, size) }\r\n        }\r\n    }\r\n\r\n    // ASM fallback function\r\n    fallback () external {\r\n        _fallback();\r\n    }\r\n\r\n    receive () payable external {\r\n        _fallback();\r\n    }\r\n    \r\n    function isContract (address addr) private view returns (bool) {\r\n        uint size;\r\n        assembly { size := extcodesize(addr) }\r\n        return size > 0;\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"ADMIN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAIN_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNISWAP_FACTORY_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNISWAP_ROUTER_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_c\",\"type\":\"address\"}],\"name\":\"setAdminAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"succeeded\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_c\",\"type\":\"address\"}],\"name\":\"setMainContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"succeeded\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"VeloxProxy","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"BSD-3-Clause","Proxy":"0","Implementation":"","SwarmSource":"ipfs://eaac82b764e64667f7be01a96ff0a459f30dbf04b122c1e3919826fecb82f172"}]}