{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/metavault/IController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IController {\\n    function balanceOf(address) external view returns (uint256);\\n    function earn(address, uint256) external;\\n    function investEnabled() external view returns (bool);\\n    function harvestStrategy(address) external;\\n    function strategyTokens(address) external returns (address);\\n    function vaults(address) external view returns (address);\\n    function want(address) external view returns (address);\\n    function withdraw(address, uint256) external;\\n    function withdrawFee(address, uint256) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/metavault/IConverter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// solhint-disable func-name-mixedcase\\n// solhint-disable var-name-mixedcase\\n\\npragma solidity 0.6.12;\\n\\ninterface IConverter {\\n    function token() external returns (address _share);\\n    function convert(\\n        address _input,\\n        address _output,\\n        uint _inputAmount\\n    ) external returns (uint _outputAmount);\\n    function convert_rate(\\n        address _input,\\n        address _output,\\n        uint _inputAmount\\n    ) external view returns (uint _outputAmount);\\n    function convert_stables(\\n        uint[3] calldata amounts\\n    ) external returns (uint _shareAmount); // 0: DAI, 1: USDC, 2: USDT\\n    function calc_token_amount(\\n        uint[3] calldata amounts,\\n        bool deposit\\n    ) external view returns (uint _shareAmount);\\n    function calc_token_amount_withdraw(\\n        uint _shares,\\n        address _output\\n    ) external view returns (uint _outputAmount);\\n    function setStrategy(address _strategy, bool _status) external;\\n}\\n\"\r\n    },\r\n    \"contracts/metavault/IHarvester.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IHarvester {\\n    function addStrategy(address, address, uint256) external;\\n    function removeStrategy(address, address, uint256) external;\\n}\\n\\n\"\r\n    },\r\n    \"contracts/metavault/IMetaVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// solhint-disable func-name-mixedcase\\n// solhint-disable var-name-mixedcase\\n\\npragma solidity 0.6.12;\\n\\ninterface IMetaVault {\\n    function balance() external view returns (uint);\\n    function setController(address _controller) external;\\n    function claimInsurance() external;\\n    function token() external view returns (address);\\n    function available() external view returns (uint);\\n    function withdrawFee(uint _amount) external view returns (uint);\\n    function earn() external;\\n    function calc_token_amount_deposit(uint[3] calldata amounts) external view returns (uint);\\n    function calc_token_amount_withdraw(uint _shares, address _output) external view returns (uint);\\n    function convert_rate(address _input, uint _amount) external view returns (uint);\\n    function deposit(uint _amount, address _input, uint _min_mint_amount, bool _isStake) external;\\n    function harvest(address reserve, uint amount) external;\\n    function withdraw(uint _shares, address _output) external;\\n    function want() external view returns (address);\\n    function getPricePerFullShare() external view returns (uint);\\n}\\n\"\r\n    },\r\n    \"contracts/metavault/IStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IStrategy {\\n    function balanceOf() external view returns (uint256);\\n    function balanceOfPool() external view returns (uint256);\\n    function balanceOfWant() external view returns (uint256);\\n    function deposit() external;\\n    function harvest() external;\\n    function name() external view returns (string memory);\\n    function skim() external;\\n    function want() external view returns (address);\\n    function withdraw(address) external;\\n    function withdraw(uint256) external;\\n    function withdrawAll() external;\\n}\\n\"\r\n    },\r\n    \"contracts/metavault/IVaultManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IVaultManager {\\n    function controllers(address) external view returns (bool);\\n    function getHarvestFeeInfo() external view returns (address, address, uint256, address, uint256, address, uint256);\\n    function governance() external view returns (address);\\n    function harvester() external view returns (address);\\n    function insuranceFee() external view returns (uint256);\\n    function insurancePool() external view returns (address);\\n    function insurancePoolFee() external view returns (uint256);\\n    function stakingPool() external view returns (address);\\n    function stakingPoolShareFee() external view returns (uint256);\\n    function strategist() external view returns (address);\\n    function treasury() external view returns (address);\\n    function treasuryBalance() external view returns (uint256);\\n    function treasuryFee() external view returns (uint256);\\n    function vaults(address) external view returns (bool);\\n    function withdrawalProtectionFee() external view returns (uint256);\\n    function yax() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/metavault/controllers/StrategyControllerV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"../IController.sol\\\";\\nimport \\\"../IConverter.sol\\\";\\nimport \\\"../IHarvester.sol\\\";\\nimport \\\"../IMetaVault.sol\\\";\\nimport \\\"../IStrategy.sol\\\";\\nimport \\\"../IVaultManager.sol\\\";\\n\\n/**\\n * @title StrategyControllerV2\\n * @notice This controller allows multiple strategies to be used\\n * for a single token, and multiple tokens are supported.\\n */\\ncontract StrategyControllerV2 is IController {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    bool public globalInvestEnabled;\\n    uint256 public maxStrategies;\\n    IVaultManager public vaultManager;\\n\\n    struct TokenStrategy {\\n        address[] strategies;\\n        mapping(address => uint256) index;\\n        mapping(address => bool) active;\\n        mapping(address => uint256) caps;\\n    }\\n\\n    // token => (want => converter)\\n    mapping(address => mapping(address => address)) public converters;\\n    // token => TokenStrategy\\n    mapping(address => TokenStrategy) internal tokenStrategies;\\n    // strategy => token\\n    mapping(address => address) public override strategyTokens;\\n    // token => vault\\n    mapping(address => address) public override vaults;\\n    // vault => token\\n    mapping(address => address) public vaultTokens;\\n\\n    /**\\n     * @notice Logged when earn is called for a strategy\\n     */\\n    event Earn(address indexed strategy);\\n\\n    /**\\n     * @notice Logged when harvest is called for a strategy\\n     */\\n    event Harvest(address indexed strategy);\\n\\n    /**\\n     * @notice Logged when insurance is claimed for a vault\\n     */\\n    event InsuranceClaimed(address indexed vault);\\n\\n    /**\\n     * @notice Logged when a converter is set\\n     */\\n    event SetConverter(address input, address output, address converter);\\n\\n    /**\\n     * @notice Logged when a vault manager is set\\n     */\\n    event SetVaultManager(address vaultManager);\\n\\n    /**\\n     * @notice Logged when a strategy is added for a token\\n     */\\n    event StrategyAdded(address indexed token, address indexed strategy, uint256 cap);\\n\\n    /**\\n     * @notice Logged when a strategy is removed for a token\\n     */\\n    event StrategyRemoved(address indexed token, address indexed strategy);\\n\\n    /**\\n     * @notice Logged when strategies are reordered for a token\\n     */\\n    event StrategiesReordered(\\n        address indexed token,\\n        address indexed strategy1,\\n        address indexed strategy2\\n    );\\n\\n    /**\\n     * @param _vaultManager The address of the vaultManager\\n     */\\n    constructor(address _vaultManager) public {\\n        vaultManager = IVaultManager(_vaultManager);\\n        globalInvestEnabled = true;\\n        maxStrategies = 10;\\n    }\\n\\n    /**\\n     * GOVERNANCE-ONLY FUNCTIONS\\n     */\\n\\n    /**\\n     * @notice Adds a strategy for a given token\\n     * @dev Only callable by governance\\n     * @param _token The address of the token\\n     * @param _strategy The address of the strategy\\n     * @param _cap The cap of the strategy\\n     * @param _converter The converter of the strategy (can be zero address)\\n     * @param _canHarvest Flag for whether the strategy can be harvested\\n     * @param _timeout The timeout between harvests\\n     */\\n    function addStrategy(\\n        address _token,\\n        address _strategy,\\n        uint256 _cap,\\n        address _converter,\\n        bool _canHarvest,\\n        uint256 _timeout\\n    ) external onlyGovernance {\\n        // ensure the strategy hasn't been added\\n        require(!tokenStrategies[_token].active[_strategy], \\\"active\\\");\\n        address _want = IStrategy(_strategy).want();\\n        // ensure a converter is added if the strategy's want token is\\n        // different than the want token of the vault\\n        if (_want != IMetaVault(vaults[_token]).want()) {\\n            require(_converter != address(0), \\\"!_converter\\\");\\n            converters[_token][_want] = _converter;\\n            // enable the strategy on the converter\\n            IConverter(_converter).setStrategy(_strategy, true);\\n        }\\n        // get the index of the newly added strategy\\n        uint256 index = tokenStrategies[_token].strategies.length;\\n        // ensure we haven't added too many strategies already\\n        require(index < maxStrategies, \\\"!maxStrategies\\\");\\n        // push the strategy to the array of strategies\\n        tokenStrategies[_token].strategies.push(_strategy);\\n        // set the cap\\n        tokenStrategies[_token].caps[_strategy] = _cap;\\n        // set the index\\n        tokenStrategies[_token].index[_strategy] = index;\\n        // activate the strategy\\n        tokenStrategies[_token].active[_strategy] = true;\\n        // store the reverse mapping\\n        strategyTokens[_strategy] = _token;\\n        // if the strategy should be harvested\\n        if (_canHarvest) {\\n            // add it to the harvester\\n            IHarvester(vaultManager.harvester()).addStrategy(_token, _strategy, _timeout);\\n        }\\n        emit StrategyAdded(_token, _strategy, _cap);\\n    }\\n\\n    /**\\n     * @notice Claims the insurance fund of a vault\\n     * @dev Only callable by governance\\n     * @dev When insurance is claimed by the controller, the insurance fund of\\n     * the vault is zeroed out, increasing the getPricePerFullShare and applying\\n     * the gains to everyone in the vault.\\n     * @param _vault The address of the vault\\n     */\\n    function claimInsurance(address _vault) external onlyGovernance {\\n        IMetaVault(_vault).claimInsurance();\\n        emit InsuranceClaimed(_vault);\\n    }\\n\\n    /**\\n     * @notice Sets the address of the vault manager contract\\n     * @dev Only callable by governance\\n     * @param _vaultManager The address of the vault manager\\n     */\\n    function setVaultManager(address _vaultManager) external onlyGovernance {\\n        vaultManager = IVaultManager(_vaultManager);\\n        emit SetVaultManager(_vaultManager);\\n    }\\n\\n    /**\\n     * (GOVERNANCE|STRATEGIST)-ONLY FUNCTIONS\\n     */\\n\\n    /**\\n     * @notice Withdraws token from a strategy to governance\\n     * @dev Only callable by governance or the strategist\\n     * @param _strategy The address of the strategy\\n     * @param _token The address of the token\\n     */\\n    function inCaseStrategyGetStuck(\\n        address _strategy,\\n        address _token\\n    ) external onlyStrategist {\\n        IStrategy(_strategy).withdraw(_token);\\n        IERC20(_token).safeTransfer(\\n            vaultManager.governance(),\\n            IERC20(_token).balanceOf(address(this))\\n        );\\n    }\\n\\n    /**\\n     * @notice Withdraws token from the controller to governance\\n     * @dev Only callable by governance or the strategist\\n     * @param _token The address of the token\\n     * @param _amount The amount that will be withdrawn\\n     */\\n    function inCaseTokensGetStuck(\\n        address _token,\\n        uint256 _amount\\n    ) external onlyStrategist {\\n        IERC20(_token).safeTransfer(vaultManager.governance(), _amount);\\n    }\\n\\n    /**\\n     * @notice Removes a strategy for a given token\\n     * @dev Only callable by governance or strategist\\n     * @param _token The address of the token\\n     * @param _strategy The address of the strategy\\n     * @param _timeout The timeout between harvests\\n     */\\n    function removeStrategy(\\n        address _token,\\n        address _strategy,\\n        uint256 _timeout\\n    ) external onlyStrategist {\\n        TokenStrategy storage tokenStrategy = tokenStrategies[_token];\\n        // ensure the strategy is already added\\n        require(tokenStrategy.active[_strategy], \\\"!active\\\");\\n        // get the index of the strategy to remove\\n        uint256 index = tokenStrategy.index[_strategy];\\n        // get the index of the last strategy\\n        uint256 tail = tokenStrategy.strategies.length.sub(1);\\n        // get the address of the last strategy\\n        address replace = tokenStrategy.strategies[tail];\\n        // replace the removed strategy with the tail\\n        tokenStrategy.strategies[index] = replace;\\n        // set the new index for the replaced strategy\\n        tokenStrategy.index[replace] = index;\\n        // remove the duplicate replaced strategy\\n        tokenStrategy.strategies.pop();\\n        // remove the strategy's index\\n        delete tokenStrategy.index[_strategy];\\n        // remove the strategy's cap\\n        delete tokenStrategy.caps[_strategy];\\n        // deactivate the strategy\\n        delete tokenStrategy.active[_strategy];\\n        // pull funds from the removed strategy to the vault\\n        IStrategy(_strategy).withdrawAll();\\n        // remove the strategy from the harvester\\n        IHarvester(vaultManager.harvester()).removeStrategy(_token, _strategy, _timeout);\\n        // get the strategy want token\\n        address _want = IStrategy(_strategy).want();\\n        // if a converter is used\\n        if (_want != IMetaVault(vaults[_token]).want()) {\\n            // disable the strategy on the converter\\n            IConverter(converters[_token][_want]).setStrategy(_strategy, false);\\n        }\\n        emit StrategyRemoved(_token, _strategy);\\n    }\\n\\n    /**\\n     * @notice Reorders two strategies for a given token\\n     * @dev Only callable by governance or strategist\\n     * @param _token The address of the token\\n     * @param _strategy1 The address of the first strategy\\n     * @param _strategy2 The address of the second strategy\\n     */\\n    function reorderStrategies(\\n        address _token,\\n        address _strategy1,\\n        address _strategy2\\n    ) external onlyStrategist {\\n        require(_strategy1 != _strategy2, \\\"_strategy1 == _strategy2\\\");\\n        TokenStrategy storage tokenStrategy = tokenStrategies[_token];\\n        // ensure the strategies are already added\\n        require(tokenStrategy.active[_strategy1]\\n             && tokenStrategy.active[_strategy2],\\n             \\\"!active\\\");\\n        // get the indexes of the strategies\\n        uint256 index1 = tokenStrategy.index[_strategy1];\\n        uint256 index2 = tokenStrategy.index[_strategy2];\\n        // set the new addresses at their indexes\\n        tokenStrategy.strategies[index1] = _strategy2;\\n        tokenStrategy.strategies[index2] = _strategy1;\\n        // update indexes\\n        tokenStrategy.index[_strategy1] = index2;\\n        tokenStrategy.index[_strategy2] = index1;\\n        emit StrategiesReordered(_token, _strategy1, _strategy2);\\n    }\\n\\n    /**\\n     * @notice Sets/updates the cap of a strategy for a token\\n     * @dev Only callable by governance or strategist\\n     * @dev If the balance of the strategy is greater than the new cap (except if\\n     * the cap is 0), then withdraw the difference from the strategy to the vault.\\n     * @param _token The address of the token\\n     * @param _strategy The address of the strategy\\n     * @param _cap The new cap of the strategy\\n     */\\n    function setCap(\\n        address _token,\\n        address _strategy,\\n        uint256 _cap\\n    ) external onlyStrategist {\\n        require(tokenStrategies[_token].active[_strategy], \\\"!active\\\");\\n        tokenStrategies[_token].caps[_strategy] = _cap;\\n        uint256 _balance = IStrategy(_strategy).balanceOf();\\n        // send excess funds (over cap) back to the vault\\n        if (_balance > _cap && _cap != 0) {\\n            uint256 _diff = _balance.sub(_cap);\\n            IStrategy(_strategy).withdraw(_diff);\\n        }\\n    }\\n\\n    /**\\n     * @notice Sets/updates the converter for given input and output tokens\\n     * @dev Only callable by governance or strategist\\n     * @param _input The address of the input token\\n     * @param _output The address of the output token\\n     * @param _converter The address of the converter\\n     */\\n    function setConverter(\\n        address _input,\\n        address _output,\\n        address _converter\\n    ) external onlyStrategist {\\n        converters[_input][_output] = _converter;\\n        emit SetConverter(_input, _output, _converter);\\n    }\\n\\n    /**\\n     * @notice Sets/updates the global invest enabled flag\\n     * @dev Only callable by governance or strategist\\n     * @param _investEnabled The new bool of the invest enabled flag\\n     */\\n    function setInvestEnabled(bool _investEnabled) external onlyStrategist {\\n        globalInvestEnabled = _investEnabled;\\n    }\\n\\n    /**\\n     * @notice Sets/updates the maximum number of strategies for a token\\n     * @dev Only callable by governance or strategist\\n     * @param _maxStrategies The new value of the maximum strategies\\n     */\\n    function setMaxStrategies(uint256 _maxStrategies) external onlyStrategist {\\n        require(_maxStrategies > 0, \\\"!_maxStrategies\\\");\\n        maxStrategies = _maxStrategies;\\n    }\\n\\n    /**\\n     * @notice Sets the address of a vault for a given token\\n     * @dev Only callable by governance or strategist\\n     * @param _token The address of the token\\n     * @param _vault The address of the vault\\n     */\\n    function setVault(address _token, address _vault) external onlyStrategist {\\n        require(vaults[_token] == address(0), \\\"vault\\\");\\n        vaults[_token] = _vault;\\n        vaultTokens[_vault] = _token;\\n    }\\n\\n    /**\\n     * @notice Withdraws all funds from a strategy\\n     * @dev Only callable by governance or the strategist\\n     * @param _strategy The address of the strategy\\n     */\\n    function withdrawAll(address _strategy) external onlyStrategist {\\n        // WithdrawAll sends 'want' to 'vault'\\n        IStrategy(_strategy).withdrawAll();\\n    }\\n\\n    /**\\n     * (GOVERNANCE|STRATEGIST|HARVESTER)-ONLY FUNCTIONS\\n     */\\n\\n    /**\\n     * @notice Harvests the specified strategy\\n     * @dev Only callable by governance, the strategist, or the harvester\\n     * @param _strategy The address of the strategy\\n     */\\n    function harvestStrategy(address _strategy) external override onlyHarvester {\\n        IStrategy(_strategy).harvest();\\n        emit Harvest(_strategy);\\n    }\\n\\n    /**\\n     * VAULT-ONLY FUNCTIONS\\n     */\\n\\n    /**\\n     * @notice Invests funds into a strategy\\n     * @dev Only callable by a vault\\n     * @param _token The address of the token\\n     * @param _amount The amount that will be invested\\n     */\\n    function earn(address _token, uint256 _amount) external override onlyVault(_token) {\\n        // get the first strategy that will accept the deposit\\n        address _strategy = getBestStrategyEarn(_token, _amount);\\n        // get the want token of the strategy\\n        address _want = IStrategy(_strategy).want();\\n        // if the depositing token is not what the strategy wants, convert it\\n        // then transfer it to the strategy\\n        if (_want != _token) {\\n            address _converter = converters[_token][_want];\\n            IERC20(_token).safeTransfer(_converter, _amount);\\n            _amount = IConverter(_converter).convert(\\n                _token,\\n                _want,\\n                _amount\\n            );\\n            IERC20(_want).safeTransfer(_strategy, _amount);\\n        } else {\\n            IERC20(_token).safeTransfer(_strategy, _amount);\\n        }\\n        // call the strategy's deposit function\\n        IStrategy(_strategy).deposit();\\n        emit Earn(_strategy);\\n    }\\n\\n    /**\\n     * @notice Withdraws funds from a strategy\\n     * @dev Only callable by a vault\\n     * @dev If the withdraw amount is greater than the first strategy given\\n     * by getBestStrategyWithdraw, this function will loop over strategies\\n     * until the requested amount is met.\\n     * @param _token The address of the token\\n     * @param _amount The amount that will be withdrawn\\n     */\\n    function withdraw(address _token, uint256 _amount) external override onlyVault(_token) {\\n        (\\n            address[] memory _strategies,\\n            uint256[] memory _amounts\\n        ) = getBestStrategyWithdraw(_token, _amount);\\n        for (uint i = 0; i < _strategies.length; i++) {\\n            // getBestStrategyWithdraw will return arrays larger than needed\\n            // if this happens, simply exit the loop\\n            if (_strategies[i] == address(0)) {\\n                break;\\n            }\\n            IStrategy(_strategies[i]).withdraw(_amounts[i]);\\n        }\\n    }\\n\\n    /**\\n     * EXTERNAL VIEW FUNCTIONS\\n     */\\n\\n    /**\\n     * @notice Returns the balance of the sum of all strategies for a given token\\n     * @dev This function would make deposits more expensive for the more strategies\\n     * that are added for a given token\\n     * @param _token The address of the token\\n     */\\n    function balanceOf(address _token) external view override returns (uint256 _balance) {\\n        uint256 k = tokenStrategies[_token].strategies.length;\\n        for (uint i = 0; i < k; i++) {\\n            IStrategy _strategy = IStrategy(tokenStrategies[_token].strategies[i]);\\n            address _want = _strategy.want();\\n            if (_want != _token) {\\n                address _converter = converters[_token][_want];\\n                _balance = _balance.add(IConverter(_converter).convert_rate(\\n                    _want,\\n                    _token,\\n                    _strategy.balanceOf()\\n               ));\\n            } else {\\n                _balance = _balance.add(_strategy.balanceOf());\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the cap of a strategy for a given token\\n     * @param _token The address of the token\\n     * @param _strategy The address of the strategy\\n     */\\n    function getCap(address _token, address _strategy) external view returns (uint256) {\\n        return tokenStrategies[_token].caps[_strategy];\\n    }\\n\\n    /**\\n     * @notice Returns whether investing is enabled for the calling vault\\n     * @dev Should be called by the vault\\n     */\\n    function investEnabled() external view override returns (bool) {\\n        if (globalInvestEnabled) {\\n            return tokenStrategies[vaultTokens[msg.sender]].strategies.length > 0;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @notice Returns all the strategies for a given token\\n     * @param _token The address of the token\\n     */\\n    function strategies(address _token) external view returns (address[] memory) {\\n        return tokenStrategies[_token].strategies;\\n    }\\n\\n    /**\\n     * @notice Returns the want address of a given token\\n     * @dev Since strategies can have different want tokens, default to using the\\n     * want token of the vault for a given token.\\n     * @param _token The address of the token\\n     */\\n    function want(address _token) external view override returns (address) {\\n        return IMetaVault(vaults[_token]).want();\\n    }\\n\\n    /**\\n     * @notice Returns the fee for withdrawing a specified amount\\n     * @param _amount The amount that will be withdrawn\\n     */\\n    function withdrawFee(\\n        address,\\n        uint256 _amount\\n    ) external view override returns (uint256 _fee) {\\n        return vaultManager.withdrawalProtectionFee().mul(_amount).div(10000);\\n    }\\n\\n    /**\\n     * PUBLIC VIEW FUNCTIONS\\n     */\\n\\n    /**\\n     * @notice Returns the best (optimistic) strategy for funds to be sent to with earn\\n     * @param _token The address of the token\\n     * @param _amount The amount that will be invested\\n     */\\n    function getBestStrategyEarn(\\n        address _token,\\n        uint256 _amount\\n    ) public view returns (address _strategy) {\\n        // get the index of the last strategy\\n        uint256 k = tokenStrategies[_token].strategies.length;\\n        // scan backwards from the index to the beginning of strategies\\n        for (uint i = k; i > 0; i--) {\\n            _strategy = tokenStrategies[_token].strategies[i - 1];\\n            // get the new balance if the _amount were added to the strategy\\n            uint256 balance = IStrategy(_strategy).balanceOf().add(_amount);\\n            uint256 cap = tokenStrategies[_token].caps[_strategy];\\n            // stop scanning if the deposit wouldn't go over the cap\\n            if (balance <= cap || cap == 0) {\\n                break;\\n            }\\n        }\\n        // if never broken from the loop, use the last scanned strategy\\n        // this could cause it to go over cap if (for some reason) no strategies\\n        // were added with 0 cap\\n    }\\n\\n    /**\\n     * @notice Returns the best (optimistic) strategy for funds to be withdrawn from\\n     * @dev Since Solidity doesn't support dynamic arrays in memory, the returned arrays\\n     * from this function will always be the same length as the amount of strategies for\\n     * a token. Check that _strategies[i] != address(0) when consuming to know when to\\n     * break out of the loop.\\n     * @param _token The address of the token\\n     * @param _amount The amount that will be withdrawn\\n     */\\n    function getBestStrategyWithdraw(\\n        address _token,\\n        uint256 _amount\\n    ) public view returns (\\n        address[] memory _strategies,\\n        uint256[] memory _amounts\\n    ) {\\n        // get the length of strategies\\n        uint256 k = tokenStrategies[_token].strategies.length;\\n        // initialize fixed-length memory arrays\\n        _strategies = new address[](k);\\n        _amounts = new uint256[](k);\\n        // scan forward from the the beginning of strategies\\n        for (uint i = 0; i < k; i++) {\\n            address _strategy = tokenStrategies[_token].strategies[i];\\n            _strategies[i] = _strategy;\\n            // get the balance of the strategy\\n            uint256 _balance = IStrategy(_strategy).balanceOf();\\n            // if the strategy doesn't have the balance to cover the withdraw\\n            if (_balance < _amount) {\\n                // withdraw what we can and add to the _amounts\\n                _amounts[i] = _balance;\\n                _amount = _amount.sub(_balance);\\n            } else {\\n                // stop scanning if the balance is more than the withdraw amount\\n                _amounts[i] = _amount;\\n                break;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * MODIFIERS\\n     */\\n\\n    modifier onlyGovernance() {\\n        require(msg.sender == vaultManager.governance(), \\\"!governance\\\");\\n        _;\\n    }\\n\\n    modifier onlyStrategist() {\\n        require(msg.sender == vaultManager.strategist()\\n             || msg.sender == vaultManager.governance(),\\n             \\\"!strategist\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyHarvester() {\\n        require(\\n            msg.sender == vaultManager.harvester() ||\\n            msg.sender == vaultManager.strategist() ||\\n            msg.sender == vaultManager.governance(),\\n            \\\"!harvester\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyVault(address _token) {\\n        require(msg.sender == vaults[_token], \\\"!vault\\\");\\n        _;\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"Earn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"InsuranceClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"input\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"output\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"converter\",\"type\":\"address\"}],\"name\":\"SetConverter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vaultManager\",\"type\":\"address\"}],\"name\":\"SetVaultManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy1\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy2\",\"type\":\"address\"}],\"name\":\"StrategiesReordered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"StrategyAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"StrategyRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cap\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_converter\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_canHarvest\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_timeout\",\"type\":\"uint256\"}],\"name\":\"addStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"claimInsurance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"converters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"earn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getBestStrategyEarn\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getBestStrategyWithdraw\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_strategies\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"getCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalInvestEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"harvestStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"inCaseStrategyGetStuck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"inCaseTokensGetStuck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxStrategies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_timeout\",\"type\":\"uint256\"}],\"name\":\"removeStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategy1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategy2\",\"type\":\"address\"}],\"name\":\"reorderStrategies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cap\",\"type\":\"uint256\"}],\"name\":\"setCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_input\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_output\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_converter\",\"type\":\"address\"}],\"name\":\"setConverter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_investEnabled\",\"type\":\"bool\"}],\"name\":\"setInvestEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxStrategies\",\"type\":\"uint256\"}],\"name\":\"setMaxStrategies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultManager\",\"type\":\"address\"}],\"name\":\"setVaultManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"strategies\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"strategyTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultManager\",\"outputs\":[{\"internalType\":\"contract IVaultManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vaultTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vaults\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"want\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"StrategyControllerV2","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000e3d32c20be68e6189a52f60148c850df7a2bb5dd","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}