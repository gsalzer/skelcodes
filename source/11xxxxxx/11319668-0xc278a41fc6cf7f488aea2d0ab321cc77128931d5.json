{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Distributor.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./libraries/math/SafeMath.sol\\\";\\nimport \\\"./libraries/token/IERC20.sol\\\";\\nimport \\\"./libraries/utils/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./interfaces/ILGEToken.sol\\\";\\nimport \\\"./interfaces/IWETH.sol\\\";\\nimport \\\"./interfaces/IXVIX.sol\\\";\\nimport \\\"./interfaces/IFloor.sol\\\";\\nimport \\\"./interfaces/IMinter.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Router.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Factory.sol\\\";\\n\\ncontract Distributor is ReentrancyGuard {\\n    using SafeMath for uint256;\\n\\n    uint256 public constant FLOOR_BASIS_POINTS = 5000;\\n    uint256 public constant BASIS_POINTS_DIVISOR = 10000;\\n\\n    bool public isInitialized;\\n\\n    uint256 public lgeEndTime;\\n    uint256 public lpUnlockTime;\\n    bool public lgeIsActive;\\n    uint256 public ethReceived;\\n\\n    address public xvix;\\n    address public weth;\\n    address public dai;\\n    address public lgeTokenWETH;\\n    address public lgeTokenDAI;\\n    address public floor;\\n    address public minter;\\n    address public router; // uniswap router\\n    address public factory; // uniswap factory\\n    address[] public path;\\n\\n    address public gov;\\n\\n    event Join(address indexed account, uint256 value);\\n    event RemoveLiquidity(address indexed to, address lgeToken, uint256 amountLGEToken);\\n    event EndLGE();\\n\\n    constructor() public {\\n        lgeIsActive = true;\\n        gov = msg.sender;\\n    }\\n\\n    receive() external payable {\\n        assert(msg.sender == weth); // only accept ETH via fallback from the WETH contract\\n    }\\n\\n    function initialize(\\n        address[] memory _addresses,\\n        uint256 _lgeEndTime,\\n        uint256 _lpUnlockTime\\n    ) public nonReentrant {\\n        require(msg.sender == gov, \\\"Distributor: forbidden\\\");\\n        require(!isInitialized, \\\"Distributor: already initialized\\\");\\n        isInitialized = true;\\n\\n        xvix = _addresses[0];\\n        weth = _addresses[1];\\n        dai = _addresses[2];\\n        lgeTokenWETH = _addresses[3];\\n        lgeTokenDAI = _addresses[4];\\n        floor = _addresses[5];\\n        minter = _addresses[6];\\n        router = _addresses[7];\\n        factory = _addresses[8];\\n\\n        require(ILGEToken(lgeTokenWETH).token() == weth, \\\"Distributor: misconfigured lgeTokenWETH\\\");\\n        require(ILGEToken(lgeTokenDAI).token() == dai, \\\"Distributor: misconfigured lgeTokenDAI\\\");\\n\\n        path.push(weth);\\n        path.push(dai);\\n\\n        lgeEndTime = _lgeEndTime;\\n        lpUnlockTime = _lpUnlockTime;\\n    }\\n\\n    function join(address _receiver, uint256 _minDAI, uint256 _deadline) public payable nonReentrant {\\n        require(lgeIsActive, \\\"Distributor: LGE has ended\\\");\\n        require(msg.value > 0, \\\"Distributor: insufficient value\\\");\\n\\n        uint256 floorETH = msg.value.mul(FLOOR_BASIS_POINTS).div(BASIS_POINTS_DIVISOR);\\n        (bool success,) = floor.call{value: floorETH}(\\\"\\\");\\n        require(success, \\\"Distributor: transfer to floor failed\\\");\\n\\n        uint256 toSwap = msg.value.sub(floorETH).div(2);\\n        IUniswapV2Router(router).swapExactETHForTokens{value: toSwap}(\\n            _minDAI,\\n            path,\\n            address(this),\\n            _deadline\\n        );\\n\\n        ILGEToken(lgeTokenWETH).mint(_receiver, msg.value);\\n        ILGEToken(lgeTokenDAI).mint(_receiver, msg.value);\\n        ethReceived = ethReceived.add(msg.value);\\n\\n        emit Join(_receiver, msg.value);\\n    }\\n\\n    function endLGE(uint256 _deadline) public nonReentrant {\\n        require(lgeIsActive, \\\"Distributor: LGE already ended\\\");\\n        if (block.timestamp < lgeEndTime) {\\n            require(msg.sender == gov, \\\"Distributor: forbidden\\\");\\n        }\\n\\n        lgeIsActive = false;\\n\\n        // update the rebase divisor so that it will not suddenly increase\\n        // on the first XVIX transfer\\n        IXVIX(xvix).rebase();\\n\\n        uint256 totalXVIX = IERC20(xvix).balanceOf(address(this));\\n        require(totalXVIX > 0, \\\"Distributor: insufficient XVIX\\\");\\n\\n        uint256 amountXVIX = totalXVIX.div(2);\\n\\n        _addLiquidityETH(_deadline, amountXVIX);\\n        _addLiquidityDAI(_deadline, amountXVIX);\\n\\n        // for simplicity, assume that the minter starts with the exact number of XVIX tokens\\n        // as the Distributor\\n        // 1/2 of the XVIX owned by the Distributor and 1/4 of the ETH received by the Distributor\\n        // is sent to the XVIX / ETH pair\\n        // this would give a price of (total XVIX) / (1/2 ETH received)\\n        //\\n        // initializing the minter with the ethReceived value will let it have a\\n        // starting price of (total XVIX) / (ETH received)\\n        // which would be twice the starting price of the XVIX / ETH Uniswap pair\\n        IMinter(minter).enableMint(ethReceived);\\n\\n        emit EndLGE();\\n    }\\n\\n    function removeLiquidityETH(\\n        uint256 _amountLGEToken,\\n        uint256 _amountXVIXMin,\\n        uint256 _amountETHMin,\\n        address _to,\\n        uint256 _deadline\\n    ) public nonReentrant {\\n        uint256 amountWETH = _removeLiquidity(\\n            lgeTokenWETH,\\n            _amountLGEToken,\\n            _amountXVIXMin,\\n            _amountETHMin,\\n            _to,\\n            _deadline\\n        );\\n\\n        IWETH(weth).withdraw(amountWETH); // convert WETH to ETH\\n\\n        (bool success,) = _to.call{value: amountWETH}(\\\"\\\");\\n        require(success, \\\"Distributor: ETH transfer failed\\\");\\n    }\\n\\n    function removeLiquidityDAI(\\n        uint256 _amountLGEToken,\\n        uint256 _amountXVIXMin,\\n        uint256 _amountTokenMin,\\n        address _to,\\n        uint256 _deadline\\n    ) public nonReentrant {\\n        uint256 amountDAI = _removeLiquidity(\\n            lgeTokenDAI,\\n            _amountLGEToken,\\n            _amountXVIXMin,\\n            _amountTokenMin,\\n            _to,\\n            _deadline\\n        );\\n\\n        IERC20(dai).transfer(_to, amountDAI);\\n    }\\n\\n    function _removeLiquidity(\\n        address _lgeToken,\\n        uint256 _amountLGEToken,\\n        uint256 _amountXVIXMin,\\n        uint256 _amountTokenMin,\\n        address _to,\\n        uint256 _deadline\\n    ) private returns (uint256) {\\n        require(!lgeIsActive, \\\"Distributor: LGE has not ended\\\");\\n        require(block.timestamp >= lpUnlockTime, \\\"Distributor: unlock time not yet reached\\\");\\n\\n        uint256 liquidity = _getLiquidityAmount(_lgeToken, _amountLGEToken);\\n\\n        // burn after calculating liquidity because _getLiquidityAmount uses\\n        // lgeToken.totalSupply to calculate liquidity\\n        ILGEToken(_lgeToken).burn(msg.sender, _amountLGEToken);\\n\\n        if (liquidity == 0) { return 0; }\\n\\n        address pair = _getPair(_lgeToken);\\n        IERC20(pair).approve(router, liquidity);\\n\\n        IUniswapV2Router(router).removeLiquidity(\\n            xvix,\\n            ILGEToken(_lgeToken).token(),\\n            liquidity,\\n            _amountXVIXMin,\\n            _amountTokenMin,\\n            address(this),\\n            _deadline\\n        );\\n\\n        uint256 amountXVIX = IERC20(xvix).balanceOf(address(this));\\n        uint256 amountToken = IERC20(ILGEToken(_lgeToken).token()).balanceOf(address(this));\\n\\n        uint256 refundBasisPoints = _getRefundBasisPoints(_lgeToken, _amountLGEToken, amountToken);\\n        uint256 refundAmount = amountXVIX.mul(refundBasisPoints).div(BASIS_POINTS_DIVISOR);\\n\\n        // burn XVIX to refund the XLGE participant\\n        if (refundAmount > 0) {\\n            IFloor(floor).refund(_to, refundAmount);\\n        }\\n\\n        // permanently remove the remaining XVIX by burning\\n        // and reducing xvix.maxSupply\\n        uint256 toastAmount = amountXVIX.sub(refundAmount);\\n        if (toastAmount > 0) {\\n            IXVIX(xvix).toast(toastAmount);\\n        }\\n\\n        emit RemoveLiquidity(_to, _lgeToken, _amountLGEToken);\\n\\n        return amountToken;\\n    }\\n\\n    function _getRefundBasisPoints(\\n        address _lgeToken,\\n        uint256 _amountLGEToken,\\n        uint256 _amountToken\\n    ) private view returns (uint256) {\\n        // lgeTokenWETH.refBalance: total ETH holdings at endLGE\\n        // lgeTokenWETH.refSupply: totalSupply of lgeTokenWETH at endLGE\\n        // lgeTokenDAI.refBalance: total DAI holdings at endLGE\\n        // lgeTokenDAI.refSupply: totalSupply of lgeTokenDAI at endLGE\\n        uint256 refBalance = ILGEToken(_lgeToken).refBalance();\\n        uint256 refSupply = ILGEToken(_lgeToken).refSupply();\\n        // refAmount is the proportional amount of WETH or DAI\\n        // that the user contributed for the given amountLGEToken\\n        uint256 refAmount = _amountLGEToken.mul(refBalance).div(refSupply);\\n\\n        // if the user contributed 1 ETH, this ETH is split into:\\n        // Floor: 0.5 ETH\\n        // XVIX / ETH LP: 0.25 ETH\\n        // XVIX / DAI LP: 0.25 ETH worth of DAI\\n        // the user would then be issued 1 lgeTokenWETH and 1 lgeTokenDAI\\n        // each lgeToken entitles the user to assets worth ~0.5 ETH\\n        // e.g. 1 lgeTokenWETH entitles to the user to 0.25 ETH from the XVIX / ETH LP\\n        // and XVIX worth 0.25 ETH, redeemable from the Floor\\n        //\\n        // if the user wants to redeem an _amountLGEToken of 0.8 for lgeTokenWETH\\n        // refAmount would be 0.2, 0.8 * 0.25 / 1\\n        // the minExpectedAmount would be 0.4, 0.2 * 2\\n        uint256 minExpectedAmount = refAmount.mul(2);\\n\\n        // amountToken is the amount of WETH / DAI already retrieved from\\n        // removing liquidity\\n        // if the price of XVIX has doubled, the amount of WETH / DAI retrieved\\n        // would be doubled as well, so no refund of XVIX is required\\n        if (_amountToken >= minExpectedAmount) { return 0; }\\n\\n        // if the price of XVIX has not doubled, some refund would be required\\n        // e.g. minExpectedAmount is 0.4 and amountToken is 0.3\\n        // in this case, diff would be 0.1\\n        // and refundBasisPoints would be 5000, 0.1 * 10,000 / 0.2\\n        // so 50% of the XVIX retrieved from removing liquidity would be\\n        // burnt to redeem ETH for the user\\n        uint256 diff = minExpectedAmount.sub(_amountToken);\\n        uint256 refundBasisPoints = diff.mul(BASIS_POINTS_DIVISOR).div(refAmount);\\n\\n        if (refundBasisPoints >= BASIS_POINTS_DIVISOR) {\\n            return BASIS_POINTS_DIVISOR;\\n        }\\n\\n        return refundBasisPoints;\\n    }\\n\\n    function _getLiquidityAmount(address _lgeToken, uint256 _amountLGEToken) private view returns (uint256) {\\n        address pair = _getPair(_lgeToken);\\n        uint256 pairBalance = IERC20(pair).balanceOf(address(this));\\n        uint256 totalSupply = IERC20(_lgeToken).totalSupply();\\n        if (totalSupply == 0) {\\n            return 0;\\n        }\\n        // each lgeToken represents a percentage ownership of the\\n        // liquidity in the XVIX / WETH or XVIX / DAI Uniswap pair\\n        // e.g. if there are 10 lgeTokens and _amountLGEToken is 1\\n        // then the liquidity owned by that 1 token is\\n        // 1 / 10 * (total liquidity owned by this contract)\\n        return pairBalance.mul(_amountLGEToken).div(totalSupply);\\n    }\\n\\n    function _getPair(address _lgeToken) private view returns (address) {\\n        return IUniswapV2Factory(factory).getPair(xvix, ILGEToken(_lgeToken).token());\\n    }\\n\\n    function _addLiquidityETH(uint256 _deadline, uint256 _amountXVIX) private {\\n        uint256 amountETH = address(this).balance;\\n        require(amountETH > 0, \\\"Distributor: insufficient ETH\\\");\\n\\n        IERC20(xvix).approve(router, _amountXVIX);\\n\\n        IUniswapV2Router(router).addLiquidityETH{value: amountETH}(\\n            xvix, // token\\n            _amountXVIX, // amountTokenDesired\\n            0, // amountTokenMin\\n            0, // amountETHMin\\n            address(this), // to\\n            _deadline // deadline\\n        );\\n\\n        ILGEToken(lgeTokenWETH).setRefBalance(amountETH);\\n        uint256 totalSupply = IERC20(lgeTokenWETH).totalSupply();\\n        ILGEToken(lgeTokenWETH).setRefSupply(totalSupply);\\n    }\\n\\n    function _addLiquidityDAI(uint256 _deadline, uint256 _amountXVIX) private {\\n        uint256 amountDAI = IERC20(dai).balanceOf(address(this));\\n        require(amountDAI > 0, \\\"Distributor: insufficient DAI\\\");\\n\\n        IERC20(xvix).approve(router, _amountXVIX);\\n        IERC20(dai).approve(router, amountDAI);\\n\\n        IUniswapV2Router(router).addLiquidity(\\n            xvix, // tokenA\\n            dai, // tokenB\\n            _amountXVIX, // amountADesired\\n            amountDAI, // amountBDesired\\n            0, // amountAMin\\n            0, // amountBMin\\n            address(this), // to\\n            _deadline // deadline\\n        );\\n\\n        ILGEToken(lgeTokenDAI).setRefBalance(amountDAI);\\n        uint256 totalSupply = IERC20(lgeTokenDAI).totalSupply();\\n        ILGEToken(lgeTokenDAI).setRefSupply(totalSupply);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/token/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILGEToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface ILGEToken {\\n    function mint(address account, uint256 amount) external returns (bool);\\n    function burn(address account, uint256 amount) external returns (bool);\\n\\n    function token() external view returns (address);\\n\\n    function refBalance() external view returns (uint256);\\n    function setRefBalance(uint256 balance) external returns (bool);\\n\\n    function refSupply() external view returns (uint256);\\n    function setRefSupply(uint256 supply) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IXVIX.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IXVIX {\\n    function maxSupply() external view returns (uint256);\\n    function mint(address account, uint256 amount) external returns (bool);\\n    function burn(address account, uint256 amount) external returns (bool);\\n    function toast(uint256 amount) external returns (bool);\\n    function rebase() external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFloor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IFloor {\\n    function refund(address receiver, uint256 burnAmount) external returns (uint256);\\n    function capital() external view returns (uint256);\\n    function getMaxMintAmount(uint256 ethAmount) external view returns (uint256);\\n    function getRefundAmount(uint256 _tokenAmount) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMinter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IMinter {\\n    function enableMint(uint256 ethReserve) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV2Router.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IUniswapV2Router {\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"contracts/Floor.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./libraries/math/SafeMath.sol\\\";\\nimport \\\"./libraries/token/IERC20.sol\\\";\\nimport \\\"./libraries/utils/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./interfaces/IFloor.sol\\\";\\nimport \\\"./interfaces/IXVIX.sol\\\";\\n\\n// Floor: accumulates ETH and allows XVIX to be burnt for ETH\\ncontract Floor is IFloor, ReentrancyGuard {\\n    using SafeMath for uint256;\\n\\n    uint256 public constant BASIS_POINTS_DIVISOR = 10000;\\n    uint256 public constant REFUND_BASIS_POINTS = 9000; // 90%\\n\\n    address public immutable xvix;\\n    // manually track capital to guard against reentrancy attacks\\n    uint256 public override capital;\\n\\n    event Refund(address indexed to, uint256 refundAmount, uint256 burnAmount);\\n    event FloorPrice(uint256 capital, uint256 supply);\\n\\n    constructor(address _xvix) public {\\n        xvix = _xvix;\\n    }\\n\\n    receive() external payable nonReentrant {\\n        capital = capital.add(msg.value);\\n    }\\n\\n    // when XVIX is burnt 90% is refunded while 10% of ETH is kept within\\n    // this contract\\n    // users who burn their tokens later will receive a larger amount of ETH\\n    function refund(address _receiver, uint256 _burnAmount) public override nonReentrant returns (uint256) {\\n        uint256 refundAmount = getRefundAmount(_burnAmount);\\n        require(refundAmount > 0, \\\"Floor: refund amount is zero\\\");\\n        capital = capital.sub(refundAmount);\\n\\n        IXVIX(xvix).burn(msg.sender, _burnAmount);\\n\\n        (bool success,) = _receiver.call{value: refundAmount}(\\\"\\\");\\n        require(success, \\\"Floor: transfer to reciever failed\\\");\\n\\n        emit Refund(_receiver, refundAmount, _burnAmount);\\n        emit FloorPrice(capital, IERC20(xvix).totalSupply());\\n\\n        return refundAmount;\\n    }\\n\\n    // if the total supply of XVIX is 1000 and the capital is 200 ETH\\n    // then this would return 5 for an input of 1\\n    // for every 1 ETH, the minter should allow a maximum of 5 XVIX to be minted\\n    // if the minter allows more than 5 XVIX to be minted for 1 ETH, e.g. 10 XVIX,\\n    // then this would result in the floor price decreasing\\n    function getMaxMintAmount(uint256 _ethAmount) public override view returns (uint256) {\\n        if (capital == 0) { return 0; }\\n        uint256 totalSupply = IERC20(xvix).totalSupply();\\n        return _ethAmount.mul(totalSupply).div(capital);\\n    }\\n\\n    function getRefundAmount(uint256 _tokenAmount) public override view returns (uint256) {\\n        uint256 totalSupply = IERC20(xvix).totalSupply();\\n        uint256 amount = capital.mul(_tokenAmount).div(totalSupply);\\n        return amount.mul(REFUND_BASIS_POINTS).div(BASIS_POINTS_DIVISOR);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IDistributor {\\n    function active() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV2Callee.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IUniswapV2Callee {\\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV2ERC20.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IUniswapV2ERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"contracts/LGEToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./libraries/token/IERC20.sol\\\";\\nimport \\\"./libraries/math/SafeMath.sol\\\";\\nimport \\\"./interfaces/ILGEToken.sol\\\";\\n\\ncontract LGEToken is IERC20, ILGEToken {\\n    using SafeMath for uint256;\\n\\n    string public name;\\n    string public symbol;\\n    uint8 public decimals;\\n\\n    uint256 public override totalSupply;\\n\\n    address public distributor;\\n    address public override token;\\n\\n    uint256 public override refBalance;\\n    uint256 public override refSupply;\\n\\n    mapping (address => uint256) public balances;\\n    mapping (address => mapping (address => uint256)) public allowances;\\n\\n    event SetRefBalance(uint256 refBalance);\\n    event SetRefSupply(uint256 refSupply);\\n\\n    modifier onlyDistributor() {\\n        require(msg.sender == distributor, \\\"LGEToken: forbidden\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        address _distributor,\\n        address _token\\n    ) public {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = 18;\\n        distributor = _distributor;\\n        token = _token;\\n    }\\n\\n    function mint(address _account, uint256 _amount) public override onlyDistributor returns (bool) {\\n        _mint(_account, _amount);\\n        return true;\\n    }\\n\\n    function burn(address _account, uint256 _amount) public override onlyDistributor returns (bool) {\\n        _burn(_account, _amount);\\n        return true;\\n    }\\n\\n    function setRefBalance(uint256 _refBalance) public override onlyDistributor returns (bool) {\\n        refBalance = _refBalance;\\n        emit SetRefBalance(_refBalance);\\n        return true;\\n    }\\n\\n    function setRefSupply(uint256 _refSupply) public override onlyDistributor returns (bool) {\\n        refSupply = _refSupply;\\n        emit SetRefSupply(_refSupply);\\n        return true;\\n    }\\n\\n    function balanceOf(address _account) public view override returns (uint256) {\\n        return balances[_account];\\n    }\\n\\n    function transfer(address _recipient, uint256 _amount) public override returns (bool) {\\n        _transfer(msg.sender, _recipient, _amount);\\n        return true;\\n    }\\n\\n    function allowance(address _owner, address _spender) public view override returns (uint256) {\\n        return allowances[_owner][_spender];\\n    }\\n\\n    function approve(address _spender, uint256 _amount) public override returns (bool) {\\n        _approve(msg.sender, _spender, _amount);\\n        return true;\\n    }\\n\\n    function transferFrom(address _sender, address _recipient, uint256 _amount) public override returns (bool) {\\n        uint256 nextAllowance = allowances[_sender][msg.sender].sub(_amount, \\\"LGEToken: transfer amount exceeds allowance\\\");\\n        _approve(_sender, msg.sender, nextAllowance);\\n        _transfer(_sender, _recipient, _amount);\\n        return true;\\n    }\\n\\n    function _transfer(address _sender, address _recipient, uint256 _amount) private {\\n        require(_sender != address(0), \\\"LGEToken: transfer from the zero address\\\");\\n        require(_recipient != address(0), \\\"LGEToken: transfer to the zero address\\\");\\n\\n        balances[_sender] = balances[_sender].sub(_amount, \\\"LGEToken: transfer amount exceeds balance\\\");\\n        balances[_recipient] = balances[_recipient].add(_amount);\\n        emit Transfer(_sender, _recipient, _amount);\\n    }\\n\\n    function _mint(address account, uint256 _amount) private {\\n        require(account != address(0), \\\"LGEToken: mint to the zero address\\\");\\n\\n        balances[account] = balances[account].add(_amount);\\n        totalSupply = totalSupply.add(_amount);\\n        emit Transfer(address(0), account, _amount);\\n    }\\n\\n    function _burn(address _account, uint256 _amount) private {\\n        require(_account != address(0), \\\"LGEToken: burn from the zero address\\\");\\n\\n        balances[_account] = balances[_account].sub(_amount, \\\"LGEToken: burn amount exceeds balance\\\");\\n        totalSupply = totalSupply.sub(_amount);\\n        emit Transfer(_account, address(0), _amount);\\n    }\\n\\n    function _approve(address _owner, address _spender, uint256 _amount) private {\\n        require(_owner != address(0), \\\"LGEToken: approve from the zero address\\\");\\n        require(_spender != address(0), \\\"LGEToken: approve to the zero address\\\");\\n\\n        allowances[_owner][_spender] = _amount;\\n        emit Approval(_owner, _spender, _amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n// a library for performing various math operations\\n\\nlibrary Math {\\n    function min(uint x, uint y) internal pure returns (uint z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/math/UQ112x112.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\n\\n// range: [0, 2**112 - 1]\\n// resolution: 1 / 2**112\\n\\nlibrary UQ112x112 {\\n    uint224 constant Q112 = 2**112;\\n\\n    // encode a uint112 as a UQ112x112\\n    function encode(uint112 y) internal pure returns (uint224 z) {\\n        z = uint224(y) * Q112; // never overflows\\n    }\\n\\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\\n        z = x / uint224(y);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Minter.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./libraries/math/SafeMath.sol\\\";\\nimport \\\"./libraries/token/IERC20.sol\\\";\\nimport \\\"./libraries/utils/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./interfaces/IMinter.sol\\\";\\nimport \\\"./interfaces/IXVIX.sol\\\";\\nimport \\\"./interfaces/IFloor.sol\\\";\\n\\n// Minter: allows XVIX to be minted following a bonding curve\\ncontract Minter is IMinter, ReentrancyGuard {\\n    using SafeMath for uint256;\\n\\n    uint256 public constant BASIS_POINTS_DIVISOR = 10000;\\n\\n    address public immutable xvix;\\n    address public immutable floor;\\n    address public immutable distributor;\\n\\n    uint256 public ethReserve;\\n    bool public active = false;\\n\\n    event Mint(address indexed to, uint256 value);\\n    event FloorPrice(uint256 capital, uint256 supply);\\n\\n    constructor(address _xvix, address _floor, address _distributor) public {\\n        xvix = _xvix;\\n        floor = _floor;\\n        distributor = _distributor;\\n    }\\n\\n    // this is called by the Distributor contract so that\\n    // minting is only allowed after distribution has ended\\n    function enableMint(uint256 _ethReserve) public override nonReentrant {\\n        require(msg.sender == distributor, \\\"Minter: forbidden\\\");\\n        require(_ethReserve != 0, \\\"Minter: insufficient eth reserve\\\");\\n        require(!active, \\\"Minter: already active\\\");\\n\\n        active = true;\\n        ethReserve = _ethReserve;\\n    }\\n\\n    function mint(address _receiver) public payable nonReentrant {\\n        require(active, \\\"Minter: not active\\\");\\n        require(ethReserve > 0, \\\"Minter: insufficient eth reserve\\\");\\n        require(msg.value > 0, \\\"Minter: insufficient value\\\");\\n\\n        uint256 toMint = getMintAmount(msg.value);\\n        require(toMint > 0, \\\"Minter: mint amount is zero\\\");\\n\\n        IXVIX(xvix).mint(_receiver, toMint);\\n        ethReserve = ethReserve.add(msg.value);\\n\\n        (bool success,) = floor.call{value: msg.value}(\\\"\\\");\\n        require(success, \\\"Minter: transfer to floor failed\\\");\\n\\n        emit Mint(_receiver, toMint);\\n        emit FloorPrice(IFloor(floor).capital(), IERC20(xvix).totalSupply());\\n    }\\n\\n    function getMintAmount(uint256 _ethAmount) public view returns (uint256) {\\n        if (!active) { return 0; }\\n        if (IFloor(floor).capital() == 0) { return 0; }\\n\\n        uint256 numerator = _ethAmount.mul(tokenReserve());\\n        uint256 denominator = ethReserve.add(_ethAmount);\\n        uint256 mintable = numerator.div(denominator);\\n\\n        // the maximum tokens that can be minted is capped by the floor price\\n        // of the Floor contract\\n        // this ensures that minting tokens will never reduce the floor price\\n        uint256 max = IFloor(floor).getMaxMintAmount(_ethAmount);\\n\\n        return mintable < max ? mintable : max;\\n    }\\n\\n    function tokenReserve() public view returns (uint256) {\\n        uint256 maxSupply = IXVIX(xvix).maxSupply();\\n        uint256 totalSupply = IERC20(xvix).totalSupply();\\n        return maxSupply.sub(totalSupply);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/mocks/UniswapV2LibraryMock.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport '../interfaces/IUniswapV2Pair.sol';\\n\\nimport \\\"../libraries/math/SafeMath.sol\\\";\\n\\n// Mock the library because the UniswapV2Pair bytecode hash is different for localhost\\nlibrary UniswapV2LibraryMock {\\n    using SafeMath for uint;\\n\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(uint(keccak256(abi.encodePacked(\\n                hex'ff',\\n                factory,\\n                keccak256(abi.encodePacked(token0, token1)),\\n                hex'bf679b48085b196f9d52b03e95c7440ff82bf0e67fff5c19e2da17fd628ba9b2' // init code hash\\n            ))));\\n    }\\n\\n    // fetches and sorts the reserves for a pair\\n    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\\n        (address token0,) = sortTokens(tokenA, tokenB);\\n        (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n    }\\n\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\\n        require(amountA > 0, 'UniswapV2Library: INSUFFICIENT_AMOUNT');\\n        require(reserveA > 0 && reserveB > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\\n        amountB = amountA.mul(reserveB) / reserveA;\\n    }\\n\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\\n        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\\n        uint amountInWithFee = amountIn.mul(997);\\n        uint numerator = amountInWithFee.mul(reserveOut);\\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\\n        amountOut = numerator / denominator;\\n    }\\n\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\\n        require(amountOut > 0, 'UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');\\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\\n        uint numerator = reserveIn.mul(amountOut).mul(1000);\\n        uint denominator = reserveOut.sub(amountOut).mul(997);\\n        amountIn = (numerator / denominator).add(1);\\n    }\\n\\n    // performs chained getAmountOut calculations on any number of pairs\\n    function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {\\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\\n        amounts = new uint[](path.length);\\n        amounts[0] = amountIn;\\n        for (uint i; i < path.length - 1; i++) {\\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n\\n    // performs chained getAmountIn calculations on any number of pairs\\n    function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {\\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\\n        amounts = new uint[](path.length);\\n        amounts[amounts.length - 1] = amountOut;\\n        for (uint i = path.length - 1; i > 0; i--) {\\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Reader.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./libraries/math/SafeMath.sol\\\";\\nimport \\\"./uniswap/UniswapV2Library.sol\\\";\\nimport \\\"./libraries/token/IERC20.sol\\\";\\nimport \\\"./interfaces/ILGEToken.sol\\\";\\nimport \\\"./interfaces/IFloor.sol\\\";\\n\\ncontract Reader {\\n    using SafeMath for uint256;\\n\\n    uint256 public constant BASIS_POINTS_DIVISOR = 10000;\\n\\n    address public immutable factory;\\n    address public immutable xvix;\\n    address public immutable dai;\\n    address public immutable lgeTokenWETH;\\n    address public immutable distributor;\\n    address public immutable floor;\\n\\n    constructor(\\n        address _factory,\\n        address _xvix,\\n        address _dai,\\n        address _lgeTokenWETH,\\n        address _distributor,\\n        address _floor\\n    ) public {\\n        factory = _factory;\\n        xvix = _xvix;\\n        dai = _dai;\\n        lgeTokenWETH = _lgeTokenWETH;\\n        distributor = _distributor;\\n        floor = _floor;\\n    }\\n\\n    function getPoolAmounts(\\n        address _account,\\n        address _token0,\\n        address _token1\\n    ) external view returns (uint256, uint256, uint256, uint256, uint256) {\\n        address pair = UniswapV2Library.pairFor(factory, _token0, _token1);\\n        uint256 supply = IERC20(pair).totalSupply();\\n        if (supply == 0) { return (0, 0, 0, 0, 0); }\\n        uint256 accountBalance = IERC20(pair).balanceOf(_account);\\n        uint256 balance0 = IERC20(_token0).balanceOf(pair);\\n        uint256 balance1 = IERC20(_token1).balanceOf(pair);\\n        uint256 pool0 = balance0.mul(accountBalance).div(supply);\\n        uint256 pool1 = balance1.mul(accountBalance).div(supply);\\n        return (pool0, pool1, balance0, balance1, supply);\\n    }\\n\\n    function getLGEAmounts(address _account) public view returns (uint256, uint256, uint256, uint256) {\\n        uint256 accountBalance = IERC20(lgeTokenWETH).balanceOf(_account);\\n        uint256 supply = IERC20(lgeTokenWETH).totalSupply();\\n        if (supply == 0) { return (0, 0, 0, 0); }\\n\\n        return (\\n            accountBalance,\\n            distributor.balance.mul(accountBalance).div(supply),\\n            IERC20(dai).balanceOf(distributor).mul(accountBalance).div(supply),\\n            IERC20(xvix).balanceOf(distributor).mul(accountBalance).div(supply)\\n        );\\n    }\\n\\n    function getLPAmounts(address _account, address _lgeToken) public view returns (uint256, uint256, uint256, uint256, uint256) {\\n        uint256 supply = IERC20(_lgeToken).totalSupply();\\n        if (supply == 0) { return (0, 0, 0, 0, 0); }\\n\\n        uint256 amountLGEToken = IERC20(_lgeToken).balanceOf(_account);\\n        address pair = UniswapV2Library.pairFor(factory, xvix, ILGEToken(_lgeToken).token());\\n        uint256 amountToken = getLPAmount(_account, pair, _lgeToken, ILGEToken(_lgeToken).token());\\n        uint256 amountXVIX = getLPAmount(_account, pair, _lgeToken, xvix);\\n        uint256 refundBasisPoints = getRefundBasisPoints(_lgeToken, amountLGEToken, amountToken);\\n\\n        return (\\n            amountLGEToken,\\n            amountToken,\\n            amountXVIX,\\n            refundBasisPoints,\\n            IFloor(floor).getRefundAmount(amountXVIX)\\n        );\\n    }\\n\\n    function getLPAmount(address _account, address _pair, address _lgeToken, address _token) public view returns (uint256) {\\n        if (IERC20(_pair).totalSupply() == 0) { return 0; }\\n        uint256 amountLGEToken = IERC20(_lgeToken).balanceOf(_account);\\n        uint256 totalTokenBalance = IERC20(_token).balanceOf(_pair);\\n        uint256 distributorTokenBalance = totalTokenBalance\\n            .mul(IERC20(_pair).balanceOf(distributor))\\n            .div(IERC20(_pair).totalSupply());\\n\\n        return distributorTokenBalance\\n            .mul(amountLGEToken)\\n            .div(IERC20(_lgeToken).totalSupply());\\n    }\\n\\n    function getRefundBasisPoints(address _lgeToken, uint256 _amountLGEToken, uint256 _amountToken) public view returns (uint256) {\\n        uint256 refBalance = ILGEToken(_lgeToken).refBalance();\\n        uint256 refSupply = ILGEToken(_lgeToken).refSupply();\\n        uint256 refAmount = _amountLGEToken.mul(refBalance).div(refSupply);\\n        uint256 minExpectedAmount = refAmount.mul(2);\\n\\n        if (_amountToken >= minExpectedAmount) { return 0; }\\n\\n        uint256 diff = minExpectedAmount.sub(_amountToken);\\n        uint256 refundBasisPoints = diff.mul(BASIS_POINTS_DIVISOR).div(refAmount);\\n\\n        if (refundBasisPoints >= BASIS_POINTS_DIVISOR) {\\n            return BASIS_POINTS_DIVISOR;\\n        }\\n\\n        return refundBasisPoints;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/uniswap/UniswapV2Library.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport '../interfaces/IUniswapV2Pair.sol';\\n\\nimport \\\"../libraries/math/SafeMath.sol\\\";\\n\\nlibrary UniswapV2Library {\\n    using SafeMath for uint;\\n\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(uint(keccak256(abi.encodePacked(\\n                hex'ff',\\n                factory,\\n                keccak256(abi.encodePacked(token0, token1)),\\n                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\\n            ))));\\n    }\\n\\n    // fetches and sorts the reserves for a pair\\n    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\\n        (address token0,) = sortTokens(tokenA, tokenB);\\n        (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n    }\\n\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\\n        require(amountA > 0, 'UniswapV2Library: INSUFFICIENT_AMOUNT');\\n        require(reserveA > 0 && reserveB > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\\n        amountB = amountA.mul(reserveB) / reserveA;\\n    }\\n\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\\n        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\\n        uint amountInWithFee = amountIn.mul(997);\\n        uint numerator = amountInWithFee.mul(reserveOut);\\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\\n        amountOut = numerator / denominator;\\n    }\\n\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\\n        require(amountOut > 0, 'UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');\\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\\n        uint numerator = reserveIn.mul(amountOut).mul(1000);\\n        uint denominator = reserveOut.sub(amountOut).mul(997);\\n        amountIn = (numerator / denominator).add(1);\\n    }\\n\\n    // performs chained getAmountOut calculations on any number of pairs\\n    function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {\\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\\n        amounts = new uint[](path.length);\\n        amounts[0] = amountIn;\\n        for (uint i; i < path.length - 1; i++) {\\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n\\n    // performs chained getAmountIn calculations on any number of pairs\\n    function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {\\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\\n        amounts = new uint[](path.length);\\n        amounts[amounts.length - 1] = amountOut;\\n        for (uint i = path.length - 1; i > 0; i--) {\\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/tokens/DAI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../libraries/token/IERC20.sol\\\";\\nimport \\\"../libraries/math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract DAI is IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor () public {\\n        _name = \\\"Dai Stablecoin\\\";\\n        _symbol = \\\"DAI\\\";\\n        _decimals = 18;\\n    }\\n\\n    function mint(address _account, uint256 _amount) public {\\n        _mint(_account, _amount);\\n    }\\n\\n    function withdraw(uint256 amount) public {\\n        require(_balances[msg.sender] >= amount);\\n        _balances[msg.sender] = _balances[msg.sender].sub(amount);\\n        msg.sender.transfer(amount);\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/tokens/WETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../libraries/token/IERC20.sol\\\";\\nimport \\\"../libraries/math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract WETH is IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor () public {\\n        _name = \\\"Wrapped ETH\\\";\\n        _symbol = \\\"WETH\\\";\\n        _decimals = 18;\\n    }\\n\\n    function deposit() public payable {\\n        _balances[msg.sender] = _balances[msg.sender].add(msg.value);\\n    }\\n\\n    function withdraw(uint256 amount) public {\\n        require(_balances[msg.sender] >= amount);\\n        _balances[msg.sender] = _balances[msg.sender].sub(amount);\\n        msg.sender.transfer(amount);\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/uniswap/TransferHelper.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\n    }\\n\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/uniswap/UniswapV2ERC20.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport '../interfaces/IUniswapV2ERC20.sol';\\nimport '../libraries/math/SafeMath.sol';\\n\\ncontract UniswapV2ERC20 is IUniswapV2ERC20 {\\n    using SafeMath for uint;\\n\\n    string public constant override name = 'Uniswap V2';\\n    string public constant override symbol = 'UNI-V2';\\n    uint8 public constant override decimals = 18;\\n    uint private _totalSupply;\\n    mapping(address => uint) private _balances;\\n    mapping(address => mapping(address => uint)) private _allowances;\\n\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    constructor() public {}\\n\\n    function _mint(address to, uint value) internal {\\n        _totalSupply = _totalSupply.add(value);\\n        _balances[to] = _balances[to].add(value);\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint value) internal {\\n        _balances[from] = _balances[from].sub(value);\\n        _totalSupply = _totalSupply.sub(value);\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    function _approve(address owner, address spender, uint value) private {\\n        _allowances[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function _transfer(address from, address to, uint value) private {\\n        _balances[from] = _balances[from].sub(value);\\n        _balances[to] = _balances[to].add(value);\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address _account) public view override returns (uint256) {\\n        return _balances[_account];\\n    }\\n\\n    function allowance(address _owner, address _spender) public view override returns (uint256) {\\n        return _allowances[_owner][_spender];\\n    }\\n\\n    function approve(address spender, uint value) external virtual override returns (bool) {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    function transfer(address to, uint value) external virtual override returns (bool) {\\n        _transfer(msg.sender, to, value);\\n        return true;\\n    }\\n\\n    function transferFrom(address from, address to, uint value) external virtual override returns (bool) {\\n        if (_allowances[from][msg.sender] != uint(-1)) {\\n            _allowances[from][msg.sender] = _allowances[from][msg.sender].sub(value);\\n        }\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/uniswap/UniswapV2Factory.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport '../interfaces/IUniswapV2Factory.sol';\\nimport './UniswapV2Pair.sol';\\n\\ncontract UniswapV2Factory is IUniswapV2Factory {\\n    address public override feeTo;\\n    address public override feeToSetter;\\n\\n    mapping(address => mapping(address => address)) public override getPair;\\n    address[] public override allPairs;\\n\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    constructor(address _feeToSetter) public {\\n        feeToSetter = _feeToSetter;\\n    }\\n\\n    function allPairsLength() external override view returns (uint) {\\n        return allPairs.length;\\n    }\\n\\n    function createPair(address tokenA, address tokenB) external override returns (address pair) {\\n        require(tokenA != tokenB, 'UniswapV2: IDENTICAL_ADDRESSES');\\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), 'UniswapV2: ZERO_ADDRESS');\\n        require(getPair[token0][token1] == address(0), 'UniswapV2: PAIR_EXISTS'); // single check is sufficient\\n        bytes memory bytecode = type(UniswapV2Pair).creationCode;\\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\\n        assembly {\\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\\n        }\\n        IUniswapV2Pair(pair).initialize(token0, token1);\\n        getPair[token0][token1] = pair;\\n        getPair[token1][token0] = pair; // populate mapping in the reverse direction\\n        allPairs.push(pair);\\n        emit PairCreated(token0, token1, pair, allPairs.length);\\n    }\\n\\n    function setFeeTo(address _feeTo) external override {\\n        require(msg.sender == feeToSetter, 'UniswapV2: FORBIDDEN');\\n        feeTo = _feeTo;\\n    }\\n\\n    function setFeeToSetter(address _feeToSetter) external override {\\n        require(msg.sender == feeToSetter, 'UniswapV2: FORBIDDEN');\\n        feeToSetter = _feeToSetter;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/uniswap/UniswapV2Pair.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport '../libraries/math/Math.sol';\\nimport '../libraries/math/UQ112x112.sol';\\nimport '../libraries/token/IERC20.sol';\\nimport '../interfaces/IUniswapV2Pair.sol';\\nimport '../interfaces/IUniswapV2Factory.sol';\\nimport '../interfaces/IUniswapV2Callee.sol';\\nimport './UniswapV2ERC20.sol';\\n\\ncontract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {\\n    using SafeMath  for uint;\\n    using UQ112x112 for uint224;\\n\\n    uint public constant override MINIMUM_LIQUIDITY = 10**3;\\n    bytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\\n\\n    address public override factory;\\n    address public override token0;\\n    address public override token1;\\n\\n    uint112 private reserve0;           // uses single storage slot, accessible via getReserves\\n    uint112 private reserve1;           // uses single storage slot, accessible via getReserves\\n    uint32  private blockTimestampLast; // uses single storage slot, accessible via getReserves\\n\\n    uint public override price0CumulativeLast;\\n    uint public override price1CumulativeLast;\\n    uint public override kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event\\n\\n    uint private unlocked = 1;\\n    modifier lock() {\\n        require(unlocked == 1, 'UniswapV2: LOCKED');\\n        unlocked = 0;\\n        _;\\n        unlocked = 1;\\n    }\\n\\n    function getReserves() public override view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) {\\n        _reserve0 = reserve0;\\n        _reserve1 = reserve1;\\n        _blockTimestampLast = blockTimestampLast;\\n    }\\n\\n    function _safeTransfer(address token, address to, uint value) private {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'UniswapV2: TRANSFER_FAILED');\\n    }\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    constructor() public {\\n        factory = msg.sender;\\n    }\\n\\n    // called once by the factory at time of deployment\\n    function initialize(address _token0, address _token1) external override {\\n        require(msg.sender == factory, 'UniswapV2: FORBIDDEN'); // sufficient check\\n        token0 = _token0;\\n        token1 = _token1;\\n    }\\n\\n    // update reserves and, on the first call per block, price accumulators\\n    function _update(uint balance0, uint balance1, uint112 _reserve0, uint112 _reserve1) private {\\n        require(balance0 <= uint112(-1) && balance1 <= uint112(-1), 'UniswapV2: OVERFLOW');\\n        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\\n        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\\n            // * never overflows, and + overflow is desired\\n            price0CumulativeLast += uint(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) * timeElapsed;\\n            price1CumulativeLast += uint(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) * timeElapsed;\\n        }\\n        reserve0 = uint112(balance0);\\n        reserve1 = uint112(balance1);\\n        blockTimestampLast = blockTimestamp;\\n        emit Sync(reserve0, reserve1);\\n    }\\n\\n    // if fee is on, mint liquidity equivalent to 1/6th of the growth in sqrt(k)\\n    function _mintFee(uint112 _reserve0, uint112 _reserve1) private returns (bool feeOn) {\\n        address feeTo = IUniswapV2Factory(factory).feeTo();\\n        feeOn = feeTo != address(0);\\n        uint _kLast = kLast; // gas savings\\n        if (feeOn) {\\n            if (_kLast != 0) {\\n                uint rootK = Math.sqrt(uint(_reserve0).mul(_reserve1));\\n                uint rootKLast = Math.sqrt(_kLast);\\n                if (rootK > rootKLast) {\\n                    uint numerator = totalSupply().mul(rootK.sub(rootKLast));\\n                    uint denominator = rootK.mul(5).add(rootKLast);\\n                    uint liquidity = numerator / denominator;\\n                    if (liquidity > 0) _mint(feeTo, liquidity);\\n                }\\n            }\\n        } else if (_kLast != 0) {\\n            kLast = 0;\\n        }\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function mint(address to) external override lock returns (uint liquidity) {\\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\\n        uint balance0 = IERC20(token0).balanceOf(address(this));\\n        uint balance1 = IERC20(token1).balanceOf(address(this));\\n        uint amount0 = balance0.sub(_reserve0);\\n        uint amount1 = balance1.sub(_reserve1);\\n\\n        bool feeOn = _mintFee(_reserve0, _reserve1);\\n        uint _totalSupply = totalSupply(); // gas savings, must be defined here since totalSupply can update in _mintFee\\n        if (_totalSupply == 0) {\\n            liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\\n           _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\\n        } else {\\n            liquidity = Math.min(amount0.mul(_totalSupply) / _reserve0, amount1.mul(_totalSupply) / _reserve1);\\n        }\\n        require(liquidity > 0, 'UniswapV2: INSUFFICIENT_LIQUIDITY_MINTED');\\n        _mint(to, liquidity);\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        if (feeOn) kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\\n        emit Mint(msg.sender, amount0, amount1);\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function burn(address to) external override lock returns (uint amount0, uint amount1) {\\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\\n        address _token0 = token0;                                // gas savings\\n        address _token1 = token1;                                // gas savings\\n        uint balance0 = IERC20(_token0).balanceOf(address(this));\\n        uint balance1 = IERC20(_token1).balanceOf(address(this));\\n        uint liquidity = balanceOf(address(this));\\n\\n        bool feeOn = _mintFee(_reserve0, _reserve1);\\n        uint _totalSupply = totalSupply(); // gas savings, must be defined here since totalSupply can update in _mintFee\\n        amount0 = liquidity.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution\\n        amount1 = liquidity.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution\\n        require(amount0 > 0 && amount1 > 0, 'UniswapV2: INSUFFICIENT_LIQUIDITY_BURNED');\\n        _burn(address(this), liquidity);\\n        _safeTransfer(_token0, to, amount0);\\n        _safeTransfer(_token1, to, amount1);\\n        balance0 = IERC20(_token0).balanceOf(address(this));\\n        balance1 = IERC20(_token1).balanceOf(address(this));\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        if (feeOn) kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\\n        emit Burn(msg.sender, amount0, amount1, to);\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external override lock {\\n        require(amount0Out > 0 || amount1Out > 0, 'UniswapV2: INSUFFICIENT_OUTPUT_AMOUNT');\\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\\n        require(amount0Out < _reserve0 && amount1Out < _reserve1, 'UniswapV2: INSUFFICIENT_LIQUIDITY');\\n\\n        uint balance0;\\n        uint balance1;\\n        { // scope for _token{0,1}, avoids stack too deep errors\\n        address _token0 = token0;\\n        address _token1 = token1;\\n        require(to != _token0 && to != _token1, 'UniswapV2: INVALID_TO');\\n        if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\\n        if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\\n        if (data.length > 0) IUniswapV2Callee(to).uniswapV2Call(msg.sender, amount0Out, amount1Out, data);\\n        balance0 = IERC20(_token0).balanceOf(address(this));\\n        balance1 = IERC20(_token1).balanceOf(address(this));\\n        }\\n        uint amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;\\n        uint amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;\\n        require(amount0In > 0 || amount1In > 0, 'UniswapV2: INSUFFICIENT_INPUT_AMOUNT');\\n        { // scope for reserve{0,1}Adjusted, avoids stack too deep errors\\n        uint balance0Adjusted = balance0.mul(1000).sub(amount0In.mul(3));\\n        uint balance1Adjusted = balance1.mul(1000).sub(amount1In.mul(3));\\n        require(balance0Adjusted.mul(balance1Adjusted) >= uint(_reserve0).mul(_reserve1).mul(1000**2), 'UniswapV2: K');\\n        }\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\\n    }\\n\\n    // force balances to match reserves\\n    function skim(address to) external override lock {\\n        address _token0 = token0; // gas savings\\n        address _token1 = token1; // gas savings\\n        _safeTransfer(_token0, to, IERC20(_token0).balanceOf(address(this)).sub(reserve0));\\n        _safeTransfer(_token1, to, IERC20(_token1).balanceOf(address(this)).sub(reserve1));\\n    }\\n\\n    // force reserves to match balances\\n    function sync() external override lock {\\n        _update(IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), reserve0, reserve1);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/uniswap/UniswapV2Router.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport './TransferHelper.sol';\\nimport '../mocks/UniswapV2LibraryMock.sol';\\n\\nimport '../libraries/math/SafeMath.sol';\\nimport '../libraries/token/IERC20.sol';\\n\\nimport '../interfaces/IWETH.sol';\\nimport '../interfaces/IUniswapV2ERC20.sol';\\nimport '../interfaces/IUniswapV2Router.sol';\\nimport '../interfaces/IUniswapV2Factory.sol';\\n\\ncontract UniswapV2Router is IUniswapV2Router {\\n    using SafeMath for uint;\\n\\n    address public immutable factory;\\n    address public immutable WETH;\\n\\n    modifier ensure(uint deadline) {\\n        require(deadline >= block.timestamp, 'UniswapV2Router: EXPIRED');\\n        _;\\n    }\\n\\n    constructor(address _factory, address _WETH) public {\\n        factory = _factory;\\n        WETH = _WETH;\\n    }\\n\\n    receive() external payable {\\n        assert(msg.sender == WETH); // only accept ETH via fallback from the WETH contract\\n    }\\n\\n    // **** ADD LIQUIDITY ****\\n    function _addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin\\n    ) internal virtual returns (uint amountA, uint amountB) {\\n        // create the pair if it doesn't exist yet\\n        if (IUniswapV2Factory(factory).getPair(tokenA, tokenB) == address(0)) {\\n            IUniswapV2Factory(factory).createPair(tokenA, tokenB);\\n        }\\n        (uint reserveA, uint reserveB) = UniswapV2LibraryMock.getReserves(factory, tokenA, tokenB);\\n        if (reserveA == 0 && reserveB == 0) {\\n            (amountA, amountB) = (amountADesired, amountBDesired);\\n        } else {\\n            uint amountBOptimal = UniswapV2LibraryMock.quote(amountADesired, reserveA, reserveB);\\n            if (amountBOptimal <= amountBDesired) {\\n                require(amountBOptimal >= amountBMin, 'UniswapV2Router: INSUFFICIENT_B_AMOUNT');\\n                (amountA, amountB) = (amountADesired, amountBOptimal);\\n            } else {\\n                uint amountAOptimal = UniswapV2LibraryMock.quote(amountBDesired, reserveB, reserveA);\\n                assert(amountAOptimal <= amountADesired);\\n                require(amountAOptimal >= amountAMin, 'UniswapV2Router: INSUFFICIENT_A_AMOUNT');\\n                (amountA, amountB) = (amountAOptimal, amountBDesired);\\n            }\\n        }\\n    }\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external virtual override ensure(deadline) returns (uint amountA, uint amountB, uint liquidity) {\\n        (amountA, amountB) = _addLiquidity(tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin);\\n        address pair = UniswapV2LibraryMock.pairFor(factory, tokenA, tokenB);\\n        TransferHelper.safeTransferFrom(tokenA, msg.sender, pair, amountA);\\n        TransferHelper.safeTransferFrom(tokenB, msg.sender, pair, amountB);\\n        liquidity = IUniswapV2Pair(pair).mint(to);\\n    }\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external virtual override payable ensure(deadline) returns (uint amountToken, uint amountETH, uint liquidity) {\\n        (amountToken, amountETH) = _addLiquidity(\\n            token,\\n            WETH,\\n            amountTokenDesired,\\n            msg.value,\\n            amountTokenMin,\\n            amountETHMin\\n        );\\n        address pair = UniswapV2LibraryMock.pairFor(factory, token, WETH);\\n        TransferHelper.safeTransferFrom(token, msg.sender, pair, amountToken);\\n        IWETH(WETH).deposit{value: amountETH}();\\n        assert(IWETH(WETH).transfer(pair, amountETH));\\n        liquidity = IUniswapV2Pair(pair).mint(to);\\n        // refund dust eth, if any\\n        if (msg.value > amountETH) TransferHelper.safeTransferETH(msg.sender, msg.value - amountETH);\\n    }\\n\\n    // **** REMOVE LIQUIDITY ****\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) public virtual override ensure(deadline) returns (uint amountA, uint amountB) {\\n        address pair = UniswapV2LibraryMock.pairFor(factory, tokenA, tokenB);\\n        IUniswapV2ERC20(pair).transferFrom(msg.sender, pair, liquidity); // send liquidity to pair\\n        (uint amount0, uint amount1) = IUniswapV2Pair(pair).burn(to);\\n        (address token0,) = UniswapV2LibraryMock.sortTokens(tokenA, tokenB);\\n        (amountA, amountB) = tokenA == token0 ? (amount0, amount1) : (amount1, amount0);\\n        require(amountA >= amountAMin, 'UniswapV2Router: INSUFFICIENT_A_AMOUNT');\\n        require(amountB >= amountBMin, 'UniswapV2Router: INSUFFICIENT_B_AMOUNT');\\n    }\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) public virtual override ensure(deadline) returns (uint amountToken, uint amountETH) {\\n        (amountToken, amountETH) = removeLiquidity(\\n            token,\\n            WETH,\\n            liquidity,\\n            amountTokenMin,\\n            amountETHMin,\\n            address(this),\\n            deadline\\n        );\\n        TransferHelper.safeTransfer(token, to, amountToken);\\n        IWETH(WETH).withdraw(amountETH);\\n        TransferHelper.safeTransferETH(to, amountETH);\\n    }\\n\\n    // **** REMOVE LIQUIDITY (supporting fee-on-transfer tokens) ****\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) public virtual ensure(deadline) returns (uint amountETH) {\\n        (, amountETH) = removeLiquidity(\\n            token,\\n            WETH,\\n            liquidity,\\n            amountTokenMin,\\n            amountETHMin,\\n            address(this),\\n            deadline\\n        );\\n        TransferHelper.safeTransfer(token, to, IERC20(token).balanceOf(address(this)));\\n        IWETH(WETH).withdraw(amountETH);\\n        TransferHelper.safeTransferETH(to, amountETH);\\n    }\\n\\n    // **** SWAP ****\\n    // requires the initial amount to have already been sent to the first pair\\n    function _swap(uint[] memory amounts, address[] memory path, address _to) internal virtual {\\n        for (uint i; i < path.length - 1; i++) {\\n            (address input, address output) = (path[i], path[i + 1]);\\n            (address token0,) = UniswapV2LibraryMock.sortTokens(input, output);\\n            uint amountOut = amounts[i + 1];\\n            (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOut) : (amountOut, uint(0));\\n            address to = i < path.length - 2 ? UniswapV2LibraryMock.pairFor(factory, output, path[i + 2]) : _to;\\n            IUniswapV2Pair(UniswapV2LibraryMock.pairFor(factory, input, output)).swap(\\n                amount0Out, amount1Out, to, new bytes(0)\\n            );\\n        }\\n    }\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external virtual ensure(deadline) returns (uint[] memory amounts) {\\n        amounts = UniswapV2LibraryMock.getAmountsOut(factory, amountIn, path);\\n        require(amounts[amounts.length - 1] >= amountOutMin, 'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT');\\n        TransferHelper.safeTransferFrom(\\n            path[0], msg.sender, UniswapV2LibraryMock.pairFor(factory, path[0], path[1]), amounts[0]\\n        );\\n        _swap(amounts, path, to);\\n    }\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external virtual ensure(deadline) returns (uint[] memory amounts) {\\n        amounts = UniswapV2LibraryMock.getAmountsIn(factory, amountOut, path);\\n        require(amounts[0] <= amountInMax, 'UniswapV2Router: EXCESSIVE_INPUT_AMOUNT');\\n        TransferHelper.safeTransferFrom(\\n            path[0], msg.sender, UniswapV2LibraryMock.pairFor(factory, path[0], path[1]), amounts[0]\\n        );\\n        _swap(amounts, path, to);\\n    }\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        virtual\\n        override\\n        payable\\n        ensure(deadline)\\n        returns (uint[] memory amounts)\\n    {\\n        require(path[0] == WETH, 'UniswapV2Router: INVALID_PATH');\\n        amounts = UniswapV2LibraryMock.getAmountsOut(factory, msg.value, path);\\n        require(amounts[amounts.length - 1] >= amountOutMin, 'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT');\\n        IWETH(WETH).deposit{value: amounts[0]}();\\n        assert(IWETH(WETH).transfer(UniswapV2LibraryMock.pairFor(factory, path[0], path[1]), amounts[0]));\\n        _swap(amounts, path, to);\\n    }\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        virtual\\n        ensure(deadline)\\n        returns (uint[] memory amounts)\\n    {\\n        require(path[path.length - 1] == WETH, 'UniswapV2Router: INVALID_PATH');\\n        amounts = UniswapV2LibraryMock.getAmountsIn(factory, amountOut, path);\\n        require(amounts[0] <= amountInMax, 'UniswapV2Router: EXCESSIVE_INPUT_AMOUNT');\\n        TransferHelper.safeTransferFrom(\\n            path[0], msg.sender, UniswapV2LibraryMock.pairFor(factory, path[0], path[1]), amounts[0]\\n        );\\n        _swap(amounts, path, address(this));\\n        IWETH(WETH).withdraw(amounts[amounts.length - 1]);\\n        TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);\\n    }\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        virtual\\n        ensure(deadline)\\n        returns (uint[] memory amounts)\\n    {\\n        require(path[path.length - 1] == WETH, 'UniswapV2Router: INVALID_PATH');\\n        amounts = UniswapV2LibraryMock.getAmountsOut(factory, amountIn, path);\\n        require(amounts[amounts.length - 1] >= amountOutMin, 'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT');\\n        TransferHelper.safeTransferFrom(\\n            path[0], msg.sender, UniswapV2LibraryMock.pairFor(factory, path[0], path[1]), amounts[0]\\n        );\\n        _swap(amounts, path, address(this));\\n        IWETH(WETH).withdraw(amounts[amounts.length - 1]);\\n        TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);\\n    }\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        virtual\\n        override\\n        payable\\n        ensure(deadline)\\n        returns (uint[] memory amounts)\\n    {\\n        require(path[0] == WETH, 'UniswapV2Router: INVALID_PATH');\\n        amounts = UniswapV2LibraryMock.getAmountsIn(factory, amountOut, path);\\n        require(amounts[0] <= msg.value, 'UniswapV2Router: EXCESSIVE_INPUT_AMOUNT');\\n        IWETH(WETH).deposit{value: amounts[0]}();\\n        assert(IWETH(WETH).transfer(UniswapV2LibraryMock.pairFor(factory, path[0], path[1]), amounts[0]));\\n        _swap(amounts, path, to);\\n        // refund dust eth, if any\\n        if (msg.value > amounts[0]) TransferHelper.safeTransferETH(msg.sender, msg.value - amounts[0]);\\n    }\\n\\n    // **** SWAP (supporting fee-on-transfer tokens) ****\\n    // requires the initial amount to have already been sent to the first pair\\n    function _swapSupportingFeeOnTransferTokens(address[] memory path, address _to) internal virtual {\\n        for (uint i; i < path.length - 1; i++) {\\n            (address input, address output) = (path[i], path[i + 1]);\\n            (address token0,) = UniswapV2LibraryMock.sortTokens(input, output);\\n            IUniswapV2Pair pair = IUniswapV2Pair(UniswapV2LibraryMock.pairFor(factory, input, output));\\n            uint amountInput;\\n            uint amountOutput;\\n            { // scope to avoid stack too deep errors\\n            (uint reserve0, uint reserve1,) = pair.getReserves();\\n            (uint reserveInput, uint reserveOutput) = input == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n            amountInput = IERC20(input).balanceOf(address(pair)).sub(reserveInput);\\n            amountOutput = UniswapV2LibraryMock.getAmountOut(amountInput, reserveInput, reserveOutput);\\n            }\\n            (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOutput) : (amountOutput, uint(0));\\n            address to = i < path.length - 2 ? UniswapV2LibraryMock.pairFor(factory, output, path[i + 2]) : _to;\\n            pair.swap(amount0Out, amount1Out, to, new bytes(0));\\n        }\\n    }\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external virtual ensure(deadline) {\\n        TransferHelper.safeTransferFrom(\\n            path[0], msg.sender, UniswapV2LibraryMock.pairFor(factory, path[0], path[1]), amountIn\\n        );\\n        uint balanceBefore = IERC20(path[path.length - 1]).balanceOf(to);\\n        _swapSupportingFeeOnTransferTokens(path, to);\\n        require(\\n            IERC20(path[path.length - 1]).balanceOf(to).sub(balanceBefore) >= amountOutMin,\\n            'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT'\\n        );\\n    }\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    )\\n        external\\n        virtual\\n        payable\\n        ensure(deadline)\\n    {\\n        require(path[0] == WETH, 'UniswapV2Router: INVALID_PATH');\\n        uint amountIn = msg.value;\\n        IWETH(WETH).deposit{value: amountIn}();\\n        assert(IWETH(WETH).transfer(UniswapV2LibraryMock.pairFor(factory, path[0], path[1]), amountIn));\\n        uint balanceBefore = IERC20(path[path.length - 1]).balanceOf(to);\\n        _swapSupportingFeeOnTransferTokens(path, to);\\n        require(\\n            IERC20(path[path.length - 1]).balanceOf(to).sub(balanceBefore) >= amountOutMin,\\n            'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT'\\n        );\\n    }\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    )\\n        external\\n        virtual\\n        ensure(deadline)\\n    {\\n        require(path[path.length - 1] == WETH, 'UniswapV2Router: INVALID_PATH');\\n        TransferHelper.safeTransferFrom(\\n            path[0], msg.sender, UniswapV2LibraryMock.pairFor(factory, path[0], path[1]), amountIn\\n        );\\n        _swapSupportingFeeOnTransferTokens(path, address(this));\\n        uint amountOut = IERC20(WETH).balanceOf(address(this));\\n        require(amountOut >= amountOutMin, 'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT');\\n        IWETH(WETH).withdraw(amountOut);\\n        TransferHelper.safeTransferETH(to, amountOut);\\n    }\\n\\n    // **** LIBRARY FUNCTIONS ****\\n    function quote(uint amountA, uint reserveA, uint reserveB) public pure virtual returns (uint amountB) {\\n        return UniswapV2LibraryMock.quote(amountA, reserveA, reserveB);\\n    }\\n\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut)\\n        public\\n        pure\\n        virtual\\n        returns (uint amountOut)\\n    {\\n        return UniswapV2LibraryMock.getAmountOut(amountIn, reserveIn, reserveOut);\\n    }\\n\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut)\\n        public\\n        pure\\n        virtual\\n        returns (uint amountIn)\\n    {\\n        return UniswapV2LibraryMock.getAmountIn(amountOut, reserveIn, reserveOut);\\n    }\\n\\n    function getAmountsOut(uint amountIn, address[] memory path)\\n        public\\n        view\\n        virtual\\n        returns (uint[] memory amounts)\\n    {\\n        return UniswapV2LibraryMock.getAmountsOut(factory, amountIn, path);\\n    }\\n\\n    function getAmountsIn(uint amountOut, address[] memory path)\\n        public\\n        view\\n        virtual\\n        returns (uint[] memory amounts)\\n    {\\n        return UniswapV2LibraryMock.getAmountsIn(factory, amountOut, path);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/XVIX.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./libraries/math/SafeMath.sol\\\";\\nimport \\\"./libraries/token/IERC20.sol\\\";\\n\\nimport \\\"./interfaces/IXVIX.sol\\\";\\nimport \\\"./interfaces/IFloor.sol\\\";\\n\\n\\ncontract XVIX is IERC20, IXVIX {\\n    using SafeMath for uint256;\\n\\n    struct TransferConfig {\\n        bool active;\\n        uint256 senderBurnBasisPoints;\\n        uint256 senderFundBasisPoints;\\n        uint256 receiverBurnBasisPoints;\\n        uint256 receiverFundBasisPoints;\\n    }\\n\\n    uint256 public constant BASIS_POINTS_DIVISOR = 10000;\\n\\n    uint256 public constant MAX_FUND_BASIS_POINTS = 20; // 0.2%\\n    uint256 public constant MAX_BURN_BASIS_POINTS = 500; // 5%\\n\\n    uint256 public constant MIN_REBASE_INTERVAL = 30 minutes;\\n    uint256 public constant MAX_REBASE_INTERVAL = 1 weeks;\\n    // cap the max intervals per rebase to avoid uint overflow errors\\n    uint256 public constant MAX_INTERVALS_PER_REBASE = 10;\\n    uint256 public constant MAX_REBASE_BASIS_POINTS = 500; // 5%\\n\\n    // cap the normalDivisor to avoid uint overflow errors\\n    // the normalDivisor will be reached about 20 years after the first rebase\\n    uint256 public constant MAX_NORMAL_DIVISOR = 10**23;\\n    uint256 public constant SAFE_DIVISOR = 10**8;\\n\\n    string public constant name = \\\"XVIX\\\";\\n    string public constant symbol = \\\"XVIX\\\";\\n    uint8 public constant decimals = 18;\\n\\n    string public website = \\\"https://xvix.finance/\\\";\\n\\n    address public gov;\\n    address public minter;\\n    address public floor;\\n    address public distributor;\\n    address public fund;\\n\\n    uint256 public _normalSupply;\\n    uint256 public _safeSupply;\\n    uint256 public override maxSupply;\\n\\n    uint256 public normalDivisor = 10**8;\\n    uint256 public rebaseInterval = 1 hours;\\n    uint256 public rebaseBasisPoints = 2; // 0.02%\\n    uint256 public nextRebaseTime = 0;\\n\\n    uint256 public defaultSenderBurnBasisPoints = 0;\\n    uint256 public defaultSenderFundBasisPoints = 0;\\n    uint256 public defaultReceiverBurnBasisPoints = 43; // 0.43%\\n    uint256 public defaultReceiverFundBasisPoints = 7; // 0.07%\\n\\n    uint256 public govHandoverTime;\\n\\n    mapping (address => uint256) public balances;\\n    mapping (address => mapping (address => uint256)) public allowances;\\n\\n    // msg.sender => transfer config\\n    mapping (address => TransferConfig) public transferConfigs;\\n\\n    // balances in safe addresses do not get rebased\\n    mapping (address => bool) public safes;\\n\\n    event Toast(address indexed account, uint256 value, uint256 maxSupply);\\n    event FloorPrice(uint256 capital, uint256 supply);\\n    event Rebase(uint256 normalDivisor, uint256 nextRebaseTime);\\n    event GovChange(address gov);\\n    event CreateSafe(address safe, uint256 balance);\\n    event DestroySafe(address safe, uint256 balance);\\n    event RebaseConfigChange(uint256 rebaseInterval, uint256 rebaseBasisPoints);\\n    event DefaultTransferConfigChange(\\n        uint256 senderBasisPoints,\\n        uint256 senderFundBasisPoints,\\n        uint256 receiverBurnBasisPoints,\\n        uint256 receiverFundBasisPoints\\n    );\\n    event SetTransferConfig(\\n        address indexed msgSender,\\n        uint256 senderBasisPoints,\\n        uint256 senderFundBasisPoints,\\n        uint256 receiverBurnBasisPoints,\\n        uint256 receiverFundBasisPoints\\n    );\\n    event ClearTransferConfig(address indexed msgSender);\\n\\n    modifier onlyGov() {\\n        require(msg.sender == gov, \\\"XVIX: forbidden\\\");\\n        _;\\n    }\\n\\n    // the govHandoverTime should be set to a time after XLGE participants can\\n    // withdraw their funds\\n    modifier onlyAfterHandover() {\\n        require(block.timestamp > govHandoverTime, \\\"XVIX: handover time has not passed\\\");\\n        _;\\n    }\\n\\n    modifier enforceMaxSupply() {\\n        _;\\n        require(totalSupply() <= maxSupply, \\\"XVIX: max supply exceeded\\\");\\n    }\\n\\n    constructor(uint256 _initialSupply, uint256 _maxSupply, uint256 _govHandoverTime) public {\\n        gov = msg.sender;\\n        govHandoverTime = _govHandoverTime;\\n        maxSupply = _maxSupply;\\n        _mint(msg.sender, _initialSupply);\\n        _setNextRebaseTime();\\n    }\\n\\n    function setGov(address _gov) public onlyGov {\\n        gov = _gov;\\n        emit GovChange(_gov);\\n    }\\n\\n    function setWebsite(string memory _website) public onlyGov {\\n        website = _website;\\n    }\\n\\n    function setMinter(address _minter) public onlyGov {\\n        require(minter == address(0), \\\"XVIX: minter already set\\\");\\n        minter = _minter;\\n    }\\n\\n    function setFloor(address _floor) public onlyGov {\\n        require(floor == address(0), \\\"XVIX: floor already set\\\");\\n        floor = _floor;\\n    }\\n\\n    function setDistributor(address _distributor) public onlyGov {\\n        require(distributor == address(0), \\\"XVIX: distributor already set\\\");\\n        distributor = _distributor;\\n    }\\n\\n    function setFund(address _fund) public onlyGov {\\n        fund = _fund;\\n    }\\n\\n    function createSafe(address _account) public onlyGov enforceMaxSupply {\\n        require(!safes[_account], \\\"XVIX: account is already a safe\\\");\\n        safes[_account] = true;\\n\\n        uint256 balance = balances[_account];\\n        _normalSupply = _normalSupply.sub(balance);\\n\\n        uint256 safeBalance = balance.mul(SAFE_DIVISOR).div(normalDivisor);\\n        balances[_account] = safeBalance;\\n        _safeSupply = _safeSupply.add(safeBalance);\\n\\n        emit CreateSafe(_account, balanceOf(_account));\\n    }\\n\\n    // onlyAfterHandover guards against a possible gov attack vector\\n    // since XLGE participants have their funds locked for one month,\\n    // it is possible for gov to create a safe address and keep\\n    // XVIX tokens there while destroying all other safes\\n    // this would raise the value of the tokens kept in the safe address\\n    //\\n    // with the onlyAfterHandover modifier this attack can only be attempted\\n    // after XLGE participants are able to withdraw their funds\\n    // this would make it difficult for the attack to be profitable\\n    function destroySafe(address _account) public onlyGov onlyAfterHandover enforceMaxSupply {\\n        require(safes[_account], \\\"XVIX: account is not a safe\\\");\\n        safes[_account] = false;\\n\\n        uint256 balance = balances[_account];\\n        _safeSupply = _safeSupply.sub(balance);\\n\\n        uint256 normalBalance = balance.mul(normalDivisor).div(SAFE_DIVISOR);\\n        balances[_account] = normalBalance;\\n        _normalSupply = _normalSupply.add(normalBalance);\\n\\n        emit DestroySafe(_account, balanceOf(_account));\\n    }\\n\\n    function setRebaseConfig(\\n        uint256 _rebaseInterval,\\n        uint256 _rebaseBasisPoints\\n    ) public onlyGov onlyAfterHandover {\\n        require(_rebaseInterval >= MIN_REBASE_INTERVAL, \\\"XVIX: rebaseInterval below limit\\\");\\n        require(_rebaseInterval <= MAX_REBASE_INTERVAL, \\\"XVIX: rebaseInterval exceeds limit\\\");\\n        require(_rebaseBasisPoints <= MAX_REBASE_BASIS_POINTS, \\\"XVIX: rebaseBasisPoints exceeds limit\\\");\\n\\n        rebaseInterval = _rebaseInterval;\\n        rebaseBasisPoints = _rebaseBasisPoints;\\n\\n        emit RebaseConfigChange(_rebaseInterval, _rebaseBasisPoints);\\n    }\\n\\n    function setDefaultTransferConfig(\\n        uint256 _senderBurnBasisPoints,\\n        uint256 _senderFundBasisPoints,\\n        uint256 _receiverBurnBasisPoints,\\n        uint256 _receiverFundBasisPoints\\n    ) public onlyGov onlyAfterHandover {\\n        _validateTransferConfig(\\n            _senderBurnBasisPoints,\\n            _senderFundBasisPoints,\\n            _receiverBurnBasisPoints,\\n            _receiverFundBasisPoints\\n        );\\n\\n        defaultSenderBurnBasisPoints = _senderBurnBasisPoints;\\n        defaultSenderFundBasisPoints = _senderFundBasisPoints;\\n        defaultReceiverBurnBasisPoints = _receiverBurnBasisPoints;\\n        defaultReceiverFundBasisPoints = _receiverFundBasisPoints;\\n\\n        emit DefaultTransferConfigChange(\\n            _senderBurnBasisPoints,\\n            _senderFundBasisPoints,\\n            _receiverBurnBasisPoints,\\n            _receiverFundBasisPoints\\n        );\\n    }\\n\\n    function setTransferConfig(\\n        address _msgSender,\\n        uint256 _senderBurnBasisPoints,\\n        uint256 _senderFundBasisPoints,\\n        uint256 _receiverBurnBasisPoints,\\n        uint256 _receiverFundBasisPoints\\n    ) public onlyGov {\\n        require(_msgSender != address(0), \\\"XVIX: cannot set zero address\\\");\\n        _validateTransferConfig(\\n            _senderBurnBasisPoints,\\n            _senderFundBasisPoints,\\n            _receiverBurnBasisPoints,\\n            _receiverFundBasisPoints\\n        );\\n\\n        transferConfigs[_msgSender] = TransferConfig(\\n            true,\\n            _senderBurnBasisPoints,\\n            _senderFundBasisPoints,\\n            _receiverBurnBasisPoints,\\n            _receiverFundBasisPoints\\n        );\\n\\n        emit SetTransferConfig(\\n            _msgSender,\\n            _senderBurnBasisPoints,\\n            _senderFundBasisPoints,\\n            _receiverBurnBasisPoints,\\n            _receiverFundBasisPoints\\n        );\\n    }\\n\\n    function clearTransferConfig(address _msgSender) public onlyGov onlyAfterHandover {\\n        delete transferConfigs[_msgSender];\\n        emit ClearTransferConfig(_msgSender);\\n    }\\n\\n    function rebase() public override returns (bool) {\\n        if (block.timestamp < nextRebaseTime) { return false; }\\n        // calculate the number of intervals that have passed\\n        uint256 timeDiff = block.timestamp.sub(nextRebaseTime);\\n        uint256 intervals = timeDiff.div(rebaseInterval).add(1);\\n\\n        // the multiplier is calculated as (~10000)^intervals\\n        // the max value of intervals is capped at 10 to avoid uint overflow errors\\n        // 2^256 has 77 digits\\n        // 10,000^10 has 40\\n        // MAX_NORMAL_DIVISOR has 23 digits\\n        if (intervals > MAX_INTERVALS_PER_REBASE) {\\n            intervals = MAX_INTERVALS_PER_REBASE;\\n        }\\n\\n        _setNextRebaseTime();\\n\\n        if (rebaseBasisPoints == 0) { return false; }\\n\\n        uint256 multiplier = BASIS_POINTS_DIVISOR.add(rebaseBasisPoints) ** intervals;\\n        uint256 divider = BASIS_POINTS_DIVISOR ** intervals;\\n\\n        uint256 nextDivisor = normalDivisor.mul(multiplier).div(divider);\\n        if (nextDivisor > MAX_NORMAL_DIVISOR) {\\n            return false;\\n        }\\n\\n        normalDivisor = nextDivisor;\\n        emit Rebase(normalDivisor, nextRebaseTime);\\n\\n        return true;\\n    }\\n\\n    function mint(address _account, uint256 _amount) public override returns (bool) {\\n        require(msg.sender == minter, \\\"XVIX: forbidden\\\");\\n        _mint(_account, _amount);\\n        return true;\\n    }\\n\\n    // permanently remove tokens from circulation by reducing maxSupply\\n    function toast(uint256 _amount) public override returns (bool) {\\n        require(msg.sender == distributor, \\\"XVIX: forbidden\\\");\\n        if (_amount == 0) { return false; }\\n\\n        _burn(msg.sender, _amount);\\n        maxSupply = maxSupply.sub(_amount);\\n        emit Toast(msg.sender, _amount, maxSupply);\\n\\n        return true;\\n    }\\n\\n    function burn(address _account, uint256 _amount) public override returns (bool) {\\n        require(msg.sender == floor, \\\"XVIX: forbidden\\\");\\n        _burn(_account, _amount);\\n        return true;\\n    }\\n\\n    function balanceOf(address _account) public view override returns (uint256) {\\n        if (safes[_account]) {\\n            return balances[_account].div(SAFE_DIVISOR);\\n        }\\n\\n        return balances[_account].div(normalDivisor);\\n    }\\n\\n    function transfer(address _recipient, uint256 _amount) public override returns (bool) {\\n        _transfer(msg.sender, _recipient, _amount);\\n        rebase();\\n        return true;\\n    }\\n\\n    function allowance(address _owner, address _spender) public view override returns (uint256) {\\n        return allowances[_owner][_spender];\\n    }\\n\\n    function approve(address _spender, uint256 _amount) public override returns (bool) {\\n        _approve(msg.sender, _spender, _amount);\\n        return true;\\n    }\\n\\n    function transferFrom(address _sender, address _recipient, uint256 _amount) public override returns (bool) {\\n        uint256 nextAllowance = allowances[_sender][msg.sender].sub(_amount, \\\"XVIX: transfer amount exceeds allowance\\\");\\n        _approve(_sender, msg.sender, nextAllowance);\\n        _transfer(_sender, _recipient, _amount);\\n        rebase();\\n        return true;\\n    }\\n\\n    function normalSupply() public view returns (uint256) {\\n        return _normalSupply.div(normalDivisor);\\n    }\\n\\n    function safeSupply() public view returns (uint256) {\\n        return _safeSupply.div(SAFE_DIVISOR);\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return normalSupply().add(safeSupply());\\n    }\\n\\n    function _validateTransferConfig(\\n        uint256 _senderBurnBasisPoints,\\n        uint256 _senderFundBasisPoints,\\n        uint256 _receiverBurnBasisPoints,\\n        uint256 _receiverFundBasisPoints\\n    ) private pure {\\n        require(_senderBurnBasisPoints <= MAX_BURN_BASIS_POINTS, \\\"XVIX: senderBurnBasisPoints exceeds limit\\\");\\n        require(_senderFundBasisPoints <= MAX_FUND_BASIS_POINTS, \\\"XVIX: senderFundBasisPoints exceeds limit\\\");\\n        require(_receiverBurnBasisPoints <= MAX_BURN_BASIS_POINTS, \\\"XVIX: receiverBurnBasisPoints exceeds limit\\\");\\n        require(_receiverFundBasisPoints <= MAX_FUND_BASIS_POINTS, \\\"XVIX: receiverFundBasisPoints exceeds limit\\\");\\n    }\\n\\n    function _setNextRebaseTime() private {\\n        uint256 roundedTime = block.timestamp.div(rebaseInterval).mul(rebaseInterval);\\n        nextRebaseTime = roundedTime.add(rebaseInterval);\\n    }\\n\\n    function _transfer(address _sender, address _recipient, uint256 _amount) private {\\n        require(_sender != address(0), \\\"XVIX: transfer from the zero address\\\");\\n        require(_recipient != address(0), \\\"XVIX: transfer to the zero address\\\");\\n\\n        (uint256 senderBurn,\\n         uint256 senderFund,\\n         uint256 receiverBurn,\\n         uint256 receiverFund) = _getTransferConfig();\\n\\n        // increase senderAmount based on senderBasisPoints\\n        uint256 senderAmount = _amount;\\n        uint256 senderBasisPoints = senderBurn.add(senderFund);\\n        if (senderBasisPoints > 0) {\\n            uint256 senderTax = _amount.mul(senderBasisPoints).div(BASIS_POINTS_DIVISOR);\\n            senderAmount = senderAmount.add(senderTax);\\n        }\\n\\n        // decrease receiverAmount based on receiverBasisPoints\\n        uint256 receiverAmount = _amount;\\n        uint256 receiverBasisPoints = receiverBurn.add(receiverFund);\\n        if (receiverBasisPoints > 0) {\\n            uint256 receiverTax = _amount.mul(receiverBasisPoints).div(BASIS_POINTS_DIVISOR);\\n            receiverAmount = receiverAmount.sub(receiverTax);\\n        }\\n\\n        _decreaseBalance(_sender, senderAmount);\\n        _increaseBalance(_recipient, receiverAmount);\\n\\n        emit Transfer(_sender, _recipient, receiverAmount);\\n\\n        // increase fund balance based on fundBasisPoints\\n        uint256 fundBasisPoints = senderFund.add(receiverFund);\\n        uint256 fundAmount = _amount.mul(fundBasisPoints).div(BASIS_POINTS_DIVISOR);\\n        if (fundAmount > 0) {\\n            _increaseBalance(fund, fundAmount);\\n            emit Transfer(_sender, fund, fundAmount);\\n        }\\n\\n        // emit burn event\\n        uint256 burnAmount = senderAmount.sub(receiverAmount).sub(fundAmount);\\n        if (burnAmount > 0) {\\n            emit Transfer(_sender, address(0), burnAmount);\\n        }\\n\\n        _emitFloorPrice();\\n    }\\n\\n    function _getTransferConfig() private view returns (uint256, uint256, uint256, uint256) {\\n        uint256 senderBurn = defaultSenderBurnBasisPoints;\\n        uint256 senderFund = defaultSenderFundBasisPoints;\\n        uint256 receiverBurn = defaultReceiverBurnBasisPoints;\\n        uint256 receiverFund = defaultReceiverFundBasisPoints;\\n\\n        TransferConfig memory config = transferConfigs[msg.sender];\\n        if (config.active) {\\n            senderBurn = config.senderBurnBasisPoints;\\n            senderFund = config.senderFundBasisPoints;\\n            receiverBurn = config.receiverBurnBasisPoints;\\n            receiverFund = config.receiverFundBasisPoints;\\n        }\\n\\n        return (senderBurn, senderFund, receiverBurn, receiverFund);\\n    }\\n\\n    function _approve(address _owner, address _spender, uint256 _amount) private {\\n        require(_owner != address(0), \\\"XVIX: approve from the zero address\\\");\\n        require(_spender != address(0), \\\"XVIX: approve to the zero address\\\");\\n\\n        allowances[_owner][_spender] = _amount;\\n        emit Approval(_owner, _spender, _amount);\\n    }\\n\\n    function _mint(address _account, uint256 _amount) private {\\n        require(_account != address(0), \\\"XVIX: mint to the zero address\\\");\\n        if (_amount == 0) { return; }\\n\\n        _increaseBalance(_account, _amount);\\n\\n        emit Transfer(address(0), _account, _amount);\\n        _emitFloorPrice();\\n    }\\n\\n    function _burn(address _account, uint256 _amount) private {\\n        require(_account != address(0), \\\"XVIX: burn from the zero address\\\");\\n        if (_amount == 0) { return; }\\n\\n        _decreaseBalance(_account, _amount);\\n\\n        emit Transfer(_account, address(0), _amount);\\n        _emitFloorPrice();\\n    }\\n\\n    function _increaseBalance(address _account, uint256 _amount) private enforceMaxSupply {\\n        if (_amount == 0) { return; }\\n\\n        if (safes[_account]) {\\n            uint256 safeAmount = _amount.mul(SAFE_DIVISOR);\\n            balances[_account] = balances[_account].add(safeAmount);\\n            _safeSupply = _safeSupply.add(safeAmount);\\n            return;\\n        }\\n\\n        uint256 normalAmount = _amount.mul(normalDivisor);\\n        balances[_account] = balances[_account].add(normalAmount);\\n        _normalSupply = _normalSupply.add(normalAmount);\\n    }\\n\\n    function _decreaseBalance(address _account, uint256 _amount) private {\\n        if (_amount == 0) { return; }\\n\\n        if (safes[_account]) {\\n            uint256 safeAmount = _amount.mul(SAFE_DIVISOR);\\n            balances[_account] = balances[_account].sub(safeAmount, \\\"XVIX: subtraction amount exceeds balance\\\");\\n            _safeSupply = _safeSupply.sub(safeAmount);\\n            return;\\n        }\\n\\n        uint256 normalAmount = _amount.mul(normalDivisor);\\n        balances[_account] = balances[_account].sub(normalAmount, \\\"XVIX: subtraction amount exceeds balance\\\");\\n        _normalSupply = _normalSupply.sub(normalAmount);\\n    }\\n\\n    function _emitFloorPrice() private {\\n        if (_isContract(floor)) {\\n            emit FloorPrice(IFloor(floor).capital(), totalSupply());\\n        }\\n    }\\n\\n    function _isContract(address account) private view returns (bool) {\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_distributor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refBalance\",\"type\":\"uint256\"}],\"name\":\"SetRefBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refSupply\",\"type\":\"uint256\"}],\"name\":\"SetRefSupply\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_refBalance\",\"type\":\"uint256\"}],\"name\":\"setRefBalance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_refSupply\",\"type\":\"uint256\"}],\"name\":\"setRefSupply\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"LGEToken","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000002b35cccd8a0bdd17ec2f7e28d8929723826f13d5000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000000000000000c584c47452057455448204c5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009584c47453a574554480000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}