{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/callManagers/LendingManager/LendingLogicAave.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma experimental ABIEncoderV2;\\r\\npragma solidity ^0.7.1;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"../../interfaces/ILendingLogic.sol\\\";\\r\\nimport \\\"../../interfaces/IAToken.sol\\\";\\r\\nimport \\\"../../interfaces/IAaveLendingPool.sol\\\";\\r\\n\\r\\ncontract AToken is IAToken {\\r\\n    address public underlyingAssetAddress;\\r\\n    function redeem(uint256 _amount) external override {}\\r\\n}\\r\\n\\r\\ncontract LendingLogicAave is ILendingLogic {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    IAaveLendingPool public lendingPool;\\r\\n    uint16 public referralCode;\\r\\n\\r\\n    constructor(address _lendingPool, uint16 _referralCode) {\\r\\n        require(_lendingPool != address(0), \\\"LENDING_POOL_INVALID\\\");\\r\\n        lendingPool = IAaveLendingPool(_lendingPool);\\r\\n        referralCode = _referralCode;\\r\\n    }\\r\\n\\r\\n    function getAPRFromWrapped(address _token) external view override returns(uint256) {\\r\\n        address underlying = AToken(_token).underlyingAssetAddress();\\r\\n        return getAPRFromUnderlying(underlying);\\r\\n    }\\r\\n\\r\\n    function getAPRFromUnderlying(address _token) public view override returns(uint256) {\\r\\n        address _lendingPool = address(lendingPool);\\r\\n        uint256[5] memory ret;\\r\\n\\r\\n        // https://ethereum.stackexchange.com/questions/84597/ilendingpool-getreservedata-function-gives-yulexception-stack-too-deep-when-com\\r\\n        bytes memory data = abi.encodeWithSelector(bytes4(keccak256(\\\"getReserveData(address)\\\")), _token);\\r\\n        assembly {\\r\\n            let success := staticcall(\\r\\n                gas(),         // gas remaining\\r\\n                _lendingPool,  // destination address\\r\\n                add(data, 32), // input buffer (starts after the first 32 bytes in the `data` array)\\r\\n                mload(data),   // input length (loaded from the first 32 bytes in the `data` array)\\r\\n                ret,           // output buffer\\r\\n                160             // output length\\r\\n            )\\r\\n            if iszero(success) {\\r\\n                revert(0, 0)\\r\\n            }\\r\\n        }\\r\\n        return ret[4].div(1000000000);\\r\\n    }\\r\\n\\r\\n    function lend(address _underlying, uint256 _amount) external view override returns(address[] memory targets, bytes[] memory data) {\\r\\n        IERC20 underlying = IERC20(_underlying);\\r\\n\\r\\n        address core = lendingPool.core();\\r\\n\\r\\n        targets = new address[](3);\\r\\n        data = new bytes[](3);\\r\\n\\r\\n        // zero out approval to be sure\\r\\n        targets[0] = _underlying;\\r\\n        data[0] = abi.encodeWithSelector(underlying.approve.selector, address(core), 0);\\r\\n\\r\\n        // Set approval\\r\\n        targets[1] = _underlying;\\r\\n        data[1] = abi.encodeWithSelector(underlying.approve.selector, address(core), _amount);\\r\\n\\r\\n        // Deposit into Aave\\r\\n        targets[2] = address(lendingPool);\\r\\n        data[2] =  abi.encodeWithSelector(lendingPool.deposit.selector, _underlying, _amount, referralCode);\\r\\n\\r\\n        return(targets, data);\\r\\n    }\\r\\n\\r\\n    function unlend(address _wrapped, uint256 _amount) external view override returns(address[] memory targets, bytes[] memory data) {\\r\\n        targets = new address[](1);\\r\\n        data = new bytes[](1);\\r\\n\\r\\n        targets[0] = _wrapped;\\r\\n        data[0] = abi.encodeWithSelector(IAToken.redeem.selector, _amount);\\r\\n\\r\\n        return(targets, data);\\r\\n    }\\r\\n\\r\\n    function exchangeRate(address) external pure override returns(uint256) {\\r\\n        return 10**18;\\r\\n    }\\r\\n\\r\\n    function exchangeRateView(address) external pure override returns(uint256) {\\r\\n        return 10**18;\\r\\n    }\\r\\n\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILendingLogic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma experimental ABIEncoderV2;\\r\\npragma solidity ^0.7.1;\\r\\n\\r\\ninterface ILendingLogic {\\r\\n    /**\\r\\n        @notice Get the APR based on underlying token.\\r\\n        @param _token Address of the underlying token\\r\\n        @return Interest with 18 decimals\\r\\n    */\\r\\n    function getAPRFromUnderlying(address _token) external view returns(uint256);\\r\\n\\r\\n    /**\\r\\n        @notice Get the APR based on wrapped token.\\r\\n        @param _token Address of the wrapped token\\r\\n        @return Interest with 18 decimals\\r\\n    */\\r\\n    function getAPRFromWrapped(address _token) external view returns(uint256);\\r\\n\\r\\n    /**\\r\\n        @notice Get the calls needed to lend.\\r\\n        @param _underlying Address of the underlying token\\r\\n        @param _amount Amount of the underlying token\\r\\n        @return targets Addresses of the contracts to call\\r\\n        @return data Calldata of the calls\\r\\n    */\\r\\n    function lend(address _underlying, uint256 _amount) external view returns(address[] memory targets, bytes[] memory data);\\r\\n\\r\\n    /**\\r\\n        @notice Get the calls needed to unlend\\r\\n        @param _wrapped Address of the wrapped token\\r\\n        @param _amount Amount of the underlying tokens\\r\\n        @return targets Addresses of the contracts to call\\r\\n        @return data Calldata of the calls\\r\\n    */\\r\\n    function unlend(address _wrapped, uint256 _amount) external view returns(address[] memory targets, bytes[] memory data);\\r\\n\\r\\n    /**\\r\\n        @notice Get the underlying wrapped exchange rate\\r\\n        @param _wrapped Address of the wrapped token\\r\\n        @return The exchange rate\\r\\n    */\\r\\n    function exchangeRate(address _wrapped) external returns(uint256);\\r\\n\\r\\n    /**\\r\\n        @notice Get the underlying wrapped exchange rate in a view (non state changing) way\\r\\n        @param _wrapped Address of the wrapped token\\r\\n        @return The exchange rate\\r\\n    */\\r\\n    function exchangeRateView(address _wrapped) external view returns(uint256);\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IAToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma experimental ABIEncoderV2;\\r\\npragma solidity ^0.7.1;\\r\\n\\r\\ninterface IAToken {\\r\\n    function redeem(uint256 _amount) external;\\r\\n}\\r\\n\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IAaveLendingPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma experimental ABIEncoderV2;\\r\\npragma solidity ^0.7.1;\\r\\n\\r\\ninterface IAaveLendingPool {\\r\\n    function deposit(address _reserve, uint256 _amount, uint16 _referralCode) external;\\r\\n    function core() external view returns(address);\\r\\n    function getReserveData(address _reserve)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 totalLiquidity,\\r\\n            uint256 availableLiquidity,\\r\\n            uint256 totalBorrowsStable,\\r\\n            uint256 totalBorrowsVariable,\\r\\n            uint256 liquidityRate,\\r\\n            uint256 variableBorrowRate,\\r\\n            uint256 stableBorrowRate,\\r\\n            uint256 averageStableBorrowRate,\\r\\n            uint256 utilizationRate,\\r\\n            uint256 liquidityIndex,\\r\\n            uint256 variableBorrowIndex,\\r\\n            address aTokenAddress,\\r\\n            uint40 lastUpdateTimestamp\\r\\n        );\\r\\n}\"\r\n    },\r\n    \"contracts/callManagers/LendingManager/LendingLogicAaveV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma experimental ABIEncoderV2;\\r\\npragma solidity ^0.7.1;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"../../interfaces/ILendingLogic.sol\\\";\\r\\nimport \\\"../../interfaces/IATokenV2.sol\\\";\\r\\nimport \\\"../../interfaces/IAaveLendingPoolV2.sol\\\";\\r\\n\\r\\ncontract ATokenV2 is IATokenV2 {\\r\\n    address public UNDERLYING_ASSET_ADDRESS;\\r\\n}\\r\\n\\r\\ncontract LendingLogicAaveV2 is ILendingLogic {\\r\\n    using SafeMath for uint128;\\r\\n\\r\\n    IAaveLendingPoolV2 public lendingPool;\\r\\n    uint16 public referralCode;\\r\\n    address public tokenHolder;\\r\\n\\r\\n    constructor(address _lendingPool, uint16 _referralCode, address _tokenHolder) {\\r\\n        require(_lendingPool != address(0), \\\"LENDING_POOL_INVALID\\\");\\r\\n        lendingPool = IAaveLendingPoolV2(_lendingPool);\\r\\n        referralCode = _referralCode;\\r\\n        tokenHolder = _tokenHolder;\\r\\n    }\\r\\n\\r\\n    function getAPRFromWrapped(address _token) external view override returns(uint256) {\\r\\n        address underlying = ATokenV2(_token).UNDERLYING_ASSET_ADDRESS();\\r\\n        return getAPRFromUnderlying(underlying);\\r\\n    }\\r\\n\\r\\n    function getAPRFromUnderlying(address _token) public view override returns(uint256) {\\r\\n        DataTypes.ReserveData memory reserveData = lendingPool.getReserveData(_token);\\r\\n        return reserveData.currentLiquidityRate.div(1000000000);\\r\\n    }\\r\\n\\r\\n    function lend(address _underlying, uint256 _amount) external view override returns(address[] memory targets, bytes[] memory data) {\\r\\n        IERC20 underlying = IERC20(_underlying);\\r\\n\\r\\n        targets = new address[](3);\\r\\n        data = new bytes[](3);\\r\\n\\r\\n        // zero out approval to be sure\\r\\n        targets[0] = _underlying;\\r\\n        data[0] = abi.encodeWithSelector(underlying.approve.selector, address(lendingPool), 0);\\r\\n\\r\\n        // Set approval\\r\\n        targets[1] = _underlying;\\r\\n        data[1] = abi.encodeWithSelector(underlying.approve.selector, address(lendingPool), _amount);\\r\\n\\r\\n        // Deposit into Aave\\r\\n        targets[2] = address(lendingPool);\\r\\n        data[2] =  abi.encodeWithSelector(lendingPool.deposit.selector, _underlying, _amount, tokenHolder, referralCode);\\r\\n\\r\\n        return(targets, data);\\r\\n    }\\r\\n\\r\\n    function unlend(address _wrapped, uint256 _amount) external view override returns(address[] memory targets, bytes[] memory data) {\\r\\n        ATokenV2 wrapped = ATokenV2(_wrapped);\\r\\n\\r\\n        targets = new address[](1);\\r\\n        data = new bytes[](1);\\r\\n\\r\\n        targets[0] = address(lendingPool);\\r\\n        data[0] = abi.encodeWithSelector(\\r\\n            lendingPool.withdraw.selector,\\r\\n            wrapped.UNDERLYING_ASSET_ADDRESS(),\\r\\n            _amount,\\r\\n            tokenHolder\\r\\n        );\\r\\n\\r\\n        return(targets, data);\\r\\n    }\\r\\n\\r\\n    function exchangeRate(address) external pure override returns(uint256) {\\r\\n        return 10**18;\\r\\n    }\\r\\n\\r\\n    function exchangeRateView(address) external pure override returns(uint256) {\\r\\n        return 10**18;\\r\\n    }\\r\\n\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IATokenV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma experimental ABIEncoderV2;\\r\\npragma solidity ^0.7.1;\\r\\n\\r\\ninterface IATokenV2 {\\r\\n\\r\\n}\\r\\n\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IAaveLendingPoolV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma experimental ABIEncoderV2;\\r\\npragma solidity ^0.7.1;\\r\\n\\r\\nlibrary DataTypes {\\r\\n  // refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\\r\\n  struct ReserveData {\\r\\n    //stores the reserve configuration\\r\\n    ReserveConfigurationMap configuration;\\r\\n    //the liquidity index. Expressed in ray\\r\\n    uint128 liquidityIndex;\\r\\n    //variable borrow index. Expressed in ray\\r\\n    uint128 variableBorrowIndex;\\r\\n    //the current supply rate. Expressed in ray\\r\\n    uint128 currentLiquidityRate;\\r\\n    //the current variable borrow rate. Expressed in ray\\r\\n    uint128 currentVariableBorrowRate;\\r\\n    //the current stable borrow rate. Expressed in ray\\r\\n    uint128 currentStableBorrowRate;\\r\\n    uint40 lastUpdateTimestamp;\\r\\n    //tokens addresses\\r\\n    address aTokenAddress;\\r\\n    address stableDebtTokenAddress;\\r\\n    address variableDebtTokenAddress;\\r\\n    //address of the interest rate strategy\\r\\n    address interestRateStrategyAddress;\\r\\n    //the id of the reserve. Represents the position in the list of the active reserves\\r\\n    uint8 id;\\r\\n  }\\r\\n\\r\\n  struct ReserveConfigurationMap {\\r\\n    //bit 0-15: LTV\\r\\n    //bit 16-31: Liq. threshold\\r\\n    //bit 32-47: Liq. bonus\\r\\n    //bit 48-55: Decimals\\r\\n    //bit 56: Reserve is active\\r\\n    //bit 57: reserve is frozen\\r\\n    //bit 58: borrowing is enabled\\r\\n    //bit 59: stable rate borrowing enabled\\r\\n    //bit 60-63: reserved\\r\\n    //bit 64-79: reserve factor\\r\\n    uint256 data;\\r\\n  }\\r\\n\\r\\n  struct UserConfigurationMap {\\r\\n    uint256 data;\\r\\n  }\\r\\n\\r\\n  enum InterestRateMode {NONE, STABLE, VARIABLE}\\r\\n}\\r\\n\\r\\ninterface IAaveLendingPoolV2 {\\r\\n    function deposit(\\r\\n        address asset,\\r\\n        uint256 amount,\\r\\n        address onBehalfOf,\\r\\n        uint16 referralCode\\r\\n    ) external;\\r\\n\\r\\n    function withdraw(\\r\\n        address asset,\\r\\n        uint256 amount,\\r\\n        address to\\r\\n    ) external;\\r\\n\\r\\n    function getReserveData(address asset)\\r\\n        external\\r\\n        view\\r\\n        returns (DataTypes.ReserveData memory);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/callManagers/LendingManager/LendingLogicCompound.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma experimental ABIEncoderV2;\\r\\npragma solidity ^0.7.1;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"../../interfaces/ILendingLogic.sol\\\";\\r\\nimport \\\"./LendingRegistry.sol\\\";\\r\\nimport \\\"../../interfaces/ICToken.sol\\\";\\r\\n\\r\\ncontract LendingLogicCompound is Ownable, ILendingLogic {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    LendingRegistry public lendingRegistry;\\r\\n    bytes32 public immutable protocolKey;\\r\\n    uint256 public blocksPerYear;\\r\\n\\r\\n    constructor(address _lendingRegistry, bytes32 _protocolKey) {\\r\\n        require(_lendingRegistry != address(0), \\\"INVALID_LENDING_REGISTRY\\\");\\r\\n        lendingRegistry = LendingRegistry(_lendingRegistry);\\r\\n        protocolKey = _protocolKey;\\r\\n    }\\r\\n\\r\\n    function setBlocksPerYear(uint256 _blocks) external onlyOwner {\\r\\n        // calculated by taking APY onn compound.finance  / dividing by supplyrate per block\\r\\n        // this is apparently the amount of blocks compound expects to be minted this year\\r\\n        // 2145683;\\r\\n        blocksPerYear = _blocks;\\r\\n    }\\r\\n\\r\\n    function getAPRFromWrapped(address _token) public view override returns(uint256) {\\r\\n        return ICToken(_token).supplyRatePerBlock().mul(blocksPerYear);\\r\\n    }\\r\\n\\r\\n    function getAPRFromUnderlying(address _token) external view override returns(uint256) {\\r\\n        address cToken = lendingRegistry.underlyingToProtocolWrapped(_token, protocolKey);\\r\\n        return getAPRFromWrapped(cToken);\\r\\n    }\\r\\n\\r\\n    function lend(address _underlying, uint256 _amount) external view override returns(address[] memory targets, bytes[] memory data) {\\r\\n        IERC20 underlying = IERC20(_underlying);\\r\\n\\r\\n        targets = new address[](3);\\r\\n        data = new bytes[](3);\\r\\n\\r\\n\\r\\n        address cToken = lendingRegistry.underlyingToProtocolWrapped(_underlying, protocolKey);\\r\\n\\r\\n        // zero out approval to be sure\\r\\n        targets[0] = _underlying;\\r\\n        data[0] = abi.encodeWithSelector(underlying.approve.selector, cToken, 0);\\r\\n\\r\\n        // Set approval\\r\\n        targets[1] = _underlying;\\r\\n        data[1] = abi.encodeWithSelector(underlying.approve.selector, cToken, _amount);\\r\\n\\r\\n        // Deposit into Compound\\r\\n        targets[2] = cToken;\\r\\n\\r\\n        data[2] =  abi.encodeWithSelector(ICToken.mint.selector, _amount);\\r\\n\\r\\n        return(targets, data);\\r\\n    }\\r\\n\\r\\n    function unlend(address _wrapped, uint256 _amount) external view override returns(address[] memory targets, bytes[] memory data) {\\r\\n        targets = new address[](1);\\r\\n        data = new bytes[](1);\\r\\n\\r\\n        targets[0] = _wrapped;\\r\\n        data[0] = abi.encodeWithSelector(ICToken.redeem.selector, _amount);\\r\\n\\r\\n        return(targets, data);\\r\\n    }\\r\\n\\r\\n    function exchangeRate(address _wrapped) external override returns(uint256) {\\r\\n        return ICToken(_wrapped).exchangeRateCurrent();\\r\\n    }\\r\\n\\r\\n    function exchangeRateView(address _wrapped) external view override returns(uint256) {\\r\\n        return ICToken(_wrapped).exchangeRateStored();\\r\\n    }\\r\\n\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/callManagers/LendingManager/LendingRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma experimental ABIEncoderV2;\\r\\npragma solidity ^0.7.1;\\r\\n\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"../../interfaces/ILendingLogic.sol\\\";\\r\\n\\r\\n// TODO consider making this contract upgradeable\\r\\ncontract LendingRegistry is Ownable {\\r\\n\\r\\n    // Maps wrapped token to protocol\\r\\n    mapping(address => bytes32) public wrappedToProtocol;\\r\\n    // Maps wrapped token to underlying\\r\\n    mapping(address => address) public wrappedToUnderlying;\\r\\n\\r\\n    mapping(address => mapping(bytes32 => address)) public underlyingToProtocolWrapped;\\r\\n\\r\\n    // Maps protocol to addresses containing lend and unlend logic\\r\\n    mapping(bytes32 => address) public protocolToLogic;\\r\\n\\r\\n    event WrappedToProtocolSet(address indexed wrapped, bytes32 indexed protocol);\\r\\n    event WrappedToUnderlyingSet(address indexed wrapped, address indexed underlying);\\r\\n    event ProtocolToLogicSet(bytes32 indexed protocol, address indexed logic);\\r\\n    event UnderlyingToProtocolWrappedSet(address indexed underlying, bytes32 indexed protocol, address indexed wrapped);\\r\\n\\r\\n    /**\\r\\n        @notice Set which protocl a wrapped token belongs to\\r\\n        @param _wrapped Address of the wrapped token\\r\\n        @param _protocol Bytes32 key of the protocol\\r\\n    */\\r\\n    function setWrappedToProtocol(address _wrapped, bytes32 _protocol) onlyOwner external {\\r\\n        wrappedToProtocol[_wrapped] = _protocol;\\r\\n        emit WrappedToProtocolSet(_wrapped, _protocol);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice Set what is the underlying for a wrapped token\\r\\n        @param _wrapped Address of the wrapped token\\r\\n        @param _underlying Address of the underlying token\\r\\n    */\\r\\n    function setWrappedToUnderlying(address _wrapped, address _underlying) onlyOwner external {\\r\\n        wrappedToUnderlying[_wrapped] = _underlying;\\r\\n        emit WrappedToUnderlyingSet(_wrapped, _underlying);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice Set the logic contract for the protocol\\r\\n        @param _protocol Bytes32 key of the procol\\r\\n        @param _logic Address of the lending logic contract for that protocol\\r\\n    */\\r\\n    function setProtocolToLogic(bytes32 _protocol, address _logic) onlyOwner external {\\r\\n        protocolToLogic[_protocol] = _logic;\\r\\n        emit ProtocolToLogicSet(_protocol, _logic);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice Set the wrapped token for the underlying deposited in this protocol\\r\\n        @param _underlying Address of the unerlying token\\r\\n        @param _protocol Bytes32 key of the protocol\\r\\n        @param _wrapped Address of the wrapped token\\r\\n    */\\r\\n    function setUnderlyingToProtocolWrapped(address _underlying, bytes32 _protocol, address _wrapped) onlyOwner external {\\r\\n        underlyingToProtocolWrapped[_underlying][_protocol] = _wrapped;\\r\\n        emit UnderlyingToProtocolWrappedSet(_underlying, _protocol, _wrapped);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice Get tx data to lend the underlying amount in a specific protocol\\r\\n        @param _underlying Address of the underlying token\\r\\n        @param _amount Amount to lend\\r\\n        @param _protocol Bytes32 key of the protocol\\r\\n        @return targets Addresses of the contracts to call\\r\\n        @return data Calldata for the calls\\r\\n    */\\r\\n    function getLendTXData(address _underlying, uint256 _amount, bytes32 _protocol) external view returns(address[] memory targets, bytes[] memory data) {\\r\\n        ILendingLogic lendingLogic = ILendingLogic(protocolToLogic[_protocol]);\\r\\n        require(address(lendingLogic) != address(0), \\\"NO_LENDING_LOGIC_SET\\\");\\r\\n\\r\\n        return lendingLogic.lend(_underlying, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice Get the tx data to unlend the wrapped amount\\r\\n        @param _wrapped Address of the wrapped token\\r\\n        @param _amount Amount of wrapped token to unlend\\r\\n        @return targets Addresses of the contracts to call\\r\\n        @return data Calldata for the calls\\r\\n    */\\r\\n    function getUnlendTXData(address _wrapped, uint256 _amount) external view returns(address[] memory targets, bytes[] memory data) {\\r\\n        ILendingLogic lendingLogic = ILendingLogic(protocolToLogic[wrappedToProtocol[_wrapped]]);\\r\\n        require(address(lendingLogic) != address(0), \\\"NO_LENDING_LOGIC_SET\\\");\\r\\n\\r\\n        return lendingLogic.unlend(_wrapped, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice Get the beste apr for the give protocols\\r\\n        @dev returns default values if lending logic not found\\r\\n        @param _underlying Address of the underlying token\\r\\n        @param _protocols Array of protocols to include\\r\\n        @return apr The APR\\r\\n        @return protocol Protocol that provides the APR\\r\\n    */\\r\\n    function getBestApr(address _underlying, bytes32[] memory _protocols) external view returns(uint256 apr, bytes32 protocol) {\\r\\n        uint256 bestApr;\\r\\n        bytes32 bestProtocol;\\r\\n\\r\\n        for(uint256 i = 0; i < _protocols.length; i++) {\\r\\n            bytes32 protocol = _protocols[i];\\r\\n            ILendingLogic lendingLogic = ILendingLogic(protocolToLogic[protocol]);\\r\\n            require(address(lendingLogic) != address(0), \\\"NO_LENDING_LOGIC_SET\\\");\\r\\n\\r\\n            uint256 apr = lendingLogic.getAPRFromUnderlying(_underlying);\\r\\n            if (apr > bestApr) {\\r\\n                bestApr = apr;\\r\\n                bestProtocol = protocol;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return (bestApr, bestProtocol);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/ICToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma experimental ABIEncoderV2;\\r\\npragma solidity ^0.7.1;\\r\\n\\r\\ninterface ICToken {\\r\\n    function mint(uint _mintAmount) external returns (uint256);\\r\\n    function redeem(uint _redeemTokens) external returns (uint256);\\r\\n    function supplyRatePerBlock() external view returns (uint256);\\r\\n    function exchangeRateCurrent() external returns (uint256);\\r\\n    function exchangeRateStored() external view returns(uint256);\\r\\n}\"\r\n    },\r\n    \"contracts/callManagers/LendingManager/LendingManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma experimental ABIEncoderV2;\\r\\npragma solidity ^0.7.1;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\r\\nimport \\\"./LendingRegistry.sol\\\";\\r\\nimport \\\"../../interfaces/IExperiPie.sol\\\";\\r\\n\\r\\ncontract LendingManager is Ownable, ReentrancyGuard {\\r\\n    using Math for uint256;\\r\\n\\r\\n    LendingRegistry public lendingRegistry;\\r\\n    IExperiPie public basket;\\r\\n\\r\\n    event Lend(address indexed underlying, uint256 amount, bytes32 indexed protocol);\\r\\n    event UnLend(address indexed wrapped, uint256 amount);\\r\\n    /**\\r\\n        @notice Constructor\\r\\n        @param _lendingRegistry Address of the lendingRegistry contract\\r\\n        @param _basket Address of the pool/pie/basket to manage\\r\\n    */\\r\\n    constructor(address _lendingRegistry, address _basket) public {\\r\\n        require(_lendingRegistry != address(0), \\\"INVALID_LENDING_REGISTRY\\\");\\r\\n        require(_basket != address(0), \\\"INVALID_BASKET\\\");\\r\\n        lendingRegistry = LendingRegistry(_lendingRegistry);\\r\\n        basket = IExperiPie(_basket);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice Move underlying to a lending protocol\\r\\n        @param _underlying Address of the underlying token\\r\\n        @param _amount Amount of underlying to lend\\r\\n        @param _protocol Bytes32 protocol key to lend to\\r\\n    */\\r\\n    function lend(address _underlying, uint256 _amount, bytes32 _protocol) public onlyOwner nonReentrant {\\r\\n        // _amount or actual balance, whatever is less\\r\\n        uint256 amount = _amount.min(IERC20(_underlying).balanceOf(address(basket)));\\r\\n\\r\\n        //lend token\\r\\n        (\\r\\n            address[] memory _targets,\\r\\n            bytes[] memory _data\\r\\n        ) = lendingRegistry.getLendTXData(_underlying, amount, _protocol);\\r\\n\\r\\n        basket.callNoValue(_targets, _data);\\r\\n\\r\\n        // if needed remove underlying from basket\\r\\n        removeToken(_underlying);\\r\\n\\r\\n        // add wrapped token\\r\\n        addToken(lendingRegistry.underlyingToProtocolWrapped(_underlying, _protocol));\\r\\n\\r\\n        emit Lend(_underlying, _amount, _protocol);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice Unlend wrapped token from its lending protocol\\r\\n        @param _wrapped Address of the wrapped token\\r\\n        @param _amount Amount of the wrapped token to unlend\\r\\n    */\\r\\n    function unlend(address _wrapped, uint256 _amount) public onlyOwner nonReentrant {\\r\\n        // unlend token\\r\\n         // _amount or actual balance, whatever is less\\r\\n        uint256 amount = _amount.min(IERC20(_wrapped).balanceOf(address(basket)));\\r\\n\\r\\n        //Unlend token\\r\\n        (\\r\\n            address[] memory _targets,\\r\\n            bytes[] memory _data\\r\\n        ) = lendingRegistry.getUnlendTXData(_wrapped, amount);\\r\\n        basket.callNoValue(_targets, _data);\\r\\n\\r\\n        // if needed add underlying\\r\\n        addToken(lendingRegistry.wrappedToUnderlying(_wrapped));\\r\\n\\r\\n        // if needed remove wrapped\\r\\n        removeToken(_wrapped);\\r\\n\\r\\n        emit UnLend(_wrapped, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice Unlend and immediately lend in a different protocol\\r\\n        @param _wrapped Address of the wrapped token to bounce to another protocol\\r\\n        @param _amount Amount of the wrapped token to bounce to the other protocol\\r\\n        @param _toProtocol Protocol to deposit bounced tokens in\\r\\n        @dev Uses reentrency protection of unlend() and lend()\\r\\n    */\\r\\n    function bounce(address _wrapped, uint256 _amount, bytes32 _toProtocol) external {\\r\\n       unlend(_wrapped, _amount);\\r\\n       // Bounce all to new protocol\\r\\n       lend(lendingRegistry.wrappedToUnderlying(_wrapped), uint256(-1), _toProtocol);\\r\\n    }\\r\\n\\r\\n    function removeToken(address _token) internal {\\r\\n        uint256 balance = basket.balance(_token);\\r\\n        bool inPool = basket.getTokenInPool(_token);\\r\\n        //if there is a token balance of the token is not in the pool, skip\\r\\n        if(balance != 0 || !inPool) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        // remove token\\r\\n        basket.singleCall(address(basket), abi.encodeWithSelector(basket.removeToken.selector, _token), 0);\\r\\n    }\\r\\n\\r\\n    function addToken(address _token) internal {\\r\\n        uint256 balance = basket.balance(_token);\\r\\n        bool inPool = basket.getTokenInPool(_token);\\r\\n        // If token has no balance or is already in the pool, skip\\r\\n        if(balance == 0 || inPool) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        // add token\\r\\n        basket.singleCall(address(basket), abi.encodeWithSelector(basket.addToken.selector, _token), 0);\\r\\n    }\\r\\n \\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IExperiPie.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.1;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@pie-dao/diamond/contracts/interfaces/IERC173.sol\\\";\\r\\nimport \\\"@pie-dao/diamond/contracts/interfaces/IDiamondLoupe.sol\\\";\\r\\nimport \\\"@pie-dao/diamond/contracts/interfaces/IDiamondCut.sol\\\";\\r\\nimport \\\"./IBasketFacet.sol\\\";\\r\\nimport \\\"./IERC20Facet.sol\\\";\\r\\nimport \\\"./ICallFacet.sol\\\";\\r\\n\\r\\n/**\\r\\n    @title ExperiPie Interface\\r\\n    @dev Combines all ExperiPie facet interfaces into one\\r\\n*/\\r\\ninterface IExperiPie is IERC20, IBasketFacet, IERC20Facet, IERC173, ICallFacet, IDiamondLoupe, IDiamondCut {\\r\\n}\"\r\n    },\r\n    \"@pie-dao/diamond/contracts/interfaces/IERC173.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.1;\\r\\n\\r\\n/// @title ERC-173 Contract Ownership Standard\\r\\n///  Note: the ERC-165 identifier for this interface is 0x7f5828d0\\r\\n/* is ERC165 */\\r\\ninterface IERC173 {\\r\\n    /// @dev This emits when ownership of a contract changes.\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /// @notice Get the address of the owner\\r\\n    /// @return owner_ The address of the owner.\\r\\n    function owner() external view returns (address owner_);\\r\\n\\r\\n    /// @notice Set the address of the new owner of the contract\\r\\n    /// @dev Set _newOwner to address(0) to renounce any ownership.\\r\\n    /// @param _newOwner The address of the new owner of the contract\\r\\n    function transferOwnership(address _newOwner) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"@pie-dao/diamond/contracts/interfaces/IDiamondLoupe.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.1;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n// A loupe is a small magnifying glass used to look at diamonds.\\r\\n// These functions look at diamonds\\r\\ninterface IDiamondLoupe {\\r\\n    /// These functions are expected to be called frequently\\r\\n    /// by tools.\\r\\n\\r\\n    struct Facet {\\r\\n        address facetAddress;\\r\\n        bytes4[] functionSelectors;\\r\\n    }\\r\\n\\r\\n    /// @notice Gets all facet addresses and their four byte function selectors.\\r\\n    /// @return facets_ Facet\\r\\n    function facets() external view returns (Facet[] memory facets_);\\r\\n\\r\\n    /// @notice Gets all the function selectors supported by a specific facet.\\r\\n    /// @param _facet The facet address.\\r\\n    /// @return facetFunctionSelectors_\\r\\n    function facetFunctionSelectors(address _facet) external view returns (bytes4[] memory facetFunctionSelectors_);\\r\\n\\r\\n    /// @notice Get all the facet addresses used by a diamond.\\r\\n    /// @return facetAddresses_\\r\\n    function facetAddresses() external view returns (address[] memory facetAddresses_);\\r\\n\\r\\n    /// @notice Gets the facet that supports the given selector.\\r\\n    /// @dev If facet is not found return address(0).\\r\\n    /// @param _functionSelector The function selector.\\r\\n    /// @return facetAddress_ The facet address.\\r\\n    function facetAddress(bytes4 _functionSelector) external view returns (address facetAddress_);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@pie-dao/diamond/contracts/interfaces/IDiamondCut.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.1;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n/******************************************************************************\\\\\\r\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\r\\n/******************************************************************************/\\r\\n\\r\\ninterface IDiamondCut {\\r\\n    enum FacetCutAction {Add, Replace, Remove}\\r\\n\\r\\n    struct FacetCut {\\r\\n        address facetAddress;\\r\\n        FacetCutAction action;\\r\\n        bytes4[] functionSelectors;\\r\\n    }\\r\\n\\r\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\r\\n    ///         a function with delegatecall\\r\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\r\\n    /// @param _init The address of the contract or facet to execute _calldata\\r\\n    /// @param _calldata A function call, including function selector and arguments\\r\\n    ///                  _calldata is executed with delegatecall on _init\\r\\n    function diamondCut(\\r\\n        FacetCut[] calldata _diamondCut,\\r\\n        address _init,\\r\\n        bytes calldata _calldata\\r\\n    ) external;\\r\\n\\r\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IBasketFacet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.1;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\ninterface IBasketFacet {\\r\\n\\r\\n    event TokenAdded(address indexed _token);\\r\\n    event TokenRemoved(address indexed _token);\\r\\n    event EntryFeeSet(uint256 fee);\\r\\n    event ExitFeeSet(uint256 fee);\\r\\n    event AnnualizedFeeSet(uint256 fee);\\r\\n    event FeeBeneficiarySet(address indexed beneficiary);\\r\\n    event EntryFeeBeneficiaryShareSet(uint256 share);\\r\\n    event ExitFeeBeneficiaryShareSet(uint256 share);\\r\\n\\r\\n    event PoolJoined(address indexed who, uint256 amount);\\r\\n    event PoolExited(address indexed who, uint256 amount);\\r\\n    event FeeCharged(uint256 amount);\\r\\n    event LockSet(uint256 lockBlock);\\r\\n    event CapSet(uint256 cap);\\r\\n\\r\\n    /** \\r\\n        @notice Sets entry fee paid when minting\\r\\n        @param _fee Amount of fee. 1e18 == 100%, capped at 10%\\r\\n    */\\r\\n    function setEntryFee(uint256 _fee) external;\\r\\n\\r\\n    /**\\r\\n        @notice Get the entry fee\\r\\n        @return Current entry fee\\r\\n    */\\r\\n    function getEntryFee() external view returns(uint256);\\r\\n\\r\\n    /**\\r\\n        @notice Set the exit fee paid when exiting\\r\\n        @param _fee Amount of fee. 1e18 == 100%, capped at 10%\\r\\n    */\\r\\n    function setExitFee(uint256 _fee) external;\\r\\n\\r\\n    /**\\r\\n        @notice Get the exit fee\\r\\n        @return Current exit fee\\r\\n    */\\r\\n    function getExitFee() external view returns(uint256);\\r\\n\\r\\n    /**\\r\\n        @notice Set the annualized fee. Often referred to as streaming fee\\r\\n        @param _fee Amount of fee. 1e18 == 100%, capped at 10%\\r\\n    */\\r\\n    function setAnnualizedFee(uint256 _fee) external;\\r\\n\\r\\n    /**\\r\\n        @notice Get the annualized fee.\\r\\n        @return Current annualized fee.\\r\\n    */\\r\\n    function getAnnualizedFee() external view returns(uint256);\\r\\n\\r\\n    /**\\r\\n        @notice Set the address receiving the fees.\\r\\n    */\\r\\n    function setFeeBeneficiary(address _beneficiary) external;\\r\\n\\r\\n    /**\\r\\n        @notice Get the fee benificiary\\r\\n        @return The current fee beneficiary\\r\\n    */\\r\\n    function getFeeBeneficiary() external view returns(address);\\r\\n\\r\\n    /**\\r\\n        @notice Set the fee beneficiaries share of the entry fee\\r\\n        @notice _share Share of the fee. 1e18 == 100%. Capped at 100% \\r\\n    */\\r\\n    function setEntryFeeBeneficiaryShare(uint256 _share) external;\\r\\n\\r\\n    /**\\r\\n        @notice Get the entry fee beneficiary share\\r\\n        @return Feeshare amount\\r\\n    */\\r\\n    function getEntryFeeBeneficiaryShare() external view returns(uint256);\\r\\n\\r\\n    /**\\r\\n        @notice Set the fee beneficiaries share of the exit fee\\r\\n        @notice _share Share of the fee. 1e18 == 100%. Capped at 100% \\r\\n    */\\r\\n    function setExitFeeBeneficiaryShare(uint256 _share) external;\\r\\n\\r\\n    /**\\r\\n        @notice Get the exit fee beneficiary share\\r\\n        @return Feeshare amount\\r\\n    */\\r\\n    function getExitFeeBeneficiaryShare() external view returns(uint256);\\r\\n\\r\\n    /**\\r\\n        @notice Calculate the oustanding annualized fee\\r\\n        @return Amount of pool tokens to be minted to charge the annualized fee\\r\\n    */\\r\\n    function calcOutStandingAnnualizedFee() external view returns(uint256);\\r\\n\\r\\n    /**\\r\\n        @notice Charges the annualized fee\\r\\n    */\\r\\n    function chargeOutstandingAnnualizedFee() external;\\r\\n\\r\\n    /**\\r\\n        @notice Pulls underlying from caller and mints the pool token\\r\\n        @param _amount Amount of pool tokens to mint\\r\\n    */\\r\\n    function joinPool(uint256 _amount) external;\\r\\n\\r\\n    /**\\r\\n        @notice Burns pool tokens from the caller and returns underlying assets\\r\\n    */\\r\\n    function exitPool(uint256 _amount) external;\\r\\n\\r\\n    /**\\r\\n        @notice Get if the pool is locked or not. (not accepting exit and entry)\\r\\n        @return Boolean indicating if the pool is locked\\r\\n    */\\r\\n    function getLock() external view returns (bool);\\r\\n\\r\\n    /**\\r\\n        @notice Get the block until which the pool is locked\\r\\n        @return The lock block\\r\\n    */\\r\\n    function getLockBlock() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n        @notice Set the lock block\\r\\n        @param _lock Block height of the lock\\r\\n    */\\r\\n    function setLock(uint256 _lock) external;\\r\\n\\r\\n    /**\\r\\n        @notice Get the maximum of pool tokens that can be minted\\r\\n        @return Cap\\r\\n    */\\r\\n    function getCap() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n        @notice Set the maximum of pool tokens that can be minted\\r\\n        @param _maxCap Max cap \\r\\n    */\\r\\n    function setCap(uint256 _maxCap) external;\\r\\n\\r\\n    /**\\r\\n        @notice Get the amount of tokens owned by the pool\\r\\n        @param _token Addres of the token\\r\\n        @return Amount owned by the contract\\r\\n    */\\r\\n    function balance(address _token) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n        @notice Get the tokens in the pool\\r\\n        @return Array of tokens in the pool\\r\\n    */\\r\\n    function getTokens() external view returns (address[] memory);\\r\\n\\r\\n    /**\\r\\n        @notice Add a token to the pool. Should have at least a balance of 10**6\\r\\n        @param _token Address of the token to add\\r\\n    */\\r\\n    function addToken(address _token) external;\\r\\n\\r\\n    /**\\r\\n        @notice Removes a token from the pool\\r\\n        @param _token Address of the token to remove\\r\\n    */\\r\\n    function removeToken(address _token) external;\\r\\n\\r\\n    /**\\r\\n        @notice Checks if a token was added to the pool\\r\\n        @param _token address of the token\\r\\n        @return If token is in the pool or not\\r\\n    */\\r\\n    function getTokenInPool(address _token) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n        @notice Calculate the amounts of underlying needed to mint that pool amount.\\r\\n        @param _amount Amount of pool tokens to mint\\r\\n        @return tokens Tokens needed\\r\\n        @return amounts Amounts of underlying needed\\r\\n    */\\r\\n    function calcTokensForAmount(uint256 _amount)\\r\\n        external\\r\\n        view\\r\\n        returns (address[] memory tokens, uint256[] memory amounts);\\r\\n\\r\\n    /**\\r\\n        @notice Calculate the amounts of underlying to receive when burning that pool amount\\r\\n        @param _amount Amount of pool tokens to burn\\r\\n        @return tokens Tokens returned\\r\\n        @return amounts Amounts of underlying returned\\r\\n    */\\r\\n    function calcTokensForAmountExit(uint256 _amount)\\r\\n        external\\r\\n        view\\r\\n        returns (address[] memory tokens, uint256[] memory amounts);\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IERC20Facet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.1;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\ninterface IERC20Facet {\\r\\n    \\r\\n    /**\\r\\n        @notice Get the token name\\r\\n        @return The token name\\r\\n    */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n        @notice Get the token symbol\\r\\n        @return The token symbol \\r\\n    */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n        @notice Get the amount of decimals\\r\\n        @return Amount of decimals\\r\\n    */\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    /**\\r\\n        @notice Mints tokens. Can only be called by the contract owner or the contract itself\\r\\n        @param _receiver Address receiving the tokens\\r\\n        @param _amount Amount to mint\\r\\n    */\\r\\n    function mint(address _receiver, uint256 _amount) external;\\r\\n\\r\\n    /**\\r\\n        @notice Burns tokens. Can only be called by the contract owner or the contract itself\\r\\n        @param _from Address to burn from\\r\\n        @param _amount Amount to burn\\r\\n    */\\r\\n    function burn(address _from, uint256 _amount) external;\\r\\n\\r\\n    /**\\r\\n        @notice Sets up the metadata and initial supply. Can be called by the contract owner\\r\\n        @param _initialSupply Initial supply of the token\\r\\n        @param _name Name of the token\\r\\n        @param _symbol Symbol of the token\\r\\n    */\\r\\n    function initialize(\\r\\n        uint256 _initialSupply,\\r\\n        string memory _name,\\r\\n        string memory _symbol\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n        @notice Set the token name of the contract. Can only be called by the contract owner or the contract itself\\r\\n        @param _name New token name\\r\\n    */\\r\\n    function setName(string calldata _name) external;\\r\\n\\r\\n    /**\\r\\n        @notice Set the token symbol of the contract. Can only be called by the contract owner or the contract itself\\r\\n        @param _symbol New token symbol\\r\\n    */\\r\\n    function setSymbol(string calldata _symbol) external;\\r\\n    \\r\\n    /**\\r\\n        @notice Increase the amount of tokens another address can spend\\r\\n        @param _spender Spender\\r\\n        @param _amount Amount to increase by\\r\\n    */\\r\\n    function increaseApproval(address _spender, uint256 _amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n        @notice Decrease the amount of tokens another address can spend\\r\\n        @param _spender Spender\\r\\n        @param _amount Amount to decrease by\\r\\n    */\\r\\n    function decreaseApproval(address _spender, uint256 _amount) external returns (bool);\\r\\n\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/ICallFacet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.1;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\ninterface ICallFacet {\\r\\n\\r\\n    event CallerAdded(address indexed caller);\\r\\n    event CallerRemoved(address indexed caller);\\r\\n    event Call(address indexed caller, address indexed target, bytes data, uint256 value);\\r\\n\\r\\n    /**\\r\\n        @notice Lets whitelisted callers execute a batch of arbitrary calls from the pool. Reverts if one of the calls fails\\r\\n        @param _targets Array of addresses of targets to call\\r\\n        @param _calldata Array of calldata for each call\\r\\n        @param _values Array of amounts of ETH to send with the call\\r\\n    */\\r\\n    function call(\\r\\n        address[] memory _targets,\\r\\n        bytes[] memory _calldata,\\r\\n        uint256[] memory _values\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n        @notice Lets whitelisted callers execute a batch of arbitrary calls from the pool without sending any Ether. Reverts if one of the calls fail\\r\\n        @param _targets Array of addresses of targets to call\\r\\n        @param _calldata Array of calldata for each call\\r\\n    */\\r\\n    function callNoValue(\\r\\n        address[] memory _targets,\\r\\n        bytes[] memory _calldata\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n        @notice Lets whitelisted callers execute a single arbitrary call from the pool. Reverts if the call fails\\r\\n        @param _target Address of the target to call\\r\\n        @param _calldata Calldata of the call\\r\\n        @param _value Amount of ETH to send with the call\\r\\n    */\\r\\n    function singleCall(\\r\\n        address _target,\\r\\n        bytes calldata _calldata,\\r\\n        uint256 _value\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n        @notice Add a whitelisted caller. Can only be called by the contract owner\\r\\n        @param _caller Caller to add\\r\\n    */\\r\\n    function addCaller(address _caller) external;\\r\\n\\r\\n    /**\\r\\n        @notice Remove a whitelisted caller. Can only be called by the contract owner\\r\\n    */\\r\\n    function removeCaller(address _caller) external;\\r\\n\\r\\n    /**\\r\\n        @notice Checks if an address is a whitelisted caller\\r\\n        @param _caller Address to check\\r\\n        @return If the address is whitelisted\\r\\n    */\\r\\n    function canCall(address _caller) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n        @notice Get all whitelisted callers\\r\\n        @return Array of whitelisted callers\\r\\n    */\\r\\n    function getCallers() external view returns (address[] memory);\\r\\n}\"\r\n    },\r\n    \"contracts/callManagers/LendingManager/StakeSushi.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma experimental ABIEncoderV2;\\r\\npragma solidity ^0.7.1;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"../../interfaces/ILendingLogic.sol\\\";\\r\\nimport \\\"./LendingRegistry.sol\\\";\\r\\nimport \\\"../../interfaces/IXSushi.sol\\\";\\r\\n\\r\\ncontract StakingLogicSushi is ILendingLogic {\\r\\n\\r\\n    LendingRegistry public lendingRegistry;\\r\\n    bytes32 public immutable protocolKey;\\r\\n\\r\\n    constructor(address _lendingRegistry, bytes32 _protocolKey) {\\r\\n        require(_lendingRegistry != address(0), \\\"INVALID_LENDING_REGISTRY\\\");\\r\\n        lendingRegistry = LendingRegistry(_lendingRegistry);\\r\\n        protocolKey = _protocolKey;\\r\\n    }\\r\\n\\r\\n    function getAPRFromWrapped(address _token) public view override returns(uint256) {\\r\\n        return uint256(-1);\\r\\n    }\\r\\n\\r\\n    function getAPRFromUnderlying(address _token) external view override returns(uint256) {\\r\\n        return uint256(-1);\\r\\n    }\\r\\n\\r\\n    function lend(address _underlying, uint256 _amount) external view override returns(address[] memory targets, bytes[] memory data) {\\r\\n        IERC20 underlying = IERC20(_underlying);\\r\\n\\r\\n        targets = new address[](3);\\r\\n        data = new bytes[](3);\\r\\n\\r\\n\\r\\n        address SushiBar = lendingRegistry.underlyingToProtocolWrapped(_underlying, protocolKey);\\r\\n\\r\\n        // zero out approval to be sure\\r\\n        targets[0] = _underlying;\\r\\n        data[0] = abi.encodeWithSelector(underlying.approve.selector, SushiBar, 0);\\r\\n\\r\\n        // Set approval\\r\\n        targets[1] = _underlying;\\r\\n        data[1] = abi.encodeWithSelector(underlying.approve.selector, SushiBar, _amount);\\r\\n\\r\\n        // Stake in Sushi Bar\\r\\n        targets[2] = SushiBar;\\r\\n\\r\\n        data[2] =  abi.encodeWithSelector(IXSushi.enter.selector, _amount);\\r\\n\\r\\n        return(targets, data);\\r\\n    }\\r\\n    function unlend(address _wrapped, uint256 _amount) external view override returns(address[] memory targets, bytes[] memory data) {\\r\\n        targets = new address[](1);\\r\\n        data = new bytes[](1);\\r\\n\\r\\n        targets[0] = _wrapped;\\r\\n        data[0] = abi.encodeWithSelector(IXSushi.leave.selector, _amount);\\r\\n\\r\\n        return(targets, data);\\r\\n    }\\r\\n\\r\\n    function exchangeRate(address _wrapped) external view override returns(uint256) {\\r\\n        return _exchangeRate(_wrapped);\\r\\n    }\\r\\n\\r\\n    function exchangeRateView(address _wrapped) external view override returns(uint256) {\\r\\n        return _exchangeRate(_wrapped);\\r\\n    }\\r\\n\\r\\n    function _exchangeRate(address _wrapped) internal view returns(uint256) {\\r\\n        IERC20 xToken = IERC20(_wrapped);\\r\\n        IERC20 token = IERC20(lendingRegistry.wrappedToUnderlying(_wrapped));\\r\\n        return token.balanceOf(_wrapped) * 10**18 / xToken.totalSupply();\\r\\n    }\\r\\n\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IXSushi.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma experimental ABIEncoderV2;\\r\\npragma solidity ^0.7.1;\\r\\n\\r\\ninterface IXSushi {\\r\\n    function enter(uint256 _amount) external;\\r\\n    function leave(uint256 _share) external;\\r\\n}\"\r\n    },\r\n    \"contracts/callManagers/LendingManager/StakingLogicYGov.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma experimental ABIEncoderV2;\\r\\npragma solidity ^0.7.1;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"../../interfaces/ILendingLogic.sol\\\";\\r\\nimport \\\"./LendingRegistry.sol\\\";\\r\\nimport \\\"../../interfaces/IYVault.sol\\\";\\r\\n\\r\\ncontract StakingLogicYGov is ILendingLogic {\\r\\n\\r\\n    LendingRegistry public lendingRegistry;\\r\\n    bytes32 public immutable protocolKey;\\r\\n\\r\\n    constructor(address _lendingRegistry, bytes32 _protocolKey) {\\r\\n        require(_lendingRegistry != address(0), \\\"INVALID_LENDING_REGISTRY\\\");\\r\\n        lendingRegistry = LendingRegistry(_lendingRegistry);\\r\\n        protocolKey = _protocolKey;\\r\\n    }\\r\\n\\r\\n    function lend(address _underlying, uint256 _amount) external view override returns(address[] memory targets, bytes[] memory data) {\\r\\n        IERC20 underlying = IERC20(_underlying);\\r\\n\\r\\n        targets = new address[](3);\\r\\n        data = new bytes[](3);\\r\\n\\r\\n\\r\\n        address YGov = lendingRegistry.underlyingToProtocolWrapped(_underlying, protocolKey);\\r\\n\\r\\n        // zero out approval to be sure\\r\\n        targets[0] = _underlying;\\r\\n        data[0] = abi.encodeWithSelector(underlying.approve.selector, YGov, 0);\\r\\n\\r\\n        // Set approval\\r\\n        targets[1] = _underlying;\\r\\n        data[1] = abi.encodeWithSelector(underlying.approve.selector, YGov, _amount);\\r\\n\\r\\n        // Stake in Sushi Bar\\r\\n        targets[2] = YGov;\\r\\n\\r\\n        data[2] =  abi.encodeWithSelector(IYVault.deposit.selector, _amount);\\r\\n\\r\\n        return(targets, data);\\r\\n    }\\r\\n    function unlend(address _wrapped, uint256 _amount) external view override returns(address[] memory targets, bytes[] memory data) {\\r\\n        targets = new address[](1);\\r\\n        data = new bytes[](1);\\r\\n\\r\\n        targets[0] = _wrapped;\\r\\n        data[0] = abi.encodeWithSelector(IYVault.withdraw.selector, _amount);\\r\\n\\r\\n        return(targets, data);\\r\\n    }\\r\\n\\r\\n    function getAPRFromUnderlying(address _token) external view override returns(uint256) {\\r\\n        return uint256(-1);\\r\\n    }\\r\\n\\r\\n    function getAPRFromWrapped(address _token) external view override returns(uint256) {\\r\\n        return uint256(-1);\\r\\n    }\\r\\n    \\r\\n    function exchangeRate(address _wrapped) external view override returns(uint256) {\\r\\n        return IYVault(_wrapped).getPricePerFullShare();\\r\\n    }\\r\\n\\r\\n    function exchangeRateView(address _wrapped) external view override returns(uint256) {\\r\\n        return IYVault(_wrapped).getPricePerFullShare();\\r\\n    }\\r\\n\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IYVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma experimental ABIEncoderV2;\\r\\npragma solidity ^0.7.1;\\r\\n\\r\\ninterface IYVault {\\r\\n    function depositAll() external;\\r\\n    function deposit(uint _amount) external;\\r\\n    function withdraw(uint _shares) external;\\r\\n    function getPricePerFullShare() external view returns (uint);\\r\\n}\"\r\n    },\r\n    \"contracts/callManagers/RSIManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma experimental ABIEncoderV2;\\r\\npragma solidity ^0.7.1;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"../interfaces/ISynthetix.sol\\\";\\r\\nimport \\\"../interfaces/IExperiPie.sol\\\";\\r\\nimport \\\"../interfaces/IPriceReferenceFeed.sol\\\";\\r\\n\\r\\ncontract RSISynthetixManager {\\r\\n\\r\\n    address public immutable assetShort;\\r\\n    address public immutable assetLong;\\r\\n    bytes32 public immutable assetShortKey;\\r\\n    bytes32 public immutable assetLongKey;\\r\\n\\r\\n    // Value under which to go long (30 * 10**18 == 30)\\r\\n    int256 public immutable rsiBottom;\\r\\n    // Value under which to go short\\r\\n    int256 public immutable rsiTop;\\r\\n\\r\\n    IPriceReferenceFeed public immutable priceFeed;\\r\\n    IExperiPie public immutable basket;\\r\\n    ISynthetix public immutable synthetix;\\r\\n\\r\\n    struct RoundData {\\r\\n        uint80 roundId;\\r\\n        int256 answer;\\r\\n        uint256 startedAt; \\r\\n        uint256 updatedAt; \\r\\n        uint80 answeredInRound;\\r\\n    }\\r\\n\\r\\n    event Rebalanced(address indexed basket, address indexed fromToken, address indexed toToken);\\r\\n\\r\\n    constructor(\\r\\n        address _assetShort,\\r\\n        address _assetLong,\\r\\n        bytes32 _assetShortKey,\\r\\n        bytes32 _assetLongKey,\\r\\n        int256 _rsiBottom,\\r\\n        int256 _rsiTop,\\r\\n        address _priceFeed,\\r\\n        address _basket,\\r\\n        address _synthetix\\r\\n    ) {\\r\\n        assetShort = _assetShort;\\r\\n        assetLong = _assetLong;\\r\\n        assetShortKey = _assetShortKey;\\r\\n        assetLongKey = _assetLongKey;\\r\\n\\r\\n        require(_assetShort != address(0), \\\"INVALID_ASSET_SHORT\\\");\\r\\n        require(_assetLong != address(0), \\\"INVALID_ASSET_LONG\\\");\\r\\n        require(_assetShortKey != bytes32(0), \\\"INVALID_ASSET_SHORT_KEY\\\");\\r\\n        require(_assetLongKey != bytes32(0), \\\"INVALID_ASSET_LONG_KEY\\\");\\r\\n\\r\\n        require(_rsiBottom < _rsiTop, \\\"RSI bottom should be bigger than RSI top\\\");\\r\\n        require(_rsiBottom > 0, \\\"RSI bottom should be bigger than 0\\\");\\r\\n        require(_rsiTop < 100 * 10**18, \\\"RSI top should be less than 100\\\");\\r\\n\\r\\n        require(_priceFeed != address(0), \\\"INVALID_PRICE_FEED\\\");\\r\\n        require(_basket != address(0), \\\"INVALID_BASKET\\\");\\r\\n        require(_synthetix != address(0), \\\"INVALID_SYNTHETIX\\\");\\r\\n\\r\\n        rsiBottom = _rsiBottom;\\r\\n        rsiTop = _rsiTop;\\r\\n\\r\\n        priceFeed = IPriceReferenceFeed(_priceFeed);\\r\\n        basket = IExperiPie(_basket);\\r\\n        synthetix = ISynthetix(_synthetix);\\r\\n    }\\r\\n\\r\\n\\r\\n    function rebalance() external {\\r\\n        RoundData memory roundData = readLatestRound();\\r\\n        require(roundData.updatedAt > 0, \\\"Round not complete\\\");\\r\\n\\r\\n        if(roundData.answer <= rsiBottom) {\\r\\n            // long\\r\\n            long();\\r\\n            return;\\r\\n        } else if(roundData.answer >= rsiTop) {\\r\\n            // Short\\r\\n            short();\\r\\n            return;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function long() internal {\\r\\n        IERC20 currentToken = IERC20(getCurrentToken());\\r\\n        require(address(currentToken) == assetShort, \\\"Can only long when short\\\");\\r\\n\\r\\n        uint256 currentTokenBalance = currentToken.balanceOf(address(basket));\\r\\n\\r\\n        address[] memory targets = new address[](4);\\r\\n        bytes[] memory data = new bytes[](4);\\r\\n        uint256[] memory values = new uint256[](4);\\r\\n\\r\\n        // lock pool\\r\\n        targets[0] = address(basket);\\r\\n        // lock for 30\\r\\n        data[0] = setLockData(block.number + 30);\\r\\n\\r\\n        // Swap on synthetix\\r\\n        targets[1] = address(synthetix);\\r\\n        data[1] = abi.encodeWithSelector(synthetix.exchange.selector, assetShortKey, currentTokenBalance, assetLongKey);\\r\\n\\r\\n\\r\\n        // Remove current token\\r\\n        targets[2] = address(basket);\\r\\n        data[2] = abi.encodeWithSelector(basket.removeToken.selector, assetShort);\\r\\n\\r\\n        // Add new token\\r\\n        targets[3] = address(basket);\\r\\n        data[3] = abi.encodeWithSelector(basket.addToken.selector, assetLong);\\r\\n\\r\\n        // Do calls\\r\\n        basket.call(targets, data, values);\\r\\n\\r\\n        // sanity checks\\r\\n        require(currentToken.balanceOf(address(basket)) == 0, \\\"Current token balance should be zero\\\");\\r\\n        require(IERC20(assetLong).balanceOf(address(basket)) >= 10**6, \\\"Amount too small\\\");\\r\\n\\r\\n        emit Rebalanced(address(basket), assetShort, assetLong);\\r\\n    }\\r\\n\\r\\n    function short() internal {\\r\\n        IERC20 currentToken = IERC20(getCurrentToken());\\r\\n        require(address(currentToken) == assetLong, \\\"Can only short when long\\\");\\r\\n\\r\\n        uint256 currentTokenBalance = currentToken.balanceOf(address(basket));\\r\\n\\r\\n        address[] memory targets = new address[](4);\\r\\n        bytes[] memory data = new bytes[](4);\\r\\n        uint256[] memory values = new uint256[](4);\\r\\n\\r\\n        // lock pool\\r\\n        targets[0] = address(basket);\\r\\n        // lock for 30\\r\\n        data[0] = setLockData(block.number + 30);\\r\\n\\r\\n        // Swap on synthetix\\r\\n        targets[1] = address(synthetix);\\r\\n        data[1] = abi.encodeWithSelector(synthetix.exchange.selector, assetLongKey, currentTokenBalance, assetShortKey);\\r\\n\\r\\n        // Remove current token\\r\\n        targets[2] = address(basket);\\r\\n        data[2] = abi.encodeWithSelector(basket.removeToken.selector, assetLong);\\r\\n\\r\\n        // Add new token\\r\\n        targets[3] = address(basket);\\r\\n        data[3] = abi.encodeWithSelector(basket.addToken.selector, assetShort);\\r\\n\\r\\n        // Do calls\\r\\n        basket.call(targets, data, values);\\r\\n\\r\\n        // sanity checks\\r\\n        require(currentToken.balanceOf(address(basket)) == 0, \\\"Current token balance should be zero\\\");\\r\\n        \\r\\n        // Catched by addToken in the basket itself\\r\\n        // require(IERC20(assetShort).balanceOf(address(basket)) >= 10**6, \\\"Amount too small\\\");\\r\\n\\r\\n        emit Rebalanced(address(basket), assetShort, assetLong);\\r\\n    }\\r\\n\\r\\n    function getCurrentToken() public view returns(address) {\\r\\n        address[] memory tokens = basket.getTokens();\\r\\n        require(tokens.length == 1, \\\"RSI Pie can only have 1 asset at the time\\\");\\r\\n        return tokens[0];\\r\\n    }\\r\\n\\r\\n\\r\\n    function setLockData(uint256 _block) internal returns(bytes memory data) {\\r\\n        bytes memory data = abi.encodeWithSelector(basket.setLock.selector, _block);\\r\\n        return data;\\r\\n    }\\r\\n    function readRound(uint256 _round) public view returns(RoundData memory data) {\\r\\n        (\\r\\n            uint80 roundId, \\r\\n            int256 answer, \\r\\n            uint256 startedAt, \\r\\n            uint256 updatedAt, \\r\\n            uint80 answeredInRound\\r\\n        ) = priceFeed.getRoundData(uint80(_round));\\r\\n\\r\\n        return RoundData({\\r\\n            roundId: roundId,\\r\\n            answer: answer,\\r\\n            startedAt: startedAt,\\r\\n            updatedAt: updatedAt,\\r\\n            answeredInRound: answeredInRound\\r\\n        });\\r\\n    }\\r\\n\\r\\n    function readLatestRound() public view returns(RoundData memory data) {\\r\\n        (\\r\\n            uint80 roundId, \\r\\n            int256 answer, \\r\\n            uint256 startedAt, \\r\\n            uint256 updatedAt, \\r\\n            uint80 answeredInRound\\r\\n        ) = priceFeed.latestRoundData();\\r\\n\\r\\n        return RoundData({\\r\\n            roundId: roundId,\\r\\n            answer: answer,\\r\\n            startedAt: startedAt,\\r\\n            updatedAt: updatedAt,\\r\\n            answeredInRound: answeredInRound\\r\\n        });\\r\\n    }\\r\\n\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/ISynthetix.sol\": {\r\n      \"content\": \"\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.1;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\ninterface ISynthetix {\\r\\n    function exchange(bytes32 sourceCurrencyKey, uint256 sourceAmount, bytes32 destinationCurrencyKey) external;\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IPriceReferenceFeed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma experimental ABIEncoderV2;\\r\\npragma solidity ^0.7.1;\\r\\n\\r\\n\\r\\ninterface IPriceReferenceFeed {\\r\\n    function getRoundData(uint80 _roundId) external view returns (\\r\\n        uint80 roundId, \\r\\n        int256 answer, \\r\\n        uint256 startedAt, \\r\\n        uint256 updatedAt, \\r\\n        uint80 answeredInRound\\r\\n    );\\r\\n    function latestRoundData() external view returns (\\r\\n        uint80 roundId, \\r\\n        int256 answer, \\r\\n        uint256 startedAt, \\r\\n        uint256 updatedAt, \\r\\n        uint80 answeredInRound\\r\\n    );\\r\\n}\"\r\n    },\r\n    \"contracts/callManagers/TokenListUpdater.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma experimental ABIEncoderV2;\\r\\npragma solidity ^0.7.1;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\nimport \\\"../interfaces/IExperiPie.sol\\\";\\r\\n\\r\\ncontract TokenListUpdater is Ownable, ReentrancyGuard {\\r\\n\\r\\n    uint256 public constant MIN_AMOUNT = 10**6;\\r\\n\\r\\n    function update(address _pie, address[] calldata _tokens) onlyOwner nonReentrant external {\\r\\n        IExperiPie pie = IExperiPie(_pie);\\r\\n\\r\\n        for(uint256 i = 0; i < _tokens.length; i ++) {\\r\\n            uint256 tokenBalance = pie.balance(_tokens[i]);\\r\\n            \\r\\n            if(tokenBalance >= MIN_AMOUNT && !pie.getTokenInPool(_tokens[i])) {\\r\\n                //if min amount reached and not already in pool\\r\\n                bytes memory data = abi.encodeWithSelector(pie.addToken.selector, _tokens[i]);\\r\\n                pie.singleCall(address(pie), data, 0);\\r\\n            } else if(tokenBalance < MIN_AMOUNT && pie.getTokenInPool(_tokens[i])) {\\r\\n                // if smaller than min amount and in pool\\r\\n                bytes memory data = abi.encodeWithSelector(pie.removeToken.selector, _tokens[i]);\\r\\n                pie.singleCall(address(pie), data, 0);\\r\\n            }\\r\\n        }        \\r\\n    }\\r\\n\\r\\n}\"\r\n    },\r\n    \"contracts/facets/Basket/BasketFacet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.1;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\nimport \\\"../../interfaces/IBasketFacet.sol\\\";\\r\\nimport \\\"../ERC20/LibERC20Storage.sol\\\";\\r\\nimport \\\"../ERC20/LibERC20.sol\\\";\\r\\nimport \\\"../shared/Reentry/ReentryProtection.sol\\\";\\r\\nimport \\\"../shared/Access/CallProtection.sol\\\";\\r\\nimport \\\"./LibBasketStorage.sol\\\";\\r\\n\\r\\ncontract BasketFacet is ReentryProtection, CallProtection, IBasketFacet {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    uint256 public constant MIN_AMOUNT = 10**6;\\r\\n    uint256 public constant MAX_ENTRY_FEE = 10**17; // 10%\\r\\n    uint256 public constant MAX_EXIT_FEE = 10**17; // 10%\\r\\n    uint256 public constant MAX_ANNUAL_FEE = 10**17; // 10%\\r\\n    uint256 public constant HUNDRED_PERCENT = 10 ** 18;\\r\\n\\r\\n    // Assuming a block gas limit of 12M this allows for a gas consumption per token of roughly 333k allowing 2M of overhead for addtional operations\\r\\n    uint256 public constant MAX_TOKENS = 30;\\r\\n\\r\\n    function addToken(address _token) external override protectedCall {\\r\\n        LibBasketStorage.BasketStorage storage bs = LibBasketStorage.basketStorage();\\r\\n        require(!bs.inPool[_token], \\\"TOKEN_ALREADY_IN_POOL\\\");\\r\\n        require(bs.tokens.length < MAX_TOKENS, \\\"TOKEN_LIMIT_REACHED\\\");\\r\\n        // Enforce minimum to avoid rounding errors; (Minimum value is the same as in Balancer)\\r\\n        require(balance(_token) >= MIN_AMOUNT, \\\"BALANCE_TOO_SMALL\\\");\\r\\n\\r\\n        bs.inPool[_token] = true;\\r\\n        bs.tokens.push(IERC20(_token));\\r\\n\\r\\n        emit TokenAdded(_token);\\r\\n    }\\r\\n\\r\\n    function removeToken(address _token) external override protectedCall {\\r\\n        LibBasketStorage.BasketStorage storage bs = LibBasketStorage.basketStorage();\\r\\n\\r\\n        require(bs.inPool[_token], \\\"TOKEN_NOT_IN_POOL\\\");\\r\\n\\r\\n        bs.inPool[_token] = false;\\r\\n\\r\\n        // remove token from array\\r\\n        for(uint256 i; i < bs.tokens.length; i ++) {\\r\\n            if(address(bs.tokens[i]) == _token) {\\r\\n                bs.tokens[i] = bs.tokens[bs.tokens.length - 1];\\r\\n                bs.tokens.pop();\\r\\n                emit TokenRemoved(_token);\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setEntryFee(uint256 _fee) external override protectedCall {\\r\\n        require(_fee <= MAX_ENTRY_FEE, \\\"FEE_TOO_BIG\\\");\\r\\n        LibBasketStorage.basketStorage().entryFee = _fee;\\r\\n        emit EntryFeeSet(_fee);\\r\\n    }\\r\\n\\r\\n    function getEntryFee() external view override returns(uint256) {\\r\\n        return LibBasketStorage.basketStorage().entryFee;\\r\\n    }\\r\\n\\r\\n    function setExitFee(uint256 _fee) external override protectedCall {\\r\\n        require(_fee <= MAX_EXIT_FEE, \\\"FEE_TOO_BIG\\\");\\r\\n        LibBasketStorage.basketStorage().exitFee = _fee;\\r\\n        emit ExitFeeSet(_fee);\\r\\n    }\\r\\n\\r\\n    function getExitFee() external view override returns(uint256) {\\r\\n        return LibBasketStorage.basketStorage().exitFee;\\r\\n    }\\r\\n\\r\\n    function setAnnualizedFee(uint256 _fee) external override protectedCall {\\r\\n        chargeOutstandingAnnualizedFee();\\r\\n        require(_fee <= MAX_ANNUAL_FEE, \\\"FEE_TOO_BIG\\\");\\r\\n        LibBasketStorage.basketStorage().annualizedFee = _fee;\\r\\n        emit AnnualizedFeeSet(_fee);\\r\\n    }\\r\\n\\r\\n    function getAnnualizedFee() external view override returns(uint256) {\\r\\n        return LibBasketStorage.basketStorage().annualizedFee;\\r\\n    }\\r\\n\\r\\n    function setFeeBeneficiary(address _beneficiary) external override protectedCall {\\r\\n        chargeOutstandingAnnualizedFee();\\r\\n        LibBasketStorage.basketStorage().feeBeneficiary = _beneficiary;\\r\\n        emit FeeBeneficiarySet(_beneficiary);\\r\\n    }\\r\\n\\r\\n    function getFeeBeneficiary() external view override returns(address) {\\r\\n        return LibBasketStorage.basketStorage().feeBeneficiary;\\r\\n    }\\r\\n\\r\\n    function setEntryFeeBeneficiaryShare(uint256 _share) external override protectedCall {\\r\\n        require(_share <= HUNDRED_PERCENT, \\\"FEE_SHARE_TOO_BIG\\\");\\r\\n        LibBasketStorage.basketStorage().entryFeeBeneficiaryShare = _share;\\r\\n        emit EntryFeeBeneficiaryShareSet(_share);\\r\\n    }\\r\\n\\r\\n    function getEntryFeeBeneficiaryShare() external view override returns(uint256) {\\r\\n        return LibBasketStorage.basketStorage().entryFeeBeneficiaryShare;\\r\\n    }\\r\\n\\r\\n    function setExitFeeBeneficiaryShare(uint256 _share) external override protectedCall {\\r\\n        require(_share <= HUNDRED_PERCENT, \\\"FEE_SHARE_TOO_BIG\\\");\\r\\n        LibBasketStorage.basketStorage().exitFeeBeneficiaryShare = _share;\\r\\n        emit ExitFeeBeneficiaryShareSet(_share);\\r\\n    }\\r\\n\\r\\n    function getExitFeeBeneficiaryShare() external view override returns(uint256) {\\r\\n        return LibBasketStorage.basketStorage().exitFeeBeneficiaryShare;\\r\\n    }\\r\\n\\r\\n\\r\\n    function joinPool(uint256 _amount) external override noReentry {\\r\\n        require(!this.getLock(), \\\"POOL_LOCKED\\\");\\r\\n        chargeOutstandingAnnualizedFee();\\r\\n        LibBasketStorage.BasketStorage storage bs = LibBasketStorage.basketStorage();\\r\\n        uint256 totalSupply = LibERC20Storage.erc20Storage().totalSupply;\\r\\n        require(totalSupply.add(_amount) <= this.getCap(), \\\"MAX_POOL_CAP_REACHED\\\");\\r\\n\\r\\n        uint256 feeAmount = _amount.mul(bs.entryFee).div(10**18);\\r\\n\\r\\n        for(uint256 i; i < bs.tokens.length; i ++) {\\r\\n            IERC20 token = bs.tokens[i];\\r\\n            uint256 tokenAmount = balance(address(token)).mul(_amount.add(feeAmount)).div(totalSupply);\\r\\n            require(tokenAmount != 0, \\\"AMOUNT_TOO_SMALL\\\");\\r\\n            token.safeTransferFrom(msg.sender, address(this), tokenAmount);\\r\\n        }\\r\\n\\r\\n        // If there is any fee that should go to the beneficiary mint it\\r\\n        if(\\r\\n            feeAmount != 0 &&\\r\\n            bs.entryFeeBeneficiaryShare != 0 &&\\r\\n            bs.feeBeneficiary != address(0)\\r\\n        ) {\\r\\n            uint256 feeBeneficiaryShare = feeAmount.mul(bs.entryFeeBeneficiaryShare).div(10**18);\\r\\n            if(feeBeneficiaryShare != 0) {\\r\\n                LibERC20.mint(bs.feeBeneficiary, feeBeneficiaryShare);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        LibERC20.mint(msg.sender, _amount);\\r\\n        emit PoolJoined(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    // Must be overwritten to withdraw from strategies\\r\\n    function exitPool(uint256 _amount) external override virtual noReentry {\\r\\n        require(!this.getLock(), \\\"POOL_LOCKED\\\");\\r\\n        chargeOutstandingAnnualizedFee();\\r\\n        LibBasketStorage.BasketStorage storage bs = LibBasketStorage.basketStorage();\\r\\n        uint256 totalSupply = LibERC20Storage.erc20Storage().totalSupply;\\r\\n\\r\\n        uint256 feeAmount = _amount.mul(bs.exitFee).div(10**18);\\r\\n\\r\\n        for(uint256 i; i < bs.tokens.length; i ++) {\\r\\n            IERC20 token = bs.tokens[i];\\r\\n            uint256 tokenBalance = balance(address(token));\\r\\n            // redeem less tokens if there is an exit fee\\r\\n            uint256 tokenAmount = tokenBalance.mul(_amount.sub(feeAmount)).div(totalSupply);\\r\\n            require(tokenBalance.sub(tokenAmount) >= MIN_AMOUNT, \\\"TOKEN_BALANCE_TOO_LOW\\\");\\r\\n            token.safeTransfer(msg.sender, tokenAmount);\\r\\n        }\\r\\n\\r\\n         // If there is any fee that should go to the beneficiary mint it\\r\\n        if(\\r\\n            feeAmount != 0 &&\\r\\n            bs.exitFeeBeneficiaryShare != 0 &&\\r\\n            bs.feeBeneficiary != address(0)\\r\\n        ) {\\r\\n            uint256 feeBeneficiaryShare = feeAmount.mul(bs.exitFeeBeneficiaryShare).div(10**18);\\r\\n            if(feeBeneficiaryShare != 0) {\\r\\n                LibERC20.mint(bs.feeBeneficiary, feeBeneficiaryShare);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        require(totalSupply.sub(_amount) >= MIN_AMOUNT, \\\"POOL_TOKEN_BALANCE_TOO_LOW\\\");\\r\\n        LibERC20.burn(msg.sender, _amount);\\r\\n        emit PoolExited(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n\\r\\n    function calcOutStandingAnnualizedFee() public view override returns(uint256) {\\r\\n        LibBasketStorage.BasketStorage storage bs = LibBasketStorage.basketStorage();\\r\\n        uint256 totalSupply = LibERC20Storage.erc20Storage().totalSupply;\\r\\n\\r\\n        uint256 lastFeeClaimed = bs.lastAnnualizedFeeClaimed;\\r\\n        uint256 annualizedFee = bs.annualizedFee;\\r\\n\\r\\n        if(\\r\\n            annualizedFee == 0 ||\\r\\n            bs.feeBeneficiary == address(0) ||\\r\\n            lastFeeClaimed == 0\\r\\n        ) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 timePassed = block.timestamp.sub(lastFeeClaimed);\\r\\n\\r\\n        return totalSupply.mul(annualizedFee).div(10**18).mul(timePassed).div(365 days);\\r\\n    }\\r\\n\\r\\n    function chargeOutstandingAnnualizedFee() public override {\\r\\n        uint256 outStandingFee = calcOutStandingAnnualizedFee();\\r\\n        LibBasketStorage.BasketStorage storage bs = LibBasketStorage.basketStorage();\\r\\n\\r\\n        bs.lastAnnualizedFeeClaimed = block.timestamp;\\r\\n\\r\\n        // if there is any fee to mint and the beneficiary is set\\r\\n        // note: feeBeneficiary is already checked in calc function\\r\\n        if(\\r\\n            outStandingFee != 0\\r\\n        ) {\\r\\n            LibERC20.mint(bs.feeBeneficiary, outStandingFee);\\r\\n        }\\r\\n\\r\\n        emit FeeCharged(outStandingFee);\\r\\n    }\\r\\n\\r\\n    // returns true when locked\\r\\n    function getLock() external view override returns(bool) {\\r\\n        LibBasketStorage.BasketStorage storage bs = LibBasketStorage.basketStorage();\\r\\n        return bs.lockBlock == 0 || bs.lockBlock >= block.number;\\r\\n    }\\r\\n\\r\\n    function getTokenInPool(address _token) external view override returns(bool) {\\r\\n        return LibBasketStorage.basketStorage().inPool[_token];\\r\\n    }\\r\\n\\r\\n    function getLockBlock() external view override returns(uint256) {\\r\\n        return LibBasketStorage.basketStorage().lockBlock;\\r\\n    }\\r\\n\\r\\n    // lock up to and including _lock blocknumber\\r\\n    function setLock(uint256 _lock) external override protectedCall {\\r\\n        LibBasketStorage.basketStorage().lockBlock = _lock;\\r\\n        emit LockSet(_lock);\\r\\n    }\\r\\n\\r\\n    function setCap(uint256 _maxCap) external override protectedCall {\\r\\n        LibBasketStorage.basketStorage().maxCap = _maxCap;\\r\\n        emit CapSet(_maxCap);\\r\\n    }\\r\\n\\r\\n    // Seperated balance function to allow yearn like strategies to be hooked up by inheriting from this contract and overriding\\r\\n    function balance(address _token) public view override returns(uint256) {\\r\\n        return IERC20(_token).balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    function getTokens() external view override returns (address[] memory) {\\r\\n        IERC20[] memory tokens = LibBasketStorage.basketStorage().tokens;\\r\\n        address[] memory result = new address[](tokens.length);\\r\\n\\r\\n        for(uint256 i = 0; i < tokens.length; i ++) {\\r\\n            result[i] = address(tokens[i]);\\r\\n        }\\r\\n\\r\\n        return(result);\\r\\n    }\\r\\n\\r\\n    function getCap() external view override returns(uint256){\\r\\n        return LibBasketStorage.basketStorage().maxCap;\\r\\n    }\\r\\n\\r\\n    function calcTokensForAmount(uint256 _amount) external view override returns (address[] memory tokens, uint256[] memory amounts) {\\r\\n        LibBasketStorage.BasketStorage storage bs = LibBasketStorage.basketStorage();\\r\\n        uint256 totalSupply = LibERC20Storage.erc20Storage().totalSupply.add(calcOutStandingAnnualizedFee());\\r\\n\\r\\n        tokens = new address[](bs.tokens.length);\\r\\n        amounts = new uint256[](bs.tokens.length);\\r\\n\\r\\n        for(uint256 i; i < bs.tokens.length; i ++) {\\r\\n            IERC20 token = bs.tokens[i];\\r\\n            uint256 tokenBalance = balance(address(token));\\r\\n            uint256 tokenAmount = tokenBalance.mul(_amount).div(totalSupply);\\r\\n            // Add entry fee\\r\\n            tokenAmount = tokenAmount.add(tokenAmount.mul(bs.entryFee).div(10**18));\\r\\n\\r\\n            tokens[i] = address(token);\\r\\n            amounts[i] = tokenAmount;\\r\\n        }\\r\\n\\r\\n        return(tokens, amounts);\\r\\n    }\\r\\n\\r\\n    function calcTokensForAmountExit(uint256 _amount) external view override returns (address[] memory tokens, uint256[] memory amounts) {\\r\\n        LibBasketStorage.BasketStorage storage bs = LibBasketStorage.basketStorage();\\r\\n        uint256 feeAmount = _amount.mul(bs.exitFee).div(10**18);\\r\\n        uint256 totalSupply = LibERC20Storage.erc20Storage().totalSupply.add(calcOutStandingAnnualizedFee());\\r\\n\\r\\n        tokens = new address[](bs.tokens.length);\\r\\n        amounts = new uint256[](bs.tokens.length);\\r\\n\\r\\n        for(uint256 i; i < bs.tokens.length; i ++) {\\r\\n            IERC20 token = bs.tokens[i];\\r\\n            uint256 tokenBalance = balance(address(token));\\r\\n            uint256 tokenAmount = tokenBalance.mul(_amount.sub(feeAmount)).div(totalSupply);\\r\\n\\r\\n            tokens[i] = address(token);\\r\\n            amounts[i] = tokenAmount;\\r\\n        }\\r\\n\\r\\n        return(tokens, amounts);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/facets/ERC20/LibERC20Storage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.1;\\r\\n\\r\\nlibrary LibERC20Storage {\\r\\n  bytes32 constant ERC_20_STORAGE_POSITION = keccak256(\\r\\n    // Compatible with pie-smart-pools\\r\\n    \\\"PCToken.storage.location\\\"\\r\\n  );\\r\\n\\r\\n  struct ERC20Storage {\\r\\n    string name;\\r\\n    string symbol;\\r\\n    uint256 totalSupply;\\r\\n    mapping(address => uint256) balances;\\r\\n    mapping(address => mapping(address => uint256)) allowances;\\r\\n  }\\r\\n\\r\\n  function erc20Storage() internal pure returns (ERC20Storage storage es) {\\r\\n    bytes32 position = ERC_20_STORAGE_POSITION;\\r\\n    assembly {\\r\\n      es.slot := position\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/facets/ERC20/LibERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.1;\\r\\n\\r\\nimport \\\"./LibERC20Storage.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\n\\r\\nlibrary LibERC20 {\\r\\n  using SafeMath for uint256;\\r\\n\\r\\n  // Need to include events locally because `emit Interface.Event(params)` does not work\\r\\n  event Transfer(address indexed from, address indexed to, uint256 amount);\\r\\n\\r\\n  function mint(address _to, uint256 _amount) internal {\\r\\n    require(_to != address(0), \\\"INVALID_TO_ADDRESS\\\");\\r\\n\\r\\n    LibERC20Storage.ERC20Storage storage es = LibERC20Storage.erc20Storage();\\r\\n\\r\\n    es.balances[_to] = es.balances[_to].add(_amount);\\r\\n    es.totalSupply = es.totalSupply.add(_amount);\\r\\n    emit Transfer(address(0), _to, _amount);\\r\\n  }\\r\\n\\r\\n  function burn(address _from, uint256 _amount) internal {\\r\\n    LibERC20Storage.ERC20Storage storage es = LibERC20Storage.erc20Storage();\\r\\n\\r\\n    es.balances[_from] = es.balances[_from].sub(_amount);\\r\\n    es.totalSupply = es.totalSupply.sub(_amount);\\r\\n    emit Transfer(_from, address(0), _amount);\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/facets/shared/Reentry/ReentryProtection.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.1;\\r\\n\\r\\nimport \\\"./LibReentryProtectionStorage.sol\\\";\\r\\n\\r\\ncontract ReentryProtection {\\r\\n  modifier noReentry {\\r\\n    // Use counter to only write to storage once\\r\\n    LibReentryProtectionStorage.RPStorage storage s = LibReentryProtectionStorage.rpStorage();\\r\\n    s.lockCounter++;\\r\\n    uint256 lockValue = s.lockCounter;\\r\\n    _;\\r\\n    require(\\r\\n      lockValue == s.lockCounter,\\r\\n      \\\"ReentryProtectionFacet.noReentry: reentry detected\\\"\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/facets/shared/Reentry/LibReentryProtectionStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.1;\\r\\n\\r\\nlibrary LibReentryProtectionStorage {\\r\\n  bytes32 constant REENTRY_STORAGE_POSITION = keccak256(\\r\\n    \\\"diamond.standard.reentry.storage\\\"\\r\\n  );\\r\\n\\r\\n  struct RPStorage {\\r\\n    uint256 lockCounter;\\r\\n  }\\r\\n\\r\\n  function rpStorage() internal pure returns (RPStorage storage bs) {\\r\\n    bytes32 position = REENTRY_STORAGE_POSITION;\\r\\n    assembly {\\r\\n      bs.slot := position\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/facets/shared/Access/CallProtection.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.1;\\r\\n\\r\\nimport \\\"@pie-dao/diamond/contracts/libraries/LibDiamond.sol\\\";\\r\\n\\r\\ncontract CallProtection {\\r\\n    modifier protectedCall() {\\r\\n        require(\\r\\n            msg.sender == LibDiamond.diamondStorage().contractOwner ||\\r\\n            msg.sender == address(this), \\\"NOT_ALLOWED\\\"\\r\\n            // TODO consider allowing whitelisted callers from the callFacet\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"@pie-dao/diamond/contracts/libraries/LibDiamond.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.1;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n/******************************************************************************\\\\\\r\\n* Author: Nick Mudge\\r\\n*\\r\\n* Implementation of Diamond facet.\\r\\n* This is gas optimized by reducing storage reads and storage writes.\\r\\n* This code is as complex as it is to reduce gas costs.\\r\\n/******************************************************************************/\\r\\n\\r\\nimport \\\"../interfaces/IDiamondCut.sol\\\";\\r\\n\\r\\nlibrary LibDiamond {\\r\\n        bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\r\\n\\r\\n    struct DiamondStorage {\\r\\n        // maps function selectors to the facets that execute the functions.\\r\\n        // and maps the selectors to their position in the selectorSlots array.        \\r\\n        // func selector => address facet, selector position\\r\\n        mapping(bytes4 => bytes32) facets;\\r\\n        // array of slots of function selectors.\\r\\n        // each slot holds 8 function selectors.\\r\\n        mapping(uint256 => bytes32) selectorSlots;\\r\\n        // The number of function selectors in selectorSlots\\r\\n        uint16 selectorCount;\\r\\n        // owner of the contract\\r\\n        // Used to query if a contract implements an interface.\\r\\n        // Used to implement ERC-165.\\r\\n        mapping(bytes4 => bool) supportedInterfaces;\\r\\n        // owner of the contract\\r\\n        address contractOwner;\\r\\n    }\\r\\n\\r\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\r\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            ds.slot := position\\r\\n        }\\r\\n    }\\r\\n   \\r\\n   event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n   function setContractOwner(address _newOwner) internal {\\r\\n        DiamondStorage storage ds = diamondStorage();\\r\\n        address previousOwner = ds.contractOwner;\\r\\n        ds.contractOwner = _newOwner;\\r\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\r\\n    }\\r\\n\\r\\n    function contractOwner() internal view returns (address contractOwner_) {\\r\\n        contractOwner_ = diamondStorage().contractOwner;\\r\\n    }\\r\\n\\r\\n    function enforceIsContractOwner() view internal {\\r\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner {\\r\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\r\\n\\r\\n    bytes32 constant CLEAR_ADDRESS_MASK = bytes32(uint256(0xffffffffffffffffffffffff));\\r\\n    bytes32 constant CLEAR_SELECTOR_MASK = bytes32(uint256(0xffffffff << 224));\\r\\n\\r\\n    // Internal function version of diamondCut\\r\\n    // This code is almost the same as the external diamondCut,\\r\\n    // except it is using 'Facet[] memory _diamondCut' instead of\\r\\n    // 'Facet[] calldata _diamondCut'.\\r\\n    // The code is duplicated to prevent copying calldata to memory which\\r\\n    // causes an error for a two dimensional array.\\r\\n    function diamondCut(\\r\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\r\\n        address _init,\\r\\n        bytes memory _calldata\\r\\n    ) internal {\\r\\n        DiamondStorage storage ds = diamondStorage();\\r\\n        uint256 originalSelectorCount = ds.selectorCount;\\r\\n        uint256 selectorCount = originalSelectorCount;\\r\\n        bytes32 selectorSlot;\\r\\n        // Check if last selector slot is not full\\r\\n        if (selectorCount % 8 > 0) {\\r\\n            // get last selectorSlot\\r\\n            selectorSlot = ds.selectorSlots[selectorCount / 8];\\r\\n        }\\r\\n        // loop through diamond cut\\r\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\r\\n            (selectorCount, selectorSlot) = addReplaceRemoveFacetSelectors(\\r\\n                selectorCount,\\r\\n                selectorSlot,\\r\\n                _diamondCut[facetIndex].facetAddress,\\r\\n                _diamondCut[facetIndex].action,\\r\\n                _diamondCut[facetIndex].functionSelectors\\r\\n            );\\r\\n        }\\r\\n        if (selectorCount != originalSelectorCount) {\\r\\n            ds.selectorCount = uint16(selectorCount);\\r\\n        }\\r\\n        // If last selector slot is not full\\r\\n        if (selectorCount % 8 > 0) {\\r\\n            ds.selectorSlots[selectorCount / 8] = selectorSlot;\\r\\n        }\\r\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\r\\n        initializeDiamondCut(_init, _calldata);\\r\\n    }\\r\\n\\r\\n    function addReplaceRemoveFacetSelectors(\\r\\n        uint256 _selectorCount,\\r\\n        bytes32 _selectorSlot,\\r\\n        address _newFacetAddress,\\r\\n        IDiamondCut.FacetCutAction _action,\\r\\n        bytes4[] memory _selectors\\r\\n    ) internal returns (uint256, bytes32) {\\r\\n        DiamondStorage storage ds = diamondStorage();\\r\\n        require(_selectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");        \\r\\n        if (_action == IDiamondCut.FacetCutAction.Add) {\\r\\n            require(_newFacetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\r\\n            enforceHasContractCode(_newFacetAddress, \\\"LibDiamondCut: Add facet has no code\\\");\\r\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; selectorIndex++) {\\r\\n                bytes4 selector = _selectors[selectorIndex];\\r\\n                bytes32 oldFacet = ds.facets[selector];                \\r\\n                require(address(bytes20(oldFacet)) == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\r\\n                // add facet for selector                                \\r\\n                ds.facets[selector] = bytes20(_newFacetAddress) | bytes32(_selectorCount);                \\r\\n                uint256 selectorInSlotPosition = (_selectorCount % 8) * 32;\\r\\n                // clear selector position in slot and add selector\\r\\n                _selectorSlot =\\r\\n                    (_selectorSlot & ~(CLEAR_SELECTOR_MASK >> selectorInSlotPosition)) |\\r\\n                    (bytes32(selector) >> selectorInSlotPosition);\\r\\n                // if slot is full then write it to storage\\r\\n                if (selectorInSlotPosition == 224) {\\r\\n                    ds.selectorSlots[_selectorCount / 8] = _selectorSlot;\\r\\n                    _selectorSlot = 0;\\r\\n                }\\r\\n                _selectorCount++;\\r\\n            }\\r\\n        } else if(_action == IDiamondCut.FacetCutAction.Replace) {\\r\\n            require(_newFacetAddress != address(0), \\\"LibDiamondCut: Replace facet can't be address(0)\\\");\\r\\n            enforceHasContractCode(_newFacetAddress, \\\"LibDiamondCut: Replace facet has no code\\\");\\r\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; selectorIndex++) {\\r\\n                bytes4 selector = _selectors[selectorIndex];\\r\\n                bytes32 oldFacet = ds.facets[selector];  \\r\\n                address oldFacetAddress = address(bytes20(oldFacet));\\r\\n                // only useful if immutable functions exist\\r\\n                require(oldFacetAddress != address(this), \\\"LibDiamondCut: Can't replace immutable function\\\");\\r\\n                require(oldFacetAddress != _newFacetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\r\\n                require(oldFacetAddress != address(0), \\\"LibDiamondCut: Can't replace function that doesn't exist\\\");\\r\\n                // replace old facet address\\r\\n                ds.facets[selector] = (oldFacet & CLEAR_ADDRESS_MASK) | bytes20(_newFacetAddress);\\r\\n            }\\r\\n        } else if(_action == IDiamondCut.FacetCutAction.Remove) {\\r\\n            require(_newFacetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\r\\n            uint256 selectorSlotCount = _selectorCount / 8;\\r\\n            uint256 selectorInSlotIndex = (_selectorCount % 8) - 1;\\r\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; selectorIndex++) {\\r\\n                if (_selectorSlot == 0) {\\r\\n                    // get last selectorSlot\\r\\n                    selectorSlotCount--;\\r\\n                    _selectorSlot = ds.selectorSlots[selectorSlotCount];\\r\\n                    selectorInSlotIndex = 7;\\r\\n                }\\r\\n                bytes4 lastSelector;\\r\\n                uint256 oldSelectorsSlotCount;\\r\\n                uint256 oldSelectorInSlotPosition;\\r\\n                // adding a block here prevents stack too deep error\\r\\n                {\\r\\n                    bytes4 selector = _selectors[selectorIndex];\\r\\n                    bytes32 oldFacet = ds.facets[selector];\\r\\n                    require(address(bytes20(oldFacet)) != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\r\\n                    // only useful if immutable functions exist\\r\\n                    require(address(bytes20(oldFacet)) != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\r\\n                    // replace selector with last selector in ds.facets\\r\\n                    // gets the last selector\\r\\n                    lastSelector = bytes4(_selectorSlot << (selectorInSlotIndex * 32));\\r\\n                    if (lastSelector != selector) {\\r\\n                        // update last selector slot position info\\r\\n                        ds.facets[lastSelector] = (oldFacet & CLEAR_ADDRESS_MASK) | bytes20(ds.facets[lastSelector]);\\r\\n                    }\\r\\n                    delete ds.facets[selector];\\r\\n                    uint256 oldSelectorCount = uint16(uint256(oldFacet));\\r\\n                    oldSelectorsSlotCount = oldSelectorCount / 8;\\r\\n                    oldSelectorInSlotPosition = (oldSelectorCount % 8) * 32;\\r\\n                }\\r\\n                if (oldSelectorsSlotCount != selectorSlotCount) {\\r\\n                    bytes32 oldSelectorSlot = ds.selectorSlots[oldSelectorsSlotCount];\\r\\n                    // clears the selector we are deleting and puts the last selector in its place.\\r\\n                    oldSelectorSlot =\\r\\n                        (oldSelectorSlot & ~(CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) |\\r\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\r\\n                    // update storage with the modified slot\\r\\n                    ds.selectorSlots[oldSelectorsSlotCount] = oldSelectorSlot;\\r\\n                } else {\\r\\n                    // clears the selector we are deleting and puts the last selector in its place.\\r\\n                    _selectorSlot =\\r\\n                        (_selectorSlot & ~(CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) |\\r\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\r\\n                }\\r\\n                if (selectorInSlotIndex == 0) {\\r\\n                    delete ds.selectorSlots[selectorSlotCount];\\r\\n                    _selectorSlot = 0;\\r\\n                }\\r\\n                selectorInSlotIndex--;\\r\\n            }\\r\\n            _selectorCount = selectorSlotCount * 8 + selectorInSlotIndex + 1;\\r\\n        } else {\\r\\n            revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\r\\n        }       \\r\\n        return (_selectorCount, _selectorSlot);\\r\\n    }\\r\\n\\r\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\r\\n        if (_init == address(0)) {\\r\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\r\\n        } else {\\r\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\r\\n            if (_init != address(this)) {\\r\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\r\\n            }\\r\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\r\\n            if (!success) {\\r\\n                if (error.length > 0) {\\r\\n                    // bubble up the error\\r\\n                    revert(string(error));\\r\\n                } else {\\r\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\r\\n        uint256 contractSize;\\r\\n        assembly {\\r\\n            contractSize := extcodesize(_contract)\\r\\n        }\\r\\n        require(contractSize > 0, _errorMessage);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/facets/Basket/LibBasketStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.1;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nlibrary LibBasketStorage {\\r\\n  bytes32 constant BASKET_STORAGE_POSITION = keccak256(\\r\\n    \\\"diamond.standard.basket.storage\\\"\\r\\n  );\\r\\n\\r\\n  struct BasketStorage {\\r\\n    uint256 lockBlock;\\r\\n    uint256 maxCap;\\r\\n    IERC20[] tokens;\\r\\n    mapping(address => bool) inPool;\\r\\n    uint256 entryFee;\\r\\n    uint256 entryFeeBeneficiaryShare; // amount of entry fee that goes to feeBeneficiary\\r\\n    uint256 exitFee;\\r\\n    uint256 exitFeeBeneficiaryShare; // amount of exit fee that goes to the pool itself\\r\\n    uint256 annualizedFee;\\r\\n    uint256 lastAnnualizedFeeClaimed;\\r\\n    address feeBeneficiary;\\r\\n  }\\r\\n\\r\\n  function basketStorage() internal pure returns (BasketStorage storage bs) {\\r\\n    bytes32 position = BASKET_STORAGE_POSITION;\\r\\n    assembly {\\r\\n      bs.slot := position\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/facets/Call/CallFacet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma experimental ABIEncoderV2;\\r\\npragma solidity ^0.7.1;\\r\\n\\r\\nimport \\\"@pie-dao/diamond/contracts/libraries/LibDiamond.sol\\\";\\r\\nimport \\\"../../interfaces/ICallFacet.sol\\\";\\r\\nimport \\\"../shared/Reentry/ReentryProtection.sol\\\";\\r\\nimport \\\"../shared/Access/CallProtection.sol\\\";\\r\\nimport \\\"./LibCallStorage.sol\\\";\\r\\n\\r\\ncontract CallFacet is ReentryProtection, ICallFacet {\\r\\n\\r\\n  uint256 public constant MAX_CALLERS = 50;\\r\\n\\r\\n  // uses modified call protection modifier to also allow whitelisted addresses to call\\r\\n  modifier protectedCall() {\\r\\n    require(\\r\\n        msg.sender == LibDiamond.diamondStorage().contractOwner ||\\r\\n        LibCallStorage.callStorage().canCall[msg.sender] ||\\r\\n        msg.sender == address(this), \\\"NOT_ALLOWED\\\"\\r\\n    );\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  modifier onlyOwner() {\\r\\n    require(msg.sender == LibDiamond.diamondStorage().contractOwner, \\\"NOT_ALLOWED\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function addCaller(address _caller) external override onlyOwner {\\r\\n    LibCallStorage.CallStorage storage callStorage = LibCallStorage.callStorage();\\r\\n\\r\\n    require(callStorage.callers.length < MAX_CALLERS, \\\"TOO_MANY_CALLERS\\\");\\r\\n    require(!callStorage.canCall[_caller], \\\"IS_ALREADY_CALLER\\\");\\r\\n    require(_caller != address(0), \\\"INVALID_CALLER\\\");\\r\\n\\r\\n    callStorage.callers.push(_caller);\\r\\n    callStorage.canCall[_caller] = true;\\r\\n\\r\\n    emit CallerAdded(_caller);\\r\\n  }\\r\\n\\r\\n  function removeCaller(address _caller) external override onlyOwner {\\r\\n    LibCallStorage.CallStorage storage callStorage = LibCallStorage.callStorage();\\r\\n\\r\\n    require(callStorage.canCall[_caller], \\\"IS_NOT_CALLER\\\");\\r\\n\\r\\n    callStorage.canCall[_caller] = false;\\r\\n\\r\\n    for(uint256 i = 0; i < callStorage.callers.length; i ++) {\\r\\n      address currentCaller = callStorage.callers[i];\\r\\n\\r\\n      // if found remove it\\r\\n      if(currentCaller == _caller) {\\r\\n        callStorage.callers[i] = callStorage.callers[callStorage.callers.length - 1];\\r\\n        callStorage.callers.pop();\\r\\n        break;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    emit CallerRemoved(_caller);\\r\\n  }\\r\\n\\r\\n  function call(\\r\\n    address[] memory _targets,\\r\\n    bytes[] memory _calldata,\\r\\n    uint256[] memory _values\\r\\n  ) public override noReentry protectedCall {\\r\\n    require(\\r\\n      _targets.length == _calldata.length && _values.length == _calldata.length,\\r\\n      \\\"ARRAY_LENGTH_MISMATCH\\\"\\r\\n    );\\r\\n\\r\\n    for (uint256 i = 0; i < _targets.length; i++) {\\r\\n      _call(_targets[i], _calldata[i], _values[i]);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function callNoValue(\\r\\n    address[] memory _targets,\\r\\n    bytes[] memory _calldata\\r\\n  ) public override noReentry protectedCall {\\r\\n    require(\\r\\n      _targets.length == _calldata.length,\\r\\n      \\\"ARRAY_LENGTH_MISMATCH\\\"\\r\\n    );\\r\\n\\r\\n    for (uint256 i = 0; i < _targets.length; i++) {\\r\\n      _call(_targets[i], _calldata[i], 0);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function singleCall(\\r\\n    address _target,\\r\\n    bytes calldata _calldata,\\r\\n    uint256 _value\\r\\n  ) external override noReentry protectedCall {\\r\\n    _call(_target, _calldata, _value);\\r\\n  }\\r\\n\\r\\n  function _call(\\r\\n    address _target,\\r\\n    bytes memory _calldata,\\r\\n    uint256 _value\\r\\n  ) internal {\\r\\n    require(address(this).balance >= _value, \\\"ETH_BALANCE_TOO_LOW\\\");\\r\\n    (bool success, ) = _target.call{ value: _value }(_calldata);\\r\\n    require(success, \\\"CALL_FAILED\\\");\\r\\n    emit Call(msg.sender, _target, _calldata, _value);\\r\\n  }\\r\\n\\r\\n  function canCall(address _caller) external view override returns (bool) {\\r\\n    return LibCallStorage.callStorage().canCall[_caller];\\r\\n  }\\r\\n\\r\\n  function getCallers() external view override returns (address[] memory) {\\r\\n    return LibCallStorage.callStorage().callers;\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/facets/Call/LibCallStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.1;\\r\\n\\r\\nlibrary LibCallStorage {\\r\\n  bytes32 constant CALL_STORAGE_POSITION = keccak256(\\r\\n    \\\"diamond.standard.call.storage\\\"\\r\\n  );\\r\\n\\r\\n  struct CallStorage {\\r\\n    mapping(address => bool) canCall;\\r\\n    address[] callers;\\r\\n  }\\r\\n\\r\\n  function callStorage() internal pure returns (CallStorage storage cs) {\\r\\n    bytes32 position = CALL_STORAGE_POSITION;\\r\\n    assembly {\\r\\n      cs.slot := position\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/facets/ERC20/ERC20Facet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.1;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@pie-dao/diamond/contracts/libraries/LibDiamond.sol\\\";\\r\\n\\r\\nimport \\\"../../interfaces/IERC20Facet.sol\\\";\\r\\nimport \\\"./LibERC20Storage.sol\\\";\\r\\nimport \\\"./LibERC20.sol\\\";\\r\\nimport \\\"../shared/Access/CallProtection.sol\\\";\\r\\n\\r\\ncontract ERC20Facet is IERC20, IERC20Facet, CallProtection {\\r\\n  using SafeMath for uint256;\\r\\n\\r\\n  function initialize(\\r\\n    uint256 _initialSupply,\\r\\n    string memory _name,\\r\\n    string memory _symbol\\r\\n  ) external override {\\r\\n    LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\r\\n    LibERC20Storage.ERC20Storage storage es = LibERC20Storage.erc20Storage();\\r\\n\\r\\n    require(\\r\\n      bytes(es.name).length == 0 &&\\r\\n      bytes(es.symbol).length == 0,\\r\\n      \\\"ALREADY_INITIALIZED\\\"\\r\\n    );\\r\\n\\r\\n    require(\\r\\n      bytes(_name).length != 0 &&\\r\\n      bytes(_symbol).length != 0,\\r\\n      \\\"INVALID_PARAMS\\\"\\r\\n    );\\r\\n\\r\\n    require(msg.sender == ds.contractOwner, \\\"Must own the contract.\\\");\\r\\n\\r\\n    LibERC20.mint(msg.sender, _initialSupply);\\r\\n\\r\\n    es.name = _name;\\r\\n    es.symbol = _symbol;\\r\\n  }\\r\\n\\r\\n  function name() external view override returns (string memory) {\\r\\n    return LibERC20Storage.erc20Storage().name;\\r\\n  }\\r\\n\\r\\n  function setName(string calldata _name) external override protectedCall {\\r\\n    LibERC20Storage.erc20Storage().name = _name;\\r\\n  }\\r\\n\\r\\n  function symbol() external view override returns (string memory) {\\r\\n    return LibERC20Storage.erc20Storage().symbol;\\r\\n  }\\r\\n\\r\\n  function setSymbol(string calldata _symbol) external override protectedCall {\\r\\n    LibERC20Storage.erc20Storage().symbol = _symbol;\\r\\n  }\\r\\n\\r\\n  function decimals() external pure override returns (uint8) {\\r\\n    return 18;\\r\\n  }\\r\\n\\r\\n  function mint(address _receiver, uint256 _amount) external override protectedCall {\\r\\n    LibERC20.mint(_receiver, _amount);\\r\\n  }\\r\\n\\r\\n  function burn(address _from, uint256 _amount) external override protectedCall {\\r\\n    LibERC20.burn(_from, _amount);\\r\\n  }\\r\\n\\r\\n  function approve(address _spender, uint256 _amount)\\r\\n    external\\r\\n    override\\r\\n    returns (bool)\\r\\n  {\\r\\n    require(_spender != address(0), \\\"SPENDER_INVALID\\\");\\r\\n    LibERC20Storage.erc20Storage().allowances[msg.sender][_spender] = _amount;\\r\\n    emit Approval(msg.sender, _spender, _amount);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function increaseApproval(address _spender, uint256 _amount) external override returns (bool) {\\r\\n    require(_spender != address(0), \\\"SPENDER_INVALID\\\");\\r\\n    LibERC20Storage.ERC20Storage storage es = LibERC20Storage.erc20Storage();\\r\\n    es.allowances[msg.sender][_spender] = es.allowances[msg.sender][_spender].add(_amount);\\r\\n    emit Approval(msg.sender, _spender, es.allowances[msg.sender][_spender]);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function decreaseApproval(address _spender, uint256 _amount) external override returns (bool) {\\r\\n    require(_spender != address(0), \\\"SPENDER_INVALID\\\");\\r\\n    LibERC20Storage.ERC20Storage storage es = LibERC20Storage.erc20Storage();\\r\\n    uint256 oldValue = es.allowances[msg.sender][_spender];\\r\\n    if (_amount > oldValue) {\\r\\n      es.allowances[msg.sender][_spender] = 0;\\r\\n    } else {\\r\\n      es.allowances[msg.sender][_spender] = oldValue.sub(_amount);\\r\\n    }\\r\\n    emit Approval(msg.sender, _spender, es.allowances[msg.sender][_spender]);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function transfer(address _to, uint256 _amount)\\r\\n    external\\r\\n    override\\r\\n    returns (bool)\\r\\n  {\\r\\n    _transfer(msg.sender, _to, _amount);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function transferFrom(\\r\\n    address _from,\\r\\n    address _to,\\r\\n    uint256 _amount\\r\\n  ) external override returns (bool) {\\r\\n    LibERC20Storage.ERC20Storage storage es = LibERC20Storage.erc20Storage();\\r\\n    require(_from != address(0), \\\"FROM_INVALID\\\");\\r\\n\\r\\n    // Update approval if not set to max uint256\\r\\n    if (es.allowances[_from][msg.sender] != uint256(-1)) {\\r\\n      uint256 newApproval = es.allowances[_from][msg.sender].sub(_amount);\\r\\n      es.allowances[_from][msg.sender] = newApproval;\\r\\n      emit Approval(_from, msg.sender, newApproval);\\r\\n    }\\r\\n\\r\\n    _transfer(_from, _to, _amount);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function allowance(address _owner, address _spender)\\r\\n    external\\r\\n    view\\r\\n    override\\r\\n    returns (uint256)\\r\\n  {\\r\\n    return LibERC20Storage.erc20Storage().allowances[_owner][_spender];\\r\\n  }\\r\\n\\r\\n  function balanceOf(address _of) external view override returns (uint256) {\\r\\n    return LibERC20Storage.erc20Storage().balances[_of];\\r\\n  }\\r\\n\\r\\n  function totalSupply() external view override returns (uint256) {\\r\\n    return LibERC20Storage.erc20Storage().totalSupply;\\r\\n  }\\r\\n\\r\\n  function _transfer(\\r\\n    address _from,\\r\\n    address _to,\\r\\n    uint256 _amount\\r\\n  ) internal {\\r\\n    LibERC20Storage.ERC20Storage storage es = LibERC20Storage.erc20Storage();\\r\\n\\r\\n    es.balances[_from] = es.balances[_from].sub(_amount);\\r\\n    es.balances[_to] = es.balances[_to].add(_amount);\\r\\n\\r\\n    emit Transfer(_from, _to, _amount);\\r\\n  }\\r\\n}\"\r\n    },\r\n    \"contracts/factories/PieFactoryContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.1;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"@pie-dao/diamond/contracts/Diamond.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\nimport \\\"@pie-dao/proxy/contracts/PProxy.sol\\\";\\r\\n\\r\\nimport \\\"../interfaces/IExperiPie.sol\\\";\\r\\n\\r\\ncontract PieFactoryContract is Ownable {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    address[] public pies;\\r\\n    mapping(address => bool) public isPie;\\r\\n    address public defaultController;\\r\\n    address public diamondImplementation;\\r\\n\\r\\n    IDiamondCut.FacetCut[] public defaultCut;\\r\\n\\r\\n    event PieCreated(\\r\\n        address indexed pieAddress,\\r\\n        address indexed deployer,\\r\\n        uint256 indexed index\\r\\n    );\\r\\n\\r\\n    event DefaultControllerSet(address indexed controller);\\r\\n    event FacetAdded(IDiamondCut.FacetCut);\\r\\n    event FacetRemoved(IDiamondCut.FacetCut);\\r\\n\\r\\n    constructor() {\\r\\n        defaultController = msg.sender;\\r\\n    }\\r\\n\\r\\n    function setDefaultController(address _controller) external onlyOwner {\\r\\n        defaultController = _controller;\\r\\n        emit DefaultControllerSet(_controller);\\r\\n    }\\r\\n\\r\\n    function removeFacet(uint256 _index) external onlyOwner {\\r\\n        require(_index < defaultCut.length, \\\"INVALID_INDEX\\\");\\r\\n        emit FacetRemoved(defaultCut[_index]);\\r\\n        defaultCut[_index] = defaultCut[defaultCut.length - 1];\\r\\n        defaultCut.pop();\\r\\n    }\\r\\n\\r\\n    function addFacet(IDiamondCut.FacetCut memory _facet) external onlyOwner {\\r\\n        defaultCut.push(_facet);\\r\\n        emit FacetAdded(_facet);\\r\\n    }\\r\\n\\r\\n    // Diamond should be Initialized to prevent it from being selfdestructed\\r\\n    function setDiamondImplementation(address _diamondImplementation) external onlyOwner {\\r\\n        diamondImplementation = _diamondImplementation;\\r\\n    }\\r\\n\\r\\n    function bakePie(\\r\\n        address[] memory _tokens,\\r\\n        uint256[] memory _amounts,\\r\\n        uint256 _initialSupply,\\r\\n        string memory _symbol,\\r\\n        string memory _name\\r\\n    ) external {\\r\\n        PProxy proxy = new PProxy();\\r\\n        Diamond d = Diamond(address(proxy));\\r\\n\\r\\n        proxy.setImplementation(diamondImplementation);\\r\\n\\r\\n        d.initialize(defaultCut, address(this));\\r\\n\\r\\n        pies.push(address(d));\\r\\n        isPie[address(d)] = true;\\r\\n\\r\\n        // emit DiamondCreated(address(d));\\r\\n        require(_tokens.length != 0, \\\"CANNOT_CREATE_ZERO_TOKEN_LENGTH_PIE\\\");\\r\\n        require(_tokens.length == _amounts.length, \\\"ARRAY_LENGTH_MISMATCH\\\");\\r\\n\\r\\n        IExperiPie pie = IExperiPie(address(d));\\r\\n\\r\\n        // Init erc20 facet\\r\\n        pie.initialize(_initialSupply, _name, _symbol);\\r\\n\\r\\n        // Transfer and add tokens\\r\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\r\\n            IERC20 token = IERC20(_tokens[i]);\\r\\n            token.safeTransferFrom(msg.sender, address(pie), _amounts[i]);\\r\\n            pie.addToken(_tokens[i]);\\r\\n        }\\r\\n\\r\\n        // Unlock pool\\r\\n        pie.setLock(1);\\r\\n\\r\\n        // Uncap pool\\r\\n        pie.setCap(uint256(-1));\\r\\n\\r\\n        // Send minted pie to msg.sender\\r\\n        pie.transfer(msg.sender, _initialSupply);\\r\\n        pie.transferOwnership(defaultController);\\r\\n        proxy.setProxyOwner(defaultController);\\r\\n\\r\\n        emit PieCreated(address(d), msg.sender, pies.length - 1);\\r\\n    }\\r\\n\\r\\n    function getDefaultCut()\\r\\n        external\\r\\n        view\\r\\n        returns (IDiamondCut.FacetCut[] memory)\\r\\n    {\\r\\n        return defaultCut;\\r\\n    }\\r\\n\\r\\n    function getDefaultCutCount() external view returns (uint256) {\\r\\n        return defaultCut.length;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@pie-dao/diamond/contracts/Diamond.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.1;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n/******************************************************************************\\\\\\r\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\r\\n*\\r\\n* Implementation of a diamond.\\r\\n/******************************************************************************/\\r\\n\\r\\nimport \\\"./libraries/LibDiamond.sol\\\";\\r\\nimport \\\"./libraries/LibDiamondInitialize.sol\\\";\\r\\nimport \\\"./interfaces/IDiamondLoupe.sol\\\";\\r\\nimport \\\"./interfaces/IDiamondCut.sol\\\";\\r\\nimport \\\"./interfaces/IERC173.sol\\\";\\r\\nimport \\\"./interfaces/IERC165.sol\\\";\\r\\n\\r\\ncontract Diamond {\\r\\n    function initialize(IDiamondCut.FacetCut[] memory _diamondCut, address _owner) external payable {\\r\\n        require(LibDiamondInitialize.diamondInitializeStorage().initialized == false, \\\"ALREADY_INITIALIZED\\\");\\r\\n        LibDiamondInitialize.diamondInitializeStorage().initialized = true;\\r\\n        LibDiamond.diamondCut(_diamondCut, address(0), new bytes(0));\\r\\n        LibDiamond.setContractOwner(_owner);\\r\\n\\r\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\r\\n\\r\\n        // adding ERC165 data\\r\\n        ds.supportedInterfaces[type(IERC165).interfaceId] = true;\\r\\n        ds.supportedInterfaces[type(IDiamondCut).interfaceId] = true;\\r\\n        ds.supportedInterfaces[type(IDiamondLoupe).interfaceId] = true;\\r\\n        ds.supportedInterfaces[type(IERC173).interfaceId] = true;\\r\\n    }\\r\\n\\r\\n    // Find facet for function that is called and execute the\\r\\n    // function if a facet is found and return any value.\\r\\n    fallback() external payable {\\r\\n        LibDiamond.DiamondStorage storage ds;\\r\\n        bytes32 position = LibDiamond.DIAMOND_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            ds.slot := position\\r\\n        }\\r\\n        address facet = address(bytes20(ds.facets[msg.sig]));\\r\\n        require(facet != address(0), \\\"Diamond: Function does not exist\\\");\\r\\n        assembly {\\r\\n            calldatacopy(0, 0, calldatasize())\\r\\n            let result := delegatecall(gas(), facet, 0, calldatasize(), 0, 0)\\r\\n            returndatacopy(0, 0, returndatasize())\\r\\n            switch result\\r\\n                case 0 {\\r\\n                    revert(0, returndatasize())\\r\\n                }\\r\\n                default {\\r\\n                    return(0, returndatasize())\\r\\n                }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n}\\r\\n\"\r\n    },\r\n    \"@pie-dao/diamond/contracts/libraries/LibDiamondInitialize.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.1;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n/******************************************************************************\\\\\\r\\n* Author: Mick de Graaf\\r\\n*\\r\\n* Tracks if the contract is already intialized or not\\r\\n/******************************************************************************/\\r\\n\\r\\nimport \\\"../interfaces/IDiamondCut.sol\\\";\\r\\n\\r\\nlibrary LibDiamondInitialize {\\r\\n    bytes32 constant DIAMOND_INITIALIZE_STORAGE_POSITION = keccak256(\\\"diamond.standard.initialize.diamond.storage\\\");\\r\\n\\r\\n    struct InitializedStorage {\\r\\n        bool initialized;\\r\\n    }\\r\\n\\r\\n    function diamondInitializeStorage() internal pure returns (InitializedStorage storage ids) {\\r\\n        bytes32 position = DIAMOND_INITIALIZE_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            ids.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\"\r\n    },\r\n    \"@pie-dao/diamond/contracts/interfaces/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.1;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\ninterface IERC165 {\\r\\n    /// @notice Query if a contract implements an interface\\r\\n    /// @param interfaceId The interface identifier, as specified in ERC-165\\r\\n    /// @dev Interface identification is specified in ERC-165. This function\\r\\n    ///  uses less than 30,000 gas.\\r\\n    /// @return `true` if the contract implements `interfaceID` and\\r\\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\\r\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@pie-dao/proxy/contracts/PProxy.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.1;\\r\\n\\r\\nimport \\\"./PProxyStorage.sol\\\";\\r\\n\\r\\ncontract PProxy is PProxyStorage {\\r\\n\\r\\n    bytes32 constant IMPLEMENTATION_SLOT = keccak256(abi.encodePacked(\\\"IMPLEMENTATION_SLOT\\\"));\\r\\n    bytes32 constant OWNER_SLOT = keccak256(abi.encodePacked(\\\"OWNER_SLOT\\\"));\\r\\n\\r\\n    modifier onlyProxyOwner() {\\r\\n        require(msg.sender == readAddress(OWNER_SLOT), \\\"PProxy.onlyProxyOwner: msg sender not owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor () public {\\r\\n        setAddress(OWNER_SLOT, msg.sender);\\r\\n    }\\r\\n\\r\\n    function getProxyOwner() public view returns (address) {\\r\\n       return readAddress(OWNER_SLOT);\\r\\n    }\\r\\n\\r\\n    function setProxyOwner(address _newOwner) onlyProxyOwner public {\\r\\n        setAddress(OWNER_SLOT, _newOwner);\\r\\n    }\\r\\n\\r\\n    function getImplementation() public view returns (address) {\\r\\n        return readAddress(IMPLEMENTATION_SLOT);\\r\\n    }\\r\\n\\r\\n    function setImplementation(address _newImplementation) onlyProxyOwner public {\\r\\n        setAddress(IMPLEMENTATION_SLOT, _newImplementation);\\r\\n    }\\r\\n\\r\\n\\r\\n    fallback () external payable {\\r\\n       return internalFallback();\\r\\n    }\\r\\n\\r\\n    function internalFallback() internal virtual {\\r\\n        address contractAddr = readAddress(IMPLEMENTATION_SLOT);\\r\\n        assembly {\\r\\n            let ptr := mload(0x40)\\r\\n            calldatacopy(ptr, 0, calldatasize())\\r\\n            let result := delegatecall(gas(), contractAddr, ptr, calldatasize(), 0, 0)\\r\\n            let size := returndatasize()\\r\\n            returndatacopy(ptr, 0, size)\\r\\n\\r\\n            switch result\\r\\n            case 0 { revert(ptr, size) }\\r\\n            default { return(ptr, size) }\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\"\r\n    },\r\n    \"@pie-dao/proxy/contracts/PProxyStorage.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.1;\\r\\n\\r\\ncontract PProxyStorage {\\r\\n\\r\\n    function readBool(bytes32 _key) public view returns(bool) {\\r\\n        return storageRead(_key) == bytes32(uint256(1));\\r\\n    }\\r\\n\\r\\n    function setBool(bytes32 _key, bool _value) internal {\\r\\n        if(_value) {\\r\\n            storageSet(_key, bytes32(uint256(1)));\\r\\n        } else {\\r\\n            storageSet(_key, bytes32(uint256(0)));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function readAddress(bytes32 _key) public view returns(address) {\\r\\n        return bytes32ToAddress(storageRead(_key));\\r\\n    }\\r\\n\\r\\n    function setAddress(bytes32 _key, address _value) internal {\\r\\n        storageSet(_key, addressToBytes32(_value));\\r\\n    }\\r\\n\\r\\n    function storageRead(bytes32 _key) public view returns(bytes32) {\\r\\n        bytes32 value;\\r\\n        //solium-disable-next-line security/no-inline-assembly\\r\\n        assembly {\\r\\n            value := sload(_key)\\r\\n        }\\r\\n        return value;\\r\\n    }\\r\\n\\r\\n    function storageSet(bytes32 _key, bytes32 _value) internal {\\r\\n        // targetAddress = _address;  // No!\\r\\n        bytes32 implAddressStorageKey = _key;\\r\\n        //solium-disable-next-line security/no-inline-assembly\\r\\n        assembly {\\r\\n            sstore(implAddressStorageKey, _value)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function bytes32ToAddress(bytes32 _value) public pure returns(address) {\\r\\n        return address(uint160(uint256(_value)));\\r\\n    }\\r\\n\\r\\n    function addressToBytes32(address _value) public pure returns(bytes32) {\\r\\n        return bytes32(uint256(_value));\\r\\n    }\\r\\n\\r\\n}\"\r\n    },\r\n    \"contracts/Imports.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\nimport \\\"@pie-dao/diamond/contracts/facets/DiamondCutFacet.sol\\\";\\r\\nimport \\\"@pie-dao/diamond/contracts/facets/DiamondLoupeFacet.sol\\\";\\r\\nimport \\\"@pie-dao/diamond/contracts/facets/OwnershipFacet.sol\\\";\\r\\n\\r\\n\\r\\n// Get the compiler and typechain to pick up these facets\\r\\ncontract Imports {\\r\\n    DiamondCutFacet public diamondCutFacet;\\r\\n    DiamondLoupeFacet public diamondLoupeFacet;\\r\\n    OwnershipFacet public ownershipFacet;\\r\\n}\"\r\n    },\r\n    \"@pie-dao/diamond/contracts/facets/DiamondCutFacet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.1;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n/******************************************************************************\\\\\\r\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\r\\n/******************************************************************************/\\r\\n\\r\\nimport \\\"../interfaces/IDiamondCut.sol\\\";\\r\\nimport \\\"../libraries/LibDiamond.sol\\\";\\r\\n\\r\\ncontract DiamondCutFacet is IDiamondCut {\\r\\n    // Standard diamondCut external function\\r\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\r\\n    ///         a function with delegatecall\\r\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\r\\n    /// @param _init The address of the contract or facet to execute _calldata\\r\\n    /// @param _calldata A function call, including function selector and arguments\\r\\n    ///                  _calldata is executed with delegatecall on _init\\r\\n    function diamondCut(\\r\\n        FacetCut[] calldata _diamondCut,\\r\\n        address _init,\\r\\n        bytes calldata _calldata\\r\\n    ) external override {\\r\\n        LibDiamond.enforceIsContractOwner();\\r\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\r\\n        uint256 originalSelectorCount = ds.selectorCount;\\r\\n        uint256 selectorCount = originalSelectorCount;\\r\\n        bytes32 selectorSlot;\\r\\n        // Check if last selector slot is not full\\r\\n        if (selectorCount % 8 > 0) {\\r\\n            // get last selectorSlot\\r\\n            selectorSlot = ds.selectorSlots[selectorCount / 8];\\r\\n        }\\r\\n        // loop through diamond cut\\r\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\r\\n            (selectorCount, selectorSlot) = LibDiamond.addReplaceRemoveFacetSelectors(\\r\\n                selectorCount,\\r\\n                selectorSlot,\\r\\n                _diamondCut[facetIndex].facetAddress,\\r\\n                _diamondCut[facetIndex].action,\\r\\n                _diamondCut[facetIndex].functionSelectors\\r\\n            );\\r\\n        }\\r\\n        if (selectorCount != originalSelectorCount) {\\r\\n            ds.selectorCount = uint16(selectorCount);\\r\\n        }\\r\\n        // If last selector slot is not full\\r\\n        if (selectorCount % 8 > 0) {\\r\\n            ds.selectorSlots[selectorCount / 8] = selectorSlot;\\r\\n        }\\r\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\r\\n        LibDiamond.initializeDiamondCut(_init, _calldata);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@pie-dao/diamond/contracts/facets/DiamondLoupeFacet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.1;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n/******************************************************************************\\\\\\r\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\r\\n/******************************************************************************/\\r\\n\\r\\nimport \\\"../libraries/LibDiamond.sol\\\";\\r\\nimport \\\"../interfaces/IDiamondLoupe.sol\\\";\\r\\nimport \\\"../interfaces/IERC165.sol\\\";\\r\\n\\r\\ncontract DiamondLoupeFacet is IDiamondLoupe, IERC165 {\\r\\n    // Diamond Loupe Functions\\r\\n    ////////////////////////////////////////////////////////////////////\\r\\n    /// These functions are expected to be called frequently by tools.\\r\\n    //\\r\\n    // struct Facet {\\r\\n    //     address facetAddress;\\r\\n    //     bytes4[] functionSelectors;\\r\\n    // }\\r\\n    /// @notice Gets all facets and their selectors.\\r\\n    /// @return facets_ Facet\\r\\n    function facets() external override view returns (Facet[] memory facets_) {\\r\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\r\\n        facets_ = new Facet[](ds.selectorCount);\\r\\n        uint8[] memory numFacetSelectors = new uint8[](ds.selectorCount);\\r\\n        uint256 numFacets;\\r\\n        uint256 selectorIndex;\\r\\n        // loop through function selectors\\r\\n        for (uint256 slotIndex; selectorIndex < ds.selectorCount; slotIndex++) {\\r\\n            bytes32 slot = ds.selectorSlots[slotIndex];\\r\\n            for (uint256 selectorSlotIndex; selectorSlotIndex < 8; selectorSlotIndex++) {\\r\\n                selectorIndex++;\\r\\n                if (selectorIndex > ds.selectorCount) {\\r\\n                    break;\\r\\n                }\\r\\n                bytes4 selector = bytes4(slot << (selectorSlotIndex * 32));\\r\\n                address facetAddress_ = address(bytes20(ds.facets[selector]));\\r\\n                bool continueLoop = false;\\r\\n                for (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\\r\\n                    if (facets_[facetIndex].facetAddress == facetAddress_) {\\r\\n                        facets_[facetIndex].functionSelectors[numFacetSelectors[facetIndex]] = selector;\\r\\n                        // probably will never have more than 256 functions from one facet contract\\r\\n                        require(numFacetSelectors[facetIndex] < 255);\\r\\n                        numFacetSelectors[facetIndex]++;\\r\\n                        continueLoop = true;\\r\\n                        break;\\r\\n                    }\\r\\n                }\\r\\n                if (continueLoop) {\\r\\n                    continueLoop = false;\\r\\n                    continue;\\r\\n                }\\r\\n                facets_[numFacets].facetAddress = facetAddress_;\\r\\n                facets_[numFacets].functionSelectors = new bytes4[](ds.selectorCount);\\r\\n                facets_[numFacets].functionSelectors[0] = selector;\\r\\n                numFacetSelectors[numFacets] = 1;\\r\\n                numFacets++;\\r\\n            }\\r\\n        }\\r\\n        for (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\\r\\n            uint256 numSelectors = numFacetSelectors[facetIndex];\\r\\n            bytes4[] memory selectors = facets_[facetIndex].functionSelectors;\\r\\n            // setting the number of selectors\\r\\n            assembly {\\r\\n                mstore(selectors, numSelectors)\\r\\n            }\\r\\n        }\\r\\n        // setting the number of facets\\r\\n        assembly {\\r\\n            mstore(facets_, numFacets)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Gets all the function selectors supported by a specific facet.\\r\\n    /// @param _facet The facet address.\\r\\n    /// @return _facetFunctionSelectors The selectors associated with a facet address.\\r\\n    function facetFunctionSelectors(address _facet) external override view returns (bytes4[] memory _facetFunctionSelectors) {\\r\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\r\\n        uint256 numSelectors;\\r\\n        _facetFunctionSelectors = new bytes4[](ds.selectorCount);\\r\\n        uint256 selectorIndex;\\r\\n        // loop through function selectors\\r\\n        for (uint256 slotIndex; selectorIndex < ds.selectorCount; slotIndex++) {\\r\\n            bytes32 slot = ds.selectorSlots[slotIndex];\\r\\n            for (uint256 selectorSlotIndex; selectorSlotIndex < 8; selectorSlotIndex++) {\\r\\n                selectorIndex++;\\r\\n                if (selectorIndex > ds.selectorCount) {\\r\\n                    break;\\r\\n                }\\r\\n                bytes4 selector = bytes4(slot << (selectorSlotIndex * 32));\\r\\n                address facet = address(bytes20(ds.facets[selector]));\\r\\n                if (_facet == facet) {\\r\\n                    _facetFunctionSelectors[numSelectors] = selector;\\r\\n                    numSelectors++;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        // Set the number of selectors in the array\\r\\n        assembly {\\r\\n            mstore(_facetFunctionSelectors, numSelectors)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Get all the facet addresses used by a diamond.\\r\\n    /// @return facetAddresses_\\r\\n    function facetAddresses() external override view returns (address[] memory facetAddresses_) {\\r\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\r\\n        facetAddresses_ = new address[](ds.selectorCount);\\r\\n        uint256 numFacets;\\r\\n        uint256 selectorIndex;\\r\\n        // loop through function selectors\\r\\n        for (uint256 slotIndex; selectorIndex < ds.selectorCount; slotIndex++) {\\r\\n            bytes32 slot = ds.selectorSlots[slotIndex];\\r\\n            for (uint256 selectorSlotIndex; selectorSlotIndex < 8; selectorSlotIndex++) {\\r\\n                selectorIndex++;\\r\\n                if (selectorIndex > ds.selectorCount) {\\r\\n                    break;\\r\\n                }\\r\\n                bytes4 selector = bytes4(slot << (selectorSlotIndex * 32));\\r\\n                address facetAddress_ = address(bytes20(ds.facets[selector]));\\r\\n                bool continueLoop = false;\\r\\n                for (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\\r\\n                    if (facetAddress_ == facetAddresses_[facetIndex]) {\\r\\n                        continueLoop = true;\\r\\n                        break;\\r\\n                    }\\r\\n                }\\r\\n                if (continueLoop) {\\r\\n                    continueLoop = false;\\r\\n                    continue;\\r\\n                }\\r\\n                facetAddresses_[numFacets] = facetAddress_;\\r\\n                numFacets++;\\r\\n            }\\r\\n        }\\r\\n        // Set the number of facet addresses in the array\\r\\n        assembly {\\r\\n            mstore(facetAddresses_, numFacets)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the facet that supports the given selector.\\r\\n    /// @dev If facet is not found return address(0).\\r\\n    /// @param _functionSelector The function selector.\\r\\n    /// @return facetAddress_ The facet address.\\r\\n    function facetAddress(bytes4 _functionSelector) external override view returns (address facetAddress_) {\\r\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\r\\n        facetAddress_ = address(bytes20(ds.facets[_functionSelector]));\\r\\n    }\\r\\n\\r\\n    // This implements ERC-165.\\r\\n    function supportsInterface(bytes4 _interfaceId) external override view returns (bool) {\\r\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\r\\n        return ds.supportedInterfaces[_interfaceId];\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@pie-dao/diamond/contracts/facets/OwnershipFacet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.1;\\r\\n\\r\\nimport \\\"../libraries/LibDiamond.sol\\\";\\r\\nimport \\\"../interfaces/IERC173.sol\\\";\\r\\n\\r\\ncontract OwnershipFacet is IERC173 {\\r\\n    function transferOwnership(address _newOwner) external override {\\r\\n        LibDiamond.enforceIsContractOwner();\\r\\n        LibDiamond.setContractOwner(_newOwner);\\r\\n    }\\r\\n\\r\\n    function owner() external override view returns (address owner_) {\\r\\n        owner_ = LibDiamond.contractOwner();\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/test/DiamondFactoryContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.1;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"@pie-dao/diamond/contracts/Diamond.sol\\\";\\r\\n\\r\\ncontract DiamondFactoryContract {\\r\\n    event DiamondCreated(address tokenAddress);\\r\\n\\r\\n    address[] public diamonds;\\r\\n    mapping(address => bool) public isDiamond;\\r\\n\\r\\n    function deployNewDiamond(\\r\\n        address _owner,\\r\\n        IDiamondCut.FacetCut[] memory _diamondCut\\r\\n    ) public returns (address) {\\r\\n        Diamond d = new Diamond();\\r\\n        d.initialize(_diamondCut, _owner);\\r\\n\\r\\n        diamonds.push(address(d));\\r\\n        isDiamond[address(d)] = true;\\r\\n\\r\\n        emit DiamondCreated(address(d));\\r\\n    }\\r\\n\\r\\n    function getDiamondCount() external view returns (uint256) {\\r\\n        return diamonds.length;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/test/ERC20FactoryContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\nimport \\\"./MockToken.sol\\\";\\r\\n\\r\\ncontract ERC20FactoryContract {\\r\\n    event TokenCreated(address tokenAddress);\\r\\n\\r\\n    function deployNewToken(\\r\\n        string memory _name,\\r\\n        string memory _symbol,\\r\\n        uint256 _totalSupply,\\r\\n        address _issuer\\r\\n    ) public returns (address) {\\r\\n        MockToken t = new MockToken(_name, _symbol);\\r\\n        t.mint(_totalSupply, _issuer);\\r\\n        emit TokenCreated(address(t));\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/test/MockToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma experimental ABIEncoderV2;\\r\\npragma solidity ^0.7.1;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\n\\r\\ncontract MockToken is ERC20 {\\r\\n\\r\\n    constructor(string memory _name, string memory _symbol)\\r\\n        ERC20(_name, _symbol)\\r\\n    {}\\r\\n\\r\\n    function mint(uint256 _amount, address _issuer) external {\\r\\n        _mint(_issuer, _amount);\\r\\n    }\\r\\n\\r\\n    function burn(uint256 _amount, address _from) external {\\r\\n        _burn(_from, _amount);\\r\\n    }\\r\\n\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"contracts/test/ManualPriceReferenceFeed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma experimental ABIEncoderV2;\\r\\npragma solidity ^0.7.1;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"../interfaces/IPriceReferenceFeed.sol\\\";\\r\\n\\r\\ncontract ManualPriceReferenceFeed is Ownable, IPriceReferenceFeed {\\r\\n    uint256 public latestResult;\\r\\n    uint256 public lastUpdate;\\r\\n\\r\\n    function update(uint256 _value) external onlyOwner {\\r\\n        latestResult = _value;\\r\\n        lastUpdate = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function getRoundData(uint80 _roundId) external override view returns (\\r\\n        uint80 roundId, \\r\\n        int256 answer, \\r\\n        uint256 startedAt, \\r\\n        uint256 updatedAt, \\r\\n        uint80 answeredInRound\\r\\n    ) {\\r\\n        require(false, \\\"NOT_SUPPORTED\\\");\\r\\n    }\\r\\n    function latestRoundData() external override view returns (\\r\\n        uint80 roundId, \\r\\n        int256 answer, \\r\\n        uint256 startedAt, \\r\\n        uint256 updatedAt, \\r\\n        uint80 answeredInRound\\r\\n    ) {\\r\\n        updatedAt = lastUpdate;\\r\\n        answer = int256(latestResult);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/test/MockAaveLendingPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma experimental ABIEncoderV2;\\r\\npragma solidity ^0.7.1;\\r\\n\\r\\nimport \\\"../interfaces/IAaveLendingPool.sol\\\";\\r\\nimport \\\"./MockToken.sol\\\";\\r\\n\\r\\ncontract MockAaveLendingPool is IAaveLendingPool {\\r\\n    IERC20 public token;\\r\\n    MockToken public aToken;\\r\\n\\r\\n    bool public revertDeposit;\\r\\n\\r\\n    constructor(address _token, address _aToken) public {\\r\\n        token = IERC20(_token);\\r\\n        aToken = MockToken(_aToken);\\r\\n    }\\r\\n\\r\\n    function deposit(address _reserve, uint256 _amount, uint16 _refferalCode) external override {\\r\\n        require(!revertDeposit, \\\"Deposited revert\\\");\\r\\n        require(token.transferFrom(msg.sender, address(aToken), _amount), \\\"Transfer failed\\\");\\r\\n        aToken.mint(_amount, msg.sender);\\r\\n    }\\r\\n\\r\\n    function setRevertDeposit(bool _doRevert) external {\\r\\n        revertDeposit = _doRevert;\\r\\n    }\\r\\n\\r\\n    function core() external view override returns(address) {\\r\\n        return address(this);\\r\\n    }\\r\\n\\r\\n    function getReserveData(address _reserve)\\r\\n        external\\r\\n        override\\r\\n        view\\r\\n        returns (\\r\\n            uint256 totalLiquidity,\\r\\n            uint256 availableLiquidity,\\r\\n            uint256 totalBorrowsStable,\\r\\n            uint256 totalBorrowsVariable,\\r\\n            uint256 liquidityRate,\\r\\n            uint256 variableBorrowRate,\\r\\n            uint256 stableBorrowRate,\\r\\n            uint256 averageStableBorrowRate,\\r\\n            uint256 utilizationRate,\\r\\n            uint256 liquidityIndex,\\r\\n            uint256 variableBorrowIndex,\\r\\n            address aTokenAddress,\\r\\n            uint40 lastUpdateTimestamp\\r\\n        ) {\\r\\n            return(\\r\\n                0,\\r\\n                0,\\r\\n                0,\\r\\n                0,\\r\\n                10000000000000000000000000, //1%\\r\\n                0,\\r\\n                0,\\r\\n                0,\\r\\n                0,\\r\\n                0,\\r\\n                0,\\r\\n                address(0),\\r\\n                0\\r\\n            );\\r\\n        }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/test/MockAaveLendingPoolV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma experimental ABIEncoderV2;\\r\\npragma solidity ^0.7.1;\\r\\n\\r\\nimport \\\"../interfaces/IAaveLendingPoolV2.sol\\\";\\r\\nimport \\\"./MockToken.sol\\\";\\r\\n\\r\\ncontract MockAaveLendingPoolV2 is IAaveLendingPoolV2 {\\r\\n    IERC20 public token;\\r\\n    MockToken public aToken;\\r\\n\\r\\n    bool public revertDeposit;\\r\\n    bool public revertWithdraw;\\r\\n\\r\\n    constructor(address _token, address _aToken) public {\\r\\n        token = IERC20(_token);\\r\\n        aToken = MockToken(_aToken);\\r\\n    }\\r\\n\\r\\n    function deposit(\\r\\n        address _asset,\\r\\n        uint256 _amount,\\r\\n        address _onBehalfOf,\\r\\n        uint16 _referralCode\\r\\n    ) external override {\\r\\n        require(!revertDeposit, \\\"Deposited revert\\\");\\r\\n        require(token.transferFrom(msg.sender, address(this), _amount), \\\"Transfer failed\\\");\\r\\n        aToken.mint(_amount, msg.sender);\\r\\n    }\\r\\n\\r\\n    function withdraw(\\r\\n        address _asset,\\r\\n        uint256 _amount,\\r\\n        address _to\\r\\n    ) external override {\\r\\n        require(!revertWithdraw, \\\"Reverted\\\");\\r\\n\\r\\n        if (_amount == uint256(-1)) {\\r\\n            _amount = aToken.balanceOf(msg.sender);\\r\\n        }\\r\\n\\r\\n        aToken.burn(_amount, msg.sender);\\r\\n        require(token.transfer(msg.sender, _amount), \\\"Transfer failed\\\");\\r\\n    }\\r\\n\\r\\n    function getReserveData(address asset)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (DataTypes.ReserveData memory) {\\r\\n        return DataTypes.ReserveData({\\r\\n            configuration: DataTypes.ReserveConfigurationMap(0),\\r\\n            liquidityIndex: 0,\\r\\n            variableBorrowIndex: 0,\\r\\n            currentLiquidityRate: 10000000000000000000000000, //1%\\r\\n            currentVariableBorrowRate: 0,\\r\\n            currentStableBorrowRate: 0,\\r\\n            lastUpdateTimestamp: 0,\\r\\n            aTokenAddress: address(0),\\r\\n            stableDebtTokenAddress: address(0),\\r\\n            variableDebtTokenAddress: address(0),\\r\\n            interestRateStrategyAddress: address(0),\\r\\n            id: 0\\r\\n        });\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    function setRevertDeposit(bool _doRevert) external {\\r\\n        revertDeposit = _doRevert;\\r\\n    }\\r\\n    function setRevertWithdraw(bool _doRevert) external {\\r\\n        revertWithdraw = _doRevert;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/test/MockAToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma experimental ABIEncoderV2;\\r\\npragma solidity ^0.7.1;\\r\\n\\r\\nimport \\\"../interfaces/IAaveLendingPool.sol\\\";\\r\\nimport \\\"./MockToken.sol\\\";\\r\\n\\r\\ncontract MockAToken is MockToken {\\r\\n    IERC20 public token;\\r\\n\\r\\n    address public underlyingAssetAddress;\\r\\n    bool public revertRedeem;\\r\\n\\r\\n    constructor(address _token) public MockToken(\\\"MockAToken\\\", \\\"MATKN\\\") {\\r\\n        token = IERC20(_token);\\r\\n        underlyingAssetAddress = _token;\\r\\n    }\\r\\n\\r\\n    function redeem(uint256 _amount) external {\\r\\n        require(!revertRedeem, \\\"Reverted\\\");\\r\\n\\r\\n        if (_amount == uint256(-1)) {\\r\\n            _amount = balanceOf(msg.sender);\\r\\n        }\\r\\n\\r\\n        _burn(msg.sender, _amount);\\r\\n        require(token.transfer(msg.sender, _amount), \\\"Transfer failed\\\");\\r\\n    }\\r\\n\\r\\n    function setRevertRedeem(bool _doRevert) external {\\r\\n        revertRedeem = _doRevert;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/test/MockATokenV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma experimental ABIEncoderV2;\\r\\npragma solidity ^0.7.1;\\r\\n\\r\\nimport \\\"../interfaces/IAaveLendingPool.sol\\\";\\r\\nimport \\\"./MockToken.sol\\\";\\r\\n\\r\\ncontract MockATokenV2 is MockToken {\\r\\n    IERC20 public token;\\r\\n\\r\\n    address public UNDERLYING_ASSET_ADDRESS;\\r\\n\\r\\n    constructor(address _token) public MockToken(\\\"MockATokenV2\\\", \\\"MATKNV2\\\") {\\r\\n        token = IERC20(_token);\\r\\n        UNDERLYING_ASSET_ADDRESS = _token;\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/test/MockCToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma experimental ABIEncoderV2;\\r\\npragma solidity ^0.7.1;\\r\\n\\r\\nimport \\\"./MockToken.sol\\\";\\r\\nimport \\\"../interfaces/ICToken.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\n\\r\\n\\r\\ncontract MockCToken is MockToken, ICToken {\\r\\n    using SafeMath for uint256;\\r\\n    // representable value taken from cEth\\r\\n    uint256 public exchangeRate = 1 ether / 5;\\r\\n    MockToken public underlying;\\r\\n    uint256 someValue;\\r\\n\\r\\n    uint256 public errorCode;\\r\\n    constructor(address _underlying) MockToken(\\\"cTOKEN\\\", \\\"cToken\\\") public {\\r\\n        underlying = MockToken(_underlying);\\r\\n    }\\r\\n\\r\\n    function mint(uint256 _amount) external override returns(uint256) {\\r\\n        require(underlying.transferFrom(msg.sender, address(this), _amount), \\\"MockCToken.mint: transferFrom failed\\\");\\r\\n\\r\\n        uint256 mintAmount = _amount.mul(10**18).div(exchangeRate);\\r\\n        _mint(msg.sender, mintAmount);\\r\\n\\r\\n        return errorCode;\\r\\n    }\\r\\n\\r\\n    function redeem(uint256 _amount) external override returns(uint256) {\\r\\n        _burn(msg.sender, _amount);\\r\\n\\r\\n        uint256 underlyingAmount = _amount.mul(exchangeRate).div(10**18);\\r\\n        underlying.mint(underlyingAmount, msg.sender);\\r\\n\\r\\n        return errorCode;\\r\\n    }\\r\\n\\r\\n    function redeemUnderlying(uint256 _amount) external returns(uint256) {\\r\\n        uint256 internalAmount = _amount.mul(10**18).div(exchangeRate);\\r\\n        _burn(msg.sender, internalAmount);\\r\\n\\r\\n        underlying.mint(_amount, msg.sender);\\r\\n\\r\\n        return errorCode;\\r\\n    }\\r\\n\\r\\n    function balanceOfUnderlying(address _owner) external returns(uint256) {\\r\\n        return balanceOf(_owner).mul(exchangeRate).div(10**18);\\r\\n    }\\r\\n\\r\\n    function setErrorCode(uint256 _value) public {\\r\\n        errorCode = _value;\\r\\n    }\\r\\n\\r\\n    function supplyRatePerBlock() external override view returns (uint256) {\\r\\n        return 20000000000;\\r\\n    }\\r\\n\\r\\n    function exchangeRateCurrent() external override returns(uint256) {\\r\\n        // To make function state changing\\r\\n        someValue ++;\\r\\n        return exchangeRate;\\r\\n    }\\r\\n\\r\\n    function exchangeRateStored() external override view returns(uint256) {\\r\\n        // To make function non pure;\\r\\n        someValue;\\r\\n        return exchangeRate;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/test/MockLendingLogic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma experimental ABIEncoderV2;\\r\\npragma solidity ^0.7.1;\\r\\n\\r\\nimport \\\"../interfaces/ILendingLogic.sol\\\";\\r\\n\\r\\ncontract MockLendingLogic is ILendingLogic {\\r\\n    uint256 private apr;\\r\\n\\r\\n    function setAPR(uint256 _apr) public {\\r\\n        apr = _apr;\\r\\n    }\\r\\n\\r\\n    function getAPRFromWrapped(address _token) external view override returns(uint256) {\\r\\n        return apr;\\r\\n    }\\r\\n\\r\\n    function getAPRFromUnderlying(address _token) public view override returns(uint256) {\\r\\n        return apr;\\r\\n    }\\r\\n\\r\\n    function lend(address _underlying, uint256 _amount) external view override returns(address[] memory targets, bytes[] memory data) {\\r\\n        targets = new address[](1);\\r\\n        data = new bytes[](1);\\r\\n\\r\\n        targets[0] = _underlying;\\r\\n        data[0] = bytes(abi.encode(_amount));\\r\\n    }\\r\\n    function unlend(address _wrapped, uint256 _amount) external view override returns(address[] memory targets, bytes[] memory data) {\\r\\n        targets = new address[](1);\\r\\n        data = new bytes[](1);\\r\\n\\r\\n        targets[0] = _wrapped;\\r\\n        data[0] = bytes(abi.encode(_amount));\\r\\n    }\\r\\n\\r\\n    function exchangeRate(address) external pure override returns(uint256) {\\r\\n        return 10**18;\\r\\n    }\\r\\n\\r\\n    function exchangeRateView(address) external pure override returns(uint256) {\\r\\n        return 10**18;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/test/MockSynthetix.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma experimental ABIEncoderV2;\\r\\npragma solidity ^0.7.1;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"../interfaces/ISynthetix.sol\\\";\\r\\nimport \\\"./MockToken.sol\\\";\\r\\n\\r\\ncontract MockSynthetix is ISynthetix {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    mapping(bytes32=>MockToken) public keyToToken;\\r\\n    mapping(bytes32=>uint256) public tokenPrice;\\r\\n\\r\\n    // Mock variables to create edge cases\\r\\n    uint256 public subtractSourceAmount;\\r\\n    uint256 public subtractOutputAmount;\\r\\n\\r\\n    function setSubtractSourceAmount(uint256 _amount) external {\\r\\n        subtractSourceAmount = _amount;\\r\\n    }\\r\\n\\r\\n    function setSubtractOutputAmount(uint256 _amount) external {\\r\\n        subtractOutputAmount = _amount;\\r\\n    }\\r\\n\\r\\n    function exchange(bytes32 _sourceCurrencyKey, uint256 _sourceAmount, bytes32 _destinationCurrencyKey) external override {\\r\\n        uint256 sourcePrice = tokenPrice[_sourceCurrencyKey];\\r\\n        uint256 destinationPrice = tokenPrice[_destinationCurrencyKey];\\r\\n        uint256 outputAmount = _sourceAmount.mul(sourcePrice).div(destinationPrice);\\r\\n\\r\\n        getOrSetToken(_sourceCurrencyKey).burn(_sourceAmount.sub(subtractSourceAmount), msg.sender);\\r\\n        getOrSetToken(_destinationCurrencyKey).mint(outputAmount.sub(subtractOutputAmount), msg.sender);\\r\\n    }\\r\\n\\r\\n    function getOrSetToken(bytes32 _currencyKey) public returns(MockToken) {\\r\\n        if(address(keyToToken[_currencyKey]) == address(0)) {\\r\\n            keyToToken[_currencyKey] = new MockToken(string(abi.encode(_currencyKey)), string(abi.encode(_currencyKey)));\\r\\n            tokenPrice[_currencyKey] = 1 ether;\\r\\n        }\\r\\n\\r\\n        return keyToToken[_currencyKey];\\r\\n    }\\r\\n\\r\\n    function setPrice(bytes32 _currencyKey, uint256 _price) external {\\r\\n        tokenPrice[_currencyKey] = _price;\\r\\n    }\\r\\n\\r\\n    function getToken(bytes32 _currencyKey) external view returns(address) {\\r\\n        return address(keyToToken[_currencyKey]);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/test/MockXSushi.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma experimental ABIEncoderV2;\\r\\npragma solidity ^0.7.1;\\r\\n\\r\\nimport \\\"./MockToken.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\n\\r\\ncontract MockXSushi is MockToken {\\r\\n    using SafeMath for uint256;\\r\\n    uint256 public exchangeRate = 1 ether / 5;\\r\\n    MockToken public underlying;\\r\\n\\r\\n    uint256 public errorCode;\\r\\n    constructor(address _underlying) MockToken(\\\"xSUSHI\\\", \\\"xSUSHI\\\") public {\\r\\n        underlying = MockToken(_underlying);\\r\\n    }\\r\\n\\r\\n    function mint(uint256 _amount) external {\\r\\n        require(underlying.transferFrom(msg.sender, address(this), _amount), \\\"MockXSushi.mint: transferFrom failed\\\");\\r\\n\\r\\n        uint256 mintAmount = _amount.mul(10**18).div(exchangeRate);\\r\\n        _mint(msg.sender, mintAmount);\\r\\n    }\\r\\n\\r\\n    function enter(uint256 _amount) external {\\r\\n        require(underlying.transferFrom(msg.sender, address(this), _amount), \\\"MockXSushi.enter: transferFrom failed\\\");\\r\\n\\r\\n        uint256 mintAmount = _amount.mul(10**18).div(exchangeRate);\\r\\n        _mint(msg.sender, mintAmount);\\r\\n    }\\r\\n\\r\\n    function exchangeRateStored() external view returns(uint256) {\\r\\n        return exchangeRate;\\r\\n    }\\r\\n\\r\\n    function leave(uint256 _amount) external{\\r\\n        _burn(msg.sender, _amount);\\r\\n\\r\\n        uint256 underlyingAmount = _amount.mul(exchangeRate).div(10**18);\\r\\n        underlying.mint(underlyingAmount, msg.sender);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/test/MockYVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma experimental ABIEncoderV2;\\r\\npragma solidity ^0.7.1;\\r\\n\\r\\nimport \\\"./MockToken.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\n\\r\\n\\r\\ncontract MockYVault is MockToken {\\r\\n    using SafeMath for uint256;\\r\\n    uint256 public exchangeRate = 1 ether / 5;\\r\\n    MockToken public underlying;\\r\\n\\r\\n    constructor(address _underlying) MockToken(\\\"yVAULT\\\", \\\"yVAULT\\\") public {\\r\\n        underlying = MockToken(_underlying);\\r\\n    }\\r\\n\\r\\n    function mint(uint256 _amount) external {\\r\\n        require(underlying.transferFrom(msg.sender, address(this), _amount), \\\"MockXSushi.mint: transferFrom failed\\\");\\r\\n\\r\\n        uint256 mintAmount = _amount.mul(10**18).div(exchangeRate);\\r\\n        _mint(msg.sender, mintAmount);\\r\\n    }\\r\\n\\r\\n    function deposit(uint256 _amount) external {\\r\\n        require(underlying.transferFrom(msg.sender, address(this), _amount), \\\"MockYVault.enter: transferFrom failed\\\");\\r\\n\\r\\n        uint256 mintAmount = _amount.mul(10**18).div(exchangeRate);\\r\\n        _mint(msg.sender, mintAmount);\\r\\n    }\\r\\n\\r\\n    function getPricePerFullShare() external view returns(uint) {\\r\\n        return exchangeRate;\\r\\n    }\\r\\n\\r\\n    function withdraw(uint256 _amount) external{\\r\\n        _burn(msg.sender, _amount);\\r\\n\\r\\n        uint256 underlyingAmount = _amount.mul(exchangeRate).div(10**18);\\r\\n        underlying.mint(underlyingAmount, msg.sender);\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MIN_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pie\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TokenListUpdater","CompilerVersion":"v0.7.1+commit.f4a555be","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}