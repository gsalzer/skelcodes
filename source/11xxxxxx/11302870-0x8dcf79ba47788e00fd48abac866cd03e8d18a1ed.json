{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\ncontract Farm {\r\n    using SafeMath for uint256;\r\n\r\n    struct User {\r\n        uint256 lastBlockChecked;\r\n        uint256 rewards;\r\n        uint256 pooledBalance3;\r\n        uint256 pooledBalance6;\r\n        uint256 pooledBalance12;\r\n        uint256 lastStake3;\r\n        uint256 lastStake6;\r\n        uint256 lastStake12;\r\n    }\r\n\r\n\r\n    uint256 public difficulty3;\r\n    uint256 public difficulty6;\r\n    uint256 public difficulty12;\r\n\r\n    uint256 public totalPooledBPT3;\r\n    uint256 public totalPooledBPT6;\r\n    uint256 public totalPooledBPT12;\r\n    \r\n    uint256 private month = 2629743;\r\n    \r\n    address private owner;\r\n\r\n    IERC20 public ao;\r\n    IERC20 public bpt;\r\n\r\n\r\n    mapping(address => User) public pooled;\r\n    mapping(address => uint256) public totalClaimed;\r\n\r\n    \r\n    event Staked(address indexed user, uint256 amount);\r\n    event Withdrawn(address indexed user, uint256 amount, uint256 fee);\r\n    event Rewarded(address indexed user, uint256 amountClaimed);\r\n\r\n\r\n    constructor (address _ao, address _bpt) public {\r\n        owner = msg.sender;\r\n        ao = IERC20(_ao);\r\n        bpt = IERC20(_bpt);\r\n    }\r\n\r\n    modifier _onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    \r\n\r\n\r\n    function update(address account) internal virtual {\r\n        pooled[account].rewards = pendingReward(msg.sender);\r\n        pooled[account].lastBlockChecked = block.number;        \r\n    }\r\n    \r\n    function getPooledBalance3(address _account) public view returns (uint256) {\r\n        return pooled[_account].pooledBalance3;\r\n    }\r\n\r\n    function getPooledBalance6(address _account) public view returns (uint256) {\r\n        return pooled[_account].pooledBalance6;\r\n    }\r\n\r\n    function getPooledBalance12(address _account) public view returns (uint256) {\r\n        return pooled[_account].pooledBalance12;\r\n    }\r\n    \r\n    function getLast3(address _account) public view returns (uint256) {\r\n        return pooled[_account].lastStake3;\r\n    }\r\n\r\n    function getLast6(address _account) public view returns (uint256) {\r\n        return pooled[_account].lastStake6;\r\n    }\r\n\r\n    function getLast12(address _account) public view returns (uint256) {\r\n        return pooled[_account].lastStake12;\r\n    }\r\n    \r\n    function setDifficulty(uint256 amount3, uint256 amount6, uint256 amount12) public _onlyOwner {\r\n        difficulty3 = amount3;\r\n        difficulty6 = amount6;\r\n        difficulty12 = amount12;\r\n\r\n    }\r\n\r\n    function pooledBalance() public view returns (uint256) {\r\n        return bpt.balanceOf(address(this));\r\n    }\r\n\r\n    function aoRemaining() public view returns (uint256) {\r\n        return ao.balanceOf(address(this));\r\n    }\r\n\r\n\r\n\r\n\r\n    function pendingReward(address account) public view returns (uint256) {\r\n        if (block.number > pooled[account].lastBlockChecked) {\r\n            uint256 rewardBlocks = block.number\r\n                                        .sub(pooled[account].lastBlockChecked);\r\n                                        \r\n                                        \r\n             \r\n\r\n                uint256 reward3 = pooled[account].pooledBalance3.mul(rewardBlocks) / difficulty3;\r\n                uint256 reward6 = pooled[account].pooledBalance6.mul(rewardBlocks) / difficulty6;\r\n                uint256 reward12 = pooled[account].pooledBalance12.mul(rewardBlocks) / difficulty12;\r\n\r\n\r\n                return pooled[account].rewards.add(reward3).add(reward6).add(reward12);\r\n        }\r\n    }\r\n\r\n    function stakePool3(uint256 amount) public {\r\n        update(msg.sender);\r\n        require(bpt.transferFrom(msg.sender, address(this), amount));\r\n        pooled[msg.sender].pooledBalance3 = pooled[msg.sender].pooledBalance3.add(amount);\r\n        pooled[msg.sender].lastStake3 = now;\r\n        totalPooledBPT3 = totalPooledBPT3.add(amount);\r\n        emit Staked(msg.sender, amount);\r\n    }\r\n\r\n    function stakePool6(uint256 amount) public {\r\n        update(msg.sender);\r\n        require(bpt.transferFrom(msg.sender, address(this), amount));\r\n        pooled[msg.sender].pooledBalance6 = pooled[msg.sender].pooledBalance6.add(amount);\r\n        pooled[msg.sender].lastStake6 = now;\r\n        totalPooledBPT6 = totalPooledBPT6.add(amount);\r\n        emit Staked(msg.sender, amount);\r\n    }\r\n\r\n    function stakePool12(uint256 amount) public {\r\n        update(msg.sender);\r\n        require(bpt.transferFrom(msg.sender, address(this), amount));\r\n        pooled[msg.sender].pooledBalance12 = pooled[msg.sender].pooledBalance12.add(amount);\r\n        pooled[msg.sender].lastStake12 = now;\r\n        totalPooledBPT12 = totalPooledBPT12.add(amount);\r\n        emit Staked(msg.sender, amount);\r\n    }\r\n\r\n    function totalPoolSum() public view returns (uint256) {\r\n        return totalPooledBPT3.add(totalPooledBPT6).add(totalPooledBPT12);\r\n    }\r\n   \r\n   function withdrawPool3(uint256 amount) public {\r\n\r\n       uint256 timeSinceLastStake = now.sub(pooled[msg.sender].lastStake3);\r\n       require(timeSinceLastStake >= month, \"Unlock time has not elapsed\");\r\n       require(pooled[msg.sender].pooledBalance3 >= amount);\r\n\r\n       uint256 baseAmount = amount.mul(pooledBalance()).div(totalPoolSum());\r\n       uint256 withdrawBPT;\r\n       uint256 fee;\r\n\r\n       if (timeSinceLastStake < month.mul(2)) {\r\n           withdrawBPT = baseAmount.mul(85).div(100);\r\n           fee = 15;\r\n           } else if (timeSinceLastStake >= month.mul(2) && timeSinceLastStake < month.mul(3)) {\r\n            withdrawBPT = baseAmount.mul(90).div(100);\r\n           fee = 10;\r\n           } else if (timeSinceLastStake >= month.mul(3)) {\r\n           withdrawBPT = baseAmount;\r\n           fee = 0;\r\n           }\r\n\r\n        getReward();\r\n        pooled[msg.sender].pooledBalance3 = pooled[msg.sender].pooledBalance3.sub(amount);\r\n        totalPooledBPT3 = totalPooledBPT3.sub(amount);\r\n        \r\n        bpt.transfer(msg.sender, withdrawBPT);\r\n        emit Withdrawn(msg.sender, amount, fee);\r\n    }\r\n\r\n    function withdrawPool6(uint256 amount) public {\r\n\r\n       uint256 timeSinceLastStake = now.sub(pooled[msg.sender].lastStake6);\r\n       require(timeSinceLastStake >= month.mul(2), \"Unlock time has not elapsed\");\r\n       require(pooled[msg.sender].pooledBalance6 >= amount);\r\n\r\n       uint256 baseAmount = amount.mul(pooledBalance()).div(totalPoolSum());\r\n       uint256 withdrawBPT;\r\n       uint256 fee;\r\n\r\n       if (timeSinceLastStake < month.mul(4)) {\r\n           withdrawBPT = baseAmount.mul(85).div(100);\r\n           fee = 15;\r\n           } else if (timeSinceLastStake >= month.mul(4) && timeSinceLastStake < month.mul(6)) {\r\n            withdrawBPT = baseAmount.mul(90).div(100);\r\n           fee = 10;\r\n           } else if (timeSinceLastStake >= month.mul(6)) {\r\n           withdrawBPT = baseAmount;\r\n           fee = 0;\r\n           }\r\n\r\n        getReward();\r\n        pooled[msg.sender].pooledBalance6 = pooled[msg.sender].pooledBalance6.sub(amount);\r\n        totalPooledBPT6 = totalPooledBPT6.sub(amount);\r\n\r\n        bpt.transfer(msg.sender, withdrawBPT);\r\n        emit Withdrawn(msg.sender, amount, fee);\r\n    }\r\n\r\n    function withdrawPool12(uint256 amount) public {\r\n\r\n       uint256 timeSinceLastStake = now.sub(pooled[msg.sender].lastStake12);\r\n       require(timeSinceLastStake >= month.mul(4), \"Unlock time has not elapsed\");\r\n       require(pooled[msg.sender].pooledBalance12 >= amount);\r\n\r\n       uint256 baseAmount = amount.mul(pooledBalance()).div(totalPoolSum());\r\n       uint256 withdrawBPT;\r\n       uint256 fee;\r\n\r\n       if (timeSinceLastStake < month.mul(8)) {\r\n           withdrawBPT = baseAmount.mul(85).div(100);\r\n           fee = 15;\r\n           } else if (timeSinceLastStake >= month.mul(8) && timeSinceLastStake < month.mul(12)) {\r\n            withdrawBPT = baseAmount.mul(90).div(100);\r\n           fee = 10;\r\n           } else if (timeSinceLastStake >= month.mul(12)) {\r\n           withdrawBPT = baseAmount;\r\n           fee = 0;\r\n           }\r\n\r\n        getReward();\r\n        pooled[msg.sender].pooledBalance12 = pooled[msg.sender].pooledBalance12.sub(amount);\r\n        totalPooledBPT12 = totalPooledBPT12.sub(amount);\r\n\r\n        bpt.transfer(msg.sender, withdrawBPT);\r\n        emit Withdrawn(msg.sender, amount, fee);\r\n    }\r\n\r\n    \r\n\r\n   function getReward() public {\r\n       update(msg.sender);\r\n       uint256 reward = pooled[msg.sender].rewards;\r\n       if (reward <= aoRemaining()) {\r\n       pooled[msg.sender].rewards = 0;\r\n       ao.transfer(msg.sender, reward);\r\n       totalClaimed[msg.sender] = totalClaimed[msg.sender].add(reward);\r\n       emit Rewarded(msg.sender, reward);\r\n       }\r\n   }\r\n\r\n    \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ao\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bpt\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"}],\"name\":\"Rewarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ao\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aoRemaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bpt\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"difficulty12\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"difficulty3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"difficulty6\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getLast12\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getLast3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getLast6\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getPooledBalance12\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getPooledBalance3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getPooledBalance6\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pooled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastBlockChecked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pooledBalance3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pooledBalance6\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pooledBalance12\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastStake3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastStake6\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastStake12\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pooledBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount6\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount12\",\"type\":\"uint256\"}],\"name\":\"setDifficulty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakePool12\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakePool3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakePool6\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPoolSum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPooledBPT12\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPooledBPT3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPooledBPT6\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawPool12\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawPool3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawPool6\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Farm","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000022057c3ef9166433750165bfda21d52988e075600000000000000000000000003b3195eb046fdfa88aa75dabae5829d8b99c9ed","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d709233f3ebff28c97d6fbe0794a27cee5f7bda6ee6f4c53f16cadd42677c537"}]}