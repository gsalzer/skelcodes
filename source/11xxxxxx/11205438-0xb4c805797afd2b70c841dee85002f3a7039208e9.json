{"status":"1","message":"OK","result":[{"SourceCode":"{\"Seed.sol\":{\"content\":\"/*\\r\\n                    |   _|_)                             \\r\\n  __|  _ \\\\  _ \\\\  _` |  |   | __ \\\\   _` | __ \\\\   __|  _ \\\\ \\r\\n\\\\__ \\\\  __/  __/ (   |  __| | |   | (   | |   | (     __/ \\r\\n____/\\\\___|\\\\___|\\\\__,_| _|  _|_|  _|\\\\__,_|_|  _|\\\\___|\\\\___| \\r\\n* Home: https://superseed.cc\\r\\n* https://t.me/superseedgroup\\r\\n* https://twitter.com/superseedtoken\\r\\n* https://superseedtoken.medium.com\\r\\n* MIT License\\r\\n* ===========\\r\\n*\\r\\n* Copyright (c) 2020 Superseed\\r\\n* SPDX-License-Identifier: MIT\\r\\n* Permission is hereby granted, free of charge, to any person obtaining a copy\\r\\n* of this software and associated documentation files (the \\\"Software\\\"), to deal\\r\\n* in the Software without restriction, including without limitation the rights\\r\\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\r\\n* copies of the Software, and to permit persons to whom the Software is\\r\\n* furnished to do so, subject to the following conditions:\\r\\n*\\r\\n* The above copyright notice and this permission notice shall be included in all\\r\\n* copies or substantial portions of the Software.\\r\\n*\\r\\n* THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\r\\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\r\\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\r\\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\r\\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\r\\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\r\\n*/\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\ninterface IOwnershipTransferrable {\\r\\n  function transferOwnership(address owner) external;\\r\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n}\\r\\n\\r\\nabstract contract Ownable is IOwnershipTransferrable {\\r\\n  address private _owner;\\r\\n\\r\\n  constructor(address owner) {\\r\\n    _owner = owner;\\r\\n    emit OwnershipTransferred(address(0), _owner);\\r\\n  }\\r\\n\\r\\n  function owner() public view returns (address) {\\r\\n    return _owner;\\r\\n  }\\r\\n\\r\\n  modifier onlyOwner() {\\r\\n    require(_owner == msg.sender, \\\"Ownable: caller is not the owner\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function transferOwnership(address newOwner) override external onlyOwner {\\r\\n    require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n    emit OwnershipTransferred(_owner, newOwner);\\r\\n    _owner = newOwner;\\r\\n  }\\r\\n}\\r\\n\\r\\nlibrary SafeMath {\\r\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    uint256 c = a + b;\\r\\n    require(c \\u003e= a);\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    require(b \\u003c= a);\\r\\n    uint256 c = a - b;\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    if (a == 0) {\\r\\n      return 0;\\r\\n    }\\r\\n    uint256 c = a * b;\\r\\n    require(c / a == b);\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    require(b \\u003e 0);\\r\\n    uint256 c = a / b;\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    require(b != 0);\\r\\n    return a % b;\\r\\n  }\\r\\n}\\r\\n\\r\\ncontract Seed is Ownable {\\r\\n  using SafeMath for uint256;\\r\\n\\r\\n  string private _name;\\r\\n  string private _symbol;\\r\\n  uint8 private _decimals;\\r\\n  \\r\\n  uint256 private _totalSupply;\\r\\n  uint256 constant UINT256_MAX = ~uint256(0);\\r\\n  \\r\\n  mapping(address =\\u003e uint256) private _balances;\\r\\n  mapping(address =\\u003e mapping(address =\\u003e uint256)) private _allowances;\\r\\n\\r\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n  constructor() Ownable(msg.sender) { \\r\\n    _name = \\\"Seed\\\";\\r\\n    _symbol = \\\"SEED\\\";\\r\\n    _decimals = 18;\\r\\n\\t_totalSupply = 1000000 * 1e18;\\r\\n\\r\\n    _balances[msg.sender] = _totalSupply;\\r\\n    emit Transfer(address(0), msg.sender, _totalSupply);\\r\\n  }\\r\\n\\r\\n  function name() external view returns (string memory) {\\r\\n    return _name;\\r\\n  }\\r\\n\\r\\n  function symbol() external view returns (string memory) {\\r\\n    return _symbol;\\r\\n  }\\r\\n\\r\\n  function decimals() external view returns (uint8) {\\r\\n    return _decimals;\\r\\n  }\\r\\n\\r\\n  function totalSupply() external view returns (uint256) {\\r\\n    return _totalSupply;\\r\\n  }\\r\\n\\r\\n  function balanceOf(address account) external view returns (uint256) {\\r\\n    return _balances[account];\\r\\n  }\\r\\n\\r\\n  function allowance(address owner, address spender) external view returns (uint256) {\\r\\n    return _allowances[owner][spender];\\r\\n  }\\r\\n\\r\\n  function transfer(address recipient, uint256 amount) external returns (bool) {\\r\\n    _transfer(msg.sender, recipient, amount);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function approve(address spender, uint256 amount) external returns (bool) {\\r\\n    _approve(msg.sender, spender, amount);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {\\r\\n    _transfer(sender, recipient, amount);\\r\\n    if (_allowances[msg.sender][sender] != UINT256_MAX) {\\r\\n      _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\\r\\n    }\\r\\n    return true;\\r\\n  }\\r\\n  \\r\\n  function _transfer(address sender, address recipient, uint256 amount) internal {\\r\\n    require(sender != address(0));\\r\\n    require(recipient != address(0));\\r\\n\\r\\n    _balances[sender] = _balances[sender].sub(amount);\\r\\n    _balances[recipient] = _balances[recipient].add(amount);\\r\\n    emit Transfer(sender, recipient, amount);\\r\\n  }\\r\\n  \\r\\n  function mint(address account, uint256 amount) external onlyOwner {\\r\\n    _totalSupply = _totalSupply.add(amount);\\r\\n    _balances[account] = _balances[account].add(amount);\\r\\n    emit Transfer(address(0), account, amount);\\r\\n  }  \\r\\n\\r\\n  function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\\r\\n    _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\\r\\n    _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function _approve(address owner, address spender, uint256 amount) internal {\\r\\n    require(owner != address(0));\\r\\n    require(spender != address(0));\\r\\n\\r\\n    _allowances[owner][spender] = amount;\\r\\n    emit Approval(owner, spender, amount);\\r\\n  }\\r\\n\\r\\n  function burn(uint256 amount) external returns (bool) {\\r\\n    _balances[msg.sender] = _balances[msg.sender].sub(amount);\\r\\n    _totalSupply = _totalSupply.sub(amount);\\r\\n    emit Transfer(msg.sender, address(0), amount);\\r\\n    return true;\\r\\n  }\\r\\n}\\r\\n\"},\"SeedLoan.sol\":{\"content\":\"/*\\r\\n                    |   _|_)                             \\r\\n  __|  _ \\\\  _ \\\\  _` |  |   | __ \\\\   _` | __ \\\\   __|  _ \\\\ \\r\\n\\\\__ \\\\  __/  __/ (   |  __| | |   | (   | |   | (     __/ \\r\\n____/\\\\___|\\\\___|\\\\__,_| _|  _|_|  _|\\\\__,_|_|  _|\\\\___|\\\\___| \\r\\n* Home: https://superseed.cc\\r\\n* https://t.me/superseedgroup\\r\\n* https://twitter.com/superseedtoken\\r\\n* https://superseedtoken.medium.com\\r\\n* MIT License\\r\\n* ===========\\r\\n*\\r\\n* Copyright (c) 2020 Superseed\\r\\n* SPDX-License-Identifier: MIT\\r\\n* Permission is hereby granted, free of charge, to any person obtaining a copy\\r\\n* of this software and associated documentation files (the \\\"Software\\\"), to deal\\r\\n* in the Software without restriction, including without limitation the rights\\r\\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\r\\n* copies of the Software, and to permit persons to whom the Software is\\r\\n* furnished to do so, subject to the following conditions:\\r\\n*\\r\\n* The above copyright notice and this permission notice shall be included in all\\r\\n* copies or substantial portions of the Software.\\r\\n*\\r\\n* THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\r\\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\r\\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\r\\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\r\\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\r\\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\r\\n*/\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\nimport \\\"./Seed.sol\\\";\\r\\n\\r\\nabstract contract ReentrancyGuard {\\r\\n  bool private _entered;\\r\\n\\r\\n  modifier noReentrancy() {\\r\\n    require(!_entered);\\r\\n    _entered = true;\\r\\n    _;\\r\\n    _entered = false;\\r\\n  }\\r\\n}\\r\\n\\r\\ninterface ISeedBorrower {\\r\\n  function loaned(uint256 amount, uint256 owed) external;\\r\\n}\\r\\n\\r\\ncontract SeedLoan is ReentrancyGuard, Ownable {\\r\\n  using SafeMath for uint256;\\r\\n  Seed private _SEED;\\r\\n  uint256 internal _feeDivisor = 100;\\r\\n\\r\\n  event Loaned(uint256 amount, uint256 profit);\\r\\n\\r\\n  constructor(address SEED, address seedStake) Ownable(seedStake) {\\r\\n    _SEED = Seed(SEED);\\r\\n  }\\r\\n\\r\\n  // loan out SEED from the staked funds\\r\\n  function loan(uint256 amount) external noReentrancy {\\r\\n    // set a profit of 1%\\r\\n    uint256 profit = amount.div(_feeDivisor);\\r\\n    uint256 owed = amount.add(profit);\\r\\n    // transfer the funds\\r\\n    require(_SEED.transferFrom(owner(), msg.sender, amount));\\r\\n\\r\\n    // call the loaned function\\r\\n    ISeedBorrower(msg.sender).loaned(amount, owed);\\r\\n\\r\\n    // transfer back to the staking pool\\r\\n    require(_SEED.transferFrom(msg.sender, owner(), amount));\\r\\n    // take the profit\\r\\n    require(_SEED.transferFrom(msg.sender, address(this), profit));\\r\\n    // burn it, distributing its value to the ecosystem\\r\\n    require(_SEED.burn(profit));\\r\\n\\r\\n    emit Loaned(amount, profit);\\r\\n  }\\r\\n}\\r\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"SEED\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seedStake\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"}],\"name\":\"Loaned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"loan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SeedLoan","CompilerVersion":"v0.7.0+commit.9e61f92b","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000f6f8a2c3d57e77f6d2b3bc27adf1d19ca417916300000000000000000000000035584c8d94c58b422ac2ae4e9d6c8eeb22bf3ab3","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://aa7d2f42d13fd36c9a8d1809d2a8d822f3dce7ed4a6cb40e11ee694aed6014d0"}]}