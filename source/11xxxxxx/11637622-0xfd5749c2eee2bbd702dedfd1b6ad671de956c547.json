{"status":"1","message":"OK","result":[{"SourceCode":"// Dependency file: @evolutionland/common/contracts/interfaces/ISettingsRegistry.sol\r\n\r\n// pragma solidity ^0.4.24;\r\n\r\ncontract ISettingsRegistry {\r\n    enum SettingsValueTypes { NONE, UINT, STRING, ADDRESS, BYTES, BOOL, INT }\r\n\r\n    function uintOf(bytes32 _propertyName) public view returns (uint256);\r\n\r\n    function stringOf(bytes32 _propertyName) public view returns (string);\r\n\r\n    function addressOf(bytes32 _propertyName) public view returns (address);\r\n\r\n    function bytesOf(bytes32 _propertyName) public view returns (bytes);\r\n\r\n    function boolOf(bytes32 _propertyName) public view returns (bool);\r\n\r\n    function intOf(bytes32 _propertyName) public view returns (int);\r\n\r\n    function setUintProperty(bytes32 _propertyName, uint _value) public;\r\n\r\n    function setStringProperty(bytes32 _propertyName, string _value) public;\r\n\r\n    function setAddressProperty(bytes32 _propertyName, address _value) public;\r\n\r\n    function setBytesProperty(bytes32 _propertyName, bytes _value) public;\r\n\r\n    function setBoolProperty(bytes32 _propertyName, bool _value) public;\r\n\r\n    function setIntProperty(bytes32 _propertyName, int _value) public;\r\n\r\n    function getValueTypeOf(bytes32 _propertyName) public view returns (uint /* SettingsValueTypes */ );\r\n\r\n    event ChangeProperty(bytes32 indexed _propertyName, uint256 _type);\r\n}\r\n\r\n// Dependency file: @evolutionland/common/contracts/interfaces/ERC223ReceivingContract.sol\r\n\r\n// pragma solidity ^0.4.23;\r\n\r\n /*\r\n * Contract that is working with ERC223 tokens\r\n * https://github.com/ethereum/EIPs/issues/223\r\n */\r\n\r\n/// @title ERC223ReceivingContract - Standard contract implementation for compatibility with ERC223 tokens.\r\ncontract ERC223ReceivingContract {\r\n\r\n    /// @dev Function that is called when a user or another contract wants to transfer funds.\r\n    /// @param _from Transaction initiator, analogue of msg.sender\r\n    /// @param _value Number of tokens to transfer.\r\n    /// @param _data Data containig a function signature and/or parameters\r\n    function tokenFallback(address _from, uint256 _value, bytes _data) public;\r\n\r\n}\r\n\r\n\r\n// Dependency file: @evolutionland/common/contracts/interfaces/ERC223.sol\r\n\r\n// pragma solidity ^0.4.23;\r\n\r\ncontract ERC223 {\r\n    function transfer(address to, uint amount, bytes data) public returns (bool ok);\r\n\r\n    function transferFrom(address from, address to, uint256 amount, bytes data) public returns (bool ok);\r\n\r\n    event ERC223Transfer(address indexed from, address indexed to, uint amount, bytes data);\r\n}\r\n\r\n\r\n// Dependency file: @evolutionland/common/contracts/interfaces/IUserPoints.sol\r\n\r\n// pragma solidity ^0.4.24;\r\n\r\ncontract IUserPoints {\r\n    event AddedPoints(address indexed user, uint256 pointAmount);\r\n    event SubedPoints(address indexed user, uint256 pointAmount);\r\n\r\n    function addPoints(address _user, uint256 _pointAmount) public;\r\n\r\n    function subPoints(address _user, uint256 _pointAmount) public;\r\n\r\n    function pointsSupply() public view returns (uint256);\r\n\r\n    function pointsBalanceOf(address _user) public view returns (uint256);\r\n}\r\n\r\n\r\n// Dependency file: @evolutionland/common/contracts/interfaces/IAuthority.sol\r\n\r\n// pragma solidity ^0.4.24;\r\n\r\ncontract IAuthority {\r\n    function canCall(\r\n        address src, address dst, bytes4 sig\r\n    ) public view returns (bool);\r\n}\r\n\r\n// Dependency file: @evolutionland/common/contracts/DSAuth.sol\r\n\r\n// pragma solidity ^0.4.24;\r\n\r\n// import '/Users/d/itering/projects/for-market-contract/node_modules/@evolutionland/common/contracts/interfaces/IAuthority.sol';\r\n\r\ncontract DSAuthEvents {\r\n    event LogSetAuthority (address indexed authority);\r\n    event LogSetOwner     (address indexed owner);\r\n}\r\n\r\n/**\r\n * @title DSAuth\r\n * @dev The DSAuth contract is reference implement of https://github.com/dapphub/ds-auth\r\n * But in the isAuthorized method, the src from address(this) is remove for safty concern.\r\n */\r\ncontract DSAuth is DSAuthEvents {\r\n    IAuthority   public  authority;\r\n    address      public  owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        emit LogSetOwner(msg.sender);\r\n    }\r\n\r\n    function setOwner(address owner_)\r\n        public\r\n        auth\r\n    {\r\n        owner = owner_;\r\n        emit LogSetOwner(owner);\r\n    }\r\n\r\n    function setAuthority(IAuthority authority_)\r\n        public\r\n        auth\r\n    {\r\n        authority = authority_;\r\n        emit LogSetAuthority(authority);\r\n    }\r\n\r\n    modifier auth {\r\n        require(isAuthorized(msg.sender, msg.sig));\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\r\n        if (src == owner) {\r\n            return true;\r\n        } else if (authority == IAuthority(0)) {\r\n            return false;\r\n        } else {\r\n            return authority.canCall(src, this, sig);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\n// pragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n// Dependency file: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n// pragma solidity ^0.4.24;\r\n\r\n// import \"openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\";\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n\r\n// Dependency file: @evolutionland/common/contracts/SettingIds.sol\r\n\r\n// pragma solidity ^0.4.24;\r\n\r\n/**\r\n    Id definitions for SettingsRegistry.sol\r\n    Can be used in conjunction with the settings registry to get properties\r\n*/\r\ncontract SettingIds {\r\n    bytes32 public constant CONTRACT_RING_ERC20_TOKEN = \"CONTRACT_RING_ERC20_TOKEN\";\r\n\r\n    bytes32 public constant CONTRACT_KTON_ERC20_TOKEN = \"CONTRACT_KTON_ERC20_TOKEN\";\r\n\r\n    bytes32 public constant CONTRACT_GOLD_ERC20_TOKEN = \"CONTRACT_GOLD_ERC20_TOKEN\";\r\n\r\n    bytes32 public constant CONTRACT_WOOD_ERC20_TOKEN = \"CONTRACT_WOOD_ERC20_TOKEN\";\r\n\r\n    bytes32 public constant CONTRACT_WATER_ERC20_TOKEN = \"CONTRACT_WATER_ERC20_TOKEN\";\r\n\r\n    bytes32 public constant CONTRACT_FIRE_ERC20_TOKEN = \"CONTRACT_FIRE_ERC20_TOKEN\";\r\n\r\n    bytes32 public constant CONTRACT_SOIL_ERC20_TOKEN = \"CONTRACT_SOIL_ERC20_TOKEN\";\r\n\r\n    bytes32 public constant CONTRACT_OBJECT_OWNERSHIP = \"CONTRACT_OBJECT_OWNERSHIP\";\r\n\r\n    bytes32 public constant CONTRACT_TOKEN_LOCATION = \"CONTRACT_TOKEN_LOCATION\";\r\n\r\n    bytes32 public constant CONTRACT_LAND_BASE = \"CONTRACT_LAND_BASE\";\r\n\r\n    bytes32 public constant CONTRACT_USER_POINTS = \"CONTRACT_USER_POINTS\";\r\n\r\n    bytes32 public constant CONTRACT_INTERSTELLAR_ENCODER = \"CONTRACT_INTERSTELLAR_ENCODER\";\r\n\r\n    bytes32 public constant CONTRACT_DIVIDENDS_POOL = \"CONTRACT_DIVIDENDS_POOL\";\r\n\r\n    bytes32 public constant CONTRACT_TOKEN_USE = \"CONTRACT_TOKEN_USE\";\r\n\r\n    bytes32 public constant CONTRACT_REVENUE_POOL = \"CONTRACT_REVENUE_POOL\";\r\n\r\n    bytes32 public constant CONTRACT_ERC721_BRIDGE = \"CONTRACT_ERC721_BRIDGE\";\r\n\r\n    bytes32 public constant CONTRACT_PET_BASE = \"CONTRACT_PET_BASE\";\r\n\r\n    // Cut owner takes on each auction, measured in basis points (1/100 of a percent).\r\n    // this can be considered as transaction fee.\r\n    // Values 0-10,000 map to 0%-100%\r\n    // set ownerCut to 4%\r\n    // ownerCut = 400;\r\n    bytes32 public constant UINT_AUCTION_CUT = \"UINT_AUCTION_CUT\";  // Denominator is 10000\r\n\r\n    bytes32 public constant UINT_TOKEN_OFFER_CUT = \"UINT_TOKEN_OFFER_CUT\";  // Denominator is 10000\r\n\r\n    // Cut referer takes on each auction, measured in basis points (1/100 of a percent).\r\n    // which cut from transaction fee.\r\n    // Values 0-10,000 map to 0%-100%\r\n    // set refererCut to 4%\r\n    // refererCut = 400;\r\n    bytes32 public constant UINT_REFERER_CUT = \"UINT_REFERER_CUT\";\r\n\r\n    bytes32 public constant CONTRACT_LAND_RESOURCE = \"CONTRACT_LAND_RESOURCE\";\r\n}\r\n\r\n// Dependency file: contracts/AuctionSettingIds.sol\r\n\r\n// pragma solidity ^0.4.24;\r\n\r\n// import \"@evolutionland/common/contracts/SettingIds.sol\";\r\n\r\ncontract AuctionSettingIds is SettingIds {\r\n\r\n    bytes32 public constant CONTRACT_CLOCK_AUCTION = \"CONTRACT_CLOCK_AUCTION\";\r\n\r\n    // BidWaitingTime in seconds, default is 30 minutes\r\n    // necessary period of time from invoking bid action to successfully taking the land asset.\r\n    // if someone else bid the same auction with higher price and within bidWaitingTime, your bid failed.\r\n    bytes32 public constant UINT_AUCTION_BID_WAITING_TIME = \"UINT_AUCTION_BID_WAITING_TIME\";\r\n\r\n\r\n    bytes32 public constant CONTRACT_MYSTERIOUS_TREASURE = \"CONTRACT_MYSTERIOUS_TREASURE\";\r\n\r\n    // users change eth(in wei) into ring with bancor exchange\r\n    // which introduce bancor protocol to regulate the price of ring\r\n    bytes32 public constant CONTRACT_BANCOR_EXCHANGE = \"BANCOR_EXCHANGE\";\r\n\r\n    bytes32 public constant CONTRACT_POINTS_REWARD_POOL = \"CONTRACT_POINTS_REWARD_POOL\";\r\n\r\n    // value belongs to [0, 10000000]\r\n    bytes32 public constant UINT_EXCHANGE_ERROR_SPACE = \"UINT_EXCHANGE_ERROR_SPACE\";\r\n\r\n    // \"CONTRACT_CONTRIBUTION_INCENTIVE_POOL\" is too long for byted32\r\n    // so compress it to what states below\r\n    bytes32 public constant CONTRACT_CONTRIBUTION_INCENTIVE_POOL = \"CONTRACT_CONTRIBUTION_POOL\";\r\n\r\n    bytes32 public constant CONTRACT_DEV_POOL = \"CONTRACT_DEV_POOL\";\r\n\r\n}\r\n\r\n\r\n// Dependency file: contracts/interfaces/IGovernorPool.sol\r\n\r\n// pragma solidity ^0.4.24;\r\n\r\ncontract IGovernorPool {\r\n    function checkRewardAvailable(address _token) external view returns(bool);\r\n    function rewardAmount(uint256 _amount) external; \r\n}\r\n\r\n\r\n// Root file: contracts/RevenuePoolV2.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n// import \"@evolutionland/common/contracts/interfaces/ISettingsRegistry.sol\";\r\n// import \"@evolutionland/common/contracts/interfaces/ERC223ReceivingContract.sol\";\r\n// import \"@evolutionland/common/contracts/interfaces/ERC223.sol\";\r\n// import \"@evolutionland/common/contracts/interfaces/IUserPoints.sol\";\r\n// import \"@evolutionland/common/contracts/DSAuth.sol\";\r\n// import \"openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\";\r\n// import \"contracts/AuctionSettingIds.sol\";\r\n// import \"contracts/interfaces/IGovernorPool.sol\";\r\n\r\n/**\r\n * @title RevenuePool\r\n * difference between LandResourceV1:\r\n     change DividendPool into governorPool for reward\r\n */\r\n\r\n// Use proxy mode\r\ncontract RevenuePoolV2 is DSAuth, ERC223ReceivingContract, AuctionSettingIds {\r\n\r\n    bool private singletonLock = false;\r\n\r\n//    // 10%\r\n//    address public pointsRewardPool;\r\n//    // 30%\r\n//    address public contributionIncentivePool;\r\n//    // 30%\r\n//    address public dividendsPool;\r\n//    // 30%\r\n//    address public devPool;\r\n\r\n    ISettingsRegistry public registry;\r\n\r\n    // claimedToken event\r\n    event ClaimedTokens(address indexed token, address indexed owner, uint amount);\r\n\r\n    /*\r\n     *  Modifiers\r\n     */\r\n    modifier singletonLockCall() {\r\n        require(!singletonLock, \"Only can call once\");\r\n        _;\r\n        singletonLock = true;\r\n    }\r\n\r\n    function initializeContract(address _registry) public singletonLockCall {\r\n        owner = msg.sender;\r\n        emit LogSetOwner(msg.sender);\r\n\r\n        registry = ISettingsRegistry(_registry);\r\n    }\r\n\r\n    function tokenFallback(address _from, uint256 _value, bytes _data) public {\r\n\r\n        address ring = registry.addressOf(SettingIds.CONTRACT_RING_ERC20_TOKEN);\r\n        address userPoints = registry.addressOf(SettingIds.CONTRACT_USER_POINTS);\r\n\r\n        if(msg.sender == ring) {\r\n            address buyer = bytesToAddress(_data);\r\n            // should same with trading reward percentage in settleToken;\r\n\r\n            IUserPoints(userPoints).addPoints(buyer, _value / 1000);\r\n        }\r\n    }\r\n\r\n\r\n    function settleToken(address _tokenAddress) public {\r\n        uint balance = ERC20(_tokenAddress).balanceOf(address(this));\r\n\r\n        // to save gas when playing\r\n        if (balance > 10) {\r\n            address pointsRewardPool = registry.addressOf(AuctionSettingIds.CONTRACT_POINTS_REWARD_POOL);\r\n            address contributionIncentivePool = registry.addressOf(AuctionSettingIds.CONTRACT_CONTRIBUTION_INCENTIVE_POOL);\r\n            address governorPool = registry.addressOf(CONTRACT_DIVIDENDS_POOL);\r\n            address devPool = registry.addressOf(AuctionSettingIds.CONTRACT_DEV_POOL);\r\n\r\n            require(pointsRewardPool != 0x0 && contributionIncentivePool != 0x0 && governorPool != 0x0 && devPool != 0x0, \"invalid addr\");\r\n\r\n            require(ERC223(_tokenAddress).transfer(pointsRewardPool, balance / 10, \"0x0\"));\r\n            require(ERC223(_tokenAddress).transfer(contributionIncentivePool, balance * 3 / 10, \"0x0\"));\r\n            if (IGovernorPool(governorPool).checkRewardAvailable(_tokenAddress)) {\r\n                ERC20(_tokenAddress).approve(governorPool, balance * 3 / 10);\r\n                IGovernorPool(governorPool).rewardAmount(balance * 3 / 10);\r\n            }\r\n            require(ERC223(_tokenAddress).transfer(devPool, balance * 3 / 10, \"0x0\"));\r\n        }\r\n\r\n    }\r\n\r\n\r\n    /// @notice This method can be used by the owner to extract mistakenly\r\n    ///  sent tokens to this contract.\r\n    /// @param _token The address of the token contract that you want to recover\r\n    ///  set to 0 in case you want to extract ether.\r\n    function claimTokens(address _token) public auth {\r\n        if (_token == 0x0) {\r\n            owner.transfer(address(this).balance);\r\n            return;\r\n        }\r\n        ERC20 token = ERC20(_token);\r\n        uint balance = token.balanceOf(address(this));\r\n        token.transfer(owner, balance);\r\n\r\n        emit ClaimedTokens(_token, msg.sender, balance);\r\n    }\r\n\r\n    function bytesToAddress(bytes b) public pure returns (address) {\r\n        bytes32 out;\r\n\r\n        for (uint i = 0; i < 32; i++) {\r\n            out |= bytes32(b[i] & 0xFF) >> (i * 8);\r\n        }\r\n        return address(out);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_CLOCK_AUCTION\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_MYSTERIOUS_TREASURE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_USER_POINTS\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_BANCOR_EXCHANGE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_WATER_ERC20_TOKEN\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_GOLD_ERC20_TOKEN\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_POINTS_REWARD_POOL\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_RING_ERC20_TOKEN\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UINT_AUCTION_CUT\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"b\",\"type\":\"bytes\"}],\"name\":\"bytesToAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_TOKEN_LOCATION\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UINT_AUCTION_BID_WAITING_TIME\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_KTON_ERC20_TOKEN\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_WOOD_ERC20_TOKEN\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_FIRE_ERC20_TOKEN\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_LAND_BASE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UINT_EXCHANGE_ERROR_SPACE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_INTERSTELLAR_ENCODER\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_DEV_POOL\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_PET_BASE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_CONTRIBUTION_INCENTIVE_POOL\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_SOIL_ERC20_TOKEN\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_OBJECT_OWNERSHIP\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_TOKEN_USE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"initializeContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_ERC721_BRIDGE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"settleToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_REVENUE_POOL\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_LAND_RESOURCE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UINT_REFERER_CUT\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UINT_TOKEN_OFFER_CUT\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_DIVIDENDS_POOL\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"}]","ContractName":"RevenuePoolV2","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://9d2c1a90e40e7ab2aefb036be7aa8d1a5e31af04cd330f6bd01b7e904a97089f"}]}