{"status":"1","message":"OK","result":[{"SourceCode":"# @version 0.2.8\r\n# @notice A wrapper for Lido stETH which follows Yearn Vault conventions\r\n# @author banteg\r\n# @license MIT\r\nfrom vyper.interfaces import ERC20\r\n\r\nimplements: ERC20\r\n\r\n\r\ninterface Lido:\r\n    def getPooledEthByShares(_sharesAmount: uint256) -> uint256: view\r\n    def getSharesByPooledEth(_pooledEthAmount: uint256) -> uint256: view\r\n    def submit(referral: address) -> uint256: payable\r\n\r\n\r\nevent Transfer:\r\n    sender: indexed(address)\r\n    receiver: indexed(address)\r\n    value: uint256\r\n\r\n\r\nevent Approval:\r\n    owner: indexed(address)\r\n    spender: indexed(address)\r\n    value: uint256\r\n\r\n\r\nname: public(String[26])\r\nsymbol: public(String[7])\r\ndecimals: public(uint256)\r\nversion: public(String[1])\r\n\r\nbalanceOf: public(HashMap[address, uint256])\r\nallowance: public(HashMap[address, HashMap[address, uint256]])\r\ntotalSupply: public(uint256)\r\n\r\nnonces: public(HashMap[address, uint256])\r\nDOMAIN_SEPARATOR: public(bytes32)\r\nDOMAIN_TYPE_HASH: constant(bytes32) = keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)')\r\nPERMIT_TYPE_HASH: constant(bytes32) = keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\")\r\n\r\nsteth: constant(address) = 0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84\r\npatron: constant(address) = 0x55Bc991b2edF3DDb4c520B222bE4F378418ff0fA\r\n\r\n\r\n@external\r\ndef __init__():\r\n    self.name = 'Yearn Lido St. Ether Vault'\r\n    self.symbol = 'yvstETH'\r\n    self.decimals = 18\r\n    self.version = '1'\r\n    self.DOMAIN_SEPARATOR = keccak256(\r\n        concat(\r\n            DOMAIN_TYPE_HASH,\r\n            keccak256(convert(self.name, Bytes[26])),\r\n            keccak256(convert(self.version, Bytes[1])),\r\n            convert(chain.id, bytes32),\r\n            convert(self, bytes32)\r\n        )\r\n    )\r\n\r\n\r\n@internal\r\ndef _mint(owner: address, amount: uint256):\r\n    self.totalSupply += amount\r\n    self.balanceOf[owner] += amount\r\n    log Transfer(ZERO_ADDRESS, owner, amount)\r\n\r\n\r\n@internal\r\ndef _burn(owner: address, amount: uint256):\r\n    self.totalSupply -= amount\r\n    self.balanceOf[owner] -= amount\r\n    log Transfer(owner, ZERO_ADDRESS, amount)\r\n\r\n\r\n@payable\r\n@external\r\ndef __default__():\r\n    \"\"\"\r\n    @notice Submit ether to Lido and deposit the received stETH into the Vault.\r\n    \"\"\"\r\n    shares: uint256 = Lido(steth).submit(patron, value=msg.value)\r\n    self._mint(msg.sender, shares)\r\n\r\n\r\n@external\r\ndef deposit(_tokens: uint256 = MAX_UINT256, recipient: address = msg.sender) -> uint256:\r\n    \"\"\"\r\n    @notice Deposit stETH tokens into the Vault\r\n    @dev\r\n        A user must have approved the contract to spend stETH.\r\n\r\n    @param _tokens The amount of stETH tokens to deposit\r\n    @param recipient The account to credit with the minted shares\r\n    @return The amount of minted shares\r\n    \"\"\"\r\n    tokens: uint256 = min(_tokens, ERC20(steth).balanceOf(msg.sender))\r\n    shares: uint256 = Lido(steth).getSharesByPooledEth(tokens)\r\n    self._mint(recipient, shares)\r\n    assert ERC20(steth).transferFrom(msg.sender, self, tokens)\r\n    return shares\r\n\r\n\r\n@external\r\ndef withdraw(_shares: uint256 = MAX_UINT256, recipient: address = msg.sender) -> uint256:\r\n    \"\"\"\r\n    @notice Withdraw stETH tokens from the Vault\r\n\r\n    @param _shares The amount of shares to burn for stETH\r\n    @param recipient The account to credit with stETH\r\n    @return The amount of withdrawn stETH\r\n    \"\"\"\r\n    shares: uint256 = min(_shares, self.balanceOf[msg.sender])\r\n    tokens: uint256 = Lido(steth).getPooledEthByShares(shares)\r\n    self._burn(msg.sender, shares)\r\n    assert ERC20(steth).transfer(recipient, tokens)\r\n    return tokens\r\n\r\n\r\n@view\r\n@external\r\ndef pricePerShare() -> uint256:\r\n    \"\"\"\r\n    @notice Get the vault share to stETH ratio\r\n    @return The value of a single share\r\n    \"\"\"\r\n    return Lido(steth).getPooledEthByShares(10 ** self.decimals)\r\n\r\n\r\n@internal\r\ndef _transfer(sender: address, receiver: address, amount: uint256):\r\n    assert receiver not in [self, ZERO_ADDRESS]\r\n    self.balanceOf[sender] -= amount\r\n    self.balanceOf[receiver] += amount\r\n    log Transfer(sender, receiver, amount)\r\n\r\n\r\n@external\r\ndef transfer(receiver: address, amount: uint256) -> bool:\r\n    self._transfer(msg.sender, receiver, amount)\r\n    return True\r\n\r\n\r\n@external\r\ndef transferFrom(sender: address, receiver: address, amount: uint256) -> bool:\r\n    if msg.sender != sender and self.allowance[sender][msg.sender] != MAX_UINT256:\r\n        self.allowance[sender][msg.sender] -= amount\r\n        log Approval(sender, msg.sender, self.allowance[sender][msg.sender])\r\n    self._transfer(sender, receiver, amount)\r\n    return True\r\n\r\n\r\n@external\r\ndef approve(spender: address, amount: uint256) -> bool:\r\n    self.allowance[msg.sender][spender] = amount\r\n    log Approval(msg.sender, spender, amount)\r\n    return True\r\n\r\n\r\n@external\r\ndef permit(owner: address, spender: address, amount: uint256, expiry: uint256, signature: Bytes[65]) -> bool:\r\n    assert owner != ZERO_ADDRESS  # dev: invalid owner\r\n    assert expiry == 0 or expiry >= block.timestamp  # dev: permit expired\r\n    nonce: uint256 = self.nonces[owner]\r\n    digest: bytes32 = keccak256(\r\n        concat(\r\n            b'\\x19\\x01',\r\n            self.DOMAIN_SEPARATOR,\r\n            keccak256(\r\n                concat(\r\n                    PERMIT_TYPE_HASH,\r\n                    convert(owner, bytes32),\r\n                    convert(spender, bytes32),\r\n                    convert(amount, bytes32),\r\n                    convert(nonce, bytes32),\r\n                    convert(expiry, bytes32),\r\n                )\r\n            )\r\n        )\r\n    )\r\n    # NOTE: the signature is packed as r, s, v\r\n    r: uint256 = convert(slice(signature, 0, 32), uint256)\r\n    s: uint256 = convert(slice(signature, 32, 32), uint256)\r\n    v: uint256 = convert(slice(signature, 64, 1), uint256)\r\n    assert ecrecover(digest, v, r, s) == owner  # dev: invalid signature\r\n    self.allowance[owner][spender] = amount\r\n    self.nonces[owner] = nonce + 1\r\n    log Approval(owner, spender, amount)\r\n    return True","ABI":"[{\"name\":\"Transfer\",\"inputs\":[{\"type\":\"address\",\"name\":\"sender\",\"indexed\":true},{\"type\":\"address\",\"name\":\"receiver\",\"indexed\":true},{\"type\":\"uint256\",\"name\":\"value\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Approval\",\"inputs\":[{\"type\":\"address\",\"name\":\"owner\",\"indexed\":true},{\"type\":\"address\",\"name\":\"spender\",\"indexed\":true},{\"type\":\"uint256\",\"name\":\"value\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"outputs\":[],\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"name\":\"deposit\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"name\":\"deposit\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[{\"type\":\"uint256\",\"name\":\"_tokens\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"name\":\"deposit\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[{\"type\":\"uint256\",\"name\":\"_tokens\"},{\"type\":\"address\",\"name\":\"recipient\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"name\":\"withdraw\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"name\":\"withdraw\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[{\"type\":\"uint256\",\"name\":\"_shares\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"name\":\"withdraw\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[{\"type\":\"uint256\",\"name\":\"_shares\"},{\"type\":\"address\",\"name\":\"recipient\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"name\":\"pricePerShare\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":2544},{\"name\":\"transfer\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"receiver\"},{\"type\":\"uint256\",\"name\":\"amount\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":76223},{\"name\":\"transferFrom\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"sender\"},{\"type\":\"address\",\"name\":\"receiver\"},{\"type\":\"uint256\",\"name\":\"amount\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":116805},{\"name\":\"approve\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"spender\"},{\"type\":\"uint256\",\"name\":\"amount\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":38034},{\"name\":\"permit\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"owner\"},{\"type\":\"address\",\"name\":\"spender\"},{\"type\":\"uint256\",\"name\":\"amount\"},{\"type\":\"uint256\",\"name\":\"expiry\"},{\"type\":\"bytes\",\"name\":\"signature\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":80967},{\"name\":\"name\",\"outputs\":[{\"type\":\"string\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":6876},{\"name\":\"symbol\",\"outputs\":[{\"type\":\"string\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":6906},{\"name\":\"decimals\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1511},{\"name\":\"version\",\"outputs\":[{\"type\":\"string\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":6966},{\"name\":\"balanceOf\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"arg0\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1786},{\"name\":\"allowance\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"arg0\"},{\"type\":\"address\",\"name\":\"arg1\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":2031},{\"name\":\"totalSupply\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1631},{\"name\":\"nonces\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"arg0\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1876},{\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"type\":\"bytes32\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1691}]","ContractName":"Vyper_contract","CompilerVersion":"vyper:0.2.8","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}