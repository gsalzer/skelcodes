{"status":"1","message":"OK","result":[{"SourceCode":"// SmartWay Ticket\r\n// https://dappticket.com\r\n//\r\n/// SPDX-License-Identifier: MIT\r\npragma solidity =0.7.2;\r\n\r\ncontract Ticket {\r\n    uint256 public uid = 1;\r\n\r\n    uint8 public constant MAX_LEVEL = 12; // Maximum number of levels\r\n\r\n    uint256 public constant LEFT_PRICE = 0.025 ether; // Starting price\r\n\r\n    enum Site {X3, X4}\r\n\r\n    struct X3 {\r\n        uint8 status; // 0: nonactivated; 1: open; 2: open and blocked;\r\n        uint256 reinvestCount;\r\n        address[] points;\r\n        address ref;\r\n    }\r\n\r\n    struct X4 {\r\n        uint8 status; // 0: nonactivated; 1: open; 2: open and blocked;\r\n        uint256 reinvestCount;\r\n        address[] firstPoints;\r\n        address[] leftPoints;\r\n        address[] rightPoints;\r\n        address ref;\r\n    }\r\n\r\n    struct User {\r\n        uint256 id;\r\n        address referrer;\r\n        uint256 partnersCount;\r\n        mapping(uint8 => X3) x3Site;\r\n        mapping(uint8 => X4) x4Site;\r\n    }\r\n\r\n    enum Relation {\r\n        Direct, // 0 Match to management account\r\n        Partner, // 1 Normally matched\r\n        Slide, // 2\r\n        Gift // The junior partner surpasses his superior\r\n    }\r\n\r\n    event NewUser(\r\n        address indexed _user,\r\n        address indexed _referrer,\r\n        uint8 level\r\n    );\r\n\r\n    event Transfer(\r\n        Site indexed _matrix,\r\n        address indexed _from,\r\n        address indexed _to,\r\n        uint256 _amount,\r\n        uint8 _level,\r\n        bool blocked,\r\n        uint256 _skip\r\n    );\r\n\r\n    event IndexUser(\r\n        Site indexed _matrix,\r\n        address indexed _user,\r\n        address indexed _referrer,\r\n        address _partner,\r\n        uint8 _level,\r\n        uint256 _skip,\r\n        Relation _relation,\r\n        uint8 _buyAgain,\r\n        uint8 _pointLevel,\r\n        uint256 _reinvestNumber,\r\n        bool _active\r\n    );\r\n    address public owner;\r\n    mapping(uint8 => uint256) public levelPrice;\r\n    mapping(address => User) public users;\r\n    mapping(uint256 => address) public userIDToAddress;\r\n\r\n    constructor(address _ownerAddress) {\r\n        owner = _ownerAddress;\r\n        levelPrice[1] = LEFT_PRICE;\r\n        for (uint8 i = 2; i <= MAX_LEVEL; i++) {\r\n            levelPrice[i] = levelPrice[i - 1] * 2;\r\n        }\r\n        createUser(_ownerAddress, address(0x0), MAX_LEVEL);\r\n    }\r\n\r\n    receive() external payable {\r\n        if (msg.data.length == 0) {\r\n            register(msg.sender, owner);\r\n            return;\r\n        }\r\n        register(msg.sender, bytesToAddress(msg.data));\r\n    }\r\n\r\n    function bytesToAddress(bytes memory bys)\r\n        private\r\n        pure\r\n        returns (address addr)\r\n    {\r\n        assembly {\r\n            addr := mload(add(bys, 20))\r\n        }\r\n    }\r\n\r\n    function register(address ref) external payable returns (bool) {\r\n        return register(msg.sender, ref);\r\n    }\r\n\r\n    function register(address userAddress, address ref) private returns (bool) {\r\n        require(msg.value == LEFT_PRICE * 2, \"Wrong registration cost.\");\r\n        require(!isUserExists(userAddress), \"User exists.\");\r\n        require(isUserExists(ref), \"Referrer not exists.\");\r\n        uint32 size;\r\n        assembly {\r\n            size := extcodesize(userAddress)\r\n        }\r\n        require(size == 0, \"Cannot be a contract\");\r\n        createUser(userAddress, ref, 1);\r\n        // X3\r\n        x3Transfer(userAddress, ref, 1, LEFT_PRICE);\r\n        // X4\r\n        x4Transfer(userAddress, ref, 1, LEFT_PRICE);\r\n        return true;\r\n    }\r\n\r\n    function createUser(\r\n        address userAddress,\r\n        address ref,\r\n        uint8 level\r\n    ) private returns (uint256 userID) {\r\n        require(level <= MAX_LEVEL, \"Level exceeds maximum limit.\");\r\n        userIDToAddress[uid] = userAddress;\r\n        User storage user = users[userAddress];\r\n        user.id = uid;\r\n        user.referrer = ref;\r\n        for (uint8 i = 1; i <= level; i++) {\r\n            user.x3Site[i].status = 1;\r\n            user.x4Site[i].status = 1;\r\n        }\r\n        if (ref != address(0x0)) {\r\n            users[ref].partnersCount++;\r\n        }\r\n        userID = uid;\r\n        uid++;\r\n        emit NewUser(userAddress, ref, level);\r\n    }\r\n\r\n    function buyX3Level(uint8 level) public payable {\r\n        buyNewLevel(Site.X3, level);\r\n    }\r\n\r\n    function buyX4Level(uint8 level) public payable {\r\n        buyNewLevel(Site.X4, level);\r\n    }\r\n\r\n    function buyNewLevel(Site matrix, uint8 level) private {\r\n        uint256 amount = levelPrice[level];\r\n        require(level > 1 && level <= MAX_LEVEL, \"Invalid level.\");\r\n        require(msg.value == amount, \"Invalid price.\");\r\n        require(\r\n            isUserExists(msg.sender),\r\n            \"User does not exist, please register first.\"\r\n        );\r\n        if (matrix == Site.X3) {\r\n            require(\r\n                users[msg.sender].x3Site[level].status == 0,\r\n                \"The current X3 level has been activated.\"\r\n            );\r\n            require(\r\n                users[msg.sender].x3Site[level - 1].status > 0,\r\n                \"Can not leapfrog upgrade.\"\r\n            );\r\n            x3Transfer(msg.sender, users[msg.sender].referrer, level, amount);\r\n            users[msg.sender].x3Site[level].status = 1;\r\n            users[msg.sender].x3Site[level - 1].status = 1;\r\n        } else {\r\n            require(\r\n                users[msg.sender].x4Site[level].status == 0,\r\n                \"The current X4 level has been activated.\"\r\n            );\r\n            require(\r\n                users[msg.sender].x4Site[level - 1].status > 0,\r\n                \"Can not leapfrog upgrade.\"\r\n            );\r\n            x4Transfer(msg.sender, users[msg.sender].referrer, level, amount);\r\n            users[msg.sender].x4Site[level].status = 1;\r\n            users[msg.sender].x4Site[level - 1].status = 1;\r\n        }\r\n    }\r\n\r\n    // x3Transfer\r\n    function x3Transfer(\r\n        address userAddress,\r\n        address ref,\r\n        uint8 level,\r\n        uint256 amount\r\n    ) private {\r\n        (address receiver, uint256 skip) = updateX3(userAddress, ref, level, 0);\r\n        transfer(Site.X3, level, userAddress, receiver, skip, amount);\r\n    }\r\n\r\n    function transfer(\r\n        Site matrix,\r\n        uint8 level,\r\n        address from,\r\n        address receiver,\r\n        uint256 skip,\r\n        uint256 amount\r\n    ) private {\r\n        if (matrix == Site.X3) {\r\n            while (true) {\r\n                X3 memory x3 = users[receiver].x3Site[level];\r\n                if (x3.status == 2) {\r\n                    // blocked\r\n                    emit Transfer(\r\n                        matrix,\r\n                        from,\r\n                        receiver,\r\n                        amount,\r\n                        level,\r\n                        true,\r\n                        skip\r\n                    );\r\n                    receiver = x3.ref;\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n        } else {\r\n            while (true) {\r\n                X4 memory x4 = users[receiver].x4Site[level];\r\n                if (x4.status == 2) {\r\n                    // blocked\r\n                    emit Transfer(\r\n                        matrix,\r\n                        from,\r\n                        receiver,\r\n                        amount,\r\n                        level,\r\n                        true,\r\n                        skip\r\n                    );\r\n                    receiver = x4.ref;\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        emit Transfer(matrix, from, receiver, amount, level, false, skip);\r\n        address(uint160(receiver)).transfer(amount);\r\n    }\r\n\r\n    // x3 update\r\n    // @userAddress Register or upgrade user address\r\n    // @return The address to receive funds\r\n    function updateX3(\r\n        address userAddress,\r\n        address referrer,\r\n        uint8 level,\r\n        uint256 skip\r\n    ) private returns (address, uint256) {\r\n        address ref = findX3ActiveReferrer(referrer, level);\r\n        User storage user = users[userAddress];\r\n        X3 storage x3 = users[ref].x3Site[level];\r\n        Relation relation = Relation.Direct;\r\n        if (ref != referrer) {\r\n            relation = Relation.Gift;\r\n        }\r\n        if (user.x3Site[level].ref != ref) {\r\n            user.x3Site[level].ref = ref;\r\n        }\r\n        if (x3.points.length < 2) {\r\n            x3.points.push(userAddress);\r\n            emit IndexUser(\r\n                Site.X3,\r\n                userAddress,\r\n                ref,\r\n                address(0x0),\r\n                level,\r\n                skip,\r\n                relation,\r\n                0,\r\n                1,\r\n                x3.reinvestCount,\r\n                x3.status == 1\r\n            );\r\n            return (ref, skip);\r\n        }\r\n        x3.points = new address[](0);\r\n        x3.reinvestCount++;\r\n        if (ref == owner) {\r\n            emit IndexUser(\r\n                Site.X3,\r\n                userAddress,\r\n                ref,\r\n                address(0x0),\r\n                level,\r\n                skip,\r\n                relation,\r\n                1,\r\n                1,\r\n                x3.reinvestCount - 1,\r\n                true\r\n            );\r\n            return (ref, skip);\r\n        }\r\n        if (\r\n            level < MAX_LEVEL &&\r\n            users[ref].x3Site[level + 1].status == 0 &&\r\n            x3.status == 1\r\n        ) {\r\n            x3.status = 2;\r\n            emit IndexUser(\r\n                Site.X3,\r\n                userAddress,\r\n                ref,\r\n                address(0x0),\r\n                level,\r\n                skip,\r\n                relation,\r\n                2,\r\n                1,\r\n                x3.reinvestCount - 1,\r\n                false\r\n            );\r\n        } else {\r\n            emit IndexUser(\r\n                Site.X3,\r\n                userAddress,\r\n                ref,\r\n                address(0x0),\r\n                level,\r\n                skip,\r\n                relation,\r\n                1,\r\n                1,\r\n                x3.reinvestCount - 1,\r\n                x3.status == 1\r\n            );\r\n        }\r\n        // Buy agin\r\n        return updateX3(ref, users[ref].referrer, level, skip + 1);\r\n    }\r\n\r\n    function x4Transfer(\r\n        address userAddress,\r\n        address ref,\r\n        uint8 level,\r\n        uint256 amount\r\n    ) private {\r\n        (address receiver, uint256 skip) = updateX4(userAddress, ref, level, 0);\r\n        transfer(Site.X4, level, userAddress, receiver, skip, amount);\r\n    }\r\n\r\n    // x4 update\r\n    // @userAddress Register or upgrade user address\r\n    // @return The address to receive funds\r\n    function updateX4(\r\n        address userAddress,\r\n        address referrer,\r\n        uint8 level,\r\n        uint256 skip\r\n    ) private returns (address, uint256) {\r\n        address ref = findX4ActiveReferrer(referrer, level);\r\n        X4 storage x4 = users[ref].x4Site[level];\r\n        Relation relation = Relation.Direct;\r\n        if (ref != referrer) {\r\n            relation = Relation.Gift;\r\n        }\r\n        address partner = address(0x0);\r\n        if (x4.firstPoints.length < 2) {\r\n            partner = ref;\r\n            x4.firstPoints.push(userAddress);\r\n            users[userAddress].x4Site[level].ref = ref;\r\n            emit IndexUser(\r\n                Site.X4,\r\n                userAddress,\r\n                ref,\r\n                address(0x0),\r\n                level,\r\n                skip,\r\n                relation,\r\n                0,\r\n                1,\r\n                x4.reinvestCount,\r\n                x4.status == 1\r\n            );\r\n            if (ref == owner) {\r\n                return (owner, skip);\r\n            }\r\n            // isSlide = false\r\n            return\r\n                updateX4Second(userAddress, x4.ref, level, ref, relation, skip);\r\n        } else {\r\n            // isSlide = true\r\n            return\r\n                updateX4Second(\r\n                    userAddress,\r\n                    ref,\r\n                    level,\r\n                    address(0x0),\r\n                    relation,\r\n                    skip\r\n                );\r\n        }\r\n    }\r\n\r\n    // Update the second level points\r\n    function updateX4Second(\r\n        address userAddress,\r\n        address ref,\r\n        uint8 level,\r\n        address partner,\r\n        Relation relation,\r\n        uint256 skip\r\n    ) private returns (address receiver, uint256) {\r\n        X4 storage x4 = users[ref].x4Site[level];\r\n        // Update the first level point\r\n        bool isSlide = partner == address(0x0);\r\n        address slideTo;\r\n        if (isSlide) {\r\n            if (x4.leftPoints.length <= x4.rightPoints.length) {\r\n                // left\r\n                slideTo = x4.firstPoints[0];\r\n            } else {\r\n                // right\r\n                slideTo = x4.firstPoints[1];\r\n            }\r\n            X4 storage slideX4 = users[slideTo].x4Site[level];\r\n            slideX4.firstPoints.push(userAddress);\r\n            users[userAddress].x4Site[level].ref = slideTo;\r\n            emit IndexUser(\r\n                Site.X4,\r\n                userAddress,\r\n                slideTo,\r\n                partner,\r\n                level,\r\n                skip,\r\n                Relation.Slide,\r\n                0,\r\n                1,\r\n                slideX4.reinvestCount,\r\n                slideX4.status == 1\r\n            );\r\n        } else {\r\n            slideTo = partner;\r\n        }\r\n        if (x4.rightPoints.length + x4.leftPoints.length >= 3) {\r\n            // Determine whether the loop can continue\r\n            x4.leftPoints = new address[](0);\r\n            x4.rightPoints = new address[](0);\r\n            x4.firstPoints = new address[](0);\r\n            x4.ref = address(0x0);\r\n            x4.reinvestCount++;\r\n            if (\r\n                level < MAX_LEVEL &&\r\n                users[ref].x4Site[level + 1].status == 0 &&\r\n                x4.status == 1\r\n            ) {\r\n                x4.status = 2;\r\n                emit IndexUser(\r\n                    Site.X4,\r\n                    userAddress,\r\n                    ref,\r\n                    slideTo,\r\n                    level,\r\n                    skip,\r\n                    relation,\r\n                    2,\r\n                    2,\r\n                    x4.reinvestCount - 1,\r\n                    false\r\n                );\r\n            } else {\r\n                emit IndexUser(\r\n                    Site.X4,\r\n                    userAddress,\r\n                    ref,\r\n                    slideTo,\r\n                    level,\r\n                    skip,\r\n                    relation,\r\n                    1,\r\n                    2,\r\n                    x4.reinvestCount - 1,\r\n                    x4.status == 1\r\n                );\r\n            }\r\n            if (ref == owner) {\r\n                return (owner, skip);\r\n            }\r\n            // Buy again\r\n            return updateX4(ref, users[ref].referrer, level, skip + 1);\r\n        }\r\n        // Enough points\r\n        if (slideTo == x4.firstPoints[0]) {\r\n            x4.leftPoints.push(userAddress);\r\n        } else {\r\n            x4.rightPoints.push(userAddress);\r\n        }\r\n        if (isSlide) {\r\n            emit IndexUser(\r\n                Site.X4,\r\n                userAddress,\r\n                ref,\r\n                slideTo,\r\n                level,\r\n                skip,\r\n                relation,\r\n                0,\r\n                2,\r\n                x4.reinvestCount,\r\n                x4.status == 1\r\n            );\r\n        } else {\r\n            emit IndexUser(\r\n                Site.X4,\r\n                userAddress,\r\n                ref,\r\n                slideTo,\r\n                level,\r\n                skip,\r\n                Relation.Partner,\r\n                0,\r\n                2,\r\n                x4.reinvestCount,\r\n                x4.status == 1\r\n            );\r\n        }\r\n        return (ref, skip);\r\n    }\r\n\r\n    function findX3ActiveReferrer(address addr, uint8 level)\r\n        public\r\n        view\r\n        returns (address)\r\n    {\r\n        while (true) {\r\n            if (users[addr].x3Site[level].status > 0) {\r\n                return addr;\r\n            }\r\n            addr = users[addr].referrer;\r\n        }\r\n        return addr;\r\n    }\r\n\r\n    function findX4ActiveReferrer(address addr, uint8 level)\r\n        public\r\n        view\r\n        returns (address)\r\n    {\r\n        while (true) {\r\n            if (users[addr].x4Site[level].status > 0) {\r\n                return addr;\r\n            }\r\n            addr = users[addr].referrer;\r\n        }\r\n        return addr;\r\n    }\r\n\r\n    // Get x3 information\r\n    // @param addr user address\r\n    // @param level level level\r\n    function userX3Site(address addr, uint8 level)\r\n        public\r\n        view\r\n        returns (\r\n            uint8 status,\r\n            uint256 reinvestCount,\r\n            address[] memory points,\r\n            address ref\r\n        )\r\n    {\r\n        X3 memory x3 = users[addr].x3Site[level];\r\n        status = x3.status;\r\n        reinvestCount = x3.reinvestCount;\r\n        points = x3.points;\r\n        ref = x3.ref;\r\n    }\r\n\r\n    // Get x3 information\r\n    // @param addr user address\r\n    // @param level level level\r\n    function userX4Site(address addr, uint8 level)\r\n        public\r\n        view\r\n        returns (\r\n            uint8 status,\r\n            uint256 reinvestCount,\r\n            address[] memory firstPoints,\r\n            address[] memory leftPoints,\r\n            address[] memory rightPoints,\r\n            address ref\r\n        )\r\n    {\r\n        X4 memory x4 = users[addr].x4Site[level];\r\n        status = x4.status;\r\n        reinvestCount = x4.reinvestCount;\r\n        firstPoints = x4.firstPoints;\r\n        leftPoints = x4.leftPoints;\r\n        rightPoints = x4.rightPoints;\r\n        ref = x4.ref;\r\n    }\r\n\r\n    function isUserExists(address user) public view returns (bool) {\r\n        return (users[user].id != 0);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ownerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum Ticket.Site\",\"name\":\"_matrix\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_partner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_level\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_skip\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Ticket.Relation\",\"name\":\"_relation\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_buyAgain\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_pointLevel\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_reinvestNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"IndexUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"NewUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum Ticket.Site\",\"name\":\"_matrix\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_level\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"blocked\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_skip\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LEFT_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_LEVEL\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"buyX3Level\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"buyX4Level\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"findX3ActiveReferrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"findX4ActiveReferrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isUserExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"levelPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userIDToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"userX3Site\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"reinvestCount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"points\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"userX4Site\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"reinvestCount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"firstPoints\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"leftPoints\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"rightPoints\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"partnersCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Ticket","CompilerVersion":"v0.7.2+commit.51b20bc0","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000081c9d0f77a0cc8f9c20abf69a31570b204a171ca","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7080f1716cb5b90b1791c559f4482011ec905094f79af142954add7a42b8873b"}]}