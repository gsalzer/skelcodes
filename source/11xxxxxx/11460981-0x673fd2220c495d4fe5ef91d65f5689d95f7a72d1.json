{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.10;\r\n\r\ncontract BombDisposal {\r\n    address owner;\r\n    address public theRealJohnMcClane;\r\n    uint16 public purpleWiresCut;\r\n    uint16 public brownWiresCut;\r\n    uint16 public greenWiresCut;\r\n    uint16 public orangeWiresCut;\r\n    uint16 public redOrBlueWiresCut;\r\n    bool public bombArmed = true;\r\n    bool public bombDetonated = false;\r\n    uint256 constant INITIAL_COMMIT_PERIOD_END = 11498000;\r\n    uint256 constant BLOCKS_TO_WAIT = 15;\r\n    uint256 constant DETONATION_TIME = 11525000;\r\n    mapping(address => bool) public purpleWireCutters;\r\n    mapping(address => bool) public brownWireCutters;\r\n    mapping(address => bool) public greenWireCutters;\r\n    mapping(address => bool) public orangeWireCutters;\r\n    mapping(address => bool) public blueWireCutters;\r\n    mapping(address => bool) public redWireCutters;\r\n    mapping(address => bool) public redBlueAttempted;\r\n    mapping(address => bytes32) public purpleCommits;\r\n    mapping(address => bytes32) public brownCommits;\r\n    mapping(address => bytes32) public greenCommits;\r\n    mapping(address => bytes32) public disarmCommits;\r\n    mapping(address => uint256) public disarmCommitBlock;\r\n    string public disarmCode;\r\n\r\n    \r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    function commitToCutPurpleWire(bytes32 _hash) external {\r\n        require(block.number < INITIAL_COMMIT_PERIOD_END, \"You're too late\");\r\n        purpleCommits[msg.sender] = _hash;\r\n    }\r\n    \r\n    function commitToCutBrownWire(bytes32 _hash) external {\r\n        require(block.number < INITIAL_COMMIT_PERIOD_END, \"You're too late\");\r\n        brownCommits[msg.sender] = _hash;\r\n    }\r\n    \r\n    function commitToCutGreenWire(bytes32 _hash) external {\r\n        require(block.number < INITIAL_COMMIT_PERIOD_END, \"You're too late\");\r\n        greenCommits[msg.sender] = _hash;\r\n    }\r\n\r\n    // Make sure to appreciate the last bit of 2020\r\n    function cutPurpleWire(string calldata answer) external {\r\n        require(block.number > INITIAL_COMMIT_PERIOD_END, \"Easy does it\");\r\n        require(!purpleWireCutters[msg.sender], \"Already cut\");\r\n        bytes32 answerHash = keccak256(abi.encodePacked(answer));\r\n        bytes32 commitHash = keccak256(abi.encodePacked(msg.sender, answerHash));\r\n        require(commitHash == purpleCommits[msg.sender], \"Poor commitment\");\r\n        bytes32 answerDoubleHash = keccak256(abi.encodePacked(answerHash));\r\n        require(answerDoubleHash == 0xb9bf1f33618e06cf16c58b07f82b01bbe4a9320b54b18ae4ba299f4eead3969f, \"Wrong answer\");\r\n        purpleWireCutters[msg.sender] = true;\r\n        purpleWiresCut += 1;\r\n    }\r\n    \r\n    // The original Coinbase\r\n    function cutBrownWire(bytes calldata answer) external {\r\n        require(block.number > INITIAL_COMMIT_PERIOD_END, \"Easy does it\");\r\n        require(!brownWireCutters[msg.sender], \"Already cut\");\r\n        bytes32 answerHash = keccak256(abi.encodePacked(answer));\r\n        bytes32 commitHash = keccak256(abi.encodePacked(msg.sender, answerHash));\r\n        require(commitHash == brownCommits[msg.sender], \"Poor commitment\");\r\n        bytes32 answerDoubleHash = keccak256(abi.encodePacked(answerHash));\r\n        require(answerDoubleHash == 0x32b0b16339e2428094126b67945dbe24136adea413b84958e65d48f0007a7d6b, \"Wrong answer\");\r\n        brownWireCutters[msg.sender] = true;\r\n        brownWiresCut += 1;\r\n    }\r\n  \r\n    // Mark my words, if we are not careful we will lose sight of why we started - To create a more decentralized future.\r\n    // For 18-20 included many distractions. \r\n    // What were they?\r\n    function cutGreenWire(string calldata tcotw, string calldata tdor, string calldata tloot) external {\r\n        require(block.number > INITIAL_COMMIT_PERIOD_END, \"Easy does it\");\r\n        require(!greenWireCutters[msg.sender], \"Already cut\");\r\n        bytes32 answerHash = keccak256(abi.encodePacked(tcotw, tdor, tloot));\r\n        bytes32 commitHash = keccak256(abi.encodePacked(msg.sender, answerHash));\r\n        require(commitHash == greenCommits[msg.sender], \"Poor commitment\");\r\n        bytes32 answerDoubleHash = keccak256(abi.encodePacked(answerHash));\r\n        require(answerDoubleHash == 0x3b7f80ff78a45475c3a1236c54a82625fbf41aa567b5e230a05e1b1066194748, \"Wrong answers\");\r\n        greenWireCutters[msg.sender] = true;\r\n        greenWiresCut += 1;\r\n    }\r\n    \r\n    // A miner problem\r\n    function cutOrangeWire(bytes2 nonce) external {\r\n        require(block.number > INITIAL_COMMIT_PERIOD_END, \"Easy does it\");\r\n        require(!orangeWireCutters[msg.sender], \"Already cut\");\r\n        bytes32 hashedValue = keccak256(abi.encodePacked(msg.sender, nonce));\r\n        byte firstByte = hashedValue[0];\r\n        require(firstByte == 0x00, \"Try a new nonce\");\r\n        orangeWireCutters[msg.sender] = true;\r\n        orangeWiresCut += 1;\r\n    }\r\n    \r\n    // This is your last chance. After this, there is no turning back.\r\n    function cutRedOrBlueWire() external {\r\n        require(block.number > INITIAL_COMMIT_PERIOD_END, \"Easy does it\");\r\n        require(!redBlueAttempted[tx.origin], \"No turning back\");\r\n        blueWireCutters[tx.origin] = !blueWireCutters[tx.origin];\r\n        redWireCutters[tx.origin] = !blueWireCutters[tx.origin];\r\n        msg.sender.call(\"You stay in Wonderland and I show you how deep the rabbit-hole goes\");\r\n        if (!redBlueAttempted[tx.origin]) {\r\n            redOrBlueWiresCut += 1;\r\n        }\r\n        redBlueAttempted[tx.origin] = true;\r\n    }\r\n    \r\n    // An additional disarm code will be provided by the SCPD after block 11511500\r\n    function provideDisarmCode(string calldata code) external {\r\n        require(msg.sender == owner);\r\n        disarmCode = code;\r\n    }\r\n    \r\n    function commitToDisarm(bytes32 _hash) external {\r\n        disarmCommits[msg.sender] = _hash;\r\n        disarmCommitBlock[msg.sender] = block.number;\r\n    }\r\n    \t\r\n\t// Await additional disarm code\r\n    function disarmBomb(string calldata missingChars) external {\r\n        require(!bombDetonated, \"Already exploded\");\r\n        require(bombArmed, \"Already disarmed\");\r\n        require(purpleWireCutters[msg.sender], \"Cut purple wire\");\r\n        require(brownWireCutters[msg.sender], \"Cut brown wire\");\r\n        require(greenWireCutters[msg.sender], \"Cut green wire\");\r\n        require(orangeWireCutters[msg.sender], \"Cut orange wire\");\r\n\t\trequire(block.number > disarmCommitBlock[msg.sender] + BLOCKS_TO_WAIT, \"No front-running\");\r\n\t\tbytes32 missingCharsHash = keccak256(abi.encodePacked(missingChars));\r\n\t\tbytes32 commitHash = keccak256(abi.encodePacked(msg.sender, missingCharsHash));\r\n\t\trequire(commitHash == disarmCommits[msg.sender], \"Poor commitment\");\r\n\t\tbytes32 finalResultHash = keccak256(abi.encodePacked(\r\n\t\t    missingCharsHash, \r\n\t\t    disarmCode, \r\n\t\t    blueWireCutters[msg.sender], \r\n\t\t    redWireCutters[msg.sender]\r\n\t\t    ));\r\n\t\trequire(finalResultHash == 0x820b25046cc144c5c0cff21af15e3387f538c5278cb097a77599041182b8ca17, \"Disarm failed\");\r\n        bombArmed = false;\r\n        theRealJohnMcClane = msg.sender;\r\n    }\r\n\r\n    function claimDisarmReward() external {\r\n        require(msg.sender == theRealJohnMcClane, \"Get outta here\");\r\n        msg.sender.transfer(address(this).balance);\r\n    }\r\n    \r\n    function detonateBomb() external {\r\n        require(block.number > DETONATION_TIME, \"Not until Xmas\");\r\n        require(!bombDetonated, \"Already exploded\");\r\n        require(bombArmed, \"Already disarmed\");\r\n        bombDetonated = true;\r\n        bombArmed = false;\r\n    }\r\n    \r\n    receive() external payable {}\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blueWireCutters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bombArmed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bombDetonated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"brownCommits\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"brownWireCutters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"brownWiresCut\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimDisarmReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"commitToCutBrownWire\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"commitToCutGreenWire\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"commitToCutPurpleWire\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"commitToDisarm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"answer\",\"type\":\"bytes\"}],\"name\":\"cutBrownWire\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tcotw\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tdor\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tloot\",\"type\":\"string\"}],\"name\":\"cutGreenWire\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes2\",\"name\":\"nonce\",\"type\":\"bytes2\"}],\"name\":\"cutOrangeWire\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"answer\",\"type\":\"string\"}],\"name\":\"cutPurpleWire\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cutRedOrBlueWire\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"detonateBomb\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"missingChars\",\"type\":\"string\"}],\"name\":\"disarmBomb\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disarmCode\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"disarmCommitBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"disarmCommits\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"greenCommits\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"greenWireCutters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"greenWiresCut\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"orangeWireCutters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"orangeWiresCut\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"code\",\"type\":\"string\"}],\"name\":\"provideDisarmCode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"purpleCommits\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"purpleWireCutters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purpleWiresCut\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"redBlueAttempted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redOrBlueWiresCut\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"redWireCutters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"theRealJohnMcClane\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"BombDisposal","CompilerVersion":"v0.6.10+commit.00c0fcaf","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://9610c853559524a90a8e7d74ddd74c9fa00d8b883074bf35025fd9be983d2f14"}]}