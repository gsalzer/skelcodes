{"status":"1","message":"OK","result":[{"SourceCode":"{\"ACOAssetHelper.sol\":{\"content\":\"pragma solidity ^0.6.6;\\r\\n\\r\\nlibrary ACOAssetHelper {\\r\\n    uint256 internal constant MAX_UINT = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to get if the address is for Ethereum (0x0).\\r\\n     * @param _address Address to be checked.\\r\\n     * @return Whether the address is for Ethereum.\\r\\n     */ \\r\\n    function _isEther(address _address) internal pure returns(bool) {\\r\\n        return _address == address(0);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Internal function to approve ERC20 tokens.\\r\\n     * @param token Address of the token.\\r\\n     * @param spender Authorized address.\\r\\n     * @param amount Amount to authorize.\\r\\n     */\\r\\n    function _callApproveERC20(address token, address spender, uint256 amount) internal {\\r\\n        (bool success, bytes memory returndata) = token.call(abi.encodeWithSelector(0x095ea7b3, spender, amount));\\r\\n        require(success \\u0026\\u0026 (returndata.length == 0 || abi.decode(returndata, (bool))), \\\"ACOAssetHelper::_callApproveERC20\\\");\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Internal function to transfer ERC20 tokens.\\r\\n     * @param token Address of the token.\\r\\n     * @param recipient Address of the transfer destination.\\r\\n     * @param amount Amount to transfer.\\r\\n     */\\r\\n    function _callTransferERC20(address token, address recipient, uint256 amount) internal {\\r\\n        (bool success, bytes memory returndata) = token.call(abi.encodeWithSelector(0xa9059cbb, recipient, amount));\\r\\n        require(success \\u0026\\u0026 (returndata.length == 0 || abi.decode(returndata, (bool))), \\\"ACOAssetHelper::_callTransferERC20\\\");\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Internal function to call transferFrom on ERC20 tokens.\\r\\n     * @param token Address of the token.\\r\\n     * @param sender Address of the sender.\\r\\n     * @param recipient Address of the transfer destination.\\r\\n     * @param amount Amount to transfer.\\r\\n     */\\r\\n     function _callTransferFromERC20(address token, address sender, address recipient, uint256 amount) internal {\\r\\n        (bool success, bytes memory returndata) = token.call(abi.encodeWithSelector(0x23b872dd, sender, recipient, amount));\\r\\n        require(success \\u0026\\u0026 (returndata.length == 0 || abi.decode(returndata, (bool))), \\\"ACOAssetHelper::_callTransferFromERC20\\\");\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Internal function to the asset symbol.\\r\\n     * @param asset Address of the asset.\\r\\n     * @return The asset symbol.\\r\\n     */\\r\\n    function _getAssetSymbol(address asset) internal view returns(string memory) {\\r\\n        if (_isEther(asset)) {\\r\\n            return \\\"ETH\\\";\\r\\n        } else {\\r\\n            (bool success, bytes memory returndata) = asset.staticcall(abi.encodeWithSelector(0x95d89b41));\\r\\n            require(success, \\\"ACOAssetHelper::_getAssetSymbol\\\");\\r\\n            return abi.decode(returndata, (string));\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Internal function to the asset decimals.\\r\\n     * @param asset Address of the asset.\\r\\n     * @return The asset decimals.\\r\\n     */\\r\\n    function _getAssetDecimals(address asset) internal view returns(uint8) {\\r\\n        if (_isEther(asset)) {\\r\\n            return uint8(18);\\r\\n        } else {\\r\\n            (bool success, bytes memory returndata) = asset.staticcall(abi.encodeWithSelector(0x313ce567));\\r\\n            require(success, \\\"ACOAssetHelper::_getAssetDecimals\\\");\\r\\n            return abi.decode(returndata, (uint8));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to the asset name.\\r\\n     * @param asset Address of the asset.\\r\\n     * @return The asset name.\\r\\n     */\\r\\n    function _getAssetName(address asset) internal view returns(string memory) {\\r\\n        if (_isEther(asset)) {\\r\\n            return \\\"Ethereum\\\";\\r\\n        } else {\\r\\n            (bool success, bytes memory returndata) = asset.staticcall(abi.encodeWithSelector(0x06fdde03));\\r\\n            require(success, \\\"ACOAssetHelper::_getAssetName\\\");\\r\\n            return abi.decode(returndata, (string));\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Internal function to the asset balance of an account.\\r\\n     * @param asset Address of the asset.\\r\\n     * @param account Address of the account.\\r\\n     * @return The account balance.\\r\\n     */\\r\\n    function _getAssetBalanceOf(address asset, address account) internal view returns(uint256) {\\r\\n        if (_isEther(asset)) {\\r\\n            return account.balance;\\r\\n        } else {\\r\\n            (bool success, bytes memory returndata) = asset.staticcall(abi.encodeWithSelector(0x70a08231, account));\\r\\n            require(success, \\\"ACOAssetHelper::_getAssetBalanceOf\\\");\\r\\n            return abi.decode(returndata, (uint256));\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Internal function to the asset allowance between two addresses.\\r\\n     * @param asset Address of the asset.\\r\\n     * @param owner Address of the owner of the tokens.\\r\\n     * @param spender Address of the spender authorized.\\r\\n     * @return The owner allowance for the spender.\\r\\n     */\\r\\n    function _getAssetAllowance(address asset, address owner, address spender) internal view returns(uint256) {\\r\\n        if (_isEther(asset)) {\\r\\n            return 0;\\r\\n        } else {\\r\\n            (bool success, bytes memory returndata) = asset.staticcall(abi.encodeWithSelector(0xdd62ed3e, owner, spender));\\r\\n            require(success, \\\"ACOAssetHelper::_getAssetAllowance\\\");\\r\\n            return abi.decode(returndata, (uint256));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to transfer an asset. \\r\\n     * @param asset Address of the asset to be transferred.\\r\\n     * @param to Address of the destination.\\r\\n     * @param amount The amount to be transferred.\\r\\n     */\\r\\n    function _transferAsset(address asset, address to, uint256 amount) internal {\\r\\n        if (_isEther(asset)) {\\r\\n            (bool success,) = to.call{value:amount}(new bytes(0));\\r\\n            require(success, \\u0027ACOAssetHelper::_transferAsset\\u0027);\\r\\n        } else {\\r\\n            _callTransferERC20(asset, to, amount);\\r\\n        }\\r\\n    }\\r\\n    \\r\\n\\t/**\\r\\n     * @dev Internal function to receive an asset. \\r\\n     * @param asset Address of the asset to be received.\\r\\n     * @param amount The amount to be received.\\r\\n     */\\r\\n    function _receiveAsset(address asset, uint256 amount) internal {\\r\\n        if (_isEther(asset)) {\\r\\n            require(msg.value == amount, \\\"ACOAssetHelper:: Invalid ETH amount\\\");\\r\\n        } else {\\r\\n            require(msg.value == 0, \\\"ACOAssetHelper:: Ether is not expected\\\");\\r\\n            _callTransferFromERC20(asset, msg.sender, address(this), amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to check asset allowance and set to Infinity if necessary.\\r\\n     * @param asset Address of the asset.\\r\\n     * @param owner Address of the owner of the tokens.\\r\\n     * @param spender Address of the spender authorized.\\r\\n     * @param amount Amount to check allowance.\\r\\n     */\\r\\n    function _setAssetInfinityApprove(address asset, address owner, address spender, uint256 amount) internal {\\r\\n        if (_getAssetAllowance(asset, owner, spender) \\u003c amount) {\\r\\n            _callApproveERC20(asset, spender, MAX_UINT);\\r\\n        }\\r\\n    }\\r\\n}\"},\"ACOFlashExercise.sol\":{\"content\":\"pragma solidity ^0.6.6;\\r\\n\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\u0027./ACOAssetHelper.sol\\u0027;\\r\\nimport \\\"./IWETH.sol\\\";\\r\\nimport \\\"./IUniswapV2Pair.sol\\\";\\r\\nimport \\\"./IUniswapV2Callee.sol\\\";\\r\\nimport \\\"./IUniswapV2Factory.sol\\\";\\r\\nimport \\\"./IUniswapV2Router02.sol\\\";\\r\\nimport \\\"./IACOToken.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title ACOFlashExercise\\r\\n * @dev Contract to exercise ACO tokens using Uniswap Flash Swap.\\r\\n */\\r\\ncontract ACOFlashExercise is Ownable, IUniswapV2Callee {\\r\\n  \\r\\n    /**\\r\\n     * @dev The Uniswap factory address.\\r\\n     */\\r\\n    address immutable public uniswapFactory;\\r\\n    \\r\\n    /**\\r\\n     * @dev The Uniswap Router address.\\r\\n     */\\r\\n    address immutable public uniswapRouter;\\r\\n\\r\\n    /**\\r\\n     * @dev The WETH address used on Uniswap.\\r\\n     */\\r\\n    address immutable public weth;\\r\\n    \\r\\n\\t/**\\r\\n     * @dev Addresses of Uniswap middle route for a swap. (baseAsset =\\u003e quoteAsset =\\u003e middleRoute)\\r\\n     */\\r\\n    mapping(address =\\u003e mapping(address =\\u003e address[])) internal middleRoute; \\r\\n    \\r\\n    constructor(address _uniswapRouter) public {\\r\\n\\t\\tsuper.init();\\r\\n\\t\\t\\r\\n        uniswapRouter = _uniswapRouter;\\r\\n        uniswapFactory = IUniswapV2Router02(_uniswapRouter).factory();\\r\\n        weth = IUniswapV2Router02(_uniswapRouter).WETH();\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev To accept ether from the WETH.\\r\\n     */\\r\\n    receive() external payable {}\\r\\n    \\r\\n\\t/**\\r\\n     * @dev Function to withdraw a stuck asset on the contract.\\r\\n\\t * Only can be called by the admin.\\r\\n     * @param asset Address of the asset.\\r\\n     * @param destination Address of the destination.\\r\\n     */\\r\\n    function withdrawStuckAsset(address asset, address destination) onlyOwner public {\\r\\n        uint256 amount = ACOAssetHelper._getAssetBalanceOf(asset, address(this));\\r\\n        if (amount \\u003e 0) {\\r\\n            ACOAssetHelper._transferAsset(asset, destination, amount);\\r\\n        }\\r\\n    }\\r\\n\\t\\r\\n\\t/**\\r\\n     * @dev Function to set the addresses of Uniswap middle route for a swap.\\r\\n\\t * Only can be called by the admin.\\r\\n     * @param baseAsset Address of the base asset.\\r\\n     * @param quoteAsset Address of the quote asset.\\r\\n\\t * @param uniswapMiddleRoute Addresses of Uniswap middle route for a swap.\\r\\n     */\\r\\n    function setUniswapMiddleRoute(address baseAsset, address quoteAsset, address[] memory uniswapMiddleRoute) onlyOwner public {\\r\\n        _validateUniswapMiddleRoute(baseAsset, quoteAsset, uniswapMiddleRoute);\\r\\n        (bool reversed, address[] storage route) = _getMiddleRoute(baseAsset, quoteAsset);\\r\\n        if (route.length \\u003e 0) {\\r\\n            if (reversed) {\\r\\n\\t\\t\\t\\tdelete middleRoute[quoteAsset][baseAsset];\\r\\n            } else {\\r\\n\\t\\t\\t\\tdelete middleRoute[baseAsset][quoteAsset];\\r\\n            }\\r\\n        }\\r\\n\\t\\taddress _uniswapRouter = uniswapRouter;\\r\\n\\t\\taddress _weth = weth;\\r\\n\\t\\tACOAssetHelper._callApproveERC20(_getUniswapToken(baseAsset, _weth), _uniswapRouter, ACOAssetHelper.MAX_UINT);\\r\\n\\t\\tACOAssetHelper._callApproveERC20(_getUniswapToken(quoteAsset, _weth), _uniswapRouter, ACOAssetHelper.MAX_UINT);\\r\\n\\t\\tmiddleRoute[baseAsset][quoteAsset] = uniswapMiddleRoute;\\r\\n    }\\r\\n\\t\\r\\n\\t/**\\r\\n     * @dev Function to get the Uniswap middle route set for a pair.\\r\\n     * @param baseAsset Address of the base asset.\\r\\n     * @param quoteAsset Address of the quote asset.\\r\\n\\t * @return If the assets are reversed and the middle route addresses.\\r\\n     */\\r\\n    function getMiddleRoute(address baseAsset, address quoteAsset) public view returns(bool, address[] memory) {\\r\\n        return _getMiddleRoute(baseAsset, quoteAsset);\\r\\n    }\\r\\n\\t\\r\\n    /**\\r\\n     * @dev Function to get if it is possible execute a flash exercise.\\r\\n     * @param acoToken Address of the ACO token.\\r\\n     * @return TRUE if it is possible use the flash exercise, otherwise FALSE.\\r\\n     */\\r\\n    function hasFlashExercise(address acoToken) public view returns(bool) {\\r\\n\\t\\t(address pair,) = _getUniswapData(acoToken);\\r\\n        return pair != address(0);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Function to get the required amount of collateral to be paid to Uniswap and the expected amount to exercise the ACO token.\\r\\n     * @param acoToken Address of the ACO token.\\r\\n     * @param tokenAmount Amount of tokens to be exercised.\\r\\n     * @param accounts The array of addresses to be exercised. Whether the array is empty the exercise will be executed using the standard method.\\r\\n     * @return The required amount of collateral to be paid to Uniswap and the expected amount to exercise the ACO token.\\r\\n     */\\r\\n    function getExerciseData(address acoToken, uint256 tokenAmount, address[] memory accounts) public view returns(uint256, uint256) {\\r\\n        if (tokenAmount \\u003e 0) {\\r\\n            (address pair, address[] memory path) = _getUniswapData(acoToken);\\r\\n            if (pair != address(0)) {\\r\\n                (address exerciseAddress, uint256 expectedAmount) = _getAcoExerciseData(acoToken, tokenAmount, accounts);\\r\\n\\t\\t\\t\\texerciseAddress = _getUniswapToken(exerciseAddress, weth);\\r\\n\\r\\n\\t\\t\\t\\t(uint256 reserve0, uint256 reserve1,) = IUniswapV2Pair(pair).getReserves();\\r\\n\\t\\t\\t\\tuint256 reserveIn = 0; \\r\\n\\t\\t\\t\\tuint256 reserveOut = 0; \\r\\n\\t\\t\\t\\tif (exerciseAddress == IUniswapV2Pair(pair).token0() \\u0026\\u0026 expectedAmount \\u003c reserve0) {\\r\\n\\t\\t\\t\\t\\treserveIn = reserve1;\\r\\n\\t\\t\\t\\t\\treserveOut = reserve0;\\r\\n\\t\\t\\t\\t} else if (exerciseAddress == IUniswapV2Pair(pair).token1() \\u0026\\u0026 expectedAmount \\u003c reserve1) {\\r\\n\\t\\t\\t\\t\\treserveIn = reserve0;\\r\\n\\t\\t\\t\\t\\treserveOut = reserve1;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t\\tif (reserveIn \\u003e 0 \\u0026\\u0026 reserveOut \\u003e 0) {\\r\\n\\t\\t\\t\\t\\tuint256 requiredAmount = IUniswapV2Router02(uniswapRouter).getAmountIn(expectedAmount, reserveIn, reserveOut);\\r\\n\\t\\t\\t\\t\\tuint256 requiredCollateral;\\r\\n\\t\\t\\t\\t\\tif (path.length \\u003e 0) {\\r\\n\\t\\t\\t\\t\\t\\trequiredCollateral = IUniswapV2Router02(uniswapRouter).getAmountsIn(requiredAmount, path)[0];\\r\\n\\t\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\t\\trequiredCollateral = requiredAmount;\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\treturn (requiredCollateral, expectedAmount);\\r\\n\\t\\t\\t\\t}\\r\\n            }\\r\\n        }\\r\\n        return (0, 0);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Function to get the estimated collateral to be received through a flash exercise.\\r\\n     * @param acoToken Address of the ACO token.\\r\\n     * @param tokenAmount Amount of tokens to be exercised.\\r\\n     * @return The estimated collateral to be received through a flash exercise using the standard exercise function.\\r\\n     */\\r\\n    function getEstimatedReturn(address acoToken, uint256 tokenAmount) public view returns(uint256) {\\r\\n        (uint256 requiredAmount,) = getExerciseData(acoToken, tokenAmount, new address[](0));\\r\\n        if (requiredAmount \\u003e 0) {\\r\\n            (uint256 collateralAmount,) = IACOToken(acoToken).getCollateralOnExercise(tokenAmount);\\r\\n            if (requiredAmount \\u003c collateralAmount) {\\r\\n                return collateralAmount - requiredAmount;\\r\\n            }\\r\\n        }\\r\\n        return 0;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Function to flash exercise ACO tokens.\\r\\n     * The flash exercise uses the flash swap functionality on Uniswap.\\r\\n     * No asset is required to exercise the ACO token because the own collateral redeemed is used to fulfill the terms of the contract.\\r\\n     * The account will receive the remaining difference.\\r\\n     * @param acoToken Address of the ACO token.\\r\\n     * @param tokenAmount Amount of tokens to be exercised.\\r\\n     * @param minimumCollateral The minimum amount of collateral accepted to be received on the flash exercise.\\r\\n     * @param salt Random number to calculate the start index of the array of accounts to be exercised.\\r\\n     */\\r\\n    function flashExercise(address acoToken, uint256 tokenAmount, uint256 minimumCollateral, uint256 salt) public {\\r\\n        _flashExercise(acoToken, tokenAmount, minimumCollateral, salt, new address[](0));\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Function to flash exercise ACO tokens.\\r\\n     * The flash exercise uses the flash swap functionality on Uniswap.\\r\\n     * No asset is required to exercise the ACO token because the own collateral redeemed is used to fulfill the terms of the contract.\\r\\n     * The account will receive the remaining difference.\\r\\n     * @param acoToken Address of the ACO token.\\r\\n     * @param tokenAmount Amount of tokens to be exercised.\\r\\n     * @param minimumCollateral The minimum amount of collateral accepted to be received on the flash exercise.\\r\\n     * @param accounts The array of addresses to get the deposited collateral. \\r\\n     */\\r\\n    function flashExerciseAccounts(\\r\\n        address acoToken, \\r\\n        uint256 tokenAmount, \\r\\n        uint256 minimumCollateral, \\r\\n        address[] memory accounts\\r\\n    ) public {\\r\\n        require(accounts.length \\u003e 0, \\\"ACOFlashExercise::flashExerciseAccounts: Accounts are required\\\");\\r\\n        _flashExercise(acoToken, tokenAmount, minimumCollateral, 0, accounts);\\r\\n    }\\r\\n    \\r\\n     /**\\r\\n     * @dev External function to be called by the Uniswap pair on flash swap transaction.\\r\\n     * @param sender Address of the sender of the Uniswap swap. It must be the ACOFlashExercise contract.\\r\\n     * @param amount0Out Amount of token0 on Uniswap pair to be received on the flash swap.\\r\\n     * @param amount1Out Amount of token1 on Uniswap pair to be received on the flash swap.\\r\\n     * @param data The ABI encoded with ACO token flash exercise data.\\r\\n     */\\r\\n    function uniswapV2Call(\\r\\n        address sender, \\r\\n        uint256 amount0Out, \\r\\n        uint256 amount1Out, \\r\\n        bytes calldata data\\r\\n    ) external override {\\r\\n        require(sender == address(this), \\\"ACOFlashExercise::uniswapV2Call: Invalid sender\\\");\\r\\n        \\r\\n        uint256 requiredAmount = _getFlasSwapPaymentRequired(amount0Out, amount1Out);\\r\\n        (address account, address collateral, uint256 collateralAmount, uint256 remainingAmount, address[] memory path) = _exercise(requiredAmount, data);\\r\\n        \\r\\n\\t\\t_sendAmounts(\\r\\n\\t\\t\\taccount, \\r\\n\\t\\t\\tcollateral, \\r\\n\\t\\t\\tcollateralAmount, \\r\\n\\t\\t\\tremainingAmount, \\r\\n\\t\\t\\trequiredAmount, \\r\\n\\t\\t\\tpath\\r\\n\\t\\t);\\r\\n    }\\r\\n\\t\\r\\n\\t/**\\r\\n     * @dev Internal function to send the remaining collateral amount to the account and pay the Uniswap.\\r\\n     * @param account Address of the account.\\r\\n\\t * @param collateral Address of the collateral.\\r\\n     * @param collateralAmount The collateral amount received on the exercise.\\r\\n     * @param remainingAmount The remaining collateral amount to be paid to the account.\\r\\n     * @param uniswapRequiredAmount The required amount to pay the Uniswap.\\r\\n     * @param path The second swap required path due to the middle route.\\r\\n     */\\r\\n\\tfunction _sendAmounts(\\r\\n\\t\\taddress account, \\r\\n\\t\\taddress collateral, \\r\\n\\t\\tuint256 collateralAmount, \\r\\n\\t\\tuint256 remainingAmount, \\r\\n\\t\\tuint256 uniswapRequiredAmount, \\r\\n\\t\\taddress[] memory path\\r\\n\\t) internal {\\r\\n\\t\\tif (path.length \\u003e 0) {\\r\\n\\t\\t\\tuint256 toPayAmount = collateralAmount - remainingAmount;\\r\\n\\t\\t\\tif (ACOAssetHelper._isEther(collateral)) {\\r\\n\\t\\t\\t\\tIWETH(weth).deposit{value: toPayAmount}();\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tIUniswapV2Router02(uniswapRouter).swapTokensForExactTokens(uniswapRequiredAmount, toPayAmount, path, msg.sender, block.timestamp);\\r\\n\\t\\t} else {\\r\\n\\t\\t\\taddress uniswapAsset;\\r\\n\\t\\t\\tif (ACOAssetHelper._isEther(collateral)) {\\r\\n\\t\\t\\t\\tuniswapAsset = weth;\\r\\n\\t\\t\\t\\tIWETH(uniswapAsset).deposit{value: uniswapRequiredAmount}();\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\tuniswapAsset = collateral;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tACOAssetHelper._callTransferERC20(uniswapAsset, msg.sender, uniswapRequiredAmount); \\r\\n\\t\\t}\\r\\n\\t\\tACOAssetHelper._transferAsset(collateral, account, remainingAmount);\\r\\n\\t}\\r\\n\\t\\r\\n\\t/**\\r\\n     * @dev Internal function to validate the minimum collateral amount requested.\\r\\n     * @param requiredAmount The required collateral amount to pay Uniswap.\\r\\n     * @param collateralAmount The collateral amount received on the exercise.\\r\\n     * @param minimumCollateral The minimum collateral amount requested.\\r\\n\\t * @return The remaining amount to be paid to the account.\\r\\n     */\\r\\n\\tfunction _validateMinimumCollateral(uint256 requiredAmount, uint256 collateralAmount, uint256 minimumCollateral) internal pure returns(uint256) {\\r\\n\\t\\trequire(requiredAmount \\u003c= collateralAmount, \\\"ACOFlashExercise::_validateMinimumCollateral: Insufficient collateral amount\\\");\\r\\n\\t\\tuint256 remainingAmount = collateralAmount - requiredAmount;\\r\\n\\t\\trequire(remainingAmount \\u003e= minimumCollateral, \\\"ACOFlashExercise::_validateMinimumCollateral: Minimum amount not satisfied\\\");\\r\\n\\t\\treturn remainingAmount;\\r\\n\\t}\\r\\n\\t\\r\\n\\t/**\\r\\n     * @dev Internal function to exercise ACO token and get the data for the payments.\\r\\n     * @param requiredAmount The required amount to pay Uniswap.\\r\\n     * @param data The ABI encoded with ACO token flash exercise data.\\r\\n     * @return Account address, collateral address, collateral amount received on exercise, remaining collateral amount to be paid to account and the second swap required path due to the middle route.\\r\\n     */\\r\\n\\tfunction _exercise(uint256 requiredAmount, bytes memory data) internal returns(\\r\\n\\t\\taddress, \\r\\n\\t\\taddress, \\r\\n\\t\\tuint256,\\r\\n\\t\\tuint256,\\r\\n\\t\\taddress[] memory\\r\\n\\t) {\\r\\n        (address account, \\r\\n\\t\\t address acoToken, \\r\\n\\t\\t uint256 tokenAmount, \\r\\n\\t\\t uint256 salt, \\r\\n\\t\\t uint256 collateralAmount, \\r\\n\\t\\t uint256 remainingAmount,\\r\\n\\t\\t address[] memory accounts, \\r\\n\\t\\t address[] memory path) = _getExerciseBaseData(requiredAmount, data);\\r\\n        \\r\\n        _exerciseAco(account, acoToken, tokenAmount, salt, accounts);\\r\\n\\t\\t\\r\\n\\t\\taddress collateral = IACOToken(acoToken).collateral();\\r\\n\\t\\treturn (account, collateral, collateralAmount, remainingAmount, path);\\r\\n\\t}\\r\\n\\t\\r\\n\\t/**\\r\\n     * @dev Internal function to get the base exercise data and validate the amounts.\\r\\n     * @param requiredAmount The required amount to pay Uniswap.\\r\\n     * @param data The ABI encoded with ACO token flash exercise data.\\r\\n     */\\r\\n\\tfunction _getExerciseBaseData(uint256 requiredAmount, bytes memory data) internal view returns(\\r\\n\\t    address account,\\r\\n\\t    address acoToken,\\r\\n\\t    uint256 tokenAmount,\\r\\n\\t    uint256 salt,\\r\\n\\t    uint256 collateralAmount,\\r\\n\\t    uint256 remainingAmount,\\r\\n\\t    address[] memory accounts,\\r\\n\\t    address[] memory path\\r\\n\\t) {\\r\\n\\t    uint256 minimumCollateral;\\r\\n\\t    (account, \\r\\n\\t\\t acoToken, \\r\\n\\t\\t tokenAmount, \\r\\n\\t\\t minimumCollateral, \\r\\n\\t\\t salt, \\r\\n\\t\\t accounts, \\r\\n\\t\\t path) = abi.decode(data, (address, address, uint256, uint256, uint256, address[], address[]));\\r\\n\\t\\t \\r\\n\\t    (collateralAmount,) = IACOToken(acoToken).getCollateralOnExercise(tokenAmount);\\r\\n\\t\\t\\r\\n        uint256 requiredCollateral;\\r\\n\\t\\tif (path.length \\u003e 0) {\\r\\n\\t\\t\\trequiredCollateral = IUniswapV2Router02(uniswapRouter).getAmountsIn(requiredAmount, path)[0];\\r\\n\\t\\t} else {\\r\\n            requiredCollateral = requiredAmount;\\r\\n\\t\\t}\\r\\n        remainingAmount = _validateMinimumCollateral(requiredCollateral, collateralAmount, minimumCollateral);\\r\\n\\t}\\r\\n\\t\\r\\n\\t/**\\r\\n     * @dev Internal function to exercise an ACO token.\\r\\n     * @param account Address of the owner of the ACO.\\r\\n     * @param acoToken Address of the ACO token.\\r\\n     * @param tokenAmount Amount of tokens to be exercised.\\r\\n     * @param salt Random number to calculate the start index of the array of accounts to be exercised when using standard method.\\r\\n     * @param accounts The array of addresses to get the deposited collateral. Whether the array is empty the exercise will be executed using the standard method.\\r\\n     */\\r\\n\\tfunction _exerciseAco(\\r\\n\\t    address account,\\r\\n\\t    address acoToken,\\r\\n\\t    uint256 tokenAmount,\\r\\n\\t    uint256 salt,\\r\\n\\t    address[] memory accounts\\r\\n    ) internal {\\r\\n        (address exerciseAddress, uint256 expectedAmount) = _getAcoExerciseData(acoToken, tokenAmount, accounts);\\r\\n\\t\\t\\r\\n\\t\\tuint256 ethValue = 0;\\r\\n        if (ACOAssetHelper._isEther(exerciseAddress)) {\\r\\n            ethValue = expectedAmount;\\r\\n            IWETH(weth).withdraw(expectedAmount);\\r\\n        } else {\\r\\n            ACOAssetHelper._callApproveERC20(exerciseAddress, acoToken, expectedAmount);\\r\\n        }\\r\\n        \\r\\n        if (accounts.length == 0) {\\r\\n            IACOToken(acoToken).exerciseFrom{value: ethValue}(account, tokenAmount, salt);\\r\\n        } else {\\r\\n            IACOToken(acoToken).exerciseAccountsFrom{value: ethValue}(account, tokenAmount, accounts);\\r\\n        }\\r\\n    }\\r\\n\\t\\r\\n\\t/**\\r\\n     * @dev Internal function to get the required amount to pay the Uniswap on flash swap.\\r\\n     * @param amount0Out Amount of token0 on Uniswap pair to be received on the flash swap.\\r\\n     * @param amount1Out Amount of token1 on Uniswap pair to be received on the flash swap.\\r\\n\\t * @return The required amount to be paid.\\r\\n     */\\r\\n\\tfunction _getFlasSwapPaymentRequired(uint256 amount0Out, uint256 amount1Out) internal view returns(uint256) {\\r\\n        address token0 = IUniswapV2Pair(msg.sender).token0();\\r\\n        address token1 = IUniswapV2Pair(msg.sender).token1();\\r\\n        require(msg.sender == IUniswapV2Factory(uniswapFactory).getPair(token0, token1), \\\"ACOFlashExercise::uniswapV2Call: Invalid transaction sender\\\"); \\r\\n        require(amount0Out == 0 || amount1Out == 0, \\\"ACOFlashExercise::uniswapV2Call: Invalid out amounts\\\"); \\r\\n        \\r\\n        (uint256 reserve0, uint256 reserve1,) = IUniswapV2Pair(msg.sender).getReserves();\\r\\n\\t\\tuint256 reserveIn; \\r\\n        uint256 reserveOut; \\r\\n\\t\\tif (amount0Out == 0) {\\r\\n\\t\\t\\treserveIn = reserve0;\\r\\n\\t\\t\\treserveOut = reserve1;\\r\\n\\t\\t} else {\\r\\n\\t\\t\\treserveIn = reserve1;\\r\\n\\t\\t\\treserveOut = reserve0;\\r\\n\\t\\t}\\r\\n        return IUniswapV2Router02(uniswapRouter).getAmountIn((amount0Out + amount1Out), reserveIn, reserveOut);\\r\\n\\t}\\r\\n\\t\\r\\n\\t/**\\r\\n     * @dev Internal function to get the ACO tokens exercise data.\\r\\n     * @param acoToken Address of the ACO token.\\r\\n     * @param tokenAmount Amount of tokens to be exercised.\\r\\n     * @param accounts The array of addresses to be exercised. Whether the array is empty the exercise will be executed using the standard method.\\r\\n\\t * @return The asset and the respective amount that should be sent to get the collateral.\\r\\n     */\\r\\n\\tfunction _getAcoExerciseData(address acoToken, uint256 tokenAmount, address[] memory accounts) internal view returns(address, uint256) {\\r\\n\\t\\t(address exerciseAddress, uint256 expectedAmount) = IACOToken(acoToken).getBaseExerciseData(tokenAmount);\\r\\n\\t\\tif (accounts.length == 0) {\\r\\n\\t\\t\\texpectedAmount = expectedAmount + IACOToken(acoToken).maxExercisedAccounts();\\r\\n\\t\\t} else {\\r\\n\\t\\t\\texpectedAmount = expectedAmount + accounts.length;\\r\\n\\t\\t}\\r\\n\\t\\treturn (exerciseAddress, expectedAmount);\\r\\n\\t}\\r\\n\\t\\r\\n    /**\\r\\n     * @dev Internal function to flash exercise ACO tokens.\\r\\n     * @param acoToken Address of the ACO token.\\r\\n     * @param tokenAmount Amount of tokens to be exercised.\\r\\n     * @param minimumCollateral The minimum amount of collateral accepted to be received on the flash exercise.\\r\\n     * @param salt Random number to calculate the start index of the array of accounts to be exercised when using standard method.\\r\\n     * @param accounts The array of addresses to get the deposited collateral. Whether the array is empty the exercise will be executed using the standard method.\\r\\n     */\\r\\n    function _flashExercise(\\r\\n        address acoToken, \\r\\n        uint256 tokenAmount, \\r\\n        uint256 minimumCollateral, \\r\\n        uint256 salt,\\r\\n        address[] memory accounts\\r\\n    ) internal {\\r\\n        (address pair, address[] memory path) = _getUniswapData(acoToken);\\r\\n        require(pair != address(0), \\\"ACOFlashExercise::_flashExercise: Invalid Uniswap pair\\\");\\r\\n        \\r\\n        (address exerciseAddress, uint256 expectedAmount) = _getAcoExerciseData(acoToken, tokenAmount, accounts);\\r\\n\\r\\n        uint256 amount0Out = 0;\\r\\n        uint256 amount1Out = 0;\\r\\n        if (_getUniswapToken(exerciseAddress, weth) == IUniswapV2Pair(pair).token0()) {\\r\\n            amount0Out = expectedAmount;\\r\\n        } else {\\r\\n            amount1Out = expectedAmount;  \\r\\n        }\\r\\n        \\r\\n        bytes memory data = abi.encode(msg.sender, acoToken, tokenAmount, minimumCollateral, salt, accounts, path);\\r\\n        IUniswapV2Pair(pair).swap(amount0Out, amount1Out, address(this), data);\\r\\n    }\\r\\n    \\r\\n\\t/**\\r\\n     * @dev Internal function to get Uniswap token address.\\r\\n     * The Ethereum address on ACO must be swapped to WETH to be used on Uniswap.\\r\\n     * @param token Address of the token on ACO.\\r\\n     * @return Uniswap token address.\\r\\n     */\\r\\n    function _getUniswapToken(address token, address _weth) internal pure returns(address) {\\r\\n        if (ACOAssetHelper._isEther(token)) {\\r\\n            return _weth;\\r\\n        } else {\\r\\n            return token;\\r\\n        }\\r\\n    }\\r\\n\\t\\r\\n\\t/**\\r\\n     * @dev Internal function to get the Uniswap base data for the flash exercise.\\r\\n     * @param acoToken Address of the ACO token.\\r\\n\\t * @return Uniswap pair for execute the flash swap, the second swap required path due to the middle route.\\r\\n     */\\r\\n    function _getUniswapData(address acoToken) internal view returns(address, address[] memory) {\\r\\n\\t\\tIACOToken _aco = IACOToken(acoToken);\\r\\n\\t\\taddress underlying = _aco.underlying();\\r\\n        address strikeAsset = _aco.strikeAsset();\\r\\n\\t\\taddress _weth = weth;\\r\\n        (bool reversed, address[] storage route) = _getMiddleRoute(underlying, strikeAsset);\\r\\n\\t\\tif (route.length \\u003e 0) {\\r\\n\\t\\t\\tbool isCall = _aco.isCall();\\r\\n\\t\\t\\taddress swapAsset;\\r\\n\\t\\t\\taddress[] memory path = new address[](route.length + 1);\\r\\n\\t\\t\\tpath[0] = _getUniswapToken((isCall ? underlying : strikeAsset), _weth);\\r\\n\\t\\t\\tif ((isCall \\u0026\\u0026 reversed) || (!isCall \\u0026\\u0026 !reversed)) {\\r\\n\\t\\t\\t\\tswapAsset = _getUniswapToken(route[0], _weth);\\r\\n\\t\\t\\t\\tuint256 index = 1;\\r\\n\\t\\t\\t\\tfor (uint256 i = route.length; i \\u003e 1; --i) {\\r\\n\\t\\t\\t\\t\\tpath[index] = _getUniswapToken(route[i - 1], _weth);\\r\\n\\t\\t\\t\\t\\t++index;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\tuint256 lastIndex = route.length - 1;\\r\\n\\t\\t\\t\\tswapAsset = _getUniswapToken(route[lastIndex], _weth);\\r\\n\\t\\t\\t\\tuint256 index = 1;\\r\\n\\t\\t\\t\\tfor (uint256 i = 0; i \\u003c lastIndex; ++i) {\\r\\n\\t\\t\\t\\t\\tpath[index] = _getUniswapToken(route[i], _weth);\\r\\n\\t\\t\\t\\t\\t++index;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tpath[route.length] = swapAsset;\\r\\n\\t\\t\\taddress pair = IUniswapV2Factory(uniswapFactory).getPair(_getUniswapToken((isCall ? strikeAsset : underlying), _weth), swapAsset);\\r\\n\\t\\t\\treturn (pair, path);\\r\\n\\t\\t} else {\\t\\r\\n\\t\\t\\taddress pair = IUniswapV2Factory(uniswapFactory).getPair(_getUniswapToken(underlying, _weth), _getUniswapToken(strikeAsset, _weth));\\r\\n\\t\\t\\treturn (pair, new address[](0));\\r\\n\\t\\t}\\r\\n    }\\r\\n\\t\\r\\n\\t/**\\r\\n     * @dev Internal function to get the Uniswap middle route.\\r\\n     * @param baseAsset Address of the base asset.\\r\\n     * @param quoteAsset Address of the quote asset.\\r\\n\\t * @return If the assets are reversed and the middle route addresses.\\r\\n     */\\r\\n    function _getMiddleRoute(address baseAsset, address quoteAsset) internal view returns(bool, address[] storage) {\\r\\n        address[] storage route = middleRoute[baseAsset][quoteAsset];\\r\\n        if (route.length \\u003e 0) {\\r\\n            return (false, route);\\r\\n        } else {\\r\\n\\t\\t\\taddress[] storage route2 = middleRoute[quoteAsset][baseAsset];\\r\\n\\t\\t\\treturn ((route2.length \\u003e 0), route2);\\r\\n\\t\\t}\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Internal function to validate the addresses on the Uniswap middle route.\\r\\n     * @param asset0 Address of a pair asset.\\r\\n     * @param asset1 Address of another pair asset.\\r\\n\\t * @param uniswapMiddleRoute Addresses of Uniswap middle route for a swap.\\r\\n     */\\r\\n    function _validateUniswapMiddleRoute(address asset0, address asset1, address[] memory uniswapMiddleRoute) internal pure {\\r\\n        for (uint256 i = 0; i \\u003c uniswapMiddleRoute.length; ++i) {\\r\\n            address asset = uniswapMiddleRoute[i];\\r\\n            require(asset0 != asset \\u0026\\u0026 asset1 != asset, \\\"ACOFlashExercise::_validateUniswapMiddleRoute: Invalid middle route\\\");\\r\\n            for (uint256 j = i+1; j \\u003c uniswapMiddleRoute.length; ++j) {\\r\\n                require(asset != uniswapMiddleRoute[j], \\\"ACOFlashExercise::_validateUniswapMiddleRoute: Invalid middle route\\\");\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\"},\"IACOToken.sol\":{\"content\":\"pragma solidity ^0.6.6;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\ninterface IACOToken is IERC20 {\\r\\n\\tfunction init(address _underlying, address _strikeAsset, bool _isCall, uint256 _strikePrice, uint256 _expiryTime, uint256 _acoFee, address payable _feeDestination, uint256 _maxExercisedAccounts) external;\\r\\n    function name() external view returns(string memory);\\r\\n    function symbol() external view returns(string memory);\\r\\n    function decimals() external view returns(uint8);\\r\\n    function underlying() external view returns (address);\\r\\n    function strikeAsset() external view returns (address);\\r\\n    function feeDestination() external view returns (address);\\r\\n    function isCall() external view returns (bool);\\r\\n    function strikePrice() external view returns (uint256);\\r\\n    function expiryTime() external view returns (uint256);\\r\\n    function totalCollateral() external view returns (uint256);\\r\\n    function acoFee() external view returns (uint256);\\r\\n\\tfunction maxExercisedAccounts() external view returns (uint256);\\r\\n    function underlyingSymbol() external view returns (string memory);\\r\\n    function strikeAssetSymbol() external view returns (string memory);\\r\\n    function underlyingDecimals() external view returns (uint8);\\r\\n    function strikeAssetDecimals() external view returns (uint8);\\r\\n    function currentCollateral(address account) external view returns(uint256);\\r\\n    function unassignableCollateral(address account) external view returns(uint256);\\r\\n    function assignableCollateral(address account) external view returns(uint256);\\r\\n    function currentCollateralizedTokens(address account) external view returns(uint256);\\r\\n    function unassignableTokens(address account) external view returns(uint256);\\r\\n    function assignableTokens(address account) external view returns(uint256);\\r\\n    function getCollateralAmount(uint256 tokenAmount) external view returns(uint256);\\r\\n    function getTokenAmount(uint256 collateralAmount) external view returns(uint256);\\r\\n    function getBaseExerciseData(uint256 tokenAmount) external view returns(address, uint256);\\r\\n    function numberOfAccountsWithCollateral() external view returns(uint256);\\r\\n    function getCollateralOnExercise(uint256 tokenAmount) external view returns(uint256, uint256);\\r\\n    function collateral() external view returns(address);\\r\\n    function mintPayable() external payable returns(uint256);\\r\\n    function mintToPayable(address account) external payable returns(uint256);\\r\\n    function mint(uint256 collateralAmount) external returns(uint256);\\r\\n    function mintTo(address account, uint256 collateralAmount) external returns(uint256);\\r\\n    function burn(uint256 tokenAmount) external returns(uint256);\\r\\n    function burnFrom(address account, uint256 tokenAmount) external returns(uint256);\\r\\n    function redeem() external returns(uint256);\\r\\n    function redeemFrom(address account) external returns(uint256);\\r\\n    function exercise(uint256 tokenAmount, uint256 salt) external payable returns(uint256);\\r\\n    function exerciseFrom(address account, uint256 tokenAmount, uint256 salt) external payable returns(uint256);\\r\\n    function exerciseAccounts(uint256 tokenAmount, address[] calldata accounts) external payable returns(uint256);\\r\\n    function exerciseAccountsFrom(address account, uint256 tokenAmount, address[] calldata accounts) external payable returns(uint256);\\r\\n}\"},\"IERC20.sol\":{\"content\":\"pragma solidity ^0.6.6;\\r\\n\\r\\n// Contract on https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\"},\"IUniswapV2Callee.sol\":{\"content\":\"pragma solidity ^0.6.6;\\r\\n\\r\\ninterface IUniswapV2Callee {\\r\\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;\\r\\n}\"},\"IUniswapV2Factory.sol\":{\"content\":\"pragma solidity ^0.6.6;\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n    function feeToSetter() external view returns (address);\\r\\n\\r\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n    function allPairs(uint) external view returns (address pair);\\r\\n    function allPairsLength() external view returns (uint);\\r\\n\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n    function setFeeToSetter(address) external;\\r\\n}\"},\"IUniswapV2Pair.sol\":{\"content\":\"pragma solidity ^0.6.6;\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n    function symbol() external pure returns (string memory);\\r\\n    function decimals() external pure returns (uint8);\\r\\n    function totalSupply() external view returns (uint);\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint value) external returns (bool);\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n    function nonces(address owner) external view returns (uint);\\r\\n\\r\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n\\r\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\r\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint amount0In,\\r\\n        uint amount1In,\\r\\n        uint amount0Out,\\r\\n        uint amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\r\\n    function factory() external view returns (address);\\r\\n    function token0() external view returns (address);\\r\\n    function token1() external view returns (address);\\r\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n    function price0CumulativeLast() external view returns (uint);\\r\\n    function price1CumulativeLast() external view returns (uint);\\r\\n    function kLast() external view returns (uint);\\r\\n\\r\\n    function mint(address to) external returns (uint liquidity);\\r\\n    function burn(address to) external returns (uint amount0, uint amount1);\\r\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\r\\n    function skim(address to) external;\\r\\n    function sync() external;\\r\\n\\r\\n    function initialize(address, address) external;\\r\\n}\"},\"IUniswapV2Router02.sol\":{\"content\":\"pragma solidity 0.6.6;\\r\\n\\r\\ninterface IUniswapV2Router01 {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountETH);\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n}\"},\"IWETH.sol\":{\"content\":\"pragma solidity ^0.6.6;\\r\\n\\r\\ninterface IWETH {\\r\\n    function deposit() external payable;\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n    function withdraw(uint) external;\\r\\n}\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// Adapted from OpenZeppelin\\r\\n\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\n/*\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with GSN meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address payable) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\ncontract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    function init() internal {\\r\\n        require(_owner == address(0), \\\"Ownable: Contract initialized\\\");\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniswapRouter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"acoToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"name\":\"flashExercise\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"acoToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumCollateral\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"flashExerciseAccounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"acoToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"getEstimatedReturn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"acoToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"getExerciseData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"baseAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteAsset\",\"type\":\"address\"}],\"name\":\"getMiddleRoute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"acoToken\",\"type\":\"address\"}],\"name\":\"hasFlashExercise\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"baseAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteAsset\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"uniswapMiddleRoute\",\"type\":\"address[]\"}],\"name\":\"setUniswapMiddleRoute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0Out\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Out\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"uniswapV2Call\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"withdrawStuckAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"ACOFlashExercise","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://43ae5746096d0ffb045469c6e994973288303bec446cb48d42bcac5fc6bdc408"}]}