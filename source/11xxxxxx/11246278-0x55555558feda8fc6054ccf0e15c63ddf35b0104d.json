{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/access/Context.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: contracts/access/Ownable.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function initialize() public {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.0;\r\n//pragma solidity ^0.5.16;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/interfaces/IOneSplit.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.0;\r\n\r\n//import \"openzeppelin-eth/contracts/token/ERC20/ERC20Detailed.sol\";\r\n\r\n\r\ninterface IOneSplit {\r\n    function getExpectedReturn(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        //address fromToken,\r\n        //address destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags // See constants in IOneSplit.sol\r\n    )\r\n        external\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256[] memory distribution\r\n        );\r\n\r\n    /*\r\n    function getExpectedReturnWithGas(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags, // See constants in IOneSplit.sol\r\n        uint256 destTokenEthPriceTimesGasPrice\r\n    )\r\n        public\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256 estimateGasAmount,\r\n            uint256[] memory distribution\r\n        );\r\n    */\r\n    function swap(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 minReturn,\r\n        uint256[] calldata distribution,\r\n        uint256 flags\r\n    )\r\n        external\r\n        payable\r\n        returns(uint256 returnAmount);\r\n}\r\n\r\n// File: contracts/interfaces/IUniswapV2Pair.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    //event Approval(address indexed owner, address indexed spender, uint value);\r\n    //event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    //function name() external pure returns (string memory);\r\n    //function symbol() external pure returns (string memory);\r\n    //function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    //function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    //function approve(address spender, uint value) external returns (bool);\r\n    //function transfer(address to, uint value) external returns (bool);\r\n    //function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    //function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    //function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    //function nonces(address owner) external view returns (uint);\r\n\r\n    //function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    //event Mint(address indexed sender, uint amount0, uint amount1);\r\n    //event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    /*event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    */\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    /*\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n    */\r\n}\r\n\r\n// File: contracts/interfaces/IExternalPool.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.0;\r\n\r\nabstract contract  IExternalPool {\r\n    address public enterToken;\r\n    function getPoolValue(address denominator) virtual external view returns (uint256);\r\n    function getTokenStaked() virtual external view returns (uint256);\r\n    function addPosition() virtual external returns (uint256);\r\n    function exitPosition(uint amount) virtual external;\r\n    function transferTokenTo(address TokenAddress, address recipient, uint amount) virtual external returns (uint256);\r\n}\r\n\r\n// File: contracts/interfaces/ISFToken.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.0;\r\n\r\n\r\ninterface ISFToken {\r\n    function rebase(uint totalSupply) external;\r\n    function mint(address account, uint amount) external;\r\n    function burn(address account, uint amount) external;\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\n// File: contracts/interfaces/IWETH.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.0;\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function withdraw(uint wad) external;\r\n}\r\n\r\n// File: contracts/interfaces/IUniRouter.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.0;\r\n\r\ninterface IUniRouter {\r\n    function swapExactTokensForTokens(\r\n      uint amountIn,\r\n      uint amountOutMin,\r\n      address[] calldata path,\r\n      address to,\r\n      uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n      external\r\n      payable\r\n      returns (uint[] memory amounts);\r\n\r\n    //function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    //function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n    \r\n}\r\n\r\n// File: contracts/interfaces/ICHI.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n// SPDX-License-Identifier: MIT\r\n//import \"./IERC20.sol\";\r\n//import \"openzeppelin-eth/contracts/token/ERC20/ERC20Detailed.sol\";\r\n\r\ninterface ICHI {\r\n    function freeFromUpTo(address from, uint256 value)\r\n        external\r\n        returns (uint256);\r\n        \r\n    function freeUpTo(uint256 value)\r\n        external\r\n        returns (uint256);\r\n    \r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function mint(uint256 value) external;\r\n}\r\n\r\n// File: contracts/CHIBurner.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.0;\r\n\r\n\r\ncontract CHIBurner {\r\n    address\r\n        public constant CHI_ADDRESS = 0x0000000000004946c0e9F43F4Dee607b0eF1fA1c;\r\n        \r\n    ICHI public constant chi = ICHI(CHI_ADDRESS);\r\n\r\n    modifier discountCHI {\r\n        uint256 gasStart = gasleft();\r\n        _;\r\n\r\n        /*uint256 availableAmount = chi.balanceOf(msg.sender);\r\n        uint256 allowedAmount = chi.allowance(msg.sender, address(this));\r\n        if (allowedAmount < availableAmount) {\r\n            availableAmount = allowedAmount;\r\n        }\r\n        uint256 ourBalance = chi.balanceOf(address(this));\r\n\r\n        address sender;\r\n        if (ourBalance > availableAmount) {\r\n            sender = address(this);\r\n            ourBalance = availableAmount;\r\n        } else {\r\n            sender = msg.sender;\r\n        }\r\n\r\n        if (ourBalance > 0) {*/\r\n        uint256 gasLeft = gasleft();\r\n        uint256 gasSpent = 21000 +\r\n            gasStart -\r\n            gasLeft +\r\n            16 *\r\n            msg.data.length;\r\n        //chi.freeFromUpTo(msg.sender, (gasSpent + 14154) / 41947);\r\n        chi.freeUpTo((gasSpent + 14154) / 41947);\r\n        //}\r\n    }\r\n}\r\n\r\n// File: contracts/XChanger.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract XChanger is CHIBurner {\r\n    address\r\n        public constant oneSplitAddress = 0xC586BeF4a0992C495Cf22e1aeEE4E446CECDee0E;\r\n    address\r\n        public constant uniRouter = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n        \r\n    enum Exchange {UNI, ONESPLIT}\r\n    \r\n    //0x6B175474E89094C44Da98b954EedeAC495271d0F DAI\r\n    //\r\n    //0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48 USDC\r\n    //\r\n    //  30000000000000000000\r\n    //  30000000\r\n\r\n    function swapSplit(address fromToken,\r\n        address toToken, uint256 amount, uint256 flags) internal returns (uint256) {\r\n        IOneSplit oneSplit = IOneSplit(oneSplitAddress);\r\n        IERC20 _fromToken = IERC20(fromToken);\r\n        IERC20 _toToken = IERC20(toToken);\r\n        (uint256 returnAmount0, uint256[] memory distribution) = oneSplit\r\n            .getExpectedReturn(_fromToken, IERC20(toToken), amount, 1, flags);\r\n\r\n        require(returnAmount0 > 0, \"nothing to return\");\r\n        \r\n        if (_fromToken.allowance(address(this), oneSplitAddress) < amount) {\r\n            _fromToken.approve(oneSplitAddress, uint256(-1));    \r\n        }\r\n\r\n        uint returnAmount = oneSplit.swap(\r\n            _fromToken,\r\n            _toToken,\r\n            amount,\r\n            1,\r\n            distribution,\r\n            flags\r\n        );\r\n\r\n        return returnAmount;\r\n    }\r\n    \r\n    \r\n    function swapUni(\r\n        address fromToken,\r\n        address toToken,\r\n        uint256 amount\r\n    ) internal returns (uint256) {\r\n        IERC20 _token = IERC20(fromToken);\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = fromToken;\r\n        path[1] = toToken;\r\n        IUniRouter UniswapV2Router02 = IUniRouter(uniRouter);\r\n\r\n        if (_token.allowance(address(this), address(uniRouter)) != uint256(-1)) {\r\n            _token.approve(address(uniRouter), uint256(-1));\r\n        }\r\n\r\n        uint256[] memory amounts = UniswapV2Router02.swapExactTokensForTokens(\r\n            amount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n        \r\n        return amounts[1];\r\n    }\r\n    \r\n    function _getOneSplitExpReturn(\r\n        address OneSplitAddress,\r\n        address fromToken,\r\n        address toToken,\r\n        uint256 amount\r\n    ) internal view returns (uint256) {\r\n        IERC20 fromIERC20 = IERC20(fromToken);\r\n        IERC20 toIERC20 = IERC20(toToken);\r\n\r\n        (uint256 returnAmount0, ) = IOneSplit(OneSplitAddress)\r\n            .getExpectedReturn(fromIERC20, toIERC20, amount, 1, 0x800000000000);\r\n\r\n        return returnAmount0;\r\n    }\r\n    \r\n    function swap(address fromToken, address toToken, uint amount, Exchange exchange) public payable returns (uint) {\r\n        uint result;\r\n        if (exchange == Exchange.ONESPLIT) {\r\n            result = swapSplit(fromToken, toToken, amount, 0);\r\n        } else {\r\n            result = swapUni(fromToken, toToken, amount);    \r\n        }\r\n        return result;\r\n    }\r\n    \r\n    function quote(address fromToken, address toToken, uint amount, Exchange exchange) public view returns (uint) {\r\n        uint returnamount;\r\n        \r\n        if (exchange == Exchange.ONESPLIT) {\r\n            returnamount = _getOneSplitExpReturn(oneSplitAddress, fromToken, toToken, amount);\r\n        } else {\r\n            \r\n            address[] memory path = new address[](2);\r\n            path[0] = fromToken;\r\n            path[1] = toToken;\r\n            IUniRouter UniswapV2Router02 = IUniRouter(uniRouter);\r\n        uint256[] memory amounts = UniswapV2Router02.getAmountsOut(\r\n            amount,\r\n            path\r\n        );\r\n        returnamount = amounts[1];\r\n        }\r\n        \r\n        return returnamount;\r\n    }\r\n    \r\n    function reverseQuote(address fromToken, address toToken, uint amount) public view returns (uint) {\r\n        address[] memory path = new address[](2);\r\n            path[0] = fromToken;\r\n            path[1] = toToken;\r\n            IUniRouter UniswapV2Router02 = IUniRouter(uniRouter);\r\n        uint256[] memory amounts = UniswapV2Router02.getAmountsIn(\r\n            amount,\r\n            path\r\n        );\r\n        return amounts[1];\r\n    }\r\n}\r\n\r\n// File: contracts/utils/SafeMath.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.0;\r\n//pragma solidity ^0.5.16;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/ValueHolder.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract ValueHolder is Ownable, XChanger {\r\n    mapping (uint => address) public uniPools;\r\n    mapping (uint => address) public externalPools;\r\n    \r\n    uint public uniLen;\r\n    uint public extLen;\r\n\r\n    address constant public WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    address public denominateTo;\r\n    address public holderAddress;\r\n    address public OneSplit;\r\n    address public SFToken;\r\n    \r\n    address public votedUniPool;\r\n    address public votedExtPool;\r\n    uint public votedFee; // 1% = 100\r\n    uint public votedChi; // number of Chi to hold\r\n    \r\n    uint256 private constant fpNumbers = 1e8;\r\n    //uint public TotalValue;\r\n    \r\n    bool private initialized;\r\n    using SafeMath for uint256;\r\n    \r\n    event LogValueManagerUpdated(address Manager);\r\n    event LogVoterUpdated(address Voter);\r\n    event LogVotedExtPoolUpdated(address pool);\r\n    event LogVotedUniPoolUpdated(address pool);\r\n    event LogSFTokenUpdated(address _NewSFToken);\r\n    event LogFeeUpdated(uint newFee);\r\n    event LogFeeTaken(uint feeAmount);\r\n    event LogMintTaken(uint fromTokenAmount);\r\n    event LogBurnGiven(uint toTokenAmount);\r\n    event LogChiToppedUpdated(uint spendAmount);\r\n    \r\n    address public ValueManager;\r\n    modifier onlyValueManager() {\r\n        require(msg.sender == ValueManager);\r\n        _;\r\n    }\r\n    \r\n    address public Voter;\r\n    modifier onlyVoter() {\r\n        require(msg.sender == Voter);\r\n        _;\r\n    }\r\n\r\n    function init(address _uniPool, address _extPool) public {\r\n        require(!initialized, \"Is already been initialized\");\r\n        initialized = true;\r\n\r\n        Ownable.initialize(); // Do not forget this call!\r\n\r\n        //0x3041CbD36888bECc7bbCBc0045E3B1f144466f5f\r\n        \r\n        uniPools[uniLen] = _uniPool;\r\n        uniLen++;\r\n        \r\n        externalPools[uniLen] = _extPool;\r\n        extLen++;\r\n        \r\n        votedExtPool = _extPool;\r\n        emit LogVotedExtPoolUpdated(_extPool);\r\n        \r\n        denominateTo = 0xdAC17F958D2ee523a2206206994597C13D831ec7; // USDT\r\n        OneSplit = 0xC586BeF4a0992C495Cf22e1aeEE4E446CECDee0E; //opesplit.eth\r\n        SFToken = 0xD39F6fC3d56A6EDe71f8677EA7C3e6A400000000; // \r\n        ValueManager = msg.sender;\r\n        Voter = msg.sender;\r\n        holderAddress = ValueManager;\r\n        votedFee = 200;\r\n        votedChi = 100;\r\n    }\r\n    \r\n    function setSFToken(address _NewSFToken)\r\n        public\r\n        onlyOwner\r\n    {\r\n        SFToken = _NewSFToken;\r\n        emit LogSFTokenUpdated(_NewSFToken);\r\n    }\r\n    \r\n    function setValueManager(address _ValueManager)\r\n        external\r\n        onlyOwner\r\n    {\r\n        ValueManager = _ValueManager;\r\n        emit LogValueManagerUpdated(_ValueManager);\r\n    }\r\n    \r\n    function setVoter(address _Voter)\r\n        external\r\n        onlyOwner\r\n    {\r\n        Voter = _Voter;\r\n        emit LogVoterUpdated(_Voter);\r\n    }\r\n    \r\n    function setVotedExtPool(address pool)\r\n        public\r\n        onlyVoter\r\n    {\r\n        votedExtPool = pool;\r\n        emit LogVotedExtPoolUpdated(pool);\r\n    }\r\n    \r\n    function setVotedUniPool(address pool)\r\n        public\r\n        onlyVoter\r\n    {\r\n        votedUniPool = pool;\r\n        emit LogVotedUniPoolUpdated(pool);\r\n    }\r\n    \r\n    function setVotedFee(uint _votedFee)\r\n        public\r\n        onlyVoter\r\n    {\r\n        votedFee = _votedFee;\r\n        emit LogFeeUpdated(_votedFee);\r\n    }\r\n    \r\n    function setVotedChi(uint _votedChi)\r\n        public\r\n        onlyVoter\r\n    {\r\n        votedChi = _votedChi;\r\n    }\r\n\r\n    function topUpChi(address Token) public returns (uint) {\r\n        uint currentChi = ICHI(CHI_ADDRESS).balanceOf(address(this));\r\n        if (currentChi < votedChi) {\r\n            //top up 1/2 votedChi\r\n            uint spendAmount = reverseQuote(Token, CHI_ADDRESS, votedChi.div(2));\r\n            swap(Token, CHI_ADDRESS, spendAmount, Exchange.UNI);\r\n            LogChiToppedUpdated(spendAmount);\r\n            return spendAmount;\r\n        }\r\n    }\r\n\r\n    function mintQuote(address fromToken, uint amount, Exchange exchange) external view returns (uint) {\r\n        if (votedExtPool != address(0)) {\r\n            address toToken = IExternalPool(votedExtPool).enterToken();\r\n        \r\n            return quote(fromToken, toToken, amount, exchange);\r\n            \r\n        } else if (votedUniPool != address(0)) {\r\n            revert('not yet implemented');\r\n        }\r\n    }\r\n    \r\n    function mint(address fromToken, uint amount) discountCHI payable external {\r\n        if (fromToken != address(0)) {\r\n            IERC20 _fromToken = IERC20(fromToken);\r\n            require(\r\n            _fromToken.allowance(msg.sender, address(this)) >= amount,\r\n            \"Allowance is not enough\");\r\n            _fromToken.transferFrom(msg.sender, address(this), amount);\r\n        } else {\r\n            //convert to WETH   \r\n            IWETH(WETH_ADDRESS).deposit{value:msg.value}();\r\n            amount = msg.value;\r\n            fromToken = WETH_ADDRESS;\r\n        }\r\n\r\n        emit LogMintTaken(amount);\r\n        \r\n        amount = amount.sub(topUpChi(fromToken)); \r\n        \r\n        if (votedExtPool != address(0)) {\r\n            IExternalPool extPool = IExternalPool(votedExtPool);\r\n            address toToken = extPool.enterToken();\r\n            \r\n            uint returnAmount = swap(fromToken, toToken, amount, Exchange.UNI);\r\n            IERC20 _toToken = IERC20(toToken);\r\n            \r\n            _toToken.transfer(votedExtPool, returnAmount);\r\n            \r\n            extPool.addPosition();\r\n            // convert return amount to USDT (denominateTo)\r\n            \r\n            uint toMint = quote(toToken, denominateTo, returnAmount, Exchange.UNI);\r\n            \r\n            // mint that amount to sender\r\n            ISFToken(SFToken).mint(msg.sender, toMint);\r\n            \r\n            // rebase not needed\r\n            \r\n        } else if (votedUniPool != address(0)) {\r\n            revert('not yet implemented');\r\n        }\r\n    }\r\n    \r\n    function burn(address toToken, uint amount) discountCHI external {\r\n        if (votedExtPool != address(0)) {\r\n            ISFToken _SFToken = ISFToken(SFToken);\r\n            // get latest token value\r\n            rebase();\r\n            // limit by existing balance\r\n            uint senderBalance = _SFToken.balanceOf(msg.sender);\r\n            if ( senderBalance < amount) {\r\n                amount = senderBalance;\r\n            }\r\n            \r\n            IExternalPool extPool = IExternalPool(votedExtPool);\r\n            address poolToken = extPool.enterToken();\r\n            \r\n            //get quote from sf token to pool token\r\n            uint poolTokenWithdraw = quote(denominateTo, poolToken, amount, Exchange.UNI);\r\n            \r\n            require(extPool.getTokenStaked() >= poolTokenWithdraw, 'Not enough voted pool value to withdraw');\r\n            \r\n            uint feeTaken = poolTokenWithdraw.mul(votedFee).div(10000);\r\n            emit LogFeeTaken(feeTaken);\r\n            //discount with fee\r\n            //leave fee in the pool\r\n            poolTokenWithdraw = poolTokenWithdraw.sub(feeTaken);\r\n            \r\n            //pull out pool tokens \r\n            extPool.exitPosition(poolTokenWithdraw);\r\n            //get them out from the pool here\r\n            uint returnPoolTokenAmount = extPool.transferTokenTo(poolToken, address(this), poolTokenWithdraw);\r\n            // topup with CHi\r\n            returnPoolTokenAmount = returnPoolTokenAmount.sub(topUpChi(poolToken)); \r\n            _SFToken.burn(msg.sender, amount);\r\n            \r\n            uint returnAmount = swap(poolToken, toToken, returnPoolTokenAmount, Exchange.UNI);\r\n            IERC20(toToken).transfer(msg.sender, returnAmount);\r\n            \r\n            emit LogMintTaken(returnAmount);\r\n        } else if (votedUniPool != address(0)) \r\n        {\r\n            revert('not yet implemented');\r\n        }\r\n    }\r\n    \r\n    function rebase() discountCHI onlyValueManager public {\r\n        uint value = _getTotalValue().add(1);\r\n        ISFToken SF = ISFToken(SFToken);\r\n        SF.rebase(value);\r\n    }\r\n    \r\n    function rebase(uint value) onlyValueManager external {\r\n        ISFToken SF = ISFToken(SFToken);\r\n        SF.rebase(value);\r\n    }\r\n\r\n    function _getUniBalance(IUniswapV2Pair uniPool)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 uniBalance = (uniPool.balanceOf(holderAddress)).add(\r\n            uniPool.balanceOf(address(this))\r\n        );\r\n        return uniBalance;\r\n    }\r\n\r\n    function _getHolderPc(IUniswapV2Pair uniPool)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 uniTotalSupply = uniPool.totalSupply();\r\n        uint256 holderPc = (_getUniBalance(uniPool).mul(fpNumbers)).div(\r\n            uniTotalSupply\r\n        );\r\n\r\n        return holderPc;\r\n    }\r\n\r\n    function _getUniReserve(IUniswapV2Pair uniPool)\r\n        public\r\n        view\r\n        returns (uint256, uint256)\r\n    {\r\n        uint256 holderPc = _getHolderPc(uniPool);\r\n\r\n        (uint112 reserve0, uint112 reserve1, ) = uniPool.getReserves();\r\n\r\n        uint256 myreserve0 = (uint256(reserve0).mul(holderPc)).div(fpNumbers);\r\n        uint256 myreserve1 = (uint256(reserve1).mul(holderPc)).div(fpNumbers);\r\n\r\n        return (myreserve0, myreserve1);\r\n    }\r\n\r\n    function _getExternalValue() public view returns (uint256) {\r\n        uint256 totalReserve = 0;\r\n        for (uint256 j = 0; j < extLen; j++) {\r\n            address extAddress = externalPools[j];\r\n            if (extAddress != address(0)) {\r\n                IExternalPool externalPool = IExternalPool(extAddress);\r\n\r\n                totalReserve = totalReserve.add(\r\n                    externalPool.getPoolValue(denominateTo)\r\n                );\r\n            }    \r\n        }\r\n        return totalReserve;\r\n    }\r\n\r\n    function _getDenominatedValue(IUniswapV2Pair uniPool)\r\n        public\r\n        view\r\n        returns (uint256, uint256)\r\n    {\r\n        (uint256 myreserve0, uint256 myreserve1) = _getUniReserve(uniPool);\r\n        \r\n        address token0 = uniPool.token0();\r\n        address token1 = uniPool.token1();\r\n\r\n        if (token0 != denominateTo) {\r\n            //get amount and convert to denominate addr;\r\n            if (token0 != SFToken) {\r\n                myreserve0 = _getOneSplitExpReturn(\r\n                    OneSplit,\r\n                    uniPool.token0(),\r\n                    denominateTo,\r\n                    myreserve0\r\n                );\r\n            }\r\n            else {\r\n                myreserve0 = 0;\r\n            }\r\n            \r\n        }\r\n\r\n        if (uniPool.token1() != denominateTo) {\r\n            //get amount and convert to denominate addr;\r\n            if (token1 != SFToken) {\r\n                myreserve1 = _getOneSplitExpReturn(\r\n                    OneSplit,\r\n                    uniPool.token1(),\r\n                    denominateTo,\r\n                    myreserve0\r\n                );\r\n            }\r\n            else {\r\n                myreserve1 = 0;\r\n            }\r\n        }\r\n        return (myreserve0, myreserve1);\r\n    }\r\n\r\n    function _getTotalValue() public view returns (uint256) {\r\n        uint256 totalReserve = 0;\r\n\r\n        for (uint256 i = 0; i < uniLen; i++) {\r\n            address uniAddress = uniPools[i];\r\n            if (uniAddress != address(0)) {\r\n                IUniswapV2Pair uniPool = IUniswapV2Pair(uniAddress);\r\n\r\n            (uint256 myreserve0, uint256 myreserve1) = _getDenominatedValue(\r\n                uniPool\r\n            );\r\n\r\n            totalReserve = totalReserve.add(myreserve0);\r\n            totalReserve = totalReserve.add(myreserve1);\r\n                \r\n            }\r\n        }\r\n\r\n        totalReserve = totalReserve.add(_getExternalValue());\r\n\r\n        return totalReserve;\r\n    }\r\n\r\n    function addUni(address pool) public onlyVoter {\r\n        uniPools[uniLen] = pool;\r\n        uniLen++;\r\n    }\r\n\r\n    function delUni(uint i) external onlyVoter {\r\n        uniPools[i] = address(0);\r\n    }\r\n    \r\n    function addExt(address pool) public onlyVoter {\r\n        externalPools[uniLen] = pool;\r\n        extLen++;\r\n    }\r\n\r\n    function delExt(uint i) external onlyVoter {\r\n        externalPools[i] = address(0);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toTokenAmount\",\"type\":\"uint256\"}],\"name\":\"LogBurnGiven\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"spendAmount\",\"type\":\"uint256\"}],\"name\":\"LogChiToppedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"LogFeeTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"LogFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromTokenAmount\",\"type\":\"uint256\"}],\"name\":\"LogMintTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_NewSFToken\",\"type\":\"address\"}],\"name\":\"LogSFTokenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Manager\",\"type\":\"address\"}],\"name\":\"LogValueManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"LogVotedExtPoolUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"LogVotedUniPoolUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Voter\",\"type\":\"address\"}],\"name\":\"LogVoterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CHI_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OneSplit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SFToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ValueManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Voter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"uniPool\",\"type\":\"address\"}],\"name\":\"_getDenominatedValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_getExternalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"uniPool\",\"type\":\"address\"}],\"name\":\"_getHolderPc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_getTotalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"uniPool\",\"type\":\"address\"}],\"name\":\"_getUniBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"uniPool\",\"type\":\"address\"}],\"name\":\"_getUniReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"addExt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"addUni\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chi\",\"outputs\":[{\"internalType\":\"contract ICHI\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"delExt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"delUni\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"denominateTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extLen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"externalPools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holderAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_extPool\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"enum XChanger.Exchange\",\"name\":\"exchange\",\"type\":\"uint8\"}],\"name\":\"mintQuote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oneSplitAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"enum XChanger.Exchange\",\"name\":\"exchange\",\"type\":\"uint8\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"rebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"reverseQuote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_NewSFToken\",\"type\":\"address\"}],\"name\":\"setSFToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ValueManager\",\"type\":\"address\"}],\"name\":\"setValueManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_votedChi\",\"type\":\"uint256\"}],\"name\":\"setVotedChi\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"setVotedExtPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_votedFee\",\"type\":\"uint256\"}],\"name\":\"setVotedFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"setVotedUniPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_Voter\",\"type\":\"address\"}],\"name\":\"setVoter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"enum XChanger.Exchange\",\"name\":\"exchange\",\"type\":\"uint8\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Token\",\"type\":\"address\"}],\"name\":\"topUpChi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniLen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uniPools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votedChi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votedExtPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votedFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votedUniPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ValueHolder","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://4853a5e8f6df09d4d7aeea29c3eb1804210b6b3604ab75ea7abf0e7acef9b5fc"}]}