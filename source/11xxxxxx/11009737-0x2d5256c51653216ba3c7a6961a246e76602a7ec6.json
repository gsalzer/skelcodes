{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.12;\n\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract Context {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n    constructor () internal { }\n    // solhint-disable-previous-line no-empty-blocks\n\n    function _msgSender() internal view returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Returns true if the caller is the current owner.\n     */\n    function isOwner() public view returns (bool) {\n        return _msgSender() == _owner;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n * the optional functions; to access them see {ERC20Detailed}.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n *\n * _Since v2.5.0:_ this module is now much more gas efficient, given net gas\n * metering changes introduced in the Istanbul hardfork.\n */\ncontract ReentrancyGuard {\n    bool private _notEntered;\n\n    constructor () internal {\n        // Storing an initial non-zero value makes deployment a bit more\n        // expensive, but in exchange the refund on every call to nonReentrant\n        // will be lower in amount. Since refunds are capped to a percetange of\n        // the total transaction's gas, it is best to keep them low in cases\n        // like this one, to increase the likelihood of the full refund coming\n        // into effect.\n        _notEntered = true;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_notEntered, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _notEntered = false;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _notEntered = true;\n    }\n}\n\n/**\n * @title ERC165\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\n */\ninterface IERC165 {\n\n    /**\n     * @notice Query if a contract implements an interface\n     * @dev Interface identification is specified in ERC-165. This function\n     * uses less than 30,000 gas\n     * @param _interfaceId The interface identifier, as specified in ERC-165\n     */\n    function supportsInterface(bytes4 _interfaceId)\n    external\n    view\n    returns (bool);\n}\n\n/**\n * @dev ERC-1155 interface for accepting safe transfers.\n */\ninterface IERC1155TokenReceiver {\n\n  /**\n   * @notice Handle the receipt of a single ERC1155 token type\n   * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated\n   * This function MAY throw to revert and reject the transfer\n   * Return of other amount than the magic value MUST result in the transaction being reverted\n   * Note: The token contract address is always the message sender\n   * @param _operator  The address which called the `safeTransferFrom` function\n   * @param _from      The address which previously owned the token\n   * @param _id        The id of the token being transferred\n   * @param _amount    The amount of tokens being transferred\n   * @param _data      Additional data with no specified format\n   * @return           `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n   */\n  function onERC1155Received(address _operator, address _from, uint256 _id, uint256 _amount, bytes calldata _data) external returns(bytes4);\n\n  /**\n   * @notice Handle the receipt of multiple ERC1155 token types\n   * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated\n   * This function MAY throw to revert and reject the transfer\n   * Return of other amount than the magic value WILL result in the transaction being reverted\n   * Note: The token contract address is always the message sender\n   * @param _operator  The address which called the `safeBatchTransferFrom` function\n   * @param _from      The address which previously owned the token\n   * @param _ids       An array containing ids of each token being transferred\n   * @param _amounts   An array containing amounts of each token being transferred\n   * @param _data      Additional data with no specified format\n   * @return           `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n   */\n  function onERC1155BatchReceived(address _operator, address _from, uint256[] calldata _ids, uint256[] calldata _amounts, bytes calldata _data) external returns(bytes4);\n\n  /**\n   * @notice Indicates whether a contract implements the `ERC1155TokenReceiver` functions and so can accept ERC1155 token types.\n   * @param  interfaceID The ERC-165 interface ID that is queried for support.s\n   * @dev This function MUST return true if it implements the ERC1155TokenReceiver interface and ERC-165 interface.\n   *      This function MUST NOT consume more than 5,000 gas.\n   * @return Wheter ERC-165 or ERC1155TokenReceiver interfaces are supported.\n   */\n  function supportsInterface(bytes4 interfaceID) external view returns (bool);\n\n}\n\ncontract MemeTokenWrapper {\n\tusing SafeMath for uint256;\n\tIERC20 public meme;\n\n\tconstructor(address _memeAddress) public {\n\t\tmeme = IERC20(_memeAddress);\n\t}\n\n\tuint256 private _totalSupply;\n\t// Objects balances [id][address] => balance\n\tmapping(uint256 => mapping(address => uint256)) internal _balances;\n\tmapping(uint256 => uint256) private _totalDeposits;\n\n\tfunction totalSupply() public view returns (uint256) {\n\t\treturn _totalSupply;\n\t}\n\n\tfunction totalDeposits(uint256 id) public view returns (uint256) {\n\t\treturn _totalDeposits[id];\n\t}\n\n\tfunction balanceOf(address account, uint256 id) public view returns (uint256) {\n\t\treturn _balances[id][account];\n\t}\n\n\tfunction bid(uint256 id, uint256 amount) public {\n\t\t_totalSupply = _totalSupply.add(amount);\n\t\t_totalDeposits[id] = _totalDeposits[id].add(amount);\n\t\t_balances[id][msg.sender] = _balances[id][msg.sender].add(amount);\n\t\tmeme.transferFrom(msg.sender, address(this), amount);\n\t}\n\n\tfunction withdraw(uint256 id) public {\n\t\tuint256 amount = balanceOf(msg.sender, id);\n\t\t_totalSupply = _totalSupply.sub(amount);\n\t\t_totalDeposits[id] = _totalDeposits[id].sub(amount);\n\t\t_balances[id][msg.sender] = _balances[id][msg.sender].sub(amount);\n\t\tmeme.transfer(msg.sender, amount);\n\t}\n\n\tfunction _emergencyWithdraw(address account, uint256 id) internal {\n\t\tuint256 amount = _balances[id][account];\n\n\t\t_totalSupply = _totalSupply.sub(amount);\n\t\t_totalDeposits[id] = _totalDeposits[id].sub(amount);\n\t\t_balances[id][account] = _balances[id][account].sub(amount);\n\t\tmeme.transfer(account, amount);\n\t}\n\n\tfunction _end(\n\t\tuint256 id,\n\t\taddress highestBidder,\n\t\taddress beneficiary,\n\t\taddress runner,\n\t\tuint256 fee,\n\t\tuint256 amount\n\t) internal {\n\t\tuint256 accountDeposits = _balances[id][highestBidder];\n\t\trequire(accountDeposits == amount);\n\n\t\t_totalSupply = _totalSupply.sub(amount);\n\t\tuint256 memeFee = (amount.mul(fee)).div(100);\n\n\t\t_totalDeposits[id] = _totalDeposits[id].sub(amount);\n\t\t_balances[id][highestBidder] = _balances[id][highestBidder].sub(amount);\n\t\tmeme.transfer(beneficiary, amount.sub(memeFee));\n\t\tmeme.transfer(runner, memeFee);\n\t}\n}\n\ninterface IERC1155 {\n\tfunction create(\n\t\tuint256 _maxSupply,\n\t\tuint256 _initialSupply,\n\t\tstring calldata _uri,\n\t\tbytes calldata _data\n\t) external returns (uint256 tokenId);\n\n\tfunction safeTransferFrom(\n\t\taddress _from,\n\t\taddress _to,\n\t\tuint256 _id,\n\t\tuint256 _amount,\n\t\tbytes calldata _data\n\t) external;\n\n\tfunction safeBatchTransferFrom(\n\t\taddress _from,\n\t\taddress _to,\n\t\tuint256[] calldata _ids,\n\t\tuint256[] calldata _amounts,\n\t\tbytes calldata _data\n\t) external;\n\n\tfunction balanceOf(address _owner, uint256 _id) external view returns (uint256);\n\n\tfunction balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids)\n\t\texternal\n\t\tview\n\t\treturns (uint256[] memory);\n\n\tfunction setApprovalForAll(address _operator, bool _approved) external;\n\n\tfunction isApprovedForAll(address _owner, address _operator) external view returns (bool isOperator);\n\n\tevent TransferSingle(\n\t\taddress indexed _operator,\n\t\taddress indexed _from,\n\t\taddress indexed _to,\n\t\tuint256 _id,\n\t\tuint256 _amount\n\t);\n\n\tevent TransferBatch(\n\t\taddress indexed _operator,\n\t\taddress indexed _from,\n\t\taddress indexed _to,\n\t\tuint256[] _ids,\n\t\tuint256[] _amounts\n\t);\n\n\tevent ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n\n\tevent URI(string _amount, uint256 indexed _id);\n}\n\ncontract MEMEAuction is Ownable, ReentrancyGuard, MemeTokenWrapper, IERC1155TokenReceiver {\n\tusing SafeMath for uint256;\n\n\taddress public memeLtdAddress;\n\taddress public runner;\n\n\t// info about a particular auction\n\tstruct AuctionInfo {\n\t\taddress beneficiary;\n\t\tuint256 fee;\n\t\tuint256 auctionStart;\n\t\tuint256 auctionEnd;\n\t\tuint256 nft;\n\t\taddress highestBidder;\n\t\tuint256 highestBid;\n\t\tbool auctionEnded;\n\t}\n\n\tmapping(uint256 => AuctionInfo) public auctionsById;\n\tuint256[] public auctions;\n\n\t// Events that will be fired on changes.\n\tevent BidPlaced(address indexed user, uint256 indexed id, uint256 amount);\n\tevent Withdrawn(address indexed user, uint256 indexed id, uint256 amount);\n\tevent Ended(address indexed user, uint256 indexed id, uint256 amount);\n\n\tconstructor(\n\t\taddress _runner,\n\t\taddress _memeAddress,\n\t\taddress _memeLtdAddress\n\t) public MemeTokenWrapper(_memeAddress) {\n\t\trunner = _runner;\n\t\tmemeLtdAddress = _memeLtdAddress;\n\t}\n\n\tfunction auctionStart(uint256 id) public view returns (uint256) {\n\t\treturn auctionsById[id].auctionStart;\n\t}\n\n\tfunction beneficiary(uint256 id) public view returns (address) {\n\t\treturn auctionsById[id].beneficiary;\n\t}\n\n\tfunction auctionEnd(uint256 id) public view returns (uint256) {\n\t\treturn auctionsById[id].auctionEnd;\n\t}\n\n\tfunction memeLtdNft(uint256 id) public view returns (uint256) {\n\t\treturn auctionsById[id].nft;\n\t}\n\n\tfunction highestBidder(uint256 id) public view returns (address) {\n\t\treturn auctionsById[id].highestBidder;\n\t}\n\n\tfunction highestBid(uint256 id) public view returns (uint256) {\n\t\treturn auctionsById[id].highestBid;\n\t}\n\n\tfunction ended(uint256 id) public view returns (bool) {\n\t\treturn now >= auctionsById[id].auctionEnd;\n\t}\n\n\tfunction runnerFee(uint256 id) public view returns (uint256) {\n\t\treturn auctionsById[id].fee;\n\t}\n\n\tfunction setRunnerAddress(address account) public onlyOwner {\n\t\trunner = account;\n\t}\n\n\tfunction create(\n\t\tuint256 id,\n\t\taddress beneficiaryAddress,\n\t\tuint256 fee,\n\t\tuint256 start,\n\t\tuint256 duration\n\t) public onlyOwner {\n\t\tAuctionInfo storage auction = auctionsById[id];\n\t\trequire(auction.beneficiary == address(0), \"MEMEAuction::create: auction already created\");\n\n\t\tauction.beneficiary = beneficiaryAddress;\n\t\tauction.fee = fee;\n\t\tauction.auctionStart = start;\n\t\tauction.auctionEnd = start.add(duration * 1 days);\n\n\t\tauctions.push(id);\n\n\t\tuint256 tokenId = IERC1155(memeLtdAddress).create(1, 1, \"\", \"\");\n\t\trequire(tokenId > 0, \"MEMEAuction::create: ERC1155 create did not succeed\");\n\t\tauction.nft = tokenId;\n\t}\n\n\tfunction bid(uint256 id, uint256 amount) public nonReentrant {\n\t\tAuctionInfo storage auction = auctionsById[id];\n\t\trequire(auction.beneficiary != address(0), \"MEMEAuction::bid: auction does not exist\");\n\t\trequire(now >= auction.auctionStart, \"MEMEAuction::bid: auction has not started\");\n\t\trequire(now <= auction.auctionEnd, \"MEMEAuction::bid: auction has ended\");\n\n\t\tuint256 newAmount = amount.add(balanceOf(msg.sender, id));\n\t\trequire(newAmount > auction.highestBid, \"MEMEAuction::bid: bid is less than highest bid\");\n\n\t\tauction.highestBidder = msg.sender;\n\t\tauction.highestBid = newAmount;\n\t\tsuper.bid(id, amount);\n\t\temit BidPlaced(msg.sender, id, amount);\n\t}\n\n\tfunction withdraw(uint256 id) public nonReentrant {\n\t\tAuctionInfo storage auction = auctionsById[id];\n\t\tuint256 amount = balanceOf(msg.sender, id);\n\t\trequire(auction.beneficiary != address(0), \"MEMEAuction::withdraw: auction does not exist\");\n\t\trequire(amount > 0, \"MEMEAuction::withdraw: cannot withdraw 0\");\n\n\t\trequire(\n\t\t\tauction.highestBidder != msg.sender,\n\t\t\t\"MEMEAuction::withdraw: you are the highest bidder and cannot withdraw\"\n\t\t);\n\n\t\tsuper.withdraw(id);\n\t\temit Withdrawn(msg.sender, id, amount);\n\t}\n\n\tfunction emergencyWithdraw(uint256 id) public onlyOwner {\n\t\tAuctionInfo storage auction = auctionsById[id];\n\t\trequire(auction.beneficiary != address(0), \"MEMEAuction::create: auction does not exist\");\n\t\trequire(now >= auction.auctionEnd, \"MEMEAuction::emergencyWithdraw: the auction has not ended\");\n\t\trequire(!auction.auctionEnded, \"MEMEAuction::emergencyWithdraw: auction ended and item sent\");\n\n\t\t_emergencyWithdraw(auction.highestBidder, id);\n\t\temit Withdrawn(auction.highestBidder, id, auction.highestBid);\n\t}\n\n\tfunction end(uint256 id) public nonReentrant {\n\t\tAuctionInfo storage auction = auctionsById[id];\n\t\trequire(auction.beneficiary != address(0), \"MEMEAuction::end: auction does not exist\");\n\t\trequire(now >= auction.auctionEnd, \"MEMEAuction::end: the auction has not ended\");\n\t\trequire(!auction.auctionEnded, \"MEMEAuction::end: auction already ended\");\n\n\t\tauction.auctionEnded = true;\n\t\t_end(id, auction.highestBidder, auction.beneficiary, runner, auction.fee, auction.highestBid);\n\t\tIERC1155(memeLtdAddress).safeTransferFrom(address(this), auction.highestBidder, auction.nft, 1, \"\");\n\t\temit Ended(auction.highestBidder, id, auction.highestBid);\n\t}\n\n\tfunction onERC1155Received(\n\t\taddress _operator,\n\t\taddress, // _from\n\t\tuint256, // _id\n\t\tuint256, // _amount\n\t\tbytes memory // _data\n\t) public returns (bytes4) {\n\t\trequire(msg.sender == address(memeLtdAddress), \"MEMEAuction::onERC1155BatchReceived:: invalid token address\");\n\t\trequire(_operator == address(this), \"MEMEAuction::onERC1155BatchReceived:: operator must be auction contract\");\n\n\t\t// Return success\n\t\treturn this.onERC1155Received.selector;\n\t}\n\n\tfunction onERC1155BatchReceived(\n\t\taddress _operator,\n\t\taddress, // _from,\n\t\tuint256[] memory, // _ids,\n\t\tuint256[] memory, // _amounts,\n\t\tbytes memory // _data\n\t) public returns (bytes4) {\n\t\trequire(msg.sender == address(memeLtdAddress), \"MEMEAuction::onERC1155BatchReceived:: invalid token address\");\n\t\trequire(_operator == address(this), \"MEMEAuction::onERC1155BatchReceived:: operator must be auction contract\");\n\n\t\t// Return success\n\t\treturn this.onERC1155BatchReceived.selector;\n\t}\n\n\tfunction supportsInterface(bytes4 interfaceID) external view returns (bool) {\n\t\treturn\n\t\t\tinterfaceID == 0x01ffc9a7 || // ERC-165 support\n\t\t\tinterfaceID == 0x4e2312e0; // ERC-1155 `ERC1155TokenReceiver` support\n\t}\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_runner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_memeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_memeLtdAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BidPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Ended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"auctionEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"auctionStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctionsById\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nft\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"highestBidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"highestBid\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"auctionEnded\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"beneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"beneficiaryAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"create\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"end\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ended\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"highestBid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"highestBidder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"meme\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"memeLtdAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"memeLtdNft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"runner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"runnerFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setRunnerAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MEMEAuction","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"9999","ConstructorArguments":"000000000000000000000000214bc6a17e022cff3676d3979b748f2940317957000000000000000000000000d5525d397898e5502075ea5e830d8914f6f0affe000000000000000000000000e4605d46fd0b3f8329d936a8b258d69276cba264","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}