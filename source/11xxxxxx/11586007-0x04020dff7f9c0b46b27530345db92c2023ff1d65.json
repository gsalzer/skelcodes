{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"./contracts/oracle/CTokenOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.5.16;\\npragma experimental ABIEncoderV2;\\n\\nimport {Decimal} from \\\"../lib/Decimal.sol\\\";\\nimport {SafeMath} from \\\"../lib/SafeMath.sol\\\";\\n\\nimport {IOracle} from \\\"./IOracle.sol\\\";\\nimport {ICToken} from \\\"./ICToken.sol\\\";\\nimport {IChainLinkAggregator} from \\\"./IChainLinkAggregator.sol\\\";\\n\\ncontract CTokenOracle is IOracle {\\n\\n    using SafeMath for uint256;\\n    using SafeMath for uint8;\\n\\n    uint8 public precisionScalar;\\n    uint8 public chainlinkDecimals;\\n\\n    ICToken public cToken;\\n    IChainLinkAggregator public chainLinkAggregator;\\n\\n    constructor (\\n        address _cTokenAddress,\\n        address _chainLinkAggregator\\n    )\\n        public\\n    {\\n        cToken = ICToken(_cTokenAddress);\\n        chainLinkAggregator = IChainLinkAggregator(_chainLinkAggregator);\\n\\n        // For CUSDC, this is 8\\n        uint8 cTokenDecimals = cToken.decimals();\\n\\n        // For USDC, this is 6\\n        uint8 underlyingDecimals = ICToken(cToken.underlying()).decimals();\\n\\n        // The result, in the case of cUSDC, will be 16\\n        precisionScalar = 18 + underlyingDecimals - cTokenDecimals;\\n\\n        chainlinkDecimals = chainLinkAggregator.decimals();\\n    }\\n\\n    function fetchCurrentPrice()\\n        external\\n        view\\n        returns (Decimal.D256 memory)\\n    {\\n        uint256 exchangeRate = cToken.exchangeRateStored(); // 213927934173700 (16 dp)\\n\\n        // Scaled exchange amount\\n        uint256 cTokenAmount = exchangeRate.mul(uint256(10 ** precisionScalar));\\n\\n        // Some result in x decimal places\\n        uint256 priceInUSD = uint256(chainLinkAggregator.latestAnswer());\\n\\n        // Scale price to be expressed in 18 d.p\\n        uint256 scaledPriceInUSD = priceInUSD.mul(uint256(10 ** (18 - chainlinkDecimals)));\\n\\n        // Multiply the two together to get the value of 1 cToken\\n        uint256 result = scaledPriceInUSD.mul(cTokenAmount).div(uint256(10 ** 18));\\n\\n        require(\\n            result > 0,\\n            \\\"CTokenOracle: cannot report a price of 0\\\"\\n        );\\n\\n        return Decimal.D256({\\n            value: result\\n        });\\n\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"./contracts/lib/Decimal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.5.16;\\npragma experimental ABIEncoderV2;\\n\\nimport {SafeMath} from \\\"../lib/SafeMath.sol\\\";\\nimport {Math} from \\\"./Math.sol\\\";\\n\\n/**\\n * @title Decimal\\n *\\n * Library that defines a fixed-point number with 18 decimal places.\\n */\\nlibrary Decimal {\\n    using SafeMath for uint256;\\n\\n    // ============ Constants ============\\n\\n    uint256 constant BASE = 10**18;\\n\\n    // ============ Structs ============\\n\\n    struct D256 {\\n        uint256 value;\\n    }\\n\\n    // ============ Functions ============\\n\\n    function one()\\n        internal\\n        pure\\n        returns (D256 memory)\\n    {\\n        return D256({ value: BASE });\\n    }\\n\\n    function onePlus(\\n        D256 memory d\\n    )\\n        internal\\n        pure\\n        returns (D256 memory)\\n    {\\n        return D256({ value: d.value.add(BASE) });\\n    }\\n\\n    function mul(\\n        uint256 target,\\n        D256 memory d\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return Math.getPartial(target, d.value, BASE);\\n    }\\n\\n    function mul(\\n        D256 memory d1,\\n        D256 memory d2\\n    )\\n        internal\\n        pure\\n        returns (D256 memory)\\n    {\\n        return Decimal.D256({ value: Math.getPartial(d1.value, d2.value, BASE) });\\n    }\\n\\n    function div(\\n        uint256 target,\\n        D256 memory d\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return Math.getPartial(target, BASE, d.value);\\n    }\\n\\n    function add(\\n        D256 memory d,\\n        uint256 amount\\n    )\\n        internal\\n        pure\\n        returns (D256 memory)\\n    {\\n        return D256({ value: d.value.add(amount) });\\n    }\\n\\n    function sub(\\n        D256 memory d,\\n        uint256 amount\\n    )\\n        internal\\n        pure\\n        returns (D256 memory)\\n    {\\n        return D256({ value: d.value.sub(amount) });\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"./contracts/lib/SafeMath.sol\": {\r\n      \"content\": \"\\npragma solidity ^0.5.16;\\n\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        uint256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/lib/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.5.16;\\npragma experimental ABIEncoderV2;\\n\\nimport {SafeMath} from \\\"./SafeMath.sol\\\";\\n\\n/**\\n * @title Math\\n *\\n * Library for non-standard Math functions\\n */\\nlibrary Math {\\n    using SafeMath for uint256;\\n\\n    // ============ Library Functions ============\\n\\n    /*\\n     * Return target * (numerator / denominator).\\n     */\\n    function getPartial(\\n        uint256 target,\\n        uint256 numerator,\\n        uint256 denominator\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return target.mul(numerator).div(denominator);\\n    }\\n\\n    function to128(\\n        uint256 number\\n    )\\n        internal\\n        pure\\n        returns (uint128)\\n    {\\n        uint128 result = uint128(number);\\n        require(\\n            result == number,\\n            \\\"Math: Unsafe cast to uint128\\\"\\n        );\\n        return result;\\n    }\\n\\n    function min(\\n        uint256 a,\\n        uint256 b\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return a < b ? a : b;\\n    }\\n\\n    function max(\\n        uint256 a,\\n        uint256 b\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return a > b ? a : b;\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/oracle/IOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.5.16;\\npragma experimental ABIEncoderV2;\\n\\nimport {Decimal} from \\\"../lib/Decimal.sol\\\";\\n\\ninterface IOracle {\\n\\n    function fetchCurrentPrice()\\n        external\\n        view\\n        returns (Decimal.D256 memory);\\n\\n}\"\r\n    },\r\n    \"./contracts/oracle/ICToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.5.16;\\npragma experimental ABIEncoderV2;\\n\\ninterface ICToken {\\n\\n    function exchangeRateStored()\\n        external\\n        view\\n        returns (uint);\\n\\n    function underlying()\\n        external\\n        view\\n        returns (address);\\n\\n    function decimals()\\n        external\\n        view\\n        returns (uint8);\\n\\n}\\n\"\r\n    },\r\n    \"./contracts/oracle/IChainLinkAggregator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.5.16;\\n\\ninterface IChainLinkAggregator {\\n\\n    function decimals()\\n        external\\n        view\\n        returns (uint8);\\n\\n    function latestAnswer()\\n        external\\n        view\\n        returns (int256);\\n\\n    function latestTimestamp()\\n        external\\n        view\\n        returns (uint256);\\n\\n    function latestRound()\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getAnswer(uint256 roundId)\\n        external\\n        view\\n        returns (int256);\\n\\n    function getTimestamp(uint256 roundId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    event AnswerUpdated(\\n        int256 indexed current,\\n        uint256 indexed roundId,\\n        uint256 timestamp\\n    );\\n\\n    event NewRound(\\n        uint256 indexed roundId,\\n        address indexed startedBy,\\n        uint256 startedAt\\n    );\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_chainLinkAggregator\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[],\"name\":\"cToken\",\"outputs\":[{\"internalType\":\"contract ICToken\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"chainLinkAggregator\",\"outputs\":[{\"internalType\":\"contract IChainLinkAggregator\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"chainlinkDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fetchCurrentPrice\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"precisionScalar\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"CTokenOracle","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000039aa39c021dfbae8fac545936693ac917d5e7563000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}