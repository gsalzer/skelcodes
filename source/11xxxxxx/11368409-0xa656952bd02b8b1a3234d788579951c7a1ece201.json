{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/joeysantoro/Desktop/Ethereum/Fractal/contracts/StakingGetter.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"synthetix/contracts/interfaces/IFeePool.sol\\\";\\nimport \\\"synthetix/contracts/interfaces/IRewardEscrow.sol\\\";\\nimport \\\"synthetix/contracts/interfaces/ISynthetix.sol\\\";\\nimport \\\"synthetix/contracts/interfaces/IStakingRewards.sol\\\";\\n\\ninterface ISNX is ISynthetix {\\n    function balanceOf(address account) external view returns(uint);\\n}\\n\\ncontract StakingGetter {\\n\\n    struct StakedTokenResult {\\n        address rewardContract;\\n        uint stakedBalance;\\n        uint earnedAmount;\\n    }\\n    struct RewardResult {\\n        uint susdFeesAvailable;\\n        uint snxRewardsAvailable;\\n        uint snxBalance;\\n        uint escrowBalance;\\n        uint collateral;\\n        uint transferableSynthetix;\\n        uint collateralizationRatio;\\n        StakedTokenResult[] stakedTokenResults;\\n    }\\n\\n    IFeePool private constant FEE_POOL = IFeePool(0x013D16CB1Bd493bBB89D45b43254842FadC169C8);\\n    ISNX private constant SYNTHETIX = ISNX(0xf87A0587Fe48Ca05dd68a514Ce387C0d4d3AE31C);\\n    IRewardEscrow private constant REWARD_ESCROW = IRewardEscrow(0xb671F2210B1F6621A2607EA63E6B2DC3e2464d1F);\\n\\n    constructor () public {}\\n\\n    function getAllStakingRewards(address[] memory wallets, address[] memory rewards) public view returns (RewardResult[] memory results) {\\n        results = new RewardResult[](wallets.length);\\n        for (uint i = 0; i < wallets.length; i++) {\\n            results[i] = getRewardResult(wallets[i], rewards);\\n        }\\n        return results;\\n    }\\n\\n    function getRewardResult(address wallet, address[] memory rewards) public view returns (RewardResult memory result) {\\n        (uint susdFeesAvailable, uint snxRewardsAvailable) = FEE_POOL.feesAvailable(wallet);\\n        uint snxBalance = SYNTHETIX.balanceOf(wallet);\\n        uint escrowBalance = REWARD_ESCROW.totalEscrowedAccountBalance(wallet);\\n        uint collateral = SYNTHETIX.collateral(wallet);\\n        uint transferableSynthetix = SYNTHETIX.transferableSynthetix(wallet);\\n        uint collateralizationRatio = SYNTHETIX.collateralisationRatio(wallet);\\n        StakedTokenResult[] memory stakedTokenResults = getStakedTokenResults(wallet, rewards);\\n        return RewardResult(\\n            susdFeesAvailable,\\n            snxRewardsAvailable,\\n            snxBalance,\\n            escrowBalance,\\n            collateral,\\n            transferableSynthetix,\\n            collateralizationRatio,\\n            stakedTokenResults\\n        );\\n    }\\n\\n    function getStakedTokenResults(address wallet, address[] memory rewards) public view returns (StakedTokenResult[] memory stakedTokenResults) {\\n        stakedTokenResults = new StakedTokenResult[](rewards.length);\\n        for (uint i = 0; i < rewards.length; i++) {\\n            IStakingRewards rewardContract = IStakingRewards(rewards[i]);\\n            uint stakedBalance = rewardContract.balanceOf(wallet);\\n            uint earnedAmount = rewardContract.earned(wallet);\\n            stakedTokenResults[i] = StakedTokenResult(address(rewardContract), stakedBalance, earnedAmount);\\n        }\\n        return stakedTokenResults;\\n    }\\n}\"\r\n    },\r\n    \"synthetix/contracts/interfaces/IFeePool.sol\": {\r\n      \"content\": \"pragma solidity >=0.4.24;\\n\\n\\n// https://docs.synthetix.io/contracts/source/interfaces/ifeepool\\ninterface IFeePool {\\n    // Views\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function FEE_ADDRESS() external view returns (address);\\n\\n    function feesAvailable(address account) external view returns (uint, uint);\\n\\n    function feePeriodDuration() external view returns (uint);\\n\\n    function isFeesClaimable(address account) external view returns (bool);\\n\\n    function targetThreshold() external view returns (uint);\\n\\n    function totalFeesAvailable() external view returns (uint);\\n\\n    function totalRewardsAvailable() external view returns (uint);\\n\\n    // Mutative Functions\\n    function claimFees() external returns (bool);\\n\\n    function claimOnBehalf(address claimingForAddress) external returns (bool);\\n\\n    function closeCurrentFeePeriod() external;\\n\\n    // Restricted: used internally to Synthetix\\n    function appendAccountIssuanceRecord(\\n        address account,\\n        uint lockedAmount,\\n        uint debtEntryIndex\\n    ) external;\\n\\n    function recordFeePaid(uint sUSDAmount) external;\\n\\n    function setRewardsToDistribute(uint amount) external;\\n}\\n\"\r\n    },\r\n    \"synthetix/contracts/interfaces/IRewardEscrow.sol\": {\r\n      \"content\": \"pragma solidity >=0.4.24;\\n\\n\\n// https://docs.synthetix.io/contracts/source/interfaces/irewardescrow\\ninterface IRewardEscrow {\\n    // Views\\n    function balanceOf(address account) external view returns (uint);\\n\\n    function numVestingEntries(address account) external view returns (uint);\\n\\n    function totalEscrowedAccountBalance(address account) external view returns (uint);\\n\\n    function totalVestedAccountBalance(address account) external view returns (uint);\\n\\n    // Mutative functions\\n    function appendVestingEntry(address account, uint quantity) external;\\n\\n    function vest() external;\\n}\\n\"\r\n    },\r\n    \"synthetix/contracts/interfaces/IStakingRewards.sol\": {\r\n      \"content\": \"pragma solidity >=0.4.24;\\n\\n\\n// https://docs.synthetix.io/contracts/source/interfaces/istakingrewards\\ninterface IStakingRewards {\\n    // Views\\n    function lastTimeRewardApplicable() external view returns (uint256);\\n\\n    function rewardPerToken() external view returns (uint256);\\n\\n    function earned(address account) external view returns (uint256);\\n\\n    function getRewardForDuration() external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    // Mutative\\n\\n    function stake(uint256 amount) external;\\n\\n    function withdraw(uint256 amount) external;\\n\\n    function getReward() external;\\n\\n    function exit() external;\\n}\\n\"\r\n    },\r\n    \"synthetix/contracts/interfaces/ISynth.sol\": {\r\n      \"content\": \"pragma solidity >=0.4.24;\\n\\n\\n// https://docs.synthetix.io/contracts/source/interfaces/isynth\\ninterface ISynth {\\n    // Views\\n    function currencyKey() external view returns (bytes32);\\n\\n    function transferableSynths(address account) external view returns (uint);\\n\\n    // Mutative functions\\n    function transferAndSettle(address to, uint value) external returns (bool);\\n\\n    function transferFromAndSettle(\\n        address from,\\n        address to,\\n        uint value\\n    ) external returns (bool);\\n\\n    // Restricted: used internally to Synthetix\\n    function burn(address account, uint amount) external;\\n\\n    function issue(address account, uint amount) external;\\n}\\n\"\r\n    },\r\n    \"synthetix/contracts/interfaces/ISynthetix.sol\": {\r\n      \"content\": \"pragma solidity >=0.4.24;\\n\\nimport \\\"./ISynth.sol\\\";\\nimport \\\"./IVirtualSynth.sol\\\";\\n\\n\\n// https://docs.synthetix.io/contracts/source/interfaces/isynthetix\\ninterface ISynthetix {\\n    // Views\\n    function anySynthOrSNXRateIsInvalid() external view returns (bool anyRateInvalid);\\n\\n    function availableCurrencyKeys() external view returns (bytes32[] memory);\\n\\n    function availableSynthCount() external view returns (uint);\\n\\n    function availableSynths(uint index) external view returns (ISynth);\\n\\n    function collateral(address account) external view returns (uint);\\n\\n    function collateralisationRatio(address issuer) external view returns (uint);\\n\\n    function debtBalanceOf(address issuer, bytes32 currencyKey) external view returns (uint);\\n\\n    function isWaitingPeriod(bytes32 currencyKey) external view returns (bool);\\n\\n    function maxIssuableSynths(address issuer) external view returns (uint maxIssuable);\\n\\n    function remainingIssuableSynths(address issuer)\\n        external\\n        view\\n        returns (\\n            uint maxIssuable,\\n            uint alreadyIssued,\\n            uint totalSystemDebt\\n        );\\n\\n    function synths(bytes32 currencyKey) external view returns (ISynth);\\n\\n    function synthsByAddress(address synthAddress) external view returns (bytes32);\\n\\n    function totalIssuedSynths(bytes32 currencyKey) external view returns (uint);\\n\\n    function totalIssuedSynthsExcludeEtherCollateral(bytes32 currencyKey) external view returns (uint);\\n\\n    function transferableSynthetix(address account) external view returns (uint transferable);\\n\\n    // Mutative Functions\\n    function burnSynths(uint amount) external;\\n\\n    function burnSynthsOnBehalf(address burnForAddress, uint amount) external;\\n\\n    function burnSynthsToTarget() external;\\n\\n    function burnSynthsToTargetOnBehalf(address burnForAddress) external;\\n\\n    function exchange(\\n        bytes32 sourceCurrencyKey,\\n        uint sourceAmount,\\n        bytes32 destinationCurrencyKey\\n    ) external returns (uint amountReceived);\\n\\n    function exchangeOnBehalf(\\n        address exchangeForAddress,\\n        bytes32 sourceCurrencyKey,\\n        uint sourceAmount,\\n        bytes32 destinationCurrencyKey\\n    ) external returns (uint amountReceived);\\n\\n    function exchangeWithTracking(\\n        bytes32 sourceCurrencyKey,\\n        uint sourceAmount,\\n        bytes32 destinationCurrencyKey,\\n        address originator,\\n        bytes32 trackingCode\\n    ) external returns (uint amountReceived);\\n\\n    function exchangeOnBehalfWithTracking(\\n        address exchangeForAddress,\\n        bytes32 sourceCurrencyKey,\\n        uint sourceAmount,\\n        bytes32 destinationCurrencyKey,\\n        address originator,\\n        bytes32 trackingCode\\n    ) external returns (uint amountReceived);\\n\\n    function exchangeWithVirtual(\\n        bytes32 sourceCurrencyKey,\\n        uint sourceAmount,\\n        bytes32 destinationCurrencyKey,\\n        bytes32 trackingCode\\n    ) external returns (uint amountReceived, IVirtualSynth vSynth);\\n\\n    function issueMaxSynths() external;\\n\\n    function issueMaxSynthsOnBehalf(address issueForAddress) external;\\n\\n    function issueSynths(uint amount) external;\\n\\n    function issueSynthsOnBehalf(address issueForAddress, uint amount) external;\\n\\n    function mint() external returns (bool);\\n\\n    function settle(bytes32 currencyKey)\\n        external\\n        returns (\\n            uint reclaimed,\\n            uint refunded,\\n            uint numEntries\\n        );\\n\\n    function liquidateDelinquentAccount(address account, uint susdAmount) external returns (bool);\\n\\n    // Restricted Functions\\n\\n    function mintSecondary(address account, uint amount) external;\\n\\n    function mintSecondaryRewards(uint amount) external;\\n\\n    function burnSecondary(address account, uint amount) external;\\n}\\n\"\r\n    },\r\n    \"synthetix/contracts/interfaces/IVirtualSynth.sol\": {\r\n      \"content\": \"pragma solidity >=0.4.24;\\n\\nimport \\\"./ISynth.sol\\\";\\n\\n\\ninterface IVirtualSynth {\\n    // Views\\n    function balanceOfUnderlying(address account) external view returns (uint);\\n\\n    function rate() external view returns (uint);\\n\\n    function readyToSettle() external view returns (bool);\\n\\n    function secsLeftInWaitingPeriod() external view returns (uint);\\n\\n    function settled() external view returns (bool);\\n\\n    function synth() external view returns (ISynth);\\n\\n    // Mutative functions\\n    function settle(address account) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {\r\n      \"\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"wallets\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"rewards\",\"type\":\"address[]\"}],\"name\":\"getAllStakingRewards\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"susdFeesAvailable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"snxRewardsAvailable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"snxBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"escrowBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transferableSynthetix\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralizationRatio\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"rewardContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakedBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earnedAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct StakingGetter.StakedTokenResult[]\",\"name\":\"stakedTokenResults\",\"type\":\"tuple[]\"}],\"internalType\":\"struct StakingGetter.RewardResult[]\",\"name\":\"results\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"rewards\",\"type\":\"address[]\"}],\"name\":\"getRewardResult\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"susdFeesAvailable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"snxRewardsAvailable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"snxBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"escrowBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transferableSynthetix\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralizationRatio\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"rewardContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakedBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earnedAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct StakingGetter.StakedTokenResult[]\",\"name\":\"stakedTokenResults\",\"type\":\"tuple[]\"}],\"internalType\":\"struct StakingGetter.RewardResult\",\"name\":\"result\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"rewards\",\"type\":\"address[]\"}],\"name\":\"getStakedTokenResults\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"rewardContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakedBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earnedAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct StakingGetter.StakedTokenResult[]\",\"name\":\"stakedTokenResults\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"StakingGetter","CompilerVersion":"v0.6.2+commit.bacdbe57","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}