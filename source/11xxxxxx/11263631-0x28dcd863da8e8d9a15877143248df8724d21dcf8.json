{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * \r\n * ░██████╗░███████╗████████╗░░░██╗███╗░░██╗░░░\r\n * ██╔════╝░██╔════╝╚══██╔══╝░░░██║████╗░██║░░░\r\n * ██║░░██╗░█████╗░░░░░██║░░░░░░██║██╔██╗██║░░░\r\n * ██║░░╚██╗██╔══╝░░░░░██║░░░░░░██║██║╚████║░░░\r\n * ╚██████╔╝███████╗░░░██║░░░██╗██║██║░╚███║██╗\r\n * ░╚═════╝░╚══════╝░░░╚═╝░░░╚═╝╚═╝╚═╝░░╚══╝╚═╝\r\n * \r\n * ░██████╗░███████╗████████╗░░░░█████╗░██╗░░░██╗████████╗░░░\r\n * ██╔════╝░██╔════╝╚══██╔══╝░░░██╔══██╗██║░░░██║╚══██╔══╝░░░\r\n * ██║░░██╗░█████╗░░░░░██║░░░░░░██║░░██║██║░░░██║░░░██║░░░░░░\r\n * ██║░░╚██╗██╔══╝░░░░░██║░░░░░░██║░░██║██║░░░██║░░░██║░░░░░░\r\n * ╚██████╔╝███████╗░░░██║░░░██╗╚█████╔╝╚██████╔╝░░░██║░░░██╗\r\n * ░╚═════╝░╚══════╝░░░╚═╝░░░╚═╝░╚════╝░░╚═════╝░░░░╚═╝░░░╚═╝\r\n * \r\n * Mechanics:\r\n * First one to GET IN is the first one to GET out\r\n * Either be early / shill to be \"early\"\r\n * \r\n * TG: https://t.me/gigotoken\r\n * \r\n * A word of caution. These are all degen tokens so please do your own research before jumping in.\r\n * Understand risk vs reward. Weigh them both and if reward is better, come join.\r\n * \r\n * As for how I do things, I operate on a solo mission. No marketing fund so I don't entertain marketers / shillers / etc\r\n * Unless explicitly stated, there won't be any presale. Just straight up listing on uniswap and unicrypt lock.\r\n * \r\n * If you want to follow when I release a new degen token you can do so via this TG: https://t.me/degendeployers\r\n * \r\n * Now bug off.\r\n */\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n// IERC20 Interface\r\ninterface IERC20 \r\n{\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// SafeMath Library\r\nlibrary SafeMath \r\n{\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) \r\n    {\r\n        if (a == 0) \r\n        {\r\n          return 0;\r\n        }\r\n        \r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) \r\n    {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) \r\n    {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) \r\n    {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n    \r\n    function ceil(uint256 a, uint256 m) internal pure returns (uint256) \r\n    {\r\n        uint256 c = add(a,m);\r\n        uint256 d = sub(c,1);\r\n        return mul(div(d,m),m);\r\n    }\r\n}\r\n\r\n// ERC20Detailed\r\ncontract ERC20Detailed is IERC20 \r\n{\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    \r\n    constructor(string memory name, string memory symbol, uint8 decimals) public \r\n    {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n    \r\n    function name() public view returns(string memory)\r\n    {\r\n        return _name;\r\n    }\r\n    \r\n    function symbol() public view returns(string memory)\r\n    {\r\n        return _symbol;\r\n    }\r\n    \r\n    function decimals() public view returns(uint8) \r\n    {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\n// GIGOToken\r\ncontract GIGOToken is ERC20Detailed {\r\n\r\n    using SafeMath for uint256;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n    \r\n    address deployerWallet = 0x9238450d03098C65e6e5F19B5b3A663dA2eB0843;\r\n    address uniswapWallet = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    \r\n    string constant tokenName = \"https://t.me/gigotoken\";\r\n    string constant tokenSymbol = \"GIGO\";\r\n    uint256 public startDate;\r\n    uint8  constant tokenDecimals = 18;\r\n    uint256 _totalSupply = 286 * (10 ** 18); \r\n    uint256 public basePercent = 300;\r\n    \r\n    constructor() public payable ERC20Detailed(tokenName, tokenSymbol, tokenDecimals) \r\n    {\r\n        _mint(msg.sender, _totalSupply);\r\n    }\r\n    \r\n    function totalSupply() public view returns (uint256) \r\n    {\r\n        return _totalSupply;\r\n    }\r\n    \r\n    function balanceOf(address owner) public view returns (uint256) \r\n    {\r\n        return _balances[owner];\r\n    }\r\n    \r\n    function allowance(address owner, address spender) public view returns (uint256) \r\n    {\r\n        return _allowed[owner][spender];\r\n    }\r\n    \r\n    // Burn 30% \t\r\n    function findOnePercent(uint256 value) public view returns (uint256)  \r\n    {\r\n        uint256 roundValue = value.ceil(basePercent);\r\n        uint256 onePercent = roundValue.mul(basePercent).div(1000);\r\n        return onePercent;\r\n    }\r\n    \r\n    \r\n    function transfer(address to, uint256 value) public returns (bool) \r\n    {\r\n        // Check that value being sent is less than or equal to what sender's balance is\r\n        require(value <= _balances[msg.sender]);\r\n        // Check that it's not being sent to burn address\r\n        require(to != address(0)); \r\n        \r\n        // If Sender is Deployer (No Fees)\r\n        if (msg.sender == deployerWallet) \r\n        {\r\n            uint256 tokensToTransfer = value;\r\n        \r\n            _balances[msg.sender] = _balances[msg.sender].sub(value);\r\n            _balances[to] = _balances[to].add(tokensToTransfer);\r\n        \r\n            emit Transfer(msg.sender, to, tokensToTransfer);\r\n            return true;\r\n        } \r\n    \r\n        else \r\n        {\r\n            uint256 tokensToBurn = findOnePercent(value);\r\n            uint256 tokensToTransfer = value.sub(tokensToBurn);\r\n        \r\n            _balances[msg.sender] = _balances[msg.sender].sub(value);\r\n            _balances[to] = _balances[to].add(tokensToTransfer);\r\n        \r\n            _totalSupply = _totalSupply.sub(tokensToBurn);\r\n        \r\n            emit Transfer(msg.sender, to, tokensToTransfer);\r\n            emit Transfer(msg.sender, address(0), tokensToBurn);\r\n            return true;\r\n        }\r\n    }\r\n    \r\n    function multiTransfer(address[] memory receivers, uint256[] memory amounts) public\r\n    {\r\n        for (uint256 i = 0; i < receivers.length; i++) \r\n        {\r\n          transfer(receivers[i], amounts[i]);\r\n        }\r\n    }\r\n    \r\n    function approve(address spender, uint256 value) public returns (bool) \r\n    {\r\n        require(spender != address(0));\r\n        _allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) \r\n    {\r\n        require(value <= _balances[from]);\r\n        require(value <= _allowed[from][msg.sender]);\r\n        require(to != address(0));\r\n        \r\n        // If Sender is deployer (No Fees)\r\n        if (msg.sender == deployerWallet) \r\n        {\r\n            _balances[from] = _balances[from].sub(value);\r\n        \r\n            uint256 tokensToTransfer = value;\r\n            _balances[to] = _balances[to].add(tokensToTransfer);\r\n        \r\n            _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n        \r\n            emit Transfer(from, to, tokensToTransfer);\r\n            return true;\r\n        }\r\n        \r\n        else \r\n        {\r\n            _balances[from] = _balances[from].sub(value);\r\n        \r\n            uint256 tokensToBurn = findOnePercent(value);\r\n            uint256 tokensToTransfer = value.sub(tokensToBurn);\r\n        \r\n            _balances[to] = _balances[to].add(tokensToTransfer);\r\n            _totalSupply = _totalSupply.sub(tokensToBurn);\r\n        \r\n            _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n        \r\n            emit Transfer(from, to, tokensToTransfer);\r\n            emit Transfer(from, address(0), tokensToBurn);\r\n        \r\n            return true;\r\n        }\r\n}\r\n    \r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) \r\n    {\r\n        require(spender != address(0));\r\n        _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n    \r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) \r\n    {\r\n        require(spender != address(0));\r\n        _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n    \r\n    function _mint(address account, uint256 amount) internal \r\n    {\r\n        require(amount != 0);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n    \r\n    function burn(uint256 amount) external \r\n    {\r\n    _burn(msg.sender, amount);\r\n    }\r\n    \r\n    function _burn(address account, uint256 amount) internal\r\n    {\r\n            require(amount != 0);\r\n            require(amount <= _balances[account]);\r\n            _totalSupply = _totalSupply.sub(amount);\r\n            _balances[account] = _balances[account].sub(amount);\r\n            emit Transfer(account, address(0), amount);\r\n    }\r\n    \r\n    function burnFrom(address account, uint256 amount) external \r\n    {\r\n        require(amount <= _allowed[account][msg.sender]);\r\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(amount);\r\n        _burn(account, amount);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"basePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"findOnePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"multiTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"GIGOToken","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://bf411c044a23716b880fcfda4a5c05998590f545eae9e098ba78816c94b12e6f"}]}