{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-11-05\r\n*/\r\n\r\n/*\r\n *\r\n ██████╗  ██████╗ ██╗     ██████╗     ██╗  ██╗ ██████╗ ███████╗     ██████╗ ███╗   ██╗███████╗\r\n██╔════╝ ██╔═══██╗██║     ██╔══██╗    ██║  ██║██╔═══██╗██╔════╝    ██╔═══██╗████╗  ██║██╔════╝\r\n██║  ███╗██║   ██║██║     ██║  ██║    ███████║██║   ██║█████╗      ██║   ██║██╔██╗ ██║█████╗  \r\n██║   ██║██║   ██║██║     ██║  ██║    ██╔══██║██║   ██║██╔══╝      ██║   ██║██║╚██╗██║██╔══╝  \r\n╚██████╔╝╚██████╔╝███████╗██████╔╝    ██║  ██║╚██████╔╝███████╗    ╚██████╔╝██║ ╚████║███████╗\r\n ╚═════╝  ╚═════╝ ╚══════╝╚═════╝     ╚═╝  ╚═╝ ╚═════╝ ╚══════╝     ╚═════╝ ╚═╝  ╚═══╝╚══════╝                                                                                              \r\n\r\n               Tribute to Satoshi Nakamoto in 2008 and Vitalik Buterin in 2011.\r\n                                - Decentralized believer, PROX.\r\n *\r\n */\r\n\r\npragma solidity ^0.6.0;\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 weiValue,\r\n        string memory errorMessage\r\n    ) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) =\r\n            target.call{value: weiValue}(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transfer.selector, to, value)\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, value)\r\n        );\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance =\r\n            token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance =\r\n            token.allowance(address(this), spender).sub(\r\n                value,\r\n                \"SafeERC20: decreased allowance below zero\"\r\n            );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata =\r\n            address(token).functionCall(\r\n                data,\r\n                \"SafeERC20: low-level call failed\"\r\n            );\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(\r\n                abi.decode(returndata, (bool)),\r\n                \"SafeERC20: ERC20 operation did not succeed\"\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract LPTokenWrapper {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    IERC20 public lp = IERC20(0xA56Ed2632E443Db5f93e73C89df399a081408Cc4);\r\n\r\n    uint256 private _totalSupply;\r\n    mapping(address => uint256) private _balances;\r\n\r\n    constructor(address _lp) public {\r\n        lp = IERC20(_lp);\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function _stake(uint256 amount) internal {\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[msg.sender] = _balances[msg.sender].add(amount);\r\n        lp.safeTransferFrom(msg.sender, address(this), amount);\r\n    }\r\n\r\n    function _withdraw(uint256 amount) internal {\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        _balances[msg.sender] = _balances[msg.sender].sub(amount);\r\n        lp.safeTransfer(msg.sender, amount);\r\n    }\r\n}\r\n\r\ncontract StakingPool is LPTokenWrapper, Ownable {\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    struct UserInfo {\r\n        uint256 poolId;\r\n        uint256 stakingTime;\r\n        uint256 lastRewardIndicator;\r\n        uint256 pendingReward;\r\n    }\r\n\r\n    struct PoolInfo {\r\n        address owner;\r\n        address beneficiary;\r\n        uint256 announceTime;\r\n        uint256 announceIndicator;\r\n        uint256 amount; // How many tokens staked in the pool\r\n        uint256 profit;\r\n    }\r\n\r\n    enum PoolAnnounceStatusCode {\r\n        OK,\r\n        WRONG_PID,\r\n        POOL_HAS_OWNER,\r\n        NEED_MORE_DEPOSIT,\r\n        USER_IN_ANOTHER_POOL\r\n    }\r\n\r\n    IERC20 public rewardToken =\r\n        IERC20(0xA56Ed2632E443Db5f93e73C89df399a081408Cc4);\r\n\r\n    uint256 public constant SECONDS_PER_DAY = 1 days;\r\n\r\n    uint256 public constant REWARD_DURATION = 7 * SECONDS_PER_DAY;\r\n    uint256 public constant MIN_STAKE_DURATION = 1 * SECONDS_PER_DAY;\r\n\r\n    // pool related constant\r\n    uint256 public constant MAX_POOL_NUMBER = 108;\r\n    uint256 public constant MIN_POOL_ANNOUNCE_AMOUNT = 50 * 1e18;\r\n    uint256 public constant MIN_POOL_DEPOSIT_AMOUNT = 100 * 1e18;\r\n    uint256 public constant MIN_POOL_ANNOUNCE_DURATION = 3 * SECONDS_PER_DAY;\r\n\r\n    PoolInfo[] private poolInfo;\r\n    mapping(address => UserInfo) public userInfo;\r\n\r\n    uint256 public periodFinish;\r\n    uint256 public rewardTimeProgress = 0;\r\n    uint256 public lastRewardUpdateTime = 0;\r\n\r\n    uint256 public rewardRatePerDay = 100;\r\n    uint256 public constant REWARD_RATE_BASE = 10000;\r\n\r\n    address public dev;\r\n    uint256 public devAmout;\r\n\r\n    address public treasury;\r\n    uint256 public treasuryAmount;\r\n\r\n    bool public breaker = false;\r\n    mapping(address => bool) public whiteList;\r\n\r\n    /* ========== EVENTS ========== */\r\n\r\n    event Deposited(address indexed user, uint256 amount, uint256 pid);\r\n    event Withdrawn(address indexed user, uint256 amount, uint256 pid);\r\n    event RewardPaid(address indexed user, uint256 reward);\r\n    event RewardPaidToOwner(address indexed owner, uint256 reward);\r\n    event RewardsDurationUpdated(uint256 newDuration);\r\n    event Recovered(address indexed token, uint256 amount);\r\n    event Announced(address indexed owner, uint256 pid);\r\n    event Renounced(address indexed owner, uint256 pid);\r\n    event BeneficiaryTransferred(\r\n        address indexed previousBeneficiary,\r\n        address indexed newBeneficiary,\r\n        uint256 pid\r\n    );\r\n    event EmergencyWithdraw(address indexed user, uint256 amount);\r\n\r\n    constructor(address token) public LPTokenWrapper(token) {\r\n        rewardToken = IERC20(token);\r\n        treasury = owner();\r\n        dev = owner();\r\n    }\r\n\r\n    function createPool(uint256 count) external onlyOwner {\r\n        require(\r\n            poolInfo.length.add(count) <= MAX_POOL_NUMBER,\r\n            \"too much pools\"\r\n        );\r\n        for (uint256 i = 0; i < count; i++) {\r\n            poolInfo.push(\r\n                PoolInfo({\r\n                    owner: address(0),\r\n                    beneficiary: address(0),\r\n                    announceTime: 0,\r\n                    announceIndicator: 0,\r\n                    amount: 0,\r\n                    profit: 0\r\n                })\r\n            );\r\n        }\r\n    }\r\n\r\n    function notifyRewardAmount() external onlyOwner updateReward(address(0)) {\r\n        require(currentTime() >= periodFinish, \"not finish\");\r\n        lastRewardUpdateTime = currentTime();\r\n        periodFinish = currentTime().add(REWARD_DURATION);\r\n        emit RewardsDurationUpdated(periodFinish);\r\n    }\r\n\r\n    modifier updateReward(address account) {\r\n        rewardTimeProgress = calcRewardTimeProgress();\r\n        lastRewardUpdateTime = lastTimeRewardApplicable();\r\n        if (account != address(0)) {\r\n            UserInfo storage user = userInfo[account];\r\n            user.pendingReward = _earned(account, user.lastRewardIndicator);\r\n            user.lastRewardIndicator = rewardTimeProgress;\r\n        }\r\n        _;\r\n    }\r\n\r\n    function calcRewardTimeProgress() public view returns (uint256) {\r\n        return\r\n            rewardTimeProgress.add(\r\n                lastTimeRewardApplicable().sub(lastRewardUpdateTime)\r\n            );\r\n    }\r\n\r\n    function lastTimeRewardApplicable() public view returns (uint256) {\r\n        return Math.min(block.timestamp, periodFinish);\r\n    }\r\n\r\n    function getRewardV2() public updateReward(msg.sender) {\r\n        UserInfo storage user = userInfo[msg.sender];\r\n        uint256 userEarned = _earned(msg.sender, user.lastRewardIndicator);\r\n\r\n        if (userEarned == 0) {\r\n            return;\r\n        }\r\n\r\n        // clear pending reward before transfer\r\n        user.pendingReward = 0;\r\n\r\n        // user reward\r\n        uint256 userClaimable = userEarned.mul(80).div(100);\r\n        if (currentTime() < user.stakingTime + MIN_STAKE_DURATION) {\r\n            userClaimable = userClaimable.mul(50).div(100);\r\n            treasuryAmount = treasuryAmount.add(userClaimable);\r\n        }\r\n        safeRewardTransfer(msg.sender, userClaimable);\r\n        emit RewardPaid(msg.sender, userClaimable);\r\n\r\n        // pool reward\r\n        uint256 poolEarned = 0;\r\n        PoolInfo storage pool = poolInfo[user.poolId];\r\n\r\n        if (\r\n            pool.owner != address(0) && pool.amount >= MIN_POOL_DEPOSIT_AMOUNT\r\n        ) {\r\n            poolEarned = _earned(msg.sender, pool.announceIndicator);\r\n            poolEarned = Math.min(userEarned, poolEarned);\r\n            uint256 poolProfit = poolEarned.mul(20).div(100);\r\n\r\n            address poolProfitPaidAddress = pool.beneficiary;\r\n            pool.profit = pool.profit.add(poolProfit);\r\n            safeRewardTransfer(poolProfitPaidAddress, poolProfit);\r\n\r\n            emit RewardPaidToOwner(poolProfitPaidAddress, poolProfit);\r\n        }\r\n\r\n        // treasury profit\r\n        if (userEarned > poolEarned) {\r\n            uint256 devProfit = userEarned.sub(poolEarned).mul(20).div(100);\r\n            devAmout = devAmout.add(devProfit);\r\n        }\r\n    }\r\n\r\n    function deposit(uint256 pid, uint256 amount)\r\n        external\r\n        updateReward(msg.sender)\r\n    {\r\n        require(amount > 0, \"Cannot deposit 0\");\r\n        require(pid < poolInfo.length, \"Invalid pool id\");\r\n\r\n        UserInfo storage user = userInfo[msg.sender];\r\n\r\n        if (balanceOf(msg.sender) > 0) {\r\n            require(pid == user.poolId, \"Can deposit in only one pool\");\r\n        }\r\n\r\n        super._stake(amount);\r\n\r\n        user.stakingTime = currentTime();\r\n        user.poolId = pid;\r\n\r\n        PoolInfo storage pool = poolInfo[pid];\r\n        pool.amount = pool.amount.add(amount);\r\n\r\n        emit Deposited(msg.sender, amount, pid);\r\n    }\r\n\r\n    function withdraw(uint256 amount) public updateReward(msg.sender) {\r\n        require(amount > 0, \"Cannot withdraw 0\");\r\n        require(balanceOf(msg.sender) >= amount, \"Not enough\");\r\n\r\n        UserInfo memory user = userInfo[msg.sender];\r\n        require(\r\n            currentTime() > user.stakingTime + MIN_STAKE_DURATION,\r\n            \"Cannot withdraw before minimal staking duration\"\r\n        );\r\n\r\n        PoolInfo storage pool = poolInfo[user.poolId];\r\n        if (pool.owner == msg.sender) {\r\n            require(\r\n                balanceOf(msg.sender) >= amount.add(MIN_POOL_ANNOUNCE_AMOUNT),\r\n                \"Cannot withdraw\"\r\n            );\r\n        }\r\n\r\n        super._withdraw(amount);\r\n\r\n        pool.amount = pool.amount.sub(amount);\r\n\r\n        emit Withdrawn(msg.sender, amount, user.poolId);\r\n    }\r\n\r\n    function exit() external {\r\n        withdraw(balanceOf(msg.sender));\r\n        getRewardV2();\r\n    }\r\n\r\n    function earned(address account)\r\n        external\r\n        view\r\n        returns (uint256 userClaimable, uint256 fullRewardTime)\r\n    {\r\n        UserInfo memory user = userInfo[account];\r\n        uint256 userEarned = _earned(account, user.lastRewardIndicator);\r\n        userClaimable = userEarned.mul(80).div(100);\r\n        fullRewardTime = user.stakingTime + MIN_STAKE_DURATION;\r\n    }\r\n\r\n    function announce(uint256 pid) external {\r\n        require(\r\n            !address(msg.sender).isContract() || whiteList[msg.sender],\r\n            \"Not welcome\"\r\n        );\r\n\r\n        require(\r\n            balanceOf(msg.sender) >= MIN_POOL_ANNOUNCE_AMOUNT,\r\n            \"depoist more to announce\"\r\n        );\r\n\r\n        PoolAnnounceStatusCode status = checkAnnounceable(pid, msg.sender);\r\n        require(status == PoolAnnounceStatusCode.OK, \"Check Status Code\");\r\n\r\n        PoolInfo storage pool = poolInfo[pid];\r\n        pool.owner = msg.sender;\r\n        pool.beneficiary = msg.sender;\r\n        pool.announceTime = currentTime();\r\n        pool.announceIndicator = calcRewardTimeProgress();\r\n        pool.profit = 0;\r\n\r\n        emit Announced(msg.sender, pid);\r\n    }\r\n\r\n    function renounce(uint256 pid) external {\r\n        PoolInfo storage pool = poolInfo[pid];\r\n        require(pool.owner == msg.sender, \"Must be owner\");\r\n        require(\r\n            pool.announceTime + MIN_POOL_ANNOUNCE_DURATION < currentTime(),\r\n            \"Cannot renounce now\"\r\n        );\r\n\r\n        pool.owner = address(0);\r\n        pool.beneficiary = address(0);\r\n        pool.announceTime = 0;\r\n\r\n        emit Renounced(msg.sender, pid);\r\n    }\r\n\r\n    function setBeneficiary(uint256 _pid, address _beneficiary) external {\r\n        require(_beneficiary != address(0), \"!_beneficiary\");\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        require(pool.owner == msg.sender, \"Must be owner\");\r\n        address preBeneficiary = pool.beneficiary;\r\n        pool.beneficiary = _beneficiary;\r\n        emit BeneficiaryTransferred(preBeneficiary, pool.beneficiary, _pid);\r\n    }\r\n\r\n    function setTreasury(address _treasury) external onlyOwner {\r\n        require(_treasury != address(0));\r\n        treasury = _treasury;\r\n    }\r\n\r\n    function setDev(address _dev) external onlyOwner {\r\n        require(_dev != address(0));\r\n        dev = _dev;\r\n    }\r\n\r\n    function setBreaker(bool _breaker) external onlyOwner {\r\n        breaker = _breaker;\r\n    }\r\n\r\n    function setWhiteList(address addr, bool status) external onlyOwner {\r\n        require(addr != address(0), \"!addr\");\r\n        whiteList[addr] = status;\r\n    }\r\n\r\n    function setRewardRatePerDay(uint256 rate) external onlyOwner {\r\n        require(currentTime() > periodFinish, \"not finish\");\r\n        require(rewardRatePerDay <= REWARD_RATE_BASE, \"!wrong rate\");\r\n        rewardRatePerDay = rate;\r\n    }\r\n\r\n    // Added to support recovering LP Rewards from other systems such as BAL to be distributed to holders\r\n    function recoverERC20(address tokenAddress, uint256 tokenAmount)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            tokenAddress != address(lp) && tokenAddress != address(rewardToken),\r\n            \"Cannot withdraw the staking or rewards tokens\"\r\n        );\r\n        IERC20(tokenAddress).safeTransfer(owner(), tokenAmount);\r\n        emit Recovered(tokenAddress, tokenAmount);\r\n    }\r\n\r\n    // withdraw extra reward tokens after staking period\r\n    function withdrawAll() external onlyOwner {\r\n        require(currentTime() > periodFinish, \"period not finished\");\r\n        uint256 bal = rewardToken.balanceOf(address(this));\r\n        uint256 amount = bal.sub(totalSupply());\r\n        IERC20(rewardToken).safeTransfer(owner(), amount);\r\n    }\r\n\r\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\r\n    function emergencyWithdraw() external {\r\n        require(breaker, \"!breaker\");\r\n\r\n        UserInfo storage user = userInfo[msg.sender];\r\n        user.pendingReward = 0;\r\n\r\n        uint256 amount = balanceOf(msg.sender);\r\n        super._withdraw(amount);\r\n        emit EmergencyWithdraw(msg.sender, amount);\r\n    }\r\n\r\n    function withdrawDev() external {\r\n        require(_msgSender() == dev || _msgSender() == owner(), \"!dev\");\r\n        if (devAmout > 0) {\r\n            safeRewardTransfer(dev, devAmout);\r\n            devAmout = 0;\r\n        }\r\n    }\r\n\r\n    function withdrawTreasury() external {\r\n        require(\r\n            _msgSender() == treasury || _msgSender() == owner(),\r\n            \"!treasury\"\r\n        );\r\n        if (treasuryAmount > 0) {\r\n            safeRewardTransfer(treasury, treasuryAmount);\r\n            treasuryAmount = 0;\r\n        }\r\n    }\r\n\r\n    function maxWithdrawAmount(address account) public view returns (uint256) {\r\n        uint256 maxAmount = balanceOf(account);\r\n        UserInfo memory user = userInfo[account];\r\n        if (user.stakingTime + MIN_STAKE_DURATION >= currentTime()) {\r\n            return 0;\r\n        }\r\n        PoolInfo memory pool = poolInfo[user.poolId];\r\n        if (pool.owner == account) {\r\n            return maxAmount.sub(MIN_POOL_ANNOUNCE_AMOUNT);\r\n        }\r\n        return maxAmount;\r\n    }\r\n\r\n    function queryPoolInfo(uint256 pid, address account)\r\n        public\r\n        view\r\n        returns (\r\n            bool hasOwner,\r\n            bool isOwner,\r\n            uint256 announceableStatus,\r\n            uint256 totalAmount,\r\n            uint256 announceTime,\r\n            uint256 poolProfit,\r\n            address beneficiary\r\n        )\r\n    {\r\n        PoolInfo memory pool = poolInfo[pid];\r\n        if (pool.owner != address(0)) {\r\n            hasOwner = true;\r\n            if (pool.owner == address(account)) {\r\n                isOwner = true;\r\n            }\r\n        }\r\n        announceableStatus = uint256(checkAnnounceable(pid, account));\r\n        totalAmount = pool.amount;\r\n        if (hasOwner) {\r\n            announceTime = pool.announceTime;\r\n            poolProfit = pool.profit;\r\n        }\r\n        if (isOwner) {\r\n            beneficiary = pool.beneficiary;\r\n        }\r\n    }\r\n\r\n    function poolCount() public view returns (uint256) {\r\n        return uint256(poolInfo.length);\r\n    }\r\n\r\n    function _earned(address account, uint256 indicator)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(calcRewardTimeProgress() >= indicator, \"!indicator\");\r\n        UserInfo memory user = userInfo[account];\r\n        return\r\n            balanceOf(account)\r\n                .mul(calcRewardTimeProgress().sub(indicator))\r\n                .mul(rewardRatePerDay)\r\n                .div(REWARD_RATE_BASE)\r\n                .div(SECONDS_PER_DAY)\r\n                .add(user.pendingReward);\r\n    }\r\n\r\n    function safeRewardTransfer(address _to, uint256 _amount) internal {\r\n        uint256 bal = rewardToken.balanceOf(address(this));\r\n        require(_amount.add(totalSupply()) <= bal, \"out of totalSupply\");\r\n        rewardToken.transfer(_to, _amount);\r\n    }\r\n\r\n    function checkAnnounceable(uint256 pid, address account)\r\n        internal\r\n        view\r\n        returns (PoolAnnounceStatusCode)\r\n    {\r\n        // check pid\r\n        if (pid >= poolInfo.length) {\r\n            return PoolAnnounceStatusCode.WRONG_PID;\r\n        }\r\n        // check owner\r\n        PoolInfo memory pool = poolInfo[pid];\r\n        if (pool.owner != address(0)) {\r\n            return PoolAnnounceStatusCode.POOL_HAS_OWNER;\r\n        }\r\n        // check user\r\n        UserInfo memory user = userInfo[account];\r\n        if (balanceOf(account) > 0 && pid != user.poolId) {\r\n            return PoolAnnounceStatusCode.USER_IN_ANOTHER_POOL;\r\n        }\r\n        // check the minimum deposit requirement\r\n        if (balanceOf(account) < MIN_POOL_ANNOUNCE_AMOUNT) {\r\n            return PoolAnnounceStatusCode.NEED_MORE_DEPOSIT;\r\n        }\r\n        return PoolAnnounceStatusCode.OK;\r\n    }\r\n\r\n    function currentTime() internal view returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"Announced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousBeneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newBeneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"BeneficiaryTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"Renounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaidToOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\"}],\"name\":\"RewardsDurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_POOL_NUMBER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_POOL_ANNOUNCE_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_POOL_ANNOUNCE_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_POOL_DEPOSIT_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_STAKE_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_RATE_BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECONDS_PER_DAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"announce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"breaker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calcRewardTimeProgress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"createPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dev\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAmout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"userClaimable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fullRewardTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lp\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"maxWithdrawAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"queryPoolInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasOwner\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isOwner\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"announceableStatus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"announceTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolProfit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"renounce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRatePerDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTimeProgress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"setBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_breaker\",\"type\":\"bool\"}],\"name\":\"setBreaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dev\",\"type\":\"address\"}],\"name\":\"setDev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setRewardRatePerDay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardIndicator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawDev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StakingPool","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000a56ed2632e443db5f93e73c89df399a081408cc4","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://dc94e45815629c20a079d4ad49cc6a76750d51338248707e6dae06a6096fd439"}]}