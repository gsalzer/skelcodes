{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.7.4;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n\r\n    function neg(uint256 a) internal pure returns (uint256) {\r\n        uint256 c = 0 - a;\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\ninterface IStaking {\r\n    function stake(uint256 _amount) external;\r\n    function unStake(uint256 _id) external;\r\n    function claimReward(uint256 _amount) external returns (bool);\r\n    function stats(address _address) external view returns (\r\n        uint256 totalStaked,\r\n        uint256 totalRewards,\r\n        uint256 myShare,\r\n        uint256[] memory myStakes,\r\n        uint256[] memory myStakesExpirations,\r\n        uint256 myRewardsTotal,\r\n        uint256 myRewardsAvailable,\r\n        uint256 my24hRewards\r\n    );\r\n\r\n    event Staked(address _staker, uint amount, uint startTime, uint endTime);\r\n    event UnStaked(address _staker, uint amount);\r\n    event Rewarded(address _rewardant, uint amount);\r\n}\r\n\r\nabstract contract AbstractStakingContract is IStaking {\r\n    using SafeMath for uint;\r\n\r\n    struct Stake {\r\n        uint256 amount;\r\n        uint startTime;\r\n        uint endTime;\r\n    }\r\n    struct Reward {\r\n        uint256 amount;\r\n        uint256 timeStamp;\r\n    }\r\n\r\n    // service vars\r\n    uint internal SECONDS_IN_DAY = 86400;\r\n    uint256 internal MAX_INT = uint256(-1);\r\n    uint internal deployedTimestamp;\r\n\r\n    // public vars\r\n    uint256 public totalStakedTokens;\r\n    bool public acceptingNewStakes = true;\r\n    uint256 public stakingPeriodInSec;\r\n    uint public rewardVestingPeriodInSecs;\r\n    uint public rewardsInterval = SECONDS_IN_DAY;\r\n\r\n    // contract mappings\r\n    uint internal firstStakeStart;\r\n    mapping(address => Stake[]) internal stakes;\r\n    mapping(address => uint256) internal claimedRewards;\r\n    mapping(uint => uint256) internal totalRewards;\r\n    mapping(uint => mapping(address => uint256)) internal rewards;\r\n    mapping(uint => uint256) public rewardsDailyPool;\r\n    mapping(uint => uint256) public totalStakeDaily;\r\n    mapping(address => uint256) internal totalStakeAddress;\r\n    uint[] internal rewardDays;\r\n    uint[] internal stakeDays;\r\n    mapping(address => uint) internal stakers;\r\n    address[] internal stakersStore;\r\n\r\n    // The address of the Staking Token Contract\r\n    IERC20 public stakingToken;\r\n    // The address of the Rewards Token Contract\r\n    IERC20 public rewardsToken;\r\n\r\n    // events\r\n    event SystemUpdated(string key, uint256 value);\r\n    event StakeChanged(uint256 amount, uint256 total, uint day, uint timestamp);\r\n\r\n    // modifiers\r\n    modifier onlyWhenAcceptingNewStakes() {\r\n        require(\r\n            acceptingNewStakes,\r\n            \"not accepting new stakes\"\r\n        );\r\n\r\n        _;\r\n    }\r\n\r\n    // internal functions\r\n    function stake(address _stakeOwner, uint256 _amount) internal returns (Stake memory) {\r\n        require(\r\n            _stakeOwner != address(0),\r\n            \"stake owner can't be 0\"\r\n        );\r\n        require(\r\n            _amount > 0,\r\n            \"amount must be greater than 0\"\r\n        );\r\n\r\n        Stake memory stakeData = Stake(_amount, block.timestamp, block.timestamp + stakingPeriodInSec);\r\n\r\n        // Transfer the tokens to the smart contract and update the stake owners list accordingly.\r\n        require(\r\n            stakingToken.transferFrom(msg.sender, address(this), _amount),\r\n            \"insufficient allowance\"\r\n        );\r\n\r\n        stakes[_stakeOwner].push(stakeData);\r\n\r\n        _addStaker(_stakeOwner);\r\n        _changeTotalStake(_amount);\r\n        totalStakeAddress[_stakeOwner] = totalStakeAddress[_stakeOwner].add(_amount);\r\n\r\n\r\n        if (firstStakeStart == 0) {\r\n            firstStakeStart = stakeData.startTime;\r\n        }\r\n        return stakeData;\r\n    }\r\n\r\n    function _changeTotalStake(uint256 _amount) internal {\r\n        totalStakedTokens = totalStakedTokens + _amount;\r\n        uint _day = _rewardDay();\r\n        uint256 _total = _increaseDailyStaked(_day, _amount);\r\n        _reCalcDailyRewards(_total, _day);\r\n\r\n        emit StakeChanged(_amount, _total, _day, block.timestamp);\r\n    }\r\n\r\n    function _removeStakeIdx(address _owner, uint index) internal {\r\n        uint _length = stakes[_owner].length;\r\n        for (uint i = index; i < _length - 1; i++) {\r\n            stakes[_owner][i] = stakes[_owner][i + 1];\r\n        }\r\n        delete stakes[_owner][stakes[_owner].length - 1];\r\n        stakes[_owner].pop();\r\n    }\r\n\r\n    struct DayData {\r\n        uint day;\r\n        uint256 stakedTotal;\r\n        uint256 rewardsPool;\r\n    }\r\n\r\n    function _getReward(address _stakeOwner) internal view returns (uint256 _totalReward, uint256 _availableReward) {\r\n        _totalReward = 0;\r\n        _availableReward = 0;\r\n\r\n        uint256 _reward;\r\n        uint256 _now = _thisDay(block.timestamp);\r\n        uint256 _lastDay = _thisDay();\r\n        for (uint256 _day = _rewardDay(max(firstStakeStart, deployedTimestamp)); _day <= _lastDay && _day <= _now; _day += rewardsInterval) {\r\n            uint _day_reward = rewards[_day][_stakeOwner];\r\n            if (_day_reward > 0) {\r\n                _reward = _day_reward;\r\n            }\r\n            if (_reward == MAX_INT) {\r\n                _reward = 0;\r\n            }\r\n\r\n            _totalReward = _totalReward.add(_reward);\r\n            if (_day < block.timestamp - rewardVestingPeriodInSecs) {\r\n                _availableReward = _availableReward.add(_reward);\r\n            }\r\n        }\r\n\r\n        _availableReward = _availableReward.sub(claimedRewards[_stakeOwner]);\r\n    }\r\n\r\n    function _getTotalRewards() internal view returns (uint256 _total) {\r\n        _total = 0;\r\n\r\n        uint256 _rewards;\r\n        uint256 _now = _thisDay(block.timestamp);\r\n        uint256 _lastDay = _thisDay();\r\n        for (uint256 _day = _rewardDay(max(firstStakeStart, deployedTimestamp)); _day <= _lastDay && _day <= _now; _day += rewardsInterval) {\r\n            if (totalRewards[_day] > 0) {\r\n                _rewards = totalRewards[_day];\r\n            }\r\n            if (_rewards == MAX_INT) {\r\n                _rewards = 0;\r\n            }\r\n\r\n            _total = _total.add(_rewards);\r\n        }\r\n    }\r\n\r\n    function _thisDay() internal view returns (uint) {\r\n        return _thisDay(block.timestamp);\r\n    }\r\n\r\n    function _thisDay(uint _timeStamp) internal view returns (uint) {\r\n        return _timeStamp.div(rewardsInterval).mul(rewardsInterval);\r\n    }\r\n\r\n    function _rewardDay() internal view returns (uint) {\r\n        return _rewardDay(block.timestamp);\r\n    }\r\n\r\n    function _rewardDay(uint _timeStamp) internal view returns (uint) {\r\n        return _timeStamp.div(rewardsInterval).add(1).mul(rewardsInterval);\r\n    }\r\n\r\n    function _dailyRewardPool(uint _forDay) internal view returns (uint256) {\r\n        for (uint idx = rewardDays.length - 1; idx >= 0; idx--) {\r\n            if (rewardDays[idx] <= _forDay) {\r\n                return rewardsDailyPool[rewardDays[idx]];\r\n            }\r\n        }\r\n\r\n        return rewardsDailyPool[deployedTimestamp];\r\n    }\r\n\r\n    function _reCalcDailyRewards(uint _day) internal {\r\n        _reCalcDailyRewards(_dailyStakedVolume(_day), _day);\r\n    }\r\n    function _reCalcDailyRewards(uint256 dailyTotal, uint _day) internal {\r\n        uint256 _stakeHolders_length = stakersStore.length;\r\n        uint256 rewardsPool = _dailyRewardPool(_day);\r\n        uint256 _total = 0;\r\n\r\n        for (uint256 i = 1; dailyTotal > 0 && i < _stakeHolders_length; i++) {\r\n            address _stakeHolder = stakersStore[i];\r\n            uint256 _stakes_length = stakes[_stakeHolder].length;\r\n            uint256 _staked = 0;\r\n\r\n            for (uint256 j = 0; j < _stakes_length; j++) {\r\n                Stake storage _stake = stakes[_stakeHolder][j];\r\n                if (_rewardDay(_stake.startTime) > _day) {\r\n                    continue;\r\n                }\r\n\r\n                _staked = _staked.add(_stake.amount);\r\n            }\r\n\r\n            if (_staked == 0) {\r\n                rewards[_day][_stakeHolder] = MAX_INT;\r\n                continue;\r\n            }\r\n\r\n            uint256 _share = _staked.mul(1000).div(dailyTotal);\r\n            uint256 _reward = rewardsPool.mul(_share).div(1000);\r\n            rewards[_day][_stakeHolder] = _reward;\r\n            _total = _total.add(_reward);\r\n        }\r\n\r\n        if (_total == 0) {\r\n            _total = MAX_INT;\r\n        }\r\n        totalRewards[_day] = _total;\r\n    }\r\n\r\n    function _increaseDailyStaked(uint _day, uint256 _diff) internal returns (uint256) {\r\n        uint256 dailyStaked = totalStakeDaily[_day];\r\n        if (dailyStaked == 0) {\r\n            dailyStaked = _dailyStakedVolume(_day);\r\n            stakeDays.push(_day);\r\n        }\r\n        if (dailyStaked == MAX_INT) {\r\n            dailyStaked = 0;\r\n        }\r\n\r\n        uint256 _total = dailyStaked + _diff;\r\n        if (_total == 0) {\r\n            _total = MAX_INT;\r\n        }\r\n        return totalStakeDaily[_day] = _total;\r\n    }\r\n\r\n    function _dailyStakedVolume(uint _forDay) internal view returns (uint256 _staked) {\r\n        _staked = 0;\r\n        if (stakeDays.length == 0) {return 0;}\r\n\r\n        for (uint idx = stakeDays.length - 1; idx >= 0; idx--) {\r\n            uint _total;\r\n            uint day = stakeDays[idx];\r\n            if (day <= _forDay && (_total = totalStakeDaily[day]) > 0) {\r\n                if (_total == MAX_INT) {\r\n                    _total = 0;\r\n                }\r\n                return _total;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _totalStaked(address _stakeOwner) internal view returns (uint256) {\r\n        return totalStakeAddress[_stakeOwner];\r\n    }\r\n\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function _addStaker(address _staker) internal {\r\n        if (!_isStaker(_staker)) {\r\n            // Append\r\n            stakers[_staker] = stakersStore.length;\r\n            stakersStore.push(_staker);\r\n        }\r\n    }\r\n\r\n    function _isStaker(address _staker) internal view returns (bool) {\r\n        // address 0x0 is not valid if pos is 0 is not in the array\r\n        if (_staker != address(0) && stakers[_staker] > 0) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function _getPosition(uint pos) internal view returns (address) {\r\n        // Position 0 is not valid\r\n        require(pos > 0);\r\n        return stakersStore[pos];\r\n    }\r\n\r\n    function _24hRewards(address _address) internal view returns (uint256) {\r\n        if (totalStakedTokens == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 share = _totalStaked(_address).mul(1000).div(totalStakedTokens);\r\n        uint256 rewardsPool = _dailyRewardPool(_rewardDay(block.timestamp));\r\n\r\n        return rewardsPool.mul(share).div(1000);\r\n    }\r\n}\r\n\r\nabstract contract OwnersStakingContract is AbstractStakingContract {\r\n    address internal owner;\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function setNextDayRewardPool(uint256 _rewardPool) external\r\n    {\r\n        uint nextDay = _rewardDay(block.timestamp);\r\n        rewardsDailyPool[nextDay] = _rewardPool;\r\n        rewardDays.push(nextDay);\r\n\r\n        _reCalcDailyRewards(nextDay);\r\n\r\n        emit SystemUpdated(\"nextDayReward\", _rewardPool);\r\n    }\r\n\r\n    function setRewardVestingPeriodInSecs(uint _rewardVestingPeriodInSecs) external ownerOnly {\r\n        rewardVestingPeriodInSecs = _rewardVestingPeriodInSecs;\r\n        _reCalcDailyRewards(_rewardDay(block.timestamp));\r\n\r\n        emit SystemUpdated(\"rewardVestingPeriodInDays\", rewardVestingPeriodInSecs);\r\n    }\r\n\r\n    function setStakingPeriodInSec(uint _stakingPeriodInSec) external ownerOnly {\r\n        stakingPeriodInSec = _stakingPeriodInSec;\r\n        _reCalcDailyRewards(_rewardDay(block.timestamp));\r\n\r\n        emit SystemUpdated(\"stakingPeriodInSec\", stakingPeriodInSec);\r\n    }\r\n\r\n    function setRewardsInterval(uint _rewardsInterval) external ownerOnly {\r\n        rewardsInterval = _rewardsInterval;\r\n        _reCalcDailyRewards(_rewardDay(block.timestamp));\r\n\r\n        emit SystemUpdated(\"rewardsInterval\", rewardsInterval);\r\n    }\r\n\r\n    function setAcceptingNewStakes(bool _acceptingNewStakes) external ownerOnly {\r\n        acceptingNewStakes = _acceptingNewStakes;\r\n        emit SystemUpdated(\"acceptingNewStakes\", acceptingNewStakes ? 1 : 0);\r\n    }\r\n\r\n    modifier ownerOnly() {\r\n        require(msg.sender == owner, \"Oops. Not an owner\");\r\n\r\n        _;\r\n    }\r\n}\r\n\r\ncontract StakingContract is OwnersStakingContract, ReentrancyGuard {\r\n    using SafeMath for uint;\r\n\r\n    constructor(\r\n        uint256 _stakingPeriodInSec,\r\n        uint _rewardVestingPeriodInSecs,\r\n        IERC20 _stakingToken,\r\n        IERC20 _rewardsToken,\r\n        uint256 _rewardsDailyPool\r\n    ) {\r\n        require(\r\n            _stakingPeriodInSec > 0,\r\n            \"staking period must be greater than 0\"\r\n        );\r\n        require(\r\n            address(_stakingToken) != address(0),\r\n            \"Staking token must not be 0\"\r\n        );\r\n        require(\r\n            address(_rewardsToken) != address(0),\r\n            \"Rewards token must not be 0\"\r\n        );\r\n        require(\r\n            _rewardsDailyPool > 0,\r\n            \"Rewards pool must not be 0\"\r\n        );\r\n\r\n        stakingPeriodInSec = _stakingPeriodInSec;\r\n        rewardVestingPeriodInSecs = _rewardVestingPeriodInSecs;\r\n        stakingToken = _stakingToken;\r\n        rewardsToken = _rewardsToken;\r\n        deployedTimestamp = block.timestamp;\r\n        rewardsDailyPool[deployedTimestamp] = _rewardsDailyPool;\r\n        rewardDays.push(deployedTimestamp);\r\n        stakersStore.push(address(0));\r\n        // position 0 would be used as invalid address\r\n    }\r\n\r\n    function stake(uint256 _amount)\r\n    external\r\n    override\r\n    onlyWhenAcceptingNewStakes\r\n    nonReentrant\r\n    {\r\n        address stakeOwner = msg.sender;\r\n        Stake memory _stake = stake(stakeOwner, _amount);\r\n\r\n        emit Staked(stakeOwner, _stake.amount, _stake.startTime, _stake.endTime);\r\n    }\r\n\r\n    function unStake(uint256 _idx)\r\n    external\r\n    override\r\n    {\r\n        address stakeOwner = msg.sender;\r\n        require(_idx < stakes[stakeOwner].length, \"unstake - idx should be a valid staking index\");\r\n\r\n        uint256 stakedAmount = stakes[stakeOwner][_idx].amount;\r\n        uint256 stakingEndTime = stakes[stakeOwner][_idx].endTime;\r\n\r\n        require(stakingEndTime <= block.timestamp,\r\n            \"unstake - unable to unstake. you should wait until stake period is over\");\r\n\r\n\r\n        stakingToken.transfer(stakeOwner, stakedAmount);\r\n        totalStakeAddress[stakeOwner] = totalStakeAddress[stakeOwner].sub(stakedAmount);\r\n        _changeTotalStake(- stakedAmount);\r\n        _removeStakeIdx(stakeOwner, _idx);\r\n\r\n        emit UnStaked(stakeOwner, stakedAmount);\r\n    }\r\n\r\n    function claimReward(uint256 _amount)\r\n    external\r\n    override\r\n    returns (bool success)\r\n    {\r\n        address requester = msg.sender;\r\n        (, uint256 available) = _getReward(requester);\r\n\r\n        require(available >= _amount, \"claimReward: amount requested is greater than available\");\r\n\r\n        rewardsToken.transfer(requester, _amount);\r\n        claimedRewards[requester] = claimedRewards[requester].add(_amount);\r\n\r\n        emit Rewarded(requester, _amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function stats(address _address)\r\n    external\r\n    view\r\n    override\r\n    returns (\r\n        uint256 totalStaked,\r\n        uint256 totalRewards,\r\n        uint256 myShare,\r\n        uint256[] memory myStakes,\r\n        uint256[] memory myStakesExpirations,\r\n        uint256 myRewardsTotal,\r\n        uint256 myRewardsAvailable,\r\n        uint256 my24hRewards\r\n    )\r\n    {\r\n        myShare = 0;\r\n        totalStaked = totalStakedTokens;\r\n        totalRewards = _getTotalRewards();\r\n\r\n        if (_address == address(0)) {\r\n            return (totalStaked, totalRewards, myShare, myStakes, myStakesExpirations, myRewardsTotal, myRewardsAvailable, my24hRewards);\r\n        }\r\n\r\n        if (totalStakedTokens > 0) {\r\n            myShare = _totalStaked(_address).mul(100).div(totalStakedTokens);\r\n        }\r\n\r\n        my24hRewards = _24hRewards(_address);\r\n\r\n        myStakes = new uint256[](stakes[_address].length);\r\n        myStakesExpirations = new uint256[](stakes[_address].length);\r\n\r\n        uint _length = stakes[_address].length;\r\n        for (uint8 i = 0; i < _length; ++i) {\r\n            myStakes[i] = stakes[_address][i].amount;\r\n            myStakesExpirations[i] = stakes[_address][i].endTime;\r\n        }\r\n\r\n        (myRewardsTotal, myRewardsAvailable) = _getReward(_address);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingPeriodInSec\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardVestingPeriodInSecs\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardsDailyPool\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_rewardant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Rewarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"StakeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SystemUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnStaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptingNewStakes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardVestingPeriodInSecs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardsDailyPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_acceptingNewStakes\",\"type\":\"bool\"}],\"name\":\"setAcceptingNewStakes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardPool\",\"type\":\"uint256\"}],\"name\":\"setNextDayRewardPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardVestingPeriodInSecs\",\"type\":\"uint256\"}],\"name\":\"setRewardVestingPeriodInSecs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardsInterval\",\"type\":\"uint256\"}],\"name\":\"setRewardsInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingPeriodInSec\",\"type\":\"uint256\"}],\"name\":\"setStakingPeriodInSec\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingPeriodInSec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"stats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"myShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"myStakes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"myStakesExpirations\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"myRewardsTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"myRewardsAvailable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"my24hRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalStakeDaily\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"unStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StakingContract","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000076a70000000000000000000000000000000000000000000000000000000000003b5380000000000000000000000000fc82bb4ba86045af6f327323a46e80412b91b27d000000000000000000000000fc82bb4ba86045af6f327323a46e80412b91b27d00000000000000000000000000000000000000000000003635c9adc5dea00000","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ba81001c3bf00aa855d8268fd1b5a67737ecf32d324dd1dd74e2b0a706fd0923"}]}