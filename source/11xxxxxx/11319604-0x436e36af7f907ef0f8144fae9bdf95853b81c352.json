{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\npragma experimental ABIEncoderV2;\n\n\n// \n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\n\n// \n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\n\n// \n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\n\n// \n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\n\n// \n// The MIT License (MIT)\n// Copyright (c) 2016-2020 zOS Global Limited\n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\ncontract CentaurStakingV1 is Ownable {\r\n\r\n\tusing SafeMath for uint;\r\n\r\n\t// Events\r\n\tevent Deposit(uint256 _timestmap, address indexed _address, uint256 _amount);\r\n\tevent Withdraw(uint256 _timestamp, address indexed _address, uint256 _amount);\r\n\r\n\t// CNTR Token Contract & Funding Address\r\n\tIERC20 public tokenContract = IERC20(0x03042482d64577A7bdb282260e2eA4c8a89C064B);\r\n\taddress public fundingAddress = 0x6359EAdBB84C8f7683E26F392A1573Ab6a37B4b4;\r\n\r\n\t// Current rewardPercentage\r\n\tuint256 public currentRewardPercentage;\r\n\t\r\n\t// Initial & Final Reward Constants (100% => 10000)\r\n\tuint256 constant initialRewardPercentage = 1000; // 10%\r\n\tuint256 constant finalRewardPercetage = 500; // 5%\r\n\r\n\t// Rewards % decrement when TVL hits certain volume (100% => 10000)\r\n\tuint256 constant rewardDecrementCycle = 10000000 * 1 ether; // Decrement when TVL hits certain volume\r\n\tuint256 constant percentageDecrementPerCycle = 50; // 0.5%\r\n\r\n\t// Stake Lock Constants\r\n\tuint256 public constant stakeLockDuration = 30 days;\r\n\r\n\t// Stake tracking\r\n\tuint256 public stakeStartTimestamp;\r\n\tuint256 public stakeEndTimestamp;\r\n\r\n\tmapping(address => StakeInfo[]) stakeHolders;\r\n\r\n\tstruct StakeInfo {\r\n\t\tuint256 startTimestamp;\r\n\t\tuint256 amountStaked;\r\n\t\tuint256 rewardPercentage;\r\n\t\tbool withdrawn;\r\n\t}\r\n\r\n\t// Total Value Locked (TVL) Tracking\r\n\tuint256 public totalValueLocked;\r\n\r\n\t/**\r\n     * @dev Constructor\r\n     */\r\n\r\n\tconstructor() public {\r\n\t\tcurrentRewardPercentage = initialRewardPercentage;\r\n\t\tstakeStartTimestamp = block.timestamp + 7 days; // Stake event will start 7 days from deployment\r\n\t\tstakeEndTimestamp = stakeStartTimestamp + 30 days; // Stake event is going to run for 30 days\r\n\t}\r\n\r\n\t/**\r\n     * @dev Contract Modifiers\r\n     */\r\n\r\n\tfunction updateFundingAddress(address _address) public onlyOwner {\r\n\t\trequire(block.timestamp < stakeStartTimestamp);\r\n\r\n\t\tfundingAddress = _address;\r\n\t}\r\n\r\n\tfunction changeStartTimestamp(uint256 _timestamp) public onlyOwner {\r\n\t\trequire(block.timestamp < stakeStartTimestamp);\r\n\r\n\t\tstakeStartTimestamp = _timestamp;\r\n\t}\r\n\r\n\tfunction changeEndTimestamp(uint256 _timestamp) public onlyOwner {\r\n\t\trequire(block.timestamp < stakeEndTimestamp);\r\n\t\trequire(_timestamp > stakeStartTimestamp);\r\n\r\n\t\tstakeEndTimestamp = _timestamp;\r\n\t}\r\n\r\n\t/**\r\n     * @dev Stake functions\r\n     */\r\n\r\n    function deposit(uint256 _amount) public {\r\n    \trequire(block.timestamp > stakeStartTimestamp && block.timestamp < stakeEndTimestamp, \"Contract is not accepting deposits at the moment\");\r\n    \trequire(_amount > 0, \"Amount has to be more than 0\");\r\n    \trequire(stakeHolders[msg.sender].length < 1000, \"Prevent Denial of Service\");\r\n\r\n    \t// Transfers amount to contract\r\n    \trequire(tokenContract.transferFrom(msg.sender, address(this), _amount));\r\n\t\temit Deposit(block.timestamp, msg.sender, _amount);\r\n\r\n    \tuint256 stakeAmount = _amount;\r\n\t\tuint256 stakeRewards = 0;\r\n\r\n    \t// Check if deposit exceeds rewardDecrementCycle\r\n\t\twhile(stakeAmount >= amountToNextDecrement()) {\r\n\r\n\t\t\t// Variable cache\r\n\t\t\tuint256 amountToNextDecrement = amountToNextDecrement();\r\n\r\n\t\t\t// Add new stake\r\n\t    \tStakeInfo memory newStake;\r\n\t    \tnewStake.startTimestamp = block.timestamp;\r\n\t    \tnewStake.amountStaked = amountToNextDecrement;\r\n\t    \tnewStake.rewardPercentage = currentRewardPercentage;\r\n\r\n\t    \tstakeHolders[msg.sender].push(newStake);\r\n\r\n\t    \tstakeAmount = stakeAmount.sub(amountToNextDecrement);\r\n\t    \tstakeRewards = stakeRewards.add(amountToNextDecrement.mul(currentRewardPercentage).div(10000));\r\n\r\n\t\t\ttotalValueLocked = totalValueLocked.add(amountToNextDecrement);\r\n\r\n\t    \t// Reduce reward percentage if not at final\r\n    \t\tif (currentRewardPercentage > finalRewardPercetage) {\r\n    \t\t\tcurrentRewardPercentage = currentRewardPercentage.sub(percentageDecrementPerCycle);\r\n    \t\t}\r\n\t\t}\r\n\r\n\t\t// Deposit leftover stake\r\n\t\tif (stakeAmount > 0) {\r\n\t\t\t// Add new stake\r\n\t    \tStakeInfo memory newStake;\r\n\t    \tnewStake.startTimestamp = block.timestamp;\r\n\t    \tnewStake.amountStaked = stakeAmount;\r\n\t    \tnewStake.rewardPercentage = currentRewardPercentage;\r\n\r\n\t    \tstakeHolders[msg.sender].push(newStake);\r\n\r\n\t    \tstakeRewards = stakeRewards.add(stakeAmount.mul(currentRewardPercentage).div(10000));\r\n\r\n\t    \ttotalValueLocked = totalValueLocked.add(stakeAmount);\r\n\t\t}\r\n\r\n\t\t// Transfer stake rewards from funding address to contract\r\n    \trequire(tokenContract.transferFrom(fundingAddress, address(this), stakeRewards));\r\n\r\n    \t// Transfer total from contract to msg.sender\r\n    \trequire(tokenContract.transfer(msg.sender, stakeRewards));\r\n\r\n    }\r\n\r\n    function withdraw() public {\r\n    \t_withdraw(msg.sender);\r\n    }\r\n\r\n    function withdrawAddress(address _address) public onlyOwner {\r\n    \t_withdraw(_address);\r\n    }\r\n\r\n    function _withdraw(address _address) internal {\r\n    \tuint256 withdrawAmount = 0;\r\n\r\n    \tfor(uint256 i = 0; i < stakeHolders[_address].length; i++) {\r\n    \t\tStakeInfo storage stake = stakeHolders[_address][i];\r\n    \t\tif (!stake.withdrawn && block.timestamp >= stake.startTimestamp + stakeLockDuration) {\r\n\t    \t\twithdrawAmount = withdrawAmount.add(stake.amountStaked);\r\n\t    \t\tstake.withdrawn = true;\r\n    \t\t}\r\n    \t}\r\n\r\n    \trequire(withdrawAmount > 0, \"No funds available for withdrawal\");\r\n\r\n    \ttotalValueLocked = totalValueLocked.sub(withdrawAmount);\r\n\r\n    \trequire(tokenContract.transfer(_address, withdrawAmount));\r\n    \temit Withdraw(block.timestamp, _address, withdrawAmount);\r\n    }\r\n\r\n    function amountToNextDecrement() public view returns (uint256) {\r\n    \treturn rewardDecrementCycle.sub(totalValueLocked.mod(rewardDecrementCycle));\r\n    }\r\n\r\n    function amountAvailableForWithdrawal(address _address) public view returns (uint256) {\r\n    \tuint256 withdrawAmount = 0;\r\n\r\n    \tfor(uint256 i = 0; i < stakeHolders[_address].length; i++) {\r\n    \t\tStakeInfo storage stake = stakeHolders[_address][i];\r\n    \t\tif (!stake.withdrawn && block.timestamp >= stake.startTimestamp + stakeLockDuration) {\r\n\t    \t\twithdrawAmount = withdrawAmount.add(stake.amountStaked);\r\n    \t\t}\r\n    \t}\r\n\r\n    \treturn withdrawAmount;\r\n    }\r\n\r\n    function getStakes(address _address) public view returns(StakeInfo[] memory) {\r\n    \tStakeInfo[] memory stakes = new StakeInfo[](stakeHolders[_address].length);\r\n\r\n    \tfor (uint256 i = 0; i < stakeHolders[_address].length; i++) {\r\n    \t\tStakeInfo storage stake = stakeHolders[_address][i];\r\n    \t\tstakes[i] = stake;\r\n    \t}\r\n\r\n    \treturn stakes;\r\n    }\r\n}\n\n// \ncontract CentaurStakingV2 is Ownable {\r\n\r\n\tusing SafeMath for uint;\r\n\r\n\t// Events\r\n\tevent StakingStart(uint256 _timestamp);\r\n\tevent StakingEnd(uint256 _timestamp);\r\n\tevent Deposit(uint256 _timestmap, address indexed _address, uint256 _amount);\r\n\tevent Withdraw(uint256 _timestamp, address indexed _address, uint256 _amount);\r\n\tevent CollectReward(uint256 _timestamp, address indexed _address, uint256 _amount);\r\n\r\n\t// CentaurStakingV1 Contract\r\n\tCentaurStakingV1 public constant stakingV1 = CentaurStakingV1(0x512887D252BB4b7BE4836d327163905AaEA81B47);\r\n\r\n\t// CNTR Token Contract & Funding Address\r\n\tIERC20 public constant tokenContract = IERC20(0x03042482d64577A7bdb282260e2eA4c8a89C064B);\r\n\taddress public fundingAddress = 0xf6B13425d1F7D920E3F6EF43F7c5DdbC2E59AbF6;\r\n\r\n\t// Reward Percentage\r\n\tuint256 public rewardPercentage = 37500; // 3.75%;\r\n\r\n\t// Rewards Release Interval\r\n\tuint256 public constant rewardReleaseInterval = 1 days;\r\n\r\n\t// Stake Lock Constants\r\n\tuint256 public constant stakeLockDuration = 90 days;\r\n\r\n\t// Contract status\r\n\tContractStatus public status;\r\n\r\n\tenum ContractStatus {\r\n\t\tINIT, \r\n\t\tSTAKE_STARTED, \r\n\t\tSTAKE_ENDED\r\n\t}\r\n\r\n\t// Stake End Timestamp\r\n\tuint256 public stakeEndTimestamp;\r\n\r\n\tmapping(address => StakeInfoV2[]) public stakeHolders;\r\n\r\n\tstruct StakeInfoV2 {\r\n\t\tuint256 startTimestamp;\r\n\t\tuint256 amountStaked;\r\n\t\tuint256 rewardPercentage;\r\n\t\tuint256 rewardCollectCount;\r\n\t}\r\n\r\n\t// Total Value Locked (TVL) Tracking\r\n\tuint256 public totalValueLocked;\r\n\r\n\t/**\r\n     * @dev Constructor\r\n     */\r\n\r\n\tconstructor() public {\r\n\t\tstatus = ContractStatus.INIT;\r\n\t}\r\n\r\n\t/**\r\n     * @dev Contract Modifiers\r\n     */\r\n\r\n\tfunction updateFundingAddress(address _address) public onlyOwner {\r\n\t\trequire(status == ContractStatus.INIT);\r\n\r\n\t\tfundingAddress = _address;\r\n\t}\r\n\r\n\tfunction startStaking() public onlyOwner {\r\n\t\trequire(status == ContractStatus.INIT);\r\n\r\n\t\tstatus = ContractStatus.STAKE_STARTED;\r\n\t\temit StakingStart(block.timestamp);\r\n\t}\r\n\r\n\tfunction endStaking() public onlyOwner {\r\n\t\trequire(status == ContractStatus.STAKE_STARTED);\r\n\r\n\t\tstatus = ContractStatus.STAKE_ENDED;\r\n\t\tstakeEndTimestamp = block.timestamp;\r\n\t\temit StakingEnd(block.timestamp);\r\n\t}\r\n\r\n\t/**\r\n     * @dev Stake functions\r\n     */\r\n\r\n    function deposit(uint256 _amount) public {\r\n    \trequire(status == ContractStatus.STAKE_STARTED);\r\n    \trequire(_amount > 0, \"Amount has to be more than 0\");\r\n    \trequire(stakeHolders[msg.sender].length < 1000, \"Prevent Denial of Service\");\r\n\r\n    \tcollectRewards();\r\n\r\n    \tuint256 stakingV1AvailableWithdrawAmount = stakingV1.amountAvailableForWithdrawal(msg.sender);\r\n\r\n    \tif (stakingV1AvailableWithdrawAmount == 0) {\r\n    \t\trequire(tokenContract.transferFrom(msg.sender, address(this), _amount));\r\n\r\n    \t\tStakeInfoV2 memory newStake;\r\n\t    \tnewStake.startTimestamp = block.timestamp;\r\n\t    \tnewStake.amountStaked = _amount;\r\n\t    \tnewStake.rewardPercentage = rewardPercentage;\r\n\t    \tnewStake.rewardCollectCount = 0;\r\n\r\n\t    \tstakeHolders[msg.sender].push(newStake);\r\n\t\t} else {\r\n\t\t\tCentaurStakingV1.StakeInfo[] memory stakes = stakingV1.getStakes(msg.sender);\r\n\t\t\tuint256 stakingV1LockDuration = stakingV1.stakeLockDuration();\r\n\r\n\t\t\tuint256 leftoverDepositAmount = _amount;\r\n\r\n\t\t\tfor (uint256 i = 0; i < stakes.length; i++) {\r\n\t    \t\tif (!stakes[i].withdrawn && block.timestamp >= stakes[i].startTimestamp + stakingV1LockDuration) {\r\n\t    \t\t\tif (leftoverDepositAmount > stakes[i].amountStaked) {\r\n\t    \t\t\t\tleftoverDepositAmount = leftoverDepositAmount.sub(stakes[i].amountStaked);\r\n\r\n\t    \t\t\t\tStakeInfoV2 memory newStake;\r\n\t\t\t\t    \tnewStake.startTimestamp = block.timestamp;\r\n\t\t\t\t    \tnewStake.amountStaked = stakes[i].amountStaked;\r\n\t\t\t\t    \tnewStake.rewardPercentage = (stakes[i].rewardPercentage).mul(75);\r\n\t\t\t\t    \tnewStake.rewardCollectCount = 0;\r\n\r\n\t\t\t\t    \tstakeHolders[msg.sender].push(newStake);\r\n\t    \t\t\t} else {\r\n\t    \t\t\t\tStakeInfoV2 memory newStake;\r\n\t\t\t\t    \tnewStake.startTimestamp = block.timestamp;\r\n\t\t\t\t    \tnewStake.amountStaked = leftoverDepositAmount;\r\n\t\t\t\t    \tnewStake.rewardPercentage = (stakes[i].rewardPercentage).mul(75);\r\n\t\t\t\t    \tnewStake.rewardCollectCount = 0;\r\n\r\n\t\t\t\t    \tstakeHolders[msg.sender].push(newStake);\r\n\r\n\t\t\t\t    \tleftoverDepositAmount = 0;\r\n\t    \t\t\t}\r\n\t    \t\t}\r\n\t    \t}\r\n\r\n\t    \tif (leftoverDepositAmount > 0) {\r\n\t    \t\tStakeInfoV2 memory newStake;\r\n\t\t    \tnewStake.startTimestamp = block.timestamp;\r\n\t\t    \tnewStake.amountStaked = leftoverDepositAmount;\r\n\t\t    \tnewStake.rewardPercentage = rewardPercentage;\r\n\t\t    \tnewStake.rewardCollectCount = 0;\r\n\r\n\t\t    \tstakeHolders[msg.sender].push(newStake);\r\n\t    \t}\r\n\r\n\t    \tstakingV1.withdrawAddress(msg.sender);\r\n\t\t\trequire(tokenContract.transferFrom(msg.sender, address(this), _amount));\r\n\t\t}\r\n\r\n\t\ttotalValueLocked = totalValueLocked.add(_amount);\r\n\r\n\t\temit Deposit(block.timestamp, msg.sender, _amount);\r\n    }\r\n\r\n    function withdraw(uint256 _sid) public {\r\n    \trequire(stakeHolders[msg.sender][_sid].amountStaked > 0);\r\n\r\n    \tcollectRewards();\r\n\r\n    \tuint256 withdrawAmount = 0;\r\n\r\n    \tStakeInfoV2 storage stake = stakeHolders[msg.sender][_sid];\r\n\r\n    \tif (block.timestamp >= stake.startTimestamp + stakeLockDuration) {\r\n    \t\twithdrawAmount = stake.amountStaked;\r\n\r\n    \t\tif (stakeHolders[msg.sender].length > 1 && _sid != stakeHolders[msg.sender].length - 1) {\r\n\t\t\t\tstakeHolders[msg.sender][_sid] = stakeHolders[msg.sender][stakeHolders[msg.sender].length - 1];\r\n\t\t\t}\r\n\r\n\t\t\tstakeHolders[msg.sender].pop();\r\n    \t}\r\n\r\n    \tif (withdrawAmount > 0) {\r\n    \t\ttotalValueLocked = totalValueLocked.sub(withdrawAmount);\r\n    \t\trequire(tokenContract.transfer(msg.sender, withdrawAmount));\r\n    \t\temit Withdraw(block.timestamp, msg.sender, withdrawAmount);\r\n    \t}\r\n\t}\r\n\r\n    function withdrawAll() public {\r\n    \tcollectRewards();\r\n\r\n    \tuint256 withdrawAmount = 0;\r\n\r\n    \tfor (uint256 i = 0; i < stakeHolders[msg.sender].length; i++) {\r\n    \t\tStakeInfoV2 storage stake = stakeHolders[msg.sender][i];\r\n\r\n    \t\tif (block.timestamp >= stake.startTimestamp + stakeLockDuration) {\r\n    \t\t\twhile (stakeHolders[msg.sender].length > 0 && block.timestamp >= stakeHolders[msg.sender][stakeHolders[msg.sender].length - 1].startTimestamp + stakeLockDuration) {\r\n    \t\t\t\twithdrawAmount = withdrawAmount.add(stakeHolders[msg.sender][stakeHolders[msg.sender].length - 1].amountStaked);\r\n    \t\t\t\tstakeHolders[msg.sender].pop();\r\n    \t\t\t}\r\n\r\n    \t\t\tif (stakeHolders[msg.sender].length > 1 && i != stakeHolders[msg.sender].length) {\r\n    \t\t\t\twithdrawAmount = withdrawAmount.add(stakeHolders[msg.sender][i].amountStaked);\r\n    \t\t\t\t\r\n    \t\t\t\tstakeHolders[msg.sender][i] = stakeHolders[msg.sender][stakeHolders[msg.sender].length - 1];\r\n    \t\t\t\tstakeHolders[msg.sender].pop();\r\n    \t\t\t}\r\n    \t\t}\r\n    \t}\r\n\r\n    \tif (withdrawAmount > 0) {\r\n    \t\ttotalValueLocked = totalValueLocked.sub(withdrawAmount);\r\n    \t\trequire(tokenContract.transfer(msg.sender, withdrawAmount));\r\n    \t\temit Withdraw(block.timestamp, msg.sender, withdrawAmount);\r\n    \t}\r\n    }\r\n\r\n    function collectRewards() public {\r\n    \tuint256 pendingRewards = 0;\r\n\r\n    \tfor (uint256 i = 0; i < stakeHolders[msg.sender].length; i++) {\r\n    \t\tStakeInfoV2 storage stake = stakeHolders[msg.sender][i];\r\n\r\n    \t\tuint256 daysElapsed = 0;\r\n\r\n    \t\tif (status == ContractStatus.STAKE_ENDED) {\r\n    \t\t\tdaysElapsed = stakeEndTimestamp.sub(stake.startTimestamp).div(rewardReleaseInterval);\r\n\t\t\t} else {\r\n\t\t\t\tdaysElapsed = block.timestamp.sub(stake.startTimestamp).div(rewardReleaseInterval);\r\n\t\t\t}\r\n\r\n    \t\tuint256 daysPendingCollect = daysElapsed.sub(stake.rewardCollectCount);\r\n\r\n    \t\tif (daysPendingCollect > 0) {\r\n    \t\t\tuint256 rewardPerDay = (stake.amountStaked).mul(stake.rewardPercentage).div(1000000).div(30);\r\n    \t\t\tpendingRewards = pendingRewards.add(rewardPerDay.mul(daysPendingCollect));\r\n\r\n    \t\t\tstake.rewardCollectCount = daysElapsed;\r\n    \t\t}\r\n    \t}\r\n\r\n    \tif (pendingRewards > 0) {\r\n    \t\t// Transfer stake rewards from funding address to contract\r\n\t    \trequire(tokenContract.transferFrom(fundingAddress, address(this), pendingRewards));\r\n\r\n\t    \t// Transfer total from contract to msg.sender\r\n\t    \trequire(tokenContract.transfer(msg.sender, pendingRewards));\r\n\r\n\t    \temit CollectReward(block.timestamp, msg.sender, pendingRewards);\r\n    \t}\r\n    }\r\n\r\n    function getUnlockedStake(address _address) public view returns (uint256) {\r\n    \tuint256 unlockedStake = 0;\r\n\r\n    \tfor (uint256 i = 0; i < stakeHolders[_address].length; i++) {\r\n    \t\tStakeInfoV2 storage stake = stakeHolders[_address][i];\r\n\r\n    \t\tif (block.timestamp >= stake.startTimestamp + stakeLockDuration) {\r\n    \t\t\tunlockedStake = unlockedStake.add(stake.amountStaked);\r\n    \t\t}\r\n    \t}\r\n\r\n    \treturn unlockedStake;\r\n    }\r\n\r\n    function getPendingRewards(address _address) public view returns (uint256) {\r\n    \tuint256 pendingRewards = 0;\r\n\r\n    \tfor (uint256 i = 0; i < stakeHolders[_address].length; i++) {\r\n    \t\tStakeInfoV2 storage stake = stakeHolders[_address][i];\r\n\r\n    \t\tuint256 daysElapsed = 0;\r\n    \t\t\r\n    \t\tif (status == ContractStatus.STAKE_ENDED) {\r\n    \t\t\tdaysElapsed = stakeEndTimestamp.sub(stake.startTimestamp).div(rewardReleaseInterval);\r\n\t\t\t} else {\r\n\t\t\t\tdaysElapsed = block.timestamp.sub(stake.startTimestamp).div(rewardReleaseInterval);\r\n\t\t\t}\r\n\r\n    \t\tuint256 daysPendingCollect = daysElapsed.sub(stake.rewardCollectCount);\r\n\r\n    \t\tif (daysPendingCollect > 0) {\r\n    \t\t\tuint256 rewardPerDay = (stake.amountStaked).mul(stake.rewardPercentage).div(1000000).div(30);\r\n    \t\t\tpendingRewards = pendingRewards.add(rewardPerDay.mul(daysPendingCollect));\r\n    \t\t}\r\n    \t}\r\n\r\n    \treturn pendingRewards;\r\n    }\r\n\r\n    function getStakes(address _address) public view returns(StakeInfoV2[] memory) {\r\n    \tStakeInfoV2[] memory stakes = new StakeInfoV2[](stakeHolders[_address].length);\r\n\r\n    \tfor (uint256 i = 0; i < stakeHolders[_address].length; i++) {\r\n    \t\tStakeInfoV2 storage stake = stakeHolders[_address][i];\r\n    \t\tstakes[i] = stake;\r\n    \t}\r\n\r\n    \treturn stakes;\r\n    }\r\n\r\n    function getV1AvailableWithdrawAmount(address _address) public view returns (uint256) {\r\n    \treturn stakingV1.amountAvailableForWithdrawal(_address);\r\n    }\r\n\r\n    function getEstimatedDailyRewards(address _address) public view returns (uint256) {\r\n    \tuint256 estimatedDailyRewards = 0;\r\n\r\n    \tfor (uint256 i = 0; i < stakeHolders[_address].length; i++) {\r\n    \t\tStakeInfoV2 storage stake = stakeHolders[_address][i];\r\n\r\n    \t\tuint256 rewardPerDay = (stake.amountStaked).mul(stake.rewardPercentage).div(1000000).div(30);\r\n    \t\testimatedDailyRewards = estimatedDailyRewards.add(rewardPerDay);\r\n    \t}\r\n\r\n    \treturn estimatedDailyRewards;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"CollectReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestmap\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"StakingEnd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"StakingStart\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"collectRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getEstimatedDailyRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getPendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getStakes\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardCollectCount\",\"type\":\"uint256\"}],\"internalType\":\"struct CentaurStakingV2.StakeInfoV2[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getUnlockedStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getV1AvailableWithdrawAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardReleaseInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeEndTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardCollectCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeLockDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingV1\",\"outputs\":[{\"internalType\":\"contract CentaurStakingV1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"internalType\":\"enum CentaurStakingV2.ContractStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValueLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"updateFundingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sid\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CentaurStakingV2","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}