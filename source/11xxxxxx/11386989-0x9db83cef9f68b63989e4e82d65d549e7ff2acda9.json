{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @title The Owned contract\r\n * @notice A contract with helpers for basic contract ownership.\r\n */\r\ncontract Owned {\r\n\r\n  address public owner;\r\n  address private pendingOwner;\r\n\r\n  event OwnershipTransferRequested(\r\n    address indexed from,\r\n    address indexed to\r\n  );\r\n  event OwnershipTransferred(\r\n    address indexed from,\r\n    address indexed to\r\n  );\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows an owner to begin transferring ownership to a new address,\r\n   * pending.\r\n   */\r\n  function transferOwnership(address _to)\r\n    external\r\n    onlyOwner()\r\n  {\r\n    pendingOwner = _to;\r\n\r\n    emit OwnershipTransferRequested(owner, _to);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows an ownership transfer to be completed by the recipient.\r\n   */\r\n  function acceptOwnership()\r\n    external\r\n  {\r\n    require(msg.sender == pendingOwner, \"Must be proposed owner\");\r\n\r\n    address oldOwner = owner;\r\n    owner = msg.sender;\r\n    pendingOwner = address(0);\r\n\r\n    emit OwnershipTransferred(oldOwner, msg.sender);\r\n  }\r\n\r\n  /**\r\n   * @dev Reverts if called by anyone other than the contract owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner, \"Only callable by owner\");\r\n    _;\r\n  }\r\n\r\n}\r\n\r\ninterface AccessControllerInterface {\r\n  function hasAccess(address user, bytes calldata data) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @title SimpleWriteAccessController\r\n * @notice Gives access to accounts explicitly added to an access list by the\r\n * controller's owner.\r\n * @dev does not make any special permissions for externally, see\r\n * SimpleReadAccessController for that.\r\n */\r\ncontract SimpleWriteAccessController is AccessControllerInterface, Owned {\r\n\r\n  bool public checkEnabled;\r\n  mapping(address => bool) internal accessList;\r\n\r\n  event AddedAccess(address user);\r\n  event RemovedAccess(address user);\r\n  event CheckAccessEnabled();\r\n  event CheckAccessDisabled();\r\n\r\n  constructor()\r\n    public\r\n  {\r\n    checkEnabled = true;\r\n  }\r\n\r\n  /**\r\n   * @notice Returns the access of an address\r\n   * @param _user The address to query\r\n   */\r\n  function hasAccess(\r\n    address _user,\r\n    bytes memory\r\n  )\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (bool)\r\n  {\r\n    return accessList[_user] || !checkEnabled;\r\n  }\r\n\r\n  /**\r\n   * @notice Adds an address to the access list\r\n   * @param _user The address to add\r\n   */\r\n  function addAccess(address _user)\r\n    external\r\n    onlyOwner()\r\n  {\r\n    if (!accessList[_user]) {\r\n      accessList[_user] = true;\r\n\r\n      emit AddedAccess(_user);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Removes an address from the access list\r\n   * @param _user The address to remove\r\n   */\r\n  function removeAccess(address _user)\r\n    external\r\n    onlyOwner()\r\n  {\r\n    if (accessList[_user]) {\r\n      accessList[_user] = false;\r\n\r\n      emit RemovedAccess(_user);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice makes the access check enforced\r\n   */\r\n  function enableAccessCheck()\r\n    external\r\n    onlyOwner()\r\n  {\r\n    if (!checkEnabled) {\r\n      checkEnabled = true;\r\n\r\n      emit CheckAccessEnabled();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice makes the access check unenforced\r\n   */\r\n  function disableAccessCheck()\r\n    external\r\n    onlyOwner()\r\n  {\r\n    if (checkEnabled) {\r\n      checkEnabled = false;\r\n\r\n      emit CheckAccessDisabled();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev reverts if the caller does not have access\r\n   */\r\n  modifier checkAccess() {\r\n    require(hasAccess(msg.sender, msg.data), \"No access\");\r\n    _;\r\n  }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"AddedAccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CheckAccessDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CheckAccessEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"RemovedAccess\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"addAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableAccessCheck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableAccessCheck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"hasAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"removeAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SimpleWriteAccessController","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://5c01e7188c25831fa6e35e1fbd70ffc6468fb3115f70366f7b1ae3fec73453ed"}]}