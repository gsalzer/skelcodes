{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-09-20\r\n*/\r\n\r\n/**\r\n *Submitted for verification at Etherscan.io on 2020-01-09\r\n*/\r\n\r\n/**\r\n *Submitted for verification at Etherscan.io on 2019-07-11\r\n*/\r\n\r\npragma solidity ^0.5.17;\r\n\r\n/*\r\n * MintHelper and MultiSend for BSOV Mining Pool\r\n * BitcoinSoV (BSOV) Mineable & Deflationary\r\n *\r\n * https://www.btcsov.com\r\n * https://bsov-pool.hashtables.net\r\n *\r\n * Based off https://github.com/0xbitcoin/mint-helper\r\n */\r\n\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n    address private _payoutWallet;  // Added to prevent payouts interfering with minting requests. \r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        _payoutWallet = msg.sender;\r\n\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n    \r\n    function payoutWallet() public view returns (address) {\r\n        return _payoutWallet;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner, \"Ownable: caller is not the owner, minter, or payer.\");\r\n        _;\r\n    }\r\n    \r\n    modifier onlyPayoutWallet() {\r\n        require(msg.sender == _owner || msg.sender == _payoutWallet, \"Ownable: caller is not the owner or payer.\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n    \r\n    function setPayoutWallet(address newAddress) public onlyOwner {\r\n        _payoutWallet = newAddress;\r\n    }\r\n    \r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract ERC20Interface {\r\n    function totalSupply() public view returns (uint);\r\n    function balanceOf(address tokenOwner) public view returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\ncontract ERC918Interface {\r\n  function totalSupply() public view returns (uint);\r\n  function getMiningDifficulty() public view returns (uint);\r\n  function getMiningTarget() public view returns (uint);\r\n  function getMiningReward() public view returns (uint);\r\n  function balanceOf(address tokenOwner) public view returns (uint balance);\r\n\r\n  function mint(uint256 nonce, bytes32 challenge_digest) public returns (bool success);\r\n\r\n  event Mint(address indexed from, uint reward_amount, uint epochCount, bytes32 newChallengeNumber);\r\n}\r\n\r\ncontract GasToken1 {\r\n    function free(uint256 value) public returns (bool success);\r\n    function freeFrom(address from, uint256 value) public returns (bool success);\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n}\r\n\r\n/*\r\nThe mintingWallet will proxy mint requests to be credited to the contract address.\r\nThe payoutWallet will call the multisend method to send out payments.\r\n*/\r\n\r\ncontract PoolHelper is Ownable {\r\n    string public name;\r\n    address public mintableToken;\r\n    address public gasToken;\r\n    mapping(bytes32 => bool) successfulPayments;\r\n\r\n    event Payment(bytes32 _paymentId);\r\n    \r\n    constructor(address mToken, address gToken, string memory mName, address payoutWallet)\r\n    public\r\n    {\r\n      mintableToken = mToken;\r\n      gasToken = gToken;\r\n      name = mName;\r\n      setPayoutWallet(payoutWallet);\r\n    }\r\n\r\n    function setMintableToken(address mToken)\r\n    public onlyOwner\r\n    returns (bool)\r\n    {\r\n      mintableToken = mToken;\r\n      return true;\r\n    }\r\n    \r\n    function setGasToken(address gToken)\r\n    public onlyOwner\r\n    returns (bool)\r\n    {\r\n      gasToken = gToken;\r\n      return true;\r\n    }\r\n\r\n    function paymentSuccessful(bytes32 paymentId) public view returns (bool){\r\n        return (successfulPayments[paymentId] == true);\r\n    }\r\n    \r\n    function proxyMint(uint256 nonce, bytes32 challenge_digest , uint256 free)\r\n    public\r\n    returns (bool)\r\n    {\r\n        require(GasToken1(gasToken).balanceOf(msg.sender) > 0, \"Balance insufficent\");\r\n\r\n\r\n        uint256 burnNumber = (free + 21000) / 24954;\r\n\t\tburnNumber = burnNumber + 1;\r\n \r\n        require(GasToken1(gasToken).free(burnNumber), \"Could not free token\");\r\n        require(ERC918Interface(mintableToken).mint(nonce, challenge_digest), \"Could not mint token\");\r\n        return true;\r\n    }\r\n\r\n    //withdraw any eth inside\r\n    function withdraw()\r\n    public onlyOwner\r\n    {\r\n        msg.sender.transfer(address(this).balance);\r\n    }\r\n    \r\n    //send tokens out\r\n    function send(address _tokenAddr, bytes32 paymentId, address dest, uint value, uint256 free)\r\n    public onlyPayoutWallet\r\n    returns (bool)\r\n    {\r\n        require(successfulPayments[paymentId] != true, \"Payment ID already exists and was successful\");\r\n        successfulPayments[paymentId] = true;\r\n        emit Payment(paymentId);\r\n        \r\n        require(GasToken1(gasToken).balanceOf(address(this)) > 0, \"Balance insufficent\");\r\n\r\n\r\n        uint256 burnNumber = (free + 21000) / 24954;\r\n\t\tburnNumber = burnNumber + 1;\r\n \r\n        require(GasToken1(gasToken).free(burnNumber), \"Could not free token\");\r\n        \r\n        return ERC20Interface(_tokenAddr).transfer(dest, value);\r\n    }\r\n\r\n    //batch send tokens\r\n    function multisend(address _tokenAddr, bytes32 paymentId, address[] memory dests, uint256[] memory values, uint256 free)\r\n    public onlyPayoutWallet\r\n    returns (uint256)\r\n    {\r\n        require(dests.length > 0, \"Must have more than 1 destination address\");\r\n        require(values.length >= dests.length, \"Address to Value array size mismatch\");\r\n        require(successfulPayments[paymentId] != true, \"Payment ID already exists and was successful\");\r\n        \r\n        require(GasToken1(gasToken).balanceOf(address(this)) > 0, \"Balance insufficent\");\r\n\r\n\r\n        uint256 burnNumber = (free + 21000) / 24954;\r\n\t\tburnNumber = burnNumber + 1;\r\n \r\n        require(GasToken1(gasToken).free(burnNumber), \"Could not free token\");\r\n\r\n        uint256 i = 0;\r\n        while (i < dests.length) {\r\n           require(ERC20Interface(_tokenAddr).transfer(dests[i], values[i]));\r\n           i += 1;\r\n        }\r\n        \r\n        successfulPayments[paymentId] = true;\r\n        emit Payment(paymentId);\r\n        return (i);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"mToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"mName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"payoutWallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_paymentId\",\"type\":\"bytes32\"}],\"name\":\"Payment\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"gasToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintableToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"paymentId\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"dests\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"free\",\"type\":\"uint256\"}],\"name\":\"multisend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"paymentId\",\"type\":\"bytes32\"}],\"name\":\"paymentSuccessful\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payoutWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"challenge_digest\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"free\",\"type\":\"uint256\"}],\"name\":\"proxyMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"paymentId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"dest\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"free\",\"type\":\"uint256\"}],\"name\":\"send\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"gToken\",\"type\":\"address\"}],\"name\":\"setGasToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"mToken\",\"type\":\"address\"}],\"name\":\"setMintableToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setPayoutWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PoolHelper","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000026946ada5ecb57f3a1f91605050ce45c482c9eb100000000000000000000000088d60255f917e3eb94eae199d827dad837fac4cb0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000a1b98ef7e003d19aa0ac02fe7217d7b9ee878de8000000000000000000000000000000000000000000000000000000000000001242536f56202d20475354312048656c7065720000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://bbb9566ddf3939de69a52f7f959af7e3eab48ba01c42c867119b16fead7fd7f7"}]}