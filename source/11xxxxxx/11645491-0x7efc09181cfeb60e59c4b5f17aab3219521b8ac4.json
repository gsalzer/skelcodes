{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.7.6;\r\n\r\n// iRUNE Interface\r\ninterface iRUNE {\r\n    function transfer(address, uint) external returns (bool);\r\n    function transferTo(address, uint) external returns (bool);\r\n}\r\n\r\ncontract RUNE_Bridge {\r\n\r\n    address public owner;\r\n    address public server;\r\n    address public RUNE;\r\n\r\n    event Deposit(address indexed from, uint value, string memo);\r\n    event Outbound(address indexed to, uint value, string memo);\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    // Only Owner can execute\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Must be Owner\");\r\n        _;\r\n    }\r\n\r\n    // Only Owner/Server can execute\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == server || msg.sender == owner, \"Must be Admin\");\r\n        _;\r\n    }\r\n\r\n    // Owner calls to set server\r\n    function setServer(address _server) public onlyOwner {\r\n        server = _server;\r\n    }\r\n\r\n    // Owner calls to set RUNE\r\n    function setRune(address _rune) public onlyOwner {\r\n        RUNE = _rune;\r\n    }\r\n\r\n    // User to deposit RUNE with a memo.\r\n    function deposit(uint value, string memory memo) public {\r\n        require(value > 0, \"user must send assets\");\r\n        iRUNE(RUNE).transferTo(address(this), value);\r\n        emit Deposit(msg.sender, value, memo);\r\n    }\r\n\r\n    // Admin to transfer to recipient\r\n    function transferOut(address to, uint value, string memory memo) public onlyAdmin {\r\n        iRUNE(RUNE).transfer(to, value);\r\n        emit Outbound(to, value, memo);\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"memo\",\"type\":\"string\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"memo\",\"type\":\"string\"}],\"name\":\"Outbound\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"RUNE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"memo\",\"type\":\"string\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"server\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rune\",\"type\":\"address\"}],\"name\":\"setRune\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_server\",\"type\":\"address\"}],\"name\":\"setServer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"memo\",\"type\":\"string\"}],\"name\":\"transferOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"RUNE_Bridge","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://63576dfde3b25d8288e8489f6dc7ed04b4ffb49d1fad7257ccfd49e572f0828b"}]}