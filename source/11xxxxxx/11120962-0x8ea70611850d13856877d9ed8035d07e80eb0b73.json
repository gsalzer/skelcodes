{"status":"1","message":"OK","result":[{"SourceCode":"/// LiquidationEngine.sol\r\n\r\n// Copyright (C) 2018 Rain <rainbreak@riseup.net>\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.6.7;\r\n\r\nabstract contract CollateralAuctionHouseLike {\r\n    function startAuction(\r\n      address forgoneCollateralReceiver,\r\n      address initialBidder,\r\n      uint amountToRaise,\r\n      uint collateralToSell,\r\n      uint initialBid\r\n    ) virtual public returns (uint);\r\n}\r\nabstract contract SAFESaviourLike {\r\n    function saveSAFE(address,bytes32,address) virtual external returns (bool,uint256,uint256);\r\n}\r\nabstract contract SAFEEngineLike {\r\n    function collateralTypes(bytes32) virtual public view returns (\r\n        uint256 debtAmount,        // [wad]\r\n        uint256 accumulatedRate,   // [ray]\r\n        uint256 safetyPrice,       // [ray]\r\n        uint256 debtCeiling,       // [rad]\r\n        uint256 debtFloor,         // [rad]\r\n        uint256 liquidationPrice   // [ray]\r\n    );\r\n    function safes(bytes32,address) virtual public view returns (\r\n        uint256 lockedCollateral,  // [wad]\r\n        uint256 generatedDebt      // [wad]\r\n    );\r\n    function confiscateSAFECollateralAndDebt(bytes32,address,address,address,int,int) virtual external;\r\n    function canModifySAFE(address, address) virtual public view returns (bool);\r\n    function approveSAFEModification(address) virtual external;\r\n    function denySAFEModification(address) virtual external;\r\n}\r\nabstract contract AccountingEngineLike {\r\n    function pushDebtToQueue(uint) virtual external;\r\n}\r\n\r\ncontract LiquidationEngine {\r\n    // --- Auth ---\r\n    mapping (address => uint) public authorizedAccounts;\r\n    /**\r\n     * @notice Add auth to an account\r\n     * @param account Account to add auth to\r\n     */\r\n    function addAuthorization(address account) external isAuthorized {\r\n        authorizedAccounts[account] = 1;\r\n        emit AddAuthorization(account);\r\n    }\r\n    /**\r\n     * @notice Remove auth from an account\r\n     * @param account Account to remove auth from\r\n     */\r\n    function removeAuthorization(address account) external isAuthorized {\r\n        authorizedAccounts[account] = 0;\r\n        emit RemoveAuthorization(account);\r\n    }\r\n    /**\r\n    * @notice Checks whether msg.sender can call an authed function\r\n    **/\r\n    modifier isAuthorized {\r\n        require(authorizedAccounts[msg.sender] == 1, \"LiquidationEngine/account-not-authorized\");\r\n        _;\r\n    }\r\n\r\n    // --- SAFE Saviours ---\r\n    // Contracts that can save SAFEs from liquidation\r\n    mapping (address => uint) public safeSaviours;\r\n    /**\r\n    * @notice Authed function to add contracts that can save SAFEs from liquidation\r\n    * @param saviour SAFE saviour contract to be whitelisted\r\n    **/\r\n    function connectSAFESaviour(address saviour) external isAuthorized {\r\n        (bool ok, uint256 collateralAdded, uint256 liquidatorReward) =\r\n          SAFESaviourLike(saviour).saveSAFE(address(this), \"\", address(0));\r\n        require(ok, \"LiquidationEngine/saviour-not-ok\");\r\n        require(both(collateralAdded == uint(-1), liquidatorReward == uint(-1)), \"LiquidationEngine/invalid-amounts\");\r\n        safeSaviours[saviour] = 1;\r\n        emit ConnectSAFESaviour(saviour);\r\n    }\r\n    /**\r\n    * @notice Governance used function to remove contracts that can save SAFEs from liquidation\r\n    * @param saviour SAFE saviour contract to be removed\r\n    **/\r\n    function disconnectSAFESaviour(address saviour) external isAuthorized {\r\n        safeSaviours[saviour] = 0;\r\n        emit DisconnectSAFESaviour(saviour);\r\n    }\r\n\r\n    // --- Data ---\r\n    struct CollateralType {\r\n        // Address of the collateral auction house handling liquidations for this collateral type\r\n        address collateralAuctionHouse;\r\n        // Penalty applied to every liquidation involving this collateral type. Discourages SAFE users from bidding on their own SAFEs\r\n        uint256 liquidationPenalty;                                                                                                   // [wad]\r\n        // Max amount of system coins to request in one auction\r\n        uint256 liquidationQuantity;                                                                                                  // [rad]\r\n    }\r\n\r\n    // Collateral types included in the system\r\n    mapping (bytes32 => CollateralType)              public collateralTypes;\r\n    // Saviour contract chosen for each SAFE by its creator\r\n    mapping (bytes32 => mapping(address => address)) public chosenSAFESaviour;\r\n    // Mutex used to block against re-entrancy when 'liquidateSAFE' passes execution to a saviour\r\n    mapping (bytes32 => mapping(address => uint8))   public mutex;\r\n\r\n    // Max amount of system coins that can be on liquidation at any time\r\n    uint256 public onAuctionSystemCoinLimit;                                // [rad]\r\n    // Current amount of system coins out for liquidation\r\n    uint256 public currentOnAuctionSystemCoins;                             // [rad]\r\n    // Whether this contract is enabled\r\n    uint256 public contractEnabled;\r\n\r\n    SAFEEngineLike       public safeEngine;\r\n    AccountingEngineLike public accountingEngine;\r\n\r\n    // --- Events ---\r\n    event AddAuthorization(address account);\r\n    event RemoveAuthorization(address account);\r\n    event ConnectSAFESaviour(address saviour);\r\n    event DisconnectSAFESaviour(address saviour);\r\n    event UpdateCurrentOnAuctionSystemCoins(uint currentOnAuctionSystemCoins);\r\n    event ModifyParameters(bytes32 parameter, uint256 data);\r\n    event ModifyParameters(bytes32 parameter, address data);\r\n    event ModifyParameters(\r\n      bytes32 collateralType,\r\n      bytes32 parameter,\r\n      uint data\r\n    );\r\n    event ModifyParameters(\r\n      bytes32 collateralType,\r\n      bytes32 parameter,\r\n      address data\r\n    );\r\n    event DisableContract();\r\n    event Liquidate(\r\n      bytes32 indexed collateralType,\r\n      address indexed safe,\r\n      uint256 collateralAmount,\r\n      uint256 debtAmount,\r\n      uint256 amountToRaise,\r\n      address collateralAuctioneer,\r\n      uint256 auctionId\r\n    );\r\n    event SaveSAFE(\r\n      bytes32 indexed collateralType,\r\n      address indexed safe,\r\n      uint256 collateralAdded\r\n    );\r\n    event FailedSAFESave(bytes failReason);\r\n    event ProtectSAFE(\r\n      bytes32 collateralType,\r\n      address safe,\r\n      address saviour\r\n    );\r\n\r\n    // --- Init ---\r\n    constructor(address safeEngine_) public {\r\n        authorizedAccounts[msg.sender] = 1;\r\n        safeEngine = SAFEEngineLike(safeEngine_);\r\n        onAuctionSystemCoinLimit = uint(-1);\r\n        contractEnabled = 1;\r\n        emit AddAuthorization(msg.sender);\r\n        emit ModifyParameters(\"onAuctionSystemCoinLimit\", uint(-1));\r\n    }\r\n\r\n    // --- Math ---\r\n    uint256 constant WAD = 10 ** 18;\r\n    uint256 constant RAY = 10 ** 27;\r\n    uint256 constant MAX_LIQUIDATION_QUANTITY = uint256(-1) / RAY;\r\n\r\n    function addition(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x);\r\n    }\r\n    function subtract(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x);\r\n    }\r\n    function multiply(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n    function rmultiply(uint x, uint y) internal pure returns (uint z) {\r\n        z = multiply(x, y) / RAY;\r\n    }\r\n    function minimum(uint x, uint y) internal pure returns (uint z) {\r\n        if (x > y) { z = y; } else { z = x; }\r\n    }\r\n\r\n    // --- Utils ---\r\n    function both(bool x, bool y) internal pure returns (bool z) {\r\n        assembly{ z := and(x, y)}\r\n    }\r\n\r\n    // --- Administration ---\r\n    /*\r\n    * @notice Modify uint256 parameters\r\n    * @param paramter The name of the parameter modified\r\n    * @param data Value for the new parameter\r\n    */\r\n    function modifyParameters(bytes32 parameter, uint256 data) external isAuthorized {\r\n        if (parameter == \"onAuctionSystemCoinLimit\") onAuctionSystemCoinLimit = data;\r\n        else revert(\"LiquidationEngine/modify-unrecognized-param\");\r\n        emit ModifyParameters(parameter, data);\r\n    }\r\n    /**\r\n     * @notice Modify contract integrations\r\n     * @param parameter The name of the parameter modified\r\n     * @param data New address for the parameter\r\n     */\r\n    function modifyParameters(bytes32 parameter, address data) external isAuthorized {\r\n        if (parameter == \"accountingEngine\") accountingEngine = AccountingEngineLike(data);\r\n        else revert(\"LiquidationEngine/modify-unrecognized-param\");\r\n        emit ModifyParameters(parameter, data);\r\n    }\r\n    /**\r\n     * @notice Modify liquidation params\r\n     * @param collateralType The collateral type we change parameters for\r\n     * @param parameter The name of the parameter modified\r\n     * @param data New value for the parameter\r\n     */\r\n    function modifyParameters(\r\n        bytes32 collateralType,\r\n        bytes32 parameter,\r\n        uint data\r\n    ) external isAuthorized {\r\n        if (parameter == \"liquidationPenalty\") collateralTypes[collateralType].liquidationPenalty = data;\r\n        else if (parameter == \"liquidationQuantity\") {\r\n          require(data <= MAX_LIQUIDATION_QUANTITY, \"LiquidationEngine/liquidation-quantity-overflow\");\r\n          collateralTypes[collateralType].liquidationQuantity = data;\r\n        }\r\n        else revert(\"LiquidationEngine/modify-unrecognized-param\");\r\n        emit ModifyParameters(\r\n          collateralType,\r\n          parameter,\r\n          data\r\n        );\r\n    }\r\n    /**\r\n     * @notice Modify collateral auction integration\r\n     * @param collateralType The collateral type we change parameters for\r\n     * @param parameter The name of the integration modified\r\n     * @param data New address for the integration contract\r\n     */\r\n    function modifyParameters(\r\n        bytes32 collateralType,\r\n        bytes32 parameter,\r\n        address data\r\n    ) external isAuthorized {\r\n        if (parameter == \"collateralAuctionHouse\") {\r\n            safeEngine.denySAFEModification(collateralTypes[collateralType].collateralAuctionHouse);\r\n            collateralTypes[collateralType].collateralAuctionHouse = data;\r\n            safeEngine.approveSAFEModification(data);\r\n        }\r\n        else revert(\"LiquidationEngine/modify-unrecognized-param\");\r\n        emit ModifyParameters(\r\n            collateralType,\r\n            parameter,\r\n            data\r\n        );\r\n    }\r\n    /**\r\n     * @notice Disable this contract (normally called by GlobalSettlement)\r\n     */\r\n    function disableContract() external isAuthorized {\r\n        contractEnabled = 0;\r\n        emit DisableContract();\r\n    }\r\n\r\n    // --- SAFE Liquidation ---\r\n    /**\r\n     * @notice Choose a saviour contract for your SAFE\r\n     * @param collateralType The SAFE's collateral type\r\n     * @param safe The SAFE's address\r\n     * @param saviour The chosen saviour\r\n     */\r\n    function protectSAFE(\r\n        bytes32 collateralType,\r\n        address safe,\r\n        address saviour\r\n    ) external {\r\n        require(safeEngine.canModifySAFE(safe, msg.sender), \"LiquidationEngine/cannot-modify-safe\");\r\n        require(saviour == address(0) || safeSaviours[saviour] == 1, \"LiquidationEngine/saviour-not-authorized\");\r\n        chosenSAFESaviour[collateralType][safe] = saviour;\r\n        emit ProtectSAFE(\r\n            collateralType,\r\n            safe,\r\n            saviour\r\n        );\r\n    }\r\n    /**\r\n     * @notice Liquidate a SAFE\r\n     * @param collateralType The SAFE's collateral type\r\n     * @param safe The SAFE's address\r\n     */\r\n    function liquidateSAFE(bytes32 collateralType, address safe) external returns (uint auctionId) {\r\n        require(mutex[collateralType][safe] == 0, \"LiquidationEngine/non-null-mutex\");\r\n        mutex[collateralType][safe] = 1;\r\n\r\n        (, uint accumulatedRate, , , uint debtFloor, uint liquidationPrice) = safeEngine.collateralTypes(collateralType);\r\n        (uint safeCollateral, uint safeDebt) = safeEngine.safes(collateralType, safe);\r\n\r\n        require(contractEnabled == 1, \"LiquidationEngine/contract-not-enabled\");\r\n        require(both(\r\n          liquidationPrice > 0,\r\n          multiply(safeCollateral, liquidationPrice) < multiply(safeDebt, accumulatedRate)\r\n        ), \"LiquidationEngine/safe-not-unsafe\");\r\n        require(\r\n          both(currentOnAuctionSystemCoins < onAuctionSystemCoinLimit,\r\n          subtract(onAuctionSystemCoinLimit, currentOnAuctionSystemCoins) >= debtFloor),\r\n          \"LiquidationEngine/liquidation-limit-hit\"\r\n        );\r\n\r\n        if (chosenSAFESaviour[collateralType][safe] != address(0) &&\r\n            safeSaviours[chosenSAFESaviour[collateralType][safe]] == 1) {\r\n          try SAFESaviourLike(chosenSAFESaviour[collateralType][safe]).saveSAFE(msg.sender, collateralType, safe)\r\n            returns (bool ok, uint256 collateralAdded, uint256) {\r\n            if (both(ok, collateralAdded > 0)) {\r\n              emit SaveSAFE(collateralType, safe, collateralAdded);\r\n            }\r\n          } catch (bytes memory revertReason) {\r\n            emit FailedSAFESave(revertReason);\r\n          }\r\n        }\r\n\r\n        // Checks that the saviour didn't take collateral or add more debt to the SAFE\r\n        {\r\n          (uint newSafeCollateral, uint newSafeDebt) = safeEngine.safes(collateralType, safe);\r\n          require(both(newSafeCollateral >= safeCollateral, newSafeDebt <= safeDebt), \"LiquidationEngine/invalid-safe-saviour-operation\");\r\n        }\r\n\r\n        (, accumulatedRate, , , , liquidationPrice) = safeEngine.collateralTypes(collateralType);\r\n        (safeCollateral, safeDebt) = safeEngine.safes(collateralType, safe);\r\n\r\n        if (both(liquidationPrice > 0, multiply(safeCollateral, liquidationPrice) < multiply(safeDebt, accumulatedRate))) {\r\n          CollateralType memory collateralData = collateralTypes[collateralType];\r\n\r\n          uint limitAdjustedDebt = minimum(\r\n            safeDebt,\r\n            multiply(minimum(collateralData.liquidationQuantity, subtract(onAuctionSystemCoinLimit, currentOnAuctionSystemCoins)), WAD) / accumulatedRate / collateralData.liquidationPenalty\r\n          );\r\n          uint collateralToSell = minimum(safeCollateral, multiply(safeCollateral, limitAdjustedDebt) / safeDebt);\r\n\r\n          require(both(limitAdjustedDebt > 0, collateralToSell > 0), \"LiquidationEngine/null-auction\");\r\n          require(both(collateralToSell <= 2**255, limitAdjustedDebt <= 2**255), \"LiquidationEngine/collateral-or-debt-overflow\");\r\n          // This can leave the SAFE with generatedDebt < debtFloor\r\n          safeEngine.confiscateSAFECollateralAndDebt(\r\n            collateralType, safe, address(this), address(accountingEngine), -int(collateralToSell), -int(limitAdjustedDebt)\r\n          );\r\n          accountingEngine.pushDebtToQueue(multiply(limitAdjustedDebt, accumulatedRate));\r\n\r\n          {\r\n            uint amountToRaise_         = multiply(multiply(limitAdjustedDebt, accumulatedRate), collateralData.liquidationPenalty) / WAD;\r\n            currentOnAuctionSystemCoins = addition(currentOnAuctionSystemCoins, amountToRaise_);\r\n\r\n            auctionId = CollateralAuctionHouseLike(collateralData.collateralAuctionHouse).startAuction(\r\n              { forgoneCollateralReceiver: safe\r\n              , initialBidder: address(accountingEngine)\r\n              , amountToRaise: amountToRaise_\r\n              , collateralToSell: collateralToSell\r\n              , initialBid: 0\r\n             });\r\n\r\n             emit UpdateCurrentOnAuctionSystemCoins(currentOnAuctionSystemCoins);\r\n          }\r\n\r\n          emit Liquidate(collateralType, safe, collateralToSell, limitAdjustedDebt, multiply(limitAdjustedDebt, accumulatedRate), collateralData.collateralAuctionHouse, auctionId);\r\n        }\r\n\r\n        mutex[collateralType][safe] = 0;\r\n    }\r\n    function removeCoinsFromAuction(uint rad) public isAuthorized {\r\n        currentOnAuctionSystemCoins = subtract(currentOnAuctionSystemCoins, rad);\r\n        emit UpdateCurrentOnAuctionSystemCoins(currentOnAuctionSystemCoins);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"safeEngine_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"saviour\",\"type\":\"address\"}],\"name\":\"ConnectSAFESaviour\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DisableContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"saviour\",\"type\":\"address\"}],\"name\":\"DisconnectSAFESaviour\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"failReason\",\"type\":\"bytes\"}],\"name\":\"FailedSAFESave\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"safe\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToRaise\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collateralAuctioneer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"Liquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"ModifyParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"}],\"name\":\"ModifyParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"ModifyParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"}],\"name\":\"ModifyParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"safe\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"saviour\",\"type\":\"address\"}],\"name\":\"ProtectSAFE\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemoveAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"safe\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAdded\",\"type\":\"uint256\"}],\"name\":\"SaveSAFE\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentOnAuctionSystemCoins\",\"type\":\"uint256\"}],\"name\":\"UpdateCurrentOnAuctionSystemCoins\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accountingEngine\",\"outputs\":[{\"internalType\":\"contract AccountingEngineLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedAccounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"chosenSAFESaviour\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"collateralTypes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"collateralAuctionHouse\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidationPenalty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationQuantity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"saviour\",\"type\":\"address\"}],\"name\":\"connectSAFESaviour\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractEnabled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentOnAuctionSystemCoins\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"saviour\",\"type\":\"address\"}],\"name\":\"disconnectSAFESaviour\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"safe\",\"type\":\"address\"}],\"name\":\"liquidateSAFE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mutex\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onAuctionSystemCoinLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"safe\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"saviour\",\"type\":\"address\"}],\"name\":\"protectSAFE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rad\",\"type\":\"uint256\"}],\"name\":\"removeCoinsFromAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeEngine\",\"outputs\":[{\"internalType\":\"contract SAFEEngineLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"safeSaviours\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"LiquidationEngine","CompilerVersion":"v0.6.7+commit.b8d736ae","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000f0b7808b940b78be81ad6f9e075ce8be4a837e2c","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://29a26cd6545c3f8c4ff2874b8c6e5baf19ab0b80b909fe9512a2a5b0e0ab596d"}]}