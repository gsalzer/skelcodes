{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n¸„.-•~¹°”ˆ˜¨ 𝙆𝙞𝙖𝙖𝙣 𝙚𝙎𝙥𝙤𝙧𝙩𝙨 ¨˜ˆ”°¹~•-.„¸ ¨˜ˆ”°¹~•-.„¸\r\n\r\n*/\r\n\r\npragma solidity 0.6.8;\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a); \r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Kiaan11\r\n{\r\n    using SafeMath for uint256;\r\n    address payable public Owner;\r\n    \r\n    // This is the constructor whose code is\r\n    // run only when the contract is created.\r\n    constructor() public payable {\r\n        Owner = msg.sender;\r\n    }\r\n    \r\n    function GetOwner() public view returns(address)\r\n    {\r\n        return Owner;\r\n    }\r\n    \r\n    // GetAddressCurrentBalance\r\n    function GetBalance(address strAddress) external view returns(uint)\r\n    {\r\n        return address(strAddress).balance;\r\n    }\r\n    \r\n    function JoinKiaan11(string memory InputData) public payable \r\n    {\r\n        if(keccak256(abi.encodePacked(InputData))==keccak256(abi.encodePacked('')))\r\n        {\r\n            // do nothing!\r\n            revert();\r\n        }\r\n        \r\n        if(msg.sender!=Owner)\r\n        {\r\n            Owner.transfer(msg.value);\r\n        }\r\n        else\r\n        {\r\n            // else do nothing!\r\n            revert();\r\n        }\r\n    }\r\n    \r\n    function Send(address payable toAddressID) public payable \r\n    {\r\n        if(msg.sender==Owner)\r\n        {\r\n            toAddressID.transfer(msg.value);\r\n        }\r\n        else\r\n        {\r\n            // else do nothing!\r\n            revert();\r\n        }\r\n    }\r\n    \r\n    function SendWithdrawals(address[] memory toAddressIDs, uint256[] memory tranValues) public payable \r\n    {\r\n        if(msg.sender==Owner)\r\n        {\r\n            uint256 total = msg.value;\r\n            uint256 i = 0;\r\n            for (i; i < toAddressIDs.length; i++) \r\n            {\r\n                require(total >= tranValues[i] );\r\n                total = total.sub(tranValues[i]);\r\n                payable(toAddressIDs[i]).transfer(tranValues[i]);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            // else do nothing!\r\n            revert();\r\n        }\r\n    }\r\n    \r\n    function Transfer() public\r\n    {\r\n      Owner.transfer(address(this).balance);  \r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strAddress\",\"type\":\"address\"}],\"name\":\"GetBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GetOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"InputData\",\"type\":\"string\"}],\"name\":\"JoinKiaan11\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"toAddressID\",\"type\":\"address\"}],\"name\":\"Send\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"toAddressIDs\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tranValues\",\"type\":\"uint256[]\"}],\"name\":\"SendWithdrawals\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Kiaan11","CompilerVersion":"v0.6.8+commit.0bbfe453","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://20c1dd59dd128e61a76f8abf48565d19b33216f2bd48e81c620d08706355a6fc"}]}