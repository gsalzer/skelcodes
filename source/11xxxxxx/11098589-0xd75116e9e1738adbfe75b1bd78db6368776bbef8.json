{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.4.0 <0.8.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract StakingToken is Ownable {\r\n    \r\n    //initializing safe computations\r\n    using SafeMath for uint;\r\n\r\n    IERC20 public contractAddress;\r\n    uint public stakingPool;\r\n    uint public stakeholdersIndex;\r\n    uint public totalStakes;\r\n    uint private setTime;\r\n    uint public minimumStakeValue;\r\n    \r\n    uint rewardToShare;\r\n\r\n    struct Referrals {\r\n        uint referralcount;\r\n        address[] referredAddresses;    \r\n    }\r\n    \r\n    struct ReferralBonus {\r\n        uint uplineProfit;\r\n    }\r\n    \r\n    struct Stakeholder {\r\n         bool staker;\r\n         uint id;\r\n    }\r\n\r\n    modifier validatStake(uint _stake, address referree) {\r\n        require(_stake >= minimumStakeValue, \"Amount is below minimum stake value.\");\r\n        require(contractAddress.balanceOf(msg.sender) >= _stake, \"Must have enough balance to stake\");\r\n        require(referree != address(0), \"Referee is zero address\");\r\n        require(\r\n            contractAddress.allowance(msg.sender, address(this)) >= _stake, \r\n            \"Must approve tokens before staking\"\r\n        );\r\n        _;\r\n    }\r\n    \r\n    mapping (address => Stakeholder) public stakeholders;\r\n    mapping (uint => address) public stakeholdersReverseMapping;\r\n    mapping(address => uint256) private stakes;\r\n    mapping(address => address) public addressThatReferred;\r\n    mapping(address => bool) private exist;\r\n    mapping(address => uint256) private rewards;\r\n    mapping(address => Referrals) private referral;\r\n    mapping(address => ReferralBonus) public bonus;\r\n    mapping(address => uint256) private time;\r\n    mapping(address => bool) public registered;\r\n\r\n    constructor(IERC20 _contractAddress) {\r\n        contractAddress = _contractAddress;\r\n        stakingPool = 0;\r\n        stakeholdersIndex = 0;\r\n        totalStakes = 0;\r\n        totalStakes = 0;\r\n        setTime = 0;\r\n        rewardToShare = 0;\r\n        minimumStakeValue = 1 ether;\r\n        \r\n       \r\n        // Add deployer a stakeholder\r\n        stakeholders[msg.sender].staker = true;    \r\n        stakeholders[msg.sender].id = stakeholdersIndex;\r\n        stakeholdersReverseMapping[stakeholdersIndex] = msg.sender;\r\n        stakeholdersIndex = stakeholdersIndex++;\r\n        stakes[msg.sender] = stakes[msg.sender].add(0);\r\n        totalStakes = totalStakes.add(0);\r\n        registered[msg.sender] = true;\r\n    }\r\n    \r\n     /* referree bonus will be added to his reward automatically*/\r\n    function addUplineProfit(address _stakeholderAddress, uint _amount) private  {\r\n        require(_amount > 0, \"Can not increment amount by zero\");\r\n        bonus[_stakeholderAddress].uplineProfit =  bonus[_stakeholderAddress].uplineProfit.add(_amount);\r\n    } \r\n    \r\n    /* return referree bonus to zero*/\r\n    function revertUplineProfit(address _stakeholderAddress) private {\r\n        bonus[_stakeholderAddress].uplineProfit =  0;\r\n    } \r\n     \r\n     /*returns referralcount for a stakeholder*/\r\n    function stakeholderReferralCount(address stakeholderAddress) external view returns(uint) {\r\n        return referral[stakeholderAddress].referralcount;\r\n     }\r\n    \r\n    /*check if _refereeAddress belongs to a stakeholder and \r\n    add a count, add referral to stakeholder referred list, and whitelist referral\r\n    assign the address that referred a stakeholder to that stakeholder to enable send bonus to referee\r\n    */\r\n    function addReferee(address _refereeAddress) private {\r\n        require(msg.sender != _refereeAddress, 'cannot add your address as your referral');\r\n        require(exist[msg.sender] == false, 'already submitted your referee' );\r\n        require(stakeholders[_refereeAddress].staker == true, 'address does not belong to a stakeholders');\r\n\r\n        referral[_refereeAddress].referralcount =  referral[_refereeAddress].referralcount.add(1);   \r\n        referral[_refereeAddress].referredAddresses.push(msg.sender);\r\n        addressThatReferred[msg.sender] = _refereeAddress;\r\n        exist[msg.sender] = true;\r\n    }\r\n    \r\n    /*returns stakeholders Referred List\r\n    */\r\n    function stakeholdersReferredList(address stakeholderAddress) view external returns(address[] memory){\r\n      return referral[stakeholderAddress].referredAddresses;\r\n    }\r\n    \r\n    function bal(address addr) public view returns(uint) {\r\n        return contractAddress.balanceOf(addr);\r\n    }\r\n    \r\n    function approvedTokenBalance(address _sender) external view returns(uint) {\r\n        return contractAddress.allowance(_sender, address(this));\r\n    }\r\n    \r\n    function newStake(uint _stake, address referree) external validatStake(_stake, referree) {\r\n        require(\r\n            stakes[msg.sender] == 0 && \r\n            !registered[msg.sender], \r\n            \"Already a stakeholder\"\r\n        );\r\n\r\n        addStakeholder(msg.sender); \r\n        uint registerCost = registrationAndFirstStakeCost(_stake);\r\n        uint stakeToPool = _stake.sub(registerCost);\r\n        stakingPool = stakingPool.add(stakeToPool);\r\n        stakes[msg.sender] = stakes[msg.sender].add(registerCost);\r\n        totalStakes = totalStakes.add(registerCost);\r\n        registered[msg.sender] = true;\r\n\r\n        // Aprrove tokens before calling transferFrom\r\n        contractAddress.transferFrom(msg.sender, address(this), _stake);\r\n        addReferee(referree);\r\n    }\r\n    \r\n    function stake(uint _stake, address referree) external validatStake(_stake, referree) { \r\n        require(\r\n            stakes[msg.sender] > 0 && \r\n            registered[msg.sender], \r\n            \"Not a stakeholder, use the newStake method to stake\"\r\n        );\r\n        // check previous stake balance\r\n        uint previousStakeBalance = stakes[msg.sender];\r\n\r\n        uint availableTostake = calculateStakingCost(_stake);\r\n        uint stakeToPool2 = _stake.sub(availableTostake);\r\n        stakingPool = stakingPool.add(stakeToPool2);\r\n        stakes[msg.sender] = previousStakeBalance.add(availableTostake);\r\n        totalStakes = totalStakes.add(availableTostake);\r\n        contractAddress.transferFrom(msg.sender, address(this), _stake);\r\n    }\r\n    \r\n     function stakeOf(address _stakeholder) external view returns(uint256) {\r\n        return stakes[_stakeholder];\r\n    }\r\n    \r\n     function removeStake(uint _stake) external {\r\n        require(stakes[msg.sender] > 0, 'stakes must be above 0');\r\n        stakes[msg.sender] = stakes[msg.sender].sub(_stake);\r\n         if(stakes[msg.sender] == 0){\r\n             removeStakeholder(msg.sender);\r\n         }\r\n        uint stakeToReceive = calculateUnstakingCost(_stake);\r\n        uint stakeToPool = _stake.sub(stakeToReceive);\r\n        stakingPool = stakingPool.add(stakeToPool);\r\n        totalStakes = totalStakes.sub(_stake);\r\n        rewards[msg.sender] = 0;\r\n        contractAddress.transfer(msg.sender, stakeToReceive);\r\n    }\r\n    \r\n    function addStakeholder(address _stakeholder) private {\r\n        if(stakeholders[_stakeholder].staker == false) {\r\n            stakeholders[_stakeholder].staker = true;    \r\n            stakeholders[_stakeholder].id = stakeholdersIndex;\r\n            stakeholdersReverseMapping[stakeholdersIndex] = _stakeholder;\r\n            stakeholdersIndex = stakeholdersIndex.add(1);\r\n        }\r\n    }\r\n   \r\n    function removeStakeholder(address _stakeholder) private  {\r\n        if (stakeholders[_stakeholder].staker == true) {\r\n            // get id of the stakeholders to be deleted\r\n            uint swappableId = stakeholders[_stakeholder].id;\r\n            \r\n            // swap the stakeholders info and update admins mapping\r\n            // get the last stakeholdersReverseMapping address for swapping\r\n            address swappableAddress = stakeholdersReverseMapping[stakeholdersIndex -1];\r\n            \r\n            // swap the stakeholdersReverseMapping and then reduce stakeholder index\r\n            stakeholdersReverseMapping[swappableId] = stakeholdersReverseMapping[stakeholdersIndex - 1];\r\n            \r\n            // also remap the stakeholder id\r\n            stakeholders[swappableAddress].id = swappableId;\r\n            \r\n            // delete and reduce admin index \r\n            delete(stakeholders[_stakeholder]);\r\n            delete(stakeholdersReverseMapping[stakeholdersIndex - 1]);\r\n            stakeholdersIndex = stakeholdersIndex.sub(1);\r\n        }\r\n    }\r\n    \r\n    function setRewardToShareWeekly(uint _value) external onlyOwner() {\r\n        require(block.timestamp > setTime, 'wait 24hrs from last call');\r\n        setTime = block.timestamp.add(_value);\r\n        rewardToShare = stakingPool.div(2);\r\n        stakingPool = stakingPool.sub(rewardToShare);\r\n    }\r\n    \r\n    function getRewardToShareWeekly() external view returns(uint) {\r\n        return stakingPool;\r\n    }\r\n    \r\n    function getRewards() external returns(uint) {\r\n        require(exist[msg.sender], 'address does not belong to a stakeholders');\r\n        require(rewardToShare > 0, 'no reward to share at this time');\r\n        require(block.timestamp > time[msg.sender], 'can only call this function once a week');\r\n        time[msg.sender] = block.timestamp + 8 days;\r\n        uint256 reward = calculateReward(msg.sender);\r\n        \r\n        uint removeFromReward = reward.mul(5).div(100);\r\n        uint userRewardAfterUpLineBonus = reward.sub(removeFromReward);\r\n        address addr = addressThatReferred[msg.sender];\r\n        addUplineProfit(addr, removeFromReward);\r\n        rewards[msg.sender] = rewards[msg.sender].add(userRewardAfterUpLineBonus);\r\n        \r\n        rewards[msg.sender] = rewards[msg.sender].add(reward);\r\n        return rewards[msg.sender];\r\n    }\r\n    \r\n     function getReferralBonus() external {\r\n        require(stakeholders[msg.sender].staker == true, 'address does not belong to a stakeholders');\r\n        require(bonus[msg.sender].uplineProfit > 0, 'you do not have any bonus');\r\n        uint bonusToGet = bonus[msg.sender].uplineProfit;\r\n        rewards[msg.sender] = rewards[msg.sender].add(bonusToGet);\r\n        revertUplineProfit(msg.sender);\r\n    }\r\n    \r\n    /* return will converted to ether in frontend*/\r\n    function rewardOf(address _stakeholder) external view returns(uint256){\r\n        return rewards[_stakeholder];\r\n    }\r\n    \r\n    function calculateReward(address _stakeholder) internal view returns(uint256) {\r\n        return ((stakes[_stakeholder].mul(rewardToShare)).div(totalStakes));\r\n    }\r\n    \r\n    function registrationAndFirstStakeCost(uint256 _stake) private pure returns(uint) {\r\n        uint cost =  (_stake).mul(20);\r\n        uint percent = cost.div(100);\r\n        uint availableForstake = _stake.sub(percent);\r\n        return availableForstake;\r\n    }\r\n    \r\n     /*skaing cost 10% */\r\n    function calculateStakingCost(uint256 _stake) private pure returns(uint availableForstake) {\r\n        uint stakingCost =  (_stake).mul(10);\r\n        uint percent = stakingCost.div(100);\r\n\r\n        availableForstake = _stake.sub(percent);\r\n        return availableForstake;\r\n    }\r\n    \r\n    /*unskaing cost 20% */\r\n    function calculateUnstakingCost(uint _stake) private pure returns(uint ) {\r\n        uint unstakingCost =  (_stake).mul(20);\r\n        uint percent = unstakingCost.div(100);\r\n        uint stakeReceived = _stake.sub(percent);\r\n        return stakeReceived;\r\n    }\r\n    \r\n    function withdrawReward() public {\r\n        require(rewards[msg.sender] > 0, 'reward balance must be above 0');\r\n        require(stakeholders[msg.sender].staker == true, 'address does not belong to a stakeholders');\r\n        uint256 reward = rewards[msg.sender];\r\n        contractAddress.transfer(msg.sender, reward);\r\n        rewards[msg.sender] = 0;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_contractAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressThatReferred\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"approvedTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"bal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"uplineProfit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractAddress\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReferralBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardToShareWeekly\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumStakeValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referree\",\"type\":\"address\"}],\"name\":\"newStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"registered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stake\",\"type\":\"uint256\"}],\"name\":\"removeStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeholder\",\"type\":\"address\"}],\"name\":\"rewardOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setRewardToShareWeekly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referree\",\"type\":\"address\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeholder\",\"type\":\"address\"}],\"name\":\"stakeOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakeholderAddress\",\"type\":\"address\"}],\"name\":\"stakeholderReferralCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeholders\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"staker\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeholdersIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakeholderAddress\",\"type\":\"address\"}],\"name\":\"stakeholdersReferredList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeholdersReverseMapping\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StakingToken","CompilerVersion":"v0.7.0+commit.9e61f92b","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000040b0b0e1b4cde9924c206a19289ce3f6e879af4c","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e3fe36a137c02767dfe94ce34059d34978e8bcee2b84c636d27c76c947095f15"}]}