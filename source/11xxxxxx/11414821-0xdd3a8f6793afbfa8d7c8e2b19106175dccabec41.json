{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.10;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface TRC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {TRC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20Mintable}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {TRC20-approve}.\r\n */\r\ncontract ERC20 is Context, TRC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    // allocating 10 million tokens for xswap liquidity, promotions, airdrop and dev costs\r\n    uint256 private _totalSupply = 10000000 * (10 ** 8);\r\n\r\n    constructor() public {\r\n        _balances[msg.sender] = _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {TRC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {TRC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {TRC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {TRC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {TRC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {TRC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {TRC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {TRC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n     /**\r\n     * @dev External function to destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     */\r\n    function burn(uint256 amount) external {\r\n        require(_balances[msg.sender] >= amount, \"ERC20: not enough balance!\");\r\n\r\n        _burn(msg.sender, amount);\r\n    }\r\n\r\n     /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\r\n    }\r\n}\r\n\r\ncontract GlobalsAndUtility is ERC20 {\r\n    /*  XfLobbyEnter\r\n    */\r\n    event XfLobbyEnter(\r\n        uint256 timestamp,\r\n        uint256 enterDay,\r\n        uint256 indexed entryIndex,\r\n        uint256 indexed rawAmount\r\n    );\r\n\r\n    /*  XfLobbyExit \r\n    */\r\n    event XfLobbyExit(\r\n        uint256 timestamp,\r\n        uint256 enterDay,\r\n        uint256 indexed entryIndex,\r\n        uint256 indexed xfAmount,\r\n        address indexed referrerAddr\r\n    );\r\n\r\n    /*  DailyDataUpdate\r\n    */\r\n    event DailyDataUpdate(\r\n        address indexed updaterAddr,\r\n        uint256 timestamp,\r\n        uint256 beginDay,\r\n        uint256 endDay\r\n    );\r\n\r\n    /*  StakeStart\r\n    */\r\n    event StakeStart(\r\n        uint40 indexed stakeId,\r\n        address indexed stakerAddr,\r\n        uint256 stakedSuns,\r\n        uint256 stakeShares,\r\n        uint256 stakedDays\r\n    );\r\n    \r\n    /*  StakeGoodAccounting\r\n    */\r\n    event StakeGoodAccounting(\r\n        uint40 indexed stakeId,\r\n        address indexed stakerAddr,\r\n        address indexed senderAddr,\r\n        uint256 stakedSuns,\r\n        uint256 stakeShares,\r\n        uint256 payout,\r\n        uint256 penalty\r\n    );\r\n\r\n    /*  StakeEnd \r\n    */\r\n    event StakeEnd(\r\n        uint40 indexed stakeId,\r\n        uint40 prevUnlocked,\r\n        address indexed stakerAddr,\r\n        uint256 lockedDay,\r\n        uint256 servedDays,\r\n        uint256 stakedSuns,\r\n        uint256 stakeShares,\r\n        uint256 dividends,\r\n        uint256 payout,\r\n        uint256 penalty,\r\n        uint256 stakeReturn\r\n    );\r\n\r\n    /*  ShareRateChange \r\n    */\r\n    event ShareRateChange(\r\n        uint40 indexed stakeId,\r\n        uint256 timestamp,\r\n        uint256 newShareRate\r\n    );\r\n\r\n    /* ELCK allocation share address */\r\n    address payable internal constant ELCK_SHARE_ADDR = 0x2F6391B9E817033706540D1CFE416b6e68e51ca0;\r\n\r\n    uint8 internal LAST_FLUSHED_DAY = 1;\r\n\r\n    /* ERC20 constants */\r\n    string public constant name = \"ELCK\";\r\n    string public constant symbol = \"ELCK\";\r\n    uint8 public constant decimals = 8;\r\n\r\n    /* Suns per Satoshi = 10,000 * 1e8 / 1e8 = 1e4 */\r\n    uint256 private constant SUNS_PER_ELCK = 10 ** uint256(decimals); // 1e8\r\n\r\n    /* Time of contract launch (08-12-2020 T00:00:00Z) */\r\n    uint256 internal constant LAUNCH_TIME = 1607385600;\r\n\r\n    /* Start of claim phase */\r\n    uint256 internal constant PRE_CLAIM_DAYS = 1;\r\n    uint256 internal constant CLAIM_STARTING_AMOUNT = 5000000 * (10 ** 8);\r\n    uint256 internal constant CLAIM_LOWEST_AMOUNT = 100000 * (10 ** 8);\r\n    uint256 internal constant CLAIM_PHASE_START_DAY = PRE_CLAIM_DAYS;\r\n\r\n    /* Number of words to hold 1 bit for each transform lobby day */\r\n    uint256 internal constant XF_LOBBY_DAY_WORDS = ((1 + (50 * 7)) + 255) >> 8;\r\n\r\n    /* Stake timing parameters */\r\n    uint256 internal constant MIN_STAKE_DAYS = 1;\r\n\r\n    uint256 internal constant MAX_STAKE_DAYS = 365;\r\n\r\n    uint256 internal constant EARLY_PENALTY_MIN_DAYS = 90;\r\n\r\n    uint256 private constant LATE_PENALTY_GRACE_WEEKS = 2;\r\n    uint256 internal constant LATE_PENALTY_GRACE_DAYS = LATE_PENALTY_GRACE_WEEKS * 7;\r\n\r\n    uint256 private constant LATE_PENALTY_SCALE_WEEKS = 100;\r\n    uint256 internal constant LATE_PENALTY_SCALE_DAYS = LATE_PENALTY_SCALE_WEEKS * 7;\r\n\r\n    /* Stake shares Longer Pays Better bonus constants used by _stakeStartBonusSuns() */\r\n    uint256 private constant LPB_BONUS_PERCENT = 20;\r\n    uint256 private constant LPB_BONUS_MAX_PERCENT = 200;\r\n    uint256 internal constant LPB = 364 * 100 / LPB_BONUS_PERCENT;\r\n    uint256 internal constant LPB_MAX_DAYS = LPB * LPB_BONUS_MAX_PERCENT / 100;\r\n\r\n    /* Stake shares Bigger Pays Better bonus constants used by _stakeStartBonusSuns() */\r\n    uint256 private constant BPB_BONUS_PERCENT = 10;\r\n    uint256 private constant BPB_MAX_ELCK = 7 * 1e6;\r\n    uint256 internal constant BPB_MAX_SUNS = BPB_MAX_ELCK * SUNS_PER_ELCK;\r\n    uint256 internal constant BPB = BPB_MAX_SUNS * 100 / BPB_BONUS_PERCENT;\r\n\r\n    /* Share rate is scaled to increase precision */\r\n    uint256 internal constant SHARE_RATE_SCALE = 1e5;\r\n\r\n    /* Share rate max (after scaling) */\r\n    uint256 internal constant SHARE_RATE_UINT_SIZE = 40;\r\n    uint256 internal constant SHARE_RATE_MAX = (1 << SHARE_RATE_UINT_SIZE) - 1;\r\n\r\n    /* weekly staking bonus */\r\n    uint8 internal constant BONUS_DAY_SCALE = 2;\r\n\r\n    /* Globals expanded for memory (except _latestStakeId) and compact for storage */\r\n    struct GlobalsCache {\r\n        uint256 _lockedSunsTotal;\r\n        uint256 _nextStakeSharesTotal;\r\n        uint256 _shareRate;\r\n        uint256 _stakePenaltyTotal;\r\n        uint256 _dailyDataCount;\r\n        uint256 _stakeSharesTotal;\r\n        uint40 _latestStakeId;\r\n        uint256 _currentDay;\r\n    }\r\n\r\n    struct GlobalsStore {\r\n        uint72 lockedSunsTotal;\r\n        uint72 nextStakeSharesTotal;\r\n        uint40 shareRate;\r\n        uint72 stakePenaltyTotal;\r\n        uint16 dailyDataCount;\r\n        uint72 stakeSharesTotal;\r\n        uint40 latestStakeId;\r\n    }\r\n\r\n    GlobalsStore public globals;\r\n\r\n    /* Daily data */\r\n    struct DailyDataStore {\r\n        uint72 dayPayoutTotal;\r\n        uint256 dayDividends;\r\n        uint72 dayStakeSharesTotal;\r\n    }\r\n\r\n    mapping(uint256 => DailyDataStore) public dailyData;\r\n\r\n    /* Stake expanded for memory (except _stakeId) and compact for storage */\r\n    struct StakeCache {\r\n        uint40 _stakeId;\r\n        uint256 _stakedSuns;\r\n        uint256 _stakeShares;\r\n        uint256 _lockedDay;\r\n        uint256 _stakedDays;\r\n        uint256 _unlockedDay;\r\n    }\r\n\r\n    struct StakeStore {\r\n        uint40 stakeId;\r\n        uint72 stakedSuns;\r\n        uint72 stakeShares;\r\n        uint16 lockedDay;\r\n        uint16 stakedDays;\r\n        uint16 unlockedDay;\r\n    }\r\n\r\n    mapping(address => StakeStore[]) public stakeLists;\r\n\r\n    /* Temporary state for calculating daily rounds */\r\n    struct DailyRoundState {\r\n        uint256 _allocSupplyCached;\r\n        uint256 _payoutTotal;\r\n    }\r\n\r\n    struct XfLobbyEntryStore {\r\n        uint96 rawAmount;\r\n        address referrerAddr;\r\n    }\r\n\r\n    struct XfLobbyQueueStore {\r\n        uint40 headIndex;\r\n        uint40 tailIndex;\r\n        mapping(uint256 => XfLobbyEntryStore) entries;\r\n    }\r\n\r\n    mapping(uint256 => uint256) public xfLobby;\r\n    mapping(uint256 => mapping(address => XfLobbyQueueStore)) public xfLobbyMembers;\r\n\r\n    /**\r\n     * @dev PUBLIC FACING: Optionally update daily data for a smaller\r\n     * range to reduce gas cost for a subsequent operation\r\n     * @param beforeDay Only update days before this day number (optional; 0 for current day)\r\n     */\r\n    function dailyDataUpdate(uint256 beforeDay)\r\n        external\r\n    {\r\n        GlobalsCache memory g;\r\n        GlobalsCache memory gSnapshot;\r\n        _globalsLoad(g, gSnapshot);\r\n\r\n        /* Skip pre-claim period */\r\n        require(g._currentDay > CLAIM_PHASE_START_DAY, \"ELCK: Too early\");\r\n\r\n        if (beforeDay != 0) {\r\n            require(beforeDay <= g._currentDay, \"ELCK: beforeDay cannot be in the future\");\r\n\r\n            _dailyDataUpdate(g, beforeDay, false);\r\n        } else {\r\n            /* Default to updating before current day */\r\n            _dailyDataUpdate(g, g._currentDay, false);\r\n        }\r\n\r\n        _globalsSync(g, gSnapshot);\r\n    }\r\n\r\n    /**\r\n     * @dev PUBLIC FACING: External helper to return multiple values of daily data with\r\n     * a single call.\r\n     * @param beginDay First day of data range\r\n     * @param endDay Last day (non-inclusive) of data range\r\n     * @return array of day stake shares total\r\n     * @return array of day payout total\r\n     */\r\n    function dailyDataRange(uint256 beginDay, uint256 endDay)\r\n        external\r\n        view\r\n        returns (uint256[] memory _dayStakeSharesTotal, uint256[] memory _dayPayoutTotal, uint256[] memory _dayDividends)\r\n    {\r\n        require(beginDay < endDay && endDay <= globals.dailyDataCount, \"ELCK: range invalid\");\r\n\r\n        _dayStakeSharesTotal = new uint256[](endDay - beginDay);\r\n        _dayPayoutTotal = new uint256[](endDay - beginDay);\r\n        _dayDividends = new uint256[](endDay - beginDay);\r\n\r\n        uint256 src = beginDay;\r\n        uint256 dst = 0;\r\n        do {\r\n            _dayStakeSharesTotal[dst] = uint256(dailyData[src].dayStakeSharesTotal);\r\n            _dayPayoutTotal[dst++] = uint256(dailyData[src].dayPayoutTotal);\r\n            _dayDividends[dst++] = dailyData[src].dayDividends;\r\n        } while (++src < endDay);\r\n\r\n        return (_dayStakeSharesTotal, _dayPayoutTotal, _dayDividends);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev PUBLIC FACING: External helper to return most global info with a single call.\r\n     * Ugly implementation due to limitations of the standard ABI encoder.\r\n     * @return Fixed array of values\r\n     */\r\n    function globalInfo()\r\n        external\r\n        view\r\n        returns (uint256[10] memory)\r\n    {\r\n\r\n        return [\r\n            globals.lockedSunsTotal,\r\n            globals.nextStakeSharesTotal,\r\n            globals.shareRate,\r\n            globals.stakePenaltyTotal,\r\n            globals.dailyDataCount,\r\n            globals.stakeSharesTotal,\r\n            globals.latestStakeId,\r\n            block.timestamp,\r\n            totalSupply(),\r\n            xfLobby[_currentDay()]\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * @dev PUBLIC FACING: ERC20 totalSupply() is the circulating supply and does not include any\r\n     * staked Suns. allocatedSupply() includes both.\r\n     * @return Allocated Supply in Suns\r\n     */\r\n    function allocatedSupply()\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return totalSupply() + globals.lockedSunsTotal;\r\n    }\r\n\r\n    /**\r\n     * @dev PUBLIC FACING: External helper for the current day number since launch time\r\n     * @return Current day number (zero-based)\r\n     */\r\n    function currentDay()\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _currentDay();\r\n    }\r\n\r\n    function _currentDay()\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (block.timestamp < LAUNCH_TIME){\r\n             return 0;\r\n        }else{\r\n             return (block.timestamp - LAUNCH_TIME) / 1 days;\r\n        }\r\n    }\r\n\r\n    function _dailyDataUpdateAuto(GlobalsCache memory g)\r\n        internal\r\n    {\r\n        _dailyDataUpdate(g, g._currentDay, true);\r\n    }\r\n\r\n    function _globalsLoad(GlobalsCache memory g, GlobalsCache memory gSnapshot)\r\n        internal\r\n        view\r\n    {\r\n        g._lockedSunsTotal = globals.lockedSunsTotal;\r\n        g._nextStakeSharesTotal = globals.nextStakeSharesTotal;\r\n        g._shareRate = globals.shareRate;\r\n        g._stakePenaltyTotal = globals.stakePenaltyTotal;\r\n        g._dailyDataCount = globals.dailyDataCount;\r\n        g._stakeSharesTotal = globals.stakeSharesTotal;\r\n        g._latestStakeId = globals.latestStakeId;\r\n        g._currentDay = _currentDay();\r\n\r\n        _globalsCacheSnapshot(g, gSnapshot);\r\n    }\r\n\r\n    function _globalsCacheSnapshot(GlobalsCache memory g, GlobalsCache memory gSnapshot)\r\n        internal\r\n        pure\r\n    {\r\n        gSnapshot._lockedSunsTotal = g._lockedSunsTotal;\r\n        gSnapshot._nextStakeSharesTotal = g._nextStakeSharesTotal;\r\n        gSnapshot._shareRate = g._shareRate;\r\n        gSnapshot._stakePenaltyTotal = g._stakePenaltyTotal;\r\n        gSnapshot._dailyDataCount = g._dailyDataCount;\r\n        gSnapshot._stakeSharesTotal = g._stakeSharesTotal;\r\n        gSnapshot._latestStakeId = g._latestStakeId;\r\n    }\r\n\r\n    function _globalsSync(GlobalsCache memory g, GlobalsCache memory gSnapshot)\r\n        internal\r\n    {\r\n        if (g._lockedSunsTotal != gSnapshot._lockedSunsTotal\r\n            || g._nextStakeSharesTotal != gSnapshot._nextStakeSharesTotal\r\n            || g._shareRate != gSnapshot._shareRate\r\n            || g._stakePenaltyTotal != gSnapshot._stakePenaltyTotal) {\r\n            globals.lockedSunsTotal = uint72(g._lockedSunsTotal);\r\n            globals.nextStakeSharesTotal = uint72(g._nextStakeSharesTotal);\r\n            globals.shareRate = uint40(g._shareRate);\r\n            globals.stakePenaltyTotal = uint72(g._stakePenaltyTotal);\r\n        }\r\n        if (g._dailyDataCount != gSnapshot._dailyDataCount\r\n            || g._stakeSharesTotal != gSnapshot._stakeSharesTotal\r\n            || g._latestStakeId != gSnapshot._latestStakeId) {\r\n            globals.dailyDataCount = uint16(g._dailyDataCount);\r\n            globals.stakeSharesTotal = uint72(g._stakeSharesTotal);\r\n            globals.latestStakeId = g._latestStakeId;\r\n        }\r\n    }\r\n\r\n    function _stakeLoad(StakeStore storage stRef, uint40 stakeIdParam, StakeCache memory st)\r\n        internal\r\n        view\r\n    {\r\n        /* Ensure caller's stakeIndex is still current */\r\n        require(stakeIdParam == stRef.stakeId, \"ELCK: stakeIdParam not in stake\");\r\n\r\n        st._stakeId = stRef.stakeId;\r\n        st._stakedSuns = stRef.stakedSuns;\r\n        st._stakeShares = stRef.stakeShares;\r\n        st._lockedDay = stRef.lockedDay;\r\n        st._stakedDays = stRef.stakedDays;\r\n        st._unlockedDay = stRef.unlockedDay;\r\n    }\r\n\r\n    function _stakeUpdate(StakeStore storage stRef, StakeCache memory st)\r\n        internal\r\n    {\r\n        stRef.stakeId = st._stakeId;\r\n        stRef.stakedSuns = uint72(st._stakedSuns);\r\n        stRef.stakeShares = uint72(st._stakeShares);\r\n        stRef.lockedDay = uint16(st._lockedDay);\r\n        stRef.stakedDays = uint16(st._stakedDays);\r\n        stRef.unlockedDay = uint16(st._unlockedDay);\r\n    }\r\n\r\n    function _stakeAdd(\r\n        StakeStore[] storage stakeListRef,\r\n        uint40 newStakeId,\r\n        uint256 newStakedSuns,\r\n        uint256 newStakeShares,\r\n        uint256 newLockedDay,\r\n        uint256 newStakedDays\r\n    )\r\n        internal\r\n    {\r\n        stakeListRef.push(\r\n            StakeStore(\r\n                newStakeId,\r\n                uint72(newStakedSuns),\r\n                uint72(newStakeShares),\r\n                uint16(newLockedDay),\r\n                uint16(newStakedDays),\r\n                uint16(0) // unlockedDay\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Efficiently delete from an unordered array by moving the last element\r\n     * to the \"hole\" and reducing the array length. Can change the order of the list\r\n     * and invalidate previously held indexes.\r\n     * @notice stakeListRef length and stakeIndex are already ensured valid in stakeEnd()\r\n     * @param stakeListRef Reference to stakeLists[stakerAddr] array in storage\r\n     * @param stakeIndex Index of the element to delete\r\n     */\r\n    function _stakeRemove(StakeStore[] storage stakeListRef, uint256 stakeIndex)\r\n        internal\r\n    {\r\n        uint256 lastIndex = stakeListRef.length - 1;\r\n\r\n        /* Skip the copy if element to be removed is already the last element */\r\n        if (stakeIndex != lastIndex) {\r\n            /* Copy last element to the requested element's \"hole\" */\r\n            stakeListRef[stakeIndex] = stakeListRef[lastIndex];\r\n        }\r\n\r\n        /*\r\n            Reduce the array length now that the array is contiguous.\r\n            Surprisingly, 'pop()' uses less gas than 'stakeListRef.length = lastIndex'\r\n        */\r\n        stakeListRef.pop();\r\n    }\r\n\r\n    /**\r\n     * @dev Estimate the stake payout for an incomplete day\r\n     * @param g Cache of stored globals\r\n     * @param stakeSharesParam Param from stake to calculate bonuses for\r\n     * @param day Day to calculate bonuses for\r\n     * @return Payout in Suns\r\n     */\r\n    function _estimatePayoutRewardsDay(GlobalsCache memory g, uint256 stakeSharesParam, uint256 day)\r\n        internal\r\n        view\r\n        returns (uint256 payout)\r\n    {\r\n        /* Prevent updating state for this estimation */\r\n        GlobalsCache memory gTmp;\r\n        _globalsCacheSnapshot(g, gTmp);\r\n\r\n        DailyRoundState memory rs;\r\n        rs._allocSupplyCached = totalSupply() + g._lockedSunsTotal;\r\n\r\n        _dailyRoundCalc(gTmp, rs, day);\r\n\r\n        /* Stake is no longer locked so it must be added to total as if it were */\r\n        gTmp._stakeSharesTotal += stakeSharesParam;\r\n\r\n        payout = rs._payoutTotal * stakeSharesParam / gTmp._stakeSharesTotal;\r\n\r\n        return payout;\r\n    }\r\n\r\n    function _dailyRoundCalc(GlobalsCache memory g, DailyRoundState memory rs, uint256 day)\r\n        private\r\n        view\r\n    {\r\n        /*\r\n            Calculate payout round\r\n\r\n            Inflation of 5.42% inflation per 364 days             (approx 1 year)\r\n            dailyInterestRate   = exp(log(1 + 5.42%)  / 364) - 1\r\n                                = exp(log(1 + 0.0542) / 364) - 1\r\n                                = exp(log(1.0542) / 364) - 1\r\n                                = 0.0.00014523452066           (approx)\r\n\r\n            payout  = allocSupply * dailyInterestRate\r\n                    = allocSupply / (1 / dailyInterestRate)\r\n                    = allocSupply / (1 / 0.00014523452066)\r\n                    = allocSupply / 6885.4153644438375            (approx)\r\n                    = allocSupply * 50000 / 68854153             (* 50000/50000 for int precision)\r\n        */\r\n        \r\n        rs._payoutTotal = (rs._allocSupplyCached * 50000 / 68854153);\r\n\r\n        if (g._stakePenaltyTotal != 0) {\r\n            rs._payoutTotal += g._stakePenaltyTotal;\r\n            g._stakePenaltyTotal = 0;\r\n        }\r\n    }\r\n\r\n    function _dailyRoundCalcAndStore(GlobalsCache memory g, DailyRoundState memory rs, uint256 day)\r\n        private\r\n    {\r\n        _dailyRoundCalc(g, rs, day);\r\n\r\n        dailyData[day].dayPayoutTotal = uint72(rs._payoutTotal);\r\n        dailyData[day].dayDividends = xfLobby[day];\r\n        dailyData[day].dayStakeSharesTotal = uint72(g._stakeSharesTotal);\r\n    }\r\n\r\n    function _dailyDataUpdate(GlobalsCache memory g, uint256 beforeDay, bool isAutoUpdate)\r\n        private\r\n    {\r\n        if (g._dailyDataCount >= beforeDay) {\r\n            /* Already up-to-date */\r\n            return;\r\n        }\r\n\r\n        DailyRoundState memory rs;\r\n        rs._allocSupplyCached = totalSupply() + g._lockedSunsTotal;\r\n\r\n        uint256 day = g._dailyDataCount;\r\n\r\n        _dailyRoundCalcAndStore(g, rs, day);\r\n\r\n        /* Stakes started during this day are added to the total the next day */\r\n        if (g._nextStakeSharesTotal != 0) {\r\n            g._stakeSharesTotal += g._nextStakeSharesTotal;\r\n            g._nextStakeSharesTotal = 0;\r\n        }\r\n\r\n        while (++day < beforeDay) {\r\n            _dailyRoundCalcAndStore(g, rs, day);\r\n        }\r\n\r\n        emit DailyDataUpdate(\r\n            msg.sender,\r\n            block.timestamp,\r\n            g._dailyDataCount, \r\n            day\r\n        );\r\n        \r\n        g._dailyDataCount = day;\r\n    }\r\n}\r\n\r\ncontract StakeableToken is GlobalsAndUtility {\r\n    /**\r\n     * @dev PUBLIC FACING: Open a stake.\r\n     * @param newStakedSuns Number of Suns to stake\r\n     * @param newStakedDays Number of days to stake\r\n     */\r\n    function stakeStart(uint256 newStakedSuns, uint256 newStakedDays)\r\n        external\r\n    {\r\n        GlobalsCache memory g;\r\n        GlobalsCache memory gSnapshot;\r\n        _globalsLoad(g, gSnapshot);\r\n\r\n        /* Enforce the minimum stake time */\r\n        require(newStakedDays >= MIN_STAKE_DAYS, \"ELCK: newStakedDays lower than minimum\");\r\n\r\n        /* Check if log data needs to be updated */\r\n        _dailyDataUpdateAuto(g);\r\n\r\n        _stakeStart(g, newStakedSuns, newStakedDays);\r\n\r\n        /* Remove staked Suns from balance of staker */\r\n        _burn(msg.sender, newStakedSuns);\r\n\r\n        _globalsSync(g, gSnapshot);\r\n    }\r\n\r\n    /**\r\n     * @dev PUBLIC FACING: Unlocks a completed stake, distributing the proceeds of any penalty\r\n     * immediately. The staker must still call stakeEnd() to retrieve their stake return (if any).\r\n     * @param stakerAddr Address of staker\r\n     * @param stakeIndex Index of stake within stake list\r\n     * @param stakeIdParam The stake's id\r\n     */\r\n    function stakeGoodAccounting(address stakerAddr, uint256 stakeIndex, uint40 stakeIdParam)\r\n        external\r\n    {\r\n        GlobalsCache memory g;\r\n        GlobalsCache memory gSnapshot;\r\n        _globalsLoad(g, gSnapshot);\r\n\r\n        /* require() is more informative than the default assert() */\r\n        require(stakeLists[stakerAddr].length != 0, \"ELCK: Empty stake list\");\r\n        require(stakeIndex < stakeLists[stakerAddr].length, \"ELCK: stakeIndex invalid\");\r\n\r\n        StakeStore storage stRef = stakeLists[stakerAddr][stakeIndex];\r\n\r\n        /* Get stake copy */\r\n        StakeCache memory st;\r\n        _stakeLoad(stRef, stakeIdParam, st);\r\n\r\n        /* Stake must have served full term */\r\n        require(g._currentDay >= st._lockedDay + st._stakedDays, \"ELCK: Stake not fully served\");\r\n\r\n        /* Stake must still be locked */\r\n        require(st._unlockedDay == 0, \"ELCK: Stake already unlocked\");\r\n\r\n        /* Check if log data needs to be updated */\r\n        _dailyDataUpdateAuto(g);\r\n\r\n        /* Unlock the completed stake */\r\n        _stakeUnlock(g, st);\r\n\r\n        /* stakeReturn & dividends values are unused here */\r\n        (, uint256 payout, uint256 dividends, uint256 penalty, uint256 cappedPenalty) = _stakePerformance(\r\n            g,\r\n            st,\r\n            st._stakedDays\r\n        );\r\n\r\n        emit StakeGoodAccounting(\r\n            stakeIdParam,\r\n            stakerAddr,\r\n            msg.sender,\r\n            st._stakedSuns,\r\n            st._stakeShares,\r\n            payout,\r\n            penalty\r\n        );\r\n\r\n        if (cappedPenalty != 0) {\r\n            g._stakePenaltyTotal += cappedPenalty;\r\n        }\r\n\r\n        /* st._unlockedDay has changed */\r\n        _stakeUpdate(stRef, st);\r\n\r\n        _globalsSync(g, gSnapshot);\r\n    }\r\n\r\n    /**\r\n     * @dev PUBLIC FACING: Closes a stake. The order of the stake list can change so\r\n     * a stake id is used to reject stale indexes.\r\n     * @param stakeIndex Index of stake within stake list\r\n     * @param stakeIdParam The stake's id\r\n     */\r\n    function stakeEnd(uint256 stakeIndex, uint40 stakeIdParam)\r\n        external\r\n    {\r\n        GlobalsCache memory g;\r\n        GlobalsCache memory gSnapshot;\r\n        _globalsLoad(g, gSnapshot);\r\n\r\n        StakeStore[] storage stakeListRef = stakeLists[msg.sender];\r\n\r\n        /* require() is more informative than the default assert() */\r\n        require(stakeListRef.length != 0, \"ELCK: Empty stake list\");\r\n        require(stakeIndex < stakeListRef.length, \"ELCK: stakeIndex invalid\");\r\n\r\n        /* Get stake copy */\r\n        StakeCache memory st;\r\n        _stakeLoad(stakeListRef[stakeIndex], stakeIdParam, st);\r\n\r\n        /* Check if log data needs to be updated */\r\n        _dailyDataUpdateAuto(g);\r\n\r\n        uint256 servedDays = 0;\r\n\r\n        bool prevUnlocked = (st._unlockedDay != 0);\r\n        uint256 stakeReturn;\r\n        uint256 payout = 0;\r\n        uint256 dividends = 0;\r\n        uint256 penalty = 0;\r\n        uint256 cappedPenalty = 0;\r\n\r\n        if (g._currentDay >= st._lockedDay) {\r\n            if (prevUnlocked) {\r\n                /* Previously unlocked in stakeGoodAccounting(), so must have served full term */\r\n                servedDays = st._stakedDays;\r\n            } else {\r\n                _stakeUnlock(g, st);\r\n\r\n                servedDays = g._currentDay - st._lockedDay;\r\n                if (servedDays > st._stakedDays) {\r\n                    servedDays = st._stakedDays;\r\n                }\r\n            }\r\n\r\n            (stakeReturn, payout, dividends, penalty, cappedPenalty) = _stakePerformance(g, st, servedDays);\r\n\r\n            msg.sender.transfer(dividends);\r\n        } else {\r\n            /* Stake hasn't been added to the total yet, so no penalties or rewards apply */\r\n            g._nextStakeSharesTotal -= st._stakeShares;\r\n\r\n            stakeReturn = st._stakedSuns;\r\n        }\r\n\r\n        emit StakeEnd(\r\n            stakeIdParam, \r\n            prevUnlocked ? 1 : 0,\r\n            msg.sender,\r\n            st._lockedDay,\r\n            servedDays, \r\n            st._stakedSuns, \r\n            st._stakeShares, \r\n            dividends,\r\n            payout, \r\n            penalty,\r\n            stakeReturn\r\n        );\r\n\r\n        if (cappedPenalty != 0 && !prevUnlocked) {\r\n            /* Split penalty proceeds only if not previously unlocked by stakeGoodAccounting() */\r\n            g._stakePenaltyTotal += cappedPenalty;\r\n        }\r\n\r\n        /* Pay the stake return, if any, to the staker */\r\n        if (stakeReturn != 0) {\r\n            _mint(msg.sender, stakeReturn);\r\n            \r\n            /* Update the share rate if necessary */\r\n            _shareRateUpdate(g, st, stakeReturn);\r\n        }\r\n        g._lockedSunsTotal -= st._stakedSuns;\r\n\r\n        _stakeRemove(stakeListRef, stakeIndex);\r\n\r\n        _globalsSync(g, gSnapshot);\r\n    }\r\n\r\n    /**\r\n     * @dev PUBLIC FACING: Return the current stake count for a staker address\r\n     * @param stakerAddr Address of staker\r\n     */\r\n    function stakeCount(address stakerAddr)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return stakeLists[stakerAddr].length;\r\n    }\r\n\r\n    /**\r\n     * @dev Open a stake.\r\n     * @param g Cache of stored globals\r\n     * @param newStakedSuns Number of Suns to stake\r\n     * @param newStakedDays Number of days to stake\r\n     */\r\n    function _stakeStart(\r\n        GlobalsCache memory g,\r\n        uint256 newStakedSuns,\r\n        uint256 newStakedDays\r\n    )\r\n        internal\r\n    {\r\n        /* Enforce the maximum stake time */\r\n        require(newStakedDays <= MAX_STAKE_DAYS, \"ELCK: newStakedDays higher than maximum\");\r\n\r\n        uint256 bonusSuns = _stakeStartBonusSuns(newStakedSuns, newStakedDays);\r\n        uint256 newStakeShares = (newStakedSuns + bonusSuns) * SHARE_RATE_SCALE / g._shareRate;\r\n\r\n        /* Ensure newStakedSuns is enough for at least one stake share */\r\n        require(newStakeShares != 0, \"ELCK: newStakedSuns must be at least minimum shareRate\");\r\n\r\n        /*\r\n            The stakeStart timestamp will always be part-way through the current\r\n            day, so it needs to be rounded-up to the next day to ensure all\r\n            stakes align with the same fixed calendar days. The current day is\r\n            already rounded-down, so rounded-up is current day + 1.\r\n        */\r\n        uint256 newLockedDay = g._currentDay + 1;\r\n\r\n        /* Create Stake */\r\n        uint40 newStakeId = ++g._latestStakeId;\r\n        _stakeAdd(\r\n            stakeLists[msg.sender],\r\n            newStakeId,\r\n            newStakedSuns,\r\n            newStakeShares,\r\n            newLockedDay,\r\n            newStakedDays\r\n        );\r\n\r\n        emit StakeStart(\r\n            newStakeId, \r\n            msg.sender,\r\n            newStakedSuns, \r\n            newStakeShares, \r\n            newStakedDays\r\n        );\r\n\r\n        /* Stake is added to total in the next round, not the current round */\r\n        g._nextStakeSharesTotal += newStakeShares;\r\n\r\n        /* Track total staked Suns for inflation calculations */\r\n        g._lockedSunsTotal += newStakedSuns;\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates total stake payout including rewards for a multi-day range\r\n     * @param g Cache of stored globals\r\n     * @param stakeSharesParam Param from stake to calculate bonuses for\r\n     * @param beginDay First day to calculate bonuses for\r\n     * @param endDay Last day (non-inclusive) of range to calculate bonuses for\r\n     * @return Payout in Suns\r\n     */\r\n    function _calcPayoutRewards(\r\n        GlobalsCache memory g,\r\n        uint256 stakeSharesParam,\r\n        uint256 beginDay,\r\n        uint256 endDay\r\n    )\r\n        private\r\n        view\r\n        returns (uint256 payout)\r\n    {\r\n        uint256 counter;\r\n\r\n        for (uint256 day = beginDay; day < endDay; day++) {\r\n            uint256 dayPayout;\r\n\r\n            dayPayout = dailyData[day].dayPayoutTotal * stakeSharesParam\r\n                / dailyData[day].dayStakeSharesTotal;\r\n\r\n            if (counter < 4) {\r\n                counter++;\r\n            } \r\n            /* Eligible to receive bonus */\r\n            else {\r\n                dayPayout = (dailyData[day].dayPayoutTotal * stakeSharesParam\r\n                / dailyData[day].dayStakeSharesTotal) * BONUS_DAY_SCALE;\r\n                counter = 0;\r\n            }\r\n\r\n            payout += dayPayout;\r\n        }\r\n\r\n        return payout;\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates user dividends\r\n     * @param g Cache of stored globals\r\n     * @param stakeSharesParam Param from stake to calculate bonuses for\r\n     * @param beginDay First day to calculate bonuses for\r\n     * @param endDay Last day (non-inclusive) of range to calculate bonuses for\r\n     * @return Payout in Suns\r\n     */\r\n    function _calcPayoutDividendsReward(\r\n        GlobalsCache memory g,\r\n        uint256 stakeSharesParam,\r\n        uint256 beginDay,\r\n        uint256 endDay\r\n    )\r\n        private\r\n        view\r\n        returns (uint256 payout)\r\n    {\r\n\r\n        for (uint256 day = beginDay; day < endDay; day++) {\r\n            uint256 dayPayout;\r\n\r\n            /* user's share of 90% of the day's dividends */\r\n            dayPayout += ((dailyData[day].dayDividends * 90) / 100) * stakeSharesParam\r\n            / dailyData[day].dayStakeSharesTotal;\r\n\r\n            payout += dayPayout;\r\n        }\r\n\r\n        return payout;\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate bonus Suns for a new stake, if any\r\n     * @param newStakedSuns Number of Suns to stake\r\n     * @param newStakedDays Number of days to stake\r\n     */\r\n    function _stakeStartBonusSuns(uint256 newStakedSuns, uint256 newStakedDays)\r\n        private\r\n        pure\r\n        returns (uint256 bonusSuns)\r\n    {\r\n        /*\r\n            LONGER PAYS BETTER:\r\n\r\n            If longer than 1 day stake is committed to, each extra day\r\n            gives bonus shares of approximately 0.0548%, which is approximately 20%\r\n            extra per year of increased stake length committed to, but capped to a\r\n            maximum of 200% extra.\r\n\r\n            extraDays       =  stakedDays - 1\r\n\r\n            longerBonus%    = (extraDays / 364) * 20%\r\n                            = (extraDays / 364) / 5\r\n                            =  extraDays / 1820\r\n                            =  extraDays / LPB\r\n\r\n            extraDays       =  longerBonus% * 1820\r\n            extraDaysMax    =  longerBonusMax% * 1820\r\n                            =  200% * 1820\r\n                            =  3640\r\n                            =  LPB_MAX_DAYS\r\n\r\n            BIGGER PAYS BETTER:\r\n\r\n            Bonus percentage scaled 0% to 10% for the first 7M ELCK of stake.\r\n\r\n            biggerBonus%    = (cappedSuns /  BPB_MAX_SUNS) * 10%\r\n                            = (cappedSuns /  BPB_MAX_SUNS) / 10\r\n                            =  cappedSuns / (BPB_MAX_SUNS * 10)\r\n                            =  cappedSuns /  BPB\r\n\r\n            COMBINED:\r\n\r\n            combinedBonus%  =            longerBonus%  +  biggerBonus%\r\n\r\n                                      cappedExtraDays     cappedSuns\r\n                            =         ---------------  +  ------------\r\n                                            LPB               BPB\r\n\r\n                                cappedExtraDays * BPB     cappedSuns * LPB\r\n                            =   ---------------------  +  ------------------\r\n                                      LPB * BPB               LPB * BPB\r\n\r\n                                cappedExtraDays * BPB  +  cappedSuns * LPB\r\n                            =   --------------------------------------------\r\n                                                  LPB  *  BPB\r\n\r\n            bonusSuns     = suns * combinedBonus%\r\n                            = suns * (cappedExtraDays * BPB  +  cappedSuns * LPB) / (LPB * BPB)\r\n        */\r\n        uint256 cappedExtraDays = 0;\r\n\r\n        /* Must be more than 1 day for Longer-Pays-Better */\r\n        if (newStakedDays > 1) {\r\n            cappedExtraDays = newStakedDays <= LPB_MAX_DAYS ? newStakedDays - 1 : LPB_MAX_DAYS;\r\n        }\r\n\r\n        uint256 cappedStakedSuns = newStakedSuns <= BPB_MAX_SUNS\r\n            ? newStakedSuns\r\n            : BPB_MAX_SUNS;\r\n\r\n        bonusSuns = cappedExtraDays * BPB + cappedStakedSuns * LPB;\r\n        bonusSuns = newStakedSuns * bonusSuns / (LPB * BPB);\r\n\r\n        return bonusSuns;\r\n    }\r\n\r\n    function _stakeUnlock(GlobalsCache memory g, StakeCache memory st)\r\n        private\r\n        pure\r\n    {\r\n        g._stakeSharesTotal -= st._stakeShares;\r\n        st._unlockedDay = g._currentDay;\r\n    }\r\n\r\n    function _stakePerformance(GlobalsCache memory g, StakeCache memory st, uint256 servedDays)\r\n        private\r\n        view\r\n        returns (uint256 stakeReturn, uint256 payout, uint256 dividends, uint256 penalty, uint256 cappedPenalty)\r\n    {\r\n        if (servedDays < st._stakedDays) {\r\n            (payout, penalty) = _calcPayoutAndEarlyPenalty(\r\n                g,\r\n                st._lockedDay,\r\n                st._stakedDays,\r\n                servedDays,\r\n                st._stakeShares\r\n            );\r\n            stakeReturn = st._stakedSuns + payout;\r\n\r\n            dividends = _calcPayoutDividendsReward(\r\n                g,\r\n                st._stakeShares,\r\n                st._lockedDay,\r\n                st._lockedDay + servedDays\r\n            );\r\n        } else {\r\n            // servedDays must == stakedDays here\r\n            payout = _calcPayoutRewards(\r\n                g,\r\n                st._stakeShares,\r\n                st._lockedDay,\r\n                st._lockedDay + servedDays\r\n            );\r\n\r\n            dividends = _calcPayoutDividendsReward(\r\n                g,\r\n                st._stakeShares,\r\n                st._lockedDay,\r\n                st._lockedDay + servedDays\r\n            );\r\n\r\n            stakeReturn = st._stakedSuns + payout;\r\n\r\n            penalty = _calcLatePenalty(st._lockedDay, st._stakedDays, st._unlockedDay, stakeReturn);\r\n        }\r\n        if (penalty != 0) {\r\n            if (penalty > stakeReturn) {\r\n                /* Cannot have a negative stake return */\r\n                cappedPenalty = stakeReturn;\r\n                stakeReturn = 0;\r\n            } else {\r\n                /* Remove penalty from the stake return */\r\n                cappedPenalty = penalty;\r\n                stakeReturn -= cappedPenalty;\r\n            }\r\n        }\r\n        return (stakeReturn, payout, dividends, penalty, cappedPenalty);\r\n    }\r\n\r\n    function _calcPayoutAndEarlyPenalty(\r\n        GlobalsCache memory g,\r\n        uint256 lockedDayParam,\r\n        uint256 stakedDaysParam,\r\n        uint256 servedDays,\r\n        uint256 stakeSharesParam\r\n    )\r\n        private\r\n        view\r\n        returns (uint256 payout, uint256 penalty)\r\n    {\r\n        uint256 servedEndDay = lockedDayParam + servedDays;\r\n\r\n        /* 50% of stakedDays (rounded up) with a minimum applied */\r\n        uint256 penaltyDays = (stakedDaysParam + 1) / 2;\r\n        if (penaltyDays < EARLY_PENALTY_MIN_DAYS) {\r\n            penaltyDays = EARLY_PENALTY_MIN_DAYS;\r\n        }\r\n\r\n        if (servedDays == 0) {\r\n            /* Fill penalty days with the estimated average payout */\r\n            uint256 expected = _estimatePayoutRewardsDay(g, stakeSharesParam, lockedDayParam);\r\n            penalty = expected * penaltyDays;\r\n            return (payout, penalty); // Actual payout was 0\r\n        }\r\n\r\n        if (penaltyDays < servedDays) {\r\n            /*\r\n                Simplified explanation of intervals where end-day is non-inclusive:\r\n\r\n                penalty:    [lockedDay  ...  penaltyEndDay)\r\n                delta:                      [penaltyEndDay  ...  servedEndDay)\r\n                payout:     [lockedDay  .......................  servedEndDay)\r\n            */\r\n            uint256 penaltyEndDay = lockedDayParam + penaltyDays;\r\n            penalty = _calcPayoutRewards(g, stakeSharesParam, lockedDayParam, penaltyEndDay);\r\n\r\n            uint256 delta = _calcPayoutRewards(g, stakeSharesParam, penaltyEndDay, servedEndDay);\r\n            payout = penalty + delta;\r\n            return (payout, penalty);\r\n        }\r\n\r\n        /* penaltyDays >= servedDays  */\r\n        payout = _calcPayoutRewards(g, stakeSharesParam, lockedDayParam, servedEndDay);\r\n\r\n        if (penaltyDays == servedDays) {\r\n            penalty = payout;\r\n        } else {\r\n            /*\r\n                (penaltyDays > servedDays) means not enough days served, so fill the\r\n                penalty days with the average payout from only the days that were served.\r\n            */\r\n            penalty = payout * penaltyDays / servedDays;\r\n        }\r\n        return (payout, penalty);\r\n    }\r\n\r\n    function _calcLatePenalty(\r\n        uint256 lockedDayParam,\r\n        uint256 stakedDaysParam,\r\n        uint256 unlockedDayParam,\r\n        uint256 rawStakeReturn\r\n    )\r\n        private\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        /* Allow grace time before penalties accrue */\r\n        uint256 maxUnlockedDay = lockedDayParam + stakedDaysParam + LATE_PENALTY_GRACE_DAYS;\r\n        if (unlockedDayParam <= maxUnlockedDay) {\r\n            return 0;\r\n        }\r\n\r\n        /* Calculate penalty as a percentage of stake return based on time */\r\n        return rawStakeReturn * (unlockedDayParam - maxUnlockedDay) / LATE_PENALTY_SCALE_DAYS;\r\n    }\r\n\r\n    function _shareRateUpdate(GlobalsCache memory g, StakeCache memory st, uint256 stakeReturn)\r\n        private\r\n    {\r\n        if (stakeReturn > st._stakedSuns) {\r\n            /*\r\n                Calculate the new shareRate that would yield the same number of shares if\r\n                the user re-staked this stakeReturn, factoring in any bonuses they would\r\n                receive in stakeStart().\r\n            */\r\n            uint256 bonusSuns = _stakeStartBonusSuns(stakeReturn, st._stakedDays);\r\n            uint256 newShareRate = (stakeReturn + bonusSuns) * SHARE_RATE_SCALE / st._stakeShares;\r\n\r\n            if (newShareRate > SHARE_RATE_MAX) {\r\n                /*\r\n                    Realistically this can't happen, but there are contrived theoretical\r\n                    scenarios that can lead to extreme values of newShareRate, so it is\r\n                    capped to prevent them anyway.\r\n                */\r\n                newShareRate = SHARE_RATE_MAX;\r\n            }\r\n\r\n            if (newShareRate > g._shareRate) {\r\n                g._shareRate = newShareRate;\r\n\r\n                emit ShareRateChange(\r\n                    st._stakeId,\r\n                    block.timestamp,\r\n                    newShareRate\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\ncontract TransformableToken is StakeableToken {\r\n    /**\r\n     * @dev PUBLIC FACING: Enter the auction lobby for the current round\r\n     * @param referrerAddr ETH address of referring user (optional; 0x0 for no referrer)\r\n     */\r\n    function xfLobbyEnter(address referrerAddr)\r\n        external\r\n        payable\r\n    {\r\n        uint256 enterDay = _currentDay();\r\n\r\n        uint256 rawAmount = msg.value;\r\n        require(rawAmount != 0, \"ELCK: Amount required\");\r\n\r\n        XfLobbyQueueStore storage qRef = xfLobbyMembers[enterDay][msg.sender];\r\n\r\n        uint256 entryIndex = qRef.tailIndex++;\r\n\r\n        qRef.entries[entryIndex] = XfLobbyEntryStore(uint96(rawAmount), referrerAddr);\r\n\r\n        xfLobby[enterDay] += rawAmount;\r\n\r\n        emit XfLobbyEnter(\r\n            block.timestamp, \r\n            enterDay, \r\n            entryIndex, \r\n            rawAmount\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev PUBLIC FACING: Leave the transform lobby after the round is complete\r\n     * @param enterDay Day number when the member entered\r\n     * @param count Number of queued-enters to exit (optional; 0 for all)\r\n     */\r\n    function xfLobbyExit(uint256 enterDay, uint256 count)\r\n        external\r\n    {\r\n        require(enterDay < _currentDay(), \"ELCK: Round is not complete\");\r\n\r\n        XfLobbyQueueStore storage qRef = xfLobbyMembers[enterDay][msg.sender];\r\n\r\n        uint256 headIndex = qRef.headIndex;\r\n        uint256 endIndex;\r\n\r\n        if (count != 0) {\r\n            require(count <= qRef.tailIndex - headIndex, \"ELCK: count invalid\");\r\n            endIndex = headIndex + count;\r\n        } else {\r\n            endIndex = qRef.tailIndex;\r\n            require(headIndex < endIndex, \"ELCK: count invalid\");\r\n        }\r\n\r\n        uint256 waasLobby = _waasLobby(enterDay);\r\n        uint256 _xfLobby = xfLobby[enterDay];\r\n        uint256 totalXfAmount = 0;\r\n\r\n        do {\r\n            uint256 rawAmount = qRef.entries[headIndex].rawAmount;\r\n            address referrerAddr = qRef.entries[headIndex].referrerAddr;\r\n\r\n            delete qRef.entries[headIndex];\r\n\r\n            uint256 xfAmount = waasLobby * rawAmount / _xfLobby;\r\n\r\n            if (referrerAddr == address(0) || referrerAddr == msg.sender) {\r\n                /* No referrer or Self-referred */\r\n                _emitXfLobbyExit(enterDay, headIndex, xfAmount, referrerAddr);\r\n            } else {\r\n                /* Referral bonus of 5% of xfAmount to member */\r\n                uint256 referralBonusSuns = xfAmount / 20;\r\n\r\n                xfAmount += referralBonusSuns;\r\n\r\n                /* Then a cumulative referrer bonus of 10% to referrer */\r\n                uint256 referrerBonusSuns = xfAmount / 10;\r\n\r\n                _emitXfLobbyExit(enterDay, headIndex, xfAmount, referrerAddr);\r\n                _mint(referrerAddr, referrerBonusSuns);\r\n            }\r\n\r\n            totalXfAmount += xfAmount;\r\n        } while (++headIndex < endIndex);\r\n\r\n        qRef.headIndex = uint40(headIndex);\r\n\r\n        if (totalXfAmount != 0) {\r\n            _mint(msg.sender, totalXfAmount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev PUBLIC FACING: External helper to return multiple values of xfLobby[] with\r\n     * a single call\r\n     * @param beginDay First day of data range\r\n     * @param endDay Last day (non-inclusive) of data range\r\n     * @return Fixed array of values\r\n     */\r\n    function xfLobbyRange(uint256 beginDay, uint256 endDay)\r\n        external\r\n        view\r\n        returns (uint256[] memory list)\r\n    {\r\n        require(\r\n            beginDay < endDay && endDay <= _currentDay(),\r\n            \"ELCK: invalid range\"\r\n        );\r\n\r\n        list = new uint256[](endDay - beginDay);\r\n\r\n        uint256 src = beginDay;\r\n        uint256 dst = 0;\r\n        do {\r\n            list[dst++] = uint256(xfLobby[src++]);\r\n        } while (src < endDay);\r\n\r\n        return list;\r\n    }\r\n\r\n    /**\r\n     * @dev PUBLIC FACING: Release 10% dev share from daily dividends - destined for the token on the tron ​​network\r\n     */\r\n    function xfFlush()\r\n        external\r\n    {\r\n        GlobalsCache memory g;\r\n        GlobalsCache memory gSnapshot;\r\n        _globalsLoad(g, gSnapshot);\r\n        \r\n        require(address(this).balance != 0, \"ELCK: No value\");\r\n\r\n        require(LAST_FLUSHED_DAY < _currentDay(), \"ELCK: Invalid day\");\r\n\r\n        _dailyDataUpdateAuto(g);\r\n\r\n        ELCK_SHARE_ADDR.transfer((dailyData[LAST_FLUSHED_DAY].dayDividends * 10) / 100);\r\n\r\n        LAST_FLUSHED_DAY++;\r\n\r\n        _globalsSync(g, gSnapshot);\r\n    }\r\n\r\n    /**\r\n     * @dev PUBLIC FACING: Return a current lobby member queue entry.\r\n     * Only needed due to limitations of the standard ABI encoder.\r\n     * @param memberAddr ETH address of the lobby member\r\n     * @param enterDay Day number when the member entered\r\n     * @param entryIndex Entry when the member entered\r\n     * @return 1: Raw amount that was entered with; 2: Referring ETH addr (optional; 0x0 for no referrer)\r\n     */\r\n    function xfLobbyEntry(address memberAddr, uint256 enterDay, uint256 entryIndex)\r\n        external\r\n        view\r\n        returns (uint256 rawAmount, address referrerAddr)\r\n    {\r\n        XfLobbyEntryStore storage entry = xfLobbyMembers[enterDay][memberAddr].entries[entryIndex];\r\n\r\n        require(entry.rawAmount != 0, \"ELCK: Param invalid\");\r\n\r\n        return (entry.rawAmount, entry.referrerAddr);\r\n    }\r\n\r\n    /**\r\n     * @dev PUBLIC FACING: Return the lobby days that a user is in with a single call\r\n     * @param memberAddr ETH address of the user\r\n     * @return Bit vector of lobby day numbers\r\n     */\r\n    function xfLobbyPendingDays(address memberAddr)\r\n        external\r\n        view\r\n        returns (uint256[XF_LOBBY_DAY_WORDS] memory words)\r\n    {\r\n        uint256 day = _currentDay() + 1;\r\n\r\n        while (day-- != 0) {\r\n            if (xfLobbyMembers[day][memberAddr].tailIndex > xfLobbyMembers[day][memberAddr].headIndex) {\r\n                words[day >> 8] |= 1 << (day & 255);\r\n            }\r\n        }\r\n\r\n        return words;\r\n    }\r\n    \r\n    function _waasLobby(uint256 enterDay)\r\n        private\r\n        returns (uint256 waasLobby)\r\n    {\r\n        /* 1342465753424 = ~ 4900000 * SUNS_PER_ELCK / 365 */\r\n        if (enterDay > 0 && enterDay <= 365) {                                     \r\n            waasLobby = CLAIM_STARTING_AMOUNT - ((enterDay - 1) * 1342465753424);\r\n        } else {\r\n            waasLobby = CLAIM_LOWEST_AMOUNT;\r\n        }\r\n\r\n        return waasLobby;\r\n    }\r\n\r\n    function _emitXfLobbyExit(\r\n        uint256 enterDay,\r\n        uint256 entryIndex,\r\n        uint256 xfAmount,\r\n        address referrerAddr\r\n    )\r\n        private\r\n    {\r\n        emit XfLobbyExit(\r\n            block.timestamp, \r\n            enterDay,\r\n            entryIndex,\r\n            xfAmount,\r\n            referrerAddr\r\n        );\r\n    }\r\n}\r\n\r\ncontract ELCK is TransformableToken {\r\n    constructor()\r\n        public\r\n    {\r\n        /* Initialize global shareRate to 1 */\r\n        globals.shareRate = uint40(1 * SHARE_RATE_SCALE);\r\n    }\r\n\r\n    function() external payable {}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeLists\",\"outputs\":[{\"name\":\"stakeId\",\"type\":\"uint40\"},{\"name\":\"stakedSuns\",\"type\":\"uint72\"},{\"name\":\"stakeShares\",\"type\":\"uint72\"},{\"name\":\"lockedDay\",\"type\":\"uint16\"},{\"name\":\"stakedDays\",\"type\":\"uint16\"},{\"name\":\"unlockedDay\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"memberAddr\",\"type\":\"address\"},{\"name\":\"enterDay\",\"type\":\"uint256\"},{\"name\":\"entryIndex\",\"type\":\"uint256\"}],\"name\":\"xfLobbyEntry\",\"outputs\":[{\"name\":\"rawAmount\",\"type\":\"uint256\"},{\"name\":\"referrerAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"stakerAddr\",\"type\":\"address\"}],\"name\":\"stakeCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"stakeIndex\",\"type\":\"uint256\"},{\"name\":\"stakeIdParam\",\"type\":\"uint40\"}],\"name\":\"stakeEnd\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allocatedSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"xfLobbyMembers\",\"outputs\":[{\"name\":\"headIndex\",\"type\":\"uint40\"},{\"name\":\"tailIndex\",\"type\":\"uint40\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"memberAddr\",\"type\":\"address\"}],\"name\":\"xfLobbyPendingDays\",\"outputs\":[{\"name\":\"words\",\"type\":\"uint256[2]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newStakedSuns\",\"type\":\"uint256\"},{\"name\":\"newStakedDays\",\"type\":\"uint256\"}],\"name\":\"stakeStart\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"stakerAddr\",\"type\":\"address\"},{\"name\":\"stakeIndex\",\"type\":\"uint256\"},{\"name\":\"stakeIdParam\",\"type\":\"uint40\"}],\"name\":\"stakeGoodAccounting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"beginDay\",\"type\":\"uint256\"},{\"name\":\"endDay\",\"type\":\"uint256\"}],\"name\":\"dailyDataRange\",\"outputs\":[{\"name\":\"_dayStakeSharesTotal\",\"type\":\"uint256[]\"},{\"name\":\"_dayPayoutTotal\",\"type\":\"uint256[]\"},{\"name\":\"_dayDividends\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"xfLobby\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beforeDay\",\"type\":\"uint256\"}],\"name\":\"dailyDataUpdate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dailyData\",\"outputs\":[{\"name\":\"dayPayoutTotal\",\"type\":\"uint72\"},{\"name\":\"dayDividends\",\"type\":\"uint256\"},{\"name\":\"dayStakeSharesTotal\",\"type\":\"uint72\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"globals\",\"outputs\":[{\"name\":\"lockedSunsTotal\",\"type\":\"uint72\"},{\"name\":\"nextStakeSharesTotal\",\"type\":\"uint72\"},{\"name\":\"shareRate\",\"type\":\"uint40\"},{\"name\":\"stakePenaltyTotal\",\"type\":\"uint72\"},{\"name\":\"dailyDataCount\",\"type\":\"uint16\"},{\"name\":\"stakeSharesTotal\",\"type\":\"uint72\"},{\"name\":\"latestStakeId\",\"type\":\"uint40\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"enterDay\",\"type\":\"uint256\"},{\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"xfLobbyExit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referrerAddr\",\"type\":\"address\"}],\"name\":\"xfLobbyEnter\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"xfFlush\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"globalInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[10]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"beginDay\",\"type\":\"uint256\"},{\"name\":\"endDay\",\"type\":\"uint256\"}],\"name\":\"xfLobbyRange\",\"outputs\":[{\"name\":\"list\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"enterDay\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"entryIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"XfLobbyEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"enterDay\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"entryIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"xfAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"referrerAddr\",\"type\":\"address\"}],\"name\":\"XfLobbyExit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"updaterAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"beginDay\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endDay\",\"type\":\"uint256\"}],\"name\":\"DailyDataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"stakeId\",\"type\":\"uint40\"},{\"indexed\":true,\"name\":\"stakerAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"stakedSuns\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"stakeShares\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"stakedDays\",\"type\":\"uint256\"}],\"name\":\"StakeStart\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"stakeId\",\"type\":\"uint40\"},{\"indexed\":true,\"name\":\"stakerAddr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"senderAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"stakedSuns\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"stakeShares\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"payout\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"penalty\",\"type\":\"uint256\"}],\"name\":\"StakeGoodAccounting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"stakeId\",\"type\":\"uint40\"},{\"indexed\":false,\"name\":\"prevUnlocked\",\"type\":\"uint40\"},{\"indexed\":true,\"name\":\"stakerAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"lockedDay\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"servedDays\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"stakedSuns\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"stakeShares\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"dividends\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"payout\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"penalty\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"stakeReturn\",\"type\":\"uint256\"}],\"name\":\"StakeEnd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"stakeId\",\"type\":\"uint40\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newShareRate\",\"type\":\"uint256\"}],\"name\":\"ShareRateChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"ELCK","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://56a29545c99b97340f66aa070fab0e77fe4a8140740b2fe4cfa7e53cc06de3f7"}]}