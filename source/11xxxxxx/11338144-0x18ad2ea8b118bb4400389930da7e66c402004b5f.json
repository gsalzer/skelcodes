{"status":"1","message":"OK","result":[{"SourceCode":"// Dependency file: contracts/libraries/SafeMath.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// pragma solidity >=0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// Dependency file: contracts/modules/ConfigNames.sol\r\n\r\n// pragma solidity >=0.5.16;\r\n\r\nlibrary ConfigNames {\r\n    //GOVERNANCE\r\n    bytes32 public constant PROPOSAL_VOTE_DURATION = bytes32('PROPOSAL_VOTE_DURATION');\r\n    bytes32 public constant PROPOSAL_EXECUTE_DURATION = bytes32('PROPOSAL_EXECUTE_DURATION');\r\n    bytes32 public constant PROPOSAL_CREATE_COST = bytes32('PROPOSAL_CREATE_COST');\r\n    bytes32 public constant STAKE_LOCK_TIME = bytes32('STAKE_LOCK_TIME');\r\n    bytes32 public constant MINT_AMOUNT_PER_BLOCK =  bytes32('MINT_AMOUNT_PER_BLOCK');\r\n    bytes32 public constant INTEREST_PLATFORM_SHARE =  bytes32('INTEREST_PLATFORM_SHARE');\r\n    bytes32 public constant CHANGE_PRICE_DURATION =  bytes32('CHANGE_PRICE_DURATION');\r\n    bytes32 public constant CHANGE_PRICE_PERCENT =  bytes32('CHANGE_PRICE_PERCENT');\r\n\r\n    // POOL\r\n    bytes32 public constant POOL_BASE_INTERESTS = bytes32('POOL_BASE_INTERESTS');\r\n    bytes32 public constant POOL_MARKET_FRENZY = bytes32('POOL_MARKET_FRENZY');\r\n    bytes32 public constant POOL_PLEDGE_RATE = bytes32('POOL_PLEDGE_RATE');\r\n    bytes32 public constant POOL_LIQUIDATION_RATE = bytes32('POOL_LIQUIDATION_RATE');\r\n    bytes32 public constant POOL_MINT_BORROW_PERCENT = bytes32('POOL_MINT_BORROW_PERCENT');\r\n    bytes32 public constant POOL_MINT_POWER = bytes32('POOL_MINT_POWER');\r\n    \r\n    //NOT GOVERNANCE\r\n    bytes32 public constant AAAA_USER_MINT = bytes32('AAAA_USER_MINT');\r\n    bytes32 public constant AAAA_TEAM_MINT = bytes32('AAAA_TEAM_MINT');\r\n    bytes32 public constant AAAA_REWAED_MINT = bytes32('AAAA_REWAED_MINT');\r\n    bytes32 public constant DEPOSIT_ENABLE = bytes32('DEPOSIT_ENABLE');\r\n    bytes32 public constant WITHDRAW_ENABLE = bytes32('WITHDRAW_ENABLE');\r\n    bytes32 public constant BORROW_ENABLE = bytes32('BORROW_ENABLE');\r\n    bytes32 public constant REPAY_ENABLE = bytes32('REPAY_ENABLE');\r\n    bytes32 public constant LIQUIDATION_ENABLE = bytes32('LIQUIDATION_ENABLE');\r\n    bytes32 public constant REINVEST_ENABLE = bytes32('REINVEST_ENABLE');\r\n    bytes32 public constant INTEREST_BUYBACK_SHARE =  bytes32('INTEREST_BUYBACK_SHARE');\r\n\r\n    //POOL\r\n    bytes32 public constant POOL_PRICE = bytes32('POOL_PRICE');\r\n\r\n    //wallet\r\n    bytes32 public constant TEAM = bytes32('team'); \r\n    bytes32 public constant SPARE = bytes32('spare');\r\n    bytes32 public constant REWARD = bytes32('reward');\r\n}\r\n\r\n// Root file: contracts/AAAAQuery2.sol\r\n\r\npragma solidity >=0.6.6;\r\npragma experimental ABIEncoderV2;\r\n\r\n// import \"contracts/libraries/SafeMath.sol\";\r\n// import 'contracts/modules/ConfigNames.sol';\r\n\r\ninterface IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n}\r\n\r\ninterface IConfig {\r\n    function developer() external view returns (address);\r\n    function platform() external view returns (address);\r\n    function factory() external view returns (address);\r\n    function mint() external view returns (address);\r\n    function token() external view returns (address);\r\n    function developPercent() external view returns (uint);\r\n    function wallet() external view returns (address);\r\n    function base() external view returns (address);\r\n    function share() external view returns (address);\r\n    function params(bytes32 key) external view returns(uint);\r\n    function setParameter(uint[] calldata _keys, uint[] calldata _values) external;\r\n    function setPoolParameter(address _pool, bytes32 _key, uint _value) external;\r\n    function getValue(bytes32 _key) external view returns (uint);\r\n    function getPoolValue(address _pool, bytes32 _key) external view returns (uint);\r\n    function getParams(bytes32 _key) external view returns (uint, uint, uint, uint);\r\n    function getPoolParams(address _pool, bytes32 _key) external view returns (uint, uint, uint, uint);\r\n}\r\n\r\ninterface IAAAAFactory {\r\n    function countPools() external view returns(uint);\r\n    function countBallots() external view returns(uint);\r\n    function allBallots(uint index) external view returns(address);\r\n    function allPools(uint index) external view returns(address);\r\n    function isPool(address addr) external view returns(bool);\r\n    function getPool(address lend, address collateral) external view returns(address);\r\n}\r\n\r\ninterface IAAAAPool {\r\n    function supplyToken() external view returns(address);\r\n    function collateralToken() external view returns(address);\r\n    function totalBorrow() external view returns(uint);\r\n    function totalPledge() external view returns(uint);\r\n    function remainSupply() external view returns(uint);\r\n    function getInterests() external view returns(uint);\r\n    function numberBorrowers() external view returns(uint);\r\n    function borrowerList(uint index) external view returns(address);\r\n    function borrows(address user) external view returns(uint,uint,uint,uint,uint);\r\n    function getRepayAmount(uint amountCollateral, address from) external view returns(uint);\r\n    function liquidationHistory(address user, uint index) external view returns(uint,uint,uint);\r\n    function liquidationHistoryLength(address user) external view returns(uint);\r\n    function getMaximumBorrowAmount(uint amountCollateral) external view returns(uint amountBorrow);\r\n    function interestPerBorrow() external view returns(uint);\r\n    function lastInterestUpdate() external view returns(uint);\r\n    function interestPerSupply() external view returns(uint);\r\n    function supplys(address user) external view returns(uint,uint,uint,uint,uint);\r\n}\r\n\r\ninterface IAAAAMint {\r\n    function maxSupply() external view returns(uint);\r\n    function mintCumulation() external view returns(uint);\r\n    function takeLendWithAddress(address user) external view returns (uint);\r\n    function takeBorrowWithAddress(address user) external view returns (uint);\r\n}\r\n\r\ninterface ISwapPair {\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n}\r\n\r\ninterface IAAAABallot {\r\n    struct Voter {\r\n        uint weight; // weight is accumulated by delegation\r\n        bool voted;  // if true, that person already voted\r\n        uint vote;   // index of the voted proposal 0 YES, 1 NO\r\n        bool claimed; // already claimed reward\r\n    }\r\n    function name() external view returns(bytes32);\r\n    function subject() external view returns(string memory);\r\n    function content() external view returns(string memory);\r\n    function createdBlock() external view returns(uint);\r\n    function createdTime() external view returns(uint);\r\n    function creator() external view returns(address);\r\n    function proposals(uint index) external view returns(uint);\r\n    function end() external view returns (bool);\r\n    function pass() external view returns (bool);\r\n    function expire() external view returns (bool);\r\n    function pool() external view returns (address);\r\n    function value() external view returns (uint);\r\n    function total() external view returns (uint);\r\n    function reward() external view returns (uint);\r\n    function voters(address user) external view returns (Voter memory);\r\n}\r\n\r\ncontract AAAAQuery2 {\r\n    address public owner;\r\n    address public config;\r\n    using SafeMath for uint;\r\n\r\n    struct ConfigCommonStruct {\r\n        uint PROPOSAL_VOTE_DURATION;\r\n        uint PROPOSAL_EXECUTE_DURATION;\r\n        uint PROPOSAL_CREATE_COST;\r\n        uint STAKE_LOCK_TIME;\r\n        uint MINT_AMOUNT_PER_BLOCK;\r\n        uint INTEREST_PLATFORM_SHARE;\r\n        uint INTEREST_BUYBACK_SHARE;\r\n        uint CHANGE_PRICE_DURATION;\r\n        uint CHANGE_PRICE_PERCENT;\r\n    }\r\n\r\n    struct ConfigValueStruct {\r\n        uint min;\r\n        uint max;\r\n        uint span;\r\n        uint value;\r\n        address pair;\r\n        bytes32 key;\r\n        string name;\r\n    }\r\n\r\n    struct ConfigPoolStruct {\r\n        address pair;\r\n        address supplyToken;\r\n        address collateralToken;\r\n        uint POOL_BASE_INTERESTS;\r\n        uint POOL_MARKET_FRENZY;\r\n        uint POOL_PLEDGE_RATE;\r\n        uint POOL_LIQUIDATION_RATE;\r\n        uint POOL_MINT_BORROW_PERCENT;\r\n        uint POOL_MINT_POWER;\r\n        address lpToken0;\r\n        address lpToken1;\r\n        string lpToken0Symbol;\r\n        string lpToken1Symbol;\r\n        string supplyTokenSymbol;\r\n        string collateralTokenSymbol;\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    function setupConfig (address _config) external {\r\n        require(msg.sender == owner, \"FORBIDDEN\");\r\n        config = _config;\r\n    }\r\n\r\n    function getConfigCommon() public view returns (ConfigCommonStruct memory info){\r\n        info.PROPOSAL_VOTE_DURATION = IConfig(config).getValue(ConfigNames.PROPOSAL_VOTE_DURATION);\r\n        info.PROPOSAL_EXECUTE_DURATION = IConfig(config).getValue(ConfigNames.PROPOSAL_EXECUTE_DURATION);\r\n        info.PROPOSAL_CREATE_COST = IConfig(config).getValue(ConfigNames.PROPOSAL_CREATE_COST);\r\n        info.STAKE_LOCK_TIME = IConfig(config).getValue(ConfigNames.STAKE_LOCK_TIME);\r\n        info.MINT_AMOUNT_PER_BLOCK = IConfig(config).getValue(ConfigNames.MINT_AMOUNT_PER_BLOCK);\r\n        info.INTEREST_PLATFORM_SHARE = IConfig(config).getValue(ConfigNames.INTEREST_PLATFORM_SHARE);\r\n        info.INTEREST_BUYBACK_SHARE = IConfig(config).getValue(ConfigNames.INTEREST_BUYBACK_SHARE);\r\n        info.CHANGE_PRICE_DURATION = IConfig(config).getValue(ConfigNames.CHANGE_PRICE_DURATION);\r\n        info.CHANGE_PRICE_PERCENT = IConfig(config).getValue(ConfigNames.CHANGE_PRICE_PERCENT);\r\n        return info;\r\n    }\r\n\r\n    function getConfigPool(address _pair) public view returns (ConfigPoolStruct memory info){\r\n        info.pair = _pair;\r\n        info.supplyToken = IAAAAPool(_pair).supplyToken();\r\n        info.collateralToken = IAAAAPool(_pair).collateralToken();\r\n        info.supplyTokenSymbol = IERC20(info.supplyToken).symbol();\r\n        info.collateralTokenSymbol = IERC20(info.collateralToken).symbol();\r\n        info.POOL_BASE_INTERESTS = IConfig(config).getPoolValue(_pair, ConfigNames.POOL_BASE_INTERESTS);\r\n        info.POOL_MARKET_FRENZY = IConfig(config).getPoolValue(_pair, ConfigNames.POOL_MARKET_FRENZY);\r\n        info.POOL_PLEDGE_RATE = IConfig(config).getPoolValue(_pair, ConfigNames.POOL_PLEDGE_RATE);\r\n        info.POOL_LIQUIDATION_RATE = IConfig(config).getPoolValue(_pair, ConfigNames.POOL_LIQUIDATION_RATE);\r\n        info.POOL_MINT_BORROW_PERCENT = IConfig(config).getPoolValue(_pair, ConfigNames.POOL_MINT_BORROW_PERCENT);\r\n        info.POOL_MINT_POWER = IConfig(config).getPoolValue(_pair, ConfigNames.POOL_MINT_POWER);\r\n        info.lpToken0 = ISwapPair(info.collateralToken).token0();\r\n        info.lpToken1 = ISwapPair(info.collateralToken).token1();\r\n        info.lpToken0Symbol = IERC20(info.lpToken0).symbol();\r\n        info.lpToken1Symbol = IERC20(info.lpToken1).symbol();\r\n        return info;\r\n    }\r\n\r\n    function getConfigPools() public view returns (ConfigPoolStruct[] memory list){\r\n        uint count = IAAAAFactory(IConfig(config).factory()).countPools();\r\n        list = new ConfigPoolStruct[](count);\r\n        if(count > 0) {\r\n            for(uint i = 0; i < count; i++) {\r\n                address pair = IAAAAFactory(IConfig(config).factory()).allPools(i);\r\n                list[i] = getConfigPool(pair);\r\n            }\r\n        }\r\n        return list;\r\n    }\r\n\r\n    function countConfig() public view returns (uint) {\r\n        return 10 + IAAAAFactory(IConfig(config).factory()).countPools() * 4;\r\n    }\r\n\r\n    function getConfigValue(address _pair, bytes32 _key, string memory _name) public view returns (ConfigValueStruct memory info){\r\n        info.pair = _pair;\r\n        info.key = _key;\r\n        info.name = _name;\r\n        if(_pair != address(0)) {\r\n            (info.min, info.max, info.span, info.value) = IConfig(config).getPoolParams(_pair, _key);\r\n        } else {\r\n            (info.min, info.max, info.span, info.value) = IConfig(config).getParams(_key);\r\n        }\r\n\r\n        if(info.value > info.min + info.span) {\r\n            info.min = info.value - info.span;\r\n        }\r\n\r\n        if(info.max > info.value + info.span) {\r\n            info.max = info.value + info.span;\r\n        }\r\n\r\n        return info;\r\n    }\r\n\r\n    function getConfigCommonValue(bytes32 _key, string memory _name) public view returns (ConfigValueStruct memory info){\r\n        return getConfigValue(address(0), _key, _name);\r\n    }\r\n\r\n    function getConfigCommonValues() public view returns (ConfigValueStruct[] memory list){\r\n        list = new ConfigValueStruct[](9);\r\n        list[0] = getConfigCommonValue(ConfigNames.PROPOSAL_VOTE_DURATION, 'PROPOSAL_VOTE_DURATION');\r\n        list[1] = getConfigCommonValue(ConfigNames.PROPOSAL_EXECUTE_DURATION, 'PROPOSAL_EXECUTE_DURATION');\r\n        list[2] = getConfigCommonValue(ConfigNames.PROPOSAL_CREATE_COST, 'PROPOSAL_CREATE_COST');\r\n        list[3] = getConfigCommonValue(ConfigNames.STAKE_LOCK_TIME, 'STAKE_LOCK_TIME');\r\n        list[4] = getConfigCommonValue(ConfigNames.MINT_AMOUNT_PER_BLOCK, 'MINT_AMOUNT_PER_BLOCK');\r\n        list[5] = getConfigCommonValue(ConfigNames.INTEREST_PLATFORM_SHARE, 'INTEREST_PLATFORM_SHARE');\r\n        list[6] = getConfigCommonValue(ConfigNames.INTEREST_BUYBACK_SHARE, 'INTEREST_BUYBACK_SHARE');\r\n        list[7] = getConfigCommonValue(ConfigNames.CHANGE_PRICE_DURATION, 'CHANGE_PRICE_DURATION');\r\n        list[8] = getConfigCommonValue(ConfigNames.CHANGE_PRICE_PERCENT, 'CHANGE_PRICE_PERCENT');\r\n        return list;\r\n    }\r\n\r\n    function getConfigPoolValues(address _pair) public view returns (ConfigValueStruct[] memory list){\r\n        list = new ConfigValueStruct[](6);\r\n        list[0] = getConfigValue(_pair, ConfigNames.POOL_BASE_INTERESTS, 'POOL_BASE_INTERESTS');\r\n        list[1] = getConfigValue(_pair, ConfigNames.POOL_MARKET_FRENZY, 'POOL_MARKET_FRENZY');\r\n        list[2] = getConfigValue(_pair, ConfigNames.POOL_PLEDGE_RATE, 'POOL_PLEDGE_RATE');\r\n        list[3] = getConfigValue(_pair, ConfigNames.POOL_LIQUIDATION_RATE, 'POOL_LIQUIDATION_RATE');\r\n        list[4] = getConfigValue(_pair, ConfigNames.POOL_MINT_BORROW_PERCENT, 'POOL_MINT_BORROW_PERCENT');\r\n        list[5] = getConfigValue(_pair, ConfigNames.POOL_MINT_POWER, 'POOL_MINT_POWER');\r\n        return list;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"countConfig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConfigCommon\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"PROPOSAL_VOTE_DURATION\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"PROPOSAL_EXECUTE_DURATION\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"PROPOSAL_CREATE_COST\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"STAKE_LOCK_TIME\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"MINT_AMOUNT_PER_BLOCK\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"INTEREST_PLATFORM_SHARE\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"INTEREST_BUYBACK_SHARE\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"CHANGE_PRICE_DURATION\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"CHANGE_PRICE_PERCENT\",\"type\":\"uint256\"}],\"internalType\":\"struct AAAAQuery2.ConfigCommonStruct\",\"name\":\"info\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"getConfigCommonValue\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"span\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct AAAAQuery2.ConfigValueStruct\",\"name\":\"info\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConfigCommonValues\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"span\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct AAAAQuery2.ConfigValueStruct[]\",\"name\":\"list\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"getConfigPool\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"supplyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"POOL_BASE_INTERESTS\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"POOL_MARKET_FRENZY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"POOL_PLEDGE_RATE\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"POOL_LIQUIDATION_RATE\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"POOL_MINT_BORROW_PERCENT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"POOL_MINT_POWER\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lpToken0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lpToken1\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"lpToken0Symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"lpToken1Symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"supplyTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"collateralTokenSymbol\",\"type\":\"string\"}],\"internalType\":\"struct AAAAQuery2.ConfigPoolStruct\",\"name\":\"info\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"getConfigPoolValues\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"span\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct AAAAQuery2.ConfigValueStruct[]\",\"name\":\"list\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConfigPools\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"supplyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"POOL_BASE_INTERESTS\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"POOL_MARKET_FRENZY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"POOL_PLEDGE_RATE\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"POOL_LIQUIDATION_RATE\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"POOL_MINT_BORROW_PERCENT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"POOL_MINT_POWER\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lpToken0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lpToken1\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"lpToken0Symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"lpToken1Symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"supplyTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"collateralTokenSymbol\",\"type\":\"string\"}],\"internalType\":\"struct AAAAQuery2.ConfigPoolStruct[]\",\"name\":\"list\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"getConfigValue\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"span\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct AAAAQuery2.ConfigValueStruct\",\"name\":\"info\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_config\",\"type\":\"address\"}],\"name\":\"setupConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AAAAQuery2","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://3b59e72bb9a6e0569505200c970a701a6d574414771cc88b8642464dc4dd00e4"}]}