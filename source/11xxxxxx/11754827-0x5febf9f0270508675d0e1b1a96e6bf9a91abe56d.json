{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/Receipts.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\ncontract Receipts {\r\n    struct Receipt {\r\n        address asset;\r\n        address owner;\r\n        string targetAddress;\r\n        uint256 amount;\r\n        uint256 startTime;\r\n        uint256 endTime;\r\n        bool finished;\r\n    }\r\n\r\n    uint256 public receiptCount = 0;\r\n    Receipt[] public receipts;\r\n    uint256 public totalAmountInReceipts = 0;\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n        function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/merkle.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\ncontract MerkleTreeGenerator is Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    uint256 constant pathMaximalLength = 10;\r\n    uint256 public MerkleTreeMaximalLeafCount;\r\n    uint256 MerkleTreeMaximalSize;\r\n\r\n    Receipts receiptProvider;\r\n    address public receiptProviderAddress;\r\n\r\n    struct MerkleTree {\r\n        bytes32 root;\r\n        uint256 leaf_count;\r\n        uint256 first_receipt_id;\r\n        uint256 size;\r\n    }\r\n\r\n    constructor (Receipts _receiptMaker, uint256 _pathLengthLimit) public {\r\n        receiptProviderAddress = address(_receiptMaker);\r\n        receiptProvider = _receiptMaker;\r\n        require(_pathLengthLimit <= pathMaximalLength, \"Exceeding Maximal Path Length.\");\r\n        MerkleTreeMaximalLeafCount = 1 << _pathLengthLimit;\r\n        MerkleTreeMaximalSize = MerkleTreeMaximalLeafCount.mul(2);\r\n    }\r\n\r\n    function changeReceiptMaker(Receipts _receiptMaker) onlyOwner public {\r\n        receiptProviderAddress = address(_receiptMaker);\r\n        receiptProvider = _receiptMaker;\r\n    }\r\n\r\n    function changePathLengthLimit(uint256 _pathLengthLimit) onlyOwner public {\r\n        require(_pathLengthLimit <= pathMaximalLength, \"Exceeding Maximal Path Length.\");\r\n        MerkleTreeMaximalLeafCount = 1 << _pathLengthLimit;\r\n        MerkleTreeMaximalSize = MerkleTreeMaximalLeafCount.mul(2);\r\n    }\r\n\r\n    //fetch receipts\r\n    function _receiptsToLeaves(uint256 _start, uint256 _leafCount) private view returns (bytes32[] memory){\r\n        bytes32[] memory leaves = new bytes32[](_leafCount);\r\n\r\n        for (uint256 i = _start; i < _start + _leafCount; i++) {\r\n            (\r\n            ,\r\n            ,\r\n            string memory targetAddress,\r\n            uint256 amount,\r\n            ,\r\n            ,\r\n            ) = receiptProvider.receipts(i);\r\n\r\n            bytes32 amountHash = sha256(abi.encodePacked(amount));\r\n            bytes32 targetAddressHash = sha256(abi.encodePacked(targetAddress));\r\n            bytes32 receiptIdHash = sha256(abi.encodePacked(i));\r\n\r\n            leaves[i - _start] = (sha256(abi.encode(amountHash, targetAddressHash, receiptIdHash)));\r\n        }\r\n\r\n        return leaves;\r\n    }\r\n\r\n    function getArbitraryMerkleTree(uint256 _firstReceiptId, uint256 _lastReceiptId) public view returns (bytes32, uint256, uint256, uint256, bytes32[] memory){\r\n        MerkleTree memory merkleTree;\r\n        bytes32[] memory treeNodes;\r\n        (merkleTree, treeNodes) = _generateMerkleTree(_firstReceiptId, _lastReceiptId.sub(_firstReceiptId).add(1));\r\n        return (merkleTree.root, merkleTree.first_receipt_id, merkleTree.leaf_count, merkleTree.size, treeNodes);\r\n    }\r\n\r\n    function getMerkleTree(uint256 _expectCount) public view returns (uint256, bytes32, uint256, uint256, uint256){\r\n        uint256 receiptCount = receiptProvider.receiptCount();\r\n        require(_expectCount > 0 && receiptCount > 0 && receiptCount.add(MerkleTreeMaximalLeafCount) > _expectCount);\r\n        uint256 needMore = receiptCount.mod(MerkleTreeMaximalLeafCount) == 0 ? 0 : 1;\r\n        require(receiptCount.div(MerkleTreeMaximalLeafCount).mul(MerkleTreeMaximalLeafCount).add(needMore.mul(MerkleTreeMaximalLeafCount)) >= _expectCount);\r\n        MerkleTree memory merkleTree;\r\n        bytes32[] memory treeNodes;\r\n        uint256 actualCount = _expectCount < receiptCount ? _expectCount : receiptCount;\r\n        uint256 previousTreeCount = actualCount.sub(1).div(MerkleTreeMaximalLeafCount);\r\n        uint256 firstReceiptId = previousTreeCount.mul(MerkleTreeMaximalLeafCount);\r\n        (merkleTree, treeNodes) = _generateMerkleTree(firstReceiptId, actualCount.sub(firstReceiptId));\r\n        return (previousTreeCount, merkleTree.root, merkleTree.first_receipt_id, merkleTree.leaf_count, merkleTree.size);\r\n    }\r\n\r\n    function getMerkleTreeRoot(uint256 _firstReceiptId, uint256 _lastReceiptId) public view returns (bytes32){\r\n        MerkleTree memory merkleTree;\r\n        bytes32[] memory treeNodes;\r\n        (merkleTree, treeNodes) = _generateMerkleTree(_firstReceiptId, _lastReceiptId.sub(_firstReceiptId).add(1));\r\n        return merkleTree.root;\r\n    }\r\n\r\n    //get users merkle tree path\r\n    function generateMerklePath(uint256 _receiptId, uint256 _firstReceiptId, uint256 _lastReceiptId) public view returns (uint256, bytes32[] memory, bool[] memory) {\r\n        require(_lastReceiptId >= _firstReceiptId);\r\n        require(_receiptId <= _lastReceiptId && _receiptId >= _firstReceiptId);\r\n        MerkleTree memory merkleTree;\r\n        (merkleTree,) = _generateMerkleTree(_firstReceiptId, _lastReceiptId.sub(_firstReceiptId).add(1));\r\n        uint256 index = _receiptId - merkleTree.first_receipt_id;\r\n\r\n        uint256 pathLength;\r\n        bytes32[pathMaximalLength] memory path;\r\n        bool[pathMaximalLength] memory isLeftNeighbors;\r\n        (pathLength, path, isLeftNeighbors) = _generatePath(merkleTree, index);\r\n\r\n        bytes32[] memory neighbors = new bytes32[](pathLength);\r\n        bool[] memory positions = new bool[](pathLength);\r\n\r\n        for (uint256 i = 0; i < pathLength; i++) {\r\n            neighbors[i] = path[i];\r\n            positions[i] = isLeftNeighbors[i];\r\n        }\r\n        return (pathLength, neighbors, positions);\r\n    }\r\n\r\n    function _generateMerkleTree(uint256 _firstReceiptId, uint256 _leafCount) private view returns (MerkleTree memory, bytes32[] memory) {\r\n        bytes32[] memory leafNodes = _receiptsToLeaves(_firstReceiptId, _leafCount);\r\n        bytes32[] memory allNodes;\r\n        uint256 nodeCount;\r\n\r\n        (allNodes, nodeCount) = _leavesToTree(leafNodes);\r\n        MerkleTree memory merkleTree = MerkleTree(allNodes[nodeCount - 1], _leafCount, _firstReceiptId, nodeCount);\r\n\r\n        bytes32[] memory treeNodes = new bytes32[](nodeCount);\r\n        for (uint256 t = 0; t < nodeCount; t++) {\r\n            treeNodes[t] = allNodes[t];\r\n        }\r\n        return (merkleTree, treeNodes);\r\n    }\r\n\r\n    function _generatePath(MerkleTree memory _merkleTree, uint256 _index) private view returns (uint256, bytes32[pathMaximalLength] memory, bool[pathMaximalLength] memory){\r\n\r\n        bytes32[] memory leaves = _receiptsToLeaves(_merkleTree.first_receipt_id, _merkleTree.leaf_count);\r\n        bytes32[] memory allNodes;\r\n        uint256 nodeCount;\r\n\r\n        (allNodes, nodeCount) = _leavesToTree(leaves);\r\n        require(nodeCount == _merkleTree.size);\r\n\r\n        bytes32[] memory nodes = new bytes32[](_merkleTree.size);\r\n        for (uint256 t = 0; t < _merkleTree.size; t++) {\r\n            nodes[t] = allNodes[t];\r\n        }\r\n\r\n        return _generatePath(nodes, _merkleTree.leaf_count, _index);\r\n    }\r\n\r\n    function _generatePath(bytes32[] memory _nodes, uint256 _leafCount, uint256 _index) private pure returns (uint256, bytes32[pathMaximalLength] memory, bool[pathMaximalLength] memory){\r\n        bytes32[pathMaximalLength] memory neighbors;\r\n        bool[pathMaximalLength] memory isLeftNeighbors;\r\n        uint256 indexOfFirstNodeInRow = 0;\r\n        uint256 nodeCountInRow = _leafCount;\r\n        bytes32 neighbor;\r\n        bool isLeftNeighbor;\r\n        uint256 shift;\r\n        uint256 i = 0;\r\n\r\n        while (_index < _nodes.length.sub(1)) {\r\n\r\n            if (_index.mod(2) == 0)\r\n            {\r\n                // add right neighbor node\r\n                neighbor = _nodes[_index.add(1)];\r\n                isLeftNeighbor = false;\r\n            }\r\n            else\r\n            {\r\n                // add left neighbor node\r\n                neighbor = _nodes[_index.sub(1)];\r\n                isLeftNeighbor = true;\r\n            }\r\n\r\n            neighbors[i] = neighbor;\r\n            isLeftNeighbors[i] = isLeftNeighbor;\r\n            i = i.add(1);\r\n\r\n            nodeCountInRow = nodeCountInRow.mod(2) == 0 ? nodeCountInRow : nodeCountInRow.add(1);\r\n            shift = _index.sub(indexOfFirstNodeInRow).div(2);\r\n            indexOfFirstNodeInRow = indexOfFirstNodeInRow.add(nodeCountInRow);\r\n            _index = indexOfFirstNodeInRow.add(shift);\r\n            nodeCountInRow = nodeCountInRow.div(2);\r\n        }\r\n\r\n        return (i, neighbors, isLeftNeighbors);\r\n    }\r\n\r\n    function _leavesToTree(bytes32[] memory _leaves) private view returns (bytes32[] memory, uint256){\r\n        uint256 leafCount = _leaves.length;\r\n        bytes32 left;\r\n        bytes32 right;\r\n\r\n        uint256 newAdded = 0;\r\n        uint256 i = 0;\r\n\r\n        bytes32[] memory nodes = new bytes32[](MerkleTreeMaximalSize);\r\n\r\n        for (uint256 t = 0; t < leafCount; t++)\r\n        {\r\n            nodes[t] = _leaves[t];\r\n        }\r\n\r\n        uint256 nodeCount = leafCount;\r\n        if (_leaves.length.mod(2) == 1) {\r\n            nodes[leafCount] = (_leaves[leafCount.sub(1)]);\r\n            nodeCount = nodeCount.add(1);\r\n        }\r\n\r\n        // uint256 nodeToAdd = nodes.length / 2;\r\n        uint256 nodeToAdd = nodeCount.div(2);\r\n\r\n        while (i < nodeCount.sub(1)) {\r\n\r\n            left = nodes[i];\r\n            i = i.add(1);\r\n\r\n            right = nodes[i];\r\n            i = i.add(1);\r\n\r\n            nodes[nodeCount] = sha256(abi.encode(left, right));\r\n            nodeCount = nodeCount.add(1);\r\n\r\n            if (++newAdded != nodeToAdd)\r\n                continue;\r\n\r\n            if (nodeToAdd.mod(2) == 1 && nodeToAdd != 1)\r\n            {\r\n                nodeToAdd = nodeToAdd.add(1);\r\n                nodes[nodeCount] = nodes[nodeCount.sub(1)];\r\n                nodeCount = nodeCount.add(1);\r\n            }\r\n\r\n            nodeToAdd = nodeToAdd.div(2);\r\n            newAdded = 0;\r\n        }\r\n\r\n        return (nodes, nodeCount);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract Receipts\",\"name\":\"_receiptMaker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pathLengthLimit\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MerkleTreeMaximalLeafCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pathLengthLimit\",\"type\":\"uint256\"}],\"name\":\"changePathLengthLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Receipts\",\"name\":\"_receiptMaker\",\"type\":\"address\"}],\"name\":\"changeReceiptMaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_receiptId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_firstReceiptId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastReceiptId\",\"type\":\"uint256\"}],\"name\":\"generateMerklePath\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_firstReceiptId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastReceiptId\",\"type\":\"uint256\"}],\"name\":\"getArbitraryMerkleTree\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_expectCount\",\"type\":\"uint256\"}],\"name\":\"getMerkleTree\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_firstReceiptId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastReceiptId\",\"type\":\"uint256\"}],\"name\":\"getMerkleTreeRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiptProviderAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MerkleTreeGenerator","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000074a394aab7801d928b9f642068b3ea39ed40eb3f000000000000000000000000000000000000000000000000000000000000000a","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e25a4ee02b725453b7a3fa85016145d57b262a51b7aa379e19dc4ef384c74718"}]}