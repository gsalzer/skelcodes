{"status":"1","message":"OK","result":[{"SourceCode":"\n// File: contracts/handlers/balancer/IExchangeProxy.sol\n\npragma solidity ^0.5.0;\n\ninterface IExchangeProxy {\n    struct Swap {\n        address pool;\n        address tokenIn;\n        address tokenOut;\n        uint256 swapAmount; // tokenInAmount / tokenOutAmount\n        uint256 limitReturnAmount; // minAmountOut / maxAmountIn\n        uint256 maxPrice;\n    }\n\n    function batchSwapExactIn(\n        Swap[] calldata swaps,\n        address tokenIn,\n        address tokenOut,\n        uint256 totalAmountIn,\n        uint256 minTotalAmountOut\n    ) external payable returns (uint256 totalAmountOut);\n\n    function batchSwapExactOut(\n        Swap[] calldata swaps,\n        address tokenIn,\n        address tokenOut,\n        uint256 maxTotalAmountIn\n    ) external payable returns (uint256 totalAmountIn);\n\n    function multihopBatchSwapExactIn(\n        Swap[][] calldata swapSequences,\n        address tokenIn,\n        address tokenOut,\n        uint256 totalAmountIn,\n        uint256 minTotalAmountOut\n    ) external payable returns (uint256 totalAmountOut);\n\n    function multihopBatchSwapExactOut(\n        Swap[][] calldata swapSequences,\n        address tokenIn,\n        address tokenOut,\n        uint256 maxTotalAmountIn\n    ) external payable returns (uint256 totalAmountIn);\n\n    function smartSwapExactIn(\n        address tokenIn,\n        address tokenOut,\n        uint256 totalAmountIn,\n        uint256 minTotalAmountOut,\n        uint256 nPools\n    ) external payable returns (uint256 totalAmountOut);\n\n    function smartSwapExactOut(\n        address tokenIn,\n        address tokenOut,\n        uint256 totalAmountOut,\n        uint256 maxTotalAmountIn,\n        uint256 nPools\n    ) external payable returns (uint256 totalAmountIn);\n}\n\n// File: contracts/lib/LibCache.sol\n\npragma solidity ^0.5.0;\n\nlibrary LibCache {\n    function setAddress(bytes32[] storage _cache, address _input) internal {\n        _cache.push(bytes32(uint256(uint160(_input))));\n    }\n\n    function set(bytes32[] storage _cache, bytes32 _input) internal {\n        _cache.push(_input);\n    }\n\n    function setHandlerType(bytes32[] storage _cache, uint256 _input) internal {\n        require(_input < uint96(-1), \"Invalid Handler Type\");\n        _cache.push(bytes12(uint96(_input)));\n    }\n\n    function setSender(bytes32[] storage _cache, address _input) internal {\n        require(_cache.length == 0, \"cache not empty\");\n        setAddress(_cache, _input);\n    }\n\n    function getAddress(bytes32[] storage _cache)\n        internal\n        returns (address ret)\n    {\n        ret = address(uint160(uint256(peek(_cache))));\n        _cache.pop();\n    }\n\n    function getSig(bytes32[] storage _cache) internal returns (bytes4 ret) {\n        ret = bytes4(peek(_cache));\n        _cache.pop();\n    }\n\n    function get(bytes32[] storage _cache) internal returns (bytes32 ret) {\n        ret = peek(_cache);\n        _cache.pop();\n    }\n\n    function peek(bytes32[] storage _cache)\n        internal\n        view\n        returns (bytes32 ret)\n    {\n        require(_cache.length > 0, \"cache empty\");\n        ret = _cache[_cache.length - 1];\n    }\n\n    function getSender(bytes32[] storage _cache)\n        internal\n        returns (address ret)\n    {\n        require(_cache.length > 0, \"cache empty\");\n        ret = address(uint160(uint256(_cache[0])));\n    }\n}\n\n// File: contracts/Cache.sol\n\npragma solidity ^0.5.0;\n\n\n/// @notice A cache structure composed by a bytes32 array\ncontract Cache {\n    using LibCache for bytes32[];\n\n    bytes32[] cache;\n\n    modifier isCacheEmpty() {\n        require(cache.length == 0, \"Cache not empty\");\n        _;\n    }\n}\n\n// File: contracts/Config.sol\n\npragma solidity ^0.5.0;\n\ncontract Config {\n    // function signature of \"postProcess()\"\n    bytes4 constant POSTPROCESS_SIG = 0xc2722916;\n\n    // Handler post-process type. Others should not happen now.\n    enum HandlerType {Token, Custom, Others}\n}\n\n// File: contracts/handlers/HandlerBase.sol\n\npragma solidity ^0.5.0;\n\n\n\ncontract HandlerBase is Cache, Config {\n    function postProcess() external payable {\n        revert(\"Invalid post process\");\n        /* Implementation template\n        bytes4 sig = cache.getSig();\n        if (sig == bytes4(keccak256(bytes(\"handlerFunction_1()\")))) {\n            // Do something\n        } else if (sig == bytes4(keccak256(bytes(\"handlerFunction_2()\")))) {\n            bytes32 temp = cache.get();\n            // Do something\n        } else revert(\"Invalid post process\");\n        */\n    }\n\n    function _updateToken(address token) internal {\n        cache.setAddress(token);\n        // Ignore token type to fit old handlers\n        // cache.setHandlerType(uint256(HandlerType.Token));\n    }\n\n    function _updatePostProcess(bytes32[] memory params) internal {\n        for (uint256 i = params.length; i > 0; i--) {\n            cache.set(params[i - 1]);\n        }\n        cache.set(msg.sig);\n        cache.setHandlerType(uint256(HandlerType.Custom));\n    }\n}\n\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n * the optional functions; to access them see {ERC20Detailed}.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: @openzeppelin/contracts/math/SafeMath.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n// File: @openzeppelin/contracts/utils/Address.sol\n\npragma solidity ^0.5.5;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following \n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    /**\n     * @dev Converts an `address` into `address payable`. Note that this is\n     * simply a type cast: the actual underlying value is not changed.\n     *\n     * _Available since v2.4.0._\n     */\n    function toPayable(address account) internal pure returns (address payable) {\n        return address(uint160(account));\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     *\n     * _Available since v2.4.0._\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-call-value\n        (bool success, ) = recipient.call.value(amount)(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n}\n\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n\npragma solidity ^0.5.0;\n\n\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves.\n\n        // A Solidity high level call has three parts:\n        //  1. The target address is checked to verify it contains contract code\n        //  2. The call itself is made, and success asserted\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\n        // solhint-disable-next-line max-line-length\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = address(token).call(data);\n        require(success, \"SafeERC20: low-level call failed\");\n\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n// File: contracts/handlers/balancer/HBalancerExchange.sol\n\npragma solidity ^0.5.0;\npragma experimental ABIEncoderV2;\n\n\n\n\ncontract HBalancerExchange is HandlerBase {\n    using SafeERC20 for IERC20;\n\n    // prettier-ignore\n    address public constant EXCHANGE_PROXY = 0x3E66B66Fd1d0b02fDa6C811Da9E0547970DB2f21;\n    // prettier-ignore\n    address public constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n    function batchSwapExactIn(\n        IExchangeProxy.Swap[] calldata swaps,\n        address tokenIn,\n        address tokenOut,\n        uint256 totalAmountIn,\n        uint256 minTotalAmountOut\n    ) external payable returns (uint256 totalAmountOut) {\n        IExchangeProxy balancer = IExchangeProxy(EXCHANGE_PROXY);\n\n        if (tokenIn == ETH_ADDRESS) {\n            totalAmountOut = balancer.batchSwapExactIn.value(totalAmountIn)(\n                swaps,\n                tokenIn,\n                tokenOut,\n                totalAmountIn,\n                minTotalAmountOut\n            );\n        } else {\n            IERC20(tokenIn).safeApprove(EXCHANGE_PROXY, totalAmountIn);\n            totalAmountOut = balancer.batchSwapExactIn(\n                swaps,\n                tokenIn,\n                tokenOut,\n                totalAmountIn,\n                minTotalAmountOut\n            );\n            IERC20(tokenIn).safeApprove(EXCHANGE_PROXY, 0);\n        }\n\n        if (tokenOut != ETH_ADDRESS) _updateToken(tokenOut);\n    }\n\n    function batchSwapExactOut(\n        IExchangeProxy.Swap[] calldata swaps,\n        address tokenIn,\n        address tokenOut,\n        uint256 maxTotalAmountIn\n    ) external payable returns (uint256 totalAmountIn) {\n        IExchangeProxy balancer = IExchangeProxy(EXCHANGE_PROXY);\n\n        if (tokenIn == ETH_ADDRESS) {\n            totalAmountIn = balancer.batchSwapExactOut.value(maxTotalAmountIn)(\n                swaps,\n                tokenIn,\n                tokenOut,\n                maxTotalAmountIn\n            );\n        } else {\n            IERC20(tokenIn).safeApprove(EXCHANGE_PROXY, maxTotalAmountIn);\n            totalAmountIn = balancer.batchSwapExactOut(\n                swaps,\n                tokenIn,\n                tokenOut,\n                maxTotalAmountIn\n            );\n            IERC20(tokenIn).safeApprove(EXCHANGE_PROXY, 0);\n        }\n\n        if (tokenOut != ETH_ADDRESS) _updateToken(tokenOut);\n    }\n\n    function multihopBatchSwapExactIn(\n        IExchangeProxy.Swap[][] calldata swapSequences,\n        address tokenIn,\n        address tokenOut,\n        uint256 totalAmountIn,\n        uint256 minTotalAmountOut\n    ) external payable returns (uint256 totalAmountOut) {\n        IExchangeProxy balancer = IExchangeProxy(EXCHANGE_PROXY);\n\n        if (tokenIn == ETH_ADDRESS) {\n            totalAmountOut = balancer.multihopBatchSwapExactIn.value(\n                totalAmountIn\n            )(\n                swapSequences,\n                tokenIn,\n                tokenOut,\n                totalAmountIn,\n                minTotalAmountOut\n            );\n        } else {\n            IERC20(tokenIn).safeApprove(EXCHANGE_PROXY, totalAmountIn);\n            totalAmountOut = balancer.multihopBatchSwapExactIn(\n                swapSequences,\n                tokenIn,\n                tokenOut,\n                totalAmountIn,\n                minTotalAmountOut\n            );\n            IERC20(tokenIn).safeApprove(EXCHANGE_PROXY, 0);\n        }\n\n        if (tokenOut != ETH_ADDRESS) _updateToken(tokenOut);\n    }\n\n    function multihopBatchSwapExactOut(\n        IExchangeProxy.Swap[][] calldata swapSequences,\n        address tokenIn,\n        address tokenOut,\n        uint256 maxTotalAmountIn\n    ) external payable returns (uint256 totalAmountIn) {\n        IExchangeProxy balancer = IExchangeProxy(EXCHANGE_PROXY);\n\n        if (tokenIn == ETH_ADDRESS) {\n            totalAmountIn = balancer.multihopBatchSwapExactOut.value(\n                maxTotalAmountIn\n            )(swapSequences, tokenIn, tokenOut, maxTotalAmountIn);\n        } else {\n            IERC20(tokenIn).safeApprove(EXCHANGE_PROXY, maxTotalAmountIn);\n            totalAmountIn = balancer.multihopBatchSwapExactOut(\n                swapSequences,\n                tokenIn,\n                tokenOut,\n                maxTotalAmountIn\n            );\n            IERC20(tokenIn).safeApprove(EXCHANGE_PROXY, 0);\n        }\n\n        if (tokenOut != ETH_ADDRESS) _updateToken(tokenOut);\n    }\n\n    function smartSwapExactIn(\n        address tokenIn,\n        address tokenOut,\n        uint256 totalAmountIn,\n        uint256 minTotalAmountOut,\n        uint256 nPools\n    ) external payable returns (uint256 totalAmountOut) {\n        IExchangeProxy balancer = IExchangeProxy(EXCHANGE_PROXY);\n\n        if (tokenIn == ETH_ADDRESS) {\n            totalAmountOut = balancer.smartSwapExactIn.value(totalAmountIn)(\n                tokenIn,\n                tokenOut,\n                totalAmountIn,\n                minTotalAmountOut,\n                nPools\n            );\n        } else {\n            IERC20(tokenIn).safeApprove(EXCHANGE_PROXY, totalAmountIn);\n            totalAmountOut = balancer.smartSwapExactIn(\n                tokenIn,\n                tokenOut,\n                totalAmountIn,\n                minTotalAmountOut,\n                nPools\n            );\n            IERC20(tokenIn).safeApprove(EXCHANGE_PROXY, 0);\n        }\n\n        if (tokenOut != ETH_ADDRESS) _updateToken(tokenOut);\n    }\n\n    function smartSwapExactOut(\n        address tokenIn,\n        address tokenOut,\n        uint256 totalAmountOut,\n        uint256 maxTotalAmountIn,\n        uint256 nPools\n    ) external payable returns (uint256 totalAmountIn) {\n        IExchangeProxy balancer = IExchangeProxy(EXCHANGE_PROXY);\n\n        if (tokenIn == ETH_ADDRESS) {\n            totalAmountIn = balancer.smartSwapExactOut.value(maxTotalAmountIn)(\n                tokenIn,\n                tokenOut,\n                totalAmountOut,\n                maxTotalAmountIn,\n                nPools\n            );\n        } else {\n            IERC20(tokenIn).safeApprove(EXCHANGE_PROXY, maxTotalAmountIn);\n            totalAmountIn = balancer.smartSwapExactOut(\n                tokenIn,\n                tokenOut,\n                totalAmountOut,\n                maxTotalAmountIn,\n                nPools\n            );\n            IERC20(tokenIn).safeApprove(EXCHANGE_PROXY, 0);\n        }\n\n        if (tokenOut != ETH_ADDRESS) _updateToken(tokenOut);\n    }\n}\n","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"ETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EXCHANGE_PROXY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct IExchangeProxy.Swap[]\",\"name\":\"swaps\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTotalAmountOut\",\"type\":\"uint256\"}],\"name\":\"batchSwapExactIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmountOut\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct IExchangeProxy.Swap[]\",\"name\":\"swaps\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalAmountIn\",\"type\":\"uint256\"}],\"name\":\"batchSwapExactOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmountIn\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct IExchangeProxy.Swap[][]\",\"name\":\"swapSequences\",\"type\":\"tuple[][]\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTotalAmountOut\",\"type\":\"uint256\"}],\"name\":\"multihopBatchSwapExactIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmountOut\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct IExchangeProxy.Swap[][]\",\"name\":\"swapSequences\",\"type\":\"tuple[][]\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalAmountIn\",\"type\":\"uint256\"}],\"name\":\"multihopBatchSwapExactOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmountIn\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"postProcess\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTotalAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nPools\",\"type\":\"uint256\"}],\"name\":\"smartSwapExactIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmountOut\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nPools\",\"type\":\"uint256\"}],\"name\":\"smartSwapExactOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmountIn\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"HBalancerExchange","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}