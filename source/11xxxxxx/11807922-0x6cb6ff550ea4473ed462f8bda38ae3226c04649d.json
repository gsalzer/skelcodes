{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [\r\n      \":@openzeppelin/=/home/ubuntu/flex-saving/node_modules/@openzeppelin/\"\r\n    ],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"/home/ubuntu/flex-saving/node_modules/@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\r\n      \"keccak256\": \"0x640b6dee7a4b830bdfd52b5031a07fc2b12209f5b2e29e5d364a7d37f69d8076\"\r\n    },\r\n    \"/home/ubuntu/flex-saving/node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\r\n      \"keccak256\": \"0xe5bb0f57cff3e299f360052ba50f1ea0fff046df2be070b6943e0e3c3fdad8a9\"\r\n    },\r\n    \"/home/ubuntu/flex-saving/node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\r\n      \"keccak256\": \"0x6f2c9955d65c522b80f4b8792f076512d2df947d2112cbc4d98a4781ed42ede2\"\r\n    },\r\n    \"/home/ubuntu/flex-saving/node_modules/@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.5;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following \\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-call-value\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\",\r\n      \"keccak256\": \"0x1a8e5072509c5ea7365eb1d48030b9be865140c8fb779968da0a459a0e174a11\"\r\n    },\r\n    \"/home/ubuntu/flex-saving/node_modules/@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n *\\n * _Since v2.5.0:_ this module is now much more gas efficient, given net gas\\n * metering changes introduced in the Istanbul hardfork.\\n */\\ncontract ReentrancyGuard {\\n    bool private _notEntered;\\n\\n    constructor () internal {\\n        // Storing an initial non-zero value makes deployment a bit more\\n        // expensive, but in exchange the refund on every call to nonReentrant\\n        // will be lower in amount. Since refunds are capped to a percetange of\\n        // the total transaction's gas, it is best to keep them low in cases\\n        // like this one, to increase the likelihood of the full refund coming\\n        // into effect.\\n        _notEntered = true;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_notEntered, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _notEntered = false;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _notEntered = true;\\n    }\\n}\\n\",\r\n      \"keccak256\": \"0xb63221b23818d622bfd83d18e0968307e4fcb7a35536bdceded76e1cf8349acd\"\r\n    },\r\n    \"contracts/bella-staking/BellaStaking.sol\": {\r\n      \"content\": \"pragma solidity 0.5.15;\\n\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"../libraries/Ownable.sol\\\";\\n\\n\\n/**\\n * @title BellaStaking\\n * @dev stake btoken and get bella rewards, modified based on sushi swap's masterchef\\n * delay rewards to get a boost:\\n * dalay of: 0, 7, 15 and 30 days \\n */\\ncontract BellaStaking is Ownable, ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    uint256 constant NUM_TYPES = 4;\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount;     // How many btokens the user has provided.\\n        uint256 effectiveAmount; // amount*boost\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n        //\\n        // We do some fancy math here. Basically, any point in time, the amount of BELLAs\\n        // entitled to a user but is pending to be distributed is:\\n        //\\n        //   pending reward = (user.effectiveAmount * pool.accBellaPerShare) - user.rewardDebt\\n        //\\n        // Whenever a user deposits or withdraws btokens to a pool. Here's what happens:\\n        //   1. The pool's `accBellaPerShare` (and `lastRewardTime`) gets updated.\\n        //   2. User receives the pending reward sent to his/her address.\\n        //   3. User's `amount` and `effectiveAmount` gets updated.\\n        //   4. User's `rewardDebt` gets updated.\\n        uint256 earnedBella; // unclaimed bella\\n    }\\n\\n    // bella under claiming\\n    struct ClaimingBella {\\n        uint256 amount;\\n        uint256 unlockTime;\\n    }\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        IERC20 underlyingToken;   // Address of underlying token.\\n        uint256 allocPoint;       // How many allocation points assigned to this pool.\\n        uint256 lastRewardTime;  // Last block number that BELLAs distribution occurs.\\n        uint256 accBellaPerShare; // Accumulated BELLAs per share, times 1e12. See below.\\n        uint256 totalEffectiveAmount; // Sum of user's amount*boost\\n    }\\n\\n    IERC20 public bella;\\n\\n    PoolInfo[] public poolInfo;\\n\\n    // 7, 15, 30 days delay boost, 3 digit = from 100% to 199%\\n    mapping (uint256 => uint256[3]) public boostInfo;  \\n\\n    // Info of each user that stakes btokens.\\n    mapping (uint256 => mapping (address => UserInfo[NUM_TYPES])) public userInfos;\\n\\n    // User's bella under claiming\\n    mapping (address => ClaimingBella[]) public claimingBellas;\\n\\n    // Total allocation poitns. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint = 0;\\n    // The timestamp when BELLA mining starts.\\n    uint256 public startTime;\\n    // period to released currently locked bella rewards\\n    uint256 public currentUnlockCycle;\\n    // under current release cycle, the releasing speed per second\\n    uint256 public bellaPerSecond;\\n    // timestamp that current round of bella rewards ends\\n    uint256 public unlockEndTimestamp;\\n\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n\\n    modifier validPool(uint256 _pid) {\\n        require(_pid < poolInfo.length, \\\"invalid pool id\\\");\\n        _;\\n    }\\n\\n    /**\\n    * @param _bella bella address\\n    * @param _startTime timestamp that starts reward distribution\\n    * @param governance governance address\\n    */\\n    constructor(\\n        IERC20 _bella,\\n        uint256 _startTime,\\n        address governance\\n    ) public Ownable(governance) {\\n        bella = _bella;\\n        startTime = _startTime;\\n    }\\n\\n    /**\\n    * @return number of all the pools\\n    */\\n    function poolLength() public view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    /**\\n    * @dev Add a new underlying token to the pool. Can only be called by the governance.\\n    * delay rewards to get a boost:\\n    * dalay of: 0, 7, 15 and 30 days \\n    * @param _allocPoint weight of this pool\\n    * @param _underlyingToken underlying token address\\n    * @param boost boostInfo of this pool\\n    * @param _withUpdate if update all the pool informations\\n    */\\n    function add(uint256 _allocPoint, IERC20 _underlyingToken, uint256[3] memory boost, bool _withUpdate) public onlyOwner {\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n\\n        for (uint256 i=0; i<3; i++) {\\n            require((boost[i]>=100 && boost[i]<=200), \\\"invalid boost\\\");\\n        }\\n\\n        uint256 lastRewardTime = now > startTime ? now : startTime;\\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\\n\\n        boostInfo[poolLength()] = boost;\\n\\n        poolInfo.push(PoolInfo({\\n            underlyingToken: _underlyingToken,\\n            allocPoint: _allocPoint,\\n            lastRewardTime: lastRewardTime,\\n            accBellaPerShare: 0,\\n            totalEffectiveAmount: 0\\n        }));\\n\\n    }\\n\\n    /**\\n    * @dev Update the given pool's BELLA allocation point. Can only be called by the governance.\\n    * @param _pid id of the pool\\n    * @param _allocPoint weight of this pool\\n    */\\n    function set(uint256 _pid, uint256 _allocPoint) public validPool(_pid) onlyOwner {\\n        massUpdatePools();\\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n    }\\n\\n    /**\\n     * @dev we will lock bella tokens on the begining every releasing cycle\\n     * @param amount the amount of bella token to lock\\n     * @param nextUnlockCycle next reward releasing cycle, unit=day\\n     */\\n    function lock(uint256 amount, uint256 nextUnlockCycle) external onlyOwner {\\n        massUpdatePools();\\n\\n        currentUnlockCycle = nextUnlockCycle * 1 days;\\n        unlockEndTimestamp = now.add(currentUnlockCycle);\\n        bellaPerSecond = bella.balanceOf(address(this)).add(amount).div(currentUnlockCycle);\\n            \\n        require(\\n            bella.transferFrom(msg.sender, address(this), amount),\\n            \\\"Additional bella transfer failed\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev user's total earned bella in all pools\\n     * @param _user user's address\\n     */\\n    function earnedBellaAllPool(address _user) external view returns  (uint256) {\\n        uint256 sum = 0;\\n        for (uint256 i = 0; i < poolInfo.length; i++) {\\n            sum = sum.add(earnedBellaAll(i, _user));\\n        }\\n        return sum;\\n    }\\n\\n    /**\\n     * @dev user's total earned bella in a specific pool\\n     * @param _pid id of the pool\\n     * @param _user user's address\\n     */\\n    function earnedBellaAll(uint256 _pid, address _user) public view validPool(_pid) returns  (uint256) {\\n        uint256 sum = 0;\\n        for (uint256 i = 0; i < NUM_TYPES; i++) {\\n            sum = sum.add(earnedBella(_pid, _user, i));\\n        }\\n        return sum;\\n    }\\n\\n    /**\\n     * @dev user's earned bella in a specific pool for a specific saving type\\n     * @param _pid id of the pool\\n     * @param _user user's address\\n     * @param savingType saving type\\n     */\\n    function earnedBella(uint256 _pid, address _user, uint256 savingType) public view validPool(_pid) returns (uint256) {\\n        require(savingType < NUM_TYPES, \\\"invalid savingType\\\");\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfos[_pid][_user][savingType];\\n        uint256 accBellaPerShare = pool.accBellaPerShare;\\n        if (now > pool.lastRewardTime && pool.totalEffectiveAmount != 0 && pool.lastRewardTime != unlockEndTimestamp) {\\n            uint256 delta = now > unlockEndTimestamp ? unlockEndTimestamp.sub(pool.lastRewardTime) : now.sub(pool.lastRewardTime);\\n            uint256 bellaReward = bellaPerSecond.mul(delta).mul(pool.allocPoint).div(totalAllocPoint);\\n            accBellaPerShare = accBellaPerShare.add(bellaReward.mul(1e12).div(pool.totalEffectiveAmount));\\n        }\\n        return user.effectiveAmount.mul(accBellaPerShare).div(1e12).sub(user.rewardDebt);\\n    }\\n\\n    /**\\n     * @dev Update reward variables for all pools. Be careful of gas spending!\\n     */\\n    function massUpdatePools() public {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            updatePool(pid);\\n        }\\n    }\\n\\n    /**\\n     * @dev Update reward variables of the given pool to be up-to-date.\\n     * @param _pid id of the pool\\n     */\\n    function updatePool(uint256 _pid) public validPool(_pid) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (now <= pool.lastRewardTime || unlockEndTimestamp == pool.lastRewardTime) {\\n            return;\\n        }\\n        if (pool.totalEffectiveAmount == 0) {\\n            pool.lastRewardTime = now;\\n            return;\\n        }\\n        uint256 accBellaPerShare = pool.accBellaPerShare;\\n\\n        // now > pool.lastRewardTime && pool.totalEffectiveAmount != 0\\n        if (now > unlockEndTimestamp) {\\n            uint256 delta = unlockEndTimestamp.sub(pool.lastRewardTime);\\n            uint256 bellaReward = bellaPerSecond.mul(delta).mul(pool.allocPoint).div(totalAllocPoint);\\n            pool.accBellaPerShare = accBellaPerShare.add(bellaReward.mul(1e12).div(pool.totalEffectiveAmount));\\n\\n            pool.lastRewardTime = unlockEndTimestamp;\\n        } else {\\n            uint256 delta = now.sub(pool.lastRewardTime);\\n            uint256 bellaReward = bellaPerSecond.mul(delta).mul(pool.allocPoint).div(totalAllocPoint);\\n            pool.accBellaPerShare = accBellaPerShare.add(bellaReward.mul(1e12).div(pool.totalEffectiveAmount));\\n\\n            pool.lastRewardTime = now;\\n        }\\n\\n    }\\n\\n    /**\\n     * @dev Deposit underlying token for bella allocation\\n     * @param _pid id of the pool\\n     * @param _amount amount of underlying token to deposit\\n     * @param savingType saving type\\n     */\\n    function deposit(uint256 _pid, uint256 _amount, uint256 savingType) public validPool(_pid) nonReentrant {\\n        require(savingType < NUM_TYPES, \\\"invalid savingType\\\");\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfos[_pid][msg.sender][savingType];\\n        updatePool(_pid);\\n        if (user.effectiveAmount > 0) {\\n            uint256 pending = user.effectiveAmount.mul(pool.accBellaPerShare).div(1e12).sub(user.rewardDebt);\\n            if(pending > 0) {\\n                user.earnedBella = user.earnedBella.add(pending);\\n            }\\n        }\\n        if(_amount > 0) {\\n            pool.underlyingToken.safeTransferFrom(address(msg.sender), address(this), _amount);\\n            user.amount = user.amount.add(_amount);\\n            uint256 effectiveAmount = toEffectiveAmount(_pid, _amount, savingType);\\n            user.effectiveAmount = user.effectiveAmount.add(effectiveAmount);\\n            pool.totalEffectiveAmount = pool.totalEffectiveAmount.add(effectiveAmount);\\n        }\\n        user.rewardDebt = user.effectiveAmount.mul(pool.accBellaPerShare).div(1e12); /// 初始的奖励为0\\n        emit Deposit(msg.sender, _pid, _amount);\\n    }\\n\\n    /**\\n     * @dev Withdraw underlying token\\n     * @param _pid id of the pool\\n     * @param _amount amount of underlying token to withdraw\\n     * @param savingType saving type\\n     */\\n    function withdraw(uint256 _pid, uint256 _amount, uint256 savingType) public validPool(_pid) nonReentrant {\\n        require(savingType < NUM_TYPES, \\\"invalid savingType\\\");\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfos[_pid][msg.sender][savingType];\\n        require(user.amount >= _amount, \\\"withdraw: not good\\\");\\n        updatePool(_pid);\\n        uint256 pending = user.effectiveAmount.mul(pool.accBellaPerShare).div(1e12).sub(user.rewardDebt);\\n        if(pending > 0) {\\n            user.earnedBella = user.earnedBella.add(pending);\\n        }\\n        if(_amount > 0) {\\n            user.amount = user.amount.sub(_amount);\\n            uint256 effectiveAmount = toEffectiveAmount(_pid, _amount, savingType);\\n\\n            /// round errors?\\n            pool.totalEffectiveAmount = pool.totalEffectiveAmount.sub(effectiveAmount);\\n            user.effectiveAmount = toEffectiveAmount(_pid, user.amount, savingType);\\n\\n            pool.underlyingToken.safeTransfer(address(msg.sender), _amount);\\n        }\\n        user.rewardDebt = user.effectiveAmount.mul(pool.accBellaPerShare).div(1e12);\\n        emit Withdraw(msg.sender, _pid, _amount);\\n    }\\n\\n    /**\\n     * @dev Withdraw all underlying token in one pool\\n     * @param _pid id of the pool\\n     */\\n    function withdrawAll(uint256 _pid) public validPool(_pid) {\\n        for (uint256 i=0; i<NUM_TYPES; i++) {\\n            uint256 amount = userInfos[_pid][msg.sender][i].amount;\\n            if (amount != 0) {\\n                withdraw(_pid, amount, i);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Withdraw without caring about rewards. EMERGENCY ONLY.\\n     * @param _pid id of the pool\\n     * @param savingType saving type\\n     */\\n    function emergencyWithdraw(uint256 _pid, uint256 savingType) public validPool(_pid) nonReentrant {\\n        require(savingType < NUM_TYPES, \\\"invalid savingType\\\");\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfos[_pid][msg.sender][savingType];\\n        uint256 amount = user.amount;\\n\\n        pool.totalEffectiveAmount = pool.totalEffectiveAmount.sub(user.effectiveAmount);\\n        user.amount = 0;\\n        user.effectiveAmount = 0;\\n        user.rewardDebt = 0;\\n        user.earnedBella = 0;\\n\\n        pool.underlyingToken.safeTransfer(address(msg.sender), amount);\\n        emit EmergencyWithdraw(msg.sender, _pid, amount);\\n\\n    }\\n\\n    /**\\n     * @dev claim earned bella to collect for a specific saving type\\n     * @param _pid id of the pool\\n     * @param savingType saving type\\n     */\\n    function claimBella(uint256 _pid, uint256 savingType) public {\\n        require(savingType < NUM_TYPES, \\\"invalid savingType\\\");\\n        UserInfo storage user = userInfos[_pid][msg.sender][savingType];\\n\\n        updatePool(_pid);\\n        PoolInfo memory pool = poolInfo[_pid];\\n\\n        uint256 pending = user.effectiveAmount.mul(pool.accBellaPerShare).div(1e12).sub(user.rewardDebt);\\n        if(pending > 0) {\\n            user.earnedBella = user.earnedBella.add(pending);\\n        }\\n        user.rewardDebt = user.effectiveAmount.mul(pool.accBellaPerShare).div(1e12);\\n\\n        uint256 delay = getDelayFromType(savingType);\\n\\n        if (delay == 0) {\\n            uint256 amount = user.earnedBella;\\n            user.earnedBella = 0;\\n            safeBellaTransfer(msg.sender, amount);\\n        } else {\\n            uint256 amount = user.earnedBella;\\n            user.earnedBella = 0;\\n            ClaimingBella[] storage claimingBella = claimingBellas[msg.sender];\\n            claimingBella.push(ClaimingBella({amount: amount, unlockTime: now.add(delay * 1 days)}));       \\n        }\\n    }\\n\\n    /**\\n     * @dev claim all earned bella to collect\\n     * @param _pid id of the pool\\n     */\\n    function claimAllBella(uint256 _pid) public validPool(_pid) {\\n        for (uint256 i=0; i<NUM_TYPES; i++) {\\n            claimBella(_pid, i);\\n        }\\n    }\\n\\n    /**\\n     * @dev collect claimed bella (instant and delayed)\\n     */\\n    function collectBella() public {\\n        uint256 sum = 0;\\n        ClaimingBella[] storage claimingBella = claimingBellas[msg.sender];\\n        for (uint256 i = 0; i < claimingBella.length; i++) {\\n            ClaimingBella storage claim = claimingBella[i];\\n            if (claimingBella[i].amount !=0 && claimingBella[i].unlockTime <= now) {\\n                sum = sum.add(claim.amount);\\n                delete claimingBella[i];\\n            }\\n        }\\n        safeBellaTransfer(msg.sender, sum);\\n\\n        // clean array if len > 15 and have more than 4 zeros\\n        if (claimingBella.length > 15) {\\n            uint256 zeros = 0;\\n            for (uint256 i=0; i < claimingBella.length; i++) {\\n                if (claimingBella[i].amount == 0) {\\n                    zeros++;\\n                }\\n            }\\n            if (zeros < 5)\\n                return;\\n\\n            uint256 i = 0;\\n            while (i < claimingBella.length) {\\n                if (claimingBella[i].amount == 0) {\\n                    claimingBella[i].amount = claimingBella[claimingBella.length-1].amount;\\n                    claimingBella[i].unlockTime = claimingBella[claimingBella.length-1].unlockTime;\\n                    claimingBella.pop();\\n                } else {\\n                    i++;\\n                }\\n            }         \\n        }\\n    }\\n\\n    /**\\n     * @dev Get user's total staked btoken in on pool\\n     * @param _pid id of the pool\\n     * @param user user address\\n     */\\n    function getBtokenStaked(uint256 _pid, address user) external view validPool(_pid) returns (uint256) {\\n        uint256 sum = 0;\\n        for (uint256 i=0; i<NUM_TYPES; i++) {\\n           sum = sum.add(userInfos[_pid][user][i].amount);\\n        }\\n        return sum;\\n    }\\n\\n    /**\\n     * @dev view function to see user's collectiable bella\\n     */\\n    function collectiableBella() external view returns (uint256) {\\n        uint256 sum = 0;\\n        ClaimingBella[] memory claimingBella = claimingBellas[msg.sender];\\n        for (uint256 i = 0; i < claimingBella.length; i++) {\\n            ClaimingBella memory claim = claimingBella[i];\\n            if (claim.amount !=0 && claim.unlockTime <= now) {\\n                sum = sum.add(claim.amount);\\n            }\\n        }\\n        return sum;\\n    }\\n\\n    /**\\n     * @dev view function to see user's delayed bella\\n     */\\n    function delayedBella() external view returns (uint256) {\\n        uint256 sum = 0;\\n        ClaimingBella[] memory claimingBella = claimingBellas[msg.sender];\\n        for (uint256 i = 0; i < claimingBella.length; i++) {\\n            ClaimingBella memory claim = claimingBella[i];\\n            if (claim.amount !=0 && claim.unlockTime > now) {\\n                sum = sum.add(claim.amount);\\n            }\\n        }\\n        return sum;\\n    }\\n\\n    /**\\n     * @dev view function to check boost*amount of each saving type \\n     * @param pid id of the pool\\n     * @param amount amount of underlying token\\n     * @param savingType saving type\\n     * @return boost*amount\\n     */\\n    function toEffectiveAmount(uint256 pid, uint256 amount, uint256 savingType) internal view returns (uint256) {\\n\\n        if (savingType == 0) {\\n            return amount;\\n        } else if (savingType == 1) {\\n            return amount * boostInfo[pid][0] / 100;\\n        } else if (savingType == 2) {\\n            return amount * boostInfo[pid][1] / 100;\\n        } else if (savingType == 3) {\\n            return amount * boostInfo[pid][2] / 100;\\n        } else {\\n            revert(\\\"toEffectiveAmount: invalid savingType\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev pure function to check delay of each saving type \\n     * @param savingType saving type\\n     * @return delay of the input saving type\\n     */\\n    function getDelayFromType(uint256 savingType) internal pure returns (uint256) {\\n        if (savingType == 0) {\\n            return 0;\\n        } else if (savingType == 1) {\\n            return 7;\\n        } else if (savingType == 2) {\\n            return 15;\\n        } else if (savingType == 3) {\\n            return 30;\\n        } else {\\n            revert(\\\"getDelayFromType: invalid savingType\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Safe bella transfer function, just in case if rounding error causes pool to not have enough BELLAs.\\n     * @param _to Target address to send bella\\n     * @param _amount Amount of bella to send\\n     */\\n    function safeBellaTransfer(address _to, uint256 _amount) internal {\\n        uint256 bellaBal = bella.balanceOf(address(this));\\n        if (_amount > bellaBal) {\\n            bella.transfer(_to, bellaBal);\\n        } else {\\n            bella.transfer(_to, _amount);\\n        }\\n    }\\n\\n}\\n\",\r\n      \"keccak256\": \"0x2ffa7c4d170706e3dbda957dac0681d9a9b6d2f7c5fbfe1da206f04d809642ef\"\r\n    },\r\n    \"contracts/libraries/Ownable.sol\": {\r\n      \"content\": \"pragma solidity 0.5.15;\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n */\\ncontract Ownable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev The Ownable constructor sets the original `owner` of the contract to the a\\n     * specified account.\\n     * @param initalOwner The address of the inital owner.\\n     */\\n    constructor(address initalOwner) internal {\\n        _owner = initalOwner;\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    /**\\n     * @return the address of the owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Only owner can call\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @return true if `msg.sender` is the owner of the contract.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return msg.sender == _owner;\\n    }\\n\\n    /**\\n     * @dev Allows the current owner to relinquish control of the contract.\\n     * It will not be possible to call the functions with the `onlyOwner`\\n     * modifier anymore.\\n     * @notice Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n     * @param newOwner The address to transfer ownership to.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers control of the contract to a newOwner.\\n     * @param newOwner The address to transfer ownership to.\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Owner should not be 0 address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\r\n      \"keccak256\": \"0x0639cc4627faf63fb3d277be7487ffb76482ebdffbece437a97c171c74894e86\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_bella\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"governance\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_underlyingToken\",\"type\":\"address\"},{\"internalType\":\"uint256[3]\",\"name\":\"boost\",\"type\":\"uint256[3]\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bella\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bellaPerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"boostInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"claimAllBella\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"savingType\",\"type\":\"uint256\"}],\"name\":\"claimBella\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimingBellas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"collectBella\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collectiableBella\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentUnlockCycle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"delayedBella\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"savingType\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"savingType\",\"type\":\"uint256\"}],\"name\":\"earnedBella\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"earnedBellaAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"earnedBellaAllPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"savingType\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getBtokenStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextUnlockCycle\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"underlyingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accBellaPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalEffectiveAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"}],\"name\":\"set\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unlockEndTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userInfos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"effectiveAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earnedBella\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"savingType\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"BellaStaking","CompilerVersion":"v0.5.15+commit.6a57276f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000a91ac63d040deb1b7a5e4d4134ad23eb0ba07e1400000000000000000000000000000000000000000000000000000000602127c000000000000000000000000010f919f874db00239a1f891d96279ff999514b82","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":""}]}