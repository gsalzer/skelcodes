{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface IBPool is IERC20 {\r\n    function version() external view returns(uint);\r\n\r\n    function swapExactAmountIn(address, uint, address, uint, uint) external returns (uint, uint);\r\n\r\n    function swapExactAmountOut(address, uint, address, uint, uint) external returns (uint, uint);\r\n\r\n    function calcInGivenOut(uint, uint, uint, uint, uint, uint) external pure returns (uint);\r\n\r\n    function calcOutGivenIn(uint, uint, uint, uint, uint, uint) external pure returns (uint);\r\n\r\n    function getDenormalizedWeight(address) external view returns (uint);\r\n\r\n    function swapFee() external view returns (uint);\r\n\r\n    function setSwapFee(uint _swapFee) external;\r\n\r\n    function bind(address token, uint balance, uint denorm) external;\r\n\r\n    function rebind(address token, uint balance, uint denorm) external;\r\n\r\n    function finalize(\r\n        uint _swapFee,\r\n        uint _initPoolSupply,\r\n        address[] calldata _bindTokens,\r\n        uint[] calldata _bindDenorms\r\n    ) external;\r\n\r\n    function setPublicSwap(bool _publicSwap) external;\r\n    function setController(address _controller) external;\r\n    function setExchangeProxy(address _exchangeProxy) external;\r\n    function getFinalTokens() external view returns (address[] memory tokens);\r\n\r\n    function getTotalDenormalizedWeight() external view returns (uint);\r\n\r\n    function getBalance(address token) external view returns (uint);\r\n\r\n    function joinPool(uint poolAmountOut, uint[] calldata maxAmountsIn) external;\r\n    function joinPoolFor(address account, uint rewardAmountOut, uint[] calldata maxAmountsIn) external;\r\n    function joinswapPoolAmountOut(address tokenIn, uint poolAmountOut, uint maxAmountIn) external returns (uint tokenAmountIn);\r\n\r\n    function exitPool(uint poolAmountIn, uint[] calldata minAmountsOut) external;\r\n    function exitswapPoolAmountIn(address tokenOut, uint poolAmountIn, uint minAmountOut) external returns (uint tokenAmountOut);\r\n    function exitswapExternAmountOut(address tokenOut, uint tokenAmountOut, uint maxPoolAmountIn) external returns (uint poolAmountIn);\r\n    function joinswapExternAmountIn(\r\n        address tokenIn,\r\n        uint tokenAmountIn,\r\n        uint minPoolAmountOut\r\n    ) external returns (uint poolAmountOut);\r\n}\r\n\r\ninterface IFreeFromUpTo {\r\n    function freeFromUpTo(address from, uint256 value) external returns (uint256 freed);\r\n}\r\n\r\ninterface IBFactory {\r\n    function newBPool() external returns (IBPool);\r\n}\r\n\r\ninterface IValueLiquidRegistry {\r\n    function getBestPoolsWithLimit(address, address, uint) external view returns (address[] memory);\r\n}\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function withdraw(uint) external;\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\ncontract ExchangeProxy {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n\r\n    IFreeFromUpTo public constant chi = IFreeFromUpTo(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c);\r\n\r\n    modifier discountCHI(uint8 flag) {\r\n        if ((flag & 0x1) == 0) {\r\n            _;\r\n        } else {\r\n            uint256 gasStart = gasleft();\r\n            _;\r\n            uint256 gasSpent = 21000 + gasStart - gasleft() + 16 * msg.data.length;\r\n            chi.freeFromUpTo(msg.sender, (gasSpent + 14154) / 41130);\r\n        }\r\n    }\r\n\r\n    struct Pool {\r\n        address pool;\r\n        uint tokenBalanceIn;\r\n        uint tokenWeightIn;\r\n        uint tokenBalanceOut;\r\n        uint tokenWeightOut;\r\n        uint swapFee;\r\n        uint effectiveLiquidity;\r\n    }\r\n\r\n    struct Swap {\r\n        address pool;\r\n        address tokenIn;\r\n        address tokenOut;\r\n        uint swapAmount; // tokenInAmount / tokenOutAmount\r\n        uint limitReturnAmount; // minAmountOut / maxAmountIn\r\n        uint maxPrice;\r\n    }\r\n\r\n    IWETH weth;\r\n    IValueLiquidRegistry registry;\r\n    address private constant ETH_ADDRESS = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\r\n    uint private constant BONE = 10 ** 18;\r\n\r\n    address public governance;\r\n\r\n    constructor(address _weth) public {\r\n        weth = IWETH(_weth);\r\n        governance = tx.origin;\r\n    }\r\n\r\n    function setGovernance(address _governance) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        governance = _governance;\r\n    }\r\n\r\n    function setRegistry(address _registry) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        registry = IValueLiquidRegistry(_registry);\r\n    }\r\n\r\n    function batchSwapExactIn(\r\n        Swap[] memory swaps,\r\n        IERC20 tokenIn,\r\n        IERC20 tokenOut,\r\n        uint totalAmountIn,\r\n        uint minTotalAmountOut,\r\n        uint8 flag\r\n    )\r\n    public payable discountCHI(flag)\r\n    returns (uint totalAmountOut)\r\n    {\r\n        transferFromAll(tokenIn, totalAmountIn);\r\n\r\n        for (uint i = 0; i < swaps.length; i++) {\r\n            Swap memory swap = swaps[i];\r\n            IERC20 SwapTokenIn = IERC20(swap.tokenIn);\r\n            IBPool pool = IBPool(swap.pool);\r\n\r\n            if (SwapTokenIn.allowance(address(this), swap.pool) > 0) {\r\n                SwapTokenIn.safeApprove(swap.pool, 0);\r\n            }\r\n            SwapTokenIn.safeApprove(swap.pool, swap.swapAmount);\r\n\r\n            (uint tokenAmountOut,) = pool.swapExactAmountIn(\r\n                swap.tokenIn,\r\n                swap.swapAmount,\r\n                swap.tokenOut,\r\n                swap.limitReturnAmount,\r\n                swap.maxPrice\r\n            );\r\n            totalAmountOut = tokenAmountOut.add(totalAmountOut);\r\n        }\r\n\r\n        require(totalAmountOut >= minTotalAmountOut, \"ERR_LIMIT_OUT\");\r\n\r\n        transferAll(tokenOut, totalAmountOut);\r\n        transferAll(tokenIn, getBalance(tokenIn));\r\n    }\r\n\r\n    function batchSwapExactOut(\r\n        Swap[] memory swaps,\r\n        IERC20 tokenIn,\r\n        IERC20 tokenOut,\r\n        uint maxTotalAmountIn,\r\n        uint8 flag\r\n    )\r\n    public payable discountCHI(flag)\r\n    returns (uint totalAmountIn)\r\n    {\r\n        transferFromAll(tokenIn, maxTotalAmountIn);\r\n\r\n        for (uint i = 0; i < swaps.length; i++) {\r\n            Swap memory swap = swaps[i];\r\n            IERC20 SwapTokenIn = IERC20(swap.tokenIn);\r\n            IBPool pool = IBPool(swap.pool);\r\n\r\n            if (SwapTokenIn.allowance(address(this), swap.pool) > 0) {\r\n                SwapTokenIn.safeApprove(swap.pool, 0);\r\n            }\r\n            SwapTokenIn.safeApprove(swap.pool, swap.limitReturnAmount);\r\n\r\n            (uint tokenAmountIn,) = pool.swapExactAmountOut(\r\n                swap.tokenIn,\r\n                swap.limitReturnAmount,\r\n                swap.tokenOut,\r\n                swap.swapAmount,\r\n                swap.maxPrice\r\n            );\r\n            totalAmountIn = tokenAmountIn.add(totalAmountIn);\r\n        }\r\n        require(totalAmountIn <= maxTotalAmountIn, \"ERR_LIMIT_IN\");\r\n\r\n        transferAll(tokenOut, getBalance(tokenOut));\r\n        transferAll(tokenIn, getBalance(tokenIn));\r\n\r\n    }\r\n\r\n    function multihopBatchSwapExactIn(\r\n        Swap[][] memory swapSequences,\r\n        IERC20 tokenIn,\r\n        IERC20 tokenOut,\r\n        uint totalAmountIn,\r\n        uint minTotalAmountOut,\r\n        uint8 flag\r\n    )\r\n    public payable discountCHI(flag)\r\n    returns (uint totalAmountOut)\r\n    {\r\n\r\n        transferFromAll(tokenIn, totalAmountIn);\r\n\r\n        for (uint i = 0; i < swapSequences.length; i++) {\r\n            uint tokenAmountOut;\r\n            for (uint k = 0; k < swapSequences[i].length; k++) {\r\n                Swap memory swap = swapSequences[i][k];\r\n                IERC20 SwapTokenIn = IERC20(swap.tokenIn);\r\n                if (k == 1) {\r\n                    // Makes sure that on the second swap the output of the first was used\r\n                    // so there is not intermediate token leftover\r\n                    swap.swapAmount = tokenAmountOut;\r\n                }\r\n\r\n                IBPool pool = IBPool(swap.pool);\r\n                if (SwapTokenIn.allowance(address(this), swap.pool) > 0) {\r\n                    SwapTokenIn.safeApprove(swap.pool, 0);\r\n                }\r\n                SwapTokenIn.safeApprove(swap.pool, swap.swapAmount);\r\n                (tokenAmountOut,) = pool.swapExactAmountIn(\r\n                    swap.tokenIn,\r\n                    swap.swapAmount,\r\n                    swap.tokenOut,\r\n                    swap.limitReturnAmount,\r\n                    swap.maxPrice\r\n                );\r\n            }\r\n            // This takes the amountOut of the last swap\r\n            totalAmountOut = tokenAmountOut.add(totalAmountOut);\r\n        }\r\n\r\n        require(totalAmountOut >= minTotalAmountOut, \"ERR_LIMIT_OUT\");\r\n\r\n        transferAll(tokenOut, totalAmountOut);\r\n        transferAll(tokenIn, getBalance(tokenIn));\r\n\r\n    }\r\n\r\n    function multihopBatchSwapExactOut(\r\n        Swap[][] memory swapSequences,\r\n        IERC20 tokenIn,\r\n        IERC20 tokenOut,\r\n        uint maxTotalAmountIn,\r\n        uint8 flag\r\n    )\r\n    public payable discountCHI(flag)\r\n    returns (uint totalAmountIn)\r\n    {\r\n\r\n        transferFromAll(tokenIn, maxTotalAmountIn);\r\n\r\n        for (uint i = 0; i < swapSequences.length; i++) {\r\n            uint tokenAmountInFirstSwap;\r\n            // Specific code for a simple swap and a multihop (2 swaps in sequence)\r\n            if (swapSequences[i].length == 1) {\r\n                Swap memory swap = swapSequences[i][0];\r\n                IERC20 SwapTokenIn = IERC20(swap.tokenIn);\r\n\r\n                IBPool pool = IBPool(swap.pool);\r\n                if (SwapTokenIn.allowance(address(this), swap.pool) > 0) {\r\n                    SwapTokenIn.safeApprove(swap.pool, 0);\r\n                }\r\n                SwapTokenIn.safeApprove(swap.pool, swap.limitReturnAmount);\r\n\r\n                (tokenAmountInFirstSwap,) = pool.swapExactAmountOut(\r\n                    swap.tokenIn,\r\n                    swap.limitReturnAmount,\r\n                    swap.tokenOut,\r\n                    swap.swapAmount,\r\n                    swap.maxPrice\r\n                );\r\n            } else {\r\n                // Consider we are swapping A -> B and B -> C. The goal is to buy a given amount\r\n                // of token C. But first we need to buy B with A so we can then buy C with B\r\n                // To get the exact amount of C we then first need to calculate how much B we'll need:\r\n                uint intermediateTokenAmount;\r\n                // This would be token B as described above\r\n                Swap memory secondSwap = swapSequences[i][1];\r\n                IBPool poolSecondSwap = IBPool(secondSwap.pool);\r\n                intermediateTokenAmount = poolSecondSwap.calcInGivenOut(\r\n                    poolSecondSwap.getBalance(secondSwap.tokenIn),\r\n                    poolSecondSwap.getDenormalizedWeight(secondSwap.tokenIn),\r\n                    poolSecondSwap.getBalance(secondSwap.tokenOut),\r\n                    poolSecondSwap.getDenormalizedWeight(secondSwap.tokenOut),\r\n                    secondSwap.swapAmount,\r\n                    poolSecondSwap.swapFee()\r\n                );\r\n\r\n                //// Buy intermediateTokenAmount of token B with A in the first pool\r\n                Swap memory firstSwap = swapSequences[i][0];\r\n                IERC20 FirstSwapTokenIn = IERC20(firstSwap.tokenIn);\r\n                IBPool poolFirstSwap = IBPool(firstSwap.pool);\r\n                if (FirstSwapTokenIn.allowance(address(this), firstSwap.pool) < uint(- 1)) {\r\n                    FirstSwapTokenIn.safeApprove(firstSwap.pool, uint(- 1));\r\n                }\r\n\r\n                (tokenAmountInFirstSwap,) = poolFirstSwap.swapExactAmountOut(\r\n                    firstSwap.tokenIn,\r\n                    firstSwap.limitReturnAmount,\r\n                    firstSwap.tokenOut,\r\n                    intermediateTokenAmount, // This is the amount of token B we need\r\n                    firstSwap.maxPrice\r\n                );\r\n\r\n                //// Buy the final amount of token C desired\r\n                IERC20 SecondSwapTokenIn = IERC20(secondSwap.tokenIn);\r\n                if (SecondSwapTokenIn.allowance(address(this), secondSwap.pool) < uint(- 1)) {\r\n                    SecondSwapTokenIn.safeApprove(secondSwap.pool, uint(- 1));\r\n                }\r\n\r\n                poolSecondSwap.swapExactAmountOut(\r\n                    secondSwap.tokenIn,\r\n                    secondSwap.limitReturnAmount,\r\n                    secondSwap.tokenOut,\r\n                    secondSwap.swapAmount,\r\n                    secondSwap.maxPrice\r\n                );\r\n            }\r\n            totalAmountIn = tokenAmountInFirstSwap.add(totalAmountIn);\r\n        }\r\n\r\n        require(totalAmountIn <= maxTotalAmountIn, \"ERR_LIMIT_IN\");\r\n\r\n        transferAll(tokenOut, getBalance(tokenOut));\r\n        transferAll(tokenIn, getBalance(tokenIn));\r\n\r\n    }\r\n\r\n    function smartSwapExactIn(\r\n        IERC20 tokenIn,\r\n        IERC20 tokenOut,\r\n        uint totalAmountIn,\r\n        uint minTotalAmountOut,\r\n        uint nPools,\r\n        uint8 flag\r\n    )\r\n    public payable discountCHI(flag)\r\n    returns (uint totalAmountOut)\r\n    {\r\n        Swap[] memory swaps;\r\n        if (isETH(tokenIn)) {\r\n            (swaps,) = viewSplitExactIn(address(weth), address(tokenOut), totalAmountIn, nPools);\r\n        } else if (isETH(tokenOut)) {\r\n            (swaps,) = viewSplitExactIn(address(tokenIn), address(weth), totalAmountIn, nPools);\r\n        } else {\r\n            (swaps,) = viewSplitExactIn(address(tokenIn), address(tokenOut), totalAmountIn, nPools);\r\n        }\r\n\r\n        totalAmountOut = batchSwapExactIn(swaps, tokenIn, tokenOut, totalAmountIn, minTotalAmountOut, 0x0);\r\n    }\r\n\r\n    function smartSwapExactOut(\r\n        IERC20 tokenIn,\r\n        IERC20 tokenOut,\r\n        uint totalAmountOut,\r\n        uint maxTotalAmountIn,\r\n        uint nPools,\r\n        uint8 flag\r\n    )\r\n    public payable discountCHI(flag)\r\n    returns (uint totalAmountIn)\r\n    {\r\n        Swap[] memory swaps;\r\n        if (isETH(tokenIn)) {\r\n            (swaps,) = viewSplitExactOut(address(weth), address(tokenOut), totalAmountOut, nPools);\r\n        } else if (isETH(tokenOut)) {\r\n            (swaps,) = viewSplitExactOut(address(tokenIn), address(weth), totalAmountOut, nPools);\r\n        } else {\r\n            (swaps,) = viewSplitExactOut(address(tokenIn), address(tokenOut), totalAmountOut, nPools);\r\n        }\r\n\r\n        totalAmountIn = batchSwapExactOut(swaps, tokenIn, tokenOut, maxTotalAmountIn, 0x0);\r\n    }\r\n\r\n    function viewSplitExactIn(\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint swapAmount,\r\n        uint nPools\r\n    )\r\n    public view\r\n    returns (Swap[] memory swaps, uint totalOutput)\r\n    {\r\n        address[] memory poolAddresses = registry.getBestPoolsWithLimit(tokenIn, tokenOut, nPools);\r\n\r\n        Pool[] memory pools = new Pool[](poolAddresses.length);\r\n        uint sumEffectiveLiquidity;\r\n        for (uint i = 0; i < poolAddresses.length; i++) {\r\n            pools[i] = getPoolData(tokenIn, tokenOut, poolAddresses[i]);\r\n            sumEffectiveLiquidity = sumEffectiveLiquidity.add(pools[i].effectiveLiquidity);\r\n        }\r\n\r\n        uint[] memory bestInputAmounts = new uint[](pools.length);\r\n        uint totalInputAmount;\r\n        for (uint i = 0; i < pools.length; i++) {\r\n            bestInputAmounts[i] = swapAmount.mul(pools[i].effectiveLiquidity).div(sumEffectiveLiquidity);\r\n            totalInputAmount = totalInputAmount.add(bestInputAmounts[i]);\r\n        }\r\n\r\n        if (totalInputAmount < swapAmount) {\r\n            bestInputAmounts[0] = bestInputAmounts[0].add(swapAmount.sub(totalInputAmount));\r\n        } else {\r\n            bestInputAmounts[0] = bestInputAmounts[0].sub(totalInputAmount.sub(swapAmount));\r\n        }\r\n\r\n        swaps = new Swap[](pools.length);\r\n\r\n        for (uint i = 0; i < pools.length; i++) {\r\n            swaps[i] = Swap({\r\n            pool : pools[i].pool,\r\n            tokenIn : tokenIn,\r\n            tokenOut : tokenOut,\r\n            swapAmount : bestInputAmounts[i],\r\n            limitReturnAmount : 0,\r\n            maxPrice : uint(- 1)\r\n            });\r\n        }\r\n\r\n        totalOutput = calcTotalOutExactIn(bestInputAmounts, pools);\r\n\r\n        return (swaps, totalOutput);\r\n    }\r\n\r\n    function viewSplitExactOut(\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint swapAmount,\r\n        uint nPools\r\n    )\r\n    public view\r\n    returns (Swap[] memory swaps, uint totalOutput)\r\n    {\r\n        address[] memory poolAddresses = registry.getBestPoolsWithLimit(tokenIn, tokenOut, nPools);\r\n\r\n        Pool[] memory pools = new Pool[](poolAddresses.length);\r\n        uint sumEffectiveLiquidity;\r\n        for (uint i = 0; i < poolAddresses.length; i++) {\r\n            pools[i] = getPoolData(tokenIn, tokenOut, poolAddresses[i]);\r\n            sumEffectiveLiquidity = sumEffectiveLiquidity.add(pools[i].effectiveLiquidity);\r\n        }\r\n\r\n        uint[] memory bestInputAmounts = new uint[](pools.length);\r\n        uint totalInputAmount;\r\n        for (uint i = 0; i < pools.length; i++) {\r\n            bestInputAmounts[i] = swapAmount.mul(pools[i].effectiveLiquidity).div(sumEffectiveLiquidity);\r\n            totalInputAmount = totalInputAmount.add(bestInputAmounts[i]);\r\n        }\r\n\r\n        if (totalInputAmount < swapAmount) {\r\n            bestInputAmounts[0] = bestInputAmounts[0].add(swapAmount.sub(totalInputAmount));\r\n        } else {\r\n            bestInputAmounts[0] = bestInputAmounts[0].sub(totalInputAmount.sub(swapAmount));\r\n        }\r\n\r\n        swaps = new Swap[](pools.length);\r\n\r\n        for (uint i = 0; i < pools.length; i++) {\r\n            swaps[i] = Swap({\r\n            pool : pools[i].pool,\r\n            tokenIn : tokenIn,\r\n            tokenOut : tokenOut,\r\n            swapAmount : bestInputAmounts[i],\r\n            limitReturnAmount : uint(- 1),\r\n            maxPrice : uint(- 1)\r\n            });\r\n        }\r\n\r\n        totalOutput = calcTotalOutExactOut(bestInputAmounts, pools);\r\n\r\n        return (swaps, totalOutput);\r\n    }\r\n\r\n    function getPoolData(\r\n        address tokenIn,\r\n        address tokenOut,\r\n        address poolAddress\r\n    )\r\n    internal view\r\n    returns (Pool memory)\r\n    {\r\n        IBPool pool = IBPool(poolAddress);\r\n        uint tokenBalanceIn = pool.getBalance(tokenIn);\r\n        uint tokenBalanceOut = pool.getBalance(tokenOut);\r\n        uint tokenWeightIn = pool.getDenormalizedWeight(tokenIn);\r\n        uint tokenWeightOut = pool.getDenormalizedWeight(tokenOut);\r\n        uint swapFee = pool.swapFee();\r\n\r\n        uint effectiveLiquidity = calcEffectiveLiquidity(\r\n            tokenWeightIn,\r\n            tokenBalanceOut,\r\n            tokenWeightOut\r\n        );\r\n        Pool memory returnPool = Pool({\r\n        pool : poolAddress,\r\n        tokenBalanceIn : tokenBalanceIn,\r\n        tokenWeightIn : tokenWeightIn,\r\n        tokenBalanceOut : tokenBalanceOut,\r\n        tokenWeightOut : tokenWeightOut,\r\n        swapFee : swapFee,\r\n        effectiveLiquidity : effectiveLiquidity\r\n        });\r\n\r\n        return returnPool;\r\n    }\r\n\r\n    function calcEffectiveLiquidity(\r\n        uint tokenWeightIn,\r\n        uint tokenBalanceOut,\r\n        uint tokenWeightOut\r\n    )\r\n    internal pure\r\n    returns (uint effectiveLiquidity)\r\n    {\r\n\r\n        // Bo * wi/(wi+wo)\r\n        effectiveLiquidity =\r\n        tokenWeightIn.mul(BONE).div(\r\n            tokenWeightOut.add(tokenWeightIn)\r\n        ).mul(tokenBalanceOut).div(BONE);\r\n\r\n        return effectiveLiquidity;\r\n    }\r\n\r\n    function calcTotalOutExactIn(\r\n        uint[] memory bestInputAmounts,\r\n        Pool[] memory bestPools\r\n    )\r\n    internal pure\r\n    returns (uint totalOutput)\r\n    {\r\n        totalOutput = 0;\r\n        for (uint i = 0; i < bestInputAmounts.length; i++) {\r\n            uint output = IBPool(bestPools[i].pool).calcOutGivenIn(\r\n                bestPools[i].tokenBalanceIn,\r\n                bestPools[i].tokenWeightIn,\r\n                bestPools[i].tokenBalanceOut,\r\n                bestPools[i].tokenWeightOut,\r\n                bestInputAmounts[i],\r\n                bestPools[i].swapFee\r\n            );\r\n\r\n            totalOutput = totalOutput.add(output);\r\n        }\r\n        return totalOutput;\r\n    }\r\n\r\n    function calcTotalOutExactOut(\r\n        uint[] memory bestInputAmounts,\r\n        Pool[] memory bestPools\r\n    )\r\n    internal pure\r\n    returns (uint totalOutput)\r\n    {\r\n        totalOutput = 0;\r\n        for (uint i = 0; i < bestInputAmounts.length; i++) {\r\n            uint output = IBPool(bestPools[i].pool).calcInGivenOut(\r\n                bestPools[i].tokenBalanceIn,\r\n                bestPools[i].tokenWeightIn,\r\n                bestPools[i].tokenBalanceOut,\r\n                bestPools[i].tokenWeightOut,\r\n                bestInputAmounts[i],\r\n                bestPools[i].swapFee\r\n            );\r\n\r\n            totalOutput = totalOutput.add(output);\r\n        }\r\n        return totalOutput;\r\n    }\r\n\r\n    function transferFromAll(IERC20 token, uint amount) internal returns (bool) {\r\n        if (isETH(token)) {\r\n            weth.deposit{value : msg.value}();\r\n        } else {\r\n            token.safeTransferFrom(msg.sender, address(this), amount);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function getBalance(IERC20 token) internal view returns (uint) {\r\n        if (isETH(token)) {\r\n            return weth.balanceOf(address(this));\r\n        } else {\r\n            return token.balanceOf(address(this));\r\n        }\r\n    }\r\n\r\n    function transferAll(IERC20 token, uint amount) internal returns (bool) {\r\n        if (amount == 0) {\r\n            return true;\r\n        }\r\n\r\n        if (isETH(token)) {\r\n            weth.withdraw(amount);\r\n            (bool xfer,) = msg.sender.call{value : amount}(\"\");\r\n            require(xfer, \"ERR_ETH_FAILED\");\r\n        } else {\r\n            token.safeTransfer(msg.sender, amount);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function isETH(IERC20 token) internal pure returns (bool) {\r\n        return (address(token) == ETH_ADDRESS);\r\n    }\r\n\r\n    /**\r\n     * This function allows governance to take unsupported tokens out of the contract.\r\n     * This is in an effort to make someone whole, should they seriously mess up.\r\n     * There is no guarantee governance will vote to return these.\r\n     * It also allows for removal of airdropped tokens.\r\n     */\r\n    function governanceRecoverUnsupported(IERC20 _token, uint _amount, address _to) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        if (isETH(_token)) {\r\n            (bool xfer,) = _to.call{value : _amount}(\"\");\r\n            require(xfer, \"ERR_ETH_FAILED\");\r\n        } else {\r\n            _token.safeTransfer(_to, _amount);\r\n        }\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function create(\r\n        IBFactory factory,\r\n        address[] memory tokens,\r\n        uint[] calldata balances,\r\n        uint[] calldata denorms,\r\n        uint swapFee,\r\n        uint initPoolSupply,\r\n        uint8 flag\r\n    ) payable external discountCHI(flag) returns (IBPool pool) {\r\n        require(tokens.length == balances.length, \"ERR_LENGTH_MISMATCH\");\r\n        require(tokens.length == denorms.length, \"ERR_LENGTH_MISMATCH\");\r\n        pool = factory.newBPool();\r\n        bool containsETH = false;\r\n        for (uint i = 0; i < tokens.length; i++) {\r\n            if (transferFromAllTo(tokens[i], balances[i], address(pool))) {\r\n                containsETH = true;\r\n                tokens[i] = address(weth);\r\n            }\r\n        }\r\n        require(msg.value == 0 || containsETH, \"!invalid payable\");\r\n        pool.finalize(swapFee, initPoolSupply, tokens, denorms);\r\n        pool.setExchangeProxy(address(this));\r\n        pool.setController(msg.sender);\r\n        uint lpAmount = pool.balanceOf(address(this));\r\n        if (lpAmount > 0) {\r\n            IERC20(pool).safeTransfer(msg.sender, lpAmount);\r\n        }\r\n    }\r\n\r\n    function joinPool(\r\n        IBPool pool,\r\n        uint poolAmountOut,\r\n        uint[] calldata maxAmountsIn,\r\n        uint8 flag\r\n    ) payable external discountCHI(flag) {\r\n        address[] memory tokens = pool.getFinalTokens();\r\n        require(maxAmountsIn.length == tokens.length, \"ERR_LENGTH_MISMATCH\");\r\n        bool containsETH = false;\r\n        for (uint i = 0; i < tokens.length; i++) {\r\n            if (transferFromAllAndApprove(tokens[i], maxAmountsIn[i], address(pool))) {\r\n                containsETH = true;\r\n            }\r\n        }\r\n        require(msg.value == 0 || containsETH, \"!invalid payable\");\r\n        if (pool.version() == 1001) {\r\n            pool.joinPool(poolAmountOut, maxAmountsIn);\r\n        } else {\r\n            pool.joinPoolFor(msg.sender, poolAmountOut, maxAmountsIn);\r\n        }\r\n        for (uint i = 0; i < tokens.length; i++) {\r\n            transferAll(IERC20(tokens[i]), getBalance(IERC20(tokens[i])));\r\n        }\r\n        uint lpAmount = pool.balanceOf(address(this));\r\n        transferAll(pool, lpAmount);\r\n    }\r\n\r\n    function joinswapExternAmountIn(\r\n        IBPool pool,\r\n        address tokenIn,\r\n        uint tokenAmountIn,\r\n        uint minPoolAmountOut,\r\n        uint8 flag\r\n    ) payable external discountCHI(flag) {\r\n        bool containsETH = false;\r\n        if (transferFromAllAndApprove(tokenIn, tokenAmountIn, address(pool))) {\r\n            containsETH = true;\r\n        }\r\n        require(msg.value == 0 || containsETH, \"!invalid payable\");\r\n\r\n        uint poolAmountOut = pool.joinswapExternAmountIn(tokenIn, tokenAmountIn, minPoolAmountOut);\r\n        IERC20(pool).safeTransfer(msg.sender, poolAmountOut);\r\n    }\r\n\r\n    function transferFromAllTo(address token, uint amount, address to) internal returns (bool containsETH) {\r\n        if (isETH(IERC20(token))) {\r\n            require(amount == msg.value, \"!invalid amount\");\r\n            weth.deposit{value : amount}();\r\n            weth.transfer(to,amount);\r\n            containsETH = true;\r\n        } else {\r\n            IERC20(token).safeTransferFrom(msg.sender, to, amount);\r\n        }\r\n        return containsETH;\r\n    }\r\n\r\n    function transferFromAllAndApprove(address token, uint amount, address spender) internal returns (bool containsETH) {\r\n        if (isETH(IERC20(token))) {\r\n            require(amount == msg.value, \"!invalid amount\");\r\n            weth.deposit{value : amount}();\r\n            if (weth.allowance(address(this), spender) > 0) {\r\n                IERC20(address(weth)).safeApprove(address(spender), 0);\r\n            }\r\n            IERC20(address(weth)).safeApprove(spender, amount);\r\n            containsETH = true;\r\n        } else {\r\n            IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\r\n            if (IERC20(token).allowance(address(this), spender) > 0) {\r\n                IERC20(token).safeApprove(spender, 0);\r\n            }\r\n            IERC20(token).safeApprove(spender, amount);\r\n        }\r\n        return containsETH;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct ExchangeProxy.Swap[]\",\"name\":\"swaps\",\"type\":\"tuple[]\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTotalAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"flag\",\"type\":\"uint8\"}],\"name\":\"batchSwapExactIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct ExchangeProxy.Swap[]\",\"name\":\"swaps\",\"type\":\"tuple[]\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"flag\",\"type\":\"uint8\"}],\"name\":\"batchSwapExactOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chi\",\"outputs\":[{\"internalType\":\"contract IFreeFromUpTo\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBFactory\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"denorms\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initPoolSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"flag\",\"type\":\"uint8\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"contract IBPool\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"governanceRecoverUnsupported\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"maxAmountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8\",\"name\":\"flag\",\"type\":\"uint8\"}],\"name\":\"joinPool\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPoolAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"flag\",\"type\":\"uint8\"}],\"name\":\"joinswapExternAmountIn\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct ExchangeProxy.Swap[][]\",\"name\":\"swapSequences\",\"type\":\"tuple[][]\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTotalAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"flag\",\"type\":\"uint8\"}],\"name\":\"multihopBatchSwapExactIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct ExchangeProxy.Swap[][]\",\"name\":\"swapSequences\",\"type\":\"tuple[][]\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"flag\",\"type\":\"uint8\"}],\"name\":\"multihopBatchSwapExactOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"setRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTotalAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nPools\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"flag\",\"type\":\"uint8\"}],\"name\":\"smartSwapExactIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nPools\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"flag\",\"type\":\"uint8\"}],\"name\":\"smartSwapExactOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nPools\",\"type\":\"uint256\"}],\"name\":\"viewSplitExactIn\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct ExchangeProxy.Swap[]\",\"name\":\"swaps\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"totalOutput\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nPools\",\"type\":\"uint256\"}],\"name\":\"viewSplitExactOut\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct ExchangeProxy.Swap[]\",\"name\":\"swaps\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"totalOutput\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"ExchangeProxy","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://21e486a2851a3054e75483d2bc69ce79c6d5de46485d9d1f46cf1174b5231887"}]}