{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n    \r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _governance;\r\n\r\n    event GovernanceTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _governance = msgSender;\r\n        emit GovernanceTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function governance() public view returns (address) {\r\n        return _governance;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyGovernance() {\r\n        require(_governance == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferGovernance(address newOwner) internal virtual onlyGovernance {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit GovernanceTransferred(_governance, newOwner);\r\n        _governance = newOwner;\r\n    }\r\n}\r\n\r\n// Tornado interfaces\r\n\r\ninterface TornadoContract {\r\n    function denomination() external view returns (uint256);\r\n    function deposit(bytes32 _commitment) external;\r\n    function withdraw(bytes calldata _proof, bytes32 _root, bytes32 _nullifierHash, address payable _recipient, address payable _relayer, uint256 _fee, uint256 _refund) external;\r\n}\r\n\r\n\r\n// File: contracts/StabilizeTornadoProxy.sol\r\n\r\npragma solidity ^0.6.6;\r\n\r\n// The Stabilize Tornado Proxy is a contract that is a front for the Tornado protocol\r\n// It will collect all the relay fees and distribute some to sender and some to the treasury\r\n// The only fee check this contract does is for 10 stablecoins going to the sender of the message\r\n\r\ncontract StabilizeTornadoProxy is Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    \r\n    address public treasuryAddress; // Address of the treasury\r\n    uint256 constant minStablecoinFee = 10; // Absolute minimum amount that goes to msg.sender\r\n\r\n    // Info of each Tornado mixer\r\n    struct MixerInfo {\r\n        IERC20 token; // Reference of Stablecoin\r\n        uint256 denomination; // The units to deposit and withdraw\r\n        TornadoContract mixer; // Reference to the mixer\r\n        uint256 totalDeposits; // The current pool size\r\n        uint256 depositSinceWithdraw; // The number of deposits since the last withdraw\r\n        uint256 lastDeposit; // Time of last deposit\r\n        uint256 decimals; // Decimals of token\r\n    }\r\n    \r\n    // Each coin type is in a separate mixer field\r\n    MixerInfo[] private daiMixers;\r\n    MixerInfo[] private usdcMixers;\r\n    MixerInfo[] private usdtMixers;\r\n\r\n    constructor(\r\n        address _treasury\r\n    ) public {\r\n        treasuryAddress = _treasury;\r\n        setupTornadoProxies(); // Setup the tornado proxies\r\n    }\r\n\r\n    // Initialization functions\r\n    \r\n    function setupTornadoProxies() internal {\r\n        // Setup mixer info\r\n        \r\n        // Start with DAI\r\n        IERC20 _token = IERC20(address(0x6B175474E89094C44Da98b954EedeAC495271d0F));\r\n        TornadoContract _tor = TornadoContract(address(0xD4B88Df4D29F5CedD6857912842cff3b20C8Cfa3)); // DAI 100\r\n        daiMixers.push(\r\n            MixerInfo({\r\n                token: _token,\r\n                mixer: _tor,\r\n                denomination: _tor.denomination(),\r\n                decimals: _token.decimals(),\r\n                totalDeposits: 0,\r\n                depositSinceWithdraw: 0,\r\n                lastDeposit: 0\r\n            })\r\n        );   \r\n        _tor = TornadoContract(address(0xFD8610d20aA15b7B2E3Be39B396a1bC3516c7144)); // DAI 1000\r\n        daiMixers.push(\r\n            MixerInfo({\r\n                token: _token,\r\n                mixer: _tor,\r\n                denomination: _tor.denomination(),\r\n                decimals: _token.decimals(),\r\n                totalDeposits: 0,\r\n                depositSinceWithdraw: 0,\r\n                lastDeposit: 0\r\n            })\r\n        );\r\n        \r\n        // USDC\r\n        _token = IERC20(address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48));\r\n        _tor = TornadoContract(address(0xd96f2B1c14Db8458374d9Aca76E26c3D18364307)); // USDC 100\r\n        usdcMixers.push(\r\n            MixerInfo({\r\n                token: _token,\r\n                mixer: _tor,\r\n                denomination: _tor.denomination(),\r\n                decimals: _token.decimals(),\r\n                totalDeposits: 0,\r\n                depositSinceWithdraw: 0,\r\n                lastDeposit: 0\r\n            })\r\n        );   \r\n        _tor = TornadoContract(address(0x4736dCf1b7A3d580672CcE6E7c65cd5cc9cFBa9D)); // USDC 1000\r\n        usdcMixers.push(\r\n            MixerInfo({\r\n                token: _token,\r\n                mixer: _tor,\r\n                denomination: _tor.denomination(),\r\n                decimals: _token.decimals(),\r\n                totalDeposits: 0,\r\n                depositSinceWithdraw: 0,\r\n                lastDeposit: 0\r\n            })\r\n        );  \r\n        \r\n        // USDT\r\n        _token = IERC20(address(0xdAC17F958D2ee523a2206206994597C13D831ec7));\r\n        _tor = TornadoContract(address(0x169AD27A470D064DEDE56a2D3ff727986b15D52B)); // USDT 100\r\n        usdtMixers.push(\r\n            MixerInfo({\r\n                token: _token,\r\n                mixer: _tor,\r\n                denomination: _tor.denomination(),\r\n                decimals: _token.decimals(),\r\n                totalDeposits: 0,\r\n                depositSinceWithdraw: 0,\r\n                lastDeposit: 0\r\n            })\r\n        );\r\n        _tor = TornadoContract(address(0x0836222F2B2B24A3F36f98668Ed8F0B38D1a872f)); // USDT 1000\r\n        usdtMixers.push(\r\n            MixerInfo({\r\n                token: _token,\r\n                mixer: _tor,\r\n                denomination: _tor.denomination(),\r\n                decimals: _token.decimals(),\r\n                totalDeposits: 0,\r\n                depositSinceWithdraw: 0,\r\n                lastDeposit: 0\r\n            })\r\n        );\r\n    }\r\n    \r\n    function getPoolsInfo(uint256 _type) public view returns (uint256, uint256, uint256, uint256, uint256) {\r\n        // Returns everything about the pool in one call\r\n        require(_type < 3,\"Type out of range\");\r\n        if(_type == 0){ // We want DAI info\r\n            return(\r\n                daiMixers[0].totalDeposits.add(daiMixers[1].totalDeposits), // Total balance in both DAI pools\r\n                daiMixers[0].depositSinceWithdraw, // Pool 0 number of deposits\r\n                daiMixers[1].depositSinceWithdraw, // Pool 1\r\n                daiMixers[0].lastDeposit, // Pool 0 last withdraw time\r\n                daiMixers[1].lastDeposit\r\n                );  \r\n        }else if(_type == 1){ // USDC\r\n            return(\r\n                usdcMixers[0].totalDeposits.add(usdcMixers[1].totalDeposits), // Total balance in both USDC pools\r\n                usdcMixers[0].depositSinceWithdraw, // Pool 0 number of deposits\r\n                usdcMixers[1].depositSinceWithdraw, // Pool 1\r\n                usdcMixers[0].lastDeposit, // Pool 0 last withdraw time\r\n                usdcMixers[1].lastDeposit\r\n                );             \r\n        }else{\r\n            return(\r\n                usdtMixers[0].totalDeposits.add(usdtMixers[1].totalDeposits), // Total balance in both USDT pools\r\n                usdtMixers[0].depositSinceWithdraw, // Pool 0 number of deposits\r\n                usdtMixers[1].depositSinceWithdraw, // Pool 1\r\n                usdtMixers[0].lastDeposit, // Pool 0 last withdraw time\r\n                usdtMixers[1].lastDeposit\r\n                );             \r\n        }\r\n    }\r\n    \r\n    // Deposit methods\r\n    function depositDAI(bytes32 _commitment, uint256 amount) external {\r\n        require(amount == daiMixers[0].denomination || amount == daiMixers[1].denomination, \"Can only deposit either 100 or 1000 DAI\");\r\n        uint256 _ind = 0; // 100 Pool\r\n        if(amount == daiMixers[1].denomination){\r\n            _ind = 1; // Set to 1000 Pool\r\n        }\r\n        daiMixers[_ind].token.safeTransferFrom(_msgSender(), address(this), amount); // Pull from the user\r\n        daiMixers[_ind].token.safeApprove(address(daiMixers[_ind].mixer), amount); // Approve the DAI here to send to Tornado\r\n        daiMixers[_ind].mixer.deposit(_commitment); // Now deposit the DAI\r\n        daiMixers[_ind].lastDeposit = now; // Metrics, last deposit time\r\n        daiMixers[_ind].totalDeposits = daiMixers[_ind].totalDeposits.add(amount); // Add to the deposit amount\r\n        daiMixers[_ind].depositSinceWithdraw = daiMixers[_ind].depositSinceWithdraw.add(1); // Total deposits since withdraw\r\n    }\r\n    \r\n    function depositUSDC(bytes32 _commitment, uint256 amount) external {\r\n        require(amount == usdcMixers[0].denomination || amount == usdcMixers[1].denomination, \"Can only deposit either 100 or 1000 USDC\");\r\n        uint256 _ind = 0; // 100 Pool\r\n        if(amount == usdcMixers[1].denomination){\r\n            _ind = 1; // Set to 1000 Pool\r\n        }\r\n        usdcMixers[_ind].token.safeTransferFrom(_msgSender(), address(this), amount); // Pull from the user\r\n        usdcMixers[_ind].token.safeApprove(address(usdcMixers[_ind].mixer), amount); // Approve the USDC here to send to Tornado\r\n        usdcMixers[_ind].mixer.deposit(_commitment); // Now deposit the USDC\r\n        usdcMixers[_ind].lastDeposit = now; // Metrics, last deposit time\r\n        usdcMixers[_ind].totalDeposits = usdcMixers[_ind].totalDeposits.add(amount); // Add to the deposit amount\r\n        usdcMixers[_ind].depositSinceWithdraw = usdcMixers[_ind].depositSinceWithdraw.add(1); // Total deposits since withdraw\r\n    }\r\n    \r\n    function depositUSDT(bytes32 _commitment, uint256 amount) external {\r\n        require(amount == usdtMixers[0].denomination || amount == usdtMixers[1].denomination, \"Can only deposit either 100 or 1000 USDT\");\r\n        uint256 _ind = 0; // 100 Pool\r\n        if(amount == usdtMixers[1].denomination){\r\n            _ind = 1; // Set to 1000 Pool\r\n        }\r\n        usdtMixers[_ind].token.safeTransferFrom(_msgSender(), address(this), amount); // Pull from the user\r\n        usdtMixers[_ind].token.safeApprove(address(usdtMixers[_ind].mixer), amount); // Approve the USDT here to send to Tornado\r\n        usdtMixers[_ind].mixer.deposit(_commitment); // Now deposit the USDT\r\n        usdtMixers[_ind].lastDeposit = now; // Metrics, last deposit time\r\n        usdtMixers[_ind].totalDeposits = usdtMixers[_ind].totalDeposits.add(amount); // Add to the deposit amount\r\n        usdtMixers[_ind].depositSinceWithdraw = usdtMixers[_ind].depositSinceWithdraw.add(1); // Total deposits since withdraw\r\n    }\r\n    \r\n    // Withdraw functions\r\n    function withdrawDAI(bytes calldata _proof, uint256 amount, bytes32 _root, \r\n                        bytes32 _nullifierHash, address payable _recipient, \r\n                        address payable _relayer, uint256 _fee, uint256 _refund) external payable {\r\n                            // The user can send ETH to the recipient\r\n                            require(amount == daiMixers[0].denomination || amount == daiMixers[1].denomination, \"Can only withdraw either 100 or 1000 DAI\");\r\n                            require(_relayer == address(this), \"The relayer must be this contract\");\r\n                            uint256 _ind = 0; // 100 Pool\r\n                            if(amount == daiMixers[1].denomination){\r\n                                _ind = 1; // Set to 1000 Pool\r\n                            }\r\n                            // This address should now have the fee\r\n                            uint256 gasCharge = minStablecoinFee.mul(10**daiMixers[_ind].decimals); // Get gas fee in base units\r\n                            require(_fee >= gasCharge, \"Fee not enough to pay for minimum fee of 10 tokens\");\r\n                            daiMixers[_ind].mixer.withdraw(_proof, _root, _nullifierHash, _recipient, _relayer, _fee, _refund); // Now withdraw the DAI\r\n                            _fee = _fee.sub(gasCharge); // The gas charge goes directly to the message sender\r\n                            uint256 treasuryFee = _fee.div(2); // Treasury takes half the withdraw fee\r\n                            _fee = _fee.sub(treasuryFee);\r\n                            daiMixers[_ind].token.safeTransfer(_msgSender(), _fee.add(gasCharge)); // The message sender gets half the fee plus gas charge\r\n                            daiMixers[_ind].token.safeTransfer(treasuryAddress,treasuryFee);\r\n                            daiMixers[_ind].totalDeposits = daiMixers[_ind].totalDeposits.sub(amount); // Take away from deposits\r\n                            daiMixers[_ind].depositSinceWithdraw = 0; // Reset withdraws\r\n                        }\r\n                        \r\n    function withdrawUSDC(bytes calldata _proof, uint256 amount, bytes32 _root, \r\n                        bytes32 _nullifierHash, address payable _recipient, \r\n                        address payable _relayer, uint256 _fee, uint256 _refund) external payable {\r\n                            // The user can send ETH to the recipient\r\n                            require(amount == usdcMixers[0].denomination || amount == usdcMixers[1].denomination, \"Can only withdraw either 100 or 1000 USDC\");\r\n                            require(_relayer == address(this), \"The relayer must be this contract\");\r\n                            uint256 _ind = 0; // 100 Pool\r\n                            if(amount == usdcMixers[1].denomination){\r\n                                _ind = 1; // Set to 1000 Pool\r\n                            }\r\n                            // This address should now have the fee\r\n                            uint256 gasCharge = minStablecoinFee.mul(10**usdcMixers[_ind].decimals); // Get gas fee in base units\r\n                            require(_fee >= gasCharge, \"Fee not enough to pay for minimum fee of 10 tokens\");\r\n                            usdcMixers[_ind].mixer.withdraw(_proof, _root, _nullifierHash, _recipient, _relayer, _fee, _refund); // Now withdraw the USDC\r\n                            _fee = _fee.sub(gasCharge); // The gas charge goes directly to the message sender\r\n                            uint256 treasuryFee = _fee.div(2); // Treasury takes half the withdraw fee\r\n                            _fee = _fee.sub(treasuryFee);\r\n                            usdcMixers[_ind].token.safeTransfer(_msgSender(), _fee.add(gasCharge)); // The message sender gets half the fee plus gas charge\r\n                            usdcMixers[_ind].token.safeTransfer(treasuryAddress,treasuryFee);\r\n                            usdcMixers[_ind].totalDeposits = usdcMixers[_ind].totalDeposits.sub(amount); // Take away from deposits\r\n                            usdcMixers[_ind].depositSinceWithdraw = 0; // Reset withdraws\r\n                        }\r\n                        \r\n    function withdrawUSDT(bytes calldata _proof, uint256 amount, bytes32 _root, \r\n                        bytes32 _nullifierHash, address payable _recipient, \r\n                        address payable _relayer, uint256 _fee, uint256 _refund) external payable {\r\n                            // The user can send ETH to the recipient\r\n                            require(amount == usdtMixers[0].denomination || amount == usdtMixers[1].denomination, \"Can only withdraw either 100 or 1000 USDT\");\r\n                            require(_relayer == address(this), \"The relayer must be this contract\");\r\n                            uint256 _ind = 0; // 100 Pool\r\n                            if(amount == usdtMixers[1].denomination){\r\n                                _ind = 1; // Set to 1000 Pool\r\n                            }\r\n                            // This address should now have the fee\r\n                            uint256 gasCharge = minStablecoinFee.mul(10**usdtMixers[_ind].decimals); // Get gas fee in base units\r\n                            require(_fee >= gasCharge, \"Fee not enough to pay for minimum fee of 10 tokens\");\r\n                            usdtMixers[_ind].mixer.withdraw(_proof, _root, _nullifierHash, _recipient, _relayer, _fee, _refund); // Now withdraw the USDT\r\n                            _fee = _fee.sub(gasCharge); // The gas charge directly to the message sender\r\n                            uint256 treasuryFee = _fee.div(2); // Treasury takes half the withdraw fee\r\n                            _fee = _fee.sub(treasuryFee);\r\n                            usdtMixers[_ind].token.safeTransfer(_msgSender(), _fee.add(gasCharge)); // The message sender gets half the fee plus gas charge\r\n                            usdtMixers[_ind].token.safeTransfer(treasuryAddress,treasuryFee);\r\n                            usdtMixers[_ind].totalDeposits = usdtMixers[_ind].totalDeposits.sub(amount); // Take away from deposits\r\n                            usdtMixers[_ind].depositSinceWithdraw = 0; // Reset withdraws\r\n                        }                        \r\n\r\n    // Governance functions\r\n    // Timelock variables\r\n    \r\n    uint256 private _timelockStart; // The start of the timelock to change governance variables\r\n    uint256 private _timelockType; // The function that needs to be changed\r\n    uint256 constant _timelockDuration = 86400; // Timelock is 24 hours\r\n    \r\n    // Reusable timelock variables\r\n    address private _timelock_address;\r\n    \r\n    modifier timelockConditionsMet(uint256 _type) {\r\n        require(_timelockType == _type, \"Timelock not acquired for this function\");\r\n        _timelockType = 0; // Reset the type once the timelock is used\r\n        require(now >= _timelockStart + _timelockDuration, \"Timelock time not met\");\r\n        _;\r\n    }\r\n    \r\n    // Change the owner of the token contract\r\n    // --------------------\r\n    function startGovernanceChange(address _address) external onlyGovernance {\r\n        _timelockStart = now;\r\n        _timelockType = 1;\r\n        _timelock_address = _address;       \r\n    }\r\n    \r\n    function finishGovernanceChange() external onlyGovernance timelockConditionsMet(1) {\r\n        transferGovernance(_timelock_address);\r\n    }\r\n    // --------------------\r\n    \r\n    // Change the treasury address\r\n    // --------------------\r\n    function startChangeTreasury(address _address) external onlyGovernance {\r\n        _timelockStart = now;\r\n        _timelockType = 2;\r\n        _timelock_address = _address;\r\n    }\r\n    \r\n    function finishChangeTreasury() external onlyGovernance timelockConditionsMet(2) {\r\n        treasuryAddress = _timelock_address;\r\n    }\r\n    // --------------------\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"GovernanceTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_commitment\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositDAI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_commitment\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositUSDC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_commitment\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishChangeTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishGovernanceChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"}],\"name\":\"getPoolsInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"startChangeTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"startGovernanceChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_nullifierHash\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_relayer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_refund\",\"type\":\"uint256\"}],\"name\":\"withdrawDAI\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_nullifierHash\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_relayer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_refund\",\"type\":\"uint256\"}],\"name\":\"withdrawUSDC\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_nullifierHash\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_relayer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_refund\",\"type\":\"uint256\"}],\"name\":\"withdrawUSDT\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"StabilizeTornadoProxy","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000042cbe17335ef8d52f8d1e0a261ea2e78e829c56e","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://9f5711b94c3c7be3b0c1df86466faa2b1863c76a1358a6eb0a747bd858b38d7d"}]}