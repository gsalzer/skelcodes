{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface RMU {\r\n    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount, bytes calldata _data) external;\r\n    function safeBatchTransferFrom(address _from, address _to, uint256[] calldata _ids, uint256[] calldata _amounts, bytes calldata _data) external;\r\n    function setApprovalForAll(address _operator, bool _approved) external;\r\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool isOperator);\r\n    function balanceOf(address _owner, uint256 _id) external view returns (uint256);\r\n    function totalSupply(uint256 _id) external view returns (uint256);\r\n    function maxSupply(uint256 _id) external view returns (uint256);\r\n    function mint(address _to, uint256 _id, uint256 _quantity, bytes memory _data) external;\r\n}\r\n\r\ninterface Hope {\r\n    function totalSupply() external view returns (uint256);\r\n    function totalClaimed() external view returns (uint256);\r\n    function addClaimed(uint256 _amount) external;\r\n    function setClaimed(uint256 _amount) external;\r\n    function transfer(address receiver, uint numTokens) external returns (bool);\r\n    function transferFrom(address owner, address buyer, uint numTokens) external returns (bool);\r\n    function balanceOf(address owner) external view returns (uint256);\r\n    function mint(address _to, uint256 _amount) external;\r\n    function burn(address _account, uint256 value) external;\r\n}\r\n\r\ncontract CardRedeemerV2 is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    RMU public ropeMaker;\r\n    Hope public hope;\r\n\r\n    struct Pack {\r\n        uint256[] cardIdList;\r\n        uint256 price;\r\n        uint256 redeemed;\r\n    }\r\n\r\n    struct Card {\r\n        uint256 maxSupply;\r\n        uint256 supply;\r\n    }\r\n\r\n    struct PackCardData {\r\n        uint256 cardId;\r\n        uint256 cardsLeft;\r\n    }\r\n\r\n    uint256[] public packIdList;\r\n    mapping (uint256 => Pack) public packs;\r\n    mapping (uint256 => Card) public cards;\r\n\r\n    event Redeemed(address indexed _user, uint256 indexed _packId, uint256 indexed _cardId);\r\n\r\n    constructor(RMU _ropeMakerAddr, Hope _hopeAddr) public {\r\n        ropeMaker = _ropeMakerAddr;\r\n        hope = _hopeAddr;\r\n    }\r\n\r\n    modifier onlyEOA() {\r\n        require(msg.sender == tx.origin, \"Not eoa\");\r\n        _;\r\n    }\r\n\r\n    /////\r\n    /////\r\n    /////\r\n\r\n    // Returns the list of cardIds which are part of a pack\r\n    function getCardIdListOfPack(uint256 _packId) external view returns(uint256[] memory) {\r\n        return packs[_packId].cardIdList;\r\n    }\r\n\r\n    function _getPackCardData(uint256 _packId) internal view returns(PackCardData[] memory) {\r\n        uint256[] memory _cardIdList = packs[_packId].cardIdList;\r\n        PackCardData[] memory result = new PackCardData[](_cardIdList.length);\r\n\r\n        for (uint256 i = 0; i < _cardIdList.length; ++i) {\r\n            uint256 _cardId = _cardIdList[i];\r\n            uint256 maxSupply = cards[_cardId].maxSupply;\r\n            uint256 supply = cards[_cardId].supply;\r\n            uint256 cardsLeft = maxSupply.sub(supply);\r\n            result[i] = PackCardData(_cardId, cardsLeft);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // Returns amount of packs left\r\n    function _getPacksLeft(PackCardData[] memory _data) internal pure returns(uint256) {\r\n        uint256 total = 0;\r\n        for (uint256 i = 0; i < _data.length; ++i) {\r\n            total = total.add(_data[i].cardsLeft);\r\n        }\r\n\r\n        return total;\r\n    }\r\n\r\n    /////////\r\n    /////////\r\n    /////////\r\n\r\n    // Returns amount of packs left\r\n    function getPacksLeft(uint256 _packId) public view returns(uint256) {\r\n        uint256[] memory _cardIdList = packs[_packId].cardIdList;\r\n\r\n        uint256 total = 0;\r\n        for (uint256 i = 0; i < _cardIdList.length; ++i) {\r\n            uint256 _cardId = _cardIdList[i];\r\n            uint256 cardsLeft = ropeMaker.maxSupply(_cardId).sub(ropeMaker.totalSupply(_cardId));\r\n\r\n            total = total.add(cardsLeft);\r\n        }\r\n\r\n        return total;\r\n    }\r\n\r\n    // Returns probability to get each card (Value must be divided by 1e5)\r\n    function getPackProbabilities(uint256 _packId) public view returns(uint256[] memory) {\r\n        uint256 packsLeft = getPacksLeft(_packId);\r\n        uint256[] memory _cardIdList = packs[_packId].cardIdList;\r\n\r\n        uint256[] memory proba = new uint256[](_cardIdList.length);\r\n        for (uint256 i = 0; i < _cardIdList.length; ++i) {\r\n            uint256 _cardId = _cardIdList[i];\r\n            uint256 cardsLeft = ropeMaker.maxSupply(_cardId).sub(ropeMaker.totalSupply(_cardId));\r\n\r\n            proba[i] = cardsLeft.mul(1e5).div(packsLeft);\r\n        }\r\n\r\n        return proba;\r\n    }\r\n\r\n    function getTotalRedeemed() public view returns(uint256) {\r\n        uint256 totalRedeemed = 0;\r\n\r\n        for (uint256 i = 0; i < packIdList.length; ++i) {\r\n            totalRedeemed = totalRedeemed.add(packs[packIdList[i]].redeemed);\r\n        }\r\n\r\n        return totalRedeemed;\r\n    }\r\n\r\n    function getCardsLeft(uint256 _packId) external view returns(uint256[] memory) {\r\n        uint256[] memory _cardIdList = packs[_packId].cardIdList;\r\n        uint256[] memory result = new uint256[](_cardIdList.length);\r\n\r\n        for (uint256 i = 0; i < _cardIdList.length; ++i) {\r\n            uint256 _cardId = _cardIdList[i];\r\n            uint256 cardsLeft = ropeMaker.maxSupply(_cardId).sub(ropeMaker.totalSupply(_cardId));\r\n            result[i] = cardsLeft;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /////\r\n    /////\r\n    /////\r\n\r\n    function addPack(uint256 _packId, uint256[] memory _cardIdList, uint256 _price) public onlyOwner {\r\n        require(_cardIdList.length > 0, \"CardIdList cannot be empty\");\r\n        require(_price > 0, \"Price cannot be 0\");\r\n\r\n        updateCardsData(_cardIdList);\r\n\r\n        if (_isInArray(_packId, packIdList) == false) {\r\n            packIdList.push(_packId);\r\n        }\r\n\r\n        packs[_packId] = Pack(_cardIdList, _price, 0);\r\n    }\r\n\r\n    // We need to call this function, if we ever mint manually some cards included in a pack\r\n    function updateCardsData(uint256[] memory _cardIdList) public onlyOwner {\r\n        for (uint256 i = 0; i < _cardIdList.length; ++i) {\r\n            uint256 _cardId = _cardIdList[i];\r\n            cards[_cardId] = Card(ropeMaker.maxSupply(_cardId), ropeMaker.totalSupply(_cardId));\r\n        }\r\n    }\r\n\r\n    function removePack(uint256 _packId) public onlyOwner {\r\n        delete packs[_packId].cardIdList;\r\n        packs[_packId].price = 0;\r\n    }\r\n\r\n    //\r\n\r\n    // Redeem a random card from a pack (Not callable by contract, to prevent exploits on RNG)\r\n    function redeem(uint256 _packId) public onlyEOA {\r\n        Pack storage pack = packs[_packId];\r\n        require(pack.price > 0, \"Pack does not exist\");\r\n        require(hope.balanceOf(msg.sender) >= pack.price, \"Not enough hope for pack\");\r\n\r\n        PackCardData[] memory data = _getPackCardData(_packId);\r\n\r\n        uint256 packsLeft = _getPacksLeft(data);\r\n        require(packsLeft > 0, \"Pack sold out\");\r\n\r\n        hope.burn(msg.sender, pack.price);\r\n        pack.redeemed = pack.redeemed.add(1);\r\n\r\n        uint256 rng = _rng(getTotalRedeemed()) % packsLeft;\r\n\r\n\r\n        uint256 cardIdWon = 0;\r\n        uint256 cumul = 0;\r\n        for (uint256 i = 0; i < data.length; ++i) {\r\n            uint256 cardId = data[i].cardId;\r\n\r\n            cumul = cumul.add(data[i].cardsLeft);\r\n            if (rng < cumul) {\r\n                cardIdWon = cardId;\r\n                cards[cardId].supply = cards[cardId].supply.add(1);\r\n                break;\r\n            }\r\n        }\r\n\r\n        require(cardIdWon != 0, \"Error during card redeeming RNG\");\r\n\r\n        ropeMaker.mint(msg.sender, cardIdWon, 1, \"\");\r\n        emit Redeemed(msg.sender, _packId, cardIdWon);\r\n    }\r\n\r\n    //////////////\r\n    // Internal //\r\n    //////////////\r\n\r\n    // Utility function to check if a value is inside an array\r\n    function _isInArray(uint256 _value, uint256[] memory _array) internal pure returns(bool) {\r\n        uint256 length = _array.length;\r\n        for (uint256 i = 0; i < length; ++i) {\r\n            if (_array[i] == _value) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    // This is a pseudo random function, but considering the fact that redeem function is not callable by contract,\r\n    // and the fact that Hope is not transferable, this should be enough to protect us from an attack\r\n    // I would only expect a miner to be able to exploit this, and the attack cost would not be worth it in our case\r\n    function _rng(uint256 _seed) internal view returns(uint256) {\r\n        return uint256(keccak256(abi.encodePacked((block.timestamp).add(_seed).add\r\n        (block.difficulty).add\r\n        ((uint256(keccak256(abi.encodePacked(block.coinbase)))) /\r\n            block.timestamp).add\r\n        (block.gaslimit).add\r\n        ((uint256(keccak256(abi.encodePacked(msg.sender)))) /\r\n            block.timestamp).add\r\n            (block.number)\r\n            )));\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract RMU\",\"name\":\"_ropeMakerAddr\",\"type\":\"address\"},{\"internalType\":\"contract Hope\",\"name\":\"_hopeAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_packId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_cardId\",\"type\":\"uint256\"}],\"name\":\"Redeemed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_packId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_cardIdList\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"addPack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_packId\",\"type\":\"uint256\"}],\"name\":\"getCardIdListOfPack\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_packId\",\"type\":\"uint256\"}],\"name\":\"getCardsLeft\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_packId\",\"type\":\"uint256\"}],\"name\":\"getPackProbabilities\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_packId\",\"type\":\"uint256\"}],\"name\":\"getPacksLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalRedeemed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hope\",\"outputs\":[{\"internalType\":\"contract Hope\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"packIdList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"packs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redeemed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_packId\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_packId\",\"type\":\"uint256\"}],\"name\":\"removePack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ropeMaker\",\"outputs\":[{\"internalType\":\"contract RMU\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_cardIdList\",\"type\":\"uint256[]\"}],\"name\":\"updateCardsData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CardRedeemerV2","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000db68df0e86bc7c6176e6a2255a5365f51113bce80000000000000000000000001eadc903341cfdb3406a04506239f52d076b170b","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a34cc2f4680f0228555544fa8454fdadb0d530ef64d41556af915c8bc7ce3219"}]}