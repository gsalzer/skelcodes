{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Randomized-Threshold-Counter/RandomizedCounter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/*\\n\\n██████╗ ███████╗██████╗  █████╗ ███████╗███████╗\\n██╔══██╗██╔════╝██╔══██╗██╔══██╗██╔════╝██╔════╝\\n██║  ██║█████╗  ██████╔╝███████║███████╗█████╗  \\n██║  ██║██╔══╝  ██╔══██╗██╔══██║╚════██║██╔══╝  \\n██████╔╝███████╗██████╔╝██║  ██║███████║███████╗\\n╚═════╝ ╚══════╝╚═════╝ ╚═╝  ╚═╝╚══════╝╚══════╝\\n                                               \\n\\n* Debase: RandomizedCounter.sol\\n* Description:\\n* Counts rebases and distributes rewards when a random threshold is triggered.\\n* Coded by: punkUnknown\\n*/\\n\\npragma solidity >=0.6.6;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\ninterface IRandomNumberConsumer {\\n    function getRandomNumber(uint256 userProvidedSeed) external;\\n\\n    function fee() external view returns (uint256);\\n}\\n\\ncontract LPTokenWrapper {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public y;\\n\\n    function setStakeToken(address _y) internal {\\n        y = IERC20(_y);\\n    }\\n\\n    uint256 private _totalSupply;\\n    mapping(address => uint256) private _balances;\\n\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) public view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function stake(uint256 amount) public virtual {\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[msg.sender] = _balances[msg.sender].add(amount);\\n        y.safeTransferFrom(msg.sender, address(this), amount);\\n    }\\n\\n    function withdraw(uint256 amount) public virtual {\\n        _totalSupply = _totalSupply.sub(amount);\\n        _balances[msg.sender] = _balances[msg.sender].sub(amount);\\n        y.safeTransfer(msg.sender, amount);\\n    }\\n}\\n\\ncontract RandomizedCounter is\\n    Ownable,\\n    Initializable,\\n    LPTokenWrapper,\\n    ReentrancyGuard\\n{\\n    using Address for address;\\n\\n    event LogEmergencyWithdraw(uint256 timestamp);\\n    event LogSetCountThreshold(uint256 countThreshold_);\\n    event LogSetBeforePeriodFinish(bool beforePeriodFinish_);\\n    event LogSetCountInSequence(bool countInSequence_);\\n    event LogSetRewardPercentage(uint256 rewardPercentage_);\\n    event LogSetRevokeReward(bool revokeReward_);\\n    event LogSetRevokeRewardPrecentage(uint256 revokeRewardPrecentage_);\\n    event LogSetNormalDistribution(\\n        uint256 noramlDistributionMean_,\\n        uint256 normalDistributionDeviation_,\\n        uint256[100] normalDistribution_\\n    );\\n    event LogSetRandomNumberConsumer(\\n        IRandomNumberConsumer randomNumberConsumer_\\n    );\\n    event LogSetMultiSigAddress(address multiSigAddress_);\\n    event LogSetMultiSigRewardPercentage(uint256 multiSigRewardPercentage_);\\n    event LogRevokeRewardDuration(uint256 revokeRewardDuration_);\\n    event LogLastRandomThreshold(uint256 lastRandomThreshold_);\\n    event LogSetBlockDuration(uint256 blockDuration_);\\n    event LogStartNewDistributionCycle(\\n        uint256 poolShareAdded_,\\n        uint256 rewardRate_,\\n        uint256 periodFinish_,\\n        uint256 count_\\n    );\\n    event LogRandomThresold(uint256 randomNumber);\\n    event LogSetPoolEnabled(bool poolEnabled_);\\n    event LogSetEnableUserLpLimit(bool enableUserLpLimit_);\\n    event LogSetEnablePoolLpLimit(bool enablePoolLpLimit_);\\n    event LogSetUserLpLimit(uint256 userLpLimit_);\\n    event LogSetPoolLpLimit(uint256 poolLpLimit_);\\n    event LogRewardsClaimed(uint256 rewardAmount_);\\n    event LogRewardAdded(uint256 reward);\\n    event LogRewardRevoked(\\n        uint256 revokeDuratoin,\\n        uint256 precentageRevoked,\\n        uint256 amountRevoked\\n    );\\n    event LogClaimRevoked(uint256 claimAmountRevoked_);\\n    event LogStaked(address indexed user, uint256 amount);\\n    event LogWithdrawn(address indexed user, uint256 amount);\\n    event LogRewardPaid(address indexed user, uint256 reward);\\n    event LogManualPoolStarted(uint256 startedAt);\\n\\n    IERC20 public debase;\\n    address public policy;\\n    bool public poolEnabled;\\n\\n    uint256 public periodFinish;\\n    uint256 public rewardRate;\\n    uint256 public lastUpdateBlock;\\n    uint256 public rewardPerTokenStored;\\n    uint256 public rewardPercentage;\\n    uint256 public rewardDistributed;\\n\\n    uint256 public blockDuration;\\n\\n    //Flag to enable amount of lp that can be staked by a account\\n    bool public enableUserLpLimit;\\n    //Amount of lp that can be staked by a account\\n    uint256 public userLpLimit;\\n\\n    //Flag to enable total amount of lp that can be staked by all users\\n    bool public enablePoolLpLimit;\\n    //Total amount of lp tat can be staked\\n    uint256 public poolLpLimit;\\n\\n    uint256 public revokeRewardDuration;\\n\\n    // Should revoke reward\\n    bool public revokeReward;\\n\\n    uint256 public lastRewardPercentage;\\n\\n    // The count of s hitting their target\\n    uint256 public count;\\n\\n    // Flag to enable or disable   sequence checker\\n    bool public countInSequence;\\n\\n    bool public newBufferFunds;\\n\\n    // Address for the random number contract (chainlink vrf)\\n    IRandomNumberConsumer public randomNumberConsumer;\\n\\n    //Address of the link token\\n    IERC20 public link;\\n\\n    // Flag to send reward before stabilizer pool period time finished\\n    bool public beforePeriodFinish;\\n\\n    // The mean for the normal distribution added\\n    uint256 public normalDistributionMean;\\n\\n    // The deviation for te normal distribution added\\n    uint256 public normalDistributionDeviation;\\n\\n    // The array of normal distribution value data\\n    uint256[100] public normalDistribution;\\n\\n    address public multiSigAddress;\\n    uint256 public multiSigRewardPercentage;\\n    uint256 public multiSigRewardToClaimShare;\\n\\n    mapping(address => uint256) public userRewardPerTokenPaid;\\n    mapping(address => uint256) public rewards;\\n\\n    modifier enabled() {\\n        require(poolEnabled, \\\"Pool isn't enabled\\\");\\n        _;\\n    }\\n\\n    modifier updateReward(address account) {\\n        rewardPerTokenStored = rewardPerToken();\\n        lastUpdateBlock = lastBlockRewardApplicable();\\n        if (account != address(0)) {\\n            rewards[account] = earned(account);\\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Function to set how much reward the stabilizer will request\\n     */\\n    function setRewardPercentage(uint256 rewardPercentage_) external onlyOwner {\\n        rewardPercentage = rewardPercentage_;\\n        emit LogSetRewardPercentage(rewardPercentage);\\n    }\\n\\n    /**\\n     * @notice Function to enable or disable count should be in sequence\\n     */\\n    function setCountInSequence(bool countInSequence_) external onlyOwner {\\n        countInSequence = countInSequence_;\\n        count = 0;\\n        emit LogSetCountInSequence(!countInSequence);\\n    }\\n\\n    /**\\n     * @notice Function to enable or disable reward revoking\\n     */\\n    function setRevokeReward(bool revokeReward_) external onlyOwner {\\n        revokeReward = revokeReward_;\\n        emit LogSetRevokeReward(revokeReward);\\n    }\\n\\n    /**\\n     * @notice Function to set how much of the reward duration should be revoked\\n     */\\n    function setRevokeRewardDuration(uint256 revokeRewardDuration_)\\n        external\\n        onlyOwner\\n    {\\n        revokeRewardDuration = revokeRewardDuration_;\\n        emit LogRevokeRewardDuration(revokeRewardDuration);\\n    }\\n\\n    /**\\n     * @notice Function to allow reward distribution before previous rewards have been distributed\\n     */\\n    function setBeforePeriodFinish(bool beforePeriodFinish_)\\n        external\\n        onlyOwner\\n    {\\n        beforePeriodFinish = beforePeriodFinish_;\\n        emit LogSetBeforePeriodFinish(beforePeriodFinish);\\n    }\\n\\n    /**\\n     * @notice Function to set reward drop period\\n     */\\n    function setBlockDuration(uint256 blockDuration_) external onlyOwner {\\n        require(blockDuration >= 1);\\n        blockDuration = blockDuration_;\\n        emit LogSetBlockDuration(blockDuration);\\n    }\\n\\n    /**\\n     * @notice Function enabled or disable pool staking,withdraw\\n     */\\n    function setPoolEnabled(bool poolEnabled_) external onlyOwner {\\n        poolEnabled = poolEnabled_;\\n        count = 0;\\n        emit LogSetPoolEnabled(poolEnabled);\\n    }\\n\\n    /**\\n     * @notice Function to enable user lp limit\\n     */\\n    function setEnableUserLpLimit(bool enableUserLpLimit_) external onlyOwner {\\n        enableUserLpLimit = enableUserLpLimit_;\\n        emit LogSetEnableUserLpLimit(enableUserLpLimit);\\n    }\\n\\n    /**\\n     * @notice Function to set user lp limit\\n     */\\n    function setUserLpLimit(uint256 userLpLimit_) external onlyOwner {\\n        require(\\n            userLpLimit_ <= poolLpLimit,\\n            \\\"User lp limit cant be more than pool limit\\\"\\n        );\\n        userLpLimit = userLpLimit_;\\n        emit LogSetUserLpLimit(userLpLimit);\\n    }\\n\\n    /**\\n     * @notice Function to enable pool lp limit\\n     */\\n    function setEnablePoolLpLimit(bool enablePoolLpLimit_) external onlyOwner {\\n        enablePoolLpLimit = enablePoolLpLimit_;\\n        emit LogSetEnablePoolLpLimit(enablePoolLpLimit);\\n    }\\n\\n    /**\\n     * @notice Function to set pool lp limit\\n     */\\n    function setPoolLpLimit(uint256 poolLpLimit_) external onlyOwner {\\n        require(\\n            poolLpLimit_ >= userLpLimit,\\n            \\\"Pool lp limit cant be less than user lp limit\\\"\\n        );\\n        poolLpLimit = poolLpLimit_;\\n        emit LogSetPoolLpLimit(poolLpLimit);\\n    }\\n\\n    /**\\n     * @notice Function to set address of the random number consumer (chain link vrf)\\n     */\\n    function setRandomNumberConsumer(\\n        IRandomNumberConsumer randomNumberConsumer_\\n    ) external onlyOwner {\\n        randomNumberConsumer = IRandomNumberConsumer(randomNumberConsumer_);\\n        emit LogSetRandomNumberConsumer(randomNumberConsumer);\\n    }\\n\\n    function setMultiSigRewardPercentage(uint256 multiSigRewardPercentage_)\\n        external\\n        onlyOwner\\n    {\\n        multiSigRewardPercentage = multiSigRewardPercentage_;\\n        emit LogSetMultiSigRewardPercentage(multiSigRewardPercentage);\\n    }\\n\\n    function setMultiSigAddress(address multiSigAddress_) external onlyOwner {\\n        multiSigAddress = multiSigAddress_;\\n        emit LogSetMultiSigAddress(multiSigAddress);\\n    }\\n\\n    /**\\n     * @notice Function to set the normal distribution array and its associated mean/deviation\\n     */\\n    function setNormalDistribution(\\n        uint256 normalDistributionMean_,\\n        uint256 normalDistributionDeviation_,\\n        uint256[100] calldata normalDistribution_\\n    ) external onlyOwner {\\n        normalDistributionMean = normalDistributionMean_;\\n        normalDistributionDeviation = normalDistributionDeviation_;\\n        normalDistribution = normalDistribution_;\\n        emit LogSetNormalDistribution(\\n            normalDistributionMean,\\n            normalDistributionDeviation,\\n            normalDistribution\\n        );\\n    }\\n\\n    function initialize(\\n        address debase_,\\n        address pairToken_,\\n        address policy_,\\n        address randomNumberConsumer_,\\n        address link_,\\n        uint256 rewardPercentage_,\\n        uint256 blockDuration_,\\n        bool enableUserLpLimit_,\\n        uint256 userLpLimit_,\\n        bool enablePoolLpLimit_,\\n        uint256 poolLpLimit_,\\n        uint256 revokeRewardDuration_,\\n        uint256 normalDistributionMean_,\\n        uint256 normalDistributionDeviation_,\\n        uint256[100] memory normalDistribution_\\n    ) public initializer {\\n        setStakeToken(pairToken_);\\n        debase = IERC20(debase_);\\n        link = IERC20(link_);\\n        randomNumberConsumer = IRandomNumberConsumer(randomNumberConsumer_);\\n        policy = policy_;\\n        count = 0;\\n\\n        blockDuration = blockDuration_;\\n        enableUserLpLimit = enableUserLpLimit_;\\n        userLpLimit = userLpLimit_;\\n        enablePoolLpLimit = enablePoolLpLimit_;\\n        poolLpLimit = poolLpLimit_;\\n        rewardPercentage = rewardPercentage_;\\n        revokeRewardDuration = revokeRewardDuration_;\\n        countInSequence = true;\\n        normalDistribution = normalDistribution_;\\n        normalDistributionMean = normalDistributionMean_;\\n        normalDistributionDeviation = normalDistributionDeviation_;\\n    }\\n\\n    /**\\n     * @notice When a rebase happens this function is called by the rebase function. If the supplyDelta is positive (supply increase) a random\\n     * will be constructed using Chainlink VRF. The mod of the random number is taken to get a number between 0-100. This result\\n     * is used as a index to get a number from the normal distribution array. The number returned will be compared against the current count of\\n     * positive rebases and if the count is equal to or greater that the number obtained from array, then the pool will request rewards from the stabilizer pool.\\n     */\\n    function checkStabilizerAndGetReward(\\n        int256 supplyDelta_,\\n        int256 rebaseLag_,\\n        uint256 exchangeRate_,\\n        uint256 debasePolicyBalance\\n    ) external returns (uint256 rewardAmount_) {\\n        require(\\n            msg.sender == policy,\\n            \\\"Only debase policy contract can call this\\\"\\n        );\\n\\n        if (newBufferFunds) {\\n            uint256 previousUnusedRewardToClaim =\\n                debase.totalSupply().mul(lastRewardPercentage).div(10**18);\\n\\n            if (\\n                debase.balanceOf(address(this)) >= previousUnusedRewardToClaim\\n            ) {\\n                debase.safeTransfer(policy, previousUnusedRewardToClaim);\\n                emit LogRewardsClaimed(previousUnusedRewardToClaim);\\n            }\\n            newBufferFunds = false;\\n        }\\n\\n        if (supplyDelta_ > 0) {\\n            count = count.add(1);\\n\\n            // Call random number fetcher only if the random number consumer has link in its balance to do so. Otherwise return 0\\n            if (\\n                link.balanceOf(address(randomNumberConsumer)) >=\\n                randomNumberConsumer.fee() &&\\n                (beforePeriodFinish || block.number >= periodFinish)\\n            ) {\\n                uint256 rewardToClaim =\\n                    debasePolicyBalance.mul(rewardPercentage).div(10**18);\\n\\n                uint256 multiSigRewardAmount =\\n                    rewardToClaim.mul(multiSigRewardPercentage).div(10**18);\\n\\n                lastRewardPercentage = rewardToClaim.mul(10**18).div(\\n                    debase.totalSupply()\\n                );\\n\\n                multiSigRewardToClaimShare = multiSigRewardAmount\\n                    .mul(10**18)\\n                    .div(debase.totalSupply());\\n\\n                uint256 totalRewardToClaim =\\n                    rewardToClaim.add(multiSigRewardAmount);\\n\\n                if (totalRewardToClaim <= debasePolicyBalance) {\\n                    newBufferFunds = true;\\n                    randomNumberConsumer.getRandomNumber(block.number);\\n                    emit LogRewardsClaimed(totalRewardToClaim);\\n                    return totalRewardToClaim;\\n                }\\n            }\\n        } else if (countInSequence) {\\n            count = 0;\\n\\n            if (revokeReward && block.number < periodFinish) {\\n                uint256 timeRemaining = periodFinish.sub(block.number);\\n                // Rewards will only be revoked from period after the current period so unclaimed rewards arent taken away.\\n                if (timeRemaining >= revokeRewardDuration) {\\n                    //Set reward distribution period back\\n                    periodFinish = periodFinish.sub(revokeRewardDuration);\\n                    //Calculate reward to rewark by amount the reward moved back\\n                    uint256 rewardToRevokeShare =\\n                        rewardRate.mul(revokeRewardDuration);\\n\\n                    uint256 rewardToRevokeAmount =\\n                        debase.totalSupply().mul(rewardToRevokeShare).div(\\n                            10**18\\n                        );\\n\\n                    lastUpdateBlock = block.number;\\n\\n                    debase.safeTransfer(policy, rewardToRevokeAmount);\\n                    emit LogRewardRevoked(\\n                        revokeRewardDuration,\\n                        rewardToRevokeShare,\\n                        rewardToRevokeAmount\\n                    );\\n                }\\n            }\\n        }\\n        return 0;\\n    }\\n\\n    function claimer(uint256 randomNumber) external {\\n        require(\\n            msg.sender == address(randomNumberConsumer),\\n            \\\"Only debase policy contract can call this\\\"\\n        );\\n        newBufferFunds = false;\\n\\n        uint256 lastRandomThreshold = normalDistribution[randomNumber.mod(100)];\\n        emit LogLastRandomThreshold(lastRandomThreshold);\\n\\n        if (count >= lastRandomThreshold) {\\n            startNewDistributionCycle();\\n            count = 0;\\n\\n            if (multiSigRewardToClaimShare != 0) {\\n                uint256 amountToClaim =\\n                    debase.totalSupply().mul(multiSigRewardToClaimShare).div(\\n                        10**18\\n                    );\\n\\n                debase.transfer(multiSigAddress, amountToClaim);\\n            }\\n        } else {\\n            uint256 rewardToClaim =\\n                debase.totalSupply().mul(lastRewardPercentage).div(10**18);\\n\\n            debase.safeTransfer(policy, rewardToClaim);\\n            emit LogClaimRevoked(rewardToClaim);\\n        }\\n    }\\n\\n    /**\\n     * @notice Function allows for emergency withdrawal of all reward tokens back into stabilizer fund\\n     */\\n    function emergencyWithdraw() external onlyOwner {\\n        debase.safeTransfer(policy, debase.balanceOf(address(this)));\\n        emit LogEmergencyWithdraw(block.number);\\n    }\\n\\n    function lastBlockRewardApplicable() internal view returns (uint256) {\\n        return Math.min(block.number, periodFinish);\\n    }\\n\\n    function rewardPerToken() public view returns (uint256) {\\n        if (totalSupply() == 0) {\\n            return rewardPerTokenStored;\\n        }\\n        return\\n            rewardPerTokenStored.add(\\n                lastBlockRewardApplicable()\\n                    .sub(lastUpdateBlock)\\n                    .mul(rewardRate)\\n                    .mul(10**18)\\n                    .div(totalSupply())\\n            );\\n    }\\n\\n    function earned(address account) public view returns (uint256) {\\n        return\\n            balanceOf(account)\\n                .mul(rewardPerToken().sub(userRewardPerTokenPaid[account]))\\n                .div(10**18)\\n                .add(rewards[account]);\\n    }\\n\\n    // stake visibility is public as overriding LPTokenWrapper's stake() function\\n    function stake(uint256 amount)\\n        public\\n        override\\n        nonReentrant\\n        updateReward(msg.sender)\\n        enabled\\n    {\\n        require(\\n            !address(msg.sender).isContract(),\\n            \\\"Caller must not be a contract\\\"\\n        );\\n        require(amount > 0, \\\"Cannot stake 0\\\");\\n\\n        if (enablePoolLpLimit) {\\n            uint256 lpBalance = totalSupply();\\n            require(\\n                amount.add(lpBalance) <= poolLpLimit,\\n                \\\"Cant stake pool lp limit reached\\\"\\n            );\\n        }\\n        if (enableUserLpLimit) {\\n            uint256 userLpBalance = balanceOf(msg.sender);\\n            require(\\n                userLpBalance.add(amount) <= userLpLimit,\\n                \\\"Cant stake more than lp limit\\\"\\n            );\\n        }\\n\\n        super.stake(amount);\\n        emit LogStaked(msg.sender, amount);\\n    }\\n\\n    function withdraw(uint256 amount)\\n        public\\n        override\\n        nonReentrant\\n        updateReward(msg.sender)\\n    {\\n        require(amount > 0, \\\"Cannot withdraw 0\\\");\\n        super.withdraw(amount);\\n        emit LogWithdrawn(msg.sender, amount);\\n    }\\n\\n    function exit() external {\\n        withdraw(balanceOf(msg.sender));\\n        getReward();\\n    }\\n\\n    function getReward() public nonReentrant updateReward(msg.sender) enabled {\\n        uint256 reward = earned(msg.sender);\\n        if (reward > 0) {\\n            rewards[msg.sender] = 0;\\n\\n            uint256 rewardToClaim =\\n                debase.totalSupply().mul(reward).div(10**18);\\n\\n            debase.safeTransfer(msg.sender, rewardToClaim);\\n\\n            emit LogRewardPaid(msg.sender, rewardToClaim);\\n            rewardDistributed = rewardDistributed.add(reward);\\n        }\\n    }\\n\\n    function startNewDistributionCycle() internal updateReward(address(0)) {\\n        // https://sips.synthetix.io/sips/sip-77\\n        require(\\n            debase.balanceOf(address(this)) < uint256(-1) / 10**18,\\n            \\\"Rewards: rewards too large, would lock\\\"\\n        );\\n\\n        if (block.number >= periodFinish) {\\n            rewardRate = lastRewardPercentage.div(blockDuration);\\n        } else {\\n            uint256 remaining = periodFinish.sub(block.number);\\n            uint256 leftover = remaining.mul(rewardRate);\\n            rewardRate = lastRewardPercentage.add(leftover).div(blockDuration);\\n        }\\n        lastUpdateBlock = block.number;\\n        periodFinish = block.number.add(blockDuration);\\n\\n        emit LogStartNewDistributionCycle(\\n            lastRewardPercentage,\\n            rewardRate,\\n            periodFinish,\\n            count\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/upgrades/contracts/Initializable.sol\": {\r\n      \"content\": \"pragma solidity >=0.4.24 <0.7.0;\\n\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    address self = address(this);\\n    uint256 cs;\\n    assembly { cs := extcodesize(self) }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimAmountRevoked_\",\"type\":\"uint256\"}],\"name\":\"LogClaimRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LogEmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastRandomThreshold_\",\"type\":\"uint256\"}],\"name\":\"LogLastRandomThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"}],\"name\":\"LogManualPoolStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"randomNumber\",\"type\":\"uint256\"}],\"name\":\"LogRandomThresold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"revokeRewardDuration_\",\"type\":\"uint256\"}],\"name\":\"LogRevokeRewardDuration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"LogRewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"LogRewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"revokeDuratoin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"precentageRevoked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountRevoked\",\"type\":\"uint256\"}],\"name\":\"LogRewardRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount_\",\"type\":\"uint256\"}],\"name\":\"LogRewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"beforePeriodFinish_\",\"type\":\"bool\"}],\"name\":\"LogSetBeforePeriodFinish\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockDuration_\",\"type\":\"uint256\"}],\"name\":\"LogSetBlockDuration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"countInSequence_\",\"type\":\"bool\"}],\"name\":\"LogSetCountInSequence\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"countThreshold_\",\"type\":\"uint256\"}],\"name\":\"LogSetCountThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enablePoolLpLimit_\",\"type\":\"bool\"}],\"name\":\"LogSetEnablePoolLpLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enableUserLpLimit_\",\"type\":\"bool\"}],\"name\":\"LogSetEnableUserLpLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"multiSigAddress_\",\"type\":\"address\"}],\"name\":\"LogSetMultiSigAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"multiSigRewardPercentage_\",\"type\":\"uint256\"}],\"name\":\"LogSetMultiSigRewardPercentage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"noramlDistributionMean_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"normalDistributionDeviation_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[100]\",\"name\":\"normalDistribution_\",\"type\":\"uint256[100]\"}],\"name\":\"LogSetNormalDistribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"poolEnabled_\",\"type\":\"bool\"}],\"name\":\"LogSetPoolEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolLpLimit_\",\"type\":\"uint256\"}],\"name\":\"LogSetPoolLpLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IRandomNumberConsumer\",\"name\":\"randomNumberConsumer_\",\"type\":\"address\"}],\"name\":\"LogSetRandomNumberConsumer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"revokeReward_\",\"type\":\"bool\"}],\"name\":\"LogSetRevokeReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"revokeRewardPrecentage_\",\"type\":\"uint256\"}],\"name\":\"LogSetRevokeRewardPrecentage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPercentage_\",\"type\":\"uint256\"}],\"name\":\"LogSetRewardPercentage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userLpLimit_\",\"type\":\"uint256\"}],\"name\":\"LogSetUserLpLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolShareAdded_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardRate_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"periodFinish_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count_\",\"type\":\"uint256\"}],\"name\":\"LogStartNewDistributionCycle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beforePeriodFinish\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"supplyDelta_\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"rebaseLag_\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"exchangeRate_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debasePolicyBalance\",\"type\":\"uint256\"}],\"name\":\"checkStabilizerAndGetReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardAmount_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"randomNumber\",\"type\":\"uint256\"}],\"name\":\"claimer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"countInSequence\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debase\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enablePoolLpLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableUserLpLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"debase_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pairToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"policy_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"randomNumberConsumer_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"link_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardPercentage_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockDuration_\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enableUserLpLimit_\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"userLpLimit_\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enablePoolLpLimit_\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"poolLpLimit_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"revokeRewardDuration_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"normalDistributionMean_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"normalDistributionDeviation_\",\"type\":\"uint256\"},{\"internalType\":\"uint256[100]\",\"name\":\"normalDistribution_\",\"type\":\"uint256[100]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"link\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiSigAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiSigRewardPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiSigRewardToClaimShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newBufferFunds\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"normalDistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"normalDistributionDeviation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"normalDistributionMean\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"policy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLpLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomNumberConsumer\",\"outputs\":[{\"internalType\":\"contract IRandomNumberConsumer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revokeReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revokeRewardDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"beforePeriodFinish_\",\"type\":\"bool\"}],\"name\":\"setBeforePeriodFinish\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockDuration_\",\"type\":\"uint256\"}],\"name\":\"setBlockDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"countInSequence_\",\"type\":\"bool\"}],\"name\":\"setCountInSequence\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enablePoolLpLimit_\",\"type\":\"bool\"}],\"name\":\"setEnablePoolLpLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enableUserLpLimit_\",\"type\":\"bool\"}],\"name\":\"setEnableUserLpLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"multiSigAddress_\",\"type\":\"address\"}],\"name\":\"setMultiSigAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"multiSigRewardPercentage_\",\"type\":\"uint256\"}],\"name\":\"setMultiSigRewardPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"normalDistributionMean_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"normalDistributionDeviation_\",\"type\":\"uint256\"},{\"internalType\":\"uint256[100]\",\"name\":\"normalDistribution_\",\"type\":\"uint256[100]\"}],\"name\":\"setNormalDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"poolEnabled_\",\"type\":\"bool\"}],\"name\":\"setPoolEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolLpLimit_\",\"type\":\"uint256\"}],\"name\":\"setPoolLpLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRandomNumberConsumer\",\"name\":\"randomNumberConsumer_\",\"type\":\"address\"}],\"name\":\"setRandomNumberConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"revokeReward_\",\"type\":\"bool\"}],\"name\":\"setRevokeReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"revokeRewardDuration_\",\"type\":\"uint256\"}],\"name\":\"setRevokeRewardDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardPercentage_\",\"type\":\"uint256\"}],\"name\":\"setRewardPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"userLpLimit_\",\"type\":\"uint256\"}],\"name\":\"setUserLpLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userLpLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"y\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"RandomizedCounter","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}