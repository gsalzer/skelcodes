{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract RewardOwner is Context {\r\n    address internal _molStakerContract;\r\n    address internal _lavaStakerContract;\r\n\r\n    constructor (address molStakerContract, address lavaStakerContract) internal {\r\n        _molStakerContract = molStakerContract;\r\n        _lavaStakerContract = lavaStakerContract;\r\n    }\r\n    \r\n    modifier onlyMOLStakerContract() {\r\n        require(_msgSender() == _molStakerContract, \"RewardOwner: caller is not the MOLStaker contract\");\r\n        _;\r\n    }\r\n    \r\n    modifier onlyLAVAStakerContract() {\r\n        require(_msgSender() == _lavaStakerContract, \"RewardOwner: caller is not the LAVAStaker contract\");\r\n        _;\r\n    }\r\n}\r\n\r\nabstract contract MOLContract {\r\n    function balanceOf(address account) external view virtual returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external virtual returns (bool);\r\n}\r\n\r\nabstract contract LAVAContract {\r\n    function balanceOf(address account) external view virtual returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external virtual returns (bool);\r\n}\r\n\r\ninterface IUniswapV2ERC20 {\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function transfer(address to, uint value) external returns (bool);\r\n}\r\n\r\n\r\ncontract Reward is RewardOwner {\r\n    using SafeMath for uint256;\r\n\r\n    LAVAContract private _lavaContract;     // lava contract\r\n    address private _lavaUniV2Pair;         // lava uniswap-eth v2 pair\r\n\r\n    constructor (LAVAContract lavaContract, address lavaUniV2Pair, address molStakerContract, address lavaStakerContract) RewardOwner(molStakerContract, lavaStakerContract) public {\r\n        _lavaContract = lavaContract;\r\n        _lavaUniV2Pair = lavaUniV2Pair;\r\n    }\r\n    \r\n    function MOLStakerContract() external view returns (address) {\r\n        return _molStakerContract;\r\n    }\r\n    \r\n    function LAVAStakerContract() external view returns (address) {\r\n        return _lavaStakerContract;\r\n    }\r\n    \r\n    function getLavaBalance() external view returns (uint256) {\r\n        return _lavaContract.balanceOf(address(this));\r\n    }\r\n    \r\n    function getLavaUNIv2Balance() external view returns (uint256) {\r\n        return IUniswapV2ERC20(_lavaUniV2Pair).balanceOf(address(this));\r\n    }\r\n    \r\n    function giveLavaReward(address recipient, uint256 amount) external onlyMOLStakerContract returns (bool) {\r\n        return _lavaContract.transfer(recipient, amount);\r\n    }\r\n    \r\n    function giveLavaUNIv2Reward(address recipient, uint256 amount) external onlyLAVAStakerContract returns (bool) {\r\n        return IUniswapV2ERC20(_lavaUniV2Pair).transfer(recipient, amount);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract LAVAContract\",\"name\":\"lavaContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lavaUniV2Pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"molStakerContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lavaStakerContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"LAVAStakerContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MOLStakerContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLavaBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLavaUNIv2Balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"giveLavaReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"giveLavaUNIv2Reward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Reward","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000005588b004919b0b77e526d62aa5b66f8afe71f5f00000000000000000000000004f129f06d805a856f3b48d6e9871af841534c8eb00000000000000000000000004337132ec0c62cbca8640444d23496130e7ba160000000000000000000000003572b050a32b2b00feba5e95b818dcfc828e23ea","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://85623416ebf017524992d815509ed9ee68e91db3c7873231a16e157f1f14ef29"}]}