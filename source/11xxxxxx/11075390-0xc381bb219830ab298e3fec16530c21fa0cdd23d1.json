{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\n// SPDX-License-Identifier: UNLICENSED\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n *\r\n*/\r\n \r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n \r\n  function ceil(uint a, uint m) internal pure returns (uint r) {\r\n    return (a + m - 1) / m * m;\r\n  }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n// ----------------------------------------------------------------------------\r\nabstract contract ERC20Interface {\r\n    function totalSupply() public virtual view returns (uint);\r\n    function balanceOf(address tokenOwner) public virtual view returns (uint256 balance);\r\n    function allowance(address tokenOwner, address spender) public virtual view returns (uint256 remaining);\r\n    function transfer(address to, uint256 tokens) public virtual returns (bool success);\r\n    function approve(address spender, uint256 tokens) public virtual returns (bool success);\r\n    function transferFrom(address from, address to, uint256 tokens) public virtual returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// ----------------------------------------------------------------------------\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 tokens) external returns (bool success);\r\n    function transferFrom(address from, address to, uint256 tokens) external returns (bool success);\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n    address payable public owner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address payable _newOwner) public onlyOwner {\r\n        owner = _newOwner;\r\n        emit OwnershipTransferred(msg.sender, _newOwner);\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// 'MCORE' token AND staking contract\r\n\r\n// Symbol      : MCORE\r\n// Name        : MetaCore\r\n// Total supply: 7000 (7 thousands)\r\n// Decimals    : 18\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC20 Token, with the addition of symbol, name and decimals and assisted\r\n// token transfers\r\n// ----------------------------------------------------------------------------\r\ncontract MetaCore is ERC20Interface, Owned {\r\n    using SafeMath for uint256;\r\n   \r\n    string public symbol = \"MCORE\";\r\n    string public  name = \"MetaCore\";\r\n    uint256 public decimals = 18;\r\n    \r\n    uint256 _totalSupply = 7e3 * 10 ** (decimals);\r\n    \r\n    uint256 deployTime;\r\n    uint256 private totalDividentPoints;\r\n    uint256 pointMultiplier = 1000000000000000000;\r\n    uint256 public stakedCoins;\r\n    \r\n    uint256 public totalRewardsClaimed;\r\n    \r\n    address uniSwapAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    address MCORE_WETH_POOL_ADDRESS = address(0);\r\n    address devs;\r\n    address communityFund;\r\n    \r\n    struct  Account {\r\n        uint256 balance;\r\n        uint256 lastDividentPoints;\r\n        uint256 timeInvest;\r\n        uint256 lastClaimed;\r\n        uint256 rewardsClaimed;\r\n        uint256 totalStakes;\r\n        uint256 pending;\r\n    }\r\n\r\n    mapping(address => Account) accounts;\r\n    mapping(address => uint256) balances;\r\n    mapping(address => mapping(address => uint256)) allowed;\r\n   \r\n    // ------------------------------------------------------------------------\r\n    // Constructor\r\n    // ------------------------------------------------------------------------\r\n    constructor() public {\r\n        \r\n        owner = 0xcC3d0B03DCC7C2d4f7C71E4DAFDb1C40A4829Df5;\r\n        devs =  0x81B794fad3BC654C8662614e83750E3541591fE5;\r\n        communityFund = 0x9F2742e7427E26DeC6beD359F0B4b5bff6A41bB3;\r\n        \r\n        balances[communityFund] =  totalSupply(); // 7000\r\n        emit Transfer(address(0), communityFund, totalSupply());\r\n        \r\n        deployTime = block.timestamp;\r\n    }\r\n\r\n    function setLpsAddress(address _MCORE_WETH_POOL_ADDRESS) external onlyOwner{\r\n        require(_MCORE_WETH_POOL_ADDRESS != address(0), \"Pool address cannot be zero\");\r\n        require(MCORE_WETH_POOL_ADDRESS == address(0), \"Pool address already set\");\r\n        MCORE_WETH_POOL_ADDRESS = _MCORE_WETH_POOL_ADDRESS;\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Stake the 'MCORE-WETH Lp' tokens to earn reward in 'MCORE'tokens\r\n    // ------------------------------------------------------------------------\r\n    \r\n    function STAKE(uint256 _tokens) external returns(bool){\r\n        require(IERC20(MCORE_WETH_POOL_ADDRESS).transferFrom(msg.sender, address(this), _tokens), \"Insufficient Tokens!\");\r\n\r\n        stakedCoins = stakedCoins.add(_tokens); // MCORE_WETH Lp\r\n        \r\n        uint256 owing = dividendsOwing(msg.sender); // MCORE tokens\r\n        \r\n        if(owing > 0) { // checks previous pending rewards\r\n            accounts[msg.sender].pending = owing;\r\n        }\r\n        \r\n        accounts[msg.sender].balance = accounts[msg.sender].balance.add(_tokens); // MCORE_WETH Lp\r\n        accounts[msg.sender].lastDividentPoints = totalDividentPoints;            // MCORE tokens\r\n        accounts[msg.sender].timeInvest = now;\r\n        accounts[msg.sender].lastClaimed = now;\r\n        accounts[msg.sender].totalStakes = accounts[msg.sender].totalStakes.add(_tokens); // MCORE_WETH Lp\r\n        \r\n        return true;\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Gives the tokens in MCORE - ready to claim\r\n    // ------------------------------------------------------------------------\r\n    function pendingReward(address _user) external view returns(uint256 MCORE){\r\n        uint256 owing = dividendsOwing(_user);\r\n        return owing;\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // internal function used when MCORE tokens reward is claimed\r\n    // ------------------------------------------------------------------------\r\n    function updateDividend(address investor) internal returns(uint256){\r\n        uint256 owing = dividendsOwing(investor);       // MCORE tokens\r\n        if (owing > 0){\r\n            accounts[investor].lastDividentPoints = totalDividentPoints; \r\n        }\r\n        return owing;\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Gives the MCORE_WETH Lp tokens actively staked by the user\r\n    // ------------------------------------------------------------------------\r\n    function activeStake(address _user) external view returns (uint256){\r\n        return accounts[_user].balance;\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Gives the MCORE_WETH Lp tokens staked by the user till the current date\r\n    // ------------------------------------------------------------------------\r\n    function totalStakesTillToday(address _user) external view returns (uint256){\r\n        return accounts[_user].totalStakes;\r\n    }\r\n   \r\n    // ------------------------------------------------------------------------\r\n    // Used to stop the staking and get back MCORE_WETH Lp Tokens\r\n    // ------------------------------------------------------------------------\r\n    function UNSTAKE() external returns (bool){\r\n        require(stakedCoins > 0);   // MCORE_WETH Lp \r\n        require(accounts[msg.sender].balance > 0); // MCORE_WETH Lp \r\n        \r\n        uint256 owing = dividendsOwing(msg.sender); // MCORE tokens\r\n        \r\n        if(owing > 0) { // checks previous pending rewards\r\n            accounts[msg.sender].pending = owing;\r\n        }\r\n        \r\n        stakedCoins = stakedCoins.sub(accounts[msg.sender].balance); // MCORE_WETH Lp \r\n       \r\n        require(IERC20(MCORE_WETH_POOL_ADDRESS).transfer(msg.sender, accounts[msg.sender].balance)); // sends the lp tokens back from the contract to the investor\r\n       \r\n        accounts[msg.sender].balance = 0; // reset the balance of the investor\r\n        \r\n        return true;\r\n    }\r\n    \r\n    // -------------------------------------------------------------------------------\r\n    // Internal function used to disburse the MCORE tokens among all Lp tokens staked\r\n    // -------------------------------------------------------------------------------\r\n    function disburse(uint256 amount) internal{\r\n        uint256 unnormalized = amount.mul(pointMultiplier);\r\n        totalDividentPoints = totalDividentPoints.add(unnormalized.div(stakedCoins)); // stakedCoins is the MCORE_WETH lp tokens\r\n    }\r\n   \r\n    // -------------------------------------------------------------------------------\r\n    // Internal function gives how much MCORE tokens reward is ready to be claimed\r\n    // -------------------------------------------------------------------------------\r\n    function dividendsOwing(address investor) internal view returns (uint256){\r\n        uint256 newDividendPoints = totalDividentPoints.sub(accounts[investor].lastDividentPoints);\r\n        return (((accounts[investor].balance).mul(newDividendPoints)).div(pointMultiplier)).add(accounts[investor].pending);\r\n    }\r\n    \r\n    // -------------------------------------------------------------------------------\r\n    // Used to claim the reward in MCORE tokens \r\n    // -------------------------------------------------------------------------------\r\n    function claimReward() external returns(bool){\r\n        uint256 owing = updateDividend(msg.sender); // MCORE tokens ready to be claimed\r\n\r\n        require(_transfer(msg.sender, owing));\r\n        \r\n        accounts[msg.sender].rewardsClaimed = accounts[msg.sender].rewardsClaimed.add(owing);\r\n       \r\n        totalRewardsClaimed = totalRewardsClaimed.add(owing);\r\n        return true;\r\n    }\r\n    \r\n    function rewardsClaimed(address _user) external view returns(uint256 rewardClaimed){\r\n        return accounts[_user].rewardsClaimed;\r\n    }\r\n   \r\n    /** ERC20Interface function's implementation **/\r\n   \r\n    function totalSupply() public override view returns (uint256){\r\n       return _totalSupply;\r\n    }\r\n   \r\n    // ------------------------------------------------------------------------\r\n    // Get the token balance for account `tokenOwner`\r\n    // ------------------------------------------------------------------------\r\n    function balanceOf(address tokenOwner) public override view returns (uint256 balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer the balance from token owner's account to `to` account\r\n    // - Owner's account must have sufficient balance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transfer(address to, uint256 tokens) public override returns (bool success) {\r\n        // prevent transfer to 0x0, use burn instead\r\n        require(address(to) != address(0));\r\n        require(balances[msg.sender] >= tokens );\r\n        require(balances[to] + tokens >= balances[to]);\r\n        \r\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n       \r\n        uint256 deduction = applyDeductions(to, tokens);\r\n        \r\n        balances[to] = balances[to].add(tokens.sub(deduction));\r\n        emit Transfer(msg.sender, to, tokens.sub(deduction));\r\n        return true;\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Apply 1.5% deduction on every token transfer\r\n    // 0.02% is given to the devs, \r\n    // 0.06% goes to a community fund, \r\n    // and the 1.42% goes to farmers split \r\n    // ------------------------------------------------------------------------\r\n    function applyDeductions(address to, uint256 tokens) private returns(uint256){\r\n        uint256 deduction = 0;\r\n        if(to != uniSwapAddress && to != address(this))\r\n            deduction = findOnePointFivePercent(tokens);\r\n        \r\n        uint256 devsTokens = findZeroPointZeroTwoPercent(deduction);\r\n        balances[devs] = balances[devs].add(devsTokens);\r\n        emit Transfer(address(this), devs, devsTokens);\r\n            \r\n        uint256 communityFundTokens = findZeroPointZeroSixPercent(deduction);\r\n        balances[communityFund] = balances[communityFund].add(communityFundTokens);\r\n        emit Transfer(address(this), communityFund, communityFundTokens);\r\n            \r\n        if(stakedCoins == 0){\r\n            \r\n        }\r\n        else{\r\n            balances[address(this)] = balances[address(this)].add(findOnePointFourTwoPercent(deduction));\r\n            disburse(findOnePointFourTwoPercent(deduction));\r\n        }\r\n        return deduction;\r\n    }\r\n   \r\n    // ------------------------------------------------------------------------\r\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n    // from the token owner's account\r\n    // ------------------------------------------------------------------------\r\n    function approve(address spender, uint256 tokens) public override returns (bool success){\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender,spender,tokens);\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer `tokens` from the `from` account to the `to` account\r\n    //\r\n    // The calling account must already have sufficient tokens approve(...)-d\r\n    // for spending from the `from` account and\r\n    // - From account must have sufficient balance to transfer\r\n    // - Spender must have sufficient allowance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transferFrom(address from, address to, uint256 tokens) public override returns (bool success){\r\n        require(tokens <= allowed[from][msg.sender]); //check allowance\r\n        require(balances[from] >= tokens);\r\n        balances[from] = balances[from].sub(tokens);\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n      \r\n        uint256 deduction = applyDeductions(to, tokens);\r\n       \r\n        balances[to] = balances[to].add(tokens.sub(deduction));\r\n        emit Transfer(from, to, tokens.sub(tokens));\r\n        return true;\r\n    }\r\n\r\n    // no deductions are applied on claim of rewards\r\n    function _transfer(address to, uint256 tokens) internal returns(bool){\r\n        // prevent transfer to 0x0, use burn instead\r\n        require(address(to) != address(0));\r\n        require(balances[address(this)] >= tokens );\r\n        require(balances[to] + tokens >= balances[to]);\r\n        balances[address(this)] = balances[address(this)].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        emit Transfer(address(this),to,tokens);\r\n        return true;\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Returns the amount of tokens approved by the owner that can be\r\n    // transferred to the spender's account\r\n    // ------------------------------------------------------------------------\r\n    function allowance(address tokenOwner, address spender) public override view returns (uint256 remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n    \r\n    /***********************************************UTILITY FUNCTIONS**************************************************************************/\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Calculates 1.5% of the value sent\r\n    // ------------------------------------------------------------------------\r\n    function findOnePointFivePercent(uint256 value) private pure returns (uint256)  {\r\n        uint256 result = onePercent(value);\r\n        result = result.mul(15);\r\n        result = result.div(10);\r\n        return result;\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Calculates 0.02% of the value sent\r\n    // ------------------------------------------------------------------------\r\n    function findZeroPointZeroTwoPercent(uint256 value) private pure returns (uint256) {\r\n        uint256 result = onePercent(value);\r\n        result = result.mul(2);\r\n        result = result.div(100);\r\n        return result;\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Calculates 0.06% of the value sent\r\n    // ------------------------------------------------------------------------\r\n    function findZeroPointZeroSixPercent(uint256 value) private pure returns (uint256) {\r\n        uint256 result = onePercent(value);\r\n        result = result.mul(6);\r\n        result = result.div(100);\r\n        return result;\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Calculates 1.42% of the value sent \r\n    // ------------------------------------------------------------------------\r\n    function findOnePointFourTwoPercent(uint256 value) private pure returns (uint256) {\r\n        uint256 result = onePercent(value);\r\n        result = result.mul(142);\r\n        result = result.div(100);\r\n        return result;\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Calculates onePercent of the uint256 amount sent\r\n    // ------------------------------------------------------------------------\r\n    function onePercent(uint256 _tokens) internal pure returns (uint256){\r\n        uint256 roundValue = _tokens.ceil(100);\r\n        uint onePercentofTokens = roundValue.mul(100).div(100 * 10**uint(2));\r\n        return onePercentofTokens;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"STAKE\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNSTAKE\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"activeStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"MCORE\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"rewardsClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardClaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_MCORE_WETH_POOL_ADDRESS\",\"type\":\"address\"}],\"name\":\"setLpsAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedCoins\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardsClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"totalStakesTillToday\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MetaCore","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7603737fae58bae4cad4c106c9f66fd826241925959b80b05e8b89af38a64213"}]}