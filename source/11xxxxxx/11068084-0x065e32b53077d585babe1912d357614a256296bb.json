{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.9;\r\n\r\n\r\ninterface IRBAC {\r\n  event RoleCreated(uint256 role);\r\n  event BearerAdded(address indexed account, uint256 role);\r\n  event BearerRemoved(address indexed account, uint256 role);\r\n\r\n  function addRootRole(string calldata roleDescription) external returns(uint256);\r\n  function removeBearer(address account, uint256 role) external;\r\n  function addRole(string calldata roleDescription, uint256 admin) external returns(uint256);\r\n  function totalRoles() external view returns(uint256);\r\n  function hasRole(address account, uint256 role) external view returns(bool);\r\n  function addBearer(address account, uint256 role) external;\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n  @title VNXManager\r\n  @author Eugene Rupakov <eugene.rupakov@vnx.io>\r\n  @notice Implements runtime configurable Role Based Access Control, Contract Management.\r\n*/\r\ncontract vnxManager is IRBAC, Ownable {\r\n  /**\r\n   * @dev Throws if called by any account other than the admin\r\n   */\r\n  modifier onlyAdmin() {\r\n    require(isAdmin(), \"RBAC: caller is not the admin\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns true if the caller is the admin role\r\n   */\r\n  function isAdmin() public view returns (bool) {\r\n    return hasRole(msg.sender, 0);\r\n  }\r\n\r\n  function transferContractOwnership(address targetContract, address newOwner) onlyAdmin external returns(bool)\r\n  {\r\n    require(targetContract != address(0), \"Target contract cannot be zero address\");\r\n    require(newOwner != address(0), \"newOwner cannot be zero address\");\r\n\r\n    Ownable c = Ownable(targetContract);\r\n    require(c.owner()!=newOwner, \"New owner should differ from current\");\r\n    c.transferOwnership(newOwner);\r\n\r\n    return true;\r\n  }\r\n\r\n  uint256 constant NO_ROLE = 0;\r\n  /**\r\n   * @notice A role, which will be used to group users.\r\n   * @dev The role id is its position in the roles array.\r\n   * @param description A description for the role.\r\n   * @param admin The only role that can add or remove bearers from\r\n   * this role. To have the role bearers to be also the role admins \r\n   * you should pass roles.length as the admin role.\r\n   * @param bearers Addresses belonging to this role.\r\n   */\r\n  struct Role {\r\n    string description;\r\n    uint256 admin;\r\n    mapping (address => bool) bearers;\r\n  }\r\n  /**\r\n   * @notice All roles ever created.\r\n   */\r\n  Role[] public roles;\r\n  /**\r\n   * @notice The contract constructor, empty as of now.\r\n   */\r\n  constructor() public {\r\n    addRootRole(\"Superadmin\");\r\n  }\r\n  /**\r\n   * @notice Create a new role that has itself as an admin. \r\n   * msg.sender is added as a bearer.\r\n   * @param _roleDescription The description of the role created.\r\n   * @return The role id.\r\n   */\r\n  function addRootRole(string memory _roleDescription)\r\n    public\r\n    returns(uint256)\r\n  {\r\n    uint256 role = addRole(_roleDescription, roles.length);\r\n    roles[role].bearers[msg.sender] = true;\r\n    emit BearerAdded(msg.sender, role);\r\n  }\r\n  /**\r\n   * @notice Create a new role.\r\n   * @param _roleDescription The description of the role created.\r\n   * @param _admin The role that is allowed to add and remove\r\n   * bearers from the role being created.\r\n   * @return The role id.\r\n   */\r\n  function addRole(string memory _roleDescription, uint256 _admin)\r\n    public\r\n    returns(uint256)\r\n  {\r\n    require(_admin <= roles.length, \"Admin role doesn't exist.\");\r\n    uint256 role = roles.push(\r\n      Role({\r\n        description: _roleDescription,\r\n        admin: _admin\r\n      })\r\n    ) - 1;\r\n    emit RoleCreated(role);\r\n    return role;\r\n  }\r\n  /**\r\n   * @notice Retrieve the number of roles in the contract.\r\n   * @dev The zero position in the roles array is reserved for\r\n   * NO_ROLE and doesn't count towards this total.\r\n   */\r\n  function totalRoles()\r\n    external\r\n    view\r\n    returns(uint256)\r\n  {\r\n    return roles.length - 1;\r\n  }\r\n  /**\r\n   * @notice Verify whether an account is a bearer of a role\r\n   * @param _account The account to verify.\r\n   * @param _role The role to look into.\r\n   * @return Whether the account is a bearer of the role.\r\n   */\r\n  function hasRole(address _account, uint256 _role)\r\n    public\r\n    view\r\n    returns(bool)\r\n  {\r\n    return _role < roles.length && roles[_role].bearers[_account];\r\n  }\r\n  /**\r\n   * @notice A method to add a bearer to a role\r\n   * @param _account The account to add as a bearer.\r\n   * @param _role The role to add the bearer to.\r\n   */\r\n  function addBearer(address _account, uint256 _role)\r\n    external\r\n  {\r\n    require(\r\n      _role < roles.length,\r\n      \"Role doesn't exist.\"\r\n    );\r\n    require(\r\n      hasRole(msg.sender, roles[_role].admin),\r\n      \"User can't add bearers.\"\r\n    );\r\n    require(\r\n      !hasRole(_account, _role),\r\n      \"Account is bearer of role.\"\r\n    );\r\n    roles[_role].bearers[_account] = true;\r\n    emit BearerAdded(_account, _role);\r\n  }\r\n  /**\r\n   * @notice A method to remove a bearer from a role\r\n   * @param _account The account to remove as a bearer.\r\n   * @param _role The role to remove the bearer from.\r\n   */\r\n  function removeBearer(address _account, uint256 _role)\r\n    external\r\n  {\r\n    require(\r\n      _role < roles.length,\r\n      \"Role doesn't exist.\"\r\n    );\r\n    require(\r\n      hasRole(msg.sender, roles[_role].admin),\r\n      \"User can't remove bearers.\"\r\n    );\r\n    require(\r\n      hasRole(_account, _role),\r\n      \"Account is not bearer of role.\"\r\n    );\r\n\r\n    delete roles[_role].bearers[_account];\r\n    emit BearerRemoved(_account, _role);\r\n  }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"}],\"name\":\"BearerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"}],\"name\":\"BearerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"}],\"name\":\"RoleCreated\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_role\",\"type\":\"uint256\"}],\"name\":\"addBearer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_roleDescription\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_admin\",\"type\":\"uint256\"}],\"name\":\"addRole\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_roleDescription\",\"type\":\"string\"}],\"name\":\"addRootRole\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_role\",\"type\":\"uint256\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_role\",\"type\":\"uint256\"}],\"name\":\"removeBearer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roles\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"admin\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRoles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"targetContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferContractOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"vnxManager","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"istanbul","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"bzzr://d929c177a56f545851761fda3954181d30aa68c3ef5825a77ce76b4e2bf80bdf"}]}