{"status":"1","message":"OK","result":[{"SourceCode":"// File: node_modules\\@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: node_modules\\@openzeppelin\\contracts\\math\\SafeMath.sol\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: node_modules\\@openzeppelin\\contracts\\utils\\Address.sol\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\token\\ERC20\\SafeERC20.sol\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File: node_modules\\@openzeppelin\\contracts\\GSN\\Context.sol\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: node_modules\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\token\\ERC20\\ERC20Burnable.sol\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\r\n * tokens and those that they have an allowance for, in a way that can be\r\n * recognized off-chain (via event analysis).\r\n */\r\nabstract contract ERC20Burnable is Context, ERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from the caller.\r\n     *\r\n     * See {ERC20-_burn}.\r\n     */\r\n    function burn(uint256 amount) public virtual {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\r\n     * allowance.\r\n     *\r\n     * See {ERC20-_burn} and {ERC20-allowance}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have allowance for ``accounts``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function burnFrom(address account, uint256 amount) public virtual {\r\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \"ERC20: burn amount exceeds allowance\");\r\n\r\n        _approve(account, _msgSender(), decreasedAllowance);\r\n        _burn(account, amount);\r\n    }\r\n}\r\n\r\n// File: contracts\\ENERGY.sol\r\n\r\npragma solidity 0.7.6;\r\n\r\n\r\n\r\n\r\ncontract ENERGY is ERC20Burnable {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 public constant initialSupply = 89099136 * 10 ** 3;\r\n  uint256 public lastWeekTime;\r\n  uint256 public weekCount;\r\n  //staking start when week count set to 1 -> rewards calculated before just updating week\r\n  uint256 public constant totalWeeks = 100;\r\n  address public stakingContrAddr;\r\n  address public liquidityContrAddr;\r\n  uint256 public constant timeStep = 1 weeks;\r\n  \r\n  modifier onlyStaking() {\r\n    require(_msgSender() == stakingContrAddr, \"Not staking contract\");\r\n    _;\r\n  }\r\n\r\n  constructor (address _liquidityContrAddr) ERC20(\"ENERGY\", \"NRGY\") {\r\n    //89099.136 coins\r\n    _setupDecimals(6);\r\n    lastWeekTime = block.timestamp;\r\n    liquidityContrAddr = _liquidityContrAddr;\r\n    _mint(_msgSender(), initialSupply.mul(4).div(10)); //40%\r\n    _mint(liquidityContrAddr, initialSupply.mul(6).div(10)); //60%\r\n  }\r\n\r\n  function mintNewCoins(uint256[3] memory lastWeekRewards) public onlyStaking returns(bool) {\r\n    if(weekCount >= 1) {\r\n        uint256 newMint = lastWeekRewards[0].add(lastWeekRewards[1]).add(lastWeekRewards[2]);\r\n        uint256 liquidityMint = (newMint.mul(20)).div(100);\r\n        _mint(liquidityContrAddr, liquidityMint);\r\n        _mint(stakingContrAddr, newMint);\r\n    } else {\r\n        _mint(liquidityContrAddr, initialSupply);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  //updates only at end of week\r\n  function updateWeek() public onlyStaking {\r\n    weekCount++;\r\n    lastWeekTime = block.timestamp;\r\n  }\r\n\r\n  function updateStakingContract(address _stakingContrAddr) public {\r\n    require(stakingContrAddr == address(0), \"Staking contract is already set\");\r\n    stakingContrAddr = _stakingContrAddr;\r\n  }\r\n\r\n  function burnOnUnstake(address account, uint256 amount) public onlyStaking {\r\n      _burn(account, amount);\r\n  }\r\n\r\n  function getLastWeekUpdateTime() public view returns(uint256) {\r\n    return lastWeekTime;\r\n  }\r\n\r\n  function isMintingCompleted() public view returns(bool) {\r\n    if(weekCount > totalWeeks) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  function isGreaterThanAWeek() public view returns(bool) {\r\n    if(block.timestamp > getLastWeekUpdateTime().add(timeStep)) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\n// File: contracts\\NRGYMarketMaker.sol\r\n\r\npragma solidity 0.7.6;\r\n\r\n\r\n\r\ncontract NRGYMarketMaker  {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n    \r\n    struct UserData {\r\n        address user;\r\n        bool isActive;\r\n        uint256 rewards;\r\n        uint256 feeRewards;\r\n        uint256 depositTime;\r\n        uint256 share;\r\n        //update when user came first time or after unstaking to stake\r\n        uint256 startedWeek;\r\n        //update everytime whenever user comes to unstake\r\n        uint256 endedWeek;\r\n        mapping(uint256 => uint256) shareByWeekNo;\r\n    }\r\n    \r\n    struct FeeRewardData {\r\n        uint256 value;\r\n        uint256 timeStamp;\r\n        uint256 totalStakersAtThatTime;\r\n        uint256 weekGiven;\r\n        mapping(address => bool) isClaimed;\r\n    }\r\n\r\n    ENERGY public energy;\r\n    IERC20 public lpToken;\r\n    uint256 public totalShares;\r\n    //initially it will be 27000\r\n    uint256[] public stakingLimit;\r\n    uint256 public constant minStakeForFeeRewards = 25 * 10 ** 6;\r\n    uint256 public totalRewards;\r\n    uint256 public totalFeeRewards;\r\n    uint256 public rewardsAvailableInContract;\r\n    uint256 public feeRewardsAvailableInContract;\r\n    uint256 public feeRewardsCount;\r\n    uint256 public totalStakeUsers;\r\n    uint256 public constant percentageDivider = 100;\r\n    //10%, 30%, 60%\r\n    uint256[3] private rewardPercentages = [10, 30, 60];\r\n    //7.5%\r\n    uint256 public constant unstakeFees = 75;\r\n    //total weeks\r\n    uint256 public totalWeeks;\r\n    \r\n    //user informations\r\n    mapping(uint256 => address) public userList;\r\n    mapping(address => UserData) public userInfo;\r\n    mapping (address => bool) public smartContractStakers;\r\n    \r\n    //contract info\r\n    mapping(uint256 => uint256) private stakePerWeek;\r\n    mapping(uint256 => uint256) private totalSharesByWeek;\r\n    mapping(uint256 => uint256[3]) private rewardByWeek;\r\n    mapping(uint256 => FeeRewardData) private feeRewardData;\r\n\r\n    event Staked(address indexed _user, uint256 _amountStaked, uint256 _balanceOf);\r\n    event Withdrawn(address indexed _user,\r\n                    uint256 _amountTransferred,\r\n                    uint256 _amountUnstaked,\r\n                    uint256 _shareDeducted,\r\n                    uint256 _rewardsDeducted,\r\n                    uint256 _feeRewardsDeducted);\r\n    event RewardDistributed(uint256 _weekNo, uint256[3] _lastWeekRewards);\r\n    event FeeRewardDistributed(uint256 _amount, uint256 _totalFeeRewards);\r\n\r\n    constructor(address _energy) {\r\n        energy = ENERGY(_energy);\r\n        lpToken = IERC20(_energy);\r\n        totalWeeks = energy.totalWeeks();\r\n        stakingLimit.push(27000 * 10 ** 6);\r\n    }\r\n\r\n    // stake the coins\r\n    function stake(uint256 amount) public {\r\n        _stake(amount, tx.origin);\r\n    }\r\n    \r\n    function stakeOnBehalf(uint256 amount, address _who) public {\r\n        _stake(amount, _who);\r\n    }\r\n\r\n    function _stake(uint256 _amount, address _who) internal {\r\n        uint256 _weekCount = energy.weekCount();\r\n        bool isWeekOver = energy.isGreaterThanAWeek();\r\n\r\n        if((_weekCount >= 1 && !isWeekOver) || _weekCount == 0) {\r\n            require(!isStakingLimitReached(_amount, _weekCount), \"Stake limit has been reached\");\r\n        }\r\n\r\n        //if week over or week is 0\r\n        if(!isWeekOver || _weekCount == 0) {\r\n            //add current week stake\r\n            stakePerWeek[_weekCount] = getStakeByWeekNo(_weekCount).add(_amount);\r\n            // update current week cumulative stake\r\n            //store total shares by week no at time of stake\r\n            totalSharesByWeek[_weekCount] = totalShares.add(_amount);\r\n            userInfo[_who].shareByWeekNo[_weekCount] = getUserShareByWeekNo(_who, _weekCount).add(_amount);\r\n\r\n            //if current week share is 0 get share for previous week\r\n            if(_weekCount == 0) {\r\n                if(stakingLimit[0] == totalShares.add(_amount)) {\r\n                    setStakingLimit(_weekCount, stakingLimit[0]);\r\n                    energy.mintNewCoins(getRewardsByWeekNo(0));\r\n                    energy.updateWeek();\r\n                }\r\n            }\r\n        } else/*is week is greater than 1 and is over */ {\r\n            //update this week shae by adding previous week share\r\n            userInfo[_who].shareByWeekNo[_weekCount.add(1)] = getUserShareByWeekNo(_who, _weekCount).add(_amount);\r\n            //update next week stake\r\n            stakePerWeek[_weekCount.add(1)] = getStakeByWeekNo(_weekCount.add(1)).add(_amount);\r\n            //update next week cumulative stake\r\n            //store total shares of next week no at time of stake\r\n            totalSharesByWeek[_weekCount.add(1)] = totalShares.add(_amount);\r\n            setStakingLimit(_weekCount, totalShares);\r\n            energy.updateWeek();\r\n            //if week over update followings and greater than 1\r\n            /*give rewards only after week end and till 3 more weeks of total weeks */\r\n            if(_weekCount <= totalWeeks.add(3)) {\r\n                //store rewards generated that week by week no at end of week\r\n                //eg: when week 1 is over, it will store rewards generated that week before week changed from 1 to 2\r\n                setRewards(_weekCount);\r\n                uint256 rewardDistributed = (rewardByWeek[_weekCount][0])\r\n                                .add(rewardByWeek[_weekCount][1])\r\n                                .add(rewardByWeek[_weekCount][2]);\r\n                totalRewards = totalRewards.add(rewardDistributed);\r\n                energy.mintNewCoins(getRewardsByWeekNo(_weekCount));\r\n                rewardsAvailableInContract = rewardsAvailableInContract.add(rewardDistributed);\r\n                emit RewardDistributed(_weekCount, getRewardsByWeekNo(_weekCount));\r\n            }\r\n        }\r\n        \r\n        //if user not active, set current week as his start week\r\n        if(!getUserStatus(_who)) {\r\n            userInfo[_who].isActive = true;\r\n            if(getUserShare(_who) < minStakeForFeeRewards) {\r\n                userInfo[_who].startedWeek = _weekCount;\r\n                userInfo[_who].depositTime = block.timestamp;\r\n            }\r\n        }\r\n        \r\n        if(!isUserPreviouslyStaked(_who)) {\r\n            userList[totalStakeUsers] = _who;\r\n            totalStakeUsers++;\r\n            smartContractStakers[_who] = true;\r\n            userInfo[_who].user = _who;\r\n        }\r\n        \r\n        userInfo[_who].share = userInfo[_who].share.add(_amount);\r\n        //update total shares in the end\r\n        totalShares = totalShares.add(_amount);\r\n        \r\n        //if-> user is directly staking\r\n        if(msg.sender == tx.origin) {\r\n            // now we can issue shares\r\n            lpToken.safeTransferFrom(_who, address(this), _amount);\r\n        } else /*through liquity contract */ {\r\n            // now we can issue shares\r\n            //transfer from liquidty contract\r\n            lpToken.safeTransferFrom(msg.sender, address(this), _amount);\r\n        }\r\n        emit Staked(_who, _amount, claimedBalanceOf(_who));\r\n    }\r\n    \r\n    function setStakingLimit(uint256 _weekCount, uint256 _share) internal {\r\n        uint256 lastWeekStakingLeft = stakingLimit[_weekCount].sub(getStakeByWeekNo(_weekCount));\r\n        // first 4 weeks are: 0,1,2,3\r\n        if(_weekCount <= 3) {\r\n            //32%\r\n            stakingLimit.push((_share.mul(32)).div(percentageDivider));\r\n        }\r\n        if(_weekCount > 3) {\r\n            //0.04%\r\n            stakingLimit.push((_share.mul(4)).div(percentageDivider));\r\n        }\r\n        stakingLimit[_weekCount.add(1)] = stakingLimit[_weekCount.add(1)].add(lastWeekStakingLeft);\r\n    }\r\n    \r\n    function setRewards(uint256 _weekCount) internal {\r\n        (rewardByWeek[_weekCount][0],\r\n        rewardByWeek[_weekCount][1],\r\n        rewardByWeek[_weekCount][2]) = calculateRewardsByWeekCount(_weekCount);\r\n    }\r\n    \r\n    function calculateRewards() public view returns(uint256 _lastWeekReward, uint256 _secondLastWeekReward, uint256 _thirdLastWeekReward) {\r\n        return calculateRewardsByWeekCount(energy.weekCount());\r\n    }\r\n    \r\n    function calculateRewardsByWeekCount(uint256 _weekCount) public view returns(uint256 _lastWeekReward, uint256 _secondLastWeekReward, uint256 _thirdLastWeekReward) {\r\n        bool isLastWeek = (_weekCount >= totalWeeks);\r\n        if(isLastWeek) {\r\n            if(_weekCount.sub(totalWeeks) == 0) {\r\n                _lastWeekReward = (getStakeByWeekNo(_weekCount).mul(rewardPercentages[0])).div(percentageDivider);\r\n                _secondLastWeekReward = (getStakeByWeekNo(_weekCount.sub(1)).mul(rewardPercentages[1])).div(percentageDivider);\r\n                _thirdLastWeekReward = (getStakeByWeekNo(_weekCount.sub(2)).mul(rewardPercentages[2])).div(percentageDivider);\r\n            } else if(_weekCount.sub(totalWeeks) == 1) {\r\n                _secondLastWeekReward = (getStakeByWeekNo(_weekCount.sub(1)).mul(rewardPercentages[1])).div(percentageDivider);\r\n                _thirdLastWeekReward = (getStakeByWeekNo(_weekCount.sub(2)).mul(rewardPercentages[2])).div(percentageDivider);\r\n            } else if(_weekCount.sub(totalWeeks) == 2) {\r\n                _thirdLastWeekReward = (getStakeByWeekNo(_weekCount.sub(2)).mul(rewardPercentages[2])).div(percentageDivider);\r\n            }\r\n        } else {\r\n            if(_weekCount == 1) {\r\n                _lastWeekReward = (getStakeByWeekNo(_weekCount).mul(rewardPercentages[0])).div(percentageDivider);\r\n            } else if(_weekCount == 2) {\r\n                _lastWeekReward = (getStakeByWeekNo(_weekCount).mul(rewardPercentages[0])).div(percentageDivider);\r\n                _secondLastWeekReward = (getStakeByWeekNo(_weekCount.sub(1)).mul(rewardPercentages[1])).div(percentageDivider);\r\n            } else if(_weekCount >= 3) {\r\n                _lastWeekReward = (getStakeByWeekNo(_weekCount).mul(rewardPercentages[0])).div(percentageDivider);\r\n                _secondLastWeekReward = (getStakeByWeekNo(_weekCount.sub(1)).mul(rewardPercentages[1])).div(percentageDivider);\r\n                _thirdLastWeekReward = (getStakeByWeekNo(_weekCount.sub(2)).mul(rewardPercentages[2])).div(percentageDivider);\r\n            }\r\n        }\r\n    }\r\n    function isStakingLimitReached(uint256 _amount, uint256 _weekCount) public view returns(bool) {\r\n        return (getStakeByWeekNo(_weekCount).add(_amount) > stakingLimit[_weekCount]);\r\n    }\r\n\r\n    function remainingStakingLimit(uint256 _weekCount) public view returns(uint256) {\r\n        return (stakingLimit[_weekCount].sub(getStakeByWeekNo(_weekCount)));\r\n    }\r\n\r\n    function distributeFees(uint256 _amount) public {\r\n        uint256 _weekCount = energy.weekCount();\r\n        FeeRewardData storage _feeRewardData = feeRewardData[feeRewardsCount];\r\n        _feeRewardData.value = _amount;\r\n        _feeRewardData.timeStamp = block.timestamp;\r\n        _feeRewardData.totalStakersAtThatTime = totalStakeUsers;\r\n        _feeRewardData.weekGiven = _weekCount;\r\n        feeRewardsCount++;\r\n        totalFeeRewards = totalFeeRewards.add(_amount);\r\n        feeRewardsAvailableInContract = feeRewardsAvailableInContract.add(_amount);\r\n        lpToken.safeTransferFrom(msg.sender, address(this), _amount);\r\n        emit FeeRewardDistributed(_amount, totalFeeRewards);\r\n    }\r\n\r\n    ///unstake the coins\r\n    function unstake(uint256 _amount) public {\r\n        UserData storage _user = userInfo[msg.sender];\r\n        uint256 _weekCount = energy.weekCount();\r\n        //get user rewards till date(week) and add to claimed rewards\r\n        userInfo[msg.sender].rewards = _user.rewards\r\n                                        .add(getUserRewardsByWeekNo(msg.sender, _weekCount));\r\n        //get user fee rewards till date(week) and add to claimed fee rewards\r\n        userInfo[msg.sender].feeRewards = _user.feeRewards.add(_calculateFeeRewards(msg.sender));\r\n        require(_amount <= claimedBalanceOf(msg.sender), \"Unstake amount is greater than user balance\");\r\n        //calculate unstake fee\r\n        uint256 _fees = (_amount.mul(unstakeFees)).div(1000);\r\n        //calulcate amount to transfer to user\r\n        uint256 _toTransfer = _amount.sub(_fees);\r\n        //burn unstake fees\r\n        energy.burnOnUnstake(address(this), _fees);\r\n        lpToken.safeTransfer(msg.sender, _toTransfer);\r\n        //if amount can be paid from rewards\r\n        if(_amount <= getUserTotalRewards(msg.sender)) {\r\n            //if amount can be paid from rewards\r\n            if(_user.rewards >= _amount) {\r\n                _user.rewards = _user.rewards.sub(_amount);\r\n                rewardsAvailableInContract = rewardsAvailableInContract.sub(_amount);\r\n                emit Withdrawn(msg.sender, _toTransfer, _amount, 0, _amount, 0);\r\n            } else/*else take sum of fee rewards and rewards */ {\r\n                //get remaining amount less than rewards\r\n                uint256 remAmount = _amount.sub(_user.rewards);\r\n                rewardsAvailableInContract = rewardsAvailableInContract.sub(_user.rewards);\r\n                feeRewardsAvailableInContract = feeRewardsAvailableInContract.sub(remAmount);\r\n                emit Withdrawn(msg.sender, _toTransfer, _amount, 0, _user.rewards, remAmount);\r\n                //update fee rewards from remaining amount\r\n                _user.rewards = 0;\r\n                _user.feeRewards = _user.feeRewards.sub(remAmount);\r\n            }\r\n        } else/* take from total shares*/ {\r\n            //get remaining amount less than rewards\r\n            uint256 remAmount = _amount.sub(getUserTotalRewards(msg.sender));\r\n            rewardsAvailableInContract = rewardsAvailableInContract.sub(_user.rewards);\r\n            feeRewardsAvailableInContract = feeRewardsAvailableInContract.sub(_user.feeRewards);\r\n            emit Withdrawn(msg.sender, _toTransfer, _amount, remAmount, _user.rewards, _user.feeRewards);\r\n            _user.rewards = 0;\r\n            _user.feeRewards = 0;\r\n            //update user share from remaining amount\r\n            _user.share = _user.share.sub(remAmount);\r\n            //update total shares\r\n            totalShares = totalShares.sub(remAmount);\r\n            //update total shares by week no at time of unstake\r\n            totalSharesByWeek[_weekCount] = totalSharesByWeek[_weekCount].sub(remAmount);\r\n        }\r\n        lpToken.safeApprove(address(this), 0);\r\n        //set user status to false\r\n        _user.isActive = false;\r\n        //update user end(unstake) week\r\n        _user.endedWeek = _weekCount == 0 ? _weekCount : _weekCount.sub(1);\r\n    }\r\n    \r\n    function _calculateFeeRewards(address _who) internal returns(uint256) {\r\n        uint256 _accumulatedRewards;\r\n        //check if user have minimum share too claim fee rewards\r\n        if(getUserShare(_who) >= minStakeForFeeRewards) {\r\n            //loop through all the rewards\r\n            for(uint256 i = 0; i < feeRewardsCount; i++) {\r\n                //if rewards week and timestamp is greater than user deposit time and rewards. \r\n                //Also only if user has not claimed particular fee rewards\r\n                if(getUserStartedWeek(_who) <= feeRewardData[i].weekGiven\r\n                    && getUserLastDepositTime(_who) < feeRewardData[i].timeStamp \r\n                    && !feeRewardData[i].isClaimed[_who]) {\r\n                    _accumulatedRewards = _accumulatedRewards.add(feeRewardData[i].value.div(feeRewardData[i].totalStakersAtThatTime));\r\n                    feeRewardData[i].isClaimed[_who] = true;\r\n                }\r\n            }\r\n        }\r\n        return _accumulatedRewards;\r\n    }\r\n\r\n    /*\r\n    *   ------------------Getter inteface for user---------------------\r\n    *\r\n    */\r\n    \r\n    function getUserUnclaimedFeesRewards(address _who) public view returns(uint256) {\r\n        uint256 _accumulatedRewards;\r\n        //check if user have minimum share too claim fee rewards\r\n        if(getUserShare(_who) >= minStakeForFeeRewards) {\r\n            //loop through all the rewards\r\n            for(uint256 i = 0; i < feeRewardsCount; i++) {\r\n                //if rewards week and timestamp is greater than user deposit time and rewards. \r\n                //Also only if user has not claimed particular fee rewards\r\n                if(getUserStartedWeek(_who) <= feeRewardData[i].weekGiven\r\n                    && getUserLastDepositTime(_who) < feeRewardData[i].timeStamp \r\n                    && !feeRewardData[i].isClaimed[_who]) {\r\n                    _accumulatedRewards = _accumulatedRewards.add(feeRewardData[i].value.div(feeRewardData[i].totalStakersAtThatTime));\r\n                }\r\n            }\r\n        }\r\n        return _accumulatedRewards;\r\n    }\r\n    \r\n    //return rewards till weekcount passed\r\n    function getUserCurrentRewards(address _who) public view returns(uint256) {\r\n        uint256 _weekCount = energy.weekCount();\r\n        uint256[3] memory thisWeekReward;\r\n        (thisWeekReward[0],\r\n        thisWeekReward[1],\r\n        thisWeekReward[2]) = calculateRewardsByWeekCount(_weekCount);\r\n        uint256 userShareAtThatWeek = getUserPercentageShareByWeekNo(_who, _weekCount);\r\n        return getUserRewardsByWeekNo(_who, _weekCount)\r\n                .add(_calculateRewardByUserShare(thisWeekReward, userShareAtThatWeek))\r\n                .add(getUserRewards(_who));\r\n    }\r\n    \r\n    //return rewards till one week less than the weekcount passed\r\n    //calculate rewards till previous week and deduct rewards claimed at time of unstake\r\n    //return rewards available to claim\r\n    function getUserRewardsByWeekNo(address _who, uint256 _weekCount) public view returns(uint256) {\r\n        uint256 rewardsAccumulated;\r\n        uint256 userEndWeek = getUserEndedWeek(_who);\r\n        //clculate rewards only if user is active or user share is greater than 1\r\n        if(getUserStatus(_who) || (getUserShare(_who) > 0)) {\r\n            for(uint256 i = userEndWeek.add(1); i < _weekCount; i++) {\r\n                uint256 userShareAtThatWeek = getUserPercentageShareByWeekNo(_who, i);\r\n                rewardsAccumulated = rewardsAccumulated.add(_calculateRewardByUserShare(getRewardsByWeekNo(i), userShareAtThatWeek));\r\n            }\r\n        }\r\n        return rewardsAccumulated;\r\n    }\r\n    \r\n    function _calculateRewardByUserShare(uint256[3] memory rewardAtThatWeek, uint256 userShareAtThatWeek) internal pure returns(uint256) {\r\n        return (((rewardAtThatWeek[0]\r\n                    .add(rewardAtThatWeek[1])\r\n                    .add(rewardAtThatWeek[2]))\r\n                    .mul(userShareAtThatWeek))\r\n                    .div(percentageDivider.mul(percentageDivider)));\r\n    }\r\n\r\n    function getUserPercentageShareByWeekNo(address _who, uint256 _weekCount) public view returns(uint256) {\r\n        return _getUserPercentageShareByValue(getSharesByWeekNo(_weekCount), getUserShareByWeekNo(_who, _weekCount));\r\n    }\r\n\r\n    function _getUserPercentageShareByValue(uint256 _totalShares, uint256 _userShare) internal pure returns(uint256) {\r\n        if(_totalShares == 0 || _userShare == 0) {\r\n            return 0;\r\n        } else {\r\n            //two times percentageDivider multiplied because of decimal percentage which are less than 1\r\n            return (_userShare.mul(percentageDivider.mul(percentageDivider))).div(_totalShares);\r\n        }\r\n    }\r\n\r\n    //give sum of share(staked amount) + rewards is user have a claimed it through unstaking\r\n    function claimedBalanceOf(address _who) public view returns(uint256) {\r\n        return getUserShare(_who).add(getUserRewards(_who)).add(getUserFeeRewards(_who));\r\n    }\r\n    \r\n    function getUserRewards(address _who) public view returns(uint256) {\r\n        return userInfo[_who].rewards;\r\n    }\r\n\r\n    function getUserFeeRewards(address _who) public view returns(uint256) {\r\n        return userInfo[_who].feeRewards;\r\n    }\r\n    \r\n    function getUserTotalRewards(address _who) public view returns(uint256) {\r\n        return userInfo[_who].feeRewards.add(userInfo[_who].rewards);\r\n    }\r\n\r\n    function getUserShare(address _who) public view returns(uint256) {\r\n        return userInfo[_who].share;\r\n    }\r\n    \r\n    function getUserShareByWeekNo(address _who, uint256 _weekCount) public view returns(uint256) {\r\n        if(getUserStatus(_who)) {\r\n            return (_userShareByWeekNo(_who, _weekCount) > 0 || _weekCount == 0)\r\n                    ? _userShareByWeekNo(_who, _weekCount)\r\n                    : getUserShareByWeekNo(_who, _weekCount.sub(1));\r\n        } else if(getUserShare(_who) > 0) {\r\n            return getUserShare(_who);            \r\n        }\r\n        return 0;\r\n    }\r\n    \r\n    function _userShareByWeekNo(address _who, uint256 _weekCount) internal view returns(uint256) {\r\n        return userInfo[_who].shareByWeekNo[_weekCount];\r\n    }\r\n\r\n    function getUserStatus(address _who) public view returns(bool) {\r\n        return userInfo[_who].isActive;\r\n    }\r\n    \r\n    function getUserStartedWeek(address _who) public view returns(uint256) {\r\n        return userInfo[_who].startedWeek;\r\n    }\r\n    \r\n    function getUserEndedWeek(address _who) public view returns(uint256) {\r\n        return userInfo[_who].endedWeek;\r\n    }\r\n    \r\n    function getUserLastDepositTime(address _who) public view returns(uint256) {\r\n        return userInfo[_who].depositTime;\r\n    }\r\n\r\n    function isUserPreviouslyStaked(address _who) public view returns(bool) {\r\n        return smartContractStakers[_who];\r\n    }\r\n    \r\n    function getUserFeeRewardClaimStatus(address _who, uint256 _index) public view returns(bool) {\r\n        return feeRewardData[_index].isClaimed[_who];\r\n    }\r\n    \r\n    /*\r\n    *   ------------------Getter inteface for contract---------------------\r\n    *\r\n    */\r\n    \r\n    function getRewardsByWeekNo(uint256 _weekCount) public view returns(uint256[3] memory) {\r\n        return rewardByWeek[_weekCount];\r\n    }\r\n    \r\n    function getFeeRewardsByIndex(uint256 _index) public view returns(uint256, uint256, uint256, uint256) {\r\n        return (feeRewardData[_index].value,\r\n                feeRewardData[_index].timeStamp,\r\n                feeRewardData[_index].totalStakersAtThatTime,\r\n                feeRewardData[_index].weekGiven);\r\n    }\r\n    \r\n    function getRewardPercentages() public view returns(uint256[3] memory) {\r\n        return rewardPercentages;\r\n    }\r\n    \r\n    function getStakeByWeekNo(uint256 _weekCount) public view returns(uint256) {\r\n        return stakePerWeek[_weekCount];\r\n    }\r\n    \r\n    function getSharesByWeekNo(uint256 _weekCount) public view returns(uint256) {\r\n        return totalSharesByWeek[_weekCount];\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_energy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalFeeRewards\",\"type\":\"uint256\"}],\"name\":\"FeeRewardDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_weekNo\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[3]\",\"name\":\"_lastWeekRewards\",\"type\":\"uint256[3]\"}],\"name\":\"RewardDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountStaked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_balanceOf\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountTransferred\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountUnstaked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_shareDeducted\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rewardsDeducted\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_feeRewardsDeducted\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"calculateRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_lastWeekReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_secondLastWeekReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_thirdLastWeekReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_weekCount\",\"type\":\"uint256\"}],\"name\":\"calculateRewardsByWeekCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_lastWeekReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_secondLastWeekReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_thirdLastWeekReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"claimedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"distributeFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"energy\",\"outputs\":[{\"internalType\":\"contract ENERGY\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRewardsAvailableInContract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRewardsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getFeeRewardsByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardPercentages\",\"outputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"\",\"type\":\"uint256[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_weekCount\",\"type\":\"uint256\"}],\"name\":\"getRewardsByWeekNo\",\"outputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"\",\"type\":\"uint256[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_weekCount\",\"type\":\"uint256\"}],\"name\":\"getSharesByWeekNo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_weekCount\",\"type\":\"uint256\"}],\"name\":\"getStakeByWeekNo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"getUserCurrentRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"getUserEndedWeek\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getUserFeeRewardClaimStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"getUserFeeRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"getUserLastDepositTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_weekCount\",\"type\":\"uint256\"}],\"name\":\"getUserPercentageShareByWeekNo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"getUserRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_weekCount\",\"type\":\"uint256\"}],\"name\":\"getUserRewardsByWeekNo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"getUserShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_weekCount\",\"type\":\"uint256\"}],\"name\":\"getUserShareByWeekNo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"getUserStartedWeek\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"getUserStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"getUserTotalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"getUserUnclaimedFeesRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_weekCount\",\"type\":\"uint256\"}],\"name\":\"isStakingLimitReached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"isUserPreviouslyStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minStakeForFeeRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentageDivider\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_weekCount\",\"type\":\"uint256\"}],\"name\":\"remainingStakingLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsAvailableInContract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"smartContractStakers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"stakeOnBehalf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakingLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFeeRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakeUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWeeks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakeFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startedWeek\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endedWeek\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"NRGYMarketMaker","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000c29acac647c63dbd8618e817d41ea9de69174ae1","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://5c7d11244b586f904ef8a4429b496b18d6f7d559b1350314714e49d102570fcf"}]}