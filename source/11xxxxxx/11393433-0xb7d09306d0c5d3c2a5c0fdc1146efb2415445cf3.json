{"status":"1","message":"OK","result":[{"SourceCode":"{\"AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./EnumerableSet.sol\\\";\\nimport \\\"./Address.sol\\\";\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role\\u0027s admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 =\\u003e RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``\\u0027s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role\\u0027s admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``\\u0027s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``\\u0027s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function\\u0027s\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn\\u0027t perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``\\u0027s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"},\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size \\u003e 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length \\u003e 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"},\"EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 =\\u003e uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value\\u0027s index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as \\u0027swap and pop\\u0027).\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an \\u0027if\\u0027 statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length \\u003e index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"},\"Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\ncontract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!_paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(_paused, \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"},\"PRUF_INTERFACES.sol\":{\"content\":\"/*--------------------------------------------------------PRuF0.7.1\\n__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ _____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ _______/\\\\\\\\./\\\\\\\\ ___/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n _\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\ _/\\\\\\\\\\\\///////\\\\\\\\\\\\ ____\\\\//..\\\\//____\\\\/\\\\\\\\\\\\///////////__\\n  _\\\\/\\\\\\\\\\\\.......\\\\/\\\\\\\\\\\\.\\\\/\\\\\\\\\\\\.....\\\\/\\\\\\\\\\\\ ________________\\\\/\\\\\\\\\\\\ ____________\\n   _\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/_____/\\\\\\\\\\\\____/\\\\\\\\\\\\.\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ ____\\n    _\\\\/\\\\\\\\\\\\/////////____\\\\/\\\\\\\\\\\\//////\\\\\\\\\\\\ ___\\\\/\\\\\\\\\\\\___\\\\/\\\\\\\\\\\\.\\\\/\\\\\\\\\\\\///////______\\n     _\\\\/\\\\\\\\\\\\ ____________\\\\/\\\\\\\\\\\\ ___\\\\//\\\\\\\\\\\\ __\\\\/\\\\\\\\\\\\___\\\\/\\\\\\\\\\\\.\\\\/\\\\\\\\\\\\ ____________\\n      _\\\\/\\\\\\\\\\\\ ____________\\\\/\\\\\\\\\\\\ ____\\\\//\\\\\\\\\\\\ _\\\\/\\\\\\\\\\\\___\\\\/\\\\\\\\\\\\.\\\\/\\\\\\\\\\\\ ____________\\n       _\\\\/\\\\\\\\\\\\ ____________\\\\/\\\\\\\\\\\\ _____\\\\//\\\\\\\\\\\\.\\\\//\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ _\\\\/\\\\\\\\\\\\ ____________\\n        _\\\\/// _____________\\\\/// _______\\\\/// __\\\\///////// __\\\\/// _____________\\n         *-------------------------------------------------------------------*/\\n\\n/*-----------------------------------------------------------------\\n *  TO DO\\n *\\n *---------------------------------------------------------------*/\\n\\n// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.6.7;\\n\\n/*\\n * @dev Interface for UTIL_TKN\\n * INHERIANCE:\\n    import \\\"./AccessControl.sol\\\";\\n    import \\\"./ERC20.sol\\\";\\n    import \\\"./ERC20Burnable.sol\\\";\\n    import \\\"./ERC20Pausable.sol\\\";\\n    import \\\"./ERC20Snapshot.sol\\\";\\n */\\ninterface UTIL_TKN_Interface {\\n\\n    /*\\n     * @dev PERMENANTLY !!!  Kill trusted agent and payable\\n     */\\n    function killTrustedAgent(uint256 _key) external;\\n\\n    /*\\n     * @dev Set calling wallet to a \\\"cold Wallet\\\" that cannot be manipulated by TRUSTED_AGENT or PAYABLE permissioned functions\\n     */\\n    function setColdWallet() external;\\n\\n    /*\\n     * @dev un-set calling wallet to a \\\"cold Wallet\\\", enabling manipulation by TRUSTED_AGENT and PAYABLE permissioned functions\\n     */\\n    function unSetColdWallet() external;\\n\\n    /*\\n     * @dev return an adresses \\\"cold wallet\\\" status\\n     */\\n    function isColdWallet (address _addr) external returns (uint256);\\n   \\n\\n    /*\\n     * @dev Set adress of payment contract\\n     */\\n    function AdminSetSharesAddress(address _paymentAddress) external;\\n\\n\\n    /*\\n     * @dev Deducts token payment from transaction\\n     * Requirements:\\n     * - the caller must have PAYABLE_ROLE.\\n     * - the caller must have a pruf token balance of at least `_rootPrice + _ACTHprice`.\\n     */\\n    function payForService(\\n        address _senderAddress,\\n        address _rootAddress,\\n        uint256 _rootPrice,\\n        address _ACTHaddress,\\n        uint256 _ACTHprice\\n    ) external;\\n\\n    /*\\n     * @dev arbitrary burn (requires TRUSTED_AGENT_ROLE)   ****USE WITH CAUTION\\n     */\\n    function trustedAgentBurn(address _addr, uint256 _amount) external;\\n\\n    /*\\n     * @dev arbitrary transfer (requires TRUSTED_AGENT_ROLE)   ****USE WITH CAUTION\\n     */\\n    function trustedAgentTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) external;\\n\\n    /*\\n     * @dev Take a balance snapshot, returns snapshot ID\\n     * - the caller must have the `SNAPSHOT_ROLE`.\\n     */\\n    function takeSnapshot() external returns (uint256);\\n\\n    /**\\n     * @dev Creates `amount` new tokens for `to`.\\n     *\\n     * See {ERC20-_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `MINTER_ROLE`.\\n     */\\n    function mint(address to, uint256 amount) external;\\n\\n    /**\\n     * @dev Pauses all token transfers.\\n     *\\n     * See {ERC20Pausable} and {Pausable-_pause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function pause() external;\\n\\n    /**\\n     * @dev Unpauses all token transfers.\\n     *\\n     * See {ERC20Pausable} and {Pausable-_unpause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function unpause() external;\\n\\n    /**\\n     * @dev Retrieves the balance of `account` at the time `snapshotId` was created.\\n     */\\n    function balanceOfAt(address account, uint256 snapshotId)\\n        external\\n        returns (uint256);\\n\\n    /**\\n     * @dev Retrieves the total supply at the time `snapshotId` was created.\\n     */\\n    function totalSupplyAt(uint256 snapshotId) external returns (uint256);\\n\\n   \\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool); \\n    \\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) external; \\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller\\u0027s\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``\\u0027s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) external;\\n\\n    /**\\n     * @dev Returns the cap on the token\\u0027s total supply.\\n     */\\n    function cap() external returns (uint256);\\n\\n        /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external returns (bool);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external returns (uint256);\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external returns (address);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role\\u0027s admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``\\u0027s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``\\u0027s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function\\u0027s\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n       \\n}\\n\\n//------------------------------------------------------------------------------------------------\\n/*\\n * @dev Interface for AC_TKN\\n * INHERIANCE:\\n    import \\\"./ERC721/ERC721.sol\\\";\\n    import \\\"./Ownable.sol\\\";\\n    import \\\"./ReentrancyGuard.sol\\\";\\n */\\ninterface AC_TKN_Interface {\\n    /*\\n     * @dev Set storage contract to interface with\\n     */\\n    function OO_setStorageContract(address _storageAddress) external;\\n\\n    /*\\n     * @dev Address Setters\\n     */\\n    function OO_resolveContractAddresses() external;\\n\\n    /*\\n     * @dev Mints assetClass token, must be isAdmin\\n     */\\n    function mintACToken(\\n        address _recipientAddress,\\n        uint256 tokenId,\\n        string calldata _tokenURI\\n    ) external returns (uint256);\\n\\n    /*\\n     * @dev remint Asset Token\\n     * must set a new and unuiqe rgtHash\\n     * burns old token\\n     * Sends new token to original Caller\\n     */\\n    function reMintACToken(\\n        address _recipientAddress,\\n        uint256 tokenId,\\n        string calldata _tokenURI\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Transfers the ownership of a given token ID to another address.\\n     * Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     * Requires the msg.sender to be the owner, approved, or operator.\\n     * @param from current owner of the token\\n     * @param to address to receive the ownership of the given token ID\\n     * @param tokenId uint256 ID of the token to be transferred\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers the ownership of a given token ID to another address\\n     * If the target address is a contract, it must implement {IERC721Receiver-onERC721Received},\\n     * which is called upon a safe transfer, and return the magic value\\n     * `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise,\\n     * the transfer is reverted.\\n     * Requires the msg.sender to be the owner, approved, or operator\\n     * @param from current owner of the token\\n     * @param to address to receive the ownership of the given token ID\\n     * @param tokenId uint256 ID of the token to be transferred\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers the ownership of a given token ID to another address\\n     * If the target address is a contract, it must implement {IERC721Receiver-onERC721Received},\\n     * which is called upon a safe transfer, and return the magic value\\n     * `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise,\\n     * the transfer is reverted.\\n     * Requires the _msgSender() to be the owner, approved, or operator\\n     * @param from current owner of the token\\n     * @param to address to receive the ownership of the given token ID\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes data to send along with a safe transfer check\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata _data\\n    ) external;\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId)\\n        external\\n        view\\n        returns (address tokenHolderAdress);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external returns (uint256);\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory tokenName);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory tokenSymbol);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId)\\n        external\\n        view\\n        returns (string memory URI);\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``\\u0027s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index)\\n        external\\n        view\\n        returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\\n//------------------------------------------------------------------------------------------------\\n/*\\n * @dev Interface for A_TKN\\n * INHERIANCE:\\n    import \\\"./ERC721/ERC721.sol\\\";\\n    import \\\"./Ownable.sol\\\";\\n    import \\\"./ReentrancyGuard.sol\\\";\\n */\\ninterface A_TKN_Interface {\\n    /*\\n     * @dev Set storage contract to interface with\\n     */\\n    function OO_setStorageContract(address _storageAddress) external;\\n\\n    /*\\n     * @dev Address Setters\\n     */\\n    function OO_resolveContractAddresses() external;\\n\\n    /*\\n     * @dev Mint new asset token\\n     */\\n    function mintAssetToken(\\n        address _recipientAddress,\\n        uint256 tokenId,\\n        string calldata _tokenURI\\n    ) external returns (uint256);\\n\\n    /*\\n     * @dev remint Asset Token\\n     * must set a new and unuiqe rgtHash\\n     * burns old token\\n     * Sends new token to original Caller\\n     */\\n    function reMintAssetToken(address _recipientAddress, uint256 tokenId)\\n        external\\n        returns (uint256);\\n\\n    /*\\n     * @dev Set new token URI String\\n     */\\n    function setURI(uint256 tokenId, string calldata _tokenURI)\\n        external\\n        returns (uint256);\\n\\n    /*\\n     * @dev Reassures user that token is minted in the PRUF system\\n     */\\n    function validatePipToken(\\n        uint256 tokenId,\\n        uint32 _assetClass,\\n        string calldata _authCode\\n    ) external view;\\n\\n    /*\\n     * @dev See if token exists\\n     */\\n    function tokenExists(uint256 tokenId) external view returns (uint8);\\n\\n    /**\\n     * @dev Transfers the ownership of a given token ID to another address.\\n     * Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     * Requires the msg.sender to be the owner, approved, or operator.\\n     * @param from current owner of the token\\n     * @param to address to receive the ownership of the given token ID\\n     * @param tokenId uint256 ID of the token to be transferred\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers the ownership of a given token ID to another address\\n     * If the target address is a contract, it must implement {IERC721Receiver-onERC721Received},\\n     * which is called upon a safe transfer, and return the magic value\\n     * `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise,\\n     * the transfer is reverted.\\n     * Requires the msg.sender to be the owner, approved, or operator\\n     * @param from current owner of the token\\n     * @param to address to receive the ownership of the given token ID\\n     * @param tokenId uint256 ID of the token to be transferred\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers the ownership of a given token ID to another address\\n     * If the target address is a contract, it must implement {IERC721Receiver-onERC721Received},\\n     * which is called upon a safe transfer, and return the magic value\\n     * `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise,\\n     * the transfer is reverted.\\n     * Requires the _msgSender() to be the owner, approved, or operator\\n     * @param from current owner of the token\\n     * @param to address to receive the ownership of the given token ID\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes data to send along with a safe transfer check\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata _data\\n    ) external;\\n\\n    /**\\n     * @dev Safely burns a token and sets the corresponding RGT to zero in storage.\\n     */\\n    function discard(uint256 tokenId) external;\\n\\n    /**\\n     * @dev Converts uint256 to string form @OpenZeppelin.\\n     */\\n    function uint256toString(uint256 number) external returns (string memory);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId)\\n        external\\n        returns (address tokenHolderAdress);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external returns (uint256);\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external returns (string memory tokenName);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external returns (string memory tokenSymbol);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external returns (string memory URI);\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``\\u0027s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index)\\n        external\\n        returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external returns (uint256);\\n}\\n\\n//------------------------------------------------------------------------------------------------\\n/*\\n * @dev Interface for ID_TKN\\n * INHERIANCE:\\n    import \\\"./ERC721/ERC721.sol\\\";\\n    import \\\"./Ownable.sol\\\";\\n    import \\\"./ReentrancyGuard.sol\\\";\\n */\\ninterface ID_TKN_Interface {\\n    /*\\n     * @dev Mint new PRUF_ID token\\n     */\\n    function mintPRUF_IDToken(address _recipientAddress, uint256 tokenId)\\n        external\\n        returns (uint256);\\n\\n    /*\\n     * @dev remint Asset Token\\n     * must set a new and unuiqe rgtHash\\n     * burns old token\\n     * Sends new token to original Caller\\n     */\\n    function reMintPRUF_IDToken(address _recipientAddress, uint256 tokenId)\\n        external\\n        returns (uint256);\\n\\n    /*\\n     * @dev See if token exists\\n     */\\n    function tokenExists(uint256 tokenId) external view returns (uint8);\\n\\n    /**\\n     * @dev @dev Blocks the transfer of a given token ID to another address\\n     * Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     * Requires the msg.sender to be the owner, approved, or operator.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Safely blocks the transfer of a given token ID to another address\\n     * If the target address is a contract, it must implement {IERC721Receiver-onERC721Received},\\n     * which is called upon a safe transfer, and return the magic value\\n     * `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise,\\n     * the transfer is reverted.\\n     * Requires the msg.sender to be the owner, approved, or operator\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Safely blocks the transfer of a given token ID to another address\\n     * If the target address is a contract, it must implement {IERC721Receiver-onERC721Received},\\n     * which is called upon a safe transfer, and return the magic value\\n     * `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise,\\n     * the transfer is reverted.\\n     * Requires the _msgSender() to be the owner, approved, or operator\\n     * @param from current owner of the token\\n     * @param to address to receive the ownership of the given token ID\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes data to send along with a safe transfer check\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata _data\\n    ) external;\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId)\\n        external\\n        view\\n        returns (address tokenHolderAdress);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external returns (uint256);\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory tokenName);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory tokenSymbol);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId)\\n        external\\n        view\\n        returns (string memory URI);\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``\\u0027s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index)\\n        external\\n        view\\n        returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\\n//------------------------------------------------------------------------------------------------\\n/*\\n * @dev Interface for AC_MGR\\n * INHERIANCE:\\n    import \\\"./PRUF_BASIC.sol\\\";\\n    import \\\"./math/Safemath.sol\\\";\\n */\\ninterface AC_MGR_Interface {\\n    /*\\n     * @dev Authorize / Deauthorize / Authorize users for an address be permitted to make record modifications\\n     */\\n    function OO_addUser(\\n        bytes32 _addrHash,\\n        uint8 _userType,\\n        uint32 _assetClass\\n    ) external;\\n\\n    /*\\n     * @dev Mints asset class token and creates an assetClass. Mints to @address\\n     * Requires that:\\n     *  name is unuiqe\\n     *  AC is not provisioned with a root (proxy for not yet registered)\\n     *  that ACtoken does not exist\\n     */\\n    function createAssetClass(\\n        address _recipientAddress,\\n        string calldata _name,\\n        uint32 _assetClass,\\n        uint32 _assetClassRoot,\\n        uint8 _custodyType,\\n        bytes32 _IPFS\\n    ) external;\\n\\n    /*\\n     * @dev Modifies an assetClass\\n     * Sets a new AC name. Asset Classes cannot be moved to a new root or custody type.\\n     * Requires that:\\n     *  caller holds ACtoken\\n     *  name is unuiqe or same as old name\\n     */\\n    function updateACname(string calldata _name, uint32 _assetClass) external;\\n\\n    /*\\n     * @dev Modifies an assetClass\\n     * Sets a new AC IPFS Address. Asset Classes cannot be moved to a new root or custody type.\\n     * Requires that:\\n     *  caller holds ACtoken\\n     */\\n    function updateACipfs(bytes32 _IPFS, uint32 _assetClass) external;\\n\\n    /*\\n     * @dev Set function costs and payment address per asset class, in Wei\\n     */\\n    function ACTH_setCosts(\\n        uint32 _assetClass,\\n        uint16 _service,\\n        uint256 _serviceCost,\\n        address _paymentAddress\\n    ) external;\\n\\n    /*\\n     * @dev get a User Record\\n     */\\n    function getUserType(bytes32 _userHash, uint32 _assetClass)\\n        external\\n        view\\n        returns (uint8);\\n\\n    /*\\n     * @dev Retrieve AC_data @ _assetClass\\n     */\\n    function getAC_data(uint32 _assetClass)\\n        external\\n        view\\n        returns (\\n            uint32,\\n            uint8,\\n            uint32,\\n            uint32,\\n            bytes32\\n        );\\n\\n    /*\\n     * @dev Retrieve AC_discount @ _assetClass, in percent ACTH share, * 100 (9000 = 90%)\\n     */\\n    function getAC_discount(uint32 _assetClass) external view returns (uint32);\\n\\n    /*\\n     * @dev compare the root of two asset classes\\n     */\\n    function isSameRootAC(uint32 _assetClass1, uint32 _assetClass2)\\n        external\\n        view\\n        returns (uint8);\\n\\n    /*\\n     * @dev Retrieve AC_name @ _tokenId\\n     */\\n    function getAC_name(uint32 _tokenId) external view returns (string memory);\\n\\n    /*\\n     * @dev Retrieve AC_number @ AC_name\\n     */\\n    function resolveAssetClass(string calldata _name)\\n        external\\n        view\\n        returns (uint32);\\n\\n    /*\\n     * @dev Retrieve function costs per asset class, per service type, in Wei\\n     */\\n    function getServiceCosts(uint32 _assetClass, uint16 _service)\\n        external\\n        view\\n        returns (\\n            address,\\n            uint256,\\n            address,\\n            uint256\\n        );\\n}\\n\\n//------------------------------------------------------------------------------------------------\\n/*\\n * @dev Interface for STOR\\n * INHERIANCE:\\n    import \\\"./Ownable.sol\\\";\\n    import \\\"./Pausable.sol\\\";\\n    import \\\"./math/Safemath.sol\\\";\\n    import \\\"./ReentrancyGuard.sol\\\";\\n */\\ninterface STOR_Interface {\\n    /*\\n     * @dev Triggers stopped state. (pausable)\\n     */\\n    function pause() external;\\n\\n    /*\\n     * @dev Returns to normal state. (pausable)\\n     */\\n    function unpause() external;\\n\\n    /*\\n     * @dev Authorize / Deauthorize / Authorize ADRESSES permitted to make record modifications, per AssetClass\\n     * populates contract name resolution and data mappings\\n     */\\n    function OO_addContract(\\n        string calldata _name,\\n        address _addr,\\n        uint32 _assetClass,\\n        uint8 _contractAuthLevel\\n    ) external;\\n\\n    /*\\n     * @dev Authorize / Deauthorize / Authorize contract NAMES permitted to make record modifications, per AssetClass\\n     * allows ACtokenHolder to auithorize or deauthorize specific contracts to work within their asset class\\n     */\\n    function enableContractForAC(\\n        string calldata _name,\\n        uint32 _assetClass,\\n        uint8 _contractAuthLevel\\n    ) external;\\n\\n    /*\\n     * @dev Make a new record, writing to the \\u0027database\\u0027 mapping with basic initial asset data\\n     */\\n    function newRecord(\\n        bytes32 _idxHash,\\n        bytes32 _rgtHash,\\n        uint32 _assetClass,\\n        uint32 _countDownStart\\n    ) external;\\n\\n    /*\\n     * @dev Modify a record, writing to the \\u0027database\\u0027 mapping with updates to multiple fields\\n     */\\n    function modifyRecord(\\n        bytes32 _idxHash,\\n        bytes32 _rgtHash,\\n        uint8 _newAssetStatus,\\n        uint32 _countDown,\\n        uint256 _incrementForceModCount,\\n        uint256 _incrementNumberOfTransfers\\n    ) external;\\n\\n    /*\\n     * @dev Change asset class of an asset - writes to assetClass in the \\u0027Record\\u0027 struct of the \\u0027database\\u0027 at _idxHash\\n     */\\n    function changeAC(bytes32 _idxHash, uint32 _newAssetClass) external;\\n\\n    /*\\n     * @dev Set an asset to stolen or lost. Allows narrow modification of status 6/12 assets, normally locked\\n     */\\n    function setStolenOrLost(bytes32 _idxHash, uint8 _newAssetStatus) external;\\n\\n    /*\\n     * @dev Set an asset to escrow locked status (6/50/56).\\n     */\\n    function setEscrow(bytes32 _idxHash, uint8 _newAssetStatus) external;\\n\\n    /*\\n     * @dev remove an asset from escrow status. Implicitly trusts escrowManager ECR_MGR contract\\n     */\\n    function endEscrow(bytes32 _idxHash) external;\\n\\n    /*\\n     * @dev Modify record Ipfs1 data\\n     */\\n    function modifyIpfs1(bytes32 _idxHash, bytes32 _Ipfs1) external;\\n\\n    /*\\n     * @dev Write record Ipfs2 data\\n     */\\n    function modifyIpfs2(bytes32 _idxHash, bytes32 _Ipfs2) external;\\n\\n    /*\\n     * @dev return a record from the database, including rgt\\n     */\\n    function retrieveRecord(bytes32 _idxHash)\\n        external\\n        view\\n        returns (\\n            bytes32,\\n            uint8,\\n            uint32,\\n            uint32,\\n            uint32,\\n            bytes32,\\n            bytes32\\n        );\\n\\n    /*\\n     * @dev return a record from the database w/o rgt\\n     */\\n    function retrieveShortRecord(bytes32 _idxHash)\\n        external\\n        view\\n        returns (\\n            uint8,\\n            uint8,\\n            uint32,\\n            uint32,\\n            uint32,\\n            bytes32,\\n            bytes32,\\n            uint16\\n        );\\n\\n    /*\\n     * @dev Compare record.rightsholder with supplied bytes32 rightsholder\\n     * return 170 if matches, 0 if not\\n     */\\n    function _verifyRightsHolder(bytes32 _idxHash, bytes32 _rgtHash)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /*\\n     * @dev Compare record.rightsholder with supplied bytes32 rightsholder (writes an emit in blockchain for independant verification)\\n     */\\n    function blockchainVerifyRightsHolder(bytes32 _idxHash, bytes32 _rgtHash)\\n        external\\n        returns (uint8);\\n\\n    /*\\n     * @dev //returns the address of a contract with name _name. This is for web3 implementations to find the right contract to interact with\\n     * example :  Frontend = ****** so web 3 first asks storage where to find frontend, then calls for frontend functions.\\n     */\\n    function resolveContractAddress(string calldata _name)\\n        external\\n        view\\n        returns (address);\\n\\n    /*\\n     * @dev //returns the contract type of a contract with address _addr.\\n     */\\n    function ContractInfoHash(address _addr, uint32 _assetClass)\\n        external\\n        view\\n        returns (uint8, bytes32);\\n}\\n\\n//------------------------------------------------------------------------------------------------\\n/*\\n * @dev Interface for ECR_MGR\\n * INHERIANCE:\\n    import \\\"./PRUF_BASIC.sol\\\";\\n    import \\\"./math/Safemath.sol\\\";\\n */\\ninterface ECR_MGR_Interface {\\n    /*\\n     * @dev Set an asset to escrow status (6/50/56). Sets timelock for unix timestamp of escrow end.\\n     */\\n    function setEscrow(\\n        bytes32 _idxHash,\\n        uint8 _newAssetStatus,\\n        bytes32 _escrowOwnerAddressHash,\\n        uint256 _timelock\\n    ) external;\\n\\n    /*\\n     * @dev remove an asset from escrow status\\n     */\\n    function endEscrow(bytes32 _idxHash) external;\\n\\n    /*\\n     * @dev Set data in EDL mapping\\n     * Must be setter contract\\n     * Must be in  escrow\\n     */\\n    function setEscrowDataLight(\\n        bytes32 _idxHash,\\n        uint8 _escrowData,\\n        uint8 _u8_1,\\n        uint8 _u8_2,\\n        uint8 _u8_3,\\n        uint16 _u16_1,\\n        uint16 _u16_2,\\n        uint32 _u32_1,\\n        address _addr_1\\n    ) external;\\n\\n    /*\\n     * @dev Set data in EDL mapping\\n     * Must be setter contract\\n     * Must be in  escrow\\n     */\\n    function setEscrowDataHeavy(\\n        bytes32 _idxHash,\\n        uint32 _u32_2,\\n        uint32 _u32_3,\\n        uint32 _u32_4,\\n        address _addr_2,\\n        bytes32 _b32_1,\\n        bytes32 _b32_2,\\n        uint256 _u256_1,\\n        uint256 _u256_2\\n    ) external;\\n\\n    /*\\n     * @dev Permissive removal of asset from escrow status after time-out\\n     */\\n    function permissiveEndEscrow(bytes32 _idxHash) external;\\n\\n    /*\\n     * @dev return escrow OwnerHash\\n     */\\n    function retrieveEscrowOwner(bytes32 _idxHash)\\n        external\\n        returns (bytes32 hashOfEscrowOwnerAdress);\\n\\n    /*\\n     * @dev return escrow data @ IDX\\n     */\\n    function retrieveEscrowData(bytes32 _idxHash)\\n        external\\n        returns (\\n            bytes32 controllingContractNameHash,\\n            bytes32 escrowOwnerAddressHash,\\n            uint256 timelock\\n        );\\n\\n    /*\\n     * @dev return EscrowDataLight @ IDX\\n     */\\n    function retrieveEscrowDataLight(bytes32 _idxHash)\\n        external\\n        view\\n        returns (\\n            uint8 _escrowData,\\n            uint8 _u8_1,\\n            uint8 _u8_2,\\n            uint8 _u8_3,\\n            uint16 _u16_1,\\n            uint16 _u16_2,\\n            uint32 _u32_1,\\n            address _addr_1\\n        );\\n\\n    /*\\n     * @dev return EscrowDataHeavy @ IDX\\n     */\\n    function retrieveEscrowDataHeavy(bytes32 _idxHash)\\n        external\\n        view\\n        returns (\\n            uint32 _u32_2,\\n            uint32 _u32_3,\\n            uint32 _u32_4,\\n            address _addr_2,\\n            bytes32 _b32_1,\\n            bytes32 _b32_2,\\n            uint256 _u256_1,\\n            uint256 _u256_2\\n        );\\n}\\n\\n//------------------------------------------------------------------------------------------------\\n/*\\n * @dev Interface for RCLR\\n * INHERIANCE:\\n    import \\\"./PRUF_ECR_CORE.sol\\\";\\n    import \\\"./PRUF_CORE.sol\\\";\\n */\\ninterface RCLR_Interface {\\n    function discard(bytes32 _idxHash, address _sender) external;\\n\\n    function recycle(bytes32 _idxHash) external;\\n}\\n\\n//------------------------------------------------------------------------------------------------\\n/*\\n * @dev Interface for APP\\n * INHERIANCE:\\n    import \\\"./PRUF_CORE.sol\\\";\\n */\\ninterface APP_Interface {\\n    function transferAssetToken(address _to, bytes32 _idxHash) external;\\n\\n    function $withdraw() external;\\n}\\n\\n//------------------------------------------------------------------------------------------------\\n/*\\n * @dev Interface for APP_NC\\n * INHERIANCE:\\n    import \\\"./PRUF_CORE.sol\\\";\\n */\\ninterface APP_NC_Interface {\\n    function transferAssetToken(address _to, bytes32 _idxHash) external;\\n\\n    function $withdraw() external;\\n}\\n\"},\"PRUF_PRESALE.sol\":{\"content\":\"/*--------------------------------------------------------PRuF0.7.1\\n__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ _____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ _______/\\\\\\\\../\\\\\\\\ ___/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n _\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\ _/\\\\\\\\\\\\///////\\\\\\\\\\\\ ____\\\\//..\\\\//____\\\\/\\\\\\\\\\\\///////////__\\n  _\\\\/\\\\\\\\\\\\.......\\\\/\\\\\\\\\\\\.\\\\/\\\\\\\\\\\\.....\\\\/\\\\\\\\\\\\ ________________\\\\/\\\\\\\\\\\\ ____________\\n   _\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/_____/\\\\\\\\\\\\____/\\\\\\\\\\\\.\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ ____\\n    _\\\\/\\\\\\\\\\\\/////////____\\\\/\\\\\\\\\\\\//////\\\\\\\\\\\\ ___\\\\/\\\\\\\\\\\\___\\\\/\\\\\\\\\\\\.\\\\/\\\\\\\\\\\\///////______\\n     _\\\\/\\\\\\\\\\\\ ____________\\\\/\\\\\\\\\\\\ ___\\\\//\\\\\\\\\\\\ __\\\\/\\\\\\\\\\\\___\\\\/\\\\\\\\\\\\.\\\\/\\\\\\\\\\\\ ____________\\n      _\\\\/\\\\\\\\\\\\ ____________\\\\/\\\\\\\\\\\\ ____\\\\//\\\\\\\\\\\\ _\\\\/\\\\\\\\\\\\___\\\\/\\\\\\\\\\\\.\\\\/\\\\\\\\\\\\ ____________\\n       _\\\\/\\\\\\\\\\\\ ____________\\\\/\\\\\\\\\\\\ _____\\\\//\\\\\\\\\\\\.\\\\//\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ _\\\\/\\\\\\\\\\\\ ____________\\n        _\\\\/// _____________\\\\/// _______\\\\/// __\\\\///////// __\\\\/// _____________\\n         *-------------------------------------------------------------------*/\\n\\n/*-----------------------------------------------------------------\\n *  TO DO\\n *\\n *-----------------------------------------------------------------\\n * PRESALE CONTRACT\\n *---------------------------------------------------------------*/\\n\\n// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.6.7;\\n\\nimport \\\"./PRUF_INTERFACES.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"./Pausable.sol\\\";\\nimport \\\"./ReentrancyGuard.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\ncontract PRESALE is ReentrancyGuard, Pausable, AccessControl {\\n    using SafeMath for uint256;\\n\\n    //----------------------------ROLE DFINITIONS \\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n    bytes32 public constant WHITELIST_ROLE = keccak256(\\\"WHITELIST_ROLE\\\");\\n    bytes32 public constant AIRDROP_ROLE = keccak256(\\\"AIRDROP_ROLE\\\");\\n\\n    address internal UTIL_TKN_Address;\\n    UTIL_TKN_Interface internal UTIL_TKN;\\n\\n    address payable public payment_address;\\n\\n    uint256 public airdropAmount = 1 ether; // in tokens\\n    uint256 public presaleLimit; //in eth\\n    uint256 public presaleCount; //in eth\\n\\n    struct whiteListedAddress {\\n        uint256 tokensPerEth;\\n        uint256 minEth;\\n        uint256 maxEth;\\n    }\\n\\n    mapping(address =\\u003e whiteListedAddress) private whiteList;\\n\\n    constructor() public {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n        _setupRole(PAUSER_ROLE, _msgSender());\\n        _setupRole(WHITELIST_ROLE, _msgSender());\\n        _setupRole(AIRDROP_ROLE, _msgSender());\\n\\n        whiteList[address(0)].tokensPerEth = 100000 ether; //100,000 tokens per ETH default    \\n        whiteList[address(0)].minEth = 100000000000000000; // 0.1 eth minimum default (10,000 tokens)\\n        whiteList[address(0)].maxEth = 10 ether; // 10 eth maximum default (1,000,000 tokens)              \\n    }\\n\\n    //------------------------------------------------------------------------MODIFIERS\\n\\n    /*\\n     * @dev Verify user credentials\\n     * Originating Address:\\n     *      is Admin\\n     */\\n    modifier isAdmin() {\\n        require(\\n            hasRole(DEFAULT_ADMIN_ROLE, _msgSender()),\\n            \\\"PP:MOD: must have DEFAULT_ADMIN_ROLE\\\"\\n        );\\n        _;\\n    }\\n\\n    /*\\n     * @dev Verify user credentials\\n     * Originating Address:\\n     *      is Pauser\\n     */\\n    modifier isPauser() {\\n        require(\\n            hasRole(PAUSER_ROLE, _msgSender()),\\n            \\\"PP:MOD: must have PAUSER_ROLE\\\"\\n        );\\n        _;\\n    }\\n\\n    /*\\n     * @dev Verify user credentials\\n     * Originating Address:\\n     *      is Airdrop\\n     */\\n    modifier isAirdrop() {\\n        require(\\n            hasRole(AIRDROP_ROLE, _msgSender()),\\n            \\\"PP:MOD: must have AIRDROP_ROLE\\\"\\n        );\\n        _;\\n    }\\n\\n    /*\\n     * @dev Verify user credentials\\n     * Originating Address:\\n     *      is Whitelist\\n     */\\n    modifier isWhitelist() {\\n        require(\\n            hasRole(WHITELIST_ROLE, _msgSender()),\\n            \\\"PP:MOD: must have WHITELIST_ROLE\\\"\\n        );\\n        _;\\n    }\\n\\n    event REPORT(address addr, uint256 amount);\\n\\n    //----------------------External Admin functions / onlyowner ---------------------//\\n\\n    /*\\n     * @dev Set address of PRUF_TKN contract to interface with\\n     * TESTING: ALL REQUIRES, ACCESS ROLE\\n     */\\n    function ADMIN_setTokenContract(address _address) external isAdmin {\\n        require(\\n            _address != address(0),\\n            \\\"PP:STC: token contract address cannot be zero\\\"\\n        );\\n        //^^^^^^^checks^^^^^^^^^\\n\\n        UTIL_TKN_Address = _address;\\n        UTIL_TKN = UTIL_TKN_Interface(UTIL_TKN_Address);\\n        //^^^^^^^effects^^^^^^^^^\\n    }\\n\\n    /*\\n     * @dev Set Payment address to send eth to\\n     * TESTING: ALL REQUIRES, ACCESS ROLE\\n     */\\n    function ADMIN_setPaymentAddress(address payable _address)\\n        external\\n        isAdmin\\n    {\\n        require(\\n            _address != address(0),\\n            \\\"PP:ASPA: payment address cannot be zero\\\"\\n        );\\n        //^^^^^^^checks^^^^^^^^^\\n\\n        payment_address = _address;\\n\\n        //^^^^^^^effects^^^^^^^^^\\n    }\\n\\n    /*\\n     * @dev Set airdropAmount\\n     * TESTING: ALL REQUIRES, ACCESS ROLE, sets airdrop amount for all airdrop functions\\n     */\\n    function ADMIN_setAirDropAmount(uint256 _airdropAmount) external isAdmin {\\n        require(_airdropAmount != 0, \\\"PP:SAA: airdrop amount cannot be zero\\\");\\n        //^^^^^^^checks^^^^^^^^^\\n        airdropAmount = _airdropAmount;\\n        //^^^^^^^effects^^^^^^^^^\\n    }\\n\\n    /*\\n     * @dev Set presale limit, reset presale counter\\n     * TESTING: ALL REQUIRES, ACCESS ROLE, presale limit works, presale limit can be reset for new presale\\n     */\\n    function ADMIN_setPresaleLimit(uint256 _presaleLimit) external isAdmin {\\n        //^^^^^^^checks^^^^^^^^^\\n        presaleLimit = _presaleLimit;\\n        presaleCount = 0;\\n        //^^^^^^^effects^^^^^^^^^\\n    }\\n\\n    /*\\n     * @dev Set address of PRUF_TKN contract to interface with\\n     * Set default condition at address(0). Addresses not appearing on the whitelist will fall under these terms.\\n     * TESTING: ACCESS ROLE, Also test that setting params for 0 address sets default behavior for non-whitelisted addresses\\n     */\\n    function whitelist(\\n        address _addr,\\n        uint256 _tokensPerEth,\\n        uint256 _minEth,\\n        uint256 _maxEth\\n    ) external isWhitelist {\\n        whiteListedAddress memory _whiteList;\\n\\n        //^^^^^^^checks^^^^^^^^^\\n\\n        _whiteList.tokensPerEth = _tokensPerEth; //build new whiteList entry\\n        _whiteList.minEth = _minEth;\\n        _whiteList.maxEth = _maxEth;\\n\\n        whiteList[_addr] = _whiteList; //store new whiteList entry\\n\\n        //^^^^^^^effects^^^^^^^^^\\n    }\\n\\n    /*\\n     * @dev checks airdrop state for an address\\n     * TESTING: Returns both instantiated and default (uninstantiated addresses) Uninstantiated addresses should return default (0 address) values\\n     *\\n     */\\n    function checkWhitelist(address _addr)\\n        external\\n        virtual\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        //min tokens, max tokens, tokens per eth, ETH (wei) to buy maxEth\\n\\n        whiteListedAddress memory _whiteList = whiteList[_addr];\\n\\n        if (_whiteList.tokensPerEth == 0) {\\n            _whiteList = whiteList[address(0)];\\n        }\\n\\n        return (_whiteList.minEth, _whiteList.maxEth, _whiteList.tokensPerEth);\\n        //^^^^^^^effects^^^^^^^^^\\n    }\\n\\n    //--------------------------------------External functions--------------------------------------------//\\n\\n    /*\\n     * @dev Mint airdropAmount to a list of addresses\\n     * TESTING: ALL REQUIRES, ACCESS ROLE, PAUSABLE\\n     */\\n    function AIRDROP_Mint14(\\n        address _a,\\n        address _b,\\n        address _c,\\n        address _d,\\n        address _e,\\n        address _f,\\n        address _g,\\n        address _h,\\n        address _i,\\n        address _j,\\n        address _k,\\n        address _l,\\n        address _m,\\n        address _n\\n    ) external isAirdrop whenNotPaused {\\n        //^^^^^^^checks^^^^^^^^^\\n\\n        UTIL_TKN.mint(_a, airdropAmount);\\n        UTIL_TKN.mint(_b, airdropAmount);\\n        UTIL_TKN.mint(_c, airdropAmount);\\n        UTIL_TKN.mint(_d, airdropAmount);\\n        UTIL_TKN.mint(_e, airdropAmount);\\n        UTIL_TKN.mint(_f, airdropAmount);\\n        UTIL_TKN.mint(_g, airdropAmount);\\n        UTIL_TKN.mint(_h, airdropAmount);\\n        UTIL_TKN.mint(_i, airdropAmount);\\n        UTIL_TKN.mint(_j, airdropAmount);\\n        UTIL_TKN.mint(_k, airdropAmount);\\n        UTIL_TKN.mint(_l, airdropAmount);\\n        UTIL_TKN.mint(_m, airdropAmount);\\n        UTIL_TKN.mint(_n, airdropAmount);\\n        //^^^^^^^Interactions^^^^^^^^^\\n    }\\n\\n    \\n\\n    /*\\n     * @dev Mint airdropAmount to a list of addresses\\n     * TESTING: ALL REQUIRES, ACCESS ROLE, PAUSABLE\\n     */\\n    function AIRDROP_Mint5(\\n        address _a,\\n        address _b,\\n        address _c,\\n        address _d,\\n        address _e\\n    ) external isAirdrop whenNotPaused {\\n        //^^^^^^^checks^^^^^^^^^\\n\\n        UTIL_TKN.mint(_a, airdropAmount);\\n        UTIL_TKN.mint(_b, airdropAmount);\\n        UTIL_TKN.mint(_c, airdropAmount);\\n        UTIL_TKN.mint(_d, airdropAmount);\\n        UTIL_TKN.mint(_e, airdropAmount);\\n        //^^^^^^^Interactions^^^^^^^^^\\n    }\\n\\n\\n    /*\\n     * @dev Mint a set airdropAmount to an address\\n     * TESTING: ALL REQUIRES, ACCESS ROLE, PAUSABLE\\n     */\\n    function AIRDROP_Mint1(address _a)\\n        external\\n        isAirdrop\\n        whenNotPaused\\n    {\\n        //^^^^^^^checks^^^^^^^^^\\n\\n        UTIL_TKN.mint(_a, airdropAmount);\\n        //^^^^^^^Interactions^^^^^^^^^\\n    }\\n\\n    /*\\n     * @dev Mint PRUF to an addresses as caller.tokensPerEth * ETH recieved\\n     * TESTING: ALL REQUIRES, ACCESS ROLE, PAUSABLE, individual presale allowance can be exhausted, overall presale allotment can be exhausted\\n     *          amount minted conforms to tokensPerEth setting, min buy is enforced\\n     */\\n    function BUY_PRUF() public payable nonReentrant whenNotPaused { \\n\\n        whiteListedAddress memory _whiteList = whiteList[msg.sender];\\n\\n        if (_whiteList.tokensPerEth == 0) {  //loads the default (addr 0) info into the address if address is not specificly whitelisted\\n            whiteList[msg.sender] = whiteList[address(0)];\\n            _whiteList = whiteList[msg.sender];\\n        }\\n\\n        uint256 amountToMint = msg.value.mul(\\n            _whiteList.tokensPerEth.div(1 ether)\\n        ); //in wei\\n\\n        require(\\n                amountToMint != 0,\\n            \\\"PP:PP: Amount to mint is zero\\\"\\n        );\\n        require(\\n            msg.value \\u003e= _whiteList.minEth,\\n            \\\"PP:PP: Insufficient ETH sent to meet minimum purchase requirement\\\"\\n        );\\n        require(\\n            msg.value \\u003c= _whiteList.maxEth,\\n            \\\"PP:PP: Purchase request exceeds allowed purchase Amount\\\"\\n        );\\n        require(\\n                amountToMint.add(presaleCount) \\u003c= presaleLimit,\\n            \\\"PP:PP: Purchase request exceeds total presale limit\\\"\\n        );\\n        //^^^^^^^checks^^^^^^^^^\\n\\n        presaleCount = amountToMint.add(presaleCount);\\n\\n        whiteList[msg.sender].maxEth = _whiteList.maxEth.sub(msg.value); //reduce max purchasable by purchased amount\\n        whiteList[msg.sender].minEth = 0; //Remove minimum , as minimum buy is already met.\\n        //^^^^^^^effects^^^^^^^^^\\n\\n        UTIL_TKN.mint(msg.sender, amountToMint);\\n        emit REPORT(_msgSender(), amountToMint);\\n        //^^^^^^^Interactions^^^^^^^^^\\n    }\\n\\n    /*\\n     * @dev withdraw to specified payment address\\n     * TESTING: WORKS\\n     */\\n    function withdraw() external isAdmin nonReentrant {\\n        require(\\n            payment_address != address(0),\\n            \\\"PP:W: payment address cannot be zero.\\\"\\n        );\\n        payment_address.transfer(address(this).balance);\\n    }\\n\\n    /*\\n     * @dev return balance of contract\\n     * TESTING: WORKS\\n     */\\n    function balance() external view returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state. (pausable)\\n     * * TESTING: ACCESS ROLE\\n     */\\n    function pause() external isPauser {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Returns to normal state. (pausable)\\n     * TESTING: ACCESS ROLE\\n     */\\n    function unpause() external isPauser {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @dev Ether received will initiate the mintPRUF function\\n     * TESTING: Sending naked eth calls presale function correctly\\n     */\\n    receive() external payable {\\n        BUY_PRUF();\\n    }\\n\\n    //--------------------------------------------------------------------------------------INTERNAL functions\\n}\\n\"},\"ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot\\u0027s contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler\\u0027s defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction\\u0027s gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"REPORT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_airdropAmount\",\"type\":\"uint256\"}],\"name\":\"ADMIN_setAirDropAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"ADMIN_setPaymentAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_presaleLimit\",\"type\":\"uint256\"}],\"name\":\"ADMIN_setPresaleLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"ADMIN_setTokenContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_a\",\"type\":\"address\"}],\"name\":\"AIRDROP_Mint1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_a\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_b\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_c\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_d\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_e\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_f\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_g\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_h\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_i\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_j\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_k\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_m\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_n\",\"type\":\"address\"}],\"name\":\"AIRDROP_Mint14\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_a\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_b\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_c\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_d\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_e\",\"type\":\"address\"}],\"name\":\"AIRDROP_Mint5\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AIRDROP_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BUY_PRUF\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WHITELIST_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"checkWhitelist\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payment_address\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokensPerEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxEth\",\"type\":\"uint256\"}],\"name\":\"whitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"PRESALE","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"1000000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://94c620df2a010ccecd3deb9976d8b6fd422428bee5cfb2a69178fe54efe31cb4"}]}