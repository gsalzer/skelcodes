{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.0.7 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/math/SafeMath.sol@v3.3.0\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/GSN/Context.sol@v3.3.0\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Pausable.sol@v3.3.0\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor () internal {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n\r\n// File contracts/Container.sol\r\n\r\n\r\npragma solidity ^0.7.0;\r\n\r\ncontract Container {\r\n\r\n    struct Item{\r\n        uint256 itemType;\r\n        uint256 status;\r\n        address[] addresses;\r\n    }\r\n\r\n    uint256 MaxItemAdressNum = 255;\r\n    mapping (bytes32 => Item) private container;\r\n    // bool private _nativePaused = false;\r\n\r\n\r\n    function itemAddressExists(bytes32 _id, address _oneAddress) internal view returns(bool){\r\n        for(uint256 i = 0; i < container[_id].addresses.length; i++){\r\n            if(container[_id].addresses[i] == _oneAddress)\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n    function getItemAddresses(bytes32 _id) internal view returns(address[] memory){\r\n        return container[_id].addresses;\r\n    }\r\n\r\n    function getItemInfo(bytes32 _id) internal view returns(uint256, uint256, uint256){\r\n        return (container[_id].itemType, container[_id].status, container[_id].addresses.length);\r\n    }\r\n\r\n    function getItemAddressCount(bytes32 _id) internal view returns(uint256){\r\n        return container[_id].addresses.length;\r\n    }\r\n\r\n    function setItemInfo(bytes32 _id, uint256 _itemType, uint256 _status) internal{\r\n        container[_id].itemType = _itemType;\r\n        container[_id].status = _status;\r\n    }\r\n\r\n    function addItemAddress(bytes32 _id, address _oneAddress) internal{\r\n        require(!itemAddressExists(_id, _oneAddress), \"dup address added\");\r\n        require(container[_id].addresses.length < MaxItemAdressNum, \"too many addresses\");\r\n        container[_id].addresses.push(_oneAddress);\r\n    }\r\n    function removeItemAddresses(bytes32 _id) internal {\r\n        delete container[_id].addresses;\r\n    }\r\n\r\n    function removeOneItemAddress(bytes32 _id, address _oneAddress) internal {\r\n        for(uint256 i = 0; i < container[_id].addresses.length; i++){\r\n            if(container[_id].addresses[i] == _oneAddress){\r\n                container[_id].addresses[i] = container[_id].addresses[container[_id].addresses.length - 1];\r\n                container[_id].addresses.pop();\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    function removeItem(bytes32 _id) internal{\r\n        delete container[_id];\r\n    }\r\n\r\n    function replaceItemAddress(bytes32 _id, address _oneAddress, address _anotherAddress) internal {\r\n        for(uint256 i = 0; i < container[_id].addresses.length; i++){\r\n            if(container[_id].addresses[i] == _oneAddress){\r\n                container[_id].addresses[i] = _anotherAddress;\r\n                return;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/BridgeStorage.sol\r\n\r\n\r\npragma solidity ^0.7.0;\r\n\r\ncontract BridgeStorage is Container {\r\n    string public constant name = \"BridgeStorage\";\r\n\r\n    address private caller;\r\n\r\n    constructor(address aCaller) {\r\n        caller = aCaller;\r\n    }\r\n\r\n    modifier onlyCaller() {\r\n        require(msg.sender == caller, \"only use main contract to call\");\r\n        _;\r\n    }\r\n\r\n    function supporterExists(bytes32 taskHash, address user) public view returns(bool) {\r\n        return itemAddressExists(taskHash, user);\r\n    }\r\n\r\n    function setTaskInfo(bytes32 taskHash, uint256 taskType, uint256 status) external onlyCaller {\r\n        setItemInfo(taskHash, taskType, status);\r\n    }\r\n\r\n    function getTaskInfo(bytes32 taskHash) public view returns(uint256, uint256, uint256){\r\n        return getItemInfo(taskHash);\r\n    }\r\n\r\n    function addSupporter(bytes32 taskHash, address oneAddress) external onlyCaller{\r\n        addItemAddress(taskHash, oneAddress);\r\n    }\r\n\r\n    function removeAllSupporter(bytes32 taskHash) external onlyCaller {\r\n        removeItemAddresses(taskHash);\r\n    }\r\n    function removeTask(bytes32 taskHash)external onlyCaller{\r\n        removeItem(taskHash);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/BridgeAdmin.sol\r\n\r\n\r\npragma solidity ^0.7.0;\r\n\r\ncontract BridgeAdmin is Container {\r\n    bytes32 internal constant OWNERHASH = 0x02016836a56b71f0d02689e69e326f4f4c1b9057164ef592671cf0d37c8040c0;\r\n    bytes32 internal constant OPERATORHASH = 0x46a52cf33029de9f84853745a87af28464c80bf0346df1b32e205fc73319f622;\r\n    bytes32 internal constant PAUSERHASH = 0x0cc58340b26c619cd4edc70f833d3f4d9d26f3ae7d5ef2965f81fe5495049a4f;\r\n    bytes32 internal constant STOREHASH = 0xe41d88711b08bdcd7556c5d2d24e0da6fa1f614cf2055f4d7e10206017cd1680;\r\n    bytes32 internal constant LOGICHASH = 0x397bc5b97f629151e68146caedba62f10b47e426b38db589771a288c0861f182;\r\n    uint256 internal constant MAXUSERNUM = 255;\r\n    bytes32[] private classHashArray;\r\n\r\n    uint256 internal ownerRequireNum;\r\n    uint256 internal operatorRequireNum;\r\n\r\n    event AdminChanged(string TaskType, string class, address oldAddress, address newAddress);\r\n    event AdminRequiredNumChanged(string TaskType, string class, uint256 previousNum, uint256 requiredNum);\r\n    event AdminTaskDropped(bytes32 taskHash);\r\n\r\n    modifier validRequirement(uint ownerCount, uint _required) {\r\n        require(ownerCount <= MaxItemAdressNum\r\n        && _required <= ownerCount\r\n        && _required > 0\r\n            && ownerCount > 0);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(itemAddressExists(OWNERHASH, msg.sender), \"only use owner to call\");\r\n        _;\r\n    }\r\n\r\n    function initAdmin(address[] memory _owners, uint _ownerRequired) internal validRequirement(_owners.length, _ownerRequired) {\r\n        for (uint i = 0; i < _owners.length; i++) {\r\n            addItemAddress(OWNERHASH, _owners[i]);\r\n        }\r\n        addItemAddress(PAUSERHASH,_owners[0]);// we need an init pauser\r\n        addItemAddress(LOGICHASH, address(0x0));\r\n        addItemAddress(STOREHASH, address(0x1));\r\n\r\n        classHashArray.push(OWNERHASH);\r\n        classHashArray.push(OPERATORHASH);\r\n        classHashArray.push(PAUSERHASH);\r\n        classHashArray.push(STOREHASH);\r\n        classHashArray.push(LOGICHASH);\r\n        ownerRequireNum = _ownerRequired;\r\n        operatorRequireNum = 2;\r\n    }\r\n\r\n    function classHashExist(bytes32 aHash) private view returns (bool) {\r\n        for (uint256 i = 0; i < classHashArray.length; i++)\r\n            if (classHashArray[i] == aHash) return true;\r\n        return false;\r\n    }\r\n\r\n    function getAdminAddresses(string memory class) public view returns (address[] memory) {\r\n        bytes32 classHash = getClassHash(class);\r\n        return getItemAddresses(classHash);\r\n    }\r\n\r\n    function getOwnerRequireNum() public view returns (uint256){\r\n        return ownerRequireNum;\r\n    }\r\n\r\n    function getOperatorRequireNum() public view returns (uint256){\r\n        return operatorRequireNum;\r\n    }\r\n\r\n    function resetRequiredNum(string memory class, uint256 requiredNum) public onlyOwner returns (bool){\r\n        bytes32 classHash = getClassHash(class);\r\n        require((classHash == OPERATORHASH) || (classHash == OWNERHASH), \"wrong class\");\r\n\r\n        bytes32 taskHash = keccak256(abi.encodePacked(\"resetRequiredNum\", class, requiredNum));\r\n        addItemAddress(taskHash, msg.sender);\r\n\r\n        if (getItemAddressCount(taskHash) >= ownerRequireNum) {\r\n            removeItem(taskHash);\r\n            uint256 previousNum = 0;\r\n            if (classHash == OWNERHASH) {\r\n                previousNum = ownerRequireNum;\r\n                ownerRequireNum = requiredNum;\r\n            }\r\n            else if (classHash == OPERATORHASH) {\r\n                previousNum = operatorRequireNum;\r\n                operatorRequireNum = requiredNum;\r\n            } else {\r\n                revert(\"wrong class\");\r\n            }\r\n            emit AdminRequiredNumChanged(\"resetRequiredNum\", class, previousNum, requiredNum);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function modifyAddress(string memory class, address oldAddress, address newAddress) internal onlyOwner returns (bool){\r\n        bytes32 classHash = getClassHash(class);\r\n        bytes32 taskHash = keccak256(abi.encodePacked(\"modifyAddress\", class, oldAddress, newAddress));\r\n        addItemAddress(taskHash, msg.sender);\r\n        if (getItemAddressCount(taskHash) >= ownerRequireNum) {\r\n            replaceItemAddress(classHash, oldAddress, newAddress);\r\n            emit AdminChanged(\"modifyAddress\", class, oldAddress, newAddress);\r\n            removeItem(taskHash);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function getClassHash(string memory class) private view returns (bytes32){\r\n        bytes32 classHash = keccak256(abi.encodePacked(class));\r\n        require(classHashExist(classHash), \"invalid class\");\r\n        return classHash;\r\n    }\r\n\r\n    function dropAddress(string memory class, address oneAddress) public onlyOwner returns (bool){\r\n        bytes32 classHash = getClassHash(class);\r\n        require(classHash != STOREHASH && classHash != LOGICHASH, \"wrong class\");\r\n        require(itemAddressExists(classHash, oneAddress), \"no such address exist\");\r\n\r\n        if (classHash == OWNERHASH)\r\n            require(getItemAddressCount(classHash) > ownerRequireNum, \"insuffience addresses\");\r\n\r\n        bytes32 taskHash = keccak256(abi.encodePacked(\"dropAddress\", class, oneAddress));\r\n        addItemAddress(taskHash, msg.sender);\r\n        if (getItemAddressCount(taskHash) >= ownerRequireNum) {\r\n            removeOneItemAddress(classHash, oneAddress);\r\n            emit AdminChanged(\"dropAddress\", class, oneAddress, oneAddress);\r\n            removeItem(taskHash);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function addAddress(string memory class, address oneAddress) public onlyOwner returns (bool){\r\n        bytes32 classHash = getClassHash(class);\r\n        require(classHash != STOREHASH && classHash != LOGICHASH, \"wrong class\");\r\n\r\n        bytes32 taskHash = keccak256(abi.encodePacked(\"addAddress\", class, oneAddress));\r\n        addItemAddress(taskHash, msg.sender);\r\n        if (getItemAddressCount(taskHash) >= ownerRequireNum) {\r\n            addItemAddress(classHash, oneAddress);\r\n            emit AdminChanged(\"addAddress\", class, oneAddress, oneAddress);\r\n            removeItem(taskHash);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function dropTask(bytes32 taskHash) public onlyOwner returns (bool){\r\n        removeItem(taskHash);\r\n        emit AdminTaskDropped(taskHash);\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v3.3.0\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File contracts/BridgeLogic.sol\r\n\r\n\r\npragma solidity ^0.7.0;\r\n\r\n\r\n\r\n\r\ncontract BridgeLogic {\r\n    using SafeMath for uint256;\r\n\r\n    string public constant name = \"BridgeLogic\";\r\n\r\n    bytes32 internal constant OPERATORHASH = 0x46a52cf33029de9f84853745a87af28464c80bf0346df1b32e205fc73319f622;\r\n    uint256 public constant TASKINIT = 0;\r\n    uint256 public constant TASKPROCESSING = 1;\r\n    uint256 public constant TASKCANCELLED = 2;\r\n    uint256 public constant TASKDONE = 3;\r\n    uint256 public constant WITHDRAWTASK = 1;\r\n\r\n    address private caller;\r\n    BridgeStorage private store;\r\n\r\n    constructor(address aCaller) {\r\n        caller = aCaller;\r\n    }\r\n\r\n    modifier onlyCaller(){\r\n        require(msg.sender == caller, \"only main contract can call\");\r\n        _;\r\n    }\r\n\r\n    modifier operatorExists(address operator) {\r\n        require(store.supporterExists(OPERATORHASH, operator), \"wrong operator\");\r\n        _;\r\n    }\r\n\r\n    function resetStoreLogic(address storeAddress) external onlyCaller {\r\n        store = BridgeStorage(storeAddress);\r\n    }\r\n\r\n    function getStoreAddress() public view returns(address) {\r\n        return address(store);\r\n    }\r\n\r\n    function supportTask(uint256 taskType, bytes32 taskHash, address oneAddress, uint256 requireNum) external onlyCaller returns(uint256){\r\n        require(!store.supporterExists(taskHash, oneAddress), \"supporter already exists\");\r\n        (uint256 theTaskType,uint256 theTaskStatus,uint256 theSupporterNum) = store.getTaskInfo(taskHash);\r\n        require(theTaskStatus < TASKDONE, \"wrong status\");\r\n\r\n        if (theTaskStatus != TASKINIT)\r\n            require(theTaskType == taskType, \"task type not match\");\r\n        store.addSupporter(taskHash, oneAddress);\r\n        theSupporterNum++;\r\n        if(theSupporterNum >= requireNum)\r\n            theTaskStatus = TASKDONE;\r\n        else\r\n            theTaskStatus = TASKPROCESSING;\r\n        store.setTaskInfo(taskHash, taskType, theTaskStatus);\r\n        return theTaskStatus;\r\n    }\r\n\r\n    function cancelTask(bytes32 taskHash)  external onlyCaller returns(uint256) {\r\n        (uint256 theTaskType,uint256 theTaskStatus,uint256 theSupporterNum) = store.getTaskInfo(taskHash);\r\n        require(theTaskStatus == TASKPROCESSING, \"wrong status\");\r\n        if(theSupporterNum > 0) store.removeAllSupporter(taskHash);\r\n        theTaskStatus = TASKCANCELLED;\r\n        store.setTaskInfo(taskHash, theTaskType, theTaskStatus);\r\n        return theTaskStatus;\r\n    }\r\n    function removeTask(bytes32 taskHash)  external onlyCaller {\r\n        store.removeTask(taskHash);\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n// File contracts/ERC20Sample.sol\r\n\r\npragma solidity ^0.7.0;\r\n\r\n\r\nabstract contract ERC20Template is IERC20 {\r\n\r\n    function mint(address account, uint256 amount) public{\r\n    }\r\n    function burn(address account , uint256 amount) public{\r\n    }\r\n    function redeem(address account, uint256 amount)public {\r\n    }\r\n    function issue(address account, uint256 amount) public {\r\n    }\r\n}\r\n\r\n\r\n// File contracts/Bridge.sol\r\n\r\n\r\npragma solidity ^0.7.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Bridge is BridgeAdmin, Pausable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    string public constant name = \"Bridge\";\r\n\r\n    BridgeLogic private logic;\r\n\r\n    event DepositNative(address indexed from, uint256 value, string targetAddress, string chain);\r\n    event DepositToken(address indexed from, uint256 value, address indexed token, string targetAddress, string chain, uint256 nativeValue);\r\n    event WithdrawingNative(address indexed to, uint256 value, string proof);\r\n    event WithdrawingToken(address indexed to, address indexed token, uint256 value, string proof);\r\n    event WithdrawDoneNative(address indexed to, uint256 value, string proof);\r\n    event WithdrawDoneToken(address indexed to, address indexed token, uint256 value, string proof);\r\n\r\n    modifier onlyOperator() {\r\n        require(itemAddressExists(OPERATORHASH, msg.sender), \"wrong operator\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyPauser() {\r\n        require(itemAddressExists(PAUSERHASH, msg.sender), \"wrong pauser\");\r\n        _;\r\n    }\r\n\r\n    modifier positiveValue(uint _value) {\r\n        require(_value > 0, \"value need > 0\");\r\n        _;\r\n    }\r\n\r\n\r\n    constructor(address[] memory _owners, uint _ownerRequired) {\r\n        initAdmin(_owners, _ownerRequired);\r\n\r\n    }\r\n\r\n    function depositNative(string memory _targetAddress, string memory  chain) public payable {\r\n        emit DepositNative(msg.sender, msg.value, _targetAddress,chain);\r\n    }\r\n\r\n    function depositToken(address _token, uint value, string memory _targetAddress, string memory chain) public payable returns (bool){\r\n        //deposit(address token, address _from, uint256 _value)\r\n        bool res = depositTokenLogic(_token,  msg.sender, value);\r\n        emit DepositToken(msg.sender, value, _token, _targetAddress, chain, msg.value);\r\n        return res;\r\n    }// \r\n\r\n    function withdrawNative(address payable to, uint value, string memory proof, bytes32 taskHash) public\r\n    onlyOperator\r\n    whenNotPaused\r\n    positiveValue(value)\r\n    returns(bool)\r\n    {\r\n        require(address(this).balance >= value, \"not enough native token\");\r\n        require(taskHash == keccak256((abi.encodePacked(to,value,proof))),\"taskHash is wrong\");\r\n        uint256 status = logic.supportTask(logic.WITHDRAWTASK(), taskHash, msg.sender, operatorRequireNum);\r\n\r\n        if (status == logic.TASKPROCESSING()){\r\n            emit WithdrawingNative(to, value, proof);\r\n        }else if (status == logic.TASKDONE()) {\r\n            emit WithdrawingNative(to, value, proof);\r\n            emit WithdrawDoneNative(to, value, proof);\r\n            to.transfer(value);\r\n            logic.removeTask(taskHash);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function withdrawToken(address _token, address to, uint value, string memory proof, bytes32 taskHash) public\r\n    onlyOperator\r\n    whenNotPaused\r\n    positiveValue(value)\r\n    returns (bool)\r\n    {\r\n        require(taskHash == keccak256((abi.encodePacked(to,value,proof))),\"taskHash is wrong\");\r\n        uint256 status = logic.supportTask(logic.WITHDRAWTASK(), taskHash, msg.sender, operatorRequireNum);\r\n\r\n        if (status == logic.TASKPROCESSING()){\r\n            emit WithdrawingToken(to, _token, value, proof);\r\n        }else if (status == logic.TASKDONE()) {\r\n            // withdraw(address token, address _to, address _value)\r\n            bool res = withdrawTokenLogic( _token, to, value);\r\n\r\n            emit WithdrawingToken(to, _token, value, proof);\r\n            emit WithdrawDoneToken(to, _token, value, proof);\r\n            logic.removeTask(taskHash);\r\n            return res;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function modifyAdminAddress(string memory class, address oldAddress, address newAddress) public whenPaused {\r\n        require(newAddress != address(0x0), \"wrong address\");\r\n        bool flag = modifyAddress(class, oldAddress, newAddress);\r\n        if(flag){\r\n            bytes32 classHash = keccak256(abi.encodePacked(class));\r\n            if(classHash == LOGICHASH){\r\n                logic = BridgeLogic(newAddress);\r\n            }else if(classHash == STOREHASH){\r\n                logic.resetStoreLogic(newAddress);\r\n            }\r\n        }\r\n    }\r\n    function getLogicAddress() public view returns(address){\r\n        return address(logic);\r\n    }\r\n\r\n    function getStoreAddress() public view returns(address){\r\n        return logic.getStoreAddress();\r\n    }\r\n\r\n    function pause() public onlyPauser {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() public onlyPauser {\r\n        _unpause();\r\n    }\r\n\r\n\r\n    function transferToken(address token, address to , uint256 value) onlyPauser external{\r\n        IERC20 atoken = IERC20(token);\r\n        bool success = atoken.transfer(to,value);\r\n    }\r\n\r\n\r\n    function setDepositSelector(address token, string memory method, bool _isValueFirst) onlyOperator external{\r\n        depositSelector[token] = assetSelector(method,_isValueFirst);\r\n    }\r\n\r\n    function setWithdrawSelector(address token, string memory method, bool _isValueFirst) onlyOperator external{\r\n        withdrawSelector[token] = assetSelector(method,_isValueFirst);\r\n    }\r\n\r\n\r\n    struct assetSelector{\r\n        string selector;\r\n        bool isValueFirst;\r\n    }\r\n\r\n    mapping (address=>assetSelector)  public depositSelector;\r\n    mapping (address=> assetSelector) public withdrawSelector;\r\n\r\n    function depositTokenLogic(address token, address _from, uint256 _value) internal returns(bool){\r\n        bool status = false;\r\n        bytes memory returnedData;\r\n        if (bytes(depositSelector[token].selector).length == 0){\r\n            (status,returnedData)= token.call(abi.encodeWithSignature(\"transferFrom(address,address,uint256)\",_from,this,_value));\r\n        }\r\n        else{\r\n            assetSelector memory aselector = depositSelector[token];\r\n            if (aselector.isValueFirst){\r\n                (status, returnedData) = token.call(abi.encodeWithSignature(aselector.selector,_value,_from));\r\n            }\r\n            else {\r\n                (status,returnedData)= token.call(abi.encodeWithSignature(aselector.selector,_from,_value));\r\n            }\r\n        }\r\n        require(\r\n            status && (returnedData.length == 0 || abi.decode(returnedData, (bool))),\r\n            ' transfer failed');\r\n        return true;\r\n    }\r\n\r\n    function withdrawTokenLogic(address token, address _to, uint256 _value) internal returns(bool){\r\n        bool status = false;\r\n        bytes memory returnedData;\r\n        if (bytes(withdrawSelector[token].selector).length==0){\r\n            (status,returnedData)= token.call(abi.encodeWithSignature(\"transfer(address,uint256)\",_to,_value));\r\n        }\r\n        else{\r\n            assetSelector memory aselector = withdrawSelector[token];\r\n            if (aselector.isValueFirst){\r\n                (status,returnedData) = token.call(abi.encodeWithSignature( aselector.selector,_value,_to));\r\n            }\r\n            else {\r\n                (status,returnedData)= token.call(abi.encodeWithSignature(aselector.selector,_to,_value));\r\n            }\r\n        }\r\n\r\n        require(status && (returnedData.length == 0 || abi.decode(returnedData, (bool))),'withdraw failed');\r\n        return true;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_ownerRequired\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"TaskType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"class\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"TaskType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"class\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requiredNum\",\"type\":\"uint256\"}],\"name\":\"AdminRequiredNumChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"taskHash\",\"type\":\"bytes32\"}],\"name\":\"AdminTaskDropped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"targetAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"chain\",\"type\":\"string\"}],\"name\":\"DepositNative\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"targetAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"chain\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nativeValue\",\"type\":\"uint256\"}],\"name\":\"DepositToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"proof\",\"type\":\"string\"}],\"name\":\"WithdrawDoneNative\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"proof\",\"type\":\"string\"}],\"name\":\"WithdrawDoneToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"proof\",\"type\":\"string\"}],\"name\":\"WithdrawingNative\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"proof\",\"type\":\"string\"}],\"name\":\"WithdrawingToken\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"class\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"oneAddress\",\"type\":\"address\"}],\"name\":\"addAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_targetAddress\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"chain\",\"type\":\"string\"}],\"name\":\"depositNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositSelector\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"selector\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isValueFirst\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_targetAddress\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"chain\",\"type\":\"string\"}],\"name\":\"depositToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"class\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"oneAddress\",\"type\":\"address\"}],\"name\":\"dropAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"taskHash\",\"type\":\"bytes32\"}],\"name\":\"dropTask\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"class\",\"type\":\"string\"}],\"name\":\"getAdminAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLogicAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOperatorRequireNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwnerRequireNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStoreAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"class\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"modifyAdminAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"class\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"requiredNum\",\"type\":\"uint256\"}],\"name\":\"resetRequiredNum\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"method\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_isValueFirst\",\"type\":\"bool\"}],\"name\":\"setDepositSelector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"method\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_isValueFirst\",\"type\":\"bool\"}],\"name\":\"setWithdrawSelector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"proof\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"taskHash\",\"type\":\"bytes32\"}],\"name\":\"withdrawNative\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawSelector\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"selector\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isValueFirst\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"proof\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"taskHash\",\"type\":\"bytes32\"}],\"name\":\"withdrawToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Bridge","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000d2b75596a63728d84d341f2e3ce6ddae66810128","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://175fd30761d46f49bdd013683f3d26a07b057927b3f48644cc55d126254c0718"}]}