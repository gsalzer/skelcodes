{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.22 <0.6.0;\r\n\r\ncontract YFIE\r\n{\r\n    string public standard = 'http://www.yfie.cc/';\r\n    string public name=\"YFIE\"; \r\n    string public symbol=\"YFIE\";\r\n    uint8 public decimals = 18; \r\n    uint256 public totalSupply=83000 ether; \r\n    \r\n    address st_owner;\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n    function transfer(address _to, uint256 _value) public ;\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success) ;\r\n}\r\n\r\ncontract YFIE_MINER{\r\n\r\n    string public standard = 'http://yfie.cc/';\r\n    string public name=\"ETHE\"; \r\n    string public symbol=\"ETHE\";\r\n    uint8 public decimals = 18; \r\n    uint256 public totalSupply=0;\r\n\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n    function _transfer(address _from, address _to, uint256 _value) internal {\r\n      require(_to != address(0x0));\r\n      require(balanceOf[_from] >= _value);\r\n      require(balanceOf[_to] + _value > balanceOf[_to]);\r\n      uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n      balanceOf[_from] -= _value;\r\n      balanceOf[_to] += _value;\r\n      emit Transfer(_from, _to, _value);\r\n      assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n    }\r\n    \r\n    function transfer(address _to, uint256 _value) public {\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success){\r\n        require(_value <= allowance[_from][msg.sender]);   // Check allowance\r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n    \r\n\r\n    YFIE public token;\r\n    struct OWNER{\r\n        address owner;\r\n        bool agreest;\r\n        bool exit;\r\n    }\r\n    struct VOTE{\r\n        address put_eth_addr;\r\n        address sponsor;\r\n        uint put_eth_value;\r\n        OWNER[3] owner;\r\n    }\r\n\r\n    SYSTEM public sys;\r\n    address admin;\r\n    VOTE public owner;\r\n    event input_eth(address indexed addr,uint value);\r\n    \r\n    constructor () public{\r\n        \r\n        token = YFIE(0xA1B3E61c15b97E85febA33b8F15485389d7836Db);\r\n        \r\n        admin = msg.sender;\r\n        sys.stop_mine_time -=1;\r\n        sys.eth_to_yfie = 10000;\r\n        sys.out_eth_rate = 30;\r\n        \r\n        owner.owner[0].owner = 0xA1B3E61c15b97E85febA33b8F15485389d7836Db;\r\n        owner.owner[1].owner = 0x3cB77a6b17631385b6332B3f168174B12981a8a5;\r\n        owner.owner[2].owner = 0x90420e8F26c58721bF8f4281653AC8d5DE20b94a;\r\n    }\r\n    function ()external payable{\r\n        emit input_eth(msg.sender,msg.value);\r\n    }\r\n    modifier onlyOwner(){\r\n        require(msg.sender == owner.owner[0].owner || msg.sender == owner.owner[1].owner || msg.sender == owner.owner[2].owner);\r\n        _;\r\n    }\r\n    function set_agree(address addr)internal{\r\n        for(uint i = 0;i <3;i++){\r\n            if(addr == owner.owner[i].owner)owner.owner[i].agreest = true;\r\n        }\r\n    } \r\n    function take_out_eth(address addr,uint value)public onlyOwner {\r\n        \r\n        if(owner.put_eth_addr == address(0x0) && addr !=address(0x0)){\r\n            owner.put_eth_addr = addr;\r\n            owner.sponsor = msg.sender;\r\n            owner.put_eth_value = value;\r\n        }\r\n        set_agree(msg.sender);\r\n        \r\n        if(owner.owner[0].agreest == true && owner.owner[1].agreest == true && owner.owner[2].agreest== true){\r\n            uint number = owner.put_eth_value <= address(this).balance ? owner.put_eth_value:address(this).balance;\r\n            address payable e=address(uint160(owner.put_eth_addr));\r\n            e.transfer(number);\r\n            veto();\r\n        }\r\n    }\r\n    function veto()public onlyOwner{\r\n        owner.put_eth_addr =address(0x0);\r\n        owner.sponsor = address(0x0);\r\n        owner.put_eth_value = 0;\r\n        for(uint i=0;i<3;i++){\r\n            owner.owner[i].agreest = false;\r\n        }\r\n    }\r\n    function Withdraw_Money_Exit(uint value)public{\r\n        take_out_eth(msg.sender,value);\r\n        if(owner.owner[0].agreest == true && owner.owner[1].agreest == true && owner.owner[2].agreest== true){\r\n        \r\n            for(uint i=0;i<3;i++){\r\n                if(owner.owner[i].owner == owner.sponsor){\r\n                    owner.owner[i].exit = true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    function set_new_owner(address new_owner,uint index)public{\r\n        require(msg.sender == admin);\r\n        owner.owner[index].exit = false;\r\n        owner.owner[index].owner = new_owner;\r\n    }\r\n    function show_owner()public view returns(\r\n                address,bool ,\r\n                address,bool ,\r\n                address,bool){\r\n        return( owner.owner[0].owner,owner.owner[0].agreest,\r\n                owner.owner[1].owner,owner.owner[1].agreest,\r\n                owner.owner[2].owner,owner.owner[2].agreest\r\n               );\r\n    }\r\n\r\n    \r\n    mapping(address => USER) public users;\r\n    struct SYSTEM{\r\n        uint stop_mine_time;\r\n        uint already_take_out;\r\n        uint max_mine;\r\n        uint eth_to_yfie;\r\n        uint total_mine;\r\n        uint out_eth_rate;\r\n    }\r\n    struct USER{\r\n        uint yfie;\r\n        uint eth;\r\n        uint eth_yfie;\r\n        uint in_time;\r\n    }\r\n\r\n    function send_yfie(address addr,uint value)public onlyOwner{\r\n        token.transfer(addr,value);\r\n    }\r\n\r\n    function input_yfie_mine(uint value)public{\r\n        uint my_token=token.balanceOf(address(this));\r\n        token.transferFrom(msg.sender,address(this),value);\r\n        require(my_token + value == token.balanceOf(address(this)),'Transfer failure,Authorization required');\r\n        sys.max_mine += value;\r\n    }\r\n    //计算产矿量\r\n    function compute_mine(address addr)public view returns(uint){\r\n        if(users[addr].in_time ==0 || users[addr].in_time >= now)return 0;\r\n        uint sub_time=now < sys.stop_mine_time?now : sys.stop_mine_time;\r\n        require(sub_time > users[addr].in_time);\r\n        sub_time=sub_time - users[addr].in_time;\r\n        uint n = sub_time / 86400;\r\n        uint profit;\r\n        if(n <=51){\r\n            \r\n            if(n>0){\r\n                profit=50+n*(n-1)/2; \r\n                profit = users[addr].yfie /10000 *profit;\r\n            }\r\n            \r\n            profit =profit + users[addr].yfie/10000 * (50+n) / 86400 *(now % 86400);\r\n        }\r\n        else{\r\n            profit = users[addr].yfie /10000 *1325; \r\n            n=n-51;\r\n            profit = profit + users[addr].yfie / 100 * n;\r\n            profit = profit + users[addr].yfie/8640000 *(now % 86400);\r\n        }\r\n        return profit;\r\n    }\r\n  \r\n    function out_mine_for_eth()public payable{\r\n        take_out_mine(msg.value);\r\n    }\r\n \r\n    function out_mine_for_ethe(uint value)public{\r\n        require(value <= balanceOf[msg.sender]);\r\n        balanceOf[msg.sender]-=value;\r\n        take_out_mine(value);\r\n    }\r\n    function take_out_mine(uint value)private{\r\n        USER memory u=users[msg.sender];\r\n        require(value >= u.eth);\r\n        \r\n        uint profit=compute_mine(msg.sender);\r\n     \r\n        require(profit + u.yfie + u.eth_yfie> token.balanceOf(address(this)));\r\n     \r\n        sys.already_take_out += profit;\r\n        require(u.yfie <= sys.total_mine);\r\n        sys.total_mine -= u.yfie;\r\n        token.transfer(msg.sender,profit + u.yfie + u.eth_yfie);\r\n        u.yfie =0;\r\n        u.eth_yfie=0;\r\n        u.eth=0;\r\n        u.in_time = 0;\r\n        users[msg.sender]=u;\r\n    }\r\n   \r\n    function input_for_mine(uint yfie)public {\r\n        USER memory user= users[msg.sender];\r\n        require(sys.stop_mine_time > now);\r\n       \r\n       if(sys.already_take_out > sys.max_mine/5*4){\r\n           sys.stop_mine_time =sys.stop_mine_time > now?now:sys.stop_mine_time;\r\n       }\r\n       //2、\r\n       uint eth = yfie /sys.eth_to_yfie * 50;\r\n       uint value = yfie /2;\r\n       eth = eth /100 * sys.out_eth_rate;\r\n\r\n       \r\n       totalSupply += eth;\r\n       balanceOf[msg.sender]+=eth;\r\n      \r\n       uint my_token=token.balanceOf(address(this));\r\n       token.transferFrom(msg.sender,address(this),yfie);\r\n       require(my_token + yfie == token.balanceOf(address(this)),'Transfer failure,Authorization required');\r\n       \r\n     \r\n       sys.total_mine += value;\r\n      \r\n       user.yfie += value;\r\n       user.eth += eth;\r\n       user.eth_yfie += value;\r\n       user.in_time = now;\r\n       \r\n       users[msg.sender]=user;\r\n    }\r\n   \r\n    function get_ETHE_from_eth()public payable{\r\n        require(msg.value >0);\r\n        totalSupply += msg.value;\r\n        balanceOf[msg.sender] += msg.value;\r\n    }\r\n    function set_eth_to_yfie(uint value)public onlyOwner{\r\n        sys.eth_to_yfie=value;\r\n    }\r\n    function set_out_eth_rate(uint value)public onlyOwner{\r\n        sys.out_eth_rate = value;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"new_owner\",\"type\":\"address\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"set_new_owner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"set_eth_to_yfie\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"take_out_eth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"out_mine_for_eth\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"compute_mine\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"get_ETHE_from_eth\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Withdraw_Money_Exit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"send_yfie\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"put_eth_addr\",\"type\":\"address\"},{\"name\":\"sponsor\",\"type\":\"address\"},{\"name\":\"put_eth_value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"yfie\",\"type\":\"uint256\"},{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"eth_yfie\",\"type\":\"uint256\"},{\"name\":\"in_time\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"yfie\",\"type\":\"uint256\"}],\"name\":\"input_for_mine\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sys\",\"outputs\":[{\"name\":\"stop_mine_time\",\"type\":\"uint256\"},{\"name\":\"already_take_out\",\"type\":\"uint256\"},{\"name\":\"max_mine\",\"type\":\"uint256\"},{\"name\":\"eth_to_yfie\",\"type\":\"uint256\"},{\"name\":\"total_mine\",\"type\":\"uint256\"},{\"name\":\"out_eth_rate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"set_out_eth_rate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"show_owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"input_yfie_mine\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"out_mine_for_ethe\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"veto\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"input_eth\",\"type\":\"event\"}]","ContractName":"YFIE_MINER","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://f1c84a894249da4b2896671367f23f4812f2f4456d8b68fccbfb7b8538a709c3"}]}