{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/libraries/SafeMath.sol\r\n\r\n// SPDX-License-Identifier: GPL-3.0-only\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/ERC1822/Proxiable.sol\r\n\r\n/**\r\n* @title Proxiable\r\n* @dev Etherland - EIP-1822 Proxiable contract implementation for ELAND ERC20\r\n* @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1822.md\r\n*/\r\ncontract Proxiable {\r\n    // Code position in storage is keccak256(\"PROXIABLE\") = \"0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7\"\r\n    function updateCodeAddress(address newAddress) internal {\r\n        require(\r\n            bytes32(0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7) == Proxiable(newAddress).proxiableUUID(),\r\n            \"Not compatible\"\r\n        );\r\n        assembly { // solium-disable-line\r\n            sstore(0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7, newAddress)\r\n        }\r\n    }\r\n    function proxiableUUID() public pure returns (bytes32) {\r\n        return 0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7;\r\n    }\r\n}\r\n\r\n// File: contracts/LANDID/iLANDID.sol\r\n\r\n/**\r\n* @title Etherland ERC721 LANDID administrator access granting system\r\n*/\r\ninterface iLANDID {\r\n    function adminRightsOf(address _admin) external view returns(int16);\r\n}\r\n\r\n// File: contracts/Storage.sol\r\n\r\ncontract Storage {\r\n\r\n    // \r\n    // Ownable.sol\r\n    //\r\n    /**\r\n    * @dev Etherland owner address\r\n    */\r\n    address public owner;\r\n    /**\r\n    * @dev Generated random salt acting in the safecheck mechanism when renouncing contract ownership \r\n    */\r\n    bytes32 internal relinquishmentToken;\r\n    /**\r\n    * @dev Standalone mode\r\n    * @notice see renounceOwnership method's notice below\r\n    */\r\n    bool public standalone = false;\r\n\r\n    //\r\n    // ERC20.sol\r\n    //\r\n    mapping (address => uint256) internal _balances;\r\n    mapping (address => mapping (address => uint256)) internal _allowances;\r\n    uint256 internal _totalSupply;\r\n    string internal _name;\r\n    string internal _symbol;\r\n    uint8 internal _decimals;\r\n\r\n    //\r\n    // ERC20Capped.sol\r\n    //\r\n    uint256 internal _cap;\r\n    // Instance of Etherland LANDID NFT Administrator rights verifier\r\n\r\n    //\r\n    // LandRegistry.sol\r\n    //\r\n    iLANDID landid;\r\n    // address of Etherland LANDID NFT\r\n    address public landidNftAddress;\r\n    // address of the wallet dedicated to land registration\r\n    address internal landRegistration;\r\n    // Land registry can be opened or closed\r\n    bool public landRegistryOpened = false;\r\n    // Land registry rights offers\r\n    uint[] public recordRightsOffers;\r\n    // Schema defining a Right to register a new land\r\n    struct RecordRight {\r\n        // the block timestamp of the record request\r\n        uint time;\r\n        // the tokenId representing the resultant minted LANDID NFT token id\r\n        uint tokenId;\r\n        // The new land record right which was purchased in ELAND. Registration rights are considered available when the tokenId is LESS than 1\r\n        uint right;\r\n    }\r\n    // Land registry record rights tracking\r\n    mapping (address => RecordRight[]) public registryRecordRights;\r\n\r\n    //\r\n    // ERC20Mintable.sol\r\n    //\r\n    bool _mintingFinished = false;\r\n\r\n    // \r\n    // Etherland.sol\r\n    //\r\n    /**\r\n    * @dev Contact initialization state\r\n    * initialized state is set upon construction\r\n    * MUST be initialized to be valid\r\n    */\r\n    bool public initialized = false;\r\n    /**\r\n    * @dev Etherland Wallets\r\n    */\r\n    address public team;\r\n    address public reserve;\r\n}\r\n\r\n// File: contracts/Context.sol\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context is Storage {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\n// File: contracts/Ownable.sol\r\n\r\n/**\r\n* @title Ownable\r\n* @dev The Ownable contract has an owner address, and provides basic authorization control\r\n* functions, this simplifies the implementation of \"user permissions\".\r\n*/\r\ncontract Ownable is Context {\r\n\r\n    event OwnershipRenounced(address indexed previousOwner);\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner or if the contract has standalone state\r\n    */\r\n    modifier onlyOwner() {\r\n        require(!standalone, 'denied : owner actions are locked when contract is running standalone');\r\n        require(_msgSender() != address(0), \"denied : zero address has no rights\");\r\n        require(_msgSender() == owner, \"denied : method access is restricted to the contract owner\");\r\n        _;\r\n    }\r\n\r\n    function getRelinquishmentToken() public onlyOwner view returns (bytes32 _relinquishmentToken) {\r\n        return relinquishmentToken;\r\n    }\r\n\r\n    /**\r\n    * IRREVERSIBLE ACTION\r\n    * @dev Allows the current owner to definitively and safely relinquish control of the contract.\r\n    * @notice once owner renounces to its ownership, the contract runs in standalone mode meaning that : \r\n    *   - the contract is left without any owner\r\n    *   - no other owner will ever be set for the remaining contract lifetime\r\n    *   - no one will no longer ever have any access to owner-restricted methods\r\n    */\r\n    function renounceOwnership(bytes32 _relinquishmentToken) public onlyOwner {\r\n        require(\r\n            ((relinquishmentToken != bytes32(0)) && (relinquishmentToken == _relinquishmentToken)), \r\n            'denied : a relinquishment token must be pre-set calling the preRenounceOwnership method');\r\n        // require(landRegistryOpened, 'Land registry must be opened to renounce ownership');\r\n        emit OwnershipRenounced(owner);\r\n        standalone = true;\r\n        owner = address(0);\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to relinquish control of the contract.\r\n    * @return _relinquishmentToken : auto generated bytes32 key \r\n    * @notice generating this key allows the contract owner to pass it to the renounceOwnership method in order to set the contract as standalone\r\n    */\r\n    function preRenounceOwnership() public onlyOwner returns(bytes32 _relinquishmentToken) {\r\n        uint rand = uint(keccak256(abi.encodePacked(block.timestamp, uint8(_msgSender()))));\r\n        bytes32 salt = bytes32(rand);\r\n        relinquishmentToken = salt;\r\n        _relinquishmentToken = salt;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param _newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        _transferOwnership(_newOwner);\r\n    }\r\n\r\n    /**\r\n    * @dev Transfers control of the contract to a newOwner.\r\n    * @param _newOwner The address to transfer ownership to.\r\n    */\r\n    function _transferOwnership(address _newOwner) internal {\r\n        require(_newOwner != address(0), \"the new owner can't be the zero address\");\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/ERC20/IERC20.sol\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/ERC20/ERC20.sol\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Ownable, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: can't burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { \r\n        bool hasFrom = from != address(0);\r\n        bool hasTo = to != address(0);\r\n        require((hasFrom || hasTo), 'Must provide at least one address to transfer');\r\n        if(hasFrom && hasTo) {\r\n            require(_balances[from] >= amount, 'not enough funds to transfer');\r\n        }\r\n        else if (!hasFrom) {\r\n            // require(!mintingFinished, 'minting is finished');\r\n            require(totalSupply().add(amount) <= _cap, \"ERC20Capped: cap exceeded\");\r\n\r\n        }\r\n        else if (!hasTo) {\r\n            require(_balances[from] >= amount, 'not enough funds to burn');\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/ERC20/ERC20Capped.sol\r\n\r\n/**\r\n * @dev Extension of {ERC20} that adds a cap to the supply of tokens.\r\n */\r\ncontract ERC20Capped is ERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    // uint256 private _cap;\r\n\r\n    /**\r\n     * @dev Sets the value of the `cap`. This value is immutable, it can only be\r\n     * set once during construction.\r\n     */\r\n    function setImmutableCap(uint256 cap_) internal {\r\n        require(cap() == 0, 'cap value is immutable and is already set to 1 Billion ELAND');\r\n        require(cap_ > 0, \"cap must be higher than 0\");\r\n        _cap = cap_;\r\n    }\r\n\r\n    /**\r\n    * @dev Cap that is set on the total token supply\r\n    *   Represents the maximum amount of tokens the contract will ever mint \r\n    * @notice cap value is 1 000 000 000 (1 Billion) ELAND tokens and are all pre-minted upon contract construction\r\n    */\r\n    function cap() public view returns (uint256) {\r\n        return _cap;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/ERC20/ERC20Burnable.sol\r\n\r\n/**\r\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\r\n * tokens and those that they have an allowance for, in a way that can be\r\n * recognized off-chain (via event analysis).\r\n */\r\ncontract ERC20Burnable is ERC20Capped {\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from the caller.\r\n     *\r\n     * See {ERC20-_burn}.\r\n     */\r\n    function burn(uint256 amount) public virtual {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\r\n     * allowance.\r\n     *\r\n     * See {ERC20-_burn} and {ERC20-allowance}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have allowance for ``accounts``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function burnFrom(address account, uint256 amount) public virtual {\r\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \"ERC20: burn amount exceeds allowance\");\r\n\r\n        _approve(account, _msgSender(), decreasedAllowance);\r\n        _burn(account, amount);\r\n    }\r\n}\r\n\r\n// File: contracts/ERC20/ERC20Mintable.sol\r\n\r\n/**\r\n* @title Mintable token\r\n* @dev Simple ERC20 Token Mintable implementation\r\n* @notice will be used only once on contrat construction, then minting MUST be automatically terminated \r\n*/\r\ncontract ERC20Mintable is ERC20Burnable {\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n    * @dev Minting event for Etherland *MUST* fire only once by supply partition (see Etherland.sol `init` function called when migrating\r\n    */\r\n    event Mint(address indexed to, uint256 amount);\r\n\r\n    function mintingFinished() public view returns(bool){\r\n        return _mintingFinished;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to internally mint tokens\r\n    * @param _to The address that will receive the minted tokens.\r\n    * @param _amount The amount of tokens to mint.\r\n    * @return A boolean that indicates if the operation was successful.\r\n    * @notice this method is called only once in Etherland contract lifetime as minting is terminated upon initial contract migration on chain\r\n    */\r\n    function mint(\r\n        address _to,\r\n        uint256 _amount\r\n    )\r\n        internal\r\n        returns (bool)\r\n    {\r\n        require(mintingFinished() == false, 'ERC20Mintable : Minting is finished');\r\n        _mint(_to, _amount);\r\n        Mint(_to, _amount);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/LANDID/LandRegistry.sol\r\n\r\n/**\r\n * @title Land Registry\r\n *\r\n * @dev Etherland - Decentralized Land Registration Protocol\r\n *  Allows ELAND owners to register lands in the Etherland eco-system by minting Etherland ERC721 LANDID NFT\r\n *\r\n * @author Mathieu Lecoq\r\n *  december 20th 2020 \r\n *\r\n * @dev Property\r\n *  all rights are reserved to Etherland ltd\r\n*/\r\ncontract LandRegistry is ERC20Mintable {\r\n\r\n    modifier isNftAdmin() {\r\n        landid = iLANDID(landidNftAddress);\r\n        int16 adminRight = landid.adminRightsOf(_msgSender());\r\n        require((adminRight > 0) && (adminRight < 3), 'denied : restricted to LANDID NFT admins');\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allow any NFT admin to set public prices for record rights\r\n    * @param _indexedRecordOffers Array of indexed public ELAND prices of record rights\r\n    * @return boolean indicating operation success/failure\r\n    */\r\n    function setRecordRightsOffers(uint[] memory _indexedRecordOffers) public isNftAdmin returns (bool) {\r\n        recordRightsOffers = _indexedRecordOffers;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Let owner open land registry to allow ELAND owners register new lands\r\n    * @return boolean indicating operation success/failure\r\n    */\r\n    function openLandRegistry() public isNftAdmin returns (bool) {\r\n        landRegistryOpened = true;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Let owner close land registry to avoid ELAND owners register new lands\r\n    * @return boolean indicating operation success/failure\r\n    */\r\n    function closeLandRegistry() public isNftAdmin returns (bool) {\r\n        landRegistryOpened = false;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Allow ELAND owners to mint LANDID automatically or not depending on current mode\r\n    * @param recordIndex the index of record right offer to give corresponding to `recordRightsOffers` indexes\r\n    * @return boolean indicating operation success/failure\r\n    */\r\n    function registerLand(uint recordIndex) public returns (bool) {\r\n        require(landRegistryOpened && (landRegistration != address(0)), \"denied : can't register new land for now\");\r\n\r\n        uint recordPrice = recordRightsOffers[recordIndex];\r\n        require(recordPrice > 0, 'denied : no preset price for provided record right');\r\n\r\n        bool transferred = transfer(landRegistration, recordPrice);\r\n        require(transferred, 'denied : value corresponding to requested record right price has not been transferred');\r\n\r\n        RecordRight memory recordRight;\r\n        recordRight.time = block.timestamp;\r\n        recordRight.right = recordIndex;\r\n\r\n        // store record right\r\n        registryRecordRights[_msgSender()].push(recordRight);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Assert that a RecordRight is valid and can be consumed (has no attached tokenId and has a valid block.timestamp)\r\n    * @param time a valid block.timestamp corresponding to the time of the record request\r\n    * @param tokenId the LANDID NFT tokenId attached to the tested RecordRight \r\n    *       - 0 means available\r\n    *       - any other value means that the right has already been consumed and that RecordRight is invalid\r\n    * @return boolean indicating validity / availability of the record right\r\n    */\r\n    function validRecordRight(uint time, uint tokenId) internal pure returns(bool) {\r\n        return(\r\n            (time > 0)\r\n            && (tokenId == 0)\r\n        );\r\n    }\r\n\r\n    /**\r\n    * @dev Allow LANDID NFT administrators to consume a registry record right of an owner indicating minting of the record request related NFT\r\n    * @param _owner address of the RecordRight owner\r\n    * @param recordIndex the index of record right offer that has been paid by _owner (must correspond to a `recordRightsOffers` index)\r\n    * @param tokenId the LANDID NFT tokenId attached to attach to the first available/matching RecordRight \r\n    * @return boolean indicating if valid target right for `recordIndex` has been found and consumed\r\n    */\r\n    function consumeRecordRight(address _owner, uint recordIndex, uint tokenId) public isNftAdmin returns (bool) {\r\n        RecordRight[] memory ownerRecordRights = registryRecordRights[_owner];\r\n        require(ownerRecordRights.length > 0, 'denied : no record right found for provided address');\r\n\r\n        bool consumed = false;\r\n\r\n        for (uint i = 0; i < ownerRecordRights.length; i++) {\r\n            RecordRight memory recordRight = ownerRecordRights[i];\r\n            if (\r\n                consumed == false\r\n                && recordRight.right == recordIndex\r\n                && validRecordRight(recordRight.time, recordRight.tokenId)\r\n            ) {\r\n                // consume right\r\n                recordRight.tokenId = tokenId;\r\n                registryRecordRights[_owner][i] = recordRight;\r\n                consumed = true;\r\n            }\r\n        }\r\n\r\n        if (consumed) return true;\r\n        else revert('denied : no registry record right found for provided address');\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/Etherland.sol\r\n\r\n/**\r\n * @title Etherland\r\n * @dev ERC-20 Compliant ELAND token\r\n * @author Mathieu Lecoq\r\n * december 20th 2020 \r\n *\r\n * @dev Property\r\n * all rights are reserved to Etherland ltd\r\n *\r\n * @dev deployed with solc 0.7.5\r\n*/\r\ncontract Etherland is LandRegistry, Proxiable {\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n    * @return amount representing _percent % of _amount\r\n    */\r\n    function percentOf(uint _total, uint _percent) internal pure returns(uint amount) {\r\n        amount = ((_total * _percent) / 100);\r\n    }\r\n\r\n    /**\r\n    * @dev Erc20 Etherland ELAND token constructor\r\n    * @param _owner address of the contract owner to set when migrating this contract\r\n    * @notice called only once in contract lifetime upon migration to chain\r\n    */\r\n    function init(\r\n        string memory name_, \r\n        string memory symbol_, \r\n        uint8 decimals_, \r\n        address _owner, \r\n        address _reserve, \r\n        address _team\r\n    ) public {\r\n      \r\n        if (initialized != true) {\r\n            /* \r\n                initialize contract \r\n            */\r\n            initialized = true;\r\n            \r\n            /* \r\n                give ownership of the contract to _owner \r\n            */\r\n            _transferOwnership(_owner);\r\n\r\n            /* \r\n                define maximum supply to 1 Billion tokens\r\n            */\r\n            uint maximumSupply = 1e9 * 10 ** decimals_;\r\n\r\n            /* \r\n                definitively end minting of ELAND token by setting cap supply to maximum supply of 1 Billion.\r\n                total and circulating supply will never ever be higher than the cap \r\n            */\r\n            setImmutableCap(maximumSupply);\r\n            \r\n            /* \r\n                set contract identifiers \r\n            */\r\n            _name = name_;\r\n            _symbol = symbol_;\r\n            _decimals = decimals_;\r\n            \r\n            /*\r\n                set wallets for partionning\r\n            */\r\n            team = _team;\r\n            reserve = _reserve;\r\n            \r\n            /* \r\n                partition the supply \r\n                    - 20 percent of the supply goes to the reserve wallet\r\n                    - 10 percent of the supply goes to the team wallet\r\n                    - 70 percent of the supply are kept by the owner\r\n            */\r\n            mint(_reserve, percentOf(maximumSupply, 20));\r\n            mint(_team, percentOf(maximumSupply, 10));\r\n            mint(_owner, percentOf(maximumSupply, 70));\r\n\r\n            _mintingFinished = true;\r\n            \r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev EIP-1822 feature\r\n    * @dev Realize an update of the Etherland logic code \r\n    * @dev calls the proxy contract to update stored logic code contract address at keccak256(\"PROXIABLE\")\r\n    * @notice once owner renounce contract ownership and owner address is set to the zero address, \r\n    *         no one will be able to update the logic code (see renounceOwnership method)\r\n    */\r\n    function updateCode(address newCode) public onlyOwner {\r\n        updateCodeAddress(newCode);\r\n    }\r\n    \r\n    /**\r\n    * @dev Total circulating supply\r\n    * @return the number of circulating ELAND (totalSupply - team - reserve - owner)\r\n    */\r\n    function circulatingSupply() public view returns(uint) {\r\n        return (totalSupply().sub(balanceOf(team)).sub(balanceOf(reserve)).sub(balanceOf(owner)));\r\n    }\r\n\r\n   /**\r\n    * @dev Transfer ELAND value to multiple addresses\r\n    * @param _to array of addresses to send value to\r\n    * @param _value the ELAND value to transfer for each address\r\n    * @return boolean indicating operation success\r\n    */\r\n    function batchTransfer(address[] memory _to, uint _value) public returns(bool) {\r\n        uint ttlRecipients = _to.length;\r\n        require(ttlRecipients > 0, 'at least on recipient must be defined');\r\n        require(balanceOf(_msgSender()) >= (_value.mul(ttlRecipients)), 'batch transfer denied : unsufficient balance');\r\n        for (uint i = 0; i < ttlRecipients; i++) {\r\n            address recipient = _to[i];\r\n            transfer(recipient, _value);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Set Etherland LANDID NFT contract address\r\n    * @param _landidNftAddress the address of LANDID NFT Token\r\n    * @return boolean indicating operation success\r\n    */\r\n    function setLandidNftAddress(address _landidNftAddress) public onlyOwner returns (bool) {\r\n        landidNftAddress = _landidNftAddress;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Set Land Registration Address\r\n    * @param _landRegistration the address of the wallet dedicated to land registrations\r\n    * @return boolean indicating operation success\r\n    */\r\n    function setLandRegistrationAddress(address _landRegistration) public onlyOwner returns(bool) {\r\n        landRegistration = _landRegistration;\r\n        return true;\r\n    }\r\n    \r\n\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_to\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"batchTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circulatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeLandRegistry\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"recordIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"consumeRecordRight\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRelinquishmentToken\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"_relinquishmentToken\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_reserve\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_team\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"landRegistryOpened\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"landidNftAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openLandRegistry\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preRenounceOwnership\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"_relinquishmentToken\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"recordRightsOffers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"recordIndex\",\"type\":\"uint256\"}],\"name\":\"registerLand\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"registryRecordRights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_relinquishmentToken\",\"type\":\"bytes32\"}],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserve\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_landRegistration\",\"type\":\"address\"}],\"name\":\"setLandRegistrationAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_landidNftAddress\",\"type\":\"address\"}],\"name\":\"setLandidNftAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_indexedRecordOffers\",\"type\":\"uint256[]\"}],\"name\":\"setRecordRightsOffers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"standalone\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"team\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newCode\",\"type\":\"address\"}],\"name\":\"updateCode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Etherland","CompilerVersion":"v0.7.5+commit.eb77ed08","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8b31d3c81e2ca3c2c9228fe9b6d4c2f36e24a509c37314a681a0d668c5405866"}]}