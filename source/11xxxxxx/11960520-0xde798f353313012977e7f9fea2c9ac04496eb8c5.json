{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.1;\r\n\r\nabstract\r\ncontract OracleCallable {\r\n    \r\n    address private oracle_key_;\r\n    \r\n    event OracleKeyChanged(address indexed _oracle_key);\r\n    \r\n    constructor (address _oracle_key) {\r\n        oracle_key_ = _oracle_key;\r\n        emit OracleKeyChanged(_oracle_key);\r\n    }    \r\n    \r\n    modifier onlyOracle() {\r\n        require(oracle_key_ == msg.sender, \"Caller is not the oracle\");\r\n        _;\r\n    }    \r\n    \r\n    function changeOracleKeyInternal(address _oracle_key) internal\r\n    {\r\n        require(_oracle_key != address(0), \"New oracle is the zero address\");\r\n        emit OracleKeyChanged(_oracle_key);\r\n        oracle_key_ = _oracle_key;\r\n    }\r\n    \r\n    function changeOracleKey(address _oracle_key) external onlyOracle returns (bool success) \r\n    {\r\n        changeOracleKeyInternal(_oracle_key);\r\n        return true;\r\n    }   \r\n    \r\n    function getOracleKey() view public returns (address)\r\n    {\r\n        return oracle_key_;\r\n    }\r\n}\r\n\r\n\r\nabstract\r\ncontract PigeonReceive is OracleCallable {\r\n    \r\n    event PigeonCallable (address _oracleKey);\r\n    \r\n    event PigeonArrived (\r\n         uint256  _source_chain_id,    uint256 _source_contract_id,     \r\n         uint256  _source_block_no,    uint256  _source_confirmations,   uint256 _source_txn_hash,\r\n         uint256 _source_topic0,      uint256 _source_topic1,          uint256 _source_topic2,\r\n         uint256 _source_topic3,      uint256 _source_topic4,          uint256 _source_topic5\r\n    );\r\n\r\n    constructor (address _oracleKey) OracleCallable (_oracleKey) \r\n    {\r\n        emit PigeonCallable(_oracleKey);\r\n    }\r\n\r\n    function pigeonArrive (\r\n        uint256  _source_chain_id,    uint256 _source_contract_id,\r\n        uint256  _source_block_no,    uint256  _source_confirmations,   uint256 _source_txn_hash,\r\n        uint256 _topic0, uint256 _topic1, uint256 _topic2, uint256 _topic3, uint256 _topic4, uint256 _topic5\r\n    ) onlyOracle external virtual returns (bool success)\r\n    {\r\n        emit PigeonArrived(\r\n           _source_chain_id, _source_contract_id,\r\n           _source_block_no, _source_confirmations, _source_txn_hash,\r\n           _topic0, _topic1, _topic2, _topic3, _topic4, _topic5);\r\n        return true;\r\n    }\r\n    \r\n}\r\n\r\nabstract\r\ncontract PigeonInterface {\r\n    event PigeonCall(\r\n        uint256 _source_txn_hash, uint256 _source_event_id,\r\n        uint256 _dest_chain_id,  uint256 _dest_contract_id\r\n    );\r\n    \r\n    function pigeonSend(\r\n        uint256 _source_txn_hash,    uint256 _source_event_id,\r\n        uint256 _dest_chain_id,      uint256 _dest_contract_id) external virtual payable returns (bool success);\r\n \r\n    function pigeonCost(uint256 _dest_chain_id) external view virtual returns (uint256 pigeon_call_cost);\r\n\r\n    function setPigeonCost(uint256 _dest_chain_id, uint256 cost) external virtual returns (bool success);\r\n    \r\n    function setPigeonCosts(uint256[] memory _dest_chain_id, uint256[] memory _cost) external virtual returns (bool success);\r\n    \r\n    function chainId() external view virtual returns (uint256);\r\n    \r\n    function getPigeonOracleKey() view virtual external returns (address);\r\n\r\n}\r\n\r\ncontract Pigeon is OracleCallable, PigeonInterface {\r\n\r\n    event PigeonCostChanged(uint256 _chain_id, uint256 _cost);\r\n\r\n    mapping (uint256 => uint256) private pigeon_cost_;\r\n    \r\n    uint256 private chain_id_;\r\n\r\n    constructor (uint256 _chain_id, address _oracle_key, uint256[] memory _dest_chain_ids, uint256[] memory _dest_chain_costs) OracleCallable(_oracle_key) {\r\n        chain_id_ = _chain_id;\r\n        for (uint i = 0; i < _dest_chain_ids.length; ++i)\r\n            pigeon_cost_[_dest_chain_ids[i]] = _dest_chain_costs[i];\r\n    }\r\n    \r\n    function chainId() external view override returns (uint256) \r\n    {\r\n        return chain_id_;\r\n    }\r\n\r\n    function getPigeonOracleKey() view override external returns (address)\r\n    {\r\n        return getOracleKey();\r\n    }\r\n\r\n    function pigeonSend(\r\n        uint256 _source_txn_hash,    uint256 _source_event_id,\r\n        uint256 _dest_chain_id,      uint256 _dest_contract_id) external payable override returns (bool success)\r\n    {\r\n        require(pigeon_cost_[_dest_chain_id] != 0, \"The network you are trying to call is not currently supported.\");\r\n        require(msg.value >= pigeon_cost_[_dest_chain_id], \"Insufficient funds sent to use pigeon. Please check pigeonCost(chain_id).\");\r\n        emit PigeonCall(\r\n            _source_txn_hash,    _source_event_id,\r\n            _dest_chain_id,      _dest_contract_id\r\n        );\r\n        return true;\r\n    }\r\n   \r\n    function pigeonCost(uint256 _dest_chain_id) external view override returns (uint256 pigeon_call_cost)\r\n    {\r\n        require(pigeon_cost_[_dest_chain_id] != 0, \"The network you are trying to call is not currently supported.\");\r\n        return pigeon_cost_[_dest_chain_id];\r\n    }\r\n\r\n    function setPigeonCost(uint256 _dest_chain_id, uint256 _cost) external override onlyOracle returns (bool success)\r\n    {\r\n        pigeon_cost_[_dest_chain_id] = _cost;\r\n        emit PigeonCostChanged(_dest_chain_id, _cost);\r\n        return true;\r\n    }\r\n\r\n    function setPigeonCosts(uint256[] memory _dest_chain_id, uint256[] memory _cost) external override onlyOracle returns (bool success)\r\n    {\r\n        require(_dest_chain_id.length == _cost.length);\r\n        for (uint i = 0; i < _dest_chain_id.length; ++i)\r\n        {\r\n            pigeon_cost_[_dest_chain_id[i]] = _cost[i];\r\n            emit PigeonCostChanged(_dest_chain_id[i], _cost[i]);\r\n        }\r\n        return true;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chain_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_oracle_key\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_dest_chain_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_dest_chain_costs\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oracle_key\",\"type\":\"address\"}],\"name\":\"OracleKeyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_source_txn_hash\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_source_event_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_dest_chain_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_dest_contract_id\",\"type\":\"uint256\"}],\"name\":\"PigeonCall\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_chain_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_cost\",\"type\":\"uint256\"}],\"name\":\"PigeonCostChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle_key\",\"type\":\"address\"}],\"name\":\"changeOracleKey\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOracleKey\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPigeonOracleKey\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dest_chain_id\",\"type\":\"uint256\"}],\"name\":\"pigeonCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pigeon_call_cost\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_source_txn_hash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_source_event_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dest_chain_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dest_contract_id\",\"type\":\"uint256\"}],\"name\":\"pigeonSend\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dest_chain_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cost\",\"type\":\"uint256\"}],\"name\":\"setPigeonCost\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_dest_chain_id\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_cost\",\"type\":\"uint256[]\"}],\"name\":\"setPigeonCosts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Pigeon","CompilerVersion":"v0.8.1+commit.df193b15","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000000100000000000000000000000094175c8880a131605a72e61a27ff1568876fabe20000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000007a0000000000000000000000000000000000000000000000000000000000000089000000000000000000000000000000000000000000000000000000000000003800000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000005dcaa8fe120000000000000000000000000000000000000000000000000000005dcaa8fe120000000000000000000000000000000000000000000000000000005dcaa8fe120000000000000000000000000000000000000000000000000000005dcaa8fe12000","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8455ee9d20d69a1eaa7fd74fb61aa78c4bf2ab84f8b9a8b3dba41dd6211a50b6"}]}