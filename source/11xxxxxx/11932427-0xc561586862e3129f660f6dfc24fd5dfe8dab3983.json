{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.7.4;\r\n\r\nabstract contract ERC20Interface {\r\n    function totalSupply() public virtual view returns (uint256);\r\n    function balanceOf(address tokenOwner) public virtual view returns (uint256 balance);\r\n    function allowance(address tokenOwner, address spender) public virtual view returns (uint256 remaining);\r\n    function transfer(address to, uint256 tokens) public virtual returns (bool success);\r\n    function approve(address spender, uint256 tokens) public virtual returns (bool success);\r\n    function transferFrom(address from, address to, uint256 tokens) public virtual returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\ncontract WrappedWebDollarToken is ERC20Interface {\r\n    using SafeMath for uint256;\r\n\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    address public owner;\r\n    uint256 public price;\r\n\r\n    uint256 private _totalSupply;\r\n    uint256 private _maxSupply;\r\n\r\n\r\n    mapping(address => uint256) private balances;\r\n    mapping(address => mapping(address => uint256)) private allowed;\r\n\r\n    event Withdraw(address indexed spender, string indexed webdAddress, uint256 tokens);\r\n    event Buy(address indexed spender, string indexed webdAddress, uint256 webdollarAmount, uint256 etherAmount);\r\n\r\n    constructor() {\r\n        name = \"Wrapped WebDollar\";\r\n        symbol = \"WWEBD\";\r\n        decimals = 4;\r\n        price = 597 * 10000; // 1 WEBD unit (10^-4 WEBD) for _price ETH unit aka wei (10^-18 ETH)\r\n        _totalSupply = 30000000000; // 3 MIL\r\n        _maxSupply = 10000000000000; // 1 BIL\r\n        owner = msg.sender;\r\n        \r\n        balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n    \r\n    function totalSupply() override public view returns (uint256) {\r\n        return _totalSupply.sub(balances[address(0)]);\r\n    }\r\n    \r\n    function balanceOf(address tokenOwner) override public view returns (uint256 balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n    \r\n    function allowance(address tokenOwner, address spender) override public view returns (uint256 remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n    \r\n    function approve(address spender, uint256 tokens) override public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n    \r\n    function transfer(address to, uint256 tokens) override public returns (bool success) {\r\n        require(tokens <= balances[msg.sender],\"1\");\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        emit Transfer(msg.sender, to, tokens);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint tokens) override public returns (bool success) {\r\n        if (tokens == 0)\r\n            return true;\r\n        require((to != address(0)) && (to != address(this)));\r\n        if (allowed[from][msg.sender] < tokens)\r\n                return false;\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n\r\n        balances[from] = balances[from].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        emit Transfer(from, to, tokens);\r\n        return true;\r\n    }\r\n\r\n    function mint(uint256 tokens) public returns (bool success) {\r\n        require(owner == msg.sender,\"1\");\r\n        require(tokens != 0, \"2\");\r\n        require(tokens <= _maxSupply.sub(_totalSupply),\"3\");\r\n        balances[msg.sender] = balances[msg.sender].add(tokens);\r\n        _totalSupply = _totalSupply.add(tokens);\r\n        emit Transfer(address(0), msg.sender, tokens);\r\n        return true;\r\n    }\r\n\r\n    function setPrice(uint256 new_price) public returns (bool success) {\r\n        require(owner == msg.sender,\"1\");\r\n        require(new_price > 0, \"2\");\r\n        price = new_price;\r\n        return true;\r\n    }\r\n\r\n    modifier verify_webd_address (string memory where) {\r\n        bytes memory whatBytes = bytes ('WEBD$');\r\n        bytes memory whereBytes = bytes (where);\r\n    \r\n        bool found = false;\r\n        for (uint i = 0; i < whereBytes.length - whatBytes.length; i++) {\r\n            bool flag = true;\r\n            for (uint j = 0; j < whatBytes.length; j++)\r\n                if (whereBytes [i + j] != whatBytes [j]) {\r\n                    flag = false;\r\n                    break;\r\n                }\r\n            if (flag) {\r\n                found = true;\r\n                break;\r\n            }\r\n        }\r\n        require (found);\r\n    \r\n        _;\r\n    }\r\n\r\n    function withdraw(string memory webd_address, uint256 tokens) public verify_webd_address (webd_address) returns (bool success) {\r\n        require(tokens >= 100000, \"1\");\r\n        require(balances[msg.sender].sub(tokens) == 0,\"2\");\r\n        require(_totalSupply.sub(tokens) >= 0,\"3\");\r\n        bytes memory webd_address_bytes = bytes(webd_address);\r\n        require(webd_address_bytes.length == 40,\"4\");\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n        _totalSupply = _totalSupply.sub(tokens);\r\n        emit Transfer(msg.sender, address(0), tokens);\r\n        emit Withdraw(msg.sender, webd_address, tokens);\r\n        return true;\r\n    }\r\n    \r\n    function buy(string memory webd_address, uint256 webdollarAmount) public payable returns (bool success) {\r\n        require(msg.value != 0, \"1\");\r\n        require(webdollarAmount >= 100000, \"2\");\r\n        require(_totalSupply.sub(webdollarAmount) >= 0,\"3\");\r\n        bytes memory webd_address_bytes = bytes(webd_address);\r\n        require(webd_address_bytes.length == 40,\"4\");\r\n        require(price.mul(webdollarAmount) == msg.value, \"5\");\r\n\r\n        require(_totalSupply.sub(webdollarAmount) >= 0,\"6\");\r\n        require(balances[owner].sub(webdollarAmount) >= 0,\"7\");\r\n        balances[owner] = balances[owner].sub(webdollarAmount);\r\n        _totalSupply = _totalSupply.sub(webdollarAmount);\r\n        emit Transfer(owner, address(0), webdollarAmount);\r\n        emit Buy(msg.sender, webd_address, webdollarAmount, msg.value);\r\n        return true;\r\n    }\r\n\r\n    function withdrawEther(uint256 amount) public {\r\n        require(owner == msg.sender,\"1\");\r\n        (bool sent,) = owner.call{value: amount}(\"\");\r\n        require(sent, \"2\");\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"webdAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"webdollarAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"etherAmount\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"webdAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"webd_address\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"webdollarAmount\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"new_price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"webd_address\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"WrappedWebDollarToken","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://de5fe6caea19ef90369b76583051d75216898697eb1d8d2a53f42de95862243a"}]}