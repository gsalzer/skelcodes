{"status":"1","message":"OK","result":[{"SourceCode":"{\"IComptroller.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.9;\\r\\n\\r\\n/**\\r\\n * @title ICToken\\r\\n * @author Alexander Schlindwein\\r\\n *\\r\\n * @dev A simplified interface for Compound\\u0027s Comptroller\\r\\n */\\r\\ninterface IComptroller {\\r\\n    function claimComp(address holder) external;\\r\\n}\"},\"ICToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.9;\\r\\n\\r\\nimport \\\"IERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title ICToken\\r\\n * @author Alexander Schlindwein\\r\\n *\\r\\n * @dev A simplified interface for Compound\\u0027s cToken\\r\\n */\\r\\ninterface ICToken is IERC20 {\\r\\n    function exchangeRateStored() external view returns (uint);\\r\\n    function accrueInterest() external returns (uint);\\r\\n    function mint(uint mintAmount) external returns (uint);\\r\\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\\r\\n    function redeem(uint redeemTokens) external returns (uint);\\r\\n    function comptroller() external view returns (address);\\r\\n}\"},\"IdeaTokenVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.9;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"IIdeaTokenVault.sol\\\";\\r\\nimport \\\"IIdeaTokenFactory.sol\\\";\\r\\nimport \\\"Ownable.sol\\\";\\r\\nimport \\\"Initializable.sol\\\";\\r\\nimport \\\"SafeMath.sol\\\";\\r\\nimport \\\"IERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title IdeaTokenVault\\r\\n * @author Alexander Schlindwein\\r\\n *\\r\\n * Locks IdeaTokens for a given duration\\r\\n * Sits behind an AdminUpgradabilityProxy\\r\\n *\\r\\n * This contract uses a doubly linked list to keep track of locked tokens and allow for iteration.\\r\\n * For each (IdeaToken, owner) combination a linked list is stored where new entries to the list are inserted at the head:\\r\\n * \\r\\n * |-----------| --- next ---\\u003e |-----------|\\r\\n * |  LLEntry  |\\t\\t\\t   |  LLEntry  |  ---- \\u003e \\r\\n * |-----------| \\u003c--- prev --- |-----------|\\r\\n *       |\\r\\n *       |\\r\\n *       |\\r\\n * _llHead[IdeaToken][owner]\\r\\n *\\r\\n * Each LLEntry has an \\u0027until\\u0027 field which is the timestamp when the tokens in this entry will be unlocked.\\r\\n * A (IdeaToken, owner, until) combination uniquely identifies a LLEntry. Thus the \\u0027until\\u0027 also often serves as an ID.\\r\\n *\\r\\n * Since (IdeaToken, owner, until) is unique, the storage location of each LLEntry is calculated as keccak256(abi.encode(ideaToken, owner, until)).\\r\\n *\\r\\n */\\r\\ncontract IdeaTokenVault is IIdeaTokenVault, Initializable {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    // LinkedList Entry\\r\\n    struct LLEntry {\\r\\n        // Timestamp when unlocked. Also serves as ID\\r\\n        uint until;\\r\\n        // Amount of locked tokens\\r\\n        uint amount;\\r\\n        // Previous LLEntry\\r\\n        bytes32 prev;\\r\\n        // Next LLEntry\\r\\n        bytes32 next;\\r\\n    }\\r\\n\\r\\n    IIdeaTokenFactory _ideaTokenFactory;\\r\\n\\r\\n    // IdeaToken address =\\u003e owner address =\\u003e storage location\\r\\n    mapping(address =\\u003e mapping(address =\\u003e bytes32)) public _llHead;\\r\\n\\r\\n    event Locked(address ideaToken, address owner, uint lockedAmount, uint lockedUntil, uint lockedDuration);\\r\\n\\r\\n    /**\\r\\n     * Initializes the contract\\r\\n     *\\r\\n     * @param ideaTokenFactory The address of the IdeaTokenFactory contract\\r\\n     */\\r\\n    function initialize(address ideaTokenFactory) external initializer {\\r\\n        require(ideaTokenFactory != address(0), \\\"invalid-params\\\");\\r\\n        _ideaTokenFactory = IIdeaTokenFactory(ideaTokenFactory);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Locks IdeaTokens for a given duration.\\r\\n     * Allowed durations are set by the owner.\\r\\n     *\\r\\n     * @param ideaToken The IdeaToken to be locked\\r\\n     * @param amount The amount of IdeaTokens to lock\\r\\n     * @param duration The duration in seconds to lock the tokens\\r\\n     * @param recipient The account which receives the locked tokens \\r\\n     */\\r\\n    function lock(address ideaToken, uint amount, uint duration, address recipient) external override {\\r\\n        require(duration \\u003e 0, \\\"invalid-duration\\\");\\r\\n        require(_ideaTokenFactory.getTokenIDPair(ideaToken).exists, \\\"invalid-token\\\");\\r\\n        require(amount \\u003e 0, \\\"invalid-amount\\\");\\r\\n        require(IERC20(ideaToken).allowance(msg.sender, address(this)) \\u003e= amount, \\\"insufficient-allowance\\\");\\r\\n        require(IERC20(ideaToken).transferFrom(msg.sender, address(this), amount), \\\"transfer-failed\\\");\\r\\n\\r\\n        uint lockedUntil = duration.add(now);\\r\\n        bytes32 location = getLLEntryStorageLocation(ideaToken, recipient, lockedUntil);\\r\\n\\r\\n        LLEntry storage entry = getLLEntry(location);\\r\\n        entry.amount = entry.amount.add(amount);\\r\\n\\r\\n        // If an entry with this `until` does not already exist,\\r\\n        // create a new one and add it the LL\\r\\n        if(entry.until == 0) {\\r\\n            entry.until = lockedUntil;\\r\\n            entry.prev = bytes32(0);\\r\\n            entry.next = _llHead[ideaToken][recipient];\\r\\n\\r\\n            bytes32 currentHeadID = _llHead[ideaToken][recipient];\\r\\n            if(currentHeadID != bytes32(0)) {\\r\\n                // Set `prev` of the old head to the new entry\\r\\n                LLEntry storage head = getLLEntry(currentHeadID);\\r\\n                head.prev = location;\\r\\n            } \\r\\n\\r\\n            _llHead[ideaToken][recipient] = location;\\r\\n        }\\r\\n\\r\\n        emit Locked(ideaToken, recipient, amount, lockedUntil, duration);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Withdraws a given list of locked tokens\\r\\n     *\\r\\n     * @param ideaToken The IdeaToken to withdraw\\r\\n     * @param untils List of timestamps until which tokens are locked\\r\\n     * @param recipient The account which will receive the IdeaTokens\\r\\n     */\\r\\n    function withdraw(address ideaToken, uint[] calldata untils, address recipient) external override {\\r\\n\\r\\n        uint ts = now;\\r\\n        uint total = 0;\\r\\n\\r\\n        for(uint i = 0; i \\u003c untils.length; i++) {\\r\\n            uint until = untils[i];\\r\\n            require(ts \\u003e until, \\\"too-early\\\");\\r\\n\\r\\n            bytes32 location = getLLEntryStorageLocation(ideaToken, msg.sender, until);\\r\\n            LLEntry storage entry = getLLEntry(location);\\r\\n\\r\\n            require(entry.until \\u003e 0, \\\"invalid-until\\\");\\r\\n            total = total.add(entry.amount);\\r\\n\\r\\n            if(entry.next != bytes32(0)) {\\r\\n                // Set `prev` of the next entry\\r\\n                LLEntry storage next = getLLEntry(entry.next);\\r\\n                next.prev = entry.prev;\\r\\n            }\\r\\n\\r\\n            if(entry.prev != bytes32(0)) {\\r\\n                // Set `next` of the prev entry\\r\\n                LLEntry storage prev = getLLEntry(entry.prev);\\r\\n                prev.next = entry.next;\\r\\n            } else {\\r\\n                // This was the first entry in the LL\\r\\n                // Update the head to the next entry\\r\\n                // If this was also the only entry in the list\\r\\n                // head will be set to 0\\r\\n                _llHead[ideaToken][msg.sender] = entry.next;\\r\\n            }\\r\\n\\r\\n            // Reset storage to 0, gas savings\\r\\n            clearEntry(entry);\\r\\n        }\\r\\n\\r\\n        if(total \\u003e 0) {\\r\\n            require(IERC20(ideaToken).transfer(recipient, total), \\\"transfer-failed\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns all locked entries up to `maxEntries` for `user`\\r\\n     *\\r\\n     * @param ideaToken The IdeaToken for which to return the locked entries\\r\\n     * @param user The user for which to return the locked entries\\r\\n     * @param maxEntries The maximum amount of entries to return\\r\\n     *\\r\\n     * @return All locked entries up to `maxEntries` for `user`\\r\\n     */\\r\\n    function getLockedEntries(address ideaToken, address user, uint maxEntries) external view override returns (LockedEntry[] memory) {\\r\\n        // Calculate the required size of the returned array\\r\\n        bytes32 next = _llHead[ideaToken][user];\\r\\n        uint len = 0;\\r\\n        while(next != bytes32(0) \\u0026\\u0026 len \\u003c maxEntries) {\\r\\n            len += 1;\\r\\n            LLEntry storage entry = getLLEntry(next);\\r\\n            next = entry.next;\\r\\n        }\\r\\n\\r\\n        if(len == 0) {\\r\\n            LockedEntry[] memory empty;\\r\\n            return empty;\\r\\n        }\\r\\n\\r\\n        LockedEntry[] memory ret = new LockedEntry[](len);\\r\\n\\r\\n        uint index = 0;\\r\\n        next = _llHead[ideaToken][user];\\r\\n        while(next != bytes32(0)) {\\r\\n            LLEntry storage entry = getLLEntry(next);\\r\\n            \\r\\n            ret[index] = LockedEntry({lockedUntil: entry.until, lockedAmount: entry.amount});\\r\\n\\r\\n            index++;\\r\\n            next = entry.next;\\r\\n        }\\r\\n\\r\\n        return ret;\\r\\n    }\\r\\n\\r\\n    function clearEntry(LLEntry storage entry) internal {\\r\\n        entry.until = 0;\\r\\n        entry.amount = 0;\\r\\n        entry.prev = bytes32(0);\\r\\n        entry.next = bytes32(0);\\r\\n    }\\r\\n\\r\\n    function getLLEntryStorageLocation(address ideaToken, address owner, uint until) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(ideaToken, owner, until));\\r\\n    }\\r\\n\\r\\n    function getLLEntry(bytes32 location) internal pure returns (LLEntry storage) {\\r\\n        LLEntry storage entry;\\r\\n        assembly { entry_slot := location }\\r\\n        return entry;\\r\\n    } \\r\\n}\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"IIdeaToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.9;\\r\\n\\r\\nimport \\\"IERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title IIdeaToken\\r\\n * @author Alexander Schlindwein\\r\\n */\\r\\ninterface IIdeaToken is IERC20 {\\r\\n    function initialize(string calldata __name, address owner) external;\\r\\n    function mint(address account, uint256 amount) external;\\r\\n    function burn(address account, uint256 amount) external;\\r\\n}\"},\"IIdeaTokenExchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.9;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"IIdeaTokenFactory.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title IIdeaTokenExchange\\r\\n * @author Alexander Schlindwein\\r\\n */\\r\\n\\r\\nstruct CostAndPriceAmounts {\\r\\n    uint total;\\r\\n    uint raw;\\r\\n    uint tradingFee;\\r\\n    uint platformFee;\\r\\n}\\r\\n\\r\\ninterface IIdeaTokenExchange {\\r\\n    function sellTokens(address ideaToken, uint amount, uint minPrice, address recipient) external;\\r\\n    function getPriceForSellingTokens(address ideaToken, uint amount) external view returns (uint);\\r\\n    function getPricesForSellingTokens(MarketDetails memory marketDetails, uint supply, uint amount, bool feesDisabled) external pure returns (CostAndPriceAmounts memory);\\r\\n    function buyTokens(address ideaToken, uint amount, uint fallbackAmount, uint cost, address recipient) external;\\r\\n    function getCostForBuyingTokens(address ideaToken, uint amount) external view returns (uint);\\r\\n    function getCostsForBuyingTokens(MarketDetails memory marketDetails, uint supply, uint amount, bool feesDisabled) external pure returns (CostAndPriceAmounts memory);\\r\\n    function setTokenOwner(address ideaToken, address owner) external;\\r\\n    function setPlatformOwner(uint marketID, address owner) external;\\r\\n    function withdrawTradingFee() external;\\r\\n    function withdrawTokenInterest(address token) external;\\r\\n    function withdrawPlatformInterest(uint marketID) external;\\r\\n    function withdrawPlatformFee(uint marketID) external;\\r\\n    function getInterestPayable(address token) external view returns (uint);\\r\\n    function getPlatformInterestPayable(uint marketID) external view returns (uint);\\r\\n    function getPlatformFeePayable(uint marketID) external view returns (uint);\\r\\n    function getTradingFeePayable() external view returns (uint);\\r\\n    function setAuthorizer(address authorizer) external;\\r\\n    function isTokenFeeDisabled(address ideaToken) external view returns (bool);\\r\\n    function setTokenFeeKillswitch(address ideaToken, bool set) external;\\r\\n}\"},\"IIdeaTokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.9;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"IIdeaTokenNameVerifier.sol\\\";\\r\\nimport \\\"IIdeaToken.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title IIdeaTokenFactory\\r\\n * @author Alexander Schlindwein\\r\\n */\\r\\n\\r\\nstruct IDPair {\\r\\n    bool exists;\\r\\n    uint marketID;\\r\\n    uint tokenID;\\r\\n}\\r\\n\\r\\nstruct TokenInfo {\\r\\n    bool exists;\\r\\n    uint id;\\r\\n    string name;\\r\\n    IIdeaToken ideaToken;\\r\\n}\\r\\n\\r\\nstruct MarketDetails {\\r\\n    bool exists;\\r\\n    uint id;\\r\\n    string name;\\r\\n\\r\\n    IIdeaTokenNameVerifier nameVerifier;\\r\\n    uint numTokens;\\r\\n\\r\\n    uint baseCost;\\r\\n    uint priceRise;\\r\\n    uint hatchTokens;\\r\\n    uint tradingFeeRate;\\r\\n    uint platformFeeRate;\\r\\n\\r\\n    bool allInterestToPlatform;\\r\\n}\\r\\n\\r\\ninterface IIdeaTokenFactory {\\r\\n    function addMarket(string calldata marketName, address nameVerifier,\\r\\n                       uint baseCost, uint priceRise, uint hatchTokens,\\r\\n                       uint tradingFeeRate, uint platformFeeRate, bool allInterestToPlatform) external;\\r\\n\\r\\n    function addToken(string calldata tokenName, uint marketID, address lister) external;\\r\\n\\r\\n    function isValidTokenName(string calldata tokenName, uint marketID) external view returns (bool);\\r\\n    function getMarketIDByName(string calldata marketName) external view returns (uint);\\r\\n    function getMarketDetailsByID(uint marketID) external view returns (MarketDetails memory);\\r\\n    function getMarketDetailsByName(string calldata marketName) external view returns (MarketDetails memory);\\r\\n    function getMarketDetailsByTokenAddress(address ideaToken) external view returns (MarketDetails memory);\\r\\n    function getNumMarkets() external view returns (uint);\\r\\n    function getTokenIDByName(string calldata tokenName, uint marketID) external view returns (uint);\\r\\n    function getTokenInfo(uint marketID, uint tokenID) external view returns (TokenInfo memory);\\r\\n    function getTokenIDPair(address token) external view returns (IDPair memory);\\r\\n    function setTradingFee(uint marketID, uint tradingFeeRate) external;\\r\\n    function setPlatformFee(uint marketID, uint platformFeeRate) external;\\r\\n    function setNameVerifier(uint marketID, address nameVerifier) external;\\r\\n}\"},\"IIdeaTokenNameVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.9;\\r\\n\\r\\n/**\\r\\n * @title IIdeaTokenNameVerifier\\r\\n * @author Alexander Schlindwein\\r\\n *\\r\\n * Interface for token name verifiers\\r\\n */\\r\\ninterface IIdeaTokenNameVerifier {\\r\\n    function verifyTokenName(string calldata name) external pure returns (bool);\\r\\n}\"},\"IIdeaTokenVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.9;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n/**\\r\\n * @title IIdeaTokenVault\\r\\n * @author Alexander Schlindwein\\r\\n */\\r\\n\\r\\nstruct LockedEntry {\\r\\n    uint lockedUntil;\\r\\n    uint lockedAmount;\\r\\n}\\r\\n    \\r\\ninterface IIdeaTokenVault {\\r\\n    function lock(address ideaToken, uint amount, uint duration, address recipient) external;\\r\\n    function withdraw(address ideaToken, uint[] calldata untils, address recipient) external;\\r\\n    function getLockedEntries(address ideaToken, address user, uint maxEntries) external view returns (LockedEntry[] memory);\\r\\n} \"},\"IInterestManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.9;\\r\\n\\r\\n/**\\r\\n * @title IInterestManager\\r\\n * @author Alexander Schlindwein\\r\\n */\\r\\ninterface IInterestManager {\\r\\n    function invest(uint amount) external returns (uint);\\r\\n    function redeem(address recipient, uint amount) external returns (uint);\\r\\n    function redeemInvestmentToken(address recipient, uint amount) external returns (uint);\\r\\n    function donateInterest(uint amount) external;\\r\\n    function redeemDonated(uint amount) external;\\r\\n    function accrueInterest() external;\\r\\n    function underlyingToInvestmentToken(uint underlyingAmount) external view returns (uint);\\r\\n    function investmentTokenToUnderlying(uint investmentTokenAmount) external view returns (uint);\\r\\n}\"},\"Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/contracts/Initializable.sol\\r\\n\\r\\npragma solidity 0.6.9;\\r\\n\\r\\n\\r\\n/**\\r\\n * @title Initializable\\r\\n *\\r\\n * @dev Helper contract to support initializer functions. To use it, replace\\r\\n * the constructor with a function that has the `initializer` modifier.\\r\\n * WARNING: Unlike constructors, initializer functions must be manually\\r\\n * invoked. This applies both to deploying an Initializable contract, as well\\r\\n * as extending an Initializable contract via inheritance.\\r\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\r\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\r\\n * because this is not dealt with automatically as with constructors.\\r\\n */\\r\\ncontract Initializable {\\r\\n\\r\\n  /**\\r\\n   * @dev Indicates that the contract has been initialized.\\r\\n   */\\r\\n  bool private initialized;\\r\\n\\r\\n  /**\\r\\n   * @dev Indicates that the contract is in the process of being initialized.\\r\\n   */\\r\\n  bool private initializing;\\r\\n\\r\\n  /**\\r\\n   * @dev Modifier to use in the initializer function of a contract.\\r\\n   */\\r\\n  modifier initializer() {\\r\\n    require(initializing || isConstructor() || !initialized, \\\"already-initialized\\\");\\r\\n\\r\\n    bool isTopLevelCall = !initializing;\\r\\n    if (isTopLevelCall) {\\r\\n      initializing = true;\\r\\n      initialized = true;\\r\\n    }\\r\\n\\r\\n    _;\\r\\n\\r\\n    if (isTopLevelCall) {\\r\\n      initializing = false;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev Returns true if and only if the function is running in the constructor\\r\\n  function isConstructor() private view returns (bool) {\\r\\n    // extcodesize checks the size of the code stored in an address, and\\r\\n    // address returns the current address. Since the code is still not\\r\\n    // deployed when running a constructor, any checks on its code size will\\r\\n    // yield zero, making it an effective way to detect if a contract is\\r\\n    // under construction or not.\\r\\n    address self = address(this);\\r\\n    uint256 cs;\\r\\n    assembly { cs := extcodesize(self) }\\r\\n    return cs == 0;\\r\\n  }\\r\\n\\r\\n  // Reserved storage space to allow for layout changes in the future.\\r\\n  uint256[50] private ______gap;\\r\\n}\"},\"MinimalProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.9;\\r\\n\\r\\n/**\\r\\n * @title MinimalProxy\\r\\n * @author Alexander Schlindwein\\r\\n *\\r\\n * Minimal proxy contract which delegates to an implementation\\r\\n */\\r\\ncontract MinimalProxy {\\r\\n    // Implementation address storage slot\\r\\n    bytes32 constant IMPLEMENTATION_SLOT = bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1);\\r\\n\\r\\n    /**\\r\\n     * Constructs a new proxy which delegates to the implementation address\\r\\n     */\\r\\n    constructor(address implementation) public {\\r\\n        require(implementation != address(0), \\\"invalid-params\\\");\\r\\n        bytes32 slot = IMPLEMENTATION_SLOT;\\r\\n        assembly {\\r\\n            sstore(slot, implementation)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Every call is delegated to the implementation\\r\\n     */\\r\\n    fallback() payable external {\\r\\n        bytes32 slot = IMPLEMENTATION_SLOT;\\r\\n        assembly {\\r\\n          calldatacopy(0, 0, calldatasize())\\r\\n          let result := delegatecall(gas(), sload(slot), 0, calldatasize(), 0, 0)\\r\\n          returndatacopy(0, 0, returndatasize())\\r\\n    \\r\\n          switch result\\r\\n          case 0 { revert(0, returndatasize()) }\\r\\n          default { return(0, returndatasize()) }\\r\\n        }\\r\\n    }    \\r\\n}\\r\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.9;\\r\\n\\r\\n/**\\r\\n * @title Ownable\\r\\n * @author Alexander Schlindwein\\r\\n *\\r\\n * @dev Implements only-owner functionality\\r\\n */\\r\\ncontract Ownable {\\r\\n\\r\\n    address _owner;\\r\\n\\r\\n    event OwnershipChanged(address oldOwner, address newOwner);\\r\\n\\r\\n    modifier onlyOwner {\\r\\n        require(_owner == msg.sender, \\\"only-owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function setOwner(address newOwner) external onlyOwner {\\r\\n        setOwnerInternal(newOwner);\\r\\n    }\\r\\n\\r\\n    function setOwnerInternal(address newOwner) internal {\\r\\n        require(newOwner != address(0), \\\"zero-addr\\\");\\r\\n\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n\\r\\n        emit OwnershipChanged(oldOwner, newOwner);\\r\\n    }\\r\\n\\r\\n    function getOwner() external view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n}\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ideaToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedUntil\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedDuration\",\"type\":\"uint256\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_llHead\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ideaToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxEntries\",\"type\":\"uint256\"}],\"name\":\"getLockedEntries\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lockedUntil\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct LockedEntry[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ideaTokenFactory\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ideaToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ideaToken\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"untils\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"IdeaTokenVault","CompilerVersion":"v0.6.9+commit.3e3065ac","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://f04bf4289ca8221fbe209d8827820ce89bc6fdfedefbc9b7abdc53015f2165d6"}]}