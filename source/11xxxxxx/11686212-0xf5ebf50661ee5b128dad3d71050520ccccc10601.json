{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/C/dev/repos/coti-cvix-contracts/contracts/FeesModel.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity 0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"./utils/SafeMath80.sol\\\";\\r\\nimport \\\"./utils/SafeMath8.sol\\\";\\r\\n\\r\\nimport \\\"./interfaces/ICVIOracle.sol\\\";\\r\\nimport \\\"./interfaces/IFeesCalculator.sol\\\";\\r\\nimport \\\"./interfaces/IFeesModel.sol\\\";\\r\\n\\r\\ncontract FeesModel is IFeesModel, Ownable {\\r\\n\\r\\n    using SafeMath for uint256;\\r\\n    using SafeMath8 for uint8;\\r\\n    using SafeMath80 for uint80;\\r\\n\\r\\n    uint256 private constant PRECISION_DECIMALS = 1e10;\\r\\n    uint80 private constant ROUND_JUMPS_PRECISION = 1000;\\r\\n\\r\\n    IFeesCalculator private feesCalculator;\\r\\n    ICVIOracle private cviOracle;\\r\\n\\r\\n    uint80 public maxOracleValuesUsed = 10;\\r\\n\\r\\n    uint80 private latestOracleRoundId;\\r\\n    uint256 private latestSnapshotTimestamp;\\r\\n    \\r\\n    mapping(uint256 => uint256) private cviSnapshots;\\r\\n\\r\\n    constructor(IFeesCalculator _feesCalculator, ICVIOracle _cviOracle) public {\\r\\n        feesCalculator = _feesCalculator;\\r\\n        cviOracle = _cviOracle;\\r\\n    }\\r\\n\\r\\n    function updateSnapshots() external override returns (uint256) {\\r\\n        if (cviSnapshots[block.timestamp] != 0) { // Block was already updated\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        if (latestSnapshotTimestamp == 0) { // For first recorded block\\r\\n            cviSnapshots[block.timestamp] = PRECISION_DECIMALS;\\r\\n            (,latestOracleRoundId) = cviOracle.getCVILatestRoundData();\\r\\n            latestSnapshotTimestamp = block.timestamp;\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint80 periodStartRoundId = latestOracleRoundId;\\r\\n        (uint16 lastCVIValue, uint256 latestCVITimestamp) = cviOracle.getCVIRoundData(periodStartRoundId);\\r\\n        (,latestOracleRoundId) = cviOracle.getCVILatestRoundData();\\r\\n\\r\\n        require(latestOracleRoundId >= periodStartRoundId, \\\"Bad round id\\\");\\r\\n\\r\\n        uint80 cviValuesNumLeft = latestOracleRoundId.sub(periodStartRoundId).add(1);\\r\\n        uint80 roundsJump = ROUND_JUMPS_PRECISION;\\r\\n\\r\\n        if (cviValuesNumLeft > maxOracleValuesUsed) {\\r\\n            roundsJump = cviValuesNumLeft.mul(ROUND_JUMPS_PRECISION).div(maxOracleValuesUsed.sub(1));\\r\\n            cviValuesNumLeft = maxOracleValuesUsed;\\r\\n        }\\r\\n\\r\\n        uint80 currRoundId = latestOracleRoundId;\\r\\n        if (cviValuesNumLeft > 2) {\\r\\n            currRoundId = periodStartRoundId.add(roundsJump / ROUND_JUMPS_PRECISION);\\r\\n        }\\r\\n\\r\\n        uint256 lastCVITimestamp = latestSnapshotTimestamp;\\r\\n        uint8 currCVIValueIndex = 0;\\r\\n\\r\\n        IFeesCalculator.CVIValue[] memory cviValues = new IFeesCalculator.CVIValue[](cviValuesNumLeft);\\r\\n        cviValuesNumLeft = cviValuesNumLeft.sub(1);\\r\\n\\r\\n        // Note: this line is valid even when cviValuesNumLeft == 0\\r\\n        uint256[] memory cviPeriods = new uint256[](cviValuesNumLeft);\\r\\n\\r\\n        bool shouldUpdateTurbulence = false;\\r\\n\\r\\n        while (cviValuesNumLeft > 0) {\\r\\n            shouldUpdateTurbulence = true;\\r\\n\\r\\n            (uint16 currCVIValue, uint256 currCVITimestamp) = cviOracle.getCVIRoundData(currRoundId);\\r\\n            \\r\\n            if (currCVIValueIndex == 0) {\\r\\n                cviPeriods[currCVIValueIndex] = currCVITimestamp.sub(latestCVITimestamp);\\r\\n            } else {\\r\\n                cviPeriods[currCVIValueIndex] = currCVITimestamp.sub(lastCVITimestamp);\\r\\n            }\\r\\n\\r\\n            cviValues[currCVIValueIndex] = IFeesCalculator.CVIValue(currCVITimestamp.sub(lastCVITimestamp), lastCVIValue);\\r\\n            currCVIValueIndex = currCVIValueIndex.add(1);\\r\\n\\r\\n            lastCVITimestamp = currCVITimestamp;\\r\\n            lastCVIValue = currCVIValue;\\r\\n\\r\\n            cviValuesNumLeft = cviValuesNumLeft - 1;\\r\\n\\r\\n            if (cviValuesNumLeft == 1) {\\r\\n                currRoundId = latestOracleRoundId; // Always round to latest round on last jump\\r\\n            } else if (cviValuesNumLeft > 1) {\\r\\n                currRoundId = periodStartRoundId.add(roundsJump.mul(currCVIValueIndex) / ROUND_JUMPS_PRECISION);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        cviValues[currCVIValueIndex] = IFeesCalculator.CVIValue(block.timestamp.sub(lastCVITimestamp), lastCVIValue);\\r\\n        uint256 singleUnitFundingFee = feesCalculator.calculateSingleUnitFundingFee(cviValues);\\r\\n        \\r\\n        if (shouldUpdateTurbulence) {\\r\\n            feesCalculator.updateTurbulenceIndicatorPercent(cviPeriods);\\r\\n        }        \\r\\n\\r\\n        cviSnapshots[block.timestamp] = cviSnapshots[latestSnapshotTimestamp].add(singleUnitFundingFee);\\r\\n        latestSnapshotTimestamp = block.timestamp;\\r\\n\\r\\n        return singleUnitFundingFee;\\r\\n    }\\r\\n\\r\\n    function setCVIOracle(ICVIOracle _newOracle) external override onlyOwner {\\r\\n        cviOracle = _newOracle;\\r\\n    }\\r\\n\\r\\n    function setFeesCalculator(IFeesCalculator _newCalculator) external override onlyOwner {\\r\\n        feesCalculator = _newCalculator;\\r\\n    }\\r\\n\\r\\n    function setLatestOracleRoundId(uint80 _newOracleRoundId) external override onlyOwner {\\r\\n        latestOracleRoundId = _newOracleRoundId;\\r\\n    }\\r\\n\\r\\n    function setMaxOracleValuesUsed(uint80 _newMaxOracleValuesUsed) external override onlyOwner {\\r\\n        maxOracleValuesUsed = _newMaxOracleValuesUsed;\\r\\n    }\\r\\n    \\r\\n    function calculateFundingFees(uint256 startTime, uint256 endTime, uint256 positionUnitsAmount) external view override returns (uint256) {\\r\\n        return _calculateFundingFees(startTime, endTime, positionUnitsAmount);\\r\\n    }\\r\\n\\r\\n    function calculateFundingFees(uint256 startTime, uint256 positionUnitsAmount) external view override returns (uint256) {\\r\\n        return _calculateFundingFees(startTime, latestSnapshotTimestamp, positionUnitsAmount);\\r\\n    }\\r\\n\\r\\n    function calculateFundingFeesAddendum(uint256 positionUnitsAmount) external view override returns (uint256) {\\r\\n        if (positionUnitsAmount == 0 || latestSnapshotTimestamp == 0 || latestSnapshotTimestamp == block.timestamp) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint80 currRoundId = latestOracleRoundId;\\r\\n        (uint16 latestCVIValue ,uint80 updatedLatestOracleRoundId) = cviOracle.getCVILatestRoundData();\\r\\n        (uint16 lastCVIValue,) = cviOracle.getCVIRoundData(currRoundId);\\r\\n        uint256 lastCVITimestamp = latestSnapshotTimestamp;\\r\\n\\r\\n        IFeesCalculator.CVIValue[] memory cviValues = new IFeesCalculator.CVIValue[](updatedLatestOracleRoundId.sub(latestOracleRoundId).add(1));\\r\\n\\r\\n        while (currRoundId < updatedLatestOracleRoundId) {\\r\\n            currRoundId = currRoundId.add(1);\\r\\n            (uint16 currCVIValue, uint256 currCVITimestamp) = cviOracle.getCVIRoundData(currRoundId);\\r\\n            cviValues[currRoundId.sub(latestOracleRoundId).sub(1)] = IFeesCalculator.CVIValue(currCVITimestamp.sub(lastCVITimestamp), lastCVIValue);\\r\\n            \\r\\n            lastCVITimestamp = currCVITimestamp;\\r\\n            lastCVIValue = currCVIValue;\\r\\n       }\\r\\n\\r\\n       cviValues[currRoundId.sub(latestOracleRoundId)] = IFeesCalculator.CVIValue(block.timestamp.sub(lastCVITimestamp), latestCVIValue);\\r\\n       return positionUnitsAmount.mul(feesCalculator.calculateSingleUnitFundingFee(cviValues)).div(PRECISION_DECIMALS);\\r\\n    }\\r\\n\\r\\n    function _calculateFundingFees(uint256 startTime, uint256 endTime, uint256 positionUnitsAmount) private view returns (uint256) {\\r\\n        return cviSnapshots[endTime].sub(cviSnapshots[startTime]).mul(positionUnitsAmount).div(PRECISION_DECIMALS);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/C/dev/repos/coti-cvix-contracts/contracts/interfaces/ICVIOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.6.2;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\ninterface ICVIOracle {\\r\\n    function getCVIRoundData(uint80 roundId) external view returns (uint16 cviValue, uint256 cviTimestamp);\\r\\n    function getCVILatestRoundData() external view returns (uint16 cviValue, uint80 cviRoundId);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/C/dev/repos/coti-cvix-contracts/contracts/interfaces/IFeesCalculator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.6.2;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\ninterface IFeesCalculator {\\r\\n\\r\\n    struct CVIValue {\\r\\n        uint256 period;\\r\\n        uint16 cviValue;\\r\\n    }\\r\\n\\r\\n    function updateTurbulenceIndicatorPercent(uint256[] calldata periods) external returns (uint16);\\r\\n\\r\\n    function setTurbulenceUpdator(address newUpdator) external;\\r\\n\\r\\n    function setDepositFee(uint16 newDepositFeePercentage) external;\\r\\n    function setWithdrawFee(uint16 newWithdrawFeePercentage) external;\\r\\n    function setOpenPositionFee(uint16 newOpenPositionFeePercentage) external;\\r\\n    function setClosePositionFee(uint16 newClosePositionFeePercentage) external;\\r\\n    function setClosePositionMaxFee(uint16 newClosePositionMaxFeePercentage) external;\\r\\n    function setClosePositionFeeDecay(uint256 newClosePositionFeeDecayPeriod) external;\\r\\n    \\r\\n    function setOracleHeartbeatPeriod(uint256 newOracleHeartbeatPeriod) external;\\r\\n    function setBuyingPremiumFeeMax(uint16 newBuyingPremiumFeeMaxPercentage) external;\\r\\n    function setBuyingPremiumThreshold(uint16 newBuyingPremiumThreshold) external;\\r\\n    function setTurbulenceStep(uint16 newTurbulenceStepPercentage) external;\\r\\n    function setTurbulenceFeeMinPercentThreshold(uint16 _newTurbulenceFeeMinPercentThreshold) external;\\r\\n\\r\\n    function calculateBuyingPremiumFee(uint256 tokenAmount, uint256 collateralRatio) external view returns (uint256 buyingPremiumFee);\\r\\n    function calculateSingleUnitFundingFee(CVIValue[] calldata cviValues) external pure returns (uint256 fundingFee);\\r\\n    function calculateClosePositionFeePercent(uint256 creationTimestamp) external view returns (uint16);\\r\\n    function calculateWithdrawFeePercent(uint256 lastDepositTimestamp) external view returns (uint16);\\r\\n\\r\\n    function depositFeePercent() external returns (uint16);\\r\\n    function withdrawFeePercent() external returns (uint16);\\r\\n    function openPositionFeePercent() external returns (uint16);\\r\\n    function closePositionFeePercent() external returns (uint16);\\r\\n    function buyingPremiumFeeMaxPercent() external returns (uint16);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/C/dev/repos/coti-cvix-contracts/contracts/interfaces/IFeesModel.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.6.2;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./ICVIOracle.sol\\\";\\r\\nimport \\\"./IFeesCalculator.sol\\\";\\r\\n\\r\\ninterface IFeesModel {\\r\\n    function updateSnapshots() external returns (uint256);\\r\\n\\r\\n    function setCVIOracle(ICVIOracle newOracle) external;\\r\\n    function setFeesCalculator(IFeesCalculator newCalculator) external;\\r\\n    function setLatestOracleRoundId(uint80 newOracleRoundId) external;\\r\\n    function setMaxOracleValuesUsed(uint80 newMaxOracleValuesUsed) external;\\r\\n\\r\\n    function calculateFundingFees(uint256 startTime, uint256 positionUnitsAmount) external view returns (uint256);\\r\\n    function calculateFundingFees(uint256 startTime, uint256 endTime, uint256 positionUnitsAmount) external view returns (uint256);\\r\\n    function calculateFundingFeesAddendum(uint256 positionUnitsAmount) external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/C/dev/repos/coti-cvix-contracts/contracts/utils/SafeMath8.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it's recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath8 {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint8 a, uint8 b) internal pure returns (uint8) {\\r\\n        uint8 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint8 a, uint8 b) internal pure returns (uint8) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint8 a, uint8 b, string memory errorMessage) internal pure returns (uint8) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint8 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint8 a, uint8 b) internal pure returns (uint8) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint8 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint8 a, uint8 b) internal pure returns (uint8) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint8 a, uint8 b, string memory errorMessage) internal pure returns (uint8) {\\r\\n        require(b > 0, errorMessage);\\r\\n        uint8 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint8 a, uint8 b) internal pure returns (uint8) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint8 a, uint8 b, string memory errorMessage) internal pure returns (uint8) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/C/dev/repos/coti-cvix-contracts/contracts/utils/SafeMath80.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it's recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath80 {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint80 a, uint80 b) internal pure returns (uint80) {\\r\\n        uint80 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint80 a, uint80 b) internal pure returns (uint80) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint80 a, uint80 b, string memory errorMessage) internal pure returns (uint80) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint80 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint80 a, uint80 b) internal pure returns (uint80) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint80 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint80 a, uint80 b) internal pure returns (uint80) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint80 a, uint80 b, string memory errorMessage) internal pure returns (uint80) {\\r\\n        require(b > 0, errorMessage);\\r\\n        uint80 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint80 a, uint80 b) internal pure returns (uint80) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint80 a, uint80 b, string memory errorMessage) internal pure returns (uint80) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IFeesCalculator\",\"name\":\"_feesCalculator\",\"type\":\"address\"},{\"internalType\":\"contract ICVIOracle\",\"name\":\"_cviOracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionUnitsAmount\",\"type\":\"uint256\"}],\"name\":\"calculateFundingFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionUnitsAmount\",\"type\":\"uint256\"}],\"name\":\"calculateFundingFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionUnitsAmount\",\"type\":\"uint256\"}],\"name\":\"calculateFundingFeesAddendum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxOracleValuesUsed\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICVIOracle\",\"name\":\"_newOracle\",\"type\":\"address\"}],\"name\":\"setCVIOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFeesCalculator\",\"name\":\"_newCalculator\",\"type\":\"address\"}],\"name\":\"setFeesCalculator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"_newOracleRoundId\",\"type\":\"uint80\"}],\"name\":\"setLatestOracleRoundId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"_newMaxOracleValuesUsed\",\"type\":\"uint80\"}],\"name\":\"setMaxOracleValuesUsed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateSnapshots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FeesModel","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000001ff4434e0a41dbf903aa68923d6da76904546f230000000000000000000000004fde21b467f6cccfdea1b2b51886d9d0fd05491f","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}