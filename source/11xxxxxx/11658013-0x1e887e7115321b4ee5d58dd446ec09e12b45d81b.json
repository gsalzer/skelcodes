{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts\\GFarmTokenInterface.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.7.5;\r\n\r\ninterface GFarmTokenInterface{\r\n\tfunction balanceOf(address account) external view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function burn(address from, uint256 amount) external;\r\n    function mint(address to, uint256 amount) external;\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\math\\SafeMath.sol\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Pair.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n// File: contracts\\GFarm.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\n\r\n\r\n\r\ncontract GFarm {\r\n\r\n    using SafeMath for uint;\r\n\r\n    // VARIABLES & CONSTANTS\r\n\r\n    // 1. Tokens\r\n    GFarmTokenInterface public token;\r\n    IUniswapV2Pair public lp;\r\n    address public nft;\r\n\r\n    // 2. Pool 1\r\n    uint public POOL1_MULTIPLIER; // 1e18\r\n    uint public POOL1_MULTIPLIER_UPDATED;\r\n    uint public constant POOL1_MULTIPLIER_UPDATE_EVERY = 45000; // 1 week (blocks)\r\n    uint public POOL1_lastRewardBlock;\r\n    uint public POOL1_accTokensPerLP; // 1e18\r\n    uint public constant POOL1_REFERRAL_P = 6; // % 2 == 0\r\n    uint public constant POOL1_CREDITS_MIN_P = 1;\r\n\r\n    // 3. Pool 2\r\n    uint public immutable POOL2_MULTIPLIER; // 1e18\r\n    uint public constant POOL2_DURATION = 32000; // 5 days\r\n    uint public immutable POOL2_END;\r\n    uint public POOL2_lastRewardBlock;\r\n    uint public POOL2_accTokensPerETH; // 1e18\r\n\r\n    // 4. Pool 1 & Pool 2\r\n    uint public immutable POOLS_START;\r\n    uint public constant POOLS_START_DELAY = 1775;\r\n    uint public constant PRECISION = 1e5;\r\n\r\n    // 5. Useful Uniswap addresses (for TVL & APY)\r\n    address constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    IUniswapV2Pair constant ETH_USDC_PAIR = IUniswapV2Pair(0xB4e16d0168e52d35CaCD2c6185b44281Ec28C9Dc);\r\n\r\n    // 6. Governance & dev fund\r\n    address public GOVERNANCE;\r\n    address public immutable DEV_FUND;\r\n    uint constant GOVERNANCE_P = 500000; // PRECISION\r\n    uint constant DEV_FUND_P = 500000; // PRECISION\r\n\r\n    // 7. Info about each user\r\n    struct User {\r\n        uint POOL1_provided;\r\n        uint POOL1_rewardDebt;\r\n        address POOL1_referral;\r\n        uint POOL1_referralReward;\r\n\r\n        uint POOL2_provided;\r\n        uint POOL2_rewardDebt;\r\n\r\n        uint NFT_CREDITS_amount;\r\n        uint NFT_CREDITS_lastUpdated;\r\n        bool NFT_CREDITS_receiving;\r\n    }\r\n    mapping(address => User) public users;\r\n\r\n    constructor(address _GOV, address _DEV){\r\n        // Distribution = 7500 * (3/4)^(n-1) (n = week)\r\n        POOL1_MULTIPLIER = uint(7500 * 1e18) / 45000;\r\n        POOL1_MULTIPLIER_UPDATED = block.number.add(POOLS_START_DELAY);\r\n\r\n        POOL2_MULTIPLIER = POOL1_MULTIPLIER.div(10);\r\n        POOL2_END = block.number.add(POOLS_START_DELAY)\r\n                    .add(POOL2_DURATION);\r\n\r\n        POOLS_START = block.number.add(POOLS_START_DELAY);\r\n\r\n        GOVERNANCE = _GOV;\r\n        DEV_FUND = _DEV;\r\n    }\r\n\r\n    // GOVERNANCE\r\n\r\n    // 0. Modifier\r\n    modifier onlyGov(){\r\n        require(msg.sender == GOVERNANCE);\r\n        _;\r\n    }\r\n\r\n    // 1. Update governance address\r\n    function set_GOVERNANCE(address _gov) external onlyGov{\r\n        GOVERNANCE = _gov;\r\n    }\r\n\r\n    // 2. Set token address\r\n    function set_TOKEN(address _token) external onlyGov{\r\n        require(token == GFarmTokenInterface(0), \"Token address already set\");\r\n        token = GFarmTokenInterface(_token);\r\n    }\r\n\r\n    // 3. Set lp address\r\n    function set_LP(address _lp) external onlyGov{\r\n        require(lp == IUniswapV2Pair(0), \"LP address already set\");\r\n        lp = IUniswapV2Pair(_lp);\r\n    }\r\n\r\n    // 4. Set token address\r\n    function set_NFT(address _nft) external onlyGov{\r\n        require(nft == address(0), \"NFT address already set\");\r\n        nft = _nft;\r\n    }\r\n\r\n    // POOL REWARDS BETWEEN 2 BLOCKS\r\n\r\n    // 1. Pool 1 (1e18)\r\n    function POOL1_getReward(uint _from, uint _to) private view returns (uint){\r\n        uint blocks;\r\n\r\n        if(_from >= POOLS_START && _to >= POOLS_START){\r\n            blocks = _to.sub(_from);\r\n        }\r\n\r\n        return blocks.mul(POOL1_MULTIPLIER);\r\n    }\r\n\r\n    // 2. Pool 2 (1e18)\r\n    function POOL2_getReward(uint _from, uint _to) private view returns (uint){\r\n        uint blocks;\r\n\r\n        if(_from >= POOLS_START && _to >= POOLS_START){\r\n            // Before pool 2 has ended\r\n            if(_from <= POOL2_END && _to <= POOL2_END){\r\n                blocks = _to.sub(_from);\r\n            // Between before and after pool 2 has ended\r\n            }else if(_from <= POOL2_END && _to > POOL2_END){\r\n                blocks = POOL2_END.sub(_from);\r\n            // After pool 2 has ended\r\n            }else if(_from > POOL2_END && _to > POOL2_END){\r\n                blocks = 0;\r\n            }\r\n        }\r\n\r\n        return blocks.mul(POOL2_MULTIPLIER);\r\n    }\r\n\r\n    // UPDATE POOL VARIABLES\r\n\r\n    // 1. Pool 1\r\n    function POOL1_update() private {\r\n        uint lpSupply = lp.balanceOf(address(this));\r\n\r\n        if (POOL1_lastRewardBlock == 0 || lpSupply == 0) {\r\n            POOL1_lastRewardBlock = block.number;\r\n            return;\r\n        }\r\n\r\n        uint reward = POOL1_getReward(POOL1_lastRewardBlock, block.number);\r\n        \r\n        token.mint(address(this), reward);\r\n        token.mint(GOVERNANCE, reward.mul(GOVERNANCE_P).div(100*PRECISION));\r\n        token.mint(DEV_FUND, reward.mul(DEV_FUND_P).div(100*PRECISION));\r\n\r\n        POOL1_accTokensPerLP = POOL1_accTokensPerLP.add(\r\n            reward.mul(1e18).div(lpSupply)\r\n        );\r\n        POOL1_lastRewardBlock = block.number;\r\n\r\n        if(block.number >= POOL1_MULTIPLIER_UPDATED.add(POOL1_MULTIPLIER_UPDATE_EVERY)){\r\n            POOL1_MULTIPLIER = POOL1_MULTIPLIER.mul(3).div(4);\r\n            POOL1_MULTIPLIER_UPDATED = block.number;\r\n        }\r\n    }   \r\n\r\n    // 2. Pool 2\r\n    function POOL2_update(uint ethJustStaked) private {\r\n        // ETH balance is updated before the rest of the code\r\n        uint ethSupply = address(this).balance.sub(ethJustStaked);\r\n\r\n        if (POOL2_lastRewardBlock == 0 || ethSupply == 0) {\r\n            POOL2_lastRewardBlock = block.number;\r\n            return;\r\n        }\r\n\r\n        uint reward = POOL2_getReward(POOL2_lastRewardBlock, block.number);\r\n        \r\n        token.mint(address(this), reward);\r\n        token.mint(GOVERNANCE, reward.mul(GOVERNANCE_P).div(100*PRECISION));\r\n        token.mint(DEV_FUND, reward.mul(DEV_FUND_P).div(100*PRECISION));\r\n\r\n        POOL2_accTokensPerETH = POOL2_accTokensPerETH.add(reward.mul(1e18).div(ethSupply));\r\n        POOL2_lastRewardBlock = block.number;\r\n    }\r\n\r\n    // PENDING REWARD\r\n\r\n    // 1. Pool 1 external (1e18)\r\n    function POOL1_pendingReward() external view returns(uint){\r\n        return _POOL1_pendingReward(users[msg.sender]);\r\n    }\r\n\r\n    // 2. Pool 1 private (1e18)\r\n    function _POOL1_pendingReward(User memory u) private view returns(uint){\r\n        uint _POOL1_accTokensPerLP = POOL1_accTokensPerLP;\r\n        uint lpSupply = lp.balanceOf(address(this));\r\n\r\n        if (block.number > POOL1_lastRewardBlock && lpSupply != 0) {\r\n            uint pendingReward = POOL1_getReward(POOL1_lastRewardBlock, block.number);\r\n            _POOL1_accTokensPerLP = _POOL1_accTokensPerLP.add(\r\n                pendingReward.mul(1e18).div(lpSupply)\r\n            );\r\n        }\r\n\r\n        return u.POOL1_provided.mul(_POOL1_accTokensPerLP).div(1e18)\r\n                .sub(u.POOL1_rewardDebt);\r\n    }\r\n\r\n    // 3. Pool 2 external (1e18)\r\n    function POOL2_pendingReward() external view returns(uint){\r\n        return _POOL2_pendingReward(users[msg.sender], 0);\r\n    }\r\n    \r\n    // 4. Pool 2 private (1e18)\r\n    function _POOL2_pendingReward(User memory u, uint ethJustStaked) private view returns(uint){\r\n        uint _POOL2_accTokensPerETH = POOL2_accTokensPerETH;\r\n        // ETH balance is updated before the rest of the code\r\n        uint ethSupply = address(this).balance.sub(ethJustStaked);\r\n\r\n        if (block.number > POOL2_lastRewardBlock && ethSupply != 0) {\r\n            uint pendingReward = POOL2_getReward(POOL2_lastRewardBlock, block.number);\r\n            _POOL2_accTokensPerETH = _POOL2_accTokensPerETH.add(\r\n                pendingReward.mul(1e18).div(ethSupply)\r\n            );\r\n        }\r\n\r\n        return u.POOL2_provided.mul(_POOL2_accTokensPerETH).div(1e18)\r\n            .sub(u.POOL2_rewardDebt);\r\n    }\r\n\r\n    // HARVEST REWARDS\r\n\r\n    // 1. Pool 1 external\r\n    function POOL1_harvest() external{\r\n        require(block.number >= POOLS_START, \"Pool hasn't started yet.\");\r\n        _POOL1_harvest(msg.sender);\r\n    }\r\n\r\n    // 2. Pool 1 private\r\n    function _POOL1_harvest(address a) private{\r\n        User storage u = users[a];\r\n        uint pending = _POOL1_pendingReward(u);\r\n        POOL1_update();\r\n\r\n        if(pending > 0){\r\n            if(u.POOL1_referral == address(0)){\r\n                POOLS_safeTokenTransfer(a, pending);\r\n                token.burn(a, pending.mul(POOL1_REFERRAL_P).div(100));\r\n            }else{\r\n                uint referralReward = pending.mul(POOL1_REFERRAL_P.div(2)).div(100);\r\n                uint userReward = pending.sub(referralReward);\r\n\r\n                POOLS_safeTokenTransfer(a, userReward);\r\n                POOLS_safeTokenTransfer(u.POOL1_referral, referralReward);\r\n\r\n                User storage referralUser = users[u.POOL1_referral];\r\n                referralUser.POOL1_referralReward = referralUser.POOL1_referralReward\r\n                                                    .add(referralReward);\r\n            }\r\n        }\r\n\r\n        u.POOL1_rewardDebt = u.POOL1_provided.mul(POOL1_accTokensPerLP).div(1e18);\r\n    }\r\n\r\n    // 3. Pool 2 external\r\n    function POOL2_harvest() external{\r\n        require(block.number >= POOLS_START, \"Pool hasn't started yet.\");\r\n        _POOL2_harvest(msg.sender, 0);\r\n    }\r\n    \r\n    // 4. Pool 2 private\r\n    function _POOL2_harvest(address a, uint ethJustStaked) private{\r\n        User storage u = users[a];\r\n        uint pending = _POOL2_pendingReward(u, ethJustStaked);\r\n        POOL2_update(ethJustStaked);\r\n\r\n        if(pending > 0){\r\n            POOLS_safeTokenTransfer(a, pending);\r\n        }\r\n\r\n        u.POOL2_rewardDebt = u.POOL2_provided.mul(POOL2_accTokensPerETH).div(1e18);\r\n    }\r\n\r\n    // STAKE\r\n\r\n    // 1. Pool 1\r\n    function POOL1_stake(uint amount, address referral) external{\r\n        require(tx.origin == msg.sender, \"Contracts not allowed.\");\r\n        require(block.number >= POOLS_START, \"Pool hasn't started yet.\");\r\n        require(amount > 0, \"Staking 0 lp.\");\r\n\r\n        uint lpSupplyBefore = lp.balanceOf(address(this));\r\n\r\n        _POOL1_harvest(msg.sender);\r\n        lp.transferFrom(msg.sender, address(this), amount);\r\n\r\n        User storage u = users[msg.sender];\r\n        u.POOL1_provided = u.POOL1_provided.add(amount);\r\n        u.POOL1_rewardDebt = u.POOL1_provided.mul(POOL1_accTokensPerLP).div(1e18);\r\n\r\n        if(!u.NFT_CREDITS_receiving\r\n            && u.POOL1_provided >= lpSupplyBefore.mul(POOL1_CREDITS_MIN_P).div(100)){\r\n            u.NFT_CREDITS_receiving = true;\r\n            u.NFT_CREDITS_lastUpdated = block.number;\r\n        }\r\n\r\n        if(u.POOL1_referral == address(0) && referral != address(0)\r\n            && referral != msg.sender){\r\n            u.POOL1_referral = referral;\r\n        }\r\n    }\r\n\r\n    // 2. Pool 2\r\n    function POOL2_stake() payable external{\r\n        require(tx.origin == msg.sender, \"Contracts not allowed.\");\r\n        require(block.number >= POOLS_START, \"Pool hasn't started yet.\");\r\n        require(block.number <= POOL2_END, \"Pool is finished, no more staking.\");\r\n        require(msg.value > 0, \"Staking 0 ETH.\");\r\n\r\n        _POOL2_harvest(msg.sender, msg.value);\r\n\r\n        User storage u = users[msg.sender];\r\n        u.POOL2_provided = u.POOL2_provided.add(msg.value);\r\n        u.POOL2_rewardDebt = u.POOL2_provided.mul(POOL2_accTokensPerETH).div(1e18);\r\n    }\r\n\r\n    // UNSTAKE\r\n\r\n    // 1. Pool 1\r\n    function POOL1_unstake(uint amount) external{\r\n        User storage u = users[msg.sender];\r\n        require(amount > 0, \"Unstaking 0 lp.\");\r\n        require(u.POOL1_provided >= amount, \"Unstaking more than currently staked.\");\r\n\r\n        _POOL1_harvest(msg.sender);\r\n        lp.transfer(msg.sender, amount);\r\n\r\n        u.POOL1_provided = u.POOL1_provided.sub(amount);\r\n        u.POOL1_rewardDebt = u.POOL1_provided.mul(POOL1_accTokensPerLP).div(1e18);\r\n\r\n        uint lpSupply = lp.balanceOf(address(this));\r\n\r\n        if(u.NFT_CREDITS_receiving\r\n            && u.POOL1_provided < lpSupply.mul(POOL1_CREDITS_MIN_P).div(100)\r\n            || u.NFT_CREDITS_receiving && lpSupply == 0){\r\n            u.NFT_CREDITS_amount = NFT_CREDITS_amount(msg.sender);\r\n            u.NFT_CREDITS_receiving = false;\r\n            u.NFT_CREDITS_lastUpdated = block.number;\r\n        }\r\n    }\r\n\r\n    // 2. Pool 2\r\n    function POOL2_unstake(uint amount) external{\r\n        User storage u = users[msg.sender];\r\n        require(amount > 0, \"Unstaking 0 ETH.\");\r\n        require(u.POOL2_provided >= amount, \"Unstaking more than currently staked.\");\r\n\r\n        _POOL2_harvest(msg.sender, 0);\r\n        msg.sender.transfer(amount);\r\n\r\n        u.POOL2_provided = u.POOL2_provided.sub(amount);\r\n        u.POOL2_rewardDebt = u.POOL2_provided.mul(POOL2_accTokensPerETH).div(1e18);\r\n    }\r\n\r\n    // NFTs\r\n\r\n    // 1. NFT credits of msg.sender\r\n    function NFT_CREDITS_amount(address a) public view returns(uint){\r\n        User memory u = users[a];\r\n        if(u.NFT_CREDITS_receiving){\r\n            return u.NFT_CREDITS_amount.add(block.number.sub(u.NFT_CREDITS_lastUpdated));\r\n        }else{\r\n            return u.NFT_CREDITS_amount;\r\n        }\r\n    }\r\n\r\n    // 2. Spend NFT credits when claiming an NFT\r\n    function spendCredits(address a, uint requiredCredits) external{\r\n        require(msg.sender == nft, \"Can only called by GFarmNFT.\");\r\n        User storage u = users[a];\r\n        u.NFT_CREDITS_amount = NFT_CREDITS_amount(a).sub(requiredCredits);\r\n        u.NFT_CREDITS_lastUpdated = block.number;\r\n    }\r\n\r\n    // PREVENT ROUNDING ERRORS\r\n\r\n    function POOLS_safeTokenTransfer(address _to, uint _amount) private {\r\n        uint bal = token.balanceOf(address(this));\r\n        if (_amount > bal) {\r\n            token.transfer(_to, bal);\r\n        } else {\r\n            token.transfer(_to, _amount);\r\n        }\r\n    }\r\n\r\n    // USEFUL PRICING FUNCTIONS (FOR TVL & APY)\r\n\r\n    // 1. ETH/USD price (PRECISION)\r\n    function getEthPrice() private view returns(uint){\r\n        (uint112 reserves0, uint112 reserves1, ) = ETH_USDC_PAIR.getReserves();\r\n        uint reserveUSDC;\r\n        uint reserveETH;\r\n\r\n        if(WETH == ETH_USDC_PAIR.token0()){\r\n            reserveETH = reserves0;\r\n            reserveUSDC = reserves1;\r\n        }else{\r\n            reserveUSDC = reserves0;\r\n            reserveETH = reserves1;\r\n        }\r\n        // Divide number of USDC by number of ETH\r\n        // we multiply by 1e12 because USDC only has 6 decimals\r\n        return reserveUSDC.mul(1e12).mul(PRECISION).div(reserveETH);\r\n    }\r\n    // 2. GFARM/ETH price (PRECISION)\r\n    function getGFarmPriceEth() private view returns(uint){\r\n        (uint112 reserves0, uint112 reserves1, ) = lp.getReserves();\r\n\r\n        uint reserveETH;\r\n        uint reserveGFARM;\r\n\r\n        if(WETH == lp.token0()){\r\n            reserveETH = reserves0;\r\n            reserveGFARM = reserves1;\r\n        }else{\r\n            reserveGFARM = reserves0;\r\n            reserveETH = reserves1;\r\n        }\r\n\r\n        return reserveETH.mul(PRECISION).div(reserveGFARM);\r\n    }\r\n\r\n    // UI VIEW FUNCTIONS (READ-ONLY)\r\n    \r\n    function POOLS_blocksLeftUntilStart() external view returns(uint){\r\n        if(block.number > POOLS_START){ return 0; }\r\n        return POOLS_START.sub(block.number);\r\n    }\r\n\r\n    function POOL1_getMultiplier() public view returns (uint) {\r\n        if(block.number < POOLS_START){\r\n            return 0;\r\n        }\r\n        return POOL1_MULTIPLIER;\r\n    }\r\n\r\n    function POOL2_getMultiplier() public view returns (uint) {\r\n        if(block.number < POOLS_START || block.number > POOL2_END){\r\n            return 0;\r\n        }\r\n        return POOL2_MULTIPLIER;\r\n    }\r\n\r\n    function POOL1_provided() external view returns(uint){\r\n        return users[msg.sender].POOL1_provided;\r\n    }\r\n\r\n    function POOL2_provided() external view returns(uint){\r\n        return users[msg.sender].POOL2_provided;\r\n    }\r\n\r\n    function POOL1_referralReward() external view returns(uint){\r\n        return users[msg.sender].POOL1_referralReward;\r\n    }\r\n\r\n    function POOL2_blocksLeft() external view returns(uint){\r\n        if(block.number > POOL2_END){\r\n            return 0;\r\n        }\r\n        return POOL2_END.sub(block.number);\r\n    }\r\n\r\n    function POOL1_referral() external view returns(address){\r\n        return users[msg.sender].POOL1_referral;\r\n    }\r\n\r\n    function POOL1_minLpsNftCredits() external view returns(uint){\r\n        return lp.balanceOf(address(this)).mul(POOL1_CREDITS_MIN_P).div(100);\r\n    }\r\n\r\n    // (PRECISION)\r\n    function POOL1_tvl() public view returns(uint){\r\n        if(lp.totalSupply() == 0){ return 0; }\r\n\r\n        (uint112 reserves0, uint112 reserves1, ) = lp.getReserves();\r\n        uint reserveEth;\r\n\r\n        if(WETH == lp.token0()){\r\n            reserveEth = reserves0;\r\n        }else{\r\n            reserveEth = reserves1;\r\n        }\r\n\r\n        uint lpPriceEth = reserveEth.mul(1e5).mul(2).div(lp.totalSupply());\r\n        uint lpPriceUsd = lpPriceEth.mul(getEthPrice()).div(1e5);\r\n\r\n        return lp.balanceOf(address(this)).mul(lpPriceUsd).div(1e18);\r\n    }\r\n\r\n    // (PRECISION)\r\n    function POOL2_tvl() public view returns(uint){\r\n        return address(this).balance.mul(getEthPrice()).div(1e18);\r\n    }\r\n\r\n    // (PRECISION)\r\n    function POOLS_tvl() external view returns(uint){\r\n        return POOL1_tvl().add(POOL2_tvl());\r\n    }\r\n\r\n    // (PRECISION)\r\n    function POOL1_apy() external view returns(uint){\r\n        if(POOL1_tvl() == 0){ return 0; }\r\n        return POOL1_MULTIPLIER.mul(2336000)\r\n                .mul(getGFarmPriceEth()).mul(getEthPrice())\r\n                .mul(100).div(POOL1_tvl());\r\n    }\r\n\r\n    // (PRECISION)\r\n    function POOL2_apy() external view returns(uint){\r\n        if(POOL2_tvl() == 0){ return 0; }\r\n        return POOL2_MULTIPLIER.mul(2336000)\r\n                .mul(getGFarmPriceEth()).mul(getEthPrice())\r\n                .mul(100).div(POOL2_tvl());\r\n    }\r\n\r\n    function myNftCredits() external view returns(uint){\r\n        return NFT_CREDITS_amount(msg.sender);\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_GOV\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_DEV\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DEV_FUND\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GOVERNANCE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"NFT_CREDITS_amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL1_CREDITS_MIN_P\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL1_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL1_MULTIPLIER_UPDATED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL1_MULTIPLIER_UPDATE_EVERY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL1_REFERRAL_P\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL1_accTokensPerLP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL1_apy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL1_getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL1_harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL1_lastRewardBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL1_minLpsNftCredits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL1_pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL1_provided\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL1_referral\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL1_referralReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"}],\"name\":\"POOL1_stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL1_tvl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"POOL1_unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL2_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL2_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL2_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL2_accTokensPerETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL2_apy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL2_blocksLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL2_getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL2_harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL2_lastRewardBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL2_pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL2_provided\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL2_stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL2_tvl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"POOL2_unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOLS_START\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOLS_START_DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOLS_blocksLeftUntilStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOLS_tvl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lp\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"myNftCredits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"}],\"name\":\"set_GOVERNANCE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lp\",\"type\":\"address\"}],\"name\":\"set_LP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"}],\"name\":\"set_NFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"set_TOKEN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"requiredCredits\",\"type\":\"uint256\"}],\"name\":\"spendCredits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract GFarmTokenInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"POOL1_provided\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"POOL1_rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"POOL1_referral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"POOL1_referralReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"POOL2_provided\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"POOL2_rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"NFT_CREDITS_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"NFT_CREDITS_lastUpdated\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"NFT_CREDITS_receiving\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"GFarm","CompilerVersion":"v0.7.5+commit.eb77ed08","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"000000000000000000000000c66fbe50dd33c9aadd65707f7088d597c86fe00f000000000000000000000000d39a38bd2d2d552f3908ff698a5530aa397fb92d","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://0a4d01bf19c9be3ae010a82ca714584710abfd893d36fa31692f3ceea195c38f"}]}