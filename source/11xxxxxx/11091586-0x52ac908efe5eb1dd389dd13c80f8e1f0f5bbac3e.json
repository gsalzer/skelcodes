{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.6.12;\n\n\n// \n// TODO: Needs testing to make sure math is correct and overflow/underflows are caught in all cases\nlibrary BoringMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) { uint256 c = a + b; require(c >= b, \"BoringMath: Overflow\"); return c; }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) { require(b <= a, \"BoringMath: Underflow\"); return a - b; }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256)\r\n        { if (a == 0) {return 0;} uint256 c = a * b; require(c / a == b, \"BoringMath: Overflow\"); return c; }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) { require(b > 0, \"BoringMath: Div by 0\"); return a / b; }\r\n}\n\n// \n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\n// Edited by BoringCrypto\n// - removed GSN context\n// - removed comments (we all know this contract)\n// - updated solidity version\n// - made _owner public and renamed to owner\n// - simplified code\n// - onlyOwner modifier removed. Just copy the one line. Cheaper in gas, better readability and better error message.\n// TODO: Consider using the version that requires acceptance from new owner\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () internal {\r\n        owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    function renounceOwnership() public virtual {\r\n        require(owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        emit OwnershipTransferred(owner, address(0));\r\n        owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual {\r\n        require(owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n}\n\n// \n// solium-disable security/no-inline-assembly\n// solium-disable security/no-low-level-calls\ninterface IPair {\r\n    function init(address vault_, address tokenA_, address tokenB_, address oracle_) external;\r\n}\n\ninterface IFlashLoaner {\r\n    function executeOperation(address token, uint256 amount, uint256 fee, bytes calldata params) external;\r\n}\n\ncontract Vault is Ownable {\r\n    using BoringMath for uint256;\r\n\r\n    event PairContractSet(address indexed pairContract, bool enabled);\r\n    event SwapperSet(address swapper, bool enabled);\r\n    event PairCreated(address indexed pairContract, address indexed tokenA, address indexed tokenB, address oracle, address clone_address);\r\n    event FlashLoan(address indexed user, address indexed token, uint256 amount, uint256 fee);\r\n\r\n    mapping(address => bool) public pairContracts;\r\n    mapping(address => bool) public swappers;\r\n    mapping(address => bool) public isPair;\r\n    mapping(address => uint256) public feesPending;\r\n    address public feeTo;\r\n    address public dev = 0x9e6e344f94305d36eA59912b0911fE2c9149Ed3E;\r\n\r\n    function setPairContract(address pairContract, bool enabled) public onlyOwner() {\r\n        pairContracts[pairContract] = enabled;\r\n        emit PairContractSet(pairContract, enabled);\r\n    }\r\n\r\n    function setSwapper(address swapper, bool enabled) public onlyOwner() {\r\n        swappers[swapper] = enabled;\r\n        emit SwapperSet(swapper, enabled);\r\n    }\r\n\r\n    function setFeeTo(address newFeeTo) public onlyOwner {\r\n        feeTo = newFeeTo;\r\n    }\r\n\r\n    function setDev(address newDev) public {\r\n        require(msg.sender == dev, 'BentoBox: Not dev');\r\n        dev = newDev;\r\n    }\r\n\r\n    function deploy(address pairContract, address tokenA, address tokenB, address oracle, bytes calldata oracleData) public {\r\n        require(pairContracts[pairContract], 'BentoBox: Pair Contract not whitelisted');\r\n        bytes20 targetBytes = bytes20(pairContract);\r\n        address clone_address;\r\n\r\n        assembly {\r\n            let clone := mload(0x40)\r\n            mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n            mstore(add(clone, 0x14), targetBytes)\r\n            mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\r\n            clone_address := create(0, clone, 0x37)\r\n        }\r\n\r\n        (bool success,) = oracle.call(abi.encodePacked(oracleData, abi.encode(clone_address)));\r\n        require(success, 'BentoBox Vault: oracle init failed.');\r\n\r\n        IPair(clone_address).init(address(this), tokenA, tokenB, oracle);\r\n        isPair[clone_address] = true;\r\n\r\n        emit PairCreated(pairContract, tokenA, tokenB, oracle, clone_address);\r\n    }\r\n\r\n    function transfer(address token, address to, uint256 amount) public {\r\n        require(isPair[msg.sender], \"BentoBox: Only pair contracts can transfer\");\r\n\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, amount));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"BentoBox: Transfer failed at ERC20\");\r\n    }\r\n\r\n    function transferFrom(address token, address from, uint256 amount) public {\r\n        require(isPair[msg.sender], \"BentoBox: Only pair contracts can transferFrom\");\r\n\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, address(this), amount));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"BentoBox: TransferFrom failed at ERC20\");\r\n    }\r\n\r\n    function flashLoan(address user, address token, uint256 amount, bytes calldata params) public {\r\n        transfer(token, user, amount);\r\n\r\n        uint256 fee = amount.mul(8).div(10000);\r\n\r\n        IFlashLoaner(user).executeOperation(token, amount, fee, params);\r\n\r\n        transferFrom(token, user, amount.add(fee));\r\n        feesPending[token] = feesPending[token].add(fee);\r\n        emit FlashLoan(user, token, amount, fee);\r\n    }\r\n\r\n    function withdrawFees(address token) public {\r\n        uint256 fees = feesPending[token].sub(1);\r\n        uint256 devFee = fees.div(10);\r\n        feesPending[token] = 1;  // Don't set it to 0 as that would increase the gas cost for the next accrue called by a user.\r\n        transfer(token, feeTo, fees.sub(devFee));\r\n        transfer(token, dev, devFee);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"FlashLoan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pairContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"PairContractSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pairContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"clone_address\",\"type\":\"address\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"swapper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapperSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pairContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"oracleData\",\"type\":\"bytes\"}],\"name\":\"deploy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dev\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feesPending\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"flashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pairContracts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDev\",\"type\":\"address\"}],\"name\":\"setDev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFeeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pairContract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setPairContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapper\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setSwapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swappers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Vault","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}