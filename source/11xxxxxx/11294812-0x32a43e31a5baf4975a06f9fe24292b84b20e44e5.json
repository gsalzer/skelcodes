{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.23 <0.6.0;\r\n\r\ncontract MyGain {\r\n    \r\n    struct User {\r\n        uint id;\r\n        address referrer;\r\n        uint partnersCount;\r\n        mapping(uint8 => bool) activeM3Levels;\r\n        mapping(uint8 => bool) activeM4Levels;\r\n        mapping(uint8 => M3) m3Matrix;\r\n        mapping(uint8 => M4) m4Matrix;\r\n    }\r\n    \r\n    struct M3 {\r\n        address currentReferrer;\r\n        address[] referrals;\r\n        bool blocked;\r\n        uint reinvestCount;\r\n    }\r\n    \r\n    struct M4 {\r\n        address currentReferrer;\r\n        address[] firstLevelReferrals;\r\n        address[] secondLevelReferrals;\r\n        bool blocked;\r\n        uint reinvestCount;\r\n        address closedPart;\r\n    }\r\n\r\n    uint8 public constant LAST_LEVEL = 6;\r\n    uint public lastUserId = 2;\r\n    uint public adminFee = 1 ether;\r\n    bool public lockStatus;\r\n    address public owner;\r\n    address public m3Wallet;\r\n    address public m4Wallet;\r\n    address public commissionWalet;\r\n    \r\n    mapping (address => User) public users;\r\n    mapping (uint8 => uint) public levelPrice;\r\n    mapping (uint => address) public userList;\r\n    \r\n     modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only Owner\");\r\n        _;\r\n    }\r\n    \r\n    modifier isLock() {\r\n        require(lockStatus == false, \"Contract Locked\");\r\n        _;\r\n    }\r\n    \r\n    event Registration(address indexed user, address indexed referrer, uint indexed userId, uint referrerId, uint _time);\r\n    event Reinvest(address indexed user, address indexed currentReferrer, address indexed caller, uint8 matrix, uint8 level, uint _time);\r\n    event Upgrade(address indexed user, address indexed referrer, uint8 matrix, uint8 level, uint _time);\r\n    event NewUserPlace(address indexed user, address indexed referrer, uint8 matrix, uint8 level, uint8 place, uint _time);\r\n    event MissedEthReceive(address indexed receiver, address indexed from, uint8 matrix, uint8 level, uint _time);\r\n    event RecievedEth(address indexed receiver, address indexed _from, uint8 matrix, uint8 level, uint _time);\r\n    event SentExtraEthDividends(address indexed from, address indexed receiver, uint8 matrix, uint8 level, uint _time);\r\n    event CommissionEvent(address _from, address _commissionWalet, uint _commissionAmount, uint8 _matrix, uint8 _level, uint _time);\r\n    \r\n    constructor(address ownerAddress, address _m3ReInvest, address _commissionWallet, address _m4Reinvest) public {\r\n        levelPrice[1] = 0.5 ether;\r\n        for (uint8 i = 2; i <= LAST_LEVEL; i++) {\r\n            levelPrice[i] = levelPrice[i-1] * 2;\r\n        }\r\n        \r\n        owner = ownerAddress;\r\n        m3Wallet = _m3ReInvest;\r\n        m4Wallet = _m4Reinvest;\r\n        commissionWalet = _commissionWallet;\r\n        \r\n        User memory user = User({\r\n            id: 1,\r\n            referrer: address(0),\r\n            partnersCount: uint(0)\r\n        });\r\n        \r\n        users[ownerAddress] = user;\r\n        userList[1] = ownerAddress;\r\n        \r\n        for (uint8 i = 1; i <= LAST_LEVEL; i++) {\r\n            users[ownerAddress].activeM3Levels[i] = true;\r\n            users[ownerAddress].activeM4Levels[i] = true;\r\n        }\r\n    }\r\n    \r\n    \r\n    function contractLock(bool _lockStatus) onlyOwner external returns(bool) {\r\n        lockStatus = _lockStatus;\r\n        return true;\r\n    }\r\n    \r\n    function updateLevelPrice(uint8 _level, uint _price) onlyOwner external returns(bool) {\r\n        levelPrice[_level] = _price;\r\n        return true;\r\n    }\r\n    \r\n    function updateAdminFeePercentage(uint _fee) onlyOwner external returns(bool) {\r\n        adminFee = _fee;\r\n        return true;\r\n    }\r\n    \r\n    function updateM3Wallet(address _m3) onlyOwner external returns(bool) {\r\n        m3Wallet = _m3;\r\n        return true;\r\n    }\r\n    \r\n    function updateM4Wallet(address _m4) onlyOwner external returns(bool) {\r\n        m4Wallet = _m4;\r\n        return true;\r\n    }\r\n    \r\n    function updateCommissionWallet(address _commission) onlyOwner external returns(bool) {\r\n        commissionWalet = _commission;\r\n        return true;\r\n    }\r\n    \r\n    function failSafe(address payable _toUser, uint _amount) onlyOwner external returns (bool) {\r\n        require(_toUser != address(0), \"Invalid Address\");\r\n        require(address(this).balance >= _amount, \"Insufficient balance\");\r\n        (_toUser).transfer(_amount);\r\n        return true;\r\n    }\r\n    \r\n    function() isLock external payable {\r\n        if(msg.data.length == 0) {\r\n            return registration(msg.sender, owner);\r\n        }\r\n        \r\n        registration(msg.sender, bytesToAddress(msg.data));\r\n    }\r\n\r\n    function registrationExt(address referrerAddress) isLock external payable {\r\n        registration(msg.sender, referrerAddress);\r\n    }\r\n    \r\n    function buyNewLevel(uint8 matrix, uint8 level) isLock external payable {\r\n        require(isUserExists(msg.sender), \"user is not exists. Register first.\");\r\n        require(matrix == 1 || matrix == 2, \"invalid matrix\");\r\n        require(msg.value == levelPrice[level], \"invalid price\");\r\n        require(level > 1 && level <= LAST_LEVEL, \"invalid level\");\r\n\r\n        if (matrix == 1) {\r\n            require(!users[msg.sender].activeM3Levels[level], \"level already activated\");\r\n\r\n            if (users[msg.sender].m3Matrix[level-1].blocked) {\r\n                users[msg.sender].m3Matrix[level-1].blocked = false;\r\n            }\r\n    \r\n            address freeM3Referrer = findFreeM3Referrer(msg.sender, level);\r\n            users[msg.sender].m3Matrix[level].currentReferrer = freeM3Referrer;\r\n            users[msg.sender].activeM3Levels[level] = true;\r\n            updateM3Referrer(0,msg.sender, freeM3Referrer, level);\r\n            \r\n            emit Upgrade(msg.sender, freeM3Referrer, 1, level, now);\r\n\r\n        } else {\r\n            require(!users[msg.sender].activeM4Levels[level], \"level already activated\"); \r\n\r\n            if (users[msg.sender].m4Matrix[level-1].blocked) {\r\n                users[msg.sender].m4Matrix[level-1].blocked = false;\r\n            }\r\n\r\n            address freeM4Referrer = findFreeM4Referrer(msg.sender, level);\r\n            \r\n            users[msg.sender].activeM4Levels[level] = true;\r\n            updateM4Referrer(0, msg.sender, freeM4Referrer, level);\r\n            \r\n            emit Upgrade(msg.sender, freeM4Referrer, 2, level, now);\r\n        }\r\n    }    \r\n    \r\n    function registration(address userAddress, address referrerAddress) private {\r\n        require(msg.value == levelPrice[1] * (2), \"Invalid Registration cost \");\r\n        require(!isUserExists(userAddress), \"user exists\");\r\n        require(isUserExists(referrerAddress), \"referrer not exists\");\r\n        \r\n        uint32 size;\r\n        assembly {\r\n            size := extcodesize(userAddress)\r\n        }\r\n        require(size == 0, \"cannot be a contract\");\r\n        \r\n        User memory user = User({\r\n            id: lastUserId,\r\n            referrer: referrerAddress,\r\n            partnersCount: 0\r\n        });\r\n        \r\n        users[userAddress] = user;\r\n        userList[lastUserId] = userAddress;\r\n        \r\n        users[userAddress].referrer = referrerAddress;\r\n        \r\n        users[userAddress].activeM3Levels[1] = true; \r\n        users[userAddress].activeM4Levels[1] = true;\r\n       \r\n        lastUserId++;\r\n        \r\n        users[referrerAddress].partnersCount++;\r\n\r\n        address freeM3Referrer = findFreeM3Referrer(userAddress, 1);\r\n        users[userAddress].m3Matrix[1].currentReferrer = freeM3Referrer;\r\n        updateM3Referrer(0,userAddress, freeM3Referrer, 1);\r\n\r\n        updateM4Referrer(0,userAddress, findFreeM4Referrer(userAddress, 1), 1);\r\n        \r\n        emit Registration(userAddress, referrerAddress, users[userAddress].id, users[referrerAddress].id, now);\r\n    }\r\n    \r\n    function updateM3Referrer(uint8 _flag,address userAddress, address referrerAddress, uint8 level) private {\r\n        users[referrerAddress].m3Matrix[level].referrals.push(userAddress);\r\n\r\n        if (users[referrerAddress].m3Matrix[level].referrals.length < 3) {\r\n            emit NewUserPlace(userAddress, referrerAddress, 1, level, uint8(users[referrerAddress].m3Matrix[level].referrals.length), now);\r\n            return sendETHDividends(_flag,referrerAddress, userAddress, 1, level);\r\n        }\r\n        \r\n        emit NewUserPlace(userAddress, referrerAddress, 1, level, 3, now);\r\n        //close matrix\r\n        users[referrerAddress].m3Matrix[level].referrals = new address[](0);\r\n        if (!users[referrerAddress].activeM3Levels[level+1] && level != LAST_LEVEL) {\r\n            users[referrerAddress].m3Matrix[level].blocked = true;\r\n        }\r\n\r\n        //create new one by recursion\r\n        if (referrerAddress != owner) {\r\n            //check referrer active level\r\n            address freeReferrerAddress = findFreeM3Referrer(referrerAddress, level);\r\n            if (users[referrerAddress].m3Matrix[level].currentReferrer != freeReferrerAddress) {\r\n                users[referrerAddress].m3Matrix[level].currentReferrer = freeReferrerAddress;\r\n            }\r\n            \r\n            users[referrerAddress].m3Matrix[level].reinvestCount++;\r\n            emit Reinvest(referrerAddress, freeReferrerAddress, userAddress, 1, level, now);\r\n            updateM3Referrer(1,referrerAddress, freeReferrerAddress, level);\r\n        } else {\r\n            sendETHDividends(1,owner, userAddress, 1, level);\r\n            users[owner].m3Matrix[level].reinvestCount++;\r\n            emit Reinvest(owner, address(0), userAddress, 1, level, now);\r\n        }\r\n    }\r\n\r\n    function updateM4Referrer(uint8 _flag,address userAddress, address referrerAddress, uint8 level) private {\r\n        require(users[referrerAddress].activeM4Levels[level], \"500. Referrer level is inactive\");\r\n        \r\n        if (users[referrerAddress].m4Matrix[level].firstLevelReferrals.length < 2) {\r\n            users[referrerAddress].m4Matrix[level].firstLevelReferrals.push(userAddress);\r\n            emit NewUserPlace(userAddress, referrerAddress, 2, level, uint8(users[referrerAddress].m4Matrix[level].firstLevelReferrals.length), now);\r\n            \r\n            //set current level\r\n            users[userAddress].m4Matrix[level].currentReferrer = referrerAddress;\r\n\r\n            if (referrerAddress == owner) {\r\n                return sendETHDividends(_flag,referrerAddress, userAddress, 2, level);\r\n            }\r\n            \r\n            address ref = users[referrerAddress].m4Matrix[level].currentReferrer;            \r\n            users[ref].m4Matrix[level].secondLevelReferrals.push(userAddress); \r\n            \r\n            uint len = users[ref].m4Matrix[level].firstLevelReferrals.length;\r\n            \r\n            if ((len == 2) && \r\n                (users[ref].m4Matrix[level].firstLevelReferrals[0] == referrerAddress) &&\r\n                (users[ref].m4Matrix[level].firstLevelReferrals[1] == referrerAddress)) {\r\n                if (users[referrerAddress].m4Matrix[level].firstLevelReferrals.length == 1) {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 5, now);\r\n                } else {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 6, now);\r\n                }\r\n            }  else if ((len == 1 || len == 2) &&\r\n                    users[ref].m4Matrix[level].firstLevelReferrals[0] == referrerAddress) {\r\n                if (users[referrerAddress].m4Matrix[level].firstLevelReferrals.length == 1) {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 3, now);\r\n                } else {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 4, now);\r\n                }\r\n            } else if (len == 2 && users[ref].m4Matrix[level].firstLevelReferrals[1] == referrerAddress) {\r\n                if (users[referrerAddress].m4Matrix[level].firstLevelReferrals.length == 1) {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 5, now);\r\n                } else {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 6, now);\r\n                }\r\n            }\r\n\r\n            return updateM4ReferrerSecondLevel(_flag,userAddress, ref, level);\r\n        }\r\n        \r\n        users[referrerAddress].m4Matrix[level].secondLevelReferrals.push(userAddress);\r\n\r\n        if (users[referrerAddress].m4Matrix[level].closedPart != address(0)) {\r\n            if ((users[referrerAddress].m4Matrix[level].firstLevelReferrals[0] == \r\n                users[referrerAddress].m4Matrix[level].firstLevelReferrals[1]) &&\r\n                (users[referrerAddress].m4Matrix[level].firstLevelReferrals[0] ==\r\n                users[referrerAddress].m4Matrix[level].closedPart)) {\r\n\r\n                updateM4(userAddress, referrerAddress, level, true);\r\n                return updateM4ReferrerSecondLevel(_flag,userAddress, referrerAddress, level);\r\n            } else if (users[referrerAddress].m4Matrix[level].firstLevelReferrals[0] == \r\n                users[referrerAddress].m4Matrix[level].closedPart) {\r\n                updateM4(userAddress, referrerAddress, level, true);\r\n                return updateM4ReferrerSecondLevel(_flag,userAddress, referrerAddress, level);\r\n            } else {\r\n                updateM4(userAddress, referrerAddress, level, false);\r\n                return updateM4ReferrerSecondLevel(_flag,userAddress, referrerAddress, level);\r\n            }\r\n        }\r\n\r\n        if (users[referrerAddress].m4Matrix[level].firstLevelReferrals[1] == userAddress) {\r\n            updateM4(userAddress, referrerAddress, level, false);\r\n            return updateM4ReferrerSecondLevel(_flag,userAddress, referrerAddress, level);\r\n        } else if (users[referrerAddress].m4Matrix[level].firstLevelReferrals[0] == userAddress) {\r\n            updateM4(userAddress, referrerAddress, level, true);\r\n            return updateM4ReferrerSecondLevel(_flag,userAddress, referrerAddress, level);\r\n        }\r\n        \r\n        if (users[users[referrerAddress].m4Matrix[level].firstLevelReferrals[0]].m4Matrix[level].firstLevelReferrals.length <= \r\n            users[users[referrerAddress].m4Matrix[level].firstLevelReferrals[1]].m4Matrix[level].firstLevelReferrals.length) {\r\n            updateM4(userAddress, referrerAddress, level, false);\r\n        } else {\r\n            updateM4(userAddress, referrerAddress, level, true);\r\n        }\r\n        \r\n        updateM4ReferrerSecondLevel(_flag,userAddress, referrerAddress, level);\r\n    }\r\n\r\n    function updateM4(address userAddress, address referrerAddress, uint8 level, bool x2) private {\r\n        if (!x2) {\r\n            users[users[referrerAddress].m4Matrix[level].firstLevelReferrals[0]].m4Matrix[level].firstLevelReferrals.push(userAddress);\r\n            emit NewUserPlace(userAddress, users[referrerAddress].m4Matrix[level].firstLevelReferrals[0], 2, level, uint8(users[users[referrerAddress].m4Matrix[level].firstLevelReferrals[0]].m4Matrix[level].firstLevelReferrals.length), now);\r\n            emit NewUserPlace(userAddress, referrerAddress, 2, level, 2 + uint8(users[users[referrerAddress].m4Matrix[level].firstLevelReferrals[0]].m4Matrix[level].firstLevelReferrals.length), now);\r\n            //set current level\r\n            users[userAddress].m4Matrix[level].currentReferrer = users[referrerAddress].m4Matrix[level].firstLevelReferrals[0];\r\n        } else {\r\n            users[users[referrerAddress].m4Matrix[level].firstLevelReferrals[1]].m4Matrix[level].firstLevelReferrals.push(userAddress);\r\n            emit NewUserPlace(userAddress, users[referrerAddress].m4Matrix[level].firstLevelReferrals[1], 2, level, uint8(users[users[referrerAddress].m4Matrix[level].firstLevelReferrals[1]].m4Matrix[level].firstLevelReferrals.length), now);\r\n            emit NewUserPlace(userAddress, referrerAddress, 2, level, 4 + uint8(users[users[referrerAddress].m4Matrix[level].firstLevelReferrals[1]].m4Matrix[level].firstLevelReferrals.length), now);\r\n            //set current level\r\n            users[userAddress].m4Matrix[level].currentReferrer = users[referrerAddress].m4Matrix[level].firstLevelReferrals[1];\r\n        }\r\n    }\r\n    \r\n    function updateM4ReferrerSecondLevel(uint8 _flag,address userAddress, address referrerAddress, uint8 level) private {\r\n        if (users[referrerAddress].m4Matrix[level].secondLevelReferrals.length < 4) {\r\n            return sendETHDividends(_flag,referrerAddress, userAddress, 2, level);\r\n        }\r\n        \r\n        address[] memory M4Ref = users[users[referrerAddress].m4Matrix[level].currentReferrer].m4Matrix[level].firstLevelReferrals;\r\n        \r\n        if (M4Ref.length == 2) {\r\n            if (M4Ref[0] == referrerAddress ||\r\n                M4Ref[1] == referrerAddress) {\r\n                users[users[referrerAddress].m4Matrix[level].currentReferrer].m4Matrix[level].closedPart = referrerAddress;\r\n            } else if (M4Ref.length == 1) {\r\n                if (M4Ref[0] == referrerAddress) {\r\n                    users[users[referrerAddress].m4Matrix[level].currentReferrer].m4Matrix[level].closedPart = referrerAddress;\r\n                }\r\n            }\r\n        }\r\n        \r\n        users[referrerAddress].m4Matrix[level].firstLevelReferrals = new address[](0);\r\n        users[referrerAddress].m4Matrix[level].secondLevelReferrals = new address[](0);\r\n        users[referrerAddress].m4Matrix[level].closedPart = address(0);\r\n\r\n        if (!users[referrerAddress].activeM4Levels[level+1] && level != LAST_LEVEL) {\r\n            users[referrerAddress].m4Matrix[level].blocked = true;\r\n        }\r\n\r\n        users[referrerAddress].m4Matrix[level].reinvestCount++;\r\n        \r\n        if (referrerAddress != owner) {\r\n            address freeReferrerAddress = findFreeM4Referrer(referrerAddress, level);\r\n\r\n            emit Reinvest(referrerAddress, freeReferrerAddress, userAddress, 2, level, now);\r\n            updateM4Referrer(1,referrerAddress, freeReferrerAddress, level);\r\n        } else {\r\n            emit Reinvest(owner, address(0), userAddress, 2, level, now);\r\n            sendETHDividends(1,owner, userAddress, 2, level);\r\n        }\r\n    }\r\n    \r\n    function findFreeM3Referrer(address userAddress, uint8 level) public view returns(address) {\r\n        while (true) {\r\n            if (users[users[userAddress].referrer].activeM3Levels[level]) {\r\n                return users[userAddress].referrer;\r\n            }\r\n            \r\n            userAddress = users[userAddress].referrer;\r\n        }\r\n    }\r\n    \r\n    function findFreeM4Referrer(address userAddress, uint8 level) public view returns(address) {\r\n        while (true) {\r\n            if (users[users[userAddress].referrer].activeM4Levels[level]) {\r\n                return users[userAddress].referrer;\r\n            }\r\n            \r\n            userAddress = users[userAddress].referrer;\r\n        }\r\n    }\r\n        \r\n    function usersActiveM3Levels(address userAddress, uint8 level) public view returns(bool) {\r\n        return users[userAddress].activeM3Levels[level];\r\n    }\r\n\r\n    function usersActiveM4Levels(address userAddress, uint8 level) public view returns(bool) {\r\n        return users[userAddress].activeM4Levels[level];\r\n    }\r\n\r\n    function usersm3Matrix(address userAddress, uint8 level) public view returns(address, address[] memory, bool) {\r\n        return (users[userAddress].m3Matrix[level].currentReferrer,\r\n                users[userAddress].m3Matrix[level].referrals,\r\n                users[userAddress].m3Matrix[level].blocked);\r\n    }\r\n\r\n    function usersm4Matrix(address userAddress, uint8 level) public view returns(address, address[] memory, address[] memory, bool, address) {\r\n        return (users[userAddress].m4Matrix[level].currentReferrer,\r\n                users[userAddress].m4Matrix[level].firstLevelReferrals,\r\n                users[userAddress].m4Matrix[level].secondLevelReferrals,\r\n                users[userAddress].m4Matrix[level].blocked,\r\n                users[userAddress].m4Matrix[level].closedPart);\r\n    }\r\n    \r\n    function isUserExists(address user) public view returns (bool) {\r\n        return (users[user].id != 0);\r\n    }\r\n\r\n    function findEthReceiver(address userAddress, address _from, uint8 matrix, uint8 level) private returns(address, bool) {\r\n        address receiver = userAddress;\r\n        bool isExtraDividends;\r\n        if (matrix == 1) {\r\n            while (true) {\r\n                if (users[receiver].m3Matrix[level].blocked) {\r\n                    emit MissedEthReceive(receiver, _from, 1, level, now);\r\n                    isExtraDividends = true;\r\n                    receiver = users[receiver].m3Matrix[level].currentReferrer;\r\n                } else {\r\n                    return (receiver, isExtraDividends);\r\n                }\r\n            }\r\n        } else {\r\n            while (true) {\r\n                if (users[receiver].m4Matrix[level].blocked) {\r\n                    emit MissedEthReceive(receiver, _from, 2, level, now);\r\n                    isExtraDividends = true;\r\n                    receiver = users[receiver].m4Matrix[level].currentReferrer;\r\n                } else {\r\n                    return (receiver, isExtraDividends);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function sendETHDividends(uint8 _flag,address userAddress, address _from, uint8 matrix, uint8 level) private {\r\n        (address receiver, bool isExtraDividends) = findEthReceiver(userAddress, _from, matrix, level);\r\n        \r\n        uint feeAmount = (levelPrice[level] * (adminFee))/10**20;\r\n        \r\n        if(_flag != 1) {\r\n            \r\n            require( (address(uint160(receiver)).send(levelPrice[level] - feeAmount)) &&  (address(uint160(commissionWalet)).send(feeAmount)),\"Transaction Failure\");\r\n            emit CommissionEvent(_from, commissionWalet, feeAmount, matrix, level, now);\r\n             \r\n            if (isExtraDividends) {\r\n                emit SentExtraEthDividends(_from, receiver, matrix, level, now);\r\n            }\r\n            \r\n            else {\r\n                emit RecievedEth(receiver, _from, matrix, level, now);\r\n            }\r\n        }\r\n        else if(_flag == 1) {\r\n            \r\n            if(matrix == 1) {\r\n                require( (address(uint160(m3Wallet)).send(levelPrice[level] - feeAmount)) &&  (address(uint160(commissionWalet)).send(feeAmount)),\"ReInvest Wallet 1 Transaction Failure\");\r\n                emit RecievedEth(m3Wallet, _from, matrix, level, now);\r\n            }\r\n            \r\n            else if(matrix == 2) {\r\n                require( (address(uint160(m4Wallet)).send(levelPrice[level] - feeAmount)) &&  (address(uint160(commissionWalet)).send(feeAmount)),\"ReInvest Wallet 2 Transaction Failure\");\r\n                emit RecievedEth(m4Wallet, _from, matrix, level, now);\r\n            }\r\n            \r\n        }\r\n    }\r\n    \r\n    function bytesToAddress(bytes memory bys) private pure returns (address addr) {\r\n        assembly {\r\n            addr := mload(add(bys, 20))\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_m3ReInvest\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_commissionWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_m4Reinvest\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_commissionWalet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_commissionAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_level\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"CommissionEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"MissedEthReceive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"place\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"NewUserPlace\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"RecievedEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"Registration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"currentReferrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"Reinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"SentExtraEthDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"Upgrade\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"LAST_LEVEL\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"buyNewLevel\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commissionWalet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_lockStatus\",\"type\":\"bool\"}],\"name\":\"contractLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_toUser\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"failSafe\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"findFreeM3Referrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"findFreeM4Referrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isUserExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastUserId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"levelPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"m3Wallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"m4Wallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrerAddress\",\"type\":\"address\"}],\"name\":\"registrationExt\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"updateAdminFeePercentage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_commission\",\"type\":\"address\"}],\"name\":\"updateCommissionWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_level\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"updateLevelPrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_m3\",\"type\":\"address\"}],\"name\":\"updateM3Wallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_m4\",\"type\":\"address\"}],\"name\":\"updateM4Wallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"partnersCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersActiveM3Levels\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersActiveM4Levels\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersm3Matrix\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersm4Matrix\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MyGain","CompilerVersion":"v0.5.14+commit.01f1aaa4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000364d2dac5e9cfa9c5e12dd0341221535bae6eaa4000000000000000000000000ba1a15d4c6da829839c4f35ed97b59dadaae3d1d0000000000000000000000009d7cfb4878e953f4e3ff8acc290efbe0dd46fd5e00000000000000000000000038aa5ff2f6e9690888fd80efb892164a87f4a23d","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://79e647e5c911d2e5ec6a937dda3e4ed70890f3be1db053d9d64e68fa30bab1b3"}]}