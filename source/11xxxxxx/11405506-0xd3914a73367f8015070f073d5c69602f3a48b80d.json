{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface MemoryInterface {\r\n    function getUint(uint _id) external returns (uint _num);\r\n    function setUint(uint _id, uint _val) external;\r\n}\r\n\r\ninterface TokenInterface {\r\n    function approve(address, uint256) external;\r\n    function transfer(address, uint) external;\r\n    function transferFrom(address, address, uint) external;\r\n    function deposit() external payable;\r\n    function withdraw(uint) external;\r\n    function balanceOf(address) external view returns (uint);\r\n    function decimals() external view returns (uint);\r\n}\r\n\r\ninterface AaveV1Interface {\r\n    function deposit(address _reserve, uint256 _amount, uint16 _referralCode) external payable;\r\n    function redeemUnderlying(\r\n        address _reserve,\r\n        address payable _user,\r\n        uint256 _amount,\r\n        uint256 _aTokenBalanceAfterRedeem\r\n    ) external;\r\n    \r\n    function setUserUseReserveAsCollateral(address _reserve, bool _useAsCollateral) external;\r\n    function getUserReserveData(address _reserve, address _user) external view returns (\r\n        uint256 currentATokenBalance,\r\n        uint256 currentBorrowBalance,\r\n        uint256 principalBorrowBalance,\r\n        uint256 borrowRateMode,\r\n        uint256 borrowRate,\r\n        uint256 liquidityRate,\r\n        uint256 originationFee,\r\n        uint256 variableBorrowIndex,\r\n        uint256 lastUpdateTimestamp,\r\n        bool usageAsCollateralEnabled\r\n    );\r\n    function borrow(address _reserve, uint256 _amount, uint256 _interestRateMode, uint16 _referralCode) external;\r\n    function repay(address _reserve, uint256 _amount, address payable _onBehalfOf) external payable;\r\n}\r\n\r\ninterface AaveProviderInterface {\r\n    function getLendingPool() external view returns (address);\r\n    function getLendingPoolCore() external view returns (address);\r\n}\r\n\r\ninterface AaveV1CoreInterface {\r\n    function getReserveATokenAddress(address _reserve) external view returns (address);\r\n}\r\n\r\ninterface ATokenInterface {\r\n    function redeem(uint256 _amount) external;\r\n    function balanceOf(address _user) external view returns(uint256);\r\n    function principalBalanceOf(address _user) external view returns(uint256);\r\n\r\n    function allowance(address, address) external view returns (uint);\r\n    function approve(address, uint) external;\r\n    function transfer(address, uint) external returns (bool);\r\n    function transferFrom(address, address, uint) external returns (bool);\r\n}\r\n\r\ninterface AaveV2Interface {\r\n    function deposit(address _asset, uint256 _amount, address _onBehalfOf, uint16 _referralCode) external;\r\n    function withdraw(address _asset, uint256 _amount, address _to) external;\r\n    function borrow(\r\n        address _asset,\r\n        uint256 _amount,\r\n        uint256 _interestRateMode,\r\n        uint16 _referralCode,\r\n        address _onBehalfOf\r\n    ) external;\r\n    function repay(address _asset, uint256 _amount, uint256 _rateMode, address _onBehalfOf) external;\r\n    function setUserUseReserveAsCollateral(address _asset, bool _useAsCollateral) external;\r\n    function getUserAccountData(address user) external view returns (\r\n        uint256 totalCollateralETH,\r\n        uint256 totalDebtETH,\r\n        uint256 availableBorrowsETH,\r\n        uint256 currentLiquidationThreshold,\r\n        uint256 ltv,\r\n        uint256 healthFactor\r\n    );\r\n}\r\n\r\ninterface AaveV2LendingPoolProviderInterface {\r\n    function getLendingPool() external view returns (address);\r\n}\r\n\r\n// Aave Protocol Data Provider\r\ninterface AaveV2DataProviderInterface {\r\n    function getReserveTokensAddresses(address _asset) external view returns (\r\n        address aTokenAddress,\r\n        address stableDebtTokenAddress,\r\n        address variableDebtTokenAddress\r\n    );\r\n    function getUserReserveData(address _asset, address _user) external view returns (\r\n        uint256 currentATokenBalance,\r\n        uint256 currentStableDebt,\r\n        uint256 currentVariableDebt,\r\n        uint256 principalStableDebt,\r\n        uint256 scaledVariableDebt,\r\n        uint256 stableBorrowRate,\r\n        uint256 liquidityRate,\r\n        uint40 stableRateLastUpdated,\r\n        bool usageAsCollateralEnabled\r\n    );\r\n    function getReserveConfigurationData(address asset) external view returns (\r\n        uint256 decimals,\r\n        uint256 ltv,\r\n        uint256 liquidationThreshold,\r\n        uint256 liquidationBonus,\r\n        uint256 reserveFactor,\r\n        bool usageAsCollateralEnabled,\r\n        bool borrowingEnabled,\r\n        bool stableBorrowRateEnabled,\r\n        bool isActive,\r\n        bool isFrozen\r\n    );\r\n}\r\n\r\ninterface AaveV2AddressProviderRegistryInterface {\r\n    function getAddressesProvidersList() external view returns (address[] memory);\r\n}\r\n\r\ninterface ATokenV2Interface {\r\n    function scaledBalanceOf(address _user) external view returns (uint256);\r\n    function isTransferAllowed(address _user, uint256 _amount) external view returns (bool);\r\n    function balanceOf(address _user) external view returns(uint256);\r\n    function transferFrom(address, address, uint) external returns (bool);\r\n}\r\n\r\ninterface DSAInterface {\r\n    function isAuth(address) external view returns(bool);\r\n}\r\n\r\ncontract DSMath {\r\n\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, \"math-not-safe\");\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"math-not-safe\");\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n\r\n}\r\n\r\ncontract Helpers is DSMath {\r\n    /**\r\n     * @dev Return ethereum address\r\n     */\r\n    function getEthAddr() internal pure returns (address) {\r\n        return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE; // ETH Address\r\n    }\r\n\r\n    /**\r\n     * @dev Return Weth address\r\n    */\r\n    function getWethAddr() internal pure returns (address) {\r\n        return 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2; // Mainnet WETH Address\r\n        // return 0xd0A1E359811322d97991E03f863a0C30C2cF029C; // Kovan WETH Address\r\n    }\r\n\r\n    /**\r\n     * @dev Return Memory Variable Address\r\n     */\r\n    function getMemoryAddr() internal pure returns (address) {\r\n        return 0x8a5419CfC711B2343c17a6ABf4B2bAFaBb06957F; // InstaMemory Address\r\n    }\r\n\r\n    /**\r\n     * @dev Get Uint value from InstaMemory Contract.\r\n    */\r\n    function getUint(uint getId, uint val) internal returns (uint returnVal) {\r\n        returnVal = getId == 0 ? val : MemoryInterface(getMemoryAddr()).getUint(getId);\r\n    }\r\n\r\n    /**\r\n     * @dev Set Uint value in InstaMemory Contract.\r\n    */\r\n    function setUint(uint setId, uint val) internal {\r\n        if (setId != 0) MemoryInterface(getMemoryAddr()).setUint(setId, val);\r\n    }\r\n\r\n    /**\r\n     * @dev Connector Details.\r\n     */\r\n    function connectorID() public pure returns(uint model, uint id) {\r\n        (model, id) = (1, 64);\r\n    }\r\n}\r\n\r\ncontract AaveImportHelpers is Helpers {\r\n\r\n    /**\r\n     * @dev get Aave Provider\r\n    */\r\n    function getAaveProvider() internal pure returns (AaveProviderInterface) {\r\n        return AaveProviderInterface(0x24a42fD28C976A61Df5D00D0599C34c4f90748c8); //mainnet\r\n        // return AaveProviderInterface(0x506B0B2CF20FAA8f38a4E2B524EE43e1f4458Cc5); //kovan\r\n    }\r\n\r\n    /**\r\n     * @dev get Aave Lending Pool Provider\r\n    */\r\n    function getAaveV2Provider() internal pure returns (AaveV2LendingPoolProviderInterface) {\r\n        return AaveV2LendingPoolProviderInterface(0xB53C1a33016B2DC2fF3653530bfF1848a515c8c5); //mainnet\r\n        // return AaveV2LendingPoolProviderInterface(0x652B2937Efd0B5beA1c8d54293FC1289672AFC6b); //kovan\r\n    }\r\n\r\n    /**\r\n     * @dev get Aave Protocol Data Provider\r\n    */\r\n    function getAaveV2DataProvider() internal pure returns (AaveV2DataProviderInterface) {\r\n        return AaveV2DataProviderInterface(0x057835Ad21a177dbdd3090bB1CAE03EaCF78Fc6d); //mainnet\r\n        // return AaveV2DataProviderInterface(0x744C1aaA95232EeF8A9994C4E0b3a89659D9AB79); //kovan\r\n    }\r\n\r\n    /**\r\n     * @dev get Referral Code\r\n    */\r\n    function getReferralCode() internal pure returns (uint16) {\r\n        return 3228;\r\n    }\r\n\r\n    /**\r\n     * @dev get Referral Code V2\r\n    */\r\n    function getReferralCodeV2() internal pure returns (uint16) {\r\n        return 3228;\r\n    }\r\n\r\n    function getBorrowRateMode(AaveV1Interface aave, address token) internal view returns (uint rateMode) {\r\n        (, , , rateMode, , , , , , ) = aave.getUserReserveData(token, address(this));\r\n    }\r\n\r\n    function getWithdrawBalance(address token) internal view returns (uint bal) {\r\n        AaveV1Interface aave = AaveV1Interface(getAaveProvider().getLendingPool());\r\n        (bal, , , , , , , , , ) = aave.getUserReserveData(token, address(this));\r\n    }\r\n\r\n    function getPaybackBalance(AaveV1Interface aave, address account, address token) internal view returns (uint bal, uint fee) {\r\n        (, bal, , , , , fee, , , ) = aave.getUserReserveData(token, account);\r\n    }\r\n\r\n    function getTotalBorrowBalance(AaveV1Interface aave, address account, address token) internal view returns (uint amt) {\r\n        (, uint bal, , , , , uint fee, , , ) = aave.getUserReserveData(token, account);\r\n        amt = add(bal, fee);\r\n    }\r\n\r\n    function getIsCollV2(AaveV2DataProviderInterface aaveData, address token, address user) internal view returns (bool isCol) {\r\n        (, , , , , , , , isCol) = aaveData.getUserReserveData(token, user);\r\n    }\r\n\r\n    function convertEthToWeth(bool isEth, TokenInterface token, uint amount) internal {\r\n        if(isEth) token.deposit.value(amount)();\r\n    }\r\n\r\n    function convertWethToEth(bool isEth, TokenInterface token, uint amount) internal {\r\n       if(isEth) {\r\n            token.approve(address(token), amount);\r\n            token.withdraw(amount);\r\n        }\r\n    }\r\n}\r\n\r\ncontract AaveV1Resolver is AaveImportHelpers {\r\n\r\n    function _v1PaybackBehalf(\r\n        uint _length,\r\n        AaveV1Interface aaveV1,\r\n        address[] memory tokens,\r\n        uint[] memory amts,\r\n        address userAccount\r\n    ) internal {\r\n        address ethAddr = getEthAddr();\r\n        \r\n        for (uint i = 0; i < _length; i++) {\r\n\r\n            address token = tokens[i];\r\n            uint256 amt = amts[i];\r\n\r\n            if (amts[i] > 0) {\r\n                uint ethAmt;\r\n                if (token == ethAddr) {\r\n                    ethAmt = amt;\r\n                } else {\r\n                    TokenInterface(token).approve(getAaveProvider().getLendingPoolCore(), amt);\r\n                }\r\n\r\n                aaveV1.repay.value(ethAmt)(token, amt, payable(userAccount));\r\n            }\r\n        }\r\n    }\r\n\r\n    \r\n    function _v1Withdraw(\r\n        uint _length,\r\n        ATokenInterface[] memory atokenContracts,\r\n        uint256[] memory amts\r\n    ) internal {\r\n\r\n        for (uint i = 0; i < _length; i++) {\r\n            if (amts[i] > 0) {\r\n                atokenContracts[i].redeem(amts[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _v1TransferATokens(\r\n        uint _length,\r\n        ATokenInterface[] memory atokenContracts,\r\n        uint256[] memory amts,\r\n        address userAccount\r\n    ) internal {\r\n        for (uint i = 0; i < _length; i++) {\r\n            if (amts[i] > 0) {\r\n                atokenContracts[i].transferFrom(userAccount, address(this), amts[i]);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract AaveV2Resolver is AaveV1Resolver {\r\n\r\n    function _v2Deposit(\r\n        uint _length,\r\n        AaveV2Interface aaveV2,\r\n        AaveV2DataProviderInterface aaveDataV2,\r\n        address[] memory tokens,\r\n        uint256[] memory amts\r\n    ) internal {\r\n        address ethAddr = getEthAddr();\r\n        for (uint i = 0; i < _length; i++) {\r\n            address token = tokens[i];\r\n            uint256 amt = amts[i];\r\n\r\n            if (amt > 0) {\r\n\r\n                bool isEth = token ==ethAddr;\r\n                address _token = isEth ? getWethAddr() : token;\r\n                TokenInterface tokenContract = TokenInterface(_token);\r\n\r\n                if (isEth) {\r\n                    convertEthToWeth(isEth, tokenContract, amt);\r\n                }\r\n\r\n                tokenContract.approve(address(aaveV2), amt);\r\n                aaveV2.deposit(_token, amt, address(this), getReferralCodeV2());\r\n\r\n                if (!getIsCollV2(aaveDataV2, _token, address(this))) {\r\n                    aaveV2.setUserUseReserveAsCollateral(_token, true);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    function _v2Borrow(\r\n        uint _length,\r\n        AaveV2Interface aaveV2,\r\n        address[] memory tokens,\r\n        uint256[] memory amts,\r\n        uint256[] memory rateModes\r\n    ) internal {\r\n        address ethAddr = getEthAddr();\r\n        for (uint i = 0; i < _length; i++) {\r\n            address token = tokens[i];\r\n            uint256 amt = amts[i];\r\n            uint256 rateMode = rateModes[i];\r\n\r\n            if (amt > 0) {\r\n                bool isEth = token == ethAddr;\r\n                address _token = isEth ? getWethAddr() : token;\r\n\r\n                aaveV2.borrow(_token, amt, rateMode, getReferralCode(), address(this));\r\n                convertWethToEth(isEth, TokenInterface(_token), amt);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract AaveMigrateResolver is AaveV2Resolver {\r\n    event LogMigrate(\r\n        address[] aTokens,\r\n        uint[] aTknBals,\r\n        uint[] borrowBals,\r\n        uint[] borrowBalsFee\r\n    );\r\n\r\n    event LogMigrateUser(\r\n        address user,\r\n        address[] aTokens,\r\n        uint[] aTknBals,\r\n        uint[] borrowBals,\r\n        uint[] borrowBalsFee\r\n    );\r\n\r\n    struct AaveData {\r\n        address[] tokens;\r\n        address[] atokens;\r\n        uint[] borrowAmts;\r\n        uint[] borrowFeeAmts;\r\n        uint[] atokensBal;\r\n        uint[] rateModes;\r\n        ATokenInterface[] atokenContracts;\r\n    }\r\n\r\n\r\n    function migrate(address[] calldata tokens) external payable {\r\n        AaveV1Interface aaveV1 = AaveV1Interface(getAaveProvider().getLendingPool());\r\n        AaveV1CoreInterface aaveCoreV1 = AaveV1CoreInterface(getAaveProvider().getLendingPoolCore());\r\n\r\n        AaveV2Interface aaveV2 = AaveV2Interface(getAaveV2Provider().getLendingPool());\r\n        AaveV2DataProviderInterface aaveV2Data = getAaveV2DataProvider();\r\n\r\n        address userAccount = address(this);\r\n\r\n        uint _length = tokens.length;\r\n        require(_length > 0, \"length-should-be-positive\");\r\n\r\n        AaveData memory _aaveData = AaveData({\r\n            tokens: tokens,\r\n            atokens: new address[](_length),\r\n            borrowAmts: new uint[](_length),\r\n            borrowFeeAmts: new uint[](_length),\r\n            atokensBal: new uint[](_length),\r\n            rateModes: new uint[](_length),\r\n            atokenContracts: new ATokenInterface[](_length)\r\n        });\r\n\r\n        for (uint i = 0; i < _length; i++) {\r\n            _aaveData.atokens[i] = aaveCoreV1.getReserveATokenAddress(tokens[i]);\r\n            require(_aaveData.atokens[i] != address(0), \"token-not-found\");\r\n            _aaveData.atokenContracts[i] = ATokenInterface(_aaveData.atokens[i]);\r\n            _aaveData.atokensBal[i] = _aaveData.atokenContracts[i].balanceOf(userAccount);\r\n            (uint amt, uint fee) = getPaybackBalance(aaveV1, userAccount, tokens[i]);\r\n            _aaveData.borrowAmts[i] = add(amt, fee);\r\n            _aaveData.borrowFeeAmts[i] = fee;\r\n\r\n            // _aaveData.rateModes[i] = getBorrowRateMode(aaveV1, tokens[i]);\r\n            _aaveData.rateModes[i] = 2;\r\n        }\r\n\r\n        _v2Borrow(_length, aaveV2, _aaveData.tokens, _aaveData.borrowAmts, _aaveData.rateModes);\r\n        _v1PaybackBehalf(_length, aaveV1, _aaveData.tokens, _aaveData.borrowAmts, userAccount);\r\n        _v1Withdraw(_length, _aaveData.atokenContracts, _aaveData.atokensBal);\r\n        _v2Deposit(_length, aaveV2, aaveV2Data, _aaveData.tokens, _aaveData.atokensBal);\r\n\r\n        emit LogMigrate(_aaveData.atokens, _aaveData.atokensBal, _aaveData.borrowAmts, _aaveData.borrowFeeAmts);\r\n    }\r\n\r\n    function migrateUser(address userAccount, address[] calldata tokens) external payable {\r\n        require(DSAInterface(address(this)).isAuth(userAccount), \"user-account-not-auth\");\r\n\r\n        uint _length = tokens.length;\r\n        require(_length > 0, \"0-tokens-not-allowed\");\r\n\r\n        AaveV1Interface aaveV1 = AaveV1Interface(getAaveProvider().getLendingPool());\r\n        AaveV1CoreInterface aaveCoreV1 = AaveV1CoreInterface(getAaveProvider().getLendingPoolCore());\r\n\r\n        AaveV2Interface aaveV2 = AaveV2Interface(getAaveV2Provider().getLendingPool());\r\n        AaveV2DataProviderInterface aaveV2Data = getAaveV2DataProvider();\r\n\r\n        AaveData memory _aaveData = AaveData({\r\n            tokens: tokens,\r\n            atokens: new address[](_length),\r\n            borrowAmts: new uint[](_length),\r\n            borrowFeeAmts: new uint[](_length),\r\n            atokensBal: new uint[](_length),\r\n            rateModes: new uint[](_length),\r\n            atokenContracts: new ATokenInterface[](_length)\r\n        });\r\n\r\n        for (uint i = 0; i < _length; i++) {\r\n            _aaveData.atokens[i] = aaveCoreV1.getReserveATokenAddress(tokens[i]);\r\n            require(_aaveData.atokens[i] != address(0), \"token-not-found\");\r\n            _aaveData.atokenContracts[i] = ATokenInterface(_aaveData.atokens[i]);\r\n            _aaveData.atokensBal[i] = _aaveData.atokenContracts[i].balanceOf(userAccount);\r\n            (uint amt, uint fee) = getPaybackBalance(aaveV1, userAccount, tokens[i]);\r\n            _aaveData.borrowAmts[i] = add(amt, fee);\r\n            _aaveData.borrowFeeAmts[i] = fee;\r\n\r\n            // _aaveData.rateModes[i] = getBorrowRateMode(aaveV1, tokens[i]);\r\n            _aaveData.rateModes[i] = 2;\r\n        }\r\n\r\n        _v2Borrow(_length, aaveV2, _aaveData.tokens, _aaveData.borrowAmts, _aaveData.rateModes);\r\n        _v1PaybackBehalf(_length, aaveV1, _aaveData.tokens, _aaveData.borrowAmts, userAccount);\r\n        _v1TransferATokens(_length, _aaveData.atokenContracts, _aaveData.atokensBal, userAccount);\r\n        _v1Withdraw(_length, _aaveData.atokenContracts, _aaveData.atokensBal);\r\n        _v2Deposit(_length, aaveV2, aaveV2Data, _aaveData.tokens, _aaveData.atokensBal);\r\n\r\n        emit LogMigrateUser(userAccount, _aaveData.atokens, _aaveData.atokensBal, _aaveData.borrowAmts, _aaveData.borrowFeeAmts);\r\n    }\r\n}\r\n\r\ncontract ConnectAaveMigrator is AaveMigrateResolver {\r\n    string public name = \"Aave-Migrator-v1.0\";\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"aTokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"aTknBals\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"borrowBals\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"borrowBalsFee\",\"type\":\"uint256[]\"}],\"name\":\"LogMigrate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"aTokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"aTknBals\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"borrowBals\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"borrowBalsFee\",\"type\":\"uint256[]\"}],\"name\":\"LogMigrateUser\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"connectorID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"model\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAccount\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"migrateUser\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ConnectAaveMigrator","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a044d39c723d8d2fb28017def5a45104dc23222b30f142204870c1e1fabf9708"}]}