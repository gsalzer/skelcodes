{"status":"1","message":"OK","result":[{"SourceCode":"\n// File: solidity/contracts/utility/interfaces/IOwned.sol\n\n// SPDX-License-Identifier: SEE LICENSE IN LICENSE\npragma solidity 0.6.12;\n\n/*\n    Owned contract interface\n*/\ninterface IOwned {\n    // this function isn't since the compiler emits automatically generated getter functions as external\n    function owner() external view returns (address);\n\n    function transferOwnership(address _newOwner) external;\n\n    function acceptOwnership() external;\n}\n\n// File: solidity/contracts/converter/interfaces/IConverterAnchor.sol\n\n\npragma solidity 0.6.12;\n\n\n/*\n    Converter Anchor interface\n*/\ninterface IConverterAnchor is IOwned {\n\n}\n\n// File: solidity/contracts/token/interfaces/IERC20Token.sol\n\n\npragma solidity 0.6.12;\n\n/*\n    ERC20 Standard Token interface\n*/\ninterface IERC20Token {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address _owner) external view returns (uint256);\n\n    function allowance(address _owner, address _spender) external view returns (uint256);\n\n    function transfer(address _to, uint256 _value) external returns (bool);\n\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    ) external returns (bool);\n\n    function approve(address _spender, uint256 _value) external returns (bool);\n}\n\n// File: solidity/contracts/converter/interfaces/IConverter.sol\n\n\npragma solidity 0.6.12;\n\n\n\n\n/*\n    Converter interface\n*/\ninterface IConverter is IOwned {\n    function converterType() external pure returns (uint16);\n\n    function anchor() external view returns (IConverterAnchor);\n\n    function isActive() external view returns (bool);\n\n    function targetAmountAndFee(\n        IERC20Token _sourceToken,\n        IERC20Token _targetToken,\n        uint256 _amount\n    ) external view returns (uint256, uint256);\n\n    function convert(\n        IERC20Token _sourceToken,\n        IERC20Token _targetToken,\n        uint256 _amount,\n        address _trader,\n        address payable _beneficiary\n    ) external payable returns (uint256);\n\n    function conversionFee() external view returns (uint32);\n\n    function maxConversionFee() external view returns (uint32);\n\n    function reserveBalance(IERC20Token _reserveToken) external view returns (uint256);\n\n    receive() external payable;\n\n    function transferAnchorOwnership(address _newOwner) external;\n\n    function acceptAnchorOwnership() external;\n\n    function setConversionFee(uint32 _conversionFee) external;\n\n    function withdrawTokens(\n        IERC20Token _token,\n        address _to,\n        uint256 _amount\n    ) external;\n\n    function withdrawETH(address payable _to) external;\n\n    function addReserve(IERC20Token _token, uint32 _ratio) external;\n\n    // deprecated, backward compatibility\n    function token() external view returns (IConverterAnchor);\n\n    function transferTokenOwnership(address _newOwner) external;\n\n    function acceptTokenOwnership() external;\n\n    function connectors(IERC20Token _address)\n        external\n        view\n        returns (\n            uint256,\n            uint32,\n            bool,\n            bool,\n            bool\n        );\n\n    function getConnectorBalance(IERC20Token _connectorToken) external view returns (uint256);\n\n    function connectorTokens(uint256 _index) external view returns (IERC20Token);\n\n    function connectorTokenCount() external view returns (uint16);\n\n    /**\n     * @dev triggered when the converter is activated\n     *\n     * @param _type        converter type\n     * @param _anchor      converter anchor\n     * @param _activated   true if the converter was activated, false if it was deactivated\n     */\n    event Activation(uint16 indexed _type, IConverterAnchor indexed _anchor, bool indexed _activated);\n\n    /**\n     * @dev triggered when a conversion between two tokens occurs\n     *\n     * @param _fromToken       source ERC20 token\n     * @param _toToken         target ERC20 token\n     * @param _trader          wallet that initiated the trade\n     * @param _amount          input amount in units of the source token\n     * @param _return          output amount minus conversion fee in units of the target token\n     * @param _conversionFee   conversion fee in units of the target token\n     */\n    event Conversion(\n        IERC20Token indexed _fromToken,\n        IERC20Token indexed _toToken,\n        address indexed _trader,\n        uint256 _amount,\n        uint256 _return,\n        int256 _conversionFee\n    );\n\n    /**\n     * @dev triggered when the rate between two tokens in the converter changes\n     * note that the event might be dispatched for rate updates between any two tokens in the converter\n     *\n     * @param  _token1 address of the first token\n     * @param  _token2 address of the second token\n     * @param  _rateN  rate of 1 unit of `_token1` in `_token2` (numerator)\n     * @param  _rateD  rate of 1 unit of `_token1` in `_token2` (denominator)\n     */\n    event TokenRateUpdate(IERC20Token indexed _token1, IERC20Token indexed _token2, uint256 _rateN, uint256 _rateD);\n\n    /**\n     * @dev triggered when the conversion fee is updated\n     *\n     * @param  _prevFee    previous fee percentage, represented in ppm\n     * @param  _newFee     new fee percentage, represented in ppm\n     */\n    event ConversionFeeUpdate(uint32 _prevFee, uint32 _newFee);\n}\n\n// File: solidity/contracts/converter/interfaces/IConverterUpgrader.sol\n\n\npragma solidity 0.6.12;\n\n/*\n    Converter Upgrader interface\n*/\ninterface IConverterUpgrader {\n    function upgrade(bytes32 _version) external;\n\n    function upgrade(uint16 _version) external;\n}\n\n// File: solidity/contracts/converter/interfaces/ITypedConverterCustomFactory.sol\n\n\npragma solidity 0.6.12;\n\n/*\n    Typed Converter Custom Factory interface\n*/\ninterface ITypedConverterCustomFactory {\n    function converterType() external pure returns (uint16);\n}\n\n// File: solidity/contracts/utility/interfaces/IContractRegistry.sol\n\n\npragma solidity 0.6.12;\n\n/*\n    Contract Registry interface\n*/\ninterface IContractRegistry {\n    function addressOf(bytes32 _contractName) external view returns (address);\n}\n\n// File: solidity/contracts/converter/interfaces/IConverterFactory.sol\n\n\npragma solidity 0.6.12;\n\n\n\n\n\n/*\n    Converter Factory interface\n*/\ninterface IConverterFactory {\n    function createAnchor(\n        uint16 _type,\n        string memory _name,\n        string memory _symbol,\n        uint8 _decimals\n    ) external returns (IConverterAnchor);\n\n    function createConverter(\n        uint16 _type,\n        IConverterAnchor _anchor,\n        IContractRegistry _registry,\n        uint32 _maxConversionFee\n    ) external returns (IConverter);\n\n    function customFactories(uint16 _type) external view returns (ITypedConverterCustomFactory);\n}\n\n// File: solidity/contracts/utility/Owned.sol\n\n\npragma solidity 0.6.12;\n\n\n/**\n * @dev This contract provides support and utilities for contract ownership.\n */\ncontract Owned is IOwned {\n    address public override owner;\n    address public newOwner;\n\n    /**\n     * @dev triggered when the owner is updated\n     *\n     * @param _prevOwner previous owner\n     * @param _newOwner  new owner\n     */\n    event OwnerUpdate(address indexed _prevOwner, address indexed _newOwner);\n\n    /**\n     * @dev initializes a new Owned instance\n     */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    // allows execution by the owner only\n    modifier ownerOnly {\n        _ownerOnly();\n        _;\n    }\n\n    // error message binary size optimization\n    function _ownerOnly() internal view {\n        require(msg.sender == owner, \"ERR_ACCESS_DENIED\");\n    }\n\n    /**\n     * @dev allows transferring the contract ownership\n     * the new owner still needs to accept the transfer\n     * can only be called by the contract owner\n     *\n     * @param _newOwner    new contract owner\n     */\n    function transferOwnership(address _newOwner) public override ownerOnly {\n        require(_newOwner != owner, \"ERR_SAME_OWNER\");\n        newOwner = _newOwner;\n    }\n\n    /**\n     * @dev used by a new owner to accept an ownership transfer\n     */\n    function acceptOwnership() public override {\n        require(msg.sender == newOwner, \"ERR_ACCESS_DENIED\");\n        emit OwnerUpdate(owner, newOwner);\n        owner = newOwner;\n        newOwner = address(0);\n    }\n}\n\n// File: solidity/contracts/utility/Utils.sol\n\n\npragma solidity 0.6.12;\n\n/**\n * @dev Utilities & Common Modifiers\n */\ncontract Utils {\n    // verifies that a value is greater than zero\n    modifier greaterThanZero(uint256 _value) {\n        _greaterThanZero(_value);\n        _;\n    }\n\n    // error message binary size optimization\n    function _greaterThanZero(uint256 _value) internal pure {\n        require(_value > 0, \"ERR_ZERO_VALUE\");\n    }\n\n    // validates an address - currently only checks that it isn't null\n    modifier validAddress(address _address) {\n        _validAddress(_address);\n        _;\n    }\n\n    // error message binary size optimization\n    function _validAddress(address _address) internal pure {\n        require(_address != address(0), \"ERR_INVALID_ADDRESS\");\n    }\n\n    // verifies that the address is different than this contract address\n    modifier notThis(address _address) {\n        _notThis(_address);\n        _;\n    }\n\n    // error message binary size optimization\n    function _notThis(address _address) internal view {\n        require(_address != address(this), \"ERR_ADDRESS_IS_SELF\");\n    }\n}\n\n// File: solidity/contracts/utility/ContractRegistryClient.sol\n\n\npragma solidity 0.6.12;\n\n\n\n\n/**\n * @dev This is the base contract for ContractRegistry clients.\n */\ncontract ContractRegistryClient is Owned, Utils {\n    bytes32 internal constant CONTRACT_REGISTRY = \"ContractRegistry\";\n    bytes32 internal constant BANCOR_NETWORK = \"BancorNetwork\";\n    bytes32 internal constant BANCOR_FORMULA = \"BancorFormula\";\n    bytes32 internal constant CONVERTER_FACTORY = \"ConverterFactory\";\n    bytes32 internal constant CONVERSION_PATH_FINDER = \"ConversionPathFinder\";\n    bytes32 internal constant CONVERTER_UPGRADER = \"BancorConverterUpgrader\";\n    bytes32 internal constant CONVERTER_REGISTRY = \"BancorConverterRegistry\";\n    bytes32 internal constant CONVERTER_REGISTRY_DATA = \"BancorConverterRegistryData\";\n    bytes32 internal constant BNT_TOKEN = \"BNTToken\";\n    bytes32 internal constant BANCOR_X = \"BancorX\";\n    bytes32 internal constant BANCOR_X_UPGRADER = \"BancorXUpgrader\";\n\n    IContractRegistry public registry; // address of the current contract-registry\n    IContractRegistry public prevRegistry; // address of the previous contract-registry\n    bool public onlyOwnerCanUpdateRegistry; // only an owner can update the contract-registry\n\n    /**\n     * @dev verifies that the caller is mapped to the given contract name\n     *\n     * @param _contractName    contract name\n     */\n    modifier only(bytes32 _contractName) {\n        _only(_contractName);\n        _;\n    }\n\n    // error message binary size optimization\n    function _only(bytes32 _contractName) internal view {\n        require(msg.sender == addressOf(_contractName), \"ERR_ACCESS_DENIED\");\n    }\n\n    /**\n     * @dev initializes a new ContractRegistryClient instance\n     *\n     * @param  _registry   address of a contract-registry contract\n     */\n    constructor(IContractRegistry _registry) internal validAddress(address(_registry)) {\n        registry = IContractRegistry(_registry);\n        prevRegistry = IContractRegistry(_registry);\n    }\n\n    /**\n     * @dev updates to the new contract-registry\n     */\n    function updateRegistry() public {\n        // verify that this function is permitted\n        require(msg.sender == owner || !onlyOwnerCanUpdateRegistry, \"ERR_ACCESS_DENIED\");\n\n        // get the new contract-registry\n        IContractRegistry newRegistry = IContractRegistry(addressOf(CONTRACT_REGISTRY));\n\n        // verify that the new contract-registry is different and not zero\n        require(newRegistry != registry && address(newRegistry) != address(0), \"ERR_INVALID_REGISTRY\");\n\n        // verify that the new contract-registry is pointing to a non-zero contract-registry\n        require(newRegistry.addressOf(CONTRACT_REGISTRY) != address(0), \"ERR_INVALID_REGISTRY\");\n\n        // save a backup of the current contract-registry before replacing it\n        prevRegistry = registry;\n\n        // replace the current contract-registry with the new contract-registry\n        registry = newRegistry;\n    }\n\n    /**\n     * @dev restores the previous contract-registry\n     */\n    function restoreRegistry() public ownerOnly {\n        // restore the previous contract-registry\n        registry = prevRegistry;\n    }\n\n    /**\n     * @dev restricts the permission to update the contract-registry\n     *\n     * @param _onlyOwnerCanUpdateRegistry  indicates whether or not permission is restricted to owner only\n     */\n    function restrictRegistryUpdate(bool _onlyOwnerCanUpdateRegistry) public ownerOnly {\n        // change the permission to update the contract-registry\n        onlyOwnerCanUpdateRegistry = _onlyOwnerCanUpdateRegistry;\n    }\n\n    /**\n     * @dev returns the address associated with the given contract name\n     *\n     * @param _contractName    contract name\n     *\n     * @return contract address\n     */\n    function addressOf(bytes32 _contractName) internal view returns (address) {\n        return registry.addressOf(_contractName);\n    }\n}\n\n// File: solidity/contracts/converter/ConverterUpgrader.sol\n\n\r\npragma solidity 0.6.12;\r\r\r\r\r\n\r\n/**\r\n  * @dev This contract contract allows upgrading an older converter contract (0.4 and up)\r\n  * to the latest version.\r\n  * To begin the upgrade process, simply execute the 'upgrade' function.\r\n  * At the end of the process, the ownership of the newly upgraded converter will be transferred\r\n  * back to the original owner and the original owner will need to execute the 'acceptOwnership' function.\r\n  *\r\n  * The address of the new converter is available in the ConverterUpgrade event.\r\n  *\r\n  * Note that for older converters that don't yet have the 'upgrade' function, ownership should first\r\n  * be transferred manually to the ConverterUpgrader contract using the 'transferOwnership' function\r\n  * and then the upgrader 'upgrade' function should be executed directly.\r\n*/\r\ncontract ConverterUpgrader is IConverterUpgrader, ContractRegistryClient {\r\n    uint32 private constant PPM_RESOLUTION = 1000000;\r\n    IERC20Token private constant ETH_RESERVE_ADDRESS = IERC20Token(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\r\n\r\n    /**\r\n      * @dev triggered when the contract accept a converter ownership\r\n      *\r\n      * @param _converter   converter address\r\n      * @param _owner       new owner - local upgrader address\r\n    */\r\n    event ConverterOwned(IConverter indexed _converter, address indexed _owner);\r\n\r\n    /**\r\n      * @dev triggered when the upgrading process is done\r\n      *\r\n      * @param _oldConverter    old converter address\r\n      * @param _newConverter    new converter address\r\n    */\r\n    event ConverterUpgrade(address indexed _oldConverter, address indexed _newConverter);\r\n\r\n    /**\r\n      * @dev initializes a new ConverterUpgrader instance\r\n      *\r\n      * @param _registry    address of a contract registry contract\r\n    */\r\n    constructor(IContractRegistry _registry) ContractRegistryClient(_registry) public {\r\n    }\r\n\r\n    /**\r\n      * @dev upgrades an old converter to the latest version\r\n      * will throw if ownership wasn't transferred to the upgrader before calling this function.\r\n      * ownership of the new converter will be transferred back to the original owner.\r\n      * fires the ConverterUpgrade event upon success.\r\n      * can only be called by a converter\r\n      *\r\n      * @param _version old converter version\r\n    */\r\n    function upgrade(bytes32 _version) public override {\r\n        upgradeOld(IConverter(msg.sender), _version);\r\n    }\r\n\r\n    /**\r\n      * @dev upgrades an old converter to the latest version\r\n      * will throw if ownership wasn't transferred to the upgrader before calling this function.\r\n      * ownership of the new converter will be transferred back to the original owner.\r\n      * fires the ConverterUpgrade event upon success.\r\n      * can only be called by a converter\r\n      *\r\n      * @param _version old converter version\r\n    */\r\n    function upgrade(uint16 _version) public override {\r\n        upgradeOld(IConverter(msg.sender), bytes32(uint256(_version)));\r\n    }\r\n\r\n    /**\r\n      * @dev upgrades an old converter to the latest version\r\n      * will throw if ownership wasn't transferred to the upgrader before calling this function.\r\n      * ownership of the new converter will be transferred back to the original owner.\r\n      * fires the ConverterUpgrade event upon success.\r\n      *\r\n      * @param _converter   old converter contract address\r\n      * @param _version     old converter version\r\n    */\r\n    function upgradeOld(IConverter _converter, bytes32 _version) public {\r\n        _version; // suppress compilation warning\r\n        IConverter converter = IConverter(_converter);\r\n        address prevOwner = converter.owner();\r\n        acceptConverterOwnership(converter);\r\n        IConverter newConverter = createConverter(converter);\r\n        copyReserves(converter, newConverter);\r\n        copyConversionFee(converter, newConverter);\r\n        transferReserveBalances(converter, newConverter);\r\n        IConverterAnchor anchor = converter.token();\r\n\r\n        if (anchor.owner() == address(converter)) {\r\n            converter.transferTokenOwnership(address(newConverter));\r\n            newConverter.acceptAnchorOwnership();\r\n        }\r\n\r\n        converter.transferOwnership(prevOwner);\r\n        newConverter.transferOwnership(prevOwner);\r\n\r\n        emit ConverterUpgrade(address(converter), address(newConverter));\r\n    }\r\n\r\n    /**\r\n      * @dev the first step when upgrading a converter is to transfer the ownership to the local contract.\r\n      * the upgrader contract then needs to accept the ownership transfer before initiating\r\n      * the upgrade process.\r\n      * fires the ConverterOwned event upon success\r\n      *\r\n      * @param _oldConverter       converter to accept ownership of\r\n    */\r\n    function acceptConverterOwnership(IConverter _oldConverter) private {\r\n        _oldConverter.acceptOwnership();\r\n        emit ConverterOwned(_oldConverter, address(this));\r\n    }\r\n\r\n    /**\r\n      * @dev creates a new converter with same basic data as the original old converter\r\n      * the newly created converter will have no reserves at this step.\r\n      *\r\n      * @param _oldConverter    old converter contract address\r\n      *\r\n      * @return the new converter  new converter contract address\r\n    */\r\n    function createConverter(IConverter _oldConverter) private returns (IConverter) {\r\n        IConverterAnchor anchor = _oldConverter.token();\r\n        uint32 maxConversionFee = _oldConverter.maxConversionFee();\r\n        uint16 reserveTokenCount = _oldConverter.connectorTokenCount();\r\n\r\n        // determine new converter type\r\n        uint16 newType = 0;\r\n        // new converter - get the type from the converter itself\r\n        if (isV28OrHigherConverter(_oldConverter))\r\n            newType = _oldConverter.converterType();\r\n        // old converter - if it has 1 reserve token, the type is a liquid token, otherwise the type liquidity pool\r\n        else if (reserveTokenCount > 1)\r\n            newType = 1;\r\n\r\n        if (newType == 1 && reserveTokenCount == 2) {\r\n            (, uint32 weight0, , , ) = _oldConverter.connectors(_oldConverter.connectorTokens(0));\r\n            (, uint32 weight1, , , ) = _oldConverter.connectors(_oldConverter.connectorTokens(1));\r\n            if (weight0 == PPM_RESOLUTION / 2 && weight1 == PPM_RESOLUTION / 2) {\r\n                newType = 3;\r\n            }\r\n        }\r\n\r\n        IConverterFactory converterFactory = IConverterFactory(addressOf(CONVERTER_FACTORY));\r\n        IConverter converter = converterFactory.createConverter(newType, anchor, registry, maxConversionFee);\r\n\r\n        converter.acceptOwnership();\r\n        return converter;\r\n    }\r\n\r\n    /**\r\n      * @dev copies the reserves from the old converter to the new one.\r\n      * note that this will not work for an unlimited number of reserves due to block gas limit constraints.\r\n      *\r\n      * @param _oldConverter    old converter contract address\r\n      * @param _newConverter    new converter contract address\r\n    */\r\n    function copyReserves(IConverter _oldConverter, IConverter _newConverter) private {\r\n        uint16 reserveTokenCount = _oldConverter.connectorTokenCount();\r\n\r\n        for (uint16 i = 0; i < reserveTokenCount; i++) {\r\n            IERC20Token reserveAddress = _oldConverter.connectorTokens(i);\r\n            (, uint32 weight, , , ) = _oldConverter.connectors(reserveAddress);\r\n\r\n            // Ether reserve\r\n            if (reserveAddress == ETH_RESERVE_ADDRESS) {\r\n                _newConverter.addReserve(ETH_RESERVE_ADDRESS, weight);\r\n            }\r\n            // ERC20 reserve token\r\n            else {\r\n                _newConverter.addReserve(reserveAddress, weight);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n      * @dev copies the conversion fee from the old converter to the new one\r\n      *\r\n      * @param _oldConverter    old converter contract address\r\n      * @param _newConverter    new converter contract address\r\n    */\r\n    function copyConversionFee(IConverter _oldConverter, IConverter _newConverter) private {\r\n        uint32 conversionFee = _oldConverter.conversionFee();\r\n        _newConverter.setConversionFee(conversionFee);\r\n    }\r\n\r\n    /**\r\n      * @dev transfers the balance of each reserve in the old converter to the new one.\r\n      * note that the function assumes that the new converter already has the exact same number of\r\n      * also, this will not work for an unlimited number of reserves due to block gas limit constraints.\r\n      *\r\n      * @param _oldConverter    old converter contract address\r\n      * @param _newConverter    new converter contract address\r\n    */\r\n    function transferReserveBalances(IConverter _oldConverter, IConverter _newConverter) private {\r\n        uint256 reserveBalance;\r\n        uint16 reserveTokenCount = _oldConverter.connectorTokenCount();\r\n\r\n        for (uint16 i = 0; i < reserveTokenCount; i++) {\r\n            IERC20Token reserveAddress = _oldConverter.connectorTokens(i);\r\n            // Ether reserve\r\n            if (reserveAddress == ETH_RESERVE_ADDRESS) {\r\n                _oldConverter.withdrawETH(address(_newConverter));\r\n            }\r\n            // ERC20 reserve token\r\n            else {\r\n                IERC20Token connector = reserveAddress;\r\n                reserveBalance = connector.balanceOf(address(_oldConverter));\r\n                _oldConverter.withdrawTokens(connector, address(_newConverter), reserveBalance);\r\n            }\r\n        }\r\n    }\r\n\r\n    bytes4 private constant IS_V28_OR_HIGHER_FUNC_SELECTOR = bytes4(keccak256(\"isV28OrHigher()\"));\r\n\r\n    // using a static call to identify converter version\r\n    // can't rely on the version number since the function had a different signature in older converters\r\n    function isV28OrHigherConverter(IConverter _converter) internal view returns (bool) {\r\n        bytes memory data = abi.encodeWithSelector(IS_V28_OR_HIGHER_FUNC_SELECTOR);\r\n        (bool success, bytes memory returnData) = address(_converter).staticcall{ gas: 4000 }(data);\r\n\r\n        if (success && returnData.length == 32) {\r\n            return abi.decode(returnData, (bool));\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\n","ABI":"[{\"inputs\":[{\"internalType\":\"contract IContractRegistry\",\"name\":\"_registry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IConverter\",\"name\":\"_converter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"ConverterOwned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oldConverter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newConverter\",\"type\":\"address\"}],\"name\":\"ConverterUpgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_prevOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdate\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onlyOwnerCanUpdateRegistry\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prevRegistry\",\"outputs\":[{\"internalType\":\"contract IContractRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract IContractRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"restoreRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_onlyOwnerCanUpdateRegistry\",\"type\":\"bool\"}],\"name\":\"restrictRegistryUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"}],\"name\":\"upgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_version\",\"type\":\"bytes32\"}],\"name\":\"upgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IConverter\",\"name\":\"_converter\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_version\",\"type\":\"bytes32\"}],\"name\":\"upgradeOld\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ConverterUpgrader","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000052ae12abe5d8bd778bd5397f99ca900624cfadd4","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}