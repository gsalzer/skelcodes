{"status":"1","message":"OK","result":[{"SourceCode":"{\"FibExInvestStableToken.sol\":{\"content\":\"pragma solidity ^0.5.11;\\r\\n\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./IERC20A.sol\\\";\\r\\nimport \\\"./ProgressiveTokenInterface.sol\\\";\\r\\n\\r\\ncontract FibExInvestStableToken is IERC20A {\\r\\n    using SafeMath for uint;\\r\\n    \\r\\n    string public constant name = \\\"FibEx Invest Stable token\\\";\\r\\n    string public constant symbol = \\\"FIns\\\";\\r\\n    uint8 public constant decimals = 6;\\r\\n    \\r\\n    address payable public owner;\\r\\n    address public progressiveFibExAdress;\\r\\n    uint public totalTokens; //текущее количество\\r\\n    uint public oneETHToDollarPrice; // текущий курс к доллару(Основная часть) в gwei(10^-9)\\r\\n    uint public boughtTokens;\\r\\n    bool private canTransfer = false;\\r\\n    uint public ajioPercent = 75;\\r\\n    \\r\\n    mapping (address =\\u003e mapping (address =\\u003e uint)) allowed;\\r\\n    mapping (address =\\u003e uint) balances;\\r\\n    mapping (address =\\u003e uint) pendingConversions;\\r\\n    mapping(uint =\\u003e uint) deals;\\r\\n    \\r\\n    event Convert(uint countPro, uint countSta, uint initialTokenCt, uint comission,  uint tokensCt, address _address);\\r\\n    event ConversionReturn(address _address, uint count, uint comission, uint date);\\r\\n    event ConversionSuccess(address _address, uint count, uint date);\\r\\n    event AgioPayment(address _address, uint count, uint date);\\r\\n    event OwnerTransfer(address _address, uint count, uint date);\\r\\n    event DealActivation(address _address, uint dealId, uint totalEth, uint tokensCounts, uint ethTokenPayment, uint ajioPayment);\\r\\n    \\r\\n    //Конструктор выполняется один раз при публикации контракта\\r\\n    constructor () public payable {\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n    \\r\\n    modifier onlyOwner()\\r\\n    {\\r\\n        require(\\r\\n            msg.sender == owner,\\r\\n            \\\"access_denied\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    modifier onlyProgressive()\\r\\n    {\\r\\n        require(\\r\\n            msg.sender == progressiveFibExAdress,\\r\\n            \\\"access_denied\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    function setAjioToFull() public onlyOwner {\\r\\n        ajioPercent = 150;\\r\\n    }\\r\\n    \\r\\n    function setAjioToHalf() public onlyOwner {\\r\\n        ajioPercent = 75;\\r\\n    }\\r\\n    \\r\\n    function setAjioInUsd(uint dealId, uint usdPrice) public onlyOwner {\\r\\n        deals[dealId] = usdPrice;\\r\\n    }\\r\\n    \\r\\n\\tfunction getAjioInUsd(uint dealId) public view returns(uint) {\\r\\n        return deals[dealId];\\r\\n    }\\r\\n\\t\\r\\n    function activateDeal(uint dealId) payable public {\\r\\n        if(deals[dealId] == 0) revert(\\u0027no_deal\\u0027);\\r\\n        uint sentWei = msg.value;\\r\\n        if(sentWei == 0) revert(\\u0027not_enough\\u0027);\\r\\n        getRate();\\r\\n        uint oneUsdInWei = oneTokenCount();\\r\\n        uint ajioPayment = deals[dealId].mul(oneUsdInWei).mul(100);\\r\\n        if(ajioPayment \\u003e sentWei)  revert(\\u0027not_enough\\u0027);\\r\\n        uint tokensEth = sentWei.sub(ajioPayment);\\r\\n        uint resultTokens = (tokensEth.mul(1000000).div(oneUsdInWei)).div(10000);\\r\\n        if(resultTokens \\u003e balances[owner]) revert(\\u0027not_enough_tokens_company\\u0027);\\r\\n        balances[msg.sender] = balances[msg.sender].add(resultTokens);\\r\\n        balances[owner] = balances[owner].sub(resultTokens);\\r\\n        emit DealActivation(msg.sender, dealId, sentWei, resultTokens, tokensEth, ajioPayment);\\r\\n    }\\r\\n    \\r\\n    function setAdress(address contractItem) public onlyOwner {\\r\\n        progressiveFibExAdress = contractItem;\\r\\n    }\\r\\n    \\r\\n    function getRate() public {\\r\\n        if(progressiveFibExAdress == address(0)) revert(\\u0027no_address_rate\\u0027);\\r\\n        ProgressiveTokenInterface pro = ProgressiveTokenInterface(progressiveFibExAdress);\\r\\n        oneETHToDollarPrice = pro.oneDollarRate();\\r\\n    }\\r\\n    \\r\\n    function oneDollarRate() public view returns(uint) {\\r\\n        if(progressiveFibExAdress == address(0)) revert(\\u0027no_address_rate\\u0027);\\r\\n        if(oneETHToDollarPrice == 0) revert(\\u0027rate_not_set\\u0027);\\r\\n        return oneETHToDollarPrice;\\r\\n    }\\r\\n    \\r\\n    function convertToProgressive(uint value) public {\\r\\n        if(progressiveFibExAdress == address(0)) revert(\\u0027no_address_rate\\u0027);\\r\\n        if(value == 0) revert(\\u0027no_tokens\\u0027);\\r\\n        if(value \\u003e balances[msg.sender]) revert(\\u0027not_enough_tokens\\u0027);\\r\\n        ProgressiveTokenInterface pro = ProgressiveTokenInterface(progressiveFibExAdress);\\r\\n        getRate();\\r\\n        uint oneTokenStable = oneTokenCount();\\r\\n        uint comission = takeComission(value);\\r\\n        uint valueNoWithoutComission = value.sub(comission);\\r\\n        uint oneTokenProgressive = pro.oneTokenCount();\\r\\n        uint resultTokens = valueNoWithoutComission.mul(1000).div(oneTokenProgressive.mul(1000).div(oneTokenStable));\\r\\n        emit Convert(valueNoWithoutComission.mul(1000), (oneTokenProgressive.mul(1000).div(oneTokenStable)), comission, valueNoWithoutComission, resultTokens, msg.sender);\\r\\n        if(resultTokens == 0) revert(\\u0027conversion_result\\u0027);\\r\\n        balances[msg.sender] = balances[msg.sender].sub(value);\\r\\n        pendingConversions[msg.sender] = resultTokens;\\r\\n        pro.addConvertedTokens(msg.sender);\\r\\n        emit Convert(oneTokenProgressive, oneTokenStable, comission, valueNoWithoutComission, resultTokens, msg.sender);\\r\\n    }\\r\\n    \\r\\n    function payReferal(address _address, uint count) public onlyOwner {\\r\\n        if(count == 0) revert(\\u0027no_tokens\\u0027);\\r\\n        if(_address == address(0)) revert(\\u0027no_address\\u0027);\\r\\n        if(count \\u003e totalTokens) revert(\\u0027not_enough_tokens_company\\u0027);\\r\\n        if(count \\u003e balances[owner]) revert(\\u0027not_enough_tokens_payment\\u0027);\\r\\n        balances[owner] = balances[owner].sub(count);\\r\\n        balances[_address] = balances[_address].add(count);\\r\\n        emit OwnerTransfer(_address, count, now);\\r\\n    }\\r\\n    \\r\\n    function takeComission(uint _value) private returns(uint){\\r\\n        if(_value == 0) revert(\\u0027no_sum\\u0027);\\r\\n        uint comission = _value.div(100);\\r\\n        balances[owner] = balances[owner].add(comission);\\r\\n        return comission;\\r\\n    }\\r\\n    \\r\\n    function getConvertValue(address _address) public view returns(uint) {\\r\\n        if(pendingConversions[_address] == 0) return 0;\\r\\n        return pendingConversions[_address];\\r\\n    }\\r\\n    \\r\\n    function returnComission(uint _value) private returns(uint) {\\r\\n        uint originalValue = _value.mul(100).div(99);\\r\\n        uint comission = originalValue.div(100);\\r\\n        balances[owner] = balances[owner].sub(comission);\\r\\n        return comission;\\r\\n    }\\r\\n    \\r\\n    function returnPendingTokens() public  {\\r\\n        if(pendingConversions[msg.sender] == 0) revert(\\u0027action_incorrect\\u0027);\\r\\n        uint comission = returnComission(pendingConversions[msg.sender]);\\r\\n        uint resultCount = pendingConversions[msg.sender].add(comission);\\r\\n        balances[msg.sender] = balances[msg.sender].add(resultCount);\\r\\n        delete pendingConversions[msg.sender];\\r\\n        emit ConversionReturn(msg.sender, resultCount, comission, now);\\r\\n\\r\\n    }\\r\\n    \\r\\n    function conversionSuccessfull(address _address) public onlyProgressive returns(bool) {\\r\\n        if(pendingConversions[_address] == 0) revert(\\u0027action_incorrect\\u0027);\\r\\n        delete pendingConversions[_address];\\r\\n        emit ConversionSuccess(_address, pendingConversions[_address], now);\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    //Эмиссия - проверяем является ли тот кто запрашивает, владельцем контракта\\r\\n    // Проверяем сумму\\r\\n    // проверяем переполнение\\r\\n    // в случае успеха добавляем токены владельцу контракта и в общее количество\\r\\n    function emission(uint emissionCount) external onlyOwner {\\r\\n        require(emissionCount \\u003e 0, \\\"emission_not_null\\\");\\r\\n        \\r\\n        totalTokens = totalTokens.add(emissionCount);\\r\\n        balances[owner] = balances[owner].add(emissionCount);\\r\\n    }\\r\\n    \\r\\n    function buy() payable public {\\r\\n        uint sentWei = msg.value;\\r\\n        if(sentWei == 0) revert(\\u0027not_enough\\u0027);\\r\\n        getRate();\\r\\n\\t\\tuint tenThousand = 10000;\\r\\n        uint oneTokenInWei = oneTokenCount();\\r\\n        uint buyTokensCounts = (sentWei.mul(1000000).div(oneTokenInWei));\\r\\n        uint buyTokensCountsNoAjio = buyTokensCounts.mul(tenThousand).div(tenThousand.add(ajioPercent.mul(10)));\\r\\n        uint ajioPayment =  buyTokensCounts.sub(buyTokensCountsNoAjio);\\r\\n        uint resultTokens = (buyTokensCounts.sub(ajioPayment)).div(10000);\\r\\n        if(resultTokens \\u003e totalTokens) revert(\\u0027not_enough_tokens_company\\u0027);\\r\\n        if(resultTokens \\u003e balances[owner]) revert(\\u0027not_enough_tokens_company\\u0027);\\r\\n        balances[msg.sender] = balances[msg.sender].add(resultTokens);\\r\\n        balances[owner] = balances[owner].sub(resultTokens);\\r\\n        emit Transfer(owner, msg.sender, resultTokens, now);\\r\\n    }\\r\\n    \\r\\n    function toggleCanTransfer(bool enable) public onlyOwner {\\r\\n         canTransfer = enable;\\r\\n    }\\r\\n    \\r\\n    function transferEnabled() public view returns(bool) {\\r\\n        return canTransfer;\\r\\n    }\\r\\n    \\r\\n    function transfer(address _to, uint _value) public returns(bool) {\\r\\n        if(!canTransfer) revert(\\u0027action_denied\\u0027);\\r\\n        if(_to == msg.sender) revert(\\u0027address_match\\u0027);\\r\\n        if(_value == 0) revert(\\u0027no_tokens\\u0027);\\r\\n        if(_value \\u003e totalTokens) revert(\\u0027not_enough_tokens_company\\u0027);\\r\\n        if(balances[msg.sender] \\u003c _value) revert(\\u0027not_enough_tokens\\u0027);\\r\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\r\\n        balances[_to] = balances[_to].add(_value);\\r\\n        emit Transfer(msg.sender, _to, _value, now);\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    function oneTokenCount () public view returns(uint) {\\r\\n        uint oneEther = 1 ether;\\r\\n        return (oneEther.mul(10000000).div(oneETHToDollarPrice.mul(1000000000)));\\r\\n    }\\r\\n    \\r\\n    //Показываем общее количество токенов\\r\\n    function totalSupply() external view returns (uint256) {\\r\\n        return totalTokens;\\r\\n    }\\r\\n    \\r\\n    function balanceOf(address _owner) view public returns (uint balance) {\\r\\n        return balances[_owner];\\r\\n    }\\r\\n    \\r\\n    function checkAccountEthereum() external view returns(uint) {\\r\\n        return address(this).balance;\\r\\n    }\\r\\n    \\r\\n    function sendEtherToOwner(uint amountInWei) external onlyOwner returns(uint) {\\r\\n        if(address(this).balance \\u003c amountInWei) revert(\\\"not_enough\\\");\\r\\n        owner.transfer(amountInWei);\\r\\n    }\\r\\n    \\r\\n    function returnOwner() view public returns (address) {\\r\\n        return owner;\\r\\n    }\\r\\n    \\r\\n    function addToBalance() external payable onlyOwner{\\r\\n        \\r\\n    }\\r\\n    \\r\\n}\"},\"IERC20A.sol\":{\"content\":\"pragma solidity ^0.5.11;\\r\\n\\r\\n/**\\r\\n * @title ERC20 interface\\r\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\r\\n */\\r\\ninterface IERC20A {\\r\\n  function totalSupply() external view returns (uint256);\\r\\n\\r\\n  function balanceOf(address who) external view returns (uint256);\\r\\n\\r\\n  function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n  event Transfer(\\r\\n    address indexed from,\\r\\n    address indexed to,\\r\\n    uint256 value,\\r\\n    uint date\\r\\n  );\\r\\n}\"},\"ProgressiveTokenInterface.sol\":{\"content\":\"pragma solidity ^0.5.11;\\r\\ninterface ProgressiveTokenInterface {\\r\\n    function oneDollarRate() external view returns(uint);\\r\\n    function oneTokenCount() external view returns(uint);\\r\\n    function addConvertedTokens(address _address) external;\\r\\n}\"},\"SafeMath.sol\":{\"content\":\"pragma solidity \\u003e=0.4.22 \\u003c0.7.0;\\r\\n\\r\\n/**\\r\\n * @title SafeMath\\r\\n * @dev Math operations with safety checks that revert on error\\r\\n */\\r\\nlibrary SafeMath {\\r\\n\\r\\n  /**\\r\\n  * @dev Multiplies two numbers, reverts on overflow.\\r\\n  */\\r\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n    // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\r\\n    if (a == 0) {\\r\\n      return 0;\\r\\n    }\\r\\n\\r\\n    uint256 c = a * b;\\r\\n    require(c / a == b);\\r\\n\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\\r\\n  */\\r\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    require(b \\u003e 0); // Solidity only automatically asserts when dividing by 0\\r\\n    uint256 c = a / b;\\r\\n    // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\r\\n  */\\r\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    require(b \\u003c= a);\\r\\n    uint256 c = a - b;\\r\\n\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @dev Adds two numbers, reverts on overflow.\\r\\n  */\\r\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    uint256 c = a + b;\\r\\n    require(c \\u003e= a);\\r\\n\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\\r\\n  * reverts when dividing by zero.\\r\\n  */\\r\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    require(b != 0);\\r\\n    return a % b;\\r\\n  }\\r\\n}\"}}","ABI":"[{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"AgioPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"comission\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"ConversionReturn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"ConversionSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"countPro\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"countSta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialTokenCt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"comission\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensCt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"Convert\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dealId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalEth\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensCounts\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethTokenPayment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ajioPayment\",\"type\":\"uint256\"}],\"name\":\"DealActivation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"OwnerTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dealId\",\"type\":\"uint256\"}],\"name\":\"activateDeal\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"addToBalance\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ajioPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"boughtTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkAccountEthereum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"conversionSuccessfull\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"convertToProgressive\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"emissionCount\",\"type\":\"uint256\"}],\"name\":\"emission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dealId\",\"type\":\"uint256\"}],\"name\":\"getAjioInUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getConvertValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oneDollarRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oneETHToDollarPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oneTokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"payReferal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"progressiveFibExAdress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"returnOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"returnPendingTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountInWei\",\"type\":\"uint256\"}],\"name\":\"sendEtherToOwner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractItem\",\"type\":\"address\"}],\"name\":\"setAdress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dealId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdPrice\",\"type\":\"uint256\"}],\"name\":\"setAjioInUsd\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setAjioToFull\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setAjioToHalf\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"toggleCanTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"FibExInvestStableToken","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://5dceeb8034d2186ccc123bbb524b85bbd6c6019264e7d3e147c49a47f1740326"}]}