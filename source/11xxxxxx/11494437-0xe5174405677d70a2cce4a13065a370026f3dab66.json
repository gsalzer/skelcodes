{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\n// solhint-disable-next-line compiler-version\r\npragma solidity >=0.4.24 <0.8.0;\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\nabstract contract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns true if and only if the function is running in the constructor\r\n    function _isConstructor() private view returns (bool) {\r\n        // extcodesize checks the size of the code stored in an address, and\r\n        // address returns the current address. Since the code is still not\r\n        // deployed when running a constructor, any checks on its code size will\r\n        // yield zero, making it an effective way to detect if a contract is\r\n        // under construction or not.\r\n        address self = address(this);\r\n        uint256 cs;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            cs := extcodesize(self)\r\n        }\r\n        return cs == 0;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) private pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function balanceOf(address owner) external view returns (uint);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function transfer(address to, uint value) external returns (bool);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint value\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n// a facade for prices fetch from oracles\r\ninterface LnPrices {\r\n    // get price for a currency\r\n    function getPrice(bytes32 currencyName) external view returns (uint);\r\n\r\n    // get price and updated time for a currency\r\n    function getPriceAndUpdatedTime(bytes32 currencyName) external view returns (uint price, uint time);\r\n\r\n    // is the price is stale\r\n    function isStale(bytes32 currencyName) external view returns (bool);\r\n\r\n    // the defined stale time\r\n    function stalePeriod() external view returns (uint);\r\n\r\n    // exchange amount of source currenty for some dest currency, also get source and dest curreny price\r\n    function exchange(\r\n        bytes32 sourceName,\r\n        uint sourceAmount,\r\n        bytes32 destName\r\n    ) external view returns (uint);\r\n\r\n    // exchange amount of source currenty for some dest currency\r\n    function exchangeAndPrices(\r\n        bytes32 sourceName,\r\n        uint sourceAmount,\r\n        bytes32 destName\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint value,\r\n            uint sourcePrice,\r\n            uint destPrice\r\n        );\r\n\r\n    // price names\r\n    function LUSD() external view returns (bytes32);\r\n\r\n    function LINA() external view returns (bytes32);\r\n}\r\n\r\nabstract contract LnBasePrices is LnPrices {\r\n    // const name\r\n    bytes32 public constant override LINA = \"LINA\";\r\n    bytes32 public constant override LUSD = \"lUSD\";\r\n}\r\n\r\n/**\r\n * @title LnAdminUpgradeable\r\n *\r\n * @dev This is an upgradeable version of `LnAdmin` by replacing the constructor with\r\n * an initializer and reserving storage slots.\r\n */\r\ncontract LnAdminUpgradeable is Initializable {\r\n    event CandidateChanged(address oldCandidate, address newCandidate);\r\n    event AdminChanged(address oldAdmin, address newAdmin);\r\n\r\n    address public admin;\r\n    address public candidate;\r\n\r\n    function __LnAdminUpgradeable_init(address _admin) public initializer {\r\n        require(_admin != address(0), \"LnAdminUpgradeable: zero address\");\r\n        admin = _admin;\r\n        emit AdminChanged(address(0), _admin);\r\n    }\r\n\r\n    function setCandidate(address _candidate) external onlyAdmin {\r\n        address old = candidate;\r\n        candidate = _candidate;\r\n        emit CandidateChanged(old, candidate);\r\n    }\r\n\r\n    function becomeAdmin() external {\r\n        require(msg.sender == candidate, \"LnAdminUpgradeable: only candidate can become admin\");\r\n        address old = admin;\r\n        admin = candidate;\r\n        emit AdminChanged(old, admin);\r\n    }\r\n\r\n    modifier onlyAdmin {\r\n        require((msg.sender == admin), \"LnAdminUpgradeable: only the contract admin can perform this action\");\r\n        _;\r\n    }\r\n\r\n    // Reserved storage space to allow for layout changes in the future.\r\n    uint256[48] private __gap;\r\n}\r\n\r\n// Reward Distributor\r\ncontract LnRewardLocker is LnAdminUpgradeable {\r\n    using SafeMath for uint256;\r\n\r\n    struct RewardData {\r\n        uint64 lockToTime;\r\n        uint256 amount;\r\n    }\r\n\r\n    mapping(address => RewardData[]) public userRewards; // RewardData[0] is claimable\r\n    mapping(address => uint256) public balanceOf;\r\n    uint256 public totalNeedToReward;\r\n\r\n    uint256 public constant maxRewardArrayLen = 100;\r\n\r\n    address feeSysAddr;\r\n    IERC20 public linaToken;\r\n\r\n    function __LnRewardLocker_init(address _admin, address linaAddress) public initializer {\r\n        __LnAdminUpgradeable_init(_admin);\r\n\r\n        linaToken = IERC20(linaAddress);\r\n    }\r\n\r\n    function setLinaAddress(address _token) external onlyAdmin {\r\n        linaToken = IERC20(_token);\r\n    }\r\n\r\n    function Init(address _feeSysAddr) external onlyAdmin {\r\n        feeSysAddr = _feeSysAddr;\r\n    }\r\n\r\n    modifier onlyFeeSys() {\r\n        require((msg.sender == feeSysAddr), \"Only Fee System call\");\r\n        _;\r\n    }\r\n\r\n    function appendReward(\r\n        address _user,\r\n        uint256 _amount,\r\n        uint64 _lockTo\r\n    ) external onlyFeeSys {\r\n        if (userRewards[_user].length >= maxRewardArrayLen) {\r\n            Slimming(_user);\r\n        }\r\n\r\n        require(userRewards[_user].length <= maxRewardArrayLen, \"user array out of\");\r\n        // init cliamable\r\n        if (userRewards[_user].length == 0) {\r\n            RewardData memory data = RewardData({lockToTime: 0, amount: 0});\r\n            userRewards[_user].push(data);\r\n        }\r\n\r\n        // append new reward\r\n        RewardData memory data = RewardData({lockToTime: _lockTo, amount: _amount});\r\n        userRewards[_user].push(data);\r\n\r\n        balanceOf[_user] = balanceOf[_user].add(_amount);\r\n        totalNeedToReward = totalNeedToReward.add(_amount);\r\n\r\n        emit AppendReward(_user, _amount, _lockTo);\r\n    }\r\n\r\n    // move claimable to RewardData[0]\r\n    function Slimming(address _user) public {\r\n        require(userRewards[_user].length > 1, \"not data to slimming\");\r\n        RewardData storage claimable = userRewards[_user][0];\r\n        for (uint256 i = 1; i < userRewards[_user].length; ) {\r\n            if (now >= userRewards[_user][i].lockToTime) {\r\n                claimable.amount = claimable.amount.add(userRewards[_user][i].amount);\r\n\r\n                //swap last to current position\r\n                uint256 len = userRewards[_user].length;\r\n                userRewards[_user][i].lockToTime = userRewards[_user][len - 1].lockToTime;\r\n                userRewards[_user][i].amount = userRewards[_user][len - 1].amount;\r\n                userRewards[_user].pop(); // delete last one\r\n            } else {\r\n                i++;\r\n            }\r\n        }\r\n    }\r\n\r\n    // if lock lina is collateral, claimable need calc to fix target ratio\r\n    function ClaimMaxable() public {\r\n        address user = msg.sender;\r\n        Slimming(user);\r\n        _claim(user, userRewards[user][0].amount);\r\n    }\r\n\r\n    function _claim(address _user, uint256 _amount) internal {\r\n        userRewards[_user][0].amount = userRewards[_user][0].amount.sub(_amount);\r\n\r\n        balanceOf[_user] = balanceOf[_user].sub(_amount);\r\n        totalNeedToReward = totalNeedToReward.sub(_amount);\r\n\r\n        linaToken.transfer(_user, _amount);\r\n        emit ClaimLog(_user, _amount);\r\n    }\r\n\r\n    function Claim(uint256 _amount) public {\r\n        address user = msg.sender;\r\n        Slimming(user);\r\n        require(_amount <= userRewards[user][0].amount, \"Claim amount invalid\");\r\n        _claim(user, _amount);\r\n    }\r\n\r\n    event AppendReward(address user, uint256 amount, uint64 lockTo);\r\n    event ClaimLog(address user, uint256 amount);\r\n\r\n    // Reserved storage space to allow for layout changes in the future.\r\n    uint256[45] private __gap;\r\n}\r\n\r\ninterface IAsset {\r\n    function keyName() external view returns (bytes32);\r\n}\r\n\r\ncontract LnAdmin {\r\n    address public admin;\r\n    address public candidate;\r\n\r\n    constructor(address _admin) public {\r\n        require(_admin != address(0), \"admin address cannot be 0\");\r\n        admin = _admin;\r\n        emit AdminChanged(address(0), _admin);\r\n    }\r\n\r\n    function setCandidate(address _candidate) external onlyAdmin {\r\n        address old = candidate;\r\n        candidate = _candidate;\r\n        emit CandidateChanged(old, candidate);\r\n    }\r\n\r\n    function becomeAdmin() external {\r\n        require(msg.sender == candidate, \"Only candidate can become admin\");\r\n        address old = admin;\r\n        admin = candidate;\r\n        emit AdminChanged(old, admin);\r\n    }\r\n\r\n    modifier onlyAdmin {\r\n        require((msg.sender == admin), \"Only the contract admin can perform this action\");\r\n        _;\r\n    }\r\n\r\n    event CandidateChanged(address oldCandidate, address newCandidate);\r\n    event AdminChanged(address oldAdmin, address newAdmin);\r\n}\r\n\r\ncontract LnConfig is LnAdmin {\r\n    mapping(bytes32 => uint) internal mUintConfig;\r\n\r\n    constructor(address _admin) public LnAdmin(_admin) {}\r\n\r\n    //some configue keys\r\n    bytes32 public constant BUILD_RATIO = \"BuildRatio\"; // percent, base 10e18\r\n\r\n    function getUint(bytes32 key) external view returns (uint) {\r\n        return mUintConfig[key];\r\n    }\r\n\r\n    function setUint(bytes32 key, uint value) external onlyAdmin {\r\n        mUintConfig[key] = value;\r\n        emit SetUintConfig(key, value);\r\n    }\r\n\r\n    function deleteUint(bytes32 key) external onlyAdmin {\r\n        delete mUintConfig[key];\r\n        emit SetUintConfig(key, 0);\r\n    }\r\n\r\n    function batchSet(bytes32[] calldata names, uint[] calldata values) external onlyAdmin {\r\n        require(names.length == values.length, \"Input lengths must match\");\r\n\r\n        for (uint i = 0; i < names.length; i++) {\r\n            mUintConfig[names[i]] = values[i];\r\n            emit SetUintConfig(names[i], values[i]);\r\n        }\r\n    }\r\n\r\n    event SetUintConfig(bytes32 key, uint value);\r\n}\r\n\r\nlibrary SafeDecimalMath {\r\n    using SafeMath for uint;\r\n\r\n    uint8 public constant decimals = 18;\r\n    uint8 public constant highPrecisionDecimals = 27;\r\n\r\n    uint public constant UNIT = 10**uint(decimals);\r\n\r\n    uint public constant PRECISE_UNIT = 10**uint(highPrecisionDecimals);\r\n    uint private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR = 10**uint(highPrecisionDecimals - decimals);\r\n\r\n    function unit() external pure returns (uint) {\r\n        return UNIT;\r\n    }\r\n\r\n    function preciseUnit() external pure returns (uint) {\r\n        return PRECISE_UNIT;\r\n    }\r\n\r\n    function multiplyDecimal(uint x, uint y) internal pure returns (uint) {\r\n        return x.mul(y) / UNIT;\r\n    }\r\n\r\n    function _multiplyDecimalRound(\r\n        uint x,\r\n        uint y,\r\n        uint precisionUnit\r\n    ) private pure returns (uint) {\r\n        uint quotientTimesTen = x.mul(y) / (precisionUnit / 10);\r\n\r\n        if (quotientTimesTen % 10 >= 5) {\r\n            quotientTimesTen += 10;\r\n        }\r\n\r\n        return quotientTimesTen / 10;\r\n    }\r\n\r\n    function multiplyDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\r\n        return _multiplyDecimalRound(x, y, PRECISE_UNIT);\r\n    }\r\n\r\n    function multiplyDecimalRound(uint x, uint y) internal pure returns (uint) {\r\n        return _multiplyDecimalRound(x, y, UNIT);\r\n    }\r\n\r\n    function divideDecimal(uint x, uint y) internal pure returns (uint) {\r\n        return x.mul(UNIT).div(y);\r\n    }\r\n\r\n    function _divideDecimalRound(\r\n        uint x,\r\n        uint y,\r\n        uint precisionUnit\r\n    ) private pure returns (uint) {\r\n        uint resultTimesTen = x.mul(precisionUnit * 10).div(y);\r\n\r\n        if (resultTimesTen % 10 >= 5) {\r\n            resultTimesTen += 10;\r\n        }\r\n\r\n        return resultTimesTen / 10;\r\n    }\r\n\r\n    function divideDecimalRound(uint x, uint y) internal pure returns (uint) {\r\n        return _divideDecimalRound(x, y, UNIT);\r\n    }\r\n\r\n    function divideDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\r\n        return _divideDecimalRound(x, y, PRECISE_UNIT);\r\n    }\r\n\r\n    function decimalToPreciseDecimal(uint i) internal pure returns (uint) {\r\n        return i.mul(UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR);\r\n    }\r\n\r\n    function preciseDecimalToDecimal(uint i) internal pure returns (uint) {\r\n        uint quotientTimesTen = i / (UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR / 10);\r\n\r\n        if (quotientTimesTen % 10 >= 5) {\r\n            quotientTimesTen += 10;\r\n        }\r\n\r\n        return quotientTimesTen / 10;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {}\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n\r\n    uint256[50] private __gap;\r\n}\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    function __Pausable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Pausable_init_unchained();\r\n    }\r\n\r\n    function __Pausable_init_unchained() internal initializer {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n\r\n    uint256[49] private __gap;\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary AddressUpgradeable {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) private pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract LnAddressStorage is LnAdmin {\r\n    mapping(bytes32 => address) public mAddrs;\r\n\r\n    constructor(address _admin) public LnAdmin(_admin) {}\r\n\r\n    function updateAll(bytes32[] calldata names, address[] calldata destinations) external onlyAdmin {\r\n        require(names.length == destinations.length, \"Input lengths must match\");\r\n\r\n        for (uint i = 0; i < names.length; i++) {\r\n            mAddrs[names[i]] = destinations[i];\r\n            emit StorageAddressUpdated(names[i], destinations[i]);\r\n        }\r\n    }\r\n\r\n    function update(bytes32 name, address dest) external onlyAdmin {\r\n        require(name != \"\", \"name can not be empty\");\r\n        require(dest != address(0), \"address cannot be 0\");\r\n        mAddrs[name] = dest;\r\n        emit StorageAddressUpdated(name, dest);\r\n    }\r\n\r\n    function getAddress(bytes32 name) external view returns (address) {\r\n        return mAddrs[name];\r\n    }\r\n\r\n    function getAddressWithRequire(bytes32 name, string calldata reason) external view returns (address) {\r\n        address _foundAddress = mAddrs[name];\r\n        require(_foundAddress != address(0), reason);\r\n        return _foundAddress;\r\n    }\r\n\r\n    event StorageAddressUpdated(bytes32 name, address addr);\r\n}\r\n\r\ninterface LnAddressCache {\r\n    function updateAddressCache(LnAddressStorage _addressStorage) external;\r\n\r\n    event CachedAddressUpdated(bytes32 name, address addr);\r\n}\r\n\r\ncontract testAddressCache is LnAddressCache, LnAdmin {\r\n    address public addr1;\r\n    address public addr2;\r\n\r\n    constructor(address _admin) public LnAdmin(_admin) {}\r\n\r\n    function updateAddressCache(LnAddressStorage _addressStorage) public override onlyAdmin {\r\n        addr1 = LnAddressStorage(_addressStorage).getAddressWithRequire(\"a\", \"\");\r\n        addr2 = LnAddressStorage(_addressStorage).getAddressWithRequire(\"b\", \"\");\r\n        emit CachedAddressUpdated(\"a\", addr1);\r\n        emit CachedAddressUpdated(\"b\", addr2);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping(bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n            // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            // Move the last value to the index where the value to delete is\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n        return set._values[index];\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint256(_at(set._inner, index)));\r\n    }\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module that allows children to implement role-based access\r\n * control mechanisms.\r\n *\r\n * Roles are referred to by their `bytes32` identifier. These should be exposed\r\n * in the external API and be unique. The best way to achieve this is by\r\n * using `public constant` hash digests:\r\n *\r\n * ```\r\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\r\n * ```\r\n *\r\n * Roles can be used to represent a set of permissions. To restrict access to a\r\n * function call, use {hasRole}:\r\n *\r\n * ```\r\n * function foo() public {\r\n *     require(hasRole(MY_ROLE, msg.sender));\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Roles can be granted and revoked dynamically via the {grantRole} and\r\n * {revokeRole} functions. Each role has an associated admin role, and only\r\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\r\n *\r\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\r\n * that only accounts with this role will be able to grant or revoke other\r\n * roles. More complex role relationships can be created by using\r\n * {_setRoleAdmin}.\r\n *\r\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\r\n * grant and revoke this role. Extra precautions should be taken to secure\r\n * accounts that have been granted it.\r\n */\r\nabstract contract AccessControl is Context {\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n    using Address for address;\r\n\r\n    struct RoleData {\r\n        EnumerableSet.AddressSet members;\r\n        bytes32 adminRole;\r\n    }\r\n\r\n    mapping(bytes32 => RoleData) private _roles;\r\n\r\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\r\n\r\n    /**\r\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\r\n     *\r\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\r\n     * {RoleAdminChanged} not being emitted signaling this.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is granted `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call, an admin role\r\n     * bearer except when using {_setupRole}.\r\n     */\r\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is revoked `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call:\r\n     *   - if using `revokeRole`, it is the admin role bearer\r\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\r\n     */\r\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) public view returns (bool) {\r\n        return _roles[role].members.contains(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of accounts that have `role`. Can be used\r\n     * together with {getRoleMember} to enumerate all bearers of a role.\r\n     */\r\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\r\n        return _roles[role].members.length();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns one of the accounts that have `role`. `index` must be a\r\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\r\n     *\r\n     * Role bearers are not sorted in any particular way, and their ordering may\r\n     * change at any point.\r\n     *\r\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\r\n     * you perform all queries on the same block. See the following\r\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\r\n     * for more information.\r\n     */\r\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\r\n        return _roles[role].members.at(index);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\r\n        return _roles[role].adminRole;\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) public virtual {\r\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to grant\");\r\n\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) public virtual {\r\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to revoke\");\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) public virtual {\r\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event. Note that unlike {grantRole}, this function doesn't perform any\r\n     * checks on the calling account.\r\n     *\r\n     * [WARNING]\r\n     * ====\r\n     * This function should only be called from the constructor when setting\r\n     * up the initial roles for the system.\r\n     *\r\n     * Using this function in any other way is effectively circumventing the admin\r\n     * system imposed by {AccessControl}.\r\n     * ====\r\n     */\r\n    function _setupRole(bytes32 role, address account) internal virtual {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `adminRole` as ``role``'s admin role.\r\n     *\r\n     * Emits a {RoleAdminChanged} event.\r\n     */\r\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\r\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\r\n        _roles[role].adminRole = adminRole;\r\n    }\r\n\r\n    function _grantRole(bytes32 role, address account) private {\r\n        if (_roles[role].members.add(account)) {\r\n            emit RoleGranted(role, account, _msgSender());\r\n        }\r\n    }\r\n\r\n    function _revokeRole(bytes32 role, address account) private {\r\n        if (_roles[role].members.remove(account)) {\r\n            emit RoleRevoked(role, account, _msgSender());\r\n        }\r\n    }\r\n}\r\n\r\n// example:\r\n//LnAccessControl accessCtrl = LnAccessControl(addressStorage.getAddress(\"LnAccessControl\"));\r\n//require(accessCtrl.hasRole(accessCtrl.DEBT_SYSTEM(), _address), \"Need debt system access role\");\r\n\r\n// contract access control\r\ncontract LnAccessControl is AccessControl {\r\n    using Address for address;\r\n\r\n    // -------------------------------------------------------\r\n    // role type\r\n    bytes32 public constant ISSUE_ASSET_ROLE = (\"ISSUE_ASSET\"); //keccak256\r\n    bytes32 public constant BURN_ASSET_ROLE = (\"BURN_ASSET\");\r\n\r\n    bytes32 public constant DEBT_SYSTEM = (\"LnDebtSystem\");\r\n\r\n    // -------------------------------------------------------\r\n    constructor(address admin) public {\r\n        _setupRole(DEFAULT_ADMIN_ROLE, admin);\r\n    }\r\n\r\n    function IsAdmin(address _address) public view returns (bool) {\r\n        return hasRole(DEFAULT_ADMIN_ROLE, _address);\r\n    }\r\n\r\n    function SetAdmin(address _address) public returns (bool) {\r\n        require(IsAdmin(msg.sender), \"Only admin\");\r\n\r\n        _setupRole(DEFAULT_ADMIN_ROLE, _address);\r\n    }\r\n\r\n    // -------------------------------------------------------\r\n    // this func need admin role. grantRole and revokeRole need admin role\r\n    function SetRoles(\r\n        bytes32 roleType,\r\n        address[] calldata addresses,\r\n        bool[] calldata setTo\r\n    ) external {\r\n        require(IsAdmin(msg.sender), \"Only admin\");\r\n\r\n        _setRoles(roleType, addresses, setTo);\r\n    }\r\n\r\n    function _setRoles(\r\n        bytes32 roleType,\r\n        address[] calldata addresses,\r\n        bool[] calldata setTo\r\n    ) private {\r\n        require(addresses.length == setTo.length, \"parameter address length not eq\");\r\n\r\n        for (uint256 i = 0; i < addresses.length; i++) {\r\n            //require(addresses[i].isContract(), \"Role address need contract only\");\r\n            if (setTo[i]) {\r\n                grantRole(roleType, addresses[i]);\r\n            } else {\r\n                revokeRole(roleType, addresses[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    // function SetRoles(bytes32 roleType, address[] calldata addresses, bool[] calldata setTo) public {\r\n    //     _setRoles(roleType, addresses, setTo);\r\n    // }\r\n\r\n    // Issue burn\r\n    function SetIssueAssetRole(address[] calldata issuer, bool[] calldata setTo) public {\r\n        _setRoles(ISSUE_ASSET_ROLE, issuer, setTo);\r\n    }\r\n\r\n    function SetBurnAssetRole(address[] calldata burner, bool[] calldata setTo) public {\r\n        _setRoles(BURN_ASSET_ROLE, burner, setTo);\r\n    }\r\n\r\n    //\r\n    function SetDebtSystemRole(address[] calldata _address, bool[] calldata _setTo) public {\r\n        _setRoles(DEBT_SYSTEM, _address, _setTo);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20Upgradeable {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMathUpgradeable {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable {\r\n    using SafeMathUpgradeable for uint256;\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\r\n        __Context_init_unchained();\r\n        __ERC20_init_unchained(name_, symbol_);\r\n    }\r\n\r\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\")\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\")\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    uint256[44] private __gap;\r\n}\r\n\r\n/**\r\n * @title LnAssetUpgradeable\r\n *\r\n * @dev This is an upgradeable version of `LnAsset`.\r\n */\r\ncontract LnAssetUpgradeable is ERC20Upgradeable, LnAdminUpgradeable, IAsset, LnAddressCache {\r\n    bytes32 mKeyName;\r\n    LnAccessControl accessCtrl;\r\n\r\n    modifier onlyIssueAssetRole(address _address) {\r\n        require(accessCtrl.hasRole(accessCtrl.ISSUE_ASSET_ROLE(), _address), \"Need issue access role\");\r\n        _;\r\n    }\r\n    modifier onlyBurnAssetRole(address _address) {\r\n        require(accessCtrl.hasRole(accessCtrl.BURN_ASSET_ROLE(), _address), \"Need burn access role\");\r\n        _;\r\n    }\r\n\r\n    function __LnAssetUpgradeable_init(\r\n        bytes32 _key,\r\n        string memory _name,\r\n        string memory _symbol,\r\n        address _admin\r\n    ) public initializer {\r\n        __ERC20_init(_name, _symbol);\r\n        __LnAdminUpgradeable_init(_admin);\r\n\r\n        mKeyName = _key;\r\n    }\r\n\r\n    function keyName() external view override returns (bytes32) {\r\n        return mKeyName;\r\n    }\r\n\r\n    function updateAddressCache(LnAddressStorage _addressStorage) public override onlyAdmin {\r\n        accessCtrl = LnAccessControl(\r\n            _addressStorage.getAddressWithRequire(\"LnAccessControl\", \"LnAccessControl address not valid\")\r\n        );\r\n\r\n        emit CachedAddressUpdated(\"LnAccessControl\", address(accessCtrl));\r\n    }\r\n\r\n    function mint(address account, uint256 amount) external onlyIssueAssetRole(msg.sender) {\r\n        _mint(account, amount);\r\n    }\r\n\r\n    function burn(address account, uint amount) external onlyBurnAssetRole(msg.sender) {\r\n        _burn(account, amount);\r\n    }\r\n\r\n    // Reserved storage space to allow for layout changes in the future.\r\n    uint256[48] private __gap;\r\n}\r\n\r\ncontract LnAssetSystem is LnAddressStorage {\r\n    using SafeMath for uint;\r\n    using SafeDecimalMath for uint;\r\n\r\n    IAsset[] public mAssetList; // 合约地址数组\r\n    mapping(address => bytes32) public mAddress2Names; // 地址到名称的映射\r\n\r\n    constructor(address _admin) public LnAddressStorage(_admin) {}\r\n\r\n    function addAsset(IAsset asset) external onlyAdmin {\r\n        bytes32 name = asset.keyName();\r\n\r\n        require(mAddrs[name] == address(0), \"Asset already exists\");\r\n        require(mAddress2Names[address(asset)] == bytes32(0), \"Asset address already exists\");\r\n\r\n        mAssetList.push(asset);\r\n        mAddrs[name] = address(asset);\r\n        mAddress2Names[address(asset)] = name;\r\n\r\n        emit AssetAdded(name, address(asset));\r\n    }\r\n\r\n    function removeAsset(bytes32 name) external onlyAdmin {\r\n        address assetToRemove = address(mAddrs[name]);\r\n\r\n        require(assetToRemove != address(0), \"asset does not exist\");\r\n\r\n        // Remove from list\r\n        for (uint i = 0; i < mAssetList.length; i++) {\r\n            if (address(mAssetList[i]) == assetToRemove) {\r\n                delete mAssetList[i];\r\n                mAssetList[i] = mAssetList[mAssetList.length - 1];\r\n                mAssetList.pop();\r\n                break;\r\n            }\r\n        }\r\n\r\n        // And remove it from the assets mapping\r\n        delete mAddress2Names[assetToRemove];\r\n        delete mAddrs[name];\r\n\r\n        emit AssetRemoved(name, assetToRemove);\r\n    }\r\n\r\n    function assetNumber() external view returns (uint) {\r\n        return mAssetList.length;\r\n    }\r\n\r\n    // check exchange rate invalid condition ? invalid just fail.\r\n    function totalAssetsInUsd() public view returns (uint256 rTotal) {\r\n        require(mAddrs[\"LnPrices\"] != address(0), \"LnPrices address cannot access\");\r\n        LnPrices priceGetter = LnPrices(mAddrs[\"LnPrices\"]); //getAddress\r\n        for (uint256 i = 0; i < mAssetList.length; i++) {\r\n            uint256 exchangeRate = priceGetter.getPrice(mAssetList[i].keyName());\r\n            rTotal = rTotal.add(LnAssetUpgradeable(address(mAssetList[i])).totalSupply().multiplyDecimal(exchangeRate));\r\n        }\r\n    }\r\n\r\n    function getAssetAddresses() external view returns (address[] memory) {\r\n        address[] memory addr = new address[](mAssetList.length);\r\n        for (uint256 i = 0; i < mAssetList.length; i++) {\r\n            addr[i] = address(mAssetList[i]);\r\n        }\r\n        return addr;\r\n    }\r\n\r\n    event AssetAdded(bytes32 name, address asset);\r\n    event AssetRemoved(bytes32 name, address asset);\r\n}\r\n\r\ncontract LnFeeSystem is LnAdminUpgradeable, LnAddressCache {\r\n    using SafeMath for uint256;\r\n    using SafeDecimalMath for uint256;\r\n\r\n    address public constant FEE_DUMMY_ADDRESS = address(0x2048);\r\n\r\n    struct UserDebtData {\r\n        uint256 PeriodID; // Period id\r\n        uint256 debtProportion;\r\n        uint256 debtFactor; // PRECISE_UNIT\r\n    }\r\n\r\n    struct RewardPeriod {\r\n        uint256 id; // Period id\r\n        uint256 startingDebtFactor;\r\n        uint256 startTime;\r\n        uint256 feesToDistribute; // 要分配的费用\r\n        uint256 feesClaimed; // 已领取的费用\r\n        uint256 rewardsToDistribute; // 要分配的奖励\r\n        uint256 rewardsClaimed; // 已领取的奖励\r\n    }\r\n\r\n    RewardPeriod public curRewardPeriod;\r\n    RewardPeriod public preRewardPeriod;\r\n    uint256 public OnePeriodSecs;\r\n    uint64 public LockTime;\r\n\r\n    mapping(address => uint256) public userLastClaimedId;\r\n\r\n    mapping(address => UserDebtData[2]) public userPeriodDebt; // one for current period, one for pre period\r\n\r\n    //\r\n    LnDebtSystem public debtSystem;\r\n    LnCollateralSystem public collateralSystem;\r\n    LnRewardLocker public rewardLocker;\r\n    LnAssetSystem mAssets;\r\n\r\n    address public exchangeSystemAddress;\r\n    address public rewardDistributer;\r\n\r\n    function __LnFeeSystem_init(address _admin) public initializer {\r\n        __LnAdminUpgradeable_init(_admin);\r\n\r\n        OnePeriodSecs = 1 weeks;\r\n        LockTime = uint64(52 weeks);\r\n    }\r\n\r\n    // Note: before start run need call this func to init.\r\n    function Init(address _exchangeSystem, address _rewardDistri) public onlyAdmin {\r\n        exchangeSystemAddress = _exchangeSystem;\r\n        rewardDistributer = _rewardDistri;\r\n    }\r\n\r\n    //set period data, maybe copy from old contract\r\n    function SetPeriodData(\r\n        int16 index, // 0 current 1 pre\r\n        uint256 id,\r\n        uint256 startingDebtFactor,\r\n        uint256 startTime,\r\n        uint256 feesToDistribute,\r\n        uint256 feesClaimed,\r\n        uint256 rewardsToDistribute,\r\n        uint256 rewardsClaimed\r\n    ) public onlyAdmin {\r\n        RewardPeriod storage toset = index == 0 ? curRewardPeriod : preRewardPeriod;\r\n        toset.id = id;\r\n        toset.startingDebtFactor = startingDebtFactor;\r\n        toset.startTime = startTime;\r\n        toset.feesToDistribute = feesToDistribute;\r\n        toset.feesClaimed = feesClaimed;\r\n        toset.rewardsToDistribute = rewardsToDistribute;\r\n        toset.rewardsClaimed = rewardsClaimed;\r\n    }\r\n\r\n    function setExchangeSystemAddress(address _address) public onlyAdmin {\r\n        exchangeSystemAddress = _address;\r\n    }\r\n\r\n    modifier onlyExchanger {\r\n        require((msg.sender == exchangeSystemAddress), \"Only Exchange System call\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyDistributer {\r\n        require((msg.sender == rewardDistributer), \"Only Reward Distributer call\");\r\n        _;\r\n    }\r\n\r\n    function addExchangeFee(uint feeUsd) public onlyExchanger {\r\n        curRewardPeriod.feesToDistribute = curRewardPeriod.feesToDistribute.add(feeUsd);\r\n        emit ExchangeFee(feeUsd);\r\n    }\r\n\r\n    // TODO: call by contract or auto distribute?\r\n    function addCollateralRewards(uint reward) public onlyDistributer {\r\n        curRewardPeriod.rewardsToDistribute = curRewardPeriod.rewardsToDistribute.add(reward);\r\n        emit RewardCollateral(reward);\r\n    }\r\n\r\n    event ExchangeFee(uint feeUsd);\r\n    event RewardCollateral(uint reward);\r\n    event FeesClaimed(address user, uint lUSDAmount, uint linaRewards);\r\n\r\n    function updateAddressCache(LnAddressStorage _addressStorage) public override onlyAdmin {\r\n        debtSystem = LnDebtSystem(_addressStorage.getAddressWithRequire(\"LnDebtSystem\", \"LnDebtSystem address not valid\"));\r\n        address payable collateralAddress =\r\n            payable(_addressStorage.getAddressWithRequire(\"LnCollateralSystem\", \"LnCollateralSystem address not valid\"));\r\n        collateralSystem = LnCollateralSystem(collateralAddress);\r\n        rewardLocker = LnRewardLocker(\r\n            _addressStorage.getAddressWithRequire(\"LnRewardLocker\", \"LnRewardLocker address not valid\")\r\n        );\r\n        mAssets = LnAssetSystem(_addressStorage.getAddressWithRequire(\"LnAssetSystem\", \"LnAssetSystem address not valid\"));\r\n\r\n        // as Init func. record LnExchangeSystem address\r\n        exchangeSystemAddress = _addressStorage.getAddressWithRequire(\r\n            \"LnExchangeSystem\",\r\n            \"LnExchangeSystem address not valid\"\r\n        );\r\n\r\n        emit CachedAddressUpdated(\"LnDebtSystem\", address(debtSystem));\r\n        emit CachedAddressUpdated(\"LnCollateralSystem\", address(collateralSystem));\r\n        emit CachedAddressUpdated(\"LnRewardLocker\", address(rewardLocker));\r\n        emit CachedAddressUpdated(\"LnAssetSystem\", address(mAssets));\r\n        emit CachedAddressUpdated(\"LnExchangeSystem\", address(exchangeSystemAddress));\r\n    }\r\n\r\n    function switchPeriod() public {\r\n        require(now >= curRewardPeriod.startTime + OnePeriodSecs, \"It's not time to switch\");\r\n\r\n        preRewardPeriod.id = curRewardPeriod.id;\r\n        preRewardPeriod.startingDebtFactor = curRewardPeriod.startingDebtFactor;\r\n        preRewardPeriod.startTime = curRewardPeriod.startTime;\r\n        preRewardPeriod.feesToDistribute = curRewardPeriod.feesToDistribute.add(\r\n            preRewardPeriod.feesToDistribute.sub(preRewardPeriod.feesClaimed)\r\n        );\r\n        preRewardPeriod.feesClaimed = 0;\r\n        preRewardPeriod.rewardsToDistribute = curRewardPeriod.rewardsToDistribute.add(\r\n            preRewardPeriod.rewardsToDistribute.sub(preRewardPeriod.rewardsClaimed)\r\n        );\r\n        preRewardPeriod.rewardsClaimed = 0;\r\n\r\n        curRewardPeriod.id = curRewardPeriod.id + 1;\r\n        curRewardPeriod.startingDebtFactor = debtSystem.LastSystemDebtFactor();\r\n        curRewardPeriod.startTime = now;\r\n        curRewardPeriod.feesToDistribute = 0;\r\n        curRewardPeriod.feesClaimed = 0;\r\n        curRewardPeriod.rewardsToDistribute = 0;\r\n        curRewardPeriod.rewardsClaimed = 0;\r\n    }\r\n\r\n    function feePeriodDuration() external view returns (uint) {\r\n        return OnePeriodSecs;\r\n    }\r\n\r\n    function recentFeePeriods(uint index)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 id,\r\n            uint256 startingDebtFactor,\r\n            uint256 startTime,\r\n            uint256 feesToDistribute,\r\n            uint256 feesClaimed,\r\n            uint256 rewardsToDistribute,\r\n            uint256 rewardsClaimed\r\n        )\r\n    {\r\n        if (index > 1) {\r\n            return (0, 0, 0, 0, 0, 0, 0);\r\n        }\r\n        RewardPeriod memory rewardPd;\r\n        if (index == 0) {\r\n            rewardPd = curRewardPeriod;\r\n        } else {\r\n            rewardPd = preRewardPeriod;\r\n        }\r\n        return (\r\n            rewardPd.id,\r\n            rewardPd.startingDebtFactor,\r\n            rewardPd.startTime,\r\n            rewardPd.feesToDistribute,\r\n            rewardPd.feesClaimed,\r\n            rewardPd.rewardsToDistribute,\r\n            rewardPd.rewardsClaimed\r\n        );\r\n    }\r\n\r\n    modifier onlyDebtSystem() {\r\n        require(msg.sender == address(debtSystem), \"Only Debt system call\");\r\n        _;\r\n    }\r\n\r\n    // build record\r\n    function RecordUserDebt(\r\n        address user,\r\n        uint256 debtProportion,\r\n        uint256 debtFactor\r\n    ) public onlyDebtSystem {\r\n        uint256 curId = curRewardPeriod.id;\r\n        uint256 minPos = 0;\r\n        if (userPeriodDebt[user][0].PeriodID > userPeriodDebt[user][1].PeriodID) {\r\n            minPos = 1;\r\n        }\r\n        uint256 pos = minPos;\r\n        for (uint64 i = 0; i < userPeriodDebt[user].length; i++) {\r\n            if (userPeriodDebt[user][i].PeriodID == curId) {\r\n                pos = i;\r\n                break;\r\n            }\r\n        }\r\n        userPeriodDebt[user][pos].PeriodID = curId;\r\n        userPeriodDebt[user][pos].debtProportion = debtProportion;\r\n        userPeriodDebt[user][pos].debtFactor = debtFactor;\r\n    }\r\n\r\n    function isFeesClaimable(address account) public view returns (bool feesClaimable) {\r\n        if (collateralSystem.IsSatisfyTargetRatio(account) == false) {\r\n            return false;\r\n        }\r\n\r\n        if (userLastClaimedId[account] == preRewardPeriod.id) {\r\n            return false;\r\n        }\r\n\r\n        // TODO: other condition?\r\n        return true;\r\n    }\r\n\r\n    // total fee and total reward\r\n    function feesAvailable(address user) public view returns (uint, uint) {\r\n        if (preRewardPeriod.feesToDistribute == 0 && preRewardPeriod.rewardsToDistribute == 0) {\r\n            return (0, 0);\r\n        }\r\n        uint256 debtFactor = 0;\r\n        uint256 debtProportion = 0;\r\n        uint256 pid = 0; //get last period factor\r\n        for (uint64 i = 0; i < userPeriodDebt[user].length; i++) {\r\n            if (userPeriodDebt[user][i].PeriodID < curRewardPeriod.id && userPeriodDebt[user][i].PeriodID > pid) {\r\n                pid = curRewardPeriod.id;\r\n                debtFactor = userPeriodDebt[user][i].debtFactor;\r\n                debtProportion = userPeriodDebt[user][i].debtProportion;\r\n            }\r\n        }\r\n        //\r\n        //if (debtProportion == 0) {\r\n        //    (debtProportion, debtFactor) = debtSystem.userDebtState(user);\r\n        //}\r\n\r\n        if (debtProportion == 0) {\r\n            return (0, 0);\r\n        }\r\n\r\n        uint256 lastPeriodDebtFactor = curRewardPeriod.startingDebtFactor;\r\n        uint256 userDebtProportion =\r\n            lastPeriodDebtFactor.divideDecimalRoundPrecise(debtFactor).multiplyDecimalRoundPrecise(debtProportion);\r\n\r\n        uint256 fee =\r\n            preRewardPeriod\r\n                .feesToDistribute\r\n                .decimalToPreciseDecimal()\r\n                .multiplyDecimalRoundPrecise(userDebtProportion)\r\n                .preciseDecimalToDecimal();\r\n\r\n        uint256 reward =\r\n            preRewardPeriod\r\n                .rewardsToDistribute\r\n                .decimalToPreciseDecimal()\r\n                .multiplyDecimalRoundPrecise(userDebtProportion)\r\n                .preciseDecimalToDecimal();\r\n        return (fee, reward);\r\n    }\r\n\r\n    // claim fee and reward.\r\n    function claimFees() external returns (bool) {\r\n        address user = msg.sender;\r\n        require(isFeesClaimable(user), \"User is not claimable\");\r\n\r\n        userLastClaimedId[user] = preRewardPeriod.id;\r\n        // fee reward: mint lusd\r\n        // : rewardLocker.appendReward(use, reward, now + 1 years);\r\n        (uint256 fee, uint256 reward) = feesAvailable(user);\r\n        require(fee > 0 || reward > 0, \"Nothing to claim\");\r\n\r\n        if (fee > 0) {\r\n            LnAssetUpgradeable lusd =\r\n                LnAssetUpgradeable(mAssets.getAddressWithRequire(\"lUSD\", \"get lUSD asset address fail\"));\r\n            lusd.burn(FEE_DUMMY_ADDRESS, fee);\r\n            lusd.mint(user, fee);\r\n        }\r\n\r\n        if (reward > 0) {\r\n            uint64 totime = uint64(now + LockTime);\r\n            rewardLocker.appendReward(user, reward, totime);\r\n        }\r\n        emit FeesClaimed(user, fee, reward);\r\n        return true;\r\n    }\r\n\r\n    // Reserved storage space to allow for layout changes in the future.\r\n    uint256[38] private __gap;\r\n}\r\n\r\ncontract LnFeeSystemTest is LnFeeSystem {\r\n    function __LnFeeSystemTest_init(address _admin) public initializer {\r\n        __LnFeeSystem_init(_admin);\r\n\r\n        OnePeriodSecs = 6 hours;\r\n        LockTime = 1 hours;\r\n    }\r\n}\r\n\r\ncontract LnDebtSystem is LnAdminUpgradeable, LnAddressCache {\r\n    using SafeMath for uint;\r\n    using SafeDecimalMath for uint;\r\n    using Address for address;\r\n\r\n    // -------------------------------------------------------\r\n    // need set before system running value.\r\n    LnAccessControl private accessCtrl;\r\n    LnAssetSystem private assetSys;\r\n    LnFeeSystem public feeSystem;\r\n    // -------------------------------------------------------\r\n    struct DebtData {\r\n        uint256 debtProportion;\r\n        uint256 debtFactor; // PRECISE_UNIT\r\n    }\r\n    mapping(address => DebtData) public userDebtState;\r\n\r\n    //use mapping to store array data\r\n    mapping(uint256 => uint256) public lastDebtFactors; // PRECISE_UNIT Note: 能直接记 factor 的记 factor, 不能记的就用index查\r\n    uint256 public debtCurrentIndex; // length of array. this index of array no value\r\n    // follow var use to manage array size.\r\n    uint256 public lastCloseAt; // close at array index\r\n    uint256 public lastDeletTo; // delete to array index, lastDeletTo < lastCloseAt\r\n    uint256 public constant MAX_DEL_PER_TIME = 50;\r\n\r\n    //\r\n\r\n    // -------------------------------------------------------\r\n    function __LnDebtSystem_init(address _admin) public initializer {\r\n        __LnAdminUpgradeable_init(_admin);\r\n    }\r\n\r\n    event UpdateAddressStorage(address oldAddr, address newAddr);\r\n    event UpdateUserDebtLog(address addr, uint256 debtProportion, uint256 debtFactor);\r\n    event PushDebtLog(uint256 index, uint256 newFactor);\r\n\r\n    // ------------------ system config ----------------------\r\n    function updateAddressCache(LnAddressStorage _addressStorage) public override onlyAdmin {\r\n        accessCtrl = LnAccessControl(\r\n            _addressStorage.getAddressWithRequire(\"LnAccessControl\", \"LnAccessControl address not valid\")\r\n        );\r\n        assetSys = LnAssetSystem(_addressStorage.getAddressWithRequire(\"LnAssetSystem\", \"LnAssetSystem address not valid\"));\r\n        feeSystem = LnFeeSystem(_addressStorage.getAddressWithRequire(\"LnFeeSystem\", \"LnFeeSystem address not valid\"));\r\n\r\n        emit CachedAddressUpdated(\"LnAccessControl\", address(accessCtrl));\r\n        emit CachedAddressUpdated(\"LnAssetSystem\", address(assetSys));\r\n        emit CachedAddressUpdated(\"LnFeeSystem\", address(feeSystem));\r\n    }\r\n\r\n    // -----------------------------------------------\r\n    modifier OnlyDebtSystemRole(address _address) {\r\n        require(accessCtrl.hasRole(accessCtrl.DEBT_SYSTEM(), _address), \"Need debt system access role\");\r\n        _;\r\n    }\r\n\r\n    function SetLastCloseFeePeriodAt(uint256 index) external OnlyDebtSystemRole(msg.sender) {\r\n        require(index >= lastCloseAt, \"Close index can not return to pass\");\r\n        require(index <= debtCurrentIndex, \"Can not close at future index\");\r\n        lastCloseAt = index;\r\n    }\r\n\r\n    function _pushDebtFactor(uint256 _factor) private {\r\n        if (debtCurrentIndex == 0 || lastDebtFactors[debtCurrentIndex - 1] == 0) {\r\n            // init or all debt has be cleared, new set value will be one unit\r\n            lastDebtFactors[debtCurrentIndex] = SafeDecimalMath.preciseUnit();\r\n        } else {\r\n            lastDebtFactors[debtCurrentIndex] = lastDebtFactors[debtCurrentIndex - 1].multiplyDecimalRoundPrecise(_factor);\r\n        }\r\n        emit PushDebtLog(debtCurrentIndex, lastDebtFactors[debtCurrentIndex]);\r\n\r\n        debtCurrentIndex = debtCurrentIndex.add(1);\r\n\r\n        // delete out of date data\r\n        if (lastDeletTo < lastCloseAt) {\r\n            // safe check\r\n            uint256 delNum = lastCloseAt - lastDeletTo;\r\n            delNum = (delNum > MAX_DEL_PER_TIME) ? MAX_DEL_PER_TIME : delNum; // not delete all in one call, for saving someone fee.\r\n            for (uint256 i = lastDeletTo; i < delNum; i++) {\r\n                delete lastDebtFactors[i];\r\n            }\r\n            lastDeletTo = lastDeletTo.add(delNum);\r\n        }\r\n    }\r\n\r\n    function PushDebtFactor(uint256 _factor) external OnlyDebtSystemRole(msg.sender) {\r\n        _pushDebtFactor(_factor);\r\n    }\r\n\r\n    function _updateUserDebt(address _user, uint256 _debtProportion) private {\r\n        userDebtState[_user].debtProportion = _debtProportion;\r\n        userDebtState[_user].debtFactor = _lastSystemDebtFactor();\r\n        emit UpdateUserDebtLog(_user, _debtProportion, userDebtState[_user].debtFactor);\r\n\r\n        feeSystem.RecordUserDebt(_user, userDebtState[_user].debtProportion, userDebtState[_user].debtFactor);\r\n    }\r\n\r\n    // need update lastDebtFactors first\r\n    function UpdateUserDebt(address _user, uint256 _debtProportion) external OnlyDebtSystemRole(msg.sender) {\r\n        _updateUserDebt(_user, _debtProportion);\r\n    }\r\n\r\n    function UpdateDebt(\r\n        address _user,\r\n        uint256 _debtProportion,\r\n        uint256 _factor\r\n    ) external OnlyDebtSystemRole(msg.sender) {\r\n        _pushDebtFactor(_factor);\r\n        _updateUserDebt(_user, _debtProportion);\r\n    }\r\n\r\n    function GetUserDebtData(address _user) external view returns (uint256 debtProportion, uint256 debtFactor) {\r\n        debtProportion = userDebtState[_user].debtProportion;\r\n        debtFactor = userDebtState[_user].debtFactor;\r\n    }\r\n\r\n    function _lastSystemDebtFactor() private view returns (uint256) {\r\n        if (debtCurrentIndex == 0) {\r\n            return SafeDecimalMath.preciseUnit();\r\n        }\r\n        return lastDebtFactors[debtCurrentIndex - 1];\r\n    }\r\n\r\n    function LastSystemDebtFactor() external view returns (uint256) {\r\n        return _lastSystemDebtFactor();\r\n    }\r\n\r\n    function GetUserCurrentDebtProportion(address _user) public view returns (uint256) {\r\n        uint256 debtProportion = userDebtState[_user].debtProportion;\r\n        uint256 debtFactor = userDebtState[_user].debtFactor;\r\n\r\n        if (debtProportion == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 currentUserDebtProportion =\r\n            _lastSystemDebtFactor().divideDecimalRoundPrecise(debtFactor).multiplyDecimalRoundPrecise(debtProportion);\r\n        return currentUserDebtProportion;\r\n    }\r\n\r\n    /**\r\n     *\r\n     *@return [0] the debt balance of user. [1] system total asset in usd.\r\n     */\r\n    function GetUserDebtBalanceInUsd(address _user) external view returns (uint256, uint256) {\r\n        uint256 totalAssetSupplyInUsd = assetSys.totalAssetsInUsd();\r\n\r\n        uint256 debtProportion = userDebtState[_user].debtProportion;\r\n        uint256 debtFactor = userDebtState[_user].debtFactor;\r\n\r\n        if (debtProportion == 0) {\r\n            return (0, totalAssetSupplyInUsd);\r\n        }\r\n\r\n        uint256 currentUserDebtProportion =\r\n            _lastSystemDebtFactor().divideDecimalRoundPrecise(debtFactor).multiplyDecimalRoundPrecise(debtProportion);\r\n        uint256 userDebtBalance =\r\n            totalAssetSupplyInUsd\r\n                .decimalToPreciseDecimal()\r\n                .multiplyDecimalRoundPrecise(currentUserDebtProportion)\r\n                .preciseDecimalToDecimal();\r\n\r\n        return (userDebtBalance, totalAssetSupplyInUsd);\r\n    }\r\n\r\n    // Reserved storage space to allow for layout changes in the future.\r\n    uint256[42] private __gap;\r\n}\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() internal {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n// 根据 LnCollateralSystem 的抵押资产计算相关抵押率，buildable lusd\r\ncontract LnBuildBurnSystem is LnAdmin, Pausable, LnAddressCache {\r\n    using SafeMath for uint;\r\n    using SafeDecimalMath for uint;\r\n    using Address for address;\r\n\r\n    // -------------------------------------------------------\r\n    // need set before system running value.\r\n    LnAssetUpgradeable private lUSDToken; // this contract need\r\n\r\n    LnDebtSystem private debtSystem;\r\n    LnAssetSystem private assetSys;\r\n    LnPrices private priceGetter;\r\n    LnCollateralSystem private collaterSys;\r\n    LnConfig private mConfig;\r\n\r\n    // -------------------------------------------------------\r\n    constructor(address admin, address _lUSDTokenAddr) public LnAdmin(admin) {\r\n        lUSDToken = LnAssetUpgradeable(_lUSDTokenAddr);\r\n    }\r\n\r\n    function setPaused(bool _paused) external onlyAdmin {\r\n        if (_paused) {\r\n            _pause();\r\n        } else {\r\n            _unpause();\r\n        }\r\n    }\r\n\r\n    function updateAddressCache(LnAddressStorage _addressStorage) public override onlyAdmin {\r\n        priceGetter = LnPrices(_addressStorage.getAddressWithRequire(\"LnPrices\", \"LnPrices address not valid\"));\r\n        debtSystem = LnDebtSystem(_addressStorage.getAddressWithRequire(\"LnDebtSystem\", \"LnDebtSystem address not valid\"));\r\n        assetSys = LnAssetSystem(_addressStorage.getAddressWithRequire(\"LnAssetSystem\", \"LnAssetSystem address not valid\"));\r\n        address payable collateralAddress =\r\n            payable(_addressStorage.getAddressWithRequire(\"LnCollateralSystem\", \"LnCollateralSystem address not valid\"));\r\n        collaterSys = LnCollateralSystem(collateralAddress);\r\n        mConfig = LnConfig(_addressStorage.getAddressWithRequire(\"LnConfig\", \"LnConfig address not valid\"));\r\n\r\n        emit CachedAddressUpdated(\"LnPrices\", address(priceGetter));\r\n        emit CachedAddressUpdated(\"LnDebtSystem\", address(debtSystem));\r\n        emit CachedAddressUpdated(\"LnAssetSystem\", address(assetSys));\r\n        emit CachedAddressUpdated(\"LnCollateralSystem\", address(collaterSys));\r\n        emit CachedAddressUpdated(\"LnConfig\", address(mConfig));\r\n    }\r\n\r\n    function SetLusdTokenAddress(address _address) public onlyAdmin {\r\n        emit UpdateLusdToken(address(lUSDToken), _address);\r\n        lUSDToken = LnAssetUpgradeable(_address);\r\n    }\r\n\r\n    event UpdateLusdToken(address oldAddr, address newAddr);\r\n\r\n    function MaxCanBuildAsset(address user) public view returns (uint256) {\r\n        uint256 buildRatio = mConfig.getUint(mConfig.BUILD_RATIO());\r\n        uint256 maxCanBuild = collaterSys.MaxRedeemableInUsd(user).mul(buildRatio).div(SafeDecimalMath.unit());\r\n        return maxCanBuild;\r\n    }\r\n\r\n    // build lusd\r\n    function BuildAsset(uint256 amount) public whenNotPaused returns (bool) {\r\n        address user = msg.sender;\r\n        uint256 buildRatio = mConfig.getUint(mConfig.BUILD_RATIO());\r\n        uint256 maxCanBuild = collaterSys.MaxRedeemableInUsd(user).multiplyDecimal(buildRatio);\r\n        require(amount <= maxCanBuild, \"Build amount too big, you need more collateral\");\r\n\r\n        // calc debt\r\n        (uint256 oldUserDebtBalance, uint256 totalAssetSupplyInUsd) = debtSystem.GetUserDebtBalanceInUsd(user);\r\n\r\n        uint256 newTotalAssetSupply = totalAssetSupplyInUsd.add(amount);\r\n        // update debt data\r\n        uint256 buildDebtProportion = amount.divideDecimalRoundPrecise(newTotalAssetSupply); // debtPercentage\r\n        uint oldTotalProportion = SafeDecimalMath.preciseUnit().sub(buildDebtProportion); //\r\n\r\n        uint256 newUserDebtProportion = buildDebtProportion;\r\n        if (oldUserDebtBalance > 0) {\r\n            newUserDebtProportion = oldUserDebtBalance.add(amount).divideDecimalRoundPrecise(newTotalAssetSupply);\r\n        }\r\n\r\n        // update debt\r\n        debtSystem.UpdateDebt(user, newUserDebtProportion, oldTotalProportion);\r\n\r\n        // mint asset\r\n        lUSDToken.mint(user, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function BuildMaxAsset() external whenNotPaused {\r\n        address user = msg.sender;\r\n        uint256 max = MaxCanBuildAsset(user);\r\n        BuildAsset(max);\r\n    }\r\n\r\n    function _burnAsset(address user, uint256 amount) internal {\r\n        //uint256 buildRatio = mConfig.getUint(mConfig.BUILD_RATIO());\r\n        require(amount > 0, \"amount need > 0\");\r\n        // calc debt\r\n        (uint256 oldUserDebtBalance, uint256 totalAssetSupplyInUsd) = debtSystem.GetUserDebtBalanceInUsd(user);\r\n        require(oldUserDebtBalance > 0, \"no debt, no burn\");\r\n        uint256 burnAmount = oldUserDebtBalance < amount ? oldUserDebtBalance : amount;\r\n        // burn asset\r\n        lUSDToken.burn(user, burnAmount);\r\n\r\n        uint newTotalDebtIssued = totalAssetSupplyInUsd.sub(burnAmount);\r\n\r\n        uint oldTotalProportion = 0;\r\n        if (newTotalDebtIssued > 0) {\r\n            uint debtPercentage = burnAmount.divideDecimalRoundPrecise(newTotalDebtIssued);\r\n            oldTotalProportion = SafeDecimalMath.preciseUnit().add(debtPercentage);\r\n        }\r\n\r\n        uint256 newUserDebtProportion = 0;\r\n        if (oldUserDebtBalance > burnAmount) {\r\n            uint newDebt = oldUserDebtBalance.sub(burnAmount);\r\n            newUserDebtProportion = newDebt.divideDecimalRoundPrecise(newTotalDebtIssued);\r\n        }\r\n\r\n        // update debt\r\n        debtSystem.UpdateDebt(user, newUserDebtProportion, oldTotalProportion);\r\n    }\r\n\r\n    // burn\r\n    function BurnAsset(uint256 amount) external whenNotPaused returns (bool) {\r\n        address user = msg.sender;\r\n        _burnAsset(user, amount);\r\n        return true;\r\n    }\r\n\r\n    //所有\r\n    // function MaxAssetToTarget(address user) external view returns(uint256) {\r\n    //     uint256 buildRatio = mConfig.getUint(mConfig.BUILD_RATIO());\r\n    //     uint256 totalCollateral = collaterSys.GetUserTotalCollateralInUsd(user);\r\n    // }\r\n\r\n    // burn to target ratio\r\n    function BurnAssetToTarget() external whenNotPaused returns (bool) {\r\n        address user = msg.sender;\r\n\r\n        uint256 buildRatio = mConfig.getUint(mConfig.BUILD_RATIO());\r\n        uint256 totalCollateral = collaterSys.GetUserTotalCollateralInUsd(user);\r\n        uint256 maxBuildAssetToTarget = totalCollateral.multiplyDecimal(buildRatio);\r\n        (uint256 debtAsset, ) = debtSystem.GetUserDebtBalanceInUsd(user);\r\n        require(debtAsset > maxBuildAssetToTarget, \"You maybe want build to target\");\r\n\r\n        uint256 needBurn = debtAsset.sub(maxBuildAssetToTarget);\r\n        uint balance = lUSDToken.balanceOf(user); // burn as many as possible\r\n        if (balance < needBurn) {\r\n            needBurn = balance;\r\n        }\r\n        _burnAsset(user, needBurn);\r\n        return true;\r\n    }\r\n}\r\n\r\n// 单纯抵押进来\r\n// 赎回时需要 债务率良好才能赎回， 赎回部分能保持债务率高于目标债务率\r\ncontract LnCollateralSystem is LnAdminUpgradeable, PausableUpgradeable, LnAddressCache {\r\n    using SafeMath for uint;\r\n    using SafeDecimalMath for uint;\r\n    using AddressUpgradeable for address;\r\n\r\n    // -------------------------------------------------------\r\n    // need set before system running value.\r\n    LnPrices public priceGetter;\r\n    LnDebtSystem public debtSystem;\r\n    LnBuildBurnSystem public buildBurnSystem;\r\n    LnConfig public mConfig;\r\n    LnRewardLocker public mRewardLocker;\r\n\r\n    bytes32 public constant Currency_ETH = \"ETH\";\r\n    bytes32 public constant Currency_LINA = \"LINA\";\r\n\r\n    // -------------------------------------------------------\r\n    uint256 public uniqueId; // use log\r\n\r\n    struct TokenInfo {\r\n        address tokenAddr;\r\n        uint256 minCollateral; // min collateral amount.\r\n        uint256 totalCollateral;\r\n        bool bClose; // TODO : 为了防止价格波动，另外再加个折扣价?\r\n    }\r\n\r\n    mapping(bytes32 => TokenInfo) public tokenInfos;\r\n    bytes32[] public tokenSymbol; // keys of tokenInfos, use to iteration\r\n\r\n    struct CollateralData {\r\n        uint256 collateral; // total collateral\r\n    }\r\n\r\n    // [user] => ([token=> collateraldata])\r\n    mapping(address => mapping(bytes32 => CollateralData)) public userCollateralData;\r\n\r\n    // -------------------------------------------------------\r\n    function __LnCollateralSystem_init(address _admin) public initializer {\r\n        __LnAdminUpgradeable_init(_admin);\r\n    }\r\n\r\n    function setPaused(bool _paused) external onlyAdmin {\r\n        if (_paused) {\r\n            _pause();\r\n        } else {\r\n            _unpause();\r\n        }\r\n    }\r\n\r\n    // ------------------ system config ----------------------\r\n    function updateAddressCache(LnAddressStorage _addressStorage) public override onlyAdmin {\r\n        priceGetter = LnPrices(_addressStorage.getAddressWithRequire(\"LnPrices\", \"LnPrices address not valid\"));\r\n        debtSystem = LnDebtSystem(_addressStorage.getAddressWithRequire(\"LnDebtSystem\", \"LnDebtSystem address not valid\"));\r\n        buildBurnSystem = LnBuildBurnSystem(\r\n            _addressStorage.getAddressWithRequire(\"LnBuildBurnSystem\", \"LnBuildBurnSystem address not valid\")\r\n        );\r\n        mConfig = LnConfig(_addressStorage.getAddressWithRequire(\"LnConfig\", \"LnConfig address not valid\"));\r\n        mRewardLocker = LnRewardLocker(\r\n            _addressStorage.getAddressWithRequire(\"LnRewardLocker\", \"LnRewardLocker address not valid\")\r\n        );\r\n\r\n        emit CachedAddressUpdated(\"LnPrices\", address(priceGetter));\r\n        emit CachedAddressUpdated(\"LnDebtSystem\", address(debtSystem));\r\n        emit CachedAddressUpdated(\"LnBuildBurnSystem\", address(buildBurnSystem));\r\n        emit CachedAddressUpdated(\"LnConfig\", address(mConfig));\r\n        emit CachedAddressUpdated(\"LnRewardLocker\", address(mRewardLocker));\r\n    }\r\n\r\n    function updateTokenInfo(\r\n        bytes32 _currency,\r\n        address _tokenAddr,\r\n        uint256 _minCollateral,\r\n        bool _close\r\n    ) private returns (bool) {\r\n        require(_currency[0] != 0, \"symbol cannot empty\");\r\n        require(_currency != Currency_ETH, \"ETH is used by system\");\r\n        require(_tokenAddr != address(0), \"token address cannot zero\");\r\n        require(_tokenAddr.isContract(), \"token address is not a contract\");\r\n\r\n        if (tokenInfos[_currency].tokenAddr == address(0)) {\r\n            // new token\r\n            tokenSymbol.push(_currency);\r\n        }\r\n\r\n        uint256 totalCollateral = tokenInfos[_currency].totalCollateral;\r\n        tokenInfos[_currency] = TokenInfo({\r\n            tokenAddr: _tokenAddr,\r\n            minCollateral: _minCollateral,\r\n            totalCollateral: totalCollateral,\r\n            bClose: _close\r\n        });\r\n        emit UpdateTokenSetting(_currency, _tokenAddr, _minCollateral, _close);\r\n        return true;\r\n    }\r\n\r\n    // delete token info? need to handle it's staking data.\r\n\r\n    function UpdateTokenInfo(\r\n        bytes32 _currency,\r\n        address _tokenAddr,\r\n        uint256 _minCollateral,\r\n        bool _close\r\n    ) external onlyAdmin returns (bool) {\r\n        return updateTokenInfo(_currency, _tokenAddr, _minCollateral, _close);\r\n    }\r\n\r\n    function UpdateTokenInfos(\r\n        bytes32[] calldata _symbols,\r\n        address[] calldata _tokenAddrs,\r\n        uint256[] calldata _minCollateral,\r\n        bool[] calldata _closes\r\n    ) external onlyAdmin returns (bool) {\r\n        require(_symbols.length == _tokenAddrs.length, \"length of array not eq\");\r\n        require(_symbols.length == _minCollateral.length, \"length of array not eq\");\r\n        require(_symbols.length == _closes.length, \"length of array not eq\");\r\n\r\n        for (uint256 i = 0; i < _symbols.length; i++) {\r\n            updateTokenInfo(_symbols[i], _tokenAddrs[i], _minCollateral[i], _closes[i]);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    function GetSystemTotalCollateralInUsd() public view returns (uint256 rTotal) {\r\n        for (uint256 i = 0; i < tokenSymbol.length; i++) {\r\n            bytes32 currency = tokenSymbol[i];\r\n            if (tokenInfos[currency].totalCollateral > 0) {\r\n                // this check for avoid calling getPrice when collateral is zero\r\n                if (Currency_LINA == currency) {\r\n                    uint256 totallina = tokenInfos[currency].totalCollateral.add(mRewardLocker.totalNeedToReward());\r\n                    rTotal = rTotal.add(totallina.multiplyDecimal(priceGetter.getPrice(currency)));\r\n                } else {\r\n                    rTotal = rTotal.add(\r\n                        tokenInfos[currency].totalCollateral.multiplyDecimal(priceGetter.getPrice(currency))\r\n                    );\r\n                }\r\n            }\r\n        }\r\n\r\n        if (address(this).balance > 0) {\r\n            rTotal = rTotal.add(address(this).balance.multiplyDecimal(priceGetter.getPrice(Currency_ETH)));\r\n        }\r\n    }\r\n\r\n    function GetUserTotalCollateralInUsd(address _user) public view returns (uint256 rTotal) {\r\n        for (uint256 i = 0; i < tokenSymbol.length; i++) {\r\n            bytes32 currency = tokenSymbol[i];\r\n            if (userCollateralData[_user][currency].collateral > 0) {\r\n                if (Currency_LINA == currency) {\r\n                    uint256 totallina = userCollateralData[_user][currency].collateral.add(mRewardLocker.balanceOf(_user));\r\n                    rTotal = rTotal.add(totallina.multiplyDecimal(priceGetter.getPrice(currency)));\r\n                } else {\r\n                    rTotal = rTotal.add(\r\n                        userCollateralData[_user][currency].collateral.multiplyDecimal(priceGetter.getPrice(currency))\r\n                    );\r\n                }\r\n            }\r\n        }\r\n\r\n        if (userCollateralData[_user][Currency_ETH].collateral > 0) {\r\n            rTotal = rTotal.add(\r\n                userCollateralData[_user][Currency_ETH].collateral.multiplyDecimal(priceGetter.getPrice(Currency_ETH))\r\n            );\r\n        }\r\n    }\r\n\r\n    function GetUserCollateral(address _user, bytes32 _currency) external view returns (uint256) {\r\n        if (Currency_LINA != _currency) {\r\n            return userCollateralData[_user][_currency].collateral;\r\n        }\r\n        return mRewardLocker.balanceOf(_user).add(userCollateralData[_user][_currency].collateral);\r\n    }\r\n\r\n    // NOTE: LINA collateral not include reward in locker\r\n    function GetUserCollaterals(address _user) external view returns (bytes32[] memory, uint256[] memory) {\r\n        bytes32[] memory rCurrency = new bytes32[](tokenSymbol.length + 1);\r\n        uint256[] memory rAmount = new uint256[](tokenSymbol.length + 1);\r\n        uint256 retSize = 0;\r\n        for (uint256 i = 0; i < tokenSymbol.length; i++) {\r\n            bytes32 currency = tokenSymbol[i];\r\n            if (userCollateralData[_user][currency].collateral > 0) {\r\n                rCurrency[retSize] = currency;\r\n                rAmount[retSize] = userCollateralData[_user][currency].collateral;\r\n                retSize++;\r\n            }\r\n        }\r\n        if (userCollateralData[_user][Currency_ETH].collateral > 0) {\r\n            rCurrency[retSize] = Currency_ETH;\r\n            rAmount[retSize] = userCollateralData[_user][Currency_ETH].collateral;\r\n            retSize++;\r\n        }\r\n\r\n        return (rCurrency, rAmount);\r\n    }\r\n\r\n    // need approve\r\n    function Collateral(bytes32 _currency, uint256 _amount) external whenNotPaused returns (bool) {\r\n        require(tokenInfos[_currency].tokenAddr.isContract(), \"Invalid token symbol\");\r\n        TokenInfo storage tokeninfo = tokenInfos[_currency];\r\n        require(_amount > tokeninfo.minCollateral, \"Collateral amount too small\");\r\n        require(tokeninfo.bClose == false, \"This token is closed\");\r\n\r\n        address user = msg.sender;\r\n\r\n        IERC20 erc20 = IERC20(tokenInfos[_currency].tokenAddr);\r\n        require(erc20.balanceOf(user) >= _amount, \"insufficient balance\");\r\n        require(erc20.allowance(user, address(this)) >= _amount, \"insufficient allowance, need approve more amount\");\r\n\r\n        erc20.transferFrom(user, address(this), _amount);\r\n\r\n        userCollateralData[user][_currency].collateral = userCollateralData[user][_currency].collateral.add(_amount);\r\n        tokeninfo.totalCollateral = tokeninfo.totalCollateral.add(_amount);\r\n\r\n        emit CollateralLog(user, _currency, _amount, userCollateralData[user][_currency].collateral);\r\n        return true;\r\n    }\r\n\r\n    function IsSatisfyTargetRatio(address _user) public view returns (bool) {\r\n        (uint256 debtBalance, ) = debtSystem.GetUserDebtBalanceInUsd(_user);\r\n        if (debtBalance == 0) {\r\n            return true;\r\n        }\r\n\r\n        uint256 buildRatio = mConfig.getUint(mConfig.BUILD_RATIO());\r\n        uint256 totalCollateralInUsd = GetUserTotalCollateralInUsd(_user);\r\n        if (totalCollateralInUsd == 0) {\r\n            return false;\r\n        }\r\n        uint256 myratio = debtBalance.divideDecimal(totalCollateralInUsd);\r\n        return myratio <= buildRatio;\r\n    }\r\n\r\n    // 满足最低抵押率的情况下可最大赎回的资产 TODO: return multi value\r\n    function MaxRedeemableInUsd(address _user) public view returns (uint256) {\r\n        uint256 totalCollateralInUsd = GetUserTotalCollateralInUsd(_user);\r\n\r\n        (uint256 debtBalance, ) = debtSystem.GetUserDebtBalanceInUsd(_user);\r\n        if (debtBalance == 0) {\r\n            return totalCollateralInUsd;\r\n        }\r\n\r\n        uint256 buildRatio = mConfig.getUint(mConfig.BUILD_RATIO());\r\n        uint256 minCollateral = debtBalance.divideDecimal(buildRatio);\r\n        if (totalCollateralInUsd < minCollateral) {\r\n            return 0;\r\n        }\r\n\r\n        return totalCollateralInUsd.sub(minCollateral);\r\n    }\r\n\r\n    function MaxRedeemable(address user, bytes32 _currency) public view returns (uint256) {\r\n        uint256 maxRedeemableInUsd = MaxRedeemableInUsd(user);\r\n        uint256 maxRedeem = maxRedeemableInUsd.divideDecimal(priceGetter.getPrice(_currency));\r\n        if (maxRedeem > userCollateralData[user][_currency].collateral) {\r\n            maxRedeem = userCollateralData[user][_currency].collateral;\r\n        }\r\n        if (Currency_LINA != _currency) {\r\n            return maxRedeem;\r\n        }\r\n        uint256 lockedLina = mRewardLocker.balanceOf(user);\r\n        if (maxRedeem <= lockedLina) {\r\n            return 0;\r\n        }\r\n        return maxRedeem.sub(lockedLina);\r\n    }\r\n\r\n    function RedeemMax(bytes32 _currency) external whenNotPaused {\r\n        address user = msg.sender;\r\n        uint256 maxRedeem = MaxRedeemable(user, _currency);\r\n        _Redeem(user, _currency, maxRedeem);\r\n    }\r\n\r\n    function _Redeem(\r\n        address user,\r\n        bytes32 _currency,\r\n        uint256 _amount\r\n    ) internal {\r\n        require(_amount <= userCollateralData[user][_currency].collateral, \"Can not redeem more than collateral\");\r\n        require(_amount > 0, \"Redeem amount need larger than zero\");\r\n\r\n        uint256 maxRedeemableInUsd = MaxRedeemableInUsd(user);\r\n        uint256 maxRedeem = maxRedeemableInUsd.divideDecimal(priceGetter.getPrice(_currency));\r\n        require(_amount <= maxRedeem, \"Because lower collateral ratio, can not redeem too much\");\r\n\r\n        userCollateralData[user][_currency].collateral = userCollateralData[user][_currency].collateral.sub(_amount);\r\n\r\n        TokenInfo storage tokeninfo = tokenInfos[_currency];\r\n        tokeninfo.totalCollateral = tokeninfo.totalCollateral.sub(_amount);\r\n\r\n        IERC20(tokenInfos[_currency].tokenAddr).transfer(user, _amount);\r\n\r\n        emit RedeemCollateral(user, _currency, _amount, userCollateralData[user][_currency].collateral);\r\n    }\r\n\r\n    // 1. After redeem, collateral ratio need bigger than target ratio.\r\n    // 2. Cannot redeem more than collateral.\r\n    function Redeem(bytes32 _currency, uint256 _amount) public whenNotPaused returns (bool) {\r\n        address user = msg.sender;\r\n        _Redeem(user, _currency, _amount);\r\n        return true;\r\n    }\r\n\r\n    receive() external payable whenNotPaused {\r\n        address user = msg.sender;\r\n        uint256 ethAmount = msg.value;\r\n        _CollateralEth(user, ethAmount);\r\n    }\r\n\r\n    function _CollateralEth(address user, uint256 ethAmount) internal {\r\n        require(ethAmount > 0, \"ETH amount need more than zero\");\r\n\r\n        userCollateralData[user][Currency_ETH].collateral = userCollateralData[user][Currency_ETH].collateral.add(ethAmount);\r\n\r\n        emit CollateralLog(user, Currency_ETH, ethAmount, userCollateralData[user][Currency_ETH].collateral);\r\n    }\r\n\r\n    // payable eth receive,\r\n    function CollateralEth() external payable whenNotPaused returns (bool) {\r\n        address user = msg.sender;\r\n        uint256 ethAmount = msg.value;\r\n        _CollateralEth(user, ethAmount);\r\n        return true;\r\n    }\r\n\r\n    function RedeemETH(uint256 _amount) external whenNotPaused returns (bool) {\r\n        address payable user = msg.sender;\r\n        require(_amount <= userCollateralData[user][Currency_ETH].collateral, \"Can not redeem more than collateral\");\r\n        require(_amount > 0, \"Redeem amount need larger than zero\");\r\n\r\n        uint256 maxRedeemableInUsd = MaxRedeemableInUsd(user);\r\n\r\n        uint256 maxRedeem = maxRedeemableInUsd.divideDecimal(priceGetter.getPrice(Currency_ETH));\r\n        require(_amount <= maxRedeem, \"Because lower collateral ratio, can not redeem too much\");\r\n\r\n        userCollateralData[user][Currency_ETH].collateral = userCollateralData[user][Currency_ETH].collateral.sub(_amount);\r\n        user.transfer(_amount);\r\n\r\n        emit RedeemCollateral(user, Currency_ETH, _amount, userCollateralData[user][Currency_ETH].collateral);\r\n        return true;\r\n    }\r\n\r\n    event UpdateTokenSetting(bytes32 symbol, address tokenAddr, uint256 minCollateral, bool close);\r\n    event CollateralLog(address user, bytes32 _currency, uint256 _amount, uint256 _userTotal);\r\n    event RedeemCollateral(address user, bytes32 _currency, uint256 _amount, uint256 _userTotal);\r\n\r\n    // Reserved storage space to allow for layout changes in the future.\r\n    uint256[41] private __gap;\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"CachedAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldCandidate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newCandidate\",\"type\":\"address\"}],\"name\":\"CandidateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_currency\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_userTotal\",\"type\":\"uint256\"}],\"name\":\"CollateralLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_currency\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_userTotal\",\"type\":\"uint256\"}],\"name\":\"RedeemCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"symbol\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minCollateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"close\",\"type\":\"bool\"}],\"name\":\"UpdateTokenSetting\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_currency\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Collateral\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CollateralEth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Currency_ETH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Currency_LINA\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GetSystemTotalCollateralInUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rTotal\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_currency\",\"type\":\"bytes32\"}],\"name\":\"GetUserCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"GetUserCollaterals\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"GetUserTotalCollateralInUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rTotal\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"IsSatisfyTargetRatio\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_currency\",\"type\":\"bytes32\"}],\"name\":\"MaxRedeemable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"MaxRedeemableInUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_currency\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"RedeemETH\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_currency\",\"type\":\"bytes32\"}],\"name\":\"RedeemMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_currency\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minCollateral\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_close\",\"type\":\"bool\"}],\"name\":\"UpdateTokenInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_symbols\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"_tokenAddrs\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_minCollateral\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"_closes\",\"type\":\"bool[]\"}],\"name\":\"UpdateTokenInfos\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"__LnAdminUpgradeable_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"__LnCollateralSystem_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"becomeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buildBurnSystem\",\"outputs\":[{\"internalType\":\"contract LnBuildBurnSystem\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"candidate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtSystem\",\"outputs\":[{\"internalType\":\"contract LnDebtSystem\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mConfig\",\"outputs\":[{\"internalType\":\"contract LnConfig\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mRewardLocker\",\"outputs\":[{\"internalType\":\"contract LnRewardLocker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceGetter\",\"outputs\":[{\"internalType\":\"contract LnPrices\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"setCandidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"tokenInfos\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCollateral\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"bClose\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenSymbol\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniqueId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract LnAddressStorage\",\"name\":\"_addressStorage\",\"type\":\"address\"}],\"name\":\"updateAddressCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"userCollateralData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"LnCollateralSystem","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"","EVMVersion":"istanbul","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://cb87a41256026979c5703a64de8bbfd70c443999b59f90f0698f81ee37eba3c4"}]}