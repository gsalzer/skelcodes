{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.6.0 <0.8.0;\r\n  \r\n// SPDX-License-Identifier: MIT\r\n// @title ERC20 Token\r\n// @created_by  Avalon Blockchain Consulting\r\n\r\n/**\r\n * \r\n * @dev Operations with Overflow chechs.\r\n * \r\n **/\r\nlibrary Math { \r\n    \r\n    /**\r\n     * \r\n     * @dev Returnthe subtraction of two integers, reverting with message on overflow\r\n     * \r\n     **/\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      require(b <= a, \"Subtraction overflow\");\r\n      return a - b;\r\n    }\r\n    \r\n    /**\r\n     * \r\n     * @dev Return the addition of two integers, reverting with message on overflow\r\n     * \r\n     **/\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      uint256 c = a + b;\r\n      require(c >= a, \"Addition overflow\");\r\n      return c;\r\n    }\r\n    \r\n    /**\r\n     * \r\n     * @dev Return the multiplication of two two integers, reverting with message on overflow\r\n     * \r\n     **/\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"Multiplication overflow\");\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * \r\n * @dev Contract that guarantees exclusive access to specific functions for the owner\r\n * \r\n * */\r\nabstract contract Ownable {\r\n    address private _owner;\r\n    address private _newOwner;\r\n    \r\n    event OwnerShipTransferred(address indexed oldOwner, address indexed newOwner);\r\n    \r\n    /**\r\n     * \r\n     * @dev Setting the deployer as the initial owner.\r\n     * \r\n     */\r\n     \r\n    constructor() {\r\n        _owner = msg.sender;\r\n        _newOwner = msg.sender;\r\n        emit OwnerShipTransferred(address(0), _owner);\r\n    }\r\n    \r\n     /**\r\n     * \r\n     * @dev Returns the address of the current owner.\r\n     * \r\n     */\r\n    \r\n    function owner() public view returns(address){\r\n        return _owner;\r\n    }\r\n    \r\n    /**\r\n     * \r\n     * @dev Reverting with message on overflow if called by any account other than the owner.\r\n     * \r\n     */\r\n    modifier onlyOwner(){\r\n        require(msg.sender == _owner, 'You are not the owner');\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * \r\n     * @dev Set new owner to transfer ownership, reverting with message on overflow if account is not the owner\r\n     * \r\n     */\r\n    function transferOwnership(address newOwner_) public onlyOwner{\r\n        require(newOwner_ != address(0), 'Invalid address');\r\n        _newOwner = newOwner_;\r\n    }\r\n    \r\n    /**\r\n     * \r\n     * @dev Accept ownership, reverting with message on overflow if account is not the new owner\r\n     * \r\n     */\r\n    function acceptOwnership()public{\r\n        require(msg.sender == _newOwner, 'You are not the new owner');\r\n        _transferOwnership(_newOwner);\r\n    }\r\n    \r\n    function _transferOwnership(address newOwner_) internal{\r\n        emit OwnerShipTransferred(_owner,newOwner_);\r\n        _owner = newOwner_;\r\n    }\r\n}\r\n\r\n/**\r\n * \r\n * @dev ERC20 Standard Interface as defined in the EIP.\r\n *\r\n */\r\n \r\ninterface IERC20 {\r\n    \r\n\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address account) external view returns (uint256);\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n  \r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * \r\n * @dev Implementation of the IERC20w.\r\n * \r\n **/\r\n\r\ncontract ERC20 is IERC20, Ownable{\r\n    using Math for uint256;\r\n    \r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    uint256 private _totalSupply;\r\n    \r\n    constructor (string memory name_, string memory symbol_, uint256 totalSupply_, uint8 decimals_)  {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _totalSupply = totalSupply_.mul(10 ** decimals_);\r\n        _decimals = decimals_;\r\n        _balances[msg.sender] = _balances[msg.sender].add(_totalSupply);\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n    \r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n    \r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    \r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n    \r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    \r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    \r\n    function transfer(address to, uint256 value) public override returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n    \r\n    function allowance(address owner, address spender) public override view returns (uint256) {\r\n        return _allowed[owner][spender];\r\n    }\r\n    \r\n    function approve(address spender, uint256 value) public override returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address sender, address recipient, uint256 value) public override returns (bool) {\r\n        _transfer(sender, recipient, value);\r\n        _approve(sender, msg.sender, _allowed[sender][msg.sender].sub(value));\r\n        return true;\r\n    }\r\n    \r\n    \r\n    function _transfer(address from_, address to_, uint256 amount_) internal{\r\n        require(from_ != address(0), \"Sender Invalid address\");\r\n        require(to_ != address(0), \"Recipient Invalid Address\");\r\n        _balances[from_] = _balances[from_].sub(amount_);\r\n        _balances[to_] = _balances[to_].add(amount_);\r\n        emit Transfer(from_, to_, amount_);\r\n    }\r\n    \r\n    function _approve(address owner_, address spender_, uint256 amount_) internal{\r\n        require(owner_ != address(0), \"Approve from the zero address\");\r\n        require(spender_ != address(0), \"Approve to the zero address\");\r\n        _allowed[owner_][spender_] = amount_;\r\n        emit Approval(owner_, spender_, amount_);\r\n    }\r\n    \r\n    /**\r\n    * \r\n    * @dev Destroy Tokens from the caller, reverting with message on overflow if caller is not the contract owner\r\n    * \r\n    */\r\n   \r\n    function burn(uint256 value) public onlyOwner {\r\n        require(msg.sender != address(0), 'Invalid account address');\r\n        _balances[msg.sender] = _balances[msg.sender].sub(value);\r\n        _totalSupply = _totalSupply.sub(value);\r\n        emit Transfer(msg.sender, address(0), value);\r\n    }\r\n\r\n    \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply_\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerShipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ERC20","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000001c9c3800000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000b53746f6e6f20546f6b656e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000353544e0000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://744942119b889ddeb57db3eac0e97d74f646290f2f1a8e6afdc3ef12c16d5a07"}]}