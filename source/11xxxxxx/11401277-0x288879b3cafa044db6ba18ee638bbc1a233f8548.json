{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-10-15\r\n*/\r\n\r\n// File: contracts/interfaces/IDXswapFactory.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IDXswapFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function INIT_CODE_PAIR_HASH() external pure returns (bytes32);\r\n    function feeTo() external view returns (address);\r\n    function protocolFeeDenominator() external view returns (uint8);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n    function setProtocolFee(uint8 _protocolFee) external;\r\n    function setSwapFee(address pair, uint32 swapFee) external;\r\n}\r\n\r\n// File: contracts/DXswapFeeSetter.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\n\r\ncontract DXswapFeeSetter {\r\n    address public owner;\r\n    mapping(address => address) public pairOwners;\r\n    IDXswapFactory public factory;\r\n  \r\n    constructor(address _owner, address _factory) public {\r\n        owner = _owner;\r\n        factory = IDXswapFactory(_factory);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) external {\r\n        require(msg.sender == owner, 'DXswapFeeSetter: FORBIDDEN');\r\n        owner = newOwner;\r\n    }\r\n    \r\n    function transferPairOwnership(address pair, address newOwner) external {\r\n        require(msg.sender == owner, 'DXswapFeeSetter: FORBIDDEN');\r\n        pairOwners[pair] = newOwner;\r\n    }\r\n\r\n    function setFeeTo(address feeTo) external {\r\n        require(msg.sender == owner, 'DXswapFeeSetter: FORBIDDEN');\r\n        factory.setFeeTo(feeTo);\r\n    }\r\n\r\n    function setFeeToSetter(address feeToSetter) external {\r\n        require(msg.sender == owner, 'DXswapFeeSetter: FORBIDDEN');\r\n        factory.setFeeToSetter(feeToSetter);\r\n    }\r\n    \r\n    function setProtocolFee(uint8 protocolFeeDenominator) external {\r\n        require(msg.sender == owner, 'DXswapFeeSetter: FORBIDDEN');\r\n        factory.setProtocolFee(protocolFeeDenominator);\r\n    }\r\n    \r\n    function setSwapFee(address pair, uint32 swapFee) external {\r\n        require((msg.sender == owner) || ((msg.sender == pairOwners[pair])), 'DXswapFeeSetter: FORBIDDEN');\r\n        factory.setSwapFee(pair, swapFee);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IDXswapFactory\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pairOwners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeToSetter\",\"type\":\"address\"}],\"name\":\"setFeeToSetter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"protocolFeeDenominator\",\"type\":\"uint8\"}],\"name\":\"setProtocolFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"name\":\"setSwapFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferPairOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DXswapFeeSetter","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000008eec580ad41e9994599bad7d2a74a9874a2852c000000000000000000000000d34971bab6e5e356fd250715f5de0492bb070452","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"bzzr://a0be763e035529abb8cc9d7d753668d36fa96da26d709983f608f42e5b3d6159"}]}