{"status":"1","message":"OK","result":[{"SourceCode":"/// OracleRelayer.sol\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.6.7;\r\n\r\nabstract contract SAFEEngineLike {\r\n    function modifyParameters(bytes32, bytes32, uint) virtual external;\r\n}\r\n\r\nabstract contract OracleLike {\r\n    function getResultWithValidity() virtual public view returns (uint256, bool);\r\n}\r\n\r\ncontract OracleRelayer {\r\n    // --- Auth ---\r\n    mapping (address => uint) public authorizedAccounts;\r\n    /**\r\n     * @notice Add auth to an account\r\n     * @param account Account to add auth to\r\n     */\r\n    function addAuthorization(address account) external isAuthorized {\r\n        authorizedAccounts[account] = 1;\r\n        emit AddAuthorization(account);\r\n    }\r\n    /**\r\n     * @notice Remove auth from an account\r\n     * @param account Account to remove auth from\r\n     */\r\n    function removeAuthorization(address account) external isAuthorized {\r\n        authorizedAccounts[account] = 0;\r\n        emit RemoveAuthorization(account);\r\n    }\r\n    /**\r\n    * @notice Checks whether msg.sender can call an authed function\r\n    **/\r\n    modifier isAuthorized {\r\n        require(authorizedAccounts[msg.sender] == 1, \"OracleRelayer/account-not-authorized\");\r\n        _;\r\n    }\r\n\r\n    // --- Data ---\r\n    struct CollateralType {\r\n        // Usually an oracle security module that enforces delays to fresh price feeds\r\n        OracleLike orcl;\r\n        // CRatio used to compute the 'safePrice' - the price used when generating debt in SAFEEngine\r\n        uint256 safetyCRatio;\r\n        // CRatio used to compute the 'liquidationPrice' - the price used when liquidating SAFEs\r\n        uint256 liquidationCRatio;\r\n    }\r\n\r\n    // Data about each collateral type\r\n    mapping (bytes32 => CollateralType) public collateralTypes;\r\n\r\n    SAFEEngineLike public safeEngine;\r\n\r\n    // Whether this contract is enabled\r\n    uint256 public contractEnabled;\r\n    // Virtual redemption price (not the most updated value)\r\n    uint256 internal _redemptionPrice;                                                        // [ray]\r\n    // The force that changes the system users' incentives by changing the redemption price\r\n    uint256 public redemptionRate;                                                            // [ray]\r\n    // Last time when the redemption price was changed\r\n    uint256 public redemptionPriceUpdateTime;                                                 // [unix epoch time]\r\n    // Upper bound for the per-second redemption rate\r\n    uint256 public redemptionRateUpperBound;                                                  // [ray]\r\n    // Lower bound for the per-second redemption rate\r\n    uint256 public redemptionRateLowerBound;                                                  // [ray]\r\n\r\n    // --- Events ---\r\n    event AddAuthorization(address account);\r\n    event RemoveAuthorization(address account);\r\n    event DisableContract();\r\n    event ModifyParameters(\r\n        bytes32 collateralType,\r\n        bytes32 parameter,\r\n        address addr\r\n    );\r\n    event ModifyParameters(bytes32 parameter, uint data);\r\n    event ModifyParameters(\r\n        bytes32 collateralType,\r\n        bytes32 parameter,\r\n        uint data\r\n    );\r\n    event UpdateRedemptionPrice(uint redemptionPrice);\r\n    event UpdateCollateralPrice(\r\n      bytes32 collateralType,\r\n      uint256 priceFeedValue,\r\n      uint256 safetyPrice,\r\n      uint256 liquidationPrice\r\n    );\r\n\r\n    // --- Init ---\r\n    constructor(address safeEngine_) public {\r\n        authorizedAccounts[msg.sender] = 1;\r\n        safeEngine                 = SAFEEngineLike(safeEngine_);\r\n        _redemptionPrice           = RAY;\r\n        redemptionRate             = RAY;\r\n        redemptionPriceUpdateTime  = now;\r\n        redemptionRateUpperBound   = RAY * WAD;\r\n        redemptionRateLowerBound   = 1;\r\n        contractEnabled            = 1;\r\n        emit AddAuthorization(msg.sender);\r\n    }\r\n\r\n    // --- Math ---\r\n    uint constant WAD = 10 ** 18;\r\n    uint constant RAY = 10 ** 27;\r\n\r\n    function subtract(uint x, uint y) internal pure returns (uint z) {\r\n        z = x - y;\r\n        require(z <= x);\r\n    }\r\n    function multiply(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n    function rmultiply(uint x, uint y) internal pure returns (uint z) {\r\n        // alsites rounds down\r\n        z = multiply(x, y) / RAY;\r\n    }\r\n    function rdivide(uint x, uint y) internal pure returns (uint z) {\r\n        z = multiply(x, RAY) / y;\r\n    }\r\n    function rpower(uint x, uint n, uint base) internal pure returns (uint z) {\r\n        assembly {\r\n            switch x case 0 {switch n case 0 {z := base} default {z := 0}}\r\n            default {\r\n                switch mod(n, 2) case 0 { z := base } default { z := x }\r\n                let half := div(base, 2)  // for rounding.\r\n                for { n := div(n, 2) } n { n := div(n,2) } {\r\n                    let xx := mul(x, x)\r\n                    if iszero(eq(div(xx, x), x)) { revert(0,0) }\r\n                    let xxRound := add(xx, half)\r\n                    if lt(xxRound, xx) { revert(0,0) }\r\n                    x := div(xxRound, base)\r\n                    if mod(n,2) {\r\n                        let zx := mul(z, x)\r\n                        if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) { revert(0,0) }\r\n                        let zxRound := add(zx, half)\r\n                        if lt(zxRound, zx) { revert(0,0) }\r\n                        z := div(zxRound, base)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // --- Administration ---\r\n    /**\r\n     * @notice Modify oracle price feed addresses\r\n     * @param collateralType Collateral who's oracle we change\r\n     * @param parameter Name of the parameter\r\n     * @param addr New oracle address\r\n     */\r\n    function modifyParameters(\r\n        bytes32 collateralType,\r\n        bytes32 parameter,\r\n        address addr\r\n    ) external isAuthorized {\r\n        require(contractEnabled == 1, \"OracleRelayer/contract-not-enabled\");\r\n        if (parameter == \"orcl\") collateralTypes[collateralType].orcl = OracleLike(addr);\r\n        else revert(\"OracleRelayer/modify-unrecognized-param\");\r\n        emit ModifyParameters(\r\n            collateralType,\r\n            parameter,\r\n            addr\r\n        );\r\n    }\r\n    /**\r\n     * @notice Modify redemption related parameters\r\n     * @param parameter Name of the parameter\r\n     * @param data New param value\r\n     */\r\n    function modifyParameters(bytes32 parameter, uint data) external isAuthorized {\r\n        require(contractEnabled == 1, \"OracleRelayer/contract-not-enabled\");\r\n        require(data > 0, \"OracleRelayer/null-data\");\r\n        if (parameter == \"redemptionPrice\") {\r\n          require(data > 0, \"OracleRelayer/null-redemption-price\");\r\n          _redemptionPrice = data;\r\n        }\r\n        else if (parameter == \"redemptionRate\") {\r\n          require(now == redemptionPriceUpdateTime, \"OracleRelayer/redemption-price-not-updated\");\r\n          uint256 adjustedRate = data;\r\n          if (data > redemptionRateUpperBound) {\r\n            adjustedRate = redemptionRateUpperBound;\r\n          } else if (data < redemptionRateLowerBound) {\r\n            adjustedRate = redemptionRateLowerBound;\r\n          }\r\n          redemptionRate = adjustedRate;\r\n        }\r\n        else if (parameter == \"redemptionRateUpperBound\") {\r\n          require(data > RAY, \"OracleRelayer/invalid-redemption-rate-upper-bound\");\r\n          redemptionRateUpperBound = data;\r\n        }\r\n        else if (parameter == \"redemptionRateLowerBound\") {\r\n          require(data < RAY, \"OracleRelayer/invalid-redemption-rate-lower-bound\");\r\n          redemptionRateLowerBound = data;\r\n        }\r\n        else revert(\"OracleRelayer/modify-unrecognized-param\");\r\n        emit ModifyParameters(\r\n            parameter,\r\n            data\r\n        );\r\n    }\r\n    /**\r\n     * @notice Modify CRatio related parameters\r\n     * @param collateralType Collateral who's parameters we change\r\n     * @param parameter Name of the parameter\r\n     * @param data New param value\r\n     */\r\n    function modifyParameters(\r\n        bytes32 collateralType,\r\n        bytes32 parameter,\r\n        uint data\r\n    ) external isAuthorized {\r\n        require(contractEnabled == 1, \"OracleRelayer/contract-not-enabled\");\r\n        if (parameter == \"safetyCRatio\") {\r\n          require(data >= collateralTypes[collateralType].liquidationCRatio, \"OracleRelayer/safety-lower-than-liquidation-cratio\");\r\n          collateralTypes[collateralType].safetyCRatio = data;\r\n        }\r\n        else if (parameter == \"liquidationCRatio\") {\r\n          require(data <= collateralTypes[collateralType].safetyCRatio, \"OracleRelayer/safety-lower-than-liquidation-cratio\");\r\n          collateralTypes[collateralType].liquidationCRatio = data;\r\n        }\r\n        else revert(\"OracleRelayer/modify-unrecognized-param\");\r\n        emit ModifyParameters(\r\n            collateralType,\r\n            parameter,\r\n            data\r\n        );\r\n    }\r\n\r\n    // --- Redemption Price Update ---\r\n    /**\r\n     * @notice Update the redemption price according to the current redemption rate\r\n     */\r\n    function updateRedemptionPrice() internal returns (uint) {\r\n        // Update redemption price\r\n        _redemptionPrice = rmultiply(\r\n          rpower(redemptionRate, subtract(now, redemptionPriceUpdateTime), RAY),\r\n          _redemptionPrice\r\n        );\r\n        if (_redemptionPrice == 0) _redemptionPrice = 1;\r\n        redemptionPriceUpdateTime = now;\r\n        emit UpdateRedemptionPrice(_redemptionPrice);\r\n        // Return updated redemption price\r\n        return _redemptionPrice;\r\n    }\r\n    /**\r\n     * @notice Fetch the latest redemption price by first updating it\r\n     */\r\n    function redemptionPrice() public returns (uint) {\r\n        if (now > redemptionPriceUpdateTime) return updateRedemptionPrice();\r\n        return _redemptionPrice;\r\n    }\r\n\r\n    // --- Update value ---\r\n    /**\r\n     * @notice Update the collateral price inside the system (inside SAFEEngine)\r\n     * @param collateralType The collateral we want to update prices (safety and liquidation prices) for\r\n     */\r\n    function updateCollateralPrice(bytes32 collateralType) external {\r\n        (uint256 priceFeedValue, bool hasValidValue) =\r\n          collateralTypes[collateralType].orcl.getResultWithValidity();\r\n        uint redemptionPrice_ = redemptionPrice();\r\n        uint256 safetyPrice_ = hasValidValue ? rdivide(rdivide(multiply(uint(priceFeedValue), 10 ** 9), redemptionPrice_), collateralTypes[collateralType].safetyCRatio) : 0;\r\n        uint256 liquidationPrice_ = hasValidValue ? rdivide(rdivide(multiply(uint(priceFeedValue), 10 ** 9), redemptionPrice_), collateralTypes[collateralType].liquidationCRatio) : 0;\r\n\r\n        safeEngine.modifyParameters(collateralType, \"safetyPrice\", safetyPrice_);\r\n        safeEngine.modifyParameters(collateralType, \"liquidationPrice\", liquidationPrice_);\r\n        emit UpdateCollateralPrice(collateralType, priceFeedValue, safetyPrice_, liquidationPrice_);\r\n    }\r\n\r\n    /**\r\n     * @notice Disable this contract (normally called by GlobalSettlement)\r\n     */\r\n    function disableContract() external isAuthorized {\r\n        contractEnabled = 0;\r\n        redemptionRate = RAY;\r\n        emit DisableContract();\r\n    }\r\n\r\n    /**\r\n     * @notice Fetch the safety CRatio of a specific collateral type\r\n     * @param collateralType The collateral price we want the safety CRatio for\r\n     */\r\n    function safetyCRatio(bytes32 collateralType) public view returns (uint256) {\r\n        return collateralTypes[collateralType].safetyCRatio;\r\n    }\r\n    /**\r\n     * @notice Fetch the liquidation CRatio of a specific collateral type\r\n     * @param collateralType The collateral price we want the liquidation CRatio for\r\n     */\r\n    function liquidationCRatio(bytes32 collateralType) public view returns (uint256) {\r\n        return collateralTypes[collateralType].liquidationCRatio;\r\n    }\r\n    /**\r\n     * @notice Fetch the oracle price feed of a specific collateral type\r\n     * @param collateralType The collateral price we want the oracle price feed for\r\n     */\r\n    function orcl(bytes32 collateralType) public view returns (address) {\r\n        return address(collateralTypes[collateralType].orcl);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"safeEngine_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DisableContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ModifyParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"ModifyParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"ModifyParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemoveAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceFeedValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"safetyPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidationPrice\",\"type\":\"uint256\"}],\"name\":\"UpdateCollateralPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redemptionPrice\",\"type\":\"uint256\"}],\"name\":\"UpdateRedemptionPrice\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedAccounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"collateralTypes\",\"outputs\":[{\"internalType\":\"contract OracleLike\",\"name\":\"orcl\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"safetyCRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationCRatio\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractEnabled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"}],\"name\":\"liquidationCRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"}],\"name\":\"orcl\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redemptionPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redemptionPriceUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redemptionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redemptionRateLowerBound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redemptionRateUpperBound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeEngine\",\"outputs\":[{\"internalType\":\"contract SAFEEngineLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"}],\"name\":\"safetyCRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"}],\"name\":\"updateCollateralPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"OracleRelayer","CompilerVersion":"v0.6.7+commit.b8d736ae","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000f0b7808b940b78be81ad6f9e075ce8be4a837e2c","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://f91cf5a6b44014ee0161d12df9217cf76fd31e6b5ab74b25912fd6063082a436"}]}