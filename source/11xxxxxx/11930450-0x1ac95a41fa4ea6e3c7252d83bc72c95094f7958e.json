{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n    \r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _governance;\r\n\r\n    event GovernanceTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _governance = msgSender;\r\n        emit GovernanceTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function governance() public view returns (address) {\r\n        return _governance;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyGovernance() {\r\n        require(_governance == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferGovernance(address newOwner) internal virtual onlyGovernance {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit GovernanceTransferred(_governance, newOwner);\r\n        _governance = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/strategies/StabilizeStrategyStablecoinArbV3.sol\r\n\r\npragma solidity ^0.6.6;\r\n\r\n// This is iteration 3 of the strategy\r\n\r\n// This is a strategy that takes advantage of arb opportunities for multiple stablecoins\r\n// Users deposit various stables into the strategy and the strategy will sell into the lowest priced token\r\n// In addition to that, the pool will earn interest in the form of aTokens from Aave\r\n// Selling will occur via Curve and buying WETH via Sushiswap\r\n// Half the profit earned from the sell and interest will be used to buy WETH and split it among the treasury, stakers and executor\r\n// Half will remain as stables (in the form of aTokens)\r\n// It will sell on withdrawals only when a non-contract calls it and certain requirements are met\r\n// Anyone can be an executors and profit a percentage on a trade\r\n// Gas cost is reimbursed, up to a percentage of the total WETH profit / stipend\r\n// This strategy doesn't store stables but rather interest earning variants (aTokens)\r\n\r\ninterface StabilizeStakingPool {\r\n    function notifyRewardAmount(uint256) external;\r\n}\r\n\r\ninterface StabilizePriceOracle {\r\n    function getPrice(address _address) external view returns (uint256);\r\n}\r\n\r\ninterface CurvePool {\r\n    function get_dy(int128, int128, uint256) external view returns (uint256); // Get quantity estimate\r\n    function exchange(int128, int128, uint256, uint256) external; // Exchange tokens\r\n}\r\n\r\ninterface TradeRouter {\r\n    function swapExactETHForTokens(uint, address[] calldata, address, uint) external payable returns (uint[] memory);\r\n    function swapExactTokensForTokens(uint, uint, address[] calldata, address, uint) external returns (uint[] memory);\r\n    function getAmountsOut(uint, address[] calldata) external view returns (uint[] memory); // For a value in, it calculates value out\r\n}\r\n\r\ninterface AggregatorV3Interface {\r\n  function latestRoundData() external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\r\n}\r\n\r\ninterface LendingPoolAddressesProvider {\r\n    function getLendingPool() external view returns (address);\r\n}\r\n\r\ninterface LendingPool {\r\n  function withdraw(address, uint256, address) external returns (uint256);\r\n  function deposit(address, uint256, address, uint16) external;\r\n}\r\n\r\ninterface StrategyVault {\r\n    function viewWETHProfit(uint256) external view returns (uint256);\r\n    function sendWETHProfit() external;\r\n}\r\n\r\ncontract StabilizeStrategyStablecoinArbV3 is Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    \r\n    address public treasuryAddress; // Address of the treasury\r\n    address public stakingAddress; // Address to the STBZ staking pool\r\n    address public zsTokenAddress; // The address of the controlling zs-Token\r\n    address public strategyVaultAddress; // This strategy stores interest aTokens in separate vault\r\n    \r\n    uint256 constant DIVISION_FACTOR = 100000;\r\n\r\n    uint256 public lastTradeTime;\r\n    uint256 public lastActionBalance; // Balance before last deposit, withdraw or trade\r\n    uint256 public percentTradeTrigger = 90000; // 90% change in value will trigger a trade\r\n    uint256 public percentSell = 50000; // 50% of the tokens are sold to the cheapest token\r\n    uint256 public percentDepositor = 50000; // 1000 = 1%, depositors earn 50% of all gains (including interest)\r\n    uint256 public percentExecutor = 10000; // 10000 = 10% of WETH goes to executor\r\n    uint256 public percentStakers = 50000; // 50% of non-executor WETH goes to stakers, can be changed, rest goes to treasury\r\n    uint256 public minTradeSplit = 20000; // If the balance of a stablecoin is less than or equal to this, it trades the entire balance\r\n    uint256 public maxPercentStipend = 30000; // The maximum amount of WETH profit that can be allocated to the executor for gas in percent\r\n    uint256 public gasStipend = 1000000; // This is the gas units that are covered by executing a trade taken from the WETH profit\r\n    uint256 constant minGain = 1e16; // Minimum amount of stablecoin gain (about 0.01 USD) before buying WETH and splitting it\r\n    \r\n    // Token information\r\n    // This strategy accepts multiple stablecoins\r\n    // DAI, USDC, USDT, sUSD\r\n    struct TokenInfo {\r\n        IERC20 token; // Reference of token\r\n        IERC20 aToken; // Reference to its aToken (Aave v2)\r\n        uint256 decimals; // Decimals of token\r\n        uint256 price; // Last price of token in USD\r\n        uint256 lastATokenBalance; // The balance the last time the interest was calculated\r\n    }\r\n    \r\n    TokenInfo[] private tokenList; // An array of tokens accepted as deposits\r\n    StabilizePriceOracle private oracleContract; // A reference to the price oracle contract\r\n    \r\n    // Strategy specific variables\r\n    address constant CURVE_DAI_SUSD = address(0xEB16Ae0052ed37f479f7fe63849198Df1765a733); // Curve pool for 2 tokens, asUSD, aDAI\r\n    address constant CURVE_ATOKEN_3 = address(0xDeBF20617708857ebe4F679508E7b7863a8A8EeE); // Curve pool for 3 tokens, aDAI, aUSDT, aUSDC\r\n    address constant SUSHISWAP_ROUTER = address(0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F); //Address of Sushiswap\r\n    address constant WETH_ADDRESS = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n    address constant GAS_ORACLE_ADDRESS = address(0x169E633A2D1E6c10dD91238Ba11c4A708dfEF37C); // Chainlink address for fast gas oracle\r\n    address constant LENDING_POOL_ADDRESS_PROVIDER = address(0xB53C1a33016B2DC2fF3653530bfF1848a515c8c5); // Provider for Aave addresses\r\n\r\n    constructor(\r\n        address _treasury,\r\n        address _staking,\r\n        address _zsToken,\r\n        StabilizePriceOracle _oracle\r\n    ) public {\r\n        treasuryAddress = _treasury;\r\n        stakingAddress = _staking;\r\n        zsTokenAddress = _zsToken;\r\n        oracleContract = _oracle;\r\n        setupWithdrawTokens();\r\n    }\r\n\r\n    // Initialization functions\r\n    \r\n    function setupWithdrawTokens() internal {\r\n        // Start with DAI\r\n        IERC20 _token = IERC20(address(0x6B175474E89094C44Da98b954EedeAC495271d0F));\r\n        IERC20 _aToken = IERC20(address(0x028171bCA77440897B824Ca71D1c56caC55b68A3)); // aDAI\r\n        tokenList.push(\r\n            TokenInfo({\r\n                token: _token,\r\n                aToken: _aToken,\r\n                decimals: _token.decimals(), // Aave tokens share decimals with normal tokens\r\n                price: 1e18,\r\n                lastATokenBalance: 0\r\n            })\r\n        );   \r\n        \r\n        // USDC\r\n        _token = IERC20(address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48));\r\n        _aToken = IERC20(address(0xBcca60bB61934080951369a648Fb03DF4F96263C)); // aUSDC\r\n        tokenList.push(\r\n            TokenInfo({\r\n                token: _token,\r\n                aToken: _aToken,\r\n                decimals: _token.decimals(),\r\n                price: 1e18,\r\n                lastATokenBalance: 0\r\n            })\r\n        );\r\n        \r\n        // USDT\r\n        _token = IERC20(address(0xdAC17F958D2ee523a2206206994597C13D831ec7));\r\n        _aToken = IERC20(address(0x3Ed3B47Dd13EC9a98b44e6204A523E766B225811)); // aUSDT\r\n        tokenList.push(\r\n            TokenInfo({\r\n                token: _token,\r\n                aToken: _aToken,\r\n                decimals: _token.decimals(),\r\n                price: 1e18,\r\n                lastATokenBalance: 0\r\n            })\r\n        );\r\n        \r\n        // sUSD\r\n        _token = IERC20(address(0x57Ab1ec28D129707052df4dF418D58a2D46d5f51));\r\n        _aToken = IERC20(address(0x6C5024Cd4F8A59110119C56f8933403A539555EB)); //aSUSD\r\n        tokenList.push(\r\n            TokenInfo({\r\n                token: _token,\r\n                aToken: _aToken,\r\n                decimals: _token.decimals(),\r\n                price: 1e18,\r\n                lastATokenBalance: 0\r\n            })\r\n        );\r\n    }\r\n    \r\n    // Modifier\r\n    modifier onlyZSToken() {\r\n        require(zsTokenAddress == _msgSender(), \"Call not sent from the zs-Token\");\r\n        _;\r\n    }\r\n    \r\n    // Read functions\r\n    \r\n    // This excludes the interest earned before being processed\r\n    // Show this on the user's \r\n    function effectivePricePerToken() external view returns (uint256) {\r\n        if(zsTokenAddress == address(0)){\r\n            return 0;\r\n        }\r\n        uint256 supply = IERC20(zsTokenAddress).totalSupply();\r\n        if(supply == 0){\r\n            return 1e18; // Shown in Wei units\r\n        }else{\r\n            return uint256(1e18).mul(lastActionBalance).div(supply);      \r\n        }\r\n    }\r\n    \r\n    function rewardTokensCount() external view returns (uint256) {\r\n        return tokenList.length;\r\n    }\r\n    \r\n    function rewardTokenAddress(uint256 _pos) external view returns (address) {\r\n        require(_pos < tokenList.length,\"No token at that position\");\r\n        return address(tokenList[_pos].token);\r\n    }\r\n    \r\n    function balance() public view returns (uint256) {\r\n        return getNormalizedTotalBalance(address(this));\r\n    }\r\n    \r\n    function getNormalizedTotalBalance(address _address) public view returns (uint256) {\r\n        // Get the balance of the atokens+tokens at this address\r\n        uint256 _balance = 0;\r\n        uint256 _length = tokenList.length;\r\n        for(uint256 i = 0; i < _length; i++){\r\n            uint256 _bal = tokenList[i].aToken.balanceOf(_address).add(tokenList[i].token.balanceOf(_address));\r\n            _bal = _bal.mul(1e18).div(10**tokenList[i].decimals);\r\n            _balance = _balance.add(_bal); // This has been normalized to 1e18 decimals\r\n        }\r\n        return _balance;\r\n    }\r\n    \r\n    function withdrawTokenReserves() public view returns (address, uint256) {\r\n        // This function will return the address and amount of the token with the lowest price\r\n        uint256 length = tokenList.length;\r\n        uint256 targetID = 0;\r\n        uint256 targetPrice = 0;\r\n        for(uint256 i = 0; i < length; i++){\r\n            if(tokenList[i].aToken.balanceOf(address(this)) > 0){\r\n                uint256 _price = tokenList[i].price;\r\n                if(targetPrice == 0 || _price <= targetPrice){\r\n                    targetPrice = _price;\r\n                    targetID = i;\r\n                }\r\n            }\r\n        }\r\n        if(targetPrice > 0){\r\n            return (address(tokenList[targetID].token), tokenList[targetID].aToken.balanceOf(address(this)));\r\n        }else{\r\n            return (address(0), 0); // No balance\r\n        }\r\n    }\r\n    \r\n    // Write functions\r\n    \r\n    function enter() external onlyZSToken {\r\n        deposit(false);\r\n    }\r\n    \r\n    function exit() external onlyZSToken {\r\n        // The ZS token vault is removing all tokens from this strategy\r\n        withdraw(_msgSender(),1,1, false);\r\n    }\r\n    \r\n    function deposit(bool nonContract) public onlyZSToken {\r\n        // Only the ZS token can call the function\r\n        \r\n        // First the interest earned since the last call will be calculated\r\n        // Some will sent to a strategy vault to be later processed when it becomes large enough\r\n        calculateAndStoreInterest(); // This function will also call an update to lastATokenBalance\r\n        \r\n        // Then convert deposited stablecoins into their aToken equivalents and updates lastATokenBalance\r\n        convertAllToAaveTokens();\r\n        \r\n        // No trading is performed on deposit\r\n        if(nonContract == true){}\r\n        lastActionBalance = balance(); // This action balance represents pool post stablecoin deposit\r\n    }\r\n    \r\n    function withdraw(address _depositor, uint256 _share, uint256 _total, bool nonContract) public onlyZSToken returns (uint256) {\r\n        require(balance() > 0, \"There are no tokens in this strategy\");\r\n        // First the interest earned since the last call will be calculated and sent to vault\r\n        calculateAndStoreInterest();\r\n        \r\n        // This is in case there are some leftover raw tokens\r\n        convertAllToAaveTokens();\r\n        \r\n        if(nonContract == true){\r\n            if(_share > _total.mul(percentTradeTrigger).div(DIVISION_FACTOR)){\r\n                checkAndSwapTokens(address(0)); // This will also not call calculateAndHold due to 0 address\r\n            }\r\n        }\r\n        \r\n        uint256 withdrawAmount = 0;\r\n        uint256 _balance = balance();\r\n        if(_share < _total){\r\n            uint256 _myBalance = _balance.mul(_share).div(_total);\r\n            withdrawPerPrice(_depositor, _myBalance, false); // This will withdraw based on token price\r\n            withdrawAmount = _myBalance;\r\n        }else{\r\n            // We are all shares, transfer all\r\n            withdrawPerPrice(_depositor, _balance, true);\r\n            withdrawAmount = _balance;\r\n        }\r\n        lastActionBalance = balance();\r\n        \r\n        return withdrawAmount;\r\n    }\r\n    \r\n    // Get price from chainlink oracle\r\n    function updateTokenPrices() internal {\r\n        uint256 length = tokenList.length;\r\n        for(uint256 i = 0; i < length; i++){\r\n            uint256 price = oracleContract.getPrice(address(tokenList[i].token));\r\n            if(price > 0){\r\n                tokenList[i].price = price;\r\n            }\r\n        }        \r\n    }\r\n    \r\n    // This will withdraw the tokens from the contract based on their price, from lowest price to highest\r\n    function withdrawPerPrice(address _receiver, uint256 _withdrawAmount, bool _takeAll) internal {\r\n        uint256 length = tokenList.length;\r\n        uint256 _balance = 0;\r\n        if(_takeAll == true){\r\n            // We will empty out the strategy\r\n            for(uint256 i = 0; i < length; i++){\r\n                _balance = tokenList[i].aToken.balanceOf(address(this));\r\n                if(_balance > 0){\r\n                    // Convert the entire a tokens to token\r\n                    convertFromAToken(i, _balance);\r\n                    tokenList[i].lastATokenBalance = tokenList[i].aToken.balanceOf(address(this));\r\n                }\r\n                _balance = tokenList[i].token.balanceOf(address(this));\r\n                if(_balance > 0){\r\n                    // Now send the normal token back\r\n                    tokenList[i].token.safeTransfer(_receiver, _balance);\r\n                }\r\n            }\r\n            return;\r\n        }\r\n        bool[4] memory done;\r\n        uint256 targetID = 0;\r\n        uint256 targetPrice = 0;\r\n        updateTokenPrices(); // Update the prices based on an off-chain Oracle\r\n        for(uint256 i = 0; i < length; i++){\r\n            targetPrice = 0; // Reset the target price\r\n            // Find the lowest priced token to withdraw\r\n            for(uint256 i2 = 0; i2 < length; i2++){\r\n                if(done[i2] == false){\r\n                    uint256 _price = tokenList[i2].price;\r\n                    if(targetPrice == 0 || _price <= targetPrice){\r\n                        targetPrice = _price;\r\n                        targetID = i2;\r\n                    }\r\n                }\r\n            }\r\n            done[targetID] = true;\r\n            \r\n            // Determine the balance left\r\n            uint256 _normalizedBalance = tokenList[targetID].aToken.balanceOf(address(this)).mul(1e18).div(10**tokenList[targetID].decimals);\r\n            if(_normalizedBalance <= _withdrawAmount){\r\n                // Withdraw the entire balance of this token\r\n                if(_normalizedBalance > 0){\r\n                    _withdrawAmount = _withdrawAmount.sub(_normalizedBalance);\r\n                    _balance = tokenList[targetID].aToken.balanceOf(address(this));\r\n                    convertFromAToken(targetID, _balance);\r\n                    tokenList[i].lastATokenBalance = tokenList[i].aToken.balanceOf(address(this));\r\n                    tokenList[targetID].token.safeTransfer(_receiver, _balance);                    \r\n                }\r\n            }else{\r\n                // Withdraw a partial amount of this token\r\n                if(_withdrawAmount > 0){\r\n                    // Convert the withdraw amount to the token's decimal amount\r\n                    _balance = _withdrawAmount.mul(10**tokenList[targetID].decimals).div(1e18);\r\n                    _withdrawAmount = 0;\r\n                    convertFromAToken(targetID, _balance);\r\n                    tokenList[i].lastATokenBalance = tokenList[i].aToken.balanceOf(address(this));\r\n                    tokenList[targetID].token.safeTransfer(_receiver, _balance);\r\n                }\r\n                break; // Nothing more to withdraw\r\n            }\r\n        }\r\n    }\r\n    \r\n    function convertFromAToken(uint256 _id, uint256 amount) internal {\r\n        // This will take the aToken and convert it to main token to be used for whatever\r\n        // It will require that the amount returned is greater than or equal to amount requested\r\n        uint256 _balance = tokenList[_id].token.balanceOf(address(this));\r\n        LendingPool lender = LendingPool(LendingPoolAddressesProvider(LENDING_POOL_ADDRESS_PROVIDER).getLendingPool()); // Load the lending pool\r\n        tokenList[_id].aToken.safeApprove(address(lender), 0);\r\n        tokenList[_id].aToken.safeApprove(address(lender), amount);\r\n        lender.withdraw(address(tokenList[_id].token), amount, address(this));\r\n        require(amount >= tokenList[_id].token.balanceOf(address(this)).sub(_balance), \"Aave failed to withdraw the proper balance\");\r\n    }\r\n    \r\n    function convertToAToken(uint256 _id, uint256 amount) internal {\r\n        // This will take the token and convert it to atoken to be used for whatever\r\n        // It will require that the amount returned is greater than or equal to amount requested\r\n        uint256 _balance = tokenList[_id].aToken.balanceOf(address(this));\r\n        LendingPool lender = LendingPool(LendingPoolAddressesProvider(LENDING_POOL_ADDRESS_PROVIDER).getLendingPool()); // Load the lending pool\r\n        tokenList[_id].token.safeApprove(address(lender), 0);\r\n        tokenList[_id].token.safeApprove(address(lender), amount);\r\n        lender.deposit(address(tokenList[_id].token), amount, address(this), 0);\r\n        require(amount >= tokenList[_id].aToken.balanceOf(address(this)).sub(_balance), \"Aave failed to return proper amount of aTokens\");\r\n    }\r\n    \r\n    function convertAllToAaveTokens() internal {\r\n        // Convert stables to interest earning variants\r\n        uint256 length = tokenList.length;\r\n        uint256 _balance = 0;\r\n        for(uint256 i = 0; i < length; i++){\r\n            _balance = tokenList[i].token.balanceOf(address(this));\r\n            if(_balance > 0){\r\n                // Convert the entire token to a token\r\n                convertToAToken(i, _balance);\r\n            }\r\n            // Now update its balance\r\n            tokenList[i].lastATokenBalance = tokenList[i].aToken.balanceOf(address(this));\r\n        }        \r\n    }\r\n    \r\n    function simulateExchange(address _inputToken, address _outputToken, uint256 _amount) internal view returns (uint256) {\r\n        if(_outputToken != WETH_ADDRESS){\r\n            // When not selling for WETH, we are only dealing with aTokens\r\n            \r\n            // aSUSD only can buy and sell for aDAI due to gas costs of deployment and loops\r\n            // 0 - aDAI, 1 - aUSDC, 2 - aUSDT, 3 - aSUSD\r\n            uint256 inputID = 0;\r\n            uint256 outputID = 0;\r\n            uint256 length = tokenList.length;\r\n            for(uint256 i = 0; i < length; i++){\r\n                if(_inputToken == address(tokenList[i].aToken)){\r\n                    inputID = i;\r\n                }\r\n                if(_outputToken == address(tokenList[i].aToken)){\r\n                    outputID = i;\r\n                }\r\n            }\r\n            if(inputID == outputID){return 0;}\r\n            if(inputID == 3 || outputID == 3){\r\n                // Just 1 pool\r\n                int128 inCurveID = 0; // aDAI in\r\n                int128 outCurveID = 0; // aDAI out\r\n                if(inputID == 3) {inCurveID = 1;} // aUSDT in\r\n                if(outputID == 3){outCurveID = 1;} // aUSDC out\r\n                CurvePool pool = CurvePool(CURVE_DAI_SUSD);\r\n                _amount = pool.get_dy(inCurveID, outCurveID, _amount);\r\n                return _amount;          \r\n            }else{\r\n                // Just 1 pool\r\n                int128 inCurveID = 0; // aDAI in\r\n                int128 outCurveID = 0; // aDAI out\r\n                if(inputID == 1) {inCurveID = 1;} // aUSDC in\r\n                if(inputID == 2) {inCurveID = 2;} // aUSDT in\r\n                if(outputID == 1){outCurveID = 1;} // aUSDC out\r\n                if(outputID == 2){outCurveID = 2;} // aUSDT out\r\n                CurvePool pool = CurvePool(CURVE_ATOKEN_3);\r\n                _amount = pool.get_dy(inCurveID, outCurveID, _amount);\r\n                return _amount;\r\n            }\r\n        }else{\r\n            // Simple Sushiswap route\r\n            // When selling for WETH, we must have already converted aToken to token\r\n            // All stables have liquid path to WETH\r\n            TradeRouter router = TradeRouter(SUSHISWAP_ROUTER);\r\n            address[] memory path = new address[](2);\r\n            path[0] = _inputToken;\r\n            path[1] = WETH_ADDRESS;\r\n            uint256[] memory estimates = router.getAmountsOut(_amount, path);\r\n            _amount = estimates[estimates.length - 1];\r\n            return _amount;\r\n        }\r\n    }\r\n    \r\n    function exchange(address _inputToken, address _outputToken, uint256 _amount) internal {\r\n        if(_outputToken != WETH_ADDRESS){\r\n            // When not selling for WETH, we are only dealing with aTokens\r\n            \r\n            // aSUSD only can buy and sell for aDAI\r\n            // 0 - aDAI, 1 - aUSDC, 2 - aUSDT, 3 - aSUSD\r\n            uint256 inputID = 0;\r\n            uint256 outputID = 0;\r\n            uint256 length = tokenList.length;\r\n            for(uint256 i = 0; i < length; i++){\r\n                if(_inputToken == address(tokenList[i].aToken)){\r\n                    inputID = i;\r\n                }\r\n                if(_outputToken == address(tokenList[i].aToken)){\r\n                    outputID = i;\r\n                }\r\n            }\r\n            if(inputID == outputID){return;}\r\n            if(inputID == 3 || outputID == 3){\r\n                // We are dealing with aSUSD\r\n                int128 inCurveID = 0; // aDAI in\r\n                int128 outCurveID = 0; // aDAI out\r\n                if(inputID == 3) {inCurveID = 1;} // aUSDT in\r\n                if(outputID == 3){outCurveID = 1;} // aUSDC out\r\n                CurvePool pool = CurvePool(CURVE_DAI_SUSD);\r\n                IERC20(_inputToken).safeApprove(CURVE_DAI_SUSD, 0);\r\n                IERC20(_inputToken).safeApprove(CURVE_DAI_SUSD, _amount);\r\n                pool.exchange(inCurveID, outCurveID, _amount, 1);\r\n                return;\r\n            }else{\r\n                // Just 1 pool\r\n                int128 inCurveID = 0; // DAI in\r\n                int128 outCurveID = 0; // DAI out\r\n                if(inputID == 1) {inCurveID = 1;} // USDC in\r\n                if(inputID == 2) {inCurveID = 2;} // USDT in\r\n                if(outputID == 1){outCurveID = 1;} // USDC out\r\n                if(outputID == 2){outCurveID = 2;} // USDT out\r\n                CurvePool pool = CurvePool(CURVE_ATOKEN_3);\r\n                IERC20(_inputToken).safeApprove(CURVE_ATOKEN_3, 0);\r\n                IERC20(_inputToken).safeApprove(CURVE_ATOKEN_3, _amount);\r\n                pool.exchange(inCurveID, outCurveID, _amount, 1);\r\n                return;\r\n            }\r\n        }else{\r\n            // Simple Sushiswap route\r\n            // When selling for WETH, we must have already converted aToken to token\r\n            // All stables have liquid path to WETH\r\n            TradeRouter router = TradeRouter(SUSHISWAP_ROUTER);\r\n            address[] memory path = new address[](2);\r\n            path[0] = _inputToken;\r\n            path[1] = WETH_ADDRESS;\r\n            IERC20(_inputToken).safeApprove(SUSHISWAP_ROUTER, 0);\r\n            IERC20(_inputToken).safeApprove(SUSHISWAP_ROUTER, _amount);\r\n            router.swapExactTokensForTokens(_amount, 1, path, address(this), now.add(60)); // Get WETH from token\r\n            return;\r\n        }\r\n    }\r\n    \r\n    function getCheapestCurveToken() internal view returns (uint256) {\r\n        // This will give us the ID of the cheapest token in the pool\r\n        // And it will tell us if aDAI is higher valued than aSUSD\r\n        // We will estimate the return for trading 1000 aDAI\r\n        // The higher the return, the lower the price of the other token\r\n        uint256 targetID = 0; // Our target ID is aDAI first\r\n        uint256 aDaiAmount = uint256(1000).mul(10**tokenList[0].decimals);\r\n        uint256 highAmount = aDaiAmount;\r\n        uint256 length = tokenList.length;\r\n        for(uint256 i = 1; i < length; i++){\r\n            uint256 estimate = simulateExchange(address(tokenList[0].aToken), address(tokenList[i].aToken), aDaiAmount);\r\n            // Normalize the estimate into DAI decimals\r\n            estimate = estimate.mul(10**tokenList[0].decimals).div(10**tokenList[i].decimals);\r\n            if(estimate > highAmount){\r\n                // This token is worth less than the aDAI\r\n                highAmount = estimate;\r\n                targetID = i;\r\n            }\r\n        }\r\n        return targetID;\r\n    }\r\n    \r\n    function calculateAndStoreInterest() internal {\r\n        // This function will take the difference between the last aToken balance and current and distribute some of it to the strategy vault\r\n        uint256 length = tokenList.length;\r\n        uint256 _balance = 0;\r\n        for(uint256 i = 0; i < length; i++){\r\n            _balance = tokenList[i].aToken.balanceOf(address(this)); // Get the current balance\r\n            if(_balance > tokenList[i].lastATokenBalance){\r\n                uint256 chargeableGain = _balance.sub(tokenList[i].lastATokenBalance).mul(DIVISION_FACTOR.sub(percentDepositor)).div(DIVISION_FACTOR);\r\n                // Convert the chargeableGain to token then to WETH\r\n                if(chargeableGain > 0){\r\n                    // Instead of convert aTokens to weth right away, store them in a separate contract, saving gas\r\n                    tokenList[i].aToken.safeTransfer(strategyVaultAddress, chargeableGain);\r\n                }\r\n            }\r\n            tokenList[i].lastATokenBalance = tokenList[i].aToken.balanceOf(address(this)); // The the current aToken amount\r\n        }\r\n    }\r\n    \r\n    function calculateAndViewInterest() internal view returns (uint256) {\r\n        // This function will take the difference between the last aToken balance and current and return the calculated normalized interest gain\r\n        uint256 length = tokenList.length;\r\n        uint256 _balance = 0;\r\n        uint256 gain = 0; \r\n        for(uint256 i = 0; i < length; i++){\r\n            _balance = tokenList[i].aToken.balanceOf(address(this)); // Get the current balance\r\n            if(_balance > tokenList[i].lastATokenBalance){\r\n                // Just normalize the difference into gain\r\n                gain = gain.add(_balance.sub(tokenList[i].lastATokenBalance).mul(1e18).div(10**tokenList[i].decimals));\r\n            }\r\n        }\r\n        \r\n        // Gain will be normalized and represent total gain from interest\r\n        return gain;\r\n    }\r\n    \r\n    function getFastGasPrice() internal view returns (uint256) {\r\n        AggregatorV3Interface gasOracle = AggregatorV3Interface(GAS_ORACLE_ADDRESS);\r\n        ( , int intGasPrice, , , ) = gasOracle.latestRoundData(); // We only want the answer \r\n        return uint256(intGasPrice);\r\n    }\r\n    \r\n    function checkAndSwapTokens(address _executor) internal {\r\n        lastTradeTime = now;\r\n        if(_executor != address(0)){\r\n            calculateAndStoreInterest(); // It will send aTokens to strategy vault\r\n        }\r\n        \r\n        StrategyVault vault = StrategyVault(strategyVaultAddress);\r\n        vault.sendWETHProfit(); // This will request the vault convert and send WETH to the strategy to be distributed\r\n        \r\n        // Now find our target token to sell into\r\n        uint256 targetID = getCheapestCurveToken(); // Curve may have a slightly different cheap token than Chainlink\r\n        uint256 length = tokenList.length;\r\n        \r\n        // Now sell all the other tokens into this token\r\n        uint256 _totalBalance = balance(); // Get the token balance at this contract, should increase\r\n        bool _expectIncrease = false;\r\n        for(uint256 i = 0; i < length; i++){\r\n            if(i != targetID){\r\n                uint256 localTarget = targetID;\r\n                if(i == 0){\r\n                    localTarget = 3; // aDAI will only sell for aSUSD as they switch often\r\n                }else if(i == 3){\r\n                    localTarget = 0; // aSUSD will only sell for aDAI\r\n                }else{\r\n                    if(localTarget == 3){continue;} // Other tokens can't buy aSUSD via curve\r\n                }\r\n                uint256 sellBalance = 0;\r\n                uint256 _minTradeTarget = minTradeSplit.mul(10**tokenList[i].decimals);\r\n                if(tokenList[i].aToken.balanceOf(address(this)) <= _minTradeTarget){\r\n                    // We have a small amount of tokens to sell, so sell all of it\r\n                    sellBalance = tokenList[i].aToken.balanceOf(address(this));\r\n                }else{\r\n                    sellBalance = tokenList[i].aToken.balanceOf(address(this)).mul(percentSell).div(DIVISION_FACTOR);\r\n                }\r\n                uint256 minReceiveBalance = sellBalance.mul(10**tokenList[localTarget].decimals).div(10**tokenList[i].decimals); // Change to match decimals of destination\r\n                if(sellBalance > 0){\r\n                    uint256 estimate = simulateExchange(address(tokenList[i].aToken), address(tokenList[localTarget].aToken), sellBalance);\r\n                    if(estimate > minReceiveBalance){\r\n                        _expectIncrease = true;\r\n                        // We are getting a greater number of tokens, complete the exchange\r\n                        exchange(address(tokenList[i].aToken), address(tokenList[localTarget].aToken), sellBalance);\r\n                    }                        \r\n                }\r\n            }\r\n        }\r\n        uint256 _newBalance = balance();\r\n        if(_expectIncrease == true){\r\n            // There may be rare scenarios where we don't gain any by calling this function\r\n            require(_newBalance > _totalBalance, \"Failed to gain in balance from selling tokens\");\r\n        }\r\n        uint256 gain = _newBalance.sub(_totalBalance);\r\n        IERC20 weth = IERC20(WETH_ADDRESS);\r\n        uint256 _wethBalance = weth.balanceOf(address(this));\r\n        if(gain >= minGain || _wethBalance > 0){\r\n            // Minimum gain required to buy WETH is about $0.01\r\n            if(gain >= minGain){\r\n                // Buy WETH from Sushiswap with stablecoin\r\n                uint256 sellBalance = gain.mul(10**tokenList[targetID].decimals).div(1e18);\r\n                uint256 holdBalance = sellBalance.mul(percentDepositor).div(DIVISION_FACTOR);\r\n                sellBalance = sellBalance.sub(holdBalance); // We will buy WETH with this amount\r\n                if(sellBalance <= tokenList[targetID].aToken.balanceOf(address(this))){\r\n                    // Convert from aToken to Token\r\n                    convertFromAToken(targetID, sellBalance);\r\n                    // Buy WETH\r\n                    exchange(address(tokenList[targetID].token), WETH_ADDRESS, sellBalance);\r\n                    _wethBalance = weth.balanceOf(address(this));\r\n                }\r\n            }\r\n            if(_wethBalance > 0){\r\n                // This is pure profit, figure out allocation\r\n                // Split the amount sent to the treasury, stakers and executor if one exists\r\n                if(_executor != address(0)){\r\n                    // Executors will get a gas reimbursement in WETH and a percent of the remaining\r\n                    uint256 maxGasFee = getFastGasPrice().mul(gasStipend); // This is gas stipend in wei\r\n                    uint256 gasFee = tx.gasprice.mul(gasStipend); // This is gas fee requested\r\n                    if(gasFee > maxGasFee){\r\n                        gasFee = maxGasFee; // Gas fee cannot be greater than the maximum\r\n                    }\r\n                    uint256 executorAmount = gasFee;\r\n                    if(gasFee >= _wethBalance.mul(maxPercentStipend).div(DIVISION_FACTOR)){\r\n                        executorAmount = _wethBalance.mul(maxPercentStipend).div(DIVISION_FACTOR); // The executor will get the entire amount up to point\r\n                    }else{\r\n                        // Add the executor percent on top of gas fee\r\n                        executorAmount = _wethBalance.sub(gasFee).mul(percentExecutor).div(DIVISION_FACTOR).add(gasFee);\r\n                    }\r\n                    if(executorAmount > 0){\r\n                        weth.safeTransfer(_executor, executorAmount);\r\n                        _wethBalance = weth.balanceOf(address(this)); // Recalculate WETH in contract           \r\n                    }\r\n                }\r\n                if(_wethBalance > 0){\r\n                    uint256 stakersAmount = _wethBalance.mul(percentStakers).div(DIVISION_FACTOR);\r\n                    uint256 treasuryAmount = _wethBalance.sub(stakersAmount);\r\n                    if(treasuryAmount > 0){\r\n                        weth.safeTransfer(treasuryAddress, treasuryAmount);\r\n                    }\r\n                    if(stakersAmount > 0){\r\n                        if(stakingAddress != address(0)){\r\n                            weth.safeTransfer(stakingAddress, stakersAmount);\r\n                            StabilizeStakingPool(stakingAddress).notifyRewardAmount(stakersAmount);                                \r\n                        }else{\r\n                            // No staking pool selected, just send to the treasury\r\n                            weth.safeTransfer(treasuryAddress, stakersAmount);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        for(uint256 i = 0; i < length; i++){\r\n            // Now run this through again and update all the token balances to prevent being affected by interest calculator\r\n            tokenList[i].lastATokenBalance = tokenList[i].aToken.balanceOf(address(this));\r\n        }\r\n    }\r\n    \r\n    function expectedProfit(bool inWETHForExecutor) external view returns (uint256) {\r\n        // This view will return the expected profit in wei units that a trading activity will have on the pool\r\n        \r\n        uint256 interestGain = 0;\r\n        if(inWETHForExecutor == true){\r\n            interestGain = calculateAndViewInterest(); // Will return total gain (normalized)\r\n            StrategyVault vault = StrategyVault(strategyVaultAddress);\r\n            // The first param is used to determine if interest earned will bring it over threshold\r\n            interestGain = vault.viewWETHProfit(interestGain); // Will return profit as WETH\r\n        }\r\n\r\n        // Now find our target token to sell into\r\n        uint256 targetID = getCheapestCurveToken(); // Curve may have a slightly different cheap token than Chainlink\r\n        uint256 length = tokenList.length;\r\n        \r\n        // Now sell all the other tokens into this token\r\n        uint256 _normalizedGain = 0;\r\n        for(uint256 i = 0; i < length; i++){\r\n            if(i != targetID){\r\n                uint256 localTarget = targetID;\r\n                if(i == 0){\r\n                    localTarget = 3; // aDAI will only sell for aSUSD as they switch often\r\n                }else if(i == 3){\r\n                    localTarget = 0; // aSUSD will only sell for aDAI\r\n                }else{\r\n                    if(localTarget == 3){continue;} // Other tokens can't buy aSUSD via curve\r\n                }\r\n                uint256 sellBalance = 0;\r\n                uint256 _minTradeTarget = minTradeSplit.mul(10**tokenList[i].decimals);\r\n                if(tokenList[i].aToken.balanceOf(address(this)) <= _minTradeTarget){\r\n                    // We have a small amount of tokens to sell, so sell all of it\r\n                    sellBalance = tokenList[i].aToken.balanceOf(address(this));\r\n                }else{\r\n                    sellBalance = tokenList[i].aToken.balanceOf(address(this)).mul(percentSell).div(DIVISION_FACTOR);\r\n                }\r\n                uint256 minReceiveBalance = sellBalance.mul(10**tokenList[localTarget].decimals).div(10**tokenList[i].decimals); // Change to match decimals of destination\r\n                if(sellBalance > 0){\r\n                    uint256 estimate = simulateExchange(address(tokenList[i].aToken), address(tokenList[localTarget].aToken), sellBalance);\r\n                    if(estimate > minReceiveBalance){\r\n                        uint256 _gain = estimate.sub(minReceiveBalance).mul(1e18).div(10**tokenList[localTarget].decimals); // Normalized gain\r\n                        _normalizedGain = _normalizedGain.add(_gain);\r\n                    }                        \r\n                }\r\n            }\r\n        }\r\n        if(inWETHForExecutor == false){\r\n            return _normalizedGain.add(interestGain);\r\n        }else{\r\n            // Calculate WETH profit\r\n            if(_normalizedGain.add(interestGain) == 0){\r\n                return 0;\r\n            }\r\n            // Calculate how much WETH the executor would make as profit\r\n            uint256 estimate = interestGain; // WETH earned from interest alone\r\n            if(_normalizedGain > 0){\r\n                uint256 sellBalance = _normalizedGain.mul(10**tokenList[targetID].decimals).div(1e18); // Convert to target decimals\r\n                uint256 holdBalance = sellBalance.mul(percentDepositor).div(DIVISION_FACTOR);\r\n                sellBalance = sellBalance.sub(holdBalance); // We will buy WETH with this amount\r\n                // Estimate output\r\n                estimate = estimate.add(simulateExchange(address(tokenList[targetID].token), WETH_ADDRESS, sellBalance));           \r\n            }\r\n            // Now calculate the amount going to the executor\r\n            uint256 gasFee = getFastGasPrice().mul(gasStipend); // This is gas stipend in wei\r\n            if(gasFee >= estimate.mul(maxPercentStipend).div(DIVISION_FACTOR)){ // Max percent of total\r\n                return estimate.mul(maxPercentStipend).div(DIVISION_FACTOR); // The executor will get max percent of total\r\n            }else{\r\n                estimate = estimate.sub(gasFee); // Subtract fee from remaining balance\r\n                return estimate.mul(percentExecutor).div(DIVISION_FACTOR).add(gasFee); // Executor amount with fee added\r\n            }\r\n        }\r\n    }\r\n    \r\n    function executorSwapTokens(address _executor, uint256 _minSecSinceLastTrade) external {\r\n        // Function designed to promote trading with incentive. Users get percentage of WETH from profitable trades\r\n        require(now.sub(lastTradeTime) > _minSecSinceLastTrade, \"The last trade was too recent\");\r\n        require(_msgSender() == tx.origin, \"Contracts cannot interact with this function\");\r\n        checkAndSwapTokens(_executor);\r\n        lastActionBalance = balance();\r\n    }\r\n    \r\n    // Governance functions\r\n    function governanceSwapTokens() external onlyGovernance {\r\n        // This is function that force trade tokens at anytime. It can only be called by governance\r\n        checkAndSwapTokens(_msgSender());\r\n        lastActionBalance = balance();\r\n    }\r\n    \r\n    // Timelock variables\r\n    \r\n    uint256 private _timelockStart; // The start of the timelock to change governance variables\r\n    uint256 private _timelockType; // The function that needs to be changed\r\n    uint256 constant TIMELOCK_DURATION = 86400; // Timelock is 24 hours\r\n    \r\n    // Reusable timelock variables\r\n    address private _timelock_address;\r\n    uint256[6] private _timelock_data;\r\n    \r\n    modifier timelockConditionsMet(uint256 _type) {\r\n        require(_timelockType == _type, \"Timelock not acquired for this function\");\r\n        _timelockType = 0; // Reset the type once the timelock is used\r\n        if(balance() > 0){ // Timelock only applies when balance exists\r\n            require(now >= _timelockStart + TIMELOCK_DURATION, \"Timelock time not met\");\r\n        }\r\n        _;\r\n    }\r\n    \r\n    // Change the owner of the token contract\r\n    // --------------------\r\n    function startGovernanceChange(address _address) external onlyGovernance {\r\n        _timelockStart = now;\r\n        _timelockType = 1;\r\n        _timelock_address = _address;       \r\n    }\r\n    \r\n    function finishGovernanceChange() external onlyGovernance timelockConditionsMet(1) {\r\n        transferGovernance(_timelock_address);\r\n    }\r\n    // --------------------\r\n    \r\n    // Change the treasury address\r\n    // --------------------\r\n    function startChangeTreasury(address _address) external onlyGovernance {\r\n        _timelockStart = now;\r\n        _timelockType = 2;\r\n        _timelock_address = _address;\r\n    }\r\n    \r\n    function finishChangeTreasury() external onlyGovernance timelockConditionsMet(2) {\r\n        treasuryAddress = _timelock_address;\r\n    }\r\n    // --------------------\r\n    \r\n    // Change the staking address\r\n    // --------------------\r\n    function startChangeStakingPool(address _address) external onlyGovernance {\r\n        _timelockStart = now;\r\n        _timelockType = 3;\r\n        _timelock_address = _address;\r\n    }\r\n    \r\n    function finishChangeStakingPool() external onlyGovernance timelockConditionsMet(3) {\r\n        stakingAddress = _timelock_address;\r\n    }\r\n    // --------------------\r\n    \r\n    // Change the zsToken address\r\n    // --------------------\r\n    function startChangeZSToken(address _address) external onlyGovernance {\r\n        _timelockStart = now;\r\n        _timelockType = 4;\r\n        _timelock_address = _address;\r\n    }\r\n    \r\n    function finishChangeZSToken() external onlyGovernance timelockConditionsMet(4) {\r\n        zsTokenAddress = _timelock_address;\r\n    }\r\n    // --------------------\r\n    \r\n    // Change the price oracle contract used, in case of upgrades\r\n    // --------------------\r\n    function startChangePriceOracle(address _address) external onlyGovernance {\r\n        _timelockStart = now;\r\n        _timelockType = 5;\r\n        _timelock_address = _address;\r\n    }\r\n    \r\n    function finishChangePriceOracle() external onlyGovernance timelockConditionsMet(5) {\r\n        oracleContract = StabilizePriceOracle(_timelock_address);\r\n    }\r\n    // --------------------\r\n    \r\n    // Change the trading conditions used by the strategy\r\n    // --------------------\r\n    \r\n    function startChangeTradingConditions(uint256 _pTradeTrigger, uint256 _pSellPercent,  uint256 _minSplit, uint256 _maxStipend, uint256 _pMaxStipend) external onlyGovernance {\r\n        // Changes a lot of trading parameters in one call\r\n        require(_pTradeTrigger <= 100000 && _pSellPercent <= 100000 && _pMaxStipend <= 100000,\"Percent cannot be greater than 100%\");\r\n        _timelockStart = now;\r\n        _timelockType = 6;\r\n        _timelock_data[0] = _pTradeTrigger;\r\n        _timelock_data[1] = _pSellPercent;\r\n        _timelock_data[2] = _minSplit;\r\n        _timelock_data[3] = _maxStipend;\r\n        _timelock_data[4] = _pMaxStipend;\r\n    }\r\n    \r\n    function finishChangeTradingConditions() external onlyGovernance timelockConditionsMet(6) {\r\n        percentTradeTrigger = _timelock_data[0];\r\n        percentSell = _timelock_data[1];\r\n        minTradeSplit = _timelock_data[2];\r\n        gasStipend = _timelock_data[3];\r\n        maxPercentStipend = _timelock_data[4];\r\n    }\r\n    // --------------------\r\n    \r\n    \r\n    // Change the strategy allocations between the parties\r\n    // --------------------\r\n    \r\n    function startChangeStrategyAllocations(uint256 _pDepositors, uint256 _pExecutor, uint256 _pStakers) external onlyGovernance {\r\n        // Changes strategy allocations in one call\r\n        require(_pDepositors <= 100000 && _pExecutor <= 100000 && _pStakers <= 100000,\"Percent cannot be greater than 100%\");\r\n        _timelockStart = now;\r\n        _timelockType = 7;\r\n        _timelock_data[0] = _pDepositors;\r\n        _timelock_data[1] = _pExecutor;\r\n        _timelock_data[2] = _pStakers;\r\n    }\r\n    \r\n    function finishChangeStrategyAllocations() external onlyGovernance timelockConditionsMet(7) {\r\n        percentDepositor = _timelock_data[0];\r\n        percentExecutor = _timelock_data[1];\r\n        percentStakers = _timelock_data[2];\r\n    }\r\n    // --------------------\r\n    \r\n    // Remove tokens not used in strategy from strategy\r\n    // --------------------\r\n    function startRecoverTrappedToken(address _token) external onlyGovernance {\r\n        uint256 length = tokenList.length;\r\n        // Can only remove non-strategy tokens\r\n        for(uint256 i = 0; i < length; i++){\r\n            require(_token != address(tokenList[i].token) && _token != address(tokenList[i].aToken), \"Can only extract non-native tokens from strategy\");\r\n        }\r\n        _timelockStart = now;\r\n        _timelockType = 8;   \r\n        _timelock_address = _token;\r\n    }\r\n    \r\n    function finishRecoverTrappedToken() external onlyGovernance timelockConditionsMet(8) {\r\n        IERC20 token = IERC20(_timelock_address);\r\n        token.safeTransfer(governance(), token.balanceOf(address(this)));\r\n    }\r\n    // --------------------\r\n    \r\n    // Change the strategy vault address\r\n    // --------------------\r\n    function startChangeStrategyVault(address _address) external onlyGovernance {\r\n        _timelockStart = now;\r\n        _timelockType = 9;\r\n        _timelock_address = _address;\r\n    }\r\n    \r\n    function finishChangeStrategyVault() external onlyGovernance timelockConditionsMet(9) {\r\n        strategyVaultAddress = _timelock_address;\r\n    }\r\n    // --------------------\r\n    \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_staking\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zsToken\",\"type\":\"address\"},{\"internalType\":\"contract StabilizePriceOracle\",\"name\":\"_oracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"GovernanceTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"nonContract\",\"type\":\"bool\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"effectivePricePerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minSecSinceLastTrade\",\"type\":\"uint256\"}],\"name\":\"executorSwapTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"inWETHForExecutor\",\"type\":\"bool\"}],\"name\":\"expectedProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishChangePriceOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishChangeStakingPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishChangeStrategyAllocations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishChangeStrategyVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishChangeTradingConditions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishChangeTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishChangeZSToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishGovernanceChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishRecoverTrappedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasStipend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getNormalizedTotalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governanceSwapTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastActionBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTradeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPercentStipend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTradeSplit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentDepositor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentExecutor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentStakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentTradeTrigger\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pos\",\"type\":\"uint256\"}],\"name\":\"rewardTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTokensCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"startChangePriceOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"startChangeStakingPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pDepositors\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pExecutor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pStakers\",\"type\":\"uint256\"}],\"name\":\"startChangeStrategyAllocations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"startChangeStrategyVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pTradeTrigger\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pSellPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minSplit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxStipend\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pMaxStipend\",\"type\":\"uint256\"}],\"name\":\"startChangeTradingConditions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"startChangeTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"startChangeZSToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"startGovernanceChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"startRecoverTrappedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategyVaultAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_share\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"nonContract\",\"type\":\"bool\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawTokenReserves\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zsTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"StabilizeStrategyStablecoinArbV3","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000e05d2a6b97dce9b8e59ad074c2e4b6d51a24aae30000000000000000000000008c17be13e034f7fa2a6496bc83b6010be63052040000000000000000000000008e769eaa31375d13a1247de1e64987c28bed987e00000000000000000000000081a363f3c747dbe947b43486db4c6aa4dc70ddc4","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d9748e47ff36be019316d9e64e9db8fbf8d37df55751e7c4b5adb980aa7b3e25"}]}