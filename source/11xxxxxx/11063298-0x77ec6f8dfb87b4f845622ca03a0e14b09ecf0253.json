{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.6.2;\r\n\r\n\r\nlibrary SafeMath {\r\n   \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;}\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");}\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;}\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {return 0;}\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;}\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");}\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;}\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");}\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;}\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n}\r\n\r\n\r\ncontract Rektsurance {\r\n\tusing SafeMath for uint256;\r\n\t\r\n\taddress internal immutable REKT;\r\n\taddress payable immutable ADMIN_ADDRESS;\r\n\t\r\n\tconstructor(address _REKT) public {\r\n        REKT = _REKT;\r\n        ADMIN_ADDRESS = msg.sender;\r\n    }\r\n\t\r\n\tuint public stakingStartTime = 1611736098;\r\n\tuint private fundAmount;\r\n\tuint public fundCloseTime = 1611736098;\r\n\t\r\n\tbool public fundOpen = false;\r\n\tbool private claimLocked = false;\r\n\t\r\n\t\r\n\treceive() external payable {\r\n    }\r\n\t\r\n\taddress private STAKERADDRESS;\r\n\tbool private StakerAddressGiven = false;\r\n\t\r\n\t//Admin function to define address of staking contract\r\n    //Can only be called once to set staker address\r\n    function setStakerAddress(address _STAKERADDRESS) public {\r\n\t\trequire(msg.sender == ADMIN_ADDRESS, \"Caller is not admin.\");\r\n        require(!StakerAddressGiven, \"Staker Address already defined.\");\r\n        StakerAddressGiven = true;\r\n        STAKERADDRESS = _STAKERADDRESS;\r\n    }\r\n\t\r\n\t//take snapshot of time when staking started\r\n\tfunction startTimer() public {\r\n\t\trequire(msg.sender == STAKERADDRESS, \"Caller is not Staker\");\r\n\t\tstakingStartTime = block.timestamp;\r\n\t}\r\n\t\r\n\t//allow fund opening 2.718281828459045235 weeks after staking start\r\n\t//allow withdrawals for 2.71828 days after opening\r\n\tfunction openFund() public {\r\n\t\trequire(stakingStartTime + 19 days + 40 minutes + 16 seconds <= block.timestamp, \"Fund cannot be opened yet.\");\r\n\t\trequire(!fundOpen, \"Fund is already open.\");\r\n\t\tfundOpen = true;\r\n\t\tfundAmount = address(this).balance;\r\n\t\tfundCloseTime = block.timestamp + 234859;\r\n\t}\r\n\t\r\n\t//function to send ETH\r\n\tfunction sendValue(address payable recipient, uint256 amount) internal {\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\t\r\n\t//claim refund based on share of REKT tokens\r\n\tfunction claimRefund(uint amount) public {\r\n\t\trequire(fundOpen, \"Fund is not open yet.\");\r\n\t\trequire(block.timestamp < fundCloseTime, \"Fund is closed. Claims are not possible anymore.\");\r\n\t\trequire(!claimLocked, \"Reentrant call, nice try!\");\r\n\t\tclaimLocked = true;\r\n\t\t\r\n\t\t//transfer tokens\r\n\t\trequire(IERC20(REKT).transferFrom(msg.sender, address(this), amount), \"Token transfer failed.\");\r\n\t\t\r\n\t\t//get amount of eth to send back\r\n\t\tuint ethRefund = fundAmount.mul(amount).div(IERC20(REKT).totalSupply());\r\n\t\t//send refund\r\n\t\tsendValue(msg.sender, ethRefund);\r\n\t\tclaimLocked = false;\r\n\t}\r\n\t\r\n\t//claim dev payment after claiming period has ended\r\n\tfunction claimAdminPayment() public {\r\n\t\trequire(msg.sender == ADMIN_ADDRESS, \"Caller is not admin.\");\r\n\t\trequire(fundCloseTime <= block.timestamp, \"Fund has not been closed yet.\");\r\n\t\t\r\n\t\t//send all remaining eth to admin address\r\n\t\tsendValue(ADMIN_ADDRESS, address(this).balance);\r\n\t}\r\n\t\r\n\t//get fund amount\r\n\tfunction viewFundAmount() public view returns (uint){\r\n        return address(this).balance;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_REKT\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"claimAdminPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimRefund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundCloseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_STAKERADDRESS\",\"type\":\"address\"}],\"name\":\"setStakerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTimer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewFundAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Rektsurance","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000002bd77f56515cd9e29cbf1d687fa3b593ed4dc844","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://29e6fd1362b83d4a99624bbb35ab9b87b5ed60f34a7e7c95a1ef90728d479e80"}]}