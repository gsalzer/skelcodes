{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.0.2 https://hardhat.org\n\n// File deps/@openzeppelin-upgradableV3/contracts/math/SafeMath.sol\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n\n// File deps/@openzeppelin-upgradableV3/contracts/token/ERC20/IERC20.sol\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n// File deps/@openzeppelin-upgradableV3/contracts/utils/EnumerableSet.sol\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\n * (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping (bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n\n            bytes32 lastvalue = set._values[lastIndex];\n\n            // Move the last value to the index where the value to delete is\n            set._values[toDeleteIndex] = lastvalue;\n            // Update the index for the moved value\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\n        return set._values[index];\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint256(_at(set._inner, index)));\n    }\n\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n}\n\n\n// File deps/@openzeppelin-upgradableV3/contracts/utils/Address.sol\n\npragma solidity ^0.6.2;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n}\n\n\n// File deps/@openzeppelin-upgradableV3/contracts/Initializable.sol\n\npragma solidity >=0.4.24 <0.7.0;\n\n\n/**\n * @title Initializable\n *\n * @dev Helper contract to support initializer functions. To use it, replace\n * the constructor with a function that has the `initializer` modifier.\n * WARNING: Unlike constructors, initializer functions must be manually\n * invoked. This applies both to deploying an Initializable contract, as well\n * as extending an Initializable contract via inheritance.\n * WARNING: When used with inheritance, manual care must be taken to not invoke\n * a parent initializer twice, or ensure that all initializers are idempotent,\n * because this is not dealt with automatically as with constructors.\n */\ncontract Initializable {\n\n  /**\n   * @dev Indicates that the contract has been initialized.\n   */\n  bool private initialized;\n\n  /**\n   * @dev Indicates that the contract is in the process of being initialized.\n   */\n  bool private initializing;\n\n  /**\n   * @dev Modifier to use in the initializer function of a contract.\n   */\n  modifier initializer() {\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\n\n    bool isTopLevelCall = !initializing;\n    if (isTopLevelCall) {\n      initializing = true;\n      initialized = true;\n    }\n\n    _;\n\n    if (isTopLevelCall) {\n      initializing = false;\n    }\n  }\n\n  /// @dev Returns true if and only if the function is running in the constructor\n  function isConstructor() private view returns (bool) {\n    // extcodesize checks the size of the code stored in an address, and\n    // address returns the current address. Since the code is still not\n    // deployed when running a constructor, any checks on its code size will\n    // yield zero, making it an effective way to detect if a contract is\n    // under construction or not.\n    address self = address(this);\n    uint256 cs;\n    assembly { cs := extcodesize(self) }\n    return cs == 0;\n  }\n\n  // Reserved storage space to allow for layout changes in the future.\n  uint256[50] private ______gap;\n}\n\n\n// File deps/@openzeppelin-upgradableV3/contracts/GSN/Context.sol\n\npragma solidity ^0.6.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract ContextUpgradeSafe is Initializable {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n\n\n    }\n\n\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n\n    uint256[50] private __gap;\n}\n\n\n// File deps/@openzeppelin-upgradableV3/contracts/access/AccessControl.sol\n\npragma solidity ^0.6.0;\n\n\n\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, _msgSender()));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n */\nabstract contract AccessControlUpgradeSafe is Initializable, ContextUpgradeSafe {\n    function __AccessControl_init() internal initializer {\n        __Context_init_unchained();\n        __AccessControl_init_unchained();\n    }\n\n    function __AccessControl_init_unchained() internal initializer {\n\n\n    }\n\n    using EnumerableSet for EnumerableSet.AddressSet;\n    using Address for address;\n\n    struct RoleData {\n        EnumerableSet.AddressSet members;\n        bytes32 adminRole;\n    }\n\n    mapping (bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view returns (bool) {\n        return _roles[role].members.contains(account);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\n        return _roles[role].members.length();\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\n        return _roles[role].members.at(index);\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual {\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to grant\");\n\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual {\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to revoke\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        _roles[role].adminRole = adminRole;\n    }\n\n    function _grantRole(bytes32 role, address account) private {\n        if (_roles[role].members.add(account)) {\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    function _revokeRole(bytes32 role, address account) private {\n        if (_roles[role].members.remove(account)) {\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n\n    uint256[49] private __gap;\n}\n\n\n// File deps/@openzeppelin-upgradableV3/contracts/access/Ownable.sol\n\npragma solidity ^0.6.0;\n\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract OwnableUpgradeSafe is Initializable, ContextUpgradeSafe {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n\n    function __Ownable_init() internal initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal initializer {\n\n\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n\n    }\n\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n\n    uint256[49] private __gap;\n}\n\n\n// File contracts/TokenPool.sol\n\n\npragma solidity ^0.6.0;\n\n\n/**\n * @title A simple holder of tokens.\n * This is a simple contract to hold tokens. It's useful in the case where a separate contract\n * needs to hold multiple distinct pools of the same token.\n */\ncontract TokenPool is OwnableUpgradeSafe {\n    IERC20 public token;\n\n    function initialize(IERC20 _token) public initializer {\n        token = _token;\n    }\n\n    function balance() public view returns (uint256) {\n        return token.balanceOf(address(this));\n    }\n\n    function transfer(address to, uint256 value)\n        external\n        onlyOwner\n        returns (bool)\n    {\n        return token.transfer(to, value);\n    }\n}\n\n\n// File contracts/BaseHarvestableGeyser.sol\n\n\npragma solidity ^0.6.0;\npragma experimental ABIEncoderV2;\n\n\n\n\n/**\n * @title Harvestable Geyser\n * @dev A smart-contract based mechanism to distribute tokens over time, inspired loosely by\n *      Compound and Uniswap. Based on the Ampleforth implementation.\n *      (https://github.com/ampleforth/token-geyser/)\n *\n *      Distribution tokens are added to a locked pool in the contract and become unlocked over time\n *      according to a once-configurable unlock schedule. Once unlocked, they are available to be\n *      claimed by users.\n *\n *      A user may deposit tokens to accrue ownership share over the unlocked pool. This owner share\n *      is a function of the number of tokens deposited as well as the length of time deposited.\n *      Specifically, a user's share of the currently-unlocked pool equals their \"deposit-seconds\"\n *      divided by the global \"deposit-seconds\".\n *\n *      More background and motivation available at:\n *      https://github.com/ampleforth/RFCs/blob/master/RFCs/rfc-1.md\n */\ncontract BaseHarvestableGeyser is Initializable, OwnableUpgradeSafe {\n    using SafeMath for uint256;\n\n    event Staked(\n        address indexed user,\n        uint256 amount,\n        uint256 total,\n        bytes data\n    );\n    event Unstaked(\n        address indexed user,\n        uint256 amount,\n        uint256 total,\n        bytes data\n    );\n    event TokensClaimed(\n        address indexed user,\n        uint256 totalReward,\n        uint256 userReward,\n        uint256 founderReward\n    );\n    event TokensLocked(uint256 amount, uint256 durationSec, uint256 total);\n    // amount: Unlocked tokens, total: Total locked tokens\n    event TokensUnlocked(uint256 amount, uint256 total);\n\n    TokenPool internal _stakingPool;\n    TokenPool internal _unlockedPool;\n    TokenPool internal _lockedPool;\n\n    //\n    // Time-bonus params\n    //\n    uint256 public startBonus = 0;\n    uint256 public bonusPeriodSec = 0;\n    uint256 public globalStartTime;\n\n    //\n    // Global accounting state\n    //\n    uint256 public totalLockedShares = 0;\n    uint256 public totalStakingShares = 0;\n    uint256 public totalHarvested = 0;\n    uint256 internal _totalStakingShareSeconds = 0;\n    uint256 internal _totalUnclaimedStakingShareSeconds = 0;\n    uint256 internal _lastAccountingTimestampSec = now;\n    uint256 internal _maxUnlockSchedules = 0;\n    uint256 internal _maxDistributionTokens = 0;\n    uint256 internal _initialSharesPerToken = 0;\n\n    //\n    // User accounting state\n    //\n    // Represents a single stake for a user. A user may have multiple.\n    struct Stake {\n        uint256 stakingShares;\n        uint256 timestampSec;\n        uint256 lastHarvestTimestampSec;\n    }\n\n    // Caches aggregated values from the User->Stake[] map to save computation.\n    // If lastAccountingTimestampSec is 0, there's no entry for that user.\n    struct UserTotals {\n        uint256 stakingShares;\n        uint256 stakingShareSeconds;\n        uint256 lastAccountingTimestampSec;\n        uint256 harvested;\n    }\n\n    // Aggregated staking values per user\n    mapping(address => UserTotals) internal _userTotals;\n\n    // The collection of stakes for each user. Ordered by timestamp, earliest to latest.\n    mapping(address => Stake[]) internal _userStakes;\n\n    //\n    // Locked/Unlocked Accounting state\n    //\n    struct UnlockSchedule {\n        uint256 initialLockedShares;\n        uint256 unlockedShares;\n        uint256 lastUnlockTimestampSec;\n        uint256 endAtSec;\n        uint256 durationSec;\n        uint256 startTime;\n    }\n\n    UnlockSchedule[] public unlockSchedules;\n\n    //\n    // Founder Lock state\n    //\n    uint256 public constant MAX_PERCENTAGE = 100;\n    uint256 public founderRewardPercentage = 0; //0% - 100%\n    address public founderRewardAddress;\n\n    modifier onlyAfterStart() {\n        require(\n            now >= globalStartTime,\n            \"BadgerGeyser: Distribution not started\"\n        );\n        _;\n    }\n\n    /**\n     * @return False. This application does not support staking history.\n     */\n    function supportsHistory() external pure returns (bool) {\n        return false;\n    }\n\n    /**\n     * @return The token users deposit as stake.\n     */\n    function getStakingToken() public view returns (IERC20) {\n        return _stakingPool.token();\n    }\n\n    /**\n     * @return The token users receive as they unstake.\n     */\n    function getDistributionToken() public view returns (IERC20) {\n        assert(_unlockedPool.token() == _lockedPool.token());\n        return _unlockedPool.token();\n    }\n\n    /**\n     * @dev Transfers amount of deposit tokens from the user.\n     * @param amount Number of deposit tokens to stake.\n     */\n    function stake(uint256 amount, bytes calldata data)\n        external\n        onlyAfterStart()\n    {\n        _stakeFor(msg.sender, msg.sender, amount);\n    }\n\n    /**\n     * @dev Transfers amount of deposit tokens from the caller on behalf of user.\n     * @param user User address who gains credit for this stake operation.\n     * @param amount Number of deposit tokens to stake.\n     * @param data Not used.\n     */\n    function stakeFor(\n        address user,\n        uint256 amount,\n        bytes calldata data\n    ) external onlyAfterStart() {\n        _stakeFor(msg.sender, user, amount);\n    }\n\n    /**\n     * @dev Internal implementation of staking methods.\n     * @param staker User address who deposits tokens to stake.\n     * @param beneficiary User address who gains credit for this stake operation.\n     * @param amount Number of deposit tokens to stake.\n     */\n    function _stakeFor(\n        address staker,\n        address beneficiary,\n        uint256 amount\n    ) internal {\n        require(amount > 0, \"BadgerGeyser: stake amount is zero\");\n        require(\n            beneficiary != address(0),\n            \"BadgerGeyser: beneficiary is zero address\"\n        );\n        require(\n            totalStakingShares == 0 || totalStaked() > 0,\n            \"BadgerGeyser: Invalid state. Staking shares exist, but no staking tokens do\"\n        );\n\n        uint256 mintedStakingShares = (totalStakingShares > 0)\n            ? totalStakingShares.mul(amount).div(totalStaked())\n            : amount.mul(_initialSharesPerToken);\n        require(\n            mintedStakingShares > 0,\n            \"BadgerGeyser: Stake amount is too small\"\n        );\n\n        _updateAccounting(staker);\n\n        // 1. User Accounting\n        UserTotals storage totals = _userTotals[beneficiary];\n        totals.stakingShares = totals.stakingShares.add(mintedStakingShares);\n        totals.lastAccountingTimestampSec = now;\n\n        Stake memory newStake = Stake(mintedStakingShares, now, now);\n        _userStakes[beneficiary].push(newStake);\n\n        // 2. Global Accounting\n        totalStakingShares = totalStakingShares.add(mintedStakingShares);\n        // Already set in updateAccounting()\n        // _lastAccountingTimestampSec = now;\n\n        // interactions\n        require(\n            _stakingPool.token().transferFrom(\n                staker,\n                address(_stakingPool),\n                amount\n            ),\n            \"BadgerGeyser: transfer into staking pool failed\"\n        );\n\n        emit Staked(beneficiary, amount, totalStakedFor(beneficiary), \"\");\n    }\n\n    /**\n     * @dev Unstakes a certain amount of previously deposited tokens. User also receives their\n     * alotted number of distribution tokens.\n     * @param amount Number of deposit tokens to unstake / withdraw.\n     * @param data Not used.\n     */\n    function unstake(uint256 amount, bytes calldata data)\n        external\n        onlyAfterStart()\n    {\n        _unstakeFor(msg.sender, amount);\n    }\n\n    /**\n     * @param amount Number of deposit tokens to unstake / withdraw.\n     * @return totalReward The total number of distribution tokens that would be rewarded.\n     * @return userReward The total number of distribution tokens that would be rewarded.\n     * @return founderReward The total number of distribution tokens that would be rewarded.\n\n     */\n    function unstakeQuery(uint256 amount)\n        public\n        returns (\n            uint256 totalReward,\n            uint256 userReward,\n            uint256 founderReward\n        )\n    {\n        return _unstakeFor(msg.sender, amount);\n    }\n\n    /**\n     * @dev Unstakes a certain amount of previously deposited tokens. User also receives their\n     * alotted number of distribution tokens.\n     * @param amount Number of deposit tokens to unstake / withdraw.\n     * @return totalReward The total number of distribution tokens rewarded.\n     * @return userReward The total number of distribution tokens rewarded.\n     * @return founderReward The total number of distribution tokens rewarded.\n     */\n    function _unstakeFor(address user, uint256 amount)\n        internal virtual\n        returns (\n            uint256 totalReward,\n            uint256 userReward,\n            uint256 founderReward\n        )\n    {\n        // checks\n        require(amount > 0, \"BadgerGeyser: unstake amount is zero\");\n        require(\n            totalStakedFor(user) >= amount,\n            \"BadgerGeyser: unstake amount is greater than total user stakes\"\n        );\n        uint256 stakingSharesToBurn = totalStakingShares.mul(amount).div(\n            totalStaked()\n        );\n        require(\n            stakingSharesToBurn > 0,\n            \"BadgerGeyser: Unable to unstake amount this small\"\n        );\n\n        (totalReward, userReward, founderReward) = _calculateHarvest(user);\n\n        // 1. User Accounting\n        UserTotals storage totals = _userTotals[user];\n        Stake[] storage accountStakes = _userStakes[user];\n\n        // Redeem from most recent stake and go backwards in time.\n        uint256 stakingShareSecondsToBurn = 0;\n        uint256 sharesLeftToBurn = stakingSharesToBurn;\n\n        while (sharesLeftToBurn > 0) {\n            Stake storage lastStake = accountStakes[accountStakes.length - 1];\n            uint256 stakeTimeSec = now.sub(lastStake.timestampSec);\n            uint256 newStakingShareSecondsToBurn = 0;\n            if (lastStake.stakingShares <= sharesLeftToBurn) {\n                // fully redeem a past stake\n                newStakingShareSecondsToBurn = lastStake.stakingShares.mul(\n                    stakeTimeSec\n                );\n                stakingShareSecondsToBurn = stakingShareSecondsToBurn.add(\n                    newStakingShareSecondsToBurn\n                );\n                sharesLeftToBurn = sharesLeftToBurn.sub(\n                    lastStake.stakingShares\n                );\n                accountStakes.pop();\n            } else {\n                // partially redeem a past stake\n                newStakingShareSecondsToBurn = sharesLeftToBurn.mul(\n                    stakeTimeSec\n                );\n\n                stakingShareSecondsToBurn = stakingShareSecondsToBurn.add(\n                    newStakingShareSecondsToBurn\n                );\n\n                lastStake.stakingShares = lastStake.stakingShares.sub(\n                    sharesLeftToBurn\n                );\n                sharesLeftToBurn = 0;\n            }\n        }\n        totals.stakingShareSeconds = totals.stakingShareSeconds.sub(\n            stakingShareSecondsToBurn\n        );\n        totals.stakingShares = totals.stakingShares.sub(stakingSharesToBurn);\n        // Already set in updateAccounting\n        // totals.lastAccountingTimestampSec = now;\n\n        // 2. Global Accounting\n        _totalStakingShareSeconds = _totalStakingShareSeconds.sub(\n            stakingShareSecondsToBurn\n        );\n\n        totalStakingShares = totalStakingShares.sub(stakingSharesToBurn);\n        // Already set in updateAccounting\n        // _lastAccountingTimestampSec = now;\n\n        // interactions\n        require(\n            _stakingPool.transfer(user, amount),\n            \"BadgerGeyser: transfer out of staking pool failed\"\n        );\n\n        _transferHarvest(user, totalReward, userReward, founderReward);\n\n        emit Unstaked(user, amount, totalStakedFor(user), \"\");\n\n        require(\n            totalStakingShares == 0 || totalStaked() > 0,\n            \"BadgerGeyser: Error unstaking. Staking shares exist, but no staking tokens do\"\n        );\n    }\n\n    /**\n     * @dev Determines split of specified reward amount between user and founder.\n     * @param totalReward Amount of reward to split.\n     * @return userReward Reward amounts for user and founder.\n     * @return founderReward Reward amounts for user and founder.\n     */\n    function computeFounderReward(uint256 totalReward)\n        public\n        view\n        returns (uint256 userReward, uint256 founderReward)\n    {\n        if (founderRewardPercentage == 0) {\n            userReward = totalReward;\n            founderReward = 0;\n        } else if (founderRewardPercentage == MAX_PERCENTAGE) {\n            userReward = 0;\n            founderReward = totalReward;\n        } else {\n            founderReward = totalReward.mul(founderRewardPercentage).div(\n                MAX_PERCENTAGE\n            );\n            userReward = totalReward.sub(founderReward); // Extra dust due to truncated rounding goes to user\n        }\n    }\n\n    // Transfer accumulated rewards to user & founder address as appropriate\n    function _transferHarvest(\n        address user,\n        uint256 totalReward,\n        uint256 userReward,\n        uint256 founderReward\n    ) internal {\n        if (userReward > 0) {\n            require(\n                _unlockedPool.transfer(user, userReward),\n                \"BadgerGeyser: transfer to user out of unlocked pool failed\"\n            );\n        }\n\n        if (founderReward > 0) {\n            require(\n                _unlockedPool.transfer(founderRewardAddress, founderReward),\n                \"BadgerGeyser: transfer to founder out of unlocked pool failed\"\n            );\n        }\n\n        emit TokensClaimed(user, totalReward, userReward, founderReward);\n    }\n\n    function totalHarvestedFor(address account)\n        public\n        view\n        returns (uint256 totalClaimed)\n    {\n        UserTotals storage totals = _userTotals[account];\n        totalClaimed = totals.harvested;\n    }\n\n    /**\n     * @return totalReward The total number of distribution tokens that would be rewarded.\n     * @return userReward The total number of distribution tokens that would be rewarded.\n     * @return founderReward The total number of distribution tokens that would be rewarded.\n     */\n    function harvestQuery()\n        public\n        returns (\n            uint256 totalReward,\n            uint256 userReward,\n            uint256 founderReward\n        )\n    {\n        (totalReward, userReward, founderReward) = _calculateHarvest(\n            msg.sender\n        );\n        _transferHarvest(msg.sender, totalReward, userReward, founderReward);\n    }\n\n    /**\n     * @dev Claims distribution token reward for previously deposited tokens without withdrawing the stake.\n     * @return totalReward The total number of distribution tokens rewarded.\n     * @return userReward The total number of distribution tokens rewarded.\n     * @return founderReward The total number of distribution tokens rewarded.\n     */\n    function harvest()\n        external\n        onlyAfterStart()\n        returns (\n            uint256 totalReward,\n            uint256 userReward,\n            uint256 founderReward\n        )\n    {\n        (totalReward, userReward, founderReward) = _calculateHarvest(\n            msg.sender\n        );\n        _transferHarvest(msg.sender, totalReward, userReward, founderReward);\n    }\n\n    /**\n     * @dev Claims distribution token reward for previously deposited tokens without withdrawing the stake.\n     * @return totalReward The total number of distribution tokens rewarded.\n     * @return userReward The total number of distribution tokens rewarded.\n     * @return founderReward The total number of distribution tokens rewarded.\n     */\n    function _calculateHarvest(address user)\n        internal\n        returns (\n            uint256 totalReward,\n            uint256 userReward,\n            uint256 founderReward\n        )\n    {\n        _updateAccounting(user);\n\n        // TODO: Return zero if zero claimable?\n\n        // checks\n        require(\n            totalStakedFor(user) > 0,\n            \"BadgerGeyser: user must have staked amount to claim rewards\"\n        );\n\n        // 1. User Accounting\n        UserTotals storage totals = _userTotals[user];\n        Stake[] storage accountStakes = _userStakes[user];\n\n        totalReward = 0;\n        uint256 totalStakingShareSecondsToClaim = 0;\n\n        // Claim for each stake\n        for (uint256 i = 0; i < accountStakes.length; i++) {\n            Stake storage thisStake = accountStakes[i];\n\n            uint256 stakeTimeToClaim = now.sub(\n                thisStake.lastHarvestTimestampSec\n            );\n\n            // Total shares to claim for = share seconds for this stake\n            uint256 stakingShareSecondsToClaim = thisStake.stakingShares.mul(\n                stakeTimeToClaim\n            );\n\n            totalStakingShareSecondsToClaim = totalStakingShareSecondsToClaim\n                .add(stakingShareSecondsToClaim);\n\n            // While we are claiming just since the last claim for this stake, our multiplier is based on the original stake time\n            totalReward = computeNewReward(\n                totalReward,\n                stakingShareSecondsToClaim,\n                thisStake.timestampSec\n            );\n\n            thisStake.lastHarvestTimestampSec = now;\n        }\n\n        // Already set in updateAccounting\n        // totals.lastAccountingTimestampSec = now;\n\n        // User Accounting\n        totals.harvested = totals.harvested.add(totalReward);\n\n        _totalUnclaimedStakingShareSeconds = _totalUnclaimedStakingShareSeconds\n            .sub(totalStakingShareSecondsToClaim);\n\n        // 2. Global Accounting\n        totalHarvested = totalHarvested.add(totalReward);\n        // Already set in updateAccounting\n        // _lastAccountingTimestampSec = now;\n\n        (userReward, founderReward) = computeFounderReward(totalReward);\n    }\n\n    // Weight each one by stake index.\n    function getStakeRewardMultiplier(address user, uint256 stakeIndex)\n        external\n        view\n        returns (uint256)\n    {\n        Stake storage userStake = _userStakes[user][stakeIndex];\n\n        if (userStake.timestampSec >= bonusPeriodSec) {\n            return MAX_PERCENTAGE;\n        }\n\n        // Increase rewards based on total time staked\n        uint256 bonusPercentage = startBonus.add(\n            MAX_PERCENTAGE.sub(startBonus).mul(userStake.timestampSec).div(\n                bonusPeriodSec\n            )\n        );\n        return bonusPercentage;\n    }\n\n    function totalStakingShareSeconds() external view returns (uint256) {\n        return _totalStakingShareSeconds;\n    }\n\n    function totalUnclaimedStakingShareSeconds()\n        external\n        view\n        returns (uint256)\n    {\n        return _totalUnclaimedStakingShareSeconds;\n    }\n\n    function getNumStakes(address user) external view returns (uint256) {\n        return _userStakes[user].length;\n    }\n\n    function getStakes(address user) external view returns (Stake[] memory) {\n        return _getStakes(user);\n    }\n\n    function getStake(address user, uint256 stakeIndex)\n        external\n        view\n        returns (Stake memory userStake)\n    {\n        Stake storage _userStake = _userStakes[user][stakeIndex];\n        userStake = _userStake;\n    }\n\n    function _getStakes(address user) internal view returns (Stake[] memory) {\n        uint256 numStakes = _userStakes[user].length;\n        Stake[] memory stakes = new Stake[](numStakes);\n\n        for (uint256 i = 0; i < _userStakes[user].length; i++) {\n            stakes[i] = _userStakes[user][i];\n        }\n        return stakes;\n    }\n\n    /// @notice Return total unclaimed staking share seconds for user\n    function getUnclaimedStakingShareSeconds(address user)\n        external\n        view\n        returns (uint256 unclaimedStakingShareSeconds)\n    {\n        Stake[] memory stakes = _getStakes(user);\n\n        unclaimedStakingShareSeconds = 0;\n\n        for (uint256 i = 0; i < stakes.length; i++) {\n            unclaimedStakingShareSeconds = unclaimedStakingShareSeconds.add(\n                (now.sub(stakes[i].lastHarvestTimestampSec)).mul(\n                    stakes[i].stakingShares\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Applies an additional time-bonus to a distribution amount. This is necessary to\n     *      encourage long-term deposits instead of constant unstake/restakes.\n     *      The bonus-multiplier is the result of a linear function that starts at startBonus and\n     *      ends at 100% over bonusPeriodSec, then stays at 100% thereafter.\n     * @param currentRewardTokens The current number of distribution tokens already alotted for this\n     *                            unstake op. Any bonuses are already applied.\n     * @param stakingShareSeconds The stakingShare-seconds that are being burned for new\n     *                            distribution tokens.\n     * @param stakeTimeSec Length of time for which the tokens were staked. Needed to calculate\n     *                     the time-bonus.\n     * @return Updated amount of distribution tokens to award, with any bonus included on the\n     *         newly added tokens.\n     */\n    function computeNewReward(\n        uint256 currentRewardTokens,\n        uint256 stakingShareSeconds,\n        uint256 stakeTimeSec\n    ) internal view returns (uint256) {\n        uint256 newRewardTokens = totalUnlocked().mul(stakingShareSeconds).div(\n            _totalUnclaimedStakingShareSeconds\n        );\n\n        if (stakeTimeSec >= bonusPeriodSec) {\n            return currentRewardTokens.add(newRewardTokens);\n        }\n\n        // Increase rewards based on total time staked\n        uint256 oneHundredPct = MAX_PERCENTAGE;\n        uint256 bonusedReward = startBonus\n            .add(\n            oneHundredPct.sub(startBonus).mul(stakeTimeSec).div(bonusPeriodSec)\n        )\n            .mul(newRewardTokens)\n            .div(oneHundredPct);\n        return currentRewardTokens.add(bonusedReward);\n    }\n\n    /**\n     * @param addr The user to look up staking information for.\n     * @return The number of staking tokens deposited for addr.\n     */\n    function totalStakedFor(address addr) public view returns (uint256) {\n        return\n            totalStakingShares > 0\n                ? totalStaked().mul(_userTotals[addr].stakingShares).div(\n                    totalStakingShares\n                )\n                : 0;\n    }\n\n    /**\n     * @return The total number of deposit tokens staked globally, by all users.\n     */\n    function totalStaked() public view returns (uint256) {\n        return _stakingPool.balance();\n    }\n\n    /**\n     * @dev Note that this application has a staking token as well as a distribution token, which\n     * may be different. This function is required by EIP-900.\n     * @return The deposit token used for staking.\n     */\n    function token() external view returns (address) {\n        return address(getStakingToken());\n    }\n\n    /**\n     * @dev A globally callable function to update the accounting state of the system.\n     *      Global state and state for the caller are updated.\n     * @return [0] balance of the locked pool\n     * @return [1] balance of the unlocked pool\n     * @return [2] caller's staking share seconds\n     * @return [3] global staking share seconds\n     * @return [4] Total rewards caller has accumulated, including founder rewards, optimistically assumes max time-bonus.\n     * @return [5] block timestamp\n     */\n    function updateAccounting()\n        public\n        returns (\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        return _updateAccounting(msg.sender);\n    }\n\n    function _updateAccounting(address user)\n        internal\n        returns (\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        unlockTokens();\n\n        // Global accounting\n        uint256 newStakingShareSeconds = now\n            .sub(_lastAccountingTimestampSec)\n            .mul(totalStakingShares);\n\n        _totalStakingShareSeconds = _totalStakingShareSeconds.add(\n            newStakingShareSeconds\n        );\n\n        _totalUnclaimedStakingShareSeconds = _totalUnclaimedStakingShareSeconds\n            .add(newStakingShareSeconds);\n\n        _lastAccountingTimestampSec = now;\n\n        // User Accounting\n        UserTotals storage totals = _userTotals[user];\n        uint256 newUserStakingShareSeconds = now\n            .sub(totals.lastAccountingTimestampSec)\n            .mul(totals.stakingShares);\n        totals.stakingShareSeconds = totals.stakingShareSeconds.add(\n            newUserStakingShareSeconds\n        );\n        totals.lastAccountingTimestampSec = now;\n\n        uint256 totalUserRewards = (_totalUnclaimedStakingShareSeconds > 0)\n            ? totalUnlocked().mul(totals.stakingShareSeconds).div(\n                _totalUnclaimedStakingShareSeconds\n            )\n            : 0;\n\n        return (\n            totalLocked(),\n            totalUnlocked(),\n            totals.stakingShareSeconds,\n            _totalStakingShareSeconds,\n            totalUserRewards,\n            now\n        );\n    }\n\n    /**\n     * @return Total number of locked distribution tokens.\n     */\n    function totalLocked() public view returns (uint256) {\n        return _lockedPool.balance();\n    }\n\n    /**\n     * @return Total number of unlocked distribution tokens.\n     */\n    function totalUnlocked() public view returns (uint256) {\n        return _unlockedPool.balance();\n    }\n\n    /**\n     * @return Number of unlock schedules.\n     */\n    function unlockScheduleCount() public view returns (uint256) {\n        return unlockSchedules.length;\n    }\n\n    /**\n     * @dev This funcion allows the contract owner to add more locked distribution tokens, along\n     *      with the associated \"unlock schedule\". These locked tokens immediately begin unlocking\n     *      linearly over the duraction of durationSec timeframe.\n     * @param amount Number of distribution tokens to lock. These are transferred from the caller.\n     * @param durationSec Length of time to linear unlock the tokens.\n     * @param startTime Time to start distribution.\n     */\n    function lockTokens(\n        uint256 amount,\n        uint256 durationSec,\n        uint256 startTime\n    ) external onlyOwner {\n        _lockTokens(amount, durationSec, startTime);\n    }\n\n    function _lockTokens(\n        uint256 amount,\n        uint256 durationSec,\n        uint256 startTime\n    ) internal {\n        require(\n            unlockSchedules.length < _maxUnlockSchedules,\n            \"BadgerGeyser: reached maximum unlock schedules\"\n        );\n\n        require(\n            startTime >= globalStartTime,\n            \"BadgerGeyser: schedule cannot start before global start time\"\n        );\n\n        // Update lockedTokens amount before using it in computations after.\n        _updateAccounting(msg.sender);\n\n        uint256 lockedTokens = totalLocked();\n        uint256 mintedLockedShares = (lockedTokens > 0)\n            ? totalLockedShares.mul(amount).div(lockedTokens)\n            : amount.mul(_initialSharesPerToken);\n\n        UnlockSchedule memory schedule;\n        schedule.initialLockedShares = mintedLockedShares;\n        schedule.lastUnlockTimestampSec = startTime;\n        schedule.endAtSec = startTime.add(durationSec);\n        schedule.durationSec = durationSec;\n        schedule.startTime = startTime;\n        unlockSchedules.push(schedule);\n\n        totalLockedShares = totalLockedShares.add(mintedLockedShares);\n\n        require(\n            _lockedPool.token().transferFrom(\n                msg.sender,\n                address(_lockedPool),\n                amount\n            ),\n            \"BadgerGeyser: transfer into locked pool failed\"\n        );\n        emit TokensLocked(amount, durationSec, totalLocked());\n    }\n\n    /**\n     * @dev Moves distribution tokens from the locked pool to the unlocked pool, according to the\n     *      previously defined unlock schedules. Publicly callable.\n     * @return Number of newly unlocked distribution tokens.\n     */\n    function unlockTokens() public returns (uint256) {\n        uint256 unlockedTokens = 0;\n        uint256 lockedTokens = totalLocked();\n\n        if (totalLockedShares == 0) {\n            unlockedTokens = lockedTokens;\n        } else {\n            uint256 unlockedShares = 0;\n            for (uint256 s = 0; s < unlockSchedules.length; s++) {\n                unlockedShares = unlockedShares.add(unlockScheduleShares(s));\n            }\n            unlockedTokens = unlockedShares.mul(lockedTokens).div(\n                totalLockedShares\n            );\n            totalLockedShares = totalLockedShares.sub(unlockedShares);\n        }\n\n        if (unlockedTokens > 0) {\n            require(\n                _lockedPool.transfer(address(_unlockedPool), unlockedTokens),\n                \"BadgerGeyser: transfer out of locked pool failed\"\n            );\n            emit TokensUnlocked(unlockedTokens, totalLocked());\n        }\n\n        return unlockedTokens;\n    }\n\n    function getUserHarvested(address user) public view returns (uint256) {\n        UserTotals storage totals = _userTotals[user];\n        return totals.harvested;\n    }\n\n    /**\n     * @dev Returns the number of unlockable shares from a given schedule. The returned value\n     *      depends on the time since the last unlock. This function updates schedule accounting,\n     *      but does not actually transfer any tokens.\n     * @param s Index of the unlock schedule.\n     * @return The number of unlocked shares.\n     */\n    function unlockScheduleShares(uint256 s) internal returns (uint256) {\n        UnlockSchedule storage schedule = unlockSchedules[s];\n\n        if (schedule.unlockedShares >= schedule.initialLockedShares) {\n            return 0;\n        }\n\n        if (now <= schedule.startTime) {\n            return 0;\n        }\n\n        uint256 sharesToUnlock = 0;\n        // Special case to handle any leftover dust from integer division\n        if (now >= schedule.endAtSec) {\n            sharesToUnlock = (\n                schedule.initialLockedShares.sub(schedule.unlockedShares)\n            );\n            schedule.lastUnlockTimestampSec = schedule.endAtSec;\n        } else {\n            sharesToUnlock = now\n                .sub(schedule.lastUnlockTimestampSec)\n                .mul(schedule.initialLockedShares)\n                .div(schedule.durationSec);\n            schedule.lastUnlockTimestampSec = now;\n        }\n\n        schedule.unlockedShares = schedule.unlockedShares.add(sharesToUnlock);\n        return sharesToUnlock;\n    }\n}\n\n\n// File contracts/LockedGeyser.sol\n\n\npragma solidity ^0.6.0;\n// pragma experimental ABIEncoderV2;\n\n\n\n/**\n * @title Locked Geyser\n * @dev A harvestable geyser variant where stakes are locked for a static period of time after staking\n * \n */\ncontract LockedGeyser is BaseHarvestableGeyser {\n    using SafeMath for uint256;\n\n    uint256 public stakeLockDuration;\n\n    event StakeLockDurationSet(uint256 duration);\n\n    /**\n     * @param stakingToken The token users deposit as stake.\n     * @param distributionToken The token users receive as they unstake.\n     * @param maxUnlockSchedules Max number of unlock stages, to guard against hitting gas limit.\n     * @param startBonus_ Starting time bonus, in 2 decimal fixed point.\n     *                    e.g. 25% means user gets 25% of max distribution tokens.\n     * @param bonusPeriodSec_ Length of time for bonus to increase linearly to max.\n     * @param initialSharesPerToken Number of shares to mint per staking token on first stake.\n     * @param globalStartTime_ Timestamp after which unlock schedules and staking can begin.\n     * @param founderRewardAddress_ Recipient address of founder rewards.\n     * @param founderRewardPercentage_ Pecentage of rewards claimed to be distributed for founder address.\n     * @param stakeLockDuration_ Duration staked assets are locked before able to withdraw\n     */\n    function initialize(\n        IERC20 stakingToken,\n        IERC20 distributionToken,\n        uint256 maxUnlockSchedules,\n        uint256 startBonus_,\n        uint256 bonusPeriodSec_,\n        uint256 initialSharesPerToken,\n        uint256 globalStartTime_,\n        address founderRewardAddress_,\n        uint256 founderRewardPercentage_,\n        uint256 stakeLockDuration_\n    ) public initializer {\n        // The start bonus must be some fraction of the max. (i.e. <= 100%)\n        require(\n            startBonus_ <= MAX_PERCENTAGE,\n            \"LockedGeyser: start bonus too high\"\n        );\n\n        // The founder reward must be some fraction of the max. (i.e. <= 100%)\n        require(\n            founderRewardPercentage_ <= MAX_PERCENTAGE,\n            \"LockedGeyser: founder reward too high\"\n        );\n\n        // If no period is desired, instead set startBonus = 100%\n        // and bonusPeriod to a small value like 1sec.\n        require(bonusPeriodSec_ != 0, \"LockedGeyser: bonus period is zero\");\n        require(\n            initialSharesPerToken > 0,\n            \"LockedGeyser: initialSharesPerToken is zero\"\n        );\n\n        __Ownable_init();\n\n        _stakingPool = new TokenPool();\n        _unlockedPool = new TokenPool();\n        _lockedPool = new TokenPool();\n\n        _stakingPool.initialize(stakingToken);\n        _unlockedPool.initialize(distributionToken);\n        _lockedPool.initialize(distributionToken);\n\n        startBonus = startBonus_;\n        globalStartTime = globalStartTime_;\n        bonusPeriodSec = bonusPeriodSec_;\n        _maxUnlockSchedules = maxUnlockSchedules;\n        _initialSharesPerToken = initialSharesPerToken;\n        founderRewardPercentage = founderRewardPercentage_;\n        founderRewardAddress = founderRewardAddress_;\n        stakeLockDuration = stakeLockDuration_;\n\n        emit StakeLockDurationSet(stakeLockDuration_);\n    }\n\n    function setStakeLockDuration(uint256 duration) external onlyOwner {\n        stakeLockDuration = duration;\n        emit StakeLockDurationSet(duration);\n    }\n\n    /// @notice Get the amount of stakingToken that can currently be withdrawn by user\n    function getUnstakable(address user) external view returns (uint256) {\n        return _getUnstakable(user);\n    }\n\n    /// @dev Get the amount of stakingToken that can currently be withdrawn by user\n    function _getUnstakable(address user) internal view returns (uint256 unstakable) {\n        Stake[] memory stakes = _getStakes(user);\n        unstakable = 0;\n        for (uint256 i = 0; i < stakes.length; i++) {\n            if (_isUnstakable(stakes[i].timestampSec.add(stakeLockDuration))) {\n                unstakable.add(stakes[i].stakingShares);\n            }\n        }\n    }\n    \n    /// @dev Check if a stake locked at the given timestamp is unstakable\n    function _isUnstakable(uint256 timestampSec) internal view returns (bool) {\n        return now >= timestampSec.add(stakeLockDuration);\n    }\n\n    /**\n     * @dev Unstakes a certain amount of previously deposited tokens. User also receives their\n     * alotted number of distribution tokens.\n     * @param amount Number of deposit tokens to unstake / withdraw.\n     * @return totalReward The total number of distribution tokens rewarded.\n     * @return userReward The total number of distribution tokens rewarded.\n     * @return founderReward The total number of distribution tokens rewarded.\n     */\n    function _unstakeFor(address user, uint256 amount)\n        internal override\n        returns (\n            uint256 totalReward,\n            uint256 userReward,\n            uint256 founderReward\n        )\n    {\n        // checks\n        require(amount > 0, \"LockedGeyser: unstake amount is zero\");\n        require(\n            totalStakedFor(user) >= amount,\n            \"LockedGeyser: unstake amount is greater than total user stakes\"\n        );\n        uint256 stakingSharesToBurn = totalStakingShares.mul(amount).div(\n            totalStaked()\n        );\n        require(\n            stakingSharesToBurn > 0,\n            \"LockedGeyser: Unable to unstake amount this small\"\n        );\n\n        require(_getUnstakable(user) >= amount, \"LockedGeyser: Insufficent value available to unstake\");\n\n        (totalReward, userReward, founderReward) = _calculateHarvest(user);\n\n        // 1. User Accounting\n        UserTotals storage totals = _userTotals[user];\n        Stake[] storage accountStakes = _userStakes[user];\n\n        // Redeem from most recent stake and go backwards in time.\n        uint256 stakingShareSecondsToBurn = 0;\n        uint256 sharesLeftToBurn = stakingSharesToBurn;\n\n        while (sharesLeftToBurn > 0) {\n            Stake storage lastStake = accountStakes[accountStakes.length - 1];\n            uint256 stakeTimeSec = now.sub(lastStake.timestampSec);\n            uint256 newStakingShareSecondsToBurn = 0;\n            if (lastStake.stakingShares <= sharesLeftToBurn) {\n                // fully redeem a past stake\n                newStakingShareSecondsToBurn = lastStake.stakingShares.mul(\n                    stakeTimeSec\n                );\n                stakingShareSecondsToBurn = stakingShareSecondsToBurn.add(\n                    newStakingShareSecondsToBurn\n                );\n                sharesLeftToBurn = sharesLeftToBurn.sub(\n                    lastStake.stakingShares\n                );\n                accountStakes.pop();\n            } else {\n                // partially redeem a past stake\n                newStakingShareSecondsToBurn = sharesLeftToBurn.mul(\n                    stakeTimeSec\n                );\n\n                stakingShareSecondsToBurn = stakingShareSecondsToBurn.add(\n                    newStakingShareSecondsToBurn\n                );\n\n                lastStake.stakingShares = lastStake.stakingShares.sub(\n                    sharesLeftToBurn\n                );\n                sharesLeftToBurn = 0;\n            }\n        }\n        totals.stakingShareSeconds = totals.stakingShareSeconds.sub(\n            stakingShareSecondsToBurn\n        );\n        totals.stakingShares = totals.stakingShares.sub(stakingSharesToBurn);\n        // Already set in updateAccounting\n        // totals.lastAccountingTimestampSec = now;\n\n        // 2. Global Accounting\n        _totalStakingShareSeconds = _totalStakingShareSeconds.sub(\n            stakingShareSecondsToBurn\n        );\n\n        totalStakingShares = totalStakingShares.sub(stakingSharesToBurn);\n        // Already set in updateAccounting\n        // _lastAccountingTimestampSec = now;\n\n        // interactions\n        require(\n            _stakingPool.transfer(user, amount),\n            \"LockedGeyser: transfer out of staking pool failed\"\n        );\n\n        _transferHarvest(user, totalReward, userReward, founderReward);\n\n        emit Unstaked(user, amount, totalStakedFor(user), \"\");\n\n        require(\n            totalStakingShares == 0 || totalStaked() > 0,\n            \"LockedGeyser: Error unstaking. Staking shares exist, but no staking tokens do\"\n        );\n    }\n}\n","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"StakeLockDurationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"founderReward\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"durationSec\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"TokensLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"TokensUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusPeriodSec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalReward\",\"type\":\"uint256\"}],\"name\":\"computeFounderReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"userReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"founderReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"founderRewardAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"founderRewardPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDistributionToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getNumStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"}],\"name\":\"getStake\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stakingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestampSec\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastHarvestTimestampSec\",\"type\":\"uint256\"}],\"internalType\":\"struct BaseHarvestableGeyser.Stake\",\"name\":\"userStake\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"}],\"name\":\"getStakeRewardMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getStakes\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stakingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestampSec\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastHarvestTimestampSec\",\"type\":\"uint256\"}],\"internalType\":\"struct BaseHarvestableGeyser.Stake[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUnclaimedStakingShareSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unclaimedStakingShareSeconds\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUnstakable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserHarvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"founderReward\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestQuery\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"founderReward\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"distributionToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxUnlockSchedules\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBonus_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusPeriodSec_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialSharesPerToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"globalStartTime_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"founderRewardAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"founderRewardPercentage_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeLockDuration_\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"durationSec\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"name\":\"lockTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"setStakeLockDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"stakeFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeLockDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supportsHistory\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalHarvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"totalHarvestedFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalClaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLockedShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"totalStakedFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakingShareSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakingShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUnclaimedStakingShareSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUnlocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockScheduleCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unlockSchedules\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"initialLockedShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockedShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUnlockTimestampSec\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endAtSec\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"durationSec\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstakeQuery\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"founderReward\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateAccounting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"LockedGeyser","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}