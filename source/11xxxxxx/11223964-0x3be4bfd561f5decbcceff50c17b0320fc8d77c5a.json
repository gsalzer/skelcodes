{"status":"1","message":"OK","result":[{"SourceCode":"{\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"},\"RPEPEBLU.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n////////////////////////////////////////////////////////////////////////////////////\\n////////////////////////////////////////////////////////////////////////////////////\\n////////////////////////////////////////////////////////////////////////////////////\\n//////// THIS IS THE RPEPEBLU POOL OF rPEPE STAKING - rPepe Token Staking //////////\\n////////////////////////////////////////////////////////////////////////////////////\\n////////////////////////////////////////////////////////////////////////////////////\\n////////////////////////////////////////////////////////////////////////////////////\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Context.sol\\\";\\n\\ninterface IPEPE {\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n}\\n\\ncontract RPEPEBLU is Context {\\n    using SafeMath for uint256;\\n    \\n    // Contract state variables\\n    address private _RarePepeV2;\\n    uint256 private _totalStakedAmount;\\n    mapping(address =\\u003e uint256) private _stakedAmount;\\n    address[] private _stakers;\\n\\n    // Events\\n    event Staked(address account, uint256 amount);\\n    event Unstaked(address account, uint256 amount);\\n    \\n    constructor(address RarePepeV2) public {\\n        _RarePepeV2 = RarePepeV2;\\n    }\\n    \\n    /**\\n     * @dev API to stake rPEPE tokens\\n     *\\n     * @param amount: Amount of tokens to deposit\\n     */\\n    function stake(uint256 amount) external {\\n        require(amount \\u003e 0, \\\"Staking amount must be more than zero\\\");\\n        // Transfer tokens from staker to the contract amount\\n        require(IPEPE(_RarePepeV2).transferFrom(_msgSender(), address(this), amount), \\\"It has failed to transfer tokens from staker to contract.\\\");\\n        // add staker to array\\n        if (_stakedAmount[_msgSender()] == 0) {\\n            _stakers.push(_msgSender());\\n        }\\n        // considering the burning 2.5%\\n        uint256 burnedAmount = amount.ceil(100).mul(100).div(4000);\\n        uint256 realStakedAmount = amount.sub(burnedAmount);\\n        // Increase the total staked amount\\n        _totalStakedAmount = _totalStakedAmount.add(realStakedAmount);\\n        // Add staked amount\\n        _stakedAmount[_msgSender()] = _stakedAmount[_msgSender()].add(realStakedAmount);\\n        emit Staked(_msgSender(), realStakedAmount);\\n    }\\n\\n    /**\\n     * @dev API to unstake staked rPEPE tokens\\n     *\\n     * @param amount: Amount of tokens to unstake\\n     *\\n     * requirements:\\n     *\\n     * - Must not be consider the burning amount\\n     */\\n    function unstake(uint256 amount) public {\\n        require(_stakedAmount[_msgSender()] \\u003e 0, \\\"No running stake.\\\");\\n        require(amount \\u003e 0, \\\"Unstaking amount must be more than zero.\\\");\\n        require(_stakedAmount[_msgSender()] \\u003e= amount, \\\"Staked amount must be ustaking amount or more.\\\");\\n        // Transfer tokens from contract amount to staker\\n        require(IPEPE(_RarePepeV2).transfer(_msgSender(), amount), \\\"It has failed to transfer tokens from contract to staker.\\\");\\n        // Decrease the total staked amount\\n        _totalStakedAmount = _totalStakedAmount.sub(amount);\\n        // Decrease the staker\\u0027s staked amount\\n        _stakedAmount[_msgSender()] = _stakedAmount[_msgSender()].sub(amount);\\n        // remove staker from array\\n        if (_stakedAmount[_msgSender()] == 0) {\\n            for (uint256 i=0; i \\u003c _stakers.length; i++) {\\n                if (_stakers[i] == _msgSender()) {\\n                    _stakers[i] = _stakers[_stakers.length.sub(1)];\\n                    _stakers.pop();\\n                    break;\\n                }\\n            }\\n        }\\n        emit Unstaked(_msgSender(), amount);\\n    }\\n    \\n    /**\\n     * @dev API to get the total staked amount of all stakers\\n     */\\n    function getTotalStakedAmount() external view returns (uint256) {\\n        return _totalStakedAmount;\\n    }\\n\\n    /**\\n     * @dev API to get the staker\\u0027s staked amount\\n     */\\n    function getStakedAmount(address account) external view returns (uint256) {\\n        return _stakedAmount[account];\\n    }\\n\\n    /**\\n     * @dev API to get the staker\\u0027s array\\n     */\\n    function getStakers() external view returns (address[] memory) {\\n        return _stakers;\\n    }\\n}\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\n \\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n\\n    function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\\n        uint256 c = add(a, m);\\n        uint256 d = sub(c, 1);\\n        return mul(div(d,m),m);\\n    }\\n}\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"RarePepeV2\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getStakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalStakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"RPEPEBLU","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000e9b56d2233ea2b5883861754435f9c51dbca141","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://2037af7029698a27a071774acff8c1b3cb5b9aa19316aff7041b53c0ec5184b0"}]}