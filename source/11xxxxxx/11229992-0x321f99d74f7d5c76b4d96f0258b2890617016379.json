{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.8; \r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n\r\n    /**\r\n    * @dev Modifier to make a function callable only when the contract is not paused.\r\n    */\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Modifier to make a function callable only when the contract is paused.\r\n    */\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev called by the owner to pause, triggers stopped state\r\n    */\r\n    function pause() onlyOwner whenNotPaused public {\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n\r\n    /**\r\n    * @dev called by the owner to unpause, returns to normal state\r\n    */\r\n    function unpause() onlyOwner whenPaused public {\r\n        paused = false;\r\n        emit Unpause();\r\n    }\r\n}\r\n\r\ncontract StakingContract is Pausable {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(uint256 => ProductAPR) public products; /* Available Products */\r\n    uint256[] public productIds; /* Available Product Ids*/\r\n    mapping(address => uint256[]) public mySubscriptions; /* Address Based Subcriptions */\r\n    uint256 incrementId = 0;\r\n    uint256 lockedTokens = 0;\r\n\r\n    uint256 constant private year = 365 days;\r\n    \r\n    ERC20 public erc20;\r\n\r\n    struct SubscriptionAPR {\r\n        uint256 _id;\r\n        uint256 productId;\r\n        uint256 startDate;\r\n        uint256 endDate;\r\n        uint256 amount;\r\n        address subscriberAddress;\r\n        uint256 APR; /* APR for this product */\r\n        bool finalized;\r\n    }\r\n\r\n    struct ProductAPR {\r\n        uint256 createdAt;\r\n        uint256 startDate;\r\n        uint256 endDate;\r\n        uint256 totalMaxAmount;\r\n        uint256 individualMinimumAmount;\r\n        uint256 APR; /* APR for this product */\r\n        uint256 currentAmount;\r\n        bool lockedUntilFinalization; /* Product can only be withdrawn when finalized */\r\n        address[] subscribers;\r\n        uint256[] subscriptionIds;\r\n        mapping(uint256 => SubscriptionAPR) subscriptions; /* Distribution object */\r\n    }\r\n    \r\n    constructor(address _tokenAddress) public {\r\n        erc20 = ERC20(_tokenAddress);\r\n    }\r\n\r\n    function random() private view returns (uint) {\r\n        return uint(keccak256(abi.encode(block.difficulty, now)));\r\n    } \r\n    \r\n    /* Current Held Tokens */\r\n    function heldTokens() public view returns (uint256) {\r\n        return erc20.balanceOf(address(this));\r\n    }\r\n\r\n    /* Locked Tokens for the APR */\r\n    function futureLockedTokens() public view returns (uint256) {\r\n        return lockedTokens;\r\n    }\r\n\r\n    /* Available Tokens to he APRed by future subscribers */\r\n    function availableTokens() public view returns (uint256) {\r\n        return heldTokens().sub(futureLockedTokens());\r\n    }\r\n\r\n    function subscribeProduct(uint256 _product_id, uint256 _amount) external whenNotPaused {\r\n\r\n        /* Confirm Amount is positive */\r\n        require(_amount > 0);\r\n     \r\n        /* Confirm product still exists */\r\n        require(block.timestamp < products[_product_id].endDate);\r\n\r\n        /* Confirm Max Amount was not hit already */\r\n        require(products[_product_id].totalMaxAmount > (products[_product_id].currentAmount + _amount));\r\n\r\n        /* Confirm Amount is bigger than minimum Amount */\r\n        require(_amount >= products[_product_id].individualMinimumAmount);\r\n        \r\n        uint256 futureAPRAmount = getAPRAmount(products[_product_id].APR, block.timestamp, products[_product_id].endDate, _amount);\r\n\r\n        /* Confirm the current funds can assure the user the APR is valid */\r\n        require(availableTokens() >= futureAPRAmount);\r\n\r\n        /* Confirm the user has funds for the transfer */\r\n        require(erc20.transferFrom(msg.sender, address(this), _amount));\r\n\r\n        /* Add to LockedTokens */\r\n        lockedTokens = lockedTokens.add(_amount.add(futureAPRAmount));\r\n\r\n        uint256 subscription_id = random().add(incrementId);\r\n        incrementId = incrementId + 1;\r\n\r\n        /* Create SubscriptionAPR Object */\r\n        SubscriptionAPR memory subscriptionAPR = SubscriptionAPR(subscription_id, _product_id, block.timestamp, products[_product_id].endDate, _amount, \r\n        msg.sender, products[_product_id].APR, false);\r\n\r\n        /* Create new subscription */\r\n        mySubscriptions[msg.sender].push(subscription_id);\r\n        products[_product_id].subscriptionIds.push(subscription_id);\r\n        products[_product_id].subscriptions[subscription_id] = subscriptionAPR;\r\n        products[_product_id].currentAmount = products[_product_id].currentAmount + _amount;\r\n        products[_product_id].subscribers.push(msg.sender);\r\n    }\r\n\r\n    function createProduct(uint256 _startDate, uint256 _endDate, uint256 _totalMaxAmount, uint256 _individualMinimumAmount, uint256 _APR, bool _lockedUntilFinalization) external whenNotPaused onlyOwner {\r\n\r\n        /* Confirmations */\r\n        require(block.timestamp < _endDate);\r\n        require(block.timestamp <= _startDate);\r\n        require(_startDate < _endDate);\r\n        require(_totalMaxAmount > 0);\r\n        require(_individualMinimumAmount > 0);\r\n        require(_totalMaxAmount > _individualMinimumAmount);\r\n        require(_APR > 0);\r\n\r\n        address[] memory addressesI;\r\n        uint256[] memory subscriptionsI;\r\n        \r\n        /* Create SubscriptionAPR Object */\r\n        ProductAPR memory productAPR = ProductAPR(block.timestamp, _startDate, _endDate, _totalMaxAmount, _individualMinimumAmount, _APR, 0, _lockedUntilFinalization,\r\n            addressesI, subscriptionsI);\r\n\r\n        uint256 product_id = productIds.length + 1;\r\n\r\n        /* Add Product to System */\r\n        productIds.push(product_id);\r\n        products[product_id] = productAPR;\r\n    }\r\n\r\n\r\n    function getAPRAmount(uint256 _APR, uint256 _startDate, uint256 _endDate, uint256 _amount) public pure returns(uint256) {\r\n        return ((_endDate.sub(_startDate)).mul(_APR).mul(_amount)).div(year.mul(100));\r\n    }\r\n\r\n    function getProductIds() public view returns(uint256[] memory) {\r\n        return productIds;\r\n    }\r\n\r\n    function getMySubscriptions(address _address) public view returns(uint256[] memory) {\r\n        return mySubscriptions[_address];\r\n    }\r\n\r\n    function withdrawSubscription(uint256 _product_id, uint256 _subscription_id) external whenNotPaused {\r\n\r\n        /* Confirm Product exists */\r\n        require(products[_product_id].endDate != 0);\r\n\r\n        /* Confirm Subscription exists */\r\n        require(products[_product_id].subscriptions[_subscription_id].endDate != 0);\r\n\r\n        /* Confirm Subscription is not finalized */\r\n        require(products[_product_id].subscriptions[_subscription_id].finalized == false);\r\n\r\n        /* Confirm Subscriptor is the sender */\r\n        require(products[_product_id].subscriptions[_subscription_id].subscriberAddress == msg.sender);\r\n\r\n        SubscriptionAPR memory subscription = products[_product_id].subscriptions[_subscription_id];\r\n\r\n        /* Confirm start date has already passed */\r\n        require(block.timestamp > subscription.startDate);\r\n\r\n        /* Confirm end date for APR */\r\n        uint256 finishDate = block.timestamp;\r\n\r\n        /* Verify if date has passed the end date */\r\n        if(block.timestamp >= subscription.endDate){\r\n            finishDate = subscription.endDate;\r\n        }else{\r\n            /* Confirm the Product can be withdrawn at any time */\r\n            require(products[_product_id].lockedUntilFinalization == false);\r\n        }\r\n\r\n        /* Update Subscription */\r\n        products[_product_id].subscriptions[_subscription_id].finalized = true;\r\n        uint256 APRedAmount = getAPRAmount(subscription.APR, subscription.startDate, finishDate, subscription.amount);\r\n        require(APRedAmount > 0);\r\n        uint256 totalAmount = subscription.amount.add(APRedAmount);\r\n\r\n        /* Transfer funds to the subscriber address */\r\n        require(erc20.transfer(subscription.subscriberAddress, totalAmount));\r\n\r\n        /* Sub to LockedTokens */\r\n        lockedTokens = lockedTokens.sub(totalAmount);\r\n    }   \r\n\r\n    function getSubscription(uint256 _subscription_id, uint256 _product_id) external view returns (uint256, uint256, uint256, uint256, uint256, address, uint256, bool){\r\n\r\n        SubscriptionAPR memory subscription = products[_product_id].subscriptions[_subscription_id];\r\n\r\n        return (subscription._id, subscription.productId, subscription.startDate, subscription.endDate, \r\n            subscription.amount, subscription.subscriberAddress, subscription.APR, subscription.finalized);\r\n    }\r\n    \r\n    function getProduct(uint256 _product_id) external view returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256, bool, address[] memory, uint256[] memory){\r\n\r\n        ProductAPR memory product = products[_product_id];\r\n\r\n        return (product.createdAt, product.startDate, product.endDate, product.totalMaxAmount, \r\n            product.individualMinimumAmount, product.APR, product.currentAmount, product.lockedUntilFinalization,\r\n            product.subscribers, product.subscriptionIds\r\n        );\r\n    }\r\n    \r\n    function safeGuardAllTokens(address _address) external onlyOwner whenPaused  { /* In case of needed urgency for the sake of contract bug */\r\n        require(erc20.transfer(_address, erc20.balanceOf(address(this))));\r\n    }\r\n\r\n    function changeTokenAddress(address _tokenAddress) external onlyOwner whenPaused  {\r\n        /* If Needed to Update the Token Address (ex : token swap) */\r\n        erc20 = ERC20(_tokenAddress);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_product_id\",\"type\":\"uint256\"},{\"name\":\"_subscription_id\",\"type\":\"uint256\"}],\"name\":\"withdrawSubscription\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getMySubscriptions\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_product_id\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"subscribeProduct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startDate\",\"type\":\"uint256\"},{\"name\":\"_endDate\",\"type\":\"uint256\"},{\"name\":\"_totalMaxAmount\",\"type\":\"uint256\"},{\"name\":\"_individualMinimumAmount\",\"type\":\"uint256\"},{\"name\":\"_APR\",\"type\":\"uint256\"},{\"name\":\"_lockedUntilFinalization\",\"type\":\"bool\"}],\"name\":\"createProduct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getProductIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"availableTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"heldTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"futureLockedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"erc20\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"products\",\"outputs\":[{\"name\":\"createdAt\",\"type\":\"uint256\"},{\"name\":\"startDate\",\"type\":\"uint256\"},{\"name\":\"endDate\",\"type\":\"uint256\"},{\"name\":\"totalMaxAmount\",\"type\":\"uint256\"},{\"name\":\"individualMinimumAmount\",\"type\":\"uint256\"},{\"name\":\"APR\",\"type\":\"uint256\"},{\"name\":\"currentAmount\",\"type\":\"uint256\"},{\"name\":\"lockedUntilFinalization\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_APR\",\"type\":\"uint256\"},{\"name\":\"_startDate\",\"type\":\"uint256\"},{\"name\":\"_endDate\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getAPRAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_subscription_id\",\"type\":\"uint256\"},{\"name\":\"_product_id\",\"type\":\"uint256\"}],\"name\":\"getSubscription\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mySubscriptions\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"safeGuardAllTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_product_id\",\"type\":\"uint256\"}],\"name\":\"getProduct\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"changeTokenAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"productIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"StakingContract","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000bce7bd79558dda90b261506768f265c5543a9f90","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://1e233ce4f852c08b9531ec42db4d55b41f92b4753231f3e3e3589042deaca558"}]}