{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.6;\r\n\r\ncontract RedBalloons{\r\n\tuint constant $ = 1e18;\r\n\tPyramid PiZZa = Pyramid(0x91683899ed812C1AC49590779cb72DA6BF7971fE);//0x91683899ed812C1AC49590779cb72DA6BF7971fE\r\n\tMagicLamp lamp = MagicLamp(0xDBc940a4f7060fc4F88CE5B3724252d781080Bb8);//0x9Fe88B7c973e94391db5EF94f1011cB07813c501\r\n\t\r\n\t//priorities\r\n\tERC20 balloonToken = ERC20(0xe888730325620bCaB4dF7852222D3b041c8479A8);//0x6523203bd28d399068acc14db6b7f31d9bf43f1a\r\n\tERC20 spamToken = ERC20(0xe888730325620bCaB4dF7852222D3b041c8479A8);//0xe888730325620bCaB4dF7852222D3b041c8479A8\r\n\tERC20 MVT = ERC20(0x3D46454212c61ECb7b31248047Fa033120B88668);//0x3d46454212c61ecb7b31248047fa033120b88668\r\n\tERC20 MDT = ERC20(0x32A087D5fdF8c84eC32554c56727a7C81124544E);//0x32a087d5fdf8c84ec32554c56727a7c81124544e\r\n\tERC20 XYO = ERC20(0x55296f69f40Ea6d20E478533C15A6B08B654E758);//0x55296f69f40ea6d20e478533c15a6b08b654e758\r\n\tERC20 SENT = ERC20(0xa44E5137293E855B1b7bC7E2C6f8cD796fFCB037);//0xa44e5137293e855b1b7bc7e2c6f8cd796ffcb037\r\n\r\n\t//other\r\n\tERC20 x_moonday = ERC20(0x1ad606ADDe97c0C28bD6ac85554176bC55783c01);//0x1ad606adde97c0c28bd6ac85554176bc55783c01\r\n\tERC20 x_drc = ERC20(0xb78B3320493a4EFaa1028130C5Ba26f0B6085Ef8);//0xb78b3320493a4efaa1028130c5ba26f0b6085ef8\r\n\tERC20 x_barnbond = ERC20(0x0391D2021f89DC339F60Fff84546EA23E337750f);//0x0391D2021f89DC339F60Fff84546EA23E337750f\r\n\tERC20 x_wetstuff = ERC20(0xEa319e87Cf06203DAe107Dd8E5672175e3Ee976c);//0xea319e87cf06203dae107dd8e5672175e3ee976c\r\n\tERC20 x_BCO = ERC20(0x865D176351f287fE1B0010805b110d08699C200A);//0x865d176351f287fe1b0010805b110d08699c200a\r\n\tERC20 x_CID = ERC20(0x4599836c212CD988EAccc54C820Ee9261cdaAC71);//0x4599836c212CD988EAccc54C820Ee9261cdaAC71\r\n\tERC20 x_RFOX = ERC20(0xa1d6Df714F91DeBF4e0802A542E13067f31b8262);//0xa1d6df714f91debf4e0802a542e13067f31b8262\r\n\tERC20 x_GLM = ERC20(0x7DD9c5Cba05E151C895FDe1CF355C9A1D5DA6429);//0x7dd9c5cba05e151c895fde1cf355c9a1d5da6429\r\n\tERC20 x_BRD = ERC20(0x558EC3152e2eb2174905cd19AeA4e34A23DE9aD6);//0x558ec3152e2eb2174905cd19aea4e34a23de9ad6\r\n\tERC20 x_OCTO = ERC20(0x7240aC91f01233BaAf8b064248E80feaA5912BA3);//0x7240ac91f01233baaf8b064248e80feaa5912ba3\r\n\tERC20 x_UNI = ERC20(0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984);//0x1f9840a85d5af5bf1d1762f925bdaddc4201f984\r\n\tERC20 x_PEPE = ERC20(0x4D2eE5DAe46C86DA2FF521F7657dad98834f97b8);//0x4d2ee5dae46c86da2ff521f7657dad98834f97b8\r\n\tERC20 x_BZZZZ = ERC20(0xC483ad6F9B80B38691E95b708DE1d46721366ce3);//0xc483ad6f9b80b38691e95b708de1d46721366ce3\r\n\t/**/\r\n\t/*\r\n\tPyramid PiZZa = Pyramid(0x549118968e49bf7c6126b45ef1E5e5337Fd1D95d);//0x91683899ed812C1AC49590779cb72DA6BF7971fE\r\n\tMagicLamp lamp = MagicLamp(0x74272A0AF03665f36F052946b98cf88ef3613e26);//0x9Fe88B7c973e94391db5EF94f1011cB07813c501\r\n\t\r\n\t//priorities\r\n\tERC20 balloonToken = ERC20(0x11ffC453B47a13037BaBe3227c80D25D9eC129F9);//0x6523203bd28d399068acc14db6b7f31d9bf43f1a\r\n\tERC20 spamToken = ERC20(0x11ffC453B47a13037BaBe3227c80D25D9eC129F9);//0xe888730325620bCaB4dF7852222D3b041c8479A8\r\n\tERC20 MVT = ERC20(0x11ffC453B47a13037BaBe3227c80D25D9eC129F9);//0x3d46454212c61ecb7b31248047fa033120b88668\r\n\tERC20 MDT = ERC20(0x11ffC453B47a13037BaBe3227c80D25D9eC129F9);//0x32a087d5fdf8c84ec32554c56727a7c81124544e\r\n\tERC20 XYO = ERC20(0x11ffC453B47a13037BaBe3227c80D25D9eC129F9);//0x55296f69f40ea6d20e478533c15a6b08b654e758\r\n\tERC20 SENT = ERC20(0x11ffC453B47a13037BaBe3227c80D25D9eC129F9);//0xa44e5137293e855b1b7bc7e2c6f8cd796ffcb037\r\n\r\n\t//other\r\n\tERC20 x_moonday = ERC20(0x11ffC453B47a13037BaBe3227c80D25D9eC129F9);//0x1ad606adde97c0c28bd6ac85554176bc55783c01\r\n\tERC20 x_drc = ERC20(0x11ffC453B47a13037BaBe3227c80D25D9eC129F9);//0xb78b3320493a4efaa1028130c5ba26f0b6085ef8\r\n\tERC20 x_barnbond = ERC20(0x11ffC453B47a13037BaBe3227c80D25D9eC129F9);//0x0391D2021f89DC339F60Fff84546EA23E337750f\r\n\tERC20 x_wetstuff = ERC20(0x11ffC453B47a13037BaBe3227c80D25D9eC129F9);//0xea319e87cf06203dae107dd8e5672175e3ee976c\r\n\tERC20 x_BCO = ERC20(0x11ffC453B47a13037BaBe3227c80D25D9eC129F9);//0x865d176351f287fe1b0010805b110d08699c200a\r\n\tERC20 x_CID = ERC20(0x11ffC453B47a13037BaBe3227c80D25D9eC129F9);//0x4599836c212CD988EAccc54C820Ee9261cdaAC71\r\n\tERC20 x_RFOX = ERC20(0x11ffC453B47a13037BaBe3227c80D25D9eC129F9);//0xa1d6df714f91debf4e0802a542e13067f31b8262\r\n\tERC20 x_GLM = ERC20(0x11ffC453B47a13037BaBe3227c80D25D9eC129F9);//0x7dd9c5cba05e151c895fde1cf355c9a1d5da6429\r\n\tERC20 x_BRD = ERC20(0x11ffC453B47a13037BaBe3227c80D25D9eC129F9);//0x558ec3152e2eb2174905cd19aea4e34a23de9ad6\r\n\tERC20 x_OCTO = ERC20(0x11ffC453B47a13037BaBe3227c80D25D9eC129F9);//0x7240ac91f01233baaf8b064248e80feaa5912ba3\r\n\tERC20 x_UNI = ERC20(0x11ffC453B47a13037BaBe3227c80D25D9eC129F9);//0x1f9840a85d5af5bf1d1762f925bdaddc4201f984\r\n\tERC20 x_PEPE = ERC20(0x11ffC453B47a13037BaBe3227c80D25D9eC129F9);//0x4d2ee5dae46c86da2ff521f7657dad98834f97b8\r\n\tERC20 x_BZZZZ = ERC20(0x11ffC453B47a13037BaBe3227c80D25D9eC129F9);//0xc483ad6f9b80b38691e95b708de1d46721366ce3\r\n\t*/\r\n\r\n\r\n\taddress THIS = address(this);\r\n\taddress address0 = address(0);\r\n\taddress payable Haley;\r\n\r\n\tuint genesis;\r\n\tuint timeLastBalloonPopped;\r\n\tuint totalEthContributed;\r\n\r\n\taddress feather;\r\n\taddress cattle;\r\n\taddress panda;\r\n\taddress penguin;\r\n\taddress gold;\r\n\taddress water;\r\n\taddress fox;\r\n\taddress bat;\r\n\taddress wheat;\r\n\taddress skull;\r\n\taddress shootingStar;\r\n\taddress deer;\r\n\taddress crane;\r\n\taddress wolf;\r\n\taddress moon;\r\n\taddress bee;\r\n\taddress monkey;\r\n\taddress eye;\r\n\taddress golem;\r\n\taddress pawPrints;\r\n\taddress goat;\r\n\taddress lion;\r\n\taddress unicorn;\r\n\taddress octopus;\r\n\taddress frog;\r\n\taddress forest;\r\n\taddress snake;\r\n\taddress spider;\r\n\taddress rose;\r\n\taddress sunflower;\r\n\taddress palmTree;\r\n\taddress dragonFly;\r\n\taddress shroom;\r\n\r\n\tuint redBalloonsLeftOnTheWall = 99;\r\n\tbool redBalloonOnTheLoose;\r\n\taddress redBalloonLocation;\r\n\r\n\tmapping(address => uint8) token_R;\r\n\tmapping(address => uint8) token_G;\r\n\tmapping(address => uint8) token_B;\r\n\tmapping(address => uint) token_Color;\r\n\t\r\n\taddress balloonGiver;\r\n\tuint rationCost = 0.0002 ether;\r\n\t\r\n\tToken spamJerky;\r\n\tToken R99;\r\n\r\n\tmapping( address => bool) ofBalloons;\r\n\r\n\r\n\tfunction ofBalloon(address addr) internal view returns(bool){\r\n\t\treturn ofBalloons[addr];\r\n\t}\r\n\r\n\tfunction ofRug(address addr) public view returns(bool){\r\n\t\treturn ofBalloon(addr) || lamp.ofRug(addr);\r\n\t}\r\n\r\n\tfunction tokenRGB(address token) public view returns(uint R,uint G,uint B, uint C){\r\n\t\tif( ofBalloon(token) || token == address(spamJerky) )\r\n\t\t\treturn (token_R[token], token_G[token], token_B[token], token_Color[token]);\r\n\t\telse if( lamp.ofRug(token) ){\r\n\t\t\t( R, G, B ) = RugToken(token)._RGB();\r\n\t\t\treturn ( R,G,B , 1 );\r\n\t\t}\r\n\t\trevert();\r\n\t}\r\n\r\n\tconstructor(){\r\n\t\t//literally a test to prove this latest modification works\r\n\t\tspamJerky = newCard(\"Spam Jerky\", \"SpJ\", 2, 1, 1, 5);\r\n\t\tR99 = newCard(\"Red Balloon\", \"R99\", 3, 0, 0, 99);// this should be pretty fucking high forever\r\n\r\n\t\tfeather= 0xaD288361179bF882999eCc21C67f0A378e59cdBe;\r\n\t\tcattle= 0x58D07E94e042907b73f73d40943f7800fAa72Be7;\r\n\t\tpanda= 0xEB8016B75296f6813d6b19214D5242e502bAA77a;\r\n\t\tpenguin= 0x9A813eEA1Ff09886822B82C50C69166e0ABA3eA8;\r\n\t\tgold= 0x6C2206803D7b391680115AC58300a7E8A4BF3A86;\r\n\t\twater= 0x3552F79387a2Bf7CF523EB17754557C00fFdeBd4;\r\n\t\tfox= 0x3552F79387a2Bf7CF523EB17754557C00fFdeBd4;\r\n\t\tbat= 0xa21dCf1d1Af5B90Ba595Ac1A75fef02BA0B50783;\r\n\t\twheat= 0x8CbEbb53B8a055aCdAA8Cf5926A1a49943b6886C;\r\n\t\tskull= 0x1d62238AA18a06dc81825cA3D587F63dE25Ad64E;\r\n\t\tshootingStar= 0xe96E4fAf6471e0c81FD50272B78Cf38ee23B408d;\r\n\t\tdeer= 0x7B6f4f87C3a26a9aEf7783376270baff6b862cAB;\r\n\t\tcrane= 0xF272bD18A29F2D443Ad0691a92dF33D677caDE05;\r\n\t\twolf= 0x9277d525296ee2F97B0d0542EC8CB897f13aCA67;\r\n\t\tmoon= 0x1aBB66426ee9A3540B1218E1013c3505465074A1;\r\n\t\tbee= 0x4c2F0aD9848cADc43542A0d3Cfca5C6614389529;\r\n\t\tmonkey= 0x8C55726D2930f1f9CD852304fA034598FD583363;\r\n\t\teye= 0xf1858E92c8e85EB4C2a47FccA4f5544669703669;\r\n\t\tgolem= 0x852c23ec1dD46119c66E00Ab9177bd3856957462;\r\n\t\tpawPrints= 0xe9f7894459f8dBfE561180C59f1D5296da87F50d;\r\n\t\tgoat= 0xA86de0151cC62A93de3EA437Af2ED518720974df;\r\n\t\tlion= 0x001db9B1C90fd9f980771d55b2B9Ac5fD17d76Cc;\r\n\t\tunicorn= 0x96A3fC06Bb4A754e8029e1F302F2c7BB2c75A30d;\r\n\t\toctopus= 0xfd7360c316c997962b2a054cE62502a1cB94E433;\r\n\t\tfrog= 0x4c5b1A5c0e3837b76B0f9023360008aF6F6486D5;\r\n\t\tforest= 0xEDf5f8324F3fa8476c2f3b70476ACf2362288E03;\r\n\t\tsnake= 0xE297b0fb3aF82D7a57dFd3901a3F31fe077f6dD3;\r\n\t\tspider= 0x8DCA2943C3029A534f0adC0110d9ae03d6A4ba34;\r\n\t\trose= 0x89d82551aB98Edce5B0f2bd186c9F777aa44dC00;\r\n\t\tsunflower= 0x9855038469cb77E96412e95078bd116247114ace;\r\n\t\tpalmTree= 0x54bFd5EcF6a6dF7fE51f4dFAeA603029A168289b;\r\n\t\tdragonFly= 0xA57550bef190c0db3E03922e4aFb156B27e76d95;\r\n\t\tshroom= 0xfb762d7ae46803C91e0db759e417d57Bf2726362;\r\n\r\n\t\tredBalloonLocation = panda;\r\n\r\n\t\tHaley = msg.sender;\r\n\t\tballoonGiver = Haley;\r\n\t\tgenesis = block.timestamp;\r\n\t\ttimeLastBalloonPopped = block.timestamp;\r\n\r\n\t\tmoreShares(Haley, 1e18);//just so we can kick things off without having to wait.\r\n\t}\r\n\r\n\tToken snowman;\r\n\tToken jack_o_lantern;\r\n\tToken blackSwan;\r\n\tToken haleysArrow;\r\n\tToken moonHowler;\r\n\tToken vampire;\r\n\tToken miracleMilk;\r\n\tToken beeHive;\r\n\tToken surfBoard;\r\n\tToken canoe;\r\n\tToken boat;\r\n\tToken submarine;\r\n\tToken apeIn;\r\n\tToken teleporter;\r\n\tToken thirdEye;\r\n\tToken hourglassStarDust;\r\n\tToken manyPlace;\r\n\tToken chimeraGargoyle;\r\n\tToken kyuubi;\r\n\tToken ironGiant;\r\n\tToken bread;\r\n\tToken kraken;\r\n\tToken pegasus;\r\n\tToken tyrone;\r\n\tToken honey;\r\n\tToken sniperDrone;\r\n\tToken[] cards;\r\n\r\n\tfunction newCard(string memory name, string memory symbol, uint8 R, uint8 G, uint8 B, uint C) internal returns(Token){\r\n\t\tToken newToken = new Token(name, symbol);\r\n\t\taddress rBT = address(newToken);\r\n\t\tofBalloons[rBT] = true;\r\n\t\ttoken_R[rBT] = R;\r\n\t\ttoken_G[rBT] = G;\r\n\t\ttoken_B[rBT] = B;\r\n\t\ttoken_Color[rBT] = C; \r\n\t\tcards.push(newToken);\r\n\t\treturn newToken;\r\n\t}\r\n\r\n/*\r\n██████╗░░█████╗░░██████╗██╗░█████╗░░██████╗\r\n██╔══██╗██╔══██╗██╔════╝██║██╔══██╗██╔════╝\r\n██████╦╝███████║╚█████╗░██║██║░░╚═╝╚█████╗░\r\n██╔══██╗██╔══██║░╚═══██╗██║██║░░██╗░╚═══██╗\r\n██████╦╝██║░░██║██████╔╝██║╚█████╔╝██████╔╝\r\n╚═════╝░╚═╝░░╚═╝╚═════╝░╚═╝░╚════╝░╚═════╝░\r\n*/\r\n\r\n\r\n\tfunction floatingCastle() public view returns(address _floatingCastle){\r\n\t\t(,,,,,,_floatingCastle,) = lamp.XY(address0);\r\n\t}\r\n\tfunction isCaravan(address kingdom) public view returns(bool IS){\r\n\t\t(,,,,,,,IS) = lamp.XY(kingdom);\r\n\t}\r\n\r\n/*\r\n░██████╗░███████╗████████╗  ██╗░░██╗██╗░░░██╗\r\n██╔════╝░██╔════╝╚══██╔══╝  ╚██╗██╔╝╚██╗░██╔╝\r\n██║░░██╗░█████╗░░░░░██║░░░  ░╚███╔╝░░╚████╔╝░\r\n██║░░╚██╗██╔══╝░░░░░██║░░░  ░██╔██╗░░░╚██╔╝░░\r\n╚██████╔╝███████╗░░░██║░░░  ██╔╝╚██╗░░░██║░░░\r\n░╚═════╝░╚══════╝░░░╚═╝░░░  ╚═╝░░╚═╝░░░╚═╝░░░\r\n*/\r\n\r\n\tfunction getXY(address kingdom) public view returns(uint X, uint Y){\r\n\t\t(X,Y,,,,,,) = lamp.XY(kingdom);\r\n\t}\r\n\r\n\r\n/*\r\n██████╗░██████╗░░█████╗░██╗░░██╗██╗███╗░░░███╗██╗████████╗██╗░░░██╗\r\n██╔══██╗██╔══██╗██╔══██╗╚██╗██╔╝██║████╗░████║██║╚══██╔══╝╚██╗░██╔╝\r\n██████╔╝██████╔╝██║░░██║░╚███╔╝░██║██╔████╔██║██║░░░██║░░░░╚████╔╝░\r\n██╔═══╝░██╔══██╗██║░░██║░██╔██╗░██║██║╚██╔╝██║██║░░░██║░░░░░╚██╔╝░░\r\n██║░░░░░██║░░██║╚█████╔╝██╔╝╚██╗██║██║░╚═╝░██║██║░░░██║░░░░░░██║░░░\r\n╚═╝░░░░░╚═╝░░╚═╝░╚════╝░╚═╝░░╚═╝╚═╝╚═╝░░░░░╚═╝╚═╝░░░╚═╝░░░░░░╚═╝░░░*/\r\n\tfunction proximity(address one, address two, bool _4_8) public view returns(bool){\r\n\t\t(uint x1, uint y1) = getXY(one);\r\n\t\t(uint x2, uint y2) = getXY(two);\r\n\t\t\r\n\t\tuint distance = (x1<x2?(x2-x1):(x1-x2)) + (y1<y2?(y2-y1):(y1-y2));\r\n\t\taddress _floatingCastle = floatingCastle();\r\n\t\treturn ( (distance == 1) || ( _4_8 && (distance == 2 && x1 != x2 && y1 !=y2) )  ) && one != _floatingCastle && two != _floatingCastle;\r\n\t}\r\n\r\n\t/*\r\n\tFreeze Spam\r\n\tfor Shares on PiZZa dividends that come from whatever valid kingdom the balloon is floating over\r\n\tballoon giver gets 5%\r\n\tdev gets 5%\r\n\t\r\n\r\n\tGive a fraction of spam to those who buy Rations\r\n\tThe % of new eth compared to input eth. (yes, it becomes increasingly difficult to get 100% of spam.)\r\n\r\n\r\n\tthe buyer that causes the kingdom to become the floating kingdom pops the balloon.\r\n\tor the buyer that buys while the kingdom with the balloon is floating\r\n\t*/\r\n\r\n/*\r\n░██████╗████████╗░█████╗░░█████╗░██╗░░██╗  ██████╗░░█████╗░██╗░░░░░██╗░░░░░░█████╗░░█████╗░███╗░░██╗\r\n██╔════╝╚══██╔══╝██╔══██╗██╔══██╗██║░██╔╝  ██╔══██╗██╔══██╗██║░░░░░██║░░░░░██╔══██╗██╔══██╗████╗░██║\r\n╚█████╗░░░░██║░░░██║░░██║██║░░╚═╝█████═╝░  ██████╦╝███████║██║░░░░░██║░░░░░██║░░██║██║░░██║██╔██╗██║\r\n░╚═══██╗░░░██║░░░██║░░██║██║░░██╗██╔═██╗░  ██╔══██╗██╔══██║██║░░░░░██║░░░░░██║░░██║██║░░██║██║╚████║\r\n██████╔╝░░░██║░░░╚█████╔╝╚█████╔╝██║░╚██╗  ██████╦╝██║░░██║███████╗███████╗╚█████╔╝╚█████╔╝██║░╚███║\r\n╚═════╝░░░░╚═╝░░░░╚════╝░░╚════╝░╚═╝░░╚═╝  ╚═════╝░╚═╝░░╚═╝╚══════╝╚══════╝░╚════╝░░╚════╝░╚═╝░░╚══╝*/\r\n\tmapping( uint => mapping(address=>uint) ) stockedBalloons;\r\n\tmapping( uint => address ) recordSetter;\r\n\tfunction stockBalloonToken(uint amount) public{\r\n\t\t\r\n\t\taddress sender = msg.sender;\r\n\t\trequire( 0<amount && PiZZa.balanceOf(sender) >= 10e18 );\r\n\t\tballoonToken.transferFrom(sender, THIS, amount);\r\n\t\tstockedBalloons[redBalloonsLeftOnTheWall][sender] += amount;\r\n\t\tuint newCount = stockedBalloons[redBalloonsLeftOnTheWall][sender];\r\n\t\t\r\n\t\tmoreShares(sender, amount*9/10);\r\n\t\tmoreShares(/*for the current balloon giver*/balloonGiver, amount/20);\r\n\t\tmoreShares(/* operational */ Haley, amount/20);\r\n\r\n\t\tif( stockedBalloons[redBalloonsLeftOnTheWall][ recordSetter[redBalloonsLeftOnTheWall] ] < newCount ){\r\n\t\t\trecordSetter[redBalloonsLeftOnTheWall] = sender;\r\n\t\t}\r\n\t}\r\n\r\n/*\r\n██████╗░███████╗██╗░░░░░███████╗░█████╗░░██████╗███████╗  ██████╗░░█████╗░██╗░░░░░██╗░░░░░░█████╗░░█████╗░███╗░░██╗\r\n██╔══██╗██╔════╝██║░░░░░██╔════╝██╔══██╗██╔════╝██╔════╝  ██╔══██╗██╔══██╗██║░░░░░██║░░░░░██╔══██╗██╔══██╗████╗░██║\r\n██████╔╝█████╗░░██║░░░░░█████╗░░███████║╚█████╗░█████╗░░  ██████╦╝███████║██║░░░░░██║░░░░░██║░░██║██║░░██║██╔██╗██║\r\n██╔══██╗██╔══╝░░██║░░░░░██╔══╝░░██╔══██║░╚═══██╗██╔══╝░░  ██╔══██╗██╔══██║██║░░░░░██║░░░░░██║░░██║██║░░██║██║╚████║\r\n██║░░██║███████╗███████╗███████╗██║░░██║██████╔╝███████╗  ██████╦╝██║░░██║███████╗███████╗╚█████╔╝╚█████╔╝██║░╚███║\r\n╚═╝░░╚═╝╚══════╝╚══════╝╚══════╝╚═╝░░╚═╝╚═════╝░╚══════╝  ╚═════╝░╚═╝░░╚═╝╚══════╝╚══════╝░╚════╝░░╚════╝░╚═╝░░╚══╝*/\r\n\tfunction releaseBalloon() public{\r\n\t\t\r\n\t\taddress sender = msg.sender;\r\n\t\taddress theNewGuy = recordSetter[redBalloonsLeftOnTheWall];\r\n\t\trequire(\r\n\t\t\t( timeLastBalloonPopped+86400 < block.timestamp || sender == theNewGuy )\r\n\t\t\t&& theNewGuy != address0//we need to keep this so that the balloonGiver is not null. giving money to null address\r\n\t\t\t&& redBalloonsLeftOnTheWall > 0\r\n\t\t\t&& panda != floatingCastle()\r\n\t\t\t&& !redBalloonOnTheLoose\r\n\t\t);\r\n\t\tballoonGiver = theNewGuy;\r\n\t\tredBalloonsLeftOnTheWall -= 1;\r\n\t\tredBalloonLocation = panda;\r\n\t\tredBalloonOnTheLoose = true;\r\n\t}\r\n\r\n\r\n/*\r\n██████╗░██╗░░░██╗██╗░░░██╗  ░██████╗██████╗░░█████╗░███╗░░░███╗  ░░░░░██╗███████╗██████╗░██╗░░██╗██╗░░░██╗\r\n██╔══██╗██║░░░██║╚██╗░██╔╝  ██╔════╝██╔══██╗██╔══██╗████╗░████║  ░░░░░██║██╔════╝██╔══██╗██║░██╔╝╚██╗░██╔╝\r\n██████╦╝██║░░░██║░╚████╔╝░  ╚█████╗░██████╔╝███████║██╔████╔██║  ░░░░░██║█████╗░░██████╔╝█████═╝░░╚████╔╝░\r\n██╔══██╗██║░░░██║░░╚██╔╝░░  ░╚═══██╗██╔═══╝░██╔══██║██║╚██╔╝██║  ██╗░░██║██╔══╝░░██╔══██╗██╔═██╗░░░╚██╔╝░░\r\n██████╦╝╚██████╔╝░░░██║░░░  ██████╔╝██║░░░░░██║░░██║██║░╚═╝░██║  ╚█████╔╝███████╗██║░░██║██║░╚██╗░░░██║░░░\r\n╚═════╝░░╚═════╝░░░░╚═╝░░░  ╚═════╝░╚═╝░░░░░╚═╝░░╚═╝╚═╝░░░░░╚═╝  ░╚════╝░╚══════╝╚═╝░░╚═╝╚═╝░░╚═╝░░░╚═╝░░░*/\r\n\tfunction buySpamJerky() public payable{\r\n\t\t\r\n\t\tuint val = msg.value;\r\n\t\taddress sender = msg.sender;\r\n\t\trequire(\r\n\t\t\tval % rationCost == 0\r\n\t\t\t&& balloonOrGiftBoxOnBoard()\r\n\t\t\t&& (val/rationCost)>0\r\n\t\t);\r\n\t\tuint rations = val / rationCost;\r\n\t\tRugToken rug = RugToken(redBalloonLocation);\r\n\t\t(uint R, uint G, uint B) = rug._RGB();\r\n\t\tuint createdPiZZa = lamp.buy{value:val}( Haley, ($*R) /3, ($*G)/3, ($*B)/3 );\r\n\t\t//this makes it harder and harder to unfreeze all the spam.\r\n\t\t//this also distributes spam to more holders\r\n\t\ttotalEthContributed += val;\r\n\r\n\t\tuint spamCount = spamToken.balanceOf(THIS);\r\n\t\tif(spamCount>0)\r\n\t\t\tspamToken.transfer(sender, spamCount * val / totalEthContributed );\r\n\r\n\t\t//generate rations for the buyer.\r\n\t\tspamJerky.mint(sender, rations);\r\n\t\tperShare += createdPiZZa * scaleFactor / totalShares;\r\n\r\n\t\taddress rugReceiver = floatingCastle();\r\n\t\tif( redBalloonLocation == rugReceiver ){\r\n\t\t\tR99.mint(sender, 1);\r\n\t\t\ttimeLastBalloonPopped = block.timestamp;\r\n\t\t\tredBalloonOnTheLoose = false;\r\n\t\t\trationCost += 0.0002 ether;\r\n\t\t\trugReceiver = sender;\r\n\t\t}\r\n\r\n\t\tuint rugs = rug.balanceOf(THIS);\r\n\r\n\t\tif(rugs/2 > 0)\r\n\t\t\trug.transfer(sender, rugs/2);\r\n\t\tif(rugs/2 > 0)\r\n\t\t\trug.transfer(rugReceiver, rugs/2);\r\n\t}\r\n\r\n\tfunction balloonOrGiftBoxOnBoard() public view returns(bool){\r\n\t\treturn redBalloonOnTheLoose || (redBalloonsLeftOnTheWall == 99/* gift box starts game */);\r\n\t}\r\n\r\n/*\r\n\r\n░██████╗░██╗░░░██╗░██████╗████████╗  ░█████╗░███╗░░██╗██████╗░\r\n██╔════╝░██║░░░██║██╔════╝╚══██╔══╝  ██╔══██╗████╗░██║██╔══██╗\r\n██║░░██╗░██║░░░██║╚█████╗░░░░██║░░░  ███████║██╔██╗██║██║░░██║\r\n██║░░╚██╗██║░░░██║░╚═══██╗░░░██║░░░  ██╔══██║██║╚████║██║░░██║\r\n╚██████╔╝╚██████╔╝██████╔╝░░░██║░░░  ██║░░██║██║░╚███║██████╔╝\r\n░╚═════╝░░╚═════╝░╚═════╝░░░░╚═╝░░░  ╚═╝░░╚═╝╚═╝░░╚══╝╚═════╝░\r\n\r\n██████╗░░█████╗░░█████╗░  ██████╗░███████╗██████╗░███████╗███████╗███╗░░░███╗\r\n██╔══██╗██╔══██╗██╔══██╗  ██╔══██╗██╔════╝██╔══██╗██╔════╝██╔════╝████╗░████║\r\n██████╔╝╚██████║╚██████║  ██████╔╝█████╗░░██║░░██║█████╗░░█████╗░░██╔████╔██║\r\n██╔══██╗░╚═══██║░╚═══██║  ██╔══██╗██╔══╝░░██║░░██║██╔══╝░░██╔══╝░░██║╚██╔╝██║\r\n██║░░██║░█████╔╝░█████╔╝  ██║░░██║███████╗██████╔╝███████╗███████╗██║░╚═╝░██║\r\n╚═╝░░╚═╝░╚════╝░░╚════╝░  ╚═╝░░╚═╝╚══════╝╚═════╝░╚══════╝╚══════╝╚═╝░░░░░╚═╝*/\r\n\t//for receiving Feather Rugs\r\n\tfunction tokenFallback(address from, uint value, bytes calldata _data) external{\r\n\t\t\r\n\t\taddress TOKEN = msg.sender;\r\n\t\tif(TOKEN == feather){\r\n\t\t\trequire( redBalloonOnTheLoose && value == 1);\r\n\t\t\tRugToken(TOKEN).transfer(panda, 1);\r\n\t\t\tmoveBalloon( bytesToAddress(_data) );\r\n\t\t}else if( TOKEN == address(R99) ){\t\r\n\t\t\tpopR99(from, value);\r\n\t\t}else{\r\n\t\t\trevert();\r\n\t\t}\r\n\t}\r\n\r\n\tfunction popR99(address from, uint value) internal{\r\n\t\trequire(\r\n\t\t\tredBalloonsLeftOnTheWall == 0\r\n\t\t\t&& !redBalloonOnTheLoose \r\n\t\t\t&& block.timestamp > timeLastBalloonPopped+(timeLastBalloonPopped-genesis)\r\n\t\t);\r\n\t\tpinata(from, MVT, value);\r\n\t\tpinata(from, MDT, value);\r\n\t\tpinata(from, XYO, value);\r\n\t\tpinata(from, SENT, value);\r\n\t\tpinata(from, x_moonday, value);\r\n\t\tpinata(from, x_drc, value);\r\n\t\tpinata(from, x_barnbond, value);\r\n\t\tpinata(from, x_wetstuff, value);\r\n\t\tpinata(from, x_BCO, value);\r\n\t\tpinata(from, x_CID, value);\r\n\t\tpinata(from, x_RFOX, value);\r\n\t\tpinata(from, x_GLM, value);\r\n\t\tpinata(from, x_BRD, value);\r\n\t\tpinata(from, x_OCTO, value);\r\n\t\tpinata(from, x_UNI, value);\r\n\t\tpinata(from, x_PEPE, value);\r\n\t\tpinata(from, x_BZZZZ, value);\r\n\t}\r\n\r\n\tfunction pinata(address who, ERC20 erc, uint value) internal{ erc.approve( who, balloonLocked[erc] * value / 100 ); }\r\n\r\n\tfunction moveBalloon(address destination) internal{\r\n\t\trequire(\r\n\t\t\tredBalloonLocation != floatingCastle()\r\n\t\t\t&& redBalloonOnTheLoose \r\n\t\t\t&& proximity(redBalloonLocation,destination,false)\r\n\t\t\t&& ofRug(destination)\r\n\t\t);\r\n\r\n\t\tredBalloonLocation = destination;\r\n\t}\r\n\tfunction bytesToAddress(bytes memory bys) internal pure returns (address addr){\r\n\t\tassembly {\r\n\t\t  addr := mload(add(bys,20))\r\n\t\t} \r\n\t}\r\n\r\n\tuint public totalShares;\r\n\tuint perShare;\r\n\tuint scaleFactor = 10000000000000;\r\n\tmapping(address => uint) public shares;\r\n\tmapping(address => uint) payouts;\r\n\r\n/*\r\n███████╗░█████╗░██████╗░███╗░░██╗██╗███╗░░██╗░██████╗░░██████╗\r\n██╔════╝██╔══██╗██╔══██╗████╗░██║██║████╗░██║██╔════╝░██╔════╝\r\n█████╗░░███████║██████╔╝██╔██╗██║██║██╔██╗██║██║░░██╗░╚█████╗░\r\n██╔══╝░░██╔══██║██╔══██╗██║╚████║██║██║╚████║██║░░╚██╗░╚═══██╗\r\n███████╗██║░░██║██║░░██║██║░╚███║██║██║░╚███║╚██████╔╝██████╔╝\r\n╚══════╝╚═╝░░╚═╝╚═╝░░╚═╝╚═╝░░╚══╝╚═╝╚═╝░░╚══╝░╚═════╝░╚═════╝░*/\r\n\tfunction moreShares(address who, uint _shares) internal{\r\n\t\ttotalShares += _shares;\r\n\t\tshares[who] += _shares;\r\n\t\tpayouts[who] += perShare*_shares;\r\n\t}\r\n\r\n\tfunction dividendsOf(address who) public view returns(uint dividends){\r\n\t\treturn ( ( shares[who] * perShare - payouts[who] ) / scaleFactor );  \r\n\t}\r\n\r\n\tfunction withdrawDividends(address destination) public{\r\n\t\t\r\n\t\taddress sender = msg.sender;\r\n\t\tif(destination == address0) destination = sender;\r\n\r\n\t\tuint $PIZZA = dividendsOf( sender);\r\n\t\tpayouts[sender] = shares[sender] * perShare;\r\n\r\n\t\tif( $PIZZA > 0 ){\r\n\t\t\tPiZZa.transfer( destination, $PIZZA);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction haleysWithdraw() public{\r\n\t\trequire(msg.sender == Haley);\r\n\t\taddress[] memory kingdoms;\r\n\t\tuint[] memory fomoRounds;\r\n\t\tlamp.withdrawDividends(kingdoms, fomoRounds, Haley);\r\n\t}\r\n\tbool glassBalloonPopped;\r\n\tfunction glassBalloon() public{\r\n\t\trequire(msg.sender == Haley && glassBalloonPopped == false);\r\n\t\tpopR99(Haley, 1);\r\n\t\tglassBalloonPopped = true;\r\n\t}\r\n\r\n/*\r\n░██████╗██████╗░░█████╗░███╗░░░███╗  ███████╗██╗░░██╗████████╗██████╗░░█████╗░░██████╗\r\n██╔════╝██╔══██╗██╔══██╗████╗░████║  ██╔════╝╚██╗██╔╝╚══██╔══╝██╔══██╗██╔══██╗██╔════╝\r\n╚█████╗░██████╔╝███████║██╔████╔██║  █████╗░░░╚███╔╝░░░░██║░░░██████╔╝███████║╚█████╗░\r\n░╚═══██╗██╔═══╝░██╔══██║██║╚██╔╝██║  ██╔══╝░░░██╔██╗░░░░██║░░░██╔══██╗██╔══██║░╚═══██╗\r\n██████╔╝██║░░░░░██║░░██║██║░╚═╝░██║  ███████╗██╔╝╚██╗░░░██║░░░██║░░██║██║░░██║██████╔╝\r\n╚═════╝░╚═╝░░░░░╚═╝░░╚═╝╚═╝░░░░░╚═╝  ╚══════╝╚═╝░░╚═╝░░░╚═╝░░░╚═╝░░╚═╝╚═╝░░╚═╝╚═════╝░*/\r\n\tfunction spamExclusiveCards(uint8 cardCode, uint amount) public{\r\n\t\taddress sender = msg.sender;\r\n\t\trequire( amount>0 && $*amount<=spamToken.allowance(sender, THIS) && PiZZa.balanceOf(sender) >= $ && balloonOrGiftBoxOnBoard() );\r\n\t\tspamToken.transferFrom(sender, THIS, $*amount);\r\n\t\tuint Y;\r\n\t\tif(cardCode == 0){\r\n\t\t\t//Snow Man\r\n\t\t\t(,Y)=getXY(penguin);\r\n\t\t\trequire( redBalloonLocation == penguin && Y>=7);\r\n\t\t\tif(address(snowman) == address0){snowman = newCard(\"Christmas\",\"FRoST\",3,3,3,3); amount *= 1000;}\r\n\t\t\tsnowman.mint(sender, 7*amount);\r\n\t\t}else if(cardCode == 1){\r\n\t\t\t//Jack-o-Lantern\r\n\t\t\trequire(\r\n\t\t\t\tproximity(skull,fox,false)\r\n\t\t\t\t&& proximity(bat,fox,false)\r\n\t\t\t\t&& proximity(spider,fox,true)\r\n\t\t\t);\r\n\t\t\tif(address(jack_o_lantern) == address0){jack_o_lantern = newCard(\"Jack-O-Lantern\",\"JaCK\",3,1,0,4); amount *= 100;}\r\n\t\t\tjack_o_lantern.mint(sender, 4*amount);\r\n\t\t}else if(cardCode == 2){\r\n\t\t\t//Black Swan\r\n\t\t\t(,Y)=getXY(crane);\t\t\r\n\t\t\trequire( proximity(skull,crane,false) && Y<=2 );\r\n\t\t\tif(address(blackSwan) == address0){blackSwan = newCard(\"Black Swan\",\"SWaN\",0,0,0, 7); amount *= 100;}\r\n\t\t\tblackSwan.mint(sender, amount);\r\n\t\t}else if(cardCode == 3){\r\n\t\t\t//Artemis' Arrow\r\n\t\t\trequire( floatingCastle() == forest && inCenter_onGround(deer) && isCaravan(deer) );\r\n\t\t\tif(address(haleysArrow) == address0){haleysArrow = newCard(\"Haley's Arrow\",\"ARTMS\",3,3,2, 4); amount *= 100;}\r\n\t\t\thaleysArrow.mint(sender, 10*amount);\r\n\t\t}else if(cardCode == 4){\r\n\t\t\t//Honey\r\n\t\t\trequire( proximity(bee, rose, false) || proximity(bee, sunflower, false) );\r\n\t\t\tif(address(honey) == address0){honey = newCard(\"Honey\",\"H0NEY\",3,2,0, 2); amount *= 10000;}\r\n\t\t\thoney.mint(sender, 10*amount);\r\n\t\t}else{\r\n\t\t\trevert();\r\n\t\t}\r\n\t}\r\n/*\r\n░█████╗░████████╗██╗░░██╗███████╗██████╗░  ░█████╗░░█████╗░██████╗░██████╗░░██████╗\r\n██╔══██╗╚══██╔══╝██║░░██║██╔════╝██╔══██╗  ██╔══██╗██╔══██╗██╔══██╗██╔══██╗██╔════╝\r\n██║░░██║░░░██║░░░███████║█████╗░░██████╔╝  ██║░░╚═╝███████║██████╔╝██║░░██║╚█████╗░\r\n██║░░██║░░░██║░░░██╔══██║██╔══╝░░██╔══██╗  ██║░░██╗██╔══██║██╔══██╗██║░░██║░╚═══██╗\r\n╚█████╔╝░░░██║░░░██║░░██║███████╗██║░░██║  ╚█████╔╝██║░░██║██║░░██║██████╔╝██████╔╝\r\n░╚════╝░░░░╚═╝░░░╚═╝░░╚═╝╚══════╝╚═╝░░╚═╝  ░╚════╝░╚═╝░░╚═╝╚═╝░░╚═╝╚═════╝░╚═════╝░*/\r\n\tmapping( ERC20 => uint) balloonLocked;\r\n\tfunction otherCards(uint8 cardCode, uint amount) public payable{\r\n\t\trequire( amount>0);\r\n\t\taddress sender = msg.sender;\r\n\t\tuint cost = $;\r\n\t\tuint reward = 1;\r\n\t\tERC20 tokenConsumed;\r\n\t\tToken cardCreated;\r\n\t\tif(cardCode == 0){\r\n\t\t\ttokenConsumed = MVT;\r\n\t\t\tcost *= 100;\r\n\t\t\tif(address(thirdEye) == address0 ){ thirdEye = newCard(\"Third Eye\",\"3rd\",2,0,2, 9); reward *= 10;}\r\n\t\t\tcardCreated = thirdEye;\r\n\t\t\trequire( isCaravan(shroom) && floatingCastle() == eye );\r\n\t\t}else if(cardCode == 1){\r\n\t\t\ttokenConsumed = MDT;\r\n\t\t\treward = 100;\r\n\t\t\tif(address(hourglassStarDust) == address0 ){ hourglassStarDust = newCard(\"Seconds\",\"2nd\",0,1,1, 1); reward *= 10;}\r\n\t\t\tcardCreated = hourglassStarDust;\r\n\t\t\trequire( isCaravan(shootingStar) );\r\n\t\t}else if(cardCode == 2){\r\n\t\t\ttokenConsumed = XYO;\r\n\t\t\tcost *= 100;\r\n\t\t\tif(address(teleporter) == address0 ){ teleporter = newCard(\"Teleporter\",\"XY0\",2,0,1, 5); reward *= 10;}\r\n\t\t\tcardCreated = teleporter;\r\n\t\t\t(uint X, uint Y) = getXY(pawPrints);\r\n\t\t\trequire( (X==1||X==8) && (Y==1||Y==8) );\r\n\t\t}else if(cardCode == 3){\r\n\t\t\tcost = cost/100;\r\n\t\t\ttokenConsumed = x_moonday;\r\n\t\t\tif(address(moonHowler) == address0){moonHowler = newCard(\"Shadow Wolf\",\"WoLF\",6,6,6, 6); reward *= 6;}\r\n\t\t\tcardCreated = moonHowler;\r\n\t\t\trequire( redBalloonLocation == wolf && floatingCastle() == moon );\r\n\t\t}else if(cardCode == 4){\r\n\t\t\ttokenConsumed = x_drc;\r\n\t\t\tcost *= 100;\r\n\t\t\tif( address(vampire) == address0 ){\r\n\t\t\t\tvampire = newCard(\"Vampire\",\"VaMP\",2,0,0, 6);\r\n\t\t\t\tdracula = new Token(\"DRACULA LORD TOKEN\", \"DLT\");\r\n\t\t\t\tdracula.mint(sender, 1);\r\n\t\t\t}\r\n\t\t\tcardCreated = vampire;\r\n\t\t\trequire( floatingCastle() == bat && redBalloonsLeftOnTheWall%11 == 0 );\r\n\t\t}else if(cardCode == 5){\r\n\t\t\ttokenConsumed = x_barnbond;\r\n\t\t\tif( address(miracleMilk) == address0 ){miracleMilk = newCard(\"Miracle Milk\",\"Moo\",3,3,3, 2); reward *=10;}\r\n\t\t\tcardCreated = miracleMilk;\r\n\t\t\trequire(  redBalloonLocation == cattle );\r\n\t\t}else if(cardCode == 6){\r\n\t\t\ttokenConsumed = x_wetstuff;\r\n\t\t\tcost *= 50;\r\n\t\t\tif(redBalloonsLeftOnTheWall>=54){\r\n\t\t\t\tif(address(surfBoard) == address0 ){ surfBoard = newCard(\"Surf Board\",\"SuRF\",0,1,3, 1); reward *= 10;}\r\n\t\t\t\tcardCreated = surfBoard;\r\n\t\t\t}else if(redBalloonsLeftOnTheWall>=22){\r\n\t\t\t\tif(address(canoe) == address0 ){ canoe = newCard(\"Canoe\",\"PaDDl\",1,2,3, 2); reward *= 10;}\r\n\t\t\t\tcardCreated = canoe;\r\n\t\t\t}else if(redBalloonsLeftOnTheWall>=7){\r\n\t\t\t\tif(address(boat) == address0 ){boat = newCard(\"Boat\",\"SaIL\",0,0,3, 4); reward *= 10;}\r\n\t\t\t\tcardCreated = boat;\r\n\t\t\t}else if(redBalloonsLeftOnTheWall>=0){\r\n\t\t\t\tif(address(submarine) == address0 ){submarine = newCard(\"Submarine\",\"SuB\",0,0,1, 6); reward *= 10;}\r\n\t\t\t\tcardCreated = submarine;\r\n\t\t\t}\r\n\t\t\trequire( redBalloonLocation == water && inCenter_onGround(water) );\r\n\t\t}else if(cardCode == 7){\r\n\t\t\ttokenConsumed = x_BCO;\r\n\t\t\tcost *= 10;\r\n\t\t\tif(address(apeIn) == address0 ){ apeIn = newCard(\"Fomo Ape\",\"FoMo\",2,2,0, 7); reward *= 10;}\r\n\t\t\tcardCreated = apeIn;\r\n\t\t\trequire( redBalloonLocation == monkey && proximity(palmTree, monkey, false) );\r\n\t\t}else if(cardCode == 8){\r\n\t\t\ttokenConsumed = SENT;\r\n\t\t\tcost *= 300;\r\n\t\t\tif(address(manyPlace) == address0 ){ manyPlace = newCard(\"Many Place\",\"MPl\",2,0,3, 13); reward *= 3;}\r\n\t\t\tcardCreated = manyPlace;\r\n\t\t\trequire( floatingCastle() == goat && (redBalloonsLeftOnTheWall == 99 || redBalloonsLeftOnTheWall == 0) );\r\n\t\t}else if(cardCode == 9){\r\n\t\t\ttokenConsumed = x_CID;\r\n\t\t\tcost *= 66*(100-redBalloonsLeftOnTheWall);\r\n\t\t\tif(address(chimeraGargoyle) == address0 ){ chimeraGargoyle = newCard(\"Chimera Gargoyle\",\"ChG\",2,2,2, 8); reward *= 10;}\r\n\t\t\tcardCreated = chimeraGargoyle;\r\n\t\t\trequire( \r\n\t\t\t\tinCenter_onGround(lion)\r\n\t\t\t\t&&inCenter_onGround(goat)\r\n\t\t\t\t&&inCenter_onGround(snake)\r\n\t\t\t);\r\n\t\t}else if(cardCode == 10){\r\n\t\t\ttokenConsumed = x_RFOX;\r\n\t\t\tif(address(kyuubi) == address0 ){ kyuubi = newCard(\"PsyKyuubi\",\"PsyK\",3,1,0, 2); reward *= 10;}\r\n\t\t\tcardCreated = kyuubi;\r\n\t\t\trequire( floatingCastle() == fox );\r\n\t\t}else if(cardCode == 11){\r\n\t\t\ttokenConsumed = x_GLM;\r\n\t\t\tcost *= 10;\r\n\t\t\tif(address(ironGiant) == address0 ){ ironGiant = newCard(\"Iron Giant\",\"IRoN\",6,6,6, 6); reward *= 10;}\r\n\t\t\tcardCreated = ironGiant;\r\n\t\t\trequire( floatingCastle() == gold && golem == redBalloonLocation );\r\n\t\t}else if(cardCode == 12){\r\n\t\t\ttokenConsumed = x_BRD;\r\n\t\t\tcost *= 12;\r\n\t\t\tif(address(bread) == address0 ){ bread = newCard(\"Cake\",\"LIEs\",2,2,1, 3); reward *= 10;}\r\n\t\t\tcardCreated = bread;\r\n\t\t\trequire(  wheat == redBalloonLocation );\r\n\t\t}else if(cardCode == 13){\r\n\t\t\ttokenConsumed = x_OCTO;\r\n\t\t\tcost = cost/10;\r\n\t\t\tif(address(kraken) == address0 ){ kraken = newCard(\"Kraken\",\"KRKn\",0,0,2, 6); reward *= 10;}\r\n\t\t\tcardCreated = kraken;\r\n\t\t\trequire( octopus == redBalloonLocation && floatingCastle() == water);\r\n\t\t}else if(cardCode == 14){\r\n\t\t\ttokenConsumed = x_UNI;\r\n\t\t\tcost *= 2;\r\n\t\t\tif(address(pegasus) == address0 ){ pegasus = newCard(\"Pegasus\",\"UNi\",2,3,3, 3); reward *= 10;}\r\n\t\t\tcardCreated = pegasus;\r\n\t\t\t(uint X1, uint Y1) = getXY(redBalloonLocation);\r\n\t\t\t(uint X2, uint Y2) = getXY(unicorn);\r\n\t\t\trequire( floatingCastle() == unicorn && X1 == X2 && Y1 == Y2);\r\n\t\t}else if(cardCode == 15){\r\n\t\t\ttokenConsumed = x_PEPE;\r\n\t\t\tcost = cost/10;\r\n\t\t\tif(address(tyrone) == address0 ){ tyrone = newCard(\"President of KeKistan\",\"Reeeeeeeeeeeeeeeee\",0,2,0, 8); reward *= 10; }\r\n\t\t\tcardCreated = tyrone;\r\n\t\t\trequire( redBalloonLocation == frog && inCenter_onGround(frog)  && isCaravan(frog) );\r\n\t\t}else if(cardCode == 16){\r\n\t\t\ttokenConsumed = x_PEPE;\r\n\t\t\tcost = cost/5;\r\n\t\t\tif(address(sniperDrone) == address0 ){ sniperDrone = newCard(\"Diving Sniper\",\"DSn\",1,2,0, 3); reward *= 50;}\r\n\t\t\tcardCreated = sniperDrone;\r\n\t\t\trequire( floatingCastle() == dragonFly || inCenter_onGround(dragonFly) );\r\n\t\t}else if(cardCode == 17){\r\n\t\t\ttokenConsumed = x_BZZZZ;\r\n\t\t\tcost *= 10;\r\n\t\t\tif(address(beeHive) == address0 ){ beeHive = newCard(\"Bee Hive\",\"HiVE\",3,3,0, 3); reward *= 10;}\r\n\t\t\tcardCreated = beeHive;\r\n\t\t\trequire(\r\n\t\t\t\t( proximity(bee, rose, false) || proximity(bee, sunflower, false) )\r\n\t\t\t\t&& inCenter_onGround(bee)\r\n\t\t\t);\r\n\t\t}else{\r\n\t\t\trevert();\r\n\t\t}\r\n\t\tbuySpamJerky();\r\n\r\n\t\tballoonLocked[tokenConsumed] += cost*amount;\r\n\t\trequire( cost*amount <= tokenConsumed.allowance(sender, THIS) && redBalloonOnTheLoose );\r\n\t\ttokenConsumed.transferFrom(sender, THIS, cost*amount);\r\n\t\tcardCreated.mint(sender, reward*amount);\r\n\t}\r\n\tfunction inCenter_onGround(address K) internal view returns(bool){\r\n\t\t(uint X, uint Y) = getXY(K);\r\n\t\treturn (X==4||X==5) && (Y==4||Y==5) && floatingCastle() != K;\r\n\t}\r\n\tToken public dracula;\r\n\r\n\t/*\r\n░██████╗░███████╗████████╗  ██████╗░░█████╗░████████╗░█████╗░\r\n██╔════╝░██╔════╝╚══██╔══╝  ██╔══██╗██╔══██╗╚══██╔══╝██╔══██╗\r\n██║░░██╗░█████╗░░░░░██║░░░  ██║░░██║███████║░░░██║░░░███████║\r\n██║░░╚██╗██╔══╝░░░░░██║░░░  ██║░░██║██╔══██║░░░██║░░░██╔══██║\r\n╚██████╔╝███████╗░░░██║░░░  ██████╔╝██║░░██║░░░██║░░░██║░░██║\r\n░╚═════╝░╚══════╝░░░╚═╝░░░  ╚═════╝░╚═╝░░╚═╝░░░╚═╝░░░╚═╝░░╚═╝*/\r\n\tfunction getData(address p) external view returns(\r\n\t\taddress balloonLocation,\r\n\t\tuint balloonsLeft,\r\n\t\tuint i,//shares\r\n\t\tuint _totalShares,\r\n\t\tuint _rationCost,\r\n\t\tuint _dividends,\r\n\t\tuint _stockedBalloons,\r\n\t\taddress _recordSetter,\r\n\t\tuint _mostBalloonsStocked,\r\n\t\tuint _timeLastBalloonPopped,\r\n\t\tbool _redBalloonOnTheLoose,\r\n\t\tuint[] memory UINTs\r\n\t){\r\n\t\tballoonLocation = redBalloonLocation;\r\n\t\tballoonsLeft = redBalloonsLeftOnTheWall;\r\n\t\t\r\n\t\t_totalShares = totalShares;\r\n\t\t_rationCost = rationCost;\r\n\t\t_dividends = dividendsOf(p);\r\n\t\t_stockedBalloons = stockedBalloons[redBalloonsLeftOnTheWall][p];\r\n\t\t_recordSetter = recordSetter[redBalloonsLeftOnTheWall];\r\n\t\t_mostBalloonsStocked = stockedBalloons[redBalloonsLeftOnTheWall][_recordSetter];\r\n\t\t_timeLastBalloonPopped = timeLastBalloonPopped;\r\n\t\t_redBalloonOnTheLoose = redBalloonOnTheLoose;\r\n\r\n\t\tUINTs = new uint[](67);\r\n\t\tERC20[] memory tokens = new ERC20[](19);\r\n\t\ttokens[0] = balloonToken;\r\n\t\ttokens[1] = spamToken;\r\n\t\ttokens[2] = MVT;\r\n\t\ttokens[3] = MDT;\r\n\t\ttokens[4] = XYO;\r\n\t\ttokens[5] = x_moonday;\r\n\t\ttokens[6] = x_drc;\r\n\t\ttokens[7] = x_barnbond;\r\n\t\ttokens[8] = x_wetstuff;\r\n\t\ttokens[9] = x_BCO;\r\n\t\ttokens[10] = SENT;\r\n\t\ttokens[11] = x_CID;\r\n\t\ttokens[12] = x_RFOX;\r\n\t\ttokens[13] = x_GLM;\r\n\t\ttokens[14] = x_BRD;\r\n\t\ttokens[15] = x_OCTO;\r\n\t\ttokens[16] = x_UNI;\r\n\t\ttokens[17] = x_PEPE;\r\n\t\ttokens[18] = x_BZZZZ;\r\n\r\n\t\tfor(i=0;i<38;i+=2){ (UINTs[i],UINTs[i+1]) = tokenData(tokens[i/2],p); }\r\n\t\tfor(i=0;i<cards.length;i++){ (UINTs[i+38],) = tokenData(cards[i],p); }\r\n\r\n\t\ti = shares[p];\r\n\t}\r\n\r\n\tfunction tokenData(ERC20 erc, address p) internal view returns(uint,uint){ return ( erc.balanceOf(p), erc.allowance(p,THIS) ); }\r\n}\r\n\r\n\r\nabstract contract ERC20{\r\n\tfunction transfer(address _to, uint _value) public virtual returns (bool);\r\n\tfunction transferFrom(address src, address dst, uint amount) public virtual returns (bool);\r\n\tfunction balanceOf(address _address) public virtual view returns (uint256);\r\n\tfunction allowance(address src, address guy) public virtual view returns (uint);\r\n\tfunction approve(address guy, uint amount) public virtual returns (bool);\r\n}\r\n\r\n\r\n/*\r\n░██████╗░███████╗███╗░░██╗███████╗██████╗░██╗░█████╗░  ░█████╗░░█████╗░██████╗░██████╗░\r\n██╔════╝░██╔════╝████╗░██║██╔════╝██╔══██╗██║██╔══██╗  ██╔══██╗██╔══██╗██╔══██╗██╔══██╗\r\n██║░░██╗░█████╗░░██╔██╗██║█████╗░░██████╔╝██║██║░░╚═╝  ██║░░╚═╝███████║██████╔╝██║░░██║\r\n██║░░╚██╗██╔══╝░░██║╚████║██╔══╝░░██╔══██╗██║██║░░██╗  ██║░░██╗██╔══██║██╔══██╗██║░░██║\r\n╚██████╔╝███████╗██║░╚███║███████╗██║░░██║██║╚█████╔╝  ╚█████╔╝██║░░██║██║░░██║██████╔╝\r\n░╚═════╝░╚══════╝╚═╝░░╚══╝╚══════╝╚═╝░░╚═╝╚═╝░╚════╝░  ░╚════╝░╚═╝░░╚═╝╚═╝░░╚═╝╚═════╝░*/\r\ncontract Token is ERC20{\r\n\tstring public name;\r\n    string public symbol;\r\n    uint8 public decimals;// yes, 0\r\n\taddress THIS = address(this);\r\n\taddress minter;\r\n\r\n\tconstructor(string memory _name, string memory _symbol ) {\r\n\t\tname = _name;\r\n\t\tsymbol = _symbol;\r\n\t\tminter = msg.sender;\r\n\t}\r\n\r\n\tmodifier authOnly{\r\n\t  require( msg.sender == minter );\r\n\t  _;\r\n    }\r\n\r\n\tfunction mint(address _address, uint _value) external authOnly(){\r\n\t\tbalances[_address] += _value;\r\n\t\t_totalSupply += _value;\r\n\t}\r\n\r\n\tmapping(address => uint256) balances;\r\n\r\n\tuint _totalSupply;\r\n\r\n\tmapping(address => mapping(address => uint)) approvals;\r\n\r\n\t\r\n\tfunction totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address _address) public view override returns (uint256 balance) {\r\n\t\treturn balances[_address];\r\n\t}\r\n\r\n\tfunction transfer(address _to, uint _value, bytes memory _data) public returns (bool) {\r\n\t\tif( isContract(_to) ){\r\n\t\t\treturn transferToContract(_to, _value, _data);\r\n\t\t}else{\r\n\t\t\treturn transferToAddress(_to, _value);\r\n\t\t}\r\n\t}\r\n\tfunction transfer(address _to, uint _value) public  override returns (bool) {\r\n\t\tbytes memory empty;\r\n\t\tif(isContract(_to)){\r\n\t\t\treturn transferToContract(_to, _value, empty);\r\n\t\t}else{\r\n\t\t\treturn transferToAddress(_to, _value);\r\n\t\t}\r\n\t}\r\n\r\n\t//function that is called when transaction target is an address\r\n\tfunction transferToAddress(address _to, uint _value) private returns (bool) {\r\n\t\tmoveTokens(msg.sender, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t//function that is called when transaction target is a contract\r\n\tfunction transferToContract(address _to, uint _value, bytes memory _data) private returns (bool) {\r\n\t\tmoveTokens(msg.sender, _to, _value);\r\n\t\tERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\r\n\t\treceiver.tokenFallback(msg.sender, _value, _data);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction moveTokens(address _from, address _to, uint _amount) internal virtual{\r\n\t\trequire( _amount <= balances[_from] );\r\n\t\tbalances[_from] -= _amount;\r\n\t\tbalances[_to] += _amount;\r\n\t}\r\n\r\n    function allowance(address src, address guy) public view override returns (uint) {\r\n        return approvals[src][guy];\r\n    }\r\n  \t\r\n    function transferFrom(address src, address dst, uint amount) public override returns (bool){\r\n        address sender = msg.sender;\r\n        require(approvals[src][sender] >=  amount);\r\n        require(balances[src] >= amount);\r\n        approvals[src][sender] -= amount;\r\n        moveTokens(src,dst,amount);\r\n        return true;\r\n    }\r\n\r\n    function approve(address guy, uint amount) public override returns (bool) {\r\n        address sender = msg.sender;\r\n        approvals[sender][guy] = amount;\r\n        return true;\r\n    }\r\n\r\n    function isContract(address _addr) public view returns (bool is_contract) {\r\n\t\tuint length;\r\n\t\tassembly {\r\n\t\t\t//retrieve the size of the code on target address, this needs assembly\r\n\t\t\tlength := extcodesize(_addr)\r\n\t\t}\r\n\t\tif(length>0) {\r\n\t\t\treturn true;\r\n\t\t}else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nabstract contract  Pyramid is ERC20{\r\n\tfunction calculateEthereumReceived(uint256 _tokensToSell) public virtual view returns(uint256);\r\n}\r\n\r\nabstract contract  MagicLamp{\r\n\tfunction buy(address _gateway, uint _red, uint _green, uint _blue) public virtual payable returns(uint bondsCreated);\r\n\tfunction globalData( address perspective, address kingdom) external virtual view returns(\r\n\t\taddress _gateway, \r\n\t\tuint _pocket , \r\n\t\tuint _pizzaClockPressure,\r\n\t\tuint[] memory _UINTs\r\n\t);\r\n\tfunction XY(address kingdom) external virtual view returns(\r\n\t\tuint x,\r\n\t\tuint y,\r\n\t\taddress _GENIE,\r\n\t\tuint _wishes,\r\n\t\taddress _carpetRider,\r\n\t\tuint _carpetRiderHP,\r\n\t\taddress _floatingCastle,\r\n\t\tbool _caravan);\r\n\r\n\tfunction colorToCluster(uint r, uint g, uint b) public virtual pure returns(uint8 rC, uint8 gC, uint8 bC);\r\n\tfunction ofRug(address addr) public virtual view returns(bool);\r\n\tfunction allKingdoms(address perspective) public virtual view returns(\r\n\t\taddress[] memory address_,\r\n\t\tuint[] memory UINTs_\r\n\t);\r\n\tfunction withdrawDividends(address[] memory kingdoms, uint[] memory fomoRounds, address destination) public virtual;\r\n}\r\nabstract contract ERC223ReceivingContract{\r\n    function tokenFallback(address _from, uint _value, bytes calldata _data) external virtual;\r\n}\r\n\r\nabstract contract RugToken is ERC20{\r\n\tfunction _RGB() public virtual view returns(uint8 _R,uint8 _G,uint8 _B);\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"balloonOrGiftBoxOnBoard\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buySpamJerky\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"dividendsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dividends\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dracula\",\"outputs\":[{\"internalType\":\"contract Token\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"floatingCastle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_floatingCastle\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"p\",\"type\":\"address\"}],\"name\":\"getData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"balloonLocation\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balloonsLeft\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rationCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dividends\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stockedBalloons\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recordSetter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_mostBalloonsStocked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timeLastBalloonPopped\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_redBalloonOnTheLoose\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"UINTs\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"kingdom\",\"type\":\"address\"}],\"name\":\"getXY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"glassBalloon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"haleysWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"kingdom\",\"type\":\"address\"}],\"name\":\"isCaravan\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"IS\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ofRug\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"cardCode\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"otherCards\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"one\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"two\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_4_8\",\"type\":\"bool\"}],\"name\":\"proximity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseBalloon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"cardCode\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"spamExclusiveCards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stockBalloonToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"tokenRGB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"R\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"G\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"B\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"C\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"withdrawDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"RedBalloons","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://60ded673ede32b596b334ffee4d593938a30188e35be0aa5ee30388264af7edb"}]}