{"status":"1","message":"OK","result":[{"SourceCode":"{\"Access.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\r\\n\\r\\n/** \\r\\n*                                                                                                                                  \\r\\n*       ##### /                                                             #######      /                                         \\r\\n*    ######  /          #                                                 /       ###  #/                                          \\r\\n*   /#   /  /          ###                                               /         ##  ##                                          \\r\\n*  /    /  /            #                                                ##        #   ##                                          \\r\\n*      /  /                                                               ###          ##                                          \\r\\n*     ## ##           ###        /###    ###  /###         /###          ## ###        ##  /##      /###    ###  /###       /##    \\r\\n*     ## ##            ###      / ###  /  ###/ #### /     / #### /        ### ###      ## / ###    / ###  /  ###/ #### /   / ###   \\r\\n*     ## ##             ##     /   ###/    ##   ###/     ##  ###/           ### ###    ##/   ###  /   ###/    ##   ###/   /   ###  \\r\\n*     ## ##             ##    ##    ##     ##    ##   k ####                  ### /##  ##     ## ##    ##     ##         ##    ### \\r\\n*     ## ##             ##    ##    ##     ##    ##   a   ###                   #/ /## ##     ## ##    ##     ##         ########  \\r\\n*     #  ##             ##    ##    ##     ##    ##   i     ###                  #/ ## ##     ## ##    ##     ##         #######   \\r\\n*        /              ##    ##    ##     ##    ##   z       ###                 # /  ##     ## ##    ##     ##         ##        \\r\\n*    /##/           /   ##    ##    ##     ##    ##   e  /###  ##       /##        /   ##     ## ##    /#     ##         ####    / \\r\\n*   /  ############/    ### /  ######      ###   ###  n / #### /       /  ########/    ##     ##  ####/ ##    ###         ######/  \\r\\n*  /     #########       ##/    ####        ###   ### -    ###/       /     #####       ##    ##   ###   ##    ###         #####   \\r\\n*  #                                                  w               |                       /                                    \\r\\n*   ##                                                e                \\\\)                    /                                     \\r\\n*                                                     b                                     /                                      \\r\\n*                                                                                          /                                       \\r\\n*\\r\\n*\\r\\n* Lion\\u0027s Share is the very first true follow-me matrix smart contract ever created.\\r\\n* Now you can build an organization and earn on up to 15 levels.\\r\\n* https://www.lionsshare.io\\r\\n* Get your share, join today!\\r\\n*/\\r\\n\\r\\npragma solidity ^0.6.8;\\r\\n\\r\\nimport \\u0027./DataStorage.sol\\u0027;\\r\\n\\r\\ncontract Access is DataStorage {\\r\\n\\r\\n  uint internal constant ENTRY_ENABLED = 1;\\r\\n  uint internal constant ENTRY_DISABLED = 2;\\r\\n\\r\\n  uint internal reentryStatus;\\r\\n\\r\\n  modifier isOwner(address _account) {\\r\\n    require(owner == _account, \\\"Restricted Access!\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  modifier isMember(address _addr) {\\r\\n    require(members[_addr].id \\u003e 0, \\\"Register Account First!\\\");\\r\\n    _;\\r\\n  }\\r\\n  \\r\\n  modifier blockReEntry() {\\r\\n    require(reentryStatus != ENTRY_DISABLED, \\\"Security Block\\\");\\r\\n    reentryStatus = ENTRY_DISABLED;\\r\\n\\r\\n    _;\\r\\n\\r\\n    reentryStatus = ENTRY_ENABLED;\\r\\n  }\\r\\n}\"},\"DataStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\r\\n\\r\\n/** \\r\\n*                                                                                                                                  \\r\\n*       ##### /                                                             #######      /                                         \\r\\n*    ######  /          #                                                 /       ###  #/                                          \\r\\n*   /#   /  /          ###                                               /         ##  ##                                          \\r\\n*  /    /  /            #                                                ##        #   ##                                          \\r\\n*      /  /                                                               ###          ##                                          \\r\\n*     ## ##           ###        /###    ###  /###         /###          ## ###        ##  /##      /###    ###  /###       /##    \\r\\n*     ## ##            ###      / ###  /  ###/ #### /     / #### /        ### ###      ## / ###    / ###  /  ###/ #### /   / ###   \\r\\n*     ## ##             ##     /   ###/    ##   ###/     ##  ###/           ### ###    ##/   ###  /   ###/    ##   ###/   /   ###  \\r\\n*     ## ##             ##    ##    ##     ##    ##   k ####                  ### /##  ##     ## ##    ##     ##         ##    ### \\r\\n*     ## ##             ##    ##    ##     ##    ##   a   ###                   #/ /## ##     ## ##    ##     ##         ########  \\r\\n*     #  ##             ##    ##    ##     ##    ##   i     ###                  #/ ## ##     ## ##    ##     ##         #######   \\r\\n*        /              ##    ##    ##     ##    ##   z       ###                 # /  ##     ## ##    ##     ##         ##        \\r\\n*    /##/           /   ##    ##    ##     ##    ##   e  /###  ##       /##        /   ##     ## ##    /#     ##         ####    / \\r\\n*   /  ############/    ### /  ######      ###   ###  n / #### /       /  ########/    ##     ##  ####/ ##    ###         ######/  \\r\\n*  /     #########       ##/    ####        ###   ### -    ###/       /     #####       ##    ##   ###   ##    ###         #####   \\r\\n*  #                                                  w               |                       /                                    \\r\\n*   ##                                                e                \\\\)                    /                                     \\r\\n*                                                     b                                     /                                      \\r\\n*                                                                                          /                                       \\r\\n*\\r\\n*\\r\\n* Lion\\u0027s Share is the very first true follow-me matrix smart contract ever created.\\r\\n* Now you can build an organization and earn on up to 15 levels.\\r\\n* https://www.lionsshare.io\\r\\n* Get your share, join today!\\r\\n*/\\r\\n\\r\\npragma solidity ^0.6.8;\\r\\n\\r\\nimport \\u0027./LionShareABI.sol\\u0027;\\r\\n\\r\\ncontract DataStorage {\\r\\n\\r\\n  LionShareABI internal ls_handle;\\r\\n\\r\\n  struct Account {\\r\\n    uint id;\\r\\n    uint activeLevel;\\r\\n    address sponsor;\\r\\n    mapping(uint =\\u003e Position) Positions;\\r\\n  }\\r\\n\\r\\n  struct Position {\\r\\n    uint depth;\\r\\n    address sponsor;\\r\\n  }\\r\\n\\r\\n  struct Level {\\r\\n    uint cost;\\r\\n    uint[] commission;\\r\\n    uint fee;\\r\\n  }\\r\\n\\r\\n  mapping(address =\\u003e Account) public members;\\r\\n  mapping(uint =\\u003e address) public idToMember;\\r\\n  mapping(uint =\\u003e Level) public levelCost;\\r\\n  \\r\\n  uint public orderId;\\r\\n  uint public topLevel;\\r\\n  bool public contractEnabled;\\r\\n  address internal owner;\\r\\n  address internal feeSystem;\\r\\n  address internal proxied;\\r\\n}\"},\"Events.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\r\\n\\r\\n/** \\r\\n*                                                                                                                                  \\r\\n*       ##### /                                                             #######      /                                         \\r\\n*    ######  /          #                                                 /       ###  #/                                          \\r\\n*   /#   /  /          ###                                               /         ##  ##                                          \\r\\n*  /    /  /            #                                                ##        #   ##                                          \\r\\n*      /  /                                                               ###          ##                                          \\r\\n*     ## ##           ###        /###    ###  /###         /###          ## ###        ##  /##      /###    ###  /###       /##    \\r\\n*     ## ##            ###      / ###  /  ###/ #### /     / #### /        ### ###      ## / ###    / ###  /  ###/ #### /   / ###   \\r\\n*     ## ##             ##     /   ###/    ##   ###/     ##  ###/           ### ###    ##/   ###  /   ###/    ##   ###/   /   ###  \\r\\n*     ## ##             ##    ##    ##     ##    ##   k ####                  ### /##  ##     ## ##    ##     ##         ##    ### \\r\\n*     ## ##             ##    ##    ##     ##    ##   a   ###                   #/ /## ##     ## ##    ##     ##         ########  \\r\\n*     #  ##             ##    ##    ##     ##    ##   i     ###                  #/ ## ##     ## ##    ##     ##         #######   \\r\\n*        /              ##    ##    ##     ##    ##   z       ###                 # /  ##     ## ##    ##     ##         ##        \\r\\n*    /##/           /   ##    ##    ##     ##    ##   e  /###  ##       /##        /   ##     ## ##    /#     ##         ####    / \\r\\n*   /  ############/    ### /  ######      ###   ###  n / #### /       /  ########/    ##     ##  ####/ ##    ###         ######/  \\r\\n*  /     #########       ##/    ####        ###   ### -    ###/       /     #####       ##    ##   ###   ##    ###         #####   \\r\\n*  #                                                  w               |                       /                                    \\r\\n*   ##                                                e                \\\\)                    /                                     \\r\\n*                                                     b                                     /                                      \\r\\n*                                                                                          /                                       \\r\\n*\\r\\n*\\r\\n* Lion\\u0027s Share is the very first true follow-me matrix smart contract ever created.\\r\\n* Now you can build an organization and earn on up to 15 levels.\\r\\n* https://www.lionsshare.io\\r\\n* Get your share, join today!\\r\\n*/\\r\\n\\r\\npragma solidity ^0.6.8;\\r\\n\\r\\ncontract Events {\\r\\n  event Registration(address member, uint memberId, address sponsor, uint orderId);\\r\\n  event Upgrade(address member, address sponsor, uint level, uint orderId);\\r\\n  event Placement(address member, address sponsor, uint level, uint depth, uint orderId);\\r\\n  event FundsPayout(address indexed member, address payoutFrom, uint level, uint tier, uint orderId);\\r\\n  event FundsPassup(address indexed member, address passupFrom, uint level, uint orderId);\\r\\n}\"},\"LionShareABI.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\r\\n\\r\\n/** \\r\\n*                                                                                                                                  \\r\\n*       ##### /                                                             #######      /                                         \\r\\n*    ######  /          #                                                 /       ###  #/                                          \\r\\n*   /#   /  /          ###                                               /         ##  ##                                          \\r\\n*  /    /  /            #                                                ##        #   ##                                          \\r\\n*      /  /                                                               ###          ##                                          \\r\\n*     ## ##           ###        /###    ###  /###         /###          ## ###        ##  /##      /###    ###  /###       /##    \\r\\n*     ## ##            ###      / ###  /  ###/ #### /     / #### /        ### ###      ## / ###    / ###  /  ###/ #### /   / ###   \\r\\n*     ## ##             ##     /   ###/    ##   ###/     ##  ###/           ### ###    ##/   ###  /   ###/    ##   ###/   /   ###  \\r\\n*     ## ##             ##    ##    ##     ##    ##   k ####                  ### /##  ##     ## ##    ##     ##         ##    ### \\r\\n*     ## ##             ##    ##    ##     ##    ##   a   ###                   #/ /## ##     ## ##    ##     ##         ########  \\r\\n*     #  ##             ##    ##    ##     ##    ##   i     ###                  #/ ## ##     ## ##    ##     ##         #######   \\r\\n*        /              ##    ##    ##     ##    ##   z       ###                 # /  ##     ## ##    ##     ##         ##        \\r\\n*    /##/           /   ##    ##    ##     ##    ##   e  /###  ##       /##        /   ##     ## ##    /#     ##         ####    / \\r\\n*   /  ############/    ### /  ######      ###   ###  n / #### /       /  ########/    ##     ##  ####/ ##    ###         ######/  \\r\\n*  /     #########       ##/    ####        ###   ### -    ###/       /     #####       ##    ##   ###   ##    ###         #####   \\r\\n*  #                                                  w               |                       /                                    \\r\\n*   ##                                                e                \\\\)                    /                                     \\r\\n*                                                     b                                     /                                      \\r\\n*                                                                                          /                                       \\r\\n*\\r\\n*\\r\\n* Lion\\u0027s Share is the very first true follow-me matrix smart contract ever created.\\r\\n* Now you can build an organization and earn on up to 15 levels.\\r\\n* https://www.lionsshare.io\\r\\n* Get your share, join today!\\r\\n*/\\r\\n\\r\\npragma solidity ^0.6.8;\\r\\n\\r\\nabstract contract LionShareABI {\\r\\n\\r\\n  function members(address) external virtual returns (uint, address);\\r\\n}\"},\"LionShareUL.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\r\\n\\r\\n/** \\r\\n*                                                                                                                                  \\r\\n*       ##### /                                                             #######      /                                         \\r\\n*    ######  /          #                                                 /       ###  #/                                          \\r\\n*   /#   /  /          ###                                               /         ##  ##                                          \\r\\n*  /    /  /            #                                                ##        #   ##                                          \\r\\n*      /  /                                                               ###          ##                                          \\r\\n*     ## ##           ###        /###    ###  /###         /###          ## ###        ##  /##      /###    ###  /###       /##    \\r\\n*     ## ##            ###      / ###  /  ###/ #### /     / #### /        ### ###      ## / ###    / ###  /  ###/ #### /   / ###   \\r\\n*     ## ##             ##     /   ###/    ##   ###/     ##  ###/           ### ###    ##/   ###  /   ###/    ##   ###/   /   ###  \\r\\n*     ## ##             ##    ##    ##     ##    ##   k ####                  ### /##  ##     ## ##    ##     ##         ##    ### \\r\\n*     ## ##             ##    ##    ##     ##    ##   a   ###                   #/ /## ##     ## ##    ##     ##         ########  \\r\\n*     #  ##             ##    ##    ##     ##    ##   i     ###                  #/ ## ##     ## ##    ##     ##         #######   \\r\\n*        /              ##    ##    ##     ##    ##   z       ###                 # /  ##     ## ##    ##     ##         ##        \\r\\n*    /##/           /   ##    ##    ##     ##    ##   e  /###  ##       /##        /   ##     ## ##    /#     ##         ####    / \\r\\n*   /  ############/    ### /  ######      ###   ###  n / #### /       /  ########/    ##     ##  ####/ ##    ###         ######/  \\r\\n*  /     #########       ##/    ####        ###   ### -    ###/       /     #####       ##    ##   ###   ##    ###         #####   \\r\\n*  #                                                  w               |                       /                                    \\r\\n*   ##                                                e                \\\\)                    /                                     \\r\\n*                                                     b                                     /                                      \\r\\n*                                                                                          /                                       \\r\\n*\\r\\n*\\r\\n* Lion\\u0027s Share is the very first true follow-me matrix smart contract ever created.\\r\\n* Now you can build an organization and earn on up to 15 levels.\\r\\n* https://www.lionsshare.io\\r\\n* Get your share, join today!\\r\\n*/\\r\\n\\r\\npragma solidity ^0.6.8;\\r\\n\\r\\nimport \\u0027./DataStorage.sol\\u0027;\\r\\nimport \\u0027./Access.sol\\u0027;\\r\\nimport \\u0027./Events.sol\\u0027;\\r\\n\\r\\ncontract LionShareUL is DataStorage, Access, Events {\\r\\n\\r\\n  constructor() public {\\r\\n    owner = msg.sender;\\r\\n\\r\\n    reentryStatus = ENTRY_ENABLED;\\r\\n    contractEnabled = false;\\r\\n  }\\r\\n\\r\\n  function init(address _addr) external isOwner(msg.sender) {\\r\\n    require(contractEnabled == false, \\\"Require Closed For Maintenance!\\\");\\r\\n    require(topLevel == 0, \\\"Already initiated!\\\");\\r\\n\\r\\n    uint[] memory commission = new uint[](15);\\r\\n    commission[0] = 0.004 ether;\\r\\n    commission[1] = 0.002 ether;\\r\\n    commission[2] = 0.002 ether;\\r\\n    commission[3] = 0.001 ether;\\r\\n    commission[4] = 0.001 ether;\\r\\n    commission[5] = 0.001 ether;\\r\\n    commission[6] = 0.001 ether;\\r\\n    commission[7] = 0.001 ether;\\r\\n    commission[8] = 0.001 ether;\\r\\n    commission[9] = 0.001 ether;\\r\\n    commission[10] = 0.001 ether;\\r\\n    commission[11] = 0.001 ether;\\r\\n    commission[12] = 0.001 ether;\\r\\n    commission[13] = 0.001 ether;\\r\\n    commission[14] = 0.001 ether;\\r\\n\\r\\n    levelCost[1] = Level({cost: 0.02 ether, commission: commission, fee: 0});\\r\\n    topLevel = 1;\\r\\n\\r\\n    createAccount(_addr);\\r\\n    createPosition(_addr, _addr, 1, 1, true);\\r\\n  }\\r\\n\\r\\n  fallback() external payable blockReEntry() {\\r\\n    preRegistration(msg.sender);\\r\\n  }\\r\\n\\r\\n  receive() external payable blockReEntry() {\\r\\n    preRegistration(msg.sender);\\r\\n  }\\r\\n\\r\\n  function registration() external payable blockReEntry() {\\r\\n    preRegistration(msg.sender);\\r\\n  }\\r\\n\\r\\n  function preRegistration(address _addr) internal {\\r\\n    require(contractEnabled == true, \\\"Closed For Maintenance\\\");\\r\\n    require(levelCost[1].cost == msg.value, \\\"Require .02 eth to register!\\\");\\r\\n\\r\\n    address sponsor = createAccount(_addr);\\r\\n\\r\\n    address activeSponsor = findActiveSponsor(_addr, sponsor, 1, true);\\r\\n\\r\\n    createPosition(_addr, activeSponsor, (members[activeSponsor].Positions[1].depth + 1), 1, false);\\r\\n    \\r\\n    handlePayout(_addr, activeSponsor, 1, true);\\r\\n  }\\r\\n\\r\\n  function createAccount(address _addr) internal returns (address) {\\r\\n    require(members[_addr].id == 0, \\\"Already a member!\\\");\\r\\n\\r\\n    //Get the member details from LionShare contract\\r\\n    (uint memberId, address sponsor) = ls_handle.members(_addr);\\r\\n\\r\\n    require(memberId != 0, \\\"Lions Share account required!\\\");\\r\\n\\r\\n    orderId++;\\r\\n\\r\\n    members[_addr] = Account({id: memberId, sponsor: sponsor, activeLevel: 0});\\r\\n    idToMember[memberId] = _addr;\\r\\n    \\r\\n    emit Registration(_addr, memberId, sponsor, orderId);\\r\\n\\r\\n    return sponsor;\\r\\n  }\\r\\n\\r\\n  function purchaseLevel(uint _level) external payable isMember(msg.sender) blockReEntry() {\\r\\n    require(contractEnabled == true, \\\"Closed For Maintenance\\\");\\r\\n    require((members[msg.sender].activeLevel \\u003e 0), \\\"Need active account.\\\");\\r\\n    require((_level \\u003e 0 \\u0026\\u0026 _level \\u003c= topLevel), \\\"Invalid matrix level.\\\");\\r\\n\\r\\n    uint activeLevel = members[msg.sender].activeLevel;\\r\\n\\r\\n    require((activeLevel \\u003c _level), \\\"Already active at level!\\\");\\r\\n    require((activeLevel == (_level - 1)), \\\"Level upgrade req. in order!\\\");\\r\\n    require((msg.value == levelCost[_level].cost), \\\"Wrong amount transferred.\\\");\\r\\n  \\r\\n    orderId++;\\r\\n\\r\\n    handleLevel(_level);\\r\\n  }\\r\\n\\r\\n  function purchaseBundle(uint _level) external payable isMember(msg.sender) blockReEntry() {\\r\\n    require(contractEnabled == true, \\\"Closed For Maintenance\\\");\\r\\n    require((members[msg.sender].activeLevel \\u003e 0), \\\"Need active account.\\\");\\r\\n    require((_level \\u003e 0 \\u0026\\u0026 _level \\u003c= topLevel), \\\"Invalid matrix level.\\\");\\r\\n\\r\\n    uint activeLevel = members[msg.sender].activeLevel;\\r\\n    \\r\\n    require((activeLevel \\u003c _level), \\\"Already active at level!\\\");\\r\\n\\r\\n    uint amount = 0;\\r\\n\\r\\n    for (uint num = (activeLevel + 1);num \\u003c= _level;num++) {\\r\\n      amount += levelCost[num].cost;\\r\\n    }\\r\\n\\r\\n    require(msg.value == amount, \\\"Wrong amount transferred.\\\");\\r\\n\\r\\n    orderId++;\\r\\n\\r\\n    for (uint num = (activeLevel + 1);num \\u003c= _level;num++) {\\r\\n      handleLevel(num);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function bundleCost(uint _level) external view isMember(msg.sender) returns (uint) {\\r\\n    require(contractEnabled == true, \\\"Closed For Maintenance\\\");\\r\\n    require((_level \\u003e 0 \\u0026\\u0026 _level \\u003c= topLevel), \\\"Invalid unilevel.\\\");\\r\\n\\r\\n    uint activeLevel = members[msg.sender].activeLevel;\\r\\n    \\r\\n    require((activeLevel \\u003c _level), \\\"Already active at level!\\\");\\r\\n\\r\\n    uint amount = 0;\\r\\n\\r\\n    for (uint num = (activeLevel + 1);num \\u003c= _level;num++) {\\r\\n      amount += levelCost[num].cost;\\r\\n    }\\r\\n\\r\\n    return amount;\\r\\n  }\\r\\n\\r\\n  function handleLevel(uint _level) internal {\\r\\n    address sponsor = members[msg.sender].sponsor;\\r\\n    address activeSponsor = findActiveSponsor(msg.sender, sponsor, _level, true);\\r\\n\\r\\n    emit Upgrade(msg.sender, activeSponsor, _level, orderId);\\r\\n\\r\\n    createPosition(msg.sender, activeSponsor, (members[activeSponsor].Positions[_level].depth + 1), _level, false);\\r\\n\\r\\n    handlePayout(msg.sender, activeSponsor, _level, true);\\r\\n\\r\\n    if (levelCost[_level].fee \\u003e 0) {\\r\\n      processPayout(feeSystem, levelCost[_level].fee);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function createPosition(address _addr, address _sponsor, uint depth, uint _level, bool _initial) internal {\\r\\n    Account storage member = members[_addr];\\r\\n\\r\\n    member.activeLevel = _level;\\r\\n    member.Positions[_level] = Position({sponsor: _sponsor, depth: depth});\\r\\n\\r\\n    if (_initial == true) {\\r\\n      return ;\\r\\n    }\\r\\n\\r\\n    emit Placement(_addr, _sponsor, _level, depth, orderId);\\r\\n  }\\r\\n\\r\\n  function findActiveSponsor(address _addr, address _sponsor, uint _level, bool _emit) internal returns (address) {\\r\\n    address sponsorAddress = _sponsor;\\r\\n    uint memberId;\\r\\n\\r\\n    while (true) {\\r\\n      if (members[sponsorAddress].activeLevel \\u003e= _level) {\\r\\n        return sponsorAddress;\\r\\n      }\\r\\n\\r\\n      if (_emit == true) {\\r\\n        emit FundsPassup(sponsorAddress, _addr, _level, orderId);\\r\\n      }\\r\\n\\r\\n      if (members[sponsorAddress].activeLevel \\u003e= _level) {\\r\\n        sponsorAddress = members[sponsorAddress].Positions[_level].sponsor;\\r\\n      } else if (members[sponsorAddress].id \\u003e 0) {\\r\\n        sponsorAddress = members[sponsorAddress].sponsor;\\r\\n      } else {\\r\\n        (memberId, sponsorAddress) = ls_handle.members(sponsorAddress);\\r\\n\\r\\n        if (memberId == 0) {\\r\\n          sponsorAddress = idToMember[1]; //Force to company if we cant locate the address in main contract (should not be possible, but incase)\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function findPayoutReceiver(address _addr, uint _level) internal view returns (address) {\\r\\n    address sponsorAddress = members[_addr].Positions[_level].sponsor;\\r\\n\\r\\n    while (true) {\\r\\n      if (members[sponsorAddress].activeLevel \\u003e= _level) {\\r\\n        return sponsorAddress;\\r\\n      }\\r\\n\\r\\n      sponsorAddress = members[sponsorAddress].Positions[_level].sponsor;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function handlePayout(address _addr, address _sponsor, uint _level, bool _transferPayout) internal {\\r\\n    address receiver = _sponsor;\\r\\n    uint[] memory commission = levelCost[_level].commission;\\r\\n\\r\\n    for (uint i=0;i \\u003c commission.length;i++) {\\r\\n      if (i \\u003e 0) {\\r\\n        receiver = findPayoutReceiver(receiver, _level);\\r\\n      }\\r\\n\\r\\n      if (commission[i] \\u003e 0) {\\r\\n        emit FundsPayout(receiver, _addr, _level, (i + 1), orderId);\\r\\n\\r\\n        if (_transferPayout == true) {\\r\\n          processPayout(receiver, commission[i]);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function processPayout(address _addr, uint _amount) internal {\\r\\n    (bool success, ) = address(uint160(_addr)).call{ value: _amount, gas: 40000 }(\\\"\\\");\\r\\n\\r\\n    if (success == false) { //Failsafe to prevent malicious contracts from blocking matrix\\r\\n      (success, ) = address(uint160(idToMember[1])).call{ value: _amount, gas: 40000 }(\\\"\\\");\\r\\n      require(success, \\u0027Transfer Failed\\u0027);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function getAffiliateWallet(uint memberId) external view returns (address) {\\r\\n    return idToMember[memberId];\\r\\n  }\\r\\n\\r\\n  function getAffiliatePosition(address _addr, uint _level) external view returns (uint, address) {\\r\\n    return (members[_addr].Positions[_level].depth, members[_addr].Positions[_level].sponsor);\\r\\n  }\\r\\n\\r\\n  function setupAccount(address _addr, uint _level) external isOwner(msg.sender) {\\r\\n    createAccount(_addr);\\r\\n    processCompLevel(_addr, _level);\\r\\n  }\\r\\n\\r\\n  function compLevel(address _addr, uint _level) public isOwner(msg.sender) isMember(_addr) {\\r\\n    orderId++;\\r\\n\\r\\n    processCompLevel(_addr, _level);\\r\\n  }\\r\\n\\r\\n  function processCompLevel(address _addr, uint _level) internal {\\r\\n    require((_level \\u003e 0 \\u0026\\u0026 _level \\u003c= topLevel), \\\"Invalid matrix level.\\\");\\r\\n\\r\\n    uint activeLevel = members[_addr].activeLevel;\\r\\n    address sponsor = members[_addr].sponsor;\\r\\n\\r\\n    require((activeLevel \\u003c _level), \\\"Already active at level!\\\");\\r\\n\\r\\n    for (uint num = (activeLevel + 1);num \\u003c= _level;num++) {\\r\\n      address activeSponsor = findActiveSponsor(_addr, sponsor, num, true);\\r\\n\\r\\n      emit Upgrade(_addr, activeSponsor, num, orderId);\\r\\n\\r\\n      createPosition(_addr, activeSponsor, (members[activeSponsor].Positions[_level].depth + 1), num, false);\\r\\n      handlePayout(_addr, activeSponsor, num, false);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function addLevel(uint _levelPrice, uint[] calldata _levelCommission, uint _levelFee) external isOwner(msg.sender) {\\r\\n    require((levelCost[topLevel].cost \\u003c _levelPrice), \\\"Check price point!\\\");\\r\\n    uint commission = 0;\\r\\n\\r\\n    for (uint i=0;i \\u003c _levelCommission.length;i++) {\\r\\n      commission += _levelCommission[i];\\r\\n    }\\r\\n\\r\\n    require((commission + _levelFee) == _levelPrice, \\\"Check price point!\\\");\\r\\n\\r\\n    topLevel++;\\r\\n\\r\\n    levelCost[topLevel] = Level({cost: _levelPrice, commission: _levelCommission, fee: _levelFee});\\r\\n\\r\\n    createPosition(idToMember[1], idToMember[1], 1, topLevel, true);\\r\\n  }\\r\\n\\r\\n  function updateLevelCost(uint _level, uint _levelPrice, uint[] calldata _levelCommission, uint _levelFee) external isOwner(msg.sender) {\\r\\n    require((_level \\u003e 0 \\u0026\\u0026 _level \\u003c= topLevel), \\\"Invalid matrix level.\\\");\\r\\n    require((_levelPrice \\u003e 0), \\\"Check price point!\\\");\\r\\n    uint commission = 0;\\r\\n\\r\\n    for (uint i=0;i \\u003c _levelCommission.length;i++) {\\r\\n      commission += _levelCommission[i];\\r\\n    }\\r\\n\\r\\n    require((commission + _levelFee) == _levelPrice, \\\"Check price point!\\\");\\r\\n\\r\\n    if (_level \\u003e 1) {\\r\\n      require((levelCost[(_level - 1)].cost \\u003c _levelPrice), \\\"Check price point!\\\");\\r\\n    }\\r\\n\\r\\n    if (_level \\u003c topLevel) {\\r\\n      require((levelCost[(_level + 1)].cost \\u003e _levelPrice), \\\"Check price point!\\\");\\r\\n    }\\r\\n\\r\\n    levelCost[_level] = Level({cost: _levelPrice, commission: _levelCommission, fee: _levelFee});\\r\\n  }\\r\\n\\r\\n  function changeContractStatus() external isOwner(msg.sender) {\\r\\n    contractEnabled = !contractEnabled;\\r\\n    }\\r\\n\\r\\n  function setFeeSystem(address _addr) external isOwner(msg.sender) {\\r\\n    feeSystem = _addr;\\r\\n  }\\r\\n\\r\\n  function setLionShareContract(LionShareABI _addr) external isOwner(msg.sender) {\\r\\n    ls_handle = _addr;\\r\\n  }\\r\\n}\"}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"passupFrom\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"FundsPassup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payoutFrom\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"FundsPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depth\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"Placement\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"memberId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"Registration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"Upgrade\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_levelPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_levelCommission\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_levelFee\",\"type\":\"uint256\"}],\"name\":\"addLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"bundleCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"changeContractStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"compLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"getAffiliatePosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"memberId\",\"type\":\"uint256\"}],\"name\":\"getAffiliateWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idToMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"levelCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"members\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activeLevel\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"orderId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"purchaseBundle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"purchaseLevel\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registration\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setFeeSystem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract LionShareABI\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setLionShareContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"setupAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"topLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_levelPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_levelCommission\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_levelFee\",\"type\":\"uint256\"}],\"name\":\"updateLevelCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"LionShareUL","CompilerVersion":"v0.6.8+commit.0bbfe453","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"BSD-3-Clause","Proxy":"0","Implementation":"","SwarmSource":"ipfs://1891bdca16607c3aa0b28a0e0a5f30c4f8d518d44d71047ab6eba991e85030df"}]}