{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts\\AssetInterface.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n\r\ncontract AssetInterface {\r\n    function _performTransferWithReference(\r\n        address _to,\r\n        uint _value,\r\n        string memory _reference,\r\n        address _sender)\r\n    public returns(bool);\r\n\r\n    function _performTransferToICAPWithReference(\r\n        bytes32 _icap,\r\n        uint _value,\r\n        string memory _reference,\r\n        address _sender)\r\n    public returns(bool);\r\n\r\n    function _performApprove(address _spender, uint _value, address _sender)\r\n    public returns(bool);\r\n\r\n    function _performTransferFromWithReference(\r\n        address _from,\r\n        address _to,\r\n        uint _value,\r\n        string memory _reference,\r\n        address _sender)\r\n    public returns(bool);\r\n\r\n    function _performTransferFromToICAPWithReference(\r\n        address _from,\r\n        bytes32 _icap,\r\n        uint _value,\r\n        string memory _reference,\r\n        address _sender)\r\n    public returns(bool);\r\n\r\n    function _performGeneric(bytes memory, address) public payable {\r\n        revert();\r\n    }\r\n}\r\n\r\n// File: contracts\\ERC20Interface.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n\r\ncontract ERC20Interface {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed from, address indexed spender, uint256 value);\r\n\r\n    function totalSupply() public view returns(uint256 supply);\r\n    function balanceOf(address _owner) public view returns(uint256 balance);\r\n    // solhint-disable-next-line no-simple-event-func-name\r\n    function transfer(address _to, uint256 _value) public returns(bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool success);\r\n    function approve(address _spender, uint256 _value) public returns(bool success);\r\n    function allowance(address _owner, address _spender) public view returns(uint256 remaining);\r\n\r\n    // function symbol() constant returns(string);\r\n    function decimals() public view returns(uint8);\r\n    // function name() constant returns(string);\r\n}\r\n\r\n// File: contracts\\AssetProxyInterface.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n\r\n\r\ncontract AssetProxyInterface is ERC20Interface {\r\n    function _forwardApprove(address _spender, uint _value, address _sender)\r\n    public returns(bool);\r\n\r\n    function _forwardTransferFromWithReference(\r\n        address _from,\r\n        address _to,\r\n        uint _value,\r\n        string memory _reference,\r\n        address _sender)\r\n    public returns(bool);\r\n\r\n    function _forwardTransferFromToICAPWithReference(\r\n        address _from,\r\n        bytes32 _icap,\r\n        uint _value,\r\n        string memory _reference,\r\n        address _sender)\r\n    public returns(bool);\r\n\r\n    function recoverTokens(ERC20Interface _asset, address _receiver, uint _value)\r\n    public returns(bool);\r\n\r\n    function etoken2() external view returns(address); // To be replaced by the implicit getter;\r\n\r\n    // To be replaced by the implicit getter;\r\n    function etoken2Symbol() external view returns(bytes32);\r\n}\r\n\r\n// File: @orderbook\\smart-contracts-common\\contracts\\Bytes32.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n\r\ncontract Bytes32 {\r\n    function _bytes32(string memory _input) internal pure returns(bytes32 result) {\r\n        assembly {\r\n            result := mload(add(_input, 32))\r\n        }\r\n    }\r\n}\r\n\r\n// File: @orderbook\\smart-contracts-common\\contracts\\ReturnData.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n\r\ncontract ReturnData {\r\n    function _returnReturnData(bool _success) internal pure {\r\n        assembly {\r\n            let returndatastart := 0\r\n            returndatacopy(returndatastart, 0, returndatasize)\r\n            switch _success case 0 { revert(returndatastart, returndatasize) }\r\n                default { return(returndatastart, returndatasize) }\r\n        }\r\n    }\r\n\r\n    function _assemblyCall(address _destination, uint _value, bytes memory _data)\r\n    internal returns(bool success) {\r\n        assembly {\r\n            success := call(gas, _destination, _value, add(_data, 32), mload(_data), 0, 0)\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts\\Asset.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title EToken2 Asset implementation contract.\r\n *\r\n * Basic asset implementation contract, without any additional logic.\r\n * Every other asset implementation contracts should derive from this one.\r\n * Receives calls from the proxy, and calls back immediately without arguments modification.\r\n *\r\n * Note: all the non constant functions return false instead of throwing in case if state change\r\n * didn't happen yet.\r\n */\r\ncontract Asset is AssetInterface, Bytes32, ReturnData {\r\n    // Assigned asset proxy contract, immutable.\r\n    AssetProxyInterface public proxy;\r\n\r\n    /**\r\n     * Only assigned proxy is allowed to call.\r\n     */\r\n    modifier onlyProxy() {\r\n        if (address(proxy) == msg.sender) {\r\n            _;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets asset proxy address.\r\n     *\r\n     * Can be set only once.\r\n     *\r\n     * @param _proxy asset proxy contract address.\r\n     *\r\n     * @return success.\r\n     * @dev function is final, and must not be overridden.\r\n     */\r\n    function init(AssetProxyInterface _proxy) public returns(bool) {\r\n        if (address(proxy) != address(0)) {\r\n            return false;\r\n        }\r\n        proxy = _proxy;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Passes execution into virtual function.\r\n     *\r\n     * Can only be called by assigned asset proxy.\r\n     *\r\n     * @return success.\r\n     * @dev function is final, and must not be overridden.\r\n     */\r\n    function _performTransferWithReference(\r\n        address _to,\r\n        uint _value,\r\n        string memory _reference,\r\n        address _sender)\r\n    public onlyProxy() returns(bool) {\r\n        if (isICAP(_to)) {\r\n            return _transferToICAPWithReference(\r\n                bytes20(_to), _value, _reference, _sender);\r\n        }\r\n        return _transferWithReference(_to, _value, _reference, _sender);\r\n    }\r\n\r\n    /**\r\n     * Calls back without modifications.\r\n     *\r\n     * @return success.\r\n     * @dev function is virtual, and meant to be overridden.\r\n     */\r\n    function _transferWithReference(\r\n        address _to,\r\n        uint _value,\r\n        string memory _reference,\r\n        address _sender)\r\n    internal returns(bool) {\r\n        return proxy._forwardTransferFromWithReference(\r\n            _sender, _to, _value, _reference, _sender);\r\n    }\r\n\r\n    /**\r\n     * Passes execution into virtual function.\r\n     *\r\n     * Can only be called by assigned asset proxy.\r\n     *\r\n     * @return success.\r\n     * @dev function is final, and must not be overridden.\r\n     */\r\n    function _performTransferToICAPWithReference(\r\n        bytes32 _icap,\r\n        uint _value,\r\n        string memory _reference,\r\n        address _sender)\r\n    public onlyProxy() returns(bool) {\r\n        return _transferToICAPWithReference(_icap, _value, _reference, _sender);\r\n    }\r\n\r\n    /**\r\n     * Calls back without modifications.\r\n     *\r\n     * @return success.\r\n     * @dev function is virtual, and meant to be overridden.\r\n     */\r\n    function _transferToICAPWithReference(\r\n        bytes32 _icap,\r\n        uint _value,\r\n        string memory _reference,\r\n        address _sender)\r\n    internal returns(bool) {\r\n        return proxy._forwardTransferFromToICAPWithReference(\r\n            _sender, _icap, _value, _reference, _sender);\r\n    }\r\n\r\n    /**\r\n     * Passes execution into virtual function.\r\n     *\r\n     * Can only be called by assigned asset proxy.\r\n     *\r\n     * @return success.\r\n     * @dev function is final, and must not be overridden.\r\n     */\r\n    function _performTransferFromWithReference(\r\n        address _from,\r\n        address _to,\r\n        uint _value,\r\n        string memory _reference,\r\n        address _sender)\r\n    public onlyProxy() returns(bool) {\r\n        if (isICAP(_to)) {\r\n            return _transferFromToICAPWithReference(\r\n                _from, bytes20(_to), _value, _reference, _sender);\r\n        }\r\n        return _transferFromWithReference(_from, _to, _value, _reference, _sender);\r\n    }\r\n\r\n    /**\r\n     * Calls back without modifications.\r\n     *\r\n     * @return success.\r\n     * @dev function is virtual, and meant to be overridden.\r\n     */\r\n    function _transferFromWithReference(\r\n        address _from,\r\n        address _to,\r\n        uint _value,\r\n        string memory _reference,\r\n        address _sender)\r\n    internal returns(bool) {\r\n        return proxy._forwardTransferFromWithReference(\r\n            _from, _to, _value, _reference, _sender);\r\n    }\r\n\r\n    /**\r\n     * Passes execution into virtual function.\r\n     *\r\n     * Can only be called by assigned asset proxy.\r\n     *\r\n     * @return success.\r\n     * @dev function is final, and must not be overridden.\r\n     */\r\n    function _performTransferFromToICAPWithReference(\r\n        address _from,\r\n        bytes32 _icap,\r\n        uint _value,\r\n        string memory _reference,\r\n        address _sender)\r\n    public onlyProxy() returns(bool) {\r\n        return _transferFromToICAPWithReference(\r\n            _from, _icap, _value, _reference, _sender);\r\n    }\r\n\r\n    /**\r\n     * Calls back without modifications.\r\n     *\r\n     * @return success.\r\n     * @dev function is virtual, and meant to be overridden.\r\n     */\r\n    function _transferFromToICAPWithReference(\r\n        address _from,\r\n        bytes32 _icap,\r\n        uint _value,\r\n        string memory _reference,\r\n        address _sender)\r\n    internal returns(bool) {\r\n        return proxy._forwardTransferFromToICAPWithReference(\r\n            _from, _icap, _value, _reference, _sender);\r\n    }\r\n\r\n    /**\r\n     * Passes execution into virtual function.\r\n     *\r\n     * Can only be called by assigned asset proxy.\r\n     *\r\n     * @return success.\r\n     * @dev function is final, and must not be overridden.\r\n     */\r\n    function _performApprove(address _spender, uint _value, address _sender)\r\n    public onlyProxy() returns(bool) {\r\n        return _approve(_spender, _value, _sender);\r\n    }\r\n\r\n    /**\r\n     * Calls back without modifications.\r\n     *\r\n     * @return success.\r\n     * @dev function is virtual, and meant to be overridden.\r\n     */\r\n    function _approve(address _spender, uint _value, address _sender)\r\n    internal returns(bool) {\r\n        return proxy._forwardApprove(_spender, _value, _sender);\r\n    }\r\n\r\n    /**\r\n     * Passes execution into virtual function.\r\n     *\r\n     * Can only be called by assigned asset proxy.\r\n     *\r\n     * @return bytes32 result.\r\n     * @dev function is final, and must not be overridden.\r\n     */\r\n    function _performGeneric(bytes memory _data, address _sender)\r\n    public payable onlyProxy() {\r\n        _generic(_data, msg.value, _sender);\r\n    }\r\n\r\n    modifier onlyMe() {\r\n        if (address(this) == msg.sender) {\r\n            _;\r\n        }\r\n    }\r\n\r\n    // Most probably the following should never be redefined in child contracts.\r\n    address public genericSender;\r\n\r\n    function _generic(bytes memory _data, uint _value, address _msgSender) internal {\r\n        // Restrict reentrancy.\r\n        require(genericSender == address(0));\r\n        genericSender = _msgSender;\r\n        bool success = _assemblyCall(address(this), _value, _data);\r\n        delete genericSender;\r\n        _returnReturnData(success);\r\n    }\r\n\r\n    // Decsendants should use _sender() instead of msg.sender to properly process proxied calls.\r\n    function _sender() internal view returns(address) {\r\n        return address(this) == msg.sender ? genericSender : msg.sender;\r\n    }\r\n\r\n    // Interface functions to allow specifying ICAP addresses as strings.\r\n    function transferToICAP(string memory _icap, uint _value) public returns(bool) {\r\n        return transferToICAPWithReference(_icap, _value, '');\r\n    }\r\n\r\n    function transferToICAPWithReference(string memory _icap, uint _value, string memory _reference)\r\n    public returns(bool) {\r\n        return _transferToICAPWithReference(\r\n            _bytes32(_icap), _value, _reference, _sender());\r\n    }\r\n\r\n    function transferFromToICAP(address _from, string memory _icap, uint _value)\r\n    public returns(bool) {\r\n        return transferFromToICAPWithReference(_from, _icap, _value, '');\r\n    }\r\n\r\n    function transferFromToICAPWithReference(\r\n        address _from,\r\n        string memory _icap,\r\n        uint _value,\r\n        string memory _reference)\r\n    public returns(bool) {\r\n        return _transferFromToICAPWithReference(\r\n            _from, _bytes32(_icap), _value, _reference, _sender());\r\n    }\r\n\r\n    function isICAP(address _address) public pure returns(bool) {\r\n        bytes20 a = bytes20(_address);\r\n        if (a[0] != 'X' || a[1] != 'E') {\r\n            return false;\r\n        }\r\n        if (uint8(a[2]) < 48 || uint8(a[2]) > 57 || uint8(a[3]) < 48 || uint8(a[3]) > 57) {\r\n            return false;\r\n        }\r\n        for (uint i = 4; i < 20; i++) {\r\n            uint char = uint8(a[i]);\r\n            if (char < 48 || char > 90 || (char > 57 && char < 65)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: contracts\\Ambi2Enabled.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n\r\ncontract Ambi2 {\r\n    function claimFor(address _address, address _owner) public returns(bool);\r\n    function hasRole(address _from, bytes32 _role, address _to) public view returns(bool);\r\n    function isOwner(address _node, address _owner) public view returns(bool);\r\n}\r\n\r\n\r\ncontract Ambi2Enabled {\r\n    Ambi2 public ambi2;\r\n\r\n    modifier onlyRole(bytes32 _role) {\r\n        if (address(ambi2) != address(0) && ambi2.hasRole(address(this), _role, msg.sender)) {\r\n            _;\r\n        }\r\n    }\r\n\r\n    // Perform only after claiming the node, or claim in the same tx.\r\n    function setupAmbi2(Ambi2 _ambi2) public returns(bool) {\r\n        if (address(ambi2) != address(0)) {\r\n            return false;\r\n        }\r\n\r\n        ambi2 = _ambi2;\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: contracts\\Ambi2EnabledFull.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n\r\n\r\ncontract Ambi2EnabledFull is Ambi2Enabled {\r\n    // Setup and claim atomically.\r\n    function setupAmbi2(Ambi2 _ambi2) public returns(bool) {\r\n        if (address(ambi2) != address(0)) {\r\n            return false;\r\n        }\r\n        if (!_ambi2.claimFor(address(this), msg.sender) &&\r\n            !_ambi2.isOwner(address(this), msg.sender)) {\r\n            return false;\r\n        }\r\n\r\n        ambi2 = _ambi2;\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: contracts\\AssetWithAmbi.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n\r\n\r\n\r\ncontract AssetWithAmbi is Asset, Ambi2EnabledFull {\r\n    modifier onlyRole(bytes32 _role) {\r\n        if (address(ambi2) != address(0) && (ambi2.hasRole(address(this), _role, _sender()))) {\r\n            _;\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts\\AssetWithWhitelist.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n\r\n\r\ninterface INUXAsset {\r\n    function availableBalanceOf(address _holder) external view returns(uint);\r\n    function scheduleReleaseStart() external;\r\n    function transferLock(address _to, uint _value) external;\r\n}\r\n\r\ncontract NUXConstants {\r\n    uint constant NUX = 10**18;\r\n}\r\n\r\ncontract Readable {\r\n    function since(uint _timestamp) internal view returns(uint) {\r\n        if (not(passed(_timestamp))) {\r\n            return 0;\r\n        }\r\n        return block.timestamp - _timestamp;\r\n    }\r\n\r\n    function passed(uint _timestamp) internal view returns(bool) {\r\n        return _timestamp < block.timestamp;\r\n    }\r\n\r\n    function not(bool _condition) internal pure returns(bool) {\r\n        return !_condition;\r\n    }\r\n}\r\n\r\nlibrary ExtraMath {\r\n    function toUInt64(uint _a) internal pure returns(uint64) {\r\n        require(_a <= uint64(-1), 'uint64 overflow');\r\n        return uint64(_a);\r\n    }\r\n\r\n    function toUInt128(uint _a) internal pure returns(uint128) {\r\n        require(_a <= uint128(-1), 'uint128 overflow');\r\n        return uint128(_a);\r\n    }\r\n}\r\n\r\ncontract EToken2Interface {\r\n    function revokeAsset(bytes32 _symbol, uint _value) public returns(bool);\r\n}\r\n\r\ncontract NUXAsset is AssetWithAmbi, NUXConstants, Readable {\r\n    using SafeMath for uint;\r\n    using ExtraMath for uint;\r\n\r\n    uint public constant PRESALE_RELEASE_PERIOD = 760 days; // ~25 months\r\n    uint64 constant UNSET = uint64(-1);\r\n\r\n    struct ReleaseConfig {\r\n        uint64 preSale;\r\n        uint64 publicSale;\r\n        uint64 publicSaleReleasePeriod;\r\n    }\r\n\r\n    ReleaseConfig private _releaseConfig = ReleaseConfig(UNSET, UNSET, UNSET);\r\n    \r\n    struct Lock {\r\n        uint128 preSale;\r\n        uint128 publicSale;\r\n    }\r\n\r\n    mapping(address => Lock) private _locked;\r\n\r\n    event PreSaleLockTransfer(address _from, address _to, uint _value);\r\n    event PublicSaleLockTransfer(address _from, address _to, uint _value);\r\n    event PreSaleReleaseScheduled(uint _releaseStart);\r\n    event PublicSaleReleaseScheduled(uint _releaseStart, uint _releasePeriod);\r\n\r\n    modifier onlyRole(bytes32 _role) {\r\n        require(address(ambi2) != address(0) && (ambi2.hasRole(address(this), _role, _sender())),\r\n            'Access denied');\r\n        _;\r\n    }\r\n\r\n    modifier validateAvailableBalance(address _sender, uint _value) {\r\n        require(availableBalanceOf(_sender) >= _value, 'Insufficient available balance');\r\n        _;\r\n    }\r\n\r\n    modifier validateAllowance(address _from, address _spender, uint _value) {\r\n        require(proxy.allowance(_from, _spender) >= _value, 'Insufficient allowance');\r\n        _;\r\n    }\r\n\r\n    function _migrate(address _holder, uint _preSaleLock) private {\r\n        _locked[_holder].preSale = uint128(_preSaleLock);\r\n        emit PreSaleLockTransfer(address(0), _holder, _preSaleLock);\r\n    }\r\n\r\n    constructor(address _treasury) public {\r\n        uint128 preSaleLocked = uint128(22000000 * NUX);\r\n        uint128 publicSaleLocked = uint128(6000000 * NUX);\r\n        _locked[_treasury].preSale = preSaleLocked;\r\n        _locked[_treasury].publicSale = publicSaleLocked;\r\n        emit PreSaleLockTransfer(address(0), _treasury, preSaleLocked);\r\n        emit PublicSaleLockTransfer(address(0), _treasury, publicSaleLocked);\r\n        _migrate(0x7b1800B20e87e607b2791282dfF9e069Bb18493c, 244000000000000000000000);\r\n        _migrate(0x3341c7C754C6c2Ebf524D411849D47F87cCD8A7B, 244000000000000000000000);\r\n        _migrate(0x14Ce500a86F1e3aCE039571e657783E069643617, 244000000000000000000000);\r\n        _migrate(0x5cb1D4B99F972cCdecCEFcfeC638d72f9629B5d0, 244000000000000000000000);\r\n        _migrate(0x1ad015A04C3a21330a388f6a0995c7C092E66F93, 244000000000000000000000);\r\n        _migrate(0x1d2d7490BfBa0a80F7A07dD3E369f5824e92b3F5, 200000000000000000000000);\r\n        _migrate(0xc629357ca14A86a3198C5868BDabfe61EC6a6Dda, 195148516000000000000000);\r\n        _migrate(0x9c22d83FB0315263566740d018f08e8c075FC927, 122000000000000000000000);\r\n        _migrate(0xE1eB9cF168DB37c31B4bDf73511Bf44E2B8027Ef, 122000000000000000000000);\r\n        _migrate(0x6fFeCB94FCbB212267a54d39728f7117BDdf9902, 122000000000000000000000);\r\n        _migrate(0x344651A2445484bd2928eB46D2610DaaC1B42A66, 122000000000000000000000);\r\n        _migrate(0x726CDC837384a7Deb8bbea64beba2E7b4d7346c0, 122000000000000000000000);\r\n        _migrate(0x2BA56A2415DEdAaeF2a54a1A6CC90d4555e0000d, 122000000000000000000000);\r\n        _migrate(0x5C239132825898bC0047Ed8A6b347A8a4Ee621eB, 122000000000000000000000);\r\n        _migrate(0x83500F5571F81FF703D014cF05198fe10016b7dB, 97600000000000000000000);\r\n        _migrate(0x46DE6387a065c936740F4eDB08bd42ABEbbb78FD, 73200000000000000000000);\r\n        _migrate(0xe4069c2C2793D2E984A2b9FA2992D158a4d301B3, 69540000000000000000000);\r\n        _migrate(0x2875c17548b538CA87ddce654B82889396376005, 61000000000000000000000);\r\n        _migrate(0x913D74033D61dE00c388e4D30ba5ac016b104F56, 56730000000000000000000);\r\n        _migrate(0x1476d037fbbDd6d632afAE6239c91646b0271656, 51240000000000000000000);\r\n        _migrate(0x61A6007A980C8a8655071AE83930e8B2883e8407, 48800000000000000000000);\r\n        _migrate(0xC8FDcCD9bB285b22a187F179D5EB9bfcA6459C41, 48800000000000000000000);\r\n        _migrate(0x7B662F95cB081d1466fd2387e3F67BB28A98cB1E, 48800000000000000000000);\r\n        _migrate(0xA734871BC0f9d069936db4fA44AeA6d4325F41e5, 48800000000000000000000);\r\n        _migrate(0x53aFEB120eDCE5D778caB7DE76d34F5Fcd92C7d0, 40052000000000000000000);\r\n        _migrate(0x2C1A7E92867BE07F944555c34759A210cb353A44, 36600000000000000000000);\r\n        _migrate(0x27D8519774C77bAb85031463F236c702c7Ee8bD7, 34770000000000000000000);\r\n        _migrate(0xa4317aB9d7DF7453d8E0853415e04f7e3a78f78F, 31720000000000000000000);\r\n        _migrate(0xdB057B29Bc9219388820a438e26C561C16BCa8a1, 29036000000000000000000);\r\n        _migrate(0x533f8B07d95e6eA313de3e3273d8908eBA2f42cA, 26840000000000000000000);\r\n        _migrate(0xFf8A662fAb0745A5032cCF326Fd14b235Fa88C2B, 26840000000000000000000);\r\n        _migrate(0xF25B386D342aE5b9E8cE5Be8D827203bA9321A65, 24400000000000000000000);\r\n        _migrate(0xff5351A95c950964E14579716332eecac0118B20, 24400000000000000000000);\r\n        _migrate(0x0998160bdF3Ff6D86A4E9D5c31e0eFC3Ca7e7D01, 24400000000000000000000);\r\n        _migrate(0x0C25078Bf9F87E804738301e15047A6F3A646473, 24400000000000000000000);\r\n        _migrate(0xe88663F5878Dd0967C905EC8c7Cc65d6d8e091E6, 24400000000000000000000);\r\n        _migrate(0x675F60d68701ed237e19B78152dE1a68f3500e2F, 22916000000000000000000);\r\n        _migrate(0x7f62Fbb8a9E707e44A198584ae2e8Db67cEfC30a, 19764000000000000000000);\r\n        _migrate(0x0D955df946AbE59757eB5Ae31AA50bCB6D3317da, 19520000000000000000000);\r\n        _migrate(0x2f4342CA050c46de579e995C16780dB2E87d0638, 18300000000000000000000);\r\n        _migrate(0x68a313B6774E44beEb0f1Dcc868128b780B2F311, 15000000000000000000000);\r\n        _migrate(0x970815c4ae5CC17d526199AC188A38Dab5324D8e, 12200000000000000000000);\r\n        _migrate(0x951B6d50D07C39b0f97A7bb2F5c1e96F07a093d3, 12200000000000000000000);\r\n        _migrate(0x1f036E4C35A222c8E03355C8E88d1Be1efB9D7D1, 12200000000000000000000);\r\n        _migrate(0x011FAc5fB54c11e361d5120c6E7D52e5BdDEC789, 12200000000000000000000);\r\n        _migrate(0x54640F357199a4E9E1b12E249A7Df9B52BEEfd1a, 10980000000000000000000);\r\n        _migrate(0xEEED73B9A73664C90F58aa63Cb87C87C711AaA04, 9760000000000000000000);\r\n        _migrate(0x767f0b01F6D4d5fcc64367a3a6bEE16fFd3D8f41, 9760000000000000000000);\r\n        _migrate(0x4B4DF3B4c0A893C7BeefE72e1b8DAe7654ae6f47, 8000000000000000000000);\r\n        _migrate(0xFFB3ad2b555dA15eb45CfdC76c43932262f18e68, 7686000000000000000000);\r\n        _migrate(0xB09E89014831adD98273Eb7Dc40e894aADBD9320, 7320000000000000000000);\r\n        _migrate(0xD7F0233f147De4E878C6A57E1B0b7BaAE4aC3516, 7320000000000000000000);\r\n        _migrate(0x362a45cEbd74C06f0e42067134378cd9490b5524, 7320000000000000000000);\r\n        _migrate(0x80c14edC8aD81c91ED5aa053eB2d99d1b97de37F, 7320000000000000000000);\r\n        _migrate(0xE4580938d81F89a22fFD58B2145952D33A67d066, 7320000000000000000000);\r\n        _migrate(0xcE185d79CE13b33a103219A55d88a0BDf9CD3946, 7320000000000000000000);\r\n        _migrate(0x54898c1feb796F2c1ba092F1Cfd31B4c8dA8Ed61, 7198000000000000000000);\r\n        _migrate(0xE10a4C2E6B461d9ad65eD7Cfa371cd3CE5D61Bf0, 7129680000000000000000);\r\n        _migrate(0xe29bE3300909D7620fA9B0b893b8CC99BA334188, 7036960000000000000000);\r\n        _migrate(0xEB5954a418392C4E2af30ab0EF32bc205fCf941B, 6607520000000000000000);\r\n        _migrate(0x082D4eC311D99aE204cf3D193A2023dBc542c1A6, 6588000000000000000000);\r\n        _migrate(0x14B95Ed55C0825A30C5bF6D4905379E06749B117, 6344000000000000000000);\r\n        _migrate(0xd5f1acF04Ba9B20Bd4C6a5046aA4a584e0540D54, 6124400000000000000000);\r\n        _migrate(0xBA3432337151A8abc465512Eafd1189b0b223390, 6100000000000000000000);\r\n        _migrate(0xC77FA6C05B4e472fEee7c0f9B20E70C5BF33a99B, 6100000000000000000000);\r\n        _migrate(0xB7D9945166e3DA89ee4c0947230753d656D116a5, 6100000000000000000000);\r\n        _migrate(0x2b36Ad03207b04941dFBC914f0EBD043bd0a4EB3, 6013341632000000000000);\r\n        _migrate(0x87eA867bDFFD1DdF6D301679DEE2FDA1b9c89eDd, 5831600000000000000000);\r\n        _migrate(0x2f89011A30b3aBBf771B6098d384fEE44Fdee0bB, 5368000000000000000000);\r\n        _migrate(0x3A628624B8dAe402EC1b01c6525C065784717Cb5, 5308078832000000000000);\r\n        _migrate(0xE7FEb2135C91042d6579dB9E770c67DB2C8DeFB7, 5236240000000000000000);\r\n        _migrate(0xcc71ABB11Ead716414A316c4B1121944F293Cc3b, 5124000000000000000000);\r\n        _migrate(0xc7C1d1306f57e9f9c7a4728237Cc7508bcb4a67f, 5109383060000000000000);\r\n        _migrate(0xF82d795132fbA786BBbB385Fb0AA9a990ce91E9d, 5016640000000000000000);\r\n        _migrate(0x0A7A9D35BCf54dea0BabEA88a89A96c5493563B8, 4980040000000000000000);\r\n        _migrate(0xAF27EcE5ACc5a858D6f8c205C5A4AE74cA85E3E3, 4941000000000000000000);\r\n        _migrate(0x61751BC401f4EABe10A238661B4A60ba84910059, 4880000000000000000000);\r\n        _migrate(0xA0D1476011a971B4F63Dd5b2b9Ac1E3F1229bb59, 4880000000000000000000);\r\n        _migrate(0x82d8d99955e38239d865A9dd0D44EF5DD06bA99c, 4880000000000000000000);\r\n        _migrate(0xEed4B9a3B478C554c8c9f14Df47df42bf212E747, 4880000000000000000000);\r\n        _migrate(0x1A942E037Cdfe8098BFaE2a3F181CA22AA6BEaf7, 4880000000000000000000);\r\n        _migrate(0x62d589BCAcCAA636827c5e0209468080ff4577B1, 4880000000000000000000);\r\n        _migrate(0xca1B239F5e5Ef7B68B101A376013afF0EAe28478, 4880000000000000000000);\r\n        _migrate(0x8117C9BE202B0442EFbc79BC81b07F39B148b770, 4880000000000000000000);\r\n        _migrate(0x746E17548B63b0689E054D84a09abe1f5B70672C, 4880000000000000000000);\r\n        _migrate(0xCb114805B901F7a9c38d5675272eF26459a7D805, 4880000000000000000000);\r\n        _migrate(0x52dcBD812598dCD10dA71d65F9AE23A86B15999E, 4880000000000000000000);\r\n        _migrate(0xa52197856025b614Ba5C3F88f5cD8739E09F049e, 4880000000000000000000);\r\n        _migrate(0x53ff4967b854D70067Ffb31d47567D372ddee783, 4880000000000000000000);\r\n        _migrate(0x6ea24f3cDDDF5B88F90B73A2d7df7ad9C0f9BEC4, 4880000000000000000000);\r\n        _migrate(0xb81ab8a53E09e9c430c736d53D455A99C4F8e9Da, 4880000000000000000000);\r\n        _migrate(0xB5806a701c2ae0366e15BDe9bE140E82190fa3d6, 4880000000000000000000);\r\n        _migrate(0x61D988FCF27A988fCA324F1BEc8F57B236A85668, 4636000000000000000000);\r\n        _migrate(0x0B82F2f2FB282bBA35619e16946c15E6B41F44c2, 4538399996000000000000);\r\n        _migrate(0xBb8930FF7dce532260Eb275FafF81CBEdAD11230, 4426160000000000000000);\r\n        _migrate(0xa1aEf6335a2F633cfb1FfEbdA0B5d32AcbC7E873, 4323680000000000000000);\r\n        _migrate(0x1e66350d488ABd437925181Cc3F39A258416EDF4, 4079950476000000000000);\r\n        _migrate(0xF9852FA5db7b62bC7B80Da0a0E408CFe08cED906, 4074800000000000000000);\r\n        _migrate(0x7118Bb4c93b8fCa9273C74AF1d2FE4a923EcdEA9, 4008920000000000000000);\r\n        _migrate(0x93d6711Fad14D498F9000dC4d9361bEf020e2259, 3960120000000000000000);\r\n        _migrate(0xA10039AbC04d165325C5eaF16cb4dBEfF95254F0, 3660000000000000000000);\r\n        _migrate(0xC51Fe3e473CE0Ba53B4cd1e7908b1942c5662A59, 3513600000000000000000);\r\n        _migrate(0x32e49Dda638696B15ea3199DBc7441d18431bE46, 3294000000000000000000);\r\n        _migrate(0x7C3928f5b6cDa431fEDF4a3FA9edEa5E558972E6, 3246331528000000000000);\r\n        _migrate(0x521Af12dC5051e3850a5c44753d90822fb9E03c9, 3233512400000000000000);\r\n        _migrate(0xBEEC08888f8BFAE5193279A2260C590Ad3136844, 2829526076000000000000);\r\n        _migrate(0x1e642C61D03346f103f8f6ed2875E91cF8Ed3893, 2749880000000000000000);\r\n        _migrate(0x02cEf7B37E6c6c70e465787bB92c2D4987Fc33C1, 2691320000000000000000);\r\n        _migrate(0x3edD0DB98AaD6585DF88fe51499C0D20ed1AB2E7, 2684000000000000000000);\r\n        _migrate(0xEa32DD28126DBBf7DEfAE685D1a89D2701058e96, 2562000000000000000000);\r\n        _migrate(0x80986fAbCed53d1a0D5Fc0A3bEC209ce2bfAd4d1, 2562000000000000000000);\r\n        _migrate(0xb676d03c31653d86fd463059783e119dF88e69dE, 2562000000000000000000);\r\n        _migrate(0x49F9Db1961dA0f83E447426cA7b028c3d5893405, 2464400000000000000000);\r\n        _migrate(0x2D7bfbd172d36995FEB8e477E52A744E83B61578, 2440000000000000000000);\r\n        _migrate(0xd985741EC68b7d085d416f63E4362550EECB56fC, 2440000000000000000000);\r\n        _migrate(0x2d3807680493b01A5B4f8a81Fbd23fC8607520C0, 2440000000000000000000);\r\n        _migrate(0x79FD5103674E49e35492f085f10C26097cAdcbEf, 2440000000000000000000);\r\n        _migrate(0xB2001c6827F908AcF72C38e9FDD98085e61E4125, 2440000000000000000000);\r\n        _migrate(0xE9bF0cfdA0E21D2ad1EbF39117053eCC09bd8fD6, 2440000000000000000000);\r\n        _migrate(0x7B8d15015E5B1ad0162f455b3965e7b8481C2678, 2440000000000000000000);\r\n        _migrate(0xF6913cB689336c9aaa27BD9427cC28AA8d9272DF, 2440000000000000000000);\r\n        _migrate(0xb169bf86b353affFAD4E677a413918C9FF80F22F, 2440000000000000000000);\r\n        _migrate(0x190F8418Be383F4B6486Fe39918ECd16fFC47a91, 2440000000000000000000);\r\n        _migrate(0x2f7Ab4f237586304Ba4DeD68620147FE920F204E, 2440000000000000000000);\r\n        _migrate(0x346e02238E9a24fc5e88d28625D1CF38ff6712C2, 2440000000000000000000);\r\n        _migrate(0x8948e76B10612d4C3360917B02EDfA45b56588a9, 2440000000000000000000);\r\n        _migrate(0xad6EE7C40d7D80a6c404E82e77Cde5c5088E98a5, 2440000000000000000000);\r\n        _migrate(0x4BA42b8811d5d50930a8BE400dCBf6Db3264799b, 2440000000000000000000);\r\n        _migrate(0x89604a25FA4d3f30Fde3d767cDbc18F06226df91, 2440000000000000000000);\r\n        _migrate(0xDb8Eb119800a162017E669Ccc5910cd65d6Ff96A, 2440000000000000000000);\r\n        _migrate(0x0D047a6E47C74bD69dE344d030E695f244767066, 2440000000000000000000);\r\n        _migrate(0x389b8Bd4FAc72ff9Aa5fD888a4B3283Ac4c14b28, 2440000000000000000000);\r\n        _migrate(0x607A003232d810790120aFA706D18DDb58653014, 2440000000000000000000);\r\n        _migrate(0x737D1bE798Efa2278FB46807b2ea3ec36397f5da, 2440000000000000000000);\r\n        _migrate(0x9304795B5214504cfde51b5f0951EdC365b7f267, 2440000000000000000000);\r\n        _migrate(0xc74fcc120DC57387C0Ee4972B5C39BE139375eFc, 2440000000000000000000);\r\n        _migrate(0xaf779D1EddB59f1035480Dd377D8187C865c20dA, 2440000000000000000000);\r\n        _migrate(0x0687FDf1617C222fc7EAf72e340e177C616ebF75, 2440000000000000000000);\r\n        _migrate(0x45e37F6C32dF82E128565f24ef2AB9cd27d065ef, 2440000000000000000000);\r\n        _migrate(0xd862b0E73D3f450060e663A324Aee77ffB8E086a, 2440000000000000000000);\r\n        _migrate(0x28B8f3BC25539b0c1336373Ca5B205E9d4A4c126, 2440000000000000000000);\r\n        _migrate(0x68413B4d04876E74b7837f688AAd2bC38eC765a0, 2440000000000000000000);\r\n        _migrate(0xE460ccFF990D88538e45142b6153742763AEf899, 2440000000000000000000);\r\n        _migrate(0x13faf5475DE4BecFa376F4d540C0F7831b88B903, 244000000000000000000);\r\n    }\r\n\r\n    function releaseConfig() public view returns(uint, uint, uint) {\r\n        ReleaseConfig memory config = _releaseConfig;\r\n        return (config.preSale, config.publicSale, config.publicSaleReleasePeriod);\r\n    }\r\n\r\n    function locked(address _holder) public view returns(uint, uint) {\r\n        Lock memory lock = _locked[_holder];\r\n        return (lock.preSale, lock.publicSale);\r\n    }\r\n\r\n    function _calcualteLocked(uint _lock, uint _releaseStart, uint _releasePeriod) private view returns(uint) {\r\n        uint released = (_lock.mul(since(_releaseStart))) / _releasePeriod;\r\n        if (_lock <= released) {\r\n            return 0;\r\n        }\r\n        return _lock - released;\r\n    }\r\n\r\n    function availableBalanceOf(address _holder) public view returns(uint) {\r\n        uint totalBalance = proxy.balanceOf(_holder);\r\n        uint preSaleLock;\r\n        uint publicSaleLock;\r\n        (preSaleLock, publicSaleLock) = locked(_holder);\r\n        uint preSaleReleaseStart;\r\n        uint publicSaleReleaseStart;\r\n        uint publicSaleReleasePeriod;\r\n        (preSaleReleaseStart, publicSaleReleaseStart, publicSaleReleasePeriod) = releaseConfig();\r\n        preSaleLock = _calcualteLocked(preSaleLock, preSaleReleaseStart, PRESALE_RELEASE_PERIOD);\r\n        publicSaleLock = _calcualteLocked(publicSaleLock, publicSaleReleaseStart, publicSaleReleasePeriod);\r\n        uint stillLocked = preSaleLock.add(publicSaleLock);\r\n        if (totalBalance <= stillLocked) {\r\n            return 0;\r\n        }\r\n        return totalBalance - stillLocked;\r\n    }\r\n\r\n    function preSaleScheduleReleaseStart() public onlyRole('admin') {\r\n        require(_releaseConfig.preSale == UNSET, 'Already scheduled');\r\n        uint64 releaseStart = (block.timestamp + 14 days).toUInt64();\r\n        _releaseConfig.preSale = releaseStart;\r\n        emit PreSaleReleaseScheduled(releaseStart);\r\n    }\r\n\r\n    function publicSaleScheduleReleaseStart(uint _releaseStart, uint _releasePeriod) public onlyRole('admin') {\r\n        require(_releaseConfig.publicSale == UNSET, 'Already scheduled');\r\n        require(_releaseConfig.publicSaleReleasePeriod == UNSET, 'Already scheduled');\r\n        _releaseConfig.publicSale = (_releaseStart).toUInt64();\r\n        _releaseConfig.publicSaleReleasePeriod = (_releasePeriod).toUInt64();\r\n        emit PublicSaleReleaseScheduled(_releaseStart, _releasePeriod);\r\n    }\r\n\r\n    function preSaleTransferLock(address _to, uint _value) public onlyRole('distributor') {\r\n        address _from = _sender();\r\n        uint preSaleLock;\r\n        uint publicSaleLock;\r\n        (preSaleLock, publicSaleLock) = locked(_from);\r\n        require(preSaleLock >= _value, 'Not enough locked');\r\n        require(proxy.balanceOf(_from) >= publicSaleLock.add(preSaleLock), 'Cannot transfer released');\r\n        _locked[_from].preSale = (preSaleLock - _value).toUInt128();\r\n        if (_to == address(0)) {\r\n            _burn(_from, _value);\r\n        } else {\r\n            _locked[_to].preSale = uint(_locked[_to].preSale).add(_value).toUInt128();\r\n            require(super._transferWithReference(_to, _value, '', _from), 'Transfer failed');\r\n        }\r\n        emit PreSaleLockTransfer(_from, _to, _value);\r\n    }\r\n\r\n    function publicSaleTransferLock(address _to, uint _value) public onlyRole('distributor') {\r\n        address _from = _sender();\r\n        uint preSaleLock;\r\n        uint publicSaleLock;\r\n        (preSaleLock, publicSaleLock) = locked(_from);\r\n        require(publicSaleLock >= _value, 'Not enough locked');\r\n        require(proxy.balanceOf(_from) >= publicSaleLock.add(preSaleLock), 'Cannot transfer released');\r\n        _locked[_from].publicSale = (publicSaleLock - _value).toUInt128();\r\n        if (_to == address(0)) {\r\n            _burn(_from, _value);\r\n        } else {\r\n            _locked[_to].publicSale = uint(_locked[_to].publicSale).add(_value).toUInt128();\r\n            require(super._transferWithReference(_to, _value, '', _from), 'Transfer failed');\r\n        }\r\n        emit PublicSaleLockTransfer(_from, _to, _value);\r\n    }\r\n\r\n    function _burn(address _from, uint _value) private {\r\n        require(super._transferWithReference(address(this), _value, '', _from), 'Burn transfer failed');\r\n        require(EToken2Interface(proxy.etoken2()).revokeAsset(proxy.etoken2Symbol(), _value), 'Burn failed');\r\n    }\r\n\r\n    function _transferWithReference(\r\n        address _to,\r\n        uint _value,\r\n        string memory _reference,\r\n        address _sender)\r\n    internal validateAvailableBalance(_sender, _value) returns(bool) {\r\n        return super._transferWithReference(_to, _value, _reference, _sender);\r\n    }\r\n\r\n    function _transferFromWithReference(\r\n        address _from,\r\n        address _to,\r\n        uint _value,\r\n        string memory _reference,\r\n        address _sender)\r\n    internal\r\n    validateAvailableBalance(_from, _value)\r\n    validateAllowance(_from, _sender, _value)\r\n    returns(bool) {\r\n        return super._transferFromWithReference(_from, _to, _value, _reference, _sender);\r\n    }\r\n\r\n    function _transferToICAPWithReference(\r\n        bytes32 _icap,\r\n        uint _value,\r\n        string memory _reference,\r\n        address _sender)\r\n    internal validateAvailableBalance(_sender, _value) returns(bool) {\r\n        return super._transferToICAPWithReference(_icap, _value, _reference, _sender);\r\n    }\r\n\r\n    function _transferFromToICAPWithReference(\r\n        address _from,\r\n        bytes32 _icap,\r\n        uint _value,\r\n        string memory _reference,\r\n        address _sender)\r\n    internal\r\n    validateAvailableBalance(_from, _value)\r\n    validateAllowance(_from, _sender, _value)\r\n    returns(bool) {\r\n        return super._transferFromToICAPWithReference(_from, _icap, _value, _reference, _sender);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"genericSender\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"_performTransferWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proxy\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"preSaleTransferLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"availableBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isICAP\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRESALE_RELEASE_PERIOD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_icap\",\"type\":\"string\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFromToICAP\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ambi2\",\"type\":\"address\"}],\"name\":\"setupAmbi2\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_icap\",\"type\":\"string\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferToICAP\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_icap\",\"type\":\"string\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"}],\"name\":\"transferFromToICAPWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_icap\",\"type\":\"string\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"}],\"name\":\"transferToICAPWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"publicSaleTransferLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_icap\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"_performTransferToICAPWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"preSaleScheduleReleaseStart\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"locked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"_performTransferFromWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"_performGeneric\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"releaseConfig\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"_performApprove\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_icap\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"_performTransferFromToICAPWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proxy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ambi2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_releaseStart\",\"type\":\"uint256\"},{\"name\":\"_releasePeriod\",\"type\":\"uint256\"}],\"name\":\"publicSaleScheduleReleaseStart\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_treasury\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"PreSaleLockTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"PublicSaleLockTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_releaseStart\",\"type\":\"uint256\"}],\"name\":\"PreSaleReleaseScheduled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_releaseStart\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_releasePeriod\",\"type\":\"uint256\"}],\"name\":\"PublicSaleReleaseScheduled\",\"type\":\"event\"}]","ContractName":"NUXAsset","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"1","Runs":"10000","ConstructorArguments":"000000000000000000000000bb12800e7446a51395b2d853d6ce7f22210bb5e5","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://c1d304827bfdcabf752babcb823408c51386dc4a44b9530bb605cffb6a93882c"}]}