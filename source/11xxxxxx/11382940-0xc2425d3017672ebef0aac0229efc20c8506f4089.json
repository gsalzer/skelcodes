{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity^0.6.0;\r\n\r\n/*\r\n\r\n* Team Equitable Builds Inc presents..\r\n\r\n* ====================================*\r\n*        _____ ___ _______ ______     *\r\n*       |  _  |  ||  |  __|   __|     *\r\n*       |     |  |  |  __|   |__      *\r\n*       |__|__|_____|____|_____|      *\r\n*                                     *\r\n* ====================================*\r\n\r\n*/\r\n\r\ncontract AVEC{\r\n\r\n    /*=================================\r\n\r\n    =            MODIFIERS            =\r\n\r\n    =================================*/\r\n\r\n    //verify caller address members_ = true\r\n\r\n    modifier onlyMembers(address _customerAddress) {\r\n\r\n        require(\r\n\r\n                // is the customer in the member whitelist?\r\n\r\n                members_[_customerAddress] == true\r\n\r\n            );\r\n\r\n            // execute\r\n\r\n        _;\r\n\r\n    }\r\n\r\n    //verify caller address founderdevelopers_ = true\r\n\r\n    modifier onlyFounderDevelopers(address _customerAddress) {\r\n\r\n        require(\r\n\r\n                // is the customer in the Founder Developer whitelist?\r\n\r\n                founderdevelopers_[_customerAddress] == true\r\n\r\n            );\r\n\r\n            // execute\r\n\r\n        _;\r\n\r\n    }\r\n\r\n    //verify caller address ceva_ = true\r\n\r\n    modifier onlyCEVA(address _customerAddress) {\r\n\r\n        require(\r\n\r\n                // is the customer in the ceva whitelist?\r\n\r\n                ceva_[_customerAddress] == true\r\n\r\n            );\r\n\r\n            // execute\r\n\r\n        _;\r\n\r\n    }\r\n\r\n    modifier onlyAdministrator(address _customerAddress){\r\n\r\n        require(\r\n\r\n            administrators[_customerAddress] == true\r\n\r\n            );\r\n\r\n        _;\r\n\r\n    }\r\n\r\n    /*==============================\r\n\r\n    =            EVENTS            =\r\n\r\n    ==============================*/\r\n\r\n    event AVECtoONUS(\r\n\r\n        address indexed MemberAddress,\r\n\r\n        uint256 tokensConverted\r\n\r\n    );\r\n\r\n    event ONUStoAVEC(\r\n\r\n        address indexed MemberAddress,\r\n\r\n        uint256 tokensConverted\r\n\r\n    );\r\n\r\n    event OnWithdraw(\r\n\r\n        address indexed MemberAddress,\r\n\r\n        uint256 tokensWithdrawn,\r\n\r\n        uint8 envelopeNumber\r\n\r\n    );\r\n\r\n    // ERC20\r\n\r\n    event Transfer(\r\n\r\n        address indexed from,\r\n\r\n        address indexed to,\r\n\r\n        uint256 value\r\n\r\n    );\r\n\r\n    event PropertyTransfer(\r\n\r\n        address indexed from,\r\n\r\n        address indexed to,\r\n\r\n        uint256 value,\r\n\r\n        bytes32 property\r\n\r\n    );\r\n\r\n    event Burn(\r\n\r\n        address indexed from,\r\n\r\n        uint256 tokens,\r\n\r\n        uint256 propertyValue\r\n\r\n    );\r\n\r\n    // ERC20\r\n\r\n    event Approval(\r\n\r\n        address indexed _owner,\r\n\r\n        address indexed _spender,\r\n\r\n        uint256 _value\r\n\r\n    );\r\n\r\n    event PropertyValuation(\r\n\r\n        address indexed from,\r\n\r\n        bytes32 _propertyUniqueID,\r\n\r\n        uint256 propertyValue\r\n\r\n    );\r\n\r\n    event PropertyWhitelisted(\r\n\r\n        address indexed from,\r\n\r\n        bytes32 _propertyUniqueID,\r\n\r\n        bool _trueFalse\r\n\r\n    );\r\n\r\n    event MemberWhitelisted(\r\n\r\n        address indexed from,\r\n\r\n        address indexed to,\r\n\r\n        bool _trueFalse\r\n\r\n    );\r\n\r\n    event FounderDeveloperWhitelisted(\r\n\r\n        address indexed from,\r\n\r\n        address indexed to,\r\n\r\n        bool _trueFalse\r\n\r\n    );\r\n\r\n    event CEVAWhitelisted(\r\n\r\n        address indexed from,\r\n\r\n        address indexed to,\r\n\r\n        bool _trueFalse\r\n\r\n    );\r\n\r\n    event AdminWhitelisted(\r\n\r\n        address indexed from,\r\n\r\n        address indexed to,\r\n\r\n        bool _trueFalse\r\n\r\n    );\r\n\r\n    /*=====================================\r\n\r\n    =            CONFIGURABLES            =\r\n\r\n    =====================================*/\r\n\r\n    string private name = \"AlternateVirtualEquityCredits\";\r\n\r\n    string private symbol = \"AVEC\";\r\n\r\n    uint8 private decimals = 18;\r\n\r\n    address internal whoaaddress_ = 0x314d0ED76d866826C809fb6a51d63642b2E9eC3e;\r\n\r\n    address internal whoamaintenanceaddress_ = 0x2722B426B11978c29660e8395a423Ccb93AE0403;\r\n\r\n    address internal whoarewardsaddress_ = 0xA9d241b568DF9E8A7Ec9e44737f29a8Ee00bfF53;\r\n\r\n    address internal cevaaddress_ = 0xdE281c22976dE2E9b3f4F87bEB60aE9E67DFf5C4;\r\n\r\n    address internal credibleyouaddress_ = 0xc9c1Ffd6B4014232Ef474Daa4CA1506A6E39Be89;\r\n\r\n    address internal techaddress_ = 0xB6148C62e6A6d48f41241D01e3C4841139144ABa;\r\n\r\n    address internal existholdingsaddress_ = 0xac1B6580a175C1f2a4e3220A24e6f65fF3AB8A03;\r\n\r\n    address internal existcryptoaddress_ = 0xb8C098eE976f1162aD277936a5D1BCA7a8Fe61f5;\r\n\r\n    // founder developer address whitelist archive\r\n\r\n    mapping(address => bool) internal members_;\r\n\r\n    // members whitelist address archive\r\n\r\n    mapping(address => bool) internal founderdevelopers_;\r\n\r\n    // ceva whitelist address archive\r\n\r\n    mapping(address => bool) internal ceva_;\r\n\r\n    // administrator list (see above on what they can do)\r\n\r\n    mapping(address => bool) internal administrators;\r\n\r\n    // setting for allowance function determines amount of tokens address can spend from mapped address\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n    mapping (address => mapping(bytes32 => bool)) internal mintrequestwhitelist_;\r\n\r\n    mapping (address => mapping(bytes32 => bool)) internal burnrequestwhitelist_;\r\n\r\n    mapping (address => mapping(bytes32 => bool)) internal propertywhitelist_;\r\n\r\n    mapping (bytes32 => mapping(address => uint256)) internal propertyBalanceLedger_;\r\n\r\n    mapping (bytes32 => mapping(address => uint256)) internal propertyLastKnownValue_;\r\n\r\n    mapping (address => mapping(bytes32 => uint256)) internal propertyvalue_;\r\n\r\n    mapping (address => mapping(bytes32 => uint256)) internal propertyvalueOld_;\r\n\r\n    mapping (address => mapping(bytes32 => uint256)) internal propertyPriceUpdateCountMember_;\r\n\r\n    mapping(bytes32 => uint256) internal propertyPriceUpdateCountAsset_;\r\n\r\n    mapping(bytes32 => uint256) internal propertyGlobalBalance_;\r\n\r\n    mapping(bytes32 => uint256) internal propertyPriceUpdatesAsset_;\r\n\r\n    mapping(bytes32 => address) internal propertyOwner_;\r\n\r\n    mapping(bytes32 => uint256) internal lastMintingPrice_;\r\n\r\n    mapping(address => bytes32) internal transferingPropertyid_;\r\n\r\n    mapping(address => bytes32) internal workingPropertyid_;\r\n\r\n    mapping(address => bytes32) internal workingMintRequestid_;\r\n\r\n    mapping(address => bytes32) internal workingBurnRequestid_;\r\n\r\n   /*================================\r\n\r\n    =            DATASETS            =\r\n\r\n    ================================*/\r\n\r\n    // amount of shares for each address (scaled number)\r\n\r\n    mapping(address => uint256) internal tokenBalanceLedger_ ;\r\n\r\n    mapping(address => uint256) internal mintingDepositsOf_;\r\n\r\n    mapping(address => uint256) internal amountCirculated_;\r\n\r\n    mapping(address => uint256) internal taxesFeeTotalWithdrawn_;\r\n\r\n    mapping(address => uint256) internal taxesPreviousWithdrawn_;\r\n\r\n    mapping(address => uint256) internal taxesFeeSharehold_;\r\n\r\n    mapping(address => uint256) internal insuranceFeeTotalWithdrawn_;\r\n\r\n    mapping(address => uint256) internal insurancePreviousWithdrawn_;\r\n\r\n    mapping(address => uint256) internal insuranceFeeSharehold_;\r\n\r\n    mapping(address => uint256) internal maintenanceFeeTotalWithdrawn_;\r\n\r\n    mapping(address => uint256) internal maintenancePreviousWithdrawn_;\r\n\r\n    mapping(address => uint256) internal maintenanceFeeSharehold_;\r\n\r\n    mapping(address => uint256) internal waECOFeeTotalWithdrawn_;\r\n\r\n    mapping(address => uint256) internal waECOPreviousWithdrawn_;\r\n\r\n    mapping(address => uint256) internal waECOFeeSharehold_;\r\n\r\n    mapping(address => uint256) internal holdoneTotalWithdrawn_;\r\n\r\n    mapping(address => uint256) internal holdonePreviousWithdrawn_;\r\n\r\n    mapping(address => uint256) internal holdoneSharehold_;\r\n\r\n    mapping(address => uint256) internal holdtwoTotalWithdrawn_;\r\n\r\n    mapping(address => uint256) internal holdtwoPreviousWithdrawn_;\r\n\r\n    mapping(address => uint256) internal holdtwoSharehold_;\r\n\r\n    mapping(address => uint256) internal holdthreeTotalWithdrawn_;\r\n\r\n    mapping(address => uint256) internal holdthreePreviousWithdrawn_;\r\n\r\n    mapping(address => uint256) internal holdthreeSharehold_;\r\n\r\n    mapping(address => uint256) internal rewardsTotalWithdrawn_;\r\n\r\n    mapping(address => uint256) internal rewardsPreviousWithdrawn_;\r\n\r\n    mapping(address => uint256) internal rewardsSharehold_;\r\n\r\n    mapping(address => uint256) internal techTotalWithdrawn_;\r\n\r\n    mapping(address => uint256) internal techPreviousWithdrawn_;\r\n\r\n    mapping(address => uint256) internal techSharehold_;\r\n\r\n    mapping(address => uint256) internal existholdingsTotalWithdrawn_;\r\n\r\n    mapping(address => uint256) internal existholdingsPreviousWithdrawn_;\r\n\r\n    mapping(address => uint256) internal existholdingsSharehold_;\r\n\r\n    mapping(address => uint256) internal existcryptoTotalWithdrawn_;\r\n\r\n    mapping(address => uint256) internal existcryptoPreviousWithdrawn_;\r\n\r\n    mapping(address => uint256) internal existcryptoSharehold_;\r\n\r\n    mapping(address => uint256) internal whoaTotalWithdrawn_;\r\n\r\n    mapping(address => uint256) internal whoaPreviousWithdrawn_;\r\n\r\n    mapping(address => uint256) internal whoaSharehold_;\r\n\r\n    mapping(address => uint256) internal credibleyouTotalWithdrawn_;\r\n\r\n    mapping(address => uint256) internal credibleyouPreviousWithdrawn_;\r\n\r\n    mapping(address => uint256) internal credibleyouSharehold_;\r\n\r\n    mapping(address => uint256) internal numberofmintingrequestswhitelisted_;\r\n\r\n    mapping(address => uint256) internal numberofpropertieswhitelisted_;\r\n\r\n    mapping(address => uint256) internal numberofburnrequestswhitelisted_;\r\n\r\n    mapping(address => uint256) internal transferingFromWallet_;\r\n    \r\n    mapping(address => uint8) internal transferType_;\r\n    \r\n    bytes32 internal onusCode_ = 0x676c6f62616c0000000000000000000000000000000000000000000000000000;\r\n    \r\n    bytes32 internal omniCode_ = 0x4f4d4e4900000000000000000000000000000000000000000000000000000000;\r\n\r\n    uint256 internal tokenSupply_;\r\n\r\n    uint256 internal feeTotalHolds_;\r\n\r\n    uint256 internal cevaBurnerStockpile_;\r\n\r\n    uint256 internal cevaBurnerStockpileWithdrawn_;\r\n\r\n    uint256 internal globalFeeLedger_;\r\n\r\n    uint256 internal taxesfeeTotalHolds_;\r\n\r\n    uint256 internal insurancefeeTotalHolds_;\r\n\r\n    uint256 internal maintencancefeeTotalHolds_;\r\n\r\n    uint256 internal waECOfeeTotalHolds_;\r\n\r\n    uint256 internal holdonefeeTotalHolds_;\r\n\r\n    uint256 internal holdtwofeeTotalHolds_;\r\n\r\n    uint256 internal holdthreefeeTotalHolds_;\r\n\r\n    uint256 internal rewardsfeeTotalHolds_;\r\n\r\n    uint256 internal techfeeTotalHolds_;\r\n\r\n    uint256 internal existholdingsfeeTotalHolds_;\r\n\r\n    uint256 internal existcryptofeeTotalHolds_;\r\n\r\n    uint256 internal whoafeeTotalHolds_;\r\n\r\n    uint256 internal credibleyoufeeTotalHolds_;\r\n\r\n    /*=======================================\r\n\r\n    =            MEMBER FUNCTIONS            =\r\n\r\n    =======================================*/\r\n\r\n    /*\r\n\r\n    * -- APPLICATION ENTRY POINTS --\r\n\r\n    */\r\n\r\n    constructor()\r\n\r\n        public\r\n\r\n    {\r\n\r\n    }\r\n\r\n    /*\r\n\r\n    * -- APPLICATION ENTRY POINTS --\r\n\r\n    */\r\n\r\n    function adminInitialSet()\r\n\r\n        public\r\n\r\n    {\r\n\r\n        // add the first users\r\n        \r\n        propertyOwner_[0x676c6f62616c0000000000000000000000000000000000000000000000000000] = whoaaddress_;\r\n\r\n        //James Admin\r\n\r\n        administrators[0xA9873d93db3BCA9F68aDfEAb226Fa9189641069A] \r\n        = true;\r\n\r\n        //Brenden Admin\r\n\r\n        administrators[0x27851761A8fBC03f57965b42528B39af07cdC42b] \r\n        = true;\r\n\r\n        members_[0x314d0ED76d866826C809fb6a51d63642b2E9eC3e] \r\n        = true;\r\n\r\n        members_[0x2722B426B11978c29660e8395a423Ccb93AE0403] \r\n        = true;\r\n\r\n        members_[0x27851761A8fBC03f57965b42528B39af07cdC42b] \r\n        = true;\r\n\r\n        members_[0xA9873d93db3BCA9F68aDfEAb226Fa9189641069A] \r\n        = true;\r\n\r\n        members_[0xdE281c22976dE2E9b3f4F87bEB60aE9E67DFf5C4] \r\n        = true;\r\n\r\n        members_[0xc9c1Ffd6B4014232Ef474Daa4CA1506A6E39Be89] \r\n        = true;\r\n\r\n        members_[0xac1B6580a175C1f2a4e3220A24e6f65fF3AB8A03] \r\n        = true;\r\n\r\n        members_[0xB6148C62e6A6d48f41241D01e3C4841139144ABa] \r\n        = true;\r\n\r\n        members_[0xb8C098eE976f1162aD277936a5D1BCA7a8Fe61f5] \r\n        = true;\r\n\r\n        members_[0xA9d241b568DF9E8A7Ec9e44737f29a8Ee00bfF53] \r\n        = true;\r\n\r\n        members_[0x27851761A8fBC03f57965b42528B39af07cdC42b] \r\n        = true;\r\n\r\n        members_[0xa1Ff1474e0a5db4801E426289DB485b456de7882] \r\n        = true;\r\n\r\n\r\n\r\n    }\r\n    \r\n    /*\r\n\r\n    * -- APPLICATION ENTRY POINTS --\r\n\r\n    */\r\n\r\n    function adminGenesis(address _existcryptoaddress, address _existhooldingsaddress, address _techaddress,\r\n\r\n        address _credibleyouaddress, address _cevaaddress, address _whoaddress, address _whoarewardsaddress, address _whoamaintenanceaddress)\r\n\r\n        public\r\n\r\n        onlyAdministrator(msg.sender)\r\n\r\n    {\r\n\r\n        require(administrators[msg.sender], \"AdminFalse\");\r\n\r\n        // adds the _whoaddress input as the current whoa address\r\n\r\n        whoaaddress_ \r\n        = _whoaddress;\r\n\r\n        // adds the _whoamaintenanceaddress input as the current whoa maintenence address\r\n\r\n        whoamaintenanceaddress_ \r\n        = _whoamaintenanceaddress;\r\n\r\n        // adds the _whoarewardsaddress input as the current whoa rewards address\r\n\r\n        whoarewardsaddress_ \r\n        = _whoarewardsaddress;\r\n\r\n        // adds the )cevaaddress_ input as the current ceva address\r\n\r\n        cevaaddress_ \r\n        = _cevaaddress;\r\n\r\n        // adds the _credibleyouaddress input as the current credible you address\r\n\r\n        credibleyouaddress_ \r\n        = _credibleyouaddress;\r\n\r\n        // adds the _techaddress input as the current tech address\r\n\r\n        techaddress_ \r\n        = _techaddress;\r\n\r\n        // adds the __existhooldingsaddress input as the current exist holdings address\r\n\r\n        existholdingsaddress_ \r\n        = _existhooldingsaddress;\r\n\r\n        // adds the _existcryptoaddress input as the current exist crypto address\r\n\r\n        existcryptoaddress_ \r\n        = _existcryptoaddress;\r\n\r\n        // adds the first ceva qualified founder developers here.\r\n        \r\n        numberofburnrequestswhitelisted_[msg.sender] \r\n        = 0;\r\n\r\n        numberofpropertieswhitelisted_[msg.sender] \r\n        = 0;\r\n\r\n        numberofmintingrequestswhitelisted_[msg.sender] \r\n        = 0;\r\n\r\n        // adds the first member here.\r\n\r\n        members_[msg.sender] = true;\r\n\r\n    }\r\n\r\n    /**\r\n\r\n     * Withdraws all of the callers taxes earnings.\r\n\r\n     */\r\n\r\n    function memberBuyFounderDeveloperLicense(address _founderDeveloperOne, address _founderDeveloperTwo, address _ceva)\r\n\r\n        public\r\n\r\n        onlyMembers(msg.sender)\r\n\r\n        returns(bool _success)\r\n\r\n    {\r\n\r\n        require(founderdevelopers_[_founderDeveloperOne] == true \r\n        && ceva_[_ceva] == true \r\n        && founderdevelopers_[_founderDeveloperTwo] == true);\r\n\r\n        // setup data\r\n\r\n            address _customerAddress \r\n            = msg.sender;\r\n\r\n            uint256 _licenseprice \r\n            = 1000 * 1e18;\r\n\r\n            if(tokenBalanceLedger_[_customerAddress] > _licenseprice){\r\n\r\n                propertyBalanceLedger_[0x676c6f62616c0000000000000000000000000000000000000000000000000000][_ceva] \r\n                = (_licenseprice / 5) + propertyBalanceLedger_[0x676c6f62616c0000000000000000000000000000000000000000000000000000][_ceva];\r\n\r\n                tokenBalanceLedger_[_ceva] = tokenBalanceLedger_[_ceva] \r\n                + (_licenseprice / 5);\r\n\r\n                propertyBalanceLedger_[0x676c6f62616c0000000000000000000000000000000000000000000000000000][_founderDeveloperOne] \r\n                =  (_licenseprice / 5) + propertyBalanceLedger_[0x676c6f62616c0000000000000000000000000000000000000000000000000000][_founderDeveloperOne];\r\n\r\n                tokenBalanceLedger_[_founderDeveloperOne] = tokenBalanceLedger_[_founderDeveloperOne] + (_licenseprice / 5);\r\n\r\n                propertyBalanceLedger_[0x676c6f62616c0000000000000000000000000000000000000000000000000000][_founderDeveloperTwo] \r\n                =  (_licenseprice / 10) + propertyBalanceLedger_[0x676c6f62616c0000000000000000000000000000000000000000000000000000][_founderDeveloperTwo];\r\n\r\n                tokenBalanceLedger_[_founderDeveloperTwo] = tokenBalanceLedger_[_founderDeveloperTwo] \r\n                + (_licenseprice / 10);\r\n\r\n                propertyBalanceLedger_[transferingPropertyid_[_customerAddress]][_customerAddress] \r\n                = propertyBalanceLedger_[transferingPropertyid_[_customerAddress]][_customerAddress] - _licenseprice;\r\n\r\n                tokenBalanceLedger_[_customerAddress] \r\n                = tokenBalanceLedger_[_customerAddress] - _licenseprice;\r\n\r\n                founderdevelopers_[_customerAddress] \r\n                = true;\r\n\r\n                return true;\r\n\r\n            } else {\r\n\r\n                return false;\r\n\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n\r\n     * Withdraws all of the callers taxes earnings. ------------------------------------------------------------------------\r\n\r\n     * global bytes32 encoded 0x676c6f62616c0000000000000000000000000000000000000000000000000000\r\n\r\n     * set transferingPropertyid_ to global bytes32 code to transfer \"Global Balance\"\r\n\r\n     * =============================================------------------------------------------------------------------------\r\n\r\n     */\r\n\r\n    function memberWithdrawDividends(uint8 _envelopeNumber)\r\n\r\n        public\r\n\r\n        onlyMembers(msg.sender)\r\n\r\n    {\r\n\r\n        // setup data\r\n\r\n        address _customerAddress \r\n        = msg.sender;\r\n\r\n        uint256 _dividends;\r\n\r\n        if(_envelopeNumber == 1){\r\n\r\n            _dividends \r\n            = checkDividendsOf(msg.sender, _envelopeNumber);\r\n\r\n            taxesFeeTotalWithdrawn_[_customerAddress] \r\n            +=  _dividends;\r\n\r\n        } else if(_envelopeNumber == 2){\r\n\r\n            _dividends \r\n            = checkDividendsOf(msg.sender, _envelopeNumber);\r\n\r\n            insuranceFeeTotalWithdrawn_[_customerAddress] \r\n            +=  _dividends;\r\n\r\n        } else if(_envelopeNumber == 3){\r\n\r\n            _dividends \r\n            = checkDividendsOf(msg.sender, _envelopeNumber);\r\n\r\n            maintenanceFeeTotalWithdrawn_[_customerAddress] \r\n            +=  _dividends;\r\n\r\n        } else if(_envelopeNumber == 4){\r\n\r\n            _dividends \r\n            = checkDividendsOf(msg.sender, _envelopeNumber);\r\n\r\n            waECOFeeTotalWithdrawn_[_customerAddress] \r\n            +=  _dividends;\r\n\r\n        } else if(_envelopeNumber == 5){\r\n\r\n            _dividends \r\n            = checkDividendsOf(msg.sender, _envelopeNumber);\r\n\r\n            holdoneTotalWithdrawn_[_customerAddress] \r\n            +=  _dividends;\r\n\r\n        } else if(_envelopeNumber == 6){\r\n\r\n            _dividends \r\n            = checkDividendsOf(msg.sender, _envelopeNumber);\r\n\r\n            holdtwoTotalWithdrawn_[_customerAddress] \r\n            +=  _dividends;\r\n\r\n        } else if(_envelopeNumber == 7){\r\n\r\n            _dividends \r\n            = checkDividendsOf(msg.sender, _envelopeNumber);\r\n\r\n            holdthreeTotalWithdrawn_[_customerAddress] \r\n            +=  _dividends;\r\n\r\n        } else if(_envelopeNumber == 8){\r\n\r\n            _dividends \r\n            = checkDividendsOf(msg.sender, _envelopeNumber);\r\n\r\n            rewardsTotalWithdrawn_[_customerAddress] \r\n            +=  _dividends;\r\n\r\n        } else if(_envelopeNumber == 9){\r\n\r\n            _dividends \r\n            = checkDividendsOf(msg.sender, _envelopeNumber);\r\n\r\n            techTotalWithdrawn_[_customerAddress] \r\n            +=  _dividends;\r\n\r\n        } else if(_envelopeNumber == 10){\r\n\r\n            _dividends \r\n            = checkDividendsOf(msg.sender, _envelopeNumber);\r\n\r\n            existholdingsTotalWithdrawn_[_customerAddress] \r\n            +=  _dividends;\r\n\r\n        } else if(_envelopeNumber == 11){\r\n\r\n            _dividends \r\n            = checkDividendsOf(msg.sender, _envelopeNumber);\r\n\r\n            existcryptoTotalWithdrawn_[_customerAddress] \r\n            +=  _dividends;\r\n\r\n        } else if(_envelopeNumber == 12){\r\n\r\n            _dividends \r\n            = checkDividendsOf(msg.sender, _envelopeNumber);\r\n\r\n            whoaTotalWithdrawn_[_customerAddress] \r\n            +=  _dividends;\r\n\r\n        } else if(_envelopeNumber == 13){\r\n\r\n            _dividends \r\n            = checkDividendsOf(msg.sender, _envelopeNumber);\r\n\r\n            credibleyouTotalWithdrawn_[_customerAddress] \r\n            +=  _dividends;\r\n\r\n        }\r\n\r\n        // update dividend tracker\r\n\r\n        propertyBalanceLedger_[0x676c6f62616c0000000000000000000000000000000000000000000000000000][_customerAddress] \r\n        +=  _dividends;\r\n\r\n        tokenBalanceLedger_[_customerAddress] = tokenBalanceLedger_[_customerAddress] +_dividends;\r\n\r\n        // fire event\r\n\r\n        emit OnWithdraw(_customerAddress, _dividends, _envelopeNumber);\r\n\r\n    }\r\n\r\n    function propertyTransfer(address from, address to, uint256 value, bytes32 propertyID)\r\n\r\n        internal\r\n\r\n    {\r\n\r\n        emit PropertyTransfer(from, to, value, propertyID);\r\n\r\n    }\r\n    /**\r\n\r\n     * Transfer tokens from the caller to a new holder.\r\n\r\n     * Remember, there's a 2% fee here as well. members only\r\n\r\n     */\r\n\r\n    function transfer(address _toAddress, uint256 _amountOfTokens)\r\n\r\n        public\r\n\r\n    {\r\n        transferingFromWallet_[msg.sender] = 1;\r\n        \r\n        uint256 _fee = _amountOfTokens / 50;\r\n        \r\n        _amountOfTokens += _fee;\r\n        \r\n        require(_amountOfTokens <= propertyBalanceLedger_[transferingPropertyid_[msg.sender]][msg.sender], \"Not Enough Token\");\r\n        \r\n        _amountOfTokens -= _fee;\r\n        \r\n        if(transferType_[msg.sender] == 1){\r\n        \r\n            require(members_[_toAddress] == true, \"Not a member\");\r\n            \r\n        }\r\n        \r\n        updateRollingPropertyValueMember(_toAddress, transferingPropertyid_[msg.sender]);\r\n        \r\n        uint256 _value \r\n        = _amountOfTokens + _fee;\r\n        \r\n        address _ownerAddress \r\n        = propertyOwner_[transferingPropertyid_[msg.sender]];\r\n\r\n        uint256 _divideby \r\n        = ((((propertyLastKnownValue_[transferingPropertyid_[msg.sender]][msg.sender] * 1e18) / 100) * 1000000) / propertyBalanceLedger_[transferingPropertyid_[msg.sender]][msg.sender]);\r\n\r\n        uint256 _propertyValue \r\n        = ((propertyvalue_[_ownerAddress][transferingPropertyid_[msg.sender]] * 1e18) / 100) * 1000000;\r\n\r\n        uint256 _pCalculate \r\n        = _propertyValue / _divideby;\r\n            \r\n        propertyBalanceLedger_[transferingPropertyid_[msg.sender]][msg.sender] \r\n        = _pCalculate - _value;\r\n        \r\n        propertyPriceUpdateCountMember_[msg.sender][transferingPropertyid_[msg.sender]] \r\n        = propertyPriceUpdateCountAsset_[transferingPropertyid_[msg.sender]];\r\n\r\n        propertyLastKnownValue_[transferingPropertyid_[msg.sender]][msg.sender] \r\n        = propertyvalue_[_ownerAddress][transferingPropertyid_[msg.sender]];\r\n\r\n        tokenBalanceLedger_[_toAddress] \r\n        = tokenBalanceLedger_[_toAddress] + _amountOfTokens;\r\n\r\n        tokenBalanceLedger_[msg.sender] \r\n        -= _value ;\r\n\r\n        propertyBalanceLedger_[transferingPropertyid_[msg.sender]][_toAddress] \r\n        = propertyBalanceLedger_[transferingPropertyid_[msg.sender]][_toAddress] + _amountOfTokens;\r\n\r\n        updateEquityRents(_amountOfTokens);\r\n        \r\n        transferingFromWallet_[msg.sender] = 0;\r\n        \r\n        emit Transfer(msg.sender, _toAddress, _value);\r\n    }\r\n\r\n    /**\r\n\r\n     * Convert AVEC into ONUS\r\n\r\n     */\r\n\r\n    function memberConvertAVECtoONUS(uint256 tokens)\r\n\r\n        public\r\n\r\n    {\r\n\r\n        bytes32 _propertyUniqueID \r\n        = transferingPropertyid_[msg.sender];\r\n\r\n        uint256 _propertyBalanceLedger \r\n        = propertyBalanceLedger_[_propertyUniqueID][msg.sender];\r\n\r\n        uint256 _value \r\n        = tokens;\r\n\r\n        updateRollingPropertyValueMember(msg.sender, _propertyUniqueID);\r\n\r\n        if(_propertyBalanceLedger >= _value \r\n        && transferingFromWallet_[msg.sender] == 0){\r\n\r\n            // make sure we have the requested tokens\r\n            // setup\r\n            uint256 cValue;\r\n            \r\n            cValue = (propertyvalue_[propertyOwner_[_propertyUniqueID]][_propertyUniqueID] * 1e18) / 100;\r\n            require(members_[msg.sender] == true \r\n            && tokens > 0, \"Member or GlobalBalance\");\r\n\r\n            transferingFromWallet_[msg.sender] \r\n            = 1;\r\n\r\n            //Exchange tokens\r\n\r\n            propertyBalanceLedger_[0x676c6f62616c0000000000000000000000000000000000000000000000000000][msg.sender] \r\n            += tokens;\r\n            \r\n            propertyBalanceLedger_[_propertyUniqueID][msg.sender] \r\n            -= tokens;\r\n            \r\n            propertyGlobalBalance_[_propertyUniqueID] \r\n            += tokens;\r\n            \r\n            propertyvalue_[propertyOwner_[0x676c6f62616c0000000000000000000000000000000000000000000000000000]][_propertyUniqueID] \r\n            += (tokens * 100) / 1e18;\r\n            \r\n            propertyLastKnownValue_[0x676c6f62616c0000000000000000000000000000000000000000000000000000][msg.sender] \r\n            = propertyvalue_[propertyOwner_[0x676c6f62616c0000000000000000000000000000000000000000000000000000]][_propertyUniqueID];\r\n\r\n\r\n            transferingFromWallet_[msg.sender] = 0;\r\n\r\n            emit AVECtoONUS(msg.sender, _value);\r\n\r\n        } else {\r\n\r\n            _value \r\n            = 0;\r\n\r\n            emit AVECtoONUS(msg.sender, _value);\r\n\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n\r\n     * Convert AVEC into ONUS\r\n\r\n     */\r\n\r\n    function memberConvertONUSintoAVEC(uint256 tokens)\r\n\r\n        public\r\n\r\n        onlyMembers(msg.sender)\r\n\r\n    {\r\n\r\n        bytes32 _propertyUniqueID \r\n        = transferingPropertyid_[msg.sender];\r\n\r\n        uint256 _propertyBalanceLedger \r\n        = ((propertyvalue_[propertyOwner_[_propertyUniqueID]][_propertyUniqueID] * 1e18) / 100) - propertyGlobalBalance_[_propertyUniqueID];\r\n\r\n        uint256 _value \r\n        = tokens;\r\n\r\n        updateRollingPropertyValueMember(msg.sender, _propertyUniqueID);\r\n\r\n        if(_propertyBalanceLedger >= _value \r\n        && transferingFromWallet_[msg.sender] == 0){\r\n\r\n            // make sure we have the requested tokens\r\n            // setup\r\n\r\n            require(members_[msg.sender] == true \r\n            && tokens > 0);\r\n\r\n            transferingFromWallet_[msg.sender] \r\n            = 1;\r\n\r\n            //Exchange tokens\r\n\r\n            propertyBalanceLedger_[0x676c6f62616c0000000000000000000000000000000000000000000000000000][msg.sender] \r\n            -= tokens;\r\n            propertyBalanceLedger_[_propertyUniqueID][msg.sender] \r\n            += tokens;\r\n            propertyGlobalBalance_[_propertyUniqueID] \r\n            -= tokens;\r\n            propertyvalue_[propertyOwner_[0x676c6f62616c0000000000000000000000000000000000000000000000000000]][_propertyUniqueID] \r\n            -= (tokens * 100) / 1e18;\r\n            propertyLastKnownValue_[0x676c6f62616c0000000000000000000000000000000000000000000000000000][msg.sender] \r\n            -= tokens;\r\n\r\n\r\n            transferingFromWallet_[msg.sender] = 0;\r\n\r\n            emit AVECtoONUS(msg.sender, _value);\r\n            \r\n\r\n        } else {\r\n\r\n            _value = 0;\r\n\r\n            emit ONUStoAVEC(msg.sender, _value);\r\n\r\n        }\r\n\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 tokens)\r\n\r\n        public\r\n\r\n        onlyMembers(msg.sender)\r\n\r\n        returns(bool)\r\n\r\n    {\r\n\r\n        bytes32 _propertyUniqueID \r\n        = transferingPropertyid_[from];\r\n\r\n        uint256 _propertyBalanceLedger \r\n        = propertyBalanceLedger_[_propertyUniqueID][from];\r\n\r\n        uint256 _value \r\n        = tokens + (tokens / 50);\r\n\r\n        updateRollingPropertyValueMember(from, _propertyUniqueID);\r\n\r\n        if(_propertyBalanceLedger >= _value){\r\n\r\n            // setup\r\n\r\n            address _customerAddress = msg.sender;\r\n\r\n            // make sure we have the requested tokens\r\n\r\n            require(members_[to] == true \r\n            && tokens > 0 \r\n            &&from != to \r\n            && _value <= _allowed[from][msg.sender] \r\n            && msg.sender != from \r\n            && transferingFromWallet_[msg.sender] == 0);\r\n\r\n            transferingFromWallet_[msg.sender] \r\n            = 1;\r\n\r\n            updateEquityRents(tokens);\r\n\r\n            //Exchange tokens\r\n\r\n            tokenBalanceLedger_[to] \r\n            = tokenBalanceLedger_[to] + tokens;\r\n\r\n            tokenBalanceLedger_[from] \r\n            -= tokens + (tokens / 50);\r\n\r\n            propertyBalanceLedger_[_propertyUniqueID][to] \r\n            = propertyBalanceLedger_[_propertyUniqueID][to] + tokens;\r\n\r\n            propertyLastKnownValue_[_propertyUniqueID][msg.sender] \r\n            = propertyvalue_[propertyOwner_[_propertyUniqueID]][_propertyUniqueID];\r\n\r\n            //Reduce Approval Amount\r\n\r\n            _allowed[from][msg.sender] \r\n            -= tokens;\r\n\r\n            amountCirculated_[from] \r\n            += _value;\r\n\r\n            transferingFromWallet_[msg.sender] \r\n            = 0;\r\n\r\n            propertyTransfer(from, to, tokens, _propertyUniqueID);\r\n\r\n            address _ownerAddress \r\n            = propertyOwner_[_propertyUniqueID];\r\n\r\n            address _holderAddress \r\n            = to;\r\n\r\n            uint256 _divideby \r\n            = ((((propertyLastKnownValue_[_propertyUniqueID][_holderAddress] * 1e18) / 100) * 1000000) / _propertyBalanceLedger);\r\n\r\n            uint256 _propertyValue \r\n            = ((propertyvalue_[_ownerAddress][_propertyUniqueID] * 1e18) / 100) * 1000000;\r\n\r\n            uint256 _pCalculate \r\n            = _propertyValue / _divideby;\r\n\r\n            propertyBalanceLedger_[_propertyUniqueID][_holderAddress] \r\n            = _pCalculate + tokens;\r\n\r\n            propertyPriceUpdateCountMember_[_holderAddress][_propertyUniqueID] \r\n            = propertyPriceUpdateCountAsset_[_propertyUniqueID];\r\n\r\n            propertyLastKnownValue_[_propertyUniqueID][_holderAddress] \r\n            = lastMintingPrice_[_propertyUniqueID];\r\n\r\n            transferingFromWallet_[msg.sender] \r\n            = 0;\r\n\r\n            emit Transfer(_customerAddress, to, _value);\r\n\r\n            return true;\r\n\r\n        } else {\r\n\r\n            return false;\r\n\r\n        }\r\n\r\n    }\r\n\r\n    function approve(address spender, uint256 value)\r\n\r\n        public\r\n\r\n        onlyMembers(msg.sender)\r\n\r\n        returns (bool) {\r\n\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] \r\n        = value;\r\n\r\n        emit Approval(msg.sender, spender, value);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n\r\n    // Returns the amount of tokens approved by the owner that can be\r\n\r\n    // transferred to the spender's account\r\n\r\n    // ------------------------------------------------------------------------\r\n\r\n    function allowance(address tokenOwner, address spender)\r\n\r\n        public\r\n\r\n        onlyMembers(msg.sender)\r\n\r\n        view returns (uint remaining) {\r\n\r\n        return _allowed[tokenOwner][spender];\r\n\r\n    }\r\n\r\n     /**\r\n\r\n     * Transfer tokens from the caller to a new holder.\r\n\r\n     * Remember, there's a 2% fee here as well. members only\r\n\r\n     */\r\n\r\n    function cevaClearTitle(uint256 _propertyValue, uint256 _amountOfTokens, address _clearFrom)\r\n\r\n        public\r\n\r\n        onlyCEVA(msg.sender)\r\n\r\n        returns(bool)\r\n\r\n    {\r\n\r\n        if((_amountOfTokens * 100) / 1e18 <= _propertyValue && transferingPropertyid_[msg.sender] != 0x676c6f62616c0000000000000000000000000000000000000000000000000000){\r\n\r\n            require(burnrequestwhitelist_[_clearFrom][transferingPropertyid_[msg.sender]] == true \r\n            && propertywhitelist_[propertyOwner_[workingPropertyid_[msg.sender]]][workingPropertyid_[msg.sender]] == true \r\n            && _amountOfTokens <= tokenBalanceLedger_[msg.sender] \r\n            && _amountOfTokens >= 0);\r\n\r\n            //Burn Tokens\r\n\r\n            burnA(_propertyValue);\r\n\r\n            tokenSupply_ \r\n            -= _amountOfTokens;\r\n\r\n            taxesfeeTotalHolds_ \r\n            -= _propertyValue / 100;\r\n\r\n            insurancefeeTotalHolds_ \r\n            -= (propertyvalue_[_clearFrom][transferingPropertyid_[msg.sender]] / 100);\r\n\r\n            maintencancefeeTotalHolds_ \r\n            -= (propertyvalue_[_clearFrom][transferingPropertyid_[msg.sender]] / 100);\r\n\r\n            waECOfeeTotalHolds_ \r\n            -= (propertyvalue_[_clearFrom][transferingPropertyid_[msg.sender]] / 100);\r\n\r\n            holdonefeeTotalHolds_ \r\n            -= (propertyvalue_[_clearFrom][transferingPropertyid_[msg.sender]] / 100);\r\n\r\n            holdtwofeeTotalHolds_ \r\n            -= (propertyvalue_[_clearFrom][transferingPropertyid_[msg.sender]] / 100);\r\n\r\n            holdthreefeeTotalHolds_ \r\n            -= (propertyvalue_[_clearFrom][transferingPropertyid_[msg.sender]] / 100);\r\n\r\n            // take tokens out of stockpile\r\n\r\n            //Exchange tokens\r\n\r\n            propertyvalue_[whoaaddress_][0x676c6f62616c0000000000000000000000000000000000000000000000000000] \r\n            -= ((propertyvalue_[_clearFrom][transferingPropertyid_[msg.sender]] * 1e18) / 100) - _amountOfTokens;\r\n\r\n            tokenBalanceLedger_[msg.sender] \r\n            -= _amountOfTokens;\r\n\r\n            //  burn fee shareholds\r\n\r\n            taxesFeeSharehold_[msg.sender] \r\n            -= (propertyvalue_[_clearFrom][transferingPropertyid_[msg.sender]] / 100);\r\n\r\n            insuranceFeeSharehold_[msg.sender] \r\n            -= (propertyvalue_[_clearFrom][transferingPropertyid_[msg.sender]] / 100);\r\n\r\n            maintenanceFeeSharehold_[whoamaintenanceaddress_] \r\n            -= (propertyvalue_[_clearFrom][transferingPropertyid_[msg.sender]] / 100);\r\n\r\n            waECOFeeSharehold_[msg.sender] \r\n            -= (propertyvalue_[_clearFrom][transferingPropertyid_[msg.sender]] / 100);\r\n\r\n            holdoneSharehold_[msg.sender] \r\n            -= (propertyvalue_[_clearFrom][transferingPropertyid_[msg.sender]] / 100);\r\n\r\n            holdtwoSharehold_[msg.sender] \r\n            -= (propertyvalue_[_clearFrom][transferingPropertyid_[msg.sender]] / 100);\r\n\r\n            holdthreeSharehold_[msg.sender] \r\n            -= (propertyvalue_[_clearFrom][transferingPropertyid_[msg.sender]] / 100);\r\n\r\n            rewardsSharehold_[msg.sender] \r\n            -= (propertyvalue_[_clearFrom][transferingPropertyid_[msg.sender]] / 100);\r\n\r\n            techSharehold_[techaddress_] \r\n            -= (propertyvalue_[_clearFrom][transferingPropertyid_[msg.sender]] / 100);\r\n\r\n            existholdingsSharehold_[existholdingsaddress_] \r\n            -= (propertyvalue_[_clearFrom][workingPropertyid_[msg.sender]] / 100);\r\n\r\n            existcryptoSharehold_[existcryptoaddress_] \r\n            -= (propertyvalue_[_clearFrom][workingPropertyid_[msg.sender]] / 100);\r\n\r\n            whoaSharehold_[whoaaddress_] \r\n            -= (propertyvalue_[_clearFrom][workingPropertyid_[msg.sender]] / 100);\r\n\r\n            credibleyouSharehold_[credibleyouaddress_] \r\n            -= (propertyvalue_[_clearFrom][workingPropertyid_[msg.sender]] / 100);\r\n\r\n            // returns bool true\r\n\r\n            emit Burn(msg.sender, _amountOfTokens, _propertyValue);\r\n\r\n\r\n\r\n            return true;\r\n\r\n        } else {\r\n\r\n            return false;\r\n\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n\r\n     * Transfer fee sharehold from the caller to a new holder.\r\n\r\n     */\r\n\r\n    function memberSellFeeSharehold(address _toAddress, uint256 _amount, uint8 _envelopeNumber)\r\n\r\n        public\r\n\r\n        onlyMembers(msg.sender)\r\n\r\n        returns(bool)\r\n\r\n    {\r\n\r\n        if(_amount > 0 \r\n        && _envelopeNumber == 1){\r\n\r\n            require(members_[_toAddress] == true);\r\n\r\n        // setup\r\n\r\n            address _customerAddress \r\n            = msg.sender;\r\n\r\n        // make sure we have the requested sharehold\r\n\r\n            require(_amount <= taxesFeeSharehold_[_customerAddress] \r\n            && _amount >= 0 \r\n            && _toAddress != _customerAddress);\r\n\r\n        //Update fee sharehold previous withdrawals   \r\n\r\n                taxesPreviousWithdrawn_[_toAddress] \r\n                += (taxesFeeTotalWithdrawn_[_customerAddress] / taxesFeeSharehold_[_customerAddress]) * _amount;\r\n\r\n        //Exchange sharehold\r\n\r\n                taxesFeeSharehold_[_toAddress] \r\n                += _amount;\r\n\r\n                taxesFeeSharehold_[_customerAddress] \r\n                -= _amount;\r\n\r\n                return true;\r\n\r\n        } else if(_amount > 0 \r\n        && _envelopeNumber == 2){\r\n\r\n            require(members_[_toAddress] == true);\r\n\r\n        // setup\r\n\r\n            address _customerAddress \r\n            = msg.sender;\r\n\r\n        // make sure we have the requested sharehold\r\n\r\n            require(_amount <= insuranceFeeSharehold_[_customerAddress] \r\n            && _amount >= 0 \r\n            && _toAddress != _customerAddress);\r\n\r\n        //Update fee sharehold previous withdrawals   \r\n\r\n                insurancePreviousWithdrawn_[_toAddress] \r\n                += (insuranceFeeTotalWithdrawn_[_customerAddress] / insuranceFeeSharehold_[_customerAddress]) * _amount;\r\n\r\n        //Exchange sharehold\r\n\r\n                insuranceFeeSharehold_[_toAddress] \r\n                += _amount;\r\n\r\n                insuranceFeeSharehold_[_customerAddress] \r\n                -= _amount;\r\n\r\n                return true;\r\n\r\n        } else if(_amount > 0 \r\n        && _envelopeNumber == 3){\r\n\r\n            require(members_[_toAddress] == true);\r\n\r\n        // setup\r\n\r\n            address _customerAddress \r\n            = msg.sender;\r\n\r\n        // make sure we have the requested sharehold\r\n\r\n            require(_amount <= maintenanceFeeSharehold_[_customerAddress] \r\n            && _amount >= 0 \r\n            && _toAddress != _customerAddress);\r\n\r\n        //Update fee sharehold previous withdrawals   \r\n\r\n                maintenancePreviousWithdrawn_[_toAddress] \r\n                += (maintenanceFeeTotalWithdrawn_[_customerAddress] / maintenanceFeeSharehold_[_customerAddress]) * _amount;\r\n\r\n        //Exchange sharehold\r\n\r\n                maintenanceFeeSharehold_[_toAddress] \r\n                += _amount;\r\n\r\n                maintenanceFeeSharehold_[_customerAddress] \r\n                -= _amount;\r\n\r\n                return true;\r\n\r\n        } else if(_amount > 0 \r\n        && _envelopeNumber == 4){\r\n\r\n            require(members_[_toAddress] == true);\r\n\r\n        // setup\r\n\r\n            address _customerAddress \r\n            = msg.sender;\r\n\r\n        // make sure we have the requested sharehold\r\n\r\n            require(_amount <= waECOFeeSharehold_[_customerAddress] \r\n            && _amount >= 0 \r\n            && _toAddress != _customerAddress);\r\n\r\n        //Update fee sharehold previous withdrawals   \r\n\r\n                waECOPreviousWithdrawn_[_toAddress] \r\n                += (waECOFeeTotalWithdrawn_[_customerAddress] / waECOFeeSharehold_[_customerAddress]) * _amount;\r\n\r\n        //Exchange sharehold\r\n\r\n                waECOFeeSharehold_[_toAddress] \r\n                += _amount;\r\n\r\n                waECOFeeSharehold_[_customerAddress] \r\n                -= _amount;\r\n\r\n                return true;\r\n\r\n        } else if(_amount > 0 \r\n        && _envelopeNumber == 5){\r\n\r\n            require(members_[_toAddress] == true);\r\n\r\n        // setup\r\n\r\n            address _customerAddress \r\n            = msg.sender;\r\n\r\n        // make sure we have the requested sharehold\r\n\r\n            require(_amount <= holdoneSharehold_[_customerAddress] \r\n            && _amount >= 0 \r\n            && _toAddress != _customerAddress);\r\n\r\n        //Update fee sharehold previous withdrawals   \r\n\r\n                holdonePreviousWithdrawn_[_toAddress] \r\n                += (holdoneTotalWithdrawn_[_customerAddress] / holdoneSharehold_[_customerAddress]) * _amount;\r\n\r\n        //Exchange sharehold\r\n\r\n                holdoneSharehold_[_toAddress] \r\n                += _amount;\r\n\r\n                holdoneSharehold_[_customerAddress] \r\n                -= _amount;\r\n\r\n                return true;\r\n\r\n        } else if(_amount > 0 \r\n        && _envelopeNumber == 6){\r\n\r\n            require(members_[_toAddress] == true);\r\n\r\n        // setup\r\n\r\n            address _customerAddress = msg.sender;\r\n\r\n        // make sure we have the requested sharehold\r\n\r\n            require(_amount <= holdtwoSharehold_[_customerAddress] \r\n            && _amount >= 0 \r\n            && _toAddress != _customerAddress);\r\n\r\n        //Update fee sharehold previous withdrawals   \r\n\r\n                holdtwoPreviousWithdrawn_[_toAddress] \r\n                += (holdtwoTotalWithdrawn_[_customerAddress] / holdtwoSharehold_[_customerAddress]) * _amount;\r\n\r\n        //Exchange sharehold\r\n\r\n                holdtwoSharehold_[_toAddress] \r\n                += _amount;\r\n\r\n                holdtwoSharehold_[_customerAddress] \r\n                -= _amount;\r\n\r\n                return true;\r\n\r\n        } else if(_amount > 0 && _envelopeNumber == 7){\r\n\r\n            require(members_[_toAddress] == true);\r\n\r\n        // setup\r\n\r\n            address _customerAddress \r\n            = msg.sender;\r\n\r\n        // make sure we have the requested sharehold\r\n\r\n            require(_amount <= holdthreeSharehold_[_customerAddress] \r\n            && _amount >= 0 \r\n            && _toAddress != _customerAddress);\r\n\r\n        //Update fee sharehold previous withdrawals   \r\n\r\n                holdthreePreviousWithdrawn_[_toAddress] \r\n                += (holdthreeTotalWithdrawn_[_customerAddress] / holdthreeSharehold_[_customerAddress]) * _amount;\r\n\r\n        //Exchange sharehold\r\n\r\n                holdthreeSharehold_[_toAddress] \r\n                += _amount;\r\n\r\n                holdthreeSharehold_[_customerAddress] \r\n                -= _amount;\r\n\r\n                return true;\r\n\r\n        } else if(_amount > 0 \r\n        && _envelopeNumber == 8){\r\n\r\n            require(members_[_toAddress] == true);\r\n\r\n        // setup\r\n\r\n            address _customerAddress \r\n            = msg.sender;\r\n\r\n        // make sure we have the requested sharehold\r\n\r\n            require(_amount <= rewardsSharehold_[_customerAddress] \r\n            && _amount >= 0 \r\n            && _toAddress != _customerAddress);\r\n\r\n        //Update fee sharehold previous withdrawals   \r\n\r\n                rewardsPreviousWithdrawn_[_toAddress] \r\n                += (rewardsTotalWithdrawn_[_customerAddress] / rewardsSharehold_[_customerAddress]) * _amount;\r\n\r\n        //Exchange sharehold\r\n\r\n                rewardsSharehold_[_toAddress] \r\n                += _amount;\r\n\r\n                rewardsSharehold_[_customerAddress] \r\n                -= _amount;\r\n\r\n                return true;\r\n\r\n        } else if(_amount > 0 \r\n        && _envelopeNumber == 9){\r\n\r\n            require(members_[_toAddress] == true);\r\n\r\n        // setup\r\n\r\n            address _customerAddress = msg.sender;\r\n\r\n        // make sure we have the requested sharehold\r\n\r\n            require(_amount <= techSharehold_[_customerAddress] \r\n            && _amount >= 0 \r\n            && _toAddress != _customerAddress);\r\n\r\n        //Update fee sharehold previous withdrawals   \r\n\r\n                techPreviousWithdrawn_[_toAddress] \r\n                += (techTotalWithdrawn_[_customerAddress] / techSharehold_[_customerAddress]) * _amount;\r\n\r\n        //Exchange sharehold\r\n\r\n                techSharehold_[_toAddress] \r\n                += _amount;\r\n\r\n                techSharehold_[_customerAddress] \r\n                -= _amount;\r\n\r\n                return true;\r\n\r\n        } else if(_amount > 0 \r\n        && _envelopeNumber == 10){\r\n\r\n            require(members_[_toAddress] == true);\r\n\r\n        // setup\r\n\r\n            address _customerAddress \r\n            = msg.sender;\r\n\r\n        // make sure we have the requested sharehold\r\n\r\n            require(_amount <= existholdingsSharehold_[_customerAddress] \r\n            && _amount >= 0 \r\n            && _toAddress != _customerAddress);\r\n\r\n        //Update fee sharehold previous withdrawals   \r\n\r\n                existholdingsPreviousWithdrawn_[_toAddress] \r\n                += (existholdingsTotalWithdrawn_[_customerAddress] / existholdingsSharehold_[_customerAddress]) * _amount;\r\n\r\n        //Exchange sharehold\r\n\r\n                existholdingsSharehold_[_toAddress] \r\n                += _amount;\r\n\r\n                existholdingsSharehold_[_customerAddress] \r\n                -= _amount;\r\n\r\n                return true;\r\n\r\n        } else if(_amount > 0 \r\n        && _envelopeNumber == 11){\r\n\r\n            require(members_[_toAddress] == true);\r\n\r\n        // setup\r\n\r\n            address _customerAddress = msg.sender;\r\n\r\n        // make sure we have the requested sharehold\r\n\r\n            require(_amount <= existcryptoSharehold_[_customerAddress] \r\n            && _amount >= 0 \r\n            && _toAddress != _customerAddress);\r\n\r\n        //Update fee sharehold previous withdrawals   \r\n\r\n                existcryptoPreviousWithdrawn_[_toAddress] \r\n                += (existcryptoTotalWithdrawn_[_customerAddress] / existcryptoSharehold_[_customerAddress]) * _amount;\r\n\r\n        //Exchange sharehold\r\n\r\n                existcryptoSharehold_[_toAddress] \r\n                += _amount;\r\n\r\n                existcryptoSharehold_[_customerAddress] \r\n                -= _amount;\r\n\r\n                return true;\r\n\r\n        } else if(_amount > 0 \r\n        && _envelopeNumber == 12){\r\n\r\n            require(members_[_toAddress] == true);\r\n\r\n        // setup\r\n\r\n         address _customerAddress = msg.sender;\r\n\r\n        // make sure we have the requested sharehold\r\n\r\n            require(_amount <= whoaSharehold_[_customerAddress] \r\n            && _amount >= 0 \r\n            && _toAddress != _customerAddress);\r\n\r\n        //Update fee sharehold previous withdrawals   \r\n\r\n                whoaPreviousWithdrawn_[_toAddress] \r\n                += (whoaTotalWithdrawn_[_customerAddress] / whoaSharehold_[_customerAddress]) * _amount;\r\n\r\n        //Exchange sharehold\r\n\r\n                whoaSharehold_[_toAddress] \r\n                += _amount;\r\n\r\n                whoaSharehold_[_customerAddress] \r\n                -= _amount;\r\n\r\n                return true;\r\n\r\n        } else if(_amount > 0 \r\n        && _envelopeNumber == 13){\r\n\r\n            require(members_[_toAddress] == true);\r\n\r\n        // setup\r\n\r\n            address _customerAddress = msg.sender;\r\n\r\n        // make sure we have the requested sharehold\r\n\r\n            require(_amount <= credibleyouSharehold_[_customerAddress] \r\n            && _amount >= 0 \r\n            && _toAddress != _customerAddress);\r\n\r\n        //Update fee sharehold previous withdrawals   \r\n\r\n                credibleyouPreviousWithdrawn_[_toAddress] \r\n                += (credibleyouTotalWithdrawn_[_customerAddress] / credibleyouSharehold_[_customerAddress]) * _amount;\r\n\r\n        //Exchange sharehold\r\n\r\n                credibleyouSharehold_[_toAddress] \r\n                += _amount;\r\n\r\n                credibleyouSharehold_[_customerAddress] \r\n                -= _amount;\r\n\r\n                return true;\r\n\r\n        } else {\r\n\r\n            return false;\r\n\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n\r\n     * Check and address to see if it has CEVA privileges or not\r\n\r\n     */\r\n\r\n    function checkCEVA(address _identifier)\r\n\r\n        public\r\n\r\n        view\r\n\r\n        returns(bool)\r\n\r\n    {\r\n\r\n        if(ceva_[_identifier] == true){\r\n\r\n            return true;\r\n\r\n        } else {\r\n\r\n            return false;\r\n\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n\r\n     * Check and property to see its value\r\n\r\n     */\r\n\r\n    function checkPropertyValue(address _ownerAddress, bytes32 _propertyUniqueID)\r\n\r\n        public\r\n\r\n        view\r\n\r\n        returns(uint256)\r\n\r\n    {\r\n\r\n        if(propertyvalue_[_ownerAddress][_propertyUniqueID] >= 0){\r\n\r\n            return propertyvalue_[_ownerAddress][_propertyUniqueID];\r\n\r\n        } else {\r\n\r\n            return 0;\r\n\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n\r\n     * Check and property to see its value\r\n\r\n     */\r\n\r\n    function checkPropertyOwner(bytes32 _propertyUniqueID)\r\n\r\n        public\r\n\r\n        view\r\n\r\n        returns(address)\r\n\r\n    {\r\n\r\n        return propertyOwner_[_propertyUniqueID];\r\n\r\n    }\r\n    \r\n    /**\r\n\r\n     * Check and property to see its value\r\n\r\n     */\r\n\r\n    function checkPropertyLastKnownValue(bytes32 _propertyUniqueID, address _memberWalletAddress)\r\n\r\n        public\r\n\r\n        view\r\n\r\n        returns(uint256)\r\n\r\n    {\r\n\r\n        return propertyLastKnownValue_[_propertyUniqueID][_memberWalletAddress];\r\n\r\n    }\r\n\r\n    /**\r\n\r\n     * Check an address for its current transfering propety id\r\n\r\n     */\r\n\r\n    function checkTransferingPropertyID(address _ownerAddress)\r\n\r\n        public\r\n\r\n        view\r\n\r\n        returns(bytes32)\r\n\r\n    {\r\n\r\n        if(_ownerAddress == msg.sender){\r\n\r\n            return transferingPropertyid_[msg.sender];\r\n\r\n        } else {\r\n\r\n            return transferingPropertyid_[_ownerAddress];\r\n\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n\r\n     * Check the globalFeeLedger_\r\n\r\n     */\r\n\r\n    function checkGlobalFeeLedger()\r\n\r\n        public\r\n\r\n        view\r\n\r\n        returns(uint256)\r\n\r\n    {\r\n\r\n        if(globalFeeLedger_ >= 0){\r\n\r\n            return globalFeeLedger_;\r\n\r\n        } else {\r\n\r\n            return 0;\r\n\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n\r\n     * Check and address to see if it has member privileges\r\n\r\n     */\r\n\r\n    function checkMember(address _identifier)\r\n\r\n        public\r\n\r\n        view\r\n\r\n        returns(bool)\r\n\r\n    {\r\n\r\n        if(members_[_identifier] == true){\r\n\r\n            return true;\r\n\r\n        } else {\r\n\r\n            return false;\r\n\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n\r\n     * Check and address to see is its got founder developer privileges\r\n\r\n     */\r\n\r\n    function checkFounderDeveloper(address _identifier)\r\n\r\n        public\r\n\r\n        view\r\n\r\n        returns(bool)\r\n\r\n    {\r\n\r\n        if(founderdevelopers_[_identifier] == true){\r\n\r\n            return true;\r\n\r\n        } else {\r\n\r\n            return false;\r\n\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n\r\n     * Check and address to see if it has admin privileges\r\n\r\n     */\r\n\r\n    function checkAdmin(address _identifier)\r\n\r\n        public\r\n\r\n        view\r\n\r\n        returns(bool)\r\n\r\n    {\r\n\r\n        if(administrators[_identifier] == true){\r\n\r\n            return true;\r\n\r\n        } else {\r\n\r\n            return false;\r\n\r\n        }\r\n\r\n    }\r\n\r\n    /*----------  ADMINISTRATOR ONLY FUNCTIONS  ----------*/\r\n\r\n    /**\r\n\r\n     * whitelist Admins admin only\r\n\r\n     */\r\n\r\n    function adminWhitelistAdministrator(address _identifier, bool _status)\r\n\r\n        public\r\n\r\n        onlyAdministrator(msg.sender)\r\n\r\n    {\r\n\r\n        require(msg.sender != _identifier);\r\n\r\n            administrators[_identifier] \r\n            = _status;\r\n\r\n            emit AdminWhitelisted(msg.sender, _identifier, _status);\r\n\r\n    }\r\n\r\n    /**\r\n\r\n     * Automation entrypoint to whitelist ceva_ admin only\r\n\r\n     */\r\n\r\n    function adminWhitelistCEVA(address _identifier, bool _status)\r\n\r\n        public\r\n\r\n        onlyAdministrator(msg.sender)\r\n\r\n    {\r\n\r\n        require(msg.sender != _identifier, \"Invalid address\");\r\n\r\n            ceva_[_identifier] \r\n            = _status;\r\n\r\n            numberofburnrequestswhitelisted_[msg.sender] \r\n            = 0;\r\n\r\n            numberofpropertieswhitelisted_[msg.sender] \r\n            = 0;\r\n\r\n            numberofmintingrequestswhitelisted_[msg.sender] \r\n            = 0;\r\n\r\n            emit CEVAWhitelisted(msg.sender, _identifier, _status);\r\n\r\n    }\r\n\r\n    /**\r\n\r\n     * Whitelist a Property that has been confirmed on the site.. ceva only\r\n\r\n     */\r\n\r\n    function cevaWhitelistMintRequest(address _ownerAddress, bool _trueFalse, bytes32 _mintingRequestUniqueid)\r\n\r\n        public\r\n\r\n        onlyCEVA(msg.sender)\r\n\r\n        returns(bool)\r\n\r\n    {\r\n\r\n        if(_mintingRequestUniqueid == workingPropertyid_[msg.sender]){\r\n\r\n            require(msg.sender != _ownerAddress);\r\n\r\n            mintrequestwhitelist_[_ownerAddress][_mintingRequestUniqueid] \r\n            = _trueFalse;\r\n\r\n            return true;\r\n\r\n        } else {\r\n\r\n            return false;\r\n\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n\r\n     * Whitelist a Property that has been confirmed on the site.. ceva only\r\n\r\n     */\r\n\r\n    function cevaWhitelistBurnRequest(address _ownerAddress, bool _trueFalse, bytes32 _burnrequestUniqueID)\r\n\r\n        public\r\n\r\n        onlyCEVA(msg.sender)\r\n\r\n        returns(bool)\r\n\r\n    {\r\n\r\n        if(_burnrequestUniqueID == workingBurnRequestid_[msg.sender]){\r\n\r\n            require(msg.sender != _ownerAddress);\r\n\r\n            burnrequestwhitelist_[_ownerAddress][_burnrequestUniqueID] \r\n            = _trueFalse;\r\n\r\n            return true;\r\n\r\n        } else {\r\n\r\n            return false;\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Whitelist a Minting Request that has been confirmed on the site.. ceva only\r\n\r\n     */\r\n\r\n    function cevaWhitelistProperty(address _ownerAddress, bool _trueFalse, bytes32 _propertyUniqueID)\r\n\r\n        public\r\n\r\n        onlyCEVA(msg.sender)\r\n\r\n        returns(bool)\r\n\r\n    {\r\n\r\n        if(_trueFalse = true){\r\n\r\n            require(workingPropertyid_[msg.sender] == _propertyUniqueID);\r\n\r\n            propertywhitelist_[_ownerAddress][_propertyUniqueID] \r\n            = _trueFalse;\r\n\r\n            propertyOwner_[_propertyUniqueID] \r\n            = _ownerAddress;\r\n\r\n            lastMintingPrice_[_propertyUniqueID] \r\n            = 0 + ((lastMintingPrice_[_propertyUniqueID] + 1) - 1);\r\n            \r\n            propertyPriceUpdateCountAsset_[_propertyUniqueID] \r\n            += 0;\r\n\r\n            emit PropertyWhitelisted(msg.sender, _propertyUniqueID, _trueFalse);\r\n\r\n            return true;\r\n\r\n        } else {\r\n\r\n            propertywhitelist_[_ownerAddress][_propertyUniqueID] \r\n            = _trueFalse;\r\n\r\n            lastMintingPrice_[_propertyUniqueID] \r\n            = 0 + ((lastMintingPrice_[_propertyUniqueID] + 1) - 1);\r\n\r\n            return false;\r\n\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n\r\n     * Whitelist a Minting Request that has been confirmed on the site.. ceva only\r\n\r\n     */\r\n\r\n    function cevaUpdatePropertyValue(address _ownerAddress, uint256 _propertyValue)\r\n\r\n        public\r\n\r\n        onlyCEVA(msg.sender)\r\n\r\n        returns(uint256, uint8)\r\n\r\n    {\r\n\r\n        require(propertywhitelist_[_ownerAddress][workingPropertyid_[msg.sender]] = true \r\n        && _propertyValue >= 0 \r\n        && workingPropertyid_[msg.sender] != 0x676c6f62616c0000000000000000000000000000000000000000000000000000);\r\n\r\n            if(_ownerAddress != msg.sender){\r\n\r\n                address _customerAddress \r\n                = msg.sender;\r\n\r\n                propertyvalueOld_[_ownerAddress][workingPropertyid_[msg.sender]] \r\n                = propertyvalue_[_ownerAddress][workingPropertyid_[msg.sender]];\r\n                \r\n                if(propertyPriceUpdateCountAsset_[0x676c6f62616c0000000000000000000000000000000000000000000000000000] >= 0){\r\n                    \r\n                    propertyvalueOld_[_ownerAddress][workingPropertyid_[msg.sender]] \r\n                    = _propertyValue;\r\n                }\r\n\r\n                if(propertyGlobalBalance_[workingPropertyid_[msg.sender]] >= 1e18){\r\n                    \r\n                    propertyvalue_[_ownerAddress][workingPropertyid_[msg.sender]] \r\n                    = _propertyValue;\r\n                    \r\n                    uint256 _pCalculate \r\n                    = (((propertyvalueOld_[_ownerAddress][workingPropertyid_[msg.sender]] * 1e18) / 100) * 1000000) / propertyGlobalBalance_[workingPropertyid_[msg.sender]];\r\n                    \r\n                    uint256 _propertyGlobalBalanceOld \r\n                    = propertyGlobalBalance_[workingPropertyid_[msg.sender]];\r\n                    \r\n                    uint256 _qCalculate \r\n                    = ((( propertyvalue_[_ownerAddress][workingPropertyid_[msg.sender]] * 1e18) / 100) * 1000000) / _pCalculate;\r\n                    \r\n                    propertyGlobalBalance_[workingPropertyid_[msg.sender]] \r\n                    = _qCalculate;\r\n                    \r\n                    propertyvalue_[whoaaddress_][0x676c6f62616c0000000000000000000000000000000000000000000000000000] \r\n                    += propertyGlobalBalance_[workingPropertyid_[msg.sender]];\r\n                    \r\n                    propertyvalue_[whoaaddress_][0x676c6f62616c0000000000000000000000000000000000000000000000000000] \r\n                    -= _propertyGlobalBalanceOld;\r\n                }\r\n                \r\n\r\n                lastMintingPrice_[workingPropertyid_[msg.sender]] \r\n                = _propertyValue;\r\n                \r\n                propertyvalue_[_ownerAddress][workingPropertyid_[msg.sender]] \r\n                = _propertyValue;\r\n                \r\n                uint256 _pValue \r\n                = propertyvalue_[_ownerAddress][workingPropertyid_[msg.sender]];\r\n                \r\n                uint256 _pValueOld \r\n                = propertyvalueOld_[_ownerAddress][workingPropertyid_[msg.sender]];\r\n                \r\n                propertyvalue_[_ownerAddress][workingPropertyid_[msg.sender]] \r\n                = (_pValue + _propertyValue) - _pValueOld;\r\n\r\n                propertyPriceUpdateCountAsset_[workingPropertyid_[msg.sender]] \r\n                += 1;\r\n\r\n                propertyPriceUpdateCountAsset_[0x676c6f62616c0000000000000000000000000000000000000000000000000000] += 1;\r\n\r\n                if(propertyPriceUpdateCountAsset_[workingPropertyid_[msg.sender]] >= 1){\r\n\r\n                    tokenSupply_ \r\n                    = (tokenSupply_ - ((propertyvalueOld_[_ownerAddress][workingPropertyid_[msg.sender]] * 1e18) / 100)) + ((propertyvalue_[_ownerAddress][workingPropertyid_[msg.sender]] * 1e18) / 100);\r\n\r\n                    propertyPriceUpdatesAsset_[0x676c6f62616c0000000000000000000000000000000000000000000000000000] \r\n                    = propertyPriceUpdateCountAsset_[0x676c6f62616c0000000000000000000000000000000000000000000000000000];\r\n\r\n                }\r\n\r\n                emit PropertyValuation(_customerAddress, workingPropertyid_[msg.sender], propertyvalue_[_ownerAddress][workingPropertyid_[msg.sender]]);\r\n\r\n                return (propertyvalue_[_ownerAddress][workingPropertyid_[msg.sender]], 1);\r\n\r\n            } else {\r\n\r\n                return (propertyvalue_[_ownerAddress][workingPropertyid_[msg.sender]], 2);\r\n\r\n            }\r\n\r\n    }\r\n\r\n    function updateRollingPropertyValueMember(address _holderAddress, bytes32 _propertyUniqueId)\r\n\r\n        internal\r\n\r\n    {\r\n\r\n        address _ownerAddress \r\n        = propertyOwner_[_propertyUniqueId];\r\n\r\n        uint256 _propertyBalanceLedger \r\n        = propertyBalanceLedger_[_propertyUniqueId][_holderAddress];\r\n\r\n        if(propertyPriceUpdateCountAsset_[_propertyUniqueId] > propertyPriceUpdateCountMember_[_holderAddress][_propertyUniqueId] \r\n        && propertyPriceUpdateCountMember_[_holderAddress][_propertyUniqueId] == 0) {\r\n            \r\n            propertyLastKnownValue_[_propertyUniqueId][_holderAddress] \r\n            = propertyvalue_[_ownerAddress][_propertyUniqueId];\r\n\r\n            propertyPriceUpdateCountMember_[_holderAddress][_propertyUniqueId] \r\n            = propertyPriceUpdateCountAsset_[_propertyUniqueId];\r\n            \r\n        } else if(propertyPriceUpdateCountAsset_[_propertyUniqueId] > propertyPriceUpdateCountMember_[_holderAddress][_propertyUniqueId]){\r\n            \r\n            uint256 _divideby \r\n            = ((((propertyLastKnownValue_[_propertyUniqueId][_holderAddress] * 1e18) / 100) * 1000000) / _propertyBalanceLedger);\r\n\r\n            uint256 _propertyValue \r\n            = ((propertyvalue_[_ownerAddress][_propertyUniqueId] * 1e18) / 100) * 1000000;\r\n\r\n            uint256 _pCalculate \r\n            = _propertyValue / _divideby;\r\n\r\n            propertyBalanceLedger_[_propertyUniqueId][_holderAddress] \r\n            = _pCalculate;\r\n            \r\n            tokenBalanceLedger_[_holderAddress] \r\n            = (tokenBalanceLedger_[_holderAddress] + _pCalculate) - _propertyBalanceLedger;\r\n\r\n            propertyPriceUpdateCountMember_[_holderAddress][_propertyUniqueId] \r\n            = propertyPriceUpdateCountAsset_[_propertyUniqueId];\r\n            \r\n            propertyLastKnownValue_[_propertyUniqueId][_holderAddress] \r\n            = propertyvalue_[_ownerAddress][_propertyUniqueId];\r\n            \r\n        } else {\r\n            return;\r\n        }\r\n\r\n    }\r\n\r\n    function memberUpdateRollingPropertyValue(address _holderAddress, bytes32 _propertyUniqueId)\r\n\r\n        public\r\n\r\n        onlyMembers(msg.sender)\r\n\r\n        returns(uint8)\r\n\r\n    {\r\n\r\n        address _ownerAddress \r\n        = propertyOwner_[_propertyUniqueId];\r\n\r\n        if(propertyPriceUpdateCountAsset_[_propertyUniqueId] != propertyPriceUpdateCountMember_[_holderAddress][_propertyUniqueId]\r\n\r\n        && propertyBalanceLedger_[_propertyUniqueId][_holderAddress] > 0){\r\n\r\n            require(propertywhitelist_[_ownerAddress][_propertyUniqueId] = true);\r\n\r\n            assert(propertyvalue_[_ownerAddress][_propertyUniqueId] > 0);\r\n\r\n            updateRollingPropertyValueMember(_holderAddress,_propertyUniqueId);\r\n\r\n            return 1;\r\n\r\n        } else {\r\n\r\n            return 2;\r\n\r\n        }\r\n\r\n    }\r\n\r\n    /*----------  FOUNDER DEVELOPER ONLY FUNCTIONS  ----------*/\r\n\r\n    // Mint an amount of tokens to an address\r\n\r\n    // using a whitelisted minting request unique ID founder developer only\r\n\r\n    function founderDeveloperMintAVEC(uint256 _founderDeveloperFee, address _toAddress, address _holdOne, address _holdTwo, address _holdThree,\r\n\r\n        uint256 _propertyValue, bytes32 _propertyUniqueID, bytes32 _mintingRequestUniqueid, bool _globalReplacement)\r\n\r\n        public\r\n\r\n        onlyFounderDevelopers(msg.sender)\r\n\r\n    {\r\n\r\n        uint256 _amountOfTokens \r\n        = (_propertyValue * 1e18) / 100;\r\n\r\n        if(_propertyValue == propertyvalue_[propertyOwner_[_propertyUniqueID]][_propertyUniqueID] && _globalReplacement == false){\r\n\r\n        // data setup\r\n            \r\n            require(members_[_toAddress] == true \r\n            \r\n            && _founderDeveloperFee >= 20001 \r\n            \r\n            && _founderDeveloperFee <= 100000 \r\n            \r\n            && msg.sender != _toAddress \r\n            \r\n            && _propertyUniqueID == workingPropertyid_[msg.sender]\r\n\r\n            && _mintingRequestUniqueid == workingMintRequestid_[msg.sender]);\r\n\r\n            // add tokens to the pool\r\n\r\n            updateHoldsandSupply(_amountOfTokens);\r\n\r\n            // add to burner stockpile\r\n\r\n            tokenBalanceLedger_[whoaaddress_] \r\n            = tokenBalanceLedger_[whoaaddress_] + (_amountOfTokens / 50);\r\n\r\n            // credit founder developer fee\r\n\r\n            propertyBalanceLedger_[0x676c6f62616c0000000000000000000000000000000000000000000000000000][msg.sender] += (_amountOfTokens * 1000) / _founderDeveloperFee;\r\n\r\n            tokenBalanceLedger_[msg.sender] \r\n            = tokenBalanceLedger_[msg.sender] + (_amountOfTokens * 1000) / _founderDeveloperFee;\r\n\r\n            //credit Envelope Fee Shareholds\r\n\r\n            creditFeeSharehold(_amountOfTokens, _toAddress, _holdOne, _holdTwo, _holdThree);\r\n\r\n            // credit tech feeSharehold_    ;\r\n\r\n            uint256 _techFee \r\n            = (_amountOfTokens * 100) / 25000;\r\n\r\n            propertyBalanceLedger_[0x676c6f62616c0000000000000000000000000000000000000000000000000000][techaddress_] \r\n            += _techFee;\r\n\r\n            propertyvalue_[whoaaddress_][0x676c6f62616c0000000000000000000000000000000000000000000000000000] \r\n            += (_amountOfTokens * 100000000000) / 1111234581620;\r\n\r\n            tokenBalanceLedger_[techaddress_] \r\n            = tokenBalanceLedger_[techaddress_] + _techFee;\r\n\r\n            uint256 _whoaFees \r\n            = (_amountOfTokens * 100000000000000) / 2500000000000625;\r\n\r\n            uint256 _fee \r\n            = (_amountOfTokens * (1000 * 100000)) / (_founderDeveloperFee * 100000);\r\n\r\n            // add tokens to the _toAddress\r\n\r\n            propertyBalanceLedger_[_propertyUniqueID][_toAddress] \r\n            = propertyBalanceLedger_[_propertyUniqueID][_toAddress] + ((_amountOfTokens - _whoaFees)- _fee);\r\n\r\n            tokenBalanceLedger_[_toAddress] \r\n            = tokenBalanceLedger_[_toAddress] + ((_amountOfTokens - _whoaFees)- _fee);\r\n\r\n            mintingDepositsOf_[_toAddress] \r\n            += ((_amountOfTokens - _whoaFees)- _fee);\r\n\r\n            propertyGlobalBalance_[_propertyUniqueID] \r\n            = _whoaFees;\r\n\r\n            // whoa fee\r\n\r\n            propertyBalanceLedger_[0x676c6f62616c0000000000000000000000000000000000000000000000000000][whoaaddress_] \r\n            += _whoaFees - _techFee;\r\n\r\n            // fire event\r\n\r\n            emit Transfer(msg.sender, _toAddress, _amountOfTokens);\r\n\r\n        } else if(_globalReplacement == true && ceva_[msg.sender] == true){\r\n\r\n            propertyBalanceLedger_[0x676c6f62616c0000000000000000000000000000000000000000000000000000][whoaaddress_] \r\n            += _amountOfTokens;\r\n\r\n            propertyvalue_[whoaaddress_][0x676c6f62616c0000000000000000000000000000000000000000000000000000] \r\n            += _amountOfTokens;\r\n\r\n            tokenBalanceLedger_[whoaaddress_] \r\n            += _amountOfTokens;\r\n\r\n            // fire event\r\n\r\n            emit Transfer(msg.sender, whoaaddress_, _amountOfTokens);\r\n\r\n        } else {\r\n\r\n            // fire event\r\n\r\n            _amountOfTokens \r\n            = 0;\r\n\r\n            emit Transfer(msg.sender, _toAddress, _amountOfTokens);\r\n\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n\r\n     * Whitelist a Minting Request that has been confirmed on the site.. ceva only\r\n\r\n     */\r\n\r\n    function founderDeveloperPropertyId(address _ownerAddress, bytes32 _propertyUniqueId)\r\n\r\n        public\r\n\r\n        onlyFounderDevelopers(msg.sender)\r\n\r\n        returns(bool)\r\n\r\n    {\r\n\r\n        if(members_[_ownerAddress] == true){\r\n\r\n            workingPropertyid_[msg.sender] = _propertyUniqueId;\r\n\r\n            return true;\r\n\r\n        } else {\r\n\r\n            return false;\r\n\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n\r\n     * Whitelist a Minting Request that has been confirmed on the site.. ceva only\r\n\r\n     */\r\n\r\n    function cevaPropertyId(address _ownerAddress, bytes32 _propertyUniqueId)\r\n\r\n        public\r\n\r\n        onlyCEVA(msg.sender)\r\n\r\n        returns(bool)\r\n\r\n    {\r\n\r\n        if(members_[_ownerAddress] == true){\r\n\r\n            workingPropertyid_[msg.sender] \r\n            = _propertyUniqueId;\r\n\r\n            return true;\r\n\r\n        } else {\r\n\r\n            return false;\r\n\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n\r\n     * Whitelist a Minting Request that has been confirmed on the site.. ceva only\r\n\r\n     */\r\n\r\n    function swapAVEC(bytes32 _propertyUniqueID)\r\n\r\n        public\r\n\r\n        onlyMembers(msg.sender)\r\n\r\n        returns(bytes32, uint8)\r\n\r\n    {\r\n\r\n        if(transferingFromWallet_[msg.sender] == 0){\r\n            \r\n            updateRollingPropertyValueMember(msg.sender, _propertyUniqueID);\r\n            \r\n            transferingPropertyid_[msg.sender] \r\n            = _propertyUniqueID;\r\n            \r\n            transferType_[msg.sender]\r\n            = 1;\r\n\r\n            return (transferingPropertyid_[msg.sender], 1);\r\n        } else {\r\n            return (transferingPropertyid_[msg.sender], 2);\r\n        }\r\n\r\n\r\n\r\n    }\r\n    \r\n    /**\r\n\r\n     * Select ONUS as the asset to be moved when calling the transfer function.\r\n\r\n     */\r\n\r\n    function swapONUS()\r\n\r\n        public\r\n\r\n        returns(bytes32, uint8)\r\n\r\n    {\r\n\r\n        if(transferingFromWallet_[msg.sender] == 0){\r\n            \r\n            transferingPropertyid_[msg.sender] \r\n            = onusCode_;\r\n            \r\n            transferType_[msg.sender]\r\n            = 2;\r\n\r\n            return (transferingPropertyid_[msg.sender], 1);\r\n        } else {\r\n            return (transferingPropertyid_[msg.sender], 2);\r\n        }\r\n\r\n\r\n\r\n    }\r\n    \r\n    /**\r\n\r\n     * Select ONUS as the asset to be moved when calling the transfer function.\r\n\r\n     */\r\n\r\n    function swapOMNI()\r\n\r\n        public\r\n\r\n        returns(bytes32, uint8)\r\n\r\n    {\r\n\r\n        if(transferingFromWallet_[msg.sender] == 0){\r\n            \r\n            transferingPropertyid_[msg.sender] \r\n            = omniCode_;\r\n            \r\n            transferType_[msg.sender]\r\n            = 3;\r\n\r\n            return (transferingPropertyid_[msg.sender], 1);\r\n        } else {\r\n            return (transferingPropertyid_[msg.sender], 2);\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    /**\r\n\r\n     * Whitelist a Minting Request that has been confirmed on the site.. ceva only\r\n\r\n     */\r\n\r\n    function founderDeveloperMintingRequest(address _ownerAddress, bytes32 _mintingRequestUniqueid)\r\n\r\n        public\r\n\r\n        onlyFounderDevelopers(msg.sender)\r\n\r\n        returns(bool)\r\n\r\n    {\r\n\r\n        require(mintrequestwhitelist_[_ownerAddress][_mintingRequestUniqueid] = true);\r\n\r\n            if(members_[_ownerAddress] == true){\r\n\r\n                workingMintRequestid_[msg.sender] \r\n                = _mintingRequestUniqueid;\r\n\r\n                return true;\r\n\r\n            } else {\r\n\r\n                return false;\r\n\r\n            }\r\n\r\n    }\r\n\r\n    /**\r\n\r\n     * Whitelist a Minting Request that has been confirmed on the site.. ceva only\r\n\r\n     */\r\n\r\n    function founderDeveloperBurnRequestId(address _ownerAddress, bytes32 _propertyUniqueID, uint256 _propertyValue)\r\n\r\n        public\r\n\r\n        onlyFounderDevelopers(msg.sender)\r\n\r\n        returns(bytes32)\r\n\r\n    {\r\n\r\n        require(burnrequestwhitelist_[_ownerAddress][_propertyUniqueID] = true);\r\n\r\n            if(members_[_ownerAddress] == true){\r\n\r\n                workingPropertyid_[msg.sender] = _propertyUniqueID;\r\n\r\n                numberofburnrequestswhitelisted_[msg.sender] \r\n                += 1;\r\n\r\n                emit PropertyValuation(msg.sender, _propertyUniqueID, _propertyValue);\r\n\r\n                return _propertyUniqueID;\r\n\r\n            } else {\r\n\r\n                numberofmintingrequestswhitelisted_[msg.sender] \r\n                -= 1;\r\n\r\n                _propertyValue = 0;\r\n\r\n                return _propertyUniqueID;\r\n\r\n            }\r\n\r\n    }\r\n\r\n    function bytes32ToString(bytes32 _bytes32)\r\n\r\n    public\r\n\r\n    view\r\n\r\n    onlyMembers(msg.sender)\r\n\r\n    returns (string memory) {\r\n\r\n        uint8 i = 0;\r\n\r\n        while(i < 32 && _bytes32[i] != 0) {\r\n\r\n            i++;\r\n\r\n        }\r\n\r\n        bytes memory bytesArray = new bytes(i);\r\n\r\n        for (i = 0; i < 32 && _bytes32[i] != 0; i++) {\r\n\r\n            bytesArray[i] = _bytes32[i];\r\n\r\n        }\r\n\r\n        return string(bytesArray);\r\n\r\n    }\r\n\r\n    function stringToBytes32(string memory source)\r\n\r\n    public\r\n\r\n    view\r\n\r\n    onlyMembers(msg.sender)\r\n\r\n    returns (bytes32 result) {\r\n\r\n    bytes memory tempEmptyStringTest = bytes(source);\r\n\r\n    if (tempEmptyStringTest.length == 0) {\r\n\r\n        return 0x0;\r\n\r\n    }\r\n\r\n\r\n\r\n    assembly {\r\n\r\n        result := mload(add(source, 32))\r\n\r\n    }\r\n\r\n    }\r\n\r\n    /**\r\n\r\n     * Whitelist a Founder Developer ceva only\r\n\r\n     */\r\n\r\n    function cevaWhitelistFounderDeveloper(address _identifier, bool _status)\r\n\r\n        public\r\n\r\n        onlyCEVA(msg.sender)\r\n\r\n    {\r\n\r\n            founderdevelopers_[_identifier] = _status;\r\n\r\n            numberofburnrequestswhitelisted_[_identifier] = 0;\r\n\r\n            numberofpropertieswhitelisted_[_identifier] = 0;\r\n\r\n            numberofmintingrequestswhitelisted_[_identifier] = 0;\r\n\r\n            emit FounderDeveloperWhitelisted(msg.sender, _identifier, _status);\r\n\r\n    }\r\n\r\n    function checkPropertyIDOf(address _user)\r\n\r\n        public\r\n\r\n        view\r\n\r\n        returns(bytes32)\r\n\r\n    {\r\n\r\n        return workingPropertyid_[_user];\r\n\r\n    }\r\n    \r\n    function checkAvailableAVEC(bytes32 _propertyUniqueID)\r\n\r\n        public\r\n\r\n        view\r\n\r\n        returns(uint256)\r\n\r\n    {\r\n\r\n        uint256 _pValue = (propertyvalue_[propertyOwner_[_propertyUniqueID]][_propertyUniqueID] * 1e18) / 100;\r\n        uint256 _availableAVEC = _pValue - propertyGlobalBalance_[_propertyUniqueID];\r\n        return _availableAVEC;\r\n\r\n    }\r\n    \r\n    function checkBurnRequestIDOf(address _user)\r\n\r\n        public\r\n\r\n        view\r\n\r\n        returns(bytes32)\r\n\r\n    {\r\n\r\n        return workingBurnRequestid_[_user];\r\n\r\n    }\r\n\r\n    function checkMintIDOf(address _user)\r\n\r\n        public\r\n\r\n        view\r\n\r\n        returns(bytes32)\r\n\r\n    {\r\n\r\n        return workingMintRequestid_[_user];\r\n\r\n    }\r\n\r\n    /**\r\n\r\n     * whitelist a member founder developer only\r\n\r\n     */\r\n\r\n    function founderDeveloperWhitelistMember(address _identifier, bool _status)\r\n\r\n        public\r\n\r\n        onlyFounderDevelopers(msg.sender)\r\n\r\n    {\r\n\r\n        require(msg.sender != _identifier);\r\n\r\n            members_[_identifier] = _status;\r\n\r\n            emit MemberWhitelisted(msg.sender, _identifier, _status);\r\n\r\n    }\r\n\r\n    /*----------  HELPERS AND CALCULATORS  ----------*/\r\n\r\n    /**\r\n\r\n     * Retrieve the tokens owned by the caller.\r\n\r\n     */\r\n\r\n    function tokensNoDecimals()\r\n\r\n        view\r\n\r\n        public\r\n\r\n        returns(uint256)\r\n\r\n    {\r\n\r\n        address _customerAddress = msg.sender;\r\n\r\n        uint256 _tokens =  (balanceOf(_customerAddress) / 1e18);\r\n\r\n        if(_tokens >= 1){\r\n\r\n            return _tokens;\r\n\r\n        } else {\r\n\r\n            return 0;\r\n\r\n        }\r\n\r\n    }\r\n\r\n    function balanceOf(address _owner)\r\n\r\n        view\r\n\r\n        public\r\n\r\n        returns(uint256)\r\n\r\n    {\r\n\r\n        return tokenBalanceLedger_[_owner];\r\n\r\n    }\r\n\r\n    function checkPropertyBalanceOf(address _wallet, bytes32 _propertyUniqueID)\r\n\r\n        view\r\n\r\n        public\r\n\r\n        returns(uint256)\r\n\r\n    {\r\n\r\n        return propertyBalanceLedger_[_propertyUniqueID][_wallet];\r\n\r\n    }\r\n\r\n    function checkDividendsOf(address _customerAddress, uint8 _envelopeNumber)\r\n\r\n        view\r\n\r\n        public\r\n\r\n        returns(uint256)\r\n\r\n    {\r\n\r\n        if(_envelopeNumber == 1){\r\n\r\n            uint256 _dividendPershare \r\n            = ((globalFeeLedger_ / 2) / 8) / taxesfeeTotalHolds_;\r\n\r\n            uint256 _taxesSharehold \r\n            = taxesFeeSharehold_[_customerAddress];\r\n\r\n            uint256 _pCalculate \r\n            = ((_dividendPershare * _taxesSharehold) -\r\n\r\n            (taxesFeeTotalWithdrawn_[_customerAddress] + taxesPreviousWithdrawn_[_customerAddress])) /\r\n\r\n            ((mintingDepositsOf_[_customerAddress] + 1) / (amountCirculated_[_customerAddress] + 1));\r\n\r\n            return _pCalculate;\r\n\r\n        } else if(_envelopeNumber == 2){\r\n\r\n            uint256 _dividendPershare \r\n            = ((globalFeeLedger_ / 2) / 8) / insurancefeeTotalHolds_;\r\n\r\n            uint256 _insuranceSharehold \r\n            = insuranceFeeSharehold_[_customerAddress];\r\n\r\n            uint256 _pCalculate \r\n            = (((_dividendPershare + 0) * (_insuranceSharehold + 0)) -\r\n\r\n            ((insuranceFeeTotalWithdrawn_[_customerAddress] + 0) + (insurancePreviousWithdrawn_[_customerAddress] + 0))) /\r\n\r\n            ((mintingDepositsOf_[_customerAddress] + 1) / (amountCirculated_[_customerAddress] + 1));\r\n\r\n            return _pCalculate;\r\n\r\n        } else if(_envelopeNumber == 3){\r\n\r\n            uint256 _dividendPershare \r\n            = ((globalFeeLedger_ / 2) / 8) / maintencancefeeTotalHolds_;\r\n\r\n            uint256 _maintenanceSharehold \r\n            = maintenanceFeeSharehold_[_customerAddress];\r\n\r\n            uint256 _pCalculate \r\n            = (((_dividendPershare + 0) * (_maintenanceSharehold + 0)) -\r\n\r\n            ((maintenanceFeeTotalWithdrawn_[_customerAddress] + 0) + (maintenancePreviousWithdrawn_[_customerAddress] + 0))) /\r\n\r\n            ((mintingDepositsOf_[_customerAddress] + 1) / (amountCirculated_[_customerAddress] + 1));\r\n\r\n            return _pCalculate;\r\n\r\n        } else if(_envelopeNumber == 4){\r\n\r\n            uint256 _dividendPershare \r\n            = ((globalFeeLedger_ / 2) / 8) / waECOfeeTotalHolds_;\r\n\r\n            uint256 _waECOSharehold \r\n            = waECOFeeSharehold_[_customerAddress];\r\n\r\n            uint256 _pCalculate \r\n            = (((_dividendPershare + 0) * (_waECOSharehold + 0)) -\r\n\r\n            ((waECOFeeTotalWithdrawn_[_customerAddress] + 0) + (waECOPreviousWithdrawn_[_customerAddress] + 0))) /\r\n\r\n            ((mintingDepositsOf_[_customerAddress] + 1) / (amountCirculated_[_customerAddress] + 1));\r\n\r\n            return _pCalculate;\r\n\r\n        } else if(_envelopeNumber == 5){\r\n\r\n            uint256 _dividendPershare \r\n            = ((globalFeeLedger_ / 2) / 8) / holdonefeeTotalHolds_;\r\n\r\n            uint256 _holdOneSharehold \r\n            = holdoneSharehold_[_customerAddress];\r\n\r\n            uint256 _pCalculate \r\n            = (((_dividendPershare) * (_holdOneSharehold)) -\r\n\r\n            ((holdoneTotalWithdrawn_[_customerAddress]) + (holdonePreviousWithdrawn_[_customerAddress] + 0))) /\r\n\r\n            ((mintingDepositsOf_[_customerAddress] + 1) / (amountCirculated_[_customerAddress] + 1));\r\n\r\n            return _pCalculate;\r\n\r\n        } else if(_envelopeNumber == 6){\r\n\r\n            uint256 _dividendPershare \r\n            = ((globalFeeLedger_ / 2) / 8) / holdtwofeeTotalHolds_;\r\n\r\n            uint256 _holdtwoSharehold \r\n            = holdtwoSharehold_[_customerAddress];\r\n\r\n            uint256 _pCalculate \r\n            = (((_dividendPershare + 0) * (_holdtwoSharehold + 0)) -\r\n\r\n            ((holdtwoTotalWithdrawn_[_customerAddress] + 0) + (holdtwoPreviousWithdrawn_[_customerAddress] + 0))) /\r\n\r\n            ((mintingDepositsOf_[_customerAddress] + 1) / (amountCirculated_[_customerAddress] + 1));\r\n\r\n            return _pCalculate;\r\n\r\n        } else if(_envelopeNumber == 7){\r\n\r\n            uint256 _dividendPershare \r\n            = ((globalFeeLedger_ / 2) / 8) / holdthreefeeTotalHolds_;\r\n\r\n            uint256 _holdthreeSharehold \r\n            = holdthreeSharehold_[_customerAddress];\r\n\r\n            uint256 _pCalculate \r\n            = (((_dividendPershare + 0) * (_holdthreeSharehold + 0)) -\r\n\r\n            ((holdthreeTotalWithdrawn_[_customerAddress] + 0) + (holdthreePreviousWithdrawn_[_customerAddress] + 0))) /\r\n\r\n            ((mintingDepositsOf_[_customerAddress] + 1) / (amountCirculated_[_customerAddress] + 1));\r\n\r\n            return _pCalculate;\r\n\r\n        } else if(_envelopeNumber == 8){\r\n\r\n            uint256 _dividendPershare = ((globalFeeLedger_ / 2) / 8) / rewardsfeeTotalHolds_;\r\n\r\n            uint256 _rewardsSharehold = rewardsSharehold_[_customerAddress];\r\n\r\n            uint256 _pCalculate =  (((_dividendPershare + 0) * (_rewardsSharehold + 0)) -\r\n\r\n            ((rewardsTotalWithdrawn_[_customerAddress] + 0) + (rewardsPreviousWithdrawn_[_customerAddress] + 0))) /\r\n\r\n            ((mintingDepositsOf_[_customerAddress] + 1) / (amountCirculated_[_customerAddress] + 1));\r\n\r\n            return _pCalculate;\r\n\r\n        } else if(_envelopeNumber == 9){\r\n\r\n            uint256 _dividendPershare \r\n            = (((globalFeeLedger_ / 2) / 5) * 2) / techfeeTotalHolds_;\r\n\r\n            uint256 _techSharehold \r\n            = techSharehold_[_customerAddress];\r\n\r\n            uint256 _pCalculate \r\n            = (((_dividendPershare + 0) * (_techSharehold + 0)) -\r\n\r\n            ((techTotalWithdrawn_[_customerAddress] + 0) + (techPreviousWithdrawn_[_customerAddress] + 0))) /\r\n\r\n            ((mintingDepositsOf_[_customerAddress] + 1) / (amountCirculated_[_customerAddress] + 1));\r\n\r\n            return _pCalculate;\r\n\r\n        } else if(_envelopeNumber == 10){\r\n\r\n            uint256 _dividendPershare = (((globalFeeLedger_ / 2) / 5) + (globalFeeLedger_ / 40)) / existholdingsfeeTotalHolds_;\r\n\r\n            uint256 _existholdingsSharehold = existholdingsSharehold_[_customerAddress];\r\n\r\n            uint256 _pCalculate =  (((_dividendPershare + 0) * (_existholdingsSharehold + 0)) -\r\n\r\n            ((existholdingsTotalWithdrawn_[_customerAddress] + 0) + (existholdingsPreviousWithdrawn_[_customerAddress] + 0))) /\r\n\r\n            ((mintingDepositsOf_[_customerAddress] + 1) / (amountCirculated_[_customerAddress] + 1));\r\n\r\n            return _pCalculate;\r\n\r\n        } else if(_envelopeNumber == 11){\r\n\r\n            uint256 _dividendPershare \r\n            = ((globalFeeLedger_ / 2) / 8) / existcryptofeeTotalHolds_;\r\n\r\n            uint256 _existcryptoSharehold \r\n            = existcryptoSharehold_[_customerAddress];\r\n\r\n            uint256 _pCalculate \r\n            = (((_dividendPershare + 0) * (_existcryptoSharehold + 0)) -\r\n\r\n            ((existcryptoTotalWithdrawn_[_customerAddress] + 0) + (existcryptoPreviousWithdrawn_[_customerAddress] + 0))) /\r\n\r\n            ((mintingDepositsOf_[_customerAddress] + 1) / (amountCirculated_[_customerAddress] + 1));\r\n\r\n            return _pCalculate;\r\n\r\n        } else if(_envelopeNumber == 12){\r\n\r\n            uint256 _dividendPershare \r\n            = ((globalFeeLedger_ / 2) / 8) / whoafeeTotalHolds_;\r\n\r\n            uint256 _whoaSharehold \r\n            = whoaSharehold_[_customerAddress];\r\n\r\n            uint256 _pCalculate \r\n            = (((_dividendPershare + 0) * (_whoaSharehold + 0)) -\r\n\r\n            ((whoaTotalWithdrawn_[_customerAddress] + 0) + (whoaPreviousWithdrawn_[_customerAddress] + 0))) /\r\n\r\n            ((mintingDepositsOf_[_customerAddress] + 1) / (amountCirculated_[_customerAddress] + 1));\r\n\r\n            return _pCalculate;\r\n\r\n        } else if(_envelopeNumber == 13){\r\n\r\n            uint256 _dividendPershare \r\n            = ((globalFeeLedger_ / 2) / 8) / credibleyoufeeTotalHolds_;\r\n\r\n            uint256 _credibleyouSharehold \r\n            = credibleyouSharehold_[_customerAddress];\r\n\r\n            uint256 _pCalculate \r\n            = (((_dividendPershare + 0) * (_credibleyouSharehold + 0)) -\r\n\r\n            ((credibleyouTotalWithdrawn_[_customerAddress] + 0) + (credibleyouPreviousWithdrawn_[_customerAddress] + 0))) /\r\n\r\n            ((mintingDepositsOf_[_customerAddress] + 1) / (amountCirculated_[_customerAddress] + 1));\r\n\r\n            return _pCalculate;\r\n\r\n        } else {\r\n\r\n            return 0;\r\n\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n\r\n     * Retrieve the  taxes dividend balance of any single address.\r\n\r\n     */\r\n\r\n    function checkShareHoldOf(address _customerAddress, uint8 _envelopeNumber)\r\n\r\n        view\r\n\r\n        public\r\n\r\n        returns(uint256, uint8)\r\n\r\n    {\r\n\r\n\r\n\r\n        if(_envelopeNumber == 1){\r\n\r\n            return (taxesFeeSharehold_[_customerAddress], 1);\r\n\r\n        } else if(_envelopeNumber == 2){\r\n\r\n            return (insuranceFeeSharehold_[_customerAddress], 2);\r\n\r\n        } else if(_envelopeNumber == 3){\r\n\r\n            return (maintenanceFeeSharehold_[_customerAddress], 3);\r\n\r\n        } else if(_envelopeNumber == 4){\r\n\r\n            return (waECOFeeSharehold_[_customerAddress], 4);\r\n\r\n        } else if(_envelopeNumber == 5){\r\n\r\n            return (holdoneSharehold_[_customerAddress], 5);\r\n\r\n        } else if(_envelopeNumber == 6){\r\n\r\n            return (holdtwoSharehold_[_customerAddress], 6);\r\n\r\n        } else if(_envelopeNumber == 7){\r\n\r\n            return (holdthreeSharehold_[_customerAddress], 7);\r\n\r\n        } else if(_envelopeNumber == 8){\r\n\r\n            return (rewardsSharehold_[_customerAddress], 8);\r\n\r\n        } else if(_envelopeNumber == 9){\r\n\r\n            return (techSharehold_[_customerAddress], 9);\r\n\r\n        } else if(_envelopeNumber == 10){\r\n\r\n            return (existholdingsSharehold_[_customerAddress], 10);\r\n\r\n        } else if(_envelopeNumber == 11){\r\n\r\n            return (existcryptoSharehold_[_customerAddress], 11);\r\n\r\n        } else if(_envelopeNumber == 12){\r\n\r\n            return (whoaSharehold_[_customerAddress], 12);\r\n\r\n        } else if(_envelopeNumber == 13){\r\n\r\n            return (credibleyouSharehold_[_customerAddress], 13);\r\n\r\n        } else {\r\n\r\n            return (0, 0);\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    function totalSupply()\r\n\r\n        public\r\n\r\n        view\r\n\r\n        returns(uint256)\r\n\r\n    {\r\n\r\n            if(tokenSupply_ == 0){\r\n\r\n                return 0;\r\n\r\n            } else {\r\n\r\n            return tokenSupply_;}\r\n\r\n    }\r\n\r\n    /*==========================================\r\n\r\n    =            INTERNAL FUNCTIONS            =\r\n\r\n    ==========================================*/\r\n\r\n    /**\r\n\r\n     * Update token balance ledger of an address tokens from the caller to a new holder.\r\n\r\n     */\r\n\r\n    function updateHoldsandSupply(uint256 _amountOfTokens)\r\n\r\n        internal\r\n\r\n        returns(bool)\r\n\r\n    {\r\n\r\n        tokenSupply_ \r\n        = tokenSupply_ + _amountOfTokens;\r\n\r\n        taxesfeeTotalHolds_ \r\n        = (_amountOfTokens / 1e18) + taxesfeeTotalHolds_;\r\n\r\n        insurancefeeTotalHolds_ \r\n        = (_amountOfTokens / 1e18) + insurancefeeTotalHolds_;\r\n\r\n        maintencancefeeTotalHolds_ \r\n        = (_amountOfTokens / 1e18) + maintencancefeeTotalHolds_;\r\n\r\n        waECOfeeTotalHolds_ \r\n        = (_amountOfTokens / 1e18) + waECOfeeTotalHolds_;\r\n\r\n        holdonefeeTotalHolds_ \r\n        = (_amountOfTokens / 1e18) + holdonefeeTotalHolds_;\r\n\r\n        holdtwofeeTotalHolds_ \r\n        = (_amountOfTokens / 1e18) + holdtwofeeTotalHolds_;\r\n\r\n        holdthreefeeTotalHolds_ \r\n        = (_amountOfTokens / 1e18) + holdthreefeeTotalHolds_;\r\n\r\n        rewardsfeeTotalHolds_ \r\n        = (_amountOfTokens / 1e18) + rewardsfeeTotalHolds_;\r\n\r\n        techfeeTotalHolds_ \r\n        = (_amountOfTokens / 1e18) + techfeeTotalHolds_;\r\n\r\n        existholdingsfeeTotalHolds_ \r\n        = (_amountOfTokens / 1e18) + existholdingsfeeTotalHolds_;\r\n\r\n        existcryptofeeTotalHolds_ \r\n        = (_amountOfTokens / 1e18) + existcryptofeeTotalHolds_;\r\n\r\n        whoafeeTotalHolds_ \r\n        = (_amountOfTokens / 1e18) + whoafeeTotalHolds_;\r\n\r\n        credibleyoufeeTotalHolds_\r\n        = (_amountOfTokens / 1e18) + credibleyoufeeTotalHolds_;\r\n\r\n        feeTotalHolds_ \r\n        = ((_amountOfTokens / 1e18)* 13) + feeTotalHolds_;\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    /**\r\n\r\n     * Update token balance ledger of an address tokens from the caller to a new holder.\r\n\r\n     * Remember, there's a fee here as well.\r\n\r\n     */\r\n\r\n    function burnA(uint256 _amount)\r\n\r\n        internal\r\n\r\n        returns(bool)\r\n\r\n    {\r\n\r\n        uint256 _pValue = _amount / 100;\r\n\r\n        if(_amount > 0){\r\n\r\n            rewardsfeeTotalHolds_ \r\n            -= _pValue;\r\n\r\n            techfeeTotalHolds_ \r\n            -= _pValue;\r\n\r\n            existholdingsfeeTotalHolds_ \r\n            -= _pValue;\r\n\r\n            existcryptofeeTotalHolds_ \r\n            -= _pValue;\r\n\r\n            whoafeeTotalHolds_\r\n            -= _pValue;\r\n\r\n            credibleyoufeeTotalHolds_ \r\n            -= _pValue;\r\n\r\n            feeTotalHolds_ \r\n            -= _pValue;\r\n\r\n            return true;\r\n\r\n        } else {\r\n\r\n            return false;\r\n\r\n        }\r\n\r\n    }\r\n\r\n    function updateEquityRents(uint256 _amountOfTokens)\r\n\r\n        internal\r\n\r\n        returns(bool)\r\n\r\n    {\r\n\r\n        if(_amountOfTokens > 0){\r\n\r\n            globalFeeLedger_ \r\n            = globalFeeLedger_ + (_amountOfTokens / 50);\r\n\r\n            return true;\r\n\r\n        } else {\r\n\r\n            _amountOfTokens = 0;\r\n\r\n            return false;\r\n\r\n        }\r\n\r\n    }\r\n\r\n    function creditFeeSharehold(uint256 _amountOfTokens, address _owner, address _toAddress, address _toAddresstwo, address _toAddressthree)\r\n\r\n        internal\r\n\r\n        returns(bool)\r\n\r\n    {\r\n\r\n        taxesFeeSharehold_[_owner] \r\n        += _amountOfTokens / 1e18;\r\n\r\n        insuranceFeeSharehold_[_owner] \r\n        += _amountOfTokens / 1e18;\r\n\r\n        maintenanceFeeSharehold_[whoamaintenanceaddress_] \r\n        += _amountOfTokens / 1e18;\r\n\r\n        waECOFeeSharehold_[_owner] \r\n        += _amountOfTokens / 1e18;\r\n\r\n        holdoneSharehold_[_toAddress] \r\n        += _amountOfTokens / 1e18;\r\n\r\n        holdtwoSharehold_[_toAddresstwo] \r\n        += _amountOfTokens / 1e18;\r\n\r\n        holdthreeSharehold_[_toAddressthree] \r\n        += _amountOfTokens / 1e18;\r\n\r\n        rewardsSharehold_[whoarewardsaddress_] \r\n        += _amountOfTokens / 1e18;\r\n\r\n        techSharehold_[techaddress_] \r\n        += _amountOfTokens / 1e18;\r\n\r\n        existholdingsSharehold_[existholdingsaddress_] \r\n        += _amountOfTokens / 1e18;\r\n\r\n        existcryptoSharehold_[existcryptoaddress_] \r\n        += _amountOfTokens / 1e18;\r\n\r\n        whoaSharehold_[whoaaddress_]\r\n        += _amountOfTokens / 1e18;\r\n\r\n        credibleyouSharehold_[credibleyouaddress_] \r\n        += _amountOfTokens / 1e18;\r\n\r\n        return true;\r\n\r\n    }\r\n    \r\n    function cPropertyValueInToken(uint256 _pValue)\r\n        \r\n        internal\r\n        \r\n        pure\r\n        \r\n        returns(uint256)\r\n    \r\n    {\r\n        _pValue = (_pValue * 1e18) / 100;\r\n        return _pValue;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"MemberAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensConverted\",\"type\":\"uint256\"}],\"name\":\"AVECtoONUS\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_trueFalse\",\"type\":\"bool\"}],\"name\":\"AdminWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"propertyValue\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_trueFalse\",\"type\":\"bool\"}],\"name\":\"CEVAWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_trueFalse\",\"type\":\"bool\"}],\"name\":\"FounderDeveloperWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_trueFalse\",\"type\":\"bool\"}],\"name\":\"MemberWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"MemberAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensConverted\",\"type\":\"uint256\"}],\"name\":\"ONUStoAVEC\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"MemberAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensWithdrawn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"envelopeNumber\",\"type\":\"uint8\"}],\"name\":\"OnWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"property\",\"type\":\"bytes32\"}],\"name\":\"PropertyTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_propertyUniqueID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"propertyValue\",\"type\":\"uint256\"}],\"name\":\"PropertyValuation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_propertyUniqueID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_trueFalse\",\"type\":\"bool\"}],\"name\":\"PropertyWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_existcryptoaddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_existhooldingsaddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_techaddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_credibleyouaddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cevaaddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_whoaddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_whoarewardsaddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_whoamaintenanceaddress\",\"type\":\"address\"}],\"name\":\"adminGenesis\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminInitialSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_identifier\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"adminWhitelistAdministrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_identifier\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"adminWhitelistCEVA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_bytes32\",\"type\":\"bytes32\"}],\"name\":\"bytes32ToString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_propertyValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOfTokens\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_clearFrom\",\"type\":\"address\"}],\"name\":\"cevaClearTitle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ownerAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_propertyUniqueId\",\"type\":\"bytes32\"}],\"name\":\"cevaPropertyId\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ownerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_propertyValue\",\"type\":\"uint256\"}],\"name\":\"cevaUpdatePropertyValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ownerAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_trueFalse\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"_burnrequestUniqueID\",\"type\":\"bytes32\"}],\"name\":\"cevaWhitelistBurnRequest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_identifier\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"cevaWhitelistFounderDeveloper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ownerAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_trueFalse\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"_mintingRequestUniqueid\",\"type\":\"bytes32\"}],\"name\":\"cevaWhitelistMintRequest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ownerAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_trueFalse\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"_propertyUniqueID\",\"type\":\"bytes32\"}],\"name\":\"cevaWhitelistProperty\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_identifier\",\"type\":\"address\"}],\"name\":\"checkAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_propertyUniqueID\",\"type\":\"bytes32\"}],\"name\":\"checkAvailableAVEC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"checkBurnRequestIDOf\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_identifier\",\"type\":\"address\"}],\"name\":\"checkCEVA\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_customerAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_envelopeNumber\",\"type\":\"uint8\"}],\"name\":\"checkDividendsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_identifier\",\"type\":\"address\"}],\"name\":\"checkFounderDeveloper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkGlobalFeeLedger\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_identifier\",\"type\":\"address\"}],\"name\":\"checkMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"checkMintIDOf\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_propertyUniqueID\",\"type\":\"bytes32\"}],\"name\":\"checkPropertyBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"checkPropertyIDOf\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_propertyUniqueID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_memberWalletAddress\",\"type\":\"address\"}],\"name\":\"checkPropertyLastKnownValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_propertyUniqueID\",\"type\":\"bytes32\"}],\"name\":\"checkPropertyOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ownerAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_propertyUniqueID\",\"type\":\"bytes32\"}],\"name\":\"checkPropertyValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_customerAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_envelopeNumber\",\"type\":\"uint8\"}],\"name\":\"checkShareHoldOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ownerAddress\",\"type\":\"address\"}],\"name\":\"checkTransferingPropertyID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ownerAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_propertyUniqueID\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_propertyValue\",\"type\":\"uint256\"}],\"name\":\"founderDeveloperBurnRequestId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_founderDeveloperFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_toAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_holdOne\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_holdTwo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_holdThree\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_propertyValue\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_propertyUniqueID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_mintingRequestUniqueid\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"_globalReplacement\",\"type\":\"bool\"}],\"name\":\"founderDeveloperMintAVEC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ownerAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_mintingRequestUniqueid\",\"type\":\"bytes32\"}],\"name\":\"founderDeveloperMintingRequest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ownerAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_propertyUniqueId\",\"type\":\"bytes32\"}],\"name\":\"founderDeveloperPropertyId\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_identifier\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"founderDeveloperWhitelistMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_founderDeveloperOne\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_founderDeveloperTwo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ceva\",\"type\":\"address\"}],\"name\":\"memberBuyFounderDeveloperLicense\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"memberConvertAVECtoONUS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"memberConvertONUSintoAVEC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_envelopeNumber\",\"type\":\"uint8\"}],\"name\":\"memberSellFeeSharehold\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holderAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_propertyUniqueId\",\"type\":\"bytes32\"}],\"name\":\"memberUpdateRollingPropertyValue\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_envelopeNumber\",\"type\":\"uint8\"}],\"name\":\"memberWithdrawDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"source\",\"type\":\"string\"}],\"name\":\"stringToBytes32\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"result\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_propertyUniqueID\",\"type\":\"bytes32\"}],\"name\":\"swapAVEC\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapOMNI\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapONUS\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensNoDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AVEC","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://baeb68d0c363465c4a8603d456541967ca6f9fabccfff26b769eeb3192d4dc54"}]}