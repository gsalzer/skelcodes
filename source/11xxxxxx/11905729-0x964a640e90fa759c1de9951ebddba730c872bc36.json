{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [\r\n      \":@openzeppelin/=/home/ubuntu/flex-saving/node_modules/@openzeppelin/\"\r\n    ],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"/home/ubuntu/flex-saving/node_modules/@openzeppelin/contracts/math/Math.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\r\n      \"keccak256\": \"0x4b5aa451e4e8801478708f94b118a7821c0500d676255eaf89fc78c14856ce4e\"\r\n    },\r\n    \"/home/ubuntu/flex-saving/node_modules/@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\r\n      \"keccak256\": \"0x640b6dee7a4b830bdfd52b5031a07fc2b12209f5b2e29e5d364a7d37f69d8076\"\r\n    },\r\n    \"/home/ubuntu/flex-saving/node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\r\n      \"keccak256\": \"0xe5bb0f57cff3e299f360052ba50f1ea0fff046df2be070b6943e0e3c3fdad8a9\"\r\n    },\r\n    \"/home/ubuntu/flex-saving/node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\r\n      \"keccak256\": \"0x6f2c9955d65c522b80f4b8792f076512d2df947d2112cbc4d98a4781ed42ede2\"\r\n    },\r\n    \"/home/ubuntu/flex-saving/node_modules/@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.5;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following \\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-call-value\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\",\r\n      \"keccak256\": \"0x1a8e5072509c5ea7365eb1d48030b9be865140c8fb779968da0a459a0e174a11\"\r\n    },\r\n    \"contracts/interfaces/IController.sol\": {\r\n      \"content\": \"pragma solidity 0.5.15;\\n\\ninterface IController {\\n    function vaults(address) external view returns (address);\\n    function withdraw(address, uint) external;\\n    function balanceOf(address) external view returns (uint);\\n    function underlyingBalanceOf(address) external view returns (uint);\\n    function earn(address, uint) external;\\n    function rewards() external view returns (address);\\n    function belRewards() external view returns (address);\\n    function paused() external view returns (bool);\\n}\",\r\n      \"keccak256\": \"0xad950e509170398a0384bb32c6e0cbae87cda188acb8f7e8c104f1c83494564e\"\r\n    },\r\n    \"contracts/interfaces/ICrvDeposit.sol\": {\r\n      \"content\": \"pragma solidity 0.5.15;\\n\\ninterface ICrvDeposit{\\n    function deposit(uint256) external;\\n    function withdraw(uint256) external;\\n    function balanceOf(address) external view returns (uint256);\\n    // function claimable_tokens(address) external view returns (uint256);\\n}\\n\",\r\n      \"keccak256\": \"0x77c897ce92524f0a0f366ddb6406d46bba985e28016c021c337a623d9dc4b79e\"\r\n    },\r\n    \"contracts/interfaces/ICrvMinter.sol\": {\r\n      \"content\": \"pragma solidity 0.5.15;\\n\\ninterface ICrvMinter{\\n    function mint(address) external;\\n}\",\r\n      \"keccak256\": \"0xb8518ec6e75441ed50a3aa9122abca9685071968a860704b1a42aa79901d357c\"\r\n    },\r\n    \"contracts/interfaces/ICrvPool.sol\": {\r\n      \"content\": \"pragma solidity 0.5.15;\\n\\n// only for 3 token pools\\n// checked for 3pool\\ninterface ICrvPool {\\n    function add_liquidity(uint256[3] calldata amounts, uint256 min_mint_amount) external;\\n    function remove_liquidity_one_coin(uint256 _token_amount, int128 i, uint256 min_amount) external;\\n    function exchange(int128 i, int128 j, uint256 dx, uint256 min_dy) external;\\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i) external view returns (uint256);\\n    function get_virtual_price() external view returns (uint256);\\n}\\n\\ninterface ICrvPool2Coins {\\n    function add_liquidity(uint256[2] calldata amounts, uint256 min_mint_amount) external;\\n    function remove_liquidity_one_coin(uint256 _token_amount, int128 i, uint256 min_amount) external;\\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i) external view returns (uint256);\\n    function get_virtual_price() external view returns (uint256);\\n}\",\r\n      \"keccak256\": \"0x07a9b08391710e6aad0904a02a9c6bd4000c335b4eb6b28a33ec91c63e23b17c\"\r\n    },\r\n    \"contracts/interfaces/IUniswapRouter.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.15;\\n\\ninterface IUniswapRouter {\\n    function swapExactTokensForTokens(uint, uint, address[] calldata, address, uint) external;\\n}\",\r\n      \"keccak256\": \"0x12139b880e43c110a1bb9d2d0fce250aa0bf1b30eb0e6600cee849c756b4971e\"\r\n    },\r\n    \"contracts/interfaces/IVotingEscrow.sol\": {\r\n      \"content\": \"pragma solidity 0.5.15;\\n\\ninterface IVotingEscrow {\\n    function create_lock(uint256 _value, uint256 _unlock_time) external;\\n    function increase_amount(uint256 _value) external;\\n    function increase_unlock_time(uint256 _unlock_time) external;\\n    function withdraw() external;\\n}\",\r\n      \"keccak256\": \"0x8ea0a358da77f28621fc563f4cafb59c2d161d8fe61a00471176b47414125219\"\r\n    },\r\n    \"contracts/libraries/Ownable.sol\": {\r\n      \"content\": \"pragma solidity 0.5.15;\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n */\\ncontract Ownable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev The Ownable constructor sets the original `owner` of the contract to the a\\n     * specified account.\\n     * @param initalOwner The address of the inital owner.\\n     */\\n    constructor(address initalOwner) internal {\\n        _owner = initalOwner;\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    /**\\n     * @return the address of the owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Only owner can call\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @return true if `msg.sender` is the owner of the contract.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return msg.sender == _owner;\\n    }\\n\\n    /**\\n     * @dev Allows the current owner to relinquish control of the contract.\\n     * It will not be possible to call the functions with the `onlyOwner`\\n     * modifier anymore.\\n     * @notice Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n     * @param newOwner The address to transfer ownership to.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers control of the contract to a newOwner.\\n     * @param newOwner The address to transfer ownership to.\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Owner should not be 0 address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\r\n      \"keccak256\": \"0x0639cc4627faf63fb3d277be7487ffb76482ebdffbece437a97c171c74894e86\"\r\n    },\r\n    \"contracts/strategy/CrvLocker.sol\": {\r\n      \"content\": \"pragma solidity 0.5.15;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../libraries/Ownable.sol\\\";\\nimport \\\"../interfaces/IVotingEscrow.sol\\\";\\n\\n/**\\n* @title CrvLocker\\n* @dev Inherit this contract to gain functionalities to interact with curve's voting_escrow\\n*/\\ncontract CrvLocker is Ownable {\\n\\n    constructor(address owner) public Ownable(owner) {}\\n\\n    address constant public voting_escrow = address(0x5f3b5DfEb7B28CDbD7FAba78963EE202a494e2A2);\\n    IERC20 constant public crv = IERC20(0xD533a949740bb3306d119CC777fa900bA034cd52);\\n\\n    /**\\n     * @dev Lock CRV to enhance CRV rewards\\n     * @param amount amount of CRV to lock\\n     * @param unlockTime unix timestamp to unlock\\n     */\\n    function lock_crv(uint256 amount, uint256 unlockTime) external onlyOwner {\\n        crv.approve(voting_escrow, 0);\\n        crv.approve(voting_escrow, amount);\\n        IVotingEscrow(voting_escrow).create_lock(amount, unlockTime);\\n    }\\n\\n    /**\\n     * @dev Withdraw locked CRV after the unlock time\\n     */\\n    function withdraw_crv() external onlyOwner {\\n        IVotingEscrow(voting_escrow).withdraw();\\n    }\\n\\n    /**\\n     * @dev Increase CRV locking amount\\n     * @param amount amount of CRV to increase\\n     */\\n    function increase_crv_amount(uint256 amount) external onlyOwner {\\n        crv.approve(voting_escrow, 0);\\n        crv.approve(voting_escrow, amount);\\n        IVotingEscrow(voting_escrow).increase_amount(amount);\\n    }\\n\\n    /**\\n     * @dev Increase CRV locking time\\n     * @param unlockTime new CRV locking time\\n     */\\n    function increase_crv_unlock_time(uint256 unlockTime) external onlyOwner {\\n        IVotingEscrow(voting_escrow).increase_unlock_time(unlockTime);\\n    }\\n}\",\r\n      \"keccak256\": \"0x456701017cbd4220371826114d338b4e2117a6d79206c133f9f902c3b2eea4e2\"\r\n    },\r\n    \"contracts/strategy/StrategyWbtc.sol\": {\r\n      \"content\": \"pragma solidity 0.5.15;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"../interfaces/ICrvDeposit.sol\\\";\\nimport \\\"../interfaces/ICrvMinter.sol\\\";\\nimport \\\"../interfaces/ICrvPool.sol\\\";\\nimport \\\"../interfaces/IController.sol\\\";\\nimport \\\"../interfaces/IUniswapRouter.sol\\\";\\nimport \\\"./CrvLocker.sol\\\";\\n\\n/*\\n\\n A strategy must implement the following calls;\\n \\n - deposit()\\n - withdraw(address) must exclude any tokens used in the yield - Controller role - withdraw should return to Controller\\n - withdraw(uint) - Controller | Vault role - withdraw should always return to vault\\n - withdrawAll() - Controller | Vault role - withdraw should always return to vault\\n - balanceOf()\\n \\n Where possible, strategies must remain as immutable as possible, instead of updating variables, we update the contract by linking it in the controller\\n \\n*/\\n\\ncontract StrategyWbtc is CrvLocker {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    // TODO: change want according to wBTC/hBTC\\n    // HBTC 0x0316EB71485b0Ab14103307bf65a021042c6d380\\n    // WBTC 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599\\n    address constant public want = address(0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599); // wBTC\\n    address constant public hBTCPool = address(0x4CA9b3063Ec5866A4B82E437059D2C43d1be596F); // hBTC Pool\\n    address constant public hBTCGauge = address(0x4c18E409Dc8619bFb6a1cB56D114C3f592E0aE79); // hBTC gauge\\n    address constant public hCrv = address(0xb19059ebb43466C323583928285a49f558E572Fd); // hCrv\\n    address constant public bella = address(0xA91ac63D040dEB1b7A5E4d4134aD23eb0ba07e14);\\n    address constant public weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\n    address constant public output = address(0xD533a949740bb3306d119CC777fa900bA034cd52); // CRV   \\n    address constant public unirouter = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n    address constant public crv_minter = address(0xd061D61a4d941c39E5453435B6345Dc261C2fcE0);\\n    address constant public wBTC = address(0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599); // wBTC (used to convert from crv to hCrv)\\n\\n    uint256 constant public TO_HCRV_DECIMALS = 1e10; // 1e18 hCrv / 1e8 wbtc\\n\\n    // 0 = hBTC, 1 = wBTC in hBTC pool\\n    enum TokenIndexInHBTCPool {HBTC, WBTC}\\n    uint56 constant tokenIndexHBTCPool = uint56(TokenIndexInHBTCPool.WBTC); // TODO: change according to hBTC/wBTC\\n    uint56 constant tokenIndexWBTC = uint56(TokenIndexInHBTCPool.WBTC);\\n\\n    address public governance;\\n    address public controller;\\n\\n    uint256 public toWant = 92; // 20% manager fee + 80%*90%\\n    uint256 public toBella = 8;\\n    uint256 public manageFee = 22; //92%*22% = 20%\\n\\n    uint256 public burnPercent = 50;\\n    uint256 public distributionPercent = 50;\\n    address public burnAddress = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\n\\n    // withdrawSome withdraw a bit more to compensate the imbalanced asset, 10000=1\\n    uint256 public withdrawCompensation = 30;\\n\\n    address[] public swap2BellaRouting;\\n    address[] public swap2WBTCRouting;\\n    \\n    constructor(address _controller, address _governance) public CrvLocker(_governance) {\\n        governance = _governance;\\n        controller = _controller;\\n        swap2BellaRouting = [output, weth, bella];\\n        swap2WBTCRouting = [output, weth, wBTC];\\n        doApprove();\\n    }\\n\\n    function doApprove () public {\\n\\n        // crv -> want\\n        IERC20(crv).safeApprove(unirouter, 0);\\n        IERC20(crv).safeApprove(unirouter, uint(-1)); \\n\\n        // wBTC/hBTC -> hBTC Pool\\n        IERC20(want).safeApprove(hBTCPool, 0);\\n        IERC20(want).safeApprove(hBTCPool, uint(-1));\\n\\n        // hCrv -> hBTC gauge\\n        IERC20(hCrv).safeApprove(hBTCGauge, 0);\\n        IERC20(hCrv).safeApprove(hBTCGauge, uint(-1));      \\n\\n    }\\n    \\n    function deposit() public {\\n        require((msg.sender == governance || \\n            (msg.sender == tx.origin) ||\\n            (msg.sender == controller)),\\\"!contract\\\");\\n\\n        /// wBTC/hBTC -> hBTC pool\\n        uint256[2] memory amounts = wrapCoinAmount(IERC20(want).balanceOf(address(this)), tokenIndexHBTCPool);\\n        ICrvPool2Coins(hBTCPool).add_liquidity(amounts, 0);\\n\\n        /// hBTC pool -> gauge\\n        invest(hBTCGauge, IERC20(hCrv).balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @dev Deposit XCurve into XCurve gauge\\n     */\\n    function invest(address gauge, uint256 amount) internal {\\n\\n        ICrvDeposit(gauge).deposit(amount);\\n\\n    }\\n\\n    /**\\n     * @dev Get CRV rewards\\n     */\\n    function harvest(address gauge) public {\\n        require(msg.sender == tx.origin ,\\\"!contract\\\");\\n\\n        ICrvMinter(crv_minter).mint(gauge);\\n\\n        uint256 crvToWBTC = crv.balanceOf(address(this)).mul(toWant).div(100);\\n\\n        if (crvToWBTC == 0)\\n            return;\\n\\n        uint256 bWantBefore = IERC20(wBTC).balanceOf(address(this));\\n\\n        IUniswapRouter(unirouter).swapExactTokensForTokens(\\n            crvToWBTC, 1, swap2WBTCRouting, address(this), block.timestamp\\n        );\\n\\n        uint256 bWantAfter = IERC20(wBTC).balanceOf(address(this));\\n\\n        uint256 fee = bWantAfter.sub(bWantBefore).mul(manageFee).div(100);\\n        IERC20(want).safeTransfer(IController(controller).rewards(), fee);\\n\\n        if (toBella != 0) {\\n            uint256 crvBalance = crv.balanceOf(address(this));\\n            IUniswapRouter(unirouter).swapExactTokensForTokens(\\n                crvBalance, 1, swap2BellaRouting, address(this), block.timestamp\\n            );\\n            splitBella();\\n        }\\n\\n        depositWbtc();\\n\\n    }\\n\\n    /**\\n     * @dev wBTC -> hCrv -> hCrv gauge\\n     */\\n    function depositWbtc() internal {\\n        /// wBTC -> hCrv  Pool\\n        uint256[2] memory amounts = wrapCoinAmount(IERC20(wBTC).balanceOf(address(this)), tokenIndexWBTC);\\n        ICrvPool2Coins(hBTCPool).add_liquidity(amounts, 0);\\n\\n        /// hCrv -> gauge\\n        invest(hBTCGauge, IERC20(hCrv).balanceOf(address(this)));\\n    }\\n\\n    function splitBella() internal {\\n        uint bellaBalance = IERC20(bella).balanceOf(address(this));\\n\\n        uint burn = bellaBalance.mul(burnPercent).div(100);\\n        uint distribution = bellaBalance.mul(distributionPercent).div(100);\\n        \\n        IERC20(bella).safeTransfer(IController(controller).belRewards(), distribution);\\n        IERC20(bella).safeTransfer(burnAddress, burn); \\n    }\\n    \\n    // Controller only function for creating additional rewards from dust\\n    function withdraw(IERC20 _asset) external returns (uint balance) {\\n        require(msg.sender == controller, \\\"!controller\\\");\\n        require(address(_asset) != address(hCrv), \\\"!hCrv\\\");\\n        require(address(_asset) != address(want), \\\"!want\\\");\\n        require(address(_asset) != address(crv), \\\"!crv\\\");\\n        balance = _asset.balanceOf(address(this));\\n        _asset.safeTransfer(controller, balance);\\n    }\\n    \\n    // Withdraw partial funds, normally used with a vault withdrawal\\n    function withdraw(uint _amount) external {\\n        require(msg.sender == controller, \\\"!controller\\\");\\n        uint _balance = IERC20(want).balanceOf(address(this));\\n        if (_balance < _amount) {\\n            _amount = _withdrawSome(_amount.sub(_balance));\\n            _amount = _amount.add(_balance);\\n        }\\n        address _vault = IController(controller).vaults(address(want));\\n        require(_vault != address(0), \\\"!vault\\\"); // additional protection so we don't burn the funds\\n        IERC20(want).safeTransfer(_vault, _amount);\\n    }\\n    \\n    // Withdraw all funds, normally used when migrating strategies\\n    function withdrawAll() external returns (uint balance) {\\n        require(msg.sender == controller, \\\"!controller\\\");\\n        _withdrawAll();\\n        balance = IERC20(want).balanceOf(address(this));\\n        address _vault = IController(controller).vaults(address(want));\\n        require(_vault != address(0), \\\"!vault\\\"); // additional protection so we don't burn the funds\\n        IERC20(want).safeTransfer(_vault, balance);\\n    }\\n    \\n    function _withdrawAll() internal {\\n        // withdraw hBTC pool crv from gauge\\n        uint256 amount = ICrvDeposit(hBTCGauge).balanceOf(address(this));\\n        _withdrawXCurve(hBTCGauge, amount);\\n        \\n        // exchange xcrv from pool to say dai \\n        ICrvPool2Coins(hBTCPool).remove_liquidity_one_coin(amount, tokenIndexHBTCPool, 1);\\n    }\\n    \\n    function _withdrawSome(uint256 _amount) internal returns (uint) {\\n        // withdraw hBTC pool crv from gauge\\n        uint256 amount = _amount.mul(1e18).div(ICrvPool2Coins(hBTCPool).get_virtual_price())\\n            .mul(TO_HCRV_DECIMALS)\\n            .mul(10000 + withdrawCompensation).div(10000);\\n        amount = _withdrawXCurve(hBTCGauge, amount);\\n\\n        uint256 bBefore = IERC20(want).balanceOf(address(this));\\n\\n        ICrvPool2Coins(hBTCPool).remove_liquidity_one_coin(amount, tokenIndexHBTCPool, 1);\\n\\n        uint256 bAfter = IERC20(want).balanceOf(address(this));\\n\\n        return bAfter.sub(bBefore);\\n    }\\n\\n    /**\\n     * @dev Internal function to withdraw yCurve, handle the case when withdraw amount exceeds the buffer\\n     * @param gauge Gauge address (hBTC pool, busd, usdt)\\n     * @param amount Amount of yCurve to withdraw\\n     */\\n    function _withdrawXCurve(address gauge, uint256 amount) internal returns (uint256) {\\n        uint256 a = Math.min(ICrvDeposit(gauge).balanceOf(address(this)), amount);\\n        ICrvDeposit(gauge).withdraw(a);\\n        return a;\\n    }\\n    \\n    function balanceOf() public view returns (uint) {\\n        return IERC20(want).balanceOf(address(this))\\n                .add(balanceInPool());\\n    }\\n    \\n    function underlyingBalanceOf() public view returns (uint) {\\n        return IERC20(want).balanceOf(address(this))\\n                .add(underlyingBalanceInPool());\\n    }\\n\\n    function balanceInPool() public view returns (uint256) {\\n        return ICrvDeposit(hBTCGauge).balanceOf(address(this))\\n            .mul(ICrvPool2Coins(hBTCPool).get_virtual_price()).div(1e18)\\n            .div(TO_HCRV_DECIMALS);\\n    }\\n\\n    function underlyingBalanceInPool() public view returns (uint256) {\\n        uint balance = ICrvDeposit(hBTCGauge).balanceOf(address(this));\\n        if (balance == 0) {\\n            return 0;\\n        }\\n        uint balanceVirtual = balance.mul(ICrvPool2Coins(hBTCPool).get_virtual_price()).div(1e18).div(TO_HCRV_DECIMALS);\\n        uint balanceUnderlying = ICrvPool2Coins(hBTCPool).calc_withdraw_one_coin(balance, tokenIndexHBTCPool);\\n        return Math.min(balanceVirtual, balanceUnderlying);\\n    }\\n\\n    function setGovernance(address _governance) external {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        governance = _governance;\\n    }\\n    \\n    function setController(address _controller) external {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        controller = _controller;\\n    }\\n\\n    function changeManageFee(uint256 newManageFee) external {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        require(newManageFee <= 100, \\\"must less than 100%!\\\");\\n        manageFee = newManageFee;\\n    }\\n\\n    function changeBelWantRatio(uint256 newToBella, uint256 newToWant) external {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        require(newToBella.add(newToWant) == 100, \\\"must divide all the pool\\\");\\n        toBella = newToBella;\\n        toWant = newToWant;\\n    }\\n\\n    function setDistributionAndBurnRatio(uint256 newDistributionPercent, uint256 newBurnPercent) external{\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        require(newDistributionPercent.add(newBurnPercent) == 100, \\\"must be 100% total\\\");\\n        distributionPercent = newDistributionPercent;\\n        burnPercent = newBurnPercent;\\n    }\\n\\n    function setBurnAddress(address _burnAddress) public{\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        require(_burnAddress != address(0), \\\"cannot send bella to 0 address\\\");\\n        burnAddress = _burnAddress;\\n    }\\n\\n    function setWithdrawCompensation(uint256 _withdrawCompensation) public {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        require(_withdrawCompensation <= 100, \\\"too much compensation\\\");\\n        withdrawCompensation = _withdrawCompensation;\\n    }\\n\\n    /**\\n    * @dev Wraps the coin amount in the array for interacting with the Curve protocol\\n    */\\n    function wrapCoinAmount(uint256 amount, uint56 index) internal pure returns (uint256[2] memory) {\\n        uint256[2] memory amounts = [uint256(0), uint256(0)];\\n        amounts[index] = amount;\\n        return amounts;\\n    }\\n\\n}\",\r\n      \"keccak256\": \"0x3fa5d6dcf4244dcedd39ab995eb8610cc64201dab7468ef6caa76b5f16e2dca5\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"TO_HCRV_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceInPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bella\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burnPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newToBella\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newToWant\",\"type\":\"uint256\"}],\"name\":\"changeBelWantRatio\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newManageFee\",\"type\":\"uint256\"}],\"name\":\"changeManageFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crv\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crv_minter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distributionPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"doApprove\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hBTCGauge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hBTCPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hCrv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"}],\"name\":\"harvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"increase_crv_amount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"name\":\"increase_crv_unlock_time\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"name\":\"lock_crv\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manageFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"output\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_burnAddress\",\"type\":\"address\"}],\"name\":\"setBurnAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDistributionPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newBurnPercent\",\"type\":\"uint256\"}],\"name\":\"setDistributionAndBurnRatio\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawCompensation\",\"type\":\"uint256\"}],\"name\":\"setWithdrawCompensation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"swap2BellaRouting\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"swap2WBTCRouting\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"toBella\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"toWant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"underlyingBalanceInPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"underlyingBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unirouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"voting_escrow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wBTC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawCompensation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw_crv\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StrategyWbtc","CompilerVersion":"v0.5.15+commit.6a57276f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000d8c5344e331d5f4161f03726870ce9da8b504d2a00000000000000000000000010f919f874db00239a1f891d96279ff999514b82","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":""}]}