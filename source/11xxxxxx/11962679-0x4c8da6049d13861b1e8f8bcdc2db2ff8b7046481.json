{"status":"1","message":"OK","result":[{"SourceCode":"//SPDX-License-Identifier: 0BSD\r\n\r\npragma solidity ^0.8.1;\r\n\r\ninterface IERC20 {\r\n    \r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address) external view returns (uint);\r\n    function allowance(address, address) external view returns (uint);\r\n    function transfer(address, uint) external returns (bool);\r\n    function approve(address, uint) external returns (bool);\r\n    function transferFrom(address, address, uint) external returns (bool);\r\n    \r\n}\r\n\r\ncontract MerkleDroppers {\r\n    \r\n    mapping(uint => uint) redeemed;\r\n    mapping(uint => uint) redeemed2;\r\n    bytes32 rootHash = 0x9bc1f94f838eba372fa3057e1e62c1ca9d5b41a097ae6fb60ca4517a0be70c23;\r\n    bytes32 rootHash2 = 0x0;\r\n    address owner;\r\n    \r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    function changeOwner(address newOwner) public {\r\n        require(msg.sender == owner);\r\n        owner = newOwner;\r\n    }\r\n    \r\n    function changeRootHash(bytes32 newRootHash) public {\r\n        require(msg.sender == owner);\r\n        rootHash2 = newRootHash;\r\n    }\r\n    \r\n    function redeem(uint256 index, address recipient, uint256 amount, bytes32[] memory merkleProof) public {\r\n        require(redeemed[index] == 0, \"already redeemed\");\r\n        redeemed[index] = 1;\r\n        bytes32 node = keccak256(abi.encode(index, recipient, amount));\r\n        uint256 path = index;\r\n        for (uint16 i = 0; i < merkleProof.length; i++) {\r\n            if ((path & 0x01) == 1) {\r\n                node = keccak256(abi.encode(merkleProof[i], node));\r\n            } else {\r\n                node = keccak256(abi.encode(node, merkleProof[i]));\r\n            }\r\n            path /= 2;\r\n        }\r\n        require(node == rootHash, \"invalid parameters\");\r\n        IERC20(0x2De27D3432d3188b53B02137E07B47896D347D45).transferFrom(0x6CBE9E9e7A4FBbB0AafB065dAE308633c19D1c6D, recipient, amount);\r\n    }\r\n    \r\n    function redeem2(uint256 index, address recipient, uint256 amount, bytes32[] memory merkleProof) public {\r\n        require(redeemed2[index] == 0, \"already redeemed\");\r\n        redeemed2[index] = 1;\r\n        bytes32 node = keccak256(abi.encode(index, recipient, amount));\r\n        uint256 path = index;\r\n        for (uint16 i = 0; i < merkleProof.length; i++) {\r\n            if ((path & 0x01) == 1) {\r\n                node = keccak256(abi.encode(merkleProof[i], node));\r\n            } else {\r\n                node = keccak256(abi.encode(node, merkleProof[i]));\r\n            }\r\n            path /= 2;\r\n        }\r\n        require(node == rootHash2, \"invalid parameters\");\r\n        IERC20(0x2De27D3432d3188b53B02137E07B47896D347D45).transferFrom(0xcc984caE87bC0F744c65ddB579e73F76256F89B2, recipient, amount);\r\n    }\r\n    \r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"newRootHash\",\"type\":\"bytes32\"}],\"name\":\"changeRootHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"redeem2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MerkleDroppers","CompilerVersion":"v0.8.1+commit.df193b15","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"BSD-3-Clause","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b2ea1b51e9e4fa1b7441f4f183a3800e889c082232c0adfb1f685e27042a8017"}]}