{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"./contracts/staking/RewardCampaign.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.5.16;\\n\\npragma experimental ABIEncoderV2;\\n\\nimport {Ownable} from \\\"../lib/Ownable.sol\\\";\\nimport {SafeMath} from \\\"../lib/SafeMath.sol\\\";\\nimport {SafeERC20} from \\\"../lib/SafeERC20.sol\\\";\\nimport {Decimal} from \\\"../lib/Decimal.sol\\\";\\nimport {Adminable} from \\\"../lib/Adminable.sol\\\";\\n\\nimport {IERC20} from \\\"../token/IERC20.sol\\\";\\n\\nimport {IKYFV2} from \\\"../global/IKYFV2.sol\\\";\\n\\nimport {IMozartCoreV1} from \\\"../debt/mozart/IMozartCoreV1.sol\\\";\\nimport {MozartTypes} from \\\"../debt/mozart/MozartTypes.sol\\\";\\n\\ncontract RewardCampaign is Adminable {\\n\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    /* ========== Structs ========== */\\n\\n    struct Staker {\\n        uint256 positionId;\\n        uint256 debtSnapshot;\\n        uint256 balance;\\n        uint256 rewardPerTokenStored;\\n        uint256 rewardPerTokenPaid;\\n        uint256 rewardsEarned;\\n        uint256 rewardsReleased;\\n    }\\n\\n    /* ========== Variables ========== */\\n\\n    IERC20 public rewardsToken;\\n    IERC20 public stakingToken;\\n\\n    IMozartCoreV1 public stateContract;\\n\\n    address public arcDAO;\\n    address public rewardsDistributor;\\n\\n    mapping (address => Staker) public stakers;\\n\\n    uint256 public periodFinish = 0;\\n    uint256 public rewardRate = 0;\\n    uint256 public rewardsDuration = 7 days;\\n    uint256 public lastUpdateTime;\\n    uint256 public rewardPerTokenStored;\\n\\n    Decimal.D256 public daoAllocation;\\n    Decimal.D256 public slasherCut;\\n\\n    uint256 public hardCap;\\n    uint256 public vestingEndDate;\\n    uint256 public debtToStake;\\n\\n    bool public tokensClaimable;\\n\\n    uint256 private _totalSupply;\\n\\n    mapping (address => bool) public kyfInstances;\\n\\n    address[] public kyfInstancesArray;\\n\\n    /* ========== Events ========== */\\n\\n    event RewardAdded (uint256 reward);\\n\\n    event Staked(address indexed user, uint256 amount);\\n\\n    event Withdrawn(address indexed user, uint256 amount);\\n\\n    event RewardPaid(address indexed user, uint256 reward);\\n\\n    event RewardsDurationUpdated(uint256 newDuration);\\n\\n    event Recovered(address token, uint256 amount);\\n\\n    event HardCapSet(uint256 _cap);\\n\\n    event KyfStatusUpdated(address _address, bool _status);\\n\\n    event PositionStaked(address _address, uint256 _positionId);\\n\\n    event ClaimableStatusUpdated(bool _status);\\n\\n    event UserSlashed(address _user, address _slasher, uint256 _amount);\\n\\n    /* ========== Modifiers ========== */\\n\\n    modifier updateReward(address account) {\\n        rewardPerTokenStored = actualRewardPerToken();\\n        lastUpdateTime = lastTimeRewardApplicable();\\n\\n        if (account != address(0)) {\\n            stakers[account].rewardsEarned = actualEarned(account);\\n            stakers[account].rewardPerTokenPaid = rewardPerTokenStored;\\n        }\\n        _;\\n    }\\n\\n    modifier onlyRewardsDistributor() {\\n        require(\\n            msg.sender == rewardsDistributor,\\n            \\\"Caller is not RewardsDistribution contract\\\"\\n        );\\n        _;\\n    }\\n\\n    /* ========== Admin Functions ========== */\\n\\n    function setRewardsDistributor(\\n        address _rewardsDistributor\\n    )\\n        external\\n        onlyAdmin\\n    {\\n        rewardsDistributor = _rewardsDistributor;\\n    }\\n\\n    function setRewardsDuration(\\n        uint256 _rewardsDuration\\n    )\\n        external\\n        onlyAdmin\\n    {\\n        require(\\n            periodFinish == 0 || getCurrentTimestamp() > periodFinish,\\n            \\\"Prev period must be complete before changing duration for new period\\\"\\n        );\\n\\n        rewardsDuration = _rewardsDuration;\\n        emit RewardsDurationUpdated(rewardsDuration);\\n    }\\n\\n    function notifyRewardAmount(\\n        uint256 reward\\n    )\\n        external\\n        onlyRewardsDistributor\\n        updateReward(address(0))\\n    {\\n        if (getCurrentTimestamp() >= periodFinish) {\\n            rewardRate = reward.div(rewardsDuration);\\n        } else {\\n            uint256 remaining = periodFinish.sub(getCurrentTimestamp());\\n            uint256 leftover = remaining.mul(rewardRate);\\n            rewardRate = reward.add(leftover).div(rewardsDuration);\\n        }\\n\\n        // Ensure the provided reward amount is not more than the balance in the contract.\\n        // This keeps the reward rate in the right range, preventing overflows due to\\n        // very high values of rewardRate in the earned and rewardsPerToken functions;\\n        // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.\\n        uint balance = rewardsToken.balanceOf(address(this));\\n        require(\\n            rewardRate <= balance.div(rewardsDuration),\\n            \\\"Provided reward too high\\\"\\n        );\\n\\n        lastUpdateTime = getCurrentTimestamp();\\n        periodFinish = getCurrentTimestamp().add(rewardsDuration);\\n        emit RewardAdded(reward);\\n    }\\n\\n    function recoverERC20(\\n        address tokenAddress,\\n        uint256 tokenAmount\\n    )\\n        public\\n        onlyAdmin\\n    {\\n        // Cannot recover the staking token or the rewards token\\n        require(\\n            tokenAddress != address(stakingToken) && tokenAddress != address(rewardsToken),\\n            \\\"Cannot withdraw the staking or rewards tokens\\\"\\n        );\\n\\n        IERC20(tokenAddress).safeTransfer(getAdmin(), tokenAmount);\\n        emit Recovered(tokenAddress, tokenAmount);\\n    }\\n\\n    function setTokensClaimable(\\n        bool _enabled\\n    )\\n        public\\n        onlyAdmin\\n    {\\n        tokensClaimable = _enabled;\\n\\n        emit ClaimableStatusUpdated(_enabled);\\n    }\\n\\n    function init(\\n        address _arcDAO,\\n        address _rewardsDistribution,\\n        address _rewardsToken,\\n        address _stakingToken,\\n        Decimal.D256 memory _daoAllocation,\\n        Decimal.D256 memory _slasherCut,\\n        address _stateContract,\\n        uint256 _vestingEndDate,\\n        uint256 _debtToStake,\\n        uint256 _hardCap\\n    )\\n        public\\n        onlyAdmin\\n    {\\n        arcDAO = _arcDAO;\\n        rewardsDistributor = _rewardsDistribution;\\n        rewardsToken = IERC20(_rewardsToken);\\n        stakingToken = IERC20(_stakingToken);\\n\\n        daoAllocation = _daoAllocation;\\n        slasherCut = _slasherCut;\\n        rewardsToken = IERC20(_rewardsToken);\\n        stateContract = IMozartCoreV1(_stateContract);\\n        vestingEndDate = _vestingEndDate;\\n        debtToStake = _debtToStake;\\n        hardCap = _hardCap;\\n    }\\n\\n    function setApprovedKYFInstance(\\n        address _kyfContract,\\n        bool _status\\n    )\\n        public\\n        onlyAdmin\\n    {\\n        if (_status == true) {\\n            kyfInstancesArray.push(_kyfContract);\\n            kyfInstances[_kyfContract] = true;\\n            emit KyfStatusUpdated(_kyfContract, true);\\n            return;\\n        }\\n\\n        // Remove the kyfContract from the kyfInstancesArray array.\\n        for (uint i = 0; i < kyfInstancesArray.length; i++) {\\n            if (address(kyfInstancesArray[i]) == _kyfContract) {\\n                delete kyfInstancesArray[i];\\n                kyfInstancesArray[i] = kyfInstancesArray[kyfInstancesArray.length - 1];\\n\\n                // Decrease the size of the array by one.\\n                kyfInstancesArray.length--;\\n                break;\\n            }\\n        }\\n\\n        // And remove it from the synths mapping\\n        delete kyfInstances[_kyfContract];\\n        emit KyfStatusUpdated(_kyfContract, false);\\n    }\\n\\n    /* ========== View Functions ========== */\\n\\n    function totalSupply()\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(\\n        address account\\n    )\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return stakers[account].balance;\\n    }\\n\\n    function lastTimeRewardApplicable()\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return getCurrentTimestamp() < periodFinish ? getCurrentTimestamp() : periodFinish;\\n    }\\n\\n    function actualRewardPerToken()\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (_totalSupply == 0) {\\n            return rewardPerTokenStored;\\n        }\\n\\n        return\\n            rewardPerTokenStored.add(\\n                lastTimeRewardApplicable()\\n                    .sub(lastUpdateTime)\\n                    .mul(rewardRate)\\n                    .mul(1e18)\\n                    .div(_totalSupply)\\n            );\\n    }\\n\\n    function rewardPerToken()\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        if (_totalSupply == 0) {\\n            return rewardPerTokenStored;\\n        }\\n\\n        // Since we're adding the stored amount we can't just multiply\\n        // the userAllocation() with the result of actualRewardPerToken()\\n        return\\n            rewardPerTokenStored.add(\\n                Decimal.mul(\\n                    lastTimeRewardApplicable()\\n                        .sub(lastUpdateTime)\\n                        .mul(rewardRate)\\n                        .mul(1e18)\\n                        .div(_totalSupply),\\n                    userAllocation()\\n                )\\n            );\\n    }\\n\\n    function actualEarned(\\n        address account\\n    )\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return stakers[account]\\n            .balance\\n            .mul(actualRewardPerToken().sub(stakers[account].rewardPerTokenPaid))\\n            .div(1e18)\\n            .add(stakers[account].rewardsEarned);\\n    }\\n\\n    function earned(\\n        address account\\n    )\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return Decimal.mul(\\n            actualEarned(account),\\n            userAllocation()\\n        );\\n    }\\n\\n    function getRewardForDuration()\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return rewardRate.mul(rewardsDuration);\\n    }\\n\\n    function getCurrentTimestamp()\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return block.timestamp;\\n    }\\n\\n    function isVerified(\\n        address _user\\n    )\\n        public\\n        view\\n        returns (bool)\\n    {\\n        for (uint256 i = 0; i < kyfInstancesArray.length; i++) {\\n            IKYFV2 kyfContract = IKYFV2(kyfInstancesArray[i]);\\n            if (kyfContract.checkVerified(_user) == true) {\\n                return true;\\n            }\\n        }\\n\\n        return false;\\n    }\\n\\n    function isMinter(\\n        address _user,\\n        uint256 _amount,\\n        uint256 _positionId\\n    )\\n        public\\n        view\\n        returns (bool)\\n    {\\n        MozartTypes.Position memory position = stateContract.getPosition(_positionId);\\n\\n        if (position.owner != _user) {\\n            return false;\\n        }\\n\\n        return uint256(position.borrowedAmount.value) >= _amount;\\n    }\\n\\n    function  userAllocation()\\n        public\\n        view\\n        returns (Decimal.D256 memory)\\n    {\\n        return Decimal.sub(\\n            Decimal.one(),\\n            daoAllocation.value\\n        );\\n    }\\n\\n    /* ========== Mutative Functions ========== */\\n\\n    function stake(\\n        uint256 amount,\\n        uint256 positionId\\n    )\\n        external\\n        updateReward(msg.sender)\\n    {\\n        uint256 totalBalance = balanceOf(msg.sender).add(amount);\\n\\n        require(\\n            totalBalance <= hardCap,\\n            \\\"Cannot stake more than the hard cap\\\"\\n        );\\n\\n        require(\\n            isVerified(msg.sender) == true,\\n            \\\"Must be KYF registered to participate\\\"\\n        );\\n\\n        // Setting each variable invididually means we don't overwrite\\n        Staker storage staker = stakers[msg.sender];\\n\\n        uint256 debtRequirement = totalBalance.div(debtToStake);\\n\\n        require(\\n            isMinter(msg.sender, debtRequirement, positionId),\\n            \\\"Must be a valid minter\\\"\\n        );\\n\\n        // This stops an attack vector where a user stakes a lot of money\\n        // then drops the debt requirement by staking less before the deadline\\n        // to reduce the amount of debt they need to lock in\\n\\n        require(\\n            debtRequirement >= staker.debtSnapshot,\\n            \\\"Your new debt requirement cannot be lower than last time\\\"\\n        );\\n\\n        staker.positionId = positionId;\\n        staker.debtSnapshot = debtRequirement;\\n        staker.balance = staker.balance.add(amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n\\n        stakingToken.safeTransferFrom(msg.sender, address(this), amount);\\n\\n        emit Staked(msg.sender, amount);\\n    }\\n\\n    function slash(\\n        address user\\n    )\\n        external\\n        updateReward(user)\\n    {\\n        require(\\n            user != msg.sender,\\n            \\\"You cannot slash yourself\\\"\\n        );\\n\\n        require(\\n            getCurrentTimestamp() < vestingEndDate,\\n            \\\"You cannot slash after the vesting end date\\\"\\n        );\\n\\n        Staker storage userStaker = stakers[user];\\n\\n        require(\\n            isMinter(user, userStaker.debtSnapshot, userStaker.positionId) == false,\\n            \\\"You can't slash a user who is a valid minter\\\"\\n        );\\n\\n        uint256 penalty = userStaker.rewardsEarned;\\n        uint256 bounty = Decimal.mul(penalty, slasherCut);\\n\\n        stakers[msg.sender].rewardsEarned = stakers[msg.sender].rewardsEarned.add(bounty);\\n        stakers[rewardsDistributor].rewardsEarned = stakers[rewardsDistributor].rewardsEarned.add(\\n            penalty.sub(bounty)\\n        );\\n\\n        userStaker.rewardsEarned = 0;\\n\\n        emit UserSlashed(user, msg.sender, penalty);\\n\\n    }\\n\\n    function getReward(address user)\\n        public\\n        updateReward(user)\\n    {\\n        require(\\n            tokensClaimable == true,\\n            \\\"Tokens cannnot be claimed yet\\\"\\n        );\\n\\n        if (getCurrentTimestamp() < periodFinish) {\\n            // If you try to claim your reward even once the tokens are claimable\\n            // and the reward period is finished you'll get nothing lol.\\n            return;\\n        }\\n\\n        Staker storage staker = stakers[user];\\n\\n        uint256 totalAmount = staker.rewardsEarned.sub(staker.rewardsReleased);\\n        uint256 payableAmount = totalAmount;\\n        uint256 duration = vestingEndDate.sub(periodFinish);\\n\\n        if (getCurrentTimestamp() < vestingEndDate) {\\n            payableAmount = totalAmount.mul(getCurrentTimestamp().sub(periodFinish)).div(duration);\\n        }\\n\\n        staker.rewardsReleased = staker.rewardsReleased.add(payableAmount);\\n\\n        uint256 daoPayable = Decimal.mul(payableAmount, daoAllocation);\\n\\n        rewardsToken.safeTransfer(arcDAO, daoPayable);\\n        rewardsToken.safeTransfer(user, payableAmount.sub(daoPayable));\\n\\n        emit RewardPaid(user, payableAmount);\\n    }\\n\\n    function withdraw(\\n        uint256 amount\\n    )\\n        public\\n        updateReward(msg.sender)\\n    {\\n        require(\\n            amount >= 0,\\n            \\\"Cannot withdraw less than 0\\\"\\n        );\\n\\n        _totalSupply = _totalSupply.sub(amount);\\n        stakers[msg.sender].balance = stakers[msg.sender].balance.sub(amount);\\n\\n        stakingToken.safeTransfer(msg.sender, amount);\\n\\n        emit Withdrawn(msg.sender, amount);\\n    }\\n\\n    function exit()\\n        public\\n    {\\n        getReward(msg.sender);\\n        withdraw(balanceOf(msg.sender));\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"./contracts/lib/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.5.16;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        _owner = msg.sender;\\n        emit OwnershipTransferred(address(0), msg.sender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/lib/SafeMath.sol\": {\r\n      \"content\": \"\\npragma solidity ^0.5.16;\\n\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        uint256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/lib/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.5.16;\\n\\nimport {IERC20} from \\\"../token/IERC20.sol\\\";\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary SafeERC20 {\\n    function safeApprove(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        /* solium-disable-next-line */\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(0x095ea7b3, to, value)\\n        );\\n\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"SafeERC20: APPROVE_FAILED\\\"\\n        );\\n    }\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        /* solium-disable-next-line */\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(0xa9059cbb, to, value)\\n        );\\n\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"SafeERC20: TRANSFER_FAILED\\\"\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        /* solium-disable-next-line */\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(\\n                0x23b872dd,\\n                from,\\n                to,\\n                value\\n            )\\n        );\\n\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"SafeERC20: TRANSFER_FROM_FAILED\\\"\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/token/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.5.16;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    )\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(\\n        address owner,\\n        address spender\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(\\n        address spender,\\n        uint256 amount\\n    )\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    )\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 value\\n    );\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\"\r\n    },\r\n    \"./contracts/lib/Decimal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.5.16;\\npragma experimental ABIEncoderV2;\\n\\nimport {SafeMath} from \\\"../lib/SafeMath.sol\\\";\\nimport {Math} from \\\"./Math.sol\\\";\\n\\n/**\\n * @title Decimal\\n *\\n * Library that defines a fixed-point number with 18 decimal places.\\n */\\nlibrary Decimal {\\n    using SafeMath for uint256;\\n\\n    // ============ Constants ============\\n\\n    uint256 constant BASE = 10**18;\\n\\n    // ============ Structs ============\\n\\n    struct D256 {\\n        uint256 value;\\n    }\\n\\n    // ============ Functions ============\\n\\n    function one()\\n        internal\\n        pure\\n        returns (D256 memory)\\n    {\\n        return D256({ value: BASE });\\n    }\\n\\n    function onePlus(\\n        D256 memory d\\n    )\\n        internal\\n        pure\\n        returns (D256 memory)\\n    {\\n        return D256({ value: d.value.add(BASE) });\\n    }\\n\\n    function mul(\\n        uint256 target,\\n        D256 memory d\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return Math.getPartial(target, d.value, BASE);\\n    }\\n\\n    function mul(\\n        D256 memory d1,\\n        D256 memory d2\\n    )\\n        internal\\n        pure\\n        returns (D256 memory)\\n    {\\n        return Decimal.D256({ value: Math.getPartial(d1.value, d2.value, BASE) });\\n    }\\n\\n    function div(\\n        uint256 target,\\n        D256 memory d\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return Math.getPartial(target, BASE, d.value);\\n    }\\n\\n    function add(\\n        D256 memory d,\\n        uint256 amount\\n    )\\n        internal\\n        pure\\n        returns (D256 memory)\\n    {\\n        return D256({ value: d.value.add(amount) });\\n    }\\n\\n    function sub(\\n        D256 memory d,\\n        uint256 amount\\n    )\\n        internal\\n        pure\\n        returns (D256 memory)\\n    {\\n        return D256({ value: d.value.sub(amount) });\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"./contracts/lib/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.5.16;\\npragma experimental ABIEncoderV2;\\n\\nimport {SafeMath} from \\\"./SafeMath.sol\\\";\\n\\n/**\\n * @title Math\\n *\\n * Library for non-standard Math functions\\n */\\nlibrary Math {\\n    using SafeMath for uint256;\\n\\n    // ============ Library Functions ============\\n\\n    /*\\n     * Return target * (numerator / denominator).\\n     */\\n    function getPartial(\\n        uint256 target,\\n        uint256 numerator,\\n        uint256 denominator\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return target.mul(numerator).div(denominator);\\n    }\\n\\n    function to128(\\n        uint256 number\\n    )\\n        internal\\n        pure\\n        returns (uint128)\\n    {\\n        uint128 result = uint128(number);\\n        require(\\n            result == number,\\n            \\\"Math: Unsafe cast to uint128\\\"\\n        );\\n        return result;\\n    }\\n\\n    function min(\\n        uint256 a,\\n        uint256 b\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return a < b ? a : b;\\n    }\\n\\n    function max(\\n        uint256 a,\\n        uint256 b\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return a > b ? a : b;\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/lib/Adminable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.5.16;\\npragma experimental ABIEncoderV2;\\n\\nimport { Storage } from \\\"./Storage.sol\\\";\\n\\n/**\\n * @title Adminable\\n * @author dYdX\\n *\\n * @dev EIP-1967 Proxy Admin contract.\\n */\\ncontract Adminable {\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     *  This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    bytes32 internal constant ADMIN_SLOT =\\n    0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n    * @dev Modifier to check whether the `msg.sender` is the admin.\\n    *  If it is, it will run the function. Otherwise, it will revert.\\n    */\\n    modifier onlyAdmin() {\\n        require(\\n            msg.sender == getAdmin(),\\n            \\\"Adminable: caller is not admin\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @return The EIP-1967 proxy admin\\n     */\\n    function getAdmin()\\n        public\\n        view\\n        returns (address)\\n    {\\n        return address(uint160(uint256(Storage.load(ADMIN_SLOT))));\\n    }\\n}\"\r\n    },\r\n    \"./contracts/lib/Storage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.5.16;\\npragma experimental ABIEncoderV2;\\n\\nlibrary Storage {\\n\\n    /**\\n     * @dev Performs an SLOAD and returns the data in the slot.\\n     */\\n    function load(\\n        bytes32 slot\\n    )\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        bytes32 result;\\n        /* solium-disable-next-line security/no-inline-assembly */\\n        assembly {\\n            result := sload(slot)\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Performs an SSTORE to save the value to the slot.\\n     */\\n    function store(\\n        bytes32 slot,\\n        bytes32 value\\n    )\\n        internal\\n    {\\n        /* solium-disable-next-line security/no-inline-assembly */\\n        assembly {\\n            sstore(slot, value)\\n        }\\n    }\\n}\"\r\n    },\r\n    \"./contracts/global/IKYFV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.5.16;\\n\\ninterface IKYFV2 {\\n\\n    function checkVerified(\\n        address _user\\n    )\\n        external\\n        view\\n        returns (bool);\\n\\n}\"\r\n    },\r\n    \"./contracts/debt/mozart/IMozartCoreV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.5.16;\\npragma experimental ABIEncoderV2;\\n\\nimport {Decimal} from \\\"../../lib/Decimal.sol\\\";\\nimport {Amount} from \\\"../../lib/Amount.sol\\\";\\n\\nimport {MozartTypes} from \\\"./MozartTypes.sol\\\";\\n\\ninterface IMozartCoreV1 {\\n\\n    function getPosition(\\n        uint256 id\\n    )\\n        external\\n        view\\n        returns (MozartTypes.Position memory);\\n\\n    function getCurrentPrice()\\n        external\\n        view\\n        returns (Decimal.D256 memory);\\n\\n    function getSyntheticAsset()\\n        external\\n        view\\n        returns (address);\\n\\n    function getCollateralAsset()\\n        external\\n        view\\n        returns (address);\\n\\n    function getCurrentOracle()\\n        external\\n        view\\n        returns (address);\\n\\n    function getInterestSetter()\\n        external\\n        view\\n        returns (address);\\n\\n    function getBorrowIndex()\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function getCollateralRatio()\\n        external\\n        view\\n        returns (Decimal.D256 memory);\\n\\n    function getTotals()\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function getLimits()\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function getInterestRate()\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getFees()\\n        external\\n        view\\n        returns (\\n            Decimal.D256 memory _liquidationUserFee,\\n            Decimal.D256 memory _liquidationArcRatio\\n        );\\n\\n    function isPositionOperator(\\n        uint256 _positionId,\\n        address _operator\\n    )\\n        external\\n        view\\n        returns (bool);\\n\\n    function isGlobalOperator(\\n        address _operator\\n    )\\n        external\\n        view\\n        returns (bool);\\n}\\n\"\r\n    },\r\n    \"./contracts/lib/Amount.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.5.16;\\npragma experimental ABIEncoderV2;\\n\\nimport {SafeMath} from \\\"../lib/SafeMath.sol\\\";\\nimport {Math} from \\\"../lib/Math.sol\\\";\\n\\nlibrary Amount {\\n\\n    using Math for uint256;\\n    using SafeMath for uint256;\\n\\n    // ============ Constants ============\\n\\n    uint256 constant BASE = 10**18;\\n\\n    // A Principal Amount is an amount that's been adjusted by an index\\n\\n    struct Principal {\\n        bool sign; // true if positive\\n        uint256 value;\\n    }\\n\\n    function zero()\\n        internal\\n        pure\\n        returns (Principal memory)\\n    {\\n        return Principal({\\n            sign: false,\\n            value: 0\\n        });\\n    }\\n\\n    function sub(\\n        Principal memory a,\\n        Principal memory b\\n    )\\n        internal\\n        pure\\n        returns (Principal memory)\\n    {\\n        return add(a, negative(b));\\n    }\\n\\n    function add(\\n        Principal memory a,\\n        Principal memory b\\n    )\\n        internal\\n        pure\\n        returns (Principal memory)\\n    {\\n        Principal memory result;\\n\\n        if (a.sign == b.sign) {\\n            result.sign = a.sign;\\n            result.value = SafeMath.add(a.value, b.value);\\n        } else {\\n            if (a.value >= b.value) {\\n                result.sign = a.sign;\\n                result.value = SafeMath.sub(a.value, b.value);\\n            } else {\\n                result.sign = b.sign;\\n                result.value = SafeMath.sub(b.value, a.value);\\n            }\\n        }\\n        return result;\\n    }\\n\\n    function equals(\\n        Principal memory a,\\n        Principal memory b\\n    )\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        if (a.value == b.value) {\\n            if (a.value == 0) {\\n                return true;\\n            }\\n            return a.sign == b.sign;\\n        }\\n        return false;\\n    }\\n\\n    function negative(\\n        Principal memory a\\n    )\\n        internal\\n        pure\\n        returns (Principal memory)\\n    {\\n        return Principal({\\n            sign: !a.sign,\\n            value: a.value\\n        });\\n    }\\n\\n    function calculateAdjusted(\\n        Principal memory a,\\n        uint256 index\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return Math.getPartial(a.value, index, BASE);\\n    }\\n\\n    function calculatePrincipal(\\n        uint256 value,\\n        uint256 index,\\n        bool sign\\n    )\\n        internal\\n        pure\\n        returns (Principal memory)\\n    {\\n        return Principal({\\n            sign: sign,\\n            value: Math.getPartial(value, BASE, index)\\n        });\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"./contracts/debt/mozart/MozartTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.5.16;\\npragma experimental ABIEncoderV2;\\n\\nimport {Amount} from \\\"../../lib/Amount.sol\\\";\\n\\nlibrary MozartTypes {\\n\\n    /* ========== Structs ========== */\\n\\n    struct Position {\\n        address owner;\\n        Amount.Principal collateralAmount;\\n        Amount.Principal borrowedAmount;\\n    }\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"ClaimableStatusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_cap\",\"type\":\"uint256\"}],\"name\":\"HardCapSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"KyfStatusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_positionId\",\"type\":\"uint256\"}],\"name\":\"PositionStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\"}],\"name\":\"RewardsDurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_slasher\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"UserSlashed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"arcDAO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"daoAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"debtToStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRewardForDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_arcDAO\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardsDistribution\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"_daoAllocation\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"_slasherCut\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_stateContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_vestingEndDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_debtToStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_hardCap\",\"type\":\"uint256\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_positionId\",\"type\":\"uint256\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isVerified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"kyfInstances\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"kyfInstancesArray\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardsDistributor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardsDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardsToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_kyfContract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setApprovedKYFInstance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsDistributor\",\"type\":\"address\"}],\"name\":\"setRewardsDistributor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardsDuration\",\"type\":\"uint256\"}],\"name\":\"setRewardsDuration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setTokensClaimable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"slash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"slasherCut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtSnapshot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerTokenStored\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerTokenPaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsEarned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsReleased\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stateContract\",\"outputs\":[{\"internalType\":\"contract IMozartCoreV1\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensClaimable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"userAllocation\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vestingEndDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"RewardCampaign","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}