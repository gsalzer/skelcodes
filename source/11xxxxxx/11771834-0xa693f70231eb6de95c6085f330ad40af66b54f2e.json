{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.17;\r\n\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\n// A library for performing overflow-safe math, courtesy of DappHub: https://github.com/dapphub/ds-math/blob/d0ef6d6a5f/src/math.sol\r\n// Modified to include only the essentials\r\nlibrary SafeMath {\r\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x + y) >= x, \"MATH:ADD_OVERFLOW\");\r\n    }\r\n\r\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x - y) <= x, \"MATH:SUB_UNDERFLOW\");\r\n    }\r\n}\r\n\r\n// Lightweight token modelled after UNI-LP: https://github.com/Uniswap/uniswap-v2-core/blob/v1.0.1/contracts/UniswapV2ERC20.sol\r\n// Adds:\r\n//   - An exposed `mint()` with minting role\r\n//   - An exposed `burn()`\r\n//   - ERC-3009 (`transferWithAuthorization()`)\r\ncontract ANTv2 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    // bytes32 private constant EIP712DOMAIN_HASH = keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\")\r\n    bytes32 private constant EIP712DOMAIN_HASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\r\n    // bytes32 private constant NAME_HASH = keccak256(\"Aragon Network Token\")\r\n    bytes32 private constant NAME_HASH = 0x711a8013284a3c0046af6c0d6ed33e8bbc2c7a11d615cf4fdc8b1ac753bda618;\r\n    // bytes32 private constant VERSION_HASH = keccak256(\"1\")\r\n    bytes32 private constant VERSION_HASH = 0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6;\r\n\r\n    // bytes32 public constant PERMIT_TYPEHASH = keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\r\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\r\n    // bytes32 public constant TRANSFER_WITH_AUTHORIZATION_TYPEHASH =\r\n    //     keccak256(\"TransferWithAuthorization(address from,address to,uint256 value,uint256 validAfter,uint256 validBefore,bytes32 nonce)\");\r\n    bytes32 public constant TRANSFER_WITH_AUTHORIZATION_TYPEHASH = 0x7c7c6cdb67a18743f49ec6fa9b35f50d52ed05cbed4cc592e13b44501c1a2267;\r\n\r\n    string public constant name = \"Aragon Network Token\";\r\n    string public constant symbol = \"ANT\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    address public minter;\r\n    uint256 public totalSupply;\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    // ERC-2612, ERC-3009 state\r\n    mapping (address => uint256) public nonces;\r\n    mapping (address => mapping (bytes32 => bool)) public authorizationState;\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event AuthorizationUsed(address indexed authorizer, bytes32 indexed nonce);\r\n    event ChangeMinter(address indexed minter);\r\n\r\n    modifier onlyMinter {\r\n        require(msg.sender == minter, \"ANTV2:NOT_MINTER\");\r\n        _;\r\n    }\r\n\r\n    constructor(address initialMinter) public {\r\n        _changeMinter(initialMinter);\r\n    }\r\n\r\n    function _validateSignedData(address signer, bytes32 encodeData, uint8 v, bytes32 r, bytes32 s) internal view {\r\n        bytes32 digest = keccak256(\r\n            abi.encodePacked(\r\n                \"\\x19\\x01\",\r\n                getDomainSeparator(),\r\n                encodeData\r\n            )\r\n        );\r\n        address recoveredAddress = ecrecover(digest, v, r, s);\r\n        // Explicitly disallow authorizations for address(0) as ecrecover returns address(0) on malformed messages\r\n        require(recoveredAddress != address(0) && recoveredAddress == signer, \"ANTV2:INVALID_SIGNATURE\");\r\n    }\r\n\r\n    function _changeMinter(address newMinter) internal {\r\n        minter = newMinter;\r\n        emit ChangeMinter(newMinter);\r\n    }\r\n\r\n    function _mint(address to, uint256 value) internal {\r\n        totalSupply = totalSupply.add(value);\r\n        balanceOf[to] = balanceOf[to].add(value);\r\n        emit Transfer(address(0), to, value);\r\n    }\r\n\r\n    function _burn(address from, uint value) internal {\r\n        // Balance is implicitly checked with SafeMath's underflow protection\r\n        balanceOf[from] = balanceOf[from].sub(value);\r\n        totalSupply = totalSupply.sub(value);\r\n        emit Transfer(from, address(0), value);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 value) private {\r\n        allowance[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 value) private {\r\n        require(to != address(this) && to != address(0), \"ANTV2:RECEIVER_IS_TOKEN_OR_ZERO\");\r\n\r\n        // Balance is implicitly checked with SafeMath's underflow protection\r\n        balanceOf[from] = balanceOf[from].sub(value);\r\n        balanceOf[to] = balanceOf[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    function getChainId() public pure returns (uint256 chainId) {\r\n        assembly { chainId := chainid() }\r\n    }\r\n\r\n    function getDomainSeparator() public view returns (bytes32) {\r\n        return keccak256(\r\n            abi.encode(\r\n                EIP712DOMAIN_HASH,\r\n                NAME_HASH,\r\n                VERSION_HASH,\r\n                getChainId(),\r\n                address(this)\r\n            )\r\n        );\r\n    }\r\n\r\n    function mint(address to, uint256 value) external onlyMinter returns (bool) {\r\n        _mint(to, value);\r\n        return true;\r\n    }\r\n\r\n    function changeMinter(address newMinter) external onlyMinter {\r\n        _changeMinter(newMinter);\r\n    }\r\n\r\n    function burn(uint256 value) external returns (bool) {\r\n        _burn(msg.sender, value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 value) external returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address to, uint256 value) external returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool) {\r\n        uint256 fromAllowance = allowance[from][msg.sender];\r\n        if (fromAllowance != uint256(-1)) {\r\n            // Allowance is implicitly checked with SafeMath's underflow protection\r\n            allowance[from][msg.sender] = fromAllowance.sub(value);\r\n        }\r\n        _transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external {\r\n        require(deadline >= block.timestamp, \"ANTV2:AUTH_EXPIRED\");\r\n\r\n        bytes32 encodeData = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline));\r\n        _validateSignedData(owner, encodeData, v, r, s);\r\n\r\n        _approve(owner, spender, value);\r\n    }\r\n\r\n    function transferWithAuthorization(\r\n        address from,\r\n        address to,\r\n        uint256 value,\r\n        uint256 validAfter,\r\n        uint256 validBefore,\r\n        bytes32 nonce,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    )\r\n        external\r\n    {\r\n        require(block.timestamp > validAfter, \"ANTV2:AUTH_NOT_YET_VALID\");\r\n        require(block.timestamp < validBefore, \"ANTV2:AUTH_EXPIRED\");\r\n        require(!authorizationState[from][nonce],  \"ANTV2:AUTH_ALREADY_USED\");\r\n\r\n        bytes32 encodeData = keccak256(abi.encode(TRANSFER_WITH_AUTHORIZATION_TYPEHASH, from, to, value, validAfter, validBefore, nonce));\r\n        _validateSignedData(from, encodeData, v, r, s);\r\n\r\n        authorizationState[from][nonce] = true;\r\n        emit AuthorizationUsed(from, nonce);\r\n\r\n        _transfer(from, to, value);\r\n    }\r\n}\r\n\r\ncontract ANTv2MultiMinter {\r\n    string private constant ERROR_NOT_OWNER = \"ANTV2_MM:NOT_OWNER\";\r\n    string private constant ERROR_NOT_MINTER = \"ANTV2_MM:NOT_MINTER\";\r\n\r\n    address public owner;\r\n    ANTv2 public ant;\r\n\r\n    mapping (address => bool) public canMint;\r\n\r\n    event AddedMinter(address indexed minter);\r\n    event RemovedMinter(address indexed minter);\r\n    event ChangedOwner(address indexed newOwner);\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, ERROR_NOT_OWNER);\r\n        _;\r\n    }\r\n\r\n    modifier onlyMinter {\r\n        require(canMint[msg.sender] || msg.sender == owner, ERROR_NOT_MINTER);\r\n        _;\r\n    }\r\n\r\n    constructor(address _owner, ANTv2 _ant) public {\r\n        owner = _owner;\r\n        ant = _ant;\r\n    }\r\n\r\n    function mint(address to, uint256 value) external onlyMinter returns (bool) {\r\n        return ant.mint(to, value);\r\n    }\r\n\r\n    function addMinter(address minter) external onlyOwner {\r\n        canMint[minter] = true;\r\n\r\n        emit AddedMinter(minter);\r\n    }\r\n\r\n    function removeMinter(address minter) external onlyOwner {\r\n        canMint[minter] = false;\r\n\r\n        emit RemovedMinter(minter);\r\n    }\r\n\r\n    function changeMinter(address newMinter) onlyOwner external {\r\n        ant.changeMinter(newMinter);\r\n    }\r\n\r\n    function changeOwner(address newOwner) onlyOwner external {\r\n        _changeOwner(newOwner);\r\n    }\r\n\r\n    function _changeOwner(address newOwner) internal {\r\n        owner = newOwner;\r\n        \r\n        emit ChangedOwner(newOwner);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"contract ANTv2\",\"name\":\"_ant\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"AddedMinter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"ChangedOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"RemovedMinter\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ant\",\"outputs\":[{\"internalType\":\"contract ANTv2\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"canMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMinter\",\"type\":\"address\"}],\"name\":\"changeMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"removeMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ANTv2MultiMinter","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"0000000000000000000000009416c2191b49bc4e1e614f7d63035b294ad30d19000000000000000000000000a117000000f279d81a1d3cc75430faa017fa5a2e","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://4cb2360d15a43a6b04758bf01e8d3c48419f4be896a1942fab9562786b915578"}]}