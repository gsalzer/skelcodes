{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.7;\r\n\r\ncontract SAFESaviourRegistry {\r\n    // --- Auth ---\r\n    mapping (address => uint256) public authorizedAccounts;\r\n    /**\r\n     * @notice Add auth to an account\r\n     * @param account Account to add auth to\r\n     */\r\n    function addAuthorization(address account) external isAuthorized {\r\n        authorizedAccounts[account] = 1;\r\n        emit AddAuthorization(account);\r\n    }\r\n    /**\r\n     * @notice Remove auth from an account\r\n     * @param account Account to remove auth from\r\n     */\r\n    function removeAuthorization(address account) external isAuthorized {\r\n        authorizedAccounts[account] = 0;\r\n        emit RemoveAuthorization(account);\r\n    }\r\n    /**\r\n    * @notice Checks whether msg.sender can call an authed function\r\n    **/\r\n    modifier isAuthorized {\r\n        require(authorizedAccounts[msg.sender] == 1, \"SAFESaviourRegistry/account-not-authorized\");\r\n        _;\r\n    }\r\n\r\n    // --- Other Modifiers ---\r\n    modifier isSaviour {\r\n        require(saviours[msg.sender] == 1, \"SAFESaviourRegistry/not-a-saviour\");\r\n        _;\r\n    }\r\n\r\n    // --- Variables ---\r\n    // Minimum amount of time that needs to elapse for a specific SAFE to be saved again\r\n    uint256 public saveCooldown;\r\n\r\n    // Timestamp for the last time when a specific SAFE has been saved\r\n    mapping(bytes32 => mapping(address => uint256)) public lastSaveTime;\r\n\r\n    // Whitelisted saviours\r\n    mapping(address => uint256) public saviours;\r\n\r\n    // --- Events ---\r\n    event AddAuthorization(address account);\r\n    event RemoveAuthorization(address account);\r\n    event ModifyParameters(bytes32 parameter, uint256 val);\r\n    event ToggleSaviour(address saviour, uint256 whitelistState);\r\n    event MarkSave(bytes32 indexed collateralType, address indexed safeHandler);\r\n\r\n    constructor(uint256 saveCooldown_) public {\r\n        require(saveCooldown_ > 0, \"SAFESaviourRegistry/null-save-cooldown\");\r\n        authorizedAccounts[msg.sender] = 1;\r\n        saveCooldown = saveCooldown_;\r\n        emit ModifyParameters(\"saveCooldown\", saveCooldown_);\r\n    }\r\n\r\n    // --- Boolean Logic ---\r\n    function either(bool x, bool y) internal pure returns (bool z) {\r\n        assembly{ z := or(x, y)}\r\n    }\r\n\r\n    // --- Math ---\r\n    function addition(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x + y) >= x, \"SAFESaviourRegistry/add-uint-uint-overflow\");\r\n    }\r\n\r\n    // --- Administration ---\r\n    /*\r\n    * @notice Change the saveCooldown value\r\n    * @param parameter Name of the parameter to change\r\n    * @param val The new value for the param\r\n    */\r\n    function modifyParameters(bytes32 parameter, uint256 val) external isAuthorized {\r\n        require(val > 0, \"SAFESaviourRegistry/null-val\");\r\n        if (parameter == \"saveCooldown\") {\r\n          saveCooldown = val;\r\n        } else revert(\"SAFESaviourRegistry/modify-unrecognized-param\");\r\n        emit ModifyParameters(parameter, val);\r\n    }\r\n    /*\r\n    * @notice Whitelist/blacklist a saviour contract\r\n    * @param saviour The saviour contract to whitelist/blacklist\r\n    */\r\n    function toggleSaviour(address saviour) external isAuthorized {\r\n        if (saviours[saviour] == 0) {\r\n          saviours[saviour] = 1;\r\n        } else {\r\n          saviours[saviour] = 0;\r\n        }\r\n        emit ToggleSaviour(saviour, saviours[saviour]);\r\n    }\r\n\r\n    // --- Core Logic ---\r\n    /*\r\n    * @notice Mark a new SAFE as just having been saved\r\n    * @param collateralType The collateral type backing the SAFE\r\n    * @param safeHandler The SAFE's handler\r\n    */\r\n    function markSave(bytes32 collateralType, address safeHandler) external isSaviour {\r\n        require(\r\n          either(lastSaveTime[collateralType][safeHandler] == 0,\r\n          addition(lastSaveTime[collateralType][safeHandler], saveCooldown) < now),\r\n          \"SAFESaviourRegistry/wait-more-to-save\"\r\n        );\r\n        lastSaveTime[collateralType][safeHandler] = now;\r\n        emit MarkSave(collateralType, safeHandler);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"saveCooldown_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"safeHandler\",\"type\":\"address\"}],\"name\":\"MarkSave\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"ModifyParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemoveAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"saviour\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"whitelistState\",\"type\":\"uint256\"}],\"name\":\"ToggleSaviour\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedAccounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastSaveTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"safeHandler\",\"type\":\"address\"}],\"name\":\"markSave\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saveCooldown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"saviours\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"saviour\",\"type\":\"address\"}],\"name\":\"toggleSaviour\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SAFESaviourRegistry","CompilerVersion":"v0.6.7+commit.b8d736ae","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000a8c0","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://0dd9a778a84387d5ae1326a959d1fd8727573ad59cd8108ee5ac22fda0738ca0"}]}