{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/C/Users/simor/Desktop/impermax-x-uniswapv2-periphery/contracts/CapitalFreeLiquidate.sol\": {\r\n      \"content\": \"pragma solidity =0.6.6;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./interfaces/ICapitalFreeLiquidate.sol\\\";\\r\\nimport \\\"./interfaces/IBorrowable.sol\\\";\\r\\nimport \\\"./interfaces/ICollateral.sol\\\";\\r\\nimport \\\"./interfaces/IImpermaxCallee.sol\\\";\\r\\nimport \\\"./interfaces/IERC20.sol\\\";\\r\\nimport \\\"./interfaces/IWETH.sol\\\";\\r\\nimport \\\"./interfaces/IUniswapV2Pair.sol\\\";\\r\\nimport \\\"./libraries/SafeMath.sol\\\";\\r\\nimport \\\"./libraries/TransferHelper.sol\\\";\\r\\nimport \\\"./libraries/UniswapV2Library.sol\\\";\\r\\n\\r\\n// This assumes that the borrower has enough collateral to repay\\r\\n// The chance that this is not true is low and the check isn't worth the additional gas cost\\r\\n// The check should be done off chain, and the caller should use the right liquidateAmount parameter\\r\\n// Another problem is the slippage, so it may be convenient to liquidate large amounts in multiple rounds\\r\\n\\r\\n// TODO: bot to liquidate both sides at the same time?\\r\\n\\r\\ncontract CapitalFreeLiquidate is ICapitalFreeLiquidate, IImpermaxCallee {\\r\\n\\tusing SafeMath for uint;\\r\\n\\r\\n\\taddress public immutable override factory;\\r\\n\\taddress public immutable override bDeployer;\\r\\n\\taddress public immutable override cDeployer;\\r\\n\\taddress public immutable override WETH;\\r\\n\\t\\r\\n\\taddress public override to;\\r\\n\\r\\n\\tconstructor(address _factory, address _bDeployer, address _cDeployer, address _WETH, address _to) public {\\r\\n\\t\\tfactory = _factory;\\r\\n\\t\\tbDeployer = _bDeployer;\\r\\n\\t\\tcDeployer = _cDeployer;\\r\\n\\t\\tWETH = _WETH;\\r\\n\\t\\tto = _to;\\r\\n\\t}\\r\\n\\r\\n\\treceive() external payable {\\r\\n\\t\\tassert(msg.sender == WETH); // only accept ETH via fallback from the WETH contract\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction _burn(\\r\\n\\t\\taddress uniswapV2Pair, \\r\\n\\t\\tuint collateralAmount\\r\\n\\t) internal virtual returns (uint amount0, uint amount1) {\\r\\n\\t\\tTransferHelper.safeTransfer(uniswapV2Pair, uniswapV2Pair, collateralAmount);\\r\\n\\t\\t(amount0, amount1) = IUniswapV2Pair(uniswapV2Pair).burn(address(this));\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction _swap(\\r\\n\\t\\taddress uniswapV2Pair, \\r\\n\\t\\taddress tokenIn, \\r\\n\\t\\tuint amountIn, \\r\\n\\t\\tuint amountOut, \\r\\n\\t\\tuint8 index\\r\\n\\t) internal virtual {\\r\\n\\t\\tTransferHelper.safeTransfer(tokenIn, uniswapV2Pair, amountIn);\\r\\n\\t\\t(uint amount0Out, uint amount1Out) = index == 1 ? (uint(0), amountOut) : (amountOut, uint(0));\\r\\n\\t\\tIUniswapV2Pair(uniswapV2Pair).swap(amount0Out, amount1Out, address(this), new bytes(0));\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction _liquidateAmount(\\r\\n\\t\\taddress borrowable,\\r\\n\\t\\tuint amountMax,\\r\\n\\t\\taddress borrower\\r\\n\\t) internal virtual returns (uint amount) {\\r\\n\\t\\tIBorrowable(borrowable).accrueInterest();\\r\\n\\t\\tuint borrowedAmount = IBorrowable(borrowable).borrowBalance(borrower);\\r\\n\\t\\tamount = amountMax < borrowedAmount ? amountMax : borrowedAmount;\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction _getBorrowablePrice(\\r\\n\\t\\taddress uniswapV2Pair,\\r\\n\\t\\taddress collateral,\\r\\n\\t\\tuint8 index,\\r\\n\\t\\tuint swapAmount\\r\\n\\t) internal virtual returns (uint price) {\\r\\n\\t\\t(uint price0, uint price1) = ICollateral(collateral).getPrices();\\r\\n\\t\\tprice = index == 0 ? price0 : price1;\\r\\n\\t\\t(uint reserve0, uint reserve1,) = IUniswapV2Pair(uniswapV2Pair).getReserves();\\r\\n\\t\\tuint reserve = index == 0 ? reserve0 : reserve1;\\r\\n\\t\\t// Account for LP appreciation after swap\\r\\n\\t\\tprice = price.mul(reserve).div(reserve.add(swapAmount * 3 / 1000));\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction _getExpectedCollateralAmount(\\r\\n\\t\\taddress uniswapV2Pair,\\r\\n\\t\\taddress collateral,\\r\\n\\t\\tuint8 toLiquidateIndex,\\r\\n\\t\\tuint liquidateAmount\\r\\n\\t) internal virtual returns (uint collateralAmount) {\\r\\n\\t\\tuint price = _getBorrowablePrice(uniswapV2Pair, collateral, toLiquidateIndex, liquidateAmount);\\r\\n\\t\\tuint liquidationIncentive = ICollateral(collateral).liquidationIncentive();\\r\\n\\t\\tcollateralAmount = liquidateAmount.mul(liquidationIncentive).div(1e18).mul(price).div(1e18).sub(1);\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction _simulateBurn(\\r\\n\\t\\taddress uniswapV2Pair,\\r\\n\\t\\tuint collateralAmount\\r\\n\\t) internal virtual view returns (uint amount0, uint amount1, uint reserve0, uint reserve1) {\\r\\n\\t\\tuint totalSupply = IUniswapV2Pair(uniswapV2Pair).totalSupply();\\r\\n\\t\\t(uint reserve0Old, uint reserve1Old,) = IUniswapV2Pair(uniswapV2Pair).getReserves();\\r\\n\\t\\tamount0 = collateralAmount.mul(reserve0Old).div(totalSupply);\\r\\n\\t\\tamount1 = collateralAmount.mul(reserve1Old).div(totalSupply);\\r\\n\\t\\treserve0 = reserve0Old.sub(amount0);\\r\\n\\t\\treserve1 = reserve1Old.sub(amount1);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _getLiquidateProfit(\\r\\n\\t\\taddress uniswapV2Pair,\\r\\n\\t\\tuint8 toLiquidateIndex,\\r\\n\\t\\tuint8 takeProfitIndex,\\r\\n\\t\\tuint liquidateAmount,\\r\\n\\t\\tuint collateralAmount\\r\\n\\t) internal virtual view returns (uint profit, uint amountIn, uint amountOut) {\\r\\n\\t\\t(uint amount0, uint amount1, uint reserve0, uint reserve1) = _simulateBurn(uniswapV2Pair, collateralAmount);\\r\\n\\t\\t(uint reserveIn, uint reserveOut) = toLiquidateIndex == 1 ? (reserve0, reserve1) : (reserve1, reserve0);\\r\\n\\t\\tuint amountOutBalance = toLiquidateIndex == 1 ? amount1 : amount0;\\r\\n\\t\\tif (takeProfitIndex == toLiquidateIndex) {\\r\\n\\t\\t\\t// Swap all\\r\\n\\t\\t\\tamountIn = toLiquidateIndex == 1 ? amount0 : amount1;\\r\\n\\t\\t\\tamountOut = UniswapV2Library.getAmountOut(amountIn, reserveIn, reserveOut);\\r\\n\\t\\t\\tprofit = amountOutBalance.add(amountOut).sub(liquidateAmount, \\\"CapitalFreeLiquidate: NEGATIVE_PROFIT_1\\\");\\r\\n\\t\\t}\\r\\n\\t\\telse {\\r\\n\\t\\t\\t// Swap only necessary\\r\\n\\t\\t\\tamountOut = liquidateAmount.sub(amountOutBalance);\\r\\n\\t\\t\\tamountIn = UniswapV2Library.getAmountIn(amountOut, reserveIn, reserveOut);\\r\\n\\t\\t\\tuint amountInBalance = toLiquidateIndex == 1 ? amount0 : amount1;\\r\\n\\t\\t\\tprofit = amountInBalance.sub(amountIn, \\\"CapitalFreeLiquidate: NEGATIVE_PROFIT_2\\\");\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction _getTokenInTokenOut(\\r\\n\\t\\taddress uniswapV2Pair,\\r\\n\\t\\tuint8 index\\r\\n\\t) internal virtual view returns (address tokenIn, address tokenOut) {\\r\\n\\t\\taddress token0 = IUniswapV2Pair(uniswapV2Pair).token0();\\r\\n\\t\\taddress token1 = IUniswapV2Pair(uniswapV2Pair).token1();\\r\\n\\t\\t(tokenIn, tokenOut) = index == 1 ? (token0, token1) : (token1, token0);\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction liquidate(\\r\\n\\t\\taddress uniswapV2Pair,\\r\\n\\t\\tuint8 toLiquidateIndex,\\r\\n\\t\\tuint8 takeProfitIndex,\\r\\n\\t\\taddress borrower,\\r\\n\\t\\tuint liquidateAmountMax,\\r\\n\\t\\tuint profitMin\\r\\n\\t) external virtual override returns (uint profit) {\\r\\n\\t\\taddress collateral = getCollateral(uniswapV2Pair);\\t\\t\\r\\n\\t\\taddress borrowable = getBorrowable(uniswapV2Pair, toLiquidateIndex);\\r\\n\\t\\tuint liquidateAmount = _liquidateAmount(borrowable, liquidateAmountMax, borrower);\\r\\n\\t\\tuint collateralAmount = _getExpectedCollateralAmount(uniswapV2Pair, collateral, toLiquidateIndex, liquidateAmount);\\r\\n\\t\\tuint amountIn;\\r\\n\\t\\tuint amountOut;\\r\\n\\t\\t(profit, amountIn, amountOut) = \\r\\n\\t\\t\\t_getLiquidateProfit(uniswapV2Pair, toLiquidateIndex, takeProfitIndex, liquidateAmount, collateralAmount);\\r\\n\\t\\trequire(profit >= profitMin, \\\"CapitalFreeLiquidator: INSUFFICIENT_PROFIT\\\");\\r\\n\\t\\tbytes memory data = abi.encode(CalleeData({\\r\\n\\t\\t\\tuniswapV2Pair: uniswapV2Pair,\\r\\n\\t\\t\\tcollateral: collateral,\\r\\n\\t\\t\\tborrowable: borrowable,\\r\\n\\t\\t\\ttoLiquidateIndex: toLiquidateIndex,\\r\\n\\t\\t\\ttakeProfitIndex: takeProfitIndex,\\r\\n\\t\\t\\tborrower: borrower,\\r\\n\\t\\t\\tamountIn: amountIn,\\r\\n\\t\\t\\tamountOut: amountOut,\\r\\n\\t\\t\\tliquidateAmount: liquidateAmount\\r\\n\\t\\t}));\\r\\n\\t\\tICollateral(collateral).flashRedeem(address(this), collateralAmount, data);\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction liquidateCallback(\\r\\n\\t\\taddress uniswapV2Pair,\\r\\n\\t\\taddress collateral,\\r\\n\\t\\taddress borrowable,\\r\\n\\t\\tuint8 toLiquidateIndex,\\r\\n\\t\\tuint8 takeProfitIndex,\\r\\n\\t\\taddress borrower,\\r\\n\\t\\tuint amountIn,\\r\\n\\t\\tuint amountOut,\\r\\n\\t\\tuint liquidateAmount,\\r\\n\\t\\tuint collateralAmount\\r\\n\\t) internal virtual {\\r\\n\\t\\t_burn(uniswapV2Pair, collateralAmount);\\r\\n\\t\\t(address tokenIn, address tokenOut) = _getTokenInTokenOut(uniswapV2Pair, toLiquidateIndex);\\r\\n\\t\\t_swap(uniswapV2Pair, tokenIn, amountIn, amountOut, toLiquidateIndex);\\r\\n\\t\\tTransferHelper.safeTransfer(tokenOut, borrowable, liquidateAmount);\\r\\n\\t\\tuint seizeTokens = IBorrowable(borrowable).liquidate(borrower, address(this));\\r\\n\\t\\tTransferHelper.safeTransfer(collateral, collateral, seizeTokens);\\r\\n\\t\\tif (toLiquidateIndex == takeProfitIndex) skim(tokenOut);\\r\\n\\t\\telse skim(tokenIn);\\r\\n\\t}\\r\\n\\t\\r\\n\\tstruct CalleeData {\\r\\n\\t\\taddress uniswapV2Pair;\\r\\n\\t\\taddress collateral;\\r\\n\\t\\taddress borrowable;\\r\\n\\t\\tuint8 toLiquidateIndex;\\r\\n\\t\\tuint8 takeProfitIndex;\\r\\n\\t\\taddress borrower;\\r\\n\\t\\tuint amountIn;\\r\\n\\t\\tuint amountOut;\\r\\n\\t\\tuint liquidateAmount;\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction impermaxRedeem(address sender, uint redeemAmount, bytes calldata data) external virtual override {\\r\\n\\t\\tsender;\\r\\n\\t\\t// no security check needed\\r\\n\\t\\tCalleeData memory calleeData = abi.decode(data, (CalleeData));\\r\\n\\t\\tliquidateCallback(\\r\\n\\t\\t\\tcalleeData.uniswapV2Pair,\\r\\n\\t\\t\\tcalleeData.collateral,\\r\\n\\t\\t\\tcalleeData.borrowable,\\r\\n\\t\\t\\tcalleeData.toLiquidateIndex,\\r\\n\\t\\t\\tcalleeData.takeProfitIndex,\\r\\n\\t\\t\\tcalleeData.borrower,\\r\\n\\t\\t\\tcalleeData.amountIn,\\r\\n\\t\\t\\tcalleeData.amountOut,\\r\\n\\t\\t\\tcalleeData.liquidateAmount,\\r\\n\\t\\t\\tredeemAmount\\r\\n\\t\\t);\\r\\n\\t}\\r\\n\\r\\n\\tfunction impermaxBorrow(address sender, address borrower, uint borrowAmount, bytes calldata data) external virtual override { sender; borrower; borrowAmount; data; }\\r\\n\\t\\r\\n\\tfunction skim(address token) public virtual override {\\r\\n\\t\\tuint balance = IERC20(token).balanceOf(address(this));\\r\\n\\t\\tif (token == WETH) {\\t\\t\\r\\n\\t\\t\\tIWETH(WETH).withdraw(balance);\\r\\n\\t\\t\\tTransferHelper.safeTransferETH(to, balance);\\r\\n\\t\\t}\\r\\n\\t\\telse TransferHelper.safeTransfer(token, to, balance);\\r\\n\\t}\\r\\n\\t\\r\\n\\t/*** UTILITIES ***/\\r\\n\\t\\r\\n\\tfunction getBorrowable(address uniswapV2Pair, uint8 index) public virtual override view returns (address borrowable) {\\r\\n\\t\\trequire(index < 2, \\\"CapitalFreeLiquidator: INDEX_TOO_HIGH\\\");\\r\\n\\t\\tborrowable = address(uint(keccak256(abi.encodePacked(\\r\\n\\t\\t\\thex\\\"ff\\\",\\r\\n\\t\\t\\tbDeployer,\\r\\n\\t\\t\\tkeccak256(abi.encodePacked(factory, uniswapV2Pair, index)),\\r\\n\\t\\t\\thex\\\"605ba1db56496978613939baf0ae31dccceea3f5ca53dfaa76512bc880d7bb8f\\\" // Borrowable bytecode keccak256\\r\\n\\t\\t))));\\r\\n\\t}\\r\\n\\tfunction getCollateral(address uniswapV2Pair) public virtual override view returns (address collateral) {\\r\\n\\t\\tcollateral = address(uint(keccak256(abi.encodePacked(\\r\\n\\t\\t\\thex\\\"ff\\\",\\r\\n\\t\\t\\tcDeployer,\\r\\n\\t\\t\\tkeccak256(abi.encodePacked(factory, uniswapV2Pair)),\\r\\n\\t\\t\\thex\\\"4b8788d8761647e6330407671d3c6c80afaed3d047800dba0e0e3befde047767\\\" // Collateral bytecode keccak256\\r\\n\\t\\t))));\\r\\n\\t}\\r\\n\\tfunction getLendingPool(address uniswapV2Pair) public virtual override view returns (address collateral, address borrowableA, address borrowableB) {\\r\\n\\t\\tcollateral = getCollateral(uniswapV2Pair);\\r\\n\\t\\tborrowableA = getBorrowable(uniswapV2Pair, 0);\\r\\n\\t\\tborrowableB = getBorrowable(uniswapV2Pair, 1);\\r\\n\\t}\\r\\n}\\r\\n\"\r\n    },\r\n    \"/C/Users/simor/Desktop/impermax-x-uniswapv2-periphery/contracts/interfaces/IBorrowable.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\r\\n\\r\\ninterface IBorrowable {\\r\\n\\r\\n\\t/*** Impermax ERC20 ***/\\r\\n\\t\\r\\n\\tevent Transfer(address indexed from, address indexed to, uint value);\\r\\n\\tevent Approval(address indexed owner, address indexed spender, uint value);\\r\\n\\t\\r\\n\\tfunction name() external pure returns (string memory);\\r\\n\\tfunction symbol() external pure returns (string memory);\\r\\n\\tfunction decimals() external pure returns (uint8);\\r\\n\\tfunction totalSupply() external view returns (uint);\\r\\n\\tfunction balanceOf(address owner) external view returns (uint);\\r\\n\\tfunction allowance(address owner, address spender) external view returns (uint);\\r\\n\\tfunction approve(address spender, uint value) external returns (bool);\\r\\n\\tfunction transfer(address to, uint value) external returns (bool);\\r\\n\\tfunction transferFrom(address from, address to, uint value) external returns (bool);\\r\\n\\t\\r\\n\\tfunction DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\tfunction PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n\\tfunction nonces(address owner) external view returns (uint);\\r\\n\\tfunction permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n\\t\\r\\n\\t/*** Pool Token ***/\\r\\n\\t\\r\\n\\tevent Mint(address indexed sender, address indexed minter, uint mintAmount, uint mintTokens);\\r\\n\\tevent Redeem(address indexed sender, address indexed redeemer, uint redeemAmount, uint redeemTokens);\\r\\n\\tevent Sync(uint totalBalance);\\r\\n\\t\\r\\n\\tfunction underlying() external view returns (address);\\r\\n\\tfunction factory() external view returns (address);\\r\\n\\tfunction totalBalance() external view returns (uint);\\r\\n\\tfunction MINIMUM_LIQUIDITY() external pure returns (uint);\\r\\n\\r\\n\\tfunction exchangeRate() external returns (uint);\\r\\n\\tfunction mint(address minter) external returns (uint mintTokens);\\r\\n\\tfunction redeem(address redeemer) external returns (uint redeemAmount);\\r\\n\\tfunction skim(address to) external;\\r\\n\\tfunction sync() external;\\r\\n\\t\\r\\n\\tfunction _setFactory() external;\\r\\n\\t\\r\\n\\t/*** Borrowable ***/\\r\\n\\r\\n\\tevent BorrowApproval(address indexed owner, address indexed spender, uint value);\\r\\n\\tevent Borrow(address indexed sender, address indexed borrower, address indexed receiver, uint borrowAmount, uint repayAmount, uint accountBorrowsPrior, uint accountBorrows, uint totalBorrows);\\r\\n\\tevent Liquidate(address indexed sender, address indexed borrower, address indexed liquidator, uint seizeTokens, uint repayAmount, uint accountBorrowsPrior, uint accountBorrows, uint totalBorrows);\\r\\n\\t\\r\\n\\tfunction BORROW_FEE() external pure returns (uint);\\r\\n\\tfunction collateral() external view returns (address);\\r\\n\\tfunction reserveFactor() external view returns (uint);\\r\\n\\tfunction exchangeRateLast() external view returns (uint);\\r\\n\\tfunction borrowIndex() external view returns (uint);\\r\\n\\tfunction totalBorrows() external view returns (uint);\\r\\n\\tfunction borrowAllowance(address owner, address spender) external view returns (uint);\\r\\n\\tfunction borrowBalance(address borrower) external view returns (uint);\\t\\r\\n\\tfunction borrowTracker() external view returns (address);\\r\\n\\t\\r\\n\\tfunction BORROW_PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n\\tfunction borrowApprove(address spender, uint256 value) external returns (bool);\\r\\n\\tfunction borrowPermit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n\\tfunction borrow(address borrower, address receiver, uint borrowAmount, bytes calldata data) external;\\r\\n\\tfunction liquidate(address borrower, address liquidator) external returns (uint seizeTokens);\\r\\n\\tfunction trackBorrow(address borrower) external;\\r\\n\\t\\r\\n\\t/*** Borrowable Interest Rate Model ***/\\r\\n\\r\\n\\tevent AccrueInterest(uint interestAccumulated, uint borrowIndex, uint totalBorrows);\\r\\n\\tevent CalculateKink(uint kinkRate);\\r\\n\\tevent CalculateBorrowRate(uint borrowRate);\\r\\n\\t\\r\\n\\tfunction KINK_BORROW_RATE_MAX() external pure returns (uint);\\r\\n\\tfunction KINK_BORROW_RATE_MIN() external pure returns (uint);\\r\\n\\tfunction KINK_MULTIPLIER() external pure returns (uint);\\r\\n\\tfunction borrowRate() external view returns (uint);\\r\\n\\tfunction kinkBorrowRate() external view returns (uint);\\r\\n\\tfunction kinkUtilizationRate() external view returns (uint);\\r\\n\\tfunction adjustSpeed() external view returns (uint);\\r\\n\\tfunction rateUpdateTimestamp() external view returns (uint32);\\r\\n\\tfunction accrualTimestamp() external view returns (uint32);\\r\\n\\t\\r\\n\\tfunction accrueInterest() external;\\r\\n\\t\\r\\n\\t/*** Borrowable Setter ***/\\r\\n\\r\\n\\tevent NewReserveFactor(uint newReserveFactor);\\r\\n\\tevent NewKinkUtilizationRate(uint newKinkUtilizationRate);\\r\\n\\tevent NewAdjustSpeed(uint newAdjustSpeed);\\r\\n\\tevent NewBorrowTracker(address newBorrowTracker);\\r\\n\\r\\n\\tfunction RESERVE_FACTOR_MAX() external pure returns (uint);\\r\\n\\tfunction KINK_UR_MIN() external pure returns (uint);\\r\\n\\tfunction KINK_UR_MAX() external pure returns (uint);\\r\\n\\tfunction ADJUST_SPEED_MIN() external pure returns (uint);\\r\\n\\tfunction ADJUST_SPEED_MAX() external pure returns (uint);\\r\\n\\t\\r\\n\\tfunction _initialize (\\r\\n\\t\\tstring calldata _name, \\r\\n\\t\\tstring calldata _symbol,\\r\\n\\t\\taddress _underlying, \\r\\n\\t\\taddress _collateral\\r\\n\\t) external;\\r\\n\\tfunction _setReserveFactor(uint newReserveFactor) external;\\r\\n\\tfunction _setKinkUtilizationRate(uint newKinkUtilizationRate) external;\\r\\n\\tfunction _setAdjustSpeed(uint newAdjustSpeed) external;\\r\\n\\tfunction _setBorrowTracker(address newBorrowTracker) external;\\r\\n}\"\r\n    },\r\n    \"/C/Users/simor/Desktop/impermax-x-uniswapv2-periphery/contracts/interfaces/ICapitalFreeLiquidate.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\r\\n\\r\\ninterface ICapitalFreeLiquidate {\\r\\n\\tfunction factory() external pure returns (address);\\r\\n\\tfunction bDeployer() external pure returns (address);\\r\\n\\tfunction cDeployer() external pure returns (address);\\r\\n\\tfunction WETH() external pure returns (address);\\r\\n\\t\\r\\n\\tfunction to() external pure returns (address);\\r\\n\\t\\r\\n\\tfunction liquidate(\\r\\n\\t\\taddress uniswapV2Pair,\\r\\n\\t\\tuint8 toLiquidateIndex,\\r\\n\\t\\tuint8 takeProfitIndex,\\r\\n\\t\\taddress borrower,\\r\\n\\t\\tuint liquidateAmountMax,\\r\\n\\t\\tuint profitMin\\r\\n\\t) external returns (uint profit);\\r\\n\\t\\r\\n\\tfunction skim(address token) external;\\r\\n\\t\\r\\n\\tfunction getBorrowable(address uniswapV2Pair, uint8 index) external view returns (address borrowable);\\r\\n\\tfunction getCollateral(address uniswapV2Pair) external view returns (address collateral);\\r\\n\\tfunction getLendingPool(address uniswapV2Pair) external view returns (address collateral, address borrowableA, address borrowableB);\\r\\n}\"\r\n    },\r\n    \"/C/Users/simor/Desktop/impermax-x-uniswapv2-periphery/contracts/interfaces/ICollateral.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\r\\n\\r\\ninterface ICollateral {\\r\\n\\r\\n\\t/*** Impermax ERC20 ***/\\r\\n\\t\\r\\n\\tevent Transfer(address indexed from, address indexed to, uint value);\\r\\n\\tevent Approval(address indexed owner, address indexed spender, uint value);\\r\\n\\t\\r\\n\\tfunction name() external pure returns (string memory);\\r\\n\\tfunction symbol() external pure returns (string memory);\\r\\n\\tfunction decimals() external pure returns (uint8);\\r\\n\\tfunction totalSupply() external view returns (uint);\\r\\n\\tfunction balanceOf(address owner) external view returns (uint);\\r\\n\\tfunction allowance(address owner, address spender) external view returns (uint);\\r\\n\\tfunction approve(address spender, uint value) external returns (bool);\\r\\n\\tfunction transfer(address to, uint value) external returns (bool);\\r\\n\\tfunction transferFrom(address from, address to, uint value) external returns (bool);\\r\\n\\t\\r\\n\\tfunction DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\tfunction PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n\\tfunction nonces(address owner) external view returns (uint);\\r\\n\\tfunction permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n\\t\\r\\n\\t/*** Pool Token ***/\\r\\n\\t\\r\\n\\tevent Mint(address indexed sender, address indexed minter, uint mintAmount, uint mintTokens);\\r\\n\\tevent Redeem(address indexed sender, address indexed redeemer, uint redeemAmount, uint redeemTokens);\\r\\n\\tevent Sync(uint totalBalance);\\r\\n\\t\\r\\n\\tfunction underlying() external view returns (address);\\r\\n\\tfunction factory() external view returns (address);\\r\\n\\tfunction totalBalance() external view returns (uint);\\r\\n\\tfunction MINIMUM_LIQUIDITY() external pure returns (uint);\\r\\n\\r\\n\\tfunction exchangeRate() external returns (uint);\\r\\n\\tfunction mint(address minter) external returns (uint mintTokens);\\r\\n\\tfunction redeem(address redeemer) external returns (uint redeemAmount);\\r\\n\\tfunction skim(address to) external;\\r\\n\\tfunction sync() external;\\r\\n\\t\\r\\n\\tfunction _setFactory() external;\\r\\n\\t\\r\\n\\t/*** Collateral ***/\\r\\n\\t\\r\\n\\tfunction borrowable0() external view returns (address);\\r\\n\\tfunction borrowable1() external view returns (address);\\r\\n\\tfunction simpleUniswapOracle() external view returns (address);\\r\\n\\tfunction safetyMarginSqrt() external view returns (uint);\\r\\n\\tfunction liquidationIncentive() external view returns (uint);\\r\\n\\t\\r\\n\\tfunction getPrices() external returns (uint price0, uint price1);\\r\\n\\tfunction tokensUnlocked(address from, uint value) external returns (bool);\\r\\n\\tfunction accountLiquidityAmounts(address account, uint amount0, uint amount1) external returns (uint liquidity, uint shortfall);\\r\\n\\tfunction accountLiquidity(address account) external returns (uint liquidity, uint shortfall);\\r\\n\\tfunction canBorrow(address account, address borrowable, uint accountBorrows) external returns (bool);\\r\\n\\tfunction seize(address liquidator, address borrower, uint repayAmount) external returns (uint seizeTokens);\\r\\n\\tfunction flashRedeem(address redeemer, uint redeemAmount, bytes calldata data) external;\\r\\n\\t\\r\\n\\t/*** Collateral Setter ***/\\r\\n\\t\\r\\n\\tevent NewSafetyMargin(uint newSafetyMarginSqrt);\\r\\n\\tevent NewLiquidationIncentive(uint newLiquidationIncentive);\\r\\n\\r\\n\\tfunction SAFETY_MARGIN_SQRT_MIN() external pure returns (uint);\\r\\n\\tfunction SAFETY_MARGIN_SQRT_MAX() external pure returns (uint);\\r\\n\\tfunction LIQUIDATION_INCENTIVE_MIN() external pure returns (uint);\\r\\n\\tfunction LIQUIDATION_INCENTIVE_MAX() external pure returns (uint);\\r\\n\\t\\r\\n\\tfunction _initialize (\\r\\n\\t\\tstring calldata _name, \\r\\n\\t\\tstring calldata _symbol,\\r\\n\\t\\taddress _underlying, \\r\\n\\t\\taddress _borrowable0, \\r\\n\\t\\taddress _borrowable1\\r\\n\\t) external;\\r\\n\\tfunction _setSafetyMarginSqrt(uint newSafetyMarginSqrt) external;\\r\\n\\tfunction _setLiquidationIncentive(uint newLiquidationIncentive) external;\\r\\n}\"\r\n    },\r\n    \"/C/Users/simor/Desktop/impermax-x-uniswapv2-periphery/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"/C/Users/simor/Desktop/impermax-x-uniswapv2-periphery/contracts/interfaces/IImpermaxCallee.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\r\\n\\r\\ninterface IImpermaxCallee {\\r\\n    function impermaxBorrow(address sender, address borrower, uint borrowAmount, bytes calldata data) external;\\r\\n    function impermaxRedeem(address sender, uint redeemAmount, bytes calldata data) external;\\r\\n}\"\r\n    },\r\n    \"/C/Users/simor/Desktop/impermax-x-uniswapv2-periphery/contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"/C/Users/simor/Desktop/impermax-x-uniswapv2-periphery/contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\r\\n\\r\\ninterface IWETH {\\r\\n    function deposit() external payable;\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n    function withdraw(uint) external;\\r\\n}\"\r\n    },\r\n    \"/C/Users/simor/Desktop/impermax-x-uniswapv2-periphery/contracts/libraries/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity =0.6.6;\\n\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\\n// Subject to the MIT license.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction underflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"/C/Users/simor/Desktop/impermax-x-uniswapv2-periphery/contracts/libraries/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity =0.6.6;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeApprove: approve failed'\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeTransfer: transfer failed'\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::transferFrom: transferFrom failed'\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\\n    }\\n}\\n\"\r\n    },\r\n    \"/C/Users/simor/Desktop/impermax-x-uniswapv2-periphery/contracts/libraries/UniswapV2Library.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\nimport \\\"../interfaces/IUniswapV2Pair.sol\\\";\\n\\nimport \\\"./SafeMath.sol\\\";\\n\\nlibrary UniswapV2Library {\\n    using SafeMath for uint;\\n\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(uint(keccak256(abi.encodePacked(\\n                hex'ff',\\n                factory,\\n                keccak256(abi.encodePacked(token0, token1)),\\n                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\\n            ))));\\n    }\\n\\n    // fetches and sorts the reserves for a pair\\n    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\\n        (address token0,) = sortTokens(tokenA, tokenB);\\n        (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n    }\\n\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\\n        require(amountA > 0, 'UniswapV2Library: INSUFFICIENT_AMOUNT');\\n        require(reserveA > 0 && reserveB > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\\n        amountB = amountA.mul(reserveB) / reserveA;\\n    }\\n\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\\n        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\\n        uint amountInWithFee = amountIn.mul(997);\\n        uint numerator = amountInWithFee.mul(reserveOut);\\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\\n        amountOut = numerator / denominator;\\n    }\\n\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\\n        require(amountOut > 0, 'UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');\\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\\n        uint numerator = reserveIn.mul(amountOut).mul(1000);\\n        uint denominator = reserveOut.sub(amountOut).mul(997);\\n        amountIn = (numerator / denominator).add(1);\\n    }\\n\\n    // performs chained getAmountOut calculations on any number of pairs\\n    function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {\\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\\n        amounts = new uint[](path.length);\\n        amounts[0] = amountIn;\\n        for (uint i; i < path.length - 1; i++) {\\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n\\n    // performs chained getAmountIn calculations on any number of pairs\\n    function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {\\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\\n        amounts = new uint[](path.length);\\n        amounts[amounts.length - 1] = amountOut;\\n        for (uint i = path.length - 1; i > 0; i--) {\\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bDeployer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cDeployer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bDeployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cDeployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uniswapV2Pair\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"getBorrowable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"borrowable\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uniswapV2Pair\",\"type\":\"address\"}],\"name\":\"getCollateral\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uniswapV2Pair\",\"type\":\"address\"}],\"name\":\"getLendingPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrowableA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrowableB\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"impermaxBorrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"redeemAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"impermaxRedeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uniswapV2Pair\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"toLiquidateIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"takeProfitIndex\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidateAmountMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"profitMin\",\"type\":\"uint256\"}],\"name\":\"liquidate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"skim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"to\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"CapitalFreeLiquidate","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"0000000000000000000000008c3736e2fe63cc2cd89ee228d9dbcab6ce5b767b00000000000000000000000031864bc58a47a4fc8782b4135873788e876de9eb000000000000000000000000c12e00de204d58ead5b5ce9054e94aee7747fb6c000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000004723c223f502a4cf8f6480ab6eca5d8856732515","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}