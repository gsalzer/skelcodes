{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/contracts/math/Math.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n// File: contracts/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see `ERC20Detailed`.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when `approve` or `transferFrom` are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * > Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an `Approval` event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to `approve`. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the `IERC20` interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using `_mint`.\r\n * For a generic mechanism see `ERC20Mintable`.\r\n *\r\n * *For a detailed writeup see our guide [How to implement supply\r\n * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See `IERC20.approve`.\r\n */\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    constructor (string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 9;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n    \r\n    /**\r\n     * @dev See `IERC20.totalSupply`.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.balanceOf`.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.transfer`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.allowance`.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.approve`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.transferFrom`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of `ERC20`;\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `value`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to `approve` that can be used as a mitigation for\r\n     * problems described in `IERC20.approve`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to `approve` that can be used as a mitigation for\r\n     * problems described in `IERC20.approve`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to `transfer`, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a `Transfer` event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n     /**\r\n     * @dev Destoys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a `Transfer` event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an `Approval` event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Destoys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See `_burn` and `_approve`.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\r\n    }\r\n}\r\n\r\n// File: contracts/contracts/ownership/MultOwnable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract MultOwnable {\r\n  address[] private _owner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  constructor() internal {\r\n    _owner.push(msg.sender);\r\n    emit OwnershipTransferred(address(0), _owner[0]);\r\n  }\r\n\r\n  function checkOwner() private view returns (bool) {\r\n    for (uint8 i = 0; i < _owner.length; i++) {\r\n      if (_owner[i] == msg.sender) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function checkNewOwner(address _address) private view returns (bool) {\r\n    for (uint8 i = 0; i < _owner.length; i++) {\r\n      if (_owner[i] == _address) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  modifier isAnOwner() {\r\n    require(checkOwner(), \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n\r\n  function renounceOwnership() public isAnOwner {\r\n    for (uint8 i = 0; i < _owner.length; i++) {\r\n      if (_owner[i] == msg.sender) {\r\n        _owner[i] = address(0);\r\n        emit OwnershipTransferred(_owner[i], msg.sender);\r\n      }\r\n    }\r\n  }\r\n\r\n  function getOwners() public view returns (address[] memory) {\r\n    return _owner;\r\n  }\r\n\r\n  function addOwnerShip(address newOwner) public isAnOwner {\r\n    _addOwnerShip(newOwner);\r\n  }\r\n\r\n  function _addOwnerShip(address newOwner) internal {\r\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n    require(checkNewOwner(newOwner), \"Owner already exists\");\r\n    _owner.push(newOwner);\r\n    emit OwnershipTransferred(_owner[_owner.length - 1], newOwner);\r\n  }\r\n}\r\n\r\n// File: contracts/TulipToken.sol\r\n\r\npragma solidity ^0.5.16;\r\n\r\n\r\n\r\ncontract TulipToken is MultOwnable, ERC20{\r\n    constructor (string memory name, string memory symbol) public ERC20(name, symbol) MultOwnable(){\r\n    }\r\n\r\n    function contractMint(address account, uint256 amount) external isAnOwner{\r\n        _mint(account, amount);\r\n    }\r\n\r\n    function contractBurn(address account, uint256 amount) external isAnOwner{\r\n        _burn(account, amount);\r\n    }\r\n\r\n\r\n     /* ========== RESTRICTED FUNCTIONS ========== */\r\n    function addOwner(address _newOwner) external isAnOwner {\r\n        addOwnerShip(_newOwner);\r\n    }\r\n\r\n    function getOwner() external view isAnOwner{\r\n        getOwners();\r\n    }\r\n\r\n    function renounceOwner() external isAnOwner {\r\n        renounceOwnership();\r\n    }\r\n}\r\n\r\n// File: contracts/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type,\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * This test is non-exhaustive, and there may be false-negatives: during the\r\n     * execution of a contract's constructor, its address will be reported as\r\n     * not containing a contract.\r\n     *\r\n     * > It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n// File: contracts/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/GardenContractV2.sol\r\n\r\npragma solidity ^0.5.16;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract GardenContractV2 is Ownable {\r\n  using SafeMath for uint256;\r\n  using SafeERC20 for TulipToken;\r\n  using SafeERC20 for IERC20;\r\n\r\n  /* ========== STATE VARIABLES ========== */\r\n  address internal _benefitiaryAddress = 0x68c1A22aD90f168aa19F800bFB115fB4D52F4AD9; //Founder Address\r\n\r\n  uint256 internal _epochBlockStart = 1600610400;\r\n\r\n  uint256 internal _timeScale = (1 days);\r\n\r\n  //uint8 private _pinkTulipDivider = 100;\r\n\r\n  uint256 private _decimalConverter = 10**9;\r\n\r\n  uint256[3] internal _totalGrowing;\r\n\r\n  uint256[3] internal _totalGrown; /* REMEMBER THE DIFFERENCE */\r\n\r\n  uint256[3] internal _totalBurnt;\r\n\r\n  uint256[2] internal _totalDecomposed;\r\n\r\n  TulipToken[3] private _token;\r\n\r\n  uint256[3] private _totalSupply;\r\n\r\n  struct  tulipToken{\r\n      mapping(address => bool)      forSeeds;\r\n      mapping(address => uint256)   planted;\r\n      mapping(address => uint256)   periodFinish; //combine with decomposing\r\n      mapping(address => bool)      isDecomposing;\r\n  }\r\n\r\n  tulipToken[10][3] private _tulipToken;\r\n\r\n\r\n  /* ========== CONSTRUCTOR ========== */\r\n\r\n  constructor(address _seedToken, address _basicTulipToken, address _advTulipToken) public Ownable() {\r\n    _token[0] = TulipToken(_seedToken);\r\n    _token[1] = TulipToken(_basicTulipToken);\r\n    _token[2] = TulipToken(_advTulipToken);\r\n  }\r\n\r\n  /* ========== VIEWS ========== */\r\n\r\n    /* ========== internal ========== */\r\n\r\n  function totalGardenSupply(string calldata name) external view returns (uint256) {\r\n    uint8 i = tulipType(name);\r\n\r\n    return _totalSupply[i] ;\r\n  }\r\n\r\n  function totalBedSupply(string calldata name, uint8 garden) external view returns (uint256, bool, bool) {\r\n    uint8 i = tulipType(name);  \r\n\r\n    return (_tulipToken[i][garden].planted[msg.sender], _tulipToken[i][garden].isDecomposing[msg.sender], _tulipToken[i][garden].forSeeds[msg.sender]);\r\n  }\r\n\r\n\r\n  function totalTLPGrowing(string calldata name) external view returns (uint256) {\r\n    uint8 i = tulipType(name);  \r\n\r\n    return _totalGrowing[i];\r\n  }\r\n\r\n  function totalTLPDecomposed(string calldata name) external view returns (uint256) {\r\n    uint8 i = tulipType(name) - 1;  \r\n    return _totalDecomposed[i];\r\n  }\r\n\r\n  function totalTLPGrown(string calldata name) external view returns (uint256) {\r\n    uint8 i = tulipType(name);  \r\n\r\n    return _totalGrown[i];\r\n  }\r\n\r\n  function totalTLPBurnt(string calldata name) external view returns (uint256) {\r\n    uint8 i = tulipType(name);  \r\n\r\n    return _totalBurnt[i];\r\n  }\r\n\r\n  function growthRemaining(address account, string calldata name, uint8 garden) external view returns (uint256) {\r\n    uint8 i = tulipType(name);\r\n    return _tulipToken[i][garden].periodFinish[account].sub(now);\r\n  }\r\n\r\n  function timeUntilNextTLP(string calldata name, uint8 garden) external view returns (uint256) {\r\n    uint256 plantTimeSeconds = _tulipToken[tulipType(name)][garden].periodFinish[msg.sender].sub(7 * _timeScale);\r\n    uint256 secondsDifference = now - plantTimeSeconds;\r\n    uint256 weeksSincePlanting = (secondsDifference).div(60).div(60).div(24).div(7);\r\n    //uint256 weeksSincePlanting = (secondsDifference).div(7);\r\n\r\n    if((((secondsDifference).div(60).div(60).div(24)) % 7) > 0){\r\n      //if((((secondsDifference)) % 7) > 0){\r\n      weeksSincePlanting = weeksSincePlanting.add(1);\r\n      \r\n      return plantTimeSeconds.add(weeksSincePlanting.mul(7 * _timeScale)).sub(secondsDifference);\r\n    }\r\n    else{\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  function balanceOf(address account, string calldata name) external view returns (uint256)\r\n  {\r\n    uint8 i = tulipType(name);\r\n    uint256 total;\r\n\r\n    for(uint8 k; k < _tulipToken[0].length; k++){\r\n      total = total + _tulipToken[i][k].planted[account];\r\n    }\r\n\r\n    return total;\r\n  }\r\n\r\n\r\n  function getTotalrTLPHarvest(uint8 garden) external view returns (uint256){\r\n    uint256 total;\r\n    if(garden > 10){\r\n      for(uint8 k; k < _tulipToken[0].length; k++){\r\n        total = total + redTulipRewardAmount(k);\r\n      }\r\n    }\r\n    else{\r\n      total = redTulipRewardAmount(garden);\r\n    }\r\n    \r\n    return total;\r\n  }\r\n\r\n  function getTotalpTLPHarvest(uint8 garden) external view returns (uint256[2] memory){\r\n    uint256[2] memory total;\r\n      if(_tulipToken[1][garden].forSeeds[msg.sender]){\r\n        total[1] = pinkTulipRewardAmount(garden);\r\n      }\r\n      else{\r\n        total[0] = _tulipToken[1][garden].planted[msg.sender];\r\n      }\r\n   \r\n    return total;\r\n  }\r\n\r\n  function getTotalsTLPHarvest(uint8 garden) external view returns (uint256){\r\n    uint256 total;\r\n      total = _tulipToken[0][garden].planted[msg.sender];\r\n    return total;\r\n  } \r\n\r\n  /* ========== MUTATIVE FUNCTIONS ========== */\r\n\r\n    /* ========== internal garden ========== */\r\n\r\n  function plant(uint256 amount, string calldata name, uint8 garden, bool forSeeds) external { \r\n    uint8 i = tulipType(name);\r\n    //require(amount >= 1, \"199\");//Cannot stake less than 1\r\n    require(_tulipToken[i][garden].planted[msg.sender] == 0 && now > _tulipToken[i][garden].periodFinish[msg.sender], \r\n    \"201\");//You must withdraw or harvest the previous crop\r\n    if(i == 1 && !forSeeds){\r\n      require((amount % 100) == 0, \"203\");//Has to be multiple of 100\r\n    }\r\n    \r\n    _token[i].safeTransferFrom(msg.sender, address(this), amount.mul(_decimalConverter));\r\n    _totalSupply[i] = _totalSupply[i].add(amount);\r\n    _tulipToken[i][garden].planted[msg.sender] = _tulipToken[i][garden].planted[msg.sender].add(amount);\r\n\r\n    _totalGrowing[i] = _totalGrowing[i] + amount;\r\n\r\n    if(forSeeds && i != 0){\r\n      _tulipToken[i][garden].periodFinish[msg.sender] = now.add(7 * _timeScale);\r\n      _tulipToken[i][garden].forSeeds[msg.sender] = true;\r\n    }\r\n    else{\r\n      setTimeStamp(i, garden);\r\n    }\r\n\r\n    emit Staked(msg.sender, amount);\r\n  }\r\n\r\n\r\n  function withdraw(string memory name, uint8 garden) public {\r\n    uint8 i = tulipType(name);\r\n    require(!_tulipToken[i][garden].isDecomposing[msg.sender], \"226\");//Cannot withdraw a decomposing bed\r\n    \r\n    if(now > _tulipToken[i][garden].periodFinish[msg.sender] && _tulipToken[i][garden].periodFinish[msg.sender] > 0 && _tulipToken[i][garden].forSeeds[msg.sender]){\r\n        harvestHelper(name, garden, true);\r\n    }\r\n    else{\r\n        _totalGrowing[i] = _totalGrowing[i].sub(_tulipToken[i][garden].planted[msg.sender]);\r\n    }\r\n\r\n    _token[i].safeTransfer(msg.sender, _tulipToken[i][garden].planted[msg.sender].mul(_decimalConverter));\r\n\r\n    _tulipToken[i][garden].forSeeds[msg.sender] = false;\r\n\r\n    emit Withdrawn(msg.sender, _tulipToken[i][garden].planted[msg.sender]);\r\n\r\n    zeroHoldings(i, garden);\r\n  }\r\n\r\n  function harvest(string memory name, uint8 garden) public {\r\n    require(!_tulipToken[tulipType(name)][garden].isDecomposing[msg.sender], \"245\");//Cannot withdraw a decomposing bed\r\n\r\n    harvestHelper(name, garden, false);\r\n  }\r\n\r\n\r\n  function harvestAllBeds(string memory name) public {\r\n    uint8 i;\r\n    uint256[6] memory amount;\r\n\r\n    i = tulipType(name);      \r\n    amount = utilityBedHarvest(i);\r\n    for(i = 0; i < 3; i++){\r\n      if(amount[i] > 0){\r\n          _token[i].contractMint(msg.sender, amount[i].mul(_decimalConverter));\r\n          \r\n          _totalGrown[i] = _totalGrown[i].add(amount[i]);\r\n          \r\n          emit RewardPaid(msg.sender, amount[i]);\r\n      }\r\n      if(amount[i + 3] > 0){\r\n          _token[i].contractBurn(address(this), amount[i + 3].mul(_decimalConverter));\r\n          _totalGrowing[i] = _totalGrowing[i].sub(amount[i + 3]);\r\n          _totalBurnt[i] = _totalBurnt[i].add(amount[i + 3]);\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n function decompose(string memory name, uint8 garden, uint256 amount) public {\r\n    uint8 i = tulipType(name);\r\n    //require(amount >= 1, \"291\");//Cannot stake less than 1\r\n    require(_tulipToken[i][garden].planted[msg.sender] == 0 && (_tulipToken[i][garden].periodFinish[msg.sender] == 0 || now > _tulipToken[i][garden].periodFinish[msg.sender]), \r\n    \"293\");//Claim your last decomposing reward!\r\n    require(i > 0, \"310\");//Cannot decompose a seed!\r\n\r\n    _token[i].safeTransferFrom(msg.sender, address(this), amount.mul(_decimalConverter));\r\n    _totalSupply[i] = _totalSupply[i].add(amount);\r\n    _tulipToken[i][garden].planted[msg.sender] = amount;\r\n    _tulipToken[i][garden].periodFinish[msg.sender] = now.add(1 * _timeScale);\r\n  \r\n    _tulipToken[i][garden].isDecomposing[msg.sender] = true;\r\n\r\n    emit Decomposing(msg.sender, amount);\r\n  }\r\n\r\n  // test morning\r\n  function claimDecompose(string memory name, uint8 garden) public {\r\n    uint8 i = tulipType(name);\r\n    require(_tulipToken[i][garden].isDecomposing[msg.sender], \"308\");//This token is not decomposing\r\n    require(i > 0, \"310\");//Cannot decompose a seed! //redundant\r\n    //require(_tulipToken[i][garden].planted[msg.sender] > 0, \"311\");//Cannot decompose 0\r\n    require(now > _tulipToken[i][garden].periodFinish[msg.sender], \"312\");//Cannot claim decomposition!\r\n\r\n    uint256 amount = _tulipToken[i][garden].planted[msg.sender].mul(_decimalConverter);\r\n    uint256 subAmount;\r\n    uint8 scalingCoef;\r\n    // Checks if token is pink (i = 1) or reds\r\n    if(i == 1){\r\n      subAmount = (amount * 4).div(5);\r\n      scalingCoef = 1;\r\n    }\r\n    else{\r\n      subAmount = (amount * 9).div(10);\r\n      scalingCoef = 100;\r\n    }\r\n\r\n    // Burns 80% or 90% + (50% * leftovers (this is gone forever from ecosystem)) \r\n    _token[i].contractBurn(address(this), subAmount + (amount - subAmount).div(2));\r\n    _totalDecomposed[i - 1] = _totalDecomposed[i - 1].add(amount.div(_decimalConverter));\r\n\r\n    // Mints the new amount of seeds to owners account\r\n    _token[0].contractMint(msg.sender, subAmount.mul(scalingCoef));\r\n    _totalGrown[0] = _totalGrown[0].add(amount.div(_decimalConverter).mul(scalingCoef));\r\n\r\n    // Transfers the remainder to us\r\n    _token[i].safeTransfer(_benefitiaryAddress, (amount - subAmount).div(2));\r\n    \r\n\r\n    _tulipToken[i][garden].planted[msg.sender] = 0;\r\n    _totalSupply[i] = _totalSupply[i].sub(amount.div(_decimalConverter));\r\n\r\n    _tulipToken[i][garden].isDecomposing[msg.sender] = false;\r\n\r\n    emit ClaimedDecomposing(msg.sender, subAmount);\r\n  }\r\n\r\n  /* ========== RESTRICTED FUNCTIONS ========== */\r\n\r\n      /* ========== internal functions ========== */\r\n\r\n  function addTokenOwner(address _tokenAddress, address _newOwner) external onlyOwner\r\n  {\r\n    //require(now > _epochBlockStart.add(30 * _timeScale), \"351\");//timelocked\" //No need anymore since community trust is made\r\n\r\n    TulipToken tempToken = TulipToken(_tokenAddress);\r\n    tempToken.addOwner(_newOwner);\r\n  }\r\n\r\n  function renounceTokenOwner(address _tokenAddress) external onlyOwner\r\n  {\r\n    //require(now > _epochBlockStart.add(30 * _timeScale), \"359\");//timelocked\" //No need anymore since community trust is made\r\n\r\n    TulipToken tempToken = TulipToken(_tokenAddress);\r\n    tempToken.renounceOwner();\r\n  }\r\n\r\n  function changeOwner(address _newOwner) external onlyOwner {\r\n    transferOwnership(_newOwner);\r\n  }\r\n\r\n  function changeBenefitiary(address _newOwner) external onlyOwner\r\n  {\r\n    //require(now > _epochBlockStart.add(30 * _timeScale), \"371\");//timelocked\" //No need anymore since community trust is made\r\n\r\n    _benefitiaryAddress = _newOwner;\r\n  }\r\n\r\n\r\n  /* ========== HELPER FUNCTIONS ========== */\r\n\r\n  function tulipType(string memory name) internal pure returns (uint8) {\r\n    if (keccak256(abi.encodePacked(name)) == keccak256(abi.encodePacked(\"sTLP\"))) {\r\n      return 0;\r\n    }\r\n    if (keccak256(abi.encodePacked(name)) == keccak256(abi.encodePacked(\"pTLP\"))) {\r\n      return 1;\r\n    }\r\n    if (keccak256(abi.encodePacked(name)) == keccak256(abi.encodePacked(\"rTLP\"))) {\r\n      return 2;\r\n    } else {\r\n      return 99;\r\n    }\r\n  }\r\n\r\n\r\n  function setTimeStamp(uint8 i, uint8 garden) internal{\r\n    if (i == 0) {\r\n      setRewardDurationSeeds(garden);\r\n    }\r\n    if (i == 1) {\r\n      _tulipToken[1][garden].periodFinish[msg.sender] = now.add(30 * _timeScale);\r\n    }\r\n    if (i == 2) {\r\n      _tulipToken[2][garden].periodFinish[msg.sender] = now.add(7 * _timeScale);\r\n    }\r\n  }\r\n\r\n\r\n  function zeroHoldings(uint8 i, uint8 garden) internal{\r\n    _totalSupply[i] = _totalSupply[i] - _tulipToken[i][garden].planted[msg.sender];\r\n    _tulipToken[i][garden].planted[msg.sender] = 0;\r\n    _tulipToken[i][garden].periodFinish[msg.sender] = 0;\r\n  }\r\n\r\n\r\n  function operationBurnMint(uint8 token, uint8 garden, uint256 amount) internal{\r\n      _token[token].contractBurn(address(this), _tulipToken[token][garden].planted[msg.sender].mul(_decimalConverter));\r\n      _totalBurnt[token] = _totalBurnt[token].add(_tulipToken[token][garden].planted[msg.sender]);\r\n      _totalGrowing[token] = _totalGrowing[token].sub(_tulipToken[token][garden].planted[msg.sender]);\r\n\r\n      _token[token + 1].contractMint(msg.sender, amount.mul(_decimalConverter));\r\n      _totalGrown[token + 1] = _totalGrown[token + 1].add(amount);\r\n  }\r\n\r\n\r\n  function utilityBedHarvest(uint8 token) internal returns(uint256[6] memory){\r\n    uint256[6] memory amount;\r\n\r\n     for(uint8 k; k < _tulipToken[0].length; k++){   \r\n       if(!_tulipToken[token][k].isDecomposing[msg.sender]) {\r\n        if (_tulipToken[token][k].planted[msg.sender] > 0 && now > _tulipToken[token][k].periodFinish[msg.sender]){\r\n              /* rTLP harvest condition */\r\n            if (token == 2) {\r\n              amount[0] = amount[0] + redTulipRewardAmount(k).div(_decimalConverter);\r\n              _tulipToken[token][k].periodFinish[msg.sender] = now.add(7 * _timeScale);\r\n            } \r\n            else {\r\n              /* pTLP harvest condition */\r\n              if(token == 1){\r\n                if(_tulipToken[token][k].forSeeds[msg.sender]){\r\n                  amount[0] = amount[0] + pinkTulipRewardAmount(k).div(_decimalConverter);\r\n                  _tulipToken[token][k].periodFinish[msg.sender] = now.add(7 * _timeScale);\r\n                }\r\n                else{\r\n                  amount[token + 1] = amount[token + 1] + _tulipToken[token][k].planted[msg.sender].div(100);\r\n                  amount[token + 3] = amount[token + 3] + _tulipToken[token][k].planted[msg.sender];\r\n                  zeroHoldings(token, k);\r\n                }\r\n              }\r\n              /* sTLP harvest condition */\r\n              else{\r\n                amount[token + 1] = amount[token + 1] + _tulipToken[token][k].planted[msg.sender];\r\n                amount[token + 3] = amount[token + 3] + _tulipToken[token][k].planted[msg.sender];\r\n                zeroHoldings(token, k);\r\n              }   \r\n            }\r\n        }\r\n          }     \r\n        }\r\n        return(amount);\r\n  }\r\n\r\n\r\n  function harvestHelper(string memory name, uint8 garden, bool withdrawing) internal {\r\n    uint8 i = tulipType(name);\r\n    if(!withdrawing){\r\n      require(_tulipToken[i][garden].planted[msg.sender] > 0, \"464\"); //Cannot harvest 0\r\n      require(now > _tulipToken[i][garden].periodFinish[msg.sender], \"465\");//Cannot harvest until bloomed!\r\n    }\r\n\r\n    uint256 tempAmount;\r\n\r\n    /* rTLP harvest condition */\r\n    if (i == 2) {\r\n      tempAmount = redTulipRewardAmount(garden);\r\n      _token[0].contractMint(msg.sender, tempAmount);\r\n      _tulipToken[i][garden].periodFinish[msg.sender] = now.add(7 * _timeScale);\r\n    } \r\n    else {\r\n      /* pTLP harvest condition */\r\n      if(i == 1){\r\n        if(_tulipToken[i][garden].forSeeds[msg.sender]){\r\n          tempAmount = pinkTulipRewardAmount(garden);\r\n          _token[0].contractMint(msg.sender, tempAmount);\r\n          _tulipToken[i][garden].periodFinish[msg.sender] = now.add(7 * _timeScale);\r\n        }\r\n        else{\r\n          tempAmount = _tulipToken[i][garden].planted[msg.sender].div(100);\r\n          operationBurnMint(i, garden, tempAmount);\r\n          zeroHoldings(i, garden);\r\n        }\r\n      }\r\n      /* sTLP harvest condition */\r\n      else{\r\n        tempAmount = _tulipToken[i][garden].planted[msg.sender];\r\n        operationBurnMint(i, garden, tempAmount);\r\n        zeroHoldings(i, garden);\r\n      }   \r\n    }\r\n \r\n    _totalGrowing[i] = _totalGrowing[i].sub(_tulipToken[i][garden].planted[msg.sender]);\r\n\r\n    emit RewardPaid(msg.sender, tempAmount);\r\n  }\r\n  /* ========== REAL FUNCTIONS ========== */\r\n  \r\n  function setRewardDurationSeeds(uint8 garden) internal returns (bool) {\r\n    uint256 timeSinceEpoch = ((now - _epochBlockStart) / 60 / 60 / 24 / 30) + 1;\r\n\r\n    if (timeSinceEpoch >= 7) {\r\n      _tulipToken[0][garden].periodFinish[msg.sender] = now.add(7 * _timeScale);\r\n      return true;\r\n    } else {\r\n      _tulipToken[0][garden].periodFinish[msg.sender] = now.add(\r\n        timeSinceEpoch.mul(1 * _timeScale)\r\n      );\r\n      return true;\r\n    }\r\n  }\r\n\r\n\r\n  function redTulipRewardAmount(uint8 garden) internal view returns (uint256) {\r\n    //ISSUE WAS HERE {}\r\n    uint256 timeSinceEpoch = (now - _tulipToken[2][garden].periodFinish[msg.sender].sub(7 * _timeScale)).div(60).div(60).div(24);\r\n    //uint256 timeSinceEpoch = (now - _tulipToken[2][garden].periodFinish[msg.sender].sub(7 * _timeScale));\r\n    uint256 amountWeeks = timeSinceEpoch.div(7);\r\n    uint256 value;\r\n\r\n    for (uint256 i = amountWeeks; i != 0; i--) {\r\n      uint256 tokens = 10;\r\n      value = value.add(tokens.mul(_decimalConverter));\r\n    }\r\n    \r\n    return value * _tulipToken[2][garden].planted[msg.sender];\r\n  }\r\n\r\n  /***************************ONLY WHEN forSeeds is TRUE*****************************8*/\r\n  function pinkTulipRewardAmount(uint8 garden) internal view returns (uint256) {\r\n    uint256 timeSinceEpoch = (now - _tulipToken[1][garden].periodFinish[msg.sender].sub(7 * _timeScale)).div(60).div(60).div(24);\r\n    //uint256 timeSinceEpoch = (now - _tulipToken[1][garden].periodFinish[msg.sender].sub(7 * _timeScale));\r\n    uint256 amountWeeks = timeSinceEpoch.div(7);\r\n    uint256 value;\r\n\r\n    for (uint256 i = amountWeeks; i != 0; i--) {\r\n      uint256 tokens = 10;\r\n\r\n      value = value.add(tokens.mul(_decimalConverter).div(500));\r\n    }\r\n    \r\n    return value * _tulipToken[1][garden].planted[msg.sender];\r\n  }\r\n\r\n  /* ========== EVENTS ========== */\r\n  event Staked(address indexed user, uint256 amount); //add timestamps\r\n  event Withdrawn(address indexed user, uint256 amount);\r\n  event RewardPaid(address indexed user, uint256 reward);\r\n  event Decomposing(address indexed user, uint256 amount);\r\n  event ClaimedDecomposing(address indexed user, uint256 reward);\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_seedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_basicTulipToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_advTulipToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"ClaimedDecomposing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Decomposing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"addTokenOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeBenefitiary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"garden\",\"type\":\"uint8\"}],\"name\":\"claimDecompose\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"garden\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"decompose\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"garden\",\"type\":\"uint8\"}],\"name\":\"getTotalpTLPHarvest\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"garden\",\"type\":\"uint8\"}],\"name\":\"getTotalrTLPHarvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"garden\",\"type\":\"uint8\"}],\"name\":\"getTotalsTLPHarvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"garden\",\"type\":\"uint8\"}],\"name\":\"growthRemaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"garden\",\"type\":\"uint8\"}],\"name\":\"harvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"harvestAllBeds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"garden\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"forSeeds\",\"type\":\"bool\"}],\"name\":\"plant\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"renounceTokenOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"garden\",\"type\":\"uint8\"}],\"name\":\"timeUntilNextTLP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"garden\",\"type\":\"uint8\"}],\"name\":\"totalBedSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"totalGardenSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"totalTLPBurnt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"totalTLPDecomposed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"totalTLPGrowing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"totalTLPGrown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"garden\",\"type\":\"uint8\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"GardenContractV2","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000003d1be3fef769399cce7e504e85324d622f23cf85000000000000000000000000d814e02e779a216c5abaa5789e624cc017fb0876000000000000000000000000f7070f533932b495ac859e910373d9f7bdf9569f","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://2ae1fb9db8b37b4362220824d4831d6c39395084761fa5dafa7e01cae157502b"}]}