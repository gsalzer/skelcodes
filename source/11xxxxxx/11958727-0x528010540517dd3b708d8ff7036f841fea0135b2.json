{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20Mintable}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\r\n    }\r\n}\r\n\r\n// File: contracts/interface/IAddressConfig.sol\r\n\r\n// SPDX-License-Identifier: MPL-2.0\r\npragma solidity >=0.5.17;\r\n\r\ninterface IAddressConfig {\r\n\tfunction token() external view returns (address);\r\n\r\n\tfunction allocator() external view returns (address);\r\n\r\n\tfunction allocatorStorage() external view returns (address);\r\n\r\n\tfunction withdraw() external view returns (address);\r\n\r\n\tfunction withdrawStorage() external view returns (address);\r\n\r\n\tfunction marketFactory() external view returns (address);\r\n\r\n\tfunction marketGroup() external view returns (address);\r\n\r\n\tfunction propertyFactory() external view returns (address);\r\n\r\n\tfunction propertyGroup() external view returns (address);\r\n\r\n\tfunction metricsGroup() external view returns (address);\r\n\r\n\tfunction metricsFactory() external view returns (address);\r\n\r\n\tfunction policy() external view returns (address);\r\n\r\n\tfunction policyFactory() external view returns (address);\r\n\r\n\tfunction policySet() external view returns (address);\r\n\r\n\tfunction policyGroup() external view returns (address);\r\n\r\n\tfunction lockup() external view returns (address);\r\n\r\n\tfunction lockupStorage() external view returns (address);\r\n\r\n\tfunction voteTimes() external view returns (address);\r\n\r\n\tfunction voteTimesStorage() external view returns (address);\r\n\r\n\tfunction voteCounter() external view returns (address);\r\n\r\n\tfunction voteCounterStorage() external view returns (address);\r\n\r\n\tfunction setAllocator(address _addr) external;\r\n\r\n\tfunction setAllocatorStorage(address _addr) external;\r\n\r\n\tfunction setWithdraw(address _addr) external;\r\n\r\n\tfunction setWithdrawStorage(address _addr) external;\r\n\r\n\tfunction setMarketFactory(address _addr) external;\r\n\r\n\tfunction setMarketGroup(address _addr) external;\r\n\r\n\tfunction setPropertyFactory(address _addr) external;\r\n\r\n\tfunction setPropertyGroup(address _addr) external;\r\n\r\n\tfunction setMetricsFactory(address _addr) external;\r\n\r\n\tfunction setMetricsGroup(address _addr) external;\r\n\r\n\tfunction setPolicyFactory(address _addr) external;\r\n\r\n\tfunction setPolicyGroup(address _addr) external;\r\n\r\n\tfunction setPolicySet(address _addr) external;\r\n\r\n\tfunction setPolicy(address _addr) external;\r\n\r\n\tfunction setToken(address _addr) external;\r\n\r\n\tfunction setLockup(address _addr) external;\r\n\r\n\tfunction setLockupStorage(address _addr) external;\r\n\r\n\tfunction setVoteTimes(address _addr) external;\r\n\r\n\tfunction setVoteTimesStorage(address _addr) external;\r\n\r\n\tfunction setVoteCounter(address _addr) external;\r\n\r\n\tfunction setVoteCounterStorage(address _addr) external;\r\n}\r\n\r\n// File: contracts/src/common/config/UsingConfig.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n/**\r\n * Module for using AddressConfig contracts.\r\n */\r\ncontract UsingConfig {\r\n\taddress private _config;\r\n\r\n\t/**\r\n\t * Initialize the argument as AddressConfig address.\r\n\t */\r\n\tconstructor(address _addressConfig) public {\r\n\t\t_config = _addressConfig;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the latest AddressConfig instance.\r\n\t */\r\n\tfunction config() internal view returns (IAddressConfig) {\r\n\t\treturn IAddressConfig(_config);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the latest AddressConfig address.\r\n\t */\r\n\tfunction configAddress() external view returns (address) {\r\n\t\treturn _config;\r\n\t}\r\n}\r\n\r\n// File: contracts/interface/IAllocator.sol\r\n\r\npragma solidity >=0.5.17;\r\n\r\ninterface IAllocator {\r\n\tfunction beforeBalanceChange(\r\n\t\taddress _property,\r\n\t\taddress _from,\r\n\t\taddress _to\r\n\t) external;\r\n\r\n\tfunction calculateMaxRewardsPerBlock() external view returns (uint256);\r\n}\r\n\r\n// File: contracts/interface/IProperty.sol\r\n\r\npragma solidity >=0.5.17;\r\n\r\ninterface IProperty {\r\n\tfunction author() external view returns (address);\r\n\r\n\tfunction changeAuthor(address _nextAuthor) external;\r\n\r\n\tfunction changeName(string calldata _name) external;\r\n\r\n\tfunction changeSymbol(string calldata _symbol) external;\r\n\r\n\tfunction withdraw(address _sender, uint256 _value) external;\r\n}\r\n\r\n// File: contracts/interface/IPropertyFactory.sol\r\n\r\npragma solidity >=0.5.17;\r\n\r\ninterface IPropertyFactory {\r\n\tfunction create(\r\n\t\tstring calldata _name,\r\n\t\tstring calldata _symbol,\r\n\t\taddress _author\r\n\t) external returns (address);\r\n\r\n\tfunction createAndAuthenticate(\r\n\t\tstring calldata _name,\r\n\t\tstring calldata _symbol,\r\n\t\taddress _market,\r\n\t\tstring calldata _args1,\r\n\t\tstring calldata _args2,\r\n\t\tstring calldata _args3\r\n\t) external returns (bool);\r\n\r\n\tfunction createChangeAuthorEvent(address _old, address _new) external;\r\n\r\n\tfunction createChangeNameEvent(string calldata _old, string calldata _new)\r\n\t\texternal;\r\n\r\n\tfunction createChangeSymbolEvent(string calldata _old, string calldata _new)\r\n\t\texternal;\r\n}\r\n\r\n// File: contracts/interface/IPolicy.sol\r\n\r\npragma solidity >=0.5.17;\r\n\r\ninterface IPolicy {\r\n\tfunction rewards(uint256 _lockups, uint256 _assets)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256);\r\n\r\n\tfunction holdersShare(uint256 _amount, uint256 _lockups)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256);\r\n\r\n\tfunction authenticationFee(uint256 _assets, uint256 _propertyAssets)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256);\r\n\r\n\tfunction marketApproval(uint256 _agree, uint256 _opposite)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (bool);\r\n\r\n\tfunction policyApproval(uint256 _agree, uint256 _opposite)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (bool);\r\n\r\n\tfunction marketVotingBlocks() external view returns (uint256);\r\n\r\n\tfunction policyVotingBlocks() external view returns (uint256);\r\n\r\n\tfunction shareOfTreasury(uint256 _supply) external view returns (uint256);\r\n\r\n\tfunction treasury() external view returns (address);\r\n}\r\n\r\n// File: contracts/src/property/Property.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * A contract that represents the assets of the user and collects staking from the stakers.\r\n * Property contract inherits ERC20.\r\n * Holders of Property contracts(tokens) receive holder rewards according to their share.\r\n */\r\ncontract Property is ERC20, UsingConfig, IProperty {\r\n\tusing SafeMath for uint256;\r\n\tuint8 private constant PROPERTY_DECIMALS = 18;\r\n\tuint256 private constant SUPPLY = 10000000000000000000000000;\r\n\taddress private __author;\r\n\tstring private __name;\r\n\tstring private __symbol;\r\n\tuint8 private __decimals;\r\n\r\n\t/**\r\n\t * @dev Initializes the passed value as AddressConfig address, author address, token name, and token symbol.\r\n\t * @param _config AddressConfig address.\r\n\t * @param _own The author address.\r\n\t * @param _name The name of the new Property.\r\n\t * @param _symbol The symbol of the new Property.\r\n\t */\r\n\tconstructor(\r\n\t\taddress _config,\r\n\t\taddress _own,\r\n\t\tstring memory _name,\r\n\t\tstring memory _symbol\r\n\t) public UsingConfig(_config) {\r\n\t\t/**\r\n\t\t * Validates the sender is PropertyFactory contract.\r\n\t\t */\r\n\t\trequire(\r\n\t\t\tmsg.sender == config().propertyFactory(),\r\n\t\t\t\"this is illegal address\"\r\n\t\t);\r\n\t\t/**\r\n\t\t * Sets the author.\r\n\t\t */\r\n\t\t__author = _own;\r\n\r\n\t\t/**\r\n\t\t * Sets the ERO20 attributes\r\n\t\t */\r\n\t\t__name = _name;\r\n\t\t__symbol = _symbol;\r\n\t\t__decimals = PROPERTY_DECIMALS;\r\n\r\n\t\t/**\r\n\t\t * Mints to the author and  treasury contract.\r\n\t\t */\r\n\t\tIPolicy policy = IPolicy(config().policy());\r\n\t\tuint256 toTreasury = policy.shareOfTreasury(SUPPLY);\r\n\t\tuint256 toAuthor = SUPPLY.sub(toTreasury);\r\n\t\trequire(toAuthor != 0, \"share of author is 0\");\r\n\t\t_mint(__author, toAuthor);\r\n\t\t_mint(policy.treasury(), toTreasury);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Throws if called by any account other than the author.\r\n\t */\r\n\tmodifier onlyAuthor() {\r\n\t\trequire(msg.sender == __author, \"illegal sender\");\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the name of the author.\r\n\t * @return The the author address.\r\n\t */\r\n\tfunction author() external view returns (address) {\r\n\t\treturn __author;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the name of the token.\r\n\t * @return The name of the token.\r\n\t */\r\n\tfunction name() external view returns (string memory) {\r\n\t\treturn __name;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the symbol of the token, usually a shorter version of the name.\r\n\t * @return The symbol of the token, usually a shorter version of the name.\r\n\t */\r\n\tfunction symbol() external view returns (string memory) {\r\n\t\treturn __symbol;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the number of decimals used to get its user representation.\r\n\t * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n\t * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n\t *\r\n\t * Tokens usually opt for a value of 18, imitating the relationship between\r\n\t * Ether and Wei.\r\n\t *\r\n\t * NOTE: This information is only used for _display_ purposes: it in\r\n\t * no way affects any of the arithmetic of the contract, including\r\n\t * {IERC20-balanceOf} and {IERC20-transfer}.\r\n\t * @return The number of decimals used to get its user representation.\r\n\t */\r\n\tfunction decimals() external view returns (uint8) {\r\n\t\treturn __decimals;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Changes the author.\r\n\t * @param _nextAuthor The new author address.\r\n\t */\r\n\tfunction changeAuthor(address _nextAuthor) external onlyAuthor {\r\n\t\t/**\r\n\t\t * save author information\r\n\t\t */\r\n\t\tIPropertyFactory(config().propertyFactory()).createChangeAuthorEvent(\r\n\t\t\t__author,\r\n\t\t\t_nextAuthor\r\n\t\t);\r\n\r\n\t\t/**\r\n\t\t * Changes the author.\r\n\t\t */\r\n\t\t__author = _nextAuthor;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Changes the name.\r\n\t * @param _name The new name.\r\n\t */\r\n\tfunction changeName(string calldata _name) external onlyAuthor {\r\n\t\tIPropertyFactory(config().propertyFactory()).createChangeNameEvent(\r\n\t\t\t__name,\r\n\t\t\t_name\r\n\t\t);\r\n\r\n\t\t__name = _name;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Changes the symbol.\r\n\t * @param _symbol The new symbol.\r\n\t */\r\n\tfunction changeSymbol(string calldata _symbol) external onlyAuthor {\r\n\t\tIPropertyFactory(config().propertyFactory()).createChangeSymbolEvent(\r\n\t\t\t__symbol,\r\n\t\t\t_symbol\r\n\t\t);\r\n\r\n\t\t__symbol = _symbol;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Hook on `transfer` and call `Withdraw.beforeBalanceChange` function.\r\n\t * @param _to The recipient address.\r\n\t * @param _value The transfer amount.\r\n\t */\r\n\tfunction transfer(address _to, uint256 _value) public returns (bool) {\r\n\t\t/**\r\n\t\t * Validates the destination is not 0 address.\r\n\t\t */\r\n\t\trequire(_to != address(0), \"this is illegal address\");\r\n\t\trequire(_value != 0, \"illegal transfer value\");\r\n\r\n\t\t/**\r\n\t\t * Calls Withdraw contract via Allocator contract.\r\n\t\t * Passing through the Allocator contract is due to the historical reason for the old Property contract.\r\n\t\t */\r\n\t\tIAllocator(config().allocator()).beforeBalanceChange(\r\n\t\t\taddress(this),\r\n\t\t\tmsg.sender,\r\n\t\t\t_to\r\n\t\t);\r\n\r\n\t\t/**\r\n\t\t * Calls the transfer of ERC20.\r\n\t\t */\r\n\t\t_transfer(msg.sender, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Hook on `transferFrom` and call `Withdraw.beforeBalanceChange` function.\r\n\t * @param _from The source address.\r\n\t * @param _to The recipient address.\r\n\t * @param _value The transfer amount.\r\n\t */\r\n\tfunction transferFrom(\r\n\t\taddress _from,\r\n\t\taddress _to,\r\n\t\tuint256 _value\r\n\t) public returns (bool) {\r\n\t\t/**\r\n\t\t * Validates the source and destination is not 0 address.\r\n\t\t */\r\n\t\trequire(_from != address(0), \"this is illegal address\");\r\n\t\trequire(_to != address(0), \"this is illegal address\");\r\n\t\trequire(_value != 0, \"illegal transfer value\");\r\n\r\n\t\t/**\r\n\t\t * Calls Withdraw contract via Allocator contract.\r\n\t\t * Passing through the Allocator contract is due to the historical reason for the old Property contract.\r\n\t\t */\r\n\t\tIAllocator(config().allocator()).beforeBalanceChange(\r\n\t\t\taddress(this),\r\n\t\t\t_from,\r\n\t\t\t_to\r\n\t\t);\r\n\r\n\t\t/**\r\n\t\t * Calls the transfer of ERC20.\r\n\t\t */\r\n\t\t_transfer(_from, _to, _value);\r\n\r\n\t\t/**\r\n\t\t * Reduces the allowance amount.\r\n\t\t */\r\n\t\tuint256 allowanceAmount = allowance(_from, msg.sender);\r\n\t\t_approve(\r\n\t\t\t_from,\r\n\t\t\tmsg.sender,\r\n\t\t\tallowanceAmount.sub(\r\n\t\t\t\t_value,\r\n\t\t\t\t\"ERC20: transfer amount exceeds allowance\"\r\n\t\t\t)\r\n\t\t);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Transfers the staking amount to the original owner.\r\n\t * @param _sender The Property Contract address as the source.\r\n\t * @param _value The transfer amount.\r\n\t */\r\n\tfunction withdraw(address _sender, uint256 _value) external {\r\n\t\t/**\r\n\t\t * Validates the sender is Lockup contract.\r\n\t\t */\r\n\t\trequire(msg.sender == config().lockup(), \"this is illegal address\");\r\n\r\n\t\t/**\r\n\t\t * Transfers the passed amount to the original owner.\r\n\t\t */\r\n\t\tERC20 devToken = ERC20(config().token());\r\n\t\tbool result = devToken.transfer(_sender, _value);\r\n\t\trequire(result, \"dev transfer failed\");\r\n\t}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_config\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_own\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"author\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nextAuthor\",\"type\":\"address\"}],\"name\":\"changeAuthor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"changeName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"changeSymbol\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"configAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Property","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000001d415aa39d647834786eb9b5a333a50e9935b79600000000000000000000000053236cf2c19470f8b9be001534111e001513be4f000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000004486944650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044849444500000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MPL-2.0","Proxy":"0","Implementation":"","SwarmSource":"bzzr://2457b57d8ba163deb038941321b8d6381cd4d78c2bfaf8209650b693c7b15565"}]}