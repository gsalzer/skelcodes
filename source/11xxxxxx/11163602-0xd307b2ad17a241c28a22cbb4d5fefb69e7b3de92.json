{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.15;\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\ncontract IERC20 {\r\n    function totalSupply() public view returns (uint);\r\n    function balanceOf(address tokenOwner) public view returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\ncontract NMTLiquidityReward {\r\n    using SafeMath for uint256;\r\n    // Token properties\r\n    address public UNITokenAddr;\r\n    address public PassTokenAddr;\r\n    // Balances for each account\r\n    mapping (address => uint256) depositAmount;\r\n    mapping (address => uint256) depositTime;\r\n    mapping (address => uint256) rewardAmount;\r\n    address[] public stakers;\r\n    uint256 public rewardPercent;\r\n    // Owner of Token\r\n    address public owner;\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    event DepositUNIToken(address indexed account, uint256 amount, uint256 time);\r\n    event WithdrawUNIToken(address indexed account, uint256 amount, uint256 time);\r\n    event ClaimReward(address indexed account, uint256 amount, uint256 time);\r\n    // Constructor\r\n    constructor(address UNITokenAddress, address _PassTokenAddr, uint256 _rewardPercent) public {\r\n        owner = msg.sender;\r\n        UNITokenAddr = UNITokenAddress;\r\n        PassTokenAddr = _PassTokenAddr;\r\n        rewardPercent = _rewardPercent;\r\n    }\r\n    function setOwner(address _owner) public onlyOwner {\r\n        require(_owner != address(0x0));\r\n        owner = _owner;\r\n    }\r\n    function reward(address user) public view returns (uint256 reward) {\r\n        return rewardAmount[user];\r\n    }\r\n    function stakedAmount(address user) public view returns (uint256 stakedAmount) {\r\n        return depositAmount[user];\r\n    }\r\n     function stakedTime(address user) public view returns (uint256 time) {\r\n        return depositTime[user];\r\n    }\r\n    function depositUNIToken(uint256 _amount) public {\r\n        require(IERC20(UNITokenAddr).allowance(msg.sender, address(this)) >= _amount, \"Reward Pool:INSUFFICIENT UNI-V2 TOKEN AMOUNT\");\r\n        IERC20(UNITokenAddr).transferFrom(msg.sender, address(this), _amount);\r\n        if (depositAmount[msg.sender] == 0 ) {\r\n            stakers.push(msg.sender);\r\n        }\r\n        depositAmount[msg.sender] = depositAmount[msg.sender].add(_amount);\r\n        depositTime[msg.sender] = now;\r\n        emit DepositUNIToken(msg.sender, _amount, now);\r\n    }\r\n    function withdrawUNIToken() public {\r\n        require(now >= depositTime[msg.sender] + 3 days, \"Reward Pool: LockTime is not over\");\r\n        require(depositAmount[msg.sender] > 0, \"Reward Pool: INSUFFICIENT Amount\");\r\n        rewardAmount[msg.sender] = depositAmount[msg.sender].mul(rewardPercent).div(100) * ((now - depositTime[msg.sender]).div(1 days));\r\n        IERC20(UNITokenAddr).transfer(msg.sender, depositAmount[msg.sender]);\r\n        depositAmount[msg.sender] = 0;\r\n        emit WithdrawUNIToken(msg.sender,  depositAmount[msg.sender], now);\r\n    }\r\n    function claimReward() public {\r\n        require(rewardAmount[msg.sender] > 0, \"Reward Pool: INSUFFICIENT NMT AMOUNT\");\r\n        IERC20(PassTokenAddr).transfer(msg.sender, rewardAmount[msg.sender]);\r\n        rewardAmount[msg.sender] = 0;\r\n        emit ClaimReward(msg.sender, rewardAmount[msg.sender], now);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"UNITokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_PassTokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPercent\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"ClaimReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"DepositUNIToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"WithdrawUNIToken\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"PassTokenAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UNITokenAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositUNIToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"reward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"stakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"stakedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawUNIToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"NMTLiquidityReward","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000026cf2e9c9b1dc3a0cf1d0726e36e19fe16b1e94f0000000000000000000000006c4522f0035bed2180b40f4c5d9dbaab64b41325000000000000000000000000000000000000000000000000000000000000010e","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://96899f92bc79cce24e2faf8d337f68f8b22ceff8942e7c30812f1bbea139bd50"}]}