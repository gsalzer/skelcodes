{"status":"1","message":"OK","result":[{"SourceCode":"// hevm: flattened sources of src/DssSpell.sol\r\npragma solidity 0.6.11;\r\n\r\n////// lib/dss-exec-lib/src/CollateralOpts.sol\r\n/* pragma solidity ^0.6.7; */\r\n\r\nstruct CollateralOpts {\r\n    bytes32 ilk;\r\n    address gem;\r\n    address join;\r\n    address flip;\r\n    address pip;\r\n    bool    isLiquidatable;\r\n    bool    isOSM;\r\n    bool    whitelistOSM;\r\n    uint256 ilkDebtCeiling;\r\n    uint256 minVaultAmount;\r\n    uint256 maxLiquidationAmount;\r\n    uint256 liquidationPenalty;\r\n    uint256 ilkStabilityFee;\r\n    uint256 bidIncrease;\r\n    uint256 bidDuration;\r\n    uint256 auctionDuration;\r\n    uint256 liquidationRatio;\r\n}\r\n\r\n////// lib/dss-exec-lib/src/DssAction.sol\r\n// SPDX-License-Identifier: AGPL-3.0-or-later\r\n//\r\n// DssAction.sol -- DSS Executive Spell Actions\r\n//\r\n// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity ^0.6.7; */\r\n/* pragma experimental ABIEncoderV2; */\r\n\r\n/* import \"./CollateralOpts.sol\"; */\r\n\r\n// https://github.com/makerdao/dss-chain-log\r\ninterface ChainlogLike {\r\n    function getAddress(bytes32) external view returns (address);\r\n}\r\n\r\ninterface RegistryLike {\r\n    function ilkData(bytes32) external returns (\r\n        uint256       pos,\r\n        address       gem,\r\n        address       pip,\r\n        address       join,\r\n        address       flip,\r\n        uint256       dec,\r\n        string memory name,\r\n        string memory symbol\r\n    );\r\n}\r\n\r\n// Includes Median and OSM functions\r\ninterface OracleLike {\r\n    function src() external view returns (address);\r\n    function lift(address[] calldata) external;\r\n    function drop(address[] calldata) external;\r\n    function setBar(uint256) external;\r\n    function kiss(address) external;\r\n    function diss(address) external;\r\n    function kiss(address[] calldata) external;\r\n    function diss(address[] calldata) external;\r\n}\r\n\r\nabstract contract DssAction {\r\n\r\n    address public immutable lib;\r\n    bool    public immutable officeHours;\r\n\r\n    // Changelog address applies to MCD deployments on\r\n    //        mainnet, kovan, rinkeby, ropsten, and goerli\r\n    address constant public LOG = 0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F;\r\n\r\n    constructor(address lib_, bool officeHours_) public {\r\n        lib = lib_;\r\n        officeHours = officeHours_;\r\n    }\r\n\r\n    // DssExec calls execute. We limit this function subject to officeHours modifier.\r\n    function execute() external limited {\r\n        actions();\r\n    }\r\n\r\n    // DssAction developer must override `actions()` and place all actions to be called inside.\r\n    //   The DssExec function will call this subject to the officeHours limiter\r\n    //   By keeping this function public we allow simulations of `execute()` on the actions outside of the cast time.\r\n    function actions() public virtual;\r\n\r\n    // Modifier required to\r\n    modifier limited {\r\n        if (officeHours) {\r\n            uint day = (block.timestamp / 1 days + 3) % 7;\r\n            require(day < 5, \"Can only be cast on a weekday\");\r\n            uint hour = block.timestamp / 1 hours % 24;\r\n            require(hour >= 14 && hour < 21, \"Outside office hours\");\r\n        }\r\n        _;\r\n    }\r\n\r\n    /****************************/\r\n    /*** Core Address Helpers ***/\r\n    /****************************/\r\n    function vat()        public view returns (address) { return getChangelogAddress(\"MCD_VAT\"); }\r\n    function cat()        public view returns (address) { return getChangelogAddress(\"MCD_CAT\"); }\r\n    function jug()        public view returns (address) { return getChangelogAddress(\"MCD_JUG\"); }\r\n    function pot()        public view returns (address) { return getChangelogAddress(\"MCD_POT\"); }\r\n    function vow()        public view returns (address) { return getChangelogAddress(\"MCD_VOW\"); }\r\n    function end()        public view returns (address) { return getChangelogAddress(\"MCD_END\"); }\r\n    function reg()        public view returns (address) { return getChangelogAddress(\"ILK_REGISTRY\"); }\r\n    function spot()       public view returns (address) { return getChangelogAddress(\"MCD_SPOT\"); }\r\n    function flap()       public view returns (address) { return getChangelogAddress(\"MCD_FLAP\"); }\r\n    function flop()       public view returns (address) { return getChangelogAddress(\"MCD_FLOP\"); }\r\n    function osmMom()     public view returns (address) { return getChangelogAddress(\"OSM_MOM\"); }\r\n    function govGuard()   public view returns (address) { return getChangelogAddress(\"GOV_GUARD\"); }\r\n    function flipperMom() public view returns (address) { return getChangelogAddress(\"FLIPPER_MOM\"); }\r\n    function autoLine()   public view returns (address) { return getChangelogAddress(\"MCD_IAM_AUTO_LINE\"); }\r\n\r\n    function getChangelogAddress(bytes32 _key) public view returns (address) {\r\n        return ChainlogLike(LOG).getAddress(_key);\r\n    }\r\n\r\n    function flip(bytes32 _ilk) public returns (address) {\r\n        (,,,, address _flip,,,) = RegistryLike(reg()).ilkData(_ilk);\r\n        return _flip;\r\n    }\r\n\r\n    function _dcall(bytes memory data) internal {\r\n        (bool ok,) = lib.delegatecall(data);\r\n        require(ok, \"fail\");\r\n    }\r\n\r\n    function libCall(string memory sig, address addr, address addr2) internal {\r\n        _dcall(abi.encodeWithSignature(sig, addr, addr2));\r\n    }\r\n\r\n    function libCall(string memory sig, address addr, bytes32 what, address addr2) internal {\r\n        _dcall(abi.encodeWithSignature(sig, addr, what, addr2));\r\n    }\r\n\r\n    function libCall(string memory sig, address addr, bytes32 what, bytes32 what2, address addr2) internal {\r\n        _dcall(abi.encodeWithSignature(sig, addr, what, what2, addr2));\r\n    }\r\n\r\n    function libCall(string memory sig, address addr, address[] memory arr) internal {\r\n        _dcall(abi.encodeWithSignature(sig, addr, arr));\r\n    }\r\n\r\n    function libCall(string memory sig, string memory what) internal {\r\n        _dcall(abi.encodeWithSignature(sig, what));\r\n    }\r\n\r\n    function libCall(string memory sig, bytes32 what, uint256 num) internal {\r\n        _dcall(abi.encodeWithSignature(sig, what, num));\r\n    }\r\n\r\n    function libCall(string memory sig, address mcd_addr, bytes32 what, uint256 num1, uint256 num2, uint256 num3) internal {\r\n        _dcall(abi.encodeWithSignature(sig, mcd_addr, what, num1, num2, num3));\r\n    }\r\n\r\n    function libCall(string memory sig, bytes32 what, address addr) internal {\r\n        _dcall(abi.encodeWithSignature(sig, what, addr));\r\n    }\r\n\r\n    function libCall(string memory sig, address mcd_addr) internal {\r\n        _dcall(abi.encodeWithSignature(sig, mcd_addr));\r\n    }\r\n\r\n    function libCall(string memory sig, address mcd_addr, uint256 num) internal {\r\n        _dcall(abi.encodeWithSignature(sig, mcd_addr, num));\r\n    }\r\n\r\n    function libCall(string memory sig, address mcd_addr, bytes32 what) internal {\r\n        _dcall(abi.encodeWithSignature(sig, mcd_addr, what));\r\n    }\r\n\r\n    function libCall(string memory sig, address mcd_addr, string memory what) internal {\r\n        _dcall(abi.encodeWithSignature(sig, mcd_addr, what));\r\n    }\r\n\r\n    function libCall(string memory sig, address mcd_addr, address addr, bytes32 what) internal {\r\n        _dcall(abi.encodeWithSignature(sig, mcd_addr, addr, what));\r\n    }\r\n\r\n    function libCall(string memory sig, address mcd_addr, bytes32 what, uint256 num) internal {\r\n        _dcall(abi.encodeWithSignature(sig, mcd_addr, what, num));\r\n    }\r\n\r\n    function libCall(string memory sig, address mcd_addr, bytes32 what, uint256 num, bool bool1) internal {\r\n        _dcall(abi.encodeWithSignature(sig, mcd_addr, what, num, bool1));\r\n    }\r\n\r\n    function libCall(string memory sig, address mcd_addr, address mcd_addr2, address addr, address addr2) internal {\r\n        _dcall(abi.encodeWithSignature(sig, mcd_addr, mcd_addr2, addr, addr2));\r\n    }\r\n\r\n    function libCall(string memory sig, address mcd_addr, address mcd_addr2, address mcd_addr3, address addr, address addr2) internal {\r\n        _dcall(abi.encodeWithSignature(sig, mcd_addr, mcd_addr2, mcd_addr3, addr, addr2));\r\n    }\r\n\r\n    function libCall(string memory sig, address mcd_addr, address mcd_addr2, address mcd_addr3, address mcd_addr4, bytes32 what, address addr, address addr2) internal {\r\n        _dcall(abi.encodeWithSignature(sig, mcd_addr, mcd_addr2, mcd_addr3, mcd_addr4, what, addr, addr2));\r\n    }\r\n\r\n    function libCall(\r\n        string memory sig, address _vat, address _cat, address _jug, address _end, address _spot, address _reg, bytes32 _ilk, address _gem, address _join, address _flip, address _pip\r\n    ) internal {\r\n        _dcall(abi.encodeWithSignature(sig, _vat, _cat, _jug, _end, _spot, _reg, _ilk, _gem, _join, _flip, _pip));\r\n    }\r\n\r\n    /****************************/\r\n    /*** Changelog Management ***/\r\n    /****************************/\r\n    function setChangelogAddress(bytes32 key, address value) internal {\r\n        libCall(\"setChangelogAddress(address,bytes32,address)\", LOG, key, value);\r\n    }\r\n\r\n    function setChangelogVersion(string memory version) internal {\r\n        libCall(\"setChangelogVersion(address,string)\", LOG, version);\r\n    }\r\n\r\n    function setChangelogIPFS(string memory ipfs) internal {\r\n        libCall(\"setChangelogIPFS(address,string)\", LOG, ipfs);\r\n    }\r\n\r\n    function setChangelogSHA256(string memory SHA256) internal {\r\n        libCall(\"setChangelogSHA256(address,string)\", LOG, SHA256);\r\n    }\r\n\r\n    /**********************/\r\n    /*** Authorizations ***/\r\n    /**********************/\r\n    function authorize(address base, address ward) internal virtual {\r\n        libCall(\"authorize(address,address)\", base, ward);\r\n    }\r\n\r\n    function deauthorize(address base, address ward) internal {\r\n        libCall(\"deauthorize(address,address)\", base, ward);\r\n    }\r\n\r\n    /**************************/\r\n    /*** Accumulating Rates ***/\r\n    /**************************/\r\n    function accumulateDSR() internal {\r\n        libCall(\"accumulateDSR(address)\", pot());\r\n    }\r\n\r\n    function accumulateCollateralStabilityFees(bytes32 ilk) internal {\r\n        libCall(\"accumulateCollateralStabilityFees(address,bytes32)\", jug(), ilk);\r\n    }\r\n\r\n    /*********************/\r\n    /*** Price Updates ***/\r\n    /*********************/\r\n    function updateCollateralPrice(bytes32 ilk) internal {\r\n        libCall(\"updateCollateralPrice(address,bytes32)\", spot(), ilk);\r\n    }\r\n\r\n    /****************************/\r\n    /*** System Configuration ***/\r\n    /****************************/\r\n    function setContract(address base, bytes32 what, address addr) internal {\r\n        libCall(\"setContract(address,bytes32,address)\", base, what, addr);\r\n    }\r\n\r\n    function setContract(address base, bytes32 ilk, bytes32 what, address addr) internal {\r\n        libCall(\"setContract(address,bytes32,bytes32,address)\", base, ilk, what, addr);\r\n    }\r\n\r\n    /******************************/\r\n    /*** System Risk Parameters ***/\r\n    /******************************/\r\n    function setGlobalDebtCeiling(uint256 amount) internal {\r\n        libCall(\"setGlobalDebtCeiling(address,uint256)\", vat(), amount);\r\n    }\r\n\r\n    function increaseGlobalDebtCeiling(uint256 amount) internal {\r\n        libCall(\"increaseGlobalDebtCeiling(address,uint256)\", vat(), amount);\r\n    }\r\n\r\n    function decreaseGlobalDebtCeiling(uint256 amount) internal {\r\n        libCall(\"decreaseGlobalDebtCeiling(address,uint256)\", vat(), amount);\r\n    }\r\n\r\n    function setDSR(uint256 rate) internal {\r\n        libCall(\"setDSR(address,uint256)\", pot(), rate);\r\n    }\r\n\r\n    function setSurplusAuctionAmount(uint256 amount) internal {\r\n        libCall(\"setSurplusAuctionAmount(address,uint256)\", vow(), amount);\r\n    }\r\n\r\n    function setSurplusBuffer(uint256 amount) internal {\r\n        libCall(\"setSurplusBuffer(address,uint256)\", vow(), amount);\r\n    }\r\n\r\n    function setMinSurplusAuctionBidIncrease(uint256 pct_bps) internal {\r\n        libCall(\"setMinSurplusAuctionBidIncrease(address,uint256)\", flap(), pct_bps);\r\n    }\r\n\r\n    function setSurplusAuctionBidDuration(uint256 duration) internal {\r\n        libCall(\"setSurplusAuctionBidDuration(address,uint256)\", flap(), duration);\r\n    }\r\n\r\n    function setSurplusAuctionDuration(uint256 duration) internal {\r\n        libCall(\"setSurplusAuctionDuration(address,uint256)\", flap(), duration);\r\n    }\r\n\r\n    function setDebtAuctionDelay(uint256 duration) internal {\r\n        libCall(\"setDebtAuctionDelay(address,uint256)\", vow(), duration);\r\n    }\r\n\r\n    function setDebtAuctionDAIAmount(uint256 amount) internal {\r\n        libCall(\"setDebtAuctionDAIAmount(address,uint256)\", vow(), amount);\r\n    }\r\n\r\n    function setDebtAuctionMKRAmount(uint256 amount) internal {\r\n        libCall(\"setDebtAuctionMKRAmount(address,uint256)\", vow(), amount);\r\n    }\r\n\r\n    function setMinDebtAuctionBidIncrease(uint256 pct_bps) internal {\r\n        libCall(\"setMinDebtAuctionBidIncrease(address,uint256)\", flop(), pct_bps);\r\n    }\r\n\r\n    function setDebtAuctionBidDuration(uint256 duration) internal {\r\n        libCall(\"setDebtAuctionBidDuration(address,uint256)\", flop(), duration);\r\n    }\r\n\r\n    function setDebtAuctionDuration(uint256 duration) internal {\r\n        libCall(\"setDebtAuctionDuration(address,uint256)\", flop(), duration);\r\n    }\r\n\r\n    function setDebtAuctionMKRIncreaseRate(uint256 pct_bps) internal {\r\n        libCall(\"setDebtAuctionMKRIncreaseRate(address,uint256)\", flop(), pct_bps);\r\n    }\r\n\r\n    function setMaxTotalDAILiquidationAmount(uint256 amount) internal {\r\n        libCall(\"setMaxTotalDAILiquidationAmount(address,uint256)\", cat(), amount);\r\n    }\r\n\r\n    function setEmergencyShutdownProcessingTime(uint256 duration) internal {\r\n        libCall(\"setEmergencyShutdownProcessingTime(address,uint256)\", end(), duration);\r\n    }\r\n\r\n    function setGlobalStabilityFee(uint256 rate) internal {\r\n        libCall(\"setGlobalStabilityFee(address,uint256)\", jug(), rate);\r\n    }\r\n\r\n    function setDAIReferenceValue(uint256 value) internal {\r\n        libCall(\"setDAIReferenceValue(address,uint256)\", spot(),value);\r\n    }\r\n\r\n    /*****************************/\r\n    /*** Collateral Management ***/\r\n    /*****************************/\r\n    function setIlkDebtCeiling(bytes32 ilk, uint256 amount) internal {\r\n        libCall(\"setIlkDebtCeiling(address,bytes32,uint256)\", vat(), ilk, amount);\r\n    }\r\n\r\n    function increaseIlkDebtCeiling(bytes32 ilk, uint256 amount) internal {\r\n        libCall(\"increaseIlkDebtCeiling(address,bytes32,uint256,bool)\", vat(), ilk, amount, true);\r\n    }\r\n\r\n    function decreaseIlkDebtCeiling(bytes32 ilk, uint256 amount) internal {\r\n        libCall(\"decreaseIlkDebtCeiling(address,bytes32,uint256,bool)\", vat(), ilk, amount, true);\r\n    }\r\n\r\n    function setIlkAutoLineParameters(bytes32 ilk, uint256 amount, uint256 gap, uint256 ttl) internal {\r\n        libCall(\"setIlkAutoLineParameters(address,bytes32,uint256,uint256,uint256)\", autoLine(), ilk, amount, gap, ttl);\r\n    }\r\n\r\n    function setIlkAutoLineDebtCeiling(bytes32 ilk, uint256 amount) internal {\r\n        libCall(\"setIlkAutoLineDebtCeiling(address,bytes32,uint256)\", autoLine(), ilk, amount);\r\n    }\r\n\r\n    function removeIlkFromAutoLine(bytes32 ilk) internal {\r\n        libCall(\"removeIlkFromAutoLine(address,bytes32)\", autoLine(), ilk);\r\n    }\r\n\r\n    function setIlkMinVaultAmount(bytes32 ilk, uint256 amount) internal {\r\n        libCall(\"setIlkMinVaultAmount(address,bytes32,uint256)\", vat(), ilk, amount);\r\n    }\r\n\r\n    function setIlkLiquidationPenalty(bytes32 ilk, uint256 pct_bps) internal {\r\n        libCall(\"setIlkLiquidationPenalty(address,bytes32,uint256)\", cat(), ilk, pct_bps);\r\n    }\r\n\r\n    function setIlkMaxLiquidationAmount(bytes32 ilk, uint256 amount) internal {\r\n        libCall(\"setIlkMaxLiquidationAmount(address,bytes32,uint256)\", cat(), ilk, amount);\r\n    }\r\n\r\n    function setIlkLiquidationRatio(bytes32 ilk, uint256 pct_bps) internal {\r\n        libCall(\"setIlkLiquidationRatio(address,bytes32,uint256)\", spot(), ilk, pct_bps);\r\n    }\r\n\r\n    function setIlkMinAuctionBidIncrease(bytes32 ilk, uint256 pct_bps) internal {\r\n        libCall(\"setIlkMinAuctionBidIncrease(address,uint256)\", flip(ilk), pct_bps);\r\n    }\r\n\r\n    function setIlkBidDuration(bytes32 ilk, uint256 duration) internal {\r\n        libCall(\"setIlkBidDuration(address,uint256)\", flip(ilk), duration);\r\n    }\r\n\r\n    function setIlkAuctionDuration(bytes32 ilk, uint256 duration) internal {\r\n        libCall(\"setIlkAuctionDuration(address,uint256)\", flip(ilk), duration);\r\n    }\r\n\r\n    function setIlkStabilityFee(bytes32 ilk, uint256 rate) internal {\r\n        libCall(\"setIlkStabilityFee(address,bytes32,uint256,bool)\", jug(), ilk, rate, true);\r\n    }\r\n\r\n    /***********************/\r\n    /*** Core Management ***/\r\n    /***********************/\r\n    function updateCollateralAuctionContract(bytes32 ilk, address newFlip, address oldFlip) internal {\r\n        libCall(\"updateCollateralAuctionContract(address,address,address,address,bytes32,address,address)\", vat(), cat(), end(), flipperMom(), ilk, newFlip, oldFlip);\r\n    }\r\n\r\n    function updateSurplusAuctionContract(address newFlap, address oldFlap) internal {\r\n        libCall(\"updateSurplusAuctionContract(address,address,address,address)\", vat(), vow(), newFlap, oldFlap);\r\n    }\r\n\r\n    function updateDebtAuctionContract(address newFlop, address oldFlop) internal {\r\n        libCall(\"updateDebtAuctionContract(address,address,address,address,address)\", vat(), vow(), govGuard(), newFlop, oldFlop);\r\n    }\r\n\r\n    /*************************/\r\n    /*** Oracle Management ***/\r\n    /*************************/\r\n    function addWritersToMedianWhitelist(address medianizer, address[] memory feeds) internal {\r\n        libCall(\"addWritersToMedianWhitelist(address,address[])\", medianizer, feeds);\r\n    }\r\n\r\n    function removeWritersFromMedianWhitelist(address medianizer, address[] memory feeds) internal {\r\n        libCall(\"removeWritersFromMedianWhitelist(address,address[])\", medianizer, feeds);\r\n    }\r\n\r\n    function addReadersToMedianWhitelist(address medianizer, address[] memory readers) internal {\r\n        libCall(\"addReadersToMedianWhitelist(address,address[])\", medianizer, readers);\r\n    }\r\n\r\n    function addReaderToMedianWhitelist(address medianizer, address reader) internal {\r\n        libCall(\"addReaderToMedianWhitelist(address,address)\", medianizer, reader);\r\n    }\r\n\r\n    function removeReadersFromMedianWhitelist(address medianizer, address[] memory readers) internal {\r\n        libCall(\"removeReadersFromMedianWhitelist(address,address[])\", medianizer, readers);\r\n    }\r\n\r\n    function removeReaderFromMedianWhitelist(address medianizer, address reader) internal {\r\n        libCall(\"removeReaderFromMedianWhitelist(address,address)\", medianizer, reader);\r\n    }\r\n\r\n    function setMedianWritersQuorum(address medianizer, uint256 minQuorum) internal {\r\n        libCall(\"setMedianWritersQuorum(address,uint256)\", medianizer, minQuorum);\r\n    }\r\n\r\n    function addReaderToOSMWhitelist(address osm, address reader) internal {\r\n        libCall(\"addReaderToOSMWhitelist(address,address)\", osm, reader);\r\n    }\r\n\r\n    function removeReaderFromOSMWhitelist(address osm, address reader) internal {\r\n        libCall(\"removeReaderFromOSMWhitelist(address,address)\", osm, reader);\r\n    }\r\n\r\n    function allowOSMFreeze(address osm, bytes32 ilk) internal {\r\n        libCall(\"allowOSMFreeze(address,address,bytes32)\", osmMom(), osm, ilk);\r\n    }\r\n\r\n    /*****************************/\r\n    /*** Collateral Onboarding ***/\r\n    /*****************************/\r\n\r\n    // Minimum actions to onboard a collateral to the system with 0 line.\r\n    function addCollateralBase(bytes32 ilk, address gem, address join, address flipper, address pip) internal {\r\n        libCall(\r\n            \"addCollateralBase(address,address,address,address,address,address,bytes32,address,address,address,address)\",\r\n            vat(), cat(), jug(), end(), spot(), reg(), ilk, gem, join, flipper, pip\r\n        );\r\n    }\r\n\r\n    // Complete collateral onboarding logic.\r\n    function addNewCollateral(CollateralOpts memory co) internal {\r\n        // Add the collateral to the system.\r\n        addCollateralBase(co.ilk, co.gem, co.join, co.flip, co.pip);\r\n\r\n        // Allow FlipperMom to access to the ilk Flipper\r\n        authorize(co.flip, flipperMom());\r\n        // Disallow Cat to kick auctions in ilk Flipper\r\n        if(!co.isLiquidatable) deauthorize(flipperMom(), co.flip);\r\n\r\n        if(co.isOSM) { // If pip == OSM\r\n            // Allow OsmMom to access to the TOKEN OSM\r\n            authorize(co.pip, osmMom());\r\n            if (co.whitelistOSM) { // If median is src in OSM\r\n                // Whitelist OSM to read the Median data (only necessary if it is the first time the token is being added to an ilk)\r\n                addReaderToMedianWhitelist(address(OracleLike(co.pip).src()), co.pip);\r\n            }\r\n            // Whitelist Spotter to read the OSM data (only necessary if it is the first time the token is being added to an ilk)\r\n            addReaderToOSMWhitelist(co.pip, spot());\r\n            // Whitelist End to read the OSM data (only necessary if it is the first time the token is being added to an ilk)\r\n            addReaderToOSMWhitelist(co.pip, end());\r\n            // Set TOKEN OSM in the OsmMom for new ilk\r\n            allowOSMFreeze(co.pip, co.ilk);\r\n        }\r\n        // Increase the global debt ceiling by the ilk ceiling\r\n        increaseGlobalDebtCeiling(co.ilkDebtCeiling);\r\n        // Set the ilk debt ceiling\r\n        setIlkDebtCeiling(co.ilk, co.ilkDebtCeiling);\r\n        // Set the ilk dust\r\n        setIlkMinVaultAmount(co.ilk, co.minVaultAmount);\r\n        // Set the dunk size\r\n        setIlkMaxLiquidationAmount(co.ilk, co.maxLiquidationAmount);\r\n        // Set the ilk liquidation penalty\r\n        setIlkLiquidationPenalty(co.ilk, co.liquidationPenalty);\r\n\r\n        // Set the ilk stability fee\r\n        setIlkStabilityFee(co.ilk, co.ilkStabilityFee);\r\n\r\n        // Set the ilk percentage between bids\r\n        setIlkMinAuctionBidIncrease(co.ilk, co.bidIncrease);\r\n        // Set the ilk time max time between bids\r\n        setIlkBidDuration(co.ilk, co.bidDuration);\r\n        // Set the ilk max auction duration\r\n        setIlkAuctionDuration(co.ilk, co.auctionDuration);\r\n        // Set the ilk min collateralization ratio\r\n        setIlkLiquidationRatio(co.ilk, co.liquidationRatio);\r\n\r\n        // Update ilk spot value in Vat\r\n        updateCollateralPrice(co.ilk);\r\n    }\r\n}\r\n\r\n////// lib/dss-interfaces/src/dss/FlapAbstract.sol\r\n/* pragma solidity >=0.5.12; */\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/flap.sol\r\ninterface FlapAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function bids(uint256) external view returns (uint256, uint256, address, uint48, uint48);\r\n    function vat() external view returns (address);\r\n    function gem() external view returns (address);\r\n    function beg() external view returns (uint256);\r\n    function ttl() external view returns (uint48);\r\n    function tau() external view returns (uint48);\r\n    function kicks() external view returns (uint256);\r\n    function live() external view returns (uint256);\r\n    function file(bytes32, uint256) external;\r\n    function kick(uint256, uint256) external returns (uint256);\r\n    function tick(uint256) external;\r\n    function tend(uint256, uint256, uint256) external;\r\n    function deal(uint256) external;\r\n    function cage(uint256) external;\r\n    function yank(uint256) external;\r\n}\r\n\r\n////// lib/dss-interfaces/src/dss/OsmAbstract.sol\r\n/* pragma solidity >=0.5.12; */\r\n\r\n// https://github.com/makerdao/osm\r\ninterface OsmAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function stopped() external view returns (uint256);\r\n    function src() external view returns (address);\r\n    function hop() external view returns (uint16);\r\n    function zzz() external view returns (uint64);\r\n    function cur() external view returns (uint128, uint128);\r\n    function nxt() external view returns (uint128, uint128);\r\n    function bud(address) external view returns (uint256);\r\n    function stop() external;\r\n    function start() external;\r\n    function change(address) external;\r\n    function step(uint16) external;\r\n    function void() external;\r\n    function pass() external view returns (bool);\r\n    function poke() external;\r\n    function peek() external view returns (bytes32, bool);\r\n    function peep() external view returns (bytes32, bool);\r\n    function read() external view returns (bytes32);\r\n    function kiss(address) external;\r\n    function diss(address) external;\r\n    function kiss(address[] calldata) external;\r\n    function diss(address[] calldata) external;\r\n}\r\n\r\n////// src/DssSpell.sol\r\n// Copyright (C) 2021 Maker Ecosystem Growth Holdings, INC.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity 0.6.11; */\r\n\r\n/* import \"dss-exec-lib/DssAction.sol\"; */\r\n/* import \"lib/dss-interfaces/src/dss/OsmAbstract.sol\"; */\r\n/* import \"lib/dss-interfaces/src/dss/FlapAbstract.sol\"; */\r\n\r\ncontract SpellAction is DssAction {\r\n\r\n    // Provides a descriptive tag for bot consumption\r\n    // This should be modified weekly to provide a summary of the actions\r\n    // Hash: seth keccak -- \"$(wget https://raw.githubusercontent.com/makerdao/community/b902aac62c589dcc77c74eea6e6de8131c39547a/governance/votes/Executive%20vote%20-%20January%2015%2C%202021.md -q -O - 2>/dev/null)\"\r\n    string public constant description =\r\n        \"2021-01-15 MakerDAO Executive Spell | Hash: 0x2417a1d5c313f1acf1198d99d4356522cbe71e3253af1b7138b3448649c85129\";\r\n\r\n    // New flap.beg() value\r\n    uint256 constant NEW_BEG     = 1.04E18; // 4%\r\n\r\n    // Gnosis\r\n    address constant GNOSIS      = 0xD5885fbCb9a8a8244746010a3BC6F1C6e0269777;\r\n\r\n    // SET\r\n    address constant SET_AAVE    = 0x8b1C079f8192706532cC0Bf0C02dcC4fF40d045D;\r\n    address constant SET_LRC     = 0x1D5d9a2DDa0843eD9D8a9Bddc33F1fca9f9C64a0;\r\n    address constant SET_YFI     = 0x1686d01Bd776a1C2A3cCF1579647cA6D39dd2465;\r\n    address constant SET_ZRX     = 0xFF60D1650696238F81BE53D23b3F91bfAAad938f;\r\n    address constant SET_UNI     = 0x3c3Afa479d8C95CF0E1dF70449Bb5A14A3b7Af67;\r\n\r\n\r\n    // Many of the settings that change weekly rely on the rate accumulator\r\n    // described at https://docs.makerdao.com/smart-contract-modules/rates-module\r\n    // To check this yourself, use the following rate calculation (example 8%):\r\n    //\r\n    // $ bc -l <<< 'scale=27; e( l(1.08)/(60 * 60 * 24 * 365) )'\r\n    //\r\n    // A table of rates can be found at\r\n    //    https://ipfs.io/ipfs/QmefQMseb3AiTapiAKKexdKHig8wroKuZbmLtPLv4u2YwW\r\n    //\r\n    uint256 constant THREE_PT_FIVE_PERCENT_RATE = 1000000001090862085746321732;\r\n    uint256 constant FOUR_PERCENT_RATE          = 1000000001243680656318820312;\r\n    uint256 constant FIVE_PERCENT_RATE          = 1000000001547125957863212448;\r\n    uint256 constant SIX_PERCENT_RATE           = 1000000001847694957439350562;\r\n    uint256 constant SIX_PT_FIVE_PERCENT_RATE   = 1000000001996917783620820123;\r\n\r\n\r\n    /**\r\n        @dev constructor (required)\r\n        @param lib         address of the DssExecLib contract\r\n        @param officeHours true if officehours enabled\r\n    */\r\n    constructor(address lib, bool officeHours) public DssAction(lib, officeHours) {}\r\n\r\n    function actions() public override {\r\n\r\n        // Adjust FLAP Auction Parameters - January 11, 2021\r\n        // https://vote.makerdao.com/polling/QmT79sT6#poll-detail\r\n        FlapAbstract(flap()).file(\"beg\", NEW_BEG);\r\n        setSurplusAuctionBidDuration(1 hours);\r\n\r\n\r\n        // Increase the System Surplus Buffer - January 11, 2021\r\n        // https://vote.makerdao.com/polling/QmcXtm1d#poll-detail\r\n        setSurplusBuffer(10_000_000);\r\n\r\n\r\n        // Rates Proposal - January 11, 2021\r\n        // https://vote.makerdao.com/polling/QmfBQ4Bh#poll-detail\r\n        // Increase the ETH-A Stability Fee from 2.5% to 3.5%.\r\n        /// @dev setIlkStabilityFee will drip() the collateral\r\n        setIlkStabilityFee(\"ETH-A\",  THREE_PT_FIVE_PERCENT_RATE);\r\n        // Increase the ETH-B Stability Fee from 5% to 6.5%.\r\n        setIlkStabilityFee(\"ETH-B\",  SIX_PT_FIVE_PERCENT_RATE);\r\n        // Decrease the WBTC-A Stability Fee from 4.5% to 4%.\r\n        setIlkStabilityFee(\"WBTC-A\", FOUR_PERCENT_RATE);\r\n        // Decrease the YFI-A Stability Fee from 9% to 6%.\r\n        setIlkStabilityFee(\"YFI-A\",  SIX_PERCENT_RATE);\r\n        // Decrease the MANA-A Stability Fee from 10% to 5%.\r\n        setIlkStabilityFee(\"MANA-A\", FIVE_PERCENT_RATE);\r\n        // Decrease the AAVE-A Stability Fee from 6% to 4%.\r\n        setIlkStabilityFee(\"AAVE-A\", FOUR_PERCENT_RATE);\r\n\r\n\r\n        address PIP_YFI = getChangelogAddress(\"PIP_YFI\");\r\n        address PIP_ZRX = getChangelogAddress(\"PIP_ZRX\");\r\n\r\n        // Whitelist Gnosis on Multiple Oracles - January 11, 2021\r\n        // https://vote.makerdao.com/polling/QmNwTMcB#poll-detail\r\n        addReaderToOSMWhitelist(getChangelogAddress(\"PIP_WBTC\"), GNOSIS);\r\n        addReaderToOSMWhitelist(getChangelogAddress(\"PIP_LINK\"), GNOSIS);\r\n        addReaderToOSMWhitelist(getChangelogAddress(\"PIP_COMP\"), GNOSIS);\r\n        addReaderToOSMWhitelist(PIP_YFI,                         GNOSIS);\r\n        addReaderToOSMWhitelist(PIP_ZRX,                         GNOSIS);\r\n\r\n\r\n        // Whitelist Set Protocol on Multiple Oracles - January 11, 2021\r\n        // https://vote.makerdao.com/polling/QmTctW6i#poll-detail\r\n        addReaderToMedianWhitelist(OsmAbstract(getChangelogAddress(\"PIP_AAVE\")).src(), SET_AAVE);\r\n        addReaderToMedianWhitelist(OsmAbstract(getChangelogAddress(\"PIP_LRC\")).src(),  SET_LRC);\r\n        addReaderToMedianWhitelist(OsmAbstract(PIP_YFI).src(),                         SET_YFI);\r\n        addReaderToMedianWhitelist(OsmAbstract(PIP_ZRX).src(),                         SET_ZRX);\r\n        addReaderToMedianWhitelist(OsmAbstract(getChangelogAddress(\"PIP_UNI\")).src(),  SET_UNI);\r\n\r\n\r\n        // Limiting Governance Attack Surface for Stablecoins\r\n        // https://forum.makerdao.com/t/limiting-governance-attack-surface-for-stablecoins/6057\r\n        deauthorize(getChangelogAddress(\"MCD_FLIP_USDC_A\"),   flipperMom());\r\n        deauthorize(getChangelogAddress(\"MCD_FLIP_USDC_B\"),   flipperMom());\r\n        deauthorize(getChangelogAddress(\"MCD_FLIP_TUSD_A\"),   flipperMom());\r\n        deauthorize(getChangelogAddress(\"MCD_FLIP_PAXUSD_A\"), flipperMom());\r\n        deauthorize(getChangelogAddress(\"MCD_FLIP_GUSD_A\"),   flipperMom());\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lib\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"officeHours\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"LOG\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"actions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLine\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cat\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"end\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ilk\",\"type\":\"bytes32\"}],\"name\":\"flip\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flipperMom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flop\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getChangelogAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"govGuard\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jug\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lib\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"officeHours\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"osmMom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pot\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reg\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spot\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vat\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"SpellAction","CompilerVersion":"v0.6.11+commit.5ef660b1","OptimizationUsed":"1","Runs":"1","ConstructorArguments":"000000000000000000000000fc32e74e6e33d924bd2fbfc7a27b6f21770327600000000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://5eb5cdbd57f3498a69d4aa2be3b96f0560dfc99e1adaed88bc78884b3cbe01d4"}]}