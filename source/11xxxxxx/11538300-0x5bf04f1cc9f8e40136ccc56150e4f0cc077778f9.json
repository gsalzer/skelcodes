{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Products.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.3;\\n\\nimport './libraries/SafeMathExt.sol';\\n\\ncontract Products {\\n\\n    struct Product {\\n        uint256 maxLeverage;\\n        uint256 spread; // in basis points. 1 UNIT = 100%\\n        uint256 fundingRate;  // per block, in basis points. 1 UNIT = 100%. 5760 blocks in a day for 15s blocks\\n        bool isDisabled;\\n    }\\n\\n    mapping(bytes32 => Product) private products;\\n\\n    address public owner;\\n    bool private initialized;\\n\\n    event ProductRegistered(bytes32 symbol, uint256 leverage, uint256 spread, uint256 fundingRate);\\n    event NewLeverage(bytes32 symbol, uint256 newLeverage);\\n    event NewSpread(bytes32 symbol, uint256 newSpread);\\n    event NewFundingRate(bytes32 symbol, uint256 newFundingRate);\\n\\n    function initialize() public {\\n        require(!initialized, '!initialized');\\n        initialized = true;\\n        owner = msg.sender;\\n    }\\n\\n    function getMaxLeverage(\\n        bytes32 symbol,\\n        bool checkDisabled\\n    ) external view returns (uint256) {\\n        Product storage product = products[symbol];\\n        uint256 maxLeverage = product.maxLeverage;\\n        _validateProduct(maxLeverage);\\n        require(!checkDisabled || !product.isDisabled, '!disabled');\\n        return maxLeverage;\\n    }\\n\\n    function getSpread(bytes32 symbol) external view returns (uint256) {\\n        Product storage product = products[symbol];\\n        _validateProduct(product.maxLeverage);\\n        return product.spread;\\n    }\\n\\n    function getFundingRate(bytes32 symbol) external view returns (uint256) {\\n        Product storage product = products[symbol];\\n        _validateProduct(product.maxLeverage);\\n        return product.fundingRate;\\n    }\\n\\n    function getInfo(\\n        bytes32 symbol,\\n        bool checkDisabled\\n    ) external view returns (uint256 maxLeverage, uint256 spread, uint256 fundingRate) {\\n        Product memory product = products[symbol];\\n        _validateProduct(product.maxLeverage);\\n        require(!checkDisabled || !product.isDisabled, '!disabled');\\n        return (product.maxLeverage, product.spread, product.fundingRate);\\n    }\\n\\n    function disable(bytes32 symbol) external onlyOwner {\\n        Product storage product = products[symbol];\\n        _validateProduct(product.maxLeverage);\\n        product.isDisabled = true;\\n    }\\n\\n    function register(\\n        bytes32[] calldata symbols,\\n        uint256[] calldata maxLeverages,\\n        uint256[] calldata spreads,\\n        uint256[] calldata fundingRates\\n    ) external onlyOwner {\\n\\n        require(symbols.length <= 10, '!max_length');\\n        require(symbols.length == maxLeverages.length && maxLeverages.length == spreads.length && spreads.length == fundingRates.length, 'Products: WRONG_LENGTH');\\n\\n        for (uint256 i = 0; i < symbols.length; i++) {\\n\\n            bytes32 symbol = symbols[i];\\n            uint256 maxLeverage = maxLeverages[i];\\n            uint256 spread = spreads[i];\\n            uint256 fundingRate = fundingRates[i];\\n\\n            require(spread > 0, '!spread');\\n            require(maxLeverage >= SafeMathExt.UNIT8, '!leverage');\\n            require(symbol != bytes32(0) && symbol == bytes32(bytes12(symbol)), '!symbol');\\n            require(products[symbol].maxLeverage == 0, '!duplicate');\\n\\n            // Set product\\n            products[symbol] = Product(\\n                maxLeverage,\\n                spread,\\n                fundingRate,\\n                false\\n            );\\n\\n            // Emit event\\n            emit ProductRegistered(\\n                symbol, \\n                maxLeverage, \\n                spread, \\n                fundingRate\\n            );\\n\\n        }\\n\\n    }\\n\\n    function setLeverage(bytes32 symbol, uint256 newLeverage) external onlyOwner {\\n        require(newLeverage >= SafeMathExt.UNIT8, '!leverage');\\n        Product storage product = products[symbol];\\n        _validateProduct(product.maxLeverage);\\n        product.maxLeverage = newLeverage;\\n        emit NewLeverage(symbol, newLeverage);\\n    }\\n\\n    function updateSpread(bytes32 symbol, uint256 newSpread) external onlyOwner {\\n        require(newSpread > 0, '!spread');\\n        Product storage product = products[symbol];\\n        _validateProduct(product.maxLeverage);\\n        product.spread = newSpread;\\n        emit NewSpread(symbol, newSpread);\\n    }\\n\\n    function updateFundingRate(bytes32 symbol, uint256 newFundingRate) external onlyOwner {\\n        Product storage product = products[symbol];\\n        _validateProduct(product.maxLeverage);\\n        product.fundingRate = newFundingRate;\\n        emit NewFundingRate(symbol, newFundingRate);\\n    }\\n\\n    function _validateProduct(uint256 leverage) internal pure {\\n        require(leverage > 0, '!found');\\n    }\\n\\n    /* Modifiers */\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, '!authorized');\\n        _;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/SafeMathExt.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.3;\\n\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\n\\nlibrary SafeMathExt {\\n\\n    using SafeMath for uint256;\\n\\n    uint256 public constant UNIT8 = 1e8;\\n    uint256 public constant UNIT18 = 1e18;\\n\\n    function base10pow(uint8 exponent) internal pure returns (uint256) {\\n        // very common\\n        if (exponent == 18) return 1e18;\\n        if (exponent == 6) return 1e6;\\n\\n        uint256 result = 1;\\n\\n        while (exponent >= 10) {\\n            result = result.mul(uint256(1e10));\\n            exponent -= 10;\\n        }\\n\\n        while (exponent > 0) {\\n            result = result.mul(uint256(10));\\n            exponent--;\\n        }\\n\\n        return result;\\n    }\\n\\n    function mulDecimal(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return x.mul(y) / UNIT18;\\n    }\\n\\n    function divDecimal(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return x.mul(UNIT18).div(y);\\n    }\\n\\n    function mulDecimal8(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return x.mul(y) / UNIT8;\\n    }\\n\\n    function divDecimal8(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return x.mul(UNIT8).div(y);\\n    }\\n\\n    function safeUint64(uint256 x) internal pure returns (uint64) {\\n        require(x <= uint64(-1), 'SafeMath: cast overflow');\\n        return uint64(x);\\n    }\\n\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"symbol\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFundingRate\",\"type\":\"uint256\"}],\"name\":\"NewFundingRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"symbol\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLeverage\",\"type\":\"uint256\"}],\"name\":\"NewLeverage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"symbol\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSpread\",\"type\":\"uint256\"}],\"name\":\"NewSpread\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"symbol\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"spread\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fundingRate\",\"type\":\"uint256\"}],\"name\":\"ProductRegistered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"symbol\",\"type\":\"bytes32\"}],\"name\":\"disable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"symbol\",\"type\":\"bytes32\"}],\"name\":\"getFundingRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"symbol\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"checkDisabled\",\"type\":\"bool\"}],\"name\":\"getInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxLeverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spread\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundingRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"symbol\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"checkDisabled\",\"type\":\"bool\"}],\"name\":\"getMaxLeverage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"symbol\",\"type\":\"bytes32\"}],\"name\":\"getSpread\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"symbols\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"maxLeverages\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"spreads\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"fundingRates\",\"type\":\"uint256[]\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"symbol\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"newLeverage\",\"type\":\"uint256\"}],\"name\":\"setLeverage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"symbol\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"newFundingRate\",\"type\":\"uint256\"}],\"name\":\"updateFundingRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"symbol\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"newSpread\",\"type\":\"uint256\"}],\"name\":\"updateSpread\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Products","CompilerVersion":"v0.7.3+commit.9bfce1f6","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}