{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n}\r\n\r\ninterface IyVault {\r\n    function token() external view returns (address);\r\n    function deposit() external returns (uint);\r\n    function deposit(uint) external returns (uint);\r\n    function deposit(uint, address) external returns (uint);\r\n    function withdraw() external returns (uint);\r\n    function withdraw(uint) external returns (uint);\r\n    function withdraw(uint, address) external returns (uint);\r\n    function withdraw(uint, address, uint) external returns (uint);\r\n    function permit(address, address, uint, uint, bytes32) external view returns (bool);\r\n    function pricePerShare() external view returns (uint);\r\n    \r\n    function apiVersion() external view returns (string memory);\r\n    function totalAssets() external view returns (uint);\r\n    function maxAvailableShares() external view returns (uint);\r\n    function debtOutstanding() external view returns (uint);\r\n    function debtOutstanding(address strategy) external view returns (uint);\r\n    function creditAvailable() external view returns (uint);\r\n    function creditAvailable(address strategy) external view returns (uint);\r\n    function availableDepositLimit() external view returns (uint);\r\n    function expectedReturn() external view returns (uint);\r\n    function expectedReturn(address strategy) external view returns (uint);\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function totalSupply() external view returns (uint);\r\n    function governance() external view returns (address);\r\n    function management() external view returns (address);\r\n    function guardian() external view returns (address);\r\n    function guestList() external view returns (address);\r\n    function strategies(address) external view returns (uint, uint, uint, uint, uint, uint, uint, uint);\r\n    function withdrawalQueue(uint) external view returns (address);\r\n    function emergencyShutdown() external view returns (bool);\r\n    function depositLimit() external view returns (uint);\r\n    function debtRatio() external view returns (uint);\r\n    function totalDebt() external view returns (uint);\r\n    function lastReport() external view returns (uint);\r\n    function activation() external view returns (uint);\r\n    function rewards() external view returns (address);\r\n    function managementFee() external view returns (uint);\r\n    function performanceFee() external view returns (uint);\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ncontract yAffiliateTokenV2 {\r\n    using SafeERC20 for IERC20;\r\n    \r\n    /// @notice EIP-20 token name for this token\r\n    string public name;\r\n\r\n    /// @notice EIP-20 token symbol for this token\r\n    string public symbol;\r\n\r\n    /// @notice EIP-20 token decimals for this token\r\n    uint256 public decimals;\r\n\r\n    /// @notice Total number of tokens in circulation\r\n    uint public totalSupply = 0;\r\n\r\n    mapping(address => mapping (address => uint)) internal allowances;\r\n    mapping(address => uint) internal balances;\r\n\r\n    /// @notice The EIP-712 typehash for the contract's domain\r\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\"EIP712Domain(string name,uint chainId,address verifyingContract)\");\r\n    bytes32 public immutable DOMAINSEPARATOR;\r\n\r\n    /// @notice The EIP-712 typehash for the permit struct used by the contract\r\n    bytes32 public constant PERMIT_TYPEHASH = keccak256(\"Permit(address owner,address spender,uint value,uint nonce,uint deadline)\");\r\n\r\n    /// @notice A record of states for signing / validating signatures\r\n    mapping (address => uint) public nonces;\r\n\r\n    function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\r\n        require(n < 2**32, errorMessage);\r\n        return uint32(n);\r\n    }\r\n\r\n    /// @notice The standard EIP-20 transfer event\r\n    event Transfer(address indexed from, address indexed to, uint amount);\r\n    \r\n    /// @notice The standard EIP-20 approval event\r\n    event Approval(address indexed owner, address indexed spender, uint amount);\r\n    \r\n    function _mint(address dst, uint amount) internal {\r\n        // mint the amount\r\n        totalSupply += amount;\r\n        // transfer the amount to the recipient\r\n        balances[dst] += amount;\r\n        emit Transfer(address(0), dst, amount);\r\n    }\r\n    \r\n    function _burn(address dst, uint amount) internal {\r\n        // burn the amount\r\n        totalSupply -= amount;\r\n        // transfer the amount from the recipient\r\n        balances[dst] -= amount;\r\n        emit Transfer(dst, address(0), amount);\r\n    }\r\n    \r\n    address public affiliate;\r\n    address public governance;\r\n    address public pendingGovernance;\r\n    \r\n    address public immutable token;\r\n    address public immutable vault;\r\n    \r\n    constructor(address _governance, string memory _moniker, address _affiliate, address _token, address _vault) {\r\n        DOMAINSEPARATOR = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), _getChainId(), address(this)));\r\n        affiliate = _affiliate;\r\n        governance = _governance;\r\n        token = _token;\r\n        vault = _vault;\r\n        \r\n        name = string(abi.encodePacked(_moniker, \"-yearn \", IERC20(_token).name()));\r\n        symbol = string(abi.encodePacked(_moniker, \"-yv\", IERC20(_token).symbol()));\r\n        decimals = IERC20(_token).decimals();\r\n        \r\n        IERC20(_token).approve(_vault, type(uint).max);\r\n    }\r\n    \r\n    function resetApproval() external {\r\n        IERC20(token).approve(vault, 0);\r\n        IERC20(token).approve(vault, type(uint).max);\r\n    }\r\n    \r\n    function pricePerShare() external view returns (uint) {\r\n        return IyVault(vault).pricePerShare();\r\n    }\r\n    function apiVersion() external view returns (string memory) {\r\n        return IyVault(vault).apiVersion();\r\n    }\r\n    function totalAssets() external view returns (uint) {\r\n        return IyVault(vault).totalAssets();\r\n    }\r\n    function maxAvailableShares() external view returns (uint) {\r\n        return IyVault(vault).maxAvailableShares();\r\n    }\r\n    function debtOutstanding() external view returns (uint) {\r\n        return IyVault(vault).debtOutstanding();\r\n    }\r\n    function debtOutstanding(address strategy) external view returns (uint) {\r\n        return IyVault(vault).debtOutstanding(strategy);\r\n    }\r\n    function creditAvailable() external view returns (uint) {\r\n        return IyVault(vault).creditAvailable();\r\n    }\r\n    function creditAvailable(address strategy) external view returns (uint) {\r\n        return IyVault(vault).creditAvailable(strategy);\r\n    }\r\n    function availableDepositLimit() external view returns (uint) {\r\n        return IyVault(vault).availableDepositLimit();\r\n    }\r\n    function expectedReturn() external view returns (uint) {\r\n        return IyVault(vault).expectedReturn();\r\n    }\r\n    function expectedReturn(address strategy) external view returns (uint) {\r\n        return IyVault(vault).expectedReturn(strategy);\r\n    }\r\n    function vname() external view returns (string memory) {\r\n        return IyVault(vault).name();\r\n    }\r\n    function vsymbol() external view returns (string memory) {\r\n        return IyVault(vault).symbol();\r\n    }\r\n    function vdecimals() external view returns (uint) {\r\n        return IyVault(vault).decimals();\r\n    }\r\n    function vbalanceOf(address owner) external view returns (uint) {\r\n        return IyVault(vault).balanceOf(owner);\r\n    }\r\n    function vtotalSupply() external view returns (uint) {\r\n        return IyVault(vault).totalSupply();\r\n    }\r\n    function vgovernance() external view returns (address) {\r\n        return IyVault(vault).governance();\r\n    }\r\n    function management() external view returns (address) {\r\n        return IyVault(vault).management();\r\n    }\r\n    function guardian() external view returns (address) {\r\n        return IyVault(vault).guardian();\r\n    }\r\n    function guestList() external view returns (address) {\r\n        return IyVault(vault).guestList();\r\n    }\r\n    function strategies(address strategy) external view returns (\r\n        uint, uint, uint, uint, uint, uint, uint, uint) {\r\n        return IyVault(vault).strategies(strategy);\r\n    }\r\n    function withdrawalQueue(uint position) external view returns (address) {\r\n        return IyVault(vault).withdrawalQueue(position);\r\n    }\r\n    function emergencyShutdown() external view returns (bool) {\r\n        return IyVault(vault).emergencyShutdown();\r\n    }\r\n    function depositLimit() external view returns (uint) {\r\n        return IyVault(vault).depositLimit();\r\n    }\r\n    function debtRatio() external view returns (uint) {\r\n        return IyVault(vault).debtRatio();\r\n    }\r\n    function totalDebt() external view returns (uint) {\r\n        return IyVault(vault).totalDebt();\r\n    }\r\n    function lastReport() external view returns (uint) {\r\n        return IyVault(vault).lastReport();\r\n    }\r\n    function activation() external view returns (uint) {\r\n        return IyVault(vault).activation();\r\n    }\r\n    function rewards() external view returns (address) {\r\n        return IyVault(vault).rewards();\r\n    }\r\n    function managementFee() external view returns (uint) {\r\n        return IyVault(vault).managementFee();\r\n    }\r\n    function performanceFee() external view returns (uint) {\r\n        return IyVault(vault).performanceFee();\r\n    }\r\n    \r\n    function setGovernance(address _gov) external {\r\n        require(msg.sender == governance);\r\n        pendingGovernance = _gov;\r\n    } \r\n    \r\n    function acceptGovernance() external {\r\n        require(msg.sender == pendingGovernance);\r\n        governance = pendingGovernance;\r\n    }\r\n    \r\n    function currentContribution() external view returns (uint) {\r\n        return 1e18 * IERC20(vault).balanceOf(address(this)) / IERC20(vault).totalSupply();\r\n    }\r\n    \r\n    function setAffiliate(address _affiliate) external {\r\n        require(msg.sender == governance || msg.sender == affiliate);\r\n        affiliate = _affiliate;\r\n    }\r\n    \r\n    function deposit() external returns (uint) {\r\n        return _deposit(IERC20(token).balanceOf(msg.sender), msg.sender);\r\n    }\r\n    \r\n    function deposit(uint amount) external returns (uint) {\r\n        return _deposit(amount, msg.sender);\r\n    }\r\n    \r\n    function deposit(uint amount, address recipient) external returns (uint) {\r\n        return _deposit(amount, recipient);\r\n    }\r\n    \r\n    function _deposit(uint amount, address recipient) internal returns (uint) {\r\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\r\n        uint _shares = IyVault(vault).deposit(amount, address(this));\r\n        _mint(recipient, _shares);\r\n        return _shares;\r\n    }\r\n    \r\n    function withdraw() external returns (uint) {\r\n        return _withdraw(balances[msg.sender], msg.sender, 1);\r\n    }\r\n    \r\n    function withdraw(uint amount) external returns (uint) {\r\n        return _withdraw(amount, msg.sender, 1);\r\n    }\r\n    \r\n    function withdraw(uint amount, address recipient) external returns (uint) {\r\n        return _withdraw(amount, recipient, 1);\r\n    }\r\n    \r\n    function withdraw(uint amount, address recipient, uint maxLoss) external returns (uint) {\r\n       return  _withdraw(amount, recipient, maxLoss);\r\n    }\r\n    \r\n    function _withdraw(uint amount, address recipient, uint maxLoss) internal returns (uint) {\r\n        _burn(msg.sender, amount);\r\n        return IyVault(vault).withdraw(amount, recipient, maxLoss);\r\n    }\r\n\r\n    /**\r\n     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\r\n     * @param account The address of the account holding the funds\r\n     * @param spender The address of the account spending the funds\r\n     * @return The number of tokens approved\r\n     */\r\n    function allowance(address account, address spender) external view returns (uint) {\r\n        return allowances[account][spender];\r\n    }\r\n\r\n    /**\r\n     * @notice Approve `spender` to transfer up to `amount` from `src`\r\n     * @dev This will overwrite the approval amount for `spender`\r\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\r\n     * @param spender The address of the account which may transfer tokens\r\n     * @param amount The number of tokens that are approved (2^256-1 means infinite)\r\n     * @return Whether or not the approval succeeded\r\n     */\r\n    function approve(address spender, uint amount) external returns (bool) {\r\n        allowances[msg.sender][spender] = amount;\r\n\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Triggers an approval from owner to spends\r\n     * @param owner The address to approve from\r\n     * @param spender The address to be approved\r\n     * @param amount The number of tokens that are approved (2^256-1 means infinite)\r\n     * @param deadline The time at which to expire the signature\r\n     * @param v The recovery byte of the signature\r\n     * @param r Half of the ECDSA signature pair\r\n     * @param s Half of the ECDSA signature pair\r\n     */\r\n    function permit(address owner, address spender, uint amount, uint deadline, uint8 v, bytes32 r, bytes32 s) external {\r\n        bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, amount, nonces[owner]++, deadline));\r\n        bytes32 digest = keccak256(abi.encodePacked(\"\\x19\\x01\", DOMAINSEPARATOR, structHash));\r\n        address signatory = ecrecover(digest, v, r, s);\r\n        require(signatory != address(0), \"permit: signature\");\r\n        require(signatory == owner, \"permit: unauthorized\");\r\n        require(block.timestamp <= deadline, \"permit: expired\");\r\n\r\n        allowances[owner][spender] = amount;\r\n\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Get the number of tokens held by the `account`\r\n     * @param account The address of the account to get the balance of\r\n     * @return The number of tokens held\r\n     */\r\n    function balanceOf(address account) external view returns (uint) {\r\n        return balances[account];\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\r\n     * @param dst The address of the destination account\r\n     * @param amount The number of tokens to transfer\r\n     * @return Whether or not the transfer succeeded\r\n     */\r\n    function transfer(address dst, uint amount) external returns (bool) {\r\n        _transferTokens(msg.sender, dst, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer `amount` tokens from `src` to `dst`\r\n     * @param src The address of the source account\r\n     * @param dst The address of the destination account\r\n     * @param amount The number of tokens to transfer\r\n     * @return Whether or not the transfer succeeded\r\n     */\r\n    function transferFrom(address src, address dst, uint amount) external returns (bool) {\r\n        address spender = msg.sender;\r\n        uint spenderAllowance = allowances[src][spender];\r\n\r\n        if (spender != src && spenderAllowance != type(uint).max) {\r\n            uint newAllowance = spenderAllowance - amount;\r\n            allowances[src][spender] = newAllowance;\r\n\r\n            emit Approval(src, spender, newAllowance);\r\n        }\r\n\r\n        _transferTokens(src, dst, amount);\r\n        return true;\r\n    }\r\n\r\n    function _transferTokens(address src, address dst, uint amount) internal {\r\n        balances[src] -= amount;\r\n        balances[dst] += amount;\r\n        \r\n        emit Transfer(src, dst, amount);\r\n    }\r\n\r\n    function _getChainId() internal view returns (uint) {\r\n        uint chainId;\r\n        assembly { chainId := chainid() }\r\n        return chainId;\r\n    }\r\n}\r\n\r\ninterface IyRegistry {\r\n    function latestVault(address) external view returns (address);\r\n}\r\n\r\ncontract yAffiliateFactoryV2 {\r\n    using SafeERC20 for IERC20;\r\n    \r\n    address public governance;\r\n    address public pendingGovernance;\r\n    \r\n    IyRegistry constant public registry = IyRegistry(0xE15461B18EE31b7379019Dc523231C57d1Cbc18c);\r\n    \r\n    address[] public _yAffiliateTokens;\r\n    \r\n    mapping(address => mapping(address => address[])) affiliateVaults;\r\n    mapping(address => address[]) vaultTokens;\r\n    \r\n    function yAffiliateTokens() external view returns (address[] memory) {\r\n        return _yAffiliateTokens;\r\n    }\r\n    \r\n    function yvault(address token) external view returns (address) {\r\n        return registry.latestVault(token);\r\n    }\r\n    \r\n    constructor() {\r\n        governance = msg.sender;\r\n    }\r\n    \r\n    function lookupAffiliateTokens(address vault) external view returns (address[] memory) {\r\n        return vaultTokens[vault];\r\n    }\r\n    \r\n    function lookupAffiliateVault(address vault, address affiliate) external view returns (address[] memory) {\r\n        return affiliateVaults[vault][affiliate];\r\n    }\r\n    \r\n    function setGovernance(address _gov) external {\r\n        require(msg.sender == governance);\r\n        pendingGovernance = _gov;\r\n    } \r\n    \r\n    function acceptGovernance() external {\r\n        require(msg.sender == pendingGovernance);\r\n        governance = pendingGovernance;\r\n    }\r\n    \r\n    function deploy(string memory _moniker, address _affiliate, address _token) external {\r\n        address _vault = registry.latestVault(_token);\r\n        address _yAffiliateToken = address(new yAffiliateTokenV2(governance, _moniker, _affiliate, _token, _vault));\r\n        \r\n        _yAffiliateTokens.push(_yAffiliateToken);\r\n        affiliateVaults[_vault][_affiliate].push(_yAffiliateToken);\r\n        vaultTokens[_vault].push(_yAffiliateToken);\r\n    }\r\n    \r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_yAffiliateTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_moniker\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_affiliate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"deploy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"lookupAffiliateTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"affiliate\",\"type\":\"address\"}],\"name\":\"lookupAffiliateVault\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingGovernance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract IyRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yAffiliateTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"yvault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"yAffiliateFactoryV2","CompilerVersion":"v0.8.1+commit.df193b15","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://5344e5639616735c0804dbe8376a44a8319bff60a35f8407f802194d37e1f531"}]}