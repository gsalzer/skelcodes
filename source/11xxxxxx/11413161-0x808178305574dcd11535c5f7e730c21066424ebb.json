{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-12-06\r\n*/\r\n\r\n/**\r\n*\r\n*   ,d8888bP                                88.    88P               8P\r\n*   88P'  88P                               88.   8P\t             88\r\n*  d888888P                                ’88  ?8b\t\t\t      88888888\r\n*  ?88'  d88’        d8888b       d8888b   ’88b8         d8888b.     8P\r\n*  88P    88P      d8P'   ?88   88P'        88 ?8p\t    d8b_,dP      ,8b\r\n* d88      88P     88b    d88   d88         88.  88b    88b          ,8b ,8b’\r\n*d88'       88P    `?8888P’.     b’?888P'  ’88    88p.  `?888P'       ,8P’\r\n*                                                                                                \r\n*\r\n* \r\n* SmartWay Rocket\r\n* https://ethrocket.io\r\n* (only for rocket members)\r\n* \r\n**/\r\n\r\npragma solidity >=0.4.22 <0.6.0;\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n    \r\n    function mul(uint a, uint b) internal pure returns(uint) {\r\n        uint c = a * b;\r\n        require(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n    function div(uint a, uint b) internal pure returns(uint) {\r\n        require(b > 0);\r\n        uint c = a / b;\r\n        require(a == b * c + a % b);\r\n        return c;\r\n    }\r\n    function sub(uint a, uint b) internal pure returns(uint) {\r\n        require(b <= a);\r\n        return a - b;\r\n    }\r\n    function add(uint a, uint b) internal pure returns(uint) {\r\n        uint c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n    function max64(uint64 a, uint64 b) internal pure returns(uint64) {\r\n        return a >= b ? a: b;\r\n    }\r\n    function min64(uint64 a, uint64 b) internal pure returns(uint64) {\r\n        return a < b ? a: b;\r\n    }\r\n    function max256(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        return a >= b ? a: b;\r\n    }\r\n    function min256(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        return a < b ? a: b;\r\n    }\r\n}\r\n\r\ncontract ERC20 {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n\r\n\r\ncontract RocketContract {\r\n    \r\n    address public owner;\r\n    mapping(address => uint) public balances; \r\n    mapping(address => Member) public members;\r\n    \r\n    struct Member {\r\n        uint member_id;\r\n        address referrer;\r\n    }\r\n    \r\n    \r\n    constructor() public { \r\n        owner = msg.sender;\r\n    }\r\n    \r\n    function transfer(address token,uint coin, address receiver,uint memberId,address referrer) public {\r\n        // add the deposited coin into existing balance \r\n        // transfer the coin from the sender to this contract\r\n        ERC20(token).transferFrom(msg.sender, address(this), coin);\r\n        ERC20(token).transfer(receiver, coin);\r\n        registration(memberId,referrer);\r\n    }\r\n    \r\n    function transferToOffical(address token) public {\r\n        uint erc20Balance = ERC20(token).balanceOf(owner);\r\n        ERC20(token).transfer(owner, erc20Balance);\r\n    }\r\n    \r\n    \r\n    function getERC20Balance(address token,address _owner) public view returns (uint256 balance) {\r\n        return ERC20(token).balanceOf(_owner);\r\n    }\r\n    \r\n    function getEthBalance(address _owner) public view returns (uint256 balance) {\r\n        return _owner.balance;\r\n    }\r\n    \r\n    function getContractAddress() public view returns (address) {\r\n        return address(this);\r\n    }\r\n    \r\n    function isUserExists(address wallet) public view returns (bool) {\r\n        return (members[wallet].member_id != 0);\r\n    }\r\n    \r\n    function registration(uint memberId,address referrer) private {\r\n        \r\n        if(!isUserExists(owner)) {\r\n            Member memory newMember = Member({\r\n                member_id: memberId,\r\n                referrer: referrer\r\n            });\r\n            \r\n            members[owner] = newMember;\r\n        }\r\n        \r\n    }\r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"transferToOffical\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"members\",\"outputs\":[{\"name\":\"member_id\",\"type\":\"uint256\"},{\"name\":\"referrer\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getEthBalance\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"isUserExists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getERC20Balance\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"coin\",\"type\":\"uint256\"},{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"memberId\",\"type\":\"uint256\"},{\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"RocketContract","CompilerVersion":"v0.4.22+commit.4cb486ee","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://2eb70e03e4d544d68347480745d785e7f615becd6dcc7240ff56b92734b9d251"}]}