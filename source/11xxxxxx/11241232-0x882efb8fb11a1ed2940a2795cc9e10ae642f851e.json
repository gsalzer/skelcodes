{"status":"1","message":"OK","result":[{"SourceCode":"// _________  ________ _____________________                                             \r\n// \\_   ___ \\ \\_____  \\\\______   \\_   _____/                                             \r\n// /    \\  \\/  /   |   \\|       _/|    __)_                                              \r\n// \\     \\____/    |    \\    |   \\|        \\                                             \r\n//  \\______  /\\_______  /____|_  /_______  /                                             \r\n//         \\/         \\/       \\/        \\/                                              \r\n// ___________.____       _____    _________ ___ ___                                     \r\n// \\_   _____/|    |     /  _  \\  /   _____//   |   \\                                    \r\n//  |    __)  |    |    /  /_\\  \\ \\_____  \\/    ~    \\                                   \r\n//  |     \\   |    |___/    |    \\/        \\    Y    /                                   \r\n//  \\___  /   |_______ \\____|__  /_______  /\\___|_  /                                    \r\n//      \\/            \\/       \\/        \\/       \\/                                     \r\n//    _____ ____________________.________________________    _____    ___________________\r\n//   /  _  \\\\______   \\______   \\   \\__    ___/\\______   \\  /  _  \\  /  _____/\\_   _____/\r\n//  /  /_\\  \\|       _/|    |  _/   | |    |    |       _/ /  /_\\  \\/   \\  ___ |    __)_ \r\n// /    |    \\    |   \\|    |   \\   | |    |    |    |   \\/    |    \\    \\_\\  \\|        \\\r\n// \\____|__  /____|_  /|______  /___| |____|    |____|_  /\\____|__  /\\______  /_______  /\r\n//         \\/       \\/        \\/                       \\/         \\/        \\/        \\/ \r\n//  CORE BUYER\r\n//\r\n// This contract buys CORE for tokens inside it (which it gets from the controller upon successfull arbitrage)\r\n// And then sends it to the farming vault boosting everyones APY\r\n//\r\n// Become impossible to ignore.\r\n//\r\n\r\n// Sources flattened with hardhat v2.0.1 https://hardhat.org\r\n\r\n// File @uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol@v1.0.1\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n\r\n// File @uniswap/lib/contracts/libraries/AddressStringUtil.sol@v1.1.4\r\n\r\n\r\npragma solidity >=0.5.0;\r\n\r\nlibrary AddressStringUtil {\r\n    // converts an address to the uppercase hex string, extracting only len bytes (up to 20, multiple of 2)\r\n    function toAsciiString(address addr, uint len) pure internal returns (string memory) {\r\n        require(len % 2 == 0 && len > 0 && len <= 40, \"AddressStringUtil: INVALID_LEN\");\r\n\r\n        bytes memory s = new bytes(len);\r\n        uint addrNum = uint(addr);\r\n        for (uint i = 0; i < len / 2; i++) {\r\n            // shift right and truncate all but the least significant byte to extract the byte at position 19-i\r\n            uint8 b = uint8(addrNum >> (8 * (19 - i)));\r\n            // first hex character is the most significant 4 bits\r\n            uint8 hi = b >> 4;\r\n            // second hex character is the least significant 4 bits\r\n            uint8 lo = b - (hi << 4);\r\n            s[2 * i] = char(hi);\r\n            s[2 * i + 1] = char(lo);\r\n        }\r\n        return string(s);\r\n    }\r\n\r\n    // hi and lo are only 4 bits and between 0 and 16\r\n    // this method converts those values to the unicode/ascii code point for the hex representation\r\n    // uses upper case for the characters\r\n    function char(uint8 b) pure private returns (byte c) {\r\n        if (b < 10) {\r\n            return byte(b + 0x30);\r\n        } else {\r\n            return byte(b + 0x37);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @uniswap/lib/contracts/libraries/SafeERC20Namer.sol@v1.1.4\r\n\r\n// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\npragma solidity >=0.5.0;\r\n\r\n// produces token descriptors from inconsistent or absent ERC20 symbol implementations that can return string or bytes32\r\n// this library will always produce a string symbol to represent the token\r\nlibrary SafeERC20Namer {\r\n    function bytes32ToString(bytes32 x) pure private returns (string memory) {\r\n        bytes memory bytesString = new bytes(32);\r\n        uint charCount = 0;\r\n        for (uint j = 0; j < 32; j++) {\r\n            byte char = x[j];\r\n            if (char != 0) {\r\n                bytesString[charCount] = char;\r\n                charCount++;\r\n            }\r\n        }\r\n        bytes memory bytesStringTrimmed = new bytes(charCount);\r\n        for (uint j = 0; j < charCount; j++) {\r\n            bytesStringTrimmed[j] = bytesString[j];\r\n        }\r\n        return string(bytesStringTrimmed);\r\n    }\r\n\r\n    // assumes the data is in position 2\r\n    function parseStringData(bytes memory b) pure private returns (string memory) {\r\n        uint charCount = 0;\r\n        // first parse the charCount out of the data\r\n        for (uint i = 32; i < 64; i++) {\r\n            charCount <<= 8;\r\n            charCount += uint8(b[i]);\r\n        }\r\n\r\n        bytes memory bytesStringTrimmed = new bytes(charCount);\r\n        for (uint i = 0; i < charCount; i++) {\r\n            bytesStringTrimmed[i] = b[i + 64];\r\n        }\r\n\r\n        return string(bytesStringTrimmed);\r\n    }\r\n\r\n    // uses a heuristic to produce a token name from the address\r\n    // the heuristic returns the full hex of the address string in upper case\r\n    function addressToName(address token) pure private returns (string memory) {\r\n        return AddressStringUtil.toAsciiString(token, 40);\r\n    }\r\n\r\n    // uses a heuristic to produce a token symbol from the address\r\n    // the heuristic returns the first 6 hex of the address string in upper case\r\n    function addressToSymbol(address token) pure private returns (string memory) {\r\n        return AddressStringUtil.toAsciiString(token, 6);\r\n    }\r\n\r\n    // calls an external view token contract method that returns a symbol or name, and parses the output into a string\r\n    function callAndParseStringReturn(address token, bytes4 selector) view private returns (string memory) {\r\n        (bool success, bytes memory data) = token.staticcall(abi.encodeWithSelector(selector));\r\n        // if not implemented, or returns empty data, return empty string\r\n        if (!success || data.length == 0) {\r\n            return \"\";\r\n        }\r\n        // bytes32 data always has length 32\r\n        if (data.length == 32) {\r\n            bytes32 decoded = abi.decode(data, (bytes32));\r\n            return bytes32ToString(decoded);\r\n        } else if (data.length > 64) {\r\n            return abi.decode(data, (string));\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    // attempts to extract the token symbol. if it does not implement symbol, returns a symbol derived from the address\r\n    function tokenSymbol(address token) internal view returns (string memory) {\r\n        // 0x95d89b41 = bytes4(keccak256(\"symbol()\"))\r\n        string memory symbol = callAndParseStringReturn(token, 0x95d89b41);\r\n        if (bytes(symbol).length == 0) {\r\n            // fallback to 6 uppercase hex of address\r\n            return addressToSymbol(token);\r\n        }\r\n        return symbol;\r\n    }\r\n\r\n    // attempts to extract the token name. if it does not implement name, returns a name derived from the address\r\n    function tokenName(address token) internal view returns (string memory) {\r\n        // 0x06fdde03 = bytes4(keccak256(\"name()\"))\r\n        string memory name = callAndParseStringReturn(token, 0x06fdde03);\r\n        if (bytes(name).length == 0) {\r\n            // fallback to full hex of address\r\n            return addressToName(token);\r\n        }\r\n        return name;\r\n    }\r\n}\r\n\r\n\r\n// File @uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol@v1.0.1\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n\r\n// File contracts/v612/ICOREGlobals.sol\r\n\r\n// COPYRIGHT cVault.finance TEAM\r\n// NO COPY\r\n// COPY = BAD\r\n// This code is provided with no assurances or guarantees of any kind. Use at your own responsibility.\r\n\r\ninterface ICOREGlobals {\r\n    function CORETokenAddress() external view returns (address);\r\n    function COREGlobalsAddress() external view returns (address);\r\n    function COREDelegatorAddress() external view returns (address);\r\n    function COREVaultAddress() external returns (address);\r\n    function COREWETHUniPair() external view returns (address);\r\n    function UniswapFactory() external view returns (address);\r\n    function TransferHandler() external view returns (address);\r\n    function addDelegatorStateChangePermission(address that, bool status) external;\r\n    function isStateChangeApprovedContract(address that)  external view returns (bool);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol@v3.0.0\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol@v3.0.0\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/GSN/Context.sol@v3.2.0\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v3.2.0\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/v612/FlashArbitrageCOREBuyer.sol\r\n\r\npragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n// import \"hardhat/console.sol\";\r\n\r\n\r\n\r\n\r\ninterface ICOREVault {\r\n    function addPendingRewards(uint256 _) external; \r\n}\r\n\r\n\r\ncontract FlashArbitrageCOREBuyer is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    event COREBought(uint256 amount);\r\n    mapping(address => bool) supportedPair;\r\n\r\n    IERC20 public immutable CORE;\r\n    address public immutable wETH;\r\n    ICOREVault public immutable coreVault;\r\n    IUniswapV2Factory public immutable uniswapFactory;\r\n    address public immutable CORExWETHPair;\r\n\r\n    constructor (address _coreGlobals) public {\r\n        ICOREGlobals globals = ICOREGlobals(_coreGlobals);\r\n        CORE = IERC20(globals.CORETokenAddress());\r\n        uniswapFactory = IUniswapV2Factory(globals.UniswapFactory());\r\n        coreVault = ICOREVault(globals.COREVaultAddress());\r\n        CORExWETHPair = globals.COREWETHUniPair();\r\n        wETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n        supportedPair[globals.COREWETHUniPair()] = true;\r\n        supportedPair[0x6fad7D44640c5cd0120DEeC0301e8cf850BecB68] = true; // CORE/cBTC\r\n    }\r\n\r\n\r\n    function buyAndGiveOutCOREForToken(address _token) public {\r\n        \r\n        // We check if this token is CORE token if it is we just send it out\r\n        if(_token == address(CORE)) {\r\n            // return breaks out no need to else..else..\r\n            return sendCOREToVault();\r\n        }\r\n        uint256 balInputToken =  IERC20(_token).balanceOf(address(this));\r\n\r\n        address pairWithCORE = uniswapFactory.getPair(_token, address(CORE));\r\n        // We check if there is a pair for CORE token with that token\r\n        if(pairWithCORE != address(0) && supportedPair[pairWithCORE]){ // we check supported pair so people don't make 1 liquidity pair iwth CORE\r\n            // It mens we have a pair with CORE\r\n            // So we should just swap with it\r\n            //Suport FoT tokens\r\n\r\n            uint256 amountOut = swapSupportingFeeOnTransfertokens(_token, pairWithCORE, balInputToken);\r\n            emit COREBought(amountOut);\r\n            return sendCOREToVault();\r\n        }\r\n        \r\n        // This is the case we are not finding a pair with CORE so we try to find one with wETH\r\n        address pairWithWETH = uniswapFactory.getPair(_token, wETH);\r\n        if(pairWithWETH != address(0)) {\r\n            uint256 amountOut = swapSupportingFeeOnTransfertokens(_token, pairWithWETH, balInputToken);\r\n            \r\n            amountOut = swapSupportingFeeOnTransfertokens(wETH, CORExWETHPair, amountOut);\r\n            emit COREBought(amountOut);\r\n            sendCOREToVault();\r\n        }\r\n        else {\r\n            revert(\"FA COREBuyer : Unsupported token\");\r\n        }\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    function swapSupportingFeeOnTransfertokens(address _inputToken, address _pair, uint256 amountIn) internal returns (uint256 amountOut) {\r\n\r\n        IUniswapV2Pair pair = IUniswapV2Pair(_pair);\r\n        // We check the balance before \r\n        uint256 balanceOfTargetTokenUniBefore = IERC20(_inputToken).balanceOf(_pair);\r\n        // Then transfers\r\n        safeTransfer(_inputToken, _pair, amountIn);\r\n        // And check it again to get the delta\r\n        // This is to support fee on tranfer tokens\r\n\r\n        uint256 balanceOfTargetTokenUniAfter = IERC20(_inputToken).balanceOf(_pair);\r\n        bool token0Out = pair.token1() == _inputToken;\r\n        (uint256 reserve0, uint256 reserve1,) = pair.getReserves();\r\n        // console.log(\"balanceOfTargetTokenUniBefore\", balanceOfTargetTokenUniBefore);\r\n\r\n        // console.log(\"balanceOfTargetTokenUniAfter\", balanceOfTargetTokenUniAfter);\r\n        if(token0Out) {\r\n            amountOut = getAmountOut(\r\n                balanceOfTargetTokenUniAfter - balanceOfTargetTokenUniBefore,\r\n                reserve1,\r\n                reserve0 \r\n            );\r\n            // console.log(\"amountOut\",amountOut);\r\n            pair.swap(amountOut,0, address(this), \"\");\r\n        }\r\n        else {\r\n            amountOut = getAmountOut(\r\n                balanceOfTargetTokenUniAfter - balanceOfTargetTokenUniBefore,\r\n                reserve0,\r\n                reserve1\r\n            );\r\n            pair.swap(0,amountOut, address(this), \"\");\r\n        }\r\n    }\r\n\r\n    function sendCOREToVault() internal {\r\n        uint256 balanceCORE = CORE.balanceOf(address(this));\r\n        CORE.transfer(address(coreVault), balanceCORE);\r\n        coreVault.addPendingRewards(0);\r\n    }\r\n\r\n    function addSupportedPair(address _pair, bool _shouldBeSupported) onlyOwner public {\r\n        supportedPair[_pair] = _shouldBeSupported;\r\n    }\r\n\r\n    function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut) internal  pure returns (uint256 amountOut) {\r\n        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\r\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\r\n        uint amountInWithFee = amountIn.mul(997);\r\n        uint numerator = amountInWithFee.mul(reserveOut);\r\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\r\n        amountOut = numerator / denominator;\r\n    }\r\n\r\n\r\n\r\n\r\n \r\n    ///////////////////\r\n    //// Helper functions\r\n    //////////////////\r\n    function sendETH(address payable to, uint256 amt) internal {\r\n        // console.log(\"I'm transfering ETH\", amt/1e18, to);\r\n        // throw exception on failure\r\n        to.transfer(amt);\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint256 value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'FA Controller: TRANSFER_FAILED');\r\n    }\r\n\r\n\r\n    // A function that lets owner remove any tokens from this addrss\r\n    // note this address shoudn't hold any tokens\r\n    // And if it does that means someting already went wrong or someone send them to this address\r\n    function rescueUnsupportedTokens(address token, uint256 amt) public onlyOwner {\r\n        IERC20(token).transfer(owner(), amt);\r\n    }\r\n\r\n    function rescueETH(uint256 amt) public {\r\n        sendETH(0xd5b47B80668840e7164C1D1d81aF8a9d9727B421, amt);\r\n    }\r\n\r\n\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_coreGlobals\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"COREBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CORE\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CORExWETHPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_shouldBeSupported\",\"type\":\"bool\"}],\"name\":\"addSupportedPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"buyAndGiveOutCOREForToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coreVault\",\"outputs\":[{\"internalType\":\"contract ICOREVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"rescueETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"rescueUnsupportedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapFactory\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"FlashArbitrageCOREBuyer","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000255ca4596a963883afe0ef9c85ea071cc050128b","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://69ffe71ff7ba5c62431eba61bc0a0d99b0f6c55e266bc096da4a6d67acc10813"}]}