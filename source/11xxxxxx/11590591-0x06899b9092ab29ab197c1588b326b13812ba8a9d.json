{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/ichiPowahV2.sol\r\n\r\n/**\r\n *Submitted for verification at Etherscan.io on 2020-09-12\r\n*/\r\n\r\npragma solidity ^0.6.12;\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\ninterface IPair {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function getReserves() external view returns (uint112, uint112, uint32);\r\n}\r\n\r\ninterface IStake {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\ninterface IFarm {\r\n    function userInfo(uint256 nr, address who) external view returns (uint256, uint256);\r\n    function pendingIchi(uint256 nr, address who) external view returns (uint256);\r\n    function pendingBonusIchi(uint256 _poolID, address _user) external view returns (uint256);\r\n}\r\n\r\ncontract ICHIPOWAHV2 {\r\n  using SafeMath for uint256;\r\n  \r\n  function name() public pure returns(string memory) { return \"ICHIPOWAH\"; }\r\n  function symbol() public pure returns(string memory) { return \"ICHIPOWAH\"; }\r\n  function decimals() public pure returns(uint8) { return 9; }  \r\n\r\n  function totalSupply() public view returns (uint256) {\r\n    IPair ichiETH_sushi = IPair(0x9cD028B1287803250B1e226F0180EB725428d069);\r\n    IPair ichiETH_uni = IPair(0xd07D430Db20d2D7E0c4C11759256adBCC355B20C);\r\n\r\n    IStake stake = IStake(0x70605a6457B0A8fBf1EEE896911895296eAB467E);\r\n    IERC20 ichi = IERC20(0x903bEF1736CDdf2A537176cf3C64579C3867A881);\r\n    \r\n    (uint256 ichi1, , ) = ichiETH_uni.getReserves();\r\n    (uint256 ichi2, , ) = ichiETH_sushi.getReserves();\r\n\r\n    uint256 lp_totalIchi = ichi1.add(ichi2);\r\n\r\n    uint256 xIchi_totalIchi = ichi.balanceOf(address(stake));\r\n\r\n    return lp_totalIchi.mul(2).add(xIchi_totalIchi);\r\n  }\r\n\r\n  function getLpPowah(uint256 pid, IERC20 ichi, IPair pair, IFarm farm, address owner) public view returns (uint256) {\r\n    uint256 lp_totalIchi = ichi.balanceOf(address(pair));\r\n    uint256 lp_total = pair.totalSupply();\r\n    uint256 lp_balance = pair.balanceOf(owner);\r\n\r\n    // Add staked balance\r\n    (uint256 lp_stakedBalance, ) = farm.userInfo(pid, owner);\r\n    lp_balance = lp_balance.add(lp_stakedBalance);\r\n    \r\n    // LP voting power is 2x the users ICHI share in the pool.\r\n    uint256 lp_powah = lp_totalIchi.mul(lp_balance).div(lp_total).mul(2);\r\n\r\n    return lp_powah;\r\n  }\r\n\r\n  function balanceOf(address owner) public view returns (uint256) {\r\n    IFarm farm = IFarm(0xcC50953A743B9CE382f423E37b07Efa6F9d9B000);\r\n\r\n    IPair ichiETH_sushi = IPair(0x9cD028B1287803250B1e226F0180EB725428d069);\r\n    IPair ichiETH_uni = IPair(0xd07D430Db20d2D7E0c4C11759256adBCC355B20C);\r\n\r\n    IStake stake = IStake(0x70605a6457B0A8fBf1EEE896911895296eAB467E);\r\n    IERC20 ichi = IERC20(0x903bEF1736CDdf2A537176cf3C64579C3867A881);\r\n\r\n    uint256 one_lp_powah = getLpPowah(10, ichi, ichiETH_sushi, farm, owner);\r\n    uint256 two_lp_powah = getLpPowah(5, ichi, ichiETH_uni, farm, owner);\r\n\r\n    uint256 xIchi_totalIchi = ichi.balanceOf(address(stake));\r\n    uint256 xIchi_balance = stake.balanceOf(owner);\r\n    uint256 xIchi_total = stake.totalSupply();\r\n    \r\n    // xICHI voting power is the users ICHI share in the stake\r\n    uint256 xIchi_powah = xIchi_totalIchi.mul(xIchi_balance).div(xIchi_total);\r\n    \r\n    uint256 lp_powah = one_lp_powah.add(two_lp_powah);\r\n\r\n    return lp_powah.add(xIchi_powah);\r\n  }\r\n\r\n  function allowance(address, address) public pure returns (uint256) { return 0; }\r\n  function transfer(address, uint256) public pure returns (bool) { return false; }\r\n  function approve(address, uint256) public pure returns (bool) { return false; }\r\n  function transferFrom(address, address, uint256) public pure returns (bool) { return false; }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"ichi\",\"type\":\"address\"},{\"internalType\":\"contract IPair\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"contract IFarm\",\"name\":\"farm\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getLpPowah\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"ICHIPOWAHV2","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://838112f49ec180dbd647e9a776356f1d7020b4f1cb1ce6bfe4c4cc0b1bb2b284"}]}