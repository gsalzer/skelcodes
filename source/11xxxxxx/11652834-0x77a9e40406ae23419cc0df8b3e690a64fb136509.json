{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.1;\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Ownable{\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract ERC20 is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    // Addresses that will not be taxed\r\n    struct ExcludeAddress {bool isExist;}\r\n\r\n    mapping (address => ExcludeAddress) public excludeSendersAddresses;\r\n    mapping (address => ExcludeAddress) public excludeRecipientsAddresses;\r\n\r\n    address serviceWallet;\r\n\r\n    uint taxPercent = 4;\r\n\r\n    // Token params\r\n    string public constant name = \"UniDexGas.com\";\r\n    string public constant symbol = \"UNDG\";\r\n    uint public constant decimals = 18;\r\n    uint constant total = 10000;\r\n    uint256 private _totalSupply;\r\n    // -- Token params\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    constructor() public {\r\n        _mint(msg.sender, total * 10**decimals);\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _taxTransfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _taxTransfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n     function _taxTransfer(address _sender, address _recipient, uint256 _amount) internal returns (bool) {\r\n\r\n       if(!excludeSendersAddresses[_sender].isExist && !excludeRecipientsAddresses[_recipient].isExist){\r\n        uint _taxedAmount = _amount.mul(taxPercent).div(100);\r\n        uint _transferedAmount = _amount.sub(_taxedAmount);\r\n\r\n        _transfer(_sender, serviceWallet, _taxedAmount); // tax to serviceWallet\r\n        _transfer(_sender, _recipient, _transferedAmount); // amount - tax to recipient\r\n       } else {\r\n        _transfer(_sender, _recipient, _amount);\r\n       }\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n    // OWNER utils\r\n    function setAddressToExcludeRecipients (address addr) public onlyOwner {\r\n        excludeRecipientsAddresses[addr] = ExcludeAddress({isExist:true});\r\n    }\r\n\r\n    function setAddressToExcludeSenders (address addr) public onlyOwner {\r\n        excludeSendersAddresses[addr] = ExcludeAddress({isExist:true});\r\n    }\r\n\r\n    function removeAddressFromExcludes (address addr) public onlyOwner {\r\n        excludeSendersAddresses[addr] = ExcludeAddress({isExist:false});\r\n        excludeRecipientsAddresses[addr] = ExcludeAddress({isExist:false});\r\n    }\r\n\r\n    function changePercentOfTax(uint percent) public onlyOwner {\r\n        taxPercent = percent;\r\n    }\r\n\r\n    function changeServiceWallet(address addr) public onlyOwner {\r\n        serviceWallet = addr;\r\n    }\r\n}\r\n\r\n\r\ncontract Crowdsale {\r\n    address payable owner;\r\n    address me = address(this);\r\n    uint sat = 1e18;\r\n\r\n    // *** Config ***\r\n    uint startIco = 1610632800;\r\n    uint stopIco = startIco + 72 hours;\r\n    \r\n    uint percentSell = 35;\r\n    uint manualSaleAmount = 0 * sat;\r\n    \r\n    uint countIfUNDB = 700000; // 1ETH -> 7 UNDG\r\n    uint countIfOther = 650000; // 1 ETH -> 6.5 UNDG\r\n    \r\n    uint maxTokensToOnceHand = 130 * sat; // ~20 ETH for 14.01.2021 \r\n    address undbAddress = 0xd03B6ae96CaE26b743A6207DceE7Cbe60a425c70;\r\n    uint undbMinBalance = 1e17; //0.1 UNDB\r\n    // --- Config ---\r\n\r\n\r\n    uint priceDecimals = 1e5; // realPrice = Price / priceDecimals\r\n    ERC20 UNDB = ERC20(undbAddress);\r\n    ERC20 token = new ERC20();\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        token.setAddressToExcludeRecipients(owner);\r\n        token.setAddressToExcludeSenders(owner);\r\n        token.changeServiceWallet(owner);\r\n        token.setAddressToExcludeSenders(address(this));\r\n        token.transferOwnership(owner);\r\n        token.transfer(owner, token.totalSupply() / 100 * (100 - percentSell) + manualSaleAmount);\r\n    }\r\n\r\n    function() external payable {\r\n        require(startIco < now && now < stopIco, \"Period error\");\r\n        uint amount = msg.value * getPrice() / priceDecimals;\r\n        require(token.balanceOf(msg.sender) + amount <= maxTokensToOnceHand, \"The purchase limit of 130 tokens has been exceeded\");\r\n        require(amount <= token.balanceOf(address(this)), \"Infucient token balance in ICO\");\r\n        token.transfer(msg.sender, amount);\r\n    }\r\n\r\n\r\n    // OWNER ONLY\r\n    function manualGetETH() public payable {\r\n        require(msg.sender == owner, \"You is not owner\");\r\n        owner.transfer(address(this).balance);\r\n    }\r\n\r\n    function getLeftTokens() public {\r\n        require(msg.sender == owner, \"You is not owner\");\r\n        token.transfer(owner, token.balanceOf(address(this)));\r\n    }\r\n    //--- OWNER ONLY\r\n\r\n    function getPrice() public view returns (uint) {\r\n        return (UNDB.balanceOf(msg.sender) >= undbMinBalance ? countIfUNDB : countIfOther);\r\n    }\r\n\r\n    // Utils\r\n    function getStartICO() public view returns (uint) {\r\n        return (startIco - now) / 60;\r\n    }\r\n    function getOwner() public view returns (address) {\r\n        return owner;\r\n    }\r\n\r\n    function getStopIco() public view returns(uint){\r\n        return (stopIco - now) / 60;\r\n    }\r\n    function tokenAddress() public view returns (address){\r\n        return address(token);\r\n    }\r\n    function IcoDeposit() public view returns(uint){\r\n        return token.balanceOf(address(this)) / sat;\r\n    }\r\n    function myBalancex10() public view returns(uint){\r\n        return token.balanceOf(msg.sender) / 1e17;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"IcoDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getLeftTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStartICO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStopIco\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"manualGetETH\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myBalancex10\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://12dd1b727f3c7028ad7596e0813c20d93972f09483bd7ae9456f9adfa7715433"}]}