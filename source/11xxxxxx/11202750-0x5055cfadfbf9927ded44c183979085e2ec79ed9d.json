{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.16;\r\n\r\nlibrary Math {\r\n\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor() internal {}\r\n\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() internal {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    \r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        assembly {\r\n            codehash := extcodehash(account)\r\n        }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require( address(this).balance >= amount, \"Address: insufficient balance\" );\r\n\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require( success, \"Address: unable to send value, recipient may have reverted\" );\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function mint(address account, uint256 amount) external;\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom( address sender, address recipient, uint256 amount ) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval( address indexed owner, address indexed spender, uint256 value );\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer( IERC20 token, address to, uint256 value ) internal { callOptionalReturn( token, abi.encodeWithSelector(token.transfer.selector, to, value) ); }\r\n\r\n    function safeTransferFrom( IERC20 token, address from, address to, uint256 value ) internal {\r\n        callOptionalReturn( token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value) );\r\n    }\r\n\r\n    function safeApprove( IERC20 token, address spender, uint256 value ) internal {\r\n        require( (value == 0) || (token.allowance(address(this), spender) == 0), \"SafeERC20: approve from non-zero to non-zero allowance\" );\r\n        callOptionalReturn( token, abi.encodeWithSelector(token.approve.selector, spender, value) );\r\n    }\r\n\r\n    function safeIncreaseAllowance( IERC20 token, address spender, uint256 value ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add( value );\r\n        callOptionalReturn( token, abi.encodeWithSelector( token.approve.selector, spender, newAllowance ) );\r\n    }\r\n\r\n    function safeDecreaseAllowance( IERC20 token, address spender, uint256 value ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub( value, \"SafeERC20: decreased allowance below zero\" );\r\n        callOptionalReturn( token, abi.encodeWithSelector( token.approve.selector, spender, newAllowance ) );\r\n    }\r\n\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) {\r\n            require( abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\" );\r\n        }\r\n    }\r\n}\r\n\r\ncontract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    constructor( string memory name, string memory symbol, uint8 decimals ) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\n/**\r\n * Vault Strategy Interface\r\n */\r\ninterface IGOFStrategy {\r\n    function want() external view returns (address);\r\n    function deposit() external;\r\n    function withdraw(address) external;\r\n    function withdraw(uint) external;\r\n    function withdrawAll() external returns (uint);\r\n    function balanceOf() external view returns (uint);\r\n}\r\n\r\n/**\r\n * \r\n */\r\ninterface Converter {\r\n    function convert(address) external returns (uint);\r\n}\r\n\r\n/**\r\n *\r\n */\r\ninterface OneSplitAudit {\r\n    function swap(\r\n        address fromToken,\r\n        address destToken,\r\n        uint256 amount,\r\n        uint256 minReturn,\r\n        uint256[] calldata distribution,\r\n        uint256 flags\r\n    )\r\n        external\r\n        payable\r\n        returns(uint256 returnAmount);\r\n    \r\n    function getExpectedReturn(\r\n        address fromToken,\r\n        address destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags // See constants in IOneSplit.sol\r\n    )\r\n        external\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256[] memory distribution\r\n        );\r\n}\r\n\r\n/**\r\n *  @dev\r\n *  The controller of Strategy\r\n *  Distribute different strategies according to different tokens\r\n */\r\ncontract GOFStrategyControllerV2 {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n    \r\n    address public governance;\r\n    address public strategist;\r\n\r\n    address public onesplit;\r\n    address public rewards;\r\n    address public factory;\r\n    mapping(address => address) public vaults;\r\n    mapping(address => address) public strategies;\r\n    mapping(address => mapping(address => address)) public converters;\r\n    \r\n    mapping(address => mapping(address => bool)) public approvedStrategies;\r\n\r\n    uint public split = 500;\r\n    uint public constant max = 10000;\r\n    \r\n    constructor(address _rewards) public {\r\n        governance = tx.origin;\r\n        strategist = tx.origin;\r\n\r\n        onesplit = address(0x50FDA034C0Ce7a8f7EFDAebDA7Aa7cA21CC1267e);\r\n        rewards = _rewards;\r\n    }\r\n    \r\n    function setFactory(address _factory) public {\r\n        require(msg.sender == governance, \"Golff:!governance\");\r\n        factory = _factory;\r\n    }\r\n    \r\n    function setSplit(uint _split) public {\r\n        require(msg.sender == governance, \"Golff:!governance\");\r\n        split = _split;\r\n    }\r\n    \r\n    function setOneSplit(address _onesplit) public {\r\n        require(msg.sender == governance, \"Golff:!governance\");\r\n        onesplit = _onesplit;\r\n    }\r\n    \r\n    function setGovernance(address _governance) public {\r\n        require(msg.sender == governance, \"Golff:!governance\");\r\n        governance = _governance;\r\n    }\r\n\r\n    function setRewards(address _rewards) public {\r\n        require(msg.sender == governance, \"Golff:!governance\");\r\n        rewards = _rewards;\r\n    }\r\n    \r\n    function setVault(address _token, address _vault) public {\r\n        require(msg.sender == strategist || msg.sender == governance, \"Golff:!strategist\");\r\n        require(vaults[_token] == address(0), \"Golff:vault\");\r\n        vaults[_token] = _vault;\r\n    }\r\n    \r\n     function approveStrategy(address _token, address _strategy) public {\r\n        require(msg.sender == governance, \"Golff:!governance\");\r\n        approvedStrategies[_token][_strategy] = true;\r\n    }\r\n\r\n    function revokeStrategy(address _token, address _strategy) public {\r\n        require(msg.sender == governance, \"Golff:!governance\");\r\n        approvedStrategies[_token][_strategy] = false;\r\n    }\r\n\r\n    function setConverter(address _input, address _output, address _converter) public {\r\n        require(msg.sender == strategist || msg.sender == governance, \"Golff:!strategist\");\r\n        converters[_input][_output] = _converter;\r\n    }\r\n    \r\n    function setStrategy(address _token, address _strategy) public {\r\n        require(msg.sender == strategist || msg.sender == governance, \"Golff:!strategist\");\r\n        require(approvedStrategies[_token][_strategy] == true, \"Golff:!approved\");\r\n        address _current = strategies[_token];\r\n        //之前存在策略,那就先把所有的资金提出来\r\n        if (_current != address(0)) {\r\n           IGOFStrategy(_current).withdrawAll();\r\n        }\r\n        strategies[_token] = _strategy;\r\n    }\r\n    \r\n    /**\r\n     * 获取收益\r\n     * @param _token staking token\r\n     * @param _amount staking amount\r\n     */\r\n    function earn(address _token, uint _amount) public {\r\n        address _strategy = strategies[_token]; //获取策略的合约地址\r\n        address _want = IGOFStrategy(_strategy).want();//策略需要的token地址\r\n        if (_want != _token) {//如果策略需要的和输入的不一样,需要先转换\r\n            address converter = converters[_token][_want];//转换器合约地址.\r\n            IERC20(_token).safeTransfer(converter, _amount);//给转换器打钱\r\n            _amount = Converter(converter).convert(_strategy);//执行转换...\r\n            IERC20(_want).safeTransfer(_strategy, _amount);\r\n        } else {\r\n            IERC20(_token).safeTransfer(_strategy, _amount);\r\n        }\r\n        IGOFStrategy(_strategy).deposit();//存钱\r\n    }\r\n    \r\n    /**\r\n     * 获取token的余额\r\n     * @param _token staking token\r\n     */\r\n    function balanceOf(address _token) external view returns (uint) {\r\n        return IGOFStrategy(strategies[_token]).balanceOf();\r\n    }\r\n    \r\n    /**\r\n     * 提现全部\r\n     * @param _token staking token\r\n     */\r\n    function withdrawAll(address _token) public {\r\n        require(msg.sender == strategist || msg.sender == governance, \"Golff:!governance\");\r\n        IGOFStrategy(strategies[_token]).withdrawAll();\r\n    }\r\n    \r\n    /**\r\n     *\r\n     */\r\n    function inCaseTokensGetStuck(address _token, uint _amount) public {\r\n        require(msg.sender == strategist || msg.sender == governance, \"Golff:!governance\");\r\n        IERC20(_token).safeTransfer(governance, _amount);\r\n    }\r\n    \r\n    /**\r\n     *\r\n     */\r\n    function getExpectedReturn(address _strategy, address _token, uint parts) public view returns (uint expected) {\r\n        uint _balance = IERC20(_token).balanceOf(_strategy);//获取策略器 某个代币的余额\r\n        address _want = IGOFStrategy(_strategy).want();//策略器需要的代币.\r\n        (expected,) = OneSplitAudit(onesplit).getExpectedReturn(_token, _want, _balance, parts, 0);\r\n    }\r\n    \r\n    // Only allows to withdraw non-core strategy tokens ~ this is over and above normal yield\r\n    function yearn(address _strategy, address _token, uint parts) public {\r\n        require(msg.sender == strategist || msg.sender == governance, \"Golff:!governance\");\r\n        // This contract should never have value in it, but just incase since this is a public call\r\n        uint _before = IERC20(_token).balanceOf(address(this));\r\n        IGOFStrategy(_strategy).withdraw(_token);\r\n        uint _after =  IERC20(_token).balanceOf(address(this));\r\n        if (_after > _before) {\r\n            uint _amount = _after.sub(_before);\r\n            address _want = IGOFStrategy(_strategy).want();\r\n            uint[] memory _distribution;\r\n            uint _expected;\r\n            _before = IERC20(_want).balanceOf(address(this));\r\n            IERC20(_token).safeApprove(onesplit, 0);\r\n            IERC20(_token).safeApprove(onesplit, _amount);\r\n            (_expected, _distribution) = OneSplitAudit(onesplit).getExpectedReturn(_token, _want, _amount, parts, 0);\r\n            OneSplitAudit(onesplit).swap(_token, _want, _amount, _expected, _distribution, 0);\r\n            _after = IERC20(_want).balanceOf(address(this));\r\n            if (_after > _before) {\r\n                _amount = _after.sub(_before);\r\n                uint _reward = _amount.mul(split).div(max);\r\n                earn(_want, _amount.sub(_reward));\r\n                IERC20(_want).safeTransfer(rewards, _reward);\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * 提现\r\n     * @param _token token to ben withdraw\r\n     * @param _amount amount\r\n     */\r\n    function withdraw(address _token, uint _amount) public {\r\n        require(msg.sender == vaults[_token], \"Golff:!vault\");\r\n        IGOFStrategy(strategies[_token]).withdraw(_amount);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewards\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"approveStrategy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedStrategies\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"converters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"earn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"parts\",\"type\":\"uint256\"}],\"name\":\"getExpectedReturn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"inCaseTokensGetStuck\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"max\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"onesplit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"revokeStrategy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_input\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_output\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_converter\",\"type\":\"address\"}],\"name\":\"setConverter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"setFactory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_onesplit\",\"type\":\"address\"}],\"name\":\"setOneSplit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewards\",\"type\":\"address\"}],\"name\":\"setRewards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_split\",\"type\":\"uint256\"}],\"name\":\"setSplit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"setStrategy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"split\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"strategies\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"strategist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vaults\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"parts\",\"type\":\"uint256\"}],\"name\":\"yearn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"GOFStrategyControllerV2","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000044bdc0545f8e9e1908cf6527be4fc301851c42bf","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://91b5621b9ee7c92a536886b41c23c8202d546138b0b5641aafb120397389bbb4"}]}