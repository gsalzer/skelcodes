{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity = 0.7.0;\r\n\r\n\r\ninterface ActivityMeter {\r\n    event Deposit(address indexed user, address indexed pool, uint amount);\r\n    event Withdraw(address indexed user, address indexed pool, uint amount);\r\n\r\n    function actualizeUserPool(uint endPeriod, address user, address pool) external returns (uint ethLocked, uint mintedAmount) ;  \r\n    function deposit(address pool, uint128 amount) external returns (uint ethLocked, uint mintedAmount);\r\n    function withdraw(address pool, uint128 amount) external returns (uint ethLocked, uint mintedAmount);\r\n    function actualizeUserPools() external returns (uint ethLocked, uint mintedAmount);\r\n    function liquidityEthPriceChanged(uint effectiveTime, uint availableBalanceEth, uint totalSupply) external;\r\n    function effectivePeriod(uint effectiveTime) external view returns (uint periodNumber, uint quantaElapsed);\r\n    function governanceRouter() external view returns (GovernanceRouter);\r\n    function userEthLocked(address user) external view returns (uint ethLockedPeriod, uint ethLocked, uint totalEthLocked);\r\n    \r\n    function ethLockedHistory(uint period) external view returns (uint ethLockedTotal);\r\n\r\n    function poolsPriceHistory(uint period, address pool) external view returns (\r\n        uint cumulativeEthPrice,\r\n        uint240 lastEthPrice,\r\n        uint16 timeRef\r\n    );\r\n\r\n    function userPoolsSummaries(address user, address pool) external view returns (\r\n        uint144 cumulativeAmountLocked,\r\n        uint16 amountChangeQuantaElapsed,\r\n\r\n        uint128 lastAmountLocked,\r\n        uint16 firstPeriod,\r\n        uint16 lastPriceRecord,\r\n        uint16 earnedForPeriod\r\n    );\r\n\r\n    function userPools(address user, uint poolIndex) external view returns (address pool);\r\n    function userPoolsLength(address user) external view returns (uint length);\r\n\r\n    function userSummaries(address user) external view returns (\r\n        uint128 ethLocked,\r\n        uint16 ethLockedPeriod,\r\n        uint16 firstPeriod\r\n    );\r\n    \r\n    function poolSummaries(address pool) external view returns (\r\n        uint16 lastPriceRecord\r\n    );\r\n    \r\n    function users(uint userIndex) external view returns (address user);\r\n    function usersLength() external view returns (uint);\r\n}\r\n\r\ninterface ERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint256 supply);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool success);\r\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\r\n\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n    function transfer(address to, uint256 value) external returns (bool success);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool success);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ninterface Minter is ERC20 {\r\n    event Mint(address indexed to, uint256 value, uint indexed period, uint userEthLocked, uint totalEthLocked);\r\n\r\n    function governanceRouter() external view returns (GovernanceRouter);\r\n    function mint(address to, uint period, uint128 userEthLocked, uint totalEthLocked) external returns (uint amount);\r\n    function userTokensToClaim(address user) external view returns (uint amount);\r\n    function periodTokens(uint period) external pure returns (uint128);\r\n    function periodDecayK() external pure returns (uint decayK);\r\n    function initialPeriodTokens() external pure returns (uint128);\r\n}\r\n\r\ninterface PoolFactory {\r\n    event PoolCreatedEvent(address tokenA, address tokenB, bool aIsWETH, address indexed pool);\r\n\r\n    function getPool(address tokenA, address tokenB) external returns (address);\r\n    function findPool(address tokenA, address tokenB) external view returns (address);\r\n    function pools(uint poolIndex) external view returns (address pool);\r\n    function getPoolCount() external view returns (uint);\r\n}\r\n\r\ninterface WETH is ERC20 {\r\n    function deposit() external payable;\r\n    function withdraw(uint) external;\r\n}\r\n\r\ninterface GovernanceRouter {\r\n    event GovernanceApplied(uint packedGovernance);\r\n    event GovernorChanged(address covernor);\r\n    event ProtocolFeeReceiverChanged(address protocolFeeReceiver);\r\n    event PoolFactoryChanged(address poolFactory);\r\n\r\n    function schedule() external returns(uint timeZero, uint miningPeriod);\r\n    function creator() external returns(address);\r\n    function weth() external returns(WETH);\r\n\r\n    function activityMeter() external returns(ActivityMeter);\r\n    function setActivityMeter(ActivityMeter _activityMeter) external;\r\n\r\n    function minter() external returns(Minter);\r\n    function setMinter(Minter _minter) external;\r\n\r\n    function poolFactory() external returns(PoolFactory);\r\n    function setPoolFactory(PoolFactory _poolFactory) external;\r\n\r\n    function protocolFeeReceiver() external returns(address);\r\n    function setProtocolFeeReceiver(address _protocolFeeReceiver) external;\r\n\r\n    function governance() external view returns (address _governor, uint96 _defaultGovernancePacked);\r\n    function setGovernor(address _governor) external;\r\n    function applyGovernance(uint96 _defaultGovernancePacked) external;\r\n}\r\n\r\nlibrary Liquifi {\r\n    enum Flag { \r\n        // padding 8 bits\r\n        PAD1, PAD2, PAD3, PAD4, PAD5, PAD6, PAD7, PAD8,\r\n        // transient flags\r\n        HASH_DIRTY, BALANCE_A_DIRTY, BALANCE_B_DIRTY, TOTALS_DIRTY, QUEUE_STOPLOSS_DIRTY, QUEUE_TIMEOUT_DIRTY, MUTEX, INVALID_STATE,\r\n        TOTAL_SUPPLY_DIRTY, SWAPS_INCOME_DIRTY, RESERVED1, RESERVED2,\r\n        // persistent flags set by governance\r\n        POOL_LOCKED, ARBITRAGEUR_FULL_FEE, GOVERNANCE_OVERRIDEN\r\n    }\r\n\r\n    struct PoolBalances { // optimized for storage\r\n        // saved on BALANCE_A_DIRTY in exit()\r\n        uint112 balanceALocked;\r\n        uint144 poolFlowSpeedA; // flow speed: (amountAIn * 2^32)/second\r\n\r\n        // saved on BALANCE_B_DIRTY in exit()\r\n        uint112 balanceBLocked;\r\n        uint144 poolFlowSpeedB; // flow speed: (amountBIn * 2^32)/second\r\n        \r\n        // saved on TOTALS_DIRTY in exit()\r\n        uint128 totalBalanceA;\r\n        uint128 totalBalanceB;\r\n\r\n        // saved on SWAPS_INCOME_DIRTY in exit()\r\n        // contains 128 bits of delayedSwapsIncomeA and 128 bits of delayedSwapsIncomeB\r\n        uint delayedSwapsIncome;\r\n        \r\n        // saved on TOTAL_SUPPLY_DIRTY in exit()\r\n        // contains 128 bits of rootKLast and 128 bits of totalSupply\r\n        // rootKLast = sqrt(availableBalanceA * availableBalanceB), as of immediately after the most recent liquidity event\r\n        uint rootKLastTotalSupply;\r\n    }\r\n\r\n    struct PoolState { // optimized for storage\r\n        // saved on HASH_DIRTY in exit()\r\n        bytes32 lastBreakHash;\r\n\r\n        // saved on QUEUE_STOPLOSS_DIRTY in exit()\r\n        uint64 firstByTokenAStopLoss; uint64 lastByTokenAStopLoss; // linked list of orders sorted by (amountAIn/stopLossAmount) ascending\r\n        uint64 firstByTokenBStopLoss; uint64 lastByTokenBStopLoss; // linked list of orders sorted by (amountBIn/stopLossAmount) ascending\r\n\r\n        // saved on QUEUE_TIMEOUT_DIRTY in exit()\r\n        uint64 firstByTimeout; uint64 lastByTimeout; // linked list of orders sorted by timeouts ascending\r\n        // this field contains\r\n        // 8 bits of instantSwapFee\r\n        // 8 bits of desiredOrdersFee\r\n        // 8 bits of protocolFee\r\n        // 32 bits of maxPeriod\r\n        // 16 bits of desiredMaxHistory\r\n        // 4 bits of persistent flags\r\n        // 12 bits of transient flags\r\n        // 8 bits of transient invalidStateReason (ErrorArg)\r\n        // Packing reduces stack depth and helps in governance\r\n        uint96 packed; // not saved in exit(), saved only by governance\r\n        uint16 notFee; // not saved in exit()\r\n\r\n        // This word is always saved in exit()\r\n        uint64 lastBalanceUpdateTime;\r\n        uint64 nextBreakTime;\r\n        uint32 maxHistory;\r\n        uint32 ordersToClaimCount;\r\n        uint64 breaksCount; // counter with increments of 2. 1st bit is used as mutex flag\r\n    }\r\n\r\n    enum OrderFlag { \r\n        NONE, IS_TOKEN_A, EXTRACT_ETH\r\n    }\r\n\r\n    struct Order { // optimized for storage, fits into 3 words\r\n        // Also closing hash is saved in this word on order close.\r\n        // Closing hash always has last bit = 1, I.e. prevByStopLoss & 1 == 1\r\n        uint64 nextByTimeout; uint64 prevByTimeout;\r\n        uint64 nextByStopLoss; uint64 prevByStopLoss;\r\n        \r\n        // mostly used together\r\n        uint112 stopLossAmount;\r\n        uint112 amountIn;\r\n        uint32 period;\r\n\r\n        address owner;\r\n        uint64 timeout;\r\n        uint8 flags;\r\n    }\r\n\r\n    struct OrderClaim { //in-memory only\r\n        uint amountOut;\r\n        uint orderFlowSpeed;\r\n        uint orderId;\r\n        uint flags;\r\n        uint closeReason;\r\n        uint previousAvailableBalance;\r\n        uint previousFlowSpeed;\r\n        uint previousOthers;\r\n    }\r\n\r\n    enum Error { \r\n        A_MUL_OVERFLOW, \r\n        B_ADD_OVERFLOW, \r\n        C_TOO_BIG_TIME_VALUE, \r\n        D_TOO_BIG_PERIOD_VALUE,\r\n        E_TOO_BIG_AMOUNT_VALUE,\r\n        F_ZERO_AMOUNT_VALUE,\r\n        G_ZERO_PERIOD_VALUE,\r\n        H_BALANCE_AFTER_BREAK,\r\n        I_BALANCE_OF_SAVED_UPD,\r\n        J_INVALID_POOL_STATE,\r\n        K_TOO_BIG_TOTAL_VALUE,\r\n        L_INSUFFICIENT_LIQUIDITY,\r\n        M_EMPTY_LIST,\r\n        N_BAD_LENGTH,\r\n        O_HASH_MISMATCH,\r\n        P_ORDER_NOT_CLOSED,\r\n        Q_ORDER_NOT_ADDED,\r\n        R_INCOMPLETE_HISTORY,\r\n        S_REENTRANCE_NOT_SUPPORTED,\r\n        T_INVALID_TOKENS_PAIR,\r\n        U_TOKEN_TRANSFER_FAILED,\r\n        V_ORDER_NOT_EXIST,\r\n        W_DIV_BY_ZERO,\r\n        X_ORDER_ALREADY_CLOSED,\r\n        Y_UNAUTHORIZED_SENDER,\r\n        Z_TOO_BIG_FLOW_SPEED_VALUE\r\n    }\r\n\r\n    enum ErrorArg {\r\n        A_NONE,\r\n        B_IN_AMOUNT,\r\n        C_OUT_AMOUNT,\r\n        D_STOP_LOSS_AMOUNT,\r\n        E_IN_ADD_ORDER,\r\n        F_IN_SWAP,\r\n        G_IN_COMPUTE_AVAILABLE_BALANCE,\r\n        H_IN_BREAKS_HISTORY,\r\n        I_USER_DATA,\r\n        J_IN_ORDER,\r\n        K_IN_MINT,\r\n        L_IN_BURN,\r\n        M_IN_CLAIM_ORDER,\r\n        N_IN_PROCESS_DELAYED_ORDERS,\r\n        O_TOKEN_A,\r\n        P_TOKEN_B,\r\n        Q_TOKEN_ETH,\r\n        R_IN_CLOSE_ORDER,\r\n        S_BY_GOVERNANCE,\r\n        T_FEE_CHANGED_WITH_ORDERS_OPEN,\r\n        U_BAD_EXCHANGE_RATE,\r\n        V_INSUFFICIENT_TOTAL_BALANCE,\r\n        W_POOL_LOCKED,\r\n        X_TOTAL_SUPPLY\r\n    }\r\n\r\n    // this methods allows to pass some information in 'require' calls without storing strings in contract bytecode \r\n    // messages will be like \"FAIL https://err.liquifi.org/XY\" where X and Y are error and errorArg from respective enums\r\n    function _require(bool condition, Error error, ErrorArg errorArg) internal pure {\r\n        if (condition) return;\r\n        { // new scope to not waste message memory if condition is satisfied \r\n            // FAIL https://err.liquifi.org/__\r\n            bytes memory message = \"\\x46\\x41\\x49\\x4c\\x20\\x68\\x74\\x74\\x70\\x73\\x3a\\x2f\\x2f\\x65\\x72\\x72\\x2e\\x6c\\x69\\x71\\x75\\x69\\x66\\x69\\x2e\\x6f\\x72\\x67\\x2f\\x5f\\x5f\";\r\n            \r\n            message[29] = bytes1(65 + uint8(error));\r\n            message[30] = bytes1(65 + uint8(errorArg));\r\n            require(false, string(message));\r\n        }\r\n    }\r\n\r\n    uint64 constant maxTime = ~uint64(0);\r\n\r\n    function trimTime(uint time) internal pure returns (uint64 trimmedTime) {\r\n        Liquifi._require(time <= maxTime, Liquifi.Error.C_TOO_BIG_TIME_VALUE, Liquifi.ErrorArg.A_NONE);\r\n        return uint64(time);\r\n    }\r\n\r\n    function trimPeriod(uint period, Liquifi.ErrorArg periodType) internal pure returns (uint32 trimmedPeriod) {\r\n        Liquifi._require(period <= ~uint32(0), Liquifi.Error.D_TOO_BIG_PERIOD_VALUE, periodType);\r\n        return uint32(period);\r\n    }\r\n\r\n    function trimAmount(uint amount, Liquifi.ErrorArg amountType) internal pure returns (uint112 trimmedAmount) {\r\n        Liquifi._require(amount <= ~uint112(0), Liquifi.Error.E_TOO_BIG_AMOUNT_VALUE, amountType);\r\n        return uint112(amount);\r\n    }\r\n\r\n\r\n    function trimTotal(uint amount, Liquifi.ErrorArg amountType) internal pure returns (uint128 trimmedAmount) {\r\n        Liquifi._require(amount <= ~uint128(0), Liquifi.Error.K_TOO_BIG_TOTAL_VALUE, amountType);\r\n        return uint128(amount);\r\n    }\r\n\r\n    function trimFlowSpeed(uint amount, Liquifi.ErrorArg amountType) internal pure returns (uint144 trimmedAmount) {\r\n        Liquifi._require(amount <= ~uint144(0), Liquifi.Error.Z_TOO_BIG_FLOW_SPEED_VALUE, amountType);\r\n        return uint144(amount);\r\n    }\r\n\r\n    function checkFlag(PoolState memory _state, Flag flag) internal pure returns(bool) {\r\n        return _state.packed & uint96(1 << uint(flag)) != 0;\r\n    }\r\n\r\n    function setFlag(PoolState memory _state, Flag flag) internal pure {\r\n        _state.packed = _state.packed | uint96(1 << uint(flag));\r\n    }\r\n\r\n    function clearFlag(PoolState memory _state, Flag flag) internal pure {\r\n        _state.packed = _state.packed & ~uint96(1 << uint(flag));\r\n    }\r\n\r\n    function unpackGovernance(PoolState memory _state) internal pure returns(\r\n        uint instantSwapFee, uint desiredOrdersFee, uint protocolFee, uint maxPeriod, uint desiredMaxHistory\r\n    ) {\r\n        desiredMaxHistory = uint16(_state.packed >> 24);\r\n        maxPeriod = uint32(_state.packed >> 40);\r\n        protocolFee = uint8(_state.packed >> 72);\r\n        desiredOrdersFee = uint8(_state.packed >> 80);\r\n        instantSwapFee = uint8(_state.packed >> 88);\r\n    }\r\n\r\n    function setInvalidState(PoolState memory _state, Liquifi.ErrorArg reason) internal pure {\r\n        setFlag(_state, Liquifi.Flag.INVALID_STATE);\r\n        uint oldReason = uint8(_state.packed);\r\n        if (uint(reason) > oldReason) {\r\n            _state.packed = _state.packed & ~uint96(~uint8(0)) | uint96(reason);\r\n        }\r\n    }\r\n\r\n    function checkInvalidState(PoolState memory _state) internal pure returns (Liquifi.ErrorArg reason) {\r\n        reason = Liquifi.ErrorArg.A_NONE;\r\n        if (checkFlag(_state, Liquifi.Flag.INVALID_STATE)) {\r\n            return Liquifi.ErrorArg(uint8(_state.packed));\r\n        }\r\n    }\r\n\r\n    function isTokenAIn(uint orderFlags) internal pure returns (bool) {\r\n        return orderFlags & uint(Liquifi.OrderFlag.IS_TOKEN_A) != 0;\r\n    }\r\n}\r\n\r\nlibrary Math {\r\n    \r\n    function max(uint256 x, uint256 y) internal pure returns (uint256 result) {\r\n        result = x > y ? x : y;\r\n    }\r\n\r\n    function min(uint256 x, uint256 y) internal pure returns (uint256 result) {\r\n        result = x < y ? x : y;\r\n    }\r\n\r\n    function sqrt(uint x) internal pure returns (uint result) {\r\n        uint y = x;\r\n        result = (x + 1) / 2;\r\n        while (result < y) {\r\n            y = result;\r\n            result = (x / result + result) / 2;\r\n        }\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        Liquifi._require(y == 0 || (z = x * y) / y == x, Liquifi.Error.A_MUL_OVERFLOW, Liquifi.ErrorArg.A_NONE);\r\n    }\r\n\r\n    function mulWithClip(uint x, uint y, uint maxValue) internal pure returns (uint z) {\r\n        if (y != 0 && ((z = x * y) / y != x || z > maxValue)) {\r\n            z = maxValue;\r\n        }\r\n    }\r\n\r\n    function subWithClip(uint x, uint y) internal pure returns (uint z) {\r\n        if ((z = x - y) > x) {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        Liquifi._require((z = x + y) >= x, Liquifi.Error.B_ADD_OVERFLOW, Liquifi.ErrorArg.A_NONE);\r\n    }\r\n\r\n    function addWithClip(uint x, uint y, uint maxValue) internal pure returns (uint z) {\r\n        if ((z = x + y) < x || z > maxValue) {\r\n            z = maxValue;\r\n        }\r\n    }\r\n\r\n    // function div(uint x, uint y, Liquifi.ErrorArg scope) internal pure returns (uint z) {\r\n    //     Liquifi._require(y != 0, Liquifi.Error.R_DIV_BY_ZERO, scope);\r\n    //     z = x / y;\r\n    // }\r\n}\r\n\r\ninterface LiquidityPool is ERC20 {\r\n    enum MintReason { DEPOSIT, PROTOCOL_FEE, INITIAL_LIQUIDITY }\r\n    event Mint(address indexed to, uint256 value, MintReason reason);\r\n\r\n    // ORDER_CLOSED reasons are all odd, other reasons are even\r\n    // it allows to check ORDER_CLOSED reasons as (reason & ORDER_CLOSED) != 0\r\n    enum BreakReason { \r\n        NONE,        ORDER_CLOSED, \r\n        ORDER_ADDED, ORDER_CLOSED_BY_STOP_LOSS, \r\n        SWAP,        ORDER_CLOSED_BY_REQUEST,\r\n        MINT,        ORDER_CLOSED_BY_HISTORY_LIMIT,\r\n        BURN,        ORDER_CLOSED_BY_GOVERNOR\r\n    }\r\n\r\n    function poolBalances() external view returns (\r\n        uint balanceALocked,\r\n        uint poolFlowSpeedA, // flow speed: (amountAIn * 2^32)/second\r\n\r\n        uint balanceBLocked,\r\n        uint poolFlowSpeedB, // flow speed: (amountBIn * 2^32)/second\r\n\r\n        uint totalBalanceA,\r\n        uint totalBalanceB,\r\n\r\n        uint delayedSwapsIncome,\r\n        uint rootKLastTotalSupply\r\n    );\r\n\r\n    function governanceRouter() external returns (GovernanceRouter);\r\n    function minimumLiquidity() external returns (uint);\r\n    function aIsWETH() external returns (bool);\r\n\r\n    function mint(address to) external returns (uint liquidityOut);\r\n    function burn(address to, bool extractETH) external returns (uint amountAOut, uint amountBOut);\r\n    function swap(address to, bool extractETH, uint amountAOut, uint amountBOut, bytes calldata externalData) external returns (uint amountAIn, uint amountBIn);\r\n\r\n    function tokenA() external view returns (ERC20);\r\n    function tokenB() external view returns (ERC20);\r\n}\r\n\r\ninterface DelayedExchangePool is LiquidityPool {\r\n    event FlowBreakEvent( \r\n        address sender, \r\n        // total balance contains 128 bit of totalBalanceA and 128 bit of totalBalanceB\r\n        uint totalBalance, \r\n        // contains 128 bits of rootKLast and 128 bits of totalSupply\r\n        uint rootKLastTotalSupply, \r\n        uint indexed orderId,\r\n        // breakHash is computed over all fields below\r\n        \r\n        bytes32 lastBreakHash,\r\n        // availableBalance consists of 128 bits of availableBalanceA and 128 bits of availableBalanceB\r\n        uint availableBalance, \r\n        // flowSpeed consists of 144 bits of poolFlowSpeedA and 112 higher bits of poolFlowSpeedB\r\n        uint flowSpeed,\r\n        // others consists of 32 lower bits of poolFlowSpeedB, 16 bit of notFee, 64 bit of time, 64 bit of orderId, 76 higher bits of packed and 4 bit of reason (BreakReason)\r\n        uint others      \r\n    );\r\n\r\n    event OrderClaimedEvent(uint indexed orderId, address to);\r\n    event OperatingInInvalidState(uint location, uint invalidStateReason);\r\n    event GovernanceApplied(uint packedGovernance);\r\n    \r\n    function addOrder(\r\n        address owner, uint orderFlags, uint prevByStopLoss, uint prevByTimeout, \r\n        uint stopLossAmount, uint period\r\n    ) external returns (uint id);\r\n\r\n    // availableBalance contains 128 bits of availableBalanceA and 128 bits of availableBalanceB\r\n    // delayedSwapsIncome contains 128 bits of delayedSwapsIncomeA and 128 bits of delayedSwapsIncomeB\r\n    function processDelayedOrders() external returns (uint availableBalance, uint delayedSwapsIncome, uint packed);\r\n\r\n    function claimOrder (\r\n        bytes32 previousBreakHash,\r\n        // see LiquifyPoolRegister.claimOrder for breaks list details\r\n        uint[] calldata breaksHistory\r\n    ) external returns (address owner, uint amountAOut, uint amountBOut);\r\n\r\n    function applyGovernance(uint packedGovernanceFields) external;\r\n    function sync() external;\r\n    function closeOrder(uint id) external;\r\n\r\n    function poolQueue() external view returns (\r\n        uint firstByTokenAStopLoss, uint lastByTokenAStopLoss, // linked list of orders sorted by (amountAIn/stopLossAmount) ascending\r\n        uint firstByTokenBStopLoss, uint lastByTokenBStopLoss, // linked list of orders sorted by (amountBIn/stopLossAmount) ascending\r\n    \r\n        uint firstByTimeout, uint lastByTimeout // linked list of orders sorted by timeouts ascending\r\n    );\r\n\r\n    function lastBreakHash() external view returns (bytes32);\r\n\r\n    function poolState() external view returns (\r\n        bytes32 _prevBlockBreakHash,\r\n        uint packed, // see Liquifi.PoolState for details\r\n        uint notFee,\r\n\r\n        uint lastBalanceUpdateTime,\r\n        uint nextBreakTime,\r\n        uint maxHistory,\r\n        uint ordersToClaimCount,\r\n        uint breaksCount\r\n    );\r\n\r\n    function findOrder(uint orderId) external view returns (        \r\n        uint nextByTimeout, uint prevByTimeout,\r\n        uint nextByStopLoss, uint prevByStopLoss,\r\n        \r\n        uint stopLossAmount,\r\n        uint amountIn,\r\n        uint period,\r\n        \r\n        address owner,\r\n        uint timeout,\r\n        uint flags\r\n    );\r\n}\r\n\r\n// SPDX-License-Identifier: GPL-3.0\r\n//import { Debug } from \"./libraries/Debug.sol\";\r\ncontract LiquifiActivityMeter is ActivityMeter {\r\n    using Math for uint256;\r\n\r\n    struct PoolSummary {\r\n        uint16 lastPriceRecord;\r\n    }\r\n\r\n    struct UserSummary {\r\n        uint128 ethLocked;\r\n        uint16 ethLockedPeriod;\r\n        uint16 firstPeriod;\r\n    }\r\n\r\n    struct UserPoolSummary {  \r\n        uint144 cumulativeAmountLocked;\r\n        uint16 amountChangeQuantaElapsed;\r\n        \r\n        uint128 lastAmountLocked;\r\n        uint16 firstPeriod;\r\n        uint16 lastPriceRecord;\r\n        uint16 earnedForPeriod;\r\n    }\r\n\r\n    struct PoolPriceRecord {\r\n        uint cumulativeEthPrice;\r\n        uint240 lastEthPrice;\r\n        uint16 timeRef; // for last period - contains time quanta since period start; for historic periods contains next record number\r\n    } \r\n\r\n    GovernanceRouter immutable public override governanceRouter;\r\n    uint immutable private timeZero;\r\n    uint immutable private miningPeriod;\r\n\r\n    mapping (/*period*/uint =>  /*ethLockedTotal premultiplied on 2 ** 112 */uint) public override ethLockedHistory;\r\n    mapping (/*period*/uint => mapping(/*pool*/address => PoolPriceRecord)) public override poolsPriceHistory;\r\n    mapping (/*user*/address => mapping(/*pool*/address => UserPoolSummary)) public override userPoolsSummaries;\r\n    \r\n    mapping (/*user*/address => /*pool*/address[]) public override userPools;\r\n    function userPoolsLength(address user) external view override returns (uint) { return userPools[user].length; }\r\n\r\n    mapping(/*user*/address => UserSummary) public override userSummaries;\r\n    mapping(/*pool*/address => PoolSummary) public override poolSummaries;\r\n    \r\n    address[] public override users;\r\n    function usersLength() external view override returns (uint) { return users.length; }\r\n    \r\n    constructor(address _governanceRouter) public {\r\n        GovernanceRouter(_governanceRouter).setActivityMeter(this);\r\n        (timeZero, miningPeriod)  = GovernanceRouter(_governanceRouter).schedule();\r\n        governanceRouter = GovernanceRouter(_governanceRouter);\r\n    }\r\n\r\n    function effectivePeriod(uint effectiveTime) public override view returns (uint periodNumber, uint quantaElapsed) {\r\n        uint _miningPeriod = miningPeriod;\r\n        uint _timeZero = timeZero;\r\n        require(effectiveTime > _timeZero, \"LIQUIFI METER: prehistoric time\");\r\n        uint timeElapsed = effectiveTime - _timeZero;\r\n        periodNumber = 1 + (timeElapsed / _miningPeriod); // periods have numbers starting with 1\r\n        quantaElapsed = ((timeElapsed % _miningPeriod) << 16) / _miningPeriod; // time elapsed in period measured in quantas: 1/2**16 parts of period\r\n    }\r\n\r\n    function actualizeUserPool(uint endPeriod, address user, address pool) external override returns (uint ethLocked, uint mintedAmount) {\r\n        (uint currentPeriod, ) = effectivePeriod(block.timestamp);\r\n        require(endPeriod < currentPeriod, \"LIQUIFY: BAD EARNING PERIOD\");\r\n        UserPoolSummary memory userPoolSummary = userPoolsSummaries[user][pool];\r\n        require(userPoolSummary.firstPeriod != 0, \"LIQUIFY: NO USER POOL\");\r\n        (ethLocked, mintedAmount) = _actualizeUserPool(endPeriod, user, pool, userPoolSummary);\r\n        userPoolsSummaries[user][pool] = userPoolSummary;\r\n    }\r\n    \r\n    function deposit(address pool, uint128 amount) external override returns (uint ethLocked, uint mintedAmount) {\r\n        address user = msg.sender; // this method should be called by the user\r\n        (ethLocked, mintedAmount) = updateAmountLocked(user, pool, amount, true);\r\n        emit Deposit(user, pool, amount);\r\n        require(DelayedExchangePool(pool).transferFrom(user, address(this), amount), \r\n            \"LIQUIFY: TRANSFER FROM FAILED\");\r\n    }\r\n\r\n    function withdraw(address pool, uint128 amount) external override returns (uint ethLocked, uint mintedAmount) {\r\n        address user = msg.sender; // this method should be called by the user\r\n        (ethLocked, mintedAmount) = updateAmountLocked(user, pool, amount, false);\r\n        emit Withdraw(user, pool, amount);\r\n        require(DelayedExchangePool(pool).transfer(user, amount),\r\n            \"LIQUIFY: TRANSFER FAILED\");\r\n    }\r\n\r\n    // for brave users having few pools and actualized recently\r\n    // others could run out of gas\r\n    function actualizeUserPools() external override returns (uint ethLocked, uint mintedAmount) {\r\n        address user = msg.sender;\r\n\r\n        (uint currentPeriod, ) = effectivePeriod(block.timestamp);\r\n        uint userPoolIndex = userPools[user].length;\r\n\r\n        while(userPoolIndex > 0) {\r\n            userPoolIndex--;\r\n            address pool = userPools[user][userPoolIndex];\r\n            UserPoolSummary memory userPoolSummary = userPoolsSummaries[user][pool];\r\n            (uint poolEthLocked, uint _mintedAmount) = _actualizeUserPool(currentPeriod - 1, user, pool, userPoolSummary);\r\n            userPoolsSummaries[user][pool] = userPoolSummary;\r\n            ethLocked = Math.addWithClip(ethLocked, poolEthLocked, ~uint(0));\r\n            mintedAmount = _mintedAmount > 0 ? _mintedAmount : mintedAmount; \r\n        }\r\n    }\r\n\r\n    function liquidityEthPriceChanged(uint effectiveTime, uint availableBalanceEth, uint totalSupply) external override {\r\n        // we don't care if someone pretending to be our pool will spend some gas on price reporting:\r\n        // this price will be just never used\r\n        address pool = msg.sender;\r\n        if (totalSupply == 0 || availableBalanceEth == 0) { // should never happen, just in case\r\n            return;\r\n        }\r\n\r\n        // next effectiveTime is never less than previous one in our pools\r\n        (uint period, uint quantaElapsed) = effectivePeriod(effectiveTime);\r\n        PoolPriceRecord storage priceRecord = poolsPriceHistory[period][pool];\r\n        (uint lastEthPrice, uint timeRef) = (priceRecord.lastEthPrice, priceRecord.timeRef);\r\n        uint cumulativeEthPrice;\r\n        if (lastEthPrice == 0) { // no price record for this period\r\n            PoolSummary memory poolSummary = poolSummaries[pool];\r\n            if (poolSummary.lastPriceRecord != 0) {\r\n                PoolPriceRecord memory prevPriceRecord = poolsPriceHistory[poolSummary.lastPriceRecord][pool];\r\n                lastEthPrice = prevPriceRecord.lastEthPrice;\r\n                cumulativeEthPrice = lastEthPrice * quantaElapsed;\r\n                prevPriceRecord.cumulativeEthPrice = prevPriceRecord.cumulativeEthPrice + lastEthPrice * ((1 << 16) - prevPriceRecord.timeRef);\r\n                prevPriceRecord.timeRef = uint16(period);\r\n                poolsPriceHistory[poolSummary.lastPriceRecord][pool] = prevPriceRecord;\r\n            }\r\n            poolSummary.lastPriceRecord = uint16(period);\r\n            poolSummaries[pool] = poolSummary;\r\n        } else {\r\n            uint quantaElapsedSinceLastUpdate = quantaElapsed - timeRef;\r\n            cumulativeEthPrice = priceRecord.cumulativeEthPrice + lastEthPrice * quantaElapsedSinceLastUpdate;\r\n        }\r\n\r\n        priceRecord.cumulativeEthPrice = cumulativeEthPrice;\r\n        uint currentPrice = (totalSupply << 112) / availableBalanceEth;\r\n        (priceRecord.lastEthPrice, priceRecord.timeRef) = (uint240(currentPrice), uint16(quantaElapsed));\r\n    }\r\n\r\n    function userEthLocked(address user) external override view returns (uint ethLockedPeriod, uint ethLocked, uint totalEthLocked) {\r\n        (uint currentPeriod, ) = effectivePeriod(block.timestamp);\r\n        uint currentEthLockedPeriod = currentPeriod - 1;\r\n        UserSummary memory userSummary = userSummaries[user];\r\n        if (currentEthLockedPeriod > 0 && userSummary.ethLockedPeriod < currentEthLockedPeriod) {\r\n            if (userSummary.ethLockedPeriod > 0) {\r\n                ethLockedPeriod = userSummary.ethLockedPeriod;\r\n                ethLocked = userSummary.ethLocked;\r\n                totalEthLocked = ethLockedHistory[userSummary.ethLockedPeriod];\r\n            }\r\n        }\r\n    }\r\n    \r\n    function _actualizeUserPool(uint period, address user, address pool, UserPoolSummary memory userPoolSummary) private returns (uint ethLocked, uint mintedAmount) {\r\n        UserSummary memory userSummary = userSummaries[user];\r\n        uint currentEthLockedPeriod;\r\n        {\r\n            (uint currentPeriod, ) = effectivePeriod(block.timestamp);\r\n            currentEthLockedPeriod = currentPeriod - 1;\r\n        }\r\n\r\n        if (currentEthLockedPeriod > 0 && userSummary.ethLockedPeriod < currentEthLockedPeriod) {\r\n            \r\n            if (userSummary.ethLockedPeriod > 0) {\r\n                mintedAmount = governanceRouter.minter().mint(\r\n                    user, userSummary.ethLockedPeriod, userSummary.ethLocked, ethLockedHistory[userSummary.ethLockedPeriod]\r\n                );\r\n            }\r\n            userSummary.ethLocked = 0;\r\n            userSummary.ethLockedPeriod = uint16(currentEthLockedPeriod);\r\n            userSummaries[user] = userSummary;\r\n        }\r\n        uint earningPeriod = userPoolSummary.earnedForPeriod;\r\n        if (earningPeriod >= period) {\r\n            return (0, mintedAmount);\r\n        }\r\n        // currentPeriod >= 2 at this line\r\n        // currentEthLockedPeriod >= 1\r\n\r\n        DelayedExchangePool(pool).processDelayedOrders();\r\n        \r\n        PoolSummary memory poolSummary = poolSummaries[pool];\r\n        PoolPriceRecord memory poolPriceRecord = poolsPriceHistory[userPoolSummary.lastPriceRecord][pool];\r\n        while ((++earningPeriod) <= period) {\r\n\r\n            // if there is a newer price record and current one is obsolete and it doesn't refer to itself\r\n            if (earningPeriod <= poolSummary.lastPriceRecord && poolPriceRecord.timeRef == earningPeriod && earningPeriod > userPoolSummary.lastPriceRecord) { \r\n                // switch to next price record\r\n                userPoolSummary.lastPriceRecord = uint16(earningPeriod);\r\n                poolPriceRecord = poolsPriceHistory[earningPeriod][pool];\r\n            }\r\n\r\n            uint cumulativeEthPrice = poolPriceRecord.cumulativeEthPrice;\r\n            if (earningPeriod == poolSummary.lastPriceRecord) {\r\n                cumulativeEthPrice += uint(poolPriceRecord.lastEthPrice) * ((1 << 16) - poolPriceRecord.timeRef); // no overflow here\r\n            } else if (earningPeriod > userPoolSummary.lastPriceRecord) { // amount record is not related to current period\r\n                cumulativeEthPrice = uint(poolPriceRecord.lastEthPrice) << 16;\r\n            }\r\n\r\n            uint cumulativeAmountLocked = userPoolSummary.cumulativeAmountLocked;\r\n            if (cumulativeAmountLocked > 0 || userPoolSummary.amountChangeQuantaElapsed > 0) {\r\n                cumulativeAmountLocked += uint(userPoolSummary.lastAmountLocked) * ((1 << 16) - userPoolSummary.amountChangeQuantaElapsed); // no overflow here\r\n                userPoolSummary.cumulativeAmountLocked = 0;\r\n                userPoolSummary.amountChangeQuantaElapsed = 0;\r\n            } else {\r\n                cumulativeAmountLocked = uint(userPoolSummary.lastAmountLocked) << 16;\r\n            }\r\n            \r\n            if (cumulativeEthPrice != 0 && cumulativeAmountLocked != 0) {\r\n                cumulativeAmountLocked = cumulativeAmountLocked.mulWithClip(2 ** 112, ~uint(0));\r\n                ethLocked = Math.addWithClip(ethLocked, cumulativeAmountLocked / cumulativeEthPrice, ~uint128(0));\r\n            }\r\n        }\r\n\r\n        userPoolSummary.earnedForPeriod = uint16(period);\r\n\r\n        uint ethLockedTotal = ethLockedHistory[currentEthLockedPeriod];\r\n        uint ethLockedTotalNew = Math.addWithClip(ethLockedTotal, ethLocked, ~uint(0));\r\n        ethLockedHistory[currentEthLockedPeriod] = ethLockedTotalNew;\r\n        ethLocked = Math.addWithClip(userSummary.ethLocked, ethLockedTotalNew - ethLockedTotal, ~uint128(0)); // adjust value in case of overflow\r\n        userSummary.ethLocked = uint128(ethLocked);\r\n\r\n        userSummaries[user] = userSummary;\r\n    }\r\n\r\n    function registerUserPool(uint period, address user, address pool, UserPoolSummary memory userPoolSummary) private {\r\n        address tokenA = address(DelayedExchangePool(pool).tokenA());\r\n        address tokenB = address(DelayedExchangePool(pool).tokenB());\r\n        require(governanceRouter.poolFactory().findPool(tokenA, tokenB) == pool, \r\n                \"LIQUIFY: POOL IS UNKNOWN\");\r\n\r\n        require(address(governanceRouter.weth()) == tokenA, \r\n                \"LIQUIFY: ETH BASED POOL NEEDED\");\r\n\r\n        DelayedExchangePool(pool).processDelayedOrders();\r\n        \r\n        PoolSummary memory poolSummary = poolSummaries[pool];\r\n        require(poolSummary.lastPriceRecord != 0, \"LIQUIFY: POOL HAS NO PRICES\");\r\n        \r\n        userPoolSummary.firstPeriod = uint16(period);\r\n        userPoolSummary.lastPriceRecord = poolSummary.lastPriceRecord;\r\n        userPoolSummary.earnedForPeriod = uint16(period - 1);\r\n        userPools[user].push(pool);\r\n\r\n        UserSummary memory userSummary = userSummaries[user];\r\n        if (userSummary.firstPeriod == 0) {\r\n            userSummary.firstPeriod = uint16(period);\r\n            userSummaries[user] = userSummary;\r\n            users.push(user);\r\n        }\r\n    }\r\n\r\n    function updateAmountLocked(address user, address pool, uint128 amount, bool positiveAmount) private returns (uint ethLocked, uint mintedAmount) {\r\n        (uint period, uint quantaElapsed) = effectivePeriod(block.timestamp);\r\n\r\n        UserPoolSummary memory userPoolSummary = userPoolsSummaries[user][pool];\r\n        if (userPoolSummary.firstPeriod == 0) { // pool is not registered for this user\r\n            registerUserPool(period, user, pool, userPoolSummary);\r\n        } else {\r\n            (ethLocked, mintedAmount) = _actualizeUserPool(period - 1, user, pool, userPoolSummary);\r\n        }\r\n        \r\n        uint quantaElapsedSinceLastUpdate = quantaElapsed - userPoolSummary.amountChangeQuantaElapsed;\r\n        uint lastAmountLocked = userPoolSummary.lastAmountLocked;\r\n        userPoolSummary.cumulativeAmountLocked = uint144(userPoolSummary.cumulativeAmountLocked + lastAmountLocked * quantaElapsedSinceLastUpdate); // no overflow here\r\n\r\n        userPoolSummary.amountChangeQuantaElapsed = uint16(quantaElapsed);\r\n        if (positiveAmount) {\r\n            lastAmountLocked = lastAmountLocked.add(amount);\r\n            require(lastAmountLocked < (1<<128), \"LIQUIFY: GOV DEPOSIT OVERFLOW\");\r\n        } else {\r\n            require(lastAmountLocked >= amount, \"LIQUIFY: GOV WITHDRAW UNDERFLOW\");\r\n            lastAmountLocked = lastAmountLocked - amount;\r\n        }\r\n        \r\n        userPoolSummary.lastAmountLocked = uint128(lastAmountLocked);\r\n        userPoolsSummaries[user][pool] = userPoolSummary;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governanceRouter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"endPeriod\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"actualizeUserPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethLocked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"actualizeUserPools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethLocked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethLocked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"effectiveTime\",\"type\":\"uint256\"}],\"name\":\"effectivePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"periodNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantaElapsed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ethLockedHistory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governanceRouter\",\"outputs\":[{\"internalType\":\"contract GovernanceRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"effectiveTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableBalanceEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"liquidityEthPriceChanged\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolSummaries\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"lastPriceRecord\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolsPriceHistory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cumulativeEthPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint240\",\"name\":\"lastEthPrice\",\"type\":\"uint240\"},{\"internalType\":\"uint16\",\"name\":\"timeRef\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userEthLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethLockedPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethLocked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalEthLocked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userPools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userPoolsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userPoolsSummaries\",\"outputs\":[{\"internalType\":\"uint144\",\"name\":\"cumulativeAmountLocked\",\"type\":\"uint144\"},{\"internalType\":\"uint16\",\"name\":\"amountChangeQuantaElapsed\",\"type\":\"uint16\"},{\"internalType\":\"uint128\",\"name\":\"lastAmountLocked\",\"type\":\"uint128\"},{\"internalType\":\"uint16\",\"name\":\"firstPeriod\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"lastPriceRecord\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"earnedForPeriod\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userSummaries\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"ethLocked\",\"type\":\"uint128\"},{\"internalType\":\"uint16\",\"name\":\"ethLockedPeriod\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"firstPeriod\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usersLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethLocked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"LiquifiActivityMeter","CompilerVersion":"v0.7.0+commit.9e61f92b","OptimizationUsed":"1","Runs":"2000","ConstructorArguments":"000000000000000000000000ad8674bc5727976f092027343244ebec2f961b58","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://1a280f6ab27c1a32edf7a7a62c21a71e39fb51157bb9d9baa8b360a0d47e50b6"}]}