{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.12;\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n *\r\n * Source https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-solidity/v2.1.3/contracts/ownership/Ownable.sol\r\n * This contract is copied here and renamed from the original to avoid clashes in the compiled artifacts\r\n * when the user imports a zos-lib contract (that transitively causes this contract to be compiled and added to the\r\n * build/artifacts folder) as well as the vanilla Ownable implementation from an openzeppelin version.\r\n */\r\ncontract OpenZeppelinUpgradesOwnable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface Erc20 {\r\n    function approve(address, uint256) external returns (bool);\r\n    function transfer(address, uint256) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n}\r\n\r\ninterface CErc20 {\r\n    function mint(uint256) external returns (uint256);\r\n    function borrow(uint256) external returns (uint256);\r\n    function borrowRatePerBlock() external view returns (uint256);\r\n    function borrowBalanceCurrent(address) external returns (uint256);\r\n    function repayBorrow(uint256) external returns (uint256);\r\n    function redeemUnderlying(uint) external returns (uint);\r\n    function redeem(uint) external returns (uint);\r\n}\r\n\r\ninterface CEth {\r\n    function mint() external payable;\r\n    function borrow(uint256) external returns (uint256);\r\n    function repayBorrow() external payable;\r\n    function borrowBalanceCurrent(address) external returns (uint256);\r\n}\r\n\r\ninterface Comptroller {\r\n    function markets(address) external returns (bool, uint256);\r\n    function enterMarkets(address[] calldata)\r\n        external\r\n        returns (uint256[] memory);\r\n    function getAccountLiquidity(address)\r\n        external\r\n        view\r\n        returns (uint256, uint256, uint256);\r\n}\r\n\r\ninterface PriceOracle {\r\n    function getUnderlyingPrice(address) external view returns (uint256);\r\n}\r\n\r\ninterface CurveExchange {\r\n    function exchange(int128 i, int128 j, uint256 dx, uint256 min_dy) external;\r\n    function get_dy(int128, int128 j, uint256 dx) external view returns (uint256);\r\n}\r\n\r\ninterface CurveExchangeAdapter {\r\n    function swapThenBurn(bytes calldata _btcDestination, uint256 _amount, uint256 _minRenbtcAmount) external;\r\n}\r\n\r\ninterface Gateway {\r\n    function mint(bytes32 _pHash, uint256 _amount, bytes32 _nHash, bytes calldata _sig) external returns (uint256);\r\n    function burn(bytes calldata _to, uint256 _amount) external returns (uint256);\r\n}\r\n\r\ninterface GatewayRegistry {\r\n    function getGatewayBySymbol(string calldata _tokenSymbol) external view returns (Gateway);\r\n    function getGatewayByToken(address  _tokenAddress) external view returns (Gateway);\r\n    function getTokenBySymbol(string calldata _tokenSymbol) external view returns (Erc20);\r\n}\r\n\r\ncontract CompoundBorrower is Initializable {\r\n    using SafeMath for uint256;\r\n    address public owner;\r\n    Erc20 public wbtc;\r\n    CurveExchangeAdapter public curveAdapter;\r\n    Erc20 public activeToken;\r\n    CErc20 public activeCToken;\r\n    \r\n    function initialize(\r\n        address _owner,\r\n        address _wbtcToken,\r\n        address _curveAdapter\r\n    ) public {\r\n        owner = _owner;\r\n        wbtc = Erc20(_wbtcToken);\r\n        curveAdapter = CurveExchangeAdapter(_curveAdapter);\r\n        require(wbtc.approve(address(curveAdapter), uint256(-1)));\r\n    }\r\n    \r\n    /// @notice Borrow WBTC from Compound Protocol, swap for renBTC, and redeem real BTC.\r\n    ///\r\n    /// @param _tokenAddress The address of the collateral token.\r\n    /// @param _cTokenAddress The address of the collateral cToken.\r\n    /// @param _tokenAmount The amount of collateral to provide to Compound.\r\n    /// @param _comptrollerAddress The Compound comptroller address.\r\n    /// @param _cWbtcAddress The address of cWBTC.\r\n    /// @param _wbtcAmount The amount of WBTC to borrow.\r\n    /// @param _minRenbtcAmount The minimum amount of renBTC to swap for.\r\n    /// @param _btcDestination The bitcoin address to send BTC to.\r\n    ///\r\n    /// @return Nothing.\r\n    function borrowWithErc20AndBurn(\r\n        address _tokenAddress,\r\n        address _cTokenAddress,\r\n        uint256 _tokenAmount,\r\n        address _comptrollerAddress,\r\n        address _cWbtcAddress,\r\n        uint256 _wbtcAmount,\r\n        uint256 _minRenbtcAmount,\r\n        bytes calldata _btcDestination\r\n    ) external {\r\n        Erc20 token = Erc20(_tokenAddress);\r\n        token.transferFrom(msg.sender, address(this), _tokenAmount);\r\n        uint256 startWbtcBal = wbtc.balanceOf(address(this));\r\n        \r\n        // Approve cTokens before borrowing\r\n        token.approve(address(_cTokenAddress), uint256(-1));\r\n        token.approve(address(_cWbtcAddress), uint256(-1));\r\n        wbtc.approve(address(_cTokenAddress), uint256(-1));\r\n        wbtc.approve(address(_cWbtcAddress), uint256(-1));\r\n        \r\n        \r\n        // Supply and Borrow WBTC from Compound\r\n        borrowWbtcWithErc20(\r\n            _cTokenAddress,\r\n            _tokenAmount,\r\n            _comptrollerAddress,\r\n            _cWbtcAddress,\r\n            _wbtcAmount\r\n        );\r\n        \r\n        // Swap WBTC\r\n        uint256 endWbtcBal = startWbtcBal.sub(wbtc.balanceOf(address(this)));\r\n        curveAdapter.swapThenBurn(_btcDestination, endWbtcBal, _minRenbtcAmount);\r\n        \r\n        // Set active tokena and ctoken\r\n        activeToken = Erc20(_tokenAddress);\r\n        activeCToken = CErc20(_cTokenAddress);\r\n    }\r\n    \r\n    /// @notice Borrow WBTC from Compound Protocol and keep funds in the contract.\r\n    /// This is for testing purposes.\r\n    ///\r\n    /// @param _tokenAddress The address of the collateral token.\r\n    /// @param _cTokenAddress The address of the collateral cToken.\r\n    /// @param _tokenAmount The amount of collateral to provide to Compound.\r\n    /// @param _comptrollerAddress The Compound comptroller address.\r\n    /// @param _cWbtcAddress The address of cWBTC.\r\n    /// @param _wbtcAmount The amount of WBTC to borrow.\r\n    /// @param _minRenbtcAmount The minimum amount of renBTC to swap for.\r\n    /// @param _btcDestination The bitcoin address to send BTC to.\r\n    ///\r\n    /// @return Nothing.\r\n    function borrowWithErc20(\r\n        address _tokenAddress,\r\n        address _cTokenAddress,\r\n        uint256 _tokenAmount,\r\n        address _comptrollerAddress,\r\n        address _cWbtcAddress,\r\n        uint256 _wbtcAmount,\r\n        uint256 _minRenbtcAmount,\r\n        bytes calldata _btcDestination\r\n    ) external {\r\n        Erc20 token = Erc20(_tokenAddress);\r\n        token.transferFrom(msg.sender, address(this), _tokenAmount);\r\n        uint256 startWbtcBal = wbtc.balanceOf(address(this));\r\n        \r\n        // Approve cTokens before borrowing\r\n        token.approve(address(_cTokenAddress), uint256(-1));\r\n        token.approve(address(_cWbtcAddress), uint256(-1));\r\n        wbtc.approve(address(_cTokenAddress), uint256(-1));\r\n        wbtc.approve(address(_cWbtcAddress), uint256(-1));\r\n        \r\n        \r\n        // Supply and Borrow WBTC from Compound\r\n        borrowWbtcWithErc20(\r\n            _cTokenAddress,\r\n            _tokenAmount,\r\n            _comptrollerAddress,\r\n            _cWbtcAddress,\r\n            _wbtcAmount\r\n        );\r\n        \r\n        // Swap WBTC\r\n        uint256 endWbtcBal = wbtc.balanceOf(address(this));\r\n        curveAdapter.swapThenBurn(_btcDestination, endWbtcBal.sub(startWbtcBal), _minRenbtcAmount);\r\n        \r\n        // Set active tokena and ctoken\r\n        activeToken = Erc20(_tokenAddress);\r\n        activeCToken = CErc20(_cTokenAddress);\r\n    }\r\n    \r\n    /// @notice Borrow WBTC from Compound Protocol.\r\n    ///\r\n    /// @param _cTokenAddress The address of the collateral cToken.\r\n    /// @param _tokenAmount The amount of collateral to provide to Compound.\r\n    /// @param _comptrollerAddress The Compound comptroller address.\r\n    /// @param _cWbtcAddress The address of cWBTC.\r\n    /// @param _wbtcAmount The amount of WBTC to borrow.\r\n    ///\r\n    /// @return uint256.\r\n    function borrowWbtcWithErc20(\r\n        address _cTokenAddress,\r\n        uint256 _tokenAmount,\r\n        address _comptrollerAddress,\r\n        address _cWbtcAddress,\r\n        uint256 _wbtcAmount\r\n    ) public returns (uint256) {\r\n        CErc20 cToken = CErc20(_cTokenAddress);\r\n        Comptroller comptroller = Comptroller(_comptrollerAddress);\r\n        // PriceOracle priceOracle = PriceOracle(_priceOracleAddress);\r\n        CErc20 cWbtc = CErc20(_cWbtcAddress);\r\n        \r\n        // Supply Token as collateral, get cToken in return\r\n        cToken.mint(_tokenAmount);\r\n        \r\n        // Enter the Token market so you can borrow another type of asset\r\n        address[] memory cTokens = new address[](1);\r\n        cTokens[0] = _cTokenAddress;\r\n        uint256[] memory errors = comptroller.enterMarkets(cTokens);\r\n        if (errors[0] != 0) {\r\n            revert(\"Comptroller.enterMarkets failed.\");\r\n        }\r\n        \r\n        // Get my account's total liquidity value in Compound\r\n        (uint256 error, uint256 liquidity, uint256 shortfall) = comptroller\r\n            .getAccountLiquidity(address(this));\r\n        if (error != 0) {\r\n            revert(\"Comptroller.getAccountLiquidity failed.\");\r\n        }\r\n        require(shortfall == 0, \"account underwater\");\r\n        require(liquidity > 0, \"account has excess collateral\");\r\n        \r\n        // Borrow WBTC, check the WBTC balance for this contract's address\r\n        cWbtc.borrow(_wbtcAmount);\r\n        \r\n        // Get the borrow balance\r\n        uint256 borrows = cWbtc.borrowBalanceCurrent(address(this));\r\n        return borrows;\r\n    }\r\n    \r\n    /// @notice Repay current loan on Compound.\r\n    ///\r\n    /// @param _cWbtcAddress The address of cWBTC.\r\n    /// @param _repayAmount The amount of WBTC to repay.\r\n    ///\r\n    /// @return Nothing.\r\n    function repayBorrow(address _cWbtcAddress, uint _repayAmount) public {\r\n        CErc20 cWbtc = CErc20(_cWbtcAddress);\r\n        wbtc.transferFrom(msg.sender, address(this), _repayAmount);\r\n        cWbtc.repayBorrow(_repayAmount);\r\n    }\r\n    \r\n    /// @notice Redeem tokens from contract cTokens and transfer to owner.\r\n    ///\r\n    /// @param _cTokenAddress The address of the collateral cToken.\r\n    /// @param _tokenAddress The address of the collateral token.\r\n    /// @param _amount The amount of the collateral token to redeem and transfer.\r\n    ///\r\n    /// @return Nothing.\r\n    function redeemUnderlyingAndWithdraw(address _cTokenAddress, address _tokenAddress, uint _amount) public {\r\n        CErc20(_cTokenAddress).redeemUnderlying(_amount);\r\n        Erc20(_tokenAddress).transfer(owner, _amount);\r\n    }\r\n    \r\n    /// @notice Withdraw tokens from contract to owner.\r\n    ///\r\n    /// @param _tokenAddress The address of the token.\r\n    /// @param _withdrawAmount The amount of the token to transfer.\r\n    ///\r\n    /// @return Nothing.\r\n    function withdrawToken(address _tokenAddress, uint _withdrawAmount) public {\r\n        Erc20(_tokenAddress).transfer(owner, _withdrawAmount);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"activeCToken\",\"outputs\":[{\"internalType\":\"contract CErc20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"activeToken\",\"outputs\":[{\"internalType\":\"contract Erc20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_comptrollerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cWbtcAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_wbtcAmount\",\"type\":\"uint256\"}],\"name\":\"borrowWbtcWithErc20\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_comptrollerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cWbtcAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_wbtcAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minRenbtcAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_btcDestination\",\"type\":\"bytes\"}],\"name\":\"borrowWithErc20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_comptrollerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cWbtcAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_wbtcAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minRenbtcAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_btcDestination\",\"type\":\"bytes\"}],\"name\":\"borrowWithErc20AndBurn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"curveAdapter\",\"outputs\":[{\"internalType\":\"contract CurveExchangeAdapter\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wbtcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_curveAdapter\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"redeemUnderlyingAndWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cWbtcAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_repayAmount\",\"type\":\"uint256\"}],\"name\":\"repayBorrow\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wbtc\",\"outputs\":[{\"internalType\":\"contract Erc20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CompoundBorrower","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://0c3fe61d084b92ac6e734a3944b2615e009cd8c97d618c39ae83ed917b47614e"}]}