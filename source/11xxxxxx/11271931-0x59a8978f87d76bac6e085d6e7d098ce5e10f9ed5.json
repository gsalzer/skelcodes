{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n}\r\n\r\nabstract contract NKTContract {\r\n    function balanceOf(address account) external view virtual returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external virtual returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external virtual returns (bool);\r\n}\r\n\r\nabstract contract NKTStoreContract {\r\n    function getStoreBalance() external virtual returns (uint256);\r\n    function giveReward(address recipient, uint256 amount) external virtual returns (bool);\r\n    function withdrawAll(address recipient) external virtual returns (bool);\r\n}\r\n\r\ncontract NKTStaker is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    NKTContract private _mainTokenContract;                 // main token contract\r\n    NKTStoreContract private _storeWalletContract;          // store wallet contract\r\n\r\n    mapping (address => uint256) private _stakedBalances;   // map for stacked balances\r\n    mapping (address => uint256) private _rewards;          // map for rewards\r\n    \r\n    address private _devWallet;                             // dev wallet address\r\n    address[] private _stakers;                             // staker's array\r\n    \r\n    uint256 private _totalStackedAmount = 0;                // total stacked amount\r\n    uint256 private _minStakeAmount = 20e18;                // min stackable amount\r\n    \r\n    uint256 private _rewardPeriod = 3600;                  // seconds of a day\r\n    uint256 private _rewardPortion = 100;                  // reward portion = 1/100\r\n    \r\n    uint256 private _rewardFee = 98;                        // reward fee 98%, rest for dev 2%\r\n\r\n    uint256 private _taxFee = 2;                            // tax fee for transaction\r\n    \r\n    uint256 private _minRewardPeriod = 3600;                // min reward period = 1 hour (3600s)\r\n    \r\n    uint256 private _lastTimestamp; // last timestamp that distributed rewards\r\n    \r\n    // Events\r\n    event Staked(address staker, uint256 amount);\r\n    event Unstaked(address staker, uint256 amount);\r\n    event Claim(address staker, uint256 amount);\r\n    \r\n    constructor (NKTContract mainTokenContract, address devWallet) public {\r\n        _mainTokenContract = mainTokenContract;\r\n        _devWallet = devWallet;\r\n        \r\n    }\r\n    \r\n    function stake(uint256 amount) external {\r\n        require(\r\n            amount >= _minStakeAmount,\r\n            \"Too small amount\"\r\n        );\r\n\r\n        require(\r\n            _mainTokenContract.transferFrom(\r\n                _msgSender(),\r\n                address(this),\r\n                amount\r\n            ),\r\n            \"Stake failed\"\r\n        );\r\n        \r\n        uint256 taxAmount = amount.mul(_taxFee).div(100);\r\n        uint256 stackedAmount = amount.sub(taxAmount);\r\n        \r\n        if(_stakers.length == 0)\r\n            _lastTimestamp = uint256(now);\r\n\r\n        if(_stakedBalances[_msgSender()] == 0)\r\n            _stakers.push(_msgSender());\r\n            \r\n        _stakedBalances[_msgSender()] = _stakedBalances[_msgSender()].add(stackedAmount);\r\n        _totalStackedAmount = _totalStackedAmount.add(stackedAmount);\r\n        \r\n        emit Staked(_msgSender(), stackedAmount);\r\n    }\r\n    \r\n    function unstake(uint256 amount) external {\r\n        require(\r\n            _stakedBalances[_msgSender()] >= amount,\r\n            \"Unstake amount exceededs the staked amount.\"\r\n        );\r\n\r\n\r\n        require(\r\n            _mainTokenContract.transfer(\r\n                _msgSender(),\r\n                amount\r\n            ),\r\n            \"Unstake failed\"\r\n        );\r\n        \r\n        _stakedBalances[_msgSender()] = _stakedBalances[_msgSender()].sub(amount);\r\n        _totalStackedAmount = _totalStackedAmount.sub(amount);\r\n        \r\n        if(_stakedBalances[_msgSender()] == 0) {\r\n            for(uint i=0; i<_stakers.length; i++) {\r\n                if(_stakers[i] == _msgSender()) {\r\n                    _stakers[i] = _stakers[_stakers.length-1];\r\n                    _stakers.pop();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        emit Unstaked(_msgSender(), amount);\r\n        \r\n        uint256 rewardsAmount = _rewards[_msgSender()];\r\n        if(rewardsAmount > 0) {\r\n            require(\r\n                _storeWalletContract.giveReward(_msgSender(), rewardsAmount),\r\n                \"Claim failed.\"\r\n            );\r\n            _rewards[_msgSender()] = 0;\r\n    \t    emit Claim(_msgSender(), rewardsAmount);\r\n        }\r\n    }\r\n    \r\n    function claim(uint256 amount) external {\r\n        require(\r\n            _rewards[_msgSender()] >= amount,\r\n            \"Claim amount exceededs the pendnig rewards.\"\r\n        );\r\n        \r\n        require(\r\n            _storeWalletContract.giveReward(_msgSender(), amount),\r\n            \"Claim failed.\"\r\n        );\r\n        \r\n        _rewards[_msgSender()] = _rewards[_msgSender()].sub(amount);\r\n\t    emit Claim(_msgSender(), amount);\r\n    }\r\n    \r\n    function endStake() external {\r\n        uint256 rewardsAmount = _rewards[_msgSender()];\r\n        if(rewardsAmount > 0) {\r\n            require(\r\n                _storeWalletContract.giveReward(_msgSender(), rewardsAmount),\r\n                \"Claim failed.\"\r\n            );\r\n            _rewards[_msgSender()] = 0;\r\n    \t    emit Claim(_msgSender(), rewardsAmount);\r\n        }\r\n\t    \r\n\t    uint256 unstakeAmount = _stakedBalances[_msgSender()];\r\n\t    if(unstakeAmount > 0) {\r\n\t        require(\r\n                _mainTokenContract.transfer(\r\n                    _msgSender(),\r\n                    unstakeAmount\r\n                ),\r\n                \"Unstake failed\"\r\n            );\r\n        \r\n\t        _stakedBalances[_msgSender()] = 0;\r\n            _totalStackedAmount = _totalStackedAmount.sub(unstakeAmount);\r\n        \r\n            for(uint i=0; i<_stakers.length; i++) {\r\n                if(_stakers[i] == _msgSender()) {\r\n                    _stakers[i] = _stakers[_stakers.length-1];\r\n                    _stakers.pop();\r\n                    break;\r\n                }\r\n            }\r\n            emit Unstaked(_msgSender(), unstakeAmount);\r\n\t    }\r\n    }\r\n    \r\n    function calcRewards() external {\r\n        uint256 currentTimestamp = uint256(now);\r\n        uint256 diff = currentTimestamp.sub(_lastTimestamp);\r\n        if(diff >= _rewardPeriod) {\r\n            uint256 rewardDays = diff.div(_rewardPeriod);\r\n            uint256 offsetTimestamp = diff.sub(_rewardPeriod.mul(rewardDays));\r\n            \r\n            uint256 _storeBalance = _storeWalletContract.getStoreBalance();\r\n\r\n            for(uint j=0; j<rewardDays; j++) {\r\n                uint256 _totalRewardsAmount = _storeBalance.div(_rewardPortion);\r\n\r\n                if(_totalRewardsAmount > 0) {\r\n                    uint256 _rewardForStaker = _totalRewardsAmount.mul(_rewardFee).div(100);\r\n                    uint256 _rewardForDev = _totalRewardsAmount.sub(_rewardForStaker);\r\n                    \r\n                    for(uint i=0; i<_stakers.length; i++) {\r\n                        if(_stakers[i] != address(0)) {\r\n                            _rewards[_stakers[i]] = _rewards[_stakers[i]].add(_stakedBalances[_stakers[i]].mul(_rewardForStaker).div(_totalStackedAmount));\r\n                        }\r\n                    }\r\n                    \r\n                    if(_rewardForDev > 0)\r\n                        _storeWalletContract.giveReward(_devWallet, _rewardForDev);\r\n                }\r\n                _storeBalance = _storeBalance.sub(_totalRewardsAmount);\r\n            }\r\n            \r\n            _lastTimestamp = currentTimestamp.sub(offsetTimestamp);\r\n        }\r\n    }\r\n    \r\n    function withdrawAllFromStore(address recipient) external onlyOwner returns (bool) {\r\n        require(\r\n            recipient != address(0) && recipient != address(this),\r\n            \"Should be valid address.\"\r\n        );\r\n        \r\n        _storeWalletContract.withdrawAll(recipient);\r\n    }\r\n    \r\n    /**\r\n     * Get store wallet\r\n     */\r\n    function getStoreWalletContract() external view returns (address) {\r\n        return address(_storeWalletContract);\r\n    }\r\n     \r\n    /**\r\n     * Get total stacked amount\r\n     */\r\n    function getTotalStackedAmount() external view returns (uint256) {\r\n        return _totalStackedAmount;\r\n    }\r\n    \r\n    /**\r\n     * Get reward amount of staker\r\n     */\r\n    function getRewardOfAccount(address staker) external view returns (uint256) {\r\n        return _rewards[staker];\r\n    }\r\n    \r\n    /**\r\n     * Get stacked amount of staker\r\n     */\r\n    function getStakeAmountOfAccount(address staker) external view returns (uint256) {\r\n        return _stakedBalances[staker];\r\n    }\r\n    \r\n    /**\r\n     * Get min stake amount\r\n     */\r\n    function getMinStakeAmount() external view returns (uint256) {\r\n        return _minStakeAmount;\r\n    }\r\n    \r\n    /**\r\n     * Get rewards period\r\n     */\r\n    function getRewardPeriod() external view returns (uint256) {\r\n        return _rewardPeriod;\r\n    }\r\n    \r\n    /**\r\n     * Get rewards portion\r\n     */\r\n    function getRewardPortion() external view returns (uint256) {\r\n        return _rewardPortion;\r\n    }\r\n    \r\n    /**\r\n     * Get last timestamp that countdown for rewards started\r\n     */\r\n    function getLastTimestamp() external view returns (uint256) {\r\n        return _lastTimestamp;\r\n    }\r\n    \r\n    /**\r\n     * Get staker count\r\n     */\r\n    function getStakerCount() external view returns (uint256) {\r\n        return _stakers.length;\r\n    }\r\n    \r\n     /**\r\n     * Get rewards fee\r\n     */\r\n    function getRewardFee() external view returns (uint256) {\r\n        return _rewardFee;\r\n    }\r\n    \r\n    /**\r\n     * Set store wallet contract address\r\n     */\r\n    function setStoreWalletContract(NKTStoreContract storeWalletContract) external onlyOwner returns (bool) {\r\n        require(address(storeWalletContract) != address(0), 'store wallet contract should not be zero address.');\r\n\r\n        _storeWalletContract = storeWalletContract;\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * Set reward period\r\n     */\r\n    function setRewardPeriod(uint256 rewardPeriod) external onlyOwner returns (bool) {\r\n        require(rewardPeriod >= _minRewardPeriod, 'reward period should be above min reward period.');\r\n\r\n        _rewardPeriod = rewardPeriod;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set rewards portion in store balance. \r\n     * ex: 1000 => rewardsAmount of one period equals storeAmount.div(1000)\r\n     */\r\n    function setRewardPortion(uint256 rewardPortion) external onlyOwner returns (bool) {\r\n        require(rewardPortion >= 1, 'reward portion should be above 1');\r\n\r\n        _rewardPortion = rewardPortion;\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * Set rewards portion for stakers in rewards amount. \r\n     * ex: 98 => 98% (2% for dev)\r\n     */\r\n    function setRewardFee(uint256 rewardFee) external onlyOwner returns (bool) {\r\n        require(rewardFee >= 96 && rewardFee <= 100, 'reward fee should be in 96 ~ 100' );\r\n\r\n        _rewardFee = rewardFee;\r\n        _taxFee = uint256(100).sub(_rewardFee);\r\n        return true;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract NKTContract\",\"name\":\"mainTokenContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"devWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"calcRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinStakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getRewardOfAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardPortion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStakeAmountOfAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakerCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStoreWalletContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalStackedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardFee\",\"type\":\"uint256\"}],\"name\":\"setRewardFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardPeriod\",\"type\":\"uint256\"}],\"name\":\"setRewardPeriod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardPortion\",\"type\":\"uint256\"}],\"name\":\"setRewardPortion\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract NKTStoreContract\",\"name\":\"storeWalletContract\",\"type\":\"address\"}],\"name\":\"setStoreWalletContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdrawAllFromStore\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"NKTStaker","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000929ac6ed8ae0bd3ee87c60312cb14187ab4f06a7000000000000000000000000fad8e30ab5c4c67e90597156306686dcf02b263a","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://738448bbe4707a2271b550b4a8ebe3865a7e2b884378b49b3e455b8ead1ed7d7"}]}