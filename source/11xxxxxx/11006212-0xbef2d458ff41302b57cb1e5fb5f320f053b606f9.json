{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity-2.3.0/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/BankConfig.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\ninterface BankConfig {\r\n    /// @dev Return minimum ETH debt size per position.\r\n    function minDebtSize() external view returns (uint256);\r\n\r\n    /// @dev Return the interest rate per second, using 1e18 as denom.\r\n    function getInterestRate(uint256 debt, uint256 floating) external view returns (uint256);\r\n\r\n    /// @dev Return the bps rate for reserve pool.\r\n    function getReservePoolBps() external view returns (uint256);\r\n\r\n    /// @dev Return the bps rate for Avada Kill caster.\r\n    function getKillBps() external view returns (uint256);\r\n\r\n    /// @dev Return whether the given address is a goblin.\r\n    function isGoblin(address goblin) external view returns (bool);\r\n\r\n    /// @dev Return whether the given goblin accepts more debt. Revert on non-goblin.\r\n    function acceptDebt(address goblin) external view returns (bool);\r\n\r\n    /// @dev Return the work factor for the goblin + ETH debt, using 1e4 as denom. Revert on non-goblin.\r\n    function workFactor(address goblin, uint256 debt) external view returns (uint256);\r\n\r\n    /// @dev Return the kill factor for the goblin + ETH debt, using 1e4 as denom. Revert on non-goblin.\r\n    function killFactor(address goblin, uint256 debt) external view returns (uint256);\r\n}\r\n\r\n// File: contracts/SimpleBankConfig.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\n\r\n\r\ncontract SimpleBankConfig is BankConfig, Ownable {\r\n    /// @notice Configuration for each goblin.\r\n    struct GoblinConfig {\r\n        bool isGoblin;\r\n        bool acceptDebt;\r\n        uint256 workFactor;\r\n        uint256 killFactor;\r\n    }\r\n\r\n    /// The minimum ETH debt size per position.\r\n    uint256 public minDebtSize;\r\n    /// The interest rate per second, multiplied by 1e18.\r\n    uint256 public interestRate;\r\n    /// The portion of interests allocated to the reserve pool.\r\n    uint256 public getReservePoolBps;\r\n    /// The reward for successfully killing a position.\r\n    uint256 public getKillBps;\r\n    /// Mapping for goblin address to its configuration.\r\n    mapping (address => GoblinConfig) goblins;\r\n\r\n    constructor(\r\n        uint256 _minDebtSize,\r\n        uint256 _interestRate,\r\n        uint256 _reservePoolBps,\r\n        uint256 _killBps\r\n    ) public {\r\n        setParams(_minDebtSize, _interestRate, _reservePoolBps, _killBps);\r\n    }\r\n\r\n    /// @dev Set all the basic parameters. Must only be called by the owner.\r\n    /// @param _minDebtSize The new minimum debt size value.\r\n    /// @param _interestRate The new interest rate per second value.\r\n    /// @param _reservePoolBps The new interests allocated to the reserve pool value.\r\n    /// @param _killBps The new reward for killing a position value.\r\n    function setParams(\r\n        uint256 _minDebtSize,\r\n        uint256 _interestRate,\r\n        uint256 _reservePoolBps,\r\n        uint256 _killBps\r\n    ) public onlyOwner {\r\n        minDebtSize = _minDebtSize;\r\n        interestRate = _interestRate;\r\n        getReservePoolBps = _reservePoolBps;\r\n        getKillBps = _killBps;\r\n    }\r\n\r\n    /// @dev Set the configuration for the given goblin. Must only be called by the owner.\r\n    /// @param goblin The goblin address to set configuration.\r\n    /// @param _isGoblin Whether the given address is a valid goblin.\r\n    /// @param _acceptDebt Whether the goblin is accepting new debts.\r\n    /// @param _workFactor The work factor value for this goblin.\r\n    /// @param _killFactor The kill factor value for this goblin.\r\n    function setGoblin(\r\n        address goblin,\r\n        bool _isGoblin,\r\n        bool _acceptDebt,\r\n        uint256 _workFactor,\r\n        uint256 _killFactor\r\n    ) public onlyOwner {\r\n        goblins[goblin] = GoblinConfig({\r\n            isGoblin: _isGoblin,\r\n            acceptDebt: _acceptDebt,\r\n            workFactor: _workFactor,\r\n            killFactor: _killFactor\r\n        });\r\n    }\r\n\r\n    /// @dev Return the interest rate per second, using 1e18 as denom.\r\n    function getInterestRate(uint256 /* debt */, uint256 /* floating */) external view returns (uint256) {\r\n        return interestRate;\r\n    }\r\n\r\n    /// @dev Return whether the given address is a goblin.\r\n    function isGoblin(address goblin) external view returns (bool) {\r\n        return goblins[goblin].isGoblin;\r\n    }\r\n\r\n    /// @dev Return whether the given goblin accepts more debt. Revert on non-goblin.\r\n    function acceptDebt(address goblin) external view returns (bool) {\r\n        require(goblins[goblin].isGoblin, \"!goblin\");\r\n        return goblins[goblin].acceptDebt;\r\n    }\r\n\r\n    /// @dev Return the work factor for the goblin + ETH debt, using 1e4 as denom. Revert on non-goblin.\r\n    function workFactor(address goblin, uint256 /* debt */) external view returns (uint256) {\r\n        require(goblins[goblin].isGoblin, \"!goblin\");\r\n        return goblins[goblin].workFactor;\r\n    }\r\n\r\n    /// @dev Return the kill factor for the goblin + ETH debt, using 1e4 as denom. Revert on non-goblin.\r\n    function killFactor(address goblin, uint256 /* debt */) external view returns (uint256) {\r\n        require(goblins[goblin].isGoblin, \"!goblin\");\r\n        return goblins[goblin].killFactor;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minDebtSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reservePoolBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_killBps\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"goblin\",\"type\":\"address\"}],\"name\":\"acceptDebt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getInterestRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getKillBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getReservePoolBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"interestRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"goblin\",\"type\":\"address\"}],\"name\":\"isGoblin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"goblin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"killFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minDebtSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"goblin\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isGoblin\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_acceptDebt\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_workFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_killFactor\",\"type\":\"uint256\"}],\"name\":\"setGoblin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minDebtSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reservePoolBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_killBps\",\"type\":\"uint256\"}],\"name\":\"setParams\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"goblin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"workFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"SimpleBankConfig","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000001bc16d674ec8000000000000000000000000000000000000000000000000000000000000bd014d7e00000000000000000000000000000000000000000000000000000000000003e800000000000000000000000000000000000000000000000000000000000001f4","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://1c25d0d7b8f965632085a9795d9570dff4d82e21242de2887587c11d41f5e63f"}]}