{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: contracts/IBridgeValidators.sol\r\n\r\ninterface IBridgeValidators {\r\n    function isValidator(address _validator) public view returns(bool);\r\n    function requiredSignatures() public view returns(uint256);\r\n    function owner() public view returns(address);\r\n}\r\n\r\n// File: contracts/libraries/Message.sol\r\n\r\nlibrary Message {\r\n    // function uintToString(uint256 inputValue) internal pure returns (string) {\r\n    //     // figure out the length of the resulting string\r\n    //     uint256 length = 0;\r\n    //     uint256 currentValue = inputValue;\r\n    //     do {\r\n    //         length++;\r\n    //         currentValue /= 10;\r\n    //     } while (currentValue != 0);\r\n    //     // allocate enough memory\r\n    //     bytes memory result = new bytes(length);\r\n    //     // construct the string backwards\r\n    //     uint256 i = length - 1;\r\n    //     currentValue = inputValue;\r\n    //     do {\r\n    //         result[i--] = byte(48 + currentValue % 10);\r\n    //         currentValue /= 10;\r\n    //     } while (currentValue != 0);\r\n    //     return string(result);\r\n    // }\r\n\r\n    function addressArrayContains(address[] array, address value) internal pure returns (bool) {\r\n        for (uint256 i = 0; i < array.length; i++) {\r\n            if (array[i] == value) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    // layout of message :: bytes:\r\n    // offset  0: 32 bytes :: uint256 - message length\r\n    // offset 32: 20 bytes :: address - recipient address\r\n    // offset 52: 32 bytes :: uint256 - value\r\n    // offset 84: 32 bytes :: bytes32 - transaction hash\r\n    // offset 116: 32 bytes :: uint256 - home gas price\r\n\r\n    // bytes 1 to 32 are 0 because message length is stored as little endian.\r\n    // mload always reads 32 bytes.\r\n    // so we can and have to start reading recipient at offset 20 instead of 32.\r\n    // if we were to read at 32 the address would contain part of value and be corrupted.\r\n    // when reading from offset 20 mload will read 12 zero bytes followed\r\n    // by the 20 recipient address bytes and correctly convert it into an address.\r\n    // this saves some storage/gas over the alternative solution\r\n    // which is padding address to 32 bytes and reading recipient at offset 32.\r\n    // for more details see discussion in:\r\n    // https://github.com/paritytech/parity-bridge/issues/61\r\n    function parseMessage(bytes message)\r\n    internal\r\n    pure\r\n    returns(address recipient, uint256 amount, bytes32 txHash)\r\n    {\r\n        require(isMessageValid(message));\r\n        assembly {\r\n            recipient := and(mload(add(message, 20)), 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\r\n            amount := mload(add(message, 52))\r\n            txHash := mload(add(message, 84))\r\n        }\r\n    }\r\n\r\n    function isMessageValid(bytes _msg) internal pure returns(bool) {\r\n        return _msg.length == 116;\r\n    }\r\n\r\n    function recoverAddressFromSignedMessage(bytes signature, bytes message) internal pure returns (address) {\r\n        require(signature.length == 65);\r\n        bytes32 r;\r\n        bytes32 s;\r\n        bytes1 v;\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            r := mload(add(signature, 0x20))\r\n            s := mload(add(signature, 0x40))\r\n            v := mload(add(signature, 0x60))\r\n        }\r\n        return ecrecover(hashMessage(message), uint8(v), r, s);\r\n    }\r\n\r\n    function hashMessage(bytes message) internal pure returns (bytes32) {\r\n        bytes memory prefix = \"\\x19Ethereum Signed Message:\\n\";\r\n        // message is always 116 length\r\n        string memory msgLength = \"116\";\r\n        return keccak256(prefix, msgLength, message);\r\n    }\r\n\r\n    function hasEnoughValidSignatures(\r\n        bytes _message,\r\n        uint8[] _vs,\r\n        bytes32[] _rs,\r\n        bytes32[] _ss,\r\n        IBridgeValidators _validatorContract) internal view {\r\n        require(isMessageValid(_message));\r\n        uint256 requiredSignatures = _validatorContract.requiredSignatures();\r\n        require(_vs.length >= requiredSignatures);\r\n        bytes32 hash = hashMessage(_message);\r\n        address[] memory encounteredAddresses = new address[](requiredSignatures);\r\n\r\n        for (uint256 i = 0; i < requiredSignatures; i++) {\r\n            address recoveredAddress = ecrecover(hash, _vs[i], _rs[i], _ss[i]);\r\n            require(_validatorContract.isValidator(recoveredAddress));\r\n            if (addressArrayContains(encounteredAddresses, recoveredAddress)) {\r\n                revert();\r\n            }\r\n            encounteredAddresses[i] = recoveredAddress;\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/libraries/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n// File: contracts/upgradeability/EternalStorage.sol\r\n\r\n/**\r\n * @title EternalStorage\r\n * @dev This contract holds all the necessary state variables to carry out the storage of any contract.\r\n */\r\ncontract EternalStorage {\r\n\r\n    mapping(bytes32 => uint256) internal uintStorage;\r\n    mapping(bytes32 => string) internal stringStorage;\r\n    mapping(bytes32 => address) internal addressStorage;\r\n    mapping(bytes32 => bytes) internal bytesStorage;\r\n    mapping(bytes32 => bool) internal boolStorage;\r\n    mapping(bytes32 => int256) internal intStorage;\r\n\r\n}\r\n\r\n// File: contracts/IOwnedUpgradeabilityProxy.sol\r\n\r\ninterface IOwnedUpgradeabilityProxy {\r\n    function proxyOwner() public view returns (address);\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/OwnedUpgradeability.sol\r\n\r\ncontract OwnedUpgradeability {\r\n\r\n    function upgradeabilityAdmin() public view returns (address) {\r\n        return IOwnedUpgradeabilityProxy(this).proxyOwner();\r\n    }\r\n\r\n    // Avoid using onlyProxyOwner name to prevent issues with implementation from proxy contract\r\n    modifier onlyIfOwnerOfProxy() {\r\n        require(msg.sender == upgradeabilityAdmin());\r\n        _;\r\n    }\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev This contract has an owner address providing basic authorization control\r\n */\r\ncontract Ownable is EternalStorage {\r\n    /**\r\n    * @dev Event to show ownership has been transferred\r\n    * @param previousOwner representing the address of the previous owner\r\n    * @param newOwner representing the address of the new owner\r\n    */\r\n    event OwnershipTransferred(address previousOwner, address newOwner);\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Tells the address of the owner\r\n    * @return the address of the owner\r\n    */\r\n    function owner() public view returns (address) {\r\n        return addressStorage[keccak256(\"owner\")];\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner the address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        setOwner(newOwner);\r\n    }\r\n\r\n    /**\r\n    * @dev Sets a new owner address\r\n    */\r\n    function setOwner(address newOwner) internal {\r\n        emit OwnershipTransferred(owner(), newOwner);\r\n        addressStorage[keccak256(\"owner\")] = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/Validatable.sol\r\n\r\ncontract Validatable is EternalStorage {\r\n\r\n    function validatorContract() public view returns(IBridgeValidators) {\r\n        return IBridgeValidators(addressStorage[keccak256(\"validatorContract\")]);\r\n    }\r\n\r\n    modifier onlyValidator() {\r\n        require(validatorContract().isValidator(msg.sender));\r\n        _;\r\n    }\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/U_BasicBridge.sol\r\n\r\ncontract BasicBridge is EternalStorage, Validatable, Ownable {\r\n    event GasPriceChanged(uint256 gasPrice);\r\n    event RequiredBlockConfirmationChanged(uint256 requiredBlockConfirmations);\r\n\r\n    function setGasPrice(uint256 _gasPrice) public onlyOwner {\r\n        require(_gasPrice > 0);\r\n        uintStorage[keccak256(\"gasPrice\")] = _gasPrice;\r\n        emit GasPriceChanged(_gasPrice);\r\n    }\r\n\r\n    function gasPrice() public view returns(uint256) {\r\n        return uintStorage[keccak256(\"gasPrice\")];\r\n    }\r\n\r\n    function setRequiredBlockConfirmations(uint256 _blockConfirmations) public onlyOwner {\r\n        require(_blockConfirmations > 0);\r\n        uintStorage[keccak256(\"requiredBlockConfirmations\")] = _blockConfirmations;\r\n        emit RequiredBlockConfirmationChanged(_blockConfirmations);\r\n    }\r\n\r\n    function requiredBlockConfirmations() public view returns(uint256) {\r\n        return uintStorage[keccak256(\"requiredBlockConfirmations\")];\r\n    }\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/U_HomeBridge.sol\r\n\r\ncontract Sacrifice {\r\n    constructor(address _recipient) public payable {\r\n        selfdestruct(_recipient);\r\n    }\r\n}\r\n\r\ncontract HomeBridge is EternalStorage, BasicBridge, OwnedUpgradeability {\r\n    using SafeMath for uint256;\r\n    event GasConsumptionLimitsUpdated(uint256 gas);\r\n    event Deposit (address recipient, uint256 value);\r\n    event Withdraw (address recipient, uint256 value, bytes32 transactionHash);\r\n    event DailyLimit(uint256 newLimit);\r\n    event ForeignDailyLimit(uint256 newLimit);\r\n\r\n    function initialize (\r\n        address _validatorContract,\r\n        uint256 _homeDailyLimit,\r\n        uint256 _maxPerTx,\r\n        uint256 _minPerTx,\r\n        uint256 _homeGasPrice,\r\n        uint256 _requiredBlockConfirmations\r\n    ) public\r\n    returns(bool)\r\n    {\r\n        require(!isInitialized());\r\n        require(_validatorContract != address(0));\r\n        require(_homeGasPrice > 0);\r\n        require(_requiredBlockConfirmations > 0);\r\n        require(_minPerTx > 0 && _maxPerTx > _minPerTx && _homeDailyLimit > _maxPerTx);\r\n        addressStorage[keccak256(\"validatorContract\")] = _validatorContract;\r\n        uintStorage[keccak256(\"deployedAtBlock\")] = block.number;\r\n        uintStorage[keccak256(\"homeDailyLimit\")] = _homeDailyLimit;\r\n        uintStorage[keccak256(\"maxPerTx\")] = _maxPerTx;\r\n        uintStorage[keccak256(\"minPerTx\")] = _minPerTx;\r\n        uintStorage[keccak256(\"gasPrice\")] = _homeGasPrice;\r\n        uintStorage[keccak256(\"requiredBlockConfirmations\")] = _requiredBlockConfirmations;\r\n        setInitialize(true);\r\n        return isInitialized();\r\n    }\r\n\r\n    function () public payable {\r\n        require(msg.value > 0);\r\n        require(msg.data.length == 0);\r\n        require(withinLimit(msg.value));\r\n        setTotalSpentPerDay(getCurrentDay(), totalSpentPerDay(getCurrentDay()).add(msg.value));\r\n        emit Deposit(msg.sender, msg.value);\r\n    }\r\n\r\n    function upgradeFrom3To4() public {\r\n        require(owner() == address(0));\r\n        setOwner(validatorContract().owner());\r\n    }\r\n\r\n    function gasLimitWithdrawRelay() public view returns(uint256) {\r\n        return uintStorage[keccak256(\"gasLimitWithdrawRelay\")];\r\n    }\r\n\r\n    function deployedAtBlock() public view returns(uint256) {\r\n        return uintStorage[keccak256(\"deployedAtBlock\")];\r\n    }\r\n\r\n    function homeDailyLimit() public view returns(uint256) {\r\n        return uintStorage[keccak256(\"homeDailyLimit\")];\r\n    }\r\n\r\n    function foreignDailyLimit() public view returns(uint256) {\r\n        return uintStorage[keccak256(\"foreignDailyLimit\")];\r\n    }\r\n\r\n    function totalSpentPerDay(uint256 _day) public view returns(uint256) {\r\n        return uintStorage[keccak256(\"totalSpentPerDay\", _day)];\r\n    }\r\n\r\n    function totalExecutedPerDay(uint256 _day) public view returns(uint256) {\r\n        return uintStorage[keccak256(\"totalExecutedPerDay\", _day)];\r\n    }\r\n\r\n    function withdraws(bytes32 _withdraw) public view returns(bool) {\r\n        return boolStorage[keccak256(\"withdraws\", _withdraw)];\r\n    }\r\n\r\n    function setGasLimitWithdrawRelay(uint256 _gas) external onlyOwner {\r\n        uintStorage[keccak256(\"gasLimitWithdrawRelay\")] = _gas;\r\n        emit GasConsumptionLimitsUpdated(_gas);\r\n    }\r\n\r\n    function withdraw(uint8[] vs, bytes32[] rs, bytes32[] ss, bytes message) external {\r\n        Message.hasEnoughValidSignatures(message, vs, rs, ss, validatorContract());\r\n        address recipient;\r\n        uint256 amount;\r\n        bytes32 txHash;\r\n        (recipient, amount, txHash) = Message.parseMessage(message);\r\n        require(withinForeignLimit(amount));\r\n        setTotalExecutedPerDay(getCurrentDay(), totalExecutedPerDay(getCurrentDay()).add(amount));\r\n        require(!withdraws(txHash));\r\n        setWithdraws(txHash, true);\r\n\r\n        // pay out recipient\r\n        if (!recipient.send(amount)) {\r\n            (new Sacrifice).value(amount)(recipient);\r\n        }\r\n\r\n        emit Withdraw(recipient, amount, txHash);\r\n    }\r\n\r\n    function setHomeDailyLimit(uint256 _homeDailyLimit) external onlyOwner {\r\n        uintStorage[keccak256(\"homeDailyLimit\")] = _homeDailyLimit;\r\n        emit DailyLimit(_homeDailyLimit);\r\n    }\r\n\r\n    function setMaxPerTx(uint256 _maxPerTx) external onlyOwner {\r\n        require(_maxPerTx < homeDailyLimit());\r\n        uintStorage[keccak256(\"maxPerTx\")] = _maxPerTx;\r\n    }\r\n\r\n    function setForeignDailyLimit(uint256 _foreignDailyLimit) external onlyOwner {\r\n        uintStorage[keccak256(\"foreignDailyLimit\")] = _foreignDailyLimit;\r\n        emit ForeignDailyLimit(_foreignDailyLimit);\r\n    }\r\n\r\n    function setForeignMaxPerTx(uint256 _maxPerTx) external onlyOwner {\r\n        require(_maxPerTx < foreignDailyLimit());\r\n        uintStorage[keccak256(\"foreignMaxPerTx\")] = _maxPerTx;\r\n    }\r\n\r\n    function setMinPerTx(uint256 _minPerTx) external onlyOwner {\r\n        require(_minPerTx < homeDailyLimit() && _minPerTx < maxPerTx());\r\n        uintStorage[keccak256(\"minPerTx\")] = _minPerTx;\r\n    }\r\n\r\n    function minPerTx() public view returns(uint256) {\r\n        return uintStorage[keccak256(\"minPerTx\")];\r\n    }\r\n\r\n    function getCurrentDay() public view returns(uint256) {\r\n        return now / 1 days;\r\n    }\r\n\r\n    function maxPerTx() public view returns(uint256) {\r\n        return uintStorage[keccak256(\"maxPerTx\")];\r\n    }\r\n\r\n    function foreignMaxPerTx() public view returns(uint256) {\r\n        return uintStorage[keccak256(\"foreignMaxPerTx\")];\r\n    }\r\n\r\n    function withinLimit(uint256 _amount) public view returns(bool) {\r\n        uint256 nextLimit = totalSpentPerDay(getCurrentDay()).add(_amount);\r\n        return homeDailyLimit() >= nextLimit && _amount <= maxPerTx() && _amount >= minPerTx();\r\n    }\r\n\r\n    function withinForeignLimit(uint256 _amount) public view returns(bool) {\r\n        uint256 nextLimit = totalExecutedPerDay(getCurrentDay()).add(_amount);\r\n        return foreignDailyLimit() >= nextLimit && _amount <= foreignMaxPerTx();\r\n    }\r\n\r\n    function isInitialized() public view returns(bool) {\r\n        return boolStorage[keccak256(\"isInitialized\")];\r\n    }\r\n\r\n    function setTotalSpentPerDay(uint256 _day, uint256 _value) private {\r\n        uintStorage[keccak256(\"totalSpentPerDay\", _day)] = _value;\r\n    }\r\n\r\n    function setTotalExecutedPerDay(uint256 _day, uint256 _value) private {\r\n        uintStorage[keccak256(\"totalExecutedPerDay\", _day)] = _value;\r\n    }\r\n\r\n    function setWithdraws(bytes32 _withdraw, bool _status) private {\r\n        boolStorage[keccak256(\"withdraws\", _withdraw)] = _status;\r\n    }\r\n\r\n    function setInitialize(bool _status) private {\r\n        boolStorage[keccak256(\"isInitialized\")] = _status;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withinForeignLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_day\",\"type\":\"uint256\"}],\"name\":\"totalSpentPerDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"foreignMaxPerTx\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requiredBlockConfirmations\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_validatorContract\",\"type\":\"address\"},{\"name\":\"_homeDailyLimit\",\"type\":\"uint256\"},{\"name\":\"_maxPerTx\",\"type\":\"uint256\"},{\"name\":\"_minPerTx\",\"type\":\"uint256\"},{\"name\":\"_homeGasPrice\",\"type\":\"uint256\"},{\"name\":\"_requiredBlockConfirmations\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_day\",\"type\":\"uint256\"}],\"name\":\"totalExecutedPerDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gasLimitWithdrawRelay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"homeDailyLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"foreignDailyLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"validatorContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deployedAtBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"vs\",\"type\":\"uint8[]\"},{\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"name\":\"ss\",\"type\":\"bytes32[]\"},{\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minPerTx\",\"type\":\"uint256\"}],\"name\":\"setMinPerTx\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_blockConfirmations\",\"type\":\"uint256\"}],\"name\":\"setRequiredBlockConfirmations\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_homeDailyLimit\",\"type\":\"uint256\"}],\"name\":\"setHomeDailyLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gas\",\"type\":\"uint256\"}],\"name\":\"setGasLimitWithdrawRelay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gasPrice\",\"type\":\"uint256\"}],\"name\":\"setGasPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxPerTx\",\"type\":\"uint256\"}],\"name\":\"setMaxPerTx\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"upgradeFrom3To4\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_foreignDailyLimit\",\"type\":\"uint256\"}],\"name\":\"setForeignDailyLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxPerTx\",\"type\":\"uint256\"}],\"name\":\"setForeignMaxPerTx\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradeabilityAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minPerTx\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_withdraw\",\"type\":\"bytes32\"}],\"name\":\"withdraws\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withinLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxPerTx\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gasPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"GasConsumptionLimitsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"transactionHash\",\"type\":\"bytes32\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"DailyLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"ForeignDailyLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"gasPrice\",\"type\":\"uint256\"}],\"name\":\"GasPriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requiredBlockConfirmations\",\"type\":\"uint256\"}],\"name\":\"RequiredBlockConfirmationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"HomeBridge","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"bzzr://3a1297a91abfd62f96cf9058ee8b07391d81de99270c6daa2e54c91f786abfcd"}]}