{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/interfaces/oracleInterface.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface oracleInterface {\r\n    function latestAnswer() external view returns (int256);\r\n}\r\n\r\n// File: contracts/interfaces/oracleProxyInterface.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface oracleProxyInterface  {\r\n\tfunction getTokenPrice(uint256 tokenID) external view returns (uint256);\r\n\r\n\tfunction getOracleFeed(uint256 tokenID) external view returns (address, uint256);\r\n\tfunction setOracleFeed(uint256 tokenID, address feedAddr, uint256 decimals, bool needPriceConvert, uint256 priceConvertID) external returns (bool);\r\n}\r\n\r\n// File: contracts/Errors.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\ncontract Modifier {\r\n    string internal constant ONLY_OWNER = \"O\";\r\n    string internal constant ONLY_MANAGER = \"M\";\r\n    string internal constant CIRCUIT_BREAKER = \"emergency\";\r\n}\r\n\r\ncontract ManagerModifier is Modifier {\r\n    string internal constant ONLY_HANDLER = \"H\";\r\n    string internal constant ONLY_LIQUIDATION_MANAGER = \"LM\";\r\n    string internal constant ONLY_BREAKER = \"B\";\r\n}\r\n\r\ncontract HandlerDataStorageModifier is Modifier {\r\n    string internal constant ONLY_BIFI_CONTRACT = \"BF\";\r\n}\r\n\r\ncontract SIDataStorageModifier is Modifier {\r\n    string internal constant ONLY_SI_HANDLER = \"SI\";\r\n}\r\n\r\ncontract HandlerErrors is Modifier {\r\n    string internal constant USE_VAULE = \"use value\";\r\n    string internal constant USE_ARG = \"use arg\";\r\n    string internal constant EXCEED_LIMIT = \"exceed limit\";\r\n    string internal constant NO_LIQUIDATION = \"no liquidation\";\r\n    string internal constant NO_LIQUIDATION_REWARD = \"no enough reward\";\r\n    string internal constant NO_EFFECTIVE_BALANCE = \"not enough balance\";\r\n    string internal constant TRANSFER = \"err transfer\";\r\n}\r\n\r\ncontract SIErrors is Modifier { }\r\n\r\ncontract InterestErrors is Modifier { }\r\n\r\ncontract LiquidationManagerErrors is Modifier {\r\n    string internal constant NO_DELINQUENT = \"not delinquent\";\r\n}\r\n\r\ncontract ManagerErrors is ManagerModifier {\r\n    string internal constant REWARD_TRANSFER = \"RT\";\r\n    string internal constant UNSUPPORTED_TOKEN = \"UT\";\r\n}\r\n\r\ncontract OracleProxyErrors is Modifier {\r\n    string internal constant ZERO_PRICE = \"price zero\";\r\n}\r\n\r\ncontract RequestProxyErrors is Modifier { }\r\n\r\ncontract ManagerDataStorageErrors is ManagerModifier {\r\n    string internal constant NULL_ADDRESS = \"err addr null\";\r\n}\r\n\r\n// File: contracts/oracle/oracleProxy.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @title Bifi's OracleProxy Contract\r\n * @notice Communicate with the contract that\r\n * provides the price of token\r\n * @author Bifi\r\n */\r\ncontract oracleProxy is oracleProxyInterface, OracleProxyErrors {\r\n\taddress payable owner;\r\n\r\n\tmapping(uint256 => Oracle) oracle;\r\n\r\n\tstruct Oracle {\r\n\t\toracleInterface feed;\r\n\t\tuint256 feedUnderlyingPoint;\r\n\r\n\t\tbool needPriceConvert;\r\n\t\tuint256 priceConvertID;\r\n\t}\r\n\r\n\tuint256 constant unifiedPoint = 10 ** 18;\r\n\r\n\tuint256 constant defaultUnderlyingPoint = 8;\r\n\r\n\tmodifier onlyOwner {\r\n\t\trequire(msg.sender == owner, ONLY_OWNER);\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Construct a new OracleProxy which manages many oracles\r\n\t* @param coinOracle The address of ether's oracle contract\r\n\t* @param usdtOracle The address of usdt's oracle contract\r\n\t* @param daiOracle The address of dai's oracle contract\r\n\t* @param linkOracle The address of link's oracle contract\r\n\t*/\r\n\tconstructor (address coinOracle, address usdtOracle, address daiOracle, address linkOracle, address usdcOracle) public\r\n\t{\r\n\t\towner = msg.sender;\r\n\t\t_setOracleFeed(0, coinOracle, 8, false, 0);\r\n\t\t_setOracleFeed(1, usdtOracle, 18, true, 0);\r\n\t\t_setOracleFeed(2, daiOracle, 8, false, 0);\r\n\t\t_setOracleFeed(3, linkOracle, 8, false, 0);\r\n\t\t_setOracleFeed(4, usdcOracle, 18, true, 0);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Replace the owner of the handler\r\n\t* @param _owner the address of the owner to be replaced\r\n\t* @return true (TODO: validate results)\r\n\t*/\r\n\tfunction ownershipTransfer(address payable _owner) onlyOwner public returns (bool)\r\n\t{\r\n\t\towner = _owner;\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Gets information about the linked token Oracle.\r\n\t* @param tokenID The ID of get token Oracle information\r\n\t* @return the address of the token oracle feed and the decimal of the actual token.\r\n\t*/\r\n\tfunction getOracleFeed(uint256 tokenID) external view override returns (address, uint256)\r\n\t{\r\n\t\treturn _getOracleFeed(tokenID);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Set information about the linked token Oracle.\r\n\t* @param tokenID tokenID to set token Oracle information\r\n\t* @param feedAddr the address of the feed contract\r\n\t* that provides the price of the token\r\n\t* @param decimals Decimal of the token\r\n\t* @return true (TODO: validate results)\r\n\t*/\r\n\tfunction setOracleFeed(uint256 tokenID, address feedAddr, uint256 decimals, bool needPriceConvert, uint256 priceConvertID) onlyOwner external override returns (bool)\r\n\t{\r\n\t\treturn _setOracleFeed(tokenID, feedAddr, decimals, needPriceConvert, priceConvertID);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Gets information about the linked token Oracle.\r\n\t* @param tokenID The ID of get token Oracle information\r\n\t* @return the address of the token oracle feed and the decimal of the actual token.\r\n\t*/\r\n\tfunction _getOracleFeed(uint256 tokenID) internal view returns (address, uint256)\r\n\t{\r\n\t\tOracle memory _oracle = oracle[tokenID];\r\n\t\taddress addr = address(_oracle.feed);\r\n\t\treturn (addr, _oracle.feedUnderlyingPoint);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Set information about the linked token Oracle.\r\n\t* @param tokenID tokenID to set token Oracle information\r\n\t* @param feedAddr the address of the feed contract\r\n\t* that provides the price of the token\r\n\t* @param decimals Decimal of the token\r\n\t* @param needPriceConvert true for this oracle feed is not USD, need convert\r\n\t* @param priceConvertID convert price feed id(registered)\r\n\t* @return true (TODO: validate results)\r\n\t*/\r\n\tfunction _setOracleFeed(uint256 tokenID, address feedAddr, uint256 decimals, bool needPriceConvert, uint256 priceConvertID) internal returns (bool)\r\n\t{\r\n\t\tOracle memory _oracle;\r\n\t\t_oracle.feed = oracleInterface(feedAddr);\r\n\t\t_oracle.feedUnderlyingPoint = (10 ** decimals);\r\n\r\n\t\t_oracle.needPriceConvert = needPriceConvert;\r\n\t\t_oracle.priceConvertID = priceConvertID;\r\n\t\toracle[tokenID] = _oracle;\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev The price of the token is obtained through the price feed contract.\r\n\t* @param tokenID The ID of the token that will take the price.\r\n\t* @return The token price of a uniform unit.\r\n\t*/\r\n\tfunction getTokenPrice(uint256 tokenID) external view override returns (uint256)\r\n\t{\r\n\t\tOracle memory _oracle = oracle[tokenID];\r\n\t\tuint256 underlyingPrice = uint256(_oracle.feed.latestAnswer());\r\n\t\tuint256 unifiedPrice = _convertPriceToUnified(underlyingPrice, _oracle.feedUnderlyingPoint);\r\n\r\n\t\tif (_oracle.needPriceConvert)\r\n\t\t{\r\n\t\t\t_oracle = oracle[_oracle.priceConvertID];\r\n\t\t\tuint256 convertFeedUnderlyingPrice = uint256(_oracle.feed.latestAnswer());\r\n\t\t\tuint256 convertPrice = _convertPriceToUnified(convertFeedUnderlyingPrice, oracle[0].feedUnderlyingPoint);\r\n\t\t\tunifiedPrice = unifiedMul(unifiedPrice, convertPrice);\r\n\t\t}\r\n\r\n\t\trequire(unifiedPrice != 0, ZERO_PRICE);\r\n\t\treturn unifiedPrice;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Get owner's address in manager contract\r\n\t* @return The address of owner\r\n\t*/\r\n\tfunction getOwner() public view returns (address)\r\n\t{\r\n\t\treturn owner;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Unify the decimal value of the token price returned by price feed oracle.\r\n\t* @param price token price without unified of decimal\r\n\t* @param feedUnderlyingPoint Decimal of the token\r\n\t* @return The price of tokens with unified decimal\r\n\t*/\r\n\tfunction _convertPriceToUnified(uint256 price, uint256 feedUnderlyingPoint) internal pure returns (uint256)\r\n\t{\r\n\t\treturn div(mul(price, unifiedPoint), feedUnderlyingPoint);\r\n\t}\r\n\r\n\t/* **************** safeMath **************** */\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256)\r\n\t{\r\n\t\treturn _mul(a, b);\r\n\t}\r\n\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256)\r\n\t{\r\n\t\treturn _div(a, b, \"div by zero\");\r\n\t}\r\n\r\n\tfunction _mul(uint256 a, uint256 b) internal pure returns (uint256)\r\n\t{\r\n\t\tif (a == 0)\r\n\t\t{\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tuint256 c = a * b;\r\n\t\trequire((c / a) == b, \"mul overflow\");\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction _div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256)\r\n\t{\r\n\t\trequire(b > 0, errorMessage);\r\n\t\treturn a / b;\r\n\t}\r\n\r\n\tfunction unifiedMul(uint256 a, uint256 b) internal pure returns (uint256)\r\n\t{\r\n\t\treturn _div(_mul(a, b), unifiedPoint, \"unified mul by zero\");\r\n\t}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"coinOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdtOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"daiOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"linkOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdcOracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"getOracleFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"getTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"ownershipTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feedAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"needPriceConvert\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"priceConvertID\",\"type\":\"uint256\"}],\"name\":\"setOracleFeed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"oracleProxy","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005f4ec3df9cbd43714fe2740f5e3616155c5b8419000000000000000000000000ee9f2375b4bdf6387aa8265dd4fb8f16512a1d46000000000000000000000000aed0c38402a5d19df6e4c03f4e2dced6e29c1ee90000000000000000000000002c1d072e956affc0d435cb7ac38ef18d24d9127c000000000000000000000000986b5e1e1755e3c2440e960477f25201b0a8bbd4","EVMVersion":"Default","Library":"","LicenseType":"BSD-3-Clause","Proxy":"0","Implementation":"","SwarmSource":"ipfs://054af9947e6b1aecd4b66942577758a29856c320d0608de29e74efbbc8fe4d85"}]}