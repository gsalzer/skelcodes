{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\nlibrary Pairing {\r\n    uint256 constant PRIME_Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\r\n\r\n    struct G1Point {\r\n        uint256 X;\r\n        uint256 Y;\r\n    }\r\n\r\n    // Encoding of field elements is: X[0] * z + X[1]\r\n    struct G2Point {\r\n        uint256[2] X;\r\n        uint256[2] Y;\r\n    }\r\n\r\n    /*\r\n     * @return The negation of p, i.e. p.plus(p.negate()) should be zero\r\n     */\r\n    function negate(G1Point memory p) internal pure returns (G1Point memory) {\r\n        // The prime q in the base field F_q for G1\r\n        if (p.X == 0 && p.Y == 0) {\r\n            return G1Point(0, 0);\r\n        } else {\r\n            return G1Point(p.X, PRIME_Q - (p.Y % PRIME_Q));\r\n        }\r\n    }\r\n\r\n    /*\r\n     * @return r the sum of two points of G1\r\n     */\r\n    function plus(\r\n        G1Point memory p1,\r\n        G1Point memory p2\r\n    ) internal view returns (G1Point memory r) {\r\n        uint256[4] memory input = [\r\n            p1.X, p1.Y,\r\n            p2.X, p2.Y\r\n        ];\r\n        bool success;\r\n\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)\r\n            // Use \"invalid\" to make gas estimation work\r\n            switch success case 0 { invalid() }\r\n        }\r\n\r\n        require(success, \"pairing-add-failed\");\r\n    }\r\n\r\n    /*\r\n     * @return r the product of a point on G1 and a scalar, i.e.\r\n     *         p == p.scalarMul(1) and p.plus(p) == p.scalarMul(2) for all\r\n     *         points p.\r\n     */\r\n    function scalarMul(G1Point memory p, uint256 s) internal view returns (G1Point memory r) {\r\n        uint256[3] memory input = [p.X, p.Y, s];\r\n        bool success;\r\n\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)\r\n            // Use \"invalid\" to make gas estimation work\r\n            switch success case 0 { invalid() }\r\n        }\r\n\r\n        require(success, \"pairing-mul-failed\");\r\n    }\r\n\r\n    /* @return The result of computing the pairing check\r\n     *         e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1\r\n     *         For example,\r\n     *         pairing([P1(), P1().negate()], [P2(), P2()]) should return true.\r\n     */\r\n    function pairing(\r\n        G1Point memory a1,\r\n        G2Point memory a2,\r\n        G1Point memory b1,\r\n        G2Point memory b2,\r\n        G1Point memory c1,\r\n        G2Point memory c2,\r\n        G1Point memory d1,\r\n        G2Point memory d2\r\n    ) internal view returns (bool) {\r\n        uint256[24] memory input = [\r\n            a1.X, a1.Y, a2.X[0], a2.X[1], a2.Y[0], a2.Y[1],\r\n            b1.X, b1.Y, b2.X[0], b2.X[1], b2.Y[0], b2.Y[1],\r\n            c1.X, c1.Y, c2.X[0], c2.X[1], c2.Y[0], c2.Y[1],\r\n            d1.X, d1.Y, d2.X[0], d2.X[1], d2.Y[0], d2.Y[1]\r\n        ];\r\n        uint256[1] memory out;\r\n        bool success;\r\n\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            success := staticcall(sub(gas(), 2000), 8, input, mul(24, 0x20), out, 0x20)\r\n            // Use \"invalid\" to make gas estimation work\r\n            switch success case 0 { invalid() }\r\n        }\r\n\r\n        require(success, \"pairing-opcode-failed\");\r\n        return out[0] != 0;\r\n    }\r\n}\r\n\r\ncontract TreeUpdateVerifier {\r\n    uint256 constant SNARK_SCALAR_FIELD = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\r\n    uint256 constant PRIME_Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\r\n    using Pairing for *;\r\n\r\n    struct VerifyingKey {\r\n        Pairing.G1Point alfa1;\r\n        Pairing.G2Point beta2;\r\n        Pairing.G2Point gamma2;\r\n        Pairing.G2Point delta2;\r\n        Pairing.G1Point[5] IC;\r\n    }\r\n\r\n    function verifyingKey() internal pure returns (VerifyingKey memory vk) {\r\n        vk.alfa1 = Pairing.G1Point(uint256(3664066767948966626721593074410523504750081653020983005319283739651830239658), uint256(5721214620732995756499852381736936016024932670933331588236004969175006037996));\r\n        vk.beta2 = Pairing.G2Point([uint256(3790215625843812961978911652770592932007517856922747978527926706514217434695), uint256(1740235995081792065855274144390422820118184965104548996991755866617053974967)], [uint256(6165988665974246541084808240629148405805368452349434517299207934174510397449), uint256(16034017485072495648726603091509033961790552241947133696703251815831385124340)]);\r\n        vk.gamma2 = Pairing.G2Point([uint256(6136503651572829468070415592681731486750345331784722290168198207750471503511), uint256(17155573750315003615285937756005190696467896828984436200373036720127167376579)], [uint256(20271177287287788482139429136125975170988312925163808612462749447029949724355), uint256(2807311044090903086908579792203534180982214587181893041516830197719100999668)]);\r\n        vk.delta2 = Pairing.G2Point([uint256(4267977840077790175628097397628429921136841017304043286835271366026140129833), uint256(21186561435195000282771141635546250843045512930682178345965012031733568307304)], [uint256(18448509423891788285213538599531121667089515773749017310735470654177768947257), uint256(13824035851606331611877613768498505548716994037964734269023290397675282690772)]);\r\n        vk.IC[0] = Pairing.G1Point(uint256(2003337398852492813540461712262313294207108051326299817043310484224564974696), uint256(16045453964494737888473539609875214502702372895181553892784236590596004222805));\r\n        vk.IC[1] = Pairing.G1Point(uint256(14075532166274610130680482840912460899262398324138646377332486692472310860950), uint256(3685672928591896718507683078712569831861965070288470611593509945932511268628));\r\n        vk.IC[2] = Pairing.G1Point(uint256(17847036921708597439717366338586413452058371644164967868446945723191565493446), uint256(15227387043300197630097555025840859960079855561502244581701683050431414467068));\r\n        vk.IC[3] = Pairing.G1Point(uint256(21351109994044319193672897395450272255771733858986935168891886948583996722762), uint256(12911322091038947302662750665759776720041421384888809834389321460975681473245));\r\n        vk.IC[4] = Pairing.G1Point(uint256(15373563149705882573463517025165153708909109884526707025394743272369789946278), uint256(339578758580338369632185682059761985787435721402065500473097245416867760606));\r\n\r\n    }\r\n\r\n    /*\r\n     * @returns Whether the proof is valid given the hardcoded verifying key\r\n     *          above and the public inputs\r\n     */\r\n    function verifyProof(\r\n        bytes memory proof,\r\n        uint256[4] memory input\r\n    ) public view returns (bool) {\r\n        uint256[8] memory p = abi.decode(proof, (uint256[8]));\r\n        for (uint8 i = 0; i < p.length; i++) {\r\n            // Make sure that each element in the proof is less than the prime q\r\n            require(p[i] < PRIME_Q, \"verifier-proof-element-gte-prime-q\");\r\n        }\r\n        Pairing.G1Point memory proofA = Pairing.G1Point(p[0], p[1]);\r\n        Pairing.G2Point memory proofB = Pairing.G2Point([p[2], p[3]], [p[4], p[5]]);\r\n        Pairing.G1Point memory proofC = Pairing.G1Point(p[6], p[7]);\r\n\r\n        VerifyingKey memory vk = verifyingKey();\r\n        // Compute the linear combination vkX\r\n        Pairing.G1Point memory vkX = vk.IC[0];\r\n        for (uint256 i = 0; i < input.length; i++) {\r\n            // Make sure that every input is less than the snark scalar field\r\n            require(input[i] < SNARK_SCALAR_FIELD, \"verifier-input-gte-snark-scalar-field\");\r\n            vkX = Pairing.plus(vkX, Pairing.scalarMul(vk.IC[i + 1], input[i]));\r\n        }\r\n\r\n        return Pairing.pairing(\r\n            Pairing.negate(proofA),\r\n            proofB,\r\n            vk.alfa1,\r\n            vk.beta2,\r\n            vkX,\r\n            vk.gamma2,\r\n            proofC,\r\n            vk.delta2\r\n        );\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"uint256[4]\",\"name\":\"input\",\"type\":\"uint256[4]\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"TreeUpdateVerifier","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://347ac4b59c26bdfa68e3ea75c8c57b4f7a70df5d043246766a8703ec4877ddee"}]}