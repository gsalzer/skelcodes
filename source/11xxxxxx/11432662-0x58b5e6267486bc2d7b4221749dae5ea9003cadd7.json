{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Obelix.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.12;\\r\\n\\r\\nimport \\\"./lib/SafeMath.sol\\\";\\r\\nimport \\\"./interfaces/IObelixFarming.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Standard ERC20 token\\r\\n *\\r\\n * @dev Implementation of the basic standard token.\\r\\n * https://eips.ethereum.org/EIPS/eip-20\\r\\n * Originally based on code by FirstBlood:\\r\\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\r\\n *\\r\\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\\r\\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\\r\\n * compliant implementations may not do it.\\r\\n */\\r\\ncontract ObelixToken {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    mapping(address => uint256) private _balances;\\r\\n\\r\\n    mapping(address => mapping(address => uint256)) private _allowed;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n\\r\\n    uint256 public _stakedTotalSupply;\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n    uint8 private _decimals;\\r\\n\\r\\n    address payable public owner;\\r\\n\\r\\n    IObelixFarming public obelixFarming;\\r\\n\\r\\n    address payable public OBELIXFund = 0x4Ac6D22bBc27677Ed47b5284A3299D25B5F33a54;\\r\\n    address payable public Maximus = 0xF224f3D60da3eB287c43c780Be7AA3499D1faF75;\\r\\n    address payable public buybacksUTY = 0x70ecA57C0478F3C3BfAFf082a140eCF84CDad826;\\r\\n    address payable public buybacksOBELIX = 0x8a24Fef3c74f1557b4BeF51929B8CaA2d4561A98;\\r\\n    address payable public Founder = 0xBc1a689ECF468920d5d689386668d701D40800e0;\\r\\n    address payable public SenateCouncil = 0x75f2239D15a774702A34175C32686FF360EBCBdD;\\r\\n\\r\\n    address public UniswapPair;\\r\\n\\r\\n    struct Staker {\\r\\n        uint256 stakedBalance;\\r\\n        uint256 startTimestamp;\\r\\n    }\\r\\n\\r\\n    mapping(address => Staker) public stakers;\\r\\n\\r\\n    mapping(bytes32 => bool) public profitsDistributed;\\r\\n\\r\\n    mapping(bytes32 => bool) public profitsDistributedFarmers;\\r\\n\\r\\n    uint32 public currentProfitsDistributed;\\r\\n\\r\\n    bool public EnableProfitDistribution;\\r\\n    uint256 AmountToDistribute;\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner == msg.sender, \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor() public {\\r\\n        _name = \\\"OBELIX Token\\\";\\r\\n        _symbol = \\\"OBELIX\\\";\\r\\n        _decimals = 18;\\r\\n        owner = msg.sender;\\r\\n        _totalSupply = 5000E18;\\r\\n        _balances[address(this)] = 335625E16;\\r\\n        _balances[OBELIXFund] = 700E18;\\r\\n        _balances[Founder] = 94375E16;\\r\\n        emit Transfer(address(0), owner, _totalSupply);\\r\\n    }\\r\\n\\r\\n    function DistributeProfitsOBELIX() external {\\r\\n        require(EnableProfitDistribution, \\\"Distribution is disabled\\\");\\r\\n        require(\\r\\n            !getProfitsDistributed(msg.sender),\\r\\n            \\\"Profits already distributed\\\"\\r\\n        );\\r\\n\\r\\n        Staker memory staker = stakers[msg.sender];\\r\\n\\r\\n        uint256 daysStaked = block.timestamp.sub(staker.startTimestamp) / 86400;\\r\\n\\r\\n        require(\\r\\n            daysStaked >= 14,\\r\\n            \\\"You must stake for 14 days to claim profits\\\"\\r\\n        );\\r\\n\\r\\n        uint256 distribution = AmountToDistribute / 2;\\r\\n\\r\\n        uint256 eth = mulDiv(\\r\\n            distribution,\\r\\n            staker.stakedBalance,\\r\\n            _stakedTotalSupply.add(_balances[UniswapPair])\\r\\n        );\\r\\n\\r\\n        setProfitsDistributed(msg.sender);\\r\\n\\r\\n        msg.sender.transfer(eth);\\r\\n    }\\r\\n\\r\\n    function CalculateDistributeProfitsOBELIX(address staker)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        if (!EnableProfitDistribution || getProfitsDistributed(staker)) {\\r\\n            return 0;\\r\\n        }\\r\\n        Staker memory staker = stakers[msg.sender];\\r\\n\\r\\n        uint256 daysStaked = block.timestamp.sub(staker.startTimestamp) / 86400;\\r\\n\\r\\n        if (daysStaked >= 14) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 distribution = AmountToDistribute / 2;\\r\\n\\r\\n        uint256 eth = mulDiv(\\r\\n            distribution,\\r\\n            staker.stakedBalance,\\r\\n            _stakedTotalSupply.add(_balances[UniswapPair])\\r\\n        );\\r\\n        return eth;\\r\\n    }\\r\\n\\r\\n    function StakeOBELIX(uint256 amount) external {\\r\\n        _balances[msg.sender] = _balances[msg.sender].sub(amount);\\r\\n        Staker storage staker = stakers[msg.sender];\\r\\n        if (staker.startTimestamp == 0 || staker.stakedBalance == 0) {\\r\\n            staker.startTimestamp = block.timestamp;\\r\\n        } else {\\r\\n            uint256 percent = mulDiv(1000000, amount, staker.stakedBalance); // This is not really 'percent' it is just a number that represents the totalAmount as a fraction of the recipientBalance\\r\\n            if (percent.add(staker.startTimestamp) > block.timestamp) {\\r\\n                // We represent the 'percent' or 'penalty' as seconds and add to the recipient's unix time\\r\\n                staker.startTimestamp = block.timestamp; // Receiving too many tokens resets your holding time\\r\\n            } else {\\r\\n                staker.startTimestamp = staker.startTimestamp.add(percent);\\r\\n            }\\r\\n        }\\r\\n        staker.stakedBalance = staker.stakedBalance.add(amount);\\r\\n        _stakedTotalSupply = _stakedTotalSupply.add(amount);\\r\\n    }\\r\\n\\r\\n    function UnstakeOBELIX(uint256 amount) external {\\r\\n        Staker storage staker = stakers[msg.sender];\\r\\n        staker.stakedBalance = staker.stakedBalance.sub(amount);\\r\\n        staker.startTimestamp = block.timestamp;\\r\\n        _balances[msg.sender] = _balances[msg.sender].add(amount);\\r\\n        _stakedTotalSupply = _stakedTotalSupply.sub(amount);\\r\\n    }\\r\\n\\r\\n    function DistributeProfitsOBELIXFund() external {\\r\\n        require(msg.sender == owner || msg.sender == OBELIXFund);\\r\\n        require(EnableProfitDistribution, \\\"Distribution is disabled\\\");\\r\\n        uint256 eth = mulDiv(AmountToDistribute, 8, 100);\\r\\n        OBELIXFund.transfer(eth);\\r\\n    }\\r\\n\\r\\n    function DistributeMaximusFounder() external {\\r\\n        require(\\r\\n            msg.sender == owner ||\\r\\n                msg.sender == Maximus ||\\r\\n                msg.sender == Founder\\r\\n        );\\r\\n        require(EnableProfitDistribution, \\\"Distribution is disabled\\\");\\r\\n        uint256 eth = mulDiv(AmountToDistribute, 5, 100);\\r\\n        Maximus.transfer(eth / 2);\\r\\n        Founder.transfer(eth / 2);\\r\\n    }\\r\\n\\r\\n    function DistributeBuybacks() external {\\r\\n        require(\\r\\n            msg.sender == owner ||\\r\\n                msg.sender == buybacksUTY ||\\r\\n                msg.sender == buybacksOBELIX\\r\\n        );\\r\\n        require(EnableProfitDistribution, \\\"Distribution is disabled\\\");\\r\\n        uint256 eth = mulDiv(AmountToDistribute, 7, 100);\\r\\n        buybacksOBELIX.transfer(eth / 2);\\r\\n        buybacksUTY.transfer(eth / 2);\\r\\n    }\\r\\n\\r\\n    function DistributeProfitsOBELIXFarmer() external {\\r\\n        require(EnableProfitDistribution, \\\"Distribution is disabled\\\");\\r\\n        require(\\r\\n            !getProfitsDistributedFarmers(msg.sender),\\r\\n            \\\"Profits already distributed to farmer\\\"\\r\\n        );\\r\\n\\r\\n        (uint256 tokens, uint256 startTimestamp) = obelixFarming\\r\\n            .estimateOBELIXProvidedWithStartTimestamp(msg.sender);\\r\\n\\r\\n        uint256 daysStaked = block.timestamp.sub(startTimestamp) / 86400;\\r\\n\\r\\n        require(\\r\\n            daysStaked >= 14,\\r\\n            \\\"You must stake for 14 days to claim profits\\\"\\r\\n        );\\r\\n\\r\\n        uint256 distribution = AmountToDistribute / 2;\\r\\n\\r\\n        uint256 eth = mulDiv(\\r\\n            distribution,\\r\\n            tokens,\\r\\n            _stakedTotalSupply.add(_balances[UniswapPair])\\r\\n        );\\r\\n\\r\\n        setProfitsDistributedFarmers(msg.sender);\\r\\n\\r\\n        msg.sender.transfer(eth);\\r\\n    }\\r\\n\\r\\n    function CalculateDistributeProfitsOBELIXFarmer(address staker)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        if (!EnableProfitDistribution || getProfitsDistributedFarmers(staker)) {\\r\\n            return 0;\\r\\n        }\\r\\n        (uint256 tokens, uint256 startTimestamp) = obelixFarming\\r\\n            .estimateOBELIXProvidedWithStartTimestamp(msg.sender);\\r\\n\\r\\n        uint256 daysStaked = block.timestamp.sub(startTimestamp) / 86400;\\r\\n\\r\\n        require(\\r\\n            daysStaked >= 14,\\r\\n            \\\"You must stake for 14 days to claim profits\\\"\\r\\n        );\\r\\n\\r\\n        uint256 distribution = AmountToDistribute / 2;\\r\\n\\r\\n        uint256 eth = mulDiv(\\r\\n            distribution,\\r\\n            tokens,\\r\\n            _stakedTotalSupply.add(_balances[UniswapPair])\\r\\n        );\\r\\n        return eth;\\r\\n    }\\r\\n\\r\\n    function DistributeProfitSenateCouncil() external {\\r\\n        require(msg.sender == owner || msg.sender == SenateCouncil);\\r\\n        require(EnableProfitDistribution, \\\"Distribution is disabled\\\");\\r\\n        uint256 eth = mulDiv(AmountToDistribute, 30, 100);\\r\\n        SenateCouncil.transfer(eth);\\r\\n    }\\r\\n\\r\\n    function name() public view returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n     * name.\\r\\n     */\\r\\n    function symbol() public view returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of decimals used to get its user representation.\\r\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\r\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\r\\n     *\\r\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\r\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\r\\n     * called.\\r\\n     *\\r\\n     * NOTE: This information is only used for _display_ purposes: it in\\r\\n     * no way affects any of the arithmetic of the contract, including\\r\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\r\\n     */\\r\\n    function decimals() public view returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Total number of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() public view returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Gets the balance of the specified address.\\r\\n     * @param owner The address to query the balance of.\\r\\n     * @return A uint256 representing the amount owned by the passed address.\\r\\n     */\\r\\n    function balanceOf(address owner) public view returns (uint256) {\\r\\n        return _balances[owner];\\r\\n    }\\r\\n\\r\\n    function getStakerDaysStaked(address staker)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return block.timestamp.sub(stakers[staker].startTimestamp) / 86400;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\\r\\n     * @param owner address The address which owns the funds.\\r\\n     * @param spender address The address which will spend the funds.\\r\\n     * @return A uint256 specifying the amount of tokens still available for the spender.\\r\\n     */\\r\\n    function allowance(address owner, address spender)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _allowed[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfer token to a specified address.\\r\\n     * @param to The address to transfer to.\\r\\n     * @param value The amount to be transferred.\\r\\n     */\\r\\n    function transfer(address to, uint256 value) public returns (bool) {\\r\\n        _transfer(msg.sender, to, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\r\\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\\r\\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\r\\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     * @param spender The address which will spend the funds.\\r\\n     * @param value The amount of tokens to be spent.\\r\\n     */\\r\\n    function approve(address spender, uint256 value) public returns (bool) {\\r\\n        _approve(msg.sender, spender, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfer tokens from one address to another.\\r\\n     * Note that while this function emits an Approval event, this is not required as per the specification,\\r\\n     * and other compliant implementations may not emit the event.\\r\\n     * @param from address The address which you want to send tokens from\\r\\n     * @param to address The address which you want to transfer to\\r\\n     * @param value uint256 the amount of tokens to be transferred\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) public returns (bool) {\\r\\n        _transfer(from, to, value);\\r\\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\\r\\n     * approve should be called when _allowed[msg.sender][spender] == 0. To increment\\r\\n     * allowed value is better to use this function to avoid 2 calls (and wait until\\r\\n     * the first transaction is mined)\\r\\n     * From MonolithDAO Token.sol\\r\\n     * Emits an Approval event.\\r\\n     * @param spender The address which will spend the funds.\\r\\n     * @param addedValue The amount of tokens to increase the allowance by.\\r\\n     */\\r\\n    function increaseAllowance(address spender, uint256 addedValue)\\r\\n        public\\r\\n        returns (bool)\\r\\n    {\\r\\n        _approve(\\r\\n            msg.sender,\\r\\n            spender,\\r\\n            _allowed[msg.sender][spender].add(addedValue)\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\\r\\n     * approve should be called when _allowed[msg.sender][spender] == 0. To decrement\\r\\n     * allowed value is better to use this function to avoid 2 calls (and wait until\\r\\n     * the first transaction is mined)\\r\\n     * From MonolithDAO Token.sol\\r\\n     * Emits an Approval event.\\r\\n     * @param spender The address which will spend the funds.\\r\\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\\r\\n     */\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\r\\n        public\\r\\n        returns (bool)\\r\\n    {\\r\\n        _approve(\\r\\n            msg.sender,\\r\\n            spender,\\r\\n            _allowed[msg.sender][spender].sub(subtractedValue)\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfer token for a specified addresses.\\r\\n     * @param from The address to transfer from.\\r\\n     * @param to The address to transfer to.\\r\\n     * @param value The amount to be transferred.\\r\\n     */\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        require(to != address(0));\\r\\n\\r\\n        _balances[from] = _balances[from].sub(value);\\r\\n        _balances[to] = _balances[to].add(value);\\r\\n        emit Transfer(from, to, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function that burns an amount of the token of a given\\r\\n     * account.\\r\\n     * @param account The account whose tokens will be burnt.\\r\\n     * @param value The amount that will be burnt.\\r\\n     */\\r\\n    function _burn(address account, uint256 value) internal {\\r\\n        require(account != address(0));\\r\\n\\r\\n        _totalSupply = _totalSupply.sub(value);\\r\\n        _balances[account] = _balances[account].sub(value);\\r\\n        emit Transfer(account, address(0), value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Approve an address to spend another addresses' tokens.\\r\\n     * @param owner The address that owns the tokens.\\r\\n     * @param spender The address that will spend the tokens.\\r\\n     * @param value The number of tokens that can be spent.\\r\\n     */\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        require(spender != address(0));\\r\\n        require(owner != address(0));\\r\\n\\r\\n        _allowed[owner][spender] = value;\\r\\n        emit Approval(owner, spender, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function that burns an amount of the token of a given\\r\\n     * account, deducting from the sender's allowance for said account. Uses the\\r\\n     * internal burn function.\\r\\n     * Emits an Approval event (reflecting the reduced allowance).\\r\\n     * @param account The account whose tokens will be burnt.\\r\\n     * @param value The amount that will be burnt.\\r\\n     */\\r\\n    function _burnFrom(address account, uint256 value) internal {\\r\\n        _burn(account, value);\\r\\n        _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\\r\\n    }\\r\\n\\r\\n    function UpdateEnableProfitDistribution(bool _enable) external onlyOwner {\\r\\n        EnableProfitDistribution = _enable;\\r\\n        if (_enable == false) {\\r\\n            AmountToDistribute = 0;\\r\\n            deleteProfitsDistributed();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getProfitsDistributed(address holder)\\r\\n        internal\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        bytes32 key = keccak256(\\r\\n            abi.encodePacked(currentProfitsDistributed, holder)\\r\\n        );\\r\\n        return profitsDistributed[key];\\r\\n    }\\r\\n\\r\\n    function getProfitsDistributedFarmers(address holder)\\r\\n        internal\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        bytes32 key = keccak256(\\r\\n            abi.encodePacked(currentProfitsDistributed, holder)\\r\\n        );\\r\\n        return profitsDistributedFarmers[key];\\r\\n    }\\r\\n\\r\\n    function setProfitsDistributedFarmers(address holder) internal {\\r\\n        bytes32 key = keccak256(\\r\\n            abi.encodePacked(currentProfitsDistributed, holder)\\r\\n        );\\r\\n        profitsDistributedFarmers[key] = true;\\r\\n    }\\r\\n\\r\\n    function setProfitsDistributed(address holder) internal {\\r\\n        bytes32 key = keccak256(\\r\\n            abi.encodePacked(currentProfitsDistributed, holder)\\r\\n        );\\r\\n        profitsDistributed[key] = true;\\r\\n    }\\r\\n\\r\\n    function deleteProfitsDistributed() internal {\\r\\n        currentProfitsDistributed++;\\r\\n    }\\r\\n\\r\\n    function TransferOwnership(address payable newOwner) external onlyOwner {\\r\\n        owner = newOwner;\\r\\n    }\\r\\n\\r\\n    function updateObelixFarming(address _farming) external onlyOwner {\\r\\n        obelixFarming = IObelixFarming(_farming);\\r\\n    }\\r\\n\\r\\n    function updateObelixFund(address payable obelixFund) external onlyOwner {\\r\\n        OBELIXFund = obelixFund;\\r\\n    }\\r\\n\\r\\n    function updateUniswapPair(address _UniswapPair) external onlyOwner {\\r\\n        UniswapPair = _UniswapPair;\\r\\n    }\\r\\n\\r\\n    function transferETH(uint256 amount) external onlyOwner {\\r\\n        owner.transfer(amount);\\r\\n    }\\r\\n\\r\\n    function mulDiv(\\r\\n        uint256 x,\\r\\n        uint256 y,\\r\\n        uint256 z\\r\\n    ) public pure returns (uint256) {\\r\\n        (uint256 l, uint256 h) = fullMul(x, y);\\r\\n        assert(h < z);\\r\\n        uint256 mm = mulmod(x, y, z);\\r\\n        if (mm > l) h -= 1;\\r\\n        l -= mm;\\r\\n        uint256 pow2 = z & -z;\\r\\n        z /= pow2;\\r\\n        l /= pow2;\\r\\n        l += h * ((-pow2) / pow2 + 1);\\r\\n        uint256 r = 1;\\r\\n        r *= 2 - z * r;\\r\\n        r *= 2 - z * r;\\r\\n        r *= 2 - z * r;\\r\\n        r *= 2 - z * r;\\r\\n        r *= 2 - z * r;\\r\\n        r *= 2 - z * r;\\r\\n        r *= 2 - z * r;\\r\\n        r *= 2 - z * r;\\r\\n        return l * r;\\r\\n    }\\r\\n\\r\\n    function fullMul(uint256 x, uint256 y)\\r\\n        private\\r\\n        pure\\r\\n        returns (uint256 l, uint256 h)\\r\\n    {\\r\\n        uint256 mm = mulmod(x, y, uint256(-1));\\r\\n        l = x * y;\\r\\n        h = mm - l;\\r\\n        if (mm < l) h -= 1;\\r\\n    }\\r\\n\\r\\n    fallback() external payable {\\r\\n        AmountToDistribute = AmountToDistribute.add(msg.value);\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        AmountToDistribute = AmountToDistribute.add(msg.value);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/lib/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity 0.6.12;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it's recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b > 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IObelixFarming.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.12;\\r\\n\\r\\ninterface IObelixFarming {\\r\\n    function estimateOBELIXProvidedWithStartTimestamp(address _staker) external view returns (uint256, uint256);\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"CalculateDistributeProfitsOBELIX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"CalculateDistributeProfitsOBELIXFarmer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DistributeBuybacks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DistributeMaximusFounder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DistributeProfitSenateCouncil\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DistributeProfitsOBELIX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DistributeProfitsOBELIXFarmer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DistributeProfitsOBELIXFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EnableProfitDistribution\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Founder\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Maximus\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OBELIXFund\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SenateCouncil\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeOBELIX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"TransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UniswapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnstakeOBELIX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"UpdateEnableProfitDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_stakedTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buybacksOBELIX\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buybacksUTY\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentProfitsDistributed\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStakerDaysStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"name\":\"mulDiv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"obelixFarming\",\"outputs\":[{\"internalType\":\"contract IObelixFarming\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"profitsDistributed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"profitsDistributedFarmers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakedBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_farming\",\"type\":\"address\"}],\"name\":\"updateObelixFarming\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"obelixFund\",\"type\":\"address\"}],\"name\":\"updateObelixFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_UniswapPair\",\"type\":\"address\"}],\"name\":\"updateUniswapPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"ObelixToken","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}