{"status":"1","message":"OK","result":[{"SourceCode":"from vyper.interfaces import ERC721\r\n\r\nimplements: ERC721\r\n\r\ninterface pria_contract:\r\n    def balanceOf(_to: address) -> uint256: view\r\n    def totalSupply() -> uint256: view\r\n\r\ninterface ERC721Receiver:\r\n    def onERC721Received(\r\n            _operator: address,\r\n            _from: address,\r\n            _tokenId: uint256,\r\n            _data: Bytes[1024]\r\n        ) -> bytes32: view\r\n\r\nevent Transfer:\r\n    sender: indexed(address)\r\n    receiver: indexed(address)\r\n    tokenId: indexed(uint256)\r\n\r\nevent Approval:\r\n    owner: indexed(address)\r\n    approved: indexed(address)\r\n    tokenId: indexed(uint256)\r\n\r\nevent ApprovalForAll:\r\n    owner: indexed(address)\r\n    operator: indexed(address)\r\n    approved: bool\r\n\r\nstruct nft_token:\r\n    name: String[64]\r\n    thumbnail: String[100]\r\n    model_url: String[100]\r\n    Coef_1: uint256\r\n    Coef_2: uint256\r\n    Coef_3: uint256\r\n\r\ntokenName: String[64]\r\ntokenSymbol: String[32]\r\ntokenUrl: String[100]\r\ntotal_supply: uint256\r\nearlyAdopters: public(HashMap[address, bool])\r\nidToOwner: HashMap[uint256, address]\r\nidToApprovals: HashMap[uint256, address]\r\narAsset: public(HashMap[uint256, nft_token])\r\nownerToNFTokenCount: HashMap[address, uint256]\r\nownerToOperators: HashMap[address, HashMap[address, bool]]\r\nminter: address\r\nsupportedInterfaces: HashMap[bytes32, bool]\r\neav_title: String[64]\r\neav_thumbnail: String[100]\r\neav_model_url: String[100]\r\neav_coef1: uint256\r\neav_coef2: uint256\r\neav_coef3: uint256\r\ndeadline: uint256\r\neav_contract: address\r\n\r\nERC165_INTERFACE_ID: constant(bytes32) = 0x0000000000000000000000000000000000000000000000000000000001ffc9a7\r\nERC721_INTERFACE_ID: constant(bytes32) = 0x0000000000000000000000000000000000000000000000000000000080ac58cd\r\nERC721_TOKEN_RECEIVER_INTERFACE_ID: constant(bytes32) = 0x00000000000000000000000000000000000000000000000000000000150b7a02\r\nERC721_METADATA_INTERFACE_ID: constant(bytes32) = 0x000000000000000000000000000000000000000000000000000000005b5e139f\r\n\r\n@external\r\ndef __init__(_name: String[64], _symbol: String[32], _tokenURL: String[64]):\r\n    self.tokenName = _name\r\n    self.tokenSymbol = _symbol\r\n    self.tokenUrl = _tokenURL\r\n    self.supportedInterfaces[ERC165_INTERFACE_ID] = True\r\n    self.supportedInterfaces[ERC721_INTERFACE_ID] = True\r\n    self.supportedInterfaces[ERC721_TOKEN_RECEIVER_INTERFACE_ID] = True\r\n    self.supportedInterfaces[ERC721_METADATA_INTERFACE_ID] = True\r\n    self.minter = msg.sender\r\n    self.total_supply = 0\r\n\r\n@view\r\n@external\r\ndef name() -> String[64]:\r\n    return self.tokenName\r\n\r\n@view\r\n@external\r\ndef symbol() -> String[32]:\r\n    return self.tokenSymbol\r\n\r\n@view\r\n@external\r\ndef totalSupply() -> uint256:\r\n    return self.total_supply\r\n\r\n@view\r\n@external\r\ndef supportsInterface(_interfaceID: bytes32) -> bool:\r\n    return self.supportedInterfaces[_interfaceID]\r\n\r\n@view\r\n@external\r\ndef tokenURL() -> String[100]:\r\n    return self.tokenUrl\r\n\r\n@view\r\n@external\r\ndef balanceOf(_owner: address) -> uint256:\r\n    assert _owner != ZERO_ADDRESS\r\n    return self.ownerToNFTokenCount[_owner]\r\n\r\n@view\r\n@external\r\ndef ownerOf(_tokenId: uint256) -> address:\r\n    owner: address = self.idToOwner[_tokenId]\r\n    assert owner != ZERO_ADDRESS\r\n    return owner\r\n\r\n@view\r\n@external\r\ndef NFT_AR_Name(_tokenId: uint256) -> String[100]:\r\n    return self.arAsset[_tokenId].name\r\n\r\n@view\r\n@external\r\ndef NFT_AR_Thumbnail(_tokenId: uint256) -> String[100]:\r\n    return self.arAsset[_tokenId].thumbnail\r\n\r\n@view\r\n@external\r\ndef NFT_AR_Contents(_tokenId: uint256) -> String[100]:\r\n    return self.arAsset[_tokenId].model_url\r\n\r\n@view\r\n@external\r\ndef NFT_AR_Coef1(_tokenId: uint256) -> uint256:\r\n    return self.arAsset[_tokenId].Coef_1\r\n\r\n@view\r\n@external\r\ndef NFT_AR_Coef2(_tokenId: uint256) -> uint256:\r\n    return self.arAsset[_tokenId].Coef_2\r\n\r\n@view\r\n@external\r\ndef NFT_AR_Coef3(_tokenId: uint256) -> uint256:\r\n    return self.arAsset[_tokenId].Coef_3\r\n\r\n@view\r\n@external\r\ndef getApproved(_tokenId: uint256) -> address:\r\n    assert self.idToOwner[_tokenId] != ZERO_ADDRESS\r\n    return self.idToApprovals[_tokenId]\r\n\r\n@view\r\n@external\r\ndef isApprovedForAll(_owner: address, _operator: address) -> bool:\r\n    return (self.ownerToOperators[_owner])[_operator]\r\n\r\n@view\r\n@internal\r\ndef _isApprovedOrOwner(_spender: address, _tokenId: uint256) -> bool:\r\n    owner: address = self.idToOwner[_tokenId]\r\n    spenderIsOwner: bool = owner == _spender\r\n    spenderIsApproved: bool = _spender == self.idToApprovals[_tokenId]\r\n    spenderIsApprovedForAll: bool = (self.ownerToOperators[owner])[_spender]\r\n    return (spenderIsOwner or spenderIsApproved) or spenderIsApprovedForAll\r\n\r\n@internal\r\ndef _addTokenTo(_to: address, _tokenId: uint256):\r\n    assert self.idToOwner[_tokenId] == ZERO_ADDRESS\r\n    self.idToOwner[_tokenId] = _to\r\n    self.ownerToNFTokenCount[_to] += 1\r\n\r\n@internal\r\ndef _removeTokenFrom(_from: address, _tokenId: uint256):\r\n    assert self.idToOwner[_tokenId] == _from\r\n    self.idToOwner[_tokenId] = ZERO_ADDRESS\r\n    self.ownerToNFTokenCount[_from] -= 1\r\n\r\n@internal\r\ndef _clearApproval(_owner: address, _tokenId: uint256):\r\n    assert self.idToOwner[_tokenId] == _owner\r\n    if self.idToApprovals[_tokenId] != ZERO_ADDRESS:\r\n        self.idToApprovals[_tokenId] = ZERO_ADDRESS\r\n\r\n@internal\r\ndef _transferFrom(_from: address, _to: address, _tokenId: uint256, _sender: address):\r\n    assert self._isApprovedOrOwner(_sender, _tokenId)\r\n    assert _to != ZERO_ADDRESS\r\n    self._clearApproval(_from, _tokenId)\r\n    self._removeTokenFrom(_from, _tokenId)\r\n    self._addTokenTo(_to, _tokenId)\r\n    log Transfer(_from, _to, _tokenId)\r\n\r\n@external\r\ndef transferFrom(_from: address, _to: address, _tokenId: uint256):\r\n    self._transferFrom(_from, _to, _tokenId, msg.sender)\r\n\r\n@external\r\ndef safeTransferFrom(_from: address, _to: address, _tokenId: uint256, _data: Bytes[1024]=b\"\"):\r\n    self._transferFrom(_from, _to, _tokenId, msg.sender)\r\n    if _to.is_contract:\r\n        returnValue: bytes32 = ERC721Receiver(_to).onERC721Received(msg.sender, _from, _tokenId, _data)\r\n        assert returnValue == method_id(\"onERC721Received(address,address,uint256,bytes)\", output_type=bytes32)\r\n\r\n@external\r\ndef approve(_approved: address, _tokenId: uint256):\r\n    owner: address = self.idToOwner[_tokenId]\r\n    assert owner != ZERO_ADDRESS\r\n    assert _approved != owner\r\n    senderIsOwner: bool = self.idToOwner[_tokenId] == msg.sender\r\n    senderIsApprovedForAll: bool = (self.ownerToOperators[owner])[msg.sender]\r\n    assert (senderIsOwner or senderIsApprovedForAll)\r\n    self.idToApprovals[_tokenId] = _approved\r\n    log Approval(owner, _approved, _tokenId)\r\n\r\n@external\r\ndef setApprovalForAll(_operator: address, _approved: bool):\r\n    assert _operator != msg.sender\r\n    self.ownerToOperators[msg.sender][_operator] = _approved\r\n    log ApprovalForAll(msg.sender, _operator, _approved)\r\n\r\n@external\r\ndef mint(_to: address, _name: String[64], _image: String[100], _url: String[100], _coef1: uint256, _coef2: uint256, _coef3: uint256) -> bool:\r\n    assert msg.sender == self.minter\r\n    assert _to != ZERO_ADDRESS\r\n    self._addTokenTo(_to, self.total_supply)\r\n    self.arAsset[self.total_supply].name = _name\r\n    self.arAsset[self.total_supply].thumbnail = _image\r\n    self.arAsset[self.total_supply].model_url = _url\r\n    self.arAsset[self.total_supply].Coef_1 = _coef1\r\n    self.arAsset[self.total_supply].Coef_2 = _coef2\r\n    self.arAsset[self.total_supply].Coef_3 = _coef3\r\n    log Transfer(ZERO_ADDRESS, _to, self.total_supply)\r\n    self.total_supply += 1\r\n    return True\r\n\r\n@external\r\ndef setEarlyAdoptersNFT(_name: String[64], _thumbnail: String[100], _model_url: String[100], _coef1: uint256, _coef2: uint256, _coef3: uint256, _deadline: uint256) -> bool:\r\n    assert msg.sender == self.minter\r\n    assert msg.sender != ZERO_ADDRESS\r\n    self.eav_title = _name\r\n    self.eav_thumbnail = _thumbnail\r\n    self.eav_model_url = _model_url\r\n    self.eav_coef1 = _coef1\r\n    self.eav_coef2 = _coef2\r\n    self.eav_coef3 = _coef3\r\n    self.deadline = _deadline\r\n    return True\r\n\r\n@external\r\ndef setContract(_contract: address) -> bool:\r\n    assert msg.sender == self.minter\r\n    assert msg.sender != ZERO_ADDRESS\r\n    self.eav_contract = _contract\r\n    return True\r\n\r\n@external\r\ndef setTokenURL(_url: String[100]) -> bool:\r\n    assert msg.sender == self.minter\r\n    assert msg.sender != ZERO_ADDRESS\r\n    self.tokenUrl = _url\r\n    return True\r\n\r\n@external\r\ndef CLAIMearlyAdoptersNFT() -> bool:\r\n    assert self.earlyAdopters[msg.sender] == True\r\n    assert msg.sender != ZERO_ADDRESS\r\n    assert self.deadline > block.timestamp\r\n    self._addTokenTo(msg.sender, self.total_supply)\r\n    r: uint256 = pria_contract(self.eav_contract).balanceOf(msg.sender)\r\n    totalsupply: uint256 = pria_contract(self.eav_contract).totalSupply()\r\n    pct: uint256 = (r*10**18)/totalsupply\r\n    self.arAsset[self.total_supply].name = self.eav_title\r\n    self.arAsset[self.total_supply].thumbnail = self.eav_thumbnail\r\n    self.arAsset[self.total_supply].model_url = self.eav_model_url\r\n    self.arAsset[self.total_supply].Coef_1 = pct\r\n    self.arAsset[self.total_supply].Coef_2 = self.eav_coef2\r\n    self.arAsset[self.total_supply].Coef_3 = self.eav_coef3\r\n    log Transfer(ZERO_ADDRESS, msg.sender, self.total_supply)\r\n    self.total_supply += 1\r\n    self.earlyAdopters[msg.sender] = False\r\n    return True\r\n\r\n@external\r\ndef burn(_tokenId: uint256):\r\n    assert self._isApprovedOrOwner(msg.sender, _tokenId)\r\n    owner: address = self.idToOwner[_tokenId]\r\n    assert owner != ZERO_ADDRESS\r\n    self._clearApproval(owner, _tokenId)\r\n    self._removeTokenFrom(owner, _tokenId)\r\n    self.arAsset[_tokenId].name = \"\"\r\n    self.arAsset[_tokenId].thumbnail = \"\"\r\n    self.arAsset[_tokenId].model_url = \"\"\r\n    self.arAsset[_tokenId].Coef_1 = 0\r\n    self.arAsset[_tokenId].Coef_2 = 0\r\n    self.arAsset[_tokenId].Coef_3 = 0\r\n    log Transfer(owner, ZERO_ADDRESS, _tokenId)\r\n\r\n@external\r\ndef setEligible_Single(_eligibleAddy: address) -> bool:\r\n    assert msg.sender == self.minter\r\n    self.earlyAdopters[_eligibleAddy] = True\r\n    return True\r\n\r\n@external\r\ndef remEligible_Single(_eligibleAddy: address) -> bool:\r\n    assert msg.sender == self.minter\r\n    self.earlyAdopters[_eligibleAddy] = False\r\n    return True\r\n\r\n@external\r\ndef remEligible_Bulk(_eligibleList: address[100]) -> bool:\r\n    assert msg.sender == self.minter\r\n    for addy in range (0, 100):\r\n        if _eligibleList[addy] != ZERO_ADDRESS:\r\n            self.earlyAdopters[_eligibleList[addy]] = False\r\n        else:\r\n            break\r\n    return True\r\n\r\n@external\r\ndef setEligible_Bulk(_eligibleList: address[100]) -> bool:\r\n    assert msg.sender == self.minter\r\n    for addy in range (0, 100):\r\n        if _eligibleList[addy] != ZERO_ADDRESS:\r\n            self.earlyAdopters[_eligibleList[addy]] = True\r\n        else:\r\n            break\r\n    return True\r\n\r\n@external\r\ndef remEligible_Bulk_300(_eligibleList: address[300]) -> bool:\r\n    assert msg.sender == self.minter\r\n    for addy in range (0, 300):\r\n        if _eligibleList[addy] != ZERO_ADDRESS:\r\n            self.earlyAdopters[_eligibleList[addy]] = False\r\n        else:\r\n            break\r\n    return True\r\n\r\n@external\r\ndef setEligible_Bulk_300(_eligibleList: address[300]) -> bool:\r\n    assert msg.sender == self.minter\r\n    for addy in range (0, 300):\r\n        if _eligibleList[addy] != ZERO_ADDRESS:\r\n            self.earlyAdopters[_eligibleList[addy]] = True\r\n        else:\r\n            break\r\n    return True\r\n\r\n@external\r\ndef sweep():\r\n    assert msg.sender == self.minter\r\n    assert msg.sender != ZERO_ADDRESS\r\n    selfdestruct(msg.sender)","ABI":"[{\"name\":\"Transfer\",\"inputs\":[{\"type\":\"address\",\"name\":\"sender\",\"indexed\":true},{\"type\":\"address\",\"name\":\"receiver\",\"indexed\":true},{\"type\":\"uint256\",\"name\":\"tokenId\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Approval\",\"inputs\":[{\"type\":\"address\",\"name\":\"owner\",\"indexed\":true},{\"type\":\"address\",\"name\":\"approved\",\"indexed\":true},{\"type\":\"uint256\",\"name\":\"tokenId\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"ApprovalForAll\",\"inputs\":[{\"type\":\"address\",\"name\":\"owner\",\"indexed\":true},{\"type\":\"address\",\"name\":\"operator\",\"indexed\":true},{\"type\":\"bool\",\"name\":\"approved\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"outputs\":[],\"inputs\":[{\"type\":\"string\",\"name\":\"_name\"},{\"type\":\"string\",\"name\":\"_symbol\"},{\"type\":\"string\",\"name\":\"_tokenURL\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"name\":\"name\",\"outputs\":[{\"type\":\"string\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":7553},{\"name\":\"symbol\",\"outputs\":[{\"type\":\"string\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":6606},{\"name\":\"totalSupply\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1211},{\"name\":\"supportsInterface\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"bytes32\",\"name\":\"_interfaceID\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1356},{\"name\":\"tokenURL\",\"outputs\":[{\"type\":\"string\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":9627},{\"name\":\"balanceOf\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_owner\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1552},{\"name\":\"ownerOf\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[{\"type\":\"uint256\",\"name\":\"_tokenId\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1558},{\"name\":\"NFT_AR_Name\",\"outputs\":[{\"type\":\"string\",\"name\":\"\"}],\"inputs\":[{\"type\":\"uint256\",\"name\":\"_tokenId\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":7950},{\"name\":\"NFT_AR_Thumbnail\",\"outputs\":[{\"type\":\"string\",\"name\":\"\"}],\"inputs\":[{\"type\":\"uint256\",\"name\":\"_tokenId\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":9940},{\"name\":\"NFT_AR_Contents\",\"outputs\":[{\"type\":\"string\",\"name\":\"\"}],\"inputs\":[{\"type\":\"uint256\",\"name\":\"_tokenId\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":9970},{\"name\":\"NFT_AR_Coef1\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[{\"type\":\"uint256\",\"name\":\"_tokenId\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1644},{\"name\":\"NFT_AR_Coef2\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[{\"type\":\"uint256\",\"name\":\"_tokenId\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1674},{\"name\":\"NFT_AR_Coef3\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[{\"type\":\"uint256\",\"name\":\"_tokenId\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1704},{\"name\":\"getApproved\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[{\"type\":\"uint256\",\"name\":\"_tokenId\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":2665},{\"name\":\"isApprovedForAll\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_owner\"},{\"type\":\"address\",\"name\":\"_operator\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1879},{\"name\":\"transferFrom\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_from\"},{\"type\":\"address\",\"name\":\"_to\"},{\"type\":\"uint256\",\"name\":\"_tokenId\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":320995},{\"name\":\"safeTransferFrom\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_from\"},{\"type\":\"address\",\"name\":\"_to\"},{\"type\":\"uint256\",\"name\":\"_tokenId\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"name\":\"safeTransferFrom\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_from\"},{\"type\":\"address\",\"name\":\"_to\"},{\"type\":\"uint256\",\"name\":\"_tokenId\"},{\"type\":\"bytes\",\"name\":\"_data\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"name\":\"approve\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_approved\"},{\"type\":\"uint256\",\"name\":\"_tokenId\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":41261},{\"name\":\"setApprovalForAll\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_operator\"},{\"type\":\"bool\",\"name\":\"_approved\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":38510},{\"name\":\"mint\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_to\"},{\"type\":\"string\",\"name\":\"_name\"},{\"type\":\"string\",\"name\":\"_image\"},{\"type\":\"string\",\"name\":\"_url\"},{\"type\":\"uint256\",\"name\":\"_coef1\"},{\"type\":\"uint256\",\"name\":\"_coef2\"},{\"type\":\"uint256\",\"name\":\"_coef3\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":684154},{\"name\":\"setEarlyAdoptersNFT\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"string\",\"name\":\"_name\"},{\"type\":\"string\",\"name\":\"_thumbnail\"},{\"type\":\"string\",\"name\":\"_model_url\"},{\"type\":\"uint256\",\"name\":\"_coef1\"},{\"type\":\"uint256\",\"name\":\"_coef2\"},{\"type\":\"uint256\",\"name\":\"_coef3\"},{\"type\":\"uint256\",\"name\":\"_deadline\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":600388},{\"name\":\"setContract\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_contract\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":37165},{\"name\":\"setTokenURL\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"string\",\"name\":\"_url\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":178355},{\"name\":\"CLAIMearlyAdoptersNFT\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":721752},{\"name\":\"burn\",\"outputs\":[],\"inputs\":[{\"type\":\"uint256\",\"name\":\"_tokenId\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":257001},{\"name\":\"setEligible_Single\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_eligibleAddy\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":37304},{\"name\":\"remEligible_Single\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_eligibleAddy\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":22334},{\"name\":\"remEligible_Bulk\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address[100]\",\"name\":\"_eligibleList\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":2036158},{\"name\":\"setEligible_Bulk\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address[100]\",\"name\":\"_eligibleList\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":3536188},{\"name\":\"remEligible_Bulk_300\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address[300]\",\"name\":\"_eligibleList\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":6103818},{\"name\":\"setEligible_Bulk_300\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address[300]\",\"name\":\"_eligibleList\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":10603848},{\"name\":\"sweep\",\"outputs\":[],\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":27374},{\"name\":\"earlyAdopters\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"arg0\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":2415},{\"name\":\"arAsset\",\"outputs\":[{\"type\":\"string\",\"name\":\"name\"},{\"type\":\"string\",\"name\":\"thumbnail\"},{\"type\":\"string\",\"name\":\"model_url\"},{\"type\":\"uint256\",\"name\":\"Coef_1\"},{\"type\":\"uint256\",\"name\":\"Coef_2\"},{\"type\":\"uint256\",\"name\":\"Coef_3\"}],\"inputs\":[{\"type\":\"uint256\",\"name\":\"arg0\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":31333}]","ContractName":"Vyper_contract","CompilerVersion":"vyper:0.2.4","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000008446546694c4142530000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005444c414253000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002f68747470733a2f2f707269612e6e6574776f726b2f6e66742f646566696c6162735f6d657461646174612e6a736f6e0000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}