{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity >=0.7.0 <0.8.0;\r\n\r\ncontract MultiSender {\r\n    \r\n    address payable public owner;\r\n    uint256 public userfee;\r\n    uint32 public arrayLimit;\r\n    \r\n    modifier onlyOwner()\r\n    {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    \r\n    function collectFee() public onlyOwner\r\n    {\r\n        owner.transfer(address(this).balance);\r\n    }\r\n    \r\n    function config(uint256 _newFee, uint32 _newLimit) public onlyOwner {\r\n        \r\n        userfee = _newFee;\r\n        arrayLimit = _newLimit;\r\n    }\r\n    \r\n    constructor()\r\n    {\r\n        arrayLimit = 10000;\r\n        userfee = 0.001 ether;\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    fallback () external payable {}\r\n    \r\n    function multisend(address payable[] calldata  _contributors, uint256[] calldata _balances) public payable {\r\n        uint256 total = msg.value;\r\n        require(total >= userfee);\r\n        require(_contributors.length <= arrayLimit);\r\n        total = sub(total, userfee);\r\n        uint32 i = 0;\r\n        for (i; i < _contributors.length; i++) {\r\n            total = sub(total, _balances[i]);\r\n           _contributors[i].transfer(_balances[i]);\r\n        }\r\n    }\r\n    \r\n      function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n      }\r\n\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"arrayLimit\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_newLimit\",\"type\":\"uint32\"}],\"name\":\"config\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"_contributors\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_balances\",\"type\":\"uint256[]\"}],\"name\":\"multisend\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userfee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MultiSender","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU LGPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e3bc6ce107d7d19e31ca77dbb88c0fb4f320025122f32510580ab2617a149f39"}]}