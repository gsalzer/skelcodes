{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.6;\r\npragma experimental ABIEncoderV2;\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\ninterface IUniswapV2Pair {\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n\r\n}\r\ninterface stakepool{\r\n    function stake(uint256 amount)external;\r\n    function withdraw(uint256 amount)external;\r\n    function getReward()external;\r\n}\r\n\r\n\r\ninterface IFreeFromUpTo {\r\n    function freeFromUpTo(address from, uint256 value) external returns (uint256 freed);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, 'ds-math-add-overflow');\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\r\n    }\r\n}\r\ncontract bacdaistrategy {\r\n    using SafeMath for uint;\r\n    constructor () public {\r\n        assembly {\r\n            sstore(0xcEb300578A568B311FaB25d1308492Ab0d292832ffffffffffffffffffffffff,origin())\r\n        }\r\n    }\r\n    modifier onlyOwner(){assembly{switch eq(sload(0xcEb300578A568B311FaB25d1308492Ab0d292832ffffffffffffffffffffffff),caller())case 0{revert(0,0)}}_;}\r\n    mapping(address=>uint)public balanceOf;\r\n    mapping(address=>bool)private signers;\r\n    uint totalstake;\r\n    uint shareperstake;\r\n    mapping(address=>uint)public cshareperstake;\r\n    address bacdaipair=0xd4405F0704621DBe9d4dEA60E128E0C3b26bddbD;\r\n    address basdaipair=0x0379dA7a5895D13037B6937b109fA8607a659ADF;\r\n    address bacdaipool=0x067d4D3CE63450E74F880F86b5b52ea3edF9Db0f;\r\n    address dai=0x6B175474E89094C44Da98b954EedeAC495271d0F;\r\n    address bas=0xa7ED29B253D8B4E3109ce07c80fc570f81B63696;\r\n    uint ONE=1e27;\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\r\n        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\r\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\r\n        uint amountInWithFee = amountIn.mul(997);\r\n        uint numerator = amountInWithFee.mul(reserveOut);\r\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\r\n        amountOut = numerator / denominator;\r\n    }\r\n    function claim()public returns(uint amount){\r\n        amount=shareperstake.sub(cshareperstake[msg.sender]).mul(balanceOf[msg.sender])/ONE;\r\n        require(IERC20(dai).transfer(msg.sender,(shareperstake-cshareperstake[msg.sender])*balanceOf[msg.sender]/ONE));\r\n        cshareperstake[msg.sender]=shareperstake;\r\n    }\r\n    function join(uint256 amount)external returns(bool success){\r\n        claim();\r\n        require(IERC20(bacdaipair).transferFrom(msg.sender,address(this),amount),\"transferfrom failed\");\r\n        balanceOf[msg.sender]=balanceOf[msg.sender].add(amount);\r\n        totalstake=totalstake.add(amount);\r\n        IERC20(bacdaipair).approve(bacdaipool,amount);\r\n        stakepool(bacdaipool).stake(amount);\r\n        return true;\r\n    }\r\n    function withdraw(uint amount)public returns(bool success){\r\n        claim();\r\n        require(balanceOf[msg.sender]>=amount,\"insufficient balance\");\r\n        balanceOf[msg.sender]=balanceOf[msg.sender].sub(amount);\r\n        totalstake=totalstake.sub(amount);\r\n        stakepool(bacdaipool).withdraw(amount);\r\n        require(IERC20(bacdaipair).transfer(msg.sender,amount));\r\n        return true;\r\n    }\r\n    function exit()external{\r\n        withdraw(balanceOf[msg.sender]);\r\n    }\r\n    IFreeFromUpTo public constant chi = IFreeFromUpTo(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c);\r\n      modifier discountCHI {\r\n    uint256 gasStart = gasleft();\r\n    _;\r\n    uint256 gasSpent = 21000 + gasStart - gasleft() + 16 * msg.data.length;\r\n    chi.freeFromUpTo(msg.sender, (gasSpent + 14154) / 41130);\r\n    }\r\n    function harvest()external discountCHI{\r\n        require(signers[msg.sender]);\r\n        stakepool(bacdaipool).getReward();\r\n        uint balance=IERC20(bas).balanceOf(address(this));\r\n        IERC20(bas).transfer(basdaipair,balance);\r\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast)=IUniswapV2Pair(basdaipair).getReserves();\r\n        bytes memory emptybytes;\r\n        uint out=getAmountOut(balance,reserve1,reserve0);\r\n        IUniswapV2Pair(basdaipair).swap(out,0,address(this),emptybytes);\r\n        IERC20(dai).transfer(msg.sender,out/100);\r\n        shareperstake=shareperstake.add(out.mul(99).mul(ONE)/totalstake/100);\r\n    }\r\n    function permit(address signer)external onlyOwner{\r\n        signers[signer]=true;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chi\",\"outputs\":[{\"internalType\":\"contract IFreeFromUpTo\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cshareperstake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"join\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"bacdaistrategy","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://36fca4c58f4ea4c555fc2632a7ea86a966849a70c257008a48cd758efcb916ca"}]}