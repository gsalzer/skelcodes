{"status":"1","message":"OK","result":[{"SourceCode":"// Dependency file: contracts/libraries/SafeMath.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// pragma solidity >=0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// Dependency file: contracts/libraries/TransferHelper.sol\r\n\r\n\r\n// pragma solidity >=0.6.0;\r\n\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/modules/Configable.sol\r\n\r\n// pragma solidity >=0.5.16;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface IConfig {\r\n    function developer() external view returns (address);\r\n    function platform() external view returns (address);\r\n    function factory() external view returns (address);\r\n    function mint() external view returns (address);\r\n    function token() external view returns (address);\r\n    function developPercent() external view returns (uint);\r\n    function share() external view returns (address);\r\n    function base() external view returns (address); \r\n    function governor() external view returns (address);\r\n    function getPoolValue(address pool, bytes32 key) external view returns (uint);\r\n    function getValue(bytes32 key) external view returns(uint);\r\n    function getParams(bytes32 key) external view returns(uint, uint, uint, uint); \r\n    function getPoolParams(address pool, bytes32 key) external view returns(uint, uint, uint, uint); \r\n    function wallets(bytes32 key) external view returns(address);\r\n    function setValue(bytes32 key, uint value) external;\r\n    function setPoolValue(address pool, bytes32 key, uint value) external;\r\n    function setParams(bytes32 _key, uint _min, uint _max, uint _span, uint _value) external;\r\n    function setPoolParams(bytes32 _key, uint _min, uint _max, uint _span, uint _value) external;\r\n    function initPoolParams(address _pool) external;\r\n    function isMintToken(address _token) external returns (bool);\r\n    function prices(address _token) external returns (uint);\r\n    function convertTokenAmount(address _fromToken, address _toToken, uint _fromAmount) external view returns (uint);\r\n    function DAY() external view returns (uint);\r\n    function WETH() external view returns (address);\r\n}\r\n\r\ncontract Configable {\r\n    address public config;\r\n    address public owner;\r\n\r\n    event OwnerChanged(address indexed _oldOwner, address indexed _newOwner);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    function setupConfig(address _config) external onlyOwner {\r\n        config = _config;\r\n        owner = IConfig(config).developer();\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, 'OWNER FORBIDDEN');\r\n        _;\r\n    }\r\n    \r\n    modifier onlyDeveloper() {\r\n        require(msg.sender == IConfig(config).developer(), 'DEVELOPER FORBIDDEN');\r\n        _;\r\n    }\r\n    \r\n    modifier onlyPlatform() {\r\n        require(msg.sender == IConfig(config).platform(), 'PLATFORM FORBIDDEN');\r\n        _;\r\n    }\r\n\r\n    modifier onlyFactory() {\r\n        require(msg.sender == IConfig(config).factory(), 'FACTORY FORBIDDEN');\r\n        _;\r\n    }\r\n\r\n    modifier onlyGovernor() {\r\n        require(msg.sender == IConfig(config).governor(), 'Governor FORBIDDEN');\r\n        _;\r\n    }\r\n}\r\n\r\n// Dependency file: contracts/modules/ConfigNames.sol\r\n\r\n// pragma solidity >=0.5.16;\r\n\r\nlibrary ConfigNames {\r\n    //GOVERNANCE\r\n    bytes32 public constant PROPOSAL_VOTE_DURATION = bytes32('PROPOSAL_VOTE_DURATION');\r\n    bytes32 public constant PROPOSAL_EXECUTE_DURATION = bytes32('PROPOSAL_EXECUTE_DURATION');\r\n    bytes32 public constant PROPOSAL_CREATE_COST = bytes32('PROPOSAL_CREATE_COST');\r\n    bytes32 public constant STAKE_LOCK_TIME = bytes32('STAKE_LOCK_TIME');\r\n    bytes32 public constant MINT_AMOUNT_PER_BLOCK =  bytes32('MINT_AMOUNT_PER_BLOCK');\r\n    bytes32 public constant INTEREST_PLATFORM_SHARE =  bytes32('INTEREST_PLATFORM_SHARE');\r\n    bytes32 public constant CHANGE_PRICE_DURATION =  bytes32('CHANGE_PRICE_DURATION');\r\n    bytes32 public constant CHANGE_PRICE_PERCENT =  bytes32('CHANGE_PRICE_PERCENT');\r\n\r\n    // POOL\r\n    bytes32 public constant POOL_BASE_INTERESTS = bytes32('POOL_BASE_INTERESTS');\r\n    bytes32 public constant POOL_MARKET_FRENZY = bytes32('POOL_MARKET_FRENZY');\r\n    bytes32 public constant POOL_PLEDGE_RATE = bytes32('POOL_PLEDGE_RATE');\r\n    bytes32 public constant POOL_LIQUIDATION_RATE = bytes32('POOL_LIQUIDATION_RATE');\r\n    bytes32 public constant POOL_MINT_BORROW_PERCENT = bytes32('POOL_MINT_BORROW_PERCENT');\r\n    bytes32 public constant POOL_MINT_POWER = bytes32('POOL_MINT_POWER');\r\n    \r\n    //NOT GOVERNANCE\r\n    bytes32 public constant AAAA_USER_MINT = bytes32('AAAA_USER_MINT');\r\n    bytes32 public constant AAAA_TEAM_MINT = bytes32('AAAA_TEAM_MINT');\r\n    bytes32 public constant AAAA_REWAED_MINT = bytes32('AAAA_REWAED_MINT');\r\n    bytes32 public constant DEPOSIT_ENABLE = bytes32('DEPOSIT_ENABLE');\r\n    bytes32 public constant WITHDRAW_ENABLE = bytes32('WITHDRAW_ENABLE');\r\n    bytes32 public constant BORROW_ENABLE = bytes32('BORROW_ENABLE');\r\n    bytes32 public constant REPAY_ENABLE = bytes32('REPAY_ENABLE');\r\n    bytes32 public constant LIQUIDATION_ENABLE = bytes32('LIQUIDATION_ENABLE');\r\n    bytes32 public constant REINVEST_ENABLE = bytes32('REINVEST_ENABLE');\r\n    bytes32 public constant INTEREST_BUYBACK_SHARE =  bytes32('INTEREST_BUYBACK_SHARE');\r\n\r\n    //POOL\r\n    bytes32 public constant POOL_PRICE = bytes32('POOL_PRICE');\r\n\r\n    //wallet\r\n    bytes32 public constant TEAM = bytes32('team'); \r\n    bytes32 public constant SPARE = bytes32('spare');\r\n    bytes32 public constant REWARD = bytes32('reward');\r\n}\r\n\r\n// Root file: contracts/AAAAMint.sol\r\n\r\npragma solidity >=0.5.16;\r\n// import \"contracts/libraries/SafeMath.sol\";\r\n// import \"contracts/libraries/TransferHelper.sol\";\r\n// import \"contracts/modules/Configable.sol\";\r\n// import \"contracts/modules/ConfigNames.sol\";\r\n\r\ncontract AAAAMint is Configable {\r\n    using SafeMath for uint;\r\n\r\n    uint public mintCumulation;\r\n    uint public amountPerBlock;\r\n    \r\n    uint public lastRewardBlock;\r\n    uint public totalProductivity;\r\n    uint public totalSupply;\r\n    uint public accAmountPerShare;\r\n    uint public maxSupply;\r\n\r\n    struct UserInfo {\r\n        uint amount;     // How many LP tokens the user has provided.\r\n        uint rewardDebt; // Reward debt. \r\n        uint rewardEarn; // Reward earn and not minted\r\n    }\r\n\r\n    mapping(address => UserInfo) public users;\r\n    \r\n    event InterestsPerBlockChanged (uint oldValue, uint newValue);\r\n    event ProductivityIncreased (address indexed user, uint value);\r\n    event ProductivityDecreased (address indexed user, uint value);\r\n    event Mint(address indexed user, uint userAmount, uint teamAmount, uint rewardAmount, uint spareAmount);\r\n\r\n    function addMintAmount(uint _amount) external virtual {\r\n        TransferHelper.safeTransferFrom(IConfig(config).token(), msg.sender, address(this), _amount);\r\n        maxSupply = maxSupply.add(_amount);\r\n    }\r\n \r\n    // External function call\r\n    // This function adjust how many token will be produced by each block, eg:\r\n    // changeAmountPerBlock(100)\r\n    // will set the produce rate to 100/block.\r\n    function sync() public virtual returns (bool) {\r\n        uint value = IConfig(config).getValue(ConfigNames.MINT_AMOUNT_PER_BLOCK);\r\n        uint old = amountPerBlock;\r\n        require(value != old, 'AMOUNT_PER_BLOCK_NO_CHANGE');\r\n        require(maxSupply > totalSupply, 'NO_BALANCE_TO_MINT');\r\n        \r\n        _update();\r\n        amountPerBlock = value;\r\n\r\n        emit InterestsPerBlockChanged(old, value);\r\n        return true;\r\n    }\r\n\r\n    // Update reward variables of the given pool to be up-to-date.\r\n    function _update() internal virtual {\r\n        if (block.number <= lastRewardBlock) {\r\n            return;\r\n        }\r\n\r\n        if (totalProductivity == 0) {\r\n            lastRewardBlock = block.number;\r\n            return;\r\n        }\r\n        \r\n        uint256 reward = _currentReward();\r\n        if(reward == 0) {\r\n            amountPerBlock = 0;\r\n        } else {\r\n            totalSupply = totalSupply.add(reward);\r\n\r\n            accAmountPerShare = accAmountPerShare.add(reward.mul(1e12).div(totalProductivity));\r\n            lastRewardBlock = block.number;\r\n        }\r\n    }\r\n    \r\n    function _currentReward() internal virtual view returns (uint){\r\n        uint256 multiplier = block.number.sub(lastRewardBlock);\r\n        uint reward = multiplier.mul(amountPerBlock);\r\n        if(totalSupply.add(reward) > maxSupply) {\r\n            reward = maxSupply.sub(totalSupply);\r\n        }\r\n        \r\n        return reward;\r\n    }\r\n    \r\n    // Audit user's reward to be up-to-date\r\n    function _audit(address user) internal virtual {\r\n        UserInfo storage userInfo = users[user];\r\n        if (userInfo.amount > 0) {\r\n            uint pending = userInfo.amount.mul(accAmountPerShare).div(1e12).sub(userInfo.rewardDebt);\r\n            userInfo.rewardEarn = userInfo.rewardEarn.add(pending);\r\n            mintCumulation = mintCumulation.add(pending);\r\n            userInfo.rewardDebt = userInfo.amount.mul(accAmountPerShare).div(1e12);\r\n        }\r\n    }\r\n\r\n    // External function call\r\n    // This function increase user's productivity and updates the global productivity.\r\n    // the users' actual share percentage will calculated by:\r\n    // Formula:     user_productivity / global_productivity\r\n    function increaseProductivity(address user, uint value) external virtual onlyPlatform returns (bool) {\r\n        require(value > 0, 'PRODUCTIVITY_VALUE_MUST_BE_GREATER_THAN_ZERO');\r\n\r\n        UserInfo storage userInfo = users[user];\r\n        _update();\r\n        _audit(user);\r\n\r\n        totalProductivity = totalProductivity.add(value);\r\n\r\n        userInfo.amount = userInfo.amount.add(value);\r\n        userInfo.rewardDebt = userInfo.amount.mul(accAmountPerShare).div(1e12);\r\n        emit ProductivityIncreased(user, value);\r\n        return true;\r\n    }\r\n\r\n    // External function call \r\n    // This function will decreases user's productivity by value, and updates the global productivity\r\n    // it will record which block this is happenning and accumulates the area of (productivity * time)\r\n    function decreaseProductivity(address user, uint value) external virtual onlyPlatform returns (bool) {\r\n        UserInfo storage userInfo = users[user];\r\n        require(value > 0 && userInfo.amount >= value, \"INSUFFICIENT_PRODUCTIVITY\");\r\n        _update();\r\n        _audit(user);\r\n        \r\n        userInfo.amount = userInfo.amount.sub(value);\r\n        userInfo.rewardDebt = userInfo.amount.mul(accAmountPerShare).div(1e12);\r\n        totalProductivity = totalProductivity.sub(value);\r\n\r\n        emit ProductivityDecreased(user, value);\r\n        return true;\r\n    }\r\n    \r\n    function takeWithAddress(address user) public view returns (uint) {\r\n        UserInfo storage userInfo = users[user];\r\n        uint _accAmountPerShare = accAmountPerShare;\r\n        // uint256 lpSupply = totalProductivity;\r\n        if (totalProductivity != 0) {\r\n            uint reward = _currentReward();\r\n            _accAmountPerShare = _accAmountPerShare.add(reward.mul(1e12).div(totalProductivity));\r\n        }\r\n        uint amount = userInfo.amount.mul(_accAmountPerShare).div(1e12).sub(userInfo.rewardDebt).add(userInfo.rewardEarn);\r\n        return amount.mul(IConfig(config).getValue(ConfigNames.AAAA_USER_MINT)).div(10000);\r\n    }\r\n\r\n    function take() external virtual view returns (uint) {\r\n        return takeWithAddress(msg.sender);\r\n    }\r\n\r\n    // Returns how much a user could earn plus the giving block number.\r\n    function takeWithBlock() external virtual view returns (uint, uint) {\r\n        uint earn = takeWithAddress(msg.sender);\r\n        return (earn, block.number);\r\n    }\r\n\r\n\r\n    // External function call\r\n    // When user calls this function, it will calculate how many token will mint to user from his productivity * time\r\n    // Also it calculates global token supply from last time the user mint to this time.\r\n    function mint() external virtual returns (uint) {\r\n        _update();\r\n        _audit(msg.sender);\r\n        require(users[msg.sender].rewardEarn > 0, \"NOTHING_TO_MINT\");\r\n        uint amount = users[msg.sender].rewardEarn;\r\n        _mintDistribution(msg.sender, amount);\r\n        users[msg.sender].rewardEarn = 0;\r\n        return amount;\r\n    }\r\n\r\n    // Returns how many productivity a user has and global has.\r\n    function getProductivity(address user) external virtual view returns (uint, uint) {\r\n        return (users[user].amount, totalProductivity);\r\n    }\r\n\r\n    // Returns the current gorss product rate.\r\n    function interestsPerBlock() external virtual view returns (uint) {\r\n        return accAmountPerShare;\r\n    }\r\n    \r\n    function _mintDistribution(address user, uint amount) internal {\r\n        uint userAmount = amount.mul(IConfig(config).getValue(ConfigNames.AAAA_USER_MINT)).div(10000);\r\n        uint remainAmount = amount.sub(userAmount);\r\n        uint teamAmount = remainAmount.mul(IConfig(config).getValue(ConfigNames.AAAA_TEAM_MINT)).div(10000);\r\n        if(teamAmount > 0) {\r\n            TransferHelper.safeTransfer(IConfig(config).token(), IConfig(config).wallets(ConfigNames.TEAM), teamAmount);\r\n        }\r\n        \r\n        remainAmount = remainAmount.sub(teamAmount);\r\n        uint rewardAmount = remainAmount.mul(IConfig(config).getValue(ConfigNames.AAAA_REWAED_MINT)).div(10000);\r\n        if(rewardAmount > 0) {\r\n            TransferHelper.safeTransfer(IConfig(config).token(), IConfig(config).wallets(ConfigNames.REWARD), rewardAmount);\r\n        }  \r\n\r\n        uint spareAmount = remainAmount.sub(rewardAmount);\r\n        if(spareAmount > 0) {\r\n            TransferHelper.safeTransfer(IConfig(config).token(), IConfig(config).wallets(ConfigNames.SPARE), spareAmount);\r\n        }\r\n        \r\n        if(userAmount > 0) {\r\n           TransferHelper.safeTransfer(IConfig(config).token(), user, userAmount); \r\n        }\r\n        emit Mint(user, userAmount, teamAmount, rewardAmount, spareAmount);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"InterestsPerBlockChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"teamAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"spareAmount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ProductivityDecreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ProductivityIncreased\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accAmountPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addMintAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"decreaseProductivity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getProductivity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"increaseProductivity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestsPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintCumulation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_config\",\"type\":\"address\"}],\"name\":\"setupConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sync\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"take\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"takeWithAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeWithBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalProductivity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardEarn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"AAAAMint","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://84ad559d7be1f34b40400577185c45b40e361acfc8a8a7285bcbdd63ca1427fe"}]}