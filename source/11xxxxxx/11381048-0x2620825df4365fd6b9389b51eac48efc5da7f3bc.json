{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/akshaycm/Documents/relay3r.network/contracts/interfaces/IChi.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.12;\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\ninterface iCHI is IERC20 {\\n    function freeFromUpTo(address from, uint256 value) external returns (uint256);\\n}\"\r\n    },\r\n    \"/Users/akshaycm/Documents/relay3r.network/contracts/interfaces/ICoreFlashArb.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface ICoreFlashArb {\\n      struct Strategy {\\n        string strategyName;\\n        bool[] token0Out; // An array saying if token 0 should be out in this step\\n        address[] pairs; // Array of pair addresses\\n        uint256[] feeOnTransfers; //Array of fee on transfers 1% = 10\\n        bool cBTCSupport; // Should the algorithm check for cBTC and wrap/unwrap it\\n                        // Note not checking saves gas\\n        bool feeOff; // Allows for adding CORE strategies - where there is no fee on the executor\\n    }\\n  function executeStrategy ( uint256 strategyPID ) external;\\n  function numberOfStrategies (  ) external view returns ( uint256 );\\n  function strategyProfitInReturnToken ( uint256 strategyID ) external view returns ( uint256 profit );\\n  function strategyInfo(uint256 strategyPID) external view returns (Strategy memory);\\n  function mostProfitableStrategyInETH (  ) external view returns ( uint256 profit, uint256 strategyID );\\n}\\n\"\r\n    },\r\n    \"/Users/akshaycm/Documents/relay3r.network/contracts/interfaces/Keep3r/IKeep3rV1Mini.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\ninterface IKeep3rV1Mini {\\n    function isKeeper(address) external returns (bool);\\n    function worked(address keeper) external;\\n    function totalBonded() external view returns (uint);\\n    function bonds(address keeper, address credit) external view returns (uint);\\n    function votes(address keeper) external view returns (uint);\\n    function isMinKeeper(address keeper, uint minBond, uint earned, uint age) external returns (bool);\\n    function addCreditETH(address job) external payable;\\n    function workedETH(address keeper) external;\\n    function credits(address job, address credit) external view returns (uint);\\n    function receipt(address credit, address keeper, uint amount) external;\\n    function ETH() external view returns (address);\\n    function receiptETH(address keeper, uint amount) external;\\n}\"\r\n    },\r\n    \"/Users/akshaycm/Documents/relay3r.network/contracts/interfaces/Uniswap/IUniswapV2Pair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.6;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\"\r\n    },\r\n    \"/Users/akshaycm/Documents/relay3r.network/contracts/jobs/CoreFlashArbRelay3rOptimized.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n//Import OpenZepplin libs\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n//Import job interfaces and helper interfaces\\nimport '../interfaces/Keep3r/IKeep3rV1Mini.sol';\\nimport '../interfaces/ICoreFlashArb.sol';\\nimport \\\"../interfaces/IChi.sol\\\";\\n//Import Uniswap interfaces\\nimport '../interfaces/Uniswap/IUniswapV2Pair.sol';\\n\\ncontract CoreFlashArbRelayerV3 is Ownable{\\n\\n    //Custom upkeep modifer with CHI support\\n    modifier upkeep() {\\n        uint256 gasStart = gasleft();\\n        require(RLR.isKeeper(msg.sender), \\\"!relayer\\\");\\n        _;\\n        uint256 gasSpent = 21000 + gasStart - gasleft() + 16 * msg.data.length;\\n        CHI.freeFromUpTo(address(this), (gasSpent + 14154) / 41947);\\n        //Payout RLR\\n        RLR.worked(msg.sender);\\n    }\\n\\n    IKeep3rV1Mini public RLR;\\n    ICoreFlashArb public CoreArb;\\n    iCHI public CHI = iCHI(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c);\\n\\n    //Init interfaces with addresses\\n    constructor (address token,address corearb) public {\\n        RLR = IKeep3rV1Mini(token);\\n        CoreArb = ICoreFlashArb(corearb);\\n        //Approve chi for gas expense\\n        require(CHI.approve(address(this), uint256(-1)));\\n    }\\n\\n    //Helper functions for handling sending of reward token\\n    function getTokenBalance(address tokenAddress) public view returns (uint256) {\\n        return IERC20(tokenAddress).balanceOf(address(this));\\n    }\\n\\n    function sendERC20(address tokenAddress,address receiver) internal {\\n        IERC20(tokenAddress).transfer(receiver, getTokenBalance(tokenAddress));\\n    }\\n\\n    //Required cause coreflasharb contract doesnt make this easily retrievable\\n    function getRewardToken(uint strat) public view returns (address) {\\n        ICoreFlashArb.Strategy memory stratx = CoreArb.strategyInfo(strat);//Get full strat data\\n        // Eg. Token 0 was out so profit token is token 1\\n        return stratx.token0Out[0] ? IUniswapV2Pair(stratx.pairs[0]).token1() : IUniswapV2Pair(stratx.pairs[0]).token0();\\n    }\\n\\n    //Set new contract address incase core devs change the flash arb contract\\n    function setCoreArbAddress(address newContract) public onlyOwner {\\n        CoreArb = ICoreFlashArb(newContract);\\n    }\\n\\n    function workable() public view returns (bool) {\\n        for(uint i=0;i<CoreArb.numberOfStrategies();i++){\\n            if(CoreArb.strategyProfitInReturnToken(i) > 0)\\n                return true;\\n        }\\n    }\\n\\n    function profitableCount() public view returns (uint){\\n        uint count = 0;\\n        for(uint i=0;i<CoreArb.numberOfStrategies();i++){\\n            if(CoreArb.strategyProfitInReturnToken(i) > 0)\\n                count++;\\n        }\\n        return count;\\n    }\\n\\n    //Return profitable strats array and reward tokens\\n    function profitableStratsWithTokens() public view returns (uint[] memory,address[] memory){\\n        uint profitableCountL = profitableCount();\\n        uint index = 0;\\n\\n        uint[] memory _profitable = new uint[](profitableCountL);\\n        address[] memory _rewardToken = new address[](profitableCountL);\\n\\n        for(uint i=0;i<CoreArb.numberOfStrategies();i++){\\n            if(CoreArb.strategyProfitInReturnToken(i) > 0){\\n                _profitable[index] = i;\\n                _rewardToken[index] = getRewardToken(i);\\n                index++;\\n            }\\n\\n        }\\n        return (_profitable,_rewardToken);\\n    }\\n\\n    function hasMostProfitableStrat() public view returns (bool) {\\n        (uint256 profit, ) = CoreArb.mostProfitableStrategyInETH();\\n        return profit > 0;\\n    }\\n\\n    function getMostProfitableStrat() public view returns (uint){\\n        //Get data from interface on profit and strat id\\n        (, uint256 strategyID) = CoreArb.mostProfitableStrategyInETH();\\n        return strategyID;\\n    }\\n\\n    function getMostProfitableStratWithToken() public view returns (uint,address){\\n        //Get data from interface on profit and strat id\\n        (, uint256 strategyID) = CoreArb.mostProfitableStrategyInETH();\\n        return (strategyID,getRewardToken(strategyID));\\n    }\\n\\n    //Used to execute multiple profitable strategies,only use when there are multiple executable strats\\n    function workBatch(uint[] memory profitable,address[] memory rewardTokens) public upkeep{\\n        //No need to check for profitablility here as it wont execute if arb isnt profitable\\n        for(uint i=0;i<profitable.length;i++){\\n            CoreArb.executeStrategy(profitable[i]);\\n            //Send strat reward to executor\\n            sendERC20(rewardTokens[i],msg.sender);\\n        }\\n    }\\n\\n    //Execute single profitable strat\\n    function work(uint strat,address rewardToken) public upkeep{\\n        //No need to check for profitablility here as it wont execute if arb isnt profitable\\n        CoreArb.executeStrategy(strat);\\n        //Send strat reward to executor\\n        sendERC20(rewardToken,msg.sender);\\n    }\\n\\n    //Added to recover erc20 tokens\\n    function recoverERC20(address token) public onlyOwner {\\n        sendERC20(token,owner());\\n    }\\n\\n    //Use this to depricate this job to move rlr to another job later\\n    function destructJob() public onlyOwner {\\n        //Get the credits for this job first\\n        uint256 currRLRCreds = RLR.credits(address(this),address(RLR));\\n        uint256 currETHCreds = RLR.credits(address(this),RLR.ETH());\\n        //Send out RLR Credits if any\\n        if(currRLRCreds > 0) {\\n            //Invoke receipt to send all the credits of job to owner\\n            RLR.receipt(address(RLR),owner(),currRLRCreds);\\n        }\\n        //Send out ETH credits if any\\n        if (currETHCreds > 0) {\\n            RLR.receiptETH(owner(),currETHCreds);\\n        }\\n        //Finally self destruct the contract after sending the credits\\n        selfdestruct(payable(owner()));\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {\r\n      \"\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"corearb\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CHI\",\"outputs\":[{\"internalType\":\"contract iCHI\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CoreArb\",\"outputs\":[{\"internalType\":\"contract ICoreFlashArb\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RLR\",\"outputs\":[{\"internalType\":\"contract IKeep3rV1Mini\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destructJob\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMostProfitableStrat\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMostProfitableStratWithToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"strat\",\"type\":\"uint256\"}],\"name\":\"getRewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasMostProfitableStrat\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitableCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitableStratsWithTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newContract\",\"type\":\"address\"}],\"name\":\"setCoreArbAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"strat\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"work\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"profitable\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"rewardTokens\",\"type\":\"address[]\"}],\"name\":\"workBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"workable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"CoreFlashArbRelayerV3","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005b3f693efd5710106eb2eac839368364acb5a70f000000000000000000000000220564c9bd38aa1240c3507007970d9e30c0657d","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}