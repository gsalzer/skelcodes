{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/base/Base.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.6.12;\\n\\n// Contracts\\nimport \\\"../roles/RolesManagerConsts.sol\\\";\\n\\n// Libraries\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n// Interfaces\\nimport \\\"../settings/IPlatformSettings.sol\\\";\\nimport \\\"../roles/IRolesManager.sol\\\";\\n\\nabstract contract Base {\\n    using Address for address;\\n\\n    /* Constant Variables */\\n\\n    /* State Variables */\\n\\n    address private settings;\\n\\n    /* Modifiers */\\n\\n    modifier onlyOwner(address account) {\\n        _requireHasRole(\\n            RolesManagerConsts(_rolesManager().consts()).OWNER_ROLE(),\\n            account,\\n            \\\"SENDER_ISNT_OWNER\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyMinter(address account) {\\n        _requireHasRole(\\n            RolesManagerConsts(_rolesManager().consts()).MINTER_ROLE(),\\n            account,\\n            \\\"SENDER_ISNT_MINTER\\\"\\n        );\\n        _;\\n    }\\n\\n    /* Constructor */\\n\\n    constructor(address settingsAddress) internal {\\n        require(settingsAddress.isContract(), \\\"SETTINGS_MUST_BE_CONTRACT\\\");\\n        settings = settingsAddress;\\n    }\\n\\n    /** Internal Functions */\\n\\n    function _settings() internal view returns (IPlatformSettings) {\\n        return IPlatformSettings(settings);\\n    }\\n\\n    function _rolesManager() internal view returns (IRolesManager) {\\n        return IRolesManager(IPlatformSettings(settings).rolesManager());\\n    }\\n\\n    function _requireHasRole(\\n        bytes32 role,\\n        address account,\\n        string memory message\\n    ) internal view {\\n        IRolesManager rolesManager = _rolesManager();\\n        rolesManager.requireHasRole(role, account, message);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/roles/RolesManagerConsts.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.6.12;\\n\\ncontract RolesManagerConsts {\\n    /**\\n        @notice It is the AccessControl.DEFAULT_ADMIN_ROLE role.\\n     */\\n    bytes32 public constant OWNER_ROLE = keccak256(\\\"\\\");\\n\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n\\n    bytes32 public constant CONFIGURATOR_ROLE = keccak256(\\\"CONFIGURATOR_ROLE\\\");\\n\\n    bytes32 public constant VAULT_CONFIGURATOR_ROLE = keccak256(\\\"VAULT_CONFIGURATOR_ROLE\\\");\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/settings/IPlatformSettings.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../libs/SettingsLib.sol\\\";\\n\\ninterface IPlatformSettings {\\n    event PlatformPaused(address indexed pauser);\\n\\n    event PlatformUnpaused(address indexed unpauser);\\n\\n    event PlatformSettingCreated(\\n        bytes32 indexed name,\\n        address indexed creator,\\n        uint256 minValue,\\n        uint256 value,\\n        uint256 maxValue\\n    );\\n\\n    event PlatformSettingRemoved(bytes32 indexed name, address indexed remover, uint256 value);\\n\\n    event PlatformSettingUpdated(\\n        bytes32 indexed name,\\n        address indexed remover,\\n        uint256 oldValue,\\n        uint256 newValue\\n    );\\n\\n    function createSetting(\\n        bytes32 name,\\n        uint256 value,\\n        uint256 min,\\n        uint256 max\\n    ) external;\\n\\n    function removeSetting(bytes32 name) external;\\n\\n    function getSetting(bytes32 name) external view returns (SettingsLib.Setting memory);\\n\\n    function getSettingValue(bytes32 name) external view returns (uint256);\\n\\n    function hasSetting(bytes32 name) external view returns (bool);\\n\\n    function rolesManager() external view returns (address);\\n\\n    function isPaused() external view returns (bool);\\n\\n    function requireIsPaused() external view;\\n\\n    function requireIsNotPaused() external view;\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n}\\n\"\r\n    },\r\n    \"contracts/roles/IRolesManager.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.6.12;\\n\\ninterface IRolesManager {\\n    event MaxMultiItemsUpdated(address indexed updater, uint8 oldValue, uint8 newValue);\\n\\n    function setMaxMultiItems(uint8 newMaxMultiItems) external;\\n\\n    function multiGrantRole(bytes32 role, address[] calldata accounts) external;\\n\\n    function multiRevokeRole(bytes32 role, address[] calldata accounts) external;\\n\\n    function consts() external view returns (address);\\n\\n    function maxMultiItems() external view returns (uint8);\\n\\n    function requireHasRole(bytes32 role, address account) external view;\\n\\n    function requireHasRole(\\n        bytes32 role,\\n        address account,\\n        string calldata message\\n    ) external view;\\n}\\n\"\r\n    },\r\n    \"contracts/libs/SettingsLib.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.6.12;\\n\\nlibrary SettingsLib {\\n    /**\\n        It defines a setting. It includes: value, min, and max values.\\n     */\\n    struct Setting {\\n        uint256 value;\\n        uint256 min;\\n        uint256 max;\\n        bool exists;\\n    }\\n\\n    /**\\n        @notice It creates a new setting given a name, min and max values.\\n        @param value initial value for the setting.\\n        @param min min value allowed for the setting.\\n        @param max max value allowed for the setting.\\n     */\\n    function create(\\n        Setting storage self,\\n        uint256 value,\\n        uint256 min,\\n        uint256 max\\n    ) internal {\\n        requireNotExists(self);\\n        require(value >= min, \\\"VALUE_MUST_BE_GT_MIN_VALUE\\\");\\n        require(value <= max, \\\"VALUE_MUST_BE_LT_MAX_VALUE\\\");\\n        self.value = value;\\n        self.min = min;\\n        self.max = max;\\n        self.exists = true;\\n    }\\n\\n    /**\\n        @notice Checks whether the current setting exists or not.\\n        @dev It throws a require error if the setting already exists.\\n        @param self the current setting.\\n     */\\n    function requireNotExists(Setting storage self) internal view {\\n        require(!self.exists, \\\"SETTING_ALREADY_EXISTS\\\");\\n    }\\n\\n    /**\\n        @notice Checks whether the current setting exists or not.\\n        @dev It throws a require error if the current setting doesn't exist.\\n        @param self the current setting.\\n     */\\n    function requireExists(Setting storage self) internal view {\\n        require(self.exists, \\\"SETTING_NOT_EXISTS\\\");\\n    }\\n\\n    /**\\n        @notice It updates a current setting.\\n        @dev It throws a require error if:\\n            - The new value is equal to the current value.\\n            - The new value is not lower than the max value.\\n            - The new value is not greater than the min value\\n        @param self the current setting.\\n        @param newValue the new value to set in the setting.\\n     */\\n    function update(Setting storage self, uint256 newValue) internal returns (uint256 oldValue) {\\n        requireExists(self);\\n        require(self.value != newValue, \\\"NEW_VALUE_REQUIRED\\\");\\n        require(newValue >= self.min, \\\"NEW_VALUE_MUST_BE_GT_MIN_VALUE\\\");\\n        require(newValue <= self.max, \\\"NEW_VALUE_MUST_BE_LT_MAX_VALUE\\\");\\n        oldValue = self.value;\\n        self.value = newValue;\\n    }\\n\\n    /**\\n        @notice It removes a current setting.\\n        @param self the current setting to remove.\\n     */\\n    function remove(Setting storage self) internal {\\n        requireExists(self);\\n        self.value = 0;\\n        self.min = 0;\\n        self.max = 0;\\n        self.exists = false;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/tokens/BaseMinterPauserToken.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.6.12;\\n\\n// Contracts\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/GSN/Context.sol\\\";\\nimport \\\"../base/Base.sol\\\";\\n\\ncontract BaseMinterPauserToken is Base, Context, ERC20Burnable {\\n    constructor(\\n        address settingsAddress,\\n        string memory name,\\n        string memory symbol,\\n        uint8 decimals\\n    ) internal Base(settingsAddress) ERC20(name, symbol) {\\n        _setupDecimals(decimals);\\n    }\\n\\n    /**\\n     * @dev Creates `amount` new tokens for `to`.\\n     *\\n     * See {ERC20-_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `MINTER_ROLE`.\\n     */\\n    function mint(address to, uint256 amount) external onlyMinter(_msgSender()) {\\n        _mint(to, amount);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, amount);\\n        _settings().requireIsNotPaused();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n\\n        _approve(account, _msgSender(), decreasedAllowance);\\n        _burn(account, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/tokens/PGU.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.6.12;\\n\\nimport \\\"./BaseMinterPauserToken.sol\\\";\\n\\ncontract PGU is BaseMinterPauserToken {\\n    /* State Variables */\\n    string private constant NAME = \\\"Polyient Games Unity\\\";\\n    string private constant SYMBOL = \\\"PGU\\\";\\n    uint8 private constant DECIMALS = 18;\\n\\n    /* Constructor */\\n\\n    constructor(address settingsAddress)\\n        public\\n        BaseMinterPauserToken(settingsAddress, NAME, SYMBOL, DECIMALS)\\n    {}\\n}\\n\"\r\n    },\r\n    \"contracts/settings/PlatformSettings.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n// Libraries\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"../libs/SettingsLib.sol\\\";\\n\\n// Contracts\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"../roles/RolesManagerConsts.sol\\\";\\n\\n// Interfaces\\nimport \\\"./IPlatformSettings.sol\\\";\\nimport \\\"../roles/IRolesManager.sol\\\";\\n\\ncontract PlatformSettings is IPlatformSettings {\\n    using Address for address;\\n    using SettingsLib for SettingsLib.Setting;\\n\\n    /** Constants */\\n\\n    /* State Variables */\\n\\n    /**\\n        @notice This mapping represents the platform settings where:\\n\\n        - The key is the platform setting name.\\n        - The value is the platform setting. It includes the value, minimum and maximum values.\\n     */\\n    mapping(bytes32 => SettingsLib.Setting) public settings;\\n\\n    bool public paused;\\n\\n    address public override rolesManager;\\n\\n    /** Modifiers */\\n\\n    modifier onlyPauser(address account) {\\n        _rolesManager().requireHasRole(\\n            _rolesManagerConsts().PAUSER_ROLE(),\\n            account,\\n            \\\"SENDER_ISNT_PAUSER\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyConfigurator(address account) {\\n        _rolesManager().requireHasRole(\\n            _rolesManagerConsts().CONFIGURATOR_ROLE(),\\n            account,\\n            \\\"SENDER_ISNT_CONFIGURATOR\\\"\\n        );\\n        _;\\n    }\\n\\n    /* Constructor */\\n\\n    constructor(address rolesManagerAddress) public {\\n        require(rolesManagerAddress.isContract(), \\\"ROLES_MANAGER_MUST_BE_CONTRACT\\\");\\n        rolesManager = rolesManagerAddress;\\n    }\\n\\n    /** External Functions */\\n\\n    /**\\n        @notice It creates a new platform setting given a name, value, min and max values.\\n        @param name setting name to create.\\n        @param value the initial value for the given setting name.\\n        @param min the min value for the setting.\\n        @param max the max value for the setting.\\n     */\\n    function createSetting(\\n        bytes32 name,\\n        uint256 value,\\n        uint256 min,\\n        uint256 max\\n    ) external override onlyConfigurator(msg.sender) {\\n        require(name != \\\"\\\", \\\"NAME_MUST_BE_PROVIDED\\\");\\n        settings[name].create(value, min, max);\\n\\n        emit PlatformSettingCreated(name, msg.sender, value, min, max);\\n    }\\n\\n    /**\\n        @notice It updates an existent platform setting given a setting name.\\n        @notice It only allows to update the value (not the min or max values).\\n        @notice In case you need to update the min or max values, you need to remove it, and create it again.\\n        @param settingName setting name to update.\\n        @param newValue the new value to set.\\n     */\\n    function updateSetting(bytes32 settingName, uint256 newValue)\\n        external\\n        onlyConfigurator(msg.sender)\\n    {\\n        uint256 oldValue = settings[settingName].update(newValue);\\n\\n        emit PlatformSettingUpdated(settingName, msg.sender, oldValue, newValue);\\n    }\\n\\n    /**\\n        @notice Removes a current platform setting given a setting name.\\n        @param name to remove.\\n     */\\n    function removeSetting(bytes32 name) external override onlyConfigurator(msg.sender) {\\n        uint256 oldValue = settings[name].value;\\n        settings[name].remove();\\n\\n        emit PlatformSettingRemoved(name, msg.sender, oldValue);\\n    }\\n\\n    function pause() external override onlyPauser(msg.sender) {\\n        require(!paused, \\\"PLATFORM_ALREADY_PAUSED\\\");\\n\\n        paused = true;\\n\\n        emit PlatformPaused(msg.sender);\\n    }\\n\\n    function unpause() external override onlyPauser(msg.sender) {\\n        require(paused, \\\"PLATFORM_ISNT_PAUSED\\\");\\n\\n        paused = false;\\n\\n        emit PlatformUnpaused(msg.sender);\\n    }\\n\\n    /* View Functions */\\n\\n    function requireIsPaused() external view override {\\n        require(paused, \\\"PLATFORM_ISNT_PAUSED\\\");\\n    }\\n\\n    function requireIsNotPaused() external view override {\\n        require(!paused, \\\"PLATFORM_IS_PAUSED\\\");\\n    }\\n\\n    /**\\n        @notice It gets the current platform setting for a given setting name\\n        @param name to get.\\n        @return the current platform setting.\\n     */\\n    function getSetting(bytes32 name) external view override returns (SettingsLib.Setting memory) {\\n        return _getSetting(name);\\n    }\\n\\n    /**\\n        @notice It gets the current platform setting value for a given setting name\\n        @param name to get.\\n        @return the current platform setting value.\\n     */\\n    function getSettingValue(bytes32 name) external view override returns (uint256) {\\n        return _getSetting(name).value;\\n    }\\n\\n    /**\\n        @notice It tests whether a setting name is already configured.\\n        @param name setting name to test.\\n        @return true if the setting is already configured. Otherwise it returns false.\\n     */\\n    function hasSetting(bytes32 name) external view override returns (bool) {\\n        return _getSetting(name).exists;\\n    }\\n\\n    /**\\n        @notice It gets whether the platform is paused or not.\\n        @return true if platform is paused. Otherwise it returns false.\\n     */\\n    function isPaused() external view override returns (bool) {\\n        return paused;\\n    }\\n\\n    /** Internal functions */\\n\\n    /**\\n        @notice It gets the platform setting for a given setting name.\\n        @param name the setting name to look for.\\n        @return the current platform setting for the given setting name.\\n     */\\n    function _getSetting(bytes32 name) internal view returns (SettingsLib.Setting memory) {\\n        return settings[name];\\n    }\\n\\n    function _rolesManager() internal view returns (IRolesManager) {\\n        return IRolesManager(rolesManager);\\n    }\\n\\n    function _rolesManagerConsts() internal view returns (RolesManagerConsts) {\\n        return RolesManagerConsts(_rolesManager().consts());\\n    }\\n\\n    /** Private functions */\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\ncontract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!_paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(_paused, \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/roles/RolesManager.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.6.12;\\n\\nimport \\\"./IRolesManager.sol\\\";\\nimport \\\"./RolesManagerConsts.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ncontract RolesManager is AccessControl, IRolesManager {\\n    address public override consts;\\n\\n    uint8 public override maxMultiItems;\\n\\n    constructor(uint8 initialMaxMultiItems) public {\\n        maxMultiItems = initialMaxMultiItems;\\n\\n        consts = address(new RolesManagerConsts());\\n\\n        // Setting the role admin for all the platform roles.\\n        _setRoleAdmin(_consts().PAUSER_ROLE(), _consts().OWNER_ROLE());\\n        _setRoleAdmin(_consts().VAULT_CONFIGURATOR_ROLE(), _consts().OWNER_ROLE());\\n        _setRoleAdmin(_consts().MINTER_ROLE(), _consts().OWNER_ROLE());\\n        _setRoleAdmin(_consts().CONFIGURATOR_ROLE(), _consts().OWNER_ROLE());\\n\\n        // Setting roles\\n        /*\\n            The OWNER_ROLE is its own admin role. See AccessControl.DEFAULT_ADMIN_ROLE.\\n        */\\n        _setupRole(_consts().OWNER_ROLE(), msg.sender);\\n        _setupRole(_consts().PAUSER_ROLE(), msg.sender);\\n        _setupRole(_consts().CONFIGURATOR_ROLE(), msg.sender);\\n    }\\n\\n    function requireHasRole(bytes32 role, address account) external view override {\\n        require(hasRole(role, account), \\\"ACCOUNT_HASNT_GIVEN_ROLE\\\");\\n    }\\n\\n    function requireHasRole(\\n        bytes32 role,\\n        address account,\\n        string calldata message\\n    ) external view override {\\n        require(hasRole(role, account), message);\\n    }\\n\\n    function setMaxMultiItems(uint8 newMaxMultiItems) external override {\\n        require(hasRole(_consts().OWNER_ROLE(), _msgSender()), \\\"SENDER_HASNT_OWNER_ROLE\\\");\\n        require(maxMultiItems != newMaxMultiItems, \\\"NEW_MAX_MULTI_ITEMS_REQUIRED\\\");\\n        uint8 oldMaxMultiItems = maxMultiItems;\\n\\n        maxMultiItems = newMaxMultiItems;\\n\\n        emit MaxMultiItemsUpdated(msg.sender, oldMaxMultiItems, newMaxMultiItems);\\n    }\\n\\n    function multiGrantRole(bytes32 role, address[] calldata accounts) external override {\\n        require(accounts.length <= maxMultiItems, \\\"ACCOUNTS_LENGTH_EXCEEDS_MAX\\\");\\n        for (uint256 i = 0; i < accounts.length; i++) {\\n            grantRole(role, accounts[i]);\\n        }\\n    }\\n\\n    function multiRevokeRole(bytes32 role, address[] calldata accounts) external override {\\n        require(accounts.length <= maxMultiItems, \\\"ACCOUNTS_LENGTH_EXCEEDS_MAX\\\");\\n\\n        for (uint256 i = 0; i < accounts.length; i++) {\\n            revokeRole(role, accounts[i]);\\n        }\\n    }\\n\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external {\\n        require(getRoleAdmin(role) == \\\"\\\", \\\"ROLE_MUST_BE_NEW\\\");\\n        require(hasRole(_consts().OWNER_ROLE(), _msgSender()), \\\"SENDER_HASNT_OWNER_ROLE\\\");\\n\\n        _setRoleAdmin(role, adminRole);\\n    }\\n\\n    function _consts() internal view returns (RolesManagerConsts) {\\n        return RolesManagerConsts(consts);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../GSN/Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\\n * (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/settings/IVaultsSettings.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../libs/SettingsLib.sol\\\";\\n\\ninterface IVaultsSettings {\\n    event VaultSettingCreated(\\n        address indexed creator,\\n        address indexed vault,\\n        uint256 value,\\n        uint256 min,\\n        uint256 maxs\\n    );\\n\\n    event VaultSettingRemoved(address indexed remover, bytes32 name);\\n\\n    function createVaultSetting(\\n        address vault,\\n        bytes32 name,\\n        uint256 value,\\n        uint256 min,\\n        uint256 max\\n    ) external;\\n\\n    function removeVaultSetting(address vault, bytes32 name) external;\\n\\n    function getVaultSetting(address vault, bytes32 name)\\n        external\\n        view\\n        returns (SettingsLib.Setting memory);\\n\\n    function getVaultSettingValue(address vault, bytes32 name) external view returns (uint256);\\n\\n    function hasVaultSetting(address vault, bytes32 name) external view returns (bool);\\n\\n    function getVaultSettingOrDefaultValue(address vault, bytes32 name)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getVaultSettingOrDefault(address vault, bytes32 name)\\n        external\\n        view\\n        returns (SettingsLib.Setting memory);\\n\\n    function hasVaultSettingOrDefault(address vault, bytes32 name) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/rewards/RewardsCalculatorBase.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.6.12;\\n\\n// Contracts\\n\\n// Libraries\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n// Interfaces\\nimport \\\"../minters/IRewardsMinter.sol\\\";\\n\\nabstract contract RewardsCalculatorBase {\\n    using Address for address;\\n\\n    /* Constant Variables */\\n\\n    /* State Variables */\\n\\n    address private rewardsMinter;\\n\\n    /* Modifiers */\\n\\n    modifier onlyRewardsMinter(address account) {\\n        _requireOnlyRewardsMinter(account);\\n        _;\\n    }\\n\\n    /* Constructor */\\n\\n    /** View Functions */\\n\\n    function _rewardsMinter() internal view returns (IRewardsMinter) {\\n        return IRewardsMinter(rewardsMinter);\\n    }\\n\\n    function _requireOnlyRewardsMinter(address account) internal view {\\n        require(\\n            rewardsMinter != address(0x0) && account == rewardsMinter,\\n            \\\"ACCOUNT_ISNT_REWARDS_MINTER\\\"\\n        );\\n    }\\n\\n    /* Internal Funtions */\\n\\n    function _setRewardsMinter(address rewardsMinterAddress) internal {\\n        require(rewardsMinterAddress.isContract(), \\\"REWARDS_MINTER_MUST_BE_CONTRACT\\\");\\n        rewardsMinter = rewardsMinterAddress;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/minters/IRewardsMinter.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.6.12;\\n\\nimport \\\"../tokens/IMintableERC20.sol\\\";\\n\\ninterface IRewardsMinter {\\n    event NewCalculatorAdded(\\n        address indexed adder,\\n        address indexed newCalulator,\\n        uint256 calculatorPercentage,\\n        uint256 currentPercentage\\n    );\\n\\n    event CalculatorRemoved(\\n        address indexed remover,\\n        address indexed calulator,\\n        uint256 calculatorPercentage,\\n        uint256 currentPercentage\\n    );\\n\\n    event CalculatorPercentageUpdated(\\n        address indexed updater,\\n        address indexed calulator,\\n        uint256 newcalculatorPercentage,\\n        uint256 currentPercentage\\n    );\\n\\n    event RewardsClaimed(address indexed account, uint256 indexed periodId, uint256 amount);\\n\\n    function token() external view returns (IMintableERC20);\\n\\n    function settings() external view returns (address);\\n\\n    function rewardPeriodsRegistry() external view returns (address);\\n\\n    function currentPercentage() external view returns (uint256);\\n\\n    function getCalculators() external view returns (address[] memory);\\n\\n    function getAvailableRewards(uint256 periodId, address account) external view returns (uint256);\\n\\n    function claimRewards(uint256 periodId) external;\\n\\n    function addCalculator(address newCalculator, uint256 percentage) external;\\n\\n    function removeCalculator(address calculator) external;\\n\\n    function hasCalculator(address calculator) external view returns (bool);\\n\\n    function updateCalculatorPercentage(address calculator, uint256 percentage) external;\\n}\\n\"\r\n    },\r\n    \"contracts/tokens/IMintableERC20.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IMintableERC20 is IERC20 {\\n    function mint(address account, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/minters/RewardsMinter.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.6.12;\\n\\n// Contracts\\nimport \\\"../base/MigratorBase.sol\\\";\\n\\n// Interfaces\\nimport \\\"../tokens/IMintableERC20.sol\\\";\\nimport \\\"../rewards/IRewardsCalculator.sol\\\";\\nimport \\\"./IRewardsMinter.sol\\\";\\nimport \\\"../registries/IRewardPeriodsRegistry.sol\\\";\\n\\n// Libraries\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"../libs/RewardCalculatorLib.sol\\\";\\nimport \\\"../libs/AddressesLib.sol\\\";\\n\\ncontract RewardsMinter is MigratorBase, IRewardsMinter {\\n    using RewardCalculatorLib for RewardCalculatorLib.RewardCalculator;\\n    using AddressesLib for address[];\\n    using SafeMath for uint256;\\n\\n    /* Constant Variables */\\n    uint256 private constant MAX_PERCENTAGE = 10000;\\n\\n    /* State Variables */\\n\\n    IMintableERC20 public override token;\\n\\n    mapping(address => RewardCalculatorLib.RewardCalculator) public calculators;\\n\\n    uint256 public override currentPercentage;\\n\\n    address[] public calculatorsList;\\n\\n    address public override rewardPeriodsRegistry;\\n\\n    /* Modifiers */\\n\\n    /* Constructor */\\n\\n    constructor(\\n        address rewardPeriodsRegistryAddress,\\n        address settingsAddress,\\n        address tokenAddress\\n    ) public MigratorBase(settingsAddress) {\\n        require(rewardPeriodsRegistryAddress.isContract(), \\\"PERIODS_REG_MUST_BE_CONTRACT\\\");\\n        require(tokenAddress.isContract(), \\\"TOKEN_MUST_BE_CONTRACT\\\");\\n\\n        rewardPeriodsRegistry = rewardPeriodsRegistryAddress;\\n        token = IMintableERC20(tokenAddress);\\n    }\\n\\n    function claimRewards(uint256 periodId) external override {\\n        _settings().requireIsNotPaused();\\n        require(currentPercentage == MAX_PERCENTAGE, \\\"CURRENT_PERCENTAGE_INVALID\\\");\\n\\n        (\\n            uint256 id,\\n            ,\\n            uint256 endPeriodTimestamp,\\n            uint256 endRedeemablePeriodTimestamp,\\n            ,\\n            uint256 availableRewards,\\n            bool exists\\n        ) = _getRewardPeriod(periodId);\\n        require(exists, \\\"PERIOD_ID_NOT_EXISTS\\\");\\n        require(endPeriodTimestamp < block.timestamp, \\\"REWARD_PERIOD_IN_PROGRESS\\\");\\n        require(endRedeemablePeriodTimestamp > block.timestamp, \\\"CLAIMABLE_PERIOD_FINISHED\\\");\\n\\n        address account = msg.sender;\\n        uint256 totalRewardsSent = 0;\\n        for (uint256 indexAt = 0; indexAt < calculatorsList.length; indexAt++) {\\n            IRewardsCalculator rewardsCalculator = IRewardsCalculator(calculatorsList[indexAt]);\\n\\n            uint256 calculatorPercentage = calculators[calculatorsList[indexAt]].getPercentage();\\n            /*\\n                Available Rewards: 1000\\n                Calculator Percentage: 5000\\n                Calculator Available Rewards = 1000 * 5000 / 100\\n            */\\n            uint256 calculatorAvailableRewards =\\n                availableRewards.mul(calculatorPercentage).div(100);\\n\\n            uint256 availableRewardsForAcount =\\n                rewardsCalculator.processRewards(\\n                    id,\\n                    account,\\n                    availableRewards,\\n                    calculatorAvailableRewards\\n                );\\n            totalRewardsSent = totalRewardsSent.add(availableRewardsForAcount);\\n            if (availableRewardsForAcount > 0) {\\n                token.mint(account, availableRewardsForAcount);\\n            }\\n        }\\n        if (totalRewardsSent > 0) {\\n            _notifyRewardsSent(id, totalRewardsSent);\\n            emit RewardsClaimed(account, id, totalRewardsSent);\\n        }\\n    }\\n\\n    function updateCalculatorPercentage(address calculator, uint256 percentage)\\n        external\\n        override\\n        onlyOwner(msg.sender)\\n    {\\n        require(calculators[calculator].exists, \\\"CALCULATOR_ISNT_ADDED\\\");\\n        uint256 oldPercentage = calculators[calculator].percentage;\\n\\n        uint256 newCurrentPercentage = currentPercentage.sub(oldPercentage).add(percentage);\\n        require(newCurrentPercentage <= MAX_PERCENTAGE, \\\"ACCUM_PERCENTAGE_EXCEEDS_MAX\\\");\\n\\n        calculators[calculator].update(percentage);\\n\\n        currentPercentage = newCurrentPercentage;\\n\\n        emit CalculatorPercentageUpdated(msg.sender, calculator, percentage, currentPercentage);\\n    }\\n\\n    function addCalculator(address newCalculator, uint256 percentage)\\n        external\\n        override\\n        onlyOwner(msg.sender)\\n    {\\n        require(newCalculator.isContract(), \\\"NEW_CALCULATOR_MUST_BE_CONTRACT\\\");\\n        require(!calculators[newCalculator].exists, \\\"CALCULATOR_ALREADY_ADDED\\\");\\n        uint256 newCurrentPercentage = currentPercentage.add(percentage);\\n        require(newCurrentPercentage <= MAX_PERCENTAGE, \\\"ACCUM_PERCENTAGE_EXCEEDS_MAX\\\");\\n\\n        calculators[newCalculator].create(percentage);\\n        calculatorsList.add(newCalculator);\\n\\n        currentPercentage = newCurrentPercentage;\\n\\n        emit NewCalculatorAdded(msg.sender, newCalculator, percentage, currentPercentage);\\n    }\\n\\n    function removeCalculator(address calculator) external override onlyOwner(msg.sender) {\\n        require(calculators[calculator].exists, \\\"CALCULATOR_DOESNT_EXIST\\\");\\n        uint256 percentage = calculators[calculator].percentage;\\n\\n        calculatorsList.remove(calculator);\\n        calculators[calculator].remove();\\n\\n        currentPercentage = currentPercentage.sub(percentage);\\n\\n        emit CalculatorRemoved(msg.sender, calculator, percentage, currentPercentage);\\n    }\\n\\n    /** View Functions */\\n\\n    function settings() external view override returns (address) {\\n        return address(_settings());\\n    }\\n\\n    function getAvailableRewards(uint256 periodId, address account)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        if (currentPercentage != MAX_PERCENTAGE) {\\n            return 0;\\n        }\\n        (\\n            uint256 id,\\n            uint256 startPeriodTimestamp,\\n            ,\\n            uint256 endRedeemablePeriodTimestamp,\\n            ,\\n            uint256 availableRewards,\\n            bool exists\\n        ) = _getRewardPeriod(periodId);\\n        if (\\n            !exists ||\\n            startPeriodTimestamp > block.timestamp ||\\n            endRedeemablePeriodTimestamp < block.timestamp\\n        ) {\\n            return 0;\\n        }\\n\\n        uint256 rewardsForAccount = 0;\\n        for (uint256 indexAt = 0; indexAt < calculatorsList.length; indexAt++) {\\n            IRewardsCalculator rewardsCalculator = IRewardsCalculator(calculatorsList[indexAt]);\\n\\n            uint256 calculatorPercentage = calculators[calculatorsList[indexAt]].getPercentage();\\n            /*\\n                Available Rewards: 1000\\n                Calculator Percentage: 5000\\n                Calculator Available Rewards = 1000 * 5000 / 100\\n            */\\n            uint256 calculatorAvailableRewards =\\n                availableRewards.mul(calculatorPercentage).div(100);\\n\\n            uint256 availableRewardsForAcount =\\n                rewardsCalculator.getRewards(\\n                    id,\\n                    account,\\n                    availableRewards,\\n                    calculatorAvailableRewards\\n                );\\n            rewardsForAccount = rewardsForAccount.add(availableRewardsForAcount);\\n        }\\n        return rewardsForAccount;\\n    }\\n\\n    function getCalculators() external view override returns (address[] memory) {\\n        return calculatorsList;\\n    }\\n\\n    function hasCalculator(address calculator) external view override returns (bool) {\\n        return calculators[calculator].exists;\\n    }\\n\\n    /* Internal Functions */\\n\\n    function _notifyRewardsSent(uint256 period, uint256 totalRewardsSent) internal {\\n        IRewardPeriodsRegistry rewardsRegistry = IRewardPeriodsRegistry(rewardPeriodsRegistry);\\n        rewardsRegistry.notifyRewardsSent(period, totalRewardsSent);\\n    }\\n\\n    function _getRewardPeriod(uint256 periodId)\\n        internal\\n        view\\n        returns (\\n            uint256 id,\\n            uint256 startPeriodTimestamp,\\n            uint256 endPeriodTimestamp,\\n            uint256 endRedeemablePeriodTimestamp,\\n            uint256 totalRewards,\\n            uint256 availableRewards,\\n            bool exists\\n        )\\n    {\\n        IRewardPeriodsRegistry rewardsRegistry = IRewardPeriodsRegistry(rewardPeriodsRegistry);\\n        (\\n            id,\\n            startPeriodTimestamp,\\n            endPeriodTimestamp,\\n            endRedeemablePeriodTimestamp,\\n            totalRewards,\\n            availableRewards,\\n            exists\\n        ) = rewardsRegistry.getRewardPeriodById(periodId);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/base/MigratorBase.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.6.12;\\n\\n// Contracts\\nimport \\\"./Base.sol\\\";\\n\\n// Libraries\\n\\n// Interfaces\\nimport \\\"../migrator/IMigrator.sol\\\";\\n\\nabstract contract MigratorBase is Base {\\n    /* Constant Variables */\\n\\n    /* State Variables */\\n\\n    address private migrator;\\n\\n    /* Modifiers */\\n\\n    /* Constructor */\\n\\n    constructor(address settingsAddress) internal Base(settingsAddress) {}\\n\\n    /* External Functions */\\n\\n    function setMigrator(address newMigrator) external onlyOwner(msg.sender) {\\n        require(newMigrator.isContract(), \\\"MIGRATOR_MUST_BE_CONTRACT\\\");\\n        migrator = newMigrator;\\n    }\\n\\n    function migrateTo(address newContract, bytes calldata extraData)\\n        external\\n        onlyOwner(msg.sender)\\n    {\\n        require(newContract != address(0x0), \\\"MIGRATOR_IS_EMPTY\\\");\\n        IMigrator(migrator).migrate(address(this), newContract, extraData);\\n    }\\n\\n    function hasMigrator() external view returns (bool) {\\n        return migrator != address(0x0);\\n    }\\n\\n    /** Internal Functions */\\n\\n    function _migrator() internal view returns (address) {\\n        return migrator;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/rewards/IRewardsCalculator.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.6.12;\\n\\ninterface IRewardsCalculator {\\n    function getRewards(\\n        uint256 period,\\n        address account,\\n        uint256 totalRewards,\\n        uint256 totalAvailableRewards\\n    ) external view returns (uint256);\\n\\n    function processRewards(\\n        uint256 period,\\n        address account,\\n        uint256 totalRewards,\\n        uint256 totalAvailableRewards\\n    ) external returns (uint256 rewardsForAccount);\\n}\\n\"\r\n    },\r\n    \"contracts/registries/IRewardPeriodsRegistry.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../libs/RewardPeriodLib.sol\\\";\\n\\ninterface IRewardPeriodsRegistry {\\n    event RewardPeriodCreated(\\n        address indexed creator,\\n        uint256 period,\\n        uint256 startPeriodTimestamp,\\n        uint256 endPeriodTimestamp,\\n        uint256 endRedeemablePeriodTimestamp,\\n        uint256 availableRewards\\n    );\\n\\n    event RewardPeriodRemoved(\\n        address indexed remover,\\n        uint256 period,\\n        uint256 startTimestamp,\\n        uint256 endTimestamp,\\n        uint256 availableRewards\\n    );\\n\\n    function settings() external view returns (address);\\n\\n    function getRewardPeriod(uint256 id)\\n        external\\n        view\\n        returns (RewardPeriodLib.RewardPeriod memory);\\n\\n    function notifyRewardsSent(uint256 period, uint256 totalRewardsSent)\\n        external\\n        returns (uint256 newTotalAvailableRewards);\\n\\n    function createRewardPeriod(\\n        uint256 startPeriodTimestamp,\\n        uint256 endPeriodTimestamp,\\n        uint256 endRedeemablePeriodTimestamp,\\n        uint256 availableRewards\\n    ) external;\\n\\n    function getRewardPeriods() external view returns (RewardPeriodLib.RewardPeriod[] memory);\\n\\n    function getLastRewardPeriod()\\n        external\\n        view\\n        returns (\\n            uint256 periodId,\\n            uint256 startPeriodTimestamp,\\n            uint256 endPeriodTimestamp,\\n            uint256 endRedeemablePeriodTimestamp,\\n            uint256 totalRewards,\\n            uint256 availableRewards,\\n            bool exists\\n        );\\n\\n    function getRewardPeriodById(uint256 periodId)\\n        external\\n        view\\n        returns (\\n            uint256 id,\\n            uint256 startPeriodTimestamp,\\n            uint256 endPeriodTimestamp,\\n            uint256 endRedeemablePeriodTimestamp,\\n            uint256 totalRewards,\\n            uint256 availableRewards,\\n            bool exists\\n        );\\n}\\n\"\r\n    },\r\n    \"contracts/libs/RewardCalculatorLib.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.6.12;\\n\\nlibrary RewardCalculatorLib {\\n    uint256 private constant MAX_PERCENTAGE = 10000;\\n\\n    struct RewardCalculator {\\n        uint256 percentage; // 1000 => 10% (10 * 100)\\n        bool paused;\\n        bool exists;\\n    }\\n\\n    function create(RewardCalculator storage self, uint256 percentage) internal {\\n        requireNotExists(self);\\n        require(percentage <= MAX_PERCENTAGE, \\\"PERCENTAGE_MUST_BE_LT_MAX\\\");\\n        self.percentage = percentage;\\n        self.exists = true;\\n    }\\n\\n    /**\\n        @notice It updates the current reward calculator.\\n        @param self the current reward calculator.\\n        @param newPercentage the new percentage to set in the reward calculator.\\n     */\\n    function update(RewardCalculator storage self, uint256 newPercentage)\\n        internal\\n        returns (uint256 oldPercentage)\\n    {\\n        requireExists(self);\\n        require(self.percentage != newPercentage, \\\"NEW_PERCENTAGE_REQUIRED\\\");\\n        require(newPercentage < MAX_PERCENTAGE, \\\"PERCENTAGE_MUST_BE_LT_MAX\\\");\\n        oldPercentage = self.percentage;\\n        self.percentage = newPercentage;\\n    }\\n\\n    function pause(RewardCalculator storage self) internal {\\n        requireExists(self);\\n        require(!self.paused, \\\"CALCULATOR_ALREADY_PAUSED\\\");\\n        self.paused = true;\\n    }\\n\\n    function unpause(RewardCalculator storage self) internal {\\n        requireExists(self);\\n        require(self.paused, \\\"CALCULATOR_NOT_PAUSED\\\");\\n        self.paused = false;\\n    }\\n\\n    function getPercentage(RewardCalculator storage self) internal view returns (uint256) {\\n        return self.exists && !self.paused ? self.percentage : 0;\\n    }\\n\\n    /**\\n        @notice Checks whether the current reward calculator exists or not.\\n        @dev It throws a require error if the reward calculator already exists.\\n        @param self the current reward calculator.\\n     */\\n    function requireNotExists(RewardCalculator storage self) internal view {\\n        require(!self.exists, \\\"REWARD_CALC_ALREADY_EXISTS\\\");\\n    }\\n\\n    /**\\n        @notice Checks whether the current reward calculator exists or not.\\n        @dev It throws a require error if the current reward calculator doesn't exist.\\n        @param self the current reward calculator.\\n     */\\n    function requireExists(RewardCalculator storage self) internal view {\\n        require(self.exists, \\\"REWARD_CALC_NOT_EXISTS\\\");\\n    }\\n\\n    /**\\n        @notice It removes a current reward calculator.\\n        @param self the current reward calculator to remove.\\n     */\\n    function remove(RewardCalculator storage self) internal {\\n        requireExists(self);\\n        self.percentage = 0;\\n        self.exists = false;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/AddressesLib.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.6.12;\\n\\n/**\\n    @notice Utility library of inline functions on the address arrays.\\n */\\nlibrary AddressesLib {\\n    /**\\n      @notice It adds an address value to the array.\\n      @param self current array.\\n      @param newItem new item to add.\\n    */\\n    function add(address[] storage self, address newItem) internal {\\n        require(newItem != address(0x0), \\\"EMPTY_ADDRESS_NOT_ALLOWED\\\");\\n        self.push(newItem);\\n    }\\n\\n    /**\\n      @notice It removes the value at the given index in an array.\\n      @param self the current array.\\n      @param index remove an item in a specific index.\\n    */\\n    function removeAt(address[] storage self, uint256 index) internal {\\n        if (index >= self.length) return;\\n\\n        if (index != self.length - 1) {\\n            address temp = self[self.length - 1];\\n            self[index] = temp;\\n        }\\n\\n        delete self[self.length - 1];\\n        self.pop();\\n    }\\n\\n    /**\\n      @notice It gets the index for a given item.\\n      @param self the current array.\\n      @param item to get the index.\\n      @return found true if the item was found. Otherwise it returns false. indexAt the current index for a given item.\\n    */\\n    function getIndex(address[] storage self, address item)\\n        internal\\n        view\\n        returns (bool found, uint256 indexAt)\\n    {\\n        for (indexAt = 0; indexAt < self.length; indexAt++) {\\n            found = self[indexAt] == item;\\n            if (found) {\\n                return (found, indexAt);\\n            }\\n        }\\n        return (found, indexAt);\\n    }\\n\\n    /**\\n      @notice It removes an address value from the array.\\n      @param self the current array.\\n      @param item the item to remove.\\n    */\\n    function remove(address[] storage self, address item) internal {\\n        (bool found, uint256 indexAt) = getIndex(self, item);\\n        if (!found) return;\\n\\n        removeAt(self, indexAt);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/migrator/IMigrator.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.6.12;\\n\\ninterface IMigrator {\\n    event ContractMigrated(\\n        address indexed migrator,\\n        address indexed oldContract,\\n        address indexed newContract\\n    );\\n\\n    function migrate(\\n        address oldContract,\\n        address newContract,\\n        bytes calldata extraData\\n    ) external returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/libs/RewardPeriodLib.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nlibrary RewardPeriodLib {\\n    using SafeMath for uint256;\\n\\n    struct RewardPeriod {\\n        uint256 id;\\n        uint256 startPeriodTimestamp;\\n        uint256 endPeriodTimestamp;\\n        uint256 endRedeemablePeriodTimestamp;\\n        uint256 totalRewards;\\n        uint256 availableRewards;\\n        bool exists;\\n    }\\n\\n    function create(\\n        RewardPeriod storage self,\\n        uint256 id,\\n        uint256 startPeriodTimestamp,\\n        uint256 endPeriodTimestamp,\\n        uint256 endRedeemablePeriodTimestamp,\\n        uint256 availableRewards\\n    ) internal {\\n        requireNotExists(self);\\n        require(block.timestamp <= startPeriodTimestamp, \\\"START_TIMESTAMP_IS_INVALID\\\");\\n        require(startPeriodTimestamp < endPeriodTimestamp, \\\"REWARD_PERIOD_IS_INVALID\\\");\\n        require(endPeriodTimestamp < endRedeemablePeriodTimestamp, \\\"END_REDEEM_PERIOD_IS_INVALID\\\");\\n        require(availableRewards > 0, \\\"REWARDS_MUST_BE_GT_ZERO\\\");\\n        self.id = id;\\n        self.startPeriodTimestamp = startPeriodTimestamp;\\n        self.endPeriodTimestamp = endPeriodTimestamp;\\n        self.endRedeemablePeriodTimestamp = endRedeemablePeriodTimestamp;\\n        self.availableRewards = availableRewards;\\n        self.totalRewards = availableRewards;\\n        self.exists = true;\\n    }\\n\\n    function isInProgress(RewardPeriod storage self) internal view returns (bool) {\\n        uint256 currentTimestamp = block.timestamp;\\n        return\\n            self.exists &&\\n            self.startPeriodTimestamp <= currentTimestamp &&\\n            currentTimestamp <= self.endPeriodTimestamp;\\n    }\\n\\n    function isInRedemption(RewardPeriod storage self) internal view returns (bool) {\\n        return isFinished(self) && self.endRedeemablePeriodTimestamp > block.timestamp;\\n    }\\n\\n    function isFinished(RewardPeriod storage self) internal view returns (bool) {\\n        return self.exists && self.endPeriodTimestamp < block.timestamp;\\n    }\\n\\n    function isPending(RewardPeriod storage self) internal view returns (bool) {\\n        uint256 currentTimestamp = block.timestamp;\\n        return self.exists && self.startPeriodTimestamp > currentTimestamp;\\n    }\\n\\n    /**\\n        @notice Checks whether the current reward period exists or not.\\n        @dev It throws a require error if the reward period already exists.\\n        @param self the current reward period.\\n     */\\n    function requireNotExists(RewardPeriod storage self) internal view {\\n        require(!self.exists, \\\"REWARD_PERIOD_ALREADY_EXISTS\\\");\\n    }\\n\\n    /**\\n        @notice Checks whether the current reward period exists or not.\\n        @dev It throws a require error if the current reward period doesn't exist.\\n        @param self the current reward period.\\n     */\\n    function requireExists(RewardPeriod storage self) internal view {\\n        require(self.exists, \\\"REWARD_PERIOD_NOT_EXISTS\\\");\\n    }\\n\\n    function endsBefore(RewardPeriod storage self, uint256 startPeriodTimestamp)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return self.exists && self.endPeriodTimestamp < startPeriodTimestamp;\\n    }\\n\\n    function notifyRewardsSent(RewardPeriod storage self, uint256 amount) internal returns (bool) {\\n        self.availableRewards = self.availableRewards.sub(amount);\\n    }\\n\\n    /**\\n        @notice It removes a current reward period.\\n        @param self the current reward period to remove.\\n     */\\n    function remove(RewardPeriod storage self) internal {\\n        requireExists(self);\\n        self.id = 0;\\n        self.startPeriodTimestamp = 0;\\n        self.endPeriodTimestamp = 0;\\n        self.endRedeemablePeriodTimestamp = 0;\\n        self.totalRewards = 0;\\n        self.availableRewards = 0;\\n        self.exists = false;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/registries/RewardPeriodsRegistry.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n// Libraries\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"../libs/AddressesLib.sol\\\";\\nimport \\\"../libs/RewardPeriodLib.sol\\\";\\n\\n// Contracts\\nimport \\\"../base/MigratorBase.sol\\\";\\n\\n// Interfaces\\nimport \\\"./IRewardPeriodsRegistry.sol\\\";\\n\\ncontract RewardPeriodsRegistry is MigratorBase, IRewardPeriodsRegistry {\\n    using RewardPeriodLib for RewardPeriodLib.RewardPeriod;\\n    using AddressesLib for address[];\\n    using Address for address;\\n\\n    /* State Variables */\\n\\n    mapping(uint256 => RewardPeriodLib.RewardPeriod) internal periods;\\n\\n    RewardPeriodLib.RewardPeriod[] public periodsList;\\n\\n    /** Modifiers */\\n\\n    /* Constructor */\\n\\n    constructor(address settingsAddress) public MigratorBase(settingsAddress) {}\\n\\n    function createRewardPeriod(\\n        uint256 startPeriodTimestamp,\\n        uint256 endPeriodTimestamp,\\n        uint256 endRedeemablePeriodTimestamp,\\n        uint256 availableRewards\\n    ) external override onlyOwner(msg.sender) {\\n        uint256 newPeriodId = 1;\\n        if (periodsList.length > 0) {\\n            RewardPeriodLib.RewardPeriod storage lastPeriod = _getLastRewardPeriod();\\n            require(!lastPeriod.isPending(), \\\"ALREADY_PENDING_PERIOD_REWARD\\\");\\n\\n            if (lastPeriod.isInProgress()) {\\n                require(\\n                    lastPeriod.endsBefore(startPeriodTimestamp),\\n                    \\\"IN_PROGRESS_PERIOD_OVERLAPPED\\\"\\n                );\\n            }\\n            newPeriodId = lastPeriod.id + 1;\\n        }\\n\\n        periods[newPeriodId].create(\\n            newPeriodId,\\n            startPeriodTimestamp,\\n            endPeriodTimestamp,\\n            endRedeemablePeriodTimestamp,\\n            availableRewards\\n        );\\n        periodsList.push(periods[newPeriodId]);\\n\\n        emit RewardPeriodCreated(\\n            msg.sender,\\n            newPeriodId,\\n            startPeriodTimestamp,\\n            endPeriodTimestamp,\\n            endRedeemablePeriodTimestamp,\\n            availableRewards\\n        );\\n    }\\n\\n    function notifyRewardsSent(uint256 period, uint256 totalRewardsSent)\\n        external\\n        override\\n        onlyMinter(msg.sender)\\n        returns (uint256 newTotalAvailableRewards)\\n    {\\n        periods[period].notifyRewardsSent(totalRewardsSent);\\n        return periods[period].availableRewards;\\n    }\\n\\n    function getRewardPeriod(uint256 id)\\n        external\\n        view\\n        override\\n        returns (RewardPeriodLib.RewardPeriod memory)\\n    {\\n        return periods[id];\\n    }\\n\\n    function getRewardPeriods()\\n        external\\n        view\\n        override\\n        returns (RewardPeriodLib.RewardPeriod[] memory)\\n    {\\n        return periodsList;\\n    }\\n\\n    function getLastRewardPeriod()\\n        external\\n        view\\n        override\\n        returns (\\n            uint256 periodId,\\n            uint256 startPeriodTimestamp,\\n            uint256 endPeriodTimestamp,\\n            uint256 endRedeemablePeriodTimestamp,\\n            uint256 totalRewards,\\n            uint256 availableRewards,\\n            bool exists\\n        )\\n    {\\n        RewardPeriodLib.RewardPeriod memory rewardPeriod = _getLastRewardPeriod();\\n        return (\\n            rewardPeriod.id,\\n            rewardPeriod.startPeriodTimestamp,\\n            rewardPeriod.endPeriodTimestamp,\\n            rewardPeriod.endRedeemablePeriodTimestamp,\\n            rewardPeriod.totalRewards,\\n            rewardPeriod.availableRewards,\\n            rewardPeriod.exists\\n        );\\n    }\\n\\n    function getRewardPeriodById(uint256 periodId)\\n        external\\n        view\\n        override\\n        returns (\\n            uint256 id,\\n            uint256 startPeriodTimestamp,\\n            uint256 endPeriodTimestamp,\\n            uint256 endRedeemablePeriodTimestamp,\\n            uint256 totalRewards,\\n            uint256 availableRewards,\\n            bool exists\\n        )\\n    {\\n        RewardPeriodLib.RewardPeriod memory rewardPeriod = _getRewardPeriodById(periodId);\\n        return (\\n            rewardPeriod.id,\\n            rewardPeriod.startPeriodTimestamp,\\n            rewardPeriod.endPeriodTimestamp,\\n            rewardPeriod.endRedeemablePeriodTimestamp,\\n            rewardPeriod.totalRewards,\\n            rewardPeriod.availableRewards,\\n            rewardPeriod.exists\\n        );\\n    }\\n\\n    function settings() external view override returns (address) {\\n        return address(_settings());\\n    }\\n\\n    /** Internal Functions */\\n\\n    function _getLastRewardPeriod() internal view returns (RewardPeriodLib.RewardPeriod storage) {\\n        return periodsList.length > 0 ? periodsList[periodsList.length - 1] : periods[0];\\n    }\\n\\n    function _getRewardPeriodById(uint256 periodId)\\n        internal\\n        view\\n        returns (RewardPeriodLib.RewardPeriod storage)\\n    {\\n        return periods[periodId];\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/AccountRewardsLib.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nlibrary AccountRewardsLib {\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    struct AccountRewards {\\n        address account;\\n        uint256 amount;\\n        uint256 available;\\n        bool exists;\\n    }\\n\\n    function create(\\n        AccountRewards storage self,\\n        address account,\\n        uint256 amount\\n    ) internal {\\n        requireNotExists(self);\\n        require(amount > 0, \\\"AMOUNT_MUST_BE_GT_ZERO\\\");\\n        self.account = account;\\n        self.amount = amount;\\n        self.available = amount;\\n        self.exists = true;\\n    }\\n\\n    function increaseAmount(AccountRewards storage self, uint256 amount) internal {\\n        requireExists(self);\\n        require(amount > 0, \\\"AMOUNT_MUST_BE_GT_ZERO\\\");\\n        self.amount = self.amount.add(amount);\\n        self.available = self.available.add(amount);\\n    }\\n\\n    function decreaseAmount(AccountRewards storage self, uint256 amount) internal {\\n        requireExists(self);\\n        require(amount > 0, \\\"AMOUNT_MUST_BE_GT_ZERO\\\");\\n        self.amount = self.amount.sub(amount);\\n        self.available = self.available.sub(amount);\\n    }\\n\\n    function claimRewards(AccountRewards storage self, uint256 amount) internal {\\n        self.available = self.available.sub(amount);\\n    }\\n\\n    /* View Functions */\\n\\n    /**\\n        @notice Checks whether the current account rewards exists or not.\\n        @dev It throws a require error if the account rewards already exists.\\n        @param self the current account rewards.\\n     */\\n    function requireNotExists(AccountRewards storage self) internal view {\\n        require(!self.exists, \\\"ACCOUNT_REWARD_ALREADY_EXISTS\\\");\\n    }\\n\\n    /**\\n        @notice Checks whether the current account rewards exists or not.\\n        @dev It throws a require error if the current account rewards doesn't exist.\\n        @param self the current account rewards.\\n     */\\n    function requireExists(AccountRewards storage self) internal view {\\n        require(self.exists, \\\"ACCOUNT_REWARD_NOT_EXISTS\\\");\\n    }\\n\\n    /**\\n        @notice It removes a current account rewards.\\n        @param self the current account rewards to remove.\\n     */\\n    function remove(AccountRewards storage self) internal {\\n        requireExists(self);\\n        self.amount = 0;\\n        self.available = 0;\\n        self.account = address(0x0);\\n        self.exists = false;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/rewards/ManualPGURewardsCalculator.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n// Contracts\\nimport \\\"../base/Base.sol\\\";\\nimport \\\"./RewardsCalculatorBase.sol\\\";\\n\\n// Libraries\\nimport \\\"../libs/AccountRewardsLib.sol\\\";\\n\\n// Interfaces\\nimport \\\"./IRewardsCalculator.sol\\\";\\n\\ncontract ManualPGURewardsCalculator is Base, RewardsCalculatorBase, IRewardsCalculator {\\n    using AccountRewardsLib for AccountRewardsLib.AccountRewards;\\n\\n    /* Events */\\n\\n    event ManualRewardsUpdated(\\n        address indexed updater,\\n        uint256 period,\\n        address account,\\n        uint256 amount\\n    );\\n\\n    /* State Variables */\\n    mapping(uint256 => mapping(address => AccountRewardsLib.AccountRewards)) private rewards;\\n\\n    /* Constructor */\\n\\n    constructor(address settingsAddress, address rewardsMinterAddress)\\n        public\\n        Base(settingsAddress)\\n    {\\n        _setRewardsMinter(rewardsMinterAddress);\\n    }\\n\\n    function setMultiRewardsForPeriod(\\n        uint256 rewardsPeriod,\\n        address[] calldata accounts,\\n        uint256[] calldata amounts\\n    ) external onlyOwner(msg.sender) {\\n        require(accounts.length == amounts.length, \\\"ARRAY_LENGTHS_NOT_EQUAL\\\");\\n        for (uint256 i = 0; i < accounts.length; i++) {\\n            _setRewardsForPeriod(rewardsPeriod, accounts[i], amounts[i]);\\n        }\\n    }\\n\\n    function removeMultiRewardsForPeriod(uint256 rewardsPeriod, address[] calldata accounts)\\n        external\\n        onlyOwner(msg.sender)\\n    {\\n        for (uint256 i = 0; i < accounts.length; i++) {\\n            _removeRewardsForPeriod(rewardsPeriod, accounts[i]);\\n        }\\n    }\\n\\n    function processRewards(\\n        uint256 period,\\n        address account,\\n        uint256 totalRewards,\\n        uint256 totalAvailableRewards\\n    ) external override onlyRewardsMinter(msg.sender) returns (uint256 rewardsForAccount) {\\n        rewardsForAccount = _getRewards(period, account, totalRewards, totalAvailableRewards);\\n        if (rewardsForAccount > 0) {\\n            rewards[period][account].claimRewards(rewardsForAccount);\\n        }\\n    }\\n\\n    /* View Functions */\\n\\n    function getRewards(\\n        uint256 period,\\n        address account,\\n        uint256 totalRewards,\\n        uint256 totalAvailableRewards\\n    ) external view override returns (uint256) {\\n        return _getRewards(period, account, totalRewards, totalAvailableRewards);\\n    }\\n\\n    function getAccountRewardsFor(uint256 period, address account)\\n        external\\n        view\\n        returns (AccountRewardsLib.AccountRewards memory)\\n    {\\n        return rewards[period][account];\\n    }\\n\\n    /* Internal Functions */\\n\\n    function _getRewards(\\n        uint256 period,\\n        address account,\\n        uint256,\\n        uint256 totalAvailableRewards\\n    ) internal view returns (uint256 rewardsForAccount) {\\n        rewardsForAccount = rewards[period][account].available;\\n        require(totalAvailableRewards >= rewardsForAccount, \\\"NOT_ENOUGH_TOTAL_AVAILAB_REWARDS\\\");\\n    }\\n\\n    function _setRewardsForPeriod(\\n        uint256 rewardsPeriod,\\n        address account,\\n        uint256 amount\\n    ) internal {\\n        rewards[rewardsPeriod][account].create(account, amount);\\n\\n        emit ManualRewardsUpdated(msg.sender, rewardsPeriod, account, amount);\\n    }\\n\\n    function _removeRewardsForPeriod(uint256 rewardsPeriod, address account) internal {\\n        rewards[rewardsPeriod][account].remove();\\n\\n        emit ManualRewardsUpdated(msg.sender, rewardsPeriod, account, 0);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/mocks/libs/AddressesLibMock.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.6.12;\\n\\nimport \\\"../../libs/AddressesLib.sol\\\";\\n\\ncontract AddressesLibMock {\\n    using AddressesLib for address[];\\n\\n    address[] public result;\\n\\n    constructor(address[] memory initialData) public {\\n        result = initialData;\\n    }\\n\\n    function getResult() external view returns (address[] memory) {\\n        return result;\\n    }\\n\\n    function add(address newItem) external {\\n        result.add(newItem);\\n    }\\n\\n    function removeAt(uint256 indexAt) external {\\n        result.removeAt(indexAt);\\n    }\\n\\n    function getIndex(address item) external view returns (bool found, uint256 indexAt) {\\n        return result.getIndex(item);\\n    }\\n\\n    function remove(address item) external {\\n        result.remove(item);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/registries/TokensRegistry.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"./ITokensRegistry.sol\\\";\\n\\ncontract TokensRegistry is ITokensRegistry {\\n    using Address for address;\\n\\n    mapping(address => bool) allowedTokens;\\n\\n    function addToken(address token) external override {\\n        require(token.isContract(), \\\"TOKEN_MUST_BE_CONTRACT\\\");\\n\\n        allowedTokens[token] = true;\\n\\n        emit TokenAdded(msg.sender, token);\\n    }\\n\\n    function removeToken(address token) external override {\\n        allowedTokens[token] = false;\\n\\n        emit TokenRemoved(msg.sender, token);\\n    }\\n\\n    function hasToken(address token) external view override returns (bool) {\\n        return allowedTokens[token];\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/registries/ITokensRegistry.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.6.12;\\n\\ninterface ITokensRegistry {\\n    event TokenAdded(address indexed adder, address indexed token);\\n\\n    event TokenRemoved(address indexed remover, address indexed token);\\n\\n    function addToken(address token) external;\\n\\n    function removeToken(address token) external;\\n\\n    function hasToken(address token) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"initialMaxMultiItems\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"updater\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"oldValue\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"newValue\",\"type\":\"uint8\"}],\"name\":\"MaxMultiItemsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"consts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMultiItems\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"multiGrantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"multiRevokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"requireHasRole\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"requireHasRole\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newMaxMultiItems\",\"type\":\"uint8\"}],\"name\":\"setMaxMultiItems\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"adminRole\",\"type\":\"bytes32\"}],\"name\":\"setRoleAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"RolesManager","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000032","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}