{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n/*   __    __\r\n    /  |  /  |\r\n    $$ |  $$ |\r\n    $$ |__$$ |\r\n    $$    $$ |     Just Hodl\r\n    $$$$$$$$ |     $JH\r\n    $$ |  $$ |\r\n    $$ |  $$ |\r\n    $$ /  $$ /\r\n\r\n    The Token For The Hodlers.\r\n\r\n    More informations at https://justhodl.finance\r\n*/\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// pragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/JustHodlBase.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\ncontract JustHodlBase is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    uint256 internal _totalHodlSinceLastBuy = 0;\r\n    uint256 internal _totalHodlersCount = 0;\r\n    uint256 internal _bonusSupply = 0;\r\n    uint256 internal _holdersSupply = 0;\r\n\r\n    mapping (address => uint256) internal _hodlerHodlTime;\r\n\r\n    mapping (address => uint256) internal _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    constructor (string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function bonusSupply() public view returns (uint256) {\r\n        return _bonusSupply;\r\n    }\r\n\r\n    function holdersSupply() public view returns (uint256) {\r\n        return _holdersSupply;\r\n    }\r\n\r\n    function totalHodlSinceLastBuy() public view returns (uint256) {\r\n        return _totalHodlSinceLastBuy;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        uint256 balance = _balances[account];\r\n        if (balance > 0 && hodlMinimumAchived(account)) {\r\n            return balance + _getHodlBonus(account, balance);\r\n        } else {\r\n            return balance;\r\n        }\r\n    }\r\n\r\n    function pureBalanceOf(address _address) public view returns (uint256) {\r\n        return _balances[_address];\r\n    }\r\n\r\n    function pureBonusOf(address _address) public view returns (uint256) {\r\n        return balanceOf(_address).sub(_balances[_address]);\r\n    }\r\n\r\n    function hodlTimeOf(address _address) public view returns (uint256) {\r\n        return _hodlerHodlTime[_address];\r\n    }\r\n\r\n    function hodlMinimumAchived(address _address) public view returns (bool) {\r\n        uint256 hodlTime = _hodlerHodlTime[_address];\r\n        return hodlTime > 0 && (now - 7 days) > hodlTime;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"JustHodlBase: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"JustHodlBase: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"JustHodlBase: transfer from the zero address\");\r\n        require(recipient != address(0), \"JustHodlBase: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 finalSenderAmount = amount;\r\n        uint256 pureBalance = _balances[sender];\r\n        uint256 totalBalance = balanceOf(sender);\r\n        if (amount > pureBalance && amount <= totalBalance) {\r\n            finalSenderAmount = pureBalance;\r\n        }\r\n\r\n        _balances[sender] = _balances[sender].sub(finalSenderAmount, \"JustHodlBase: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"JustHodlBase: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _getMinHodlDiff() internal view returns (uint256) {\r\n        return (now - 7 days);\r\n    }\r\n\r\n    function _getHoldDiff(address _address, uint256 _minHodlDiff) internal view returns (uint256) {\r\n        return _minHodlDiff - _hodlerHodlTime[_address];\r\n    }\r\n\r\n    function _getHodlBonus(address _address, uint256 _balance) internal view returns (uint256) {\r\n        uint256 minHodlDiff = _getMinHodlDiff();\r\n        uint256 hodlDiff = _getHoldDiff(_address, minHodlDiff);\r\n        uint256 totalHodlDiff = minHodlDiff.mul(_totalHodlersCount) - _totalHodlSinceLastBuy;\r\n        return _bonusSupply.mul(((_balance*10**18).div(_holdersSupply).add((hodlDiff*10**18).div(totalHodlDiff))).div(2)).div(10**18);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"JustHodlBase: approve from the zero address\");\r\n        require(spender != address(0), \"JustHodlBase: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n// File: contracts/JustHodl.sol\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\ncontract JustHodl is JustHodlBase {\r\n    address private owner;\r\n    uint256 private penaltyRatio = 10;\r\n    uint256 private maxSupply = 2000 * (10 ** 18);\r\n\r\n    struct Addr {\r\n        address _address;\r\n        bool exists;\r\n    }\r\n\r\n    mapping (address => Addr) private senderExceptions;\r\n    mapping (address => Addr) private recipientExceptions;\r\n    mapping (address => mapping (address => Addr)) private whitelistedSenders;\r\n\r\n    modifier _onlyOwner() {\r\n        require(msg.sender == owner, \"JustHodl: only owner can perform this action\");\r\n        _;\r\n    }\r\n\r\n    constructor() public payable JustHodlBase(\"JustHodl\", \"JH\") {\r\n        uint256 restTokens = maxSupply;\r\n        uint256 time = now;\r\n        owner = msg.sender;\r\n        _mint(0x04689288b3d01d37a8fe85688042238c1Cd9e5FA, 6.21171493927601 * (10**18));\r\n        _totalHodlersCount++;\r\n        _hodlerHodlTime[0x04689288b3d01d37a8fe85688042238c1Cd9e5FA] = time;\r\n        restTokens -= 6.21171493927601 * (10**18);\r\n        _mint(0x048AAEA5D07a21196e6Df02E13cCDB23218f65Ae, 1.96477428231032 * (10**18));\r\n        _totalHodlersCount++;\r\n        _hodlerHodlTime[0x048AAEA5D07a21196e6Df02E13cCDB23218f65Ae] = time;\r\n        restTokens -= 1.96477428231032 * (10**18);\r\n        _mint(0x074abaaff265fD872F438D37d22d31bF1D93fdC8, 0.000000000000015438 * (10**18));\r\n        _totalHodlersCount++;\r\n        _hodlerHodlTime[0x074abaaff265fD872F438D37d22d31bF1D93fdC8] = time;\r\n        restTokens -= 0.000000000000015438 * (10**18);\r\n        _mint(0x15151Ac99BBa4eE669199EfbDCD0d3af6d70fCb6, 2.45174491323611 * (10**18));\r\n        _totalHodlersCount++;\r\n        _hodlerHodlTime[0x15151Ac99BBa4eE669199EfbDCD0d3af6d70fCb6] = time;\r\n        restTokens -= 2.45174491323611 * (10**18);\r\n        _mint(0x151c67BeCfd20664a8bfE016569eBCA04F71342E, 2.73602590645353 * (10**18));\r\n        _totalHodlersCount++;\r\n        _hodlerHodlTime[0x151c67BeCfd20664a8bfE016569eBCA04F71342E] = time;\r\n        restTokens -= 2.73602590645353 * (10**18);\r\n        _mint(0x17e00383A843A9922bCA3B280C0ADE9f8BA48449, 3.94812 * (10**18));\r\n        _totalHodlersCount++;\r\n        _hodlerHodlTime[0x17e00383A843A9922bCA3B280C0ADE9f8BA48449] = time;\r\n        restTokens -= 3.94812 * (10**18);\r\n        _mint(0x1c8ad03a5DE826D4E4bCb842E3604e1e2F3e8359, 23.9179371378008 * (10**18));\r\n        _totalHodlersCount++;\r\n        _hodlerHodlTime[0x1c8ad03a5DE826D4E4bCb842E3604e1e2F3e8359] = time;\r\n        restTokens -= 23.9179371378008 * (10**18);\r\n        _mint(0x1DF63e28C9ede182D6dfb6Bbc8C48D6fa537cCeF, 1.10783440633302 * (10**18));\r\n        _totalHodlersCount++;\r\n        _hodlerHodlTime[0x1DF63e28C9ede182D6dfb6Bbc8C48D6fa537cCeF] = time;\r\n        restTokens -= 1.10783440633302 * (10**18);\r\n        _mint(0x1F2FACAfF2A95027398F946D6868a7dBA5a97667, 91.3750565166852 * (10**18));\r\n        _totalHodlersCount++;\r\n        _hodlerHodlTime[0x1F2FACAfF2A95027398F946D6868a7dBA5a97667] = time;\r\n        restTokens -= 91.3750565166852 * (10**18);\r\n        _mint(0x205B7B1DAee38C4744C6F0b782E27BcA286c23db, 0.227673758895894 * (10**18));\r\n        _totalHodlersCount++;\r\n        _hodlerHodlTime[0x205B7B1DAee38C4744C6F0b782E27BcA286c23db] = time;\r\n        restTokens -= 0.227673758895894 * (10**18);\r\n        _mint(0x206971261B391763458134212FeEab2360874676, 1.77998731135435 * (10**18));\r\n        _totalHodlersCount++;\r\n        _hodlerHodlTime[0x206971261B391763458134212FeEab2360874676] = time;\r\n        restTokens -= 1.77998731135435 * (10**18);\r\n        _mint(0x25F0020A60aE7a375C0970750F5F85C6680bF9Bf, 10.3323681270537 * (10**18));\r\n        _totalHodlersCount++;\r\n        _hodlerHodlTime[0x25F0020A60aE7a375C0970750F5F85C6680bF9Bf] = time;\r\n        restTokens -= 10.3323681270537 * (10**18);\r\n        _mint(0x2759321Df4C0f0475c41BBf9d17891bd42E32C3c, 26.62505749454025 * (10**18)); // 0.5x\r\n        _totalHodlersCount++;\r\n        _hodlerHodlTime[0x2759321Df4C0f0475c41BBf9d17891bd42E32C3c] = time;\r\n        restTokens -= 26.62505749454025 * (10**18);\r\n        _mint(0x2b6336412636616e9158252999432e1D6938F89F, 3.14908742648611 * (10**18));\r\n        _totalHodlersCount++;\r\n        _hodlerHodlTime[0x2b6336412636616e9158252999432e1D6938F89F] = time;\r\n        restTokens -= 3.14908742648611 * (10**18);\r\n        _mint(0x34F63cF9E5347D6B00403907ED65eF148177668B, 3.99 * (10**18));\r\n        _totalHodlersCount++;\r\n        _hodlerHodlTime[0x34F63cF9E5347D6B00403907ED65eF148177668B] = time;\r\n        restTokens -= 3.99 * (10**18);\r\n        _mint(0x3BAAaffbB4eDe1fFA7b512bCEA490cedA2dB0EE6, 1 * (10**18));\r\n        _totalHodlersCount++;\r\n        _hodlerHodlTime[0x3BAAaffbB4eDe1fFA7b512bCEA490cedA2dB0EE6] = time;\r\n        restTokens -= 1 * (10**18);\r\n        _mint(0x3C9b75bfa82DDbb4613A0EAe58d636260436273A, 0.937153789480753 * (10**18));\r\n        _totalHodlersCount++;\r\n        _hodlerHodlTime[0x3C9b75bfa82DDbb4613A0EAe58d636260436273A] = time;\r\n        restTokens -= 0.937153789480753 * (10**18);\r\n        _mint(0x3F3FD86382f4d69E1C4e4CF5296B82B3d90FD693, 25.08251279989605 * (10**18)); // 0.5x\r\n        _totalHodlersCount++;\r\n        _hodlerHodlTime[0x3F3FD86382f4d69E1C4e4CF5296B82B3d90FD693] = time;\r\n        restTokens -= 25.08251279989605 * (10**18);\r\n        _mint(0x424dddc996c1dF3D3e9D3D9D89aa32eA5FaDb51f, 2.69635513967925 * (10**18));\r\n        _totalHodlersCount++;\r\n        _hodlerHodlTime[0x424dddc996c1dF3D3e9D3D9D89aa32eA5FaDb51f] = time;\r\n        restTokens -= 2.69635513967925 * (10**18);\r\n        _mint(0x449A7E1C10D2a0F68243FE104f9330fE16FeFe1A, 85.4291707701004 * (10**18));\r\n        _totalHodlersCount++;\r\n        _hodlerHodlTime[0x449A7E1C10D2a0F68243FE104f9330fE16FeFe1A] = time;\r\n        restTokens -= 85.4291707701004 * (10**18);\r\n        _mint(0x5139E12886d06C57F20A345c583AD7f3B67D3A5C, 0.672097642975642 * (10**18));\r\n        _totalHodlersCount++;\r\n        _hodlerHodlTime[0x5139E12886d06C57F20A345c583AD7f3B67D3A5C] = time;\r\n        restTokens -= 0.672097642975642 * (10**18);\r\n        _mint(0x52217443E3fBed2DdF2364F8E174deC88a72b3a6, 10.1 * (10**18));\r\n        _totalHodlersCount++;\r\n        _hodlerHodlTime[0x52217443E3fBed2DdF2364F8E174deC88a72b3a6] = time;\r\n        restTokens -= 10.1 * (10**18);\r\n        _mint(0x553C0A82a14F2fb77437917e87643A76FbEd8cf4, 1.2475 * (10**18));\r\n        _totalHodlersCount++;\r\n        _hodlerHodlTime[0x553C0A82a14F2fb77437917e87643A76FbEd8cf4] = time;\r\n        restTokens -= 1.2475 * (10**18);\r\n        _mint(0x56E2356c0754Fae16ac4AEB96D3C843bEc6aff67, 3.67995243382485 * (10**18));\r\n        _totalHodlersCount++;\r\n        _hodlerHodlTime[0x56E2356c0754Fae16ac4AEB96D3C843bEc6aff67] = time;\r\n        restTokens -= 3.67995243382485 * (10**18);\r\n        _mint(0x59d7b684bced2a28FedebFc09ce3A795F49a4620, 55.7747548243736 * (10**18));\r\n        _totalHodlersCount++;\r\n        _hodlerHodlTime[0x59d7b684bced2a28FedebFc09ce3A795F49a4620] = time;\r\n        restTokens -= 55.7747548243736 * (10**18);\r\n        _mint(0x5d1EE9f2A17ACcf72532Dd17ad36F0B8909a38CA, 5.13429897024556 * (10**18));\r\n        _totalHodlersCount++;\r\n        _hodlerHodlTime[0x5d1EE9f2A17ACcf72532Dd17ad36F0B8909a38CA] = time;\r\n        restTokens -= 5.13429897024556 * (10**18);\r\n        _mint(0x7527f8E3a272699f91065b13EF51292034437C7d, 1 * (10**18));\r\n        _totalHodlersCount++;\r\n        _hodlerHodlTime[0x7527f8E3a272699f91065b13EF51292034437C7d] = time;\r\n        restTokens -= 1 * (10**18);\r\n        _mint(0x78024ea589A845Fb72f285371901614BAA04C168, 2.23804228559044 * (10**18));\r\n        _totalHodlersCount++;\r\n        _hodlerHodlTime[0x78024ea589A845Fb72f285371901614BAA04C168] = time;\r\n        restTokens -= 2.23804228559044 * (10**18);\r\n        _mint(0x7944449Ed57CE81A6cF7fF557f3E917B7A468086, 2.37310923079961 * (10**18));\r\n        _totalHodlersCount++;\r\n        _hodlerHodlTime[0x7944449Ed57CE81A6cF7fF557f3E917B7A468086] = time;\r\n        restTokens -= 2.37310923079961 * (10**18);\r\n        _mint(0x830B69752e151Da5d31fb355fc6f636c3bf5e5f8, 2.43915888656735 * (10**18));\r\n        _totalHodlersCount++;\r\n        _hodlerHodlTime[0x830B69752e151Da5d31fb355fc6f636c3bf5e5f8] = time;\r\n        restTokens -= 2.43915888656735 * (10**18);\r\n        _mint(0x8A449393Ce741a3CeaBd9373008be53dB12Bf246, 4.29474339884683 * (10**18));\r\n        _totalHodlersCount++;\r\n        _hodlerHodlTime[0x8A449393Ce741a3CeaBd9373008be53dB12Bf246] = time;\r\n        restTokens -= 4.29474339884683 * (10**18);\r\n        _mint(0x8E09fC3D36B0595086538A92BEfE13D09C072661, 2.27418125998612 * (10**18));\r\n        _totalHodlersCount++;\r\n        _hodlerHodlTime[0x8E09fC3D36B0595086538A92BEfE13D09C072661] = time;\r\n        restTokens -= 2.27418125998612 * (10**18);\r\n        _mint(0x9016563F047fde2a42bf68D9D3670A91E746F1Bc, 1.57237850180211 * (10**18));\r\n        _totalHodlersCount++;\r\n        _hodlerHodlTime[0x9016563F047fde2a42bf68D9D3670A91E746F1Bc] = time;\r\n        restTokens -= 1.57237850180211 * (10**18);\r\n        _mint(0x9317d29f94f9f399ED27048a14bBaE81D7fd73fB, 7.95 * (10**18));\r\n        _totalHodlersCount++;\r\n        _hodlerHodlTime[0x9317d29f94f9f399ED27048a14bBaE81D7fd73fB] = time;\r\n        restTokens -= 7.95 * (10**18);\r\n        _mint(0x9853c360CcCaf3968f8DD46d50c133e61Ddb67b1, 125.215644991617 * (10**18));\r\n        _totalHodlersCount++;\r\n        _hodlerHodlTime[0x9853c360CcCaf3968f8DD46d50c133e61Ddb67b1] = time;\r\n        restTokens -= 125.215644991617 * (10**18);\r\n        _mint(0x9bb354ddf9e43648A06FB69420425FF6C059D231, 68.9075461951348 * (10**18));\r\n        _totalHodlersCount++;\r\n        _hodlerHodlTime[0x9bb354ddf9e43648A06FB69420425FF6C059D231] = time;\r\n        restTokens -= 68.9075461951348 * (10**18);\r\n        _mint(0x9d2c491a573114d5fBb7aaD5AFC29637F33F31a4, 3.98 * (10**18));\r\n        _totalHodlersCount++;\r\n        _hodlerHodlTime[0x9d2c491a573114d5fBb7aaD5AFC29637F33F31a4] = time;\r\n        restTokens -= 3.98 * (10**18);\r\n        _mint(0x9df06e44585d1A5B9869a5E5630709e1C74B3b3A, 0.225499390566651 * (10**18));\r\n        _totalHodlersCount++;\r\n        _hodlerHodlTime[0x9df06e44585d1A5B9869a5E5630709e1C74B3b3A] = time;\r\n        restTokens -= 0.225499390566651 * (10**18);\r\n        _mint(0xA3544D5a648d8B4649455C836743b4aB49289bc1, 0.239580725432249 * (10**18));\r\n        _totalHodlersCount++;\r\n        _hodlerHodlTime[0xA3544D5a648d8B4649455C836743b4aB49289bc1] = time;\r\n        restTokens -= 0.239580725432249 * (10**18);\r\n        _mint(0xa574469c959803481f25f825b41f1137BAfcF095, 5.55941808192726 * (10**18));\r\n        _totalHodlersCount++;\r\n        _hodlerHodlTime[0xa574469c959803481f25f825b41f1137BAfcF095] = time;\r\n        restTokens -= 5.55941808192726 * (10**18);\r\n        _mint(0xa5AAd2CD204e43dC16e4F93c4A20F4A3036124CD, 16.6411113838537 * (10**18));\r\n        _totalHodlersCount++;\r\n        _hodlerHodlTime[0xa5AAd2CD204e43dC16e4F93c4A20F4A3036124CD] = time;\r\n        restTokens -= 16.6411113838537 * (10**18);\r\n        _mint(0xAA3d85aD9D128DFECb55424085754F6dFa643eb1, 1.01188 * (10**18));\r\n        _totalHodlersCount++;\r\n        _hodlerHodlTime[0xAA3d85aD9D128DFECb55424085754F6dFa643eb1] = time;\r\n        restTokens -= 1.01188 * (10**18);\r\n        _mint(0xB086755a5B0b10BD53956936588555f586f5f49d, 74.9589937983907 * (10**18));\r\n        _totalHodlersCount++;\r\n        _hodlerHodlTime[0xB086755a5B0b10BD53956936588555f586f5f49d] = time;\r\n        restTokens -= 74.9589937983907 * (10**18);\r\n        _mint(0xB1Fe569478506aeFEC2bcc84321e8d2053FE3fBB, 9.55813705750499 * (10**18));\r\n        _totalHodlersCount++;\r\n        _hodlerHodlTime[0xB1Fe569478506aeFEC2bcc84321e8d2053FE3fBB] = time;\r\n        restTokens -= 9.55813705750499 * (10**18);\r\n        _mint(0xc07378E46f4a9D7de862f3d8a51182B48e5166b4, 3.85129183608496 * (10**18));\r\n        _totalHodlersCount++;\r\n        _hodlerHodlTime[0xc07378E46f4a9D7de862f3d8a51182B48e5166b4] = time;\r\n        restTokens -= 3.85129183608496 * (10**18);\r\n        _mint(0xC56c068C41149fAb578e6e9321517a6c43BE5920, 0.024279185132858 * (10**18));\r\n        _totalHodlersCount++;\r\n        _hodlerHodlTime[0xC56c068C41149fAb578e6e9321517a6c43BE5920] = time;\r\n        restTokens -= 0.024279185132858 * (10**18);\r\n        _mint(0xC7789B84995E56ef8c1902279695b7b72F6844C1, 2 * (10**18));\r\n        _totalHodlersCount++;\r\n        _hodlerHodlTime[0xC7789B84995E56ef8c1902279695b7b72F6844C1] = time;\r\n        restTokens -= 2 * (10**18);\r\n        _mint(0xe18bb5aF1c31177898Fe8EBb42E7C1A8F5d092D7, 3.53029091679964 * (10**18));\r\n        _totalHodlersCount++;\r\n        _hodlerHodlTime[0xe18bb5aF1c31177898Fe8EBb42E7C1A8F5d092D7] = time;\r\n        restTokens -= 3.53029091679964 * (10**18);\r\n        _mint(0xE20F75642b97c11Af651A81AfCBBc6D7B4E32981, 0.695620537288762 * (10**18));\r\n        _totalHodlersCount++;\r\n        _hodlerHodlTime[0xE20F75642b97c11Af651A81AfCBBc6D7B4E32981] = time;\r\n        restTokens -= 0.695620537288762 * (10**18);\r\n        _mint(0xe7bA0Da73b9d15f5D628BC99A2C014d839691762, 25.6815017450919 * (10**18));\r\n        _totalHodlersCount++;\r\n        _hodlerHodlTime[0xe7bA0Da73b9d15f5D628BC99A2C014d839691762] = time;\r\n        restTokens -= 25.6815017450919 * (10**18);\r\n        _mint(0xE950C23891E41E5bb3fe4a45DdE62752a4BBf9Fb, 0.0351835809405609 * (10**18));\r\n        _totalHodlersCount++;\r\n        _hodlerHodlTime[0xE950C23891E41E5bb3fe4a45DdE62752a4BBf9Fb] = time;\r\n        restTokens -= 0.0351835809405609 * (10**18);\r\n        _mint(0xEc1625f0Be12B31d8edfdd165f7750eE4630a475, 3.66244411786722 * (10**18));\r\n        _totalHodlersCount++;\r\n        _hodlerHodlTime[0xEc1625f0Be12B31d8edfdd165f7750eE4630a475] = time;\r\n        restTokens -= 3.66244411786722 * (10**18);\r\n        _mint(0xEe9EAFDdCDfbFFAb6B9E989B71a13684090cdfaa, 21.0815596983417 * (10**18));\r\n        _totalHodlersCount++;\r\n        _hodlerHodlTime[0xEe9EAFDdCDfbFFAb6B9E989B71a13684090cdfaa] = time;\r\n        restTokens -= 21.0815596983417 * (10**18);\r\n        _mint(0xf82fFEE7eda1DD212Dd0d867E57aa174dc207D7e, 3.19554497407819 * (10**18));\r\n        _totalHodlersCount++;\r\n        _hodlerHodlTime[0xf82fFEE7eda1DD212Dd0d867E57aa174dc207D7e] = time;\r\n        restTokens -= 3.19554497407819 * (10**18);\r\n        _mint(0xF872Ea3e3BC2d9EFcb660dE497A6F1c50E4ad25D, 25.6350510199272 * (10**18));\r\n        _totalHodlersCount++;\r\n        _hodlerHodlTime[0xF872Ea3e3BC2d9EFcb660dE497A6F1c50E4ad25D] = time;\r\n        restTokens -= 25.6350510199272 * (10**18);\r\n        _mint(0xFB04D99d7024bef7047cF6a16c4e33F48e1C4981, 1.79070215317426 * (10**18));\r\n        _totalHodlersCount++;\r\n        _hodlerHodlTime[0xFB04D99d7024bef7047cF6a16c4e33F48e1C4981] = time;\r\n        restTokens -= 1.79070215317426 * (10**18);\r\n        _mint(0xFC04Ec649be75e2b9bFe15d49e385F65277103b4, 2.1958520537044 * (10**18));\r\n        _totalHodlersCount++;\r\n        _hodlerHodlTime[0xFC04Ec649be75e2b9bFe15d49e385F65277103b4] = time;\r\n        restTokens -= 2.1958520537044 * (10**18);\r\n        _mint(0xFfe10BE9b63A4005DD1e631eE6fca3f6D6024269, 3.52247792997366 * (10**18));\r\n        _totalHodlersCount++;\r\n        _hodlerHodlTime[0xFfe10BE9b63A4005DD1e631eE6fca3f6D6024269] = time;\r\n        restTokens -= 3.52247792997366 * (10**18);\r\n\r\n        _holdersSupply = maxSupply - restTokens;\r\n        _mint(msg.sender, restTokens);\r\n    }\r\n\r\n    function getOwner() public view returns (address) {\r\n        return owner;\r\n    }\r\n\r\n    function setOwner(address _address) public _onlyOwner {\r\n        owner = _address;\r\n    }\r\n\r\n    function isSenderException(address _address) public view returns (bool) {\r\n        return senderExceptions[_address].exists;\r\n    }\r\n\r\n    function addSenderException(address _address) public _onlyOwner returns (bool) {\r\n        require(!isSenderException(_address), \"JustHodl: address is already present in the sender exceptions list\");\r\n        senderExceptions[_address] = Addr(_address, true);\r\n        return true;\r\n    }\r\n\r\n    function removeSenderException(address _address) public _onlyOwner returns (bool) {\r\n        require(isSenderException(_address), \"JustHodl: address is not present in the sender exceptions list\");\r\n        delete senderExceptions[_address];\r\n        return true;\r\n    }\r\n\r\n    function isRecipientException(address _address) public view returns (bool) {\r\n        return recipientExceptions[_address].exists;\r\n    }\r\n\r\n    function addRecipientException(address _address) public _onlyOwner returns (bool) {\r\n        require(!isRecipientException(_address), \"JustHodl: address is already present in the recipient exceptions list\");\r\n        recipientExceptions[_address] = Addr(_address, true);\r\n        return true;\r\n    }\r\n\r\n    function removeRecipientException(address _address) public _onlyOwner returns (bool) {\r\n        require(isRecipientException(_address), \"JustHodl: address is not present in the recipient exceptions list\");\r\n        delete recipientExceptions[_address];\r\n        return true;\r\n    }\r\n\r\n    function isWhitelistedSender(address _address) public view returns (bool) {\r\n        return whitelistedSenders[msg.sender][_address].exists;\r\n    }\r\n\r\n    function addWhitelistedSender(address _address) public returns (bool) {\r\n        require(!isWhitelistedSender(_address), \"JustHodl: address is already present in the whitelist\");\r\n        whitelistedSenders[msg.sender][_address] = Addr(_address, true);\r\n        return true;\r\n    }\r\n\r\n    function removeWhitelistedSender(address _address) public returns (bool) {\r\n        require(isWhitelistedSender(_address), \"JustHodl: address is not present in the whitelist\");\r\n        delete whitelistedSenders[msg.sender][_address];\r\n        return true;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public override returns (bool) {\r\n        bool isFromHodler = _isValidHodler(msg.sender);\r\n        bool isToHodler = _isValidHodler(_to);\r\n        if (_allowedToSend(msg.sender, _to)) {\r\n            uint256 penalty = 0;\r\n            uint256 finalValue = _value;\r\n            uint256 pureFromBalanceBeforeThx = pureBalanceOf(msg.sender);\r\n            uint256 pureToBalanceBeforeThx = pureBalanceOf(_to);\r\n            if (isFromHodler && !hodlMinimumAchived(msg.sender)) {\r\n                penalty = _value.mul(penaltyRatio).div(100);\r\n                finalValue = _value.sub(penalty);\r\n            }\r\n            if (super.transfer(_to, finalValue)) {\r\n                if (penalty > 0) {\r\n                    _balances[msg.sender] = _balances[msg.sender].sub(penalty);\r\n                }\r\n                _updateTimer(msg.sender, _to, isFromHodler, isToHodler);\r\n                _updateHodlersCount(msg.sender, isFromHodler, isToHodler, pureToBalanceBeforeThx);\r\n                _updateBonusSupply(_value, penalty, pureFromBalanceBeforeThx);\r\n                _updateHoldersSupply(isFromHodler, isToHodler, finalValue, penalty, pureFromBalanceBeforeThx);\r\n                _updateAllowedSender(msg.sender, _to);\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public override returns (bool) {\r\n        bool isFromHodler = _isValidHodler(_from);\r\n        bool isToHodler = _isValidHodler(_to);\r\n        if (_allowedToSend(_from, _to)) {\r\n            uint256 penalty = 0;\r\n            uint256 finalValue = _value;\r\n            uint256 pureFromBalanceBeforeThx = pureBalanceOf(_from);\r\n            uint256 pureToBalanceBeforeThx = pureBalanceOf(_to);\r\n            if (isFromHodler && !hodlMinimumAchived(_from)) {\r\n                penalty = _value.mul(penaltyRatio).div(100);\r\n                finalValue = _value.sub(penalty);\r\n            }\r\n            if (super.transferFrom(_from, _to, finalValue)) {\r\n                if (penalty > 0) {\r\n                    _balances[_from] = _balances[_from].sub(penalty);\r\n                }\r\n                _updateTimer(_from, _to, isFromHodler, isToHodler);\r\n                _updateHodlersCount(_from, isFromHodler, isToHodler, pureToBalanceBeforeThx);\r\n                _updateBonusSupply(_value, penalty, pureFromBalanceBeforeThx);\r\n                _updateHoldersSupply(isFromHodler, isToHodler, finalValue, penalty, pureFromBalanceBeforeThx);\r\n                _updateAllowedSender(_from, _to);\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function _allowedToSend(address _from, address _to) private view returns (bool) {\r\n        require (\r\n            _from == owner ||\r\n            _isContract(_to) ||\r\n            isSenderException(_from) ||\r\n            isRecipientException(_to) ||\r\n            whitelistedSenders[_to][_from].exists,\r\n            \"JustHodl: you are not allowed to send tokens to that address\"\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function _updateAllowedSender(address _from, address _to) private {\r\n        if (!whitelistedSenders[_from][_to].exists) {\r\n            whitelistedSenders[_from][_to] = Addr(_to, true);\r\n        }\r\n    }\r\n\r\n    function _updateTimer(address _from, address _to, bool _isFromHodler, bool _isToHodler) private {\r\n        if (_isFromHodler && _balances[_from] == 0) {\r\n            _totalHodlSinceLastBuy = _totalHodlSinceLastBuy.sub(_hodlerHodlTime[_from]);\r\n            _hodlerHodlTime[_from] = 0;\r\n        }\r\n        if (_isToHodler) {\r\n            uint256 oldLastBuy = _hodlerHodlTime[_to];\r\n            uint256 newLastBuy = now;\r\n            _totalHodlSinceLastBuy = _totalHodlSinceLastBuy.add(newLastBuy).sub(oldLastBuy);\r\n            _hodlerHodlTime[_to] = newLastBuy;\r\n        }\r\n    }\r\n\r\n    function _updateHodlersCount(address _from, bool _isFromHodler, bool _isToHodler, uint256 _pureToBalanceBeforeThx) private {\r\n        if (_isFromHodler && _balances[_from] == 0) {\r\n            _totalHodlersCount--;\r\n        }\r\n        if (_isToHodler && _pureToBalanceBeforeThx == 0) {\r\n            _totalHodlersCount++;\r\n        }\r\n    }\r\n\r\n    function _updateBonusSupply(uint256 _value, uint256 _penalty, uint256 _pureFromBalanceBeforeThx) private {\r\n        if (_value > _pureFromBalanceBeforeThx) {\r\n            uint256 spentBonus = _value.sub(_pureFromBalanceBeforeThx);\r\n            _bonusSupply = _bonusSupply.sub(spentBonus).add(_penalty);\r\n        } else {\r\n            _bonusSupply = _bonusSupply.add(_penalty);\r\n        }\r\n    }\r\n\r\n    function _updateHoldersSupply(bool _isFromHodler, bool _isToHodler, uint256 _value, uint256 _penalty, uint256 _pureFromBalanceBeforeThx) private {\r\n        uint256 finalValue = _holdersSupply;\r\n        uint256 subValue = _value;\r\n        if (_value > _pureFromBalanceBeforeThx) {\r\n            subValue = _pureFromBalanceBeforeThx;\r\n        }\r\n        if (_isFromHodler) {\r\n            finalValue = finalValue.sub(subValue).sub(_penalty);\r\n        }\r\n        if (_isToHodler) {\r\n            finalValue = finalValue.add(_value);\r\n        }\r\n        _holdersSupply = finalValue;\r\n    }\r\n\r\n    function _isValidHodler(address _address) private view returns (bool) {\r\n        return !_isContract(_address) && _address != owner;\r\n    }\r\n\r\n    function _isContract(address _address) private view returns (bool) {\r\n        uint256 size;\r\n        assembly { size := extcodesize(_address) }\r\n        return size > 0;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addRecipientException\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addSenderException\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addWhitelistedSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"hodlMinimumAchived\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"hodlTimeOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holdersSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isRecipientException\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isSenderException\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isWhitelistedSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"pureBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"pureBonusOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeRecipientException\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeSenderException\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeWhitelistedSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalHodlSinceLastBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"JustHodl","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7a30ca3ffe5342532cbd16ec1a3bb372bb68962ff9f59da89deb721c66b26b67"}]}