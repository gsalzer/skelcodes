{"status":"1","message":"OK","result":[{"SourceCode":"{\"YIELD Staker.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nlibrary SafeMath {\\r\\n   \\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n        return c;}\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");}\\r\\n\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n        return c;}\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (a == 0) {return 0;}\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n        return c;}\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");}\\r\\n\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        return c;}\\r\\n\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");}\\r\\n\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;}\\r\\n}\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n    function mint(address account, uint256 amount) external;\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\\r\\ninterface Uniswap{\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);\\r\\n    function addLiquidityETH(address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n    function WETH() external pure returns (address);\\r\\n}\\r\\n\\r\\ninterface Pool{\\r\\n    function primary() external view returns (address);\\r\\n}\\r\\n\\r\\ncontract Poolable{\\r\\n    \\r\\n    address payable internal constant _POOLADDRESS = 0xFD91f75C65D135134E5984F24Cb58136c34E06B0;\\r\\n \\r\\n    function primary() private view returns (address) {\\r\\n        return Pool(_POOLADDRESS).primary();\\r\\n    }\\r\\n    \\r\\n    modifier onlyPrimary() {\\r\\n        require(msg.sender == primary(), \\\"Caller is not primary\\\");\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract Staker is Poolable{\\r\\n    \\r\\n    using SafeMath for uint256;\\r\\n    \\r\\n    uint constant internal DECIMAL = 10**18;\\r\\n    uint constant public INF = 33136721748;\\r\\n\\r\\n    uint private _rewardValue = 10**18;\\r\\n    \\r\\n    mapping (address =\\u003e uint256) public  timePooled;\\r\\n    mapping (address =\\u003e uint256) private internalTime;\\r\\n    mapping (address =\\u003e uint256) private LPTokenBalance;\\r\\n    mapping (address =\\u003e uint256) private rewards;\\r\\n    mapping (address =\\u003e uint256) private referralEarned;\\r\\n\\r\\n    address public YIELDAddress;\\r\\n    \\r\\n    address constant public UNIROUTER         = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\r\\n    address constant public FACTORY           = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\\r\\n    address          public WETHAddress       = Uniswap(UNIROUTER).WETH();\\r\\n    \\r\\n    bool private _unchangeable = false;\\r\\n    bool private _tokenAddressGiven = false;\\r\\n    \\r\\n    receive() external payable {\\r\\n        \\r\\n       if(msg.sender != UNIROUTER){\\r\\n           stake(msg.sender, address(0));\\r\\n       }\\r\\n    }\\r\\n    \\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\"); \\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n    \\r\\n    //If true, no changes can be made\\r\\n    function unchangeable() public view returns (bool){\\r\\n        return _unchangeable;\\r\\n    }\\r\\n    \\r\\n    function rewardValue() public view returns (uint){\\r\\n        return _rewardValue;\\r\\n    }\\r\\n    \\r\\n    \\r\\n    //THE ONLY ADMIN FUNCTIONS vvvv\\r\\n    //After this is called, no changes can be made\\r\\n    function makeUnchangeable() public{\\r\\n        _unchangeable = true;\\r\\n    }\\r\\n    \\r\\n    //Can only be called once to set token address\\r\\n    function setTokenAddress(address input) public{\\r\\n        require(!_tokenAddressGiven, \\\"Function was already called\\\");\\r\\n        _tokenAddressGiven = true;\\r\\n        YIELDAddress = input;\\r\\n    }\\r\\n    \\r\\n    //Set reward value that has high APY, can\\u0027t be called if makeUnchangeable() was called\\r\\n    function updateRewardValue(uint input) public {\\r\\n        require(!unchangeable(), \\\"makeUnchangeable() function was already called\\\");\\r\\n        _rewardValue = input;\\r\\n    }\\r\\n    //THE ONLY ADMIN FUNCTIONS ^^^^\\r\\n    \\r\\n  \\r\\n    function stake(address staker, address payable ref) public payable{\\r\\n        \\r\\n\\t\\tstaker = msg.sender;\\r\\n\\t\\t\\r\\n        if(ref != address(0)){\\r\\n            \\r\\n            referralEarned[ref] = referralEarned[ref] + ((address(this).balance/10)*DECIMAL)/price();\\r\\n        }\\r\\n    \\r\\n        sendValue(_POOLADDRESS, address(this).balance/2);\\r\\n        \\r\\n        address poolAddress = Uniswap(FACTORY).getPair(YIELDAddress, WETHAddress);\\r\\n        uint ethAmount = IERC20(WETHAddress).balanceOf(poolAddress); //Eth in uniswap\\r\\n        uint tokenAmount = IERC20(YIELDAddress).balanceOf(poolAddress); //token in uniswap\\r\\n        \\r\\n        uint toMint = (address(this).balance.mul(tokenAmount)).div(ethAmount);\\r\\n        IERC20(YIELDAddress).mint(address(this), toMint);\\r\\n        \\r\\n        uint poolTokenAmountBefore = IERC20(poolAddress).balanceOf(address(this));\\r\\n        \\r\\n        uint amountTokenDesired = IERC20(YIELDAddress).balanceOf(address(this));\\r\\n        IERC20(YIELDAddress).approve(UNIROUTER, amountTokenDesired ); //allow pool to get tokens\\r\\n        Uniswap(UNIROUTER).addLiquidityETH{ value: address(this).balance }(YIELDAddress, amountTokenDesired, 1, 1, address(this), INF);\\r\\n        \\r\\n        uint poolTokenAmountAfter = IERC20(poolAddress).balanceOf(address(this));\\r\\n        uint poolTokenGot = poolTokenAmountAfter.sub(poolTokenAmountBefore);\\r\\n        \\r\\n        rewards[staker] = rewards[staker].add(viewRecentRewardTokenAmount(staker));\\r\\n        timePooled[staker] = now;\\r\\n        internalTime[staker] = now;\\r\\n    \\r\\n        LPTokenBalance[staker] = LPTokenBalance[staker].add(poolTokenGot);\\r\\n    }\\r\\n\\r\\n    function withdrawLPTokens(uint amount) public {\\r\\n        require(timePooled[msg.sender] + 3 days \\u003c= now, \\\"It has not been 3 days since you staked yet\\\");\\r\\n        \\r\\n        rewards[msg.sender] = rewards[msg.sender].add(viewRecentRewardTokenAmount(msg.sender));\\r\\n        LPTokenBalance[msg.sender] = LPTokenBalance[msg.sender].sub(amount);\\r\\n        \\r\\n        address poolAddress = Uniswap(FACTORY).getPair(YIELDAddress, WETHAddress);\\r\\n        IERC20(poolAddress).transfer(msg.sender, amount);\\r\\n        \\r\\n        internalTime[msg.sender] = now;\\r\\n    }\\r\\n    \\r\\n    function withdrawRewardTokens(uint amount) public {\\r\\n        require(timePooled[msg.sender] + 3 days \\u003c= now, \\\"It has not been 3 days since you staked yet\\\");\\r\\n        \\r\\n        rewards[msg.sender] = rewards[msg.sender].add(viewRecentRewardTokenAmount(msg.sender));\\r\\n        internalTime[msg.sender] = now;\\r\\n        \\r\\n        uint removeAmount = ethtimeCalc(amount)/2;\\r\\n        rewards[msg.sender] = rewards[msg.sender].sub(removeAmount);\\r\\n       \\r\\n        IERC20(YIELDAddress).mint(msg.sender, amount);\\r\\n    }\\r\\n    \\r\\n    function withdrawReferralEarned(uint amount) public{\\r\\n        require(timePooled[msg.sender] != 0, \\\"You have to stake at least a little bit to withdraw referral rewards\\\");\\r\\n        require(timePooled[msg.sender] + 3 days \\u003c= now, \\\"It has not been 3 days since you staked yet\\\");\\r\\n        \\r\\n        referralEarned[msg.sender] = referralEarned[msg.sender].sub(amount);\\r\\n        IERC20(YIELDAddress).mint(msg.sender, amount);\\r\\n    }\\r\\n    \\r\\n    function viewRecentRewardTokenAmount(address who) internal view returns (uint){\\r\\n        return (viewPooledEthAmount(who).mul( now.sub(internalTime[who]) ));\\r\\n    }\\r\\n    \\r\\n    function viewRewardTokenAmount(address who) public view returns (uint){\\r\\n        return earnCalc( rewards[who].add(viewRecentRewardTokenAmount(who))*2 );\\r\\n    }\\r\\n    \\r\\n    function viewLPTokenAmount(address who) public view returns (uint){\\r\\n        return LPTokenBalance[who];\\r\\n    }\\r\\n    \\r\\n    function viewPooledEthAmount(address who) public view returns (uint){\\r\\n      \\r\\n        address poolAddress = Uniswap(FACTORY).getPair(YIELDAddress, WETHAddress);\\r\\n        uint ethAmount = IERC20(WETHAddress).balanceOf(poolAddress); //Eth in uniswap\\r\\n        \\r\\n        return (ethAmount.mul(viewLPTokenAmount(who))).div(IERC20(poolAddress).totalSupply());\\r\\n    }\\r\\n    \\r\\n    function viewPooledTokenAmount(address who) public view returns (uint){\\r\\n        \\r\\n        address poolAddress = Uniswap(FACTORY).getPair(YIELDAddress, WETHAddress);\\r\\n        uint tokenAmount = IERC20(YIELDAddress).balanceOf(poolAddress); //token in uniswap\\r\\n        \\r\\n        return (tokenAmount.mul(viewLPTokenAmount(who))).div(IERC20(poolAddress).totalSupply());\\r\\n    }\\r\\n    \\r\\n    function viewReferralEarned(address who) public view returns (uint){\\r\\n        return referralEarned[who];\\r\\n    }\\r\\n    \\r\\n    function price() public view returns (uint){\\r\\n        \\r\\n        address poolAddress = Uniswap(FACTORY).getPair(YIELDAddress, WETHAddress);\\r\\n        \\r\\n        uint ethAmount = IERC20(WETHAddress).balanceOf(poolAddress); //Eth in uniswap\\r\\n        uint tokenAmount = IERC20(YIELDAddress).balanceOf(poolAddress); //token in uniswap\\r\\n        \\r\\n        return (DECIMAL.mul(ethAmount)).div(tokenAmount);\\r\\n    }\\r\\n\\r\\n    function earnCalc(uint ethTime) public view returns(uint){\\r\\n        return ( rewardValue().mul(ethTime)  ) / ( 31557600 * DECIMAL );\\r\\n    }\\r\\n    \\r\\n    function ethtimeCalc(uint YIELD) internal view returns(uint){\\r\\n        return ( YIELD.mul(31557600 * DECIMAL) ).div( rewardValue() );\\r\\n    }\\r\\n}\"},\"YIELD Token.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nlibrary SafeMath {\\r\\n   \\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n        return c;}\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");}\\r\\n\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n        return c;}\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (a == 0) {return 0;}\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n        return c;}\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");}\\r\\n\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        return c;}\\r\\n\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");}\\r\\n\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;}\\r\\n}\\r\\n\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address payable) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes memory) {\\r\\n        this;\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\\r\\ncontract Mintable {\\r\\n    \\r\\n    address private constant _STAKERADDRESS = 0x1C8740e4E6d6f375287176F17c2e58bD2a2ECa24;\\r\\n    \\r\\n    modifier onlyStaker() {\\r\\n        require(msg.sender == _STAKERADDRESS, \\\"Caller is not Staker\\\");\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface Uniswap{\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);\\r\\n    function addLiquidityETH(address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n    function WETH() external pure returns (address);\\r\\n}\\r\\n\\r\\ncontract YIELD is Context, IERC20, Mintable {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    mapping (address =\\u003e uint256) private _balances;\\r\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowances;\\r\\n    uint256 private _totalSupply;\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n    uint8 private _decimals;\\r\\n\\r\\n    constructor () public {\\r\\n        _name = \\\"YIELD\\\";\\r\\n        _symbol = \\\"YIELD\\\";\\r\\n        _decimals = 18;\\r\\n    }\\r\\n\\r\\n    function name() public view returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() public view returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function decimals() public view returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) public view override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n \\r\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n        require(amount != 0, \\\"ERC20: transfer amount was 0\\\");\\r\\n        \\r\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        _balances[recipient] = _balances[recipient].add(amount);\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        _totalSupply = _totalSupply.add(amount);\\r\\n        _balances[account] = _balances[account].add(amount);\\r\\n        emit Transfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        _totalSupply = _totalSupply.sub(amount);\\r\\n        emit Transfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n    \\r\\n    function mint(address account, uint256 amount) public onlyStaker{\\r\\n        _mint(account, amount);\\r\\n    }\\r\\n    \\r\\n    bool createUniswapAlreadyCalled = false;\\r\\n    \\r\\n    function createUniswap() public payable{\\r\\n        require(!createUniswapAlreadyCalled);\\r\\n        createUniswapAlreadyCalled = true;\\r\\n        \\r\\n        require(address(this).balance \\u003e 0);\\r\\n        uint toMint = address(this).balance*5;\\r\\n        _mint(address(this), toMint);\\r\\n        \\r\\n        address UNIROUTER = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\r\\n        _allowances[address(this)][UNIROUTER] = toMint;\\r\\n        Uniswap(UNIROUTER).addLiquidityETH{ value: address(this).balance }(address(this), toMint, 1, 1, address(this), 33136721748);\\r\\n    }\\r\\n    \\r\\n    receive() external payable {\\r\\n        createUniswap();\\r\\n    }\\r\\n}\"}}","ABI":"[{\"inputs\":[],\"name\":\"FACTORY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INF\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNIROUTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETHAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"YIELDAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethTime\",\"type\":\"uint256\"}],\"name\":\"earnCalc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"makeUnchangeable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"input\",\"type\":\"address\"}],\"name\":\"setTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"timePooled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unchangeable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"input\",\"type\":\"uint256\"}],\"name\":\"updateRewardValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"viewLPTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"viewPooledEthAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"viewPooledTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"viewReferralEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"viewRewardTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawLPTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawReferralEarned\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawRewardTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Staker","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://79a0b840450479f5b61e974ea03cb801d1b1a8316a174650662e67cc3266cf6c"}]}