{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface TokenInterface {\r\n    function approve(address, uint256) external;\r\n    function transfer(address, uint) external;\r\n    function transferFrom(address, address, uint) external;\r\n    function deposit() external payable;\r\n    function withdraw(uint) external;\r\n    function balanceOf(address) external view returns (uint);\r\n    function decimals() external view returns (uint);\r\n}\r\n\r\ninterface AaveInterface {\r\n    function deposit(address _reserve, uint256 _amount, uint16 _referralCode) external payable;\r\n    function redeemUnderlying(\r\n        address _reserve,\r\n        address payable _user,\r\n        uint256 _amount,\r\n        uint256 _aTokenBalanceAfterRedeem\r\n    ) external;\r\n    function setUserUseReserveAsCollateral(address _reserve, bool _useAsCollateral) external;\r\n    function getUserReserveData(address _reserve, address _user) external view returns (\r\n        uint256 currentATokenBalance,\r\n        uint256 currentBorrowBalance,\r\n        uint256 principalBorrowBalance,\r\n        uint256 borrowRateMode,\r\n        uint256 borrowRate,\r\n        uint256 liquidityRate,\r\n        uint256 originationFee,\r\n        uint256 variableBorrowIndex,\r\n        uint256 lastUpdateTimestamp,\r\n        bool usageAsCollateralEnabled\r\n    );\r\n    function borrow(address _reserve, uint256 _amount, uint256 _interestRateMode, uint16 _referralCode) external;\r\n    function repay(address _reserve, uint256 _amount, address payable _onBehalfOf) external payable;\r\n}\r\n\r\ninterface AaveProviderInterface {\r\n    function getLendingPool() external view returns (address);\r\n    function getLendingPoolCore() external view returns (address);\r\n}\r\n\r\ninterface AaveCoreInterface {\r\n    function getReserveATokenAddress(address _reserve) external view returns (address);\r\n}\r\n\r\ninterface ATokenInterface {\r\n    function redeem(uint256 _amount) external;\r\n    function balanceOf(address _user) external view returns(uint256);\r\n    function principalBalanceOf(address _user) external view returns(uint256);\r\n    function transferFrom(address, address, uint) external returns (bool);\r\n}\r\n\r\ninterface DSAInterface {\r\n    function isAuth(address) external view returns(bool);\r\n}\r\n\r\ncontract DSMath {\r\n\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, \"math-not-safe\");\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"math-not-safe\");\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n\r\n}\r\n\r\ncontract Helpers is DSMath {\r\n    /**\r\n     * @dev Return ethereum address\r\n     */\r\n    function getEthAddr() internal pure returns (address) {\r\n        return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE; // ETH Address\r\n    }\r\n\r\n    /**\r\n     * @dev get Referral Code\r\n    */\r\n    function getReferralCode() internal pure returns (uint16) {\r\n        return 3228;\r\n    }\r\n\r\n    /**\r\n     * @dev Connector Details.\r\n     */\r\n    function connectorID() public pure returns(uint model, uint id) {\r\n        (model, id) = (1, 74);\r\n    }\r\n}\r\n\r\ncontract AaveHelpers is Helpers {\r\n\r\n    /**\r\n     * @dev get Aave Provider\r\n    */\r\n    function getAaveProvider() internal pure returns (AaveProviderInterface) {\r\n        // return AaveProviderInterface(0x24a42fD28C976A61Df5D00D0599C34c4f90748c8); //mainnet\r\n        return AaveProviderInterface(0x506B0B2CF20FAA8f38a4E2B524EE43e1f4458Cc5); //kovan\r\n    }\r\n\r\n    function getIsColl(AaveInterface aave, address token) internal view returns (bool isCol) {\r\n        (, , , , , , , , , isCol) = aave.getUserReserveData(token, address(this));\r\n    }\r\n\r\n    function getPaybackBalance(AaveInterface aave, address token, address user) internal view returns (uint amt) {\r\n        (, uint bal, , , , , uint fee, , , ) = aave.getUserReserveData(token, user);\r\n        amt = add(bal, fee);\r\n    }\r\n}\r\n\r\ncontract AaveResolver is AaveHelpers {\r\n    function _transferAtoken(\r\n        uint _length,\r\n        AaveInterface aave,\r\n        ATokenInterface[] memory atokenContracts,\r\n        address[] memory tokens,\r\n        uint[] memory amts,\r\n        address userAccount\r\n    ) internal {\r\n        for (uint i = 0; i < _length; i++) {\r\n            if (amts[i] > 0) {\r\n                require(atokenContracts[i].transferFrom(userAccount, address(this), amts[i]), \"allowance?\");\r\n\r\n                if (!getIsColl(aave, tokens[i])) {\r\n                    aave.setUserUseReserveAsCollateral(tokens[i], true);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function _paybackOne(AaveInterface aave, address token, uint amt, address user) internal {\r\n        if (amt > 0) {\r\n            uint ethAmt;\r\n\r\n            if (token == getEthAddr()) {\r\n                ethAmt = amt;\r\n            }\r\n\r\n            aave.repay.value(ethAmt)(token, amt, payable(user));\r\n        }\r\n    }\r\n\r\n    function _borrow(\r\n        uint _length,\r\n        AaveInterface aave,\r\n        address[] memory tokens,\r\n        uint[] memory amts\r\n    ) internal {\r\n        uint minAmt = 5000000; // 5e6\r\n        for (uint i = 0; i < _length; i++) {\r\n            if (amts[i] > 0) {\r\n                bool isSmallAmt = amts[i] < minAmt;\r\n                uint borrowAmt = isSmallAmt ? minAmt : amts[i];\r\n                uint paybackAmt = isSmallAmt ? sub(minAmt, amts[i]) : 0;\r\n\r\n                aave.borrow(tokens[i], borrowAmt, 2, getReferralCode());\r\n                _paybackOne(aave, tokens[i], paybackAmt, address(this));\r\n            }\r\n        }\r\n    }\r\n\r\n    function _payback(\r\n        uint _length,\r\n        AaveInterface aave,\r\n        address[] memory tokens,\r\n        uint[] memory amts,\r\n        address user\r\n    ) internal {\r\n        for (uint i = 0; i < _length; i++) {\r\n            _paybackOne(aave, tokens[i], amts[i], user);\r\n        }\r\n    }\r\n}\r\n\r\ncontract AaveImportResolver is AaveResolver {\r\n\r\n    function importAave(address userAccount, address[] calldata tokens) external payable {\r\n        require(DSAInterface(address(this)).isAuth(userAccount), \"user-account-not-auth\");\r\n\r\n        uint minAmt = 5000000; // 5e6\r\n\r\n        uint _length = tokens.length;\r\n        require(_length > 0, \"0-tokens-not-allowed\");\r\n\r\n        AaveInterface aave = AaveInterface(getAaveProvider().getLendingPool());\r\n        AaveCoreInterface aaveCore = AaveCoreInterface(getAaveProvider().getLendingPoolCore());\r\n\r\n        uint[] memory borrowAmts = new uint[](_length);\r\n        uint[] memory atokensBal = new uint[](_length);\r\n        ATokenInterface[] memory atokenContracts = new ATokenInterface[](_length);\r\n\r\n        for (uint i = 0; i < _length; i++) {\r\n            atokenContracts[i] = ATokenInterface(aaveCore.getReserveATokenAddress(tokens[i]));\r\n            borrowAmts[i] = getPaybackBalance(aave, tokens[i], userAccount);\r\n            atokensBal[i] = atokenContracts[i].balanceOf(userAccount);\r\n\r\n            if (tokens[i] != getEthAddr()) {\r\n                uint allowance = borrowAmts[i] < minAmt ? minAmt : borrowAmts[i]; \r\n                TokenInterface(tokens[i]).approve(address(aaveCore), allowance);\r\n            }\r\n        }\r\n\r\n        _borrow(_length, aave, tokens, borrowAmts);\r\n        _payback(_length, aave, tokens, borrowAmts, userAccount);\r\n        _transferAtoken(_length, aave, atokenContracts, tokens, atokensBal, userAccount);\r\n    }\r\n}\r\n\r\ncontract ConnectAaveV1Import is AaveImportResolver {\r\n    string public name = \"AaveV1-Import-v1.0\";\r\n}","ABI":"[{\"inputs\":[],\"name\":\"connectorID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"model\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAccount\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"importAave\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ConnectAaveV1Import","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://34f2e2e312cde60bb5ee1ea529d3271df636f7dcbc4a8e76aa037b53478769ac"}]}