{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n    \r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * Returns the address of the current owner.\r\n     */\r\n    function governance() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyGovernance() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferGovernance(address newOwner) internal virtual onlyGovernance {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: contracts/StabinolClaimerV2.sol\r\n\r\npragma solidity =0.6.6;\r\n\r\n// The claimer is used to mint new tokens to the user based on eth spent during the claim duration\r\n// After the minting period has expired, the claimer will pull from its own funds to pay cashback to user\r\n// This claimer allows for accumulation, initially up to 96% at 6 months in addition to 4%, 3 day cashback\r\n// This claimer also contains code to use the eth spent oracle when activated\r\n// Each new iteration of the claimer will store a record to the previous claimer\r\n\r\ninterface Staker {\r\n    function getLPBalance(address) external view returns (uint256);\r\n    function getSTBZBalance(address) external view returns (uint256);\r\n    function getDepositTime(address) external view returns (uint256);\r\n    function getSTOLInLP(address) external view returns (uint256);\r\n    function claimerAddress() external view returns (address);\r\n}\r\n\r\ninterface StabinolToken {\r\n    function getMaxSupply() external pure returns (uint256);\r\n    function mint(address, uint256) external returns (bool);\r\n}\r\n\r\ninterface PriceOracle {\r\n    function getLatestSTOLUSD() external view returns (uint256);\r\n    function getETHUSD() external view returns (uint256);\r\n    function updateSTOLPrice() external;\r\n}\r\n\r\ninterface SpentOracle {\r\n    function getUserETHSpent(address) external view returns (uint256); // Gets the cumulative eth spent by user\r\n    function addUserETHSpent(address, uint256) external returns (bool); // Send spent data to oracle\r\n}\r\n\r\ncontract StabinolClaimerV2 is Ownable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    \r\n    // variables\r\n    address public stolAddress; // The address for the STOL tokens\r\n    uint256 public minPercentClaim = 4000; // Initial conditions are 4% of USD value of STOL holdings can be claimed\r\n    uint256 public minClaimWindow = 3 days; // User must wait at least 3 days after last deposit action to claim\r\n    uint256 public maxAccumulatedClaim = 96000; // The maximum claim percent after the accumulation period has expired\r\n    uint256 public accumulationWindow = 177 days; // Window when accumulation will grow\r\n    bool public usingEthSpentOracle = false; // Governance can switch to ETH oracle or not to determine eth balances\r\n    uint256 private _minSTBZStaked = 50e18; // Initially requires 50 STBZ to stake in order to be eligible\r\n    address public stakerAddress; // The address for the staker\r\n    address public priceOracleAddress; // The address of the price oracle\r\n    address public ethSpentOracleAddress; // Address of the eth spent oracle\r\n    \r\n    uint256 constant DIVISION_FACTOR = 100000;\r\n    uint256 constant CLAIM_STIPEND = 250000; // The amount of stipend we will give to the user for claiming in gas units\r\n    address constant WETH_ADDRESS = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2); // WETH address\r\n    address constant PREVIOUS_CLAIMER = address(0x71Ce0fb59f17894A70f1D1b4F6eb03cA93E96858); // Address of last claimer\r\n    \r\n    mapping(address => UserInfo) private allUsersInfo;\r\n    \r\n    // Structs\r\n    struct UserInfo {\r\n        bool existing; // This becomes true once the user interacts with the new claimer\r\n        uint256 ethBalance; // The balance of ETH and WETH the last time the claim was made or a deposit was made in staker\r\n        uint256 totalEthSpent; // Stores the total amount of eth spent by user, based on oracle\r\n        uint256 lastClaimTime; // Time at last claim\r\n    }\r\n\r\n    // Events\r\n    event ClaimedSTOL(address indexed user, uint256 amount, uint256 expectedAmount);\r\n    \r\n    constructor(\r\n        address _stol,\r\n        address _staker,\r\n        address _oracle,\r\n        address _ethspent\r\n    ) public {\r\n        stolAddress = _stol;\r\n        stakerAddress = _staker;\r\n        priceOracleAddress = _oracle;\r\n        ethSpentOracleAddress = _ethspent;\r\n    }\r\n    \r\n    modifier onlyStaker() {\r\n        require(_msgSender() == stakerAddress, \"Only staker can call this function\");\r\n        _;\r\n    }\r\n    \r\n    // functions\r\n    function getETHSpentSinceClaim(address _user) public view returns (uint256) {\r\n        // Will return the amount of ETH spent since last call\r\n        uint256 total = SpentOracle(ethSpentOracleAddress).getUserETHSpent(_user);\r\n        if(total > allUsersInfo[_user].totalEthSpent){\r\n            return total.sub(allUsersInfo[_user].totalEthSpent);\r\n        }else{\r\n            // Possibly switched to a new iteration\r\n            return 0;\r\n        }\r\n    }\r\n    \r\n    function getTotalETHSpent(address _user) external view returns (uint256) {\r\n        return allUsersInfo[_user].totalEthSpent;\r\n    }\r\n    \r\n    function getETHBalance(address _user) public view returns (uint256){\r\n        if(allUsersInfo[_user].existing == false){\r\n            // Pull from old contract if no new data moved here\r\n            return StabinolClaimerV2(PREVIOUS_CLAIMER).getETHBalance(_user); // Get data from previous claimer\r\n        }else{\r\n            return allUsersInfo[_user].ethBalance;\r\n        }\r\n    }\r\n    \r\n    function getLastClaimTime(address _user) public view returns (uint256){\r\n        if(allUsersInfo[_user].existing == false){\r\n            return StabinolClaimerV2(PREVIOUS_CLAIMER).getLastClaimTime(_user); // Get data from previous claimer\r\n        }else{\r\n            return allUsersInfo[_user].lastClaimTime;\r\n        }\r\n    }\r\n    \r\n    function getMinSTBZStake() external view returns (uint256){\r\n        return _minSTBZStaked;\r\n    }\r\n    \r\n    function stakerUpdateBalance(address _user, uint256 gasLimit) external onlyStaker {\r\n        if(allUsersInfo[_user].existing == false){\r\n           updateUserData(_user);\r\n        }\r\n        allUsersInfo[_user].ethBalance = _user.balance.add(IERC20(WETH_ADDRESS).balanceOf(_user)).add(gasLimit); // ETH balance + WETH balance + Gas Limit\r\n    }\r\n    \r\n    function updateUserData(address _user) internal {\r\n         // We need to upate the user to the current claimer\r\n        allUsersInfo[_user].lastClaimTime = getLastClaimTime(_user);\r\n        allUsersInfo[_user].ethBalance = getETHBalance(_user);\r\n        allUsersInfo[_user].existing = true;\r\n        // Add more fields when we upgrade the claimer again\r\n    }\r\n    \r\n    function getClaimBackPercent(address _user) public view returns (uint256) {\r\n        // This function will calculate the max amount of claimback percent the user can expect based on accumulation time\r\n        Staker _stake = Staker(stakerAddress);\r\n        if(_stake.claimerAddress() != address(this)){\r\n            return 0;\r\n        }\r\n        uint256 lastTime = _stake.getDepositTime(_user);\r\n        uint256 lastClaimTime = getLastClaimTime(_user);\r\n        if(lastClaimTime > lastTime){\r\n            lastTime = lastClaimTime;\r\n        }\r\n        if(lastTime == 0){\r\n            return 0; // No deposits ever\r\n        }\r\n        if(now < lastTime + minClaimWindow){\r\n            return 0; // Too soon to claim\r\n        }\r\n        lastTime = lastTime + minClaimWindow; // This is the start of the accumulation time\r\n        uint256 timeDiff = now - lastTime; // Will be at least 0\r\n        uint256 maxPercent = timeDiff * maxAccumulatedClaim / accumulationWindow;\r\n        if(maxPercent > maxAccumulatedClaim){maxPercent = maxAccumulatedClaim;}\r\n        return minPercentClaim + maxPercent;\r\n    }\r\n    \r\n    // Claim call\r\n    function claim() external nonReentrant\r\n    {\r\n        uint256 gasLimit = gasleft().mul(tx.gasprice);\r\n        \r\n        address _user = _msgSender();\r\n        if(allUsersInfo[_user].existing == false){\r\n            // Update the user data to current claimer\r\n            updateUserData(_user);\r\n        }\r\n        \r\n        require(stakerAddress != address(0), \"Staker not set yet\");\r\n        require(priceOracleAddress != address(0), \"Price oracle not set yet\");\r\n        require(PriceOracle(priceOracleAddress).getLatestSTOLUSD() > 0, \"There is no price yet determined for STOL\");\r\n        Staker _stake = Staker(stakerAddress);\r\n        // First check if enough STBZ is staked in staker\r\n        require(_stake.claimerAddress() == address(this), \"Staker doesn't have this as the claimer\");\r\n        require(_stake.getSTBZBalance(_user) >= _minSTBZStaked, \"User doesn't have enough STBZ staked to qualify\");\r\n        require(_stake.getLPBalance(_user) > 0, \"User hasn't staked any LP tokens into the contract\");\r\n        // Now require deposit time / claim time to be at least min time to claim\r\n        require(now >= allUsersInfo[_user].lastClaimTime + minClaimWindow, \"Previous claim was too recent to claim again\");\r\n        require(now >= _stake.getDepositTime(_user) + minClaimWindow, \"Deposit time was too recent to claim\");\r\n        uint256 claimPercent = getClaimBackPercent(_user);\r\n        require(claimPercent > 0, \"Unable to determine the percentage eligible to claim\");\r\n        allUsersInfo[_user].lastClaimTime = now; // Set the claim time to now\r\n        uint256 claimedAmount = 0;\r\n        uint256 spent = 0;\r\n        \r\n        // Now divide the calculation based on claim type used\r\n        if(usingEthSpentOracle == true){\r\n            // We will get the eth spent since last use\r\n            spent = getETHSpentSinceClaim(_user);\r\n            allUsersInfo[_user].totalEthSpent = SpentOracle(ethSpentOracleAddress).getUserETHSpent(_user);\r\n            \r\n            // Update the eth spent on the oracle for the next claim once whitelisted\r\n            SpentOracle(ethSpentOracleAddress).addUserETHSpent(_user, CLAIM_STIPEND.mul(tx.gasprice));\r\n        }else{\r\n            // Using balance changes\r\n            uint256 currentBalance = _user.balance.add(IERC20(WETH_ADDRESS).balanceOf(_user)).add(gasLimit);\r\n            if(currentBalance < allUsersInfo[_user].ethBalance){\r\n                spent = allUsersInfo[_user].ethBalance.sub(currentBalance);\r\n            }else{\r\n                spent = 0;\r\n            }\r\n            allUsersInfo[_user].ethBalance = currentBalance;\r\n        }\r\n        \r\n        if(spent > 0){\r\n            // User has spent some eligible ETH\r\n            spent = spent.mul(PriceOracle(priceOracleAddress).getETHUSD()).div(1e18); // Normalize USD price into wei units\r\n            PriceOracle(priceOracleAddress).updateSTOLPrice(); // This will force update the price oracle\r\n            uint256 stolPrice = PriceOracle(priceOracleAddress).getLatestSTOLUSD();\r\n            require(stolPrice > 0, \"STOL price cannot be determined\");\r\n            uint256 maxSTOL = spent.mul(1e18).div(stolPrice); // This will give use maximum amount of STOL redeemable based on spent ETH\r\n            // This will give us maximum amount of STOL redeemable based on holdings\r\n            claimedAmount = _stake.getSTOLInLP(_user).mul(claimPercent).div(DIVISION_FACTOR); // Returns STOL in user's LP share, then takes percent\r\n            if(claimedAmount > maxSTOL){\r\n                claimedAmount = maxSTOL;\r\n            }\r\n            if(claimedAmount > 0){\r\n                // Now give user some STOL\r\n                IERC20 stol = IERC20(stolAddress);\r\n                uint256 maxSupply = StabinolToken(stolAddress).getMaxSupply();\r\n                if(stol.totalSupply() < maxSupply){\r\n                    // We will mint or mint and take from vault\r\n                    if(claimedAmount.add(stol.totalSupply()) > maxSupply){\r\n                        // Mint upto the maximum supply from the token then take rest from vault\r\n                        uint256 overage = claimedAmount.add(stol.totalSupply()).sub(maxSupply);\r\n                        claimedAmount = claimedAmount.sub(overage); // Reduce the amount\r\n                        StabinolToken(stolAddress).mint(_user, claimedAmount);\r\n                        if(stol.balanceOf(address(this)) >= overage){\r\n                            // Send the overage amount to the user\r\n                            stol.safeTransfer(_user, overage);\r\n                            emit ClaimedSTOL(_user, claimedAmount.add(overage), claimedAmount.add(overage));\r\n                        }else if(stol.balanceOf(address(this)) > 0){\r\n                            // Not enough STOL to fill claim, just send the balance left\r\n                            emit ClaimedSTOL(_user, claimedAmount.add(stol.balanceOf(address(this))), claimedAmount.add(overage));\r\n                            stol.safeTransfer(_user, stol.balanceOf(address(this)));\r\n                        }else{\r\n                            emit ClaimedSTOL(_user, claimedAmount, claimedAmount.add(overage));\r\n                        }\r\n                        return;\r\n                    }else{\r\n                        // We just mint freely\r\n                        StabinolToken(stolAddress).mint(_user, claimedAmount);\r\n                        emit ClaimedSTOL(_user, claimedAmount, claimedAmount);\r\n                    }\r\n                }else{\r\n                    // We will just take from vault\r\n                    if(stol.balanceOf(address(this)) >= claimedAmount){\r\n                        // Send the claimedAmount to the user from vault\r\n                        stol.safeTransfer(_user, claimedAmount);\r\n                        emit ClaimedSTOL(_user, claimedAmount, claimedAmount);\r\n                    }else if(stol.balanceOf(address(this)) > 0){\r\n                        // Not enough STOL to fill claim, just send the balance left\r\n                        emit ClaimedSTOL(_user, stol.balanceOf(address(this)), claimedAmount);\r\n                        stol.safeTransfer(_user, stol.balanceOf(address(this)));\r\n                    }else{\r\n                        // Vault doesn't have enough STOL for user\r\n                        emit ClaimedSTOL(_user, 0, claimedAmount);\r\n                    }\r\n                }                \r\n            }\r\n        }\r\n    }\r\n    \r\n    // Governance only functions\r\n    \r\n    // Timelock variables\r\n    \r\n    uint256 private _timelockStart; // The start of the timelock to change governance variables\r\n    uint256 private _timelockType; // The function that needs to be changed\r\n    uint256 constant TIMELOCK_DURATION = 86400; // Timelock is 24 hours\r\n    \r\n    // Reusable timelock variables\r\n    address private _timelock_address;\r\n    uint256[2] private _timelock_data;\r\n    \r\n    modifier timelockConditionsMet(uint256 _type) {\r\n        require(_timelockType == _type, \"Timelock not acquired for this function\");\r\n        _timelockType = 0; // Reset the type once the timelock is used\r\n        require(now >= _timelockStart + TIMELOCK_DURATION, \"Timelock time not met\");\r\n        _;\r\n    }\r\n    \r\n    // Change the owner of the token contract\r\n    // --------------------\r\n    function startGovernanceChange(address _address) external onlyGovernance {\r\n        _timelockStart = now;\r\n        _timelockType = 1;\r\n        _timelock_address = _address;       \r\n    }\r\n    \r\n    function finishGovernanceChange() external onlyGovernance timelockConditionsMet(1) {\r\n        transferGovernance(_timelock_address);\r\n    }\r\n    // --------------------\r\n    \r\n    // Change the staker contract\r\n    // --------------------\r\n    function startStakerChange(address _address) external onlyGovernance {\r\n        _timelockStart = now;\r\n        _timelockType = 2;\r\n        _timelock_address = _address;       \r\n    }\r\n    \r\n    function finishStakerChange() external onlyGovernance timelockConditionsMet(2) {\r\n        stakerAddress = _timelock_address;\r\n    }\r\n    // --------------------\r\n    \r\n    // Change the price oracle contract\r\n    // --------------------\r\n    function startPriceOracleChange(address _address) external onlyGovernance {\r\n        _timelockStart = now;\r\n        _timelockType = 3;\r\n        _timelock_address = _address;       \r\n    }\r\n    \r\n    function finishPriceOracleChange() external onlyGovernance timelockConditionsMet(3) {\r\n        priceOracleAddress = _timelock_address;\r\n    }\r\n    // --------------------\r\n    \r\n    // Change the price oracle contract\r\n    // --------------------\r\n    function startETHSpentOracleChange(address _address) external onlyGovernance {\r\n        _timelockStart = now;\r\n        _timelockType = 4;\r\n        _timelock_address = _address;       \r\n    }\r\n    \r\n    function finishETHSpentOracleChange() external onlyGovernance timelockConditionsMet(4) {\r\n        ethSpentOracleAddress = _timelock_address;\r\n    }\r\n    // --------------------\r\n    \r\n    // Change the max percent cashback\r\n    // --------------------\r\n    function startChangeInitialPercentAndTime(uint256 _percent, uint256 _time) external onlyGovernance {\r\n        require(_percent <= 100000, \"Percent too high\");\r\n        _timelockStart = now;\r\n        _timelockType = 5;\r\n        _timelock_data[0] = _percent;\r\n        _timelock_data[1] = _time;\r\n    }\r\n    \r\n    function finishChangeInitialPercentAndTime() external onlyGovernance timelockConditionsMet(5) {\r\n        minPercentClaim = _timelock_data[0];\r\n        minClaimWindow = _timelock_data[1];\r\n    }\r\n    // --------------------\r\n    \r\n    // Change the max accumulation percent cashback\r\n    // --------------------\r\n    function startChangeMaxPercentAndTime(uint256 _percent, uint256 _time) external onlyGovernance {\r\n        require(_percent <= 100000, \"Percent too high\");\r\n        _timelockStart = now;\r\n        _timelockType = 6;\r\n        _timelock_data[0] = _percent;\r\n        _timelock_data[1] = _time;\r\n    }\r\n    \r\n    function finishChangeMaxPercentAndTime() external onlyGovernance timelockConditionsMet(6) {\r\n        maxAccumulatedClaim = _timelock_data[0];\r\n        accumulationWindow = _timelock_data[1];\r\n    }\r\n    // --------------------\r\n    \r\n    // Change the min STBZ staked\r\n    // --------------------\r\n    function startChangeMinSTBZ(uint256 _stbz) external onlyGovernance {\r\n        _timelockStart = now;\r\n        _timelockType = 7;\r\n        _timelock_data[0] = _stbz;\r\n    }\r\n    \r\n    function finishChangeMinSTBZ() external onlyGovernance timelockConditionsMet(7) {\r\n        _minSTBZStaked = _timelock_data[0];\r\n    }\r\n    // --------------------\r\n\r\n    // Transfer vault STOL to new claimer if necessary\r\n    // --------------------\r\n    function startTransferVaultToNewClaimer(address _address) external onlyGovernance {\r\n        require(IERC20(stolAddress).balanceOf(address(this)) > 0, \"No STOL in Claimer yet\");\r\n        _timelockStart = now;\r\n        _timelockType = 8;\r\n        _timelock_address = _address;       \r\n    }\r\n    \r\n    function finishTransferVaultToNewClaimer() external onlyGovernance timelockConditionsMet(8) {\r\n        // Move STOL to new claimer\r\n        IERC20(stolAddress).safeTransfer(_timelock_address, IERC20(stolAddress).balanceOf(address(this)));\r\n    }\r\n    // --------------------\r\n    \r\n    // Change the min STBZ staked\r\n    // --------------------\r\n    function startChangeETHSpentOracleUse(uint256 _use) external onlyGovernance {\r\n        _timelockStart = now;\r\n        _timelockType = 9;\r\n        _timelock_data[0] = _use;\r\n    }\r\n    \r\n    function finishChangeETHSpentOracleUse() external onlyGovernance timelockConditionsMet(9) {\r\n        if(_timelock_data[0] == 0){\r\n            usingEthSpentOracle = false;\r\n        }else{\r\n            usingEthSpentOracle = true;\r\n        }\r\n    }\r\n    // --------------------\r\n   \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stol\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ethspent\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expectedAmount\",\"type\":\"uint256\"}],\"name\":\"ClaimedSTOL\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accumulationWindow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethSpentOracleAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishChangeETHSpentOracleUse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishChangeInitialPercentAndTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishChangeMaxPercentAndTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishChangeMinSTBZ\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishETHSpentOracleChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishGovernanceChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishPriceOracleChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishStakerChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishTransferVaultToNewClaimer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getClaimBackPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getETHBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getETHSpentSinceClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getLastClaimTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinSTBZStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTotalETHSpent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAccumulatedClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minClaimWindow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPercentClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceOracleAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"}],\"name\":\"stakerUpdateBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_use\",\"type\":\"uint256\"}],\"name\":\"startChangeETHSpentOracleUse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"startChangeInitialPercentAndTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"startChangeMaxPercentAndTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stbz\",\"type\":\"uint256\"}],\"name\":\"startChangeMinSTBZ\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"startETHSpentOracleChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"startGovernanceChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"startPriceOracleChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"startStakerChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"startTransferVaultToNewClaimer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usingEthSpentOracle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"StabinolClaimerV2","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000004ff5253e2304e3f5ed6547ac5d9952a62b91e3e80000000000000000000000004d44545cb6ae1f0efb972be59379c5ae406e676c000000000000000000000000eb0bc43490e1ec029174f5809a783f7b59457a71000000000000000000000000b73852dc78192cf70b6588dffaaf8783321e9625","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://1d538c7f1b8daeaf4f036f1132589b5eee9e647f2fc6e2c62c1f74be81ac1867"}]}