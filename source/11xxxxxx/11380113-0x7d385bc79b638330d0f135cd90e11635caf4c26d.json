{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/upgrades/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n *\r\n * Source https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-solidity/v2.1.3/contracts/utils/Address.sol\r\n * This contract is copied here and renamed from the original to avoid clashes in the compiled artifacts\r\n * when the user imports a zos-lib contract (that transitively causes this contract to be compiled and added to the\r\n * build/artifacts folder) as well as the vanilla Address implementation from an openzeppelin version.\r\n */\r\nlibrary OpenZeppelinUpgradesAddress {\r\n    /**\r\n     * Returns whether the target address is a contract\r\n     * @dev This function will return false if invoked during the constructor of a contract,\r\n     * as the code is not actually created until after the constructor finishes.\r\n     * @param account address of the account to check\r\n     * @return whether the target address is a contract\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        // XXX Currently there is no better way to check if there is a contract in an address\r\n        // than to check the size of the code at that address.\r\n        // See https://ethereum.stackexchange.com/a/14016/36603\r\n        // for more details about how this works.\r\n        // TODO Check this again before the Serenity release, because all addresses will be\r\n        // contracts then.\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/governance/dmg/SafeBitMath.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\nlibrary SafeBitMath {\r\n\r\n    function safe64(uint n, string memory errorMessage) internal pure returns (uint64) {\r\n        require(n < 2 ** 64, errorMessage);\r\n        return uint64(n);\r\n    }\r\n\r\n    function safe128(uint n, string memory errorMessage) internal pure returns (uint128) {\r\n        require(n < 2 ** 128, errorMessage);\r\n        return uint128(n);\r\n    }\r\n\r\n    function add128(uint128 a, uint128 b, string memory errorMessage) internal pure returns (uint128) {\r\n        uint128 c = a + b;\r\n        require(c >= a, errorMessage);\r\n        return c;\r\n    }\r\n\r\n    function add128(uint128 a, uint128 b) internal pure returns (uint128) {\r\n        return add128(a, b, \"\");\r\n    }\r\n\r\n    function sub128(uint128 a, uint128 b, string memory errorMessage) internal pure returns (uint128) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    function sub128(uint128 a, uint128 b) internal pure returns (uint128) {\r\n        return sub128(a, b, \"\");\r\n    }\r\n\r\n}\r\n\r\n// File: @openzeppelin/upgrades/contracts/Initializable.sol\r\n\r\npragma solidity >=0.4.24 <0.7.0;\r\n\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n// File: contracts/protocol/interfaces/IOwnableOrGuardian.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * NOTE:    THE STATE VARIABLES IN THIS CONTRACT CANNOT CHANGE NAME OR POSITION BECAUSE THIS CONTRACT IS USED IN\r\n *          UPGRADEABLE CONTRACTS.\r\n */\r\ncontract IOwnableOrGuardian is Initializable {\r\n\r\n    // *************************\r\n    // ***** Events\r\n    // *************************\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event GuardianTransferred(address indexed previousGuardian, address indexed newGuardian);\r\n\r\n    // *************************\r\n    // ***** Modifiers\r\n    // *************************\r\n\r\n    modifier onlyOwnerOrGuardian {\r\n        require(\r\n            msg.sender == _owner || msg.sender == _guardian,\r\n            \"OwnableOrGuardian: UNAUTHORIZED_OWNER_OR_GUARDIAN\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(\r\n            msg.sender == _owner,\r\n            \"OwnableOrGuardian: UNAUTHORIZED\"\r\n        );\r\n        _;\r\n    }\r\n    // *********************************************\r\n    // ***** State Variables DO NOT CHANGE OR MOVE\r\n    // *********************************************\r\n\r\n    // ******************************\r\n    // ***** DO NOT CHANGE OR MOVE\r\n    // ******************************\r\n    address internal _owner;\r\n    address internal _guardian;\r\n    // ******************************\r\n    // ***** DO NOT CHANGE OR MOVE\r\n    // ******************************\r\n\r\n    // ******************************\r\n    // ***** Misc Functions\r\n    // ******************************\r\n\r\n    function owner() external view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function guardian() external view returns (address) {\r\n        return _guardian;\r\n    }\r\n\r\n    // ******************************\r\n    // ***** Admin Functions\r\n    // ******************************\r\n\r\n    function initialize(\r\n        address __owner,\r\n        address __guardian\r\n    )\r\n    public\r\n    initializer {\r\n        _transferOwnership(__owner);\r\n        _transferGuardian(__guardian);\r\n    }\r\n\r\n    function transferOwnership(\r\n        address __owner\r\n    )\r\n    public\r\n    onlyOwner {\r\n        require(\r\n            __owner != address(0),\r\n            \"OwnableOrGuardian::transferOwnership: INVALID_OWNER\"\r\n        );\r\n        _transferOwnership(__owner);\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferGuardian(\r\n        address __guardian\r\n    )\r\n    public\r\n    onlyOwner {\r\n        require(\r\n            __guardian != address(0),\r\n            \"OwnableOrGuardian::transferGuardian: INVALID_OWNER\"\r\n        );\r\n        _transferGuardian(__guardian);\r\n    }\r\n\r\n    function renounceGuardian() public onlyOwnerOrGuardian {\r\n        _transferGuardian(address(0));\r\n    }\r\n\r\n    // ******************************\r\n    // ***** Internal Functions\r\n    // ******************************\r\n\r\n    function _transferOwnership(\r\n        address __owner\r\n    )\r\n    internal {\r\n        address previousOwner = _owner;\r\n        _owner = __owner;\r\n        emit OwnershipTransferred(previousOwner, __owner);\r\n    }\r\n\r\n    function _transferGuardian(\r\n        address __guardian\r\n    )\r\n    internal {\r\n        address previousGuardian = _guardian;\r\n        _guardian = __guardian;\r\n        emit GuardianTransferred(previousGuardian, __guardian);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/governance/dmg/IDMGToken.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity ^0.5.13;\r\n\r\ninterface IDMGToken {\r\n\r\n    /// @notice A checkpoint for marking number of votes from a given block\r\n    struct Checkpoint {\r\n        uint64 fromBlock;\r\n        uint128 votes;\r\n    }\r\n\r\n    /// @notice An event thats emitted when an account changes its delegate\r\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\r\n\r\n    /// @notice An event thats emitted when a delegate account's vote balance changes\r\n    event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);\r\n\r\n    // *************************\r\n    // ***** Functions\r\n    // *************************\r\n\r\n    function getPriorVotes(address account, uint blockNumber) external view returns (uint128);\r\n\r\n    function getCurrentVotes(address account) external view returns (uint128);\r\n\r\n    function delegates(address delegator) external view returns (address);\r\n\r\n    function burn(uint amount) external returns (bool);\r\n\r\n    function approveBySig(\r\n        address spender,\r\n        uint rawAmount,\r\n        uint nonce,\r\n        uint expiry,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n}\r\n\r\n// File: contracts/external/asset_introducers/AssetIntroducerData.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\ncontract AssetIntroducerData is Initializable, IOwnableOrGuardian {\r\n\r\n    // *************************\r\n    // ***** Constants\r\n    // *************************\r\n\r\n    // *************************\r\n    // ***** V1 State Variables\r\n    // *************************\r\n\r\n    /// For preventing reentrancy attacks\r\n    uint64 internal _guardCounter;\r\n\r\n    AssetIntroducerStateV1 internal _assetIntroducerStateV1;\r\n\r\n    ERC721StateV1 internal _erc721StateV1;\r\n\r\n    VoteStateV1 internal _voteStateV1;\r\n\r\n    // *************************\r\n    // ***** Data Structures\r\n    // *************************\r\n\r\n    enum AssetIntroducerType {\r\n        PRINCIPAL, AFFILIATE\r\n    }\r\n\r\n    struct AssetIntroducerStateV1 {\r\n        /// The timestamp at which this contract was initialized\r\n        uint64 initTimestamp;\r\n\r\n        /// True if the DMM Foundation purchased its token for the bootstrapped pool, false otherwise.\r\n        bool isDmmFoundationSetup;\r\n\r\n        /// Total amount of DMG locked in this contract\r\n        uint128 totalDmgLocked;\r\n\r\n        /// For calculating the results of off-chain signature requests\r\n        bytes32 domainSeparator;\r\n\r\n        /// Address of the DMG token\r\n        address dmg;\r\n\r\n        /// Address of the DMM Controller\r\n        address dmmController;\r\n\r\n        /// Address of the DMM token valuator, which gets the USD value of a token\r\n        address underlyingTokenValuator;\r\n\r\n        /// Address of the implementation for the discount\r\n        address assetIntroducerDiscount;\r\n\r\n        /// Address of the implementation for the staking purchaser contract. Used to buy NFTs at a steep discount by\r\n        /// staking mTokens.\r\n        address stakingPurchaser;\r\n\r\n        /// Mapping from NFT ID to the asset introducer struct.\r\n        mapping(uint => AssetIntroducer) idToAssetIntroducer;\r\n\r\n        /// Mapping from country code to asset introducer type to token IDs\r\n        mapping(bytes3 => mapping(uint8 => uint[])) countryCodeToAssetIntroducerTypeToTokenIdsMap;\r\n\r\n        /// A mapping from the country code to asset introducer type to the cost needed to buy one. The cost is represented\r\n        /// in USD (with 18 decimals) and is purchased using DMG, so a conversion is needed using Chainlink.\r\n        mapping(bytes3 => mapping(uint8 => uint96)) countryCodeToAssetIntroducerTypeToPriceUsd;\r\n\r\n        /// The dollar amount that has actually been deployed by the asset introducer\r\n        mapping(uint => mapping(address => uint)) tokenIdToUnderlyingTokenToWithdrawnAmount;\r\n\r\n        /// Mapping for the count of each user's off-chain signed messages. 0-indexed.\r\n        mapping(address => uint) ownerToNonceMap;\r\n    }\r\n\r\n    struct ERC721StateV1 {\r\n        /// Total number of NFTs created\r\n        uint64 totalSupply;\r\n\r\n        /// The proxy address created by OpenSea, which is used to enable a smoother trading experience\r\n        address openSeaProxyRegistry;\r\n\r\n        /// The last token ID in the linked list.\r\n        uint lastTokenId;\r\n\r\n        /// The base URI for getting NFT information by token ID.\r\n        string baseURI;\r\n\r\n        /// Mapping of all token IDs. Works as a linked list such that previous key --> next value. The 0th key in the\r\n        /// list is LINKED_LIST_GUARD.\r\n        mapping(uint => uint) allTokens;\r\n\r\n        /// Mapping from NFT ID to owner address.\r\n        mapping(uint256 => address) idToOwnerMap;\r\n\r\n        /// Mapping from NFT ID to approved address.\r\n        mapping(uint256 => address) idToSpenderMap;\r\n\r\n        /// Mapping from owner to an operator that can spend all of owner's NFTs.\r\n        mapping(address => mapping(address => bool)) ownerToOperatorToIsApprovedMap;\r\n\r\n        /// Mapping from owner address to all owned token IDs. Works as a linked list such that previous key --> next value.\r\n        /// The 0th key in the list is LINKED_LIST_GUARD.\r\n        mapping(address => mapping(uint => uint)) ownerToTokenIds;\r\n\r\n        /// Mapping from owner address to a count of all owned NFTs.\r\n        mapping(address => uint32) ownerToTokenCount;\r\n\r\n        /// Mapping from an interface to whether or not it's supported.\r\n        mapping(bytes4 => bool) interfaceIdToIsSupportedMap;\r\n    }\r\n\r\n    /// Used for storing information about voting\r\n    struct VoteStateV1 {\r\n        /// Taken from the DMG token implementation\r\n        mapping(address => mapping(uint64 => Checkpoint)) ownerToCheckpointIndexToCheckpointMap;\r\n        /// Taken from the DMG token implementation\r\n        mapping(address => uint64) ownerToCheckpointCountMap;\r\n    }\r\n\r\n    /// Tightly-packed, this data structure is 2 slots; 64 bytes\r\n    struct AssetIntroducer {\r\n        bytes3 countryCode;\r\n        AssetIntroducerType introducerType;\r\n        /// True if the asset introducer has been purchased yet, false if it hasn't and is thus\r\n        bool isOnSecondaryMarket;\r\n        /// True if the asset introducer can withdraw tokens from mToken deposits, false if it cannot yet. This value\r\n        /// must only be changed to `true` via governance vote\r\n        bool isAllowedToWithdrawFunds;\r\n        /// 1-based index at which the asset introducer was created. Used for optics\r\n        uint16 serialNumber;\r\n        uint96 dmgLocked;\r\n        /// How much this asset introducer can manage\r\n        uint96 dollarAmountToManage;\r\n        uint tokenId;\r\n    }\r\n\r\n    /// Used for tracking delegation and number of votes each user has at a given block height.\r\n    struct Checkpoint {\r\n        uint64 fromBlock;\r\n        uint128 votes;\r\n    }\r\n\r\n    /// Used to prevent the \"stack too deep\" error and make code more readable\r\n    struct DmgApprovalStruct {\r\n        address spender;\r\n        uint rawAmount;\r\n        uint nonce;\r\n        uint expiry;\r\n        uint8 v;\r\n        bytes32 r;\r\n        bytes32 s;\r\n    }\r\n\r\n    struct DiscountStruct {\r\n        uint64 initTimestamp;\r\n    }\r\n\r\n    // *************************\r\n    // ***** Modifiers\r\n    // *************************\r\n\r\n    modifier nonReentrant() {\r\n        _guardCounter += 1;\r\n        uint256 localCounter = _guardCounter;\r\n\r\n        _;\r\n\r\n        require(\r\n            localCounter == _guardCounter,\r\n            \"AssetIntroducerData: REENTRANCY\"\r\n        );\r\n    }\r\n\r\n    /// Enforces that an NFT has NOT been sold to a user yet\r\n    modifier requireIsPrimaryMarketNft(uint __tokenId) {\r\n        require(\r\n            !_assetIntroducerStateV1.idToAssetIntroducer[__tokenId].isOnSecondaryMarket,\r\n            \"AssetIntroducerData: IS_SECONDARY_MARKET\"\r\n        );\r\n\r\n        _;\r\n    }\r\n\r\n    /// Enforces that an NFT has been sold to a user\r\n    modifier requireIsSecondaryMarketNft(uint __tokenId) {\r\n        require(\r\n            _assetIntroducerStateV1.idToAssetIntroducer[__tokenId].isOnSecondaryMarket,\r\n            \"AssetIntroducerData: IS_PRIMARY_MARKET\"\r\n        );\r\n\r\n        _;\r\n    }\r\n\r\n    modifier requireIsValidNft(uint __tokenId) {\r\n        require(\r\n            _erc721StateV1.idToOwnerMap[__tokenId] != address(0),\r\n            \"AssetIntroducerData: INVALID_NFT\"\r\n        );\r\n\r\n        _;\r\n    }\r\n\r\n    modifier requireIsNftOwner(uint __tokenId) {\r\n        require(\r\n            _erc721StateV1.idToOwnerMap[__tokenId] == msg.sender,\r\n            \"AssetIntroducerData: INVALID_NFT_OWNER\"\r\n        );\r\n\r\n        _;\r\n    }\r\n\r\n    modifier requireCanWithdrawFunds(uint __tokenId) {\r\n        require(\r\n            _assetIntroducerStateV1.idToAssetIntroducer[__tokenId].isAllowedToWithdrawFunds,\r\n            \"AssetIntroducerData: NFT_NOT_ACTIVATED\"\r\n        );\r\n\r\n        _;\r\n    }\r\n\r\n    modifier requireIsStakingPurchaser() {\r\n        require(\r\n            _assetIntroducerStateV1.stakingPurchaser != address(0),\r\n            \"AssetIntroducerData: STAKING_PURCHASER_NOT_SETUP\"\r\n        );\r\n\r\n        require(\r\n            _assetIntroducerStateV1.stakingPurchaser == msg.sender,\r\n            \"AssetIntroducerData: INVALID_SENDER_FOR_STAKING\"\r\n        );\r\n        _;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/external/asset_introducers/impl/AssetIntroducerVotingLib.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\nlibrary AssetIntroducerVotingLib {\r\n\r\n    // *************************\r\n    // ***** Events\r\n    // *************************\r\n\r\n    event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);\r\n\r\n    // *************************\r\n    // ***** Functions\r\n    // *************************\r\n\r\n    function getCurrentVotes(\r\n        AssetIntroducerData.VoteStateV1 storage __state,\r\n        address __owner\r\n    ) public view returns (uint) {\r\n        uint64 checkpointCount = __state.ownerToCheckpointCountMap[__owner];\r\n        return checkpointCount > 0 ? __state.ownerToCheckpointIndexToCheckpointMap[__owner][checkpointCount - 1].votes : 0;\r\n    }\r\n\r\n    function getPriorVotes(\r\n        AssetIntroducerData.VoteStateV1 storage __state,\r\n        address __owner,\r\n        uint __blockNumber\r\n    ) public view returns (uint128) {\r\n        require(\r\n            __blockNumber < block.number,\r\n            \"AssetIntroducerVotingLib::getPriorVotes: not yet determined\"\r\n        );\r\n\r\n        uint64 checkpointCount = __state.ownerToCheckpointCountMap[__owner];\r\n        if (checkpointCount == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // First check most recent balance\r\n        if (__state.ownerToCheckpointIndexToCheckpointMap[__owner][checkpointCount - 1].fromBlock <= __blockNumber) {\r\n            return __state.ownerToCheckpointIndexToCheckpointMap[__owner][checkpointCount - 1].votes;\r\n        }\r\n\r\n        // Next check implicit zero balance\r\n        if (__state.ownerToCheckpointIndexToCheckpointMap[__owner][0].fromBlock > __blockNumber) {\r\n            return 0;\r\n        }\r\n\r\n        uint64 lower = 0;\r\n        uint64 upper = checkpointCount - 1;\r\n        while (upper > lower) {\r\n            // ceil, avoiding overflow\r\n            uint64 center = upper - (upper - lower) / 2;\r\n            AssetIntroducerData.Checkpoint memory checkpoint = __state.ownerToCheckpointIndexToCheckpointMap[__owner][center];\r\n            if (checkpoint.fromBlock == __blockNumber) {\r\n                return checkpoint.votes;\r\n            } else if (checkpoint.fromBlock < __blockNumber) {\r\n                lower = center;\r\n            } else {\r\n                upper = center - 1;\r\n            }\r\n        }\r\n        return __state.ownerToCheckpointIndexToCheckpointMap[__owner][lower].votes;\r\n    }\r\n\r\n    function moveDelegates(\r\n        AssetIntroducerData.VoteStateV1 storage __state,\r\n        address __fromOwner,\r\n        address __toOwner,\r\n        uint128 __amount\r\n    ) public {\r\n        if (__fromOwner != __toOwner && __amount > 0) {\r\n            if (__fromOwner != address(0)) {\r\n                uint64 fromCheckpointCount = __state.ownerToCheckpointCountMap[__fromOwner];\r\n                uint128 fromVotesOld = fromCheckpointCount > 0 ? __state.ownerToCheckpointIndexToCheckpointMap[__fromOwner][fromCheckpointCount - 1].votes : 0;\r\n                uint128 fromVotesNew = SafeBitMath.sub128(\r\n                    fromVotesOld,\r\n                    __amount,\r\n                    \"AssetIntroducerVotingLib::moveDelegates: VOTE_UNDERFLOW\"\r\n                );\r\n                _writeCheckpoint(__state, __fromOwner, fromCheckpointCount, fromVotesOld, fromVotesNew);\r\n            }\r\n\r\n            if (__toOwner != address(0)) {\r\n                uint64 toCheckpointCount = __state.ownerToCheckpointCountMap[__toOwner];\r\n                uint128 toVotesOld = toCheckpointCount > 0 ? __state.ownerToCheckpointIndexToCheckpointMap[__toOwner][toCheckpointCount - 1].votes : 0;\r\n                uint128 toVotesNew = SafeBitMath.add128(\r\n                    toVotesOld,\r\n                    __amount,\r\n                    \"AssetIntroducerVotingLib::moveDelegates: VOTE_OVERFLOW\"\r\n                );\r\n                _writeCheckpoint(__state, __toOwner, toCheckpointCount, toVotesOld, toVotesNew);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    function _writeCheckpoint(\r\n        AssetIntroducerData.VoteStateV1 storage __state,\r\n        address __owner,\r\n        uint64 __checkpointCount,\r\n        uint128 __oldVotes,\r\n        uint128 __newVotes\r\n    ) internal {\r\n        uint64 blockNumber = SafeBitMath.safe64(\r\n            block.number,\r\n            \"AssetIntroducerVotingLib::_writeCheckpoint: INVALID_BLOCK_NUMBER\"\r\n        );\r\n\r\n        if (__checkpointCount > 0 && __state.ownerToCheckpointIndexToCheckpointMap[__owner][__checkpointCount - 1].fromBlock == blockNumber) {\r\n            __state.ownerToCheckpointIndexToCheckpointMap[__owner][__checkpointCount - 1].votes = __newVotes;\r\n        } else {\r\n            __state.ownerToCheckpointIndexToCheckpointMap[__owner][__checkpointCount] = AssetIntroducerData.Checkpoint(blockNumber, __newVotes);\r\n            __state.ownerToCheckpointCountMap[__owner] = __checkpointCount + 1;\r\n        }\r\n\r\n        emit DelegateVotesChanged(__owner, __oldVotes, __newVotes);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/external/asset_introducers/interfaces/IERC721.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity >=0.5.0;\r\n\r\n/**\r\n * @dev ERC-721 non-fungible token standard. See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md.\r\n */\r\ninterface IERC721 {\r\n\r\n    /**\r\n     * @dev Emits when ownership of any NFT changes by any mechanism. This event emits when NFTs are\r\n     * created (`from` == 0) and destroyed (`to` == 0). Exception: during contract creation, any\r\n     * number of NFTs may be created and assigned without emitting Transfer. At the time of any\r\n     * transfer, the approved address for that NFT (if any) is reset to none.\r\n     */\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 indexed tokenId\r\n    );\r\n\r\n    /**\r\n     * @dev This emits when the approved address for an NFT is changed or reaffirmed. The zero\r\n     * address indicates there is no approved address. When a Transfer event emits, this also\r\n     * indicates that the approved address for that NFT (if any) is reset to none.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed operator,\r\n        uint256 indexed tokenId\r\n    );\r\n\r\n    /**\r\n     * @dev This emits when an operator is enabled or disabled for an owner. The operator can manage\r\n     * all NFTs of the owner.\r\n     */\r\n    event ApprovalForAll(\r\n        address indexed owner,\r\n        address indexed operator,\r\n        bool approved\r\n    );\r\n\r\n    /**\r\n     * @dev Transfers the ownership of an NFT from one address to another address.\r\n     * @notice Throws unless `msg.sender` is the current owner, an authorized operator, or the\r\n     * approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is\r\n     * the zero address. Throws if `_tokenId` is not a valid NFT. When transfer is complete, this\r\n     * function checks if `_to` is a smart contract (code size > 0). If so, it calls\r\n     * `onERC721Received` on `_to` and throws if the return value is not\r\n     * `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`.\r\n     * @param _from The current owner of the NFT.\r\n     * @param _to The new owner.\r\n     * @param _tokenId The NFT to transfer.\r\n     * @param _data Additional data with no specified format, sent in call to `_to`.\r\n     */\r\n    function safeTransferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId,\r\n        bytes calldata _data\r\n    )\r\n    external;\r\n\r\n    /**\r\n     * @dev Transfers the ownership of an NFT from one address to another address.\r\n     * @notice This works identically to the other function with an extra data parameter, except this\r\n     * function just sets data to \"\"\r\n     * @param _from The current owner of the NFT.\r\n     * @param _to The new owner.\r\n     * @param _tokenId The NFT to transfer.\r\n     */\r\n    function safeTransferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId\r\n    )\r\n    external;\r\n\r\n    /**\r\n     * @dev Throws unless `msg.sender` is the current owner, an authorized operator, or the approved\r\n     * address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero\r\n     * address. Throws if `_tokenId` is not a valid NFT.\r\n     * @notice The caller is responsible to confirm that `_to` is capable of receiving NFTs or else\r\n     * they mayb be permanently lost.\r\n     * @param _from The current owner of the NFT.\r\n     * @param _to The new owner.\r\n     * @param _tokenId The NFT to transfer.\r\n     */\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId\r\n    )\r\n    external;\r\n\r\n    /**\r\n     * @dev Set or reaffirm the approved address for an NFT.\r\n     * @notice The zero address indicates there is no approved address. Throws unless `msg.sender` is\r\n     * the current NFT owner, or an authorized operator of the current owner.\r\n     * @param _approved The new approved NFT controller.\r\n     * @param _tokenId The NFT to approve.\r\n     */\r\n    function approve(\r\n        address _approved,\r\n        uint256 _tokenId\r\n    )\r\n    external;\r\n\r\n    /**\r\n     * @dev Enables or disables approval for a third party (\"operator\") to manage all of\r\n     * `msg.sender`'s assets. It also emits the ApprovalForAll event.\r\n     * @notice The contract MUST allow multiple operators per owner.\r\n     * @param _operator Address to add to the set of authorized operators.\r\n     * @param _approved True if the operators is approved, false to revoke approval.\r\n     */\r\n    function setApprovalForAll(\r\n        address _operator,\r\n        bool _approved\r\n    )\r\n    external;\r\n\r\n    /**\r\n     * @dev Returns the number of NFTs owned by `_owner`. NFTs assigned to the zero address are\r\n     * considered invalid, and this function throws for queries about the zero address.\r\n     * @param _owner Address for whom to query the balance.\r\n     * @return Balance of _owner.\r\n     */\r\n    function balanceOf(\r\n        address _owner\r\n    )\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the address of the owner of the NFT. NFTs assigned to zero address are considered\r\n     * invalid, and queries about them do throw.\r\n     * @param _tokenId The identifier for an NFT.\r\n     * @return Address of _tokenId owner.\r\n     */\r\n    function ownerOf(\r\n        uint256 _tokenId\r\n    )\r\n    external\r\n    view\r\n    returns (address);\r\n\r\n    /**\r\n     * @dev Get the approved address for a single NFT.\r\n     * @notice Throws if `_tokenId` is not a valid NFT.\r\n     * @param _tokenId The NFT to find the approved address for.\r\n     * @return Address that _tokenId is approved for.\r\n     */\r\n    function getApproved(\r\n        uint256 _tokenId\r\n    )\r\n    external\r\n    view\r\n    returns (address);\r\n\r\n    /**\r\n     * @dev Returns true if `_operator` is an approved operator for `_owner`, false otherwise.\r\n     * @param _owner The address that owns the NFTs.\r\n     * @param _operator The address that acts on behalf of the owner.\r\n     * @return True if approved for all, false otherwise.\r\n     */\r\n    function isApprovedForAll(\r\n        address _owner,\r\n        address _operator\r\n    )\r\n    external\r\n    view\r\n    returns (bool);\r\n\r\n}\r\n\r\n// File: contracts/external/asset_introducers/interfaces/IERC721Enumerable.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity >=0.5.0;\r\n\r\n/**\r\n * @dev Optional enumeration extension for ERC-721 non-fungible token standard.\r\n * See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md.\r\n */\r\ninterface IERC721Enumerable {\r\n\r\n    /**\r\n     * @dev Returns a count of valid NFTs tracked by this contract, where each one of them has an\r\n     * assigned and queryable owner not equal to the zero address.\r\n     * @return Total supply of NFTs.\r\n     */\r\n    function totalSupply()\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the token identifier for the `_index`th NFT. Sort order is not specified.\r\n     * @param _index A counter less than `totalSupply()`.\r\n     * @return Token id.\r\n     */\r\n    function tokenByIndex(\r\n        uint256 _index\r\n    )\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the token identifier for the `_index`th NFT assigned to `_owner`. Sort order is\r\n     * not specified. It throws if `_index` >= `balanceOf(_owner)` or if `_owner` is the zero address,\r\n     * representing invalid NFTs.\r\n     * @param _owner An address where we are interested in NFTs owned by them.\r\n     * @param _index A counter less than `balanceOf(_owner)`.\r\n     * @return Token id.\r\n     */\r\n    function tokenOfOwnerByIndex(\r\n        address _owner,\r\n        uint256 _index\r\n    )\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n}\r\n\r\n// File: contracts/external/asset_introducers/interfaces/IERC721Metadata.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity >=0.5.0;\r\n\r\n/**\r\n * @dev Optional metadata extension for ERC-721 non-fungible token standard.\r\n * See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md.\r\n */\r\ninterface IERC721Metadata {\r\n\r\n    /**\r\n     * @dev Returns a descriptive name for a collection of NFTs in this contract.\r\n     * @return _name Representing name.\r\n     */\r\n    function name()\r\n    external\r\n    view\r\n    returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns a abbreviated name for a collection of NFTs in this contract.\r\n     * @return _symbol Representing symbol.\r\n     */\r\n    function symbol()\r\n    external\r\n    view\r\n    returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns a distinct Uniform Resource Identifier (URI) for a given asset. It Throws if\r\n     * `_tokenId` is not a valid NFT. URIs are defined in RFC3986. The URI may point to a JSON file\r\n     * that conforms to the \"ERC721 Metadata JSON Schema\".\r\n     * @return URI of _tokenId.\r\n     */\r\n    function tokenURI(uint256 _tokenId)\r\n    external\r\n    view\r\n    returns (string memory);\r\n\r\n}\r\n\r\n// File: contracts/external/asset_introducers/interfaces/IERC721TokenReceiver.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\npragma solidity ^0.5.0;\r\n\r\ninterface IERC721TokenReceiver {\r\n\r\n    /**\r\n     * @notice  Handles the receipt of an NFT\r\n     * @dev The ERC721 smart contract calls this function on the recipient after a `transfer`. This function MAY throw\r\n     *      to revert and reject the transfer. Return of other than the magic value MUST result in the transaction\r\n     *      being reverted. Note: the contract address is always the message sender.\r\n     *\r\n     * @param _operator The address which called `safeTransferFrom` function\r\n     * @param _from     The address which previously owned the token\r\n     * @param _tokenId  The NFT identifier which is being transferred\r\n     * @param _data     Additional data with no specified format\r\n     * @return          `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))` unless a reversion\r\n     *                  occurs.\r\n     */\r\n    function onERC721Received(\r\n        address _operator,\r\n        address _from,\r\n        uint256 _tokenId,\r\n        bytes calldata _data\r\n    ) external returns (bytes4);\r\n\r\n}\r\n\r\n// File: contracts/external/asset_introducers/interfaces/IOpenSeaProxyRegistry.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\ninterface IOpenSeaProxyRegistry {\r\n\r\n    function proxies(address user) external view returns (address);\r\n\r\n}\r\n\r\n// File: contracts/external/asset_introducers/impl/ERC721TokenLib.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity ^0.5.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of ERC-721 non-fungible token standard.\r\n */\r\nlibrary ERC721TokenLib {\r\n\r\n    using SafeMath for uint;\r\n    using OpenZeppelinUpgradesAddress for address;\r\n    using AssetIntroducerVotingLib for AssetIntroducerData.VoteStateV1;\r\n\r\n    // *************************\r\n    // ***** Events\r\n    // *************************\r\n\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 indexed tokenId\r\n    );\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed operator,\r\n        uint256 indexed tokenId\r\n    );\r\n\r\n    event ApprovalForAll(\r\n        address indexed owner,\r\n        address indexed operator,\r\n        bool approved\r\n    );\r\n\r\n    event BaseURIChanged(string newBaseURI);\r\n\r\n    // *************************\r\n    // ***** Constants\r\n    // *************************\r\n\r\n    /**\r\n     * @dev Magic value of a smart contract that can receive NFT.\r\n     * Equal to: bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\")).\r\n     */\r\n    bytes4 internal constant MAGIC_ON_ERC721_RECEIVED = 0x150b7a02;\r\n\r\n    bytes4 internal constant ERC721_INTERFACE_ID = 0x80ac58cd;\r\n\r\n    /// The entry-point into the linked list\r\n    uint internal constant LINKED_LIST_GUARD = uint(1);\r\n\r\n    // *************************\r\n    // ***** Functions\r\n    // *************************\r\n\r\n    function linkedListGuard() public pure returns (uint) {\r\n        return LINKED_LIST_GUARD;\r\n    }\r\n\r\n    function initialize(\r\n        AssetIntroducerData.ERC721StateV1 storage __state,\r\n        string memory __baseURI,\r\n        address __openSeaProxyRegistry\r\n    )\r\n    public {\r\n        __state.baseURI = __baseURI;\r\n        __state.openSeaProxyRegistry = __openSeaProxyRegistry;\r\n        __state.interfaceIdToIsSupportedMap[ERC721_INTERFACE_ID] = true;\r\n        __state.lastTokenId = LINKED_LIST_GUARD;\r\n    }\r\n\r\n    function setBaseURI(\r\n        AssetIntroducerData.ERC721StateV1 storage __state,\r\n        string calldata __baseURI\r\n    ) external {\r\n        __state.baseURI = __baseURI;\r\n        emit BaseURIChanged(__baseURI);\r\n    }\r\n\r\n    function tokenURI(\r\n        AssetIntroducerData.ERC721StateV1 storage __state,\r\n        uint __tokenId\r\n    ) public view returns (string memory) {\r\n        bytes memory reversedNumber = new bytes(96);\r\n        uint stringLength = 0;\r\n        while (__tokenId != 0) {\r\n            uint remainder = __tokenId % 10;\r\n            __tokenId = __tokenId / 10;\r\n            reversedNumber[stringLength++] = byte(uint8(48 + remainder));\r\n        }\r\n        bytes memory tokenIdBytes = new bytes(stringLength);\r\n        for (uint j = 0; j < stringLength; j++) {\r\n            tokenIdBytes[j] = reversedNumber[stringLength - 1 - j];\r\n        }\r\n        return string(abi.encodePacked(__state.baseURI, tokenIdBytes));\r\n    }\r\n\r\n    function supportsInterface(\r\n        AssetIntroducerData.ERC721StateV1 storage __state,\r\n        bytes4 __interfaceId\r\n    )\r\n    public view returns (bool) {\r\n        return __interfaceId != 0xffffffff && __state.interfaceIdToIsSupportedMap[__interfaceId];\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        AssetIntroducerData.ERC721StateV1 storage __state,\r\n        AssetIntroducerData.VoteStateV1 storage __voteState,\r\n        address __from,\r\n        address __to,\r\n        uint256 __tokenId,\r\n        bytes memory __data,\r\n        AssetIntroducerData.AssetIntroducer memory __assetIntroducer\r\n    )\r\n    public {\r\n        address tokenOwner = __state.idToOwnerMap[__tokenId];\r\n        require(\r\n            tokenOwner == __from,\r\n            \"ERC721TokenLib::_safeTransferFrom NOT_OWNER\"\r\n        );\r\n        require(\r\n            __to != address(0),\r\n            \"ERC721TokenLib::_safeTransferFrom INVALID_RECIPIENT\"\r\n        );\r\n\r\n        _transfer(__state, __voteState, __to, __tokenId, __assetIntroducer);\r\n\r\n        _verifyCanReceiveTokens(__from, __to, __tokenId, __data);\r\n    }\r\n\r\n    function transferFrom(\r\n        AssetIntroducerData.ERC721StateV1 storage __state,\r\n        AssetIntroducerData.VoteStateV1 storage __voteState,\r\n        address __from,\r\n        address __to,\r\n        uint256 __tokenId,\r\n        AssetIntroducerData.AssetIntroducer memory __assetIntroducer\r\n    )\r\n    public {\r\n        address tokenOwner = __state.idToOwnerMap[__tokenId];\r\n\r\n        require(\r\n            tokenOwner == __from,\r\n            \"ERC721TokenLib::transferFrom: NOT_OWNER\"\r\n        );\r\n        require(\r\n            __to != address(0),\r\n            \"ERC721TokenLib::transferFrom: INVALID_RECIPIENT\"\r\n        );\r\n\r\n        _transfer(__state, __voteState, __to, __tokenId, __assetIntroducer);\r\n\r\n        _verifyCanReceiveTokens(__from, __to, __tokenId, \"\");\r\n    }\r\n\r\n    function mint(\r\n        AssetIntroducerData.ERC721StateV1 storage __state,\r\n        AssetIntroducerData.VoteStateV1 storage __voteState,\r\n        address __to,\r\n        uint __tokenId,\r\n        uint128 __dmgLocked\r\n    )\r\n    public {\r\n        require(\r\n            __to != address(0),\r\n            \"ERC721TokenLib::mint INVALID_RECIPIENT\"\r\n        );\r\n        require(\r\n            __state.idToOwnerMap[__tokenId] == address(0),\r\n            \"ERC721TokenLib::mint TOKEN_ALREADY_EXISTS\"\r\n        );\r\n\r\n        _addTokenToNewOwner(__state, __to, __tokenId);\r\n\r\n        __state.allTokens[__state.lastTokenId] = __tokenId;\r\n        __state.lastTokenId = __tokenId;\r\n\r\n        __state.totalSupply += 1;\r\n\r\n        AssetIntroducerVotingLib.moveDelegates(__voteState, address(0), __to, __dmgLocked);\r\n\r\n        emit Transfer(address(0), __to, __tokenId);\r\n    }\r\n\r\n    function burn(\r\n        AssetIntroducerData.ERC721StateV1 storage __state,\r\n        AssetIntroducerData.VoteStateV1 storage __voteState,\r\n        uint __tokenId,\r\n        uint128 __dmgLocked\r\n    )\r\n    public {\r\n        address tokenOwner = __state.idToOwnerMap[__tokenId];\r\n        _clearApproval(__state, __tokenId);\r\n        _removeToken(__state, tokenOwner, __tokenId);\r\n\r\n        uint totalSupply = __state.totalSupply;\r\n        uint previousTokenId = LINKED_LIST_GUARD;\r\n        for (uint i = 0; i < totalSupply; i++) {\r\n            if (__state.allTokens[previousTokenId] == __tokenId) {\r\n                __state.allTokens[previousTokenId] = __state.allTokens[__tokenId];\r\n                break;\r\n            }\r\n            previousTokenId = __state.allTokens[previousTokenId];\r\n        }\r\n\r\n        if (__tokenId == __state.lastTokenId) {\r\n            __state.lastTokenId = __state.allTokens[previousTokenId];\r\n        }\r\n\r\n        __state.totalSupply -= 1;\r\n\r\n        AssetIntroducerVotingLib.moveDelegates(__voteState, tokenOwner, address(0), __dmgLocked);\r\n\r\n        emit Transfer(tokenOwner, address(0), __tokenId);\r\n    }\r\n\r\n    function approve(\r\n        AssetIntroducerData.ERC721StateV1 storage __state,\r\n        address __spender,\r\n        uint256 __tokenId\r\n    )\r\n    public {\r\n        address tokenOwner = __state.idToOwnerMap[__tokenId];\r\n        require(\r\n            __spender != tokenOwner,\r\n            \"ERC721TokenLib::approve: SPENDER_MUST_NOT_BE_OWNER\"\r\n        );\r\n\r\n        __state.idToSpenderMap[__tokenId] = __spender;\r\n        emit Approval(tokenOwner, __spender, __tokenId);\r\n    }\r\n\r\n    function setApprovalForAll(\r\n        AssetIntroducerData.ERC721StateV1 storage __state,\r\n        address __operator,\r\n        bool _isApproved\r\n    )\r\n    public {\r\n        __state.ownerToOperatorToIsApprovedMap[msg.sender][__operator] = _isApproved;\r\n        emit ApprovalForAll(msg.sender, __operator, _isApproved);\r\n    }\r\n\r\n    function balanceOf(\r\n        AssetIntroducerData.ERC721StateV1 storage __state,\r\n        address __owner\r\n    )\r\n    public view returns (uint) {\r\n        require(\r\n            __owner != address(0),\r\n            \"ERC721TokenLib::balanceOf: INVALID_OWNER\"\r\n        );\r\n        return __state.ownerToTokenCount[__owner];\r\n    }\r\n\r\n    function tokenByIndex(\r\n        AssetIntroducerData.ERC721StateV1 storage __state,\r\n        uint __index\r\n    )\r\n    public view returns (uint) {\r\n        require(\r\n            __index < __state.totalSupply,\r\n            \"ERC721TokenLib::tokenByIndex: INVALID_INDEX\"\r\n        );\r\n\r\n        uint tokenId = LINKED_LIST_GUARD;\r\n        for (uint i = 0; i <= __index; i++) {\r\n            tokenId = __state.allTokens[tokenId];\r\n        }\r\n\r\n        return tokenId;\r\n    }\r\n\r\n    function tokenOfOwnerByIndex(\r\n        AssetIntroducerData.ERC721StateV1 storage __state,\r\n        address __owner,\r\n        uint __index\r\n    )\r\n    public view returns (uint) {\r\n        require(\r\n            __index < balanceOf(__state, __owner),\r\n            \"ERC721TokenLib::tokenOfOwnerByIndex: INVALID_INDEX\"\r\n        );\r\n\r\n        uint tokenId = LINKED_LIST_GUARD;\r\n        for (uint i = 0; i <= __index; i++) {\r\n            tokenId = __state.ownerToTokenIds[__owner][tokenId];\r\n        }\r\n        return tokenId;\r\n    }\r\n\r\n    function ownerOf(\r\n        AssetIntroducerData.ERC721StateV1 storage __state,\r\n        uint __tokenId\r\n    )\r\n    public view returns (address) {\r\n        address owner = __state.idToOwnerMap[__tokenId];\r\n        require(\r\n            owner != address(0),\r\n            \"ERC721TokenLib::ownerOf INVALID_TOKEN\"\r\n        );\r\n        return owner;\r\n    }\r\n\r\n    function getApproved(\r\n        AssetIntroducerData.ERC721StateV1 storage __state,\r\n        uint256 __tokenId\r\n    )\r\n    public view returns (address) {\r\n        return __state.idToSpenderMap[__tokenId];\r\n    }\r\n\r\n    function isApprovedForAll(\r\n        AssetIntroducerData.ERC721StateV1 storage __state,\r\n        address __owner,\r\n        address __operator\r\n    )\r\n    public view returns (bool) {\r\n        if (IOpenSeaProxyRegistry(__state.openSeaProxyRegistry).proxies(__owner) == __operator) {\r\n            return true;\r\n        }\r\n\r\n        return __state.ownerToOperatorToIsApprovedMap[__owner][__operator];\r\n    }\r\n\r\n    function getAllTokensOf(\r\n        AssetIntroducerData.ERC721StateV1 storage __state,\r\n        address __owner\r\n    )\r\n    public view returns (uint[] memory) {\r\n        uint tokenCount = __state.ownerToTokenCount[__owner];\r\n        uint[] memory tokens = new uint[](tokenCount);\r\n\r\n        uint tokenId = LINKED_LIST_GUARD;\r\n        for (uint i = 0; i < tokenCount; i++) {\r\n            tokenId = __state.ownerToTokenIds[__owner][tokenId];\r\n            tokens[i] = tokenId;\r\n        }\r\n\r\n        return tokens;\r\n    }\r\n\r\n    // ******************************\r\n    // ***** Internal Functions\r\n    // ******************************\r\n\r\n    /**\r\n     * @dev Actually preforms the transfer. Checks that \"__to\" is not this contract\r\n     * @param __to Address of a new owner.\r\n     * @param __tokenId The NFT that is being transferred.\r\n     */\r\n    function _transfer(\r\n        AssetIntroducerData.ERC721StateV1 storage __state,\r\n        AssetIntroducerData.VoteStateV1 storage __voteState,\r\n        address __to,\r\n        uint256 __tokenId,\r\n        AssetIntroducerData.AssetIntroducer memory assetIntroducer\r\n    )\r\n    internal {\r\n        // The token must be unactivated in order to withdraw funds\r\n        require(\r\n            !assetIntroducer.isAllowedToWithdrawFunds,\r\n            \"AssetIntroducerV1::_transfer: TRANSFER_DISABLED\"\r\n        );\r\n\r\n        // Get the \"from\" address (the owner) before effectuating the transfer via the call to \"super\"\r\n        address from = __state.idToOwnerMap[__tokenId];\r\n        __voteState.moveDelegates(from, __to, assetIntroducer.dmgLocked);\r\n\r\n        _clearApproval(__state, __tokenId);\r\n\r\n        _removeToken(__state, from, __tokenId);\r\n        _addTokenToNewOwner(__state, __to, __tokenId);\r\n\r\n        emit Transfer(from, __to, __tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a NFT from owner.\r\n     * @notice Use and override this function with caution. Wrong usage can have serious consequences.\r\n     * @param __from Address from which we want to remove the NFT.\r\n     * @param __tokenId Which NFT we want to remove.\r\n     */\r\n    function _removeToken(\r\n        AssetIntroducerData.ERC721StateV1 storage __state,\r\n        address __from,\r\n        uint256 __tokenId\r\n    )\r\n    internal {\r\n        require(\r\n            __state.idToOwnerMap[__tokenId] == __from,\r\n            \"ERC721TokenLib::_removeToken: NOT_OWNER\"\r\n        );\r\n\r\n        __state.ownerToTokenCount[__from] = __state.ownerToTokenCount[__from] - 1;\r\n        uint previousTokenId = LINKED_LIST_GUARD;\r\n        uint indexedTokenId = __state.ownerToTokenIds[__from][previousTokenId];\r\n\r\n        while (indexedTokenId != uint(0)) {\r\n            if (indexedTokenId == __tokenId) {\r\n                uint nextTokenId = __state.ownerToTokenIds[__from][__tokenId];\r\n                __state.ownerToTokenIds[__from][previousTokenId] = nextTokenId;\r\n                delete __state.ownerToTokenIds[__from][__tokenId];\r\n                break;\r\n            }\r\n            // Proceed to the next element in the linked list\r\n            previousTokenId = indexedTokenId;\r\n            indexedTokenId = __state.ownerToTokenIds[__from][indexedTokenId];\r\n        }\r\n\r\n        delete __state.idToOwnerMap[__tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev Assigns a new NFT to owner.\r\n     * @notice Use and override this function with caution. Wrong usage can have serious consequences.\r\n     * @param __to Address to which we want to add the NFT.\r\n     * @param __tokenId Which NFT we want to add.\r\n     */\r\n    function _addTokenToNewOwner(\r\n        AssetIntroducerData.ERC721StateV1 storage __state,\r\n        address __to,\r\n        uint256 __tokenId\r\n    )\r\n    internal {\r\n        require(\r\n            __state.idToOwnerMap[__tokenId] == address(0),\r\n            \"ERC721TokenLib::_addTokenToNewOwner TOKEN_ALREADY_EXISTS\"\r\n        );\r\n\r\n        __state.idToOwnerMap[__tokenId] = __to;\r\n        __state.ownerToTokenCount[__to] = __state.ownerToTokenCount[__to] + 1;\r\n\r\n        /// Append the token to the end of the linked list of the owner.\r\n        uint previousIndex = LINKED_LIST_GUARD;\r\n        uint indexedTokenId = __state.ownerToTokenIds[__to][previousIndex];\r\n\r\n        while (indexedTokenId != uint(0)) {\r\n            previousIndex = indexedTokenId;\r\n            indexedTokenId = __state.ownerToTokenIds[__to][indexedTokenId];\r\n        }\r\n        __state.ownerToTokenIds[__to][previousIndex] = __tokenId;\r\n    }\r\n\r\n    /**\r\n     * @dev Clears the current approval of a given NFT ID.\r\n     * @param __tokenId ID of the NFT to be transferred.\r\n     */\r\n    function _clearApproval(\r\n        AssetIntroducerData.ERC721StateV1 storage __state,\r\n        uint256 __tokenId\r\n    )\r\n    internal {\r\n        if (__state.idToSpenderMap[__tokenId] != address(0)) {\r\n            delete __state.idToSpenderMap[__tokenId];\r\n        }\r\n    }\r\n\r\n    function _verifyCanReceiveTokens(\r\n        address __from,\r\n        address __to,\r\n        uint __tokenId,\r\n        bytes memory __data\r\n    ) internal {\r\n        if (__to.isContract()) {\r\n            bytes memory callData = abi.encodeWithSelector(IERC721TokenReceiver(__to).onERC721Received.selector, msg.sender, __from, __tokenId, __data);\r\n            (bool success, bytes memory returnData) = address(__to).call(callData);\r\n            require(\r\n                success && abi.decode(returnData, (bytes4)) == MAGIC_ON_ERC721_RECEIVED,\r\n                \"ERC721TokenLib::_verifyCanReceiveTokens: UNABLE_TO_RECEIVE_TOKEN\"\r\n            );\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newBaseURI\",\"type\":\"string\"}],\"name\":\"BaseURIChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"linkedListGuard\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"ERC721TokenLib","CompilerVersion":"v0.5.13+commit.5b0b510c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"istanbul","Library":"AssetIntroducerVotingLib:eb9f5a6a9a124f12c33234e37cd99dca83e90b7a","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"bzzr://6f0d32df4bdbe785675390158ec01498cc82aa22f1d7543802eb358942d9cd89"}]}