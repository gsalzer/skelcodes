{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *  @reviewers: [@clesaege, @unknownunknown1, @ferittuncer]\r\n *  @auditors: []\r\n *  @bounties: [<14 days 10 ETH max payout>]\r\n *  @deployments: []\r\n */\r\n\r\n\r\n/**\r\n *  @title SortitionSumTreeFactory\r\n *  @author Enrique Piqueras - <epiquerass@gmail.com>\r\n *  @dev A factory of trees that keep track of staked values for sortition.\r\n */\r\nlibrary SortitionSumTreeFactory {\r\n    /* Structs */\r\n\r\n    struct SortitionSumTree {\r\n        uint K; // The maximum number of childs per node.\r\n        // We use this to keep track of vacant positions in the tree after removing a leaf. This is for keeping the tree as balanced as possible without spending gas on moving nodes around.\r\n        uint[] stack;\r\n        uint[] nodes;\r\n        // Two-way mapping of IDs to node indexes. Note that node index 0 is reserved for the root node, and means the ID does not have a node.\r\n        mapping(bytes32 => uint) IDsToNodeIndexes;\r\n        mapping(uint => bytes32) nodeIndexesToIDs;\r\n    }\r\n\r\n    /* Storage */\r\n\r\n    struct SortitionSumTrees {\r\n        mapping(bytes32 => SortitionSumTree) sortitionSumTrees;\r\n    }\r\n\r\n    /* internal */\r\n\r\n    /**\r\n     *  @dev Create a sortition sum tree at the specified key.\r\n     *  @param _key The key of the new tree.\r\n     *  @param _K The number of children each node in the tree should have.\r\n     */\r\n    function createTree(SortitionSumTrees storage self, bytes32 _key, uint _K) internal {\r\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\r\n        require(tree.K == 0, \"Tree already exists.\");\r\n        require(_K > 1, \"K must be greater than one.\");\r\n        tree.K = _K;\r\n        tree.stack = new uint[](0);\r\n        tree.nodes = new uint[](0);\r\n        tree.nodes.push(0);\r\n    }\r\n\r\n    /**\r\n     *  @dev Set a value of a tree.\r\n     *  @param _key The key of the tree.\r\n     *  @param _value The new value.\r\n     *  @param _ID The ID of the value.\r\n     *  `O(log_k(n))` where\r\n     *  `k` is the maximum number of childs per node in the tree,\r\n     *   and `n` is the maximum number of nodes ever appended.\r\n     */\r\n    function set(SortitionSumTrees storage self, bytes32 _key, uint _value, bytes32 _ID) internal {\r\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\r\n        uint treeIndex = tree.IDsToNodeIndexes[_ID];\r\n\r\n        if (treeIndex == 0) { // No existing node.\r\n            if (_value != 0) { // Non zero value.\r\n                // Append.\r\n                // Add node.\r\n                if (tree.stack.length == 0) { // No vacant spots.\r\n                    // Get the index and append the value.\r\n                    treeIndex = tree.nodes.length;\r\n                    tree.nodes.push(_value);\r\n\r\n                    // Potentially append a new node and make the parent a sum node.\r\n                    if (treeIndex != 1 && (treeIndex - 1) % tree.K == 0) { // Is first child.\r\n                        uint parentIndex = treeIndex / tree.K;\r\n                        bytes32 parentID = tree.nodeIndexesToIDs[parentIndex];\r\n                        uint newIndex = treeIndex + 1;\r\n                        tree.nodes.push(tree.nodes[parentIndex]);\r\n                        delete tree.nodeIndexesToIDs[parentIndex];\r\n                        tree.IDsToNodeIndexes[parentID] = newIndex;\r\n                        tree.nodeIndexesToIDs[newIndex] = parentID;\r\n                    }\r\n                } else { // Some vacant spot.\r\n                    // Pop the stack and append the value.\r\n                    treeIndex = tree.stack[tree.stack.length - 1];\r\n                    tree.stack.pop();\r\n                    tree.nodes[treeIndex] = _value;\r\n                }\r\n\r\n                // Add label.\r\n                tree.IDsToNodeIndexes[_ID] = treeIndex;\r\n                tree.nodeIndexesToIDs[treeIndex] = _ID;\r\n\r\n                updateParents(self, _key, treeIndex, true, _value);\r\n            }\r\n        } else { // Existing node.\r\n            if (_value == 0) { // Zero value.\r\n                // Remove.\r\n                // Remember value and set to 0.\r\n                uint value = tree.nodes[treeIndex];\r\n                tree.nodes[treeIndex] = 0;\r\n\r\n                // Push to stack.\r\n                tree.stack.push(treeIndex);\r\n\r\n                // Clear label.\r\n                delete tree.IDsToNodeIndexes[_ID];\r\n                delete tree.nodeIndexesToIDs[treeIndex];\r\n\r\n                updateParents(self, _key, treeIndex, false, value);\r\n            } else if (_value != tree.nodes[treeIndex]) { // New, non zero value.\r\n                // Set.\r\n                bool plusOrMinus = tree.nodes[treeIndex] <= _value;\r\n                uint plusOrMinusValue = plusOrMinus ? _value - tree.nodes[treeIndex] : tree.nodes[treeIndex] - _value;\r\n                tree.nodes[treeIndex] = _value;\r\n\r\n                updateParents(self, _key, treeIndex, plusOrMinus, plusOrMinusValue);\r\n            }\r\n        }\r\n    }\r\n\r\n    /* internal Views */\r\n\r\n    /**\r\n     *  @dev Query the leaves of a tree. Note that if `startIndex == 0`, the tree is empty and the root node will be returned.\r\n     *  @param _key The key of the tree to get the leaves from.\r\n     *  @param _cursor The pagination cursor.\r\n     *  @param _count The number of items to return.\r\n     *  @return startIndex The index at which leaves start\r\n     *  @return values The values of the returned leaves\r\n     *  @return hasMore Whether there are more for pagination.\r\n     *  `O(n)` where\r\n     *  `n` is the maximum number of nodes ever appended.\r\n     */\r\n    function queryLeafs(\r\n        SortitionSumTrees storage self,\r\n        bytes32 _key,\r\n        uint _cursor,\r\n        uint _count\r\n    ) internal view returns(uint startIndex, uint[] memory values, bool hasMore) {\r\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\r\n\r\n        // Find the start index.\r\n        for (uint i = 0; i < tree.nodes.length; i++) {\r\n            if ((tree.K * i) + 1 >= tree.nodes.length) {\r\n                startIndex = i;\r\n                break;\r\n            }\r\n        }\r\n\r\n        // Get the values.\r\n        uint loopStartIndex = startIndex + _cursor;\r\n        values = new uint[](loopStartIndex + _count > tree.nodes.length ? tree.nodes.length - loopStartIndex : _count);\r\n        uint valuesIndex = 0;\r\n        for (uint j = loopStartIndex; j < tree.nodes.length; j++) {\r\n            if (valuesIndex < _count) {\r\n                values[valuesIndex] = tree.nodes[j];\r\n                valuesIndex++;\r\n            } else {\r\n                hasMore = true;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  @dev Draw an ID from a tree using a number. Note that this function reverts if the sum of all values in the tree is 0.\r\n     *  @param _key The key of the tree.\r\n     *  @param _drawnNumber The drawn number.\r\n     *  @return ID The drawn ID.\r\n     *  `O(k * log_k(n))` where\r\n     *  `k` is the maximum number of childs per node in the tree,\r\n     *   and `n` is the maximum number of nodes ever appended.\r\n     */\r\n    function draw(SortitionSumTrees storage self, bytes32 _key, uint _drawnNumber) internal view returns(bytes32 ID) {\r\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\r\n        uint treeIndex = 0;\r\n        uint currentDrawnNumber = _drawnNumber % tree.nodes[0];\r\n\r\n        while ((tree.K * treeIndex) + 1 < tree.nodes.length)  // While it still has children.\r\n            for (uint i = 1; i <= tree.K; i++) { // Loop over children.\r\n                uint nodeIndex = (tree.K * treeIndex) + i;\r\n                uint nodeValue = tree.nodes[nodeIndex];\r\n\r\n                if (currentDrawnNumber >= nodeValue) currentDrawnNumber -= nodeValue; // Go to the next child.\r\n                else { // Pick this child.\r\n                    treeIndex = nodeIndex;\r\n                    break;\r\n                }\r\n            }\r\n        \r\n        ID = tree.nodeIndexesToIDs[treeIndex];\r\n    }\r\n\r\n    /** @dev Gets a specified ID's associated value.\r\n     *  @param _key The key of the tree.\r\n     *  @param _ID The ID of the value.\r\n     *  @return value The associated value.\r\n     */\r\n    function stakeOf(SortitionSumTrees storage self, bytes32 _key, bytes32 _ID) internal view returns(uint value) {\r\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\r\n        uint treeIndex = tree.IDsToNodeIndexes[_ID];\r\n\r\n        if (treeIndex == 0) value = 0;\r\n        else value = tree.nodes[treeIndex];\r\n    }\r\n\r\n    function total(SortitionSumTrees storage self, bytes32 _key) internal view returns (uint) {\r\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\r\n        if (tree.nodes.length == 0) {\r\n            return 0;\r\n        } else {\r\n            return tree.nodes[0];\r\n        }\r\n    }\r\n\r\n    /* Private */\r\n\r\n    /**\r\n     *  @dev Update all the parents of a node.\r\n     *  @param _key The key of the tree to update.\r\n     *  @param _treeIndex The index of the node to start from.\r\n     *  @param _plusOrMinus Wether to add (true) or substract (false).\r\n     *  @param _value The value to add or substract.\r\n     *  `O(log_k(n))` where\r\n     *  `k` is the maximum number of childs per node in the tree,\r\n     *   and `n` is the maximum number of nodes ever appended.\r\n     */\r\n    function updateParents(SortitionSumTrees storage self, bytes32 _key, uint _treeIndex, bool _plusOrMinus, uint _value) private {\r\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\r\n\r\n        uint parentIndex = _treeIndex;\r\n        while (parentIndex != 0) {\r\n            parentIndex = (parentIndex - 1) / tree.K;\r\n            tree.nodes[parentIndex] = _plusOrMinus ? tree.nodes[parentIndex] + _value : tree.nodes[parentIndex] - _value;\r\n        }\r\n    }\r\n}\r\n\r\nlibrary UniformRandomNumber {\r\n  /// @author Brendan Asselstine\r\n  /// @notice Select a random number without modulo bias using a random seed and upper bound\r\n  /// @param _entropy The seed for randomness\r\n  /// @param _upperBound The upper bound of the desired number\r\n  /// @return A random number less than the _upperBound\r\n  function uniform(uint256 _entropy, uint256 _upperBound) internal pure returns (uint256) {\r\n    uint256 min = -_upperBound % _upperBound;\r\n    uint256 random = _entropy;\r\n    while (true) {\r\n      if (random >= min) {\r\n        break;\r\n      }\r\n      random = uint256(keccak256(abi.encodePacked(random)));\r\n    }\r\n    return random % _upperBound;\r\n  }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a * b;\r\n        require(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        require(b > 0);\r\n        uint c = a / b;\r\n        require(a == b * c + a % b);\r\n        return c;\r\n    }\r\n\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        require(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function max64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function max256(uint a, uint b) internal pure returns (uint) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min256(uint a, uint b) internal pure returns (uint) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface yVaultInterface is IERC20 {\r\n    function token() external view returns (address);\r\n    function balance() external view returns (uint);\r\n    function deposit(uint _amount) external;\r\n    function withdraw(uint _shares) external;\r\n    function getPricePerFullShare() external view returns (uint);\r\n}\r\n\r\ninterface Uni {\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface DistribInterface {\r\n\tfunction distribute(uint entropy, address winner) external;\r\n}\r\n\r\ncontract PooTogether is Ownable {\r\n\tusing SafeMath for uint;\r\n\r\n\t// Terminology\r\n\t// base = the base token of the vault (vault.token)\r\n\t// share = the share tokeni, i.e. the vault token itself\r\n\t// example: base is yCrv, share is yUSD\r\n\r\n\tbytes32 public constant TREE_KEY = \"PooPoo\";\r\n\r\n\tuint public totalBase;\r\n\tmapping (address => uint) public perUserBase;\r\n\tyVaultInterface public immutable vault;\r\n\tDistribInterface public distributor;\r\n\tuint public lockedUntilBlock;\r\n\tbytes32 public secretHash;\r\n\r\n\t// events\r\n\tevent Deposit(address indexed user, uint amountBase, uint amountShares, uint time);\r\n\tevent Withdraw(address indexed user, uint amountBase, uint amountShares, uint time);\r\n\tevent Locked(uint untilBlock, uint time);\r\n\tevent Unlocked(uint time);\r\n\r\n\t// NOTE: we can only access the hash for the last 256 blocks (~ 55 minutes assuming 13.04s block times); we take the 40th to last block (~8 mins)\r\n\t// Note: must be at least 40 for security properties to hold! We use `blockhash(block.number - 40)` for entropy to mitigate reorgs to manipulate the winner,\r\n\t// but if the block taken is before the lock (LOCK_FOR_BLOCKS < 40), then the operator can manipulate the secret bsaed on the known block hash!\r\n\t// 46 blocks is around 10 minutes\r\n\tuint public constant LOCK_FOR_BLOCKS = 46;\r\n\t// The unlock safety is the amount of blocks we wait after lockedUntilBlock before *anyone* (not only the operator) can unlock\r\n\tuint public constant UNLOCK_SAFETY_BLOCKS = 200;\r\n\r\n\tusing SortitionSumTreeFactory for SortitionSumTreeFactory.SortitionSumTrees;\r\n\tSortitionSumTreeFactory.SortitionSumTrees internal sortitionSumTrees;\r\n\r\n\tconstructor (yVaultInterface _vault, DistribInterface _distrib) public {\r\n\t\tvault = _vault;\r\n\t\tdistributor = _distrib;\r\n\t\tsortitionSumTrees.createTree(TREE_KEY, 4);\r\n\t}\r\n\r\n\t// Why we have locks:\r\n\t// Outcome (winner) is affected by three factors: the secret (which uses commit-reveal),\r\n\t// ...the entropy block (mined after the commit but before the reveal) and the overall sortition tree state (deposits)\r\n\t// Deposits/withdrawals get locked once the secret is committed, so that the operator can't manipulate results using their inside knowledge\r\n\t// of the secret, after the entropy block has been mined\r\n\t// Miners can't manipulate cause they don't know the secret\r\n\r\n\t// Why we can deposit/withdraw both base and shares\r\n\t// cause with different vaults different things make sense - eg with yUSD most people would be holding yUSD\r\n\t// while with USDT, most people might be holding USDT rather than the vault share token (yUSDT)\r\n\tfunction deposit(uint amountBase) external {\r\n\t\trequire(lockedUntilBlock == 0, \"pool is locked\");\r\n\r\n\t\tsetUserBase(msg.sender, perUserBase[msg.sender].add(amountBase));\r\n\t\ttotalBase = totalBase.add(amountBase);\r\n\r\n\t\tIERC20 token = IERC20(vault.token());\r\n\t\trequire(token.transferFrom(msg.sender, address(this), amountBase));\r\n\t\ttoken.approve(address(vault), amountBase);\r\n\t\tvault.deposit(amountBase);\r\n\r\n\t\temit Deposit(msg.sender, amountBase, toShares(amountBase), now);\r\n\t}\r\n\r\n\tfunction depositShares(uint amountShares) external {\r\n\t\trequire(lockedUntilBlock == 0, \"pool is locked\");\r\n\t\tuint amountBase = toBase(amountShares);\r\n\r\n\t\tsetUserBase(msg.sender, perUserBase[msg.sender].add(amountBase));\r\n\t\ttotalBase = totalBase.add(amountBase);\r\n\r\n\t\trequire(vault.transferFrom(msg.sender, address(this), amountShares));\r\n\r\n\t\temit Deposit(msg.sender, amountBase, amountShares, now);\r\n\t}\r\n\r\n\tfunction withdraw(uint amountBase) external {\r\n\t\trequire(lockedUntilBlock == 0, \"pool is locked\");\r\n\t\trequire(perUserBase[msg.sender] >= amountBase, \"insufficient funds\");\r\n\r\n\t\tsetUserBase(msg.sender, perUserBase[msg.sender].sub(amountBase));\r\n\t\ttotalBase = totalBase.sub(amountBase);\r\n\r\n\t\t// XXX this may be a problem cause shares sounds down\r\n\t\tuint amountShares = toShares(amountBase);\r\n\t\tvault.withdraw(amountShares);\r\n\t\trequire(IERC20(vault.token()).transfer(msg.sender, amountBase));\r\n\r\n\t\temit Withdraw(msg.sender, amountBase, amountShares, now);\r\n\t}\r\n\r\n\tfunction withdrawShares(uint amountShares) external {\r\n\t\trequire(lockedUntilBlock == 0, \"pool is locked\");\r\n\t\tuint amountBase = toBase(amountShares);\r\n\t\trequire(perUserBase[msg.sender] >= amountBase, \"insufficient funds\");\r\n\r\n\t\tsetUserBase(msg.sender, perUserBase[msg.sender].sub(amountBase));\r\n\t\ttotalBase = totalBase.sub(amountBase);\r\n\r\n\t\trequire(vault.transfer(msg.sender, amountShares));\r\n\r\n\t\temit Withdraw(msg.sender, amountBase, amountShares, now);\r\n\t}\r\n\r\n\tfunction withdrawableShares(address user) external view returns (uint) {\r\n\t\treturn toShares(perUserBase[user]);\r\n\t}\r\n\r\n\tfunction setUserBase(address user, uint base) internal {\r\n\t\tperUserBase[user] = base;\r\n\t\tsortitionSumTrees.set(TREE_KEY, base, bytes32(uint(user)));\r\n\t}\r\n\r\n\t//\r\n\t// Drawing system\r\n\t//\r\n\tfunction skimmableBase() public view returns (uint) {\r\n\t\tuint ourWorthInBase = toBase(vault.balanceOf(address(this)));\r\n\t\t// XXX what happens if somehow ourWorthInBase < totalBase - this shouldn't happen\r\n\t\tuint skimmable = ourWorthInBase.sub(totalBase);\r\n\t\treturn skimmable;\r\n\t}\r\n\r\n\tfunction lock(bytes32 _secretHash) onlyOwner external {\r\n\t\trequire(lockedUntilBlock == 0, \"pool is already locked\");\r\n\t\tlockedUntilBlock = block.number + LOCK_FOR_BLOCKS;\r\n\t\tsecretHash = _secretHash;\r\n\t\temit Locked(lockedUntilBlock, now);\r\n\t}\r\n\r\n\tfunction draw(bytes32 secret) onlyOwner external {\r\n\t\trequire(lockedUntilBlock > 0, \"pool is not locked\");\r\n\t\trequire(block.number >= lockedUntilBlock, \"pool is not unlockable yet\");\r\n\t\trequire(keccak256(abi.encodePacked(secret)) == secretHash, \"secret does not match\");\r\n\r\n\t\tunlockInternal();\r\n\r\n\t\t// skim the revenue and distribute it\r\n\t\t// Note: if there are no participants, this would always be 0\r\n\t\tuint skimmableShares = toShares(this.skimmableBase());\r\n\t\trequire(skimmableShares > 0, \"no skimmable rewards\");\r\n\r\n\t\t// XXX if the distributor wants to receive the base then we withdraw the shares and transfer skimmable\r\n\t\trequire(vault.transfer(address(distributor), skimmableShares));\r\n\r\n\t\tuint rand = entropy(secret);\r\n\t\taddress winner = winner(rand);\r\n\t\tdistributor.distribute(rand, winner);\r\n\r\n\t\t// @TODO - or just use the distributor to mint, but that needs to be done safely (msg.sender == )\r\n\t\t//poo.mint(winner, pooPerDraw)\r\n\t}\r\n\r\n\tfunction unlock() external {\r\n\t\trequire(lockedUntilBlock > 0, \"pool is not locked\");\r\n\t\trequire(block.number >= (lockedUntilBlock + UNLOCK_SAFETY_BLOCKS), \"pool is not publicly unlockable yet\");\r\n\t\tunlockInternal();\r\n\t}\r\n\r\n\tfunction unlockInternal() internal {\r\n\t\t// unlock pool\r\n\t\tlockedUntilBlock = 0;\r\n\t\tsecretHash = bytes32(0);\r\n\t\temit Unlocked(now);\r\n\t}\r\n\r\n\tfunction winner(uint entropy) public view returns (address) {\r\n\t\tuint randomToken = UniformRandomNumber.uniform(entropy, totalBase);\r\n\t\treturn address(uint256(sortitionSumTrees.draw(TREE_KEY, randomToken)));\r\n\t}\r\n\r\n\tfunction entropy(bytes32 secret) internal view returns (uint256) {\r\n\t\treturn uint256(keccak256(abi.encodePacked(blockhash(block.number - 40), secret)));\r\n\t}\r\n\r\n\tfunction toShares(uint256 tokens) internal view returns (uint256) {\r\n\t\treturn vault.totalSupply().mul(tokens).div(vault.balance());\r\n\t}\r\n\r\n\tfunction toBase(uint256 shares) internal view returns (uint256) {\r\n\t\tuint256 supply = vault.totalSupply();\r\n\t\tif (supply == 0 || shares == 0) return 0;\r\n\t\treturn (vault.balance().mul(shares)).div(supply);\r\n\t}\r\n\r\n\t// admin only (besides lock/draw)\r\n\tfunction changeDistributor(DistribInterface _dist) onlyOwner external {\r\n\t\tdistributor = _dist;\r\n\t}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract yVaultInterface\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"contract DistribInterface\",\"name\":\"_distrib\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBase\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"untilBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Unlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBase\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LOCK_FOR_BLOCKS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TREE_KEY\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNLOCK_SAFETY_BLOCKS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract DistribInterface\",\"name\":\"_dist\",\"type\":\"address\"}],\"name\":\"changeDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountBase\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountShares\",\"type\":\"uint256\"}],\"name\":\"depositShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributor\",\"outputs\":[{\"internalType\":\"contract DistribInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"}],\"name\":\"draw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_secretHash\",\"type\":\"bytes32\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedUntilBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"perUserBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secretHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"skimmableBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract yVaultInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"entropy\",\"type\":\"uint256\"}],\"name\":\"winner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountBase\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountShares\",\"type\":\"uint256\"}],\"name\":\"withdrawShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"withdrawableShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"PooTogether","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000005dbcf33d8c2e976c6b560249878e6f1491bca25c00000000000000000000000041654c630bcbc0c85c9bbd32856fc71c0f61ffb9","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://2714ab4e8917666b7481391d24fba90d1e0a45864dac1f06b1f615a85da8aafa"}]}