{"status":"1","message":"OK","result":[{"SourceCode":"//     ______          __    __                           \r\n//   / ____/___ ___  / /_  / /__  ____ ___               \r\n//   / __/ / __ `__ \\/ __ \\/ / _ \\/ __ `__ \\              \r\n//  / /___/ / / / / / /_/ / /  __/ / / / / /              \r\n// /_____/_/ /_/ /_/_.___/_/\\___/_/ /_/ /_/               \r\n// | |  / /___ ___  __/ / /_                              \r\n// | | / / __ `/ / / / / __/                              \r\n// | |/ / /_/ / /_/ / / /_                                \r\n// |___/\\__,_/\\__,_/_/\\__/                                \r\n//     __  __                ____                   ______\r\n//   / / / /___ _____  ____/ / /__  _____   _   __/ ____/\r\n//   / /_/ / __ `/ __ \\/ __  / / _ \\/ ___/  | | / /___ \\  \r\n//  / __  / /_/ / / / / /_/ / /  __/ /      | |/ /___/ /  \r\n// /_/ /_/\\__,_/_/ /_/\\__,_/_/\\___/_/       |___/_____/   \r\n  \r\n// File: browser/ReentrancyGuard.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\ncontract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n// File: browser/IERC20Token.sol\r\n\r\npragma solidity ^0.6.11;\r\ninterface IERC20Token {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n// File: browser/SafeMath.sol\r\n\r\npragma solidity ^0.6.11;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n// File: browser/VaultHandler_v4.sol\r\n\r\npragma experimental ABIEncoderV2;\r\npragma solidity ^0.6.11;\r\n\r\n\r\ninterface IERC721 {\r\n    function burn(uint256 tokenId) external;\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n    function mint( address _to, uint256 _tokenId, string calldata _uri, string calldata _payload) external;\r\n    function changeName(string calldata name, string calldata symbol) external;\r\n    function updateTokenUri(uint256 _tokenId,string memory _uri) external;\r\n    function tokenPayload(uint256 _tokenId) external view returns (string memory);\r\n    function ownerOf(uint256 _tokenId) external returns (address _owner);\r\n    function getApproved(uint256 _tokenId) external returns (address);\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;\r\n}\r\n\r\ninterface Ownable {\r\n    function transferOwnership(address newOwner) external;\r\n}\r\n\r\ninterface BasicERC20 {\r\n    function burn(uint256 value) external;\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract VaultHandlerV5 is ReentrancyGuard {\r\n    \r\n    using SafeMath for uint256;\r\n    using SafeMath for uint8;\r\n    address payable private owner;\r\n    string public metadataBaseUri;\r\n    bool public initialized;\r\n    address public nftAddress;\r\n    address public paymentAddress;\r\n    address public recipientAddress;\r\n    address public couponAddress;\r\n    uint256 public price;\r\n    uint256 public offerPrice = 0;\r\n    bool public payToAcceptOffer = false;\r\n    bool public payToMakeOffer = false;\r\n    bool public shouldBurn = false;\r\n    \r\n    struct PreMint {\r\n        string payload;\r\n        bytes32 preImage;\r\n    }\r\n    \r\n    struct PreTransfer {\r\n        string payload;\r\n        bytes32 preImage;\r\n        address _from;\r\n    }\r\n    \r\n    struct Offer {\r\n        uint tokenId;\r\n        address _from;\r\n    }\r\n\r\n    \r\n    // mapping(uint => PreMint) public tokenIdToPreMint;\r\n    mapping(address => mapping(uint => PreMint)) preMints;\r\n    mapping(address => mapping(uint => PreMint)) preMintsByIndex;\r\n    mapping(address => uint) preMintCounts;\r\n    \r\n    mapping(uint => PreTransfer) preTransfers;\r\n    mapping(uint => mapping(uint => PreTransfer)) preTransfersByIndex;\r\n    mapping(uint => uint) preTransferCounts;\r\n    \r\n    mapping(uint => Offer[]) offers;\r\n    mapping(uint => Offer[]) rejected;\r\n    mapping(address => mapping(uint => Offer)) offered;\r\n    \r\n    mapping(address => bool) public witnesses;\r\n    mapping(uint256 => bool) usedNonces;\r\n    \r\n    \r\n    // event for EVM logging\r\n    event OwnerSet(address indexed oldOwner, address indexed newOwner);\r\n    \r\n    // modifier to check if caller is owner\r\n    modifier isOwner() {\r\n        // If the first argument of 'require' evaluates to 'false', execution terminates and all\r\n        // changes to the state and to Ether balances are reverted.\r\n        // This used to consume all gas in old EVM versions, but not anymore.\r\n        // It is often a good idea to use 'require' to check if functions are called correctly.\r\n        // As a second argument, you can also provide an explanation about what went wrong.\r\n        require(msg.sender == owner, \"Caller is not owner\");\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * @dev Change owner\r\n     * @param newOwner address of new owner\r\n     */\r\n    function transferOwnership(address payable newOwner) public isOwner {\r\n        emit OwnerSet(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n    \r\n    /**\r\n     * @dev Return owner address \r\n     * @return address of owner\r\n     */\r\n    function getOwner() external view returns (address) {\r\n        return owner;\r\n    }\r\n    \r\n    constructor(address _nftAddress, address _paymentAddress, address _recipientAddress, uint256 _price) public {\r\n        owner = msg.sender; // 'msg.sender' is sender of current call, contract deployer for a constructor\r\n        emit OwnerSet(address(0), owner);\r\n        addWitness(owner);\r\n        metadataBaseUri = \"http://104.154.252.216/meta/\";\r\n        nftAddress = _nftAddress;\r\n        paymentAddress = _paymentAddress;\r\n        recipientAddress = _recipientAddress;\r\n        initialized = true;\r\n        uint decimals = BasicERC20(paymentAddress).decimals();\r\n        price = _price * 10 ** decimals;\r\n    }\r\n    \r\n    function claim(uint256 tokenId) public isOwner {\r\n        IERC721 token = IERC721(nftAddress);\r\n        token.burn(tokenId);\r\n    }\r\n    \r\n    function buyWithPaymentOnly(address _to, uint256 _tokenId, string calldata image) public payable {\r\n        IERC20Token paymentToken = IERC20Token(paymentAddress);\r\n        IERC721 nftToken = IERC721(nftAddress);\r\n        PreMint memory preMint = preMints[msg.sender][_tokenId];\r\n        require(preMint.preImage == sha256(abi.encodePacked(image)), 'Payload does not match'); // Payload should match\r\n        if (shouldBurn) {\r\n            require(paymentToken.transferFrom(msg.sender, address(this), price), 'Transfer ERROR'); // Payment sent to recipient\r\n            BasicERC20(paymentAddress).burn(price);\r\n        } else {\r\n            require(paymentToken.transferFrom(msg.sender, address(recipientAddress), price), 'Transfer ERROR'); // Payment sent to recipient\r\n        }\r\n        string memory _uri = concat(metadataBaseUri, uintToStr(_tokenId));\r\n        nftToken.mint(_to, _tokenId, _uri, preMint.payload);\r\n        delete preMintsByIndex[msg.sender][preMintCounts[msg.sender]];\r\n        delete preMints[msg.sender][_tokenId];\r\n        preMintCounts[msg.sender] = preMintCounts[msg.sender].sub(1);\r\n    }\r\n    \r\n    function addPreMint(address _for, string calldata _payload, uint256 _tokenId, bytes32 preImage) public isOwner {\r\n        try IERC721(nftAddress).tokenPayload(_tokenId) returns (string memory) {\r\n            revert('NFT Exists with this ID');\r\n        } catch {\r\n            require(!_duplicatePremint(_for, _tokenId), 'Duplicate PreMint');\r\n            preMintCounts[_for] = preMintCounts[_for].add(1);\r\n            preMints[_for][_tokenId] = PreMint(_payload, preImage);\r\n            preMintsByIndex[_for][preMintCounts[_for]] = preMints[_for][_tokenId];\r\n        }\r\n    }\r\n    \r\n    function _duplicatePremint(address _for, uint256 _tokenId) internal view returns (bool) {\r\n        string memory data = preMints[_for][_tokenId].payload;\r\n        bytes32 NULL = keccak256(bytes(''));\r\n        return keccak256(bytes(data)) != NULL;\r\n    }\r\n    \r\n    function deletePreMint(address _for, uint256 _tokenId) public isOwner {\r\n        delete preMintsByIndex[_for][preMintCounts[_for]];\r\n        preMintCounts[_for] = preMintCounts[_for].sub(1);\r\n        delete preMints[_for][_tokenId];\r\n    }\r\n    \r\n    function getPreMint(address _for, uint256 _tokenId) public view returns (PreMint memory) {\r\n        return preMints[_for][_tokenId];\r\n    }\r\n    \r\n    function checkPreMintImage(string memory image, bytes32 preImage) public pure returns (bytes32, bytes32, bool) {\r\n        bytes32 calculated = sha256(abi.encodePacked(image));\r\n        bytes32 preBytes = preImage;\r\n        return (calculated, preBytes, calculated == preBytes);\r\n    }\r\n    \r\n    function getPreMintCount(address _for) public view returns (uint length) {\r\n        return preMintCounts[_for];\r\n    }\r\n    \r\n    function getPreMintByIndex(address _for, uint index) public view returns (PreMint memory) {\r\n        return preMintsByIndex[_for][index];\r\n    }\r\n    \r\n    function toggleShouldBurn() public {\r\n        shouldBurn = !shouldBurn;\r\n    }\r\n    \r\n    /* Transfer with code */\r\n    function addWitness(address _witness) public isOwner {\r\n        witnesses[_witness] = true;\r\n    }\r\n\r\n    function removeWitness(address _witness) public isOwner {\r\n        witnesses[_witness] = false;\r\n    }\r\n    \r\n    function getAddressFromSignature(uint256 _tokenId, uint256 _nonce, bytes memory signature) public view returns (address) {\r\n        require(!usedNonces[_nonce]);\r\n        bytes32 hash = keccak256(abi.encodePacked(concat(uintToStr(_tokenId), uintToStr(_nonce))));\r\n        address addressFromSig = recoverSigner(hash, signature);\r\n        return addressFromSig;\r\n    }\r\n    \r\n    function transferWithCode(uint256 _tokenId, string calldata code, address _to, uint256 _nonce,  bytes memory signature) public payable {\r\n        require(witnesses[getAddressFromSignature(_tokenId, _nonce, signature)], 'Not Witnessed');\r\n        IERC721 nftToken = IERC721(nftAddress);\r\n        PreTransfer memory preTransfer = preTransfers[_tokenId];\r\n        require(preTransfer.preImage == sha256(abi.encodePacked(code)), 'Code does not match'); // Payload should match\r\n        nftToken.transferFrom(preTransfer._from, _to,  _tokenId);\r\n        delete preTransfers[_tokenId];\r\n        delete preTransfersByIndex[_tokenId][preTransferCounts[_tokenId]];\r\n        preTransferCounts[_tokenId] = preTransferCounts[_tokenId].sub(1);\r\n        usedNonces[_nonce] = true;\r\n    }\r\n    \r\n    function addPreTransfer(uint256 _tokenId, bytes32 preImage) public {\r\n        require(!_duplicatePretransfer(_tokenId), 'Duplicate PreTransfer');\r\n        preTransferCounts[_tokenId] = preTransferCounts[_tokenId].add(1);\r\n        preTransfers[_tokenId] = PreTransfer(\"payload\", preImage, msg.sender);\r\n        preTransfersByIndex[_tokenId][preTransferCounts[_tokenId]] = preTransfers[_tokenId];\r\n    }\r\n    \r\n    function _duplicatePretransfer(uint256 _tokenId) internal view returns (bool) {\r\n        string memory data = preTransfers[_tokenId].payload;\r\n        bytes32 NULL = keccak256(bytes(''));\r\n        return keccak256(bytes(data)) != NULL;\r\n    }\r\n    \r\n    function deletePreTransfer(uint256 _tokenId) public {\r\n        require(preTransfers[_tokenId]._from == msg.sender, 'PreTransfer does not belong to sender');\r\n        delete preTransfersByIndex[_tokenId][preTransferCounts[_tokenId]];\r\n        preTransferCounts[_tokenId] = preTransferCounts[_tokenId].sub(1);\r\n        delete preTransfers[_tokenId];\r\n    }\r\n    \r\n    function getPreTransfer(uint256 _tokenId) public view returns (PreTransfer memory) {\r\n        return preTransfers[_tokenId];\r\n    }\r\n    \r\n    function checkPreTransferImage(string memory image, bytes32 preImage) public pure returns (bytes32, bytes32, bool) {\r\n        bytes32 calculated = sha256(abi.encodePacked(image));\r\n        bytes32 preBytes = preImage;\r\n        return (calculated, preBytes, calculated == preBytes);\r\n    }\r\n    \r\n    function getPreTransferCount(uint256 _tokenId) public view returns (uint length) {\r\n        return preTransferCounts[_tokenId];\r\n    }\r\n    \r\n    function getPreTransferByIndex(uint256 _tokenId, uint index) public view returns (PreTransfer memory) {\r\n        return preTransfersByIndex[_tokenId][index];\r\n    }\r\n    \r\n    /* Swap */\r\n    \r\n    function acceptOffer(uint _tokenId, uint index) public {\r\n        Offer memory _offer = offers[_tokenId][index];\r\n        IERC721 nftToken = IERC721(nftAddress);\r\n        IERC20Token couponToken = IERC20Token(couponAddress);\r\n        require(nftToken.ownerOf(_tokenId) == msg.sender,'Sender is not owner of NFT');\r\n        require(nftToken.ownerOf(_offer.tokenId) == _offer._from, 'NFT not owned by offerer');\r\n        require(nftToken.getApproved(_offer.tokenId) == address(this), 'Handler unable to transfer offer NFT');\r\n        require(nftToken.getApproved(_tokenId) == address(this), 'Handler unable to transfer NFT');\r\n        if (offerPrice > 0 && payToAcceptOffer) {\r\n            require(couponToken.allowance(msg.sender, address(this)) >= offerPrice, 'Handler unable take payment for offer');\r\n            require(couponToken.balanceOf(msg.sender) >= offerPrice, 'Insufficient Balance for payment');\r\n            require(couponToken.transferFrom(msg.sender, paymentAddress, offerPrice), 'Payment error');\r\n        }\r\n        nftToken.safeTransferFrom(_offer._from, msg.sender, _offer.tokenId);\r\n        nftToken.safeTransferFrom(msg.sender, _offer._from, _tokenId);\r\n        \r\n        delete offers[_tokenId][index];\r\n        delete offered[_offer._from][_tokenId];\r\n    }\r\n    \r\n    function addOffer(uint256 _tokenId, uint256 _for) public {\r\n        IERC721 nftToken = IERC721(nftAddress);\r\n        IERC20Token couponToken = IERC20Token(couponAddress);\r\n        require(nftToken.ownerOf(_tokenId) == msg.sender, 'Sender not owner of NFT');\r\n        require(nftToken.getApproved(_tokenId) == address(this), 'Handler unable to transfer NFT');\r\n        if (offerPrice > 0 && payToMakeOffer) {\r\n            require(couponToken.allowance(msg.sender, address(this)) >= offerPrice, 'Handler unable take payment for offer');\r\n            require(couponToken.balanceOf(msg.sender) >= offerPrice, 'Insufficient Balance for payment');\r\n            require(couponToken.transferFrom(msg.sender, paymentAddress, offerPrice), 'Payment error');\r\n        }\r\n        offers[_for].push(Offer(_tokenId, msg.sender));\r\n        offered[msg.sender][_tokenId] = Offer(_tokenId, msg.sender);\r\n    }\r\n    \r\n    function rejectOffer(uint256 _tokenId, uint index) public {\r\n        Offer memory _offer = offers[_tokenId][index];\r\n        IERC721 nftToken = IERC721(nftAddress);\r\n        require(nftToken.ownerOf(_tokenId) == msg.sender,'Sender is not owner of NFT');\r\n        rejected[_tokenId].push(_offer);\r\n        delete offers[_tokenId][index];\r\n        delete offered[_offer._from][_tokenId];\r\n    }\r\n    \r\n    function withdrawOffer(uint256 _tokenId, uint index) public {\r\n        Offer memory _offer = offers[_tokenId][index];\r\n        IERC721 nftToken = IERC721(nftAddress);\r\n        require(nftToken.ownerOf(_offer.tokenId) == msg.sender,'Sender is not owner of offer NFT');\r\n        delete offers[_tokenId][index];\r\n        delete offered[_offer._from][_tokenId];\r\n    }\r\n    \r\n    function togglePayToMakeOffer() public isOwner {\r\n        payToMakeOffer = !payToMakeOffer;\r\n    }\r\n    function togglePayToAcceptOffer() public isOwner {\r\n        payToAcceptOffer = !payToAcceptOffer;\r\n    }\r\n    \r\n    function getOffer(uint256 _tokenId, uint index) public view returns (Offer memory) {\r\n        return offers[_tokenId][index];\r\n    }\r\n    \r\n    function getOfferCount(uint256 _tokenId) public view returns (uint) {\r\n        return offers[_tokenId].length;\r\n    }\r\n    \r\n    function changeMetadataBaseUri(string calldata _uri) public isOwner {\r\n        metadataBaseUri = _uri;\r\n    }\r\n    \r\n    function transferPaymentOwnership(address newOwner) external isOwner {\r\n        Ownable paymentToken = Ownable(paymentAddress);\r\n        paymentToken.transferOwnership(newOwner);\r\n    }\r\n    \r\n    function transferNftOwnership(address newOwner) external isOwner {\r\n        Ownable nftToken = Ownable(nftAddress);\r\n        nftToken.transferOwnership(newOwner);\r\n    }\r\n    \r\n    function mint( address _to, uint256 _tokenId, string calldata _uri, string calldata _payload) external isOwner {\r\n        IERC721 nftToken = IERC721(nftAddress);\r\n        nftToken.mint(_to, _tokenId, _uri, _payload);\r\n    }\r\n    \r\n    function changeName(string calldata name, string calldata symbol) external isOwner {\r\n        IERC721 nftToken = IERC721(nftAddress);\r\n        nftToken.changeName(name, symbol);\r\n    }\r\n    \r\n    function updateTokenUri(uint256 _tokenId,string memory _uri) external isOwner {\r\n        IERC721 nftToken = IERC721(nftAddress);\r\n        nftToken.updateTokenUri(_tokenId, _uri);\r\n    }\r\n    \r\n    function getPaymentDecimals() public view returns (uint8){\r\n        BasicERC20 token = BasicERC20(paymentAddress);\r\n        return token.decimals();\r\n    }\r\n    \r\n    function changePayment(address payment) public isOwner {\r\n       paymentAddress = payment;\r\n    }\r\n    \r\n    function changeCoupon(address coupon) public isOwner {\r\n       couponAddress = coupon;\r\n    }\r\n    \r\n    function changeRecipient(address _recipient) public isOwner {\r\n       recipientAddress = _recipient;\r\n    }\r\n    \r\n    function changeNft(address token) public isOwner {\r\n        nftAddress = token;\r\n    }\r\n    \r\n    function changePrice(uint256 _price) public isOwner {\r\n        uint decimals = BasicERC20(paymentAddress).decimals();\r\n        price = _price * 10 ** decimals;\r\n    }\r\n    \r\n    function changeOfferPrice(uint256 _price) public isOwner {\r\n        uint decimals = BasicERC20(couponAddress).decimals();\r\n        offerPrice = _price * 10 ** decimals;\r\n    }\r\n    \r\n    function concat(string memory a, string memory b) internal pure returns (string memory) {\r\n        return string(abi.encodePacked(a, b));\r\n    }\r\n    \r\n    /**\r\n    * @dev Recover signer address from a message by using their signature\r\n    * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\r\n    * @param sig bytes signature, the signature is generated using web3.eth.sign(). Inclusive \"0x...\"\r\n    */\r\n    function recoverSigner(bytes32 hash, bytes memory sig) public pure returns (address) {\r\n        require(sig.length == 65, \"Require correct length\");\r\n\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n\r\n        // Divide the signature in r, s and v variables\r\n        assembly {\r\n            r := mload(add(sig, 32))\r\n            s := mload(add(sig, 64))\r\n            v := byte(0, mload(add(sig, 96)))\r\n        }\r\n\r\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\r\n        if (v < 27) {\r\n            v += 27;\r\n        }\r\n\r\n        require(v == 27 || v == 28, \"Signature version not match\");\r\n\r\n        return recoverSigner2(hash, v, r, s);\r\n    }\r\n\r\n    function recoverSigner2(bytes32 h, uint8 v, bytes32 r, bytes32 s) public pure returns (address) {\r\n        bytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\";\r\n        bytes32 prefixedHash = keccak256(abi.encodePacked(prefix, h));\r\n        address addr = ecrecover(prefixedHash, v, r, s);\r\n\r\n        return addr;\r\n    }\r\n    \r\n    /// @notice converts number to string\r\n    /// @dev source: https://github.com/provable-things/ethereum-api/blob/master/oraclizeAPI_0.5.sol#L1045\r\n    /// @param _i integer to convert\r\n    /// @return _uintAsString\r\n    function uintToStr(uint _i) internal pure returns (string memory _uintAsString) {\r\n        uint number = _i;\r\n        if (number == 0) {\r\n            return \"0\";\r\n        }\r\n        uint j = number;\r\n        uint len;\r\n        while (j != 0) {\r\n            len++;\r\n            j /= 10;\r\n        }\r\n        bytes memory bstr = new bytes(len);\r\n        uint k = len - 1;\r\n        while (number != 0) {\r\n            bstr[k--] = byte(uint8(48 + number % 10));\r\n            number /= 10;\r\n        }\r\n        return string(bstr);\r\n    }\r\n    \r\n    function stringToBytes32(string memory source) public pure returns (bytes32 result) {\r\n        bytes memory tempEmptyStringTest = bytes(source);\r\n        if (tempEmptyStringTest.length == 0) {\r\n            return 0x0;\r\n        }\r\n    \r\n        assembly {\r\n            result := mload(add(source, 32))\r\n        }\r\n    }\r\n    function bytes32ToStr(bytes32 _bytes32) public pure returns (string memory) {\r\n\r\n        // string memory str = string(_bytes32);\r\n        // TypeError: Explicit type conversion not allowed from \"bytes32\" to \"string storage pointer\"\r\n        // thus we should fist convert bytes32 to bytes (to dynamically-sized byte array)\r\n    \r\n        bytes memory bytesArray = new bytes(32);\r\n        for (uint256 i; i < 32; i++) {\r\n            bytesArray[i] = _bytes32[i];\r\n            }\r\n        return string(bytesArray);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_paymentAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipientAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"acceptOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_for\",\"type\":\"uint256\"}],\"name\":\"addOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_for\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_payload\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"preImage\",\"type\":\"bytes32\"}],\"name\":\"addPreMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"preImage\",\"type\":\"bytes32\"}],\"name\":\"addPreTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_witness\",\"type\":\"address\"}],\"name\":\"addWitness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"}],\"name\":\"buyWithPaymentOnly\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_bytes32\",\"type\":\"bytes32\"}],\"name\":\"bytes32ToStr\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"coupon\",\"type\":\"address\"}],\"name\":\"changeCoupon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"changeMetadataBaseUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"changeName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"changeNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"changeOfferPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"payment\",\"type\":\"address\"}],\"name\":\"changePayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"changePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"changeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"preImage\",\"type\":\"bytes32\"}],\"name\":\"checkPreMintImage\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"preImage\",\"type\":\"bytes32\"}],\"name\":\"checkPreTransferImage\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"couponAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_for\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"deletePreMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"deletePreTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"getAddressFromSignature\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getOffer\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"}],\"internalType\":\"struct VaultHandlerV5.Offer\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getOfferCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPaymentDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_for\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getPreMint\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"payload\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"preImage\",\"type\":\"bytes32\"}],\"internalType\":\"struct VaultHandlerV5.PreMint\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_for\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPreMintByIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"payload\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"preImage\",\"type\":\"bytes32\"}],\"internalType\":\"struct VaultHandlerV5.PreMint\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_for\",\"type\":\"address\"}],\"name\":\"getPreMintCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getPreTransfer\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"payload\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"preImage\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"}],\"internalType\":\"struct VaultHandlerV5.PreTransfer\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPreTransferByIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"payload\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"preImage\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"}],\"internalType\":\"struct VaultHandlerV5.PreTransfer\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getPreTransferCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadataBaseUri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_payload\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"offerPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payToAcceptOffer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payToMakeOffer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recipientAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"recoverSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"h\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"recoverSigner2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"rejectOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_witness\",\"type\":\"address\"}],\"name\":\"removeWitness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldBurn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"source\",\"type\":\"string\"}],\"name\":\"stringToBytes32\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"result\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePayToAcceptOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePayToMakeOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleShouldBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferNftOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferPaymentOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"code\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"transferWithCode\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"updateTokenUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"withdrawOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"witnesses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"VaultHandlerV5","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000082c7a8f707110f5fbb16184a5933e9f78a34c6ab0000000000000000000000003d658390460295fb963f54dc0899cfb1c30776df000000000000000000000000147ba6f5a5211ead844ba8776433372f7bcf9969000000000000000000000000000000000000000000000000000000000000012c","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://6709b3c976cbe9dcf68c7e17986b0b2a6e771cd9b3c1de0effa3296181e5ed14"}]}