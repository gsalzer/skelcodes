{"status":"1","message":"OK","result":[{"SourceCode":"{\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"},\"sbControllerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\ninterface sbControllerInterface {\\n  function requestRewards(address miner, uint256 amount) external;\\n\\n  function isValuePoolAccepted(address valuePool) external view returns (bool);\\n\\n  function getValuePoolRewards(address valuePool, uint256 day) external view returns (uint256);\\n\\n  function getValuePoolMiningFee(address valuePool) external returns (uint256, uint256);\\n\\n  function getValuePoolUnminingFee(address valuePool) external returns (uint256, uint256);\\n\\n  function getValuePoolClaimingFee(address valuePool) external returns (uint256, uint256);\\n\\n  function isServicePoolAccepted(address servicePool) external view returns (bool);\\n\\n  function getServicePoolRewards(address servicePool, uint256 day) external view returns (uint256);\\n\\n  function getServicePoolClaimingFee(address servicePool) external returns (uint256, uint256);\\n\\n  function getServicePoolRequestFeeInWei(address servicePool) external returns (uint256);\\n\\n  function getVoteForServicePoolsCount() external view returns (uint256);\\n\\n  function getVoteForServicesCount() external view returns (uint256);\\n\\n  function getVoteCastersRewards(uint256 dayNumber) external view returns (uint256);\\n\\n  function getVoteReceiversRewards(uint256 dayNumber) external view returns (uint256);\\n\\n  function getMinerMinMineDays() external view returns (uint256);\\n\\n  function getServiceMinMineDays() external view returns (uint256);\\n\\n  function getMinerMinMineAmountInWei() external view returns (uint256);\\n\\n  function getServiceMinMineAmountInWei() external view returns (uint256);\\n\\n  function getValuePoolVestingDays(address valuePool) external view returns (uint256);\\n\\n  function getServicePoolVestingDays(address poservicePoolol) external view returns (uint256);\\n\\n  function getVoteCasterVestingDays() external view returns (uint256);\\n\\n  function getVoteReceiverVestingDays() external view returns (uint256);\\n}\\n\"},\"sbGenericServicePoolInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\ninterface sbGenericServicePoolInterface {\\n  function isServiceAccepted(address service) external view returns (bool);\\n}\\n\"},\"sbStrongValuePoolInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\ninterface sbStrongValuePoolInterface {\\n  function mineFor(address miner, uint256 amount) external;\\n\\n  function getMinerMineData(address miner, uint256 day)\\n    external\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256\\n    );\\n\\n  function getMineData(uint256 day)\\n    external\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256\\n    );\\n\\n  function serviceMinMined(address miner) external view returns (bool);\\n\\n  function minerMinMined(address miner) external view returns (bool);\\n}\\n\"},\"sbVotes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./sbControllerInterface.sol\\\";\\nimport \\\"./sbGenericServicePoolInterface.sol\\\";\\nimport \\\"./sbStrongValuePoolInterface.sol\\\";\\n\\ncontract sbVotes {\\n    event DelegateChanged(\\n        address indexed delegator,\\n        address indexed fromDelegate,\\n        address indexed toDelegate\\n    );\\n    event DelegateVotesChanged(\\n        address indexed delegate,\\n        uint256 previousBalance,\\n        uint256 newBalance\\n    );\\n    event Voted(\\n        address indexed voter,\\n        address community,\\n        address indexed service,\\n        uint256 amount,\\n        uint256 indexed day\\n    );\\n    event VoteRecalled(\\n        address indexed voter,\\n        address community,\\n        address indexed service,\\n        uint256 amount,\\n        uint256 indexed day\\n    );\\n    event ServiceDropped(\\n        address indexed voter,\\n        address community,\\n        address indexed service,\\n        uint256 indexed day\\n    );\\n    event Claimed(address indexed service, uint256 amount, uint256 indexed day);\\n    event AddVotes(address indexed staker, uint256 amount);\\n    event SubVotes(address indexed staker, uint256 amount);\\n\\n    using SafeMath for uint256;\\n\\n    bool public initDone;\\n    address public admin;\\n    address public pendingAdmin;\\n    address public superAdmin;\\n    address public pendingSuperAdmin;\\n\\n    sbControllerInterface public sbController;\\n    sbGenericServicePoolInterface public sbGenericServicePool;\\n    sbStrongValuePoolInterface public sbStrongValuePool;\\n\\n    mapping(address =\\u003e uint96) public balances;\\n    mapping(address =\\u003e address) public delegates;\\n\\n    mapping(address =\\u003e mapping(uint32 =\\u003e uint32)) public checkpointsFromBlock;\\n    mapping(address =\\u003e mapping(uint32 =\\u003e uint96)) public checkpointsVotes;\\n    mapping(address =\\u003e uint32) public numCheckpoints;\\n\\n    mapping(address =\\u003e address[]) internal voterServicePools;\\n    mapping(address =\\u003e mapping(address =\\u003e address[]))\\n        internal voterServicePoolServices;\\n    mapping(address =\\u003e mapping(address =\\u003e mapping(address =\\u003e uint256[])))\\n        internal voterServicePoolServiceDays;\\n    mapping(address =\\u003e mapping(address =\\u003e mapping(address =\\u003e uint256[])))\\n        internal voterServicePoolServiceAmounts;\\n    mapping(address =\\u003e mapping(address =\\u003e mapping(address =\\u003e uint256[])))\\n        internal voterServicePoolServiceVoteSeconds;\\n    mapping(address =\\u003e uint256) internal voterDayLastClaimedFor;\\n    mapping(address =\\u003e uint256) internal voterVotesOut;\\n\\n    mapping(address =\\u003e mapping(address =\\u003e uint256[]))\\n        internal serviceServicePoolDays;\\n    mapping(address =\\u003e mapping(address =\\u003e uint256[]))\\n        internal serviceServicePoolAmounts;\\n    mapping(address =\\u003e mapping(address =\\u003e uint256[]))\\n        internal serviceServicePoolVoteSeconds;\\n    mapping(address =\\u003e mapping(address =\\u003e uint256))\\n        internal serviceServicePoolDayLastClaimedFor;\\n\\n    mapping(address =\\u003e uint256[]) internal servicePoolDays;\\n    mapping(address =\\u003e uint256[]) internal servicePoolAmounts;\\n    mapping(address =\\u003e uint256[]) internal servicePoolVoteSeconds;\\n\\n    function init(\\n        address sbControllerAddress,\\n        address sbStrongValuePoolAddress,\\n        address adminAddress,\\n        address superAdminAddress\\n    ) public {\\n        require(!initDone, \\\"init done\\\");\\n        sbController = sbControllerInterface(sbControllerAddress);\\n        sbStrongValuePool = sbStrongValuePoolInterface(\\n            sbStrongValuePoolAddress\\n        );\\n        admin = adminAddress;\\n        superAdmin = superAdminAddress;\\n        initDone = true;\\n    }\\n\\n    function updateVotes(\\n        address voter,\\n        uint256 rawAmount,\\n        bool adding\\n    ) external {\\n        require(\\n            msg.sender == address(sbStrongValuePool),\\n            \\\"not sbStrongValuePool\\\"\\n        );\\n        uint96 amount = _safe96(rawAmount, \\\"amount exceeds 96 bits\\\");\\n        if (adding) {\\n            _addVotes(voter, amount);\\n        } else {\\n            require(voter == delegates[voter], \\\"must delegate to self\\\");\\n            require(\\n                _getAvailableServiceVotes(voter) \\u003e= amount,\\n                \\\"must recall votes\\\"\\n            );\\n            _subVotes(voter, amount);\\n        }\\n    }\\n\\n    function getCurrentProposalVotes(address account)\\n        external\\n        view\\n        returns (uint96)\\n    {\\n        return _getCurrentProposalVotes(account);\\n    }\\n\\n    function getPriorProposalVotes(address account, uint256 blockNumber)\\n        external\\n        view\\n        returns (uint96)\\n    {\\n        require(blockNumber \\u003c block.number, \\\"not yet determined\\\");\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        if (nCheckpoints == 0) {\\n            return 0;\\n        }\\n        if (checkpointsFromBlock[account][nCheckpoints - 1] \\u003c= blockNumber) {\\n            return checkpointsVotes[account][nCheckpoints - 1];\\n        }\\n        if (checkpointsFromBlock[account][0] \\u003e blockNumber) {\\n            return 0;\\n        }\\n        uint32 lower = 0;\\n        uint32 upper = nCheckpoints - 1;\\n        while (upper \\u003e lower) {\\n            uint32 center = upper - (upper - lower) / 2;\\n            uint32 fromBlock = checkpointsFromBlock[account][center];\\n            uint96 votes = checkpointsVotes[account][center];\\n            if (fromBlock == blockNumber) {\\n                return votes;\\n            } else if (fromBlock \\u003c blockNumber) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return checkpointsVotes[account][lower];\\n    }\\n\\n    function getServiceDayLastClaimedFor(address servicePool, address service)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 len = serviceServicePoolDays[service][servicePool].length;\\n        if (len != 0) {\\n            return\\n                serviceServicePoolDayLastClaimedFor[service][servicePool] == 0\\n                    ? serviceServicePoolDays[service][servicePool][0].sub(1)\\n                    : serviceServicePoolDayLastClaimedFor[service][servicePool];\\n        }\\n        return 0;\\n    }\\n\\n    function getVoterDayLastClaimedFor(address voter)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        if (voterDayLastClaimedFor[voter] == 0) {\\n            uint256 firstDayVoted = _getVoterFirstDay(voter);\\n            if (firstDayVoted == 0) {\\n                return 0;\\n            }\\n            return firstDayVoted.sub(1);\\n        }\\n        return voterDayLastClaimedFor[voter];\\n    }\\n\\n    function recallAllVotes() public {\\n        require(voterVotesOut[msg.sender] \\u003e 0, \\\"no votes out\\\");\\n        _recallAllVotes(msg.sender);\\n    }\\n\\n    function delegate(address delegatee) public {\\n        _delegate(msg.sender, delegatee);\\n    }\\n\\n    function getDelegate(address delegator) public view returns (address) {\\n        return delegates[delegator];\\n    }\\n\\n    function getAvailableServiceVotes(address account)\\n        public\\n        view\\n        returns (uint96)\\n    {\\n        return _getAvailableServiceVotes(account);\\n    }\\n\\n    function getVoterServicePoolServices(address voter, address servicePool)\\n        public\\n        view\\n        returns (address[] memory)\\n    {\\n        require(\\n            sbController.isServicePoolAccepted(servicePool),\\n            \\\"invalid servicePool\\\"\\n        );\\n        return voterServicePoolServices[voter][servicePool];\\n    }\\n\\n    function vote(\\n        address servicePool,\\n        address service,\\n        uint256 amount\\n    ) public {\\n        require(amount \\u003e 0, \\\"1: zero\\\");\\n        require(\\n            sbController.isServicePoolAccepted(servicePool),\\n            \\\"invalid servicePool\\\"\\n        );\\n        require(\\n            sbGenericServicePoolInterface(servicePool).isServiceAccepted(\\n                service\\n            ),\\n            \\\"invalid service\\\"\\n        );\\n        require(sbStrongValuePool.serviceMinMined(service), \\\"not min mined\\\");\\n        require(\\n            uint256(_getAvailableServiceVotes(msg.sender)) \\u003e= amount,\\n            \\\"not enough votes\\\"\\n        );\\n        if (!_voterServicePoolServiceExists(msg.sender, servicePool, service)) {\\n            require(\\n                voterServicePoolServices[msg.sender][servicePool].length.add(\\n                    1\\n                ) \\u003c= sbController.getVoteForServicesCount(),\\n                \\\"1: too many\\\"\\n            );\\n            voterServicePoolServices[msg.sender][servicePool].push(service);\\n        }\\n        if (!_voterServicePoolExists(msg.sender, servicePool)) {\\n            require(\\n                voterServicePools[msg.sender].length.add(1) \\u003c=\\n                    sbController.getVoteForServicePoolsCount(),\\n                \\\"2: too many\\\"\\n            );\\n            voterServicePools[msg.sender].push(servicePool);\\n        }\\n        uint256 currentDay = _getCurrentDay();\\n        _updateVoterServicePoolServiceData(\\n            msg.sender,\\n            servicePool,\\n            service,\\n            amount,\\n            true,\\n            currentDay\\n        );\\n        _updateServiceServicePoolData(\\n            service,\\n            servicePool,\\n            amount,\\n            true,\\n            currentDay\\n        );\\n        _updateServicePoolData(servicePool, amount, true, currentDay);\\n        voterVotesOut[msg.sender] = voterVotesOut[msg.sender].add(amount);\\n        emit Voted(msg.sender, servicePool, service, amount, currentDay);\\n    }\\n\\n    function recallVote(\\n        address servicePool,\\n        address service,\\n        uint256 amount\\n    ) public {\\n        require(amount \\u003e 0, \\\"zero\\\");\\n        require(\\n            sbController.isServicePoolAccepted(servicePool),\\n            \\\"invalid servicePool\\\"\\n        );\\n        require(\\n            sbGenericServicePoolInterface(servicePool).isServiceAccepted(\\n                service\\n            ),\\n            \\\"invalid service\\\"\\n        );\\n        require(\\n            _voterServicePoolServiceExists(msg.sender, servicePool, service),\\n            \\\"not found\\\"\\n        );\\n        uint256 currentDay = _getCurrentDay();\\n        (, uint256 votes, ) = _getVoterServicePoolServiceData(\\n            msg.sender,\\n            servicePool,\\n            service,\\n            currentDay\\n        );\\n        require(votes \\u003e= amount, \\\"not enough votes\\\");\\n        _updateVoterServicePoolServiceData(\\n            msg.sender,\\n            servicePool,\\n            service,\\n            amount,\\n            false,\\n            currentDay\\n        );\\n        _updateServiceServicePoolData(\\n            service,\\n            servicePool,\\n            amount,\\n            false,\\n            currentDay\\n        );\\n        _updateServicePoolData(servicePool, amount, false, currentDay);\\n        voterVotesOut[msg.sender] = voterVotesOut[msg.sender].sub(amount);\\n        emit VoteRecalled(msg.sender, servicePool, service, amount, currentDay);\\n    }\\n\\n    function dropService(address servicePool, address service) public {\\n        require(\\n            sbController.isServicePoolAccepted(servicePool),\\n            \\\"invalid servicePool\\\"\\n        );\\n        require(\\n            sbGenericServicePoolInterface(servicePool).isServiceAccepted(\\n                service\\n            ),\\n            \\\"invalid service\\\"\\n        );\\n        require(\\n            _voterServicePoolExists(msg.sender, servicePool),\\n            \\\"2: not found\\\"\\n        );\\n        require(\\n            _voterServicePoolServiceExists(msg.sender, servicePool, service),\\n            \\\"1: not found\\\"\\n        );\\n        uint256 currentDay = _getCurrentDay();\\n        (, uint256 votes, ) = _getVoterServicePoolServiceData(\\n            msg.sender,\\n            servicePool,\\n            service,\\n            currentDay\\n        );\\n        _updateVoterServicePoolServiceData(\\n            msg.sender,\\n            servicePool,\\n            service,\\n            votes,\\n            false,\\n            currentDay\\n        );\\n        _updateServiceServicePoolData(\\n            service,\\n            servicePool,\\n            votes,\\n            false,\\n            currentDay\\n        );\\n        _updateServicePoolData(servicePool, votes, false, currentDay);\\n        voterVotesOut[msg.sender] = voterVotesOut[msg.sender].sub(votes);\\n        uint256 voterServicePoolServicesIndex = _findIndexOfAddress(\\n            voterServicePoolServices[msg.sender][servicePool],\\n            service\\n        );\\n        _deleteArrayElement(\\n            voterServicePoolServicesIndex,\\n            voterServicePoolServices[msg.sender][servicePool]\\n        );\\n        if (voterServicePoolServices[msg.sender][servicePool].length == 0) {\\n            uint256 voterServicePoolsIndex = _findIndexOfAddress(\\n                voterServicePools[msg.sender],\\n                servicePool\\n            );\\n            _deleteArrayElement(\\n                voterServicePoolsIndex,\\n                voterServicePools[msg.sender]\\n            );\\n        }\\n        emit ServiceDropped(msg.sender, servicePool, service, currentDay);\\n    }\\n\\n    function serviceClaimAll(address servicePool) public {\\n        uint256 len = serviceServicePoolDays[msg.sender][servicePool].length;\\n        require(len != 0, \\\"no votes\\\");\\n        require(\\n            sbController.isServicePoolAccepted(servicePool),\\n            \\\"invalid servicePool\\\"\\n        );\\n        uint256 currentDay = _getCurrentDay();\\n        uint256 dayLastClaimedFor = serviceServicePoolDayLastClaimedFor[msg\\n            .sender][servicePool] == 0\\n            ? serviceServicePoolDays[msg.sender][servicePool][0].sub(1)\\n            : serviceServicePoolDayLastClaimedFor[msg.sender][servicePool];\\n        uint256 vestingDays = sbController.getVoteReceiverVestingDays();\\n        require(\\n            currentDay \\u003e dayLastClaimedFor.add(vestingDays),\\n            \\\"already claimed\\\"\\n        );\\n        _serviceClaim(\\n            currentDay,\\n            servicePool,\\n            msg.sender,\\n            dayLastClaimedFor,\\n            vestingDays\\n        );\\n    }\\n\\n    function serviceClaimUpTo(address servicePool, uint256 day) public {\\n        uint256 len = serviceServicePoolDays[msg.sender][servicePool].length;\\n        require(len != 0, \\\"no votes\\\");\\n        require(\\n            sbController.isServicePoolAccepted(servicePool),\\n            \\\"invalid servicePool\\\"\\n        );\\n        require(day \\u003c= _getCurrentDay(), \\\"invalid day\\\");\\n        uint256 dayLastClaimedFor = serviceServicePoolDayLastClaimedFor[msg\\n            .sender][servicePool] == 0\\n            ? serviceServicePoolDays[msg.sender][servicePool][0].sub(1)\\n            : serviceServicePoolDayLastClaimedFor[msg.sender][servicePool];\\n        uint256 vestingDays = sbController.getVoteReceiverVestingDays();\\n        require(day \\u003e dayLastClaimedFor.add(vestingDays), \\\"already claimed\\\");\\n        _serviceClaim(\\n            day,\\n            servicePool,\\n            msg.sender,\\n            dayLastClaimedFor,\\n            vestingDays\\n        );\\n    }\\n\\n    function voterClaimAll() public {\\n        uint256 dayLastClaimedFor;\\n        if (voterDayLastClaimedFor[msg.sender] == 0) {\\n            uint256 firstDayVoted = _getVoterFirstDay(msg.sender);\\n            require(firstDayVoted != 0, \\\"no votes\\\");\\n            dayLastClaimedFor = firstDayVoted.sub(1);\\n        } else {\\n            dayLastClaimedFor = voterDayLastClaimedFor[msg.sender];\\n        }\\n        uint256 currentDay = _getCurrentDay();\\n        uint256 vestingDays = sbController.getVoteCasterVestingDays();\\n        require(\\n            currentDay \\u003e dayLastClaimedFor.add(vestingDays),\\n            \\\"already claimed\\\"\\n        );\\n        _voterClaim(currentDay, msg.sender, dayLastClaimedFor, vestingDays);\\n    }\\n\\n    function voterClaimUpTo(uint256 day) public {\\n        uint256 dayLastClaimedFor;\\n        if (voterDayLastClaimedFor[msg.sender] == 0) {\\n            uint256 firstDayVoted = _getVoterFirstDay(msg.sender);\\n            require(firstDayVoted != 0, \\\"no votes\\\");\\n            dayLastClaimedFor = firstDayVoted.sub(1);\\n        } else {\\n            dayLastClaimedFor = voterDayLastClaimedFor[msg.sender];\\n        }\\n        require(day \\u003c= _getCurrentDay(), \\\"invalid day\\\");\\n        uint256 vestingDays = sbController.getVoteCasterVestingDays();\\n        require(day \\u003e dayLastClaimedFor.add(vestingDays), \\\"already claimed\\\");\\n        _voterClaim(day, msg.sender, dayLastClaimedFor, vestingDays);\\n    }\\n\\n    function getServiceRewardsDueAll(address servicePool, address service)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 len = serviceServicePoolDays[service][servicePool].length;\\n        if (len == 0) {\\n            return 0;\\n        }\\n        require(\\n            sbController.isServicePoolAccepted(servicePool),\\n            \\\"invalid servicePool\\\"\\n        );\\n        uint256 currentDay = _getCurrentDay();\\n\\n\\n            uint256 dayLastClaimedFor\\n         = serviceServicePoolDayLastClaimedFor[service][servicePool] == 0\\n            ? serviceServicePoolDays[service][servicePool][0].sub(1)\\n            : serviceServicePoolDayLastClaimedFor[service][servicePool];\\n        uint256 vestingDays = sbController.getVoteReceiverVestingDays();\\n        if (!(currentDay \\u003e dayLastClaimedFor.add(vestingDays))) {\\n            return 0;\\n        }\\n        return\\n            _getServiceRewardsDue(\\n                currentDay,\\n                servicePool,\\n                service,\\n                dayLastClaimedFor,\\n                vestingDays\\n            );\\n    }\\n\\n    function getServiceRewardsDueUpTo(\\n        address servicePool,\\n        address service,\\n        uint256 day\\n    ) public view returns (uint256) {\\n        uint256 len = serviceServicePoolDays[service][servicePool].length;\\n        if (len == 0) {\\n            return 0;\\n        }\\n        require(\\n            sbController.isServicePoolAccepted(servicePool),\\n            \\\"invalid servicePool\\\"\\n        );\\n        require(day \\u003c= _getCurrentDay(), \\\"invalid day\\\");\\n\\n\\n            uint256 dayLastClaimedFor\\n         = serviceServicePoolDayLastClaimedFor[service][servicePool] == 0\\n            ? serviceServicePoolDays[service][servicePool][0].sub(1)\\n            : serviceServicePoolDayLastClaimedFor[service][servicePool];\\n        uint256 vestingDays = sbController.getVoteReceiverVestingDays();\\n        if (!(day \\u003e dayLastClaimedFor.add(vestingDays))) {\\n            return 0;\\n        }\\n        return\\n            _getServiceRewardsDue(\\n                day,\\n                servicePool,\\n                service,\\n                dayLastClaimedFor,\\n                vestingDays\\n            );\\n    }\\n\\n    function getVoterRewardsDueAll(address voter)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 dayLastClaimedFor;\\n        if (voterDayLastClaimedFor[voter] == 0) {\\n            uint256 firstDayVoted = _getVoterFirstDay(voter);\\n            if (firstDayVoted == 0) {\\n                return 0;\\n            }\\n            dayLastClaimedFor = firstDayVoted.sub(1);\\n        } else {\\n            dayLastClaimedFor = voterDayLastClaimedFor[voter];\\n        }\\n        uint256 currentDay = _getCurrentDay();\\n        uint256 vestingDays = sbController.getVoteCasterVestingDays();\\n        if (!(currentDay \\u003e dayLastClaimedFor.add(vestingDays))) {\\n            return 0;\\n        }\\n        return\\n            _getVoterRewardsDue(\\n                currentDay,\\n                voter,\\n                dayLastClaimedFor,\\n                vestingDays\\n            );\\n    }\\n\\n    function getVoterRewardsDueUpTo(uint256 day, address voter)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 dayLastClaimedFor;\\n        if (voterDayLastClaimedFor[voter] == 0) {\\n            uint256 firstDayVoted = _getVoterFirstDay(voter);\\n            if (firstDayVoted == 0) {\\n                return 0;\\n            }\\n            dayLastClaimedFor = firstDayVoted.sub(1);\\n        } else {\\n            dayLastClaimedFor = voterDayLastClaimedFor[voter];\\n        }\\n        require(day \\u003c= _getCurrentDay(), \\\"invalid day\\\");\\n        uint256 vestingDays = sbController.getVoteCasterVestingDays();\\n        if (!(day \\u003e dayLastClaimedFor.add(vestingDays))) {\\n            return 0;\\n        }\\n        return _getVoterRewardsDue(day, voter, dayLastClaimedFor, vestingDays);\\n    }\\n\\n    function getVoterServicePoolServiceData(\\n        address voter,\\n        address servicePool,\\n        address service,\\n        uint256 dayNumber\\n    )\\n        public\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        uint256 day = dayNumber == 0 ? _getCurrentDay() : dayNumber;\\n        require(\\n            sbController.isServicePoolAccepted(servicePool),\\n            \\\"invalid servicePool\\\"\\n        );\\n        require(\\n            sbGenericServicePoolInterface(servicePool).isServiceAccepted(\\n                service\\n            ),\\n            \\\"invalid service\\\"\\n        );\\n        if (!_voterServicePoolServiceExists(voter, servicePool, service)) {\\n            return (day, 0, 0);\\n        }\\n        require(day \\u003c= _getCurrentDay(), \\\"invalid day\\\");\\n        return\\n            _getVoterServicePoolServiceData(voter, servicePool, service, day);\\n    }\\n\\n    function getServiceServicePoolData(\\n        address service,\\n        address servicePool,\\n        uint256 dayNumber\\n    )\\n        public\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        uint256 day = dayNumber == 0 ? _getCurrentDay() : dayNumber;\\n        require(\\n            sbController.isServicePoolAccepted(servicePool),\\n            \\\"invalid servicePool\\\"\\n        );\\n        require(\\n            sbGenericServicePoolInterface(servicePool).isServiceAccepted(\\n                service\\n            ),\\n            \\\"invalid service\\\"\\n        );\\n        require(day \\u003c= _getCurrentDay(), \\\"invalid day\\\");\\n        return _getServiceServicePoolData(service, servicePool, day);\\n    }\\n\\n    function getServicePoolData(address servicePool, uint256 dayNumber)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        uint256 day = dayNumber == 0 ? _getCurrentDay() : dayNumber;\\n        require(\\n            sbController.isServicePoolAccepted(servicePool),\\n            \\\"invalid servicePool\\\"\\n        );\\n        require(day \\u003c= _getCurrentDay(), \\\"invalid day\\\");\\n        return _getServicePoolData(servicePool, day);\\n    }\\n\\n    function _getVoterServicePoolServiceData(\\n        address voter,\\n        address servicePool,\\n        address service,\\n        uint256 day\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n\\n            uint256[] memory _Days\\n         = voterServicePoolServiceDays[voter][servicePool][service];\\n\\n\\n            uint256[] memory _Amounts\\n         = voterServicePoolServiceAmounts[voter][servicePool][service];\\n\\n\\n            uint256[] memory _UnitSeconds\\n         = voterServicePoolServiceVoteSeconds[voter][servicePool][service];\\n        return _get(_Days, _Amounts, _UnitSeconds, day);\\n    }\\n\\n    function _getServiceServicePoolData(\\n        address service,\\n        address servicePool,\\n        uint256 day\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        uint256[] memory _Days = serviceServicePoolDays[service][servicePool];\\n\\n\\n            uint256[] memory _Amounts\\n         = serviceServicePoolAmounts[service][servicePool];\\n\\n\\n            uint256[] memory _UnitSeconds\\n         = serviceServicePoolVoteSeconds[service][servicePool];\\n        return _get(_Days, _Amounts, _UnitSeconds, day);\\n    }\\n\\n    function _getServicePoolData(address servicePool, uint256 day)\\n        internal\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        uint256[] memory _Days = servicePoolDays[servicePool];\\n        uint256[] memory _Amounts = servicePoolAmounts[servicePool];\\n        uint256[] memory _UnitSeconds = servicePoolVoteSeconds[servicePool];\\n        return _get(_Days, _Amounts, _UnitSeconds, day);\\n    }\\n\\n    function _updateVoterServicePoolServiceData(\\n        address voter,\\n        address servicePool,\\n        address service,\\n        uint256 amount,\\n        bool adding,\\n        uint256 currentDay\\n    ) internal {\\n\\n            uint256[] storage _Days\\n         = voterServicePoolServiceDays[voter][servicePool][service];\\n\\n\\n            uint256[] storage _Amounts\\n         = voterServicePoolServiceAmounts[voter][servicePool][service];\\n\\n\\n            uint256[] storage _UnitSeconds\\n         = voterServicePoolServiceVoteSeconds[voter][servicePool][service];\\n        _update(_Days, _Amounts, _UnitSeconds, amount, adding, currentDay);\\n    }\\n\\n    function _updateServiceServicePoolData(\\n        address service,\\n        address servicePool,\\n        uint256 amount,\\n        bool adding,\\n        uint256 currentDay\\n    ) internal {\\n        uint256[] storage _Days = serviceServicePoolDays[service][servicePool];\\n\\n\\n            uint256[] storage _Amounts\\n         = serviceServicePoolAmounts[service][servicePool];\\n\\n\\n            uint256[] storage _UnitSeconds\\n         = serviceServicePoolVoteSeconds[service][servicePool];\\n        _update(_Days, _Amounts, _UnitSeconds, amount, adding, currentDay);\\n    }\\n\\n    function _updateServicePoolData(\\n        address servicePool,\\n        uint256 amount,\\n        bool adding,\\n        uint256 currentDay\\n    ) internal {\\n        uint256[] storage _Days = servicePoolDays[servicePool];\\n        uint256[] storage _Amounts = servicePoolAmounts[servicePool];\\n        uint256[] storage _UnitSeconds = servicePoolVoteSeconds[servicePool];\\n        _update(_Days, _Amounts, _UnitSeconds, amount, adding, currentDay);\\n    }\\n\\n    function _get(\\n        uint256[] memory _Days,\\n        uint256[] memory _Amounts,\\n        uint256[] memory _UnitSeconds,\\n        uint256 day\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        uint256 len = _Days.length;\\n        if (len == 0) {\\n            return (day, 0, 0);\\n        }\\n        if (day \\u003c _Days[0]) {\\n            return (day, 0, 0);\\n        }\\n        uint256 lastIndex = len.sub(1);\\n        uint256 lastMinedDay = _Days[lastIndex];\\n        if (day == lastMinedDay) {\\n            return (day, _Amounts[lastIndex], _UnitSeconds[lastIndex]);\\n        } else if (day \\u003e lastMinedDay) {\\n            return (day, _Amounts[lastIndex], _Amounts[lastIndex].mul(1 days));\\n        }\\n        return _find(_Days, _Amounts, _UnitSeconds, day);\\n    }\\n\\n    function _find(\\n        uint256[] memory _Days,\\n        uint256[] memory _Amounts,\\n        uint256[] memory _UnitSeconds,\\n        uint256 day\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        uint256 left = 0;\\n        uint256 right = _Days.length.sub(1);\\n        uint256 middle = right.add(left).div(2);\\n        while (left \\u003c right) {\\n            if (_Days[middle] == day) {\\n                return (day, _Amounts[middle], _UnitSeconds[middle]);\\n            } else if (_Days[middle] \\u003e day) {\\n                if (middle \\u003e 0 \\u0026\\u0026 _Days[middle.sub(1)] \\u003c day) {\\n                    return (\\n                        day,\\n                        _Amounts[middle.sub(1)],\\n                        _Amounts[middle.sub(1)].mul(1 days)\\n                    );\\n                }\\n                if (middle == 0) {\\n                    return (day, 0, 0);\\n                }\\n                right = middle.sub(1);\\n            } else if (_Days[middle] \\u003c day) {\\n                if (\\n                    middle \\u003c _Days.length.sub(1) \\u0026\\u0026 _Days[middle.add(1)] \\u003e day\\n                ) {\\n                    return (\\n                        day,\\n                        _Amounts[middle],\\n                        _Amounts[middle].mul(1 days)\\n                    );\\n                }\\n                left = middle.add(1);\\n            }\\n            middle = right.add(left).div(2);\\n        }\\n        if (_Days[middle] != day) {\\n            return (day, 0, 0);\\n        } else {\\n            return (day, _Amounts[middle], _UnitSeconds[middle]);\\n        }\\n    }\\n\\n    function _update(\\n        uint256[] storage _Days,\\n        uint256[] storage _Amounts,\\n        uint256[] storage _UnitSeconds,\\n        uint256 amount,\\n        bool adding,\\n        uint256 currentDay\\n    ) internal {\\n        uint256 len = _Days.length;\\n        uint256 secondsInADay = 1 days;\\n        uint256 secondsSinceStartOfDay = block.timestamp % secondsInADay;\\n        uint256 secondsUntilEndOfDay = secondsInADay.sub(\\n            secondsSinceStartOfDay\\n        );\\n\\n        if (len == 0) {\\n            if (adding) {\\n                _Days.push(currentDay);\\n                _Amounts.push(amount);\\n                _UnitSeconds.push(amount.mul(secondsUntilEndOfDay));\\n            } else {\\n                require(false, \\\"1: not enough mine\\\");\\n            }\\n        } else {\\n            uint256 lastIndex = len.sub(1);\\n            uint256 lastMinedDay = _Days[lastIndex];\\n            uint256 lastMinedAmount = _Amounts[lastIndex];\\n            uint256 lastUnitSeconds = _UnitSeconds[lastIndex];\\n\\n            uint256 newAmount;\\n            uint256 newUnitSeconds;\\n\\n            if (lastMinedDay == currentDay) {\\n                if (adding) {\\n                    newAmount = lastMinedAmount.add(amount);\\n                    newUnitSeconds = lastUnitSeconds.add(\\n                        amount.mul(secondsUntilEndOfDay)\\n                    );\\n                } else {\\n                    require(lastMinedAmount \\u003e= amount, \\\"2: not enough mine\\\");\\n                    newAmount = lastMinedAmount.sub(amount);\\n                    newUnitSeconds = lastUnitSeconds.sub(\\n                        amount.mul(secondsUntilEndOfDay)\\n                    );\\n                }\\n                _Amounts[lastIndex] = newAmount;\\n                _UnitSeconds[lastIndex] = newUnitSeconds;\\n            } else {\\n                if (adding) {\\n                    newAmount = lastMinedAmount.add(amount);\\n                    newUnitSeconds = lastMinedAmount.mul(1 days).add(\\n                        amount.mul(secondsUntilEndOfDay)\\n                    );\\n                } else {\\n                    require(lastMinedAmount \\u003e= amount, \\\"3: not enough mine\\\");\\n                    newAmount = lastMinedAmount.sub(amount);\\n                    newUnitSeconds = lastMinedAmount.mul(1 days).sub(\\n                        amount.mul(secondsUntilEndOfDay)\\n                    );\\n                }\\n                _Days.push(currentDay);\\n                _Amounts.push(newAmount);\\n                _UnitSeconds.push(newUnitSeconds);\\n            }\\n        }\\n    }\\n\\n    function _addVotes(address voter, uint96 amount) internal {\\n        require(voter != address(0), \\\"zero address\\\");\\n        balances[voter] = _add96(\\n            balances[voter],\\n            amount,\\n            \\\"vote amount overflows\\\"\\n        );\\n        _addDelegates(voter, amount);\\n        emit AddVotes(voter, amount);\\n    }\\n\\n    function _subVotes(address voter, uint96 amount) internal {\\n        balances[voter] = _sub96(\\n            balances[voter],\\n            amount,\\n            \\\"vote amount exceeds balance\\\"\\n        );\\n        _subtactDelegates(voter, amount);\\n        emit SubVotes(voter, amount);\\n    }\\n\\n    function _addDelegates(address staker, uint96 amount) internal {\\n        if (delegates[staker] == address(0)) {\\n            delegates[staker] = staker;\\n        }\\n        address currentDelegate = delegates[staker];\\n        _moveDelegates(address(0), currentDelegate, amount);\\n    }\\n\\n    function _subtactDelegates(address staker, uint96 amount) internal {\\n        address currentDelegate = delegates[staker];\\n        _moveDelegates(currentDelegate, address(0), amount);\\n    }\\n\\n    function _delegate(address delegator, address delegatee) internal {\\n        address currentDelegate = delegates[delegator];\\n        uint96 delegatorBalance = balances[delegator];\\n        delegates[delegator] = delegatee;\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\\n    }\\n\\n    function _moveDelegates(\\n        address srcRep,\\n        address dstRep,\\n        uint96 amount\\n    ) internal {\\n        if (srcRep != dstRep \\u0026\\u0026 amount \\u003e 0) {\\n            if (srcRep != address(0)) {\\n                uint32 srcRepNum = numCheckpoints[srcRep];\\n                uint96 srcRepOld = srcRepNum \\u003e 0\\n                    ? checkpointsVotes[srcRep][srcRepNum - 1]\\n                    : 0;\\n                uint96 srcRepNew = _sub96(\\n                    srcRepOld,\\n                    amount,\\n                    \\\"vote amount underflows\\\"\\n                );\\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\\n            }\\n            if (dstRep != address(0)) {\\n                uint32 dstRepNum = numCheckpoints[dstRep];\\n                uint96 dstRepOld = dstRepNum \\u003e 0\\n                    ? checkpointsVotes[dstRep][dstRepNum - 1]\\n                    : 0;\\n                uint96 dstRepNew = _add96(\\n                    dstRepOld,\\n                    amount,\\n                    \\\"vote amount overflows\\\"\\n                );\\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\\n            }\\n        }\\n    }\\n\\n    function _writeCheckpoint(\\n        address delegatee,\\n        uint32 nCheckpoints,\\n        uint96 oldVotes,\\n        uint96 newVotes\\n    ) internal {\\n        uint32 blockNumber = _safe32(\\n            block.number,\\n            \\\"block number exceeds 32 bits\\\"\\n        );\\n        if (\\n            nCheckpoints \\u003e 0 \\u0026\\u0026\\n            checkpointsFromBlock[delegatee][nCheckpoints - 1] == blockNumber\\n        ) {\\n            checkpointsVotes[delegatee][nCheckpoints - 1] = newVotes;\\n        } else {\\n            checkpointsFromBlock[delegatee][nCheckpoints] = blockNumber;\\n            checkpointsVotes[delegatee][nCheckpoints] = newVotes;\\n            numCheckpoints[delegatee] = nCheckpoints + 1;\\n        }\\n\\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\\n    }\\n\\n    function _safe32(uint256 n, string memory errorMessage)\\n        internal\\n        pure\\n        returns (uint32)\\n    {\\n        require(n \\u003c 2**32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function _safe96(uint256 n, string memory errorMessage)\\n        internal\\n        pure\\n        returns (uint96)\\n    {\\n        require(n \\u003c 2**96, errorMessage);\\n        return uint96(n);\\n    }\\n\\n    function _add96(\\n        uint96 a,\\n        uint96 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint96) {\\n        uint96 c = a + b;\\n        require(c \\u003e= a, errorMessage);\\n        return c;\\n    }\\n\\n    function _sub96(\\n        uint96 a,\\n        uint96 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint96) {\\n        require(b \\u003c= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    function _getCurrentProposalVotes(address account)\\n        internal\\n        view\\n        returns (uint96)\\n    {\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        return\\n            nCheckpoints \\u003e 0 ? checkpointsVotes[account][nCheckpoints - 1] : 0;\\n    }\\n\\n    function _getAvailableServiceVotes(address account)\\n        internal\\n        view\\n        returns (uint96)\\n    {\\n        uint96 proposalVotes = _getCurrentProposalVotes(account);\\n        return\\n            proposalVotes == 0\\n                ? 0\\n                : proposalVotes -\\n                    _safe96(\\n                        voterVotesOut[account],\\n                        \\\"voterVotesOut exceeds 96 bits\\\"\\n                    );\\n    }\\n\\n    function _voterServicePoolExists(address voter, address servicePool)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        for (uint256 i = 0; i \\u003c voterServicePools[voter].length; i++) {\\n            if (voterServicePools[voter][i] == servicePool) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function _voterServicePoolServiceExists(\\n        address voter,\\n        address servicePool,\\n        address service\\n    ) internal view returns (bool) {\\n        for (\\n            uint256 i = 0;\\n            i \\u003c voterServicePoolServices[voter][servicePool].length;\\n            i++\\n        ) {\\n            if (voterServicePoolServices[voter][servicePool][i] == service) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function _recallAllVotes(address voter) internal {\\n        uint256 currentDay = _getCurrentDay();\\n        for (uint256 i = 0; i \\u003c voterServicePools[voter].length; i++) {\\n            address servicePool = voterServicePools[voter][i];\\n\\n\\n                address[] memory services\\n             = voterServicePoolServices[voter][servicePool];\\n            for (uint256 j = 0; j \\u003c services.length; j++) {\\n                address service = services[j];\\n                (, uint256 amount, ) = _getVoterServicePoolServiceData(\\n                    voter,\\n                    servicePool,\\n                    service,\\n                    currentDay\\n                );\\n                _updateVoterServicePoolServiceData(\\n                    voter,\\n                    servicePool,\\n                    service,\\n                    amount,\\n                    false,\\n                    currentDay\\n                );\\n                _updateServiceServicePoolData(\\n                    service,\\n                    servicePool,\\n                    amount,\\n                    false,\\n                    currentDay\\n                );\\n                _updateServicePoolData(servicePool, amount, false, currentDay);\\n                voterVotesOut[voter] = voterVotesOut[voter].sub(amount);\\n            }\\n        }\\n    }\\n\\n    function _serviceClaim(\\n        uint256 upToDay,\\n        address servicePool,\\n        address service,\\n        uint256 dayLastClaimedFor,\\n        uint256 vestingDays\\n    ) internal {\\n        uint256 rewards = _getServiceRewardsDue(\\n            upToDay,\\n            servicePool,\\n            service,\\n            dayLastClaimedFor,\\n            vestingDays\\n        );\\n        require(rewards \\u003e 0, \\\"no rewards\\\");\\n        serviceServicePoolDayLastClaimedFor[service][servicePool] = upToDay.sub(\\n            vestingDays\\n        );\\n        sbController.requestRewards(service, rewards);\\n        emit Claimed(service, rewards, _getCurrentDay());\\n    }\\n\\n    function _getServiceRewardsDue(\\n        uint256 upToDay,\\n        address servicePool,\\n        address service,\\n        uint256 dayLastClaimedFor,\\n        uint256 vestingDays\\n    ) internal view returns (uint256) {\\n        uint256 rewards;\\n        for (\\n            uint256 day = dayLastClaimedFor.add(1);\\n            day \\u003c= upToDay.sub(vestingDays);\\n            day++\\n        ) {\\n            (, , uint256 servicePoolVoteSecondsForDay) = _getServicePoolData(\\n                servicePool,\\n                day\\n            );\\n            if (servicePoolVoteSecondsForDay == 0) {\\n                continue;\\n            }\\n            (, , uint256 serviceVoteSecondsForDay) = _getServiceServicePoolData(\\n                service,\\n                servicePool,\\n                day\\n            );\\n            uint256 availableRewards = sbController.getVoteReceiversRewards(\\n                day\\n            );\\n            uint256 amount = availableRewards.mul(serviceVoteSecondsForDay).div(\\n                servicePoolVoteSecondsForDay\\n            );\\n            rewards = rewards.add(amount);\\n        }\\n        return rewards;\\n    }\\n\\n    function _voterClaim(\\n        uint256 upToDay,\\n        address voter,\\n        uint256 dayLastClaimedFor,\\n        uint256 vestingDays\\n    ) internal {\\n        uint256 rewards = _getVoterRewardsDue(\\n            upToDay,\\n            voter,\\n            dayLastClaimedFor,\\n            vestingDays\\n        );\\n        require(rewards \\u003e 0, \\\"no rewards\\\");\\n        voterDayLastClaimedFor[voter] = upToDay.sub(vestingDays);\\n        sbController.requestRewards(voter, rewards);\\n        emit Claimed(voter, rewards, _getCurrentDay());\\n    }\\n\\n    function _getVoterRewardsDue(\\n        uint256 upToDay,\\n        address voter,\\n        uint256 dayLastClaimedFor,\\n        uint256 vestingDays\\n    ) internal view returns (uint256) {\\n        uint256 rewards;\\n        address[] memory servicePools = voterServicePools[voter];\\n        for (\\n            uint256 day = dayLastClaimedFor.add(1);\\n            day \\u003c= upToDay.sub(vestingDays);\\n            day++\\n        ) {\\n            for (uint256 i = 0; i \\u003c servicePools.length; i++) {\\n                address servicePool = servicePools[i];\\n                (\\n                    ,\\n                    ,\\n                    uint256 servicePoolVoteSecondsForDay\\n                ) = _getServicePoolData(servicePool, day);\\n                if (servicePoolVoteSecondsForDay == 0) {\\n                    continue;\\n                }\\n\\n\\n                    address[] memory services\\n                 = voterServicePoolServices[voter][servicePool];\\n                uint256 voterServicePoolVoteSecondsForDay;\\n                for (uint256 j = 0; j \\u003c services.length; j++) {\\n                    address service = services[j];\\n                    (\\n                        ,\\n                        ,\\n                        uint256 voterVoteSeconds\\n                    ) = _getVoterServicePoolServiceData(\\n                        voter,\\n                        servicePool,\\n                        service,\\n                        day\\n                    );\\n                    voterServicePoolVoteSecondsForDay = voterServicePoolVoteSecondsForDay\\n                        .add(voterVoteSeconds);\\n                }\\n                uint256 availableRewards = sbController.getVoteCastersRewards(\\n                    day\\n                );\\n                uint256 amount = availableRewards\\n                    .mul(voterServicePoolVoteSecondsForDay)\\n                    .div(servicePoolVoteSecondsForDay);\\n                rewards = rewards.add(amount);\\n            }\\n        }\\n        return rewards;\\n    }\\n\\n    function _getCurrentDay() internal view returns (uint256) {\\n        return block.timestamp.div(1 days).add(1);\\n    }\\n\\n    function _deleteArrayElement(uint256 index, address[] storage array)\\n        internal\\n    {\\n        if (index == array.length.sub(1)) {\\n            array.pop();\\n        } else {\\n            array[index] = array[array.length.sub(1)];\\n            array.pop();\\n        }\\n    }\\n\\n    function _findIndexOfAddress(address[] memory array, address element)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 index;\\n        for (uint256 i = 0; i \\u003c array.length; i++) {\\n            if (array[i] == element) {\\n                index = i;\\n            }\\n        }\\n        return index;\\n    }\\n\\n    function _getVoterFirstDay(address voter) internal view returns (uint256) {\\n        uint256 firstDay = 0;\\n        for (uint256 i = 0; i \\u003c voterServicePools[voter].length; i++) {\\n            address servicePool = voterServicePools[voter][i];\\n            for (\\n                uint256 j = 0;\\n                j \\u003c voterServicePoolServices[voter][servicePool].length;\\n                j++\\n            ) {\\n\\n                    address service\\n                 = voterServicePoolServices[voter][servicePool][j];\\n                if (\\n                    voterServicePoolServiceDays[voter][servicePool][service]\\n                        .length != 0\\n                ) {\\n                    if (firstDay == 0) {\\n                        firstDay = voterServicePoolServiceDays[voter][servicePool][service][0];\\n                    } else if (\\n                        voterServicePoolServiceDays[voter][servicePool][service][0] \\u003c\\n                        firstDay\\n                    ) {\\n                        firstDay = voterServicePoolServiceDays[voter][servicePool][service][0];\\n                    }\\n                }\\n            }\\n        }\\n        return firstDay;\\n    }\\n}\\n\"}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AddVotes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"service\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"community\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"service\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"ServiceDropped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SubVotes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"community\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"service\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"VoteRecalled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"community\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"service\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"checkpointsFromBlock\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"checkpointsVotes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"servicePool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"service\",\"type\":\"address\"}],\"name\":\"dropService\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAvailableServiceVotes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getCurrentProposalVotes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"}],\"name\":\"getDelegate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPriorProposalVotes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"servicePool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"service\",\"type\":\"address\"}],\"name\":\"getServiceDayLastClaimedFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"servicePool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dayNumber\",\"type\":\"uint256\"}],\"name\":\"getServicePoolData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"servicePool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"service\",\"type\":\"address\"}],\"name\":\"getServiceRewardsDueAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"servicePool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"service\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"getServiceRewardsDueUpTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"service\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"servicePool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dayNumber\",\"type\":\"uint256\"}],\"name\":\"getServiceServicePoolData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"getVoterDayLastClaimedFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"getVoterRewardsDueAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"getVoterRewardsDueUpTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"servicePool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"service\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dayNumber\",\"type\":\"uint256\"}],\"name\":\"getVoterServicePoolServiceData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"servicePool\",\"type\":\"address\"}],\"name\":\"getVoterServicePoolServices\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sbControllerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sbStrongValuePoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"adminAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"superAdminAddress\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initDone\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingSuperAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recallAllVotes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"servicePool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"service\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recallVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sbController\",\"outputs\":[{\"internalType\":\"contract sbControllerInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sbGenericServicePool\",\"outputs\":[{\"internalType\":\"contract sbGenericServicePoolInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sbStrongValuePool\",\"outputs\":[{\"internalType\":\"contract sbStrongValuePoolInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"servicePool\",\"type\":\"address\"}],\"name\":\"serviceClaimAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"servicePool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"serviceClaimUpTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"superAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"adding\",\"type\":\"bool\"}],\"name\":\"updateVotes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"servicePool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"service\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voterClaimAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"voterClaimUpTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"sbVotes","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://98179f4fe2fcb854dc6a1d380a76130dff5414b0d11407aa3f739a2b69783f36"}]}