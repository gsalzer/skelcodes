{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.0.6 https://hardhat.org\r\n\r\n// File contracts/uniswapv2/libraries/TransferHelper.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/IERC20.sol\r\n\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    // EIP 2612\r\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n}\r\n\r\n\r\n// File contracts/uniswapv2/libraries/SafeMath.sol\r\n\r\n\r\n\r\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\r\n\r\nlibrary SafeMathUniswap {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, 'ds-math-add-overflow');\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\r\n    }\r\n}\r\n\r\n\r\n// File contracts/uniswapv2/interfaces/IUniswapV2Pair.sol\r\n\r\n\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n\r\n// File contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol\r\n\r\n\r\n\r\ninterface IUniswapV2ERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n}\r\n\r\n\r\n// File contracts/SushiYieldToken.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract SushiYieldToken {\r\n    using SafeMathUniswap for uint256;\r\n    using TransferHelper for address;\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Mint(address indexed sender, uint256 amount);\r\n    event Burn(address indexed sender, uint256 amount, address indexed to);\r\n\r\n    /**\r\n     * @return address of YieldTokenFactory\r\n     */\r\n    address public factory;\r\n    /**\r\n     * @return address of lp token\r\n     */\r\n    address public lpToken;\r\n    /**\r\n     * @return data to be used when `mint`ing/`burn`ing\r\n     */\r\n    bytes public data;\r\n\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public constant decimals = 18;\r\n    uint256 public totalSupply;\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n    bytes32 public DOMAIN_SEPARATOR;\r\n    // keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\r\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\r\n    mapping(address => uint256) public nonces;\r\n\r\n    uint256 private unlocked = 1;\r\n    modifier lock() {\r\n        require(unlocked == 1, \"locked\");\r\n        unlocked = 0;\r\n        _;\r\n        unlocked = 1;\r\n    }\r\n\r\n    constructor() public {\r\n        factory = msg.sender;\r\n\r\n        uint256 chainId;\r\n        assembly {\r\n            chainId := chainid()\r\n        }\r\n        DOMAIN_SEPARATOR = keccak256(\r\n            abi.encode(\r\n                keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\r\n                keccak256(bytes(name)),\r\n                keccak256(bytes(\"1\")),\r\n                chainId,\r\n                address(this)\r\n            )\r\n        );\r\n    }\r\n\r\n    function initialize(address _lpToken, bytes memory _data) external {\r\n        require(msg.sender == factory, \"forbidden\");\r\n        lpToken = _lpToken;\r\n        data = _data;\r\n\r\n        IUniswapV2Pair pair = IUniswapV2Pair(lpToken);\r\n        string memory symbol0 = IUniswapV2ERC20(pair.token0()).symbol();\r\n        string memory symbol1 = IUniswapV2ERC20(pair.token1()).symbol();\r\n        name = string(abi.encodePacked(symbol0, \"-\", symbol1, \" SushiSwap Yield Token\"));\r\n        symbol = string(abi.encodePacked(symbol0, \"-\", symbol1, \" SYD\"));\r\n    }\r\n\r\n    function _mint(address to, uint256 value) internal {\r\n        totalSupply = totalSupply.add(value);\r\n        balanceOf[to] = balanceOf[to].add(value);\r\n        emit Transfer(address(0), to, value);\r\n    }\r\n\r\n    function _burn(address from, uint256 value) internal {\r\n        balanceOf[from] = balanceOf[from].sub(value);\r\n        totalSupply = totalSupply.sub(value);\r\n        emit Transfer(from, address(0), value);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 value) private {\r\n        allowance[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 value) private {\r\n        balanceOf[from] = balanceOf[from].sub(value);\r\n        balanceOf[to] = balanceOf[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    function approve(address spender, uint256 value) external returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address to, uint256 value) external returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool) {\r\n        if (allowance[from][msg.sender] != uint256(-1)) {\r\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\r\n        }\r\n        _transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external {\r\n        require(deadline >= block.timestamp, \"expired\");\r\n        bytes32 digest = keccak256(\r\n            abi.encodePacked(\r\n                \"\\x19\\x01\",\r\n                DOMAIN_SEPARATOR,\r\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\r\n            )\r\n        );\r\n        address recoveredAddress = ecrecover(digest, v, r, s);\r\n        require(recoveredAddress != address(0) && recoveredAddress == owner, \"invalid-signature\");\r\n        _approve(owner, spender, value);\r\n    }\r\n\r\n    function mint(address to) external lock returns (uint256 amount) {\r\n        amount = IUniswapV2ERC20(lpToken).balanceOf(address(this));\r\n        require(amount > 0, \"insufficient-balance\");\r\n\r\n        (bool success,) = factory.delegatecall(abi.encodeWithSignature(\"deposit(bytes,uint256,address)\", data, amount, to));\r\n        require(success, \"failed-to-deposit\");\r\n\r\n        _mint(to, amount);\r\n\r\n        emit Mint(msg.sender, amount);\r\n    }\r\n\r\n    function burn(address to) external lock returns (uint256 amount) {\r\n        amount = balanceOf[address(this)];\r\n        require(amount > 0, \"insufficient-balance\");\r\n\r\n        (bool success,) = factory.delegatecall(abi.encodeWithSignature(\"withdraw(bytes,uint256,address)\", data, amount, to));\r\n        require(success, \"failed-to-withdraw\");\r\n\r\n        _burn(address(this), amount);\r\n\r\n        emit Burn(msg.sender, amount, to);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/YieldTokenFactory.sol\r\n\r\n\r\n\r\n\r\n\r\ninterface IMasterChef {\r\n    struct PoolInfo {\r\n        address lpToken;\r\n        uint256 allocPoint;\r\n        uint256 lastRewardBlock;\r\n        uint256 accSushiPerShare;\r\n    }\r\n\r\n    function sushi() external view returns (address);\r\n\r\n    function poolInfo(uint256 index) external view returns (\r\n        address lpToken,\r\n        uint256 allocPoint,\r\n        uint256 lastRewardBlock,\r\n        uint256 accSushiPerShare\r\n    );\r\n\r\n    function deposit(uint256 pid, uint256 amount) external;\r\n\r\n    function withdraw(uint256 pid, uint256 amount) external;\r\n}\r\n\r\ncontract YieldTokenFactory {\r\n    using TransferHelper for address;\r\n\r\n    event YieldTokenCreated(uint256 pid, address token);\r\n\r\n    /**\r\n     * @return address of `MasterChef`\r\n     */\r\n    address public masterChef;\r\n\r\n    /**\r\n     * @return address of `SushiToken`\r\n     */\r\n    address public sushi;\r\n\r\n    /**\r\n     * @return address of `SushiYieldToken` for `pid`\r\n     */\r\n    mapping(uint256 => address) public getYieldToken;\r\n\r\n    constructor(address _masterChef) public {\r\n        masterChef = _masterChef;\r\n        sushi = IMasterChef(_masterChef).sushi();\r\n    }\r\n\r\n    /**\r\n     * @return init hash of `SushiYieldToken`\r\n     */\r\n    function yieldTokenCodeHash() external pure returns (bytes32) {\r\n        return keccak256(type(SushiYieldToken).creationCode);\r\n    }\r\n\r\n    /**\r\n     * @notice create a new `SushiYieldToken` for `pid`\r\n     *\r\n     * @return token created token's address\r\n     */\r\n    function createYieldToken(uint256 pid) external returns (address token) {\r\n        require(getYieldToken[pid] == address(0), \"already-created\");\r\n\r\n        bytes memory bytecode = type(SushiYieldToken).creationCode;\r\n        bytes memory data = abi.encode(masterChef, pid);\r\n        bytes32 salt = keccak256(data);\r\n        assembly {\r\n            token := create2(0, add(bytecode, 32), mload(bytecode), salt)\r\n        }\r\n        (address lpToken,,,) = IMasterChef(masterChef).poolInfo(pid);\r\n        SushiYieldToken(token).initialize(lpToken, data);\r\n        getYieldToken[pid] = token;\r\n\r\n        emit YieldTokenCreated(pid, token);\r\n    }\r\n\r\n    /**\r\n     * @notice deposit lp token (meant to be `delegatecall`ed by `SushiYieldToken`)\r\n     *\r\n     * @param data encoded `pid`\r\n     * @param amount amount of lp tokens\r\n     * @param to receiver of sushi rewards\r\n     */\r\n    function deposit(bytes memory data, uint256 amount, address to) external {\r\n        (address _masterChef, uint256 pid) = abi.decode(data, (address, uint256));\r\n        (address lpToken,,,) = IMasterChef(_masterChef).poolInfo(pid);\r\n        lpToken.safeApprove(_masterChef, amount);\r\n        IMasterChef(_masterChef).deposit(pid, amount);\r\n        _transferBalance(sushi, to);\r\n    }\r\n\r\n    /**\r\n     * @notice withdraw lp tokens (meant to be `delegatecall`ed by `SushiYieldToken`)\r\n     *\r\n     * @param data encoded `pid`\r\n     * @param amount amount of lp tokens\r\n     * @param to receiver of lp tokens\r\n     */\r\n    function withdraw(bytes memory data, uint256 amount, address to) external {\r\n        (address _masterChef, uint256 pid) = abi.decode(data, (address, uint256));\r\n        (address lpToken,,,) = IMasterChef(_masterChef).poolInfo(pid);\r\n        IMasterChef(_masterChef).withdraw(pid, amount);\r\n        _transferBalance(lpToken, to);\r\n        _transferBalance(sushi, to);\r\n    }\r\n\r\n    function _transferBalance(address token, address to) internal {\r\n        uint256 balance = IERC20(token).balanceOf(address(this));\r\n        if (balance > 0) {\r\n            token.safeTransfer(to, balance);\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterChef\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"YieldTokenCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"createYieldToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getYieldToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterChef\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushi\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldTokenCodeHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"YieldTokenFactory","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c2edad668740f1aa35e4d8f227fb8e17dca888cd","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d1d5e21f0cd4844a763884968ec7020ebf6c5a8a2db775cbaeba40f40988d8a2"}]}