{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.7.3;\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ninterface ItokenRecipient { \r\n    function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external returns (bool); \r\n}\r\n\r\ninterface IERC20Token {\r\n    function totalSupply() external view returns (uint256 supply);\r\n    function transfer(address _to, uint256 _value) external  returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\r\n}\r\n\r\ncontract Ownable {\r\n\r\n    address private owner;\r\n    \r\n    event OwnerSet(address indexed oldOwner, address indexed newOwner);\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Caller is not owner\");\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        owner = msg.sender; // 'msg.sender' is sender of current call, contract deployer for a constructor\r\n        emit OwnerSet(address(0), owner);\r\n    }\r\n\r\n\r\n    function changeOwner(address newOwner) public onlyOwner {\r\n        emit OwnerSet(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    function getOwner() external view returns (address) {\r\n        return owner;\r\n    }\r\n}\r\n\r\ncontract StandardToken is IERC20Token {\r\n    \r\n    using SafeMath for uint256;\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    uint256 public _totalSupply;\r\n    \r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    \r\n    function totalSupply() override public view returns (uint256 supply) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) override virtual public returns (bool success) {\r\n        require(_to != address(0x0), \"Use burn function instead\");                              \r\n\t\trequire(_value >= 0, \"Invalid amount\"); \r\n\t\trequire(balances[msg.sender] >= _value, \"Not enough balance\");\r\n\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\r\n\t\tbalances[_to] = balances[_to].add(_value);\r\n\t\temit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) override virtual public returns (bool success) {\r\n        require(_to != address(0x0), \"Use burn function instead\");                               \r\n\t\trequire(_value >= 0, \"Invalid amount\"); \r\n\t\trequire(balances[_from] >= _value, \"Not enough balance\");\r\n\t\trequire(allowed[_from][msg.sender] >= _value, \"You need to increase allowance\");\r\n\t\tbalances[_from] = balances[_from].sub(_value);\r\n\t\tbalances[_to] = balances[_to].add(_value);\r\n\t\temit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) override public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) override public returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) override public view returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    \r\n}\r\n\r\ncontract VRGToken is Ownable, StandardToken {\r\n\r\n    using SafeMath for uint256;\r\n    string public name = \"Virtual Reality Games and Bets\";\r\n    uint8 public decimals = 18;\r\n    string public symbol = \"VRG\";\r\n    address public sellingcontract;\r\n    mapping (address => bool) lockedWallets;\r\n    mapping (address => uint256) lockedBalances;\r\n    struct BalanceUnlock {\r\n        bool released;\r\n        uint256 amount;\r\n        uint256 rdate;\r\n    }\r\n    mapping (address => mapping(uint8 => BalanceUnlock)) progressiveRelease;\r\n    uint256 public walletUnlockDate = 1609711800;\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n    \r\n    constructor() {\r\n        _totalSupply = 100000000 ether;\r\n        // Selling Contract - 16000000 tokens\r\n        sellingcontract = (0x535D7c2F4e7adE018547eF9DD0348DC84c3E09dE);\r\n        balances[sellingcontract] = 16000000 ether;\r\n        emit Transfer(address(0x0), sellingcontract, (16000000 ether));\r\n        \r\n        // Marketing wallet - 4000000 tokens\r\n        address marketing = 0x911D5FE8ac63954a6652F240927B09201238d1f9;\r\n        balances[marketing] = 4000000 ether;\r\n        emit Transfer(address(0x0), marketing, (4000000 ether));\r\n        \r\n        // Team wallet - 4000000 tokens (Locked - progressive release)\r\n        address team = 0xa6549a3eC56F5b8bA7A08809D09B66F605CD6b25;\r\n        balances[team] = 4000000 ether;\r\n        emit Transfer(address(0x0), team, (4000000 ether));\r\n        // locking balances\r\n        lockedBalances[team] = 4000000 ether;\r\n        // First release\r\n        createUnlockPoint(team, uint8(1), (1000000 ether), (block.timestamp + (180 days)));\r\n        // second release\r\n        createUnlockPoint(team, uint8(2), (1000000 ether), (block.timestamp + (270 days)));\r\n        // third release\r\n        createUnlockPoint(team, uint8(3), (1000000 ether), (block.timestamp + (360 days)));\r\n        // fourth release\r\n        createUnlockPoint(team, uint8(4), (1000000 ether), (block.timestamp + (450 days)));\r\n        \r\n        // Uniswap and exchanges - 26000000 tokens locked until crowdsale ends\r\n        address exchanges = 0x95f582EB80b8AcB9a7FdC377aD0b0cF5731Aca57;  \r\n        balances[exchanges] = 26000000 ether;\r\n        emit Transfer(address(0x0), exchanges, (26000000 ether));\r\n        // locking balances\r\n        lockedBalances[exchanges] = 26000000 ether;\r\n        createUnlockPoint(exchanges, uint8(1), (26000000 ether), 1609718399);\r\n        \r\n        // Betting Platform tokens\r\n        // Development - 2000000 for inmediate release and \r\n        // 48000000 locked - Releasing 12000000 every 90 days\r\n        address BettingPlatform = 0x4514CFBB6C80a46fd64484c19d0442fa5cb80EF1;  \r\n        balances[BettingPlatform] = 50000000 ether;\r\n        emit Transfer(address(0x0), BettingPlatform, (50000000 ether));\r\n        // locking balances\r\n        lockedBalances[BettingPlatform] = 48000000 ether;\r\n        // First release\r\n        createUnlockPoint(BettingPlatform, uint8(1), (12000000 ether), (block.timestamp + (90 days)));\r\n        // second release\r\n        createUnlockPoint(BettingPlatform, uint8(2), (12000000 ether), (block.timestamp + (180 days)));\r\n        // third release\r\n        createUnlockPoint(BettingPlatform, uint8(3), (12000000 ether), (block.timestamp + (270 days)));\r\n        // fourth release\r\n        createUnlockPoint(BettingPlatform, uint8(4), (12000000 ether), (block.timestamp + (360 days)));\r\n        \r\n    }\r\n    \r\n    function transfer(address _to, uint256 _value) override public returns (bool success) {\r\n        require(canTransfer(msg.sender));\r\n        require(_value <= (balances[msg.sender] - lockedBalances[msg.sender]));\r\n        return super.transfer(_to, _value);\r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _value) override public returns (bool success) {\r\n        require(canTransfer(_from));\r\n        require(_value <= (balances[_from] - lockedBalances[_from]));\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n    \r\n    function burn(uint256 _value) public returns (bool success) {\r\n        require(balances[msg.sender] >= _value, \"Not enough balance\");\r\n\t\trequire(_value >= 0, \"Invalid amount\"); \r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        _totalSupply = _totalSupply.sub(_value);\r\n        emit Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n    \r\n    function approveAndCall(address _spender, uint256 _value, bytes memory _extraData) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        ItokenRecipient recipient = ItokenRecipient(_spender);\r\n        require(recipient.receiveApproval(msg.sender, _value, address(this), _extraData));\r\n        return true;\r\n    }\r\n    \r\n    function createUnlockPoint(address _wallet, uint8 _releaseId, uint256 _amount, uint256 _releaseTime) private {\r\n        BalanceUnlock memory unlockPoint;\r\n        unlockPoint = BalanceUnlock(false, _amount, _releaseTime);\r\n        progressiveRelease[_wallet][_releaseId] = unlockPoint;\r\n    }\r\n    \r\n    function releaseTokens(uint8 _unlockPoint) public returns (bool success) {\r\n        if (progressiveRelease[msg.sender][_unlockPoint].released == false) {\r\n            if (progressiveRelease[msg.sender][_unlockPoint].amount > 0 ) {\r\n                if (progressiveRelease[msg.sender][_unlockPoint].rdate < block.timestamp) {\r\n                    lockedBalances[msg.sender] -= progressiveRelease[msg.sender][_unlockPoint].amount;\r\n                    progressiveRelease[msg.sender][_unlockPoint].released = true;\r\n                    return true;\r\n                } else {\r\n                    return false;\r\n                }\r\n            } else {\r\n                return false;\r\n            }\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    \r\n    function tokensSold(address buyer, uint256 amount) public returns (bool success) {\r\n        require(msg.sender == sellingcontract);\r\n        lockedWallets[buyer] = true;\r\n        return super.transfer(buyer, amount);\r\n    }\r\n    \r\n    function canTransfer(address _wallet) private returns (bool) {\r\n        if (lockedWallets[_wallet] == true) {\r\n            if (block.timestamp > walletUnlockDate) {\r\n                lockedWallets[_wallet] = false;\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n    \r\n    function isWalletLocked(address _wallet) public view returns (bool isLocked) {\r\n        return lockedWallets[_wallet];\r\n    }\r\n    \r\n    function isBalanceReleased(address _wallet, uint8 _unlockPoint) public view returns (bool released) {\r\n        return progressiveRelease[_wallet][_unlockPoint].released;\r\n    }\r\n    \r\n    function getLockedBalance(address _wallet) public view returns (uint256 lockedBalance) {\r\n        return lockedBalances[_wallet];\r\n    }\r\n    \r\n\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getLockedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockedBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_unlockPoint\",\"type\":\"uint8\"}],\"name\":\"isBalanceReleased\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"released\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"isWalletLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isLocked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_unlockPoint\",\"type\":\"uint8\"}],\"name\":\"releaseTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellingcontract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"tokensSold\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletUnlockDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"VRGToken","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b4f53829a1b86728a2813c8c530435917fdf7a2d6ec7690079fbcf027c334e78"}]}