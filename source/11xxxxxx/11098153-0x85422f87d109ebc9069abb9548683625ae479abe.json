{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.6.12;\n\n\n// \n// TODO: Needs testing to make sure math is correct and overflow/underflows are caught in all cases\nlibrary BoringMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) { uint256 c = a + b; require(c >= b, \"BoringMath: Overflow\"); return c; }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) { require(b <= a, \"BoringMath: Underflow\"); return a - b; }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256)\r\n        { if (a == 0) {return 0;} uint256 c = a * b; require(c / a == b, \"BoringMath: Overflow\"); return c; }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) { require(b > 0, \"BoringMath: Div by 0\"); return a / b; }\r\n}\n\n// \n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\n// Edited by BoringCrypto\n// - removed GSN context\n// - removed comments (we all know this contract)\n// - updated solidity version\n// - made _owner public and renamed to owner\n// - simplified code\n// - onlyOwner modifier removed. Just copy the one line. Cheaper in gas, better readability and better error message.\n// TODO: Consider using the version that requires acceptance from new owner\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () internal {\r\n        owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    function renounceOwnership() public virtual {\r\n        require(owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        emit OwnershipTransferred(owner, address(0));\r\n        owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual {\r\n        require(owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n}\n\n// \ninterface IOracle {\r\n    // Each oracle should have a set function. The first parameter will be 'address pair' and any parameters can come after.\r\n    // Setting should only be allowed ONCE for each pair.\r\n\r\n    // Get the latest exchange rate, if no valid (recent) rate is available, return false\r\n    function get(address pair) external returns (bool, uint256);\r\n\r\n    // Check the last exchange rate without any state changes\r\n    function peek(address pair) external view returns (uint256);\r\n}\n\n// \n// ChainLink Aggregator\ninterface IAggregator {\r\n    function latestRoundData() external view returns (uint80, int256 answer, uint256, uint256, uint80);\r\n}\n\ncontract ChainlinkOracle is IOracle {\r\n    using BoringMath for uint256; // Keep everything in uint256\r\n\r\n    struct SymbolPair {\r\n        address multiply;   // The ChainLink price to multiply by to get rate\r\n        address divide;     // The ChainLink price to divide by to get rate\r\n        uint256 decimals;   // Just pre-calc and store as something like 10000000000000000000000.\r\n        uint256 rate;\r\n    }\r\n\r\n    mapping(address => SymbolPair) symbols;\r\n\r\n    function init(address multiply, address divide, uint256 decimals) public {\r\n        // The rate can only be set once. It cannot be changed.\r\n        if (symbols[msg.sender].decimals == 0) {\r\n            symbols[msg.sender].multiply = multiply;\r\n            symbols[msg.sender].divide = divide;\r\n            symbols[msg.sender].decimals = decimals;\r\n        }\r\n    }\r\n\r\n    function getInitData(address multiply, address divide, uint256 decimals) public pure returns (bytes memory) {\r\n        return abi.encodeWithSignature(\"init(address,address,uint256)\", multiply, divide, decimals);\r\n    }\r\n\r\n    function _get(address multiply, address divide, uint256 decimals) public view returns (uint256) {\r\n        uint256 price = uint256(1e18);\r\n        if (multiply != address(0)) {\r\n            (, int256 priceC,,,) = IAggregator(multiply).latestRoundData();\r\n            price = price.mul(uint256(priceC));\r\n        } else {\r\n            price = price.mul(1e18);\r\n        }\r\n\r\n        if (divide != address(0)) {\r\n            (, int256 priceC,,,) = IAggregator(divide).latestRoundData();\r\n            price = price.div(uint256(priceC));\r\n        }\r\n\r\n        return price.div(decimals);\r\n    }\r\n\r\n    // Get the latest exchange rate\r\n    function get(address pair) public override returns (bool, uint256) {\r\n        SymbolPair storage s = symbols[pair];\r\n        uint256 rate = _get(s.multiply, s.divide, s.decimals);\r\n        s.rate = rate;\r\n        return (true, rate);\r\n    }\r\n\r\n    // Check the last exchange rate without any state changes\r\n    function peek(address pair) public override view returns (uint256) {\r\n        SymbolPair storage s = symbols[pair];\r\n        return _get(s.multiply, s.divide, s.decimals);\r\n    }\r\n\r\n    function test(address multiply, address divide, uint256 decimals) public view returns(uint256) {\r\n        return _get(multiply, divide, decimals);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"multiply\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"divide\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"_get\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"get\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"multiply\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"divide\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"getInitData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"multiply\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"divide\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"peek\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"multiply\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"divide\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"test\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ChainlinkOracle","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}