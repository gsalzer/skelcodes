{"status":"1","message":"OK","result":[{"SourceCode":"// hevm: flattened sources of src/DssSpell.sol\r\npragma solidity =0.6.11 >=0.6.11 <0.7.0;\r\n\r\n////// lib/dss-exec-lib/src/CollateralOpts.sol\r\n/* pragma solidity ^0.6.11; */\r\n\r\nstruct CollateralOpts {\r\n    bytes32 ilk;\r\n    address gem;\r\n    address join;\r\n    address flip;\r\n    address pip;\r\n    bool    isLiquidatable;\r\n    bool    isOSM;\r\n    bool    whitelistOSM;\r\n    uint256 ilkDebtCeiling;\r\n    uint256 minVaultAmount;\r\n    uint256 maxLiquidationAmount;\r\n    uint256 liquidationPenalty;\r\n    uint256 ilkStabilityFee;\r\n    uint256 bidIncrease;\r\n    uint256 bidDuration;\r\n    uint256 auctionDuration;\r\n    uint256 liquidationRatio;\r\n}\r\n\r\n////// lib/dss-exec-lib/src/DssExecLib.sol\r\n//\r\n// DssExecLib.sol -- MakerDAO Executive Spellcrafting Library\r\n//\r\n// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n/* pragma solidity ^0.6.11; */\r\n\r\ninterface Initializable {\r\n    function init(bytes32) external;\r\n}\r\n\r\ninterface Authorizable {\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n}\r\n\r\ninterface Fileable_1 {\r\n    function file(bytes32, address) external;\r\n    function file(bytes32, uint256) external;\r\n    function file(bytes32, bytes32, uint256) external;\r\n    function file(bytes32, bytes32, address) external;\r\n}\r\n\r\ninterface Drippable {\r\n    function drip() external returns (uint256);\r\n    function drip(bytes32) external returns (uint256);\r\n}\r\n\r\ninterface Pricing {\r\n    function poke(bytes32) external;\r\n}\r\n\r\ninterface ERC20 {\r\n    function decimals() external returns (uint8);\r\n}\r\n\r\ninterface DssVat {\r\n    function hope(address) external;\r\n    function nope(address) external;\r\n    function ilks(bytes32) external returns (uint256 Art, uint256 rate, uint256 spot, uint256 line, uint256 dust);\r\n    function Line() external view returns (uint256);\r\n    function suck(address, address, uint) external;\r\n}\r\n\r\ninterface AuctionLike {\r\n    function vat() external returns (address);\r\n    function cat() external returns (address); // Only flip\r\n    function beg() external returns (uint256);\r\n    function pad() external returns (uint256); // Only flop\r\n    function ttl() external returns (uint256);\r\n    function tau() external returns (uint256);\r\n    function ilk() external returns (bytes32); // Only flip\r\n    function gem() external returns (bytes32); // Only flap/flop\r\n}\r\n\r\ninterface JoinLike {\r\n    function vat() external returns (address);\r\n    function ilk() external returns (bytes32);\r\n    function gem() external returns (address);\r\n    function dec() external returns (uint256);\r\n    function join(address, uint) external;\r\n    function exit(address, uint) external;\r\n}\r\n\r\n// Includes Median and OSM functions\r\ninterface OracleLike_2 {\r\n    function src() external view returns (address);\r\n    function lift(address[] calldata) external;\r\n    function drop(address[] calldata) external;\r\n    function setBar(uint256) external;\r\n    function kiss(address) external;\r\n    function diss(address) external;\r\n    function kiss(address[] calldata) external;\r\n    function diss(address[] calldata) external;\r\n}\r\n\r\ninterface MomLike {\r\n    function setOsm(bytes32, address) external;\r\n}\r\n\r\ninterface RegistryLike {\r\n    function add(address) external;\r\n    function info(bytes32) external view returns (\r\n        string memory, string memory, uint256, address, address, address, address\r\n    );\r\n    function ilkData(bytes32) external view returns (\r\n        uint256       pos,\r\n        address       gem,\r\n        address       pip,\r\n        address       join,\r\n        address       flip,\r\n        uint256       dec,\r\n        string memory name,\r\n        string memory symbol\r\n    );\r\n}\r\n\r\n// https://github.com/makerdao/dss-chain-log\r\ninterface ChainlogLike {\r\n    function setVersion(string calldata) external;\r\n    function setIPFS(string calldata) external;\r\n    function setSha256sum(string calldata) external;\r\n    function getAddress(bytes32) external view returns (address);\r\n    function setAddress(bytes32, address) external;\r\n    function removeAddress(bytes32) external;\r\n}\r\n\r\ninterface IAMLike {\r\n    function ilks(bytes32) external view returns (uint256,uint256,uint48,uint48,uint48);\r\n    function setIlk(bytes32,uint256,uint256,uint256) external;\r\n    function remIlk(bytes32) external;\r\n    function exec(bytes32) external returns (uint256);\r\n}\r\n\r\n\r\nlibrary DssExecLib {\r\n\r\n    // Function stubs - check the actual library address for implementations\r\n    function dai()        public view returns (address) {}\r\n    function mkr()        public view returns (address) {}\r\n    function vat()        public view returns (address) {}\r\n    function cat()        public view returns (address) {}\r\n    function jug()        public view returns (address) {}\r\n    function pot()        public view returns (address) {}\r\n    function vow()        public view returns (address) {}\r\n    function end()        public view returns (address) {}\r\n    function reg()        public view returns (address) {}\r\n    function spotter()    public view returns (address) {}\r\n    function flap()       public view returns (address) {}\r\n    function flop()       public view returns (address) {}\r\n    function osmMom()     public view returns (address) {}\r\n    function govGuard()   public view returns (address) {}\r\n    function flipperMom() public view returns (address) {}\r\n    function pauseProxy() public view returns (address) {}\r\n    function autoLine()   public view returns (address) {}\r\n    function daiJoin()    public view returns (address) {}\r\n    function flip(bytes32 ilk) public view returns (address _flip) {\r\n    }\r\n    function getChangelogAddress(bytes32 key) public view returns (address) {\r\n    }\r\n    function setChangelogAddress(bytes32 _key, address _val) public {\r\n    }\r\n    function setChangelogVersion(string memory _version) public {\r\n    }\r\n    function setChangelogIPFS(string memory _ipfsHash) public {\r\n    }\r\n    function setChangelogSHA256(string memory _SHA256Sum) public {\r\n    }\r\n    function authorize(address _base, address _ward) public {\r\n    }\r\n    function deauthorize(address _base, address _ward) public {\r\n    }\r\n    function delegateVat(address _usr) public {\r\n    }\r\n    function undelegateVat(address _usr) public {\r\n    }\r\n    function accumulateDSR() public {\r\n    }\r\n    function accumulateCollateralStabilityFees(bytes32 _ilk) public {\r\n    }\r\n    function updateCollateralPrice(bytes32 _ilk) public {\r\n    }\r\n    function setContract(address _base, bytes32 _what, address _addr) public {\r\n    }\r\n    function setContract(address _base, bytes32 _ilk, bytes32 _what, address _addr) public {\r\n    }\r\n    function setGlobalDebtCeiling(uint256 _amount) public {\r\n    }\r\n    function increaseGlobalDebtCeiling(uint256 _amount) public {\r\n    }\r\n    function decreaseGlobalDebtCeiling(uint256 _amount) public {\r\n    }\r\n    function setDSR(uint256 _rate) public {\r\n    }\r\n    function setSurplusAuctionAmount(uint256 _amount) public {\r\n    }\r\n    function setSurplusBuffer(uint256 _amount) public {\r\n    }\r\n    function setMinSurplusAuctionBidIncrease(uint256 _pct_bps) public {\r\n    }\r\n    function setSurplusAuctionBidDuration(uint256 _duration) public {\r\n    }\r\n    function setSurplusAuctionDuration(uint256 _duration) public {\r\n    }\r\n    function setDebtAuctionDelay(uint256 _duration) public {\r\n    }\r\n    function setDebtAuctionDAIAmount(uint256 _amount) public {\r\n    }\r\n    function setDebtAuctionMKRAmount(uint256 _amount) public {\r\n    }\r\n    function setMinDebtAuctionBidIncrease(uint256 _pct_bps) public {\r\n    }\r\n    function setDebtAuctionBidDuration(uint256 _duration) public {\r\n    }\r\n    function setDebtAuctionDuration(uint256 _duration) public {\r\n    }\r\n    function setDebtAuctionMKRIncreaseRate(uint256 _pct_bps) public {\r\n    }\r\n    function setMaxTotalDAILiquidationAmount(uint256 _amount) public {\r\n    }\r\n    function setEmergencyShutdownProcessingTime(uint256 _duration) public {\r\n    }\r\n    function setGlobalStabilityFee(uint256 _rate) public {\r\n    }\r\n    function setDAIReferenceValue(uint256 _value) public {\r\n    }\r\n    function setIlkDebtCeiling(bytes32 _ilk, uint256 _amount) public {\r\n    }\r\n    function increaseIlkDebtCeiling(bytes32 _ilk, uint256 _amount, bool _global) public {\r\n    }\r\n    function decreaseIlkDebtCeiling(bytes32 _ilk, uint256 _amount, bool _global) public {\r\n    }\r\n    function setIlkAutoLineParameters(bytes32 _ilk, uint256 _amount, uint256 _gap, uint256 _ttl) public {\r\n    }\r\n    function setIlkAutoLineDebtCeiling(bytes32 _ilk, uint256 _amount) public {\r\n    }\r\n    function removeIlkFromAutoLine(bytes32 _ilk) public {\r\n    }\r\n    function setIlkMinVaultAmount(bytes32 _ilk, uint256 _amount) public {\r\n    }\r\n    function setIlkLiquidationPenalty(bytes32 _ilk, uint256 _pct_bps) public {\r\n    }\r\n    function setIlkMaxLiquidationAmount(bytes32 _ilk, uint256 _amount) public {\r\n    }\r\n    function setIlkLiquidationRatio(bytes32 _ilk, uint256 _pct_bps) public {\r\n    }\r\n    function setIlkMinAuctionBidIncrease(bytes32 _ilk, uint256 _pct_bps) public {\r\n    }\r\n    function setIlkBidDuration(bytes32 _ilk, uint256 _duration) public {\r\n    }\r\n    function setIlkAuctionDuration(bytes32 _ilk, uint256 _duration) public {\r\n    }\r\n    function setIlkStabilityFee(bytes32 _ilk, uint256 _rate, bool _doDrip) public {\r\n    }\r\n    function addWritersToMedianWhitelist(address _median, address[] memory _feeds) public {\r\n        OracleLike_2(_median).lift(_feeds);\r\n    }\r\n    function removeWritersFromMedianWhitelist(address _median, address[] memory _feeds) public {\r\n        OracleLike_2(_median).drop(_feeds);\r\n    }\r\n    function addReadersToMedianWhitelist(address _median, address[] memory _readers) public {\r\n        OracleLike_2(_median).kiss(_readers);\r\n    }\r\n    function addReaderToMedianWhitelist(address _median, address _reader) public {\r\n        OracleLike_2(_median).kiss(_reader);\r\n    }\r\n    function removeReadersFromMedianWhitelist(address _median, address[] memory _readers) public {\r\n    }\r\n    function removeReaderFromMedianWhitelist(address _median, address _reader) public {\r\n    }\r\n    function setMedianWritersQuorum(address _median, uint256 _minQuorum) public {\r\n    }\r\n    function addReaderToOSMWhitelist(address _osm, address _reader) public {\r\n    }\r\n    function removeReaderFromOSMWhitelist(address _osm, address _reader) public {\r\n    }\r\n    function allowOSMFreeze(address _osm, bytes32 _ilk) public {\r\n    }\r\n    function addCollateralBase(\r\n        bytes32 _ilk,\r\n        address _gem,\r\n        address _join,\r\n        address _flip,\r\n        address _pip\r\n    ) public {\r\n    }\r\n    function sendPaymentFromSurplusBuffer(address _target, uint256 _amount) public {\r\n    }\r\n}\r\n\r\n////// lib/dss-exec-lib/src/DssAction.sol\r\n//\r\n// DssAction.sol -- DSS Executive Spell Actions\r\n//\r\n// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity ^0.6.11; */\r\n\r\n/* import \"./CollateralOpts.sol\"; */\r\n/* import { DssExecLib } from \"./DssExecLib.sol\"; */\r\n\r\ninterface OracleLike_1 {\r\n    function src() external view returns (address);\r\n}\r\n\r\nabstract contract DssAction {\r\n\r\n    using DssExecLib for *;\r\n\r\n    // Office Hours defaults to true by default.\r\n    //   To disable office hours, override this function and\r\n    //    return false in the inherited action.\r\n    function officeHours() public virtual returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    // DssExec calls execute. We limit this function subject to officeHours modifier.\r\n    function execute() external limited {\r\n        actions();\r\n    }\r\n\r\n    // DssAction developer must override `actions()` and place all actions to be called inside.\r\n    //   The DssExec function will call this subject to the officeHours limiter\r\n    //   By keeping this function public we allow simulations of `execute()` on the actions outside of the cast time.\r\n    function actions() public virtual;\r\n\r\n    // Modifier required to\r\n    modifier limited {\r\n        if (officeHours()) {\r\n            uint day = (block.timestamp / 1 days + 3) % 7;\r\n            require(day < 5, \"Can only be cast on a weekday\");\r\n            uint hour = block.timestamp / 1 hours % 24;\r\n            require(hour >= 14 && hour < 21, \"Outside office hours\");\r\n        }\r\n        _;\r\n    }\r\n\r\n    /*****************************/\r\n    /*** Collateral Onboarding ***/\r\n    /*****************************/\r\n\r\n    // Complete collateral onboarding logic.\r\n    function addNewCollateral(CollateralOpts memory co) internal {\r\n        // Add the collateral to the system.\r\n        DssExecLib.addCollateralBase(co.ilk, co.gem, co.join, co.flip, co.pip);\r\n\r\n        // Allow FlipperMom to access to the ilk Flipper\r\n        address _flipperMom = DssExecLib.flipperMom();\r\n        DssExecLib.authorize(co.flip, _flipperMom);\r\n        // Disallow Cat to kick auctions in ilk Flipper\r\n        if(!co.isLiquidatable) { DssExecLib.deauthorize(_flipperMom, co.flip); }\r\n\r\n        if(co.isOSM) { // If pip == OSM\r\n            // Allow OsmMom to access to the TOKEN OSM\r\n            DssExecLib.authorize(co.pip, DssExecLib.osmMom());\r\n            if (co.whitelistOSM) { // If median is src in OSM\r\n                // Whitelist OSM to read the Median data (only necessary if it is the first time the token is being added to an ilk)\r\n                DssExecLib.addReaderToMedianWhitelist(address(OracleLike_1(co.pip).src()), co.pip);\r\n            }\r\n            // Whitelist Spotter to read the OSM data (only necessary if it is the first time the token is being added to an ilk)\r\n            DssExecLib.addReaderToOSMWhitelist(co.pip, DssExecLib.spotter());\r\n            // Whitelist End to read the OSM data (only necessary if it is the first time the token is being added to an ilk)\r\n            DssExecLib.addReaderToOSMWhitelist(co.pip, DssExecLib.end());\r\n            // Set TOKEN OSM in the OsmMom for new ilk\r\n            DssExecLib.allowOSMFreeze(co.pip, co.ilk);\r\n        }\r\n        // Increase the global debt ceiling by the ilk ceiling\r\n        DssExecLib.increaseGlobalDebtCeiling(co.ilkDebtCeiling);\r\n        // Set the ilk debt ceiling\r\n        DssExecLib.setIlkDebtCeiling(co.ilk, co.ilkDebtCeiling);\r\n        // Set the ilk dust\r\n        DssExecLib.setIlkMinVaultAmount(co.ilk, co.minVaultAmount);\r\n        // Set the dunk size\r\n        DssExecLib.setIlkMaxLiquidationAmount(co.ilk, co.maxLiquidationAmount);\r\n        // Set the ilk liquidation penalty\r\n        DssExecLib.setIlkLiquidationPenalty(co.ilk, co.liquidationPenalty);\r\n\r\n        // Set the ilk stability fee\r\n        DssExecLib.setIlkStabilityFee(co.ilk, co.ilkStabilityFee, true);\r\n\r\n        // Set the ilk percentage between bids\r\n        DssExecLib.setIlkMinAuctionBidIncrease(co.ilk, co.bidIncrease);\r\n        // Set the ilk time max time between bids\r\n        DssExecLib.setIlkBidDuration(co.ilk, co.bidDuration);\r\n        // Set the ilk max auction duration\r\n        DssExecLib.setIlkAuctionDuration(co.ilk, co.auctionDuration);\r\n        // Set the ilk min collateralization ratio\r\n        DssExecLib.setIlkLiquidationRatio(co.ilk, co.liquidationRatio);\r\n\r\n        // Update ilk spot value in Vat\r\n        DssExecLib.updateCollateralPrice(co.ilk);\r\n    }\r\n}\r\n\r\n////// lib/dss-exec-lib/src/DssExec.sol\r\n//\r\n// DssExec.sol -- MakerDAO Executive Spell Template\r\n//\r\n// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity ^0.6.11; */\r\n\r\ninterface PauseAbstract {\r\n    function delay() external view returns (uint256);\r\n    function plot(address, bytes32, bytes calldata, uint256) external;\r\n    function exec(address, bytes32, bytes calldata, uint256) external returns (bytes memory);\r\n}\r\n\r\ninterface Changelog {\r\n    function getAddress(bytes32) external view returns (address);\r\n}\r\n\r\ninterface SpellAction {\r\n    function officeHours() external view returns (bool);\r\n}\r\n\r\ncontract DssExec {\r\n\r\n    Changelog      constant public log   = Changelog(0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F);\r\n    uint256                 public eta;\r\n    bytes                   public sig;\r\n    bool                    public done;\r\n    bytes32       immutable public tag;\r\n    address       immutable public action;\r\n    uint256       immutable public expiration;\r\n    PauseAbstract immutable public pause;\r\n\r\n    // Provides a descriptive tag for bot consumption\r\n    // This should be modified weekly to provide a summary of the actions\r\n    // Hash: seth keccak -- \"$(wget https://<executive-vote-canonical-post> -q -O - 2>/dev/null)\"\r\n    string                  public description;\r\n\r\n    function officeHours() external view returns (bool) {\r\n        return SpellAction(action).officeHours();\r\n    }\r\n\r\n    function nextCastTime() external view returns (uint256 castTime) {\r\n        require(eta != 0, \"DssExec/spell-not-scheduled\");\r\n        castTime = block.timestamp > eta ? block.timestamp : eta; // Any day at XX:YY\r\n\r\n        if (SpellAction(action).officeHours()) {\r\n            uint256 day    = (castTime / 1 days + 3) % 7;\r\n            uint256 hour   = castTime / 1 hours % 24;\r\n            uint256 minute = castTime / 1 minutes % 60;\r\n            uint256 second = castTime % 60;\r\n\r\n            if (day >= 5) {\r\n                castTime += (6 - day) * 1 days;                 // Go to Sunday XX:YY\r\n                castTime += (24 - hour + 14) * 1 hours;         // Go to 14:YY UTC Monday\r\n                castTime -= minute * 1 minutes + second;        // Go to 14:00 UTC\r\n            } else {\r\n                if (hour >= 21) {\r\n                    if (day == 4) castTime += 2 days;           // If Friday, fast forward to Sunday XX:YY\r\n                    castTime += (24 - hour + 14) * 1 hours;     // Go to 14:YY UTC next day\r\n                    castTime -= minute * 1 minutes + second;    // Go to 14:00 UTC\r\n                } else if (hour < 14) {\r\n                    castTime += (14 - hour) * 1 hours;          // Go to 14:YY UTC same day\r\n                    castTime -= minute * 1 minutes + second;    // Go to 14:00 UTC\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // @param _description  A string description of the spell\r\n    // @param _expiration   The timestamp this spell will expire. (Ex. now + 30 days)\r\n    // @param _spellAction  The address of the spell action\r\n    constructor(string memory _description, uint256 _expiration, address _spellAction) public {\r\n        pause       = PauseAbstract(log.getAddress(\"MCD_PAUSE\"));\r\n        description = _description;\r\n        expiration  = _expiration;\r\n        action      = _spellAction;\r\n\r\n        sig = abi.encodeWithSignature(\"execute()\");\r\n        bytes32 _tag;                    // Required for assembly access\r\n        address _action = _spellAction;  // Required for assembly access\r\n        assembly { _tag := extcodehash(_action) }\r\n        tag = _tag;\r\n    }\r\n\r\n    function schedule() public {\r\n        require(now <= expiration, \"This contract has expired\");\r\n        require(eta == 0, \"This spell has already been scheduled\");\r\n        eta = now + PauseAbstract(pause).delay();\r\n        pause.plot(action, tag, sig, eta);\r\n    }\r\n\r\n    function cast() public {\r\n        require(!done, \"spell-already-cast\");\r\n        done = true;\r\n        pause.exec(action, tag, sig, eta);\r\n    }\r\n}\r\n\r\n////// src/DssSpell.sol\r\n// SPDX-License-Identifier: GPL-3.0-or-later\r\n// Copyright (C) 2021 Maker Ecosystem Growth Holdings, INC.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n/* pragma solidity 0.6.11; */\r\n\r\n/* import \"dss-exec-lib/DssExec.sol\"; */\r\n/* import \"dss-exec-lib/DssAction.sol\"; */\r\n\r\ninterface ChainlogAbstract_2 {\r\n    function removeAddress(bytes32) external;\r\n}\r\n\r\ninterface LPOracle {\r\n    function orb0() external view returns (address);\r\n    function orb1() external view returns (address);\r\n}\r\n\r\ninterface Fileable_2 {\r\n    function file(bytes32,uint256) external;\r\n}\r\n\r\ncontract DssSpellAction is DssAction {\r\n\r\n    // Provides a descriptive tag for bot consumption\r\n    // This should be modified weekly to provide a summary of the actions\r\n    // Hash: seth keccak -- \"$(wget https://raw.githubusercontent.com/makerdao/community/46cbe46a16b7836d6b219201e3a07d40b01a7db4/governance/votes/Community%20Executive%20vote%20-%20February%2026%2C%202021.md -q -O - 2>/dev/null)\"\r\n    string public constant description =\r\n        \"2021-02-26 MakerDAO Executive Spell | Hash: 0x4c91fafa587264790d3ad6498caf9c0070a810237c46bb7f3b2556e043ba7b23\";\r\n\r\n\r\n    // Many of the settings that change weekly rely on the rate accumulator\r\n    // described at https://docs.makerdao.com/smart-contract-modules/rates-module\r\n    // To check this yourself, use the following rate calculation (example 8%):\r\n    //\r\n    // $ bc -l <<< 'scale=27; e( l(1.08)/(60 * 60 * 24 * 365) )'\r\n    //\r\n    // A table of rates can be found at\r\n    //    https://ipfs.io/ipfs/QmefQMseb3AiTapiAKKexdKHig8wroKuZbmLtPLv4u2YwW\r\n    //\r\n    uint256 constant FOUR_PCT           = 1000000001243680656318820312;\r\n    uint256 constant FIVE_PT_FIVE_PCT   = 1000000001697766583380253701;\r\n    uint256 constant NINE_PCT           = 1000000002732676825177582095;\r\n\r\n    uint256 constant WAD        = 10**18;\r\n    uint256 constant RAD        = 10**45;\r\n    uint256 constant MILLION    = 10**6;\r\n\r\n    address constant UNIV2DAIUSDT_GEM   = 0xB20bd5D04BE54f870D5C0d3cA85d82b34B836405;\r\n    address constant UNIV2DAIUSDT_JOIN  = 0xAf034D882169328CAf43b823a4083dABC7EEE0F4;\r\n    address constant UNIV2DAIUSDT_FLIP  = 0xD32f8B8aDbE331eC0CfADa9cfDbc537619622cFe;\r\n    address constant UNIV2DAIUSDT_PIP   = 0x69562A7812830E6854Ffc50b992c2AA861D5C2d3;\r\n\r\n    function actions() public override {\r\n        // Rates Proposal - February 22, 2021\r\n        DssExecLib.setIlkStabilityFee(\"ETH-A\", FIVE_PT_FIVE_PCT, true);\r\n        DssExecLib.setIlkStabilityFee(\"ETH-B\", NINE_PCT, true);\r\n\r\n        // Onboard UNIV2DAIUSDT-A\r\n        DssExecLib.addReaderToMedianWhitelist(\r\n            LPOracle(UNIV2DAIUSDT_PIP).orb1(),\r\n            UNIV2DAIUSDT_PIP\r\n        );\r\n        CollateralOpts memory UNIV2DAIUSDT_A = CollateralOpts({\r\n            ilk: \"UNIV2DAIUSDT-A\",\r\n            gem: UNIV2DAIUSDT_GEM,\r\n            join: UNIV2DAIUSDT_JOIN,\r\n            flip: UNIV2DAIUSDT_FLIP,\r\n            pip: UNIV2DAIUSDT_PIP,\r\n            isLiquidatable: true,\r\n            isOSM: true,\r\n            whitelistOSM: false,\r\n            ilkDebtCeiling: 3 * MILLION,\r\n            minVaultAmount: 2000,\r\n            maxLiquidationAmount: 50000,\r\n            liquidationPenalty: 1300,\r\n            ilkStabilityFee: FOUR_PCT,\r\n            bidIncrease: 300,\r\n            bidDuration: 6 hours,\r\n            auctionDuration: 6 hours,\r\n            liquidationRatio: 12500\r\n        });\r\n        addNewCollateral(UNIV2DAIUSDT_A);\r\n        DssExecLib.setChangelogAddress(\"UNIV2DAIUSDT\",             UNIV2DAIUSDT_GEM);\r\n        DssExecLib.setChangelogAddress(\"MCD_JOIN_UNIV2DAIUSDT_A\",  UNIV2DAIUSDT_JOIN);\r\n        DssExecLib.setChangelogAddress(\"MCD_FLIP_UNIV2DAIUSDT_A\",  UNIV2DAIUSDT_FLIP);\r\n        DssExecLib.setChangelogAddress(\"PIP_UNIV2DAIUSDT\",         UNIV2DAIUSDT_PIP);\r\n\r\n        // Lower PSM-USDC-A Toll Out\r\n        Fileable_2(DssExecLib.getChangelogAddress(\"MCD_PSM_USDC_A\")).file(\"tout\", 4 * WAD / 10000);\r\n\r\n        // bump Changelog version\r\n        DssExecLib.setChangelogVersion(\"1.2.8\");\r\n    }\r\n}\r\n\r\ncontract DssSpell is DssExec {\r\n    DssSpellAction internal action_ = new DssSpellAction();\r\n    constructor() DssExec(action_.description(), block.timestamp + 30 days, address(action_)) public {}\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"action\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cast\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"done\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expiration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"log\",\"outputs\":[{\"internalType\":\"contract Changelog\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextCastTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"castTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"officeHours\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"contract PauseAbstract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"schedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tag\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DssSpell","CompilerVersion":"v0.6.11+commit.5ef660b1","OptimizationUsed":"1","Runs":"1","ConstructorArguments":"","EVMVersion":"Default","Library":"DssExecLib:9a6c490ba30507e732d61235eff94c26aea234ef","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://707c41133d3a84c05c56de8d94c55f35581e1b67f03f54ba4d9551b7cbef9edd"}]}