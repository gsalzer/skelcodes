{"status":"1","message":"OK","result":[{"SourceCode":"{\"Seed.sol\":{\"content\":\"/*\\r\\n                    |   _|_)                             \\r\\n  __|  _ \\\\  _ \\\\  _` |  |   | __ \\\\   _` | __ \\\\   __|  _ \\\\ \\r\\n\\\\__ \\\\  __/  __/ (   |  __| | |   | (   | |   | (     __/ \\r\\n____/\\\\___|\\\\___|\\\\__,_| _|  _|_|  _|\\\\__,_|_|  _|\\\\___|\\\\___| \\r\\n* Home: https://superseed.cc\\r\\n* https://t.me/superseedgroup\\r\\n* https://twitter.com/superseedtoken\\r\\n* https://superseedtoken.medium.com\\r\\n* MIT License\\r\\n* ===========\\r\\n*\\r\\n* Copyright (c) 2020 Superseed\\r\\n* SPDX-License-Identifier: MIT\\r\\n* Permission is hereby granted, free of charge, to any person obtaining a copy\\r\\n* of this software and associated documentation files (the \\\"Software\\\"), to deal\\r\\n* in the Software without restriction, including without limitation the rights\\r\\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\r\\n* copies of the Software, and to permit persons to whom the Software is\\r\\n* furnished to do so, subject to the following conditions:\\r\\n*\\r\\n* The above copyright notice and this permission notice shall be included in all\\r\\n* copies or substantial portions of the Software.\\r\\n*\\r\\n* THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\r\\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\r\\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\r\\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\r\\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\r\\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\r\\n*/\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\ninterface IOwnershipTransferrable {\\r\\n  function transferOwnership(address owner) external;\\r\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n}\\r\\n\\r\\nabstract contract Ownable is IOwnershipTransferrable {\\r\\n  address private _owner;\\r\\n\\r\\n  constructor(address owner) {\\r\\n    _owner = owner;\\r\\n    emit OwnershipTransferred(address(0), _owner);\\r\\n  }\\r\\n\\r\\n  function owner() public view returns (address) {\\r\\n    return _owner;\\r\\n  }\\r\\n\\r\\n  modifier onlyOwner() {\\r\\n    require(_owner == msg.sender, \\\"Ownable: caller is not the owner\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function transferOwnership(address newOwner) override external onlyOwner {\\r\\n    require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n    emit OwnershipTransferred(_owner, newOwner);\\r\\n    _owner = newOwner;\\r\\n  }\\r\\n}\\r\\n\\r\\nlibrary SafeMath {\\r\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    uint256 c = a + b;\\r\\n    require(c \\u003e= a);\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    require(b \\u003c= a);\\r\\n    uint256 c = a - b;\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    if (a == 0) {\\r\\n      return 0;\\r\\n    }\\r\\n    uint256 c = a * b;\\r\\n    require(c / a == b);\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    require(b \\u003e 0);\\r\\n    uint256 c = a / b;\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    require(b != 0);\\r\\n    return a % b;\\r\\n  }\\r\\n}\\r\\n\\r\\ncontract Seed is Ownable {\\r\\n  using SafeMath for uint256;\\r\\n  uint256 private _totalSupply;\\r\\n  uint256 constant UINT256_MAX = ~uint256(0);\\r\\n  string private _name;\\r\\n  string private _symbol;\\r\\n  uint8 private _decimals;\\r\\n  \\r\\n  mapping(address =\\u003e uint256) private _balances;\\r\\n  mapping(address =\\u003e mapping(address =\\u003e uint256)) private _allowances;\\r\\n\\r\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n  constructor() Ownable(msg.sender) { \\r\\n    _name = \\\"Seed\\\";\\r\\n    _symbol = \\\"SEED\\\";\\r\\n    _decimals = 18;\\r\\n\\t_totalSupply = 50000 * 1e18;\\r\\n\\r\\n    _balances[msg.sender] = _totalSupply;\\r\\n    emit Transfer(address(0), msg.sender, _totalSupply);\\r\\n  }\\r\\n\\r\\n  function totalSupply() external view returns (uint256) {\\r\\n    return _totalSupply;\\r\\n  }\\r\\n  \\r\\n  function name() external view returns (string memory) {\\r\\n    return _name;\\r\\n  }\\r\\n\\r\\n  function symbol() external view returns (string memory) {\\r\\n    return _symbol;\\r\\n  }\\r\\n\\r\\n  function decimals() external view returns (uint8) {\\r\\n    return _decimals;\\r\\n  }\\r\\n\\r\\n  function balanceOf(address account) external view returns (uint256) {\\r\\n    return _balances[account];\\r\\n  }\\r\\n\\r\\n  function allowance(address owner, address spender) external view returns (uint256) {\\r\\n    return _allowances[owner][spender];\\r\\n  }\\r\\n\\r\\n  function transfer(address recipient, uint256 amount) external returns (bool) {\\r\\n    _transfer(msg.sender, recipient, amount);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function approve(address spender, uint256 amount) external returns (bool) {\\r\\n    _approve(msg.sender, spender, amount);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {\\r\\n    _transfer(sender, recipient, amount);\\r\\n    if (_allowances[msg.sender][sender] != UINT256_MAX) {\\r\\n      _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\\r\\n    }\\r\\n    return true;\\r\\n  }\\r\\n  \\r\\n  function _transfer(address sender, address recipient, uint256 amount) internal {\\r\\n    require(sender != address(0));\\r\\n    require(recipient != address(0));\\r\\n\\r\\n    _balances[sender] = _balances[sender].sub(amount);\\r\\n    _balances[recipient] = _balances[recipient].add(amount);\\r\\n    emit Transfer(sender, recipient, amount);\\r\\n  }\\r\\n  \\r\\n  function mint(address account, uint256 amount) external onlyOwner {\\r\\n    _totalSupply = _totalSupply.add(amount);\\r\\n    _balances[account] = _balances[account].add(amount);\\r\\n    emit Transfer(address(0), account, amount);\\r\\n  }  \\r\\n\\r\\n  function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\\r\\n    _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\\r\\n    _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function _approve(address owner, address spender, uint256 amount) internal {\\r\\n    require(owner != address(0));\\r\\n    require(spender != address(0));\\r\\n\\r\\n    _allowances[owner][spender] = amount;\\r\\n    emit Approval(owner, spender, amount);\\r\\n  }\\r\\n\\r\\n  function burn(uint256 amount) external returns (bool) {\\r\\n    _balances[msg.sender] = _balances[msg.sender].sub(amount);\\r\\n    _totalSupply = _totalSupply.sub(amount);\\r\\n    emit Transfer(msg.sender, address(0), amount);\\r\\n    return true;\\r\\n  }\\r\\n}\\r\\n\"},\"SeedStake.sol\":{\"content\":\"/*\\r\\n                    |   _|_)                             \\r\\n  __|  _ \\\\  _ \\\\  _` |  |   | __ \\\\   _` | __ \\\\   __|  _ \\\\ \\r\\n\\\\__ \\\\  __/  __/ (   |  __| | |   | (   | |   | (     __/ \\r\\n____/\\\\___|\\\\___|\\\\__,_| _|  _|_|  _|\\\\__,_|_|  _|\\\\___|\\\\___| \\r\\n* Home: https://superseed.cc\\r\\n* https://t.me/superseedgroup\\r\\n* https://twitter.com/superseedtoken\\r\\n* https://superseedtoken.medium.com\\r\\n* MIT License\\r\\n* ===========\\r\\n*\\r\\n* Copyright (c) 2020 Superseed\\r\\n* SPDX-License-Identifier: MIT\\r\\n* Permission is hereby granted, free of charge, to any person obtaining a copy\\r\\n* of this software and associated documentation files (the \\\"Software\\\"), to deal\\r\\n* in the Software without restriction, including without limitation the rights\\r\\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\r\\n* copies of the Software, and to permit persons to whom the Software is\\r\\n* furnished to do so, subject to the following conditions:\\r\\n*\\r\\n* The above copyright notice and this permission notice shall be included in all\\r\\n* copies or substantial portions of the Software.\\r\\n*\\r\\n* THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\r\\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\r\\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\r\\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\r\\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\r\\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\r\\n*/\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\nimport \\\"./Seed.sol\\\";\\r\\n\\r\\nabstract contract ReentrancyGuard {\\r\\n  bool private _entered;\\r\\n\\r\\n  modifier noReentrancy() {\\r\\n    require(!_entered);\\r\\n    _entered = true;\\r\\n    _;\\r\\n    _entered = false;\\r\\n  }\\r\\n}\\r\\n\\r\\ncontract SeedStake is ReentrancyGuard, Ownable {\\r\\n  using SafeMath for uint256;\\r\\n  uint256 constant UINT256_MAX = ~uint256(0);\\r\\n  uint256 _deployedAt;\\r\\n  uint256 _totalStaked;\\r\\n  uint256 constant MONTH = 30 days;  \\r\\n  Seed private _SEED;\\r\\n  bool private _dated;\\r\\n  bool private _migrated;\\r\\n\\r\\n  mapping (address =\\u003e uint256) private _staked;\\r\\n  mapping (address =\\u003e uint256) private _lastClaim;\\r\\n  address private _developerFund;\\r\\n\\r\\n  event StakeIncreased(address indexed staker, uint256 amount);\\r\\n  event StakeDecreased(address indexed staker, uint256 amount);\\r\\n  event Rewards(address indexed staker, uint256 mintage, uint256 developerFund);\\r\\n  event MelodyAdded(address indexed melody);\\r\\n  event MelodyRemoved(address indexed melody);\\r\\n\\r\\n  constructor(address seed) Ownable(msg.sender) {\\r\\n    _SEED = Seed(seed);\\r\\n    _developerFund = msg.sender;\\r\\n    _deployedAt = block.timestamp;\\r\\n  }\\r\\n\\r\\n  function totalStaked() external view returns (uint256) {\\r\\n    return _totalStaked;\\r\\n  }\\r\\n  \\r\\n  function upgradeDevelopmentFund(address fund) external onlyOwner {\\r\\n    _developerFund = fund;\\r\\n  }\\r\\n\\r\\n  function seed() external view returns (address) {\\r\\n    return address(_SEED);\\r\\n  }\\r\\n\\r\\n  function migrate(address previous, address[] memory people, uint256[] memory lastClaims) external {\\r\\n    require(!_migrated);\\r\\n    require(people.length == lastClaims.length);\\r\\n    for (uint i = 0; i \\u003c people.length; i++) {\\r\\n      uint256 staked = SeedStake(previous).staked(people[i]);\\r\\n      _staked[people[i]] = staked;\\r\\n      _totalStaked = _totalStaked.add(staked);\\r\\n      _lastClaim[people[i]] = lastClaims[i];\\r\\n      emit StakeIncreased(people[i], staked);\\r\\n    }\\r\\n    require(_SEED.transferFrom(previous, address(this), _SEED.balanceOf(previous)));\\r\\n    _migrated = true;\\r\\n  }\\r\\n\\r\\n  function staked(address staker) external view returns (uint256) {\\r\\n    return _staked[staker];\\r\\n  }\\r\\n\\r\\n  function lastClaim(address staker) external view returns (uint256) {\\r\\n    return _lastClaim[staker];\\r\\n  }\\r\\n\\r\\n  function increaseStake(uint256 amount) external {\\r\\n    require(!_dated);\\r\\n\\r\\n    require(_SEED.transferFrom(msg.sender, address(this), amount));\\r\\n    _totalStaked = _totalStaked.add(amount);\\r\\n    _lastClaim[msg.sender] = block.timestamp;\\r\\n    _staked[msg.sender] = _staked[msg.sender].add(amount);\\r\\n    emit StakeIncreased(msg.sender, amount);\\r\\n  }\\r\\n\\r\\n  function decreaseStake(uint256 amount) external {\\r\\n    _staked[msg.sender] = _staked[msg.sender].sub(amount);\\r\\n    _totalStaked = _totalStaked.sub(amount);\\r\\n    require(_SEED.transfer(address(msg.sender), amount));\\r\\n    emit StakeDecreased(msg.sender, amount);\\r\\n  }\\r\\n\\r\\n  function calculateSupplyDivisor() public view returns (uint256) {\\r\\n    // base divisior for 5%\\r\\n    uint256 result = uint256(20)\\r\\n      .add(\\r\\n        // get how many months have passed since deployment\\r\\n        block.timestamp.sub(_deployedAt).div(MONTH)\\r\\n        // multiply by 5 which will be added, tapering from 20 to 50\\r\\n        .mul(5)\\r\\n      );\\r\\n\\r\\n    // set a cap of 50\\r\\n    if (result \\u003e 50) {\\r\\n      result = 50;\\r\\n    }\\r\\n    return result;\\r\\n  }\\r\\n\\r\\n  function _calculateMintage(address staker) private view returns (uint256) {\\r\\n    // total supply\\r\\n    uint256 share = _SEED.totalSupply()\\r\\n      // divided by the supply divisor\\r\\n      // initially 20 for 5%, increases to 50 over months for 2%\\r\\n      .div(calculateSupplyDivisor())\\r\\n      // divided again by their stake representation\\r\\n      .div(_totalStaked.div(_staked[staker]));\\r\\n\\r\\n    // this share is supposed to be issued monthly, so see how many months its been\\r\\n    uint256 timeElapsed = block.timestamp.sub(_lastClaim[staker]);\\r\\n    uint256 mintage = 0;\\r\\n    // handle whole months\\r\\n    if (timeElapsed \\u003e MONTH) {\\r\\n      mintage = share.mul(timeElapsed.div(MONTH));\\r\\n      timeElapsed = timeElapsed.mod(MONTH);\\r\\n    }\\r\\n    // handle partial months, if there are any\\r\\n    // this if check prevents a revert due to div by 0\\r\\n    if (timeElapsed != 0) {\\r\\n      mintage = mintage.add(share.div(MONTH.div(timeElapsed)));\\r\\n    }\\r\\n    return mintage;\\r\\n  }\\r\\n\\r\\n  function calculateRewards(address staker) public view returns (uint256) {\\r\\n    // removes the five percent for the dev fund\\r\\n    return _calculateMintage(staker).div(20).mul(19);\\r\\n  }\\r\\n\\r\\n  // noReentrancy shouldn\\u0027t be needed due to the lack of external calls\\r\\n  // better safe than sorry\\r\\n  function claimRewards() external noReentrancy {\\r\\n    require(!_dated);\\r\\n\\r\\n    uint256 mintage = _calculateMintage(msg.sender);\\r\\n    uint256 mintagePiece = mintage.div(20);\\r\\n    require(mintagePiece \\u003e 0);\\r\\n\\r\\n    // update the last claim time\\r\\n    _lastClaim[msg.sender] = block.timestamp;\\r\\n    // mint out their staking rewards and the dev funds\\r\\n    _SEED.mint(msg.sender, mintage.sub(mintagePiece));\\r\\n    _SEED.mint(_developerFund, mintagePiece);\\r\\n\\r\\n    emit Rewards(msg.sender, mintage, mintagePiece);\\r\\n  }\\r\\n\\r\\n  function addMelody(address melody) external onlyOwner {\\r\\n    _SEED.approve(melody, UINT256_MAX);\\r\\n    emit MelodyAdded(melody);\\r\\n  }\\r\\n\\r\\n  function removeMelody(address melody) external onlyOwner {\\r\\n    _SEED.approve(melody, 0);\\r\\n    emit MelodyRemoved(melody);\\r\\n  }\\r\\n\\r\\n  function upgrade(address owned, address upgraded) external onlyOwner {\\r\\n    _dated = true;\\r\\n    IOwnershipTransferrable(owned).transferOwnership(upgraded);\\r\\n  }\\r\\n}\\r\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"melody\",\"type\":\"address\"}],\"name\":\"MelodyAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"melody\",\"type\":\"address\"}],\"name\":\"MelodyRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"developerFund\",\"type\":\"uint256\"}],\"name\":\"Rewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeDecreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeIncreased\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"melody\",\"type\":\"address\"}],\"name\":\"addMelody\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"calculateRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateSupplyDivisor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"decreaseStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"increaseStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"lastClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"previous\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"people\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"lastClaims\",\"type\":\"uint256[]\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"melody\",\"type\":\"address\"}],\"name\":\"removeMelody\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"staked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owned\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"upgraded\",\"type\":\"address\"}],\"name\":\"upgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fund\",\"type\":\"address\"}],\"name\":\"upgradeDevelopmentFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SeedStake","CompilerVersion":"v0.7.0+commit.9e61f92b","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000009ac9c722340ab93235c6d003c5e20f703526173a","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7c7557d0a575f8f70beb75fffb81046354c47086f611bc75fc1e7524cbca690a"}]}