{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IBPool is IERC20 {\r\n    function version() external view returns(uint);\r\n    function swapExactAmountIn(address, uint, address, uint, uint) external returns (uint, uint);\r\n\r\n    function swapExactAmountOut(address, uint, address, uint, uint) external returns (uint, uint);\r\n\r\n    function calcInGivenOut(uint, uint, uint, uint, uint, uint) external pure returns (uint);\r\n\r\n    function calcOutGivenIn(uint, uint, uint, uint, uint, uint) external pure returns (uint);\r\n\r\n    function getDenormalizedWeight(address) external view returns (uint);\r\n\r\n    function swapFee() external view returns (uint);\r\n\r\n    function setSwapFee(uint _swapFee) external;\r\n\r\n    function bind(address token, uint balance, uint denorm) external;\r\n\r\n    function rebind(address token, uint balance, uint denorm) external;\r\n\r\n    function finalize(\r\n        uint _swapFee,\r\n        uint _initPoolSupply,\r\n        address[] calldata _bindTokens,\r\n        uint[] calldata _bindDenorms\r\n    ) external;\r\n\r\n    function setPublicSwap(bool _publicSwap) external;\r\n    function setController(address _controller) external;\r\n    function setExchangeProxy(address _exchangeProxy) external;\r\n    function getFinalTokens() external view returns (address[] memory tokens);\r\n\r\n\r\n    function getTotalDenormalizedWeight() external view returns (uint);\r\n\r\n    function getBalance(address token) external view returns (uint);\r\n\r\n\r\n    function joinPool(uint poolAmountOut, uint[] calldata maxAmountsIn) external;\r\n    function joinPoolFor(address account, uint rewardAmountOut, uint[] calldata maxAmountsIn) external;\r\n    function joinswapPoolAmountOut(address tokenIn, uint poolAmountOut, uint maxAmountIn) external returns (uint tokenAmountIn);\r\n\r\n    function exitPool(uint poolAmountIn, uint[] calldata minAmountsOut) external;\r\n    function exitswapPoolAmountIn(address tokenOut, uint poolAmountIn, uint minAmountOut) external returns (uint tokenAmountOut);\r\n    function exitswapExternAmountOut(address tokenOut, uint tokenAmountOut, uint maxPoolAmountIn) external returns (uint poolAmountIn);\r\n    function joinswapExternAmountIn(\r\n        address tokenIn,\r\n        uint tokenAmountIn,\r\n        uint minPoolAmountOut\r\n    ) external returns (uint poolAmountOut);\r\n    function finalizeRewardFundInfo(address _rewardFund, uint _unstakingFrozenTime) external;\r\n    function addRewardPool(IERC20 _rewardToken, uint256 _startBlock, uint256 _endRewardBlock, uint256 _rewardPerBlock,\r\n        uint256 _lockRewardPercent, uint256 _startVestingBlock, uint256 _endVestingBlock) external;\r\n    function isBound(address t) external view returns (bool);\r\n    function getSpotPrice(address tokenIn, address tokenOut) external view returns (uint spotPrice);\r\n}\r\n\r\nlibrary Babylonian {\r\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint256 x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n        // else z = 0\r\n    }\r\n}\r\n\r\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\r\nlibrary FixedPoint {\r\n    // range: [0, 2**112 - 1]\r\n    // resolution: 1 / 2**112\r\n    struct uq112x112 {\r\n        uint224 _x;\r\n    }\r\n\r\n    // range: [0, 2**144 - 1]\r\n    // resolution: 1 / 2**112\r\n    struct uq144x112 {\r\n        uint256 _x;\r\n    }\r\n\r\n    uint8 private constant RESOLUTION = 112;\r\n    uint256 private constant Q112 = uint256(1) << RESOLUTION;\r\n    uint256 private constant Q224 = Q112 << RESOLUTION;\r\n\r\n    // encode a uint112 as a UQ112x112\r\n    function encode(uint112 x) internal pure returns (uq112x112 memory) {\r\n        return uq112x112(uint224(x) << RESOLUTION);\r\n    }\r\n\r\n    // encodes a uint144 as a UQ144x112\r\n    function encode144(uint144 x) internal pure returns (uq144x112 memory) {\r\n        return uq144x112(uint256(x) << RESOLUTION);\r\n    }\r\n\r\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\r\n    function div(uq112x112 memory self, uint112 x) internal pure returns (uq112x112 memory) {\r\n        require(x != 0, \"FixedPoint: DIV_BY_ZERO\");\r\n        return uq112x112(self._x / uint224(x));\r\n    }\r\n\r\n    // multiply a UQ112x112 by a uint, returning a UQ144x112\r\n    // reverts on overflow\r\n    function mul(uq112x112 memory self, uint256 y) internal pure returns (uq144x112 memory) {\r\n        uint256 z;\r\n        require(y == 0 || (z = uint256(self._x) * y) / y == uint256(self._x), \"FixedPoint: MULTIPLICATION_OVERFLOW\");\r\n        return uq144x112(z);\r\n    }\r\n\r\n    // returns a UQ112x112 which represents the ratio of the numerator to the denominator\r\n    // equivalent to encode(numerator).div(denominator)\r\n    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\r\n        require(denominator > 0, \"FixedPoint: DIV_BY_ZERO\");\r\n        return uq112x112((uint224(numerator) << RESOLUTION) / denominator);\r\n    }\r\n\r\n    // decode a UQ112x112 into a uint112 by truncating after the radix point\r\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\r\n        return uint112(self._x >> RESOLUTION);\r\n    }\r\n\r\n    // decode a UQ144x112 into a uint144 by truncating after the radix point\r\n    function decode144(uq144x112 memory self) internal pure returns (uint144) {\r\n        return uint144(self._x >> RESOLUTION);\r\n    }\r\n\r\n    // take the reciprocal of a UQ112x112\r\n    function reciprocal(uq112x112 memory self) internal pure returns (uq112x112 memory) {\r\n        require(self._x != 0, \"FixedPoint: ZERO_RECIPROCAL\");\r\n        return uq112x112(uint224(Q224 / self._x));\r\n    }\r\n\r\n    // square root of a UQ112x112\r\n    function sqrt(uq112x112 memory self) internal pure returns (uq112x112 memory) {\r\n        return uq112x112(uint224(Babylonian.sqrt(uint256(self._x)) << 56));\r\n    }\r\n}\r\n\r\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\r\n// range: [0, 2**112 - 1]\r\n// resolution: 1 / 2**112\r\nlibrary UQ112x112 {\r\n    uint224 constant Q112 = 2**112;\r\n\r\n    // encode a uint112 as a UQ112x112\r\n    function encode(uint112 y) internal pure returns (uint224 z) {\r\n        z = uint224(y) * Q112; // never overflows\r\n    }\r\n\r\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\r\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\r\n        z = x / uint224(y);\r\n    }\r\n}\r\n\r\ninterface IDecimals {\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// fixed window oracle that recomputes the average price for the entire epochPeriod once every epochPeriod\r\n// note that the price average is only guaranteed to be over at least 1 epochPeriod, but may be over a longer epochPeriod\r\n// @dev This version 2 supports querying twap with shorted period (ie 2hrs for BSDB reference price)\r\ncontract OracleMultiPairV2 is Ownable {\r\n    using FixedPoint for *;\r\n    using SafeMath for uint256;\r\n    using UQ112x112 for uint224;\r\n\r\n    /* ========= CONSTANT VARIABLES ======== */\r\n\r\n    uint256 public constant BPOOL_BONE = 10**18;\r\n    uint256 public constant ORACLE_RESERVE_MINIMUM = 10000 ether; // $10,000\r\n\r\n    /* ========== STATE VARIABLES ========== */\r\n\r\n    // governance\r\n    address public operator;\r\n\r\n    // epoch\r\n    uint256 public startTime;\r\n    uint256 public lastEpochTime;\r\n    uint256 public epoch; // for display only\r\n    uint256 public epochPeriod;\r\n\r\n    // 2-hours update\r\n    uint256 public lastUpdateHour;\r\n    uint256 public updatePeriod;\r\n\r\n    mapping(uint256 => uint112) public epochPrice;\r\n\r\n    // BPool\r\n    address public mainToken;\r\n    address[] public sideTokens;\r\n    uint256[] public sideTokenDecimals;\r\n    IBPool[] public pools;\r\n\r\n    // Pool price for update in cumulative epochPeriod\r\n    uint32 public blockTimestampCumulativeLast;\r\n    uint public priceCumulative;\r\n\r\n    // oracle\r\n    uint32 public blockTimestampLast;\r\n    uint256 public priceCumulativeLast;\r\n    FixedPoint.uq112x112 public priceAverage;\r\n\r\n    event Updated(uint256 priceCumulativeLast);\r\n\r\n    /* ========== CONSTRUCTOR ========== */\r\n\r\n    constructor(\r\n        address[] memory _pools,\r\n        address _mainToken,\r\n        address[] memory _sideTokens,\r\n        uint256 _epoch,\r\n        uint256 _epochPeriod,\r\n        uint256 _lastEpochTime,\r\n        uint256 _updatePeriod,\r\n        uint256 _lastUpdateHour\r\n    ) public {\r\n        require(_pools.length == _sideTokens.length, \"ERR_LENGTH_MISMATCH\");\r\n\r\n        mainToken = _mainToken;\r\n\r\n        for (uint256 i = 0; i < _pools.length; i++) {\r\n            IBPool pool = IBPool(_pools[i]);\r\n            require(pool.isBound(_mainToken) && pool.isBound(_sideTokens[i]), \"!bound\");\r\n            require(pool.getBalance(_mainToken) != 0 && pool.getBalance(_sideTokens[i]) != 0, \"OracleMultiPair: NO_RESERVES\"); // ensure that there's liquidity in the pool\r\n\r\n            pools.push(pool);\r\n            sideTokens.push(_sideTokens[i]);\r\n            sideTokenDecimals.push(IDecimals(_sideTokens[i]).decimals());\r\n        }\r\n\r\n        epoch = _epoch;\r\n        epochPeriod = _epochPeriod;\r\n        lastEpochTime = _lastEpochTime;\r\n        lastUpdateHour = _lastUpdateHour;\r\n        updatePeriod = _updatePeriod;\r\n\r\n        operator = msg.sender;\r\n    }\r\n\r\n    /* ========== GOVERNANCE ========== */\r\n\r\n    function setOperator(address _operator) external onlyOperator {\r\n        operator = _operator;\r\n    }\r\n\r\n    function setEpoch(uint256 _epoch) external onlyOperator {\r\n        epoch = _epoch;\r\n    }\r\n\r\n    function setEpochPeriod(uint256 _epochPeriod) external onlyOperator {\r\n        require(_epochPeriod >= 1 hours && _epochPeriod <= 48 hours, '_epochPeriod out of range');\r\n        epochPeriod = _epochPeriod;\r\n    }\r\n\r\n    function setLastUpdateHour(uint256 _lastUpdateHour) external onlyOperator {\r\n        require(_lastUpdateHour % 3600 == 0, '_lastUpdateHour is not valid');\r\n        lastUpdateHour = _lastUpdateHour;\r\n    }\r\n\r\n    function setUpdatePeriod(uint256 _updatePeriod) external onlyOperator {\r\n        require(_updatePeriod >= 1 hours && _updatePeriod <= epochPeriod, '_updatePeriod out of range');\r\n        updatePeriod = _updatePeriod;\r\n    }\r\n\r\n    function addPool(address _pool, address _sideToken) public onlyOperator {\r\n        IBPool pool = IBPool(_pool);\r\n        require(pool.isBound(mainToken) && pool.isBound(_sideToken), \"!bound\");\r\n        require(pool.getBalance(mainToken) != 0 && pool.getBalance(_sideToken) != 0, \"OracleMultiPair: NO_RESERVES\");\r\n        // ensure that there's liquidity in the pool\r\n\r\n        pools.push(pool);\r\n        sideTokens.push(_sideToken);\r\n        sideTokenDecimals.push(IDecimals(_sideToken).decimals());\r\n    }\r\n\r\n    function removePool(address _pool, address _sideToken) public onlyOperator {\r\n        uint last = pools.length - 1;\r\n\r\n        for (uint256 i = 0; i < pools.length; i++) {\r\n            if (address(pools[i]) == _pool && sideTokens[i] == _sideToken) {\r\n                pools[i] = pools[last];\r\n                sideTokens[i] = sideTokens[last];\r\n                sideTokenDecimals[i] = sideTokenDecimals[last];\r\n\r\n                pools.pop();\r\n                sideTokens.pop();\r\n                sideTokenDecimals.pop();\r\n\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /* =================== Modifier =================== */\r\n\r\n    modifier checkEpoch {\r\n        uint256 _nextEpochPoint = nextEpochPoint();\r\n        require(now >= _nextEpochPoint, \"OracleMultiPair: not opened yet\");\r\n\r\n        _;\r\n\r\n        for (;;) {\r\n            lastEpochTime = _nextEpochPoint;\r\n            ++epoch;\r\n            _nextEpochPoint = nextEpochPoint();\r\n            if (now < _nextEpochPoint) break;\r\n        }\r\n    }\r\n\r\n    modifier onlyOperator() {\r\n        require(operator == msg.sender, \"OracleMultiPair: caller is not the operator\");\r\n        _;\r\n    }\r\n\r\n    /* ========== VIEW FUNCTIONS ========== */\r\n\r\n    function nextEpochPoint() public view returns (uint256) {\r\n        return lastEpochTime.add(epochPeriod);\r\n    }\r\n\r\n    function nextUpdateHour() public view returns (uint256) {\r\n        return lastUpdateHour.add(updatePeriod);\r\n    }\r\n\r\n    /* ========== MUTABLE FUNCTIONS ========== */\r\n    // update reserves and, on the first call per block, price accumulators\r\n    function updateCumulative() public {\r\n        uint256 _nextUpdateHour = lastUpdateHour.add(updatePeriod);\r\n        if (now >= _nextUpdateHour) {\r\n            uint totalMainPriceWeight;\r\n            uint totalMainPoolBal;\r\n\r\n            for (uint256 i = 0; i < pools.length; i++) {\r\n                uint _decimalFactor = 10 ** (uint256(18).sub(sideTokenDecimals[i]));\r\n                uint tokenMainPrice = pools[i].getSpotPrice(sideTokens[i], mainToken).mul(_decimalFactor);\r\n                require(tokenMainPrice != 0, \"!price\");\r\n\r\n                uint reserveBal = pools[i].getBalance(sideTokens[i]).mul(_decimalFactor);\r\n                require(reserveBal >= ORACLE_RESERVE_MINIMUM, \"!min reserve\");\r\n\r\n                uint tokenBal = pools[i].getBalance(mainToken);\r\n                totalMainPriceWeight = totalMainPriceWeight.add(tokenMainPrice.mul(tokenBal).div(BPOOL_BONE));\r\n                totalMainPoolBal = totalMainPoolBal.add(tokenBal);\r\n            }\r\n\r\n            require(totalMainPriceWeight <= uint112(- 1) && totalMainPoolBal <= uint112(- 1), 'BPool: OVERFLOW');\r\n            uint32 blockTimestamp = uint32(block.timestamp % 2 ** 32);\r\n            uint32 timeElapsed = blockTimestamp - blockTimestampCumulativeLast; // overflow is desired\r\n\r\n            if (timeElapsed > 0 && totalMainPoolBal != 0) {\r\n                // * never overflows, and + overflow is desired\r\n                priceCumulative += uint(UQ112x112.encode(uint112(totalMainPriceWeight)).uqdiv(uint112(totalMainPoolBal))) * timeElapsed;\r\n\r\n                blockTimestampCumulativeLast = blockTimestamp;\r\n            }\r\n\r\n            lastUpdateHour = _nextUpdateHour;\r\n        }\r\n    }\r\n\r\n    /** @dev Updates 1-day EMA price.  */\r\n    function update() external checkEpoch {\r\n        updateCumulative();\r\n\r\n        uint32 timeElapsed = blockTimestampCumulativeLast - blockTimestampLast; // overflow is desired\r\n\r\n        if (timeElapsed == 0) {\r\n            // prevent divided by zero\r\n            return;\r\n        }\r\n\r\n        // overflow is desired, casting never truncates\r\n        // cumulative price is in (uq112x112 price * seconds) units so we simply wrap it after division by time elapsed\r\n        priceAverage = FixedPoint.uq112x112(uint224((priceCumulative - priceCumulativeLast) / timeElapsed));\r\n\r\n        priceCumulativeLast = priceCumulative;\r\n        blockTimestampLast = blockTimestampCumulativeLast;\r\n\r\n        epochPrice[epoch] = priceAverage.decode();\r\n        emit Updated(priceCumulative);\r\n    }\r\n\r\n    // note this will always return 0 before update has been called successfully for the first time.\r\n    function consult(address token, uint256 amountIn) external view returns (uint144 amountOut) {\r\n        require(token == mainToken, \"OracleMultiPair: INVALID_TOKEN\");\r\n        require(now.sub(blockTimestampLast) <= epochPeriod, \"OracleMultiPair: Price out-of-date\");\r\n        amountOut = priceAverage.mul(amountIn).decode144();\r\n    }\r\n\r\n    function twap(uint256 _amountIn) external view returns (uint144) {\r\n        uint32 timeElapsed = blockTimestampCumulativeLast - blockTimestampLast;\r\n        return (timeElapsed == 0) ? priceAverage.mul(_amountIn).decode144() : FixedPoint.uq112x112(uint224((priceCumulative - priceCumulativeLast) / timeElapsed)).mul(_amountIn).decode144();\r\n    }\r\n\r\n    function governanceRecoverUnsupported(IERC20 _token, uint256 _amount, address _to) external onlyOperator {\r\n        _token.transfer(_to, _amount);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_pools\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_mainToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_sideTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_epochPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastEpochTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_updatePeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastUpdateHour\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceCumulativeLast\",\"type\":\"uint256\"}],\"name\":\"Updated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BPOOL_BONE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ORACLE_RESERVE_MINIMUM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sideToken\",\"type\":\"address\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockTimestampCumulativeLast\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockTimestampLast\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"consult\",\"outputs\":[{\"internalType\":\"uint144\",\"name\":\"amountOut\",\"type\":\"uint144\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"epochPrice\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"governanceRecoverUnsupported\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastEpochTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateHour\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextEpochPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextUpdateHour\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"contract IBPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceAverage\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"_x\",\"type\":\"uint224\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceCumulative\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceCumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sideToken\",\"type\":\"address\"}],\"name\":\"removePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"}],\"name\":\"setEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epochPeriod\",\"type\":\"uint256\"}],\"name\":\"setEpochPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lastUpdateHour\",\"type\":\"uint256\"}],\"name\":\"setLastUpdateHour\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_updatePeriod\",\"type\":\"uint256\"}],\"name\":\"setUpdatePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sideTokenDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sideTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"name\":\"twap\",\"outputs\":[{\"internalType\":\"uint144\",\"name\":\"\",\"type\":\"uint144\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateCumulative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"OracleMultiPairV2","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000003e0af2916e598fa5ea5cb2da4edfda9aed9fde00000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000019000000000000000000000000000000000000000000000000000000000000a8c0000000000000000000000000000000000000000000000000000000005ff3ac000000000000000000000000000000000000000000000000000000000000001c20000000000000000000000000000000000000000000000000000000005ff3f2500000000000000000000000000000000000000000000000000000000000000002000000000000000000000000cdd2bd61d07b8d42843175dd097a4858a8f764e7000000000000000000000000c1b6296e55b6ca1882a9cefd72ac246acde914140000000000000000000000000000000000000000000000000000000000000002000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000006b175474e89094c44da98b954eedeac495271d0f","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://2dc34774c2b61f0d12fa5456af916cd830c61cf03e4502c28accbeee34d83cdb"}]}