{"status":"1","message":"OK","result":[{"SourceCode":"// File: https://github.com/OpenZeppelin/openzeppelin-contracts/contracts/math/SafeMath.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: browser/Registry.sol\r\n\r\npragma solidity ^0.6.7;\r\n\r\n\r\ncontract Proxiable {\r\n    // Code position in storage is keccak256(\"PROXIABLE\") = \"0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7\"\r\n\r\n    function updateCodeAddress(address newAddress) internal {\r\n        require(\r\n            bytes32(0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7) == Proxiable(newAddress).proxiableUUID(),\r\n            \"Not compatible\"\r\n        );\r\n        assembly { // solium-disable-line\r\n            sstore(0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7, newAddress)\r\n        }\r\n    }\r\n    function proxiableUUID() public pure returns (bytes32) {\r\n        return 0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7;\r\n    }\r\n}\r\n\r\ncontract LibraryLockDataLayout {\r\n  bool public initialized = false;\r\n}\r\n\r\ncontract LibraryLock is LibraryLockDataLayout {\r\n    // Ensures no one can manipulate the Logic Contract once it is deployed.\r\n    // PARITY WALLET HACK PREVENTION\r\n\r\n    modifier delegatedOnly() {\r\n        require(initialized == true, \"The library is locked. No direct 'call' is allowed\");\r\n        _;\r\n    }\r\n    function initialize() internal {\r\n        initialized = true;\r\n    }\r\n}\r\n\r\ncontract RegistryDataLayout is LibraryLock {\r\n    address public owner;\r\n    \r\n    struct whitelistVotes {\r\n        uint32 yesVotes;\r\n        uint32 noVotes;\r\n        address[] managers;\r\n    }\r\n    mapping(address => whitelistVotes) public whitelistContract;\r\n    \r\n    mapping(address => bool) public whitelist;\r\n    \r\n    struct queuedContract {\r\n        uint256 finalizationBlock;\r\n        bool result;\r\n    }\r\n    mapping(address => queuedContract) public queuedContracts;\r\n    address[] public queueList;\r\n    \r\n    using SafeMath for uint32;\r\n    using SafeMath for uint256;\r\n    \r\n    address public fundContract = 0x2c9728ad35C1CfB16E3C1B5045bC9BA30F37FAc5;\r\n    address public connector = 0x60d70dF1c783b1E5489721c443465684e2756555;\r\n    address public devFund = 0xd66A9D2B706e225204F475c9e70A4c09eEa62199;\r\n    address public rewardsContract = 0x868f7622F57b62330Db8b282044d7EAf067fAcfe;\r\n    address public contractManager;\r\n    address public nyanManager;\r\n    address public selfManager;\r\n    address public nyanVoting;\r\n}\r\n\r\ninterface usedContract {\r\n    function getManagerLimit() external returns(uint32);\r\n    function sendFundETH(address _manager) external payable;\r\n    function getFundETH(uint256 amount) external;\r\n    function returnFundETH() external payable;\r\n    function fundLog(address manager, string calldata reason, address recipient) external payable;\r\n    function isFundManager(address manager) view external returns(bool);\r\n    function checkFundManagerAllowance(address _manager, uint256 ETH) external returns(bool);\r\n    function checkManagerAllowance(address _manager, uint256 ETH) external returns(bool);\r\n    function adjustFundManagerAllowance(address _manager, uint256 ETH, uint256 profit) external;\r\n    function adjustManagerAllowance(address _manager, uint256 ETH, uint256 profit) external;\r\n}\r\n\r\ncontract Registry is RegistryDataLayout, Proxiable {\r\n    constructor() public {\r\n        \r\n    }\r\n    \r\n    function initRegistry(address _nyanManager) public {\r\n        require(!initialized);\r\n        owner = msg.sender;\r\n        initialize();\r\n    }\r\n    \r\n    function updateCode(address newCode) public delegatedOnly  {\r\n        if (owner == address(0)) {\r\n            require(msg.sender == contractManager);\r\n        } else {\r\n            require(msg.sender == owner);\r\n        }\r\n        updateCodeAddress(newCode);\r\n    }\r\n    \r\n    function setContracts(address _contractManager, \r\n                          address _nyanManager, \r\n                          address _selfManager,\r\n                          address _nyanVoting) public {\r\n                              require(msg.sender == owner);\r\n                              contractManager = _contractManager;\r\n                              nyanManager = _nyanManager;\r\n                              selfManager = _selfManager;\r\n                              nyanVoting = _nyanVoting;\r\n                              fundContract = 0x2c9728ad35C1CfB16E3C1B5045bC9BA30F37FAc5;\r\n                              connector = 0x60d70dF1c783b1E5489721c443465684e2756555;\r\n                              devFund = 0xd66A9D2B706e225204F475c9e70A4c09eEa62199;\r\n                              rewardsContract = 0x868f7622F57b62330Db8b282044d7EAf067fAcfe;\r\n    }\r\n    \r\n    function useFundETH(address manager, uint256 ETH, address recipient) public delegatedOnly payable {\r\n        require(whitelist[msg.sender]);\r\n        bool canSpend = usedContract(nyanManager).checkFundManagerAllowance(manager, ETH);\r\n        require(canSpend);\r\n        usedContract(connector).getFundETH(ETH);\r\n        usedContract(connector).fundLog(manager, \"used ETH for an investment\", recipient);\r\n        require(whitelist[recipient]);\r\n        usedContract(recipient).sendFundETH{value: ETH}(manager);\r\n    }\r\n    \r\n    function returnFundETH(address manager, uint256 profit) public delegatedOnly payable {\r\n        require(whitelist[msg.sender]);\r\n        if (profit > 100) {\r\n            rewardsContract.call{value: profit.mul(40).div(100).sub(10)}(\"\");\r\n            manager.call{value: profit.mul(20).div(100)}(\"\");\r\n            devFund.call{value: profit.mul(10).div(100)}(\"\");\r\n            usedContract(connector).returnFundETH{value: msg.value.sub(profit.mul(70).div(100))}();\r\n        } else {\r\n            usedContract(connector).returnFundETH{value: msg.value}();\r\n        }\r\n        usedContract(connector).fundLog(manager, \"returned ETH from an investment\", fundContract);\r\n        usedContract(nyanManager).adjustFundManagerAllowance(manager, msg.value, profit);\r\n    }\r\n    \r\n    function useManagerETH(address manager, uint256 ETH, address recipient) public delegatedOnly payable {\r\n        require(whitelist[msg.sender]);\r\n        bool canSpend = usedContract(selfManager).checkManagerAllowance(manager, ETH);\r\n        require(canSpend);\r\n        usedContract(connector).getFundETH(ETH);\r\n        usedContract(connector).fundLog(manager, \"used ETH for an investment\", recipient);\r\n        require(whitelist[recipient]);\r\n        usedContract(recipient).sendFundETH{value: ETH}(manager);\r\n    }\r\n    \r\n    function returnManagerETH(address manager, uint256 profit) public delegatedOnly payable {\r\n        require(whitelist[msg.sender]);\r\n        if (profit > 100) {\r\n            rewardsContract.call{value: profit.mul(10).div(100).sub(10)}(\"\");\r\n            manager.call{value: profit.mul(20).div(100)}(\"\");\r\n            usedContract(connector).returnFundETH{value: msg.value.sub(profit.mul(30).div(100))}();\r\n            profit = profit.sub(profit.mul(30).div(100));\r\n        } else {\r\n            usedContract(connector).returnFundETH{value: msg.value}();\r\n        }\r\n        usedContract(connector).fundLog(manager, \"returned ETH from an investment\", fundContract);\r\n        usedContract(selfManager).adjustManagerAllowance(manager, msg.value, profit);\r\n    }\r\n    \r\n    //function to vote on contract to whitelist or blacklist\r\n    function manageContract(address _contract, address _manager, bool vote) public delegatedOnly {\r\n        require(msg.sender == nyanVoting);\r\n        require(usedContract(nyanManager).isFundManager(_manager));\r\n        //check if manager has already voted on contract this round\r\n        bool hasVoted;\r\n        for(uint32 i; i < whitelistContract[_contract].managers.length; i++) {\r\n            if (whitelistContract[_contract].managers[i] == msg.sender) {\r\n                hasVoted = true;\r\n            }\r\n        }\r\n        require(!hasVoted, \"You've already voted\");\r\n        //add manager's vote to contract\r\n        if (vote) {\r\n            whitelistContract[_contract].yesVotes = uint32(whitelistContract[_contract].yesVotes.add(1));\r\n        } else {\r\n            whitelistContract[_contract].noVotes = uint32(whitelistContract[_contract].noVotes.add(1));\r\n        }\r\n        whitelistContract[_contract].managers.push(msg.sender);\r\n        \r\n        //if all have voted in a direction, contract is whitelisted or blacklisted\r\n        if (whitelistContract[_contract].yesVotes.add(whitelistContract[_contract].noVotes) == usedContract(nyanManager).getManagerLimit()) {\r\n            if (whitelistContract[_contract].yesVotes > whitelistContract[_contract].noVotes) {\r\n                queueList.push(_contract);\r\n                queuedContracts[_contract].finalizationBlock = block.number.add(45500);\r\n                queuedContracts[_contract].result = true;\r\n            }\r\n            if (whitelistContract[_contract].yesVotes < whitelistContract[_contract].noVotes) {\r\n                queueList.push(_contract);\r\n                queuedContracts[_contract].finalizationBlock = block.number.add(45500);\r\n                queuedContracts[_contract].result = false;\r\n            }\r\n        }\r\n    }\r\n    \r\n    function finalizeWhitelist(address _contract) public {\r\n        bool isInQueue;\r\n        for (uint32 i; i < queueList.length; i++) {\r\n            if (queueList[i] == _contract) {\r\n                if (queuedContracts[queueList[i]].finalizationBlock < block.number) {\r\n                    whitelist[_contract] = queuedContracts[queueList[i]].result;\r\n                    removeFromQueue(i);\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    function removeFromQueue(uint index) internal {\r\n        queueList[index] = queueList[queueList.length-1];\r\n        delete queueList[queueList.length-1];\r\n        queueList.pop();\r\n    }\r\n    \r\n    function createWhitelist(address _contract) public {\r\n        require(msg.sender == owner);\r\n        whitelist[_contract] = true;\r\n    }\r\n    \r\n    function checkRegistry(address _contract) public view returns(bool) {\r\n        return whitelist[_contract];\r\n    }\r\n    \r\n    receive() external payable {\r\n        \r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"checkRegistry\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"connector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"createWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"finalizeWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nyanManager\",\"type\":\"address\"}],\"name\":\"initRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"vote\",\"type\":\"bool\"}],\"name\":\"manageContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nyanManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nyanVoting\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"queueList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"queuedContracts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"finalizationBlock\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"}],\"name\":\"returnFundETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"}],\"name\":\"returnManagerETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"selfManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nyanManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_selfManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nyanVoting\",\"type\":\"address\"}],\"name\":\"setContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newCode\",\"type\":\"address\"}],\"name\":\"updateCode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ETH\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"useFundETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ETH\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"useManagerETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistContract\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"yesVotes\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"noVotes\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Registry","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://fe21bdd22c62677db912126acdacf80fcf3c46b2edca1c2377342f6776f770bb"}]}