{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IVoteProxy {\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address _voter) external view returns (uint256);\r\n}\r\n\r\ninterface IFaasPool is IERC20 {\r\n    function getBalance(address token) external view returns (uint256);\r\n\r\n    function getUserInfo(uint8 _pid, address _account)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 amount,\r\n            uint256 rewardDebt,\r\n            uint256 accumulatedEarned,\r\n            uint256 lockReward,\r\n            uint256 lockRewardReleased\r\n        );\r\n}\r\n\r\ncontract BsdVote is IVoteProxy {\r\n    using SafeMath for uint256;\r\n\r\n    address public governance;\r\n\r\n    IFaasPool[] public faasPools;\r\n    IERC20[] public stakePools;\r\n    IERC20 public bsdsToken;\r\n\r\n    uint256 public factorStake;\r\n    uint256 public factorLP;\r\n    uint256 public totalFaasPools;\r\n    uint256 public totalStakePools;\r\n\r\n    constructor(\r\n        address _bsds,\r\n        address[] memory _faasPoolAddresses,\r\n        address[] memory _stakePoolAddresses,\r\n        uint256 _factorStake,\r\n        uint256 _factorLP\r\n    ) public {\r\n        _setFaasPools(_faasPoolAddresses);\r\n        _setStakePools(_stakePoolAddresses);\r\n        factorLP = _factorLP;\r\n        factorStake = _factorStake;\r\n        bsdsToken = IERC20(_bsds);\r\n        governance = msg.sender;\r\n    }\r\n\r\n    function _setFaasPools(address[] memory _faasPoolAddresses) internal {\r\n        totalFaasPools = _faasPoolAddresses.length;\r\n        for (uint256 i = 0; i < totalFaasPools; i++) {\r\n            faasPools.push(IFaasPool(_faasPoolAddresses[i]));\r\n        }\r\n    }\r\n\r\n    function _setStakePools(address[] memory _stakePoolAddresses) internal {\r\n        totalStakePools = _stakePoolAddresses.length;\r\n        for (uint256 i = 0; i < totalStakePools; i++) {\r\n            stakePools.push(IERC20(_stakePoolAddresses[i]));\r\n        }\r\n    }\r\n\r\n    function decimals() public pure virtual override returns (uint8) {\r\n        return uint8(18);\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        uint256 totalSupplyPool = 0;\r\n        uint256 i;\r\n        for (i = 0; i < totalFaasPools; i++) {\r\n            totalSupplyPool = totalSupplyPool.add(bsdsToken.balanceOf(address(faasPools[i])));\r\n        }\r\n        uint256 totalSupplyStake = 0;\r\n        for (i = 0; i < totalStakePools; i++) {\r\n            totalSupplyStake = totalSupplyStake.add(bsdsToken.balanceOf(address(stakePools[i])));\r\n        }\r\n        return factorLP.mul(totalSupplyPool).add(factorStake.mul(totalSupplyStake)).div(factorLP.add(factorStake));\r\n    }\r\n\r\n    function getBsdsAmountInPool(address _voter) internal view returns (uint256) {\r\n        uint256 stakeAmount = 0;\r\n        for (uint256 i = 0; i < totalFaasPools; i++) {\r\n            (uint256 _stakeAmountInPool, , , , ) = faasPools[i].getUserInfo(uint8(0), _voter);\r\n            stakeAmount = stakeAmount.add(_stakeAmountInPool.mul(faasPools[i].getBalance(address(bsdsToken))).div(faasPools[i].totalSupply()));\r\n        }\r\n        return stakeAmount;\r\n    }\r\n\r\n    function getBsdsAmountInStakeContracts(address _voter) internal view returns (uint256) {\r\n        uint256 stakeAmount = 0;\r\n        for (uint256 i = 0; i < totalStakePools; i++) {\r\n            stakeAmount = stakeAmount.add(stakePools[i].balanceOf(_voter));\r\n        }\r\n        return stakeAmount;\r\n    }\r\n\r\n    function balanceOf(address _voter) public view override returns (uint256) {\r\n        uint256 balanceInPool = getBsdsAmountInPool(_voter);\r\n        uint256 balanceInStakeContract = getBsdsAmountInStakeContracts(_voter);\r\n        return factorLP.mul(balanceInPool).add(factorStake.mul(balanceInStakeContract)).div(factorLP.add(factorStake));\r\n    }\r\n\r\n    function setGovernance(address _governance) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        require(_governance != address(0), \"zero\");\r\n        governance = _governance;\r\n    }\r\n\r\n    function setFactorLP(uint256 _factorLP) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        require(factorStake > 0 || _factorLP > 0, \"Total factors must > 0\");\r\n        factorLP = _factorLP;\r\n    }\r\n\r\n    function setFactorStake(uint256 _factorStake) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        require(factorLP > 0 || _factorStake > 0, \"Total factors must > 0\");\r\n        factorStake = _factorStake;\r\n    }\r\n\r\n    function setFaasPools(address[] memory _faasPoolAddresses) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        _setFaasPools(_faasPoolAddresses);\r\n    }\r\n\r\n    function setStakePools(address[] memory _stakePoolAddresses) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        _setStakePools(_stakePoolAddresses);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bsds\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_faasPoolAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_stakePoolAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_factorStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_factorLP\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bsdsToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"faasPools\",\"outputs\":[{\"internalType\":\"contract IFaasPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factorLP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factorStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_faasPoolAddresses\",\"type\":\"address[]\"}],\"name\":\"setFaasPools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_factorLP\",\"type\":\"uint256\"}],\"name\":\"setFactorLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_factorStake\",\"type\":\"uint256\"}],\"name\":\"setFactorStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_stakePoolAddresses\",\"type\":\"address[]\"}],\"name\":\"setStakePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakePools\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFaasPools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakePools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"BsdVote","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"000000000000000000000000e7c9c188138f7d70945d420d75f8ca7d8ab9c70000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000000000000000320000000000000000000000000000000000000000000000000000000000000002000000000000000000000000dd82e4227baec1fc40a72ef9895f38f2c1df4f420000000000000000000000008438d64da58772e9f7fceaa1506ba300f935abbd0000000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://0fd4e74212c146133da8ba01f55d5166ad1bb2c6d719b6d52bbe015309964d44"}]}