{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 weiValue,\r\n        string memory errorMessage\r\n    ) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0), \"SafeERC20: approve from non-zero to non-zero allowance\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface IBPool is IERC20 {\r\n    function version() external view returns (uint256);\r\n\r\n    function swapExactAmountIn(\r\n        address,\r\n        uint256,\r\n        address,\r\n        uint256,\r\n        uint256\r\n    ) external returns (uint256, uint256);\r\n\r\n    function swapExactAmountOut(\r\n        address,\r\n        uint256,\r\n        address,\r\n        uint256,\r\n        uint256\r\n    ) external returns (uint256, uint256);\r\n\r\n    function calcInGivenOut(\r\n        uint256,\r\n        uint256,\r\n        uint256,\r\n        uint256,\r\n        uint256,\r\n        uint256\r\n    ) external pure returns (uint256);\r\n\r\n    function calcOutGivenIn(\r\n        uint256,\r\n        uint256,\r\n        uint256,\r\n        uint256,\r\n        uint256,\r\n        uint256\r\n    ) external pure returns (uint256);\r\n\r\n    function getDenormalizedWeight(address) external view returns (uint256);\r\n\r\n    function swapFee() external view returns (uint256);\r\n\r\n    function setSwapFee(uint256 _swapFee) external;\r\n\r\n    function bind(\r\n        address token,\r\n        uint256 balance,\r\n        uint256 denorm\r\n    ) external;\r\n\r\n    function rebind(\r\n        address token,\r\n        uint256 balance,\r\n        uint256 denorm\r\n    ) external;\r\n\r\n    function finalize(\r\n        uint256 _swapFee,\r\n        uint256 _initPoolSupply,\r\n        address[] calldata _bindTokens,\r\n        uint256[] calldata _bindDenorms\r\n    ) external;\r\n\r\n    function setPublicSwap(bool _publicSwap) external;\r\n\r\n    function setController(address _controller) external;\r\n\r\n    function setExchangeProxy(address _exchangeProxy) external;\r\n\r\n    function getFinalTokens() external view returns (address[] memory tokens);\r\n\r\n    function getTotalDenormalizedWeight() external view returns (uint256);\r\n\r\n    function getBalance(address token) external view returns (uint256);\r\n\r\n    function joinPool(uint256 poolAmountOut, uint256[] calldata maxAmountsIn) external;\r\n\r\n    function joinPoolFor(\r\n        address account,\r\n        uint256 rewardAmountOut,\r\n        uint256[] calldata maxAmountsIn\r\n    ) external;\r\n\r\n    function joinswapPoolAmountOut(\r\n        address tokenIn,\r\n        uint256 poolAmountOut,\r\n        uint256 maxAmountIn\r\n    ) external returns (uint256 tokenAmountIn);\r\n\r\n    function exitPool(uint256 poolAmountIn, uint256[] calldata minAmountsOut) external;\r\n\r\n    function exitswapPoolAmountIn(\r\n        address tokenOut,\r\n        uint256 poolAmountIn,\r\n        uint256 minAmountOut\r\n    ) external returns (uint256 tokenAmountOut);\r\n\r\n    function exitswapExternAmountOut(\r\n        address tokenOut,\r\n        uint256 tokenAmountOut,\r\n        uint256 maxPoolAmountIn\r\n    ) external returns (uint256 poolAmountIn);\r\n\r\n    function joinswapExternAmountIn(\r\n        address tokenIn,\r\n        uint256 tokenAmountIn,\r\n        uint256 minPoolAmountOut\r\n    ) external returns (uint256 poolAmountOut);\r\n\r\n    function finalizeRewardFundInfo(address _rewardFund, uint256 _unstakingFrozenTime) external;\r\n\r\n    function addRewardPool(\r\n        IERC20 _rewardToken,\r\n        uint256 _startBlock,\r\n        uint256 _endRewardBlock,\r\n        uint256 _rewardPerBlock,\r\n        uint256 _lockRewardPercent,\r\n        uint256 _startVestingBlock,\r\n        uint256 _endVestingBlock\r\n    ) external;\r\n\r\n    function isBound(address t) external view returns (bool);\r\n\r\n    function getSpotPrice(address tokenIn, address tokenOut) external view returns (uint256 spotPrice);\r\n}\r\n\r\ninterface IFreeFromUpTo {\r\n    function freeFromUpTo(address from, uint256 value) external returns (uint256 freed);\r\n}\r\n\r\ninterface IOracle {\r\n    function update() external;\r\n\r\n    function consult(address token, uint256 amountIn) external view returns (uint256 amountOut);\r\n}\r\n\r\ninterface IBoardroom {\r\n    function balanceOf(address _director) external view returns (uint256);\r\n\r\n    function earned(address _director) external view returns (uint256);\r\n\r\n    function canWithdraw(address _director) external view returns (bool);\r\n\r\n    function canClaimReward(address _director) external view returns (bool);\r\n\r\n    function setOperator(address _operator) external;\r\n\r\n    function setLockUp(uint256 _withdrawLockupEpochs, uint256 _rewardLockupEpochs) external;\r\n\r\n    function stake(uint256 _amount) external;\r\n\r\n    function withdraw(uint256 _amount) external;\r\n\r\n    function exit() external;\r\n\r\n    function claimReward() external;\r\n\r\n    function allocateSeigniorage(uint256 _amount) external;\r\n\r\n    function governanceRecoverUnsupported(\r\n        address _token,\r\n        uint256 _amount,\r\n        address _to\r\n    ) external;\r\n}\r\n\r\ninterface IShare {\r\n    function unclaimedTreasuryFund() external view returns (uint256 _pending);\r\n\r\n    function claimRewards() external;\r\n}\r\n\r\n/**\r\n * @dev This contract will collect vesting Shares, stake to the Boardroom and rebalance BSD, DAI, USDC according to DAO.\r\n */\r\ncontract CommunityFund {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    IFreeFromUpTo public constant chi = IFreeFromUpTo(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c);\r\n\r\n    modifier discountCHI(uint8 flag) {\r\n        if ((flag & 0x1) == 0) {\r\n            _;\r\n        } else {\r\n            uint256 gasStart = gasleft();\r\n            _;\r\n            uint256 gasSpent = 21000 + gasStart - gasleft() + 16 * msg.data.length;\r\n            chi.freeFromUpTo(msg.sender, (gasSpent + 14154) / 41130);\r\n        }\r\n    }\r\n\r\n    /* ========== STATE VARIABLES ========== */\r\n\r\n    // governance\r\n    address public operator;\r\n\r\n    // flags\r\n    bool public initialized = false;\r\n    bool public publicAllowed; // set to true to allow public to call rebalance()\r\n\r\n    // price\r\n    uint256 public dollarPriceCeiling;\r\n\r\n    address public dollar = address(0x003e0af2916e598Fa5eA5Cb2Da4EDfdA9aEd9Fde);\r\n    address public bond = address(0x9f48b2f14517770F2d238c787356F3b961a6616F);\r\n    address public share = address(0xE7C9C188138f7D70945D420d75F8Ca7d8ab9c700);\r\n\r\n    address public dai = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);\r\n    address public usdc = address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\r\n\r\n    address public boardroom = address(0xb9Fb8a22908c570C09a4Dbf5F89b87f9D91FBf4a);\r\n    address public dollarOracle = address(0x90F42043E638094d710bdCF1D1CbE6268AEB22d7);\r\n\r\n    mapping(address => address) public vliquidPools; // DAI/USDC -> value_liquid_pool\r\n\r\n    uint256 private usdcDecimalFactor;\r\n\r\n    // DAO parameters - https://docs.basisdollar.fi/DAO\r\n    uint256[] public expansionPercent;\r\n    uint256[] public contractionPercent;\r\n\r\n    /* ========== EVENTS ========== */\r\n\r\n    event Initialized(address indexed executor, uint256 at);\r\n    event SwapToken(address inputToken, address outputToken, uint256 amount);\r\n\r\n    /* ========== Modifiers =============== */\r\n\r\n    modifier onlyOperator() {\r\n        require(operator == msg.sender, \"CommunityFund: caller is not the operator\");\r\n        _;\r\n    }\r\n\r\n    modifier notInitialized() {\r\n        require(!initialized, \"CommunityFund: already initialized\");\r\n        _;\r\n    }\r\n\r\n    modifier checkPublicAllow() {\r\n        require(publicAllowed || msg.sender == operator, \"CommunityFund: caller is not the operator nor public call not allowed\");\r\n        _;\r\n    }\r\n\r\n    /* ========== GOVERNANCE ========== */\r\n\r\n    function initialize(\r\n        address _dollar,\r\n        address _bond,\r\n        address _share,\r\n        address _dai,\r\n        address _usdc,\r\n        address _boardroom,\r\n        address _dollarOracle\r\n    ) public notInitialized {\r\n        dollar = _dollar;\r\n        bond = _bond;\r\n        share = _share;\r\n        dai = _dai;\r\n        usdc = _usdc;\r\n        boardroom = _boardroom;\r\n        dollarOracle = _dollarOracle;\r\n        dollarPriceCeiling = 1010 finney; // $1.01\r\n        vliquidPools[dai] = address(0xc1b6296e55b6cA1882a9cefD72Ac246ACdE91414);\r\n        vliquidPools[usdc] = address(0xCDD2bD61D07b8d42843175dd097A4858A8f764e7);\r\n        usdcDecimalFactor = 10**12; // USDC's decimals = 6\r\n        expansionPercent = [20, 40, 40]; // dollar (20%), DAI (40%), USDC (40%) during expansion period\r\n        contractionPercent = [80, 10, 10]; // dollar (80%), DAI (10%), USDC (10%) during contraction period\r\n        publicAllowed = true;\r\n        initialized = true;\r\n        operator = msg.sender;\r\n        emit Initialized(msg.sender, block.number);\r\n    }\r\n\r\n    function setOperator(address _operator) external onlyOperator {\r\n        operator = _operator;\r\n    }\r\n\r\n    function setPublicAllowed(bool _publicAllowed) external onlyOperator {\r\n        publicAllowed = _publicAllowed;\r\n    }\r\n\r\n    function setExpansionPercent(\r\n        uint256 _dollarPercent,\r\n        uint256 _daiPercent,\r\n        uint256 _usdcPercent\r\n    ) external onlyOperator {\r\n        require(_dollarPercent.add(_daiPercent).add(_usdcPercent) == 100, \"!100%\");\r\n        expansionPercent[0] = _dollarPercent;\r\n        expansionPercent[1] = _daiPercent;\r\n        expansionPercent[2] = _usdcPercent;\r\n    }\r\n\r\n    function setContractionPercent(\r\n        uint256 _dollarPercent,\r\n        uint256 _daiPercent,\r\n        uint256 _usdcPercent\r\n    ) external onlyOperator {\r\n        require(_dollarPercent.add(_daiPercent).add(_usdcPercent) == 100, \"!100%\");\r\n        contractionPercent[0] = _dollarPercent;\r\n        contractionPercent[1] = _daiPercent;\r\n        contractionPercent[2] = _usdcPercent;\r\n    }\r\n\r\n    function setDollarPriceCeiling(uint256 _dollarPriceCeiling) external onlyOperator {\r\n        require(_dollarPriceCeiling >= 950 finney && _dollarPriceCeiling <= 1050 finney, \"_dollarPriceCeiling: out of range\"); // [$0.95, $1.05]\r\n        dollarPriceCeiling = _dollarPriceCeiling;\r\n    }\r\n\r\n    function withdrawShare(uint256 _amount) external onlyOperator {\r\n        IBoardroom(boardroom).withdraw(_amount);\r\n    }\r\n\r\n    function exitBoardroom() external onlyOperator {\r\n        IBoardroom(boardroom).exit();\r\n    }\r\n\r\n    function grandFund(\r\n        address _token,\r\n        uint256 _amount,\r\n        address _to\r\n    ) external onlyOperator {\r\n        IERC20(_token).transfer(_to, _amount);\r\n    }\r\n\r\n    /* ========== VIEW FUNCTIONS ========== */\r\n\r\n    function earned() public view returns (uint256) {\r\n        return IBoardroom(boardroom).earned(address(this));\r\n    }\r\n\r\n    function stablecoinBalances()\r\n        public\r\n        view\r\n        returns (\r\n            uint256 _dollarBal,\r\n            uint256 _daiBal,\r\n            uint256 _usdcBal,\r\n            uint256 _totalBal\r\n        )\r\n    {\r\n        _dollarBal = IERC20(dollar).balanceOf(address(this));\r\n        _daiBal = IERC20(dai).balanceOf(address(this));\r\n        _usdcBal = IERC20(usdc).balanceOf(address(this));\r\n        _totalBal = _dollarBal.add(_daiBal).add(_usdcBal.mul(usdcDecimalFactor));\r\n    }\r\n\r\n    function stablecoinPercents()\r\n        public\r\n        view\r\n        returns (\r\n            uint256 _dollarPercent,\r\n            uint256 _daiPercent,\r\n            uint256 _usdcPercent\r\n        )\r\n    {\r\n        (uint256 _dollarBal, uint256 _daiBal, uint256 _usdcBal, uint256 _totalBal) = stablecoinBalances();\r\n        if (_totalBal > 0) {\r\n            _dollarPercent = _dollarBal.mul(100).div(_totalBal);\r\n            _daiPercent = _daiBal.mul(100).div(_totalBal);\r\n            _usdcPercent = _usdcBal.mul(usdcDecimalFactor).mul(100).div(_totalBal);\r\n        }\r\n    }\r\n\r\n    function getDollarPrice() public view returns (uint256 dollarPrice) {\r\n        try IOracle(dollarOracle).consult(dollar, 1e18) returns (uint256 price) {\r\n            return price;\r\n        } catch {\r\n            revert(\"CommunityFund: failed to consult dollar price from the oracle\");\r\n        }\r\n    }\r\n\r\n    /* ========== MUTATIVE FUNCTIONS ========== */\r\n\r\n    function collectShareRewards() public checkPublicAllow {\r\n        if (IShare(share).unclaimedTreasuryFund() > 0) {\r\n            IShare(share).claimRewards();\r\n        }\r\n    }\r\n\r\n    function claimAndRestake() public checkPublicAllow {\r\n        if (IBoardroom(boardroom).canClaimReward(address(this))) {\r\n            // only restake more if at this epoch we could claim pending dollar rewards\r\n            if (earned() > 0) {\r\n                IBoardroom(boardroom).claimReward();\r\n            }\r\n            uint256 _shareBal = IERC20(share).balanceOf(address(this));\r\n            if (_shareBal > 0) {\r\n                IERC20(share).safeApprove(boardroom, 0);\r\n                IERC20(share).safeApprove(boardroom, _shareBal);\r\n                IBoardroom(boardroom).stake(_shareBal);\r\n            }\r\n        }\r\n    }\r\n\r\n    function rebalance(uint8 flag) public discountCHI(flag) checkPublicAllow {\r\n        collectShareRewards();\r\n        claimAndRestake();\r\n        (uint256 _dollarBal, uint256 _daiBal, uint256 _usdcBal, uint256 _totalBal) = stablecoinBalances();\r\n        if (_totalBal > 0) {\r\n            uint256 _dollarPercent = _dollarBal.mul(100).div(_totalBal);\r\n            uint256 _daiPercent = _daiBal.mul(100).div(_totalBal);\r\n            uint256 _usdcPercent = _usdcBal.mul(usdcDecimalFactor).mul(100).div(_totalBal);\r\n            if (getDollarPrice() >= dollarPriceCeiling) {\r\n                // expansion: sell BSD\r\n                if (_dollarPercent > expansionPercent[0]) {\r\n                    uint256 _sellingBSD = _dollarBal.mul(_dollarPercent.sub(expansionPercent[0])).div(100);\r\n                    if (_daiPercent >= expansionPercent[1]) {\r\n                        // enough DAI\r\n                        if (_usdcPercent < expansionPercent[2]) {\r\n                            // short of USDC: buy USDC\r\n                            _swapToken(dollar, usdc, _sellingBSD);\r\n                        } else {\r\n                            if (_daiPercent.sub(expansionPercent[1]) <= _usdcPercent.sub(expansionPercent[2])) {\r\n                                // has more USDC than DAI: buy DAI\r\n                                _swapToken(dollar, dai, _sellingBSD);\r\n                            } else {\r\n                                // has more DAI than USDC: buy USDC\r\n                                _swapToken(dollar, usdc, _sellingBSD);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        // short of DAI\r\n                        if (_usdcPercent >= expansionPercent[2]) {\r\n                            // enough USDC: buy DAI\r\n                            _swapToken(dollar, dai, _sellingBSD);\r\n                        } else {\r\n                            // short of USDC\r\n                            uint256 _shortDaiPercent = expansionPercent[1].sub(_daiPercent);\r\n                            uint256 _shortUsdcPercent = expansionPercent[2].sub(_usdcPercent);\r\n                            uint256 _sellingBSDToDai = _sellingBSD.mul(_shortDaiPercent).div(_shortDaiPercent.add(_shortUsdcPercent));\r\n                            _swapToken(dollar, dai, _sellingBSDToDai);\r\n                            _swapToken(dollar, usdc, _sellingBSD.sub(_sellingBSDToDai));\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                // contraction: buy BSD\r\n                if (_daiPercent >= contractionPercent[1]) {\r\n                    // enough DAI\r\n                    if (_usdcPercent <= contractionPercent[2]) {\r\n                        // short of USDC: sell DAI\r\n                        uint256 _sellingDAI = _daiBal.mul(_daiPercent.sub(contractionPercent[1])).div(100);\r\n                        _swapToken(dai, dollar, _sellingDAI);\r\n                    } else {\r\n                        if (_daiPercent.sub(contractionPercent[1]) > _usdcPercent.sub(contractionPercent[2])) {\r\n                            // has more DAI than USDC: sell DAI\r\n                            uint256 _sellingDAI = _daiBal.mul(_daiPercent.sub(contractionPercent[1])).div(100);\r\n                            _swapToken(dai, dollar, _sellingDAI);\r\n                        } else {\r\n                            // has more USDC than DAI: sell USDC\r\n                            uint256 _sellingUSDC = _usdcBal.mul(_usdcPercent.sub(contractionPercent[2])).div(100);\r\n                            _swapToken(usdc, dollar, _sellingUSDC);\r\n                        }\r\n                    }\r\n                } else {\r\n                    // short of DAI\r\n                    if (_usdcPercent > contractionPercent[2]) {\r\n                        // enough USDC: sell USDC\r\n                        uint256 _sellingUSDC = _usdcBal.mul(_usdcPercent.sub(contractionPercent[2])).div(100);\r\n                        _swapToken(usdc, dollar, _sellingUSDC);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function _bpoolSwap(\r\n        address _pool,\r\n        address _input,\r\n        address _output,\r\n        uint256 _amount\r\n    ) internal {\r\n        IERC20(_input).safeApprove(_pool, 0);\r\n        IERC20(_input).safeApprove(_pool, _amount);\r\n        IBPool(_pool).swapExactAmountIn(_input, _amount, _output, 1, type(uint256).max);\r\n        emit SwapToken(_input, _output, _amount);\r\n    }\r\n\r\n    function _swapToken(\r\n        address _inputToken,\r\n        address _outputToken,\r\n        uint256 _amount\r\n    ) internal {\r\n        if (_amount == 0) return;\r\n        address _pool;\r\n        if (_outputToken == dollar) {\r\n            // buying BSD\r\n            _pool = vliquidPools[_inputToken];\r\n        } else if (_inputToken == dollar) {\r\n            // selling BSD\r\n            _pool = vliquidPools[_outputToken];\r\n        }\r\n        require(_pool != address(0), \"!pool\");\r\n        _bpoolSwap(_pool, _inputToken, _outputToken, _amount);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"at\",\"type\":\"uint256\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SwapToken\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"boardroom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bond\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chi\",\"outputs\":[{\"internalType\":\"contract IFreeFromUpTo\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAndRestake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectShareRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contractionPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dollar\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dollarOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dollarPriceCeiling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exitBoardroom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"expansionPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDollarPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dollarPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"grandFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dollar\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bond\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_share\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dai\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_boardroom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dollarOracle\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"flag\",\"type\":\"uint8\"}],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dollarPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_daiPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_usdcPercent\",\"type\":\"uint256\"}],\"name\":\"setContractionPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dollarPriceCeiling\",\"type\":\"uint256\"}],\"name\":\"setDollarPriceCeiling\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dollarPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_daiPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_usdcPercent\",\"type\":\"uint256\"}],\"name\":\"setExpansionPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_publicAllowed\",\"type\":\"bool\"}],\"name\":\"setPublicAllowed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"share\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stablecoinBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_dollarBal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_daiBal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_usdcBal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalBal\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stablecoinPercents\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_dollarPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_daiPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_usdcPercent\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vliquidPools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CommunityFund","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://532423fece3b8a349a6e3c7dd2fcbbadeb86bfffba52b80dadd64b28a1f44842"}]}