{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"contracts/FlashSwapAction.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.7.3;\\n\\nimport { IFlashSwapResolver } from \\\"./interfaces/IFlashSwapResolver.sol\\\";\\nimport { IUniswapV2Pair } from '@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol';\\n\\ncontract FlashSwapAction is IFlashSwapResolver{\\n\\n    function resolveUniswapV2Call(\\n        address sender,\\n        address tokenRequested,\\n        address tokenToReturn,\\n        uint256 amountRecived,\\n        uint256 amountToReturn,\\n        bytes calldata _data\\n        ) external payable override{\\n\\n        ( \\n            address target, \\n            bytes memory datacall \\n        ) = abi.decode(_data, (\\n                address, bytes\\n            )\\n        );\\n\\n        execute(target, datacall);\\n\\n    }\\n\\n    function execute(\\n        address _target, bytes memory _data\\n        ) \\n        internal\\n        returns (bytes32 response)\\n        {\\n\\n        require(_target != address(0));\\n\\n        // dynamic call passing ETH value, and where this would be msg.sender\\n        assembly {\\n\\n            let succeeded := call(\\n                sub(gas(), 5000),  // we are passing the remaining gas except for 5000\\n                _target, // the target contract\\n                callvalue(), // ETH value sent to this function\\n                add(_data, 0x20), // pointer to data (the first 0x20 (32) bytes indicates de length)\\n                mload(_data), // size of data (the first 0x20 (32) bytes indicates de length)\\n                0, // pointer to store returned data\\n                32) // size of the memory where will be stored the data (defined 32 bytes fixed)\\n            response := mload(0)      // load call output\\n            switch iszero(succeeded)\\n            case 1 {\\n                // throw if delegatecall failed\\n                let ptr := mload(0x40)\\n                let size := returndatasize()\\n                returndatacopy(ptr, 0, size)\\n                revert(ptr, size)\\n            }\\n        }\\n\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/interfaces/IFlashSwapResolver.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.0 <0.8.0;\\n\\ninterface IFlashSwapResolver{\\n\\n    /**\\n    @param sender The address who calls IUniswapV2Pair.swap.\\n    @param tokenRequested The address of the token that was requested to IUniswapV2Pair.swap.\\n    @param tokenToReturn The address of the token that should be returned to IUniswapV2Pair(msg.sender).\\n    @param amountRecived The ammount recived of tokenRequested.\\n    @param amountToReturn The ammount recived of tokenRequested.\\n    @param _data dataForResolveUniswapV2Call: check FlashSwapProxy.uniswapV2Call documentation\\n     */\\n    function resolveUniswapV2Call(\\n            address sender,\\n            address tokenRequested,\\n            address tokenToReturn,\\n            uint256 amountRecived,\\n            uint256 amountToReturn,\\n            bytes calldata _data\\n            ) external payable;\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenRequested\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenToReturn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountRecived\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountToReturn\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"resolveUniswapV2Call\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"FlashSwapAction","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":""}]}