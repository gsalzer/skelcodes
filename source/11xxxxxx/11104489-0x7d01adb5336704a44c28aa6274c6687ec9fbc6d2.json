{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts\\sakeswap\\interfaces\\ISakeSwapERC20.sol\r\n\r\n// SPDX-License-Identifier: GPL-3.0\r\npragma solidity >=0.5.0;\r\n\r\ninterface ISakeSwapERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n}\r\n\r\n// File: contracts\\tools\\SakeSwapMigrator.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\ninterface IRouter {\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n}\r\n\r\ninterface IFactory {\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\n\r\n// Migrate from SUSHISWAP/UNISWAP to SAKESWAP\r\ncontract SakeSwapMigrator {\r\n    IFactory public uniFactory = IFactory(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f);\r\n    IRouter public uniRouter = IRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    IFactory public sushiFactory = IFactory(0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac);\r\n    IRouter public sushiRouter = IRouter(0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F);\r\n    IRouter public sakeRouter = IRouter(0x9C578b573EdE001b95d51a55A3FAfb45f5608b1f);\r\n\r\n    // constructor(\r\n    //     address _uniFactory, \r\n    //     address _uniRouter, \r\n    //     address _sushiFactory, \r\n    //     address _sushiRouter, \r\n    //     address _sakeRouter\r\n    // ) public {\r\n    //     uniFactory = IFactory(_uniFactory);\r\n    //     uniRouter = IRouter(_uniRouter);\r\n    //     sushiFactory = IFactory(_sushiFactory);\r\n    //     sushiRouter = IRouter(_sushiRouter);\r\n    //     sakeRouter = IRouter(_sakeRouter);\r\n    // }\r\n\r\n    function migrateUniswapWithPermit(\r\n        address token0,\r\n        address token1,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) public {\r\n        address pair = uniFactory.getPair(token0, token1);\r\n\r\n        // Permit\r\n        ISakeSwapERC20(pair).permit(\r\n            msg.sender,\r\n            address(this),\r\n            value,\r\n            deadline,\r\n            v,\r\n            r,\r\n            s\r\n        );\r\n\r\n        _migrate(uniRouter, ISakeSwapERC20(pair), token0, token1, value);\r\n    }\r\n\r\n    function migrateSushiSwapWithPermit(\r\n        address token0,\r\n        address token1,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) public {\r\n        address pair = sushiFactory.getPair(token0, token1);\r\n\r\n        // Permit\r\n        ISakeSwapERC20(pair).permit(\r\n            msg.sender,\r\n            address(this),\r\n            value,\r\n            deadline,\r\n            v,\r\n            r,\r\n            s\r\n        );\r\n\r\n        _migrate(sushiRouter, ISakeSwapERC20(pair), token0, token1, value);\r\n    }\r\n\r\n    function migrateUniswap(address token0, address token1, uint256 value) public {\r\n        address pair = uniFactory.getPair(token0, token1);\r\n        _migrate(uniRouter, ISakeSwapERC20(pair), token0, token1, value);\r\n    }\r\n\r\n    function migrateSushiSwap(address token0, address token1, uint256 value) public {\r\n        address pair = sushiFactory.getPair(token0, token1);\r\n        _migrate(sushiRouter, ISakeSwapERC20(pair), token0, token1, value);\r\n    }\r\n\r\n    function _migrate(IRouter router, ISakeSwapERC20 pair, address token0, address token1, uint256 value) internal {\r\n        // Removes liquidity\r\n        pair.transferFrom(msg.sender, address(this), value);\r\n        pair.approve(address(router), value);\r\n        router.removeLiquidity(\r\n            token0,\r\n            token1,\r\n            value,\r\n            0,\r\n            0,\r\n            address(this),\r\n            now + 60\r\n        );\r\n\r\n        // Adds liquidity to SakeSwap\r\n        uint256 bal0 = ISakeSwapERC20(token0).balanceOf(address(this));\r\n        uint256 bal1 = ISakeSwapERC20(token1).balanceOf(address(this));\r\n        ISakeSwapERC20(token0).approve(address(sakeRouter), bal0);\r\n        ISakeSwapERC20(token1).approve(address(sakeRouter), bal1);\r\n        sakeRouter.addLiquidity(\r\n            token0,\r\n            token1,\r\n            bal0,\r\n            bal1,\r\n            0,\r\n            0,\r\n            msg.sender,\r\n            now + 60\r\n        );\r\n\r\n        // Refund sender any remaining tokens\r\n        uint256 remainBal0 = ISakeSwapERC20(token0).balanceOf(address(this));\r\n        uint256 remainBal1 = ISakeSwapERC20(token1).balanceOf(address(this));\r\n        if (remainBal0 > 0) ISakeSwapERC20(token0).transfer(msg.sender, remainBal0);\r\n        if (remainBal1 > 0) ISakeSwapERC20(token1).transfer(msg.sender, remainBal1);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"migrateSushiSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"migrateSushiSwapWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"migrateUniswap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"migrateUniswapWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sakeRouter\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiFactory\",\"outputs\":[{\"internalType\":\"contract IFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiRouter\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniFactory\",\"outputs\":[{\"internalType\":\"contract IFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniRouter\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"SakeSwapMigrator","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://cd7c2cfcb3a8977b965af815172bf60234aa3f2b805f3ff493872851581e1793"}]}