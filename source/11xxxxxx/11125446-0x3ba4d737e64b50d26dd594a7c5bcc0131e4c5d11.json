{"status":"1","message":"OK","result":[{"SourceCode":"{\"AllVerifiers.sol\":{\"content\":\"/*\\n  Copyright 2019,2020 StarkWare Industries Ltd.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\").\\n  You may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n  https://www.starkware.co/open-source-license/\\n\\n  Unless required by applicable law or agreed to in writing,\\n  software distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions\\n  and limitations under the License.\\n*/\\npragma solidity ^0.5.2;\\n\\nimport \\\"ApprovalChain.sol\\\";\\nimport \\\"AvailabilityVerifiers.sol\\\";\\nimport \\\"Freezable.sol\\\";\\nimport \\\"MainGovernance.sol\\\";\\nimport \\\"Verifiers.sol\\\";\\nimport \\\"SubContractor.sol\\\";\\n\\ncontract AllVerifiers is\\n    SubContractor,\\n    MainGovernance,\\n    Freezable,\\n    ApprovalChain,\\n    AvailabilityVerifiers,\\n    Verifiers\\n{\\n    function initialize(bytes calldata /* data */)\\n        external {\\n        revert(\\\"NOT_IMPLEMENTED\\\");\\n    }\\n\\n    function initializerSize()\\n        external view\\n        returns(uint256){\\n        return 0;\\n    }\\n\\n    function identify()\\n        external pure\\n        returns(string memory){\\n        return \\\"StarkWare_AllVerifiers_2020_1\\\";\\n    }\\n}\\n\"},\"ApprovalChain.sol\":{\"content\":\"/*\\n  Copyright 2019,2020 StarkWare Industries Ltd.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\").\\n  You may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n  https://www.starkware.co/open-source-license/\\n\\n  Unless required by applicable law or agreed to in writing,\\n  software distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions\\n  and limitations under the License.\\n*/\\npragma solidity ^0.5.2;\\n\\nimport \\\"MainStorage.sol\\\";\\nimport \\\"IFactRegistry.sol\\\";\\nimport \\\"IQueryableFactRegistry.sol\\\";\\nimport \\\"Identity.sol\\\";\\nimport \\\"MApprovalChain.sol\\\";\\nimport \\\"MFreezable.sol\\\";\\nimport \\\"MGovernance.sol\\\";\\nimport \\\"Common.sol\\\";\\n\\n/*\\n  Implements a data structure that supports instant registration\\n  and slow time-locked removal of entries.\\n*/\\ncontract ApprovalChain is MainStorage, MApprovalChain, MGovernance, MFreezable {\\n\\n    using Addresses for address;\\n\\n    function addEntry(\\n        StarkExTypes.ApprovalChainData storage chain,\\n        address entry, uint256 maxLength, string memory identifier)\\n        internal\\n        onlyGovernance()\\n        notFrozen()\\n    {\\n        address[] storage list = chain.list;\\n        require(entry.isContract(), \\\"ADDRESS_NOT_CONTRACT\\\");\\n        bytes32 hash_real = keccak256(abi.encodePacked(Identity(entry).identify()));\\n        bytes32 hash_identifier = keccak256(abi.encodePacked(identifier));\\n        require(hash_real == hash_identifier, \\\"UNEXPECTED_CONTRACT_IDENTIFIER\\\");\\n        require(list.length \\u003c maxLength, \\\"CHAIN_AT_MAX_CAPACITY\\\");\\n        require(findEntry(list, entry) == ENTRY_NOT_FOUND, \\\"ENTRY_ALREADY_EXISTS\\\");\\n\\n        // Verifier must have at least one fact registered before adding to chain,\\n        // unless it\\u0027s the first verifier in the chain.\\n        require(\\n            list.length == 0 || IQueryableFactRegistry(entry).hasRegisteredFact(),\\n            \\\"ENTRY_NOT_ENABLED\\\");\\n        chain.list.push(entry);\\n        chain.unlockedForRemovalTime[entry] = 0;\\n    }\\n\\n    function findEntry(address[] storage list, address entry)\\n        internal view returns (uint256)\\n    {\\n        uint256 n_entries = list.length;\\n        for (uint256 i = 0; i \\u003c n_entries; i++) {\\n            if (list[i] == entry) {\\n                return i;\\n            }\\n        }\\n\\n        return ENTRY_NOT_FOUND;\\n    }\\n\\n    function safeFindEntry(address[] storage list, address entry)\\n        internal view returns (uint256 idx)\\n    {\\n        idx = findEntry(list, entry);\\n\\n        require(idx != ENTRY_NOT_FOUND, \\\"ENTRY_DOES_NOT_EXIST\\\");\\n    }\\n\\n    function announceRemovalIntent(\\n        StarkExTypes.ApprovalChainData storage chain, address entry, uint256 removalDelay)\\n        internal\\n        onlyGovernance()\\n        notFrozen()\\n    {\\n        safeFindEntry(chain.list, entry);\\n        require(now + removalDelay \\u003e now, \\\"INVALID_REMOVAL_DELAY\\\"); // NOLINT: timestamp.\\n        // solium-disable-next-line security/no-block-members\\n        chain.unlockedForRemovalTime[entry] = now + removalDelay;\\n    }\\n\\n    function removeEntry(StarkExTypes.ApprovalChainData storage chain, address entry)\\n        internal\\n        onlyGovernance()\\n        notFrozen()\\n    {\\n        address[] storage list = chain.list;\\n        // Make sure entry exists.\\n        uint256 idx = safeFindEntry(list, entry);\\n        uint256 unlockedForRemovalTime = chain.unlockedForRemovalTime[entry];\\n\\n        // solium-disable-next-line security/no-block-members\\n        require(unlockedForRemovalTime \\u003e 0, \\\"REMOVAL_NOT_ANNOUNCED\\\");\\n        // solium-disable-next-line security/no-block-members\\n        require(now \\u003e= unlockedForRemovalTime, \\\"REMOVAL_NOT_ENABLED_YET\\\"); // NOLINT: timestamp.\\n\\n        uint256 n_entries = list.length;\\n\\n        // Removal of last entry is forbidden.\\n        require(n_entries \\u003e 1, \\\"LAST_ENTRY_MAY_NOT_BE_REMOVED\\\");\\n\\n        if (idx != n_entries - 1) {\\n            list[idx] = list[n_entries - 1];\\n        }\\n        list.pop();\\n        delete chain.unlockedForRemovalTime[entry];\\n    }\\n}\\n\"},\"AvailabilityVerifiers.sol\":{\"content\":\"/*\\n  Copyright 2019,2020 StarkWare Industries Ltd.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\").\\n  You may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n  https://www.starkware.co/open-source-license/\\n\\n  Unless required by applicable law or agreed to in writing,\\n  software distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions\\n  and limitations under the License.\\n*/\\npragma solidity ^0.5.2;\\n\\nimport \\\"MApprovalChain.sol\\\";\\nimport \\\"LibConstants.sol\\\";\\nimport \\\"MainStorage.sol\\\";\\n\\n/**\\n  A :sol:mod:`Committee` contract is a contract that the exchange service sends committee member\\n  signatures to attesting that they have a copy of the data over which a new Merkel root is to be\\n  accepted as the new state root. In addition, the exchange contract can call an availability\\n  verifier to check if such signatures were indeed provided by a sufficient number of committee\\n  members as hard coded in the :sol:mod:`Committee` contract for a given state transition\\n  (as reflected by the old and new vault and order roots).\\n\\n  The exchange contract will normally query only one :sol:mod:`Committee` contract for data\\n  availability checks. However, in the event that the committee needs to be updated, additional\\n  availability verifiers may be registered with the exchange contract by the\\n  contract :sol:mod:`MainGovernance`. Such new availability verifiers are then also be required to\\n  attest to the data availability for state transitions and only if all the availability verifiers\\n  attest to it, the state transition is accepted.\\n\\n  Removal of availability verifiers is also the responsibility of the :sol:mod:`MainGovernance`.\\n  The removal process is more sensitive than availability verifier registration as it may affect the\\n  soundness of the system. Hence, this is performed in two steps:\\n\\n  1. The :sol:mod:`MainGovernance` first announces the intent to remove an availability verifier by calling :sol:func:`announceAvailabilityVerifierRemovalIntent`\\n  2. After the expiration of a `VERIFIER_REMOVAL_DELAY` time lock, actual removal may be performed by calling :sol:func:`removeAvailabilityVerifier`\\n\\n  The removal delay ensures that a user concerned about the soundness of the system has ample time\\n  to leave the exchange.\\n*/\\ncontract AvailabilityVerifiers is MainStorage, LibConstants, MApprovalChain {\\n    function getRegisteredAvailabilityVerifiers()\\n        external view\\n        returns (address[] memory _verifers)\\n    {\\n        return availabilityVerifiersChain.list;\\n    }\\n\\n    function isAvailabilityVerifier(address verifierAddress)\\n        external view\\n        returns (bool)\\n    {\\n        return findEntry(availabilityVerifiersChain.list, verifierAddress) != ENTRY_NOT_FOUND;\\n    }\\n\\n    function registerAvailabilityVerifier(address verifier, string calldata identifier)\\n        external\\n    {\\n        addEntry(availabilityVerifiersChain, verifier, MAX_VERIFIER_COUNT, identifier);\\n    }\\n\\n    function announceAvailabilityVerifierRemovalIntent(address verifier)\\n        external\\n    {\\n        announceRemovalIntent(availabilityVerifiersChain, verifier, VERIFIER_REMOVAL_DELAY);\\n    }\\n\\n    function removeAvailabilityVerifier(address verifier)\\n        external\\n    {\\n        removeEntry(availabilityVerifiersChain, verifier);\\n    }\\n}\\n\"},\"Common.sol\":{\"content\":\"/*\\n  Copyright 2019,2020 StarkWare Industries Ltd.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\").\\n  You may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n  https://www.starkware.co/open-source-license/\\n\\n  Unless required by applicable law or agreed to in writing,\\n  software distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions\\n  and limitations under the License.\\n*/\\npragma solidity ^0.5.2;\\n\\n/*\\n  Common Utility librarries.\\n  I. Addresses (extending address).\\n*/\\nlibrary Addresses {\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size \\u003e 0;\\n    }\\n\\n    function performEthTransfer(address recipient, uint256 amount) internal {\\n        // solium-disable-next-line security/no-call-value\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\"); // NOLINT: low-level-calls.\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /*\\n      Safe wrapper around ERC20/ERC721 calls.\\n      This is required because many deployed ERC20 contracts don\\u0027t return a value.\\n      See https://github.com/ethereum/solidity/issues/4116.\\n    */\\n    function safeTokenContractCall(address tokenAddress, bytes memory callData) internal {\\n        require(isContract(tokenAddress), \\\"BAD_TOKEN_ADDRESS\\\");\\n        // solium-disable-next-line security/no-low-level-calls\\n        // NOLINTNEXTLINE: low-level-calls.\\n        (bool success, bytes memory returndata) = address(tokenAddress).call(callData);\\n        require(success, string(returndata));\\n\\n        if (returndata.length \\u003e 0) {\\n            require(abi.decode(returndata, (bool)), \\\"TOKEN_OPERATION_FAILED\\\");\\n        }\\n    }\\n}\\n\\n/*\\n  II. StarkExTypes - Common data types.\\n*/\\nlibrary StarkExTypes {\\n\\n    // Structure representing a list of verifiers (validity/availability).\\n    // A statement is valid only if all the verifiers in the list agree on it.\\n    // Adding a verifier to the list is immediate - this is used for fast resolution of\\n    // any soundness issues.\\n    // Removing from the list is time-locked, to ensure that any user of the system\\n    // not content with the announced removal has ample time to leave the system before it is\\n    // removed.\\n    struct ApprovalChainData {\\n        address[] list;\\n        // Represents the time after which the verifier with the given address can be removed.\\n        // Removal of the verifier with address A is allowed only in the case the value\\n        // of unlockedForRemovalTime[A] != 0 and unlockedForRemovalTime[A] \\u003c (current time).\\n        mapping (address =\\u003e uint256) unlockedForRemovalTime;\\n    }\\n\\n}\\n\"},\"Freezable.sol\":{\"content\":\"/*\\n  Copyright 2019,2020 StarkWare Industries Ltd.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\").\\n  You may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n  https://www.starkware.co/open-source-license/\\n\\n  Unless required by applicable law or agreed to in writing,\\n  software distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions\\n  and limitations under the License.\\n*/\\npragma solidity ^0.5.2;\\n\\nimport \\\"LibConstants.sol\\\";\\nimport \\\"MFreezable.sol\\\";\\nimport \\\"MGovernance.sol\\\";\\nimport \\\"MainStorage.sol\\\";\\n\\n/*\\n  Implements MFreezable.\\n*/\\ncontract Freezable is MainStorage, LibConstants, MGovernance, MFreezable {\\n    event LogFrozen();\\n    event LogUnFrozen();\\n\\n    modifier notFrozen()\\n    {\\n        require(!stateFrozen, \\\"STATE_IS_FROZEN\\\");\\n        _;\\n    }\\n\\n    modifier onlyFrozen()\\n    {\\n        require(stateFrozen, \\\"STATE_NOT_FROZEN\\\");\\n        _;\\n    }\\n\\n    function isFrozen()\\n        external view\\n        returns (bool frozen) {\\n        frozen = stateFrozen;\\n    }\\n\\n    function freeze()\\n        internal\\n        notFrozen()\\n    {\\n        // solium-disable-next-line security/no-block-members\\n        unFreezeTime = now + UNFREEZE_DELAY;\\n\\n        // Update state.\\n        stateFrozen = true;\\n\\n        // Log event.\\n        emit LogFrozen();\\n    }\\n\\n    function unFreeze()\\n        external\\n        onlyFrozen()\\n        onlyGovernance()\\n    {\\n        // solium-disable-next-line security/no-block-members\\n        require(now \\u003e= unFreezeTime, \\\"UNFREEZE_NOT_ALLOWED_YET\\\");  // NOLINT: timestamp.\\n\\n        // Update state.\\n        stateFrozen = false;\\n\\n        // Increment roots to invalidate them, w/o losing information.\\n        vaultRoot += 1;\\n        orderRoot += 1;\\n\\n        // Log event.\\n        emit LogUnFrozen();\\n    }\\n\\n}\\n\"},\"Governance.sol\":{\"content\":\"/*\\n  Copyright 2019,2020 StarkWare Industries Ltd.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\").\\n  You may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n  https://www.starkware.co/open-source-license/\\n\\n  Unless required by applicable law or agreed to in writing,\\n  software distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions\\n  and limitations under the License.\\n*/\\npragma solidity ^0.5.2;\\n\\nimport \\\"GovernanceStorage.sol\\\";\\nimport \\\"MGovernance.sol\\\";\\n\\n/*\\n  Implements Generic Governance, applicable for both proxy and main contract, and possibly others.\\n  Notes:\\n  1. This class is virtual (getGovernanceTag is not implemented).\\n  2. The use of the same function names by both the Proxy and a delegated implementation\\n     is not possible since calling the implementation functions is done via the default function\\n     of the Proxy. For this reason, for example, the implementation of MainContract (MainGovernance)\\n     exposes mainIsGovernor, which calls the internal isGovernor method.\\n*/\\ncontract Governance is GovernanceStorage, MGovernance {\\n    event LogNominatedGovernor(address nominatedGovernor);\\n    event LogNewGovernorAccepted(address acceptedGovernor);\\n    event LogRemovedGovernor(address removedGovernor);\\n    event LogNominationCancelled();\\n\\n    address internal constant ZERO_ADDRESS = address(0x0);\\n\\n    /*\\n      Returns a string which uniquely identifies the type of the governance mechanism.\\n    */\\n    function getGovernanceTag()\\n        internal\\n        view\\n        returns (string memory);\\n\\n    /*\\n      Returns the GovernanceInfoStruct associated with the governance tag.\\n    */\\n    function contractGovernanceInfo()\\n        internal\\n        view\\n        returns (GovernanceInfoStruct storage) {\\n        string memory tag = getGovernanceTag();\\n        GovernanceInfoStruct storage gub = governanceInfo[tag];\\n        require(gub.initialized, \\\"NOT_INITIALIZED\\\");\\n        return gub;\\n    }\\n\\n    /*\\n      Current code intentionally prevents governance re-initialization.\\n      This may be a problem in an upgrade situation, in a case that the upgrade-to implementation\\n      performs an initialization (for real) and within that calls initGovernance().\\n\\n      Possible workarounds:\\n      1. Clearing the governance info altogether by changing the MAIN_GOVERNANCE_INFO_TAG.\\n         This will remove existing main governance information.\\n      2. Modify the require part in this function, so that it will exit quietly\\n         when trying to re-initialize (uncomment the lines below).\\n    */\\n    function initGovernance()\\n        internal\\n    {\\n        string memory tag = getGovernanceTag();\\n        GovernanceInfoStruct storage gub = governanceInfo[tag];\\n        require(!gub.initialized, \\\"ALREADY_INITIALIZED\\\");\\n        gub.initialized = true;  // to ensure addGovernor() won\\u0027t fail.\\n        // Add the initial governer.\\n        addGovernor(msg.sender);\\n    }\\n\\n    modifier onlyGovernance()\\n    {\\n        require(isGovernor(msg.sender), \\\"ONLY_GOVERNANCE\\\");\\n        _;\\n    }\\n\\n    function isGovernor(address testGovernor)\\n        internal view\\n        returns (bool addressIsGovernor){\\n        GovernanceInfoStruct storage gub = contractGovernanceInfo();\\n        addressIsGovernor = gub.effectiveGovernors[testGovernor];\\n    }\\n\\n    /*\\n      Cancels the nomination of a governor candidate.\\n    */\\n    function cancelNomination() internal onlyGovernance() {\\n        GovernanceInfoStruct storage gub = contractGovernanceInfo();\\n        gub.candidateGovernor = ZERO_ADDRESS;\\n        emit LogNominationCancelled();\\n    }\\n\\n    function nominateNewGovernor(address newGovernor) internal onlyGovernance() {\\n        GovernanceInfoStruct storage gub = contractGovernanceInfo();\\n        require(!isGovernor(newGovernor), \\\"ALREADY_GOVERNOR\\\");\\n        gub.candidateGovernor = newGovernor;\\n        emit LogNominatedGovernor(newGovernor);\\n    }\\n\\n    /*\\n      The addGovernor is called in two cases:\\n      1. by acceptGovernance when a new governor accepts its role.\\n      2. by initGovernance to add the initial governor.\\n      The difference is that the init path skips the nominate step\\n      that would fail because of the onlyGovernance modifier.\\n    */\\n    function addGovernor(address newGovernor) private {\\n        require(!isGovernor(newGovernor), \\\"ALREADY_GOVERNOR\\\");\\n        GovernanceInfoStruct storage gub = contractGovernanceInfo();\\n        gub.effectiveGovernors[newGovernor] = true;\\n    }\\n\\n    function acceptGovernance()\\n        internal\\n    {\\n        // The new governor was proposed as a candidate by the current governor.\\n        GovernanceInfoStruct storage gub = contractGovernanceInfo();\\n        require(msg.sender == gub.candidateGovernor, \\\"ONLY_CANDIDATE_GOVERNOR\\\");\\n\\n        // Update state.\\n        addGovernor(gub.candidateGovernor);\\n        gub.candidateGovernor = ZERO_ADDRESS;\\n\\n        // Send a notification about the change of governor.\\n        emit LogNewGovernorAccepted(msg.sender);\\n    }\\n\\n    /*\\n      Remove a governor from office.\\n    */\\n    function removeGovernor(address governorForRemoval) internal onlyGovernance() {\\n        require(msg.sender != governorForRemoval, \\\"GOVERNOR_SELF_REMOVE\\\");\\n        GovernanceInfoStruct storage gub = contractGovernanceInfo();\\n        require (isGovernor(governorForRemoval), \\\"NOT_GOVERNOR\\\");\\n        gub.effectiveGovernors[governorForRemoval] = false;\\n        emit LogRemovedGovernor(governorForRemoval);\\n    }\\n}\\n\"},\"GovernanceStorage.sol\":{\"content\":\"/*\\n  Copyright 2019,2020 StarkWare Industries Ltd.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\").\\n  You may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n  https://www.starkware.co/open-source-license/\\n\\n  Unless required by applicable law or agreed to in writing,\\n  software distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions\\n  and limitations under the License.\\n*/\\npragma solidity ^0.5.2;\\n\\n/*\\n  Holds the governance slots for ALL entities, including proxy and the main contract.\\n*/\\ncontract GovernanceStorage {\\n\\n    struct GovernanceInfoStruct {\\n        mapping (address =\\u003e bool) effectiveGovernors;\\n        address candidateGovernor;\\n        bool initialized;\\n    }\\n\\n    // A map from a Governor tag to its own GovernanceInfoStruct.\\n    mapping (string =\\u003e GovernanceInfoStruct) internal governanceInfo;\\n}\\n\"},\"Identity.sol\":{\"content\":\"/*\\n  Copyright 2019,2020 StarkWare Industries Ltd.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\").\\n  You may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n  https://www.starkware.co/open-source-license/\\n\\n  Unless required by applicable law or agreed to in writing,\\n  software distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions\\n  and limitations under the License.\\n*/\\npragma solidity ^0.5.2;\\n\\ncontract Identity {\\n\\n    /*\\n      Allows a caller, typically another contract,\\n      to ensure that the provided address is of the expected type and version.\\n    */\\n    function identify()\\n        external pure\\n        returns(string memory);\\n}\\n\"},\"IFactRegistry.sol\":{\"content\":\"/*\\n  Copyright 2019,2020 StarkWare Industries Ltd.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\").\\n  You may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n  https://www.starkware.co/open-source-license/\\n\\n  Unless required by applicable law or agreed to in writing,\\n  software distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions\\n  and limitations under the License.\\n*/\\npragma solidity ^0.5.2;\\n\\n/*\\n  The Fact Registry design pattern is a way to separate cryptographic verification from the\\n  business logic of the contract flow.\\n\\n  A fact registry holds a hash table of verified \\\"facts\\\" which are represented by a hash of claims\\n  that the registry hash check and found valid. This table may be queried by accessing the\\n  isValid() function of the registry with a given hash.\\n\\n  In addition, each fact registry exposes a registry specific function for submitting new claims\\n  together with their proofs. The information submitted varies from one registry to the other\\n  depending of the type of fact requiring verification.\\n\\n  For further reading on the Fact Registry design pattern see this\\n  `StarkWare blog post \\u003chttps://medium.com/starkware/the-fact-registry-a64aafb598b6\\u003e`_.\\n*/\\ncontract IFactRegistry {\\n    /*\\n      Returns true if the given fact was previously registered in the contract.\\n    */\\n    function isValid(bytes32 fact)\\n        external view\\n        returns(bool);\\n}\\n\"},\"IQueryableFactRegistry.sol\":{\"content\":\"/*\\n  Copyright 2019,2020 StarkWare Industries Ltd.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\").\\n  You may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n  https://www.starkware.co/open-source-license/\\n\\n  Unless required by applicable law or agreed to in writing,\\n  software distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions\\n  and limitations under the License.\\n*/\\npragma solidity ^0.5.2;\\n\\nimport \\\"IFactRegistry.sol\\\";\\n\\n/*\\n  Extends the IFactRegistry interface with a query method that indicates\\n  whether the fact registry has successfully registered any fact or is still empty of such facts.\\n*/\\ncontract IQueryableFactRegistry is IFactRegistry {\\n\\n    /*\\n      Returns true if at least one fact has been registered.\\n    */\\n    function hasRegisteredFact()\\n        external view\\n        returns(bool);\\n\\n}\\n\"},\"LibConstants.sol\":{\"content\":\"/*\\n  Copyright 2019,2020 StarkWare Industries Ltd.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\").\\n  You may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n  https://www.starkware.co/open-source-license/\\n\\n  Unless required by applicable law or agreed to in writing,\\n  software distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions\\n  and limitations under the License.\\n*/\\npragma solidity ^0.5.2;\\n\\ncontract LibConstants {\\n    // Durations for time locked mechanisms (in seconds).\\n    // Note that it is known that miners can manipulate block timestamps\\n    // up to a deviation of a few seconds.\\n    // This mechanism should not be used for fine grained timing.\\n\\n    // The time required to cancel a deposit, in the case the operator does not move the funds\\n    // to the off-chain storage.\\n    uint256 public constant DEPOSIT_CANCEL_DELAY = 1 days;\\n\\n    // The time required to freeze the exchange, in the case the operator does not execute a\\n    // requested full withdrawal.\\n    uint256 public constant FREEZE_GRACE_PERIOD = 7 days;\\n\\n    // The time after which the exchange may be unfrozen after it froze. This should be enough time\\n    // for users to perform escape hatches to get back their funds.\\n    uint256 public constant UNFREEZE_DELAY = 365 days;\\n\\n    // Maximal number of verifiers which may co-exist.\\n    uint256 public constant MAX_VERIFIER_COUNT = uint256(64);\\n\\n    // The time required to remove a verifier in case of a verifier upgrade.\\n    uint256 public constant VERIFIER_REMOVAL_DELAY = FREEZE_GRACE_PERIOD + (21 days);\\n\\n    uint256 constant MAX_VAULT_ID = 2**31 - 1;\\n    uint256 constant MAX_QUANTUM = 2**128 - 1;\\n\\n    address constant ZERO_ADDRESS = address(0x0);\\n\\n    uint256 constant K_MODULUS =\\n    0x800000000000011000000000000000000000000000000000000000000000001;\\n    uint256 constant K_BETA =\\n    0x6f21413efbe40de150e596d72f7a8c5609ad26c15c915c1f4cdfcb99cee9e89;\\n\\n    uint256 constant EXPIRATION_TIMESTAMP_BITS = 22;\\n\\n    uint256 internal constant MASK_250 =\\n    0x03FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n    uint256 internal constant MASK_240 =\\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n    uint256 internal constant MINTABLE_ASSET_ID_FLAG = 1\\u003c\\u003c250;\\n}\\n\"},\"MainGovernance.sol\":{\"content\":\"/*\\n  Copyright 2019,2020 StarkWare Industries Ltd.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\").\\n  You may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n  https://www.starkware.co/open-source-license/\\n\\n  Unless required by applicable law or agreed to in writing,\\n  software distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions\\n  and limitations under the License.\\n*/\\npragma solidity ^0.5.2;\\n\\nimport \\\"Governance.sol\\\";\\n\\n/**\\n  The StarkEx contract is governed by one or more Governors of which the initial one is the\\n  deployer of the contract.\\n\\n  A governor has the sole authority to perform the following operations:\\n\\n  1. Nominate additional governors (:sol:func:`mainNominateNewGovernor`)\\n  2. Remove other governors (:sol:func:`mainRemoveGovernor`)\\n  3. Add new :sol:mod:`Verifiers` and :sol:mod:`AvailabilityVerifiers`\\n  4. Remove :sol:mod:`Verifiers` and :sol:mod:`AvailabilityVerifiers` after a timelock allows it\\n  5. Nominate Operators (see :sol:mod:`Operator`) and Token Administrators (see :sol:mod:`Tokens`)\\n\\n  Adding governors is performed in a two step procedure:\\n\\n  1. First, an existing governor nominates a new governor (:sol:func:`mainNominateNewGovernor`)\\n  2. Then, the new governor must accept governance to become a governor (:sol:func:`mainAcceptGovernance`)\\n\\n  This two step procedure ensures that a governor public key cannot be nominated unless there is an\\n  entity that has the corresponding private key. This is intended to prevent errors in the addition\\n  process.\\n\\n  The governor private key should typically be held in a secure cold wallet.\\n*/\\n/*\\n  Implements Governance for the StarkDex main contract.\\n  The wrapper methods (e.g. mainIsGovernor wrapping isGovernor) are needed to give\\n  the method unique names.\\n  Both Proxy and StarkExchange inherit from Governance. Thus, the logical contract method names\\n  must have unique names in order for the proxy to successfully delegate to them.\\n*/\\ncontract MainGovernance is Governance {\\n\\n    // The tag is the sting key that is used in the Governance storage mapping.\\n    string public constant MAIN_GOVERNANCE_INFO_TAG = \\\"StarkEx.Main.2019.GovernorsInformation\\\";\\n\\n    function getGovernanceTag()\\n        internal\\n        view\\n        returns (string memory tag) {\\n        tag = MAIN_GOVERNANCE_INFO_TAG;\\n    }\\n\\n    function mainIsGovernor(address testGovernor) external view returns (bool) {\\n        return isGovernor(testGovernor);\\n    }\\n\\n    function mainNominateNewGovernor(address newGovernor) external {\\n        nominateNewGovernor(newGovernor);\\n    }\\n\\n    function mainRemoveGovernor(address governorForRemoval) external {\\n        removeGovernor(governorForRemoval);\\n    }\\n\\n    function mainAcceptGovernance()\\n        external\\n    {\\n        acceptGovernance();\\n    }\\n\\n    function mainCancelNomination() external {\\n        cancelNomination();\\n    }\\n\\n}\\n\"},\"MainStorage.sol\":{\"content\":\"/*\\n  Copyright 2019,2020 StarkWare Industries Ltd.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\").\\n  You may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n  https://www.starkware.co/open-source-license/\\n\\n  Unless required by applicable law or agreed to in writing,\\n  software distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions\\n  and limitations under the License.\\n*/\\npragma solidity ^0.5.2;\\n\\nimport \\\"IFactRegistry.sol\\\";\\nimport \\\"ProxyStorage.sol\\\";\\nimport \\\"Common.sol\\\";\\n/*\\n  Holds ALL the main contract state (storage) variables.\\n*/\\ncontract MainStorage is ProxyStorage {\\n\\n    IFactRegistry escapeVerifier_;\\n\\n    // Global dex-frozen flag.\\n    bool stateFrozen;                               // NOLINT: constable-states.\\n\\n    // Time when unFreeze can be successfully called (UNFREEZE_DELAY after freeze).\\n    uint256 unFreezeTime;                           // NOLINT: constable-states.\\n\\n    // Pending deposits.\\n    // A map STARK key =\\u003e asset id =\\u003e vault id =\\u003e quantized amount.\\n    mapping (uint256 =\\u003e mapping (uint256 =\\u003e mapping (uint256 =\\u003e uint256))) pendingDeposits;\\n\\n    // Cancellation requests.\\n    // A map STARK key =\\u003e asset id =\\u003e vault id =\\u003e request timestamp.\\n    mapping (uint256 =\\u003e mapping (uint256 =\\u003e mapping (uint256 =\\u003e uint256))) cancellationRequests;\\n\\n    // Pending withdrawals.\\n    // A map STARK key =\\u003e asset id =\\u003e quantized amount.\\n    mapping (uint256 =\\u003e mapping (uint256 =\\u003e uint256)) pendingWithdrawals;\\n\\n    // vault_id =\\u003e escape used boolean.\\n    mapping (uint256 =\\u003e bool) escapesUsed;\\n\\n    // Number of escapes that were performed when frozen.\\n    uint256 escapesUsedCount;                       // NOLINT: constable-states.\\n\\n    // Full withdrawal requests: stark key =\\u003e vaultId =\\u003e requestTime.\\n    // stark key =\\u003e vaultId =\\u003e requestTime.\\n    mapping (uint256 =\\u003e mapping (uint256 =\\u003e uint256)) fullWithdrawalRequests;\\n\\n    // State sequence number.\\n    uint256 sequenceNumber;                         // NOLINT: constable-states uninitialized-state.\\n\\n    // Vaults Tree Root \\u0026 Height.\\n    uint256 vaultRoot;                              // NOLINT: constable-states uninitialized-state.\\n    uint256 vaultTreeHeight;                        // NOLINT: constable-states uninitialized-state.\\n\\n    // Order Tree Root \\u0026 Height.\\n    uint256 orderRoot;                              // NOLINT: constable-states uninitialized-state.\\n    uint256 orderTreeHeight;                        // NOLINT: constable-states uninitialized-state.\\n\\n    // True if and only if the address is allowed to add tokens.\\n    mapping (address =\\u003e bool) tokenAdmins;\\n\\n    // True if and only if the address is allowed to register users.\\n    mapping (address =\\u003e bool) userAdmins;\\n\\n    // True if and only if the address is an operator (allowed to update state).\\n    mapping (address =\\u003e bool) operators;\\n\\n    // Mapping of contract ID to asset data.\\n    mapping (uint256 =\\u003e bytes) assetTypeToAssetInfo;    // NOLINT: uninitialized-state.\\n\\n    // Mapping of registered contract IDs.\\n    mapping (uint256 =\\u003e bool) registeredAssetType;      // NOLINT: uninitialized-state.\\n\\n    // Mapping from contract ID to quantum.\\n    mapping (uint256 =\\u003e uint256) assetTypeToQuantum;    // NOLINT: uninitialized-state.\\n\\n    // This mapping is no longer in use, remains for backwards compatibility.\\n    mapping (address =\\u003e uint256) starkKeys_DEPRECATED;  // NOLINT: naming-convention.\\n\\n    // Mapping from STARK public key to the Ethereum public key of its owner.\\n    mapping (uint256 =\\u003e address) ethKeys;               // NOLINT: uninitialized-state.\\n\\n    // Timelocked state transition and availability verification chain.\\n    StarkExTypes.ApprovalChainData verifiersChain;\\n    StarkExTypes.ApprovalChainData availabilityVerifiersChain;\\n\\n    // Batch id of last accepted proof.\\n    uint256 lastBatchId;                            // NOLINT: constable-states uninitialized-state.\\n\\n    // Mapping between sub-contract index to sub-contract address.\\n    mapping(uint256 =\\u003e address) subContracts;       // NOLINT: uninitialized-state.\\n}\\n\"},\"MApprovalChain.sol\":{\"content\":\"/*\\n  Copyright 2019,2020 StarkWare Industries Ltd.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\").\\n  You may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n  https://www.starkware.co/open-source-license/\\n\\n  Unless required by applicable law or agreed to in writing,\\n  software distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions\\n  and limitations under the License.\\n*/\\npragma solidity ^0.5.2;\\n\\nimport \\\"Common.sol\\\";\\n\\n/*\\n  Implements a data structure that supports instant registration\\n  and slow time-locked removal of entries.\\n*/\\ncontract MApprovalChain {\\n    uint256 constant ENTRY_NOT_FOUND = uint256(~0);\\n\\n    /*\\n      Adds the given verifier (entry) to the chain.\\n      Fails if the size of the chain is already \\u003e= maxLength.\\n      Fails if identifier is not identical to the value returned from entry.identify().\\n    */\\n    function addEntry(\\n        StarkExTypes.ApprovalChainData storage chain,\\n        address entry, uint256 maxLength, string memory identifier)\\n        internal;\\n\\n    /*\\n      Returns the index of the verifier in the list if it exists and returns ENTRY_NOT_FOUND\\n      otherwise.\\n    */\\n    function findEntry(address[] storage list, address entry)\\n        internal view returns (uint256);\\n\\n    /*\\n      Same as findEntry(), except that it reverts if the verifier is not found.\\n    */\\n    function safeFindEntry(address[] storage list, address entry)\\n        internal view returns (uint256 idx);\\n\\n    /*\\n      Updates the unlockedForRemovalTime field of the given verifier to\\n        current time + removalDelay.\\n      Reverts if the verifier is not found.\\n    */\\n    function announceRemovalIntent(\\n        StarkExTypes.ApprovalChainData storage chain, address entry, uint256 removalDelay)\\n        internal;\\n\\n    /*\\n      Removes a verifier assuming the expected time has passed.\\n    */\\n    function removeEntry(StarkExTypes.ApprovalChainData storage chain, address entry)\\n        internal;\\n}\\n\"},\"MFreezable.sol\":{\"content\":\"/*\\n  Copyright 2019,2020 StarkWare Industries Ltd.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\").\\n  You may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n  https://www.starkware.co/open-source-license/\\n\\n  Unless required by applicable law or agreed to in writing,\\n  software distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions\\n  and limitations under the License.\\n*/\\npragma solidity ^0.5.2;\\n\\ncontract MFreezable {\\n    /*\\n      Forbids calling the function if the exchange is frozen.\\n    */\\n    modifier notFrozen()\\n    {\\n        // Pure modifier declarations are not supported. Instead we provide\\n        // a dummy definition.\\n        revert(\\\"UNIMPLEMENTED\\\");\\n        _;\\n    }\\n\\n    /*\\n      Allows calling the function only if the exchange is frozen.\\n    */\\n    modifier onlyFrozen()\\n    {\\n        // Pure modifier declarations are not supported. Instead we provide\\n        // a dummy definition.\\n        revert(\\\"UNIMPLEMENTED\\\");\\n        _;\\n    }\\n\\n    /*\\n      Freezes the exchange.\\n    */\\n    function freeze()\\n        internal;\\n\\n    /*\\n      Returns true if the exchange is frozen.\\n    */\\n    function isFrozen()\\n        external view\\n        returns (bool);\\n\\n}\\n\"},\"MGovernance.sol\":{\"content\":\"/*\\n  Copyright 2019,2020 StarkWare Industries Ltd.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\").\\n  You may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n  https://www.starkware.co/open-source-license/\\n\\n  Unless required by applicable law or agreed to in writing,\\n  software distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions\\n  and limitations under the License.\\n*/\\npragma solidity ^0.5.2;\\n\\ncontract MGovernance {\\n    /*\\n      Allows calling the function only by a Governor.\\n    */\\n    modifier onlyGovernance()\\n    {\\n        // Pure modifier declarations are not supported. Instead we provide\\n        // a dummy definition.\\n        revert(\\\"UNIMPLEMENTED\\\");\\n        _;\\n    }\\n}\\n\"},\"ProxyStorage.sol\":{\"content\":\"/*\\n  Copyright 2019,2020 StarkWare Industries Ltd.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\").\\n  You may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n  https://www.starkware.co/open-source-license/\\n\\n  Unless required by applicable law or agreed to in writing,\\n  software distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions\\n  and limitations under the License.\\n*/\\npragma solidity ^0.5.2;\\n\\nimport \\\"GovernanceStorage.sol\\\";\\n\\n/*\\n  Holds the Proxy-specific state variables.\\n  This contract is inherited by the GovernanceStorage (and indirectly by MainStorage)\\n  to prevent collision hazard.\\n*/\\ncontract ProxyStorage is GovernanceStorage {\\n\\n    // Stores the hash of the initialization vector of the added implementation.\\n    // Upon upgradeTo the implementation, the initialization vector is verified\\n    // to be identical to the one submitted when adding the implementation.\\n    mapping (address =\\u003e bytes32) internal initializationHash;\\n\\n    // The time after which we can switch to the implementation.\\n    mapping (address =\\u003e uint256) internal enabledTime;\\n\\n    // A central storage of the flags whether implementation has been initialized.\\n    // Note - it can be used flexibly enough to accommodate multiple levels of initialization\\n    // (i.e. using different key salting schemes for different initialization levels).\\n    mapping (bytes32 =\\u003e bool) internal initialized;\\n}\\n\"},\"SubContractor.sol\":{\"content\":\"/*\\n  Copyright 2019,2020 StarkWare Industries Ltd.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\").\\n  You may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n  https://www.starkware.co/open-source-license/\\n\\n  Unless required by applicable law or agreed to in writing,\\n  software distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions\\n  and limitations under the License.\\n*/\\npragma solidity ^0.5.2;\\n\\nimport \\\"Identity.sol\\\";\\n\\ncontract SubContractor is Identity {\\n\\n    function initialize(bytes calldata data)\\n        external;\\n\\n    function initializerSize()\\n        external view\\n        returns(uint256);\\n\\n}\\n\"},\"Verifiers.sol\":{\"content\":\"/*\\n  Copyright 2019,2020 StarkWare Industries Ltd.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\").\\n  You may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n  https://www.starkware.co/open-source-license/\\n\\n  Unless required by applicable law or agreed to in writing,\\n  software distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions\\n  and limitations under the License.\\n*/\\npragma solidity ^0.5.2;\\n\\nimport \\\"MApprovalChain.sol\\\";\\nimport \\\"LibConstants.sol\\\";\\nimport \\\"MainStorage.sol\\\";\\n\\n/**\\n  A Verifier contract is an implementation of a STARK verifier that the exchange service sends\\n  STARK proofs to. In addition, the exchange contract can call a verifier to check if a valid proof\\n  has been accepted for a given state transition (typically described as a hash on the public input\\n  of the assumed proof).\\n\\n  The exchange contract will normally query only one verifier contract for proof validity checks.\\n  However, in the event that the verifier algorithm needs to updated, additional verifiers may be\\n  registered with the exchange contract by the contract :sol:mod:`MainGovernance`. Such new\\n  verifiers are then also be required to attest to the validity of state transitions and only if all\\n  the verifiers attest to the validity the state transition is accepted.\\n\\n  Removal of verifiers is also the responsibility of the :sol:mod:`MainGovernance`. The removal\\n  process is more sensitive than verifier registration as it may affect the soundness of the system.\\n  Hence, this is performed in two steps:\\n\\n  1. The :sol:mod:`MainGovernance` first announces the intent to remove a verifier by calling :sol:func:`announceVerifierRemovalIntent`\\n  2. After the expiration of a `VERIFIER_REMOVAL_DELAY` time lock, actual removal may be performed by calling :sol:func:`removeVerifier`\\n\\n  The removal delay ensures that a user concerned about the soundness of the system has ample time\\n  to leave the exchange.\\n*/\\ncontract Verifiers is MainStorage, LibConstants, MApprovalChain {\\n    function getRegisteredVerifiers()\\n        external view\\n        returns (address[] memory _verifers)\\n    {\\n        return verifiersChain.list;\\n    }\\n\\n    function isVerifier(address verifierAddress)\\n        external view\\n        returns (bool)\\n    {\\n        return findEntry(verifiersChain.list, verifierAddress) != ENTRY_NOT_FOUND;\\n    }\\n\\n    function registerVerifier(address verifier, string calldata identifier)\\n        external\\n    {\\n        addEntry(verifiersChain, verifier, MAX_VERIFIER_COUNT, identifier);\\n    }\\n\\n    function announceVerifierRemovalIntent(address verifier)\\n        external\\n    {\\n        announceRemovalIntent(verifiersChain, verifier, VERIFIER_REMOVAL_DELAY);\\n    }\\n\\n    function removeVerifier(address verifier)\\n        external\\n    {\\n        removeEntry(verifiersChain, verifier);\\n    }\\n}\\n\"}}","ABI":"[{\"anonymous\":false,\"inputs\":[],\"name\":\"LogFrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"acceptedGovernor\",\"type\":\"address\"}],\"name\":\"LogNewGovernorAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nominatedGovernor\",\"type\":\"address\"}],\"name\":\"LogNominatedGovernor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LogNominationCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"removedGovernor\",\"type\":\"address\"}],\"name\":\"LogRemovedGovernor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LogUnFrozen\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEPOSIT_CANCEL_DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FREEZE_GRACE_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAIN_GOVERNANCE_INFO_TAG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_VERIFIER_COUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UNFREEZE_DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VERIFIER_REMOVAL_DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"}],\"name\":\"announceAvailabilityVerifierRemovalIntent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"}],\"name\":\"announceVerifierRemovalIntent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRegisteredAvailabilityVerifiers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_verifers\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRegisteredVerifiers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_verifers\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"identify\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initializerSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"verifierAddress\",\"type\":\"address\"}],\"name\":\"isAvailabilityVerifier\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFrozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"frozen\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"verifierAddress\",\"type\":\"address\"}],\"name\":\"isVerifier\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mainAcceptGovernance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mainCancelNomination\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"testGovernor\",\"type\":\"address\"}],\"name\":\"mainIsGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"mainNominateNewGovernor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"governorForRemoval\",\"type\":\"address\"}],\"name\":\"mainRemoveGovernor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"identifier\",\"type\":\"string\"}],\"name\":\"registerAvailabilityVerifier\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"identifier\",\"type\":\"string\"}],\"name\":\"registerVerifier\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"}],\"name\":\"removeAvailabilityVerifier\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"}],\"name\":\"removeVerifier\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unFreeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AllVerifiers","CompilerVersion":"v0.5.15+commit.6a57276f","OptimizationUsed":"1","Runs":"100","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"bzzr://5c3f6fd9265be286ead3cf6a16c939e0f121bea7331c983b113fb8f087d5ea7d"}]}