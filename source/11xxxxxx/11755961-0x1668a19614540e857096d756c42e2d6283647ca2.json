{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\ncontract Ownable  {\r\n    function viewManager() public view returns(address);\r\n}\r\n\r\n\r\ncontract BrightFund {\r\n    \r\n    address public ownerWallet;\r\n    Ownable ownable = Ownable(0x31C3739b6029944eDd828fad742379513d8d0B63);\r\n\r\n   \r\n    struct UserStruct {\r\n        bool isExist;\r\n        uint id;\r\n        uint referrerID;\r\n        address[] referral;\r\n        mapping(uint => uint) levelExpired;\r\n        mapping(uint => uint) levelExpiredPro;\r\n        mapping(uint => uint) levelExpiredLegendary;\r\n    }\r\n    \r\n    uint REFERRER_1_LEVEL_LIMIT = 2;\r\n    uint PERIOD_LENGTH_STANDARD = 64 days;\r\n    uint PERIOD_LENGTH_PRO = 128 days;\r\n    uint PERIOD_LENGTH_LEGENDARY = 256 days;\r\n\r\n    mapping(uint => uint) public LEVEL_PRICE;\r\n\r\n    mapping(address => UserStruct) public users;\r\n    mapping(uint => address) public userList;\r\n    uint public currUserID = 0;\r\n    \r\n    uint public l1l1users = 0;\r\n    uint public l1l2users = 0;\r\n    uint public l1l3users = 0;\r\n    uint public l1l4users = 0;\r\n    uint public l1l5users = 0;\r\n    uint public l1l6users = 0;\r\n    uint public l1l7users = 0;\r\n    uint public l1l8users = 0;\r\n    \r\n    uint public l2l1users = 0;\r\n    uint public l2l2users = 0;\r\n    uint public l2l3users = 0;\r\n    uint public l2l4users = 0;\r\n    uint public l2l5users = 0;\r\n    uint public l2l6users = 0;\r\n    uint public l2l7users = 0;\r\n    uint public l2l8users = 0;\r\n\r\n    uint public l3l1users = 0;\r\n    uint public l3l2users = 0;\r\n    uint public l3l3users = 0;\r\n    uint public l3l4users = 0;\r\n    uint public l3l5users = 0;\r\n    uint public l3l6users = 0;\r\n    uint public l3l7users = 0;\r\n    uint public l3l8users = 0;\r\n\r\n    event regLevelEvent(address indexed _user, address indexed _referrer, uint _time);\r\n    event buyLevelEvent(address indexed _user, uint _level, uint _league, uint _time);\r\n    event getMoneyForLevelEvent(address indexed _user, address indexed _referral, uint _level, uint _league, uint _time);\r\n    event lostMoneyForLevelEvent(address indexed _user, address indexed _referral, uint _level, uint _league, uint _time);\r\n\r\n    constructor() public {\r\n        ownerWallet = msg.sender;\r\n        LEVEL_PRICE[1] = 0.04 ether;\r\n        LEVEL_PRICE[2] = 0.08 ether;\r\n        LEVEL_PRICE[3] = 0.16 ether;\r\n        LEVEL_PRICE[4] = 0.32 ether;\r\n        LEVEL_PRICE[5] = 0.64 ether;\r\n        LEVEL_PRICE[6] = 1.28 ether;\r\n        LEVEL_PRICE[7] = 2.56 ether;\r\n        LEVEL_PRICE[8] = 5.12 ether;\r\n\r\n\r\n\r\n\r\n        LEVEL_PRICE[9] = 2.0 ether;\r\n        LEVEL_PRICE[10] = 4.0 ether;\r\n        LEVEL_PRICE[11] = 8.0 ether;\r\n        LEVEL_PRICE[12] = 16.0 ether;\r\n        LEVEL_PRICE[13] = 32.0 ether;\r\n        LEVEL_PRICE[14] = 64.0 ether;\r\n        LEVEL_PRICE[15] = 128.0 ether;\r\n        LEVEL_PRICE[16] = 256.0 ether;\r\n\r\n\r\n\r\n\r\n        LEVEL_PRICE[17] = 16.0 ether;\r\n        LEVEL_PRICE[18] = 32.0 ether;\r\n        LEVEL_PRICE[19] = 64.0 ether;\r\n        LEVEL_PRICE[20] = 128.0 ether;\r\n        LEVEL_PRICE[21] = 256.0 ether;\r\n        LEVEL_PRICE[22] = 512.0 ether;\r\n        LEVEL_PRICE[23] = 1024.0 ether;\r\n        LEVEL_PRICE[24] = 2048.0 ether;\r\n\r\n        UserStruct memory userStruct;\r\n        currUserID++;\r\n\r\n        userStruct = UserStruct({\r\n            isExist: true,\r\n            id: currUserID,\r\n            referrerID: 0,\r\n            referral: new address[](0)\r\n        });\r\n        users[ownerWallet] = userStruct;\r\n        userList[currUserID] = ownerWallet;\r\n\r\n        for (uint i = 1; i <= 8; i++) {\r\n            users[ownerWallet].levelExpired[i] = 55555555555;\r\n            users[ownerWallet].levelExpiredPro[i] = 55555555555;\r\n            users[ownerWallet].levelExpiredLegendary[i] = 55555555555;\r\n        }\r\n    }\r\n\r\n    function () external payable {\r\n        uint level;\r\n        uint league;\r\n\r\n        if (msg.value == LEVEL_PRICE[1]) { level = 1; league = 1;}\r\n        else if (msg.value == LEVEL_PRICE[2]) { level = 2; league = 1;}\r\n        else if (msg.value == LEVEL_PRICE[3]) { level = 3; league = 1;}\r\n        else if (msg.value == LEVEL_PRICE[4]) { level = 4; league = 1;}\r\n        else if (msg.value == LEVEL_PRICE[5]) { level = 5; league = 1;}\r\n        else if (msg.value == LEVEL_PRICE[6]) { level = 6; league = 1;}\r\n        else if (msg.value == LEVEL_PRICE[7]) { level = 7; league = 1;}\r\n        else if (msg.value == LEVEL_PRICE[8]) { level = 8; league = 1;}\r\n        else if (msg.value == LEVEL_PRICE[9]) { level = 1; league = 2;}\r\n        else if (msg.value == LEVEL_PRICE[10]) { level = 2; league = 2;}\r\n        else if (msg.value == LEVEL_PRICE[11]) { level = 3; league = 2;}\r\n        else if (msg.value == LEVEL_PRICE[12]) { level = 4; league = 2;}\r\n        else if (msg.value == LEVEL_PRICE[13]) { level = 5; league = 2;}\r\n        else if (msg.value == LEVEL_PRICE[14]) { level = 6; league = 2;}\r\n        else if (msg.value == LEVEL_PRICE[15]) { level = 7; league = 2;}\r\n        else if (msg.value == LEVEL_PRICE[16]) { level = 8; league = 2;}\r\n        else if (msg.value == LEVEL_PRICE[17]) { level = 1; league = 3;}\r\n        else if (msg.value == LEVEL_PRICE[18]) { level = 2; league = 3;}\r\n        else if (msg.value == LEVEL_PRICE[19]) { level = 3; league = 3;}\r\n        else if (msg.value == LEVEL_PRICE[20]) { level = 4; league = 3;}\r\n        else if (msg.value == LEVEL_PRICE[21]) { level = 5; league = 3;}\r\n        else if (msg.value == LEVEL_PRICE[22]) { level = 6; league = 3;}\r\n        else if (msg.value == LEVEL_PRICE[23]) { level = 7; league = 3;}\r\n        else if (msg.value == LEVEL_PRICE[24]) { level = 8; league = 3;}\r\n        else revert('Incorrect Value send');\r\n\r\n        if (users[msg.sender].isExist) buyLevel(level, league);\r\n        else if (level == 1 && !users[msg.sender].isExist && league == 1) {\r\n            uint refId = 0;\r\n            address referrer = bytesToAddress(msg.data);\r\n            if (users[referrer].isExist) refId = users[referrer].id;\r\n            else revert('Incorrect referrer');\r\n            regUser(refId);\r\n        } else revert('Please buy first level for 0.04 ETH');\r\n    }\r\n\r\n    function regUser(uint _referrerID) public payable {\r\n        require(!users[msg.sender].isExist, 'User exist');\r\n        require(_referrerID > 0 && _referrerID <= currUserID, 'Incorrect referrer Id');\r\n        require(msg.value == LEVEL_PRICE[1], 'Incorrect Value');\r\n\r\n        if (users[userList[_referrerID]].referral.length >= REFERRER_1_LEVEL_LIMIT && userList[_referrerID] != ownerWallet) _referrerID = users[findFreeReferrer(userList[_referrerID])].id;\r\n\r\n        UserStruct memory userStruct;\r\n        currUserID++;\r\n        l1l1users++;\r\n\r\n\r\n        userStruct = UserStruct({\r\n            isExist: true,\r\n            id: currUserID,\r\n            referrerID: _referrerID,\r\n            referral: new address[](0)\r\n        });\r\n\r\n        users[msg.sender] = userStruct;\r\n        userList[currUserID] = msg.sender;\r\n\r\n        users[msg.sender].levelExpired[1] = now + PERIOD_LENGTH_STANDARD;\r\n\r\n        users[userList[_referrerID]].referral.push(msg.sender);\r\n\r\n        payForLevel(1, msg.sender, 1);\r\n\r\n        emit regLevelEvent(msg.sender, userList[_referrerID], now);\r\n    }\r\n\r\n    function buyLevel(uint _level, uint _league) public payable {\r\n        \r\n        require(users[msg.sender].isExist, 'User not exist');\r\n        require(_level > 0 && _level <= 8, 'Incorrect level');\r\n        uint l;\r\n        \r\n         if (_league == 2) for (l = 5; l > 0; l--) require(users[msg.sender].levelExpired[l] >= PERIOD_LENGTH_PRO, 'Buy the previous league 1 level 5');\r\n         else if (_league == 3) {\r\n            for (l = 5; l > 0; l--) require(users[msg.sender].levelExpired[l] >= PERIOD_LENGTH_LEGENDARY, 'Buy the previous league 1 level 5');\r\n            for (l = 5; l > 0; l--) require(users[msg.sender].levelExpiredPro[l] >= PERIOD_LENGTH_LEGENDARY, 'Buy the previous league 2 level 5');\r\n         }\r\n\r\n        \r\n        if (_level == 1) {\r\n            if (_league == 1) require(msg.value == LEVEL_PRICE[1], 'Incorrect Value');\r\n            else if (_league == 2) require(msg.value == LEVEL_PRICE[9], 'Incorrect Value');\r\n            else if (_league == 3) require(msg.value == LEVEL_PRICE[17], 'Incorrect Value');\r\n\r\n            if (_league == 1) {\r\n                l1l1users++;\r\n                users[msg.sender].levelExpired[1] += PERIOD_LENGTH_STANDARD;\r\n            } else if (_league == 2) {\r\n                if (users[msg.sender].levelExpiredPro[1] == 0) {\r\n                    l2l1users++;\r\n                    users[msg.sender].levelExpiredPro[1] = now + PERIOD_LENGTH_PRO;\r\n                } else users[msg.sender].levelExpiredPro[1] += PERIOD_LENGTH_PRO;\r\n             } else if (_league == 3) {\r\n                if (users[msg.sender].levelExpiredLegendary[1] == 0) {\r\n                    users[msg.sender].levelExpiredLegendary[1] = now + PERIOD_LENGTH_LEGENDARY;\r\n                    l3l1users++;\r\n                } else users[msg.sender].levelExpiredLegendary[1] += PERIOD_LENGTH_LEGENDARY;\r\n            }\r\n        } else {\r\n            if (_league == 1) {\r\n                require(msg.value == LEVEL_PRICE[_level], 'Incorrect Value');\r\n                for (l = _level - 1; l > 0; l--) require(users[msg.sender].levelExpired[l] >= now, 'Buy the previous level');\r\n                if (users[msg.sender].levelExpired[_level] == 0) {\r\n                        users[msg.sender].levelExpired[_level] = now + PERIOD_LENGTH_STANDARD;\r\n                } else users[msg.sender].levelExpired[_level] += PERIOD_LENGTH_STANDARD;\r\n                if (_level == 1) l1l1users++;\r\n                if (_level == 2) l1l2users++;\r\n                if (_level == 3) l1l3users++;\r\n                if (_level == 4) l1l4users++;\r\n                if (_level == 5) l1l5users++;\r\n                if (_level == 6) l1l6users++;\r\n                if (_level == 7) l1l7users++;\r\n                if (_level == 8) l1l8users++;\r\n            } else if (_league == 2) {\r\n                require(msg.value == LEVEL_PRICE[_level + 8], 'Incorrect Value');\r\n                for (l = _level - 1; l > 0; l--) require(users[msg.sender].levelExpiredPro[l] >= now, 'Buy the previous level');\r\n                if (users[msg.sender].levelExpiredPro[_level] == 0) {\r\n                    users[msg.sender].levelExpiredPro[_level] = now + PERIOD_LENGTH_PRO;\r\n                } else users[msg.sender].levelExpiredPro[_level] += PERIOD_LENGTH_PRO;\r\n                if (_level == 1) l2l1users++;\r\n                if (_level == 2) l2l2users++;\r\n                if (_level == 3) l2l3users++;\r\n                if (_level == 4) l2l4users++;\r\n                if (_level == 5) l2l5users++;\r\n                if (_level == 6) l2l6users++;\r\n                if (_level == 7) l2l7users++;\r\n                if (_level == 8) l2l8users++;\r\n            } else if (_league == 3) {\r\n                require(msg.value == LEVEL_PRICE[_level + 16], 'Incorrect Value');\r\n                for (l = _level - 1; l > 0; l--) require(users[msg.sender].levelExpiredLegendary[l] >= now, 'Buy the previous level');\r\n                if (users[msg.sender].levelExpiredLegendary[_level] == 0) {\r\n                    users[msg.sender].levelExpiredLegendary[_level] = now + PERIOD_LENGTH_LEGENDARY;\r\n                } else users[msg.sender].levelExpiredLegendary[_level] += PERIOD_LENGTH_LEGENDARY;\r\n                if (_level == 1) l3l1users++;\r\n                if (_level == 2) l3l2users++;\r\n                if (_level == 3) l3l3users++;\r\n                if (_level == 4) l3l4users++;\r\n                if (_level == 5) l3l5users++;\r\n                if (_level == 6) l3l6users++;\r\n                if (_level == 7) l3l7users++;\r\n                if (_level == 8) l3l8users++;\r\n            }\r\n        }\r\n\r\n        payForLevel(_level, msg.sender, _league);\r\n        emit buyLevelEvent(msg.sender, _level, _league, now);\r\n    }\r\n\r\n\r\n   \r\n    function payForLevel(uint _level, address _user, uint _league) internal {\r\n        \r\n        address referer;\r\n        address referer1;\r\n        address referer2;\r\n        address referer3;\r\n        if(_level == 1 || _level == 5){\r\n            referer = userList[users[_user].referrerID];\r\n        } else if(_level == 2 || _level == 6){\r\n            referer1 = userList[users[_user].referrerID];\r\n            referer = userList[users[referer1].referrerID];\r\n        } else if(_level == 3 || _level == 7){\r\n            referer1 = userList[users[_user].referrerID];\r\n            referer2 = userList[users[referer1].referrerID];\r\n            referer = userList[users[referer2].referrerID];\r\n        } else if(_level == 4 || _level == 8){\r\n            referer1 = userList[users[_user].referrerID];\r\n            referer2 = userList[users[referer1].referrerID];\r\n            referer3 = userList[users[referer2].referrerID];\r\n            referer = userList[users[referer3].referrerID];\r\n        }\r\n\r\n        if (!users[referer].isExist) referer = userList[1];\r\n\r\n        bool sent = false;\r\n        bool acceptible = false;\r\n        if (_league == 1) if (users[referer].levelExpired[_level] >= now) acceptible = true;\r\n        if (_league == 2) if (users[referer].levelExpiredPro[_level] >= now) acceptible = true;\r\n        if (_league == 3) if (users[referer].levelExpiredLegendary[_level] >= now) acceptible = true;\r\n        if (acceptible) {\r\n            if (ownable.viewManager() != ownerWallet && referer == userList[1]) {\r\n                if (_league == 1) sent = ownable.viewManager().send(LEVEL_PRICE[_level]);\r\n                if (_league == 2) sent = ownable.viewManager().send(LEVEL_PRICE[_level + 8]);\r\n                if (_league == 3) sent = ownable.viewManager().send(LEVEL_PRICE[_level + 16]);\r\n            } else {\r\n                if (_league == 1) sent = address(uint160(referer)).send(LEVEL_PRICE[_level]);\r\n                if (_league == 2) sent = address(uint160(referer)).send(LEVEL_PRICE[_level + 8]);\r\n                if (_league == 3) sent = address(uint160(referer)).send(LEVEL_PRICE[_level + 16]);\r\n            }\r\n            if (sent) {\r\n                emit getMoneyForLevelEvent(referer, msg.sender, _level, _league, now);\r\n            }\r\n        }\r\n        if (!sent) {\r\n            emit lostMoneyForLevelEvent(referer, msg.sender, _level, _league, now);\r\n            payForLevel(_level, referer, _league);\r\n        }\r\n    }\r\n\r\n\r\n    function findFreeReferrer(address _user) public view returns(address) {\r\n        if(users[_user].referral.length < REFERRER_1_LEVEL_LIMIT) return _user;\r\n        address[] memory referrals = new address[](2046);\r\n        referrals[0] = users[_user].referral[0]; \r\n        referrals[1] = users[_user].referral[1];\r\n\r\n        address freeReferrer;\r\n        bool noFreeReferrer = true;\r\n\r\n        for(uint i =0; i<2046;i++){\r\n            if(users[referrals[i]].referral.length == REFERRER_1_LEVEL_LIMIT){\r\n                if(i<1022){\r\n                    referrals[(i+1)*2] = users[referrals[i]].referral[0];\r\n                    referrals[(i+1)*2+1] = users[referrals[i]].referral[1];\r\n                }\r\n            }else{\r\n                noFreeReferrer = false;\r\n                freeReferrer = referrals[i];\r\n                break;\r\n            }\r\n        }\r\n        require(!noFreeReferrer, 'No Free Referrer');\r\n        return freeReferrer;\r\n    }\r\n\r\n    function viewUserReferral(address _user) public view returns(address[] memory) {\r\n        return users[_user].referral;\r\n    }\r\n    function referralsCountt(address _user, uint _time) public view returns(uint) {\r\n       \r\n        uint referrals = 0;\r\n\r\n        referrals += users[_user].referral.length;\r\n\r\n        if (users[_user].referral.length > 0) {\r\n            for(uint a = 0; a < users[_user].referral.length; a++){\r\n                address tempUserA = users[_user].referral[a];\r\n                referrals += users[tempUserA].referral.length;\r\n                \r\n                if (users[tempUserA].referral.length > 0) {\r\n                    for(uint b = 0; b < users[tempUserA].referral.length; b++){\r\n                        address tempUserB = users[tempUserA].referral[b];\r\n                        referrals += users[tempUserB].referral.length;\r\n                        \r\n                        if (users[tempUserB].referral.length > 0) {\r\n                            for(uint c = 0; c < users[tempUserB].referral.length; c++){\r\n                                address tempUserC = users[tempUserB].referral[c];\r\n                                referrals += users[tempUserC].referral.length;\r\n                                if (_time < 2) {\r\n                                    referrals += referralsCountt(tempUserC, 2);\r\n                                }\r\n                            } \r\n                         }\r\n                    } \r\n                }\r\n            } \r\n        }\r\n        \r\n        return referrals;\r\n    \r\n    }\r\n     function viewUserLevel(address _user) public view returns(uint[8][]) {\r\n        uint[8][] memory data = new uint[8][](3);\r\n        for(uint i =1;i<=3;i++) for(uint j =1;j<= 8;j++) if(i==1) data[i-1][j-1] = users[_user].levelExpired[j]; else if (i==2) data[i-1][j-1] = users[_user].levelExpiredPro[j]; else if (i==3) data[i-1][j-1] = users[_user].levelExpiredLegendary[j];\r\n        return data;\r\n    }\r\n    \r\n        function liveUsersStatistics() public view returns(uint[27]) {\r\n        uint totalLeague1 = 0;\r\n        uint totalLeague2 = 0;\r\n        uint totalLeague3 = 0;\r\n\r\n        for (uint i = 0; i < 8; i++) {\r\n            totalLeague1 = l1l1users + l1l2users + l1l3users + l1l4users + l1l5users + l1l6users + l1l7users + l1l8users;\r\n            totalLeague2 = l2l1users + l2l2users + l2l3users + l2l4users + l2l5users + l2l6users + l2l7users + l2l8users;\r\n            totalLeague3 = l3l1users + l3l2users + l3l3users + l3l4users + l3l5users + l3l6users + l3l7users + l3l8users;\r\n        }\r\n\r\n        uint[27] memory data = [l1l1users, l1l2users, l1l3users, l1l4users, l1l5users, l1l6users, l1l7users, l1l8users, l2l1users, l2l2users, l2l3users, l2l4users, l2l5users, l2l6users, l2l7users, l2l8users, l3l1users, l3l2users, l3l3users, l3l4users, l3l5users, l3l6users, l3l7users, l3l8users, totalLeague1 , totalLeague2, totalLeague3];\r\n        return data;\r\n    }\r\n    \r\n    function viewUserLevelExpired(address _user, uint _level, uint _league) public view returns(uint) {\r\n        if (_league == 1) return users[_user].levelExpired[_level];\r\n        else if (_league == 2) return users[_user].levelExpiredPro[_level]; \r\n        return users[_user].levelExpiredLegendary[_level];\r\n    }\r\n\r\n    function bytesToAddress(bytes memory bys) private pure returns(address addr) {\r\n        assembly {\r\n            addr := mload(add(bys, 20))\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"l3l8users\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"l2l7users\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"findFreeReferrer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"l1l8users\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"liveUsersStatistics\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[27]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"l2l6users\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"l2l1users\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"l1l4users\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"l1l6users\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_level\",\"type\":\"uint256\"},{\"name\":\"_league\",\"type\":\"uint256\"}],\"name\":\"buyLevel\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"l2l3users\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"l2l5users\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"l1l2users\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"viewUserReferral\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"l1l3users\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"referralsCountt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"l3l1users\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"l2l4users\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"l3l3users\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"viewUserLevel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[8][]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"l3l2users\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"l3l5users\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LEVEL_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"l2l2users\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_level\",\"type\":\"uint256\"},{\"name\":\"_league\",\"type\":\"uint256\"}],\"name\":\"viewUserLevelExpired\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_referrerID\",\"type\":\"uint256\"}],\"name\":\"regUser\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currUserID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"l2l8users\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"isExist\",\"type\":\"bool\"},{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"referrerID\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"l1l5users\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"l1l1users\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"l3l6users\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"l3l4users\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"l3l7users\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"l1l7users\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_referrer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"regLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_league\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"buyLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_referral\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_league\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"getMoneyForLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_referral\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_league\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"lostMoneyForLevelEvent\",\"type\":\"event\"}]","ContractName":"BrightFund","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://1cb63e15f646d48551130219bd352647e346796ca5642bc66115addbdfe601d1"}]}