{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.6.0;\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IESDS {\r\n  function epoch() external view returns (uint256);\r\n  function couponsExpiration(uint256 epoch) external view returns (uint256);\r\n  function transferCoupons(address sender, address recipient, uint256 epoch, uint256 amount) external;\r\n  function balanceOfCoupons(address account, uint256 epoch) external view returns (uint256);\r\n  function approveCoupons(address spender, uint256 amount) external;\r\n}\r\n\r\ninterface IUniswapV2Router {\r\n\r\n  function swapExactTokensForTokens(\r\n    uint amountIn,\r\n    uint amountOutMin,\r\n    address[] calldata path,\r\n    address to,\r\n    uint deadline\r\n  ) external returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint);\r\n  function balanceOf(address account) external view returns (uint);\r\n  function transfer(address recipient, uint amount) external returns (bool);\r\n  function allowance(address owner, address spender) external view returns (uint);\r\n  function approve(address spender, uint amount) external returns (bool);\r\n  function transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n}\r\n\r\ninterface ICPOOL {\r\n  function balanceOf(address account) external view returns (uint);\r\n  function transfer(address recipient, uint amount) external returns (bool);\r\n  function allowance(address owner, address spender) external view returns (uint);\r\n  function approve(address spender, uint amount) external returns (bool);\r\n  function transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n\r\n  function wrap(uint _epoch, uint _couponAmount) external;\r\n  function unwrap(uint _epoch, uint _tokenAmount) external;\r\n}\r\n\r\ncontract CouponRouter {\r\n\r\n  using SafeMath for uint;\r\n\r\n  IESDS  public esds  = IESDS(0x443D2f2755DB5942601fa062Cc248aAA153313D3);\r\n  ICPOOL public cpool = ICPOOL(0x989A1B51681110fe01548C83B37258Fc9E5dFd0e);\r\n  IERC20 public esd   = IERC20(0x36F3FD68E7325a35EB768F1AedaAe9EA0689d723);\r\n  IUniswapV2Router public uniswap = IUniswapV2Router(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n\r\n  address public esdCpoolPair = 0x5C7316f167D836efCd06981923249B56C94D255c;\r\n  address public owner;\r\n\r\n  uint private lpFee          = 50; // fee going back to Uniswap LPs in addition to the Uniswap fee\r\n  uint private protocolFeeBps = 50; // fee to support the site development\r\n\r\n  constructor() public {\r\n      owner = msg.sender;\r\n  }\r\n\r\n  function swapCouponToCoupon(\r\n    uint _fromEpoch,\r\n    uint _toEpoch,\r\n    uint _inputAmount,\r\n    uint _minOutputAmount\r\n  ) public {\r\n\r\n    require(_fromEpoch != _toEpoch && _fromEpoch > 0 && _toEpoch > 0, \"CouponRouter: invalid epochs\");\r\n    uint cPoolAmont = _wrapToCpool(_fromEpoch, _inputAmount);\r\n\r\n    cpool.unwrap(_toEpoch, cPoolAmont);\r\n    uint couponAmount = esds.balanceOfCoupons(address(this), _toEpoch);\r\n    require(couponAmount > _minOutputAmount, \"CouponRouter: couponAmount > _minOutputAmount\");\r\n\r\n    esds.transferCoupons(address(this), msg.sender, _toEpoch, couponAmount);\r\n  }\r\n\r\n  function swapCouponToESD(\r\n    uint _fromEpoch,\r\n    uint _inputAmount,\r\n    uint _minOutputAmount\r\n  ) public {\r\n\r\n    uint cPoolAmont = _wrapToCpool(_fromEpoch, _inputAmount);\r\n    uint esdAmount = _swapTokens(address(cpool), address(esd), cPoolAmont, _minOutputAmount);\r\n    esd.transfer(msg.sender, esdAmount);\r\n  }\r\n\r\n  function swapESDToCoupon(\r\n    uint _toEpoch,\r\n    uint _inputAmount,\r\n    uint _minOutputAmount\r\n  ) public {\r\n\r\n    esd.transferFrom(msg.sender, address(this), _inputAmount);\r\n\r\n    uint lpFee = _inputAmount.mul(lpFee).div(10000);\r\n    esd.transfer(address(esdCpoolPair), lpFee);\r\n\r\n    uint protocolFee = _inputAmount.mul(protocolFeeBps).div(10000);\r\n    esd.transfer(address(owner), protocolFee);\r\n\r\n    uint swapAmount = _inputAmount.sub(lpFee).sub(protocolFee);\r\n    uint cPoolAmount = _swapTokens(address(esd), address(cpool), swapAmount, 0);\r\n\r\n    cpool.unwrap(_toEpoch, cPoolAmount);\r\n    uint couponAmount = esds.balanceOfCoupons(address(this), _toEpoch);\r\n    require(couponAmount > _minOutputAmount, \"CouponRouter: couponAmount > _minOutputAmount\");\r\n\r\n    esds.transferCoupons(address(this), msg.sender, _toEpoch, couponAmount);\r\n  }\r\n\r\n  function _wrapToCpool(uint _fromEpoch, uint _couponAmount) internal returns(uint) {\r\n    esds.transferCoupons(msg.sender, address(this), _fromEpoch, _couponAmount);\r\n\r\n    esds.approveCoupons(address(cpool), uint(-1));\r\n    cpool.wrap(_fromEpoch, _couponAmount);\r\n    uint cpoolBalance = cpool.balanceOf(address(this));\r\n\r\n    uint lpFee = cpoolBalance.mul(lpFee).div(10000);\r\n    cpool.transfer(address(esdCpoolPair), lpFee);\r\n\r\n    uint protocolFee = cpoolBalance.mul(protocolFeeBps).div(10000);\r\n    cpool.transfer(address(owner), protocolFee);\r\n\r\n    return cpoolBalance.sub(lpFee).sub(protocolFee);\r\n  }\r\n\r\n  function _swapTokens(\r\n    address _fromToken,\r\n    address _toToken,\r\n    uint _inputAmount,\r\n    uint _minOutputAmount\r\n  ) internal returns(uint) {\r\n\r\n    address[] memory path = new address[](2);\r\n    path[0] = address(_fromToken);\r\n    path[1] = address(_toToken);\r\n\r\n    IERC20(_fromToken).approve(address(uniswap), uint(-1));\r\n\r\n    uint[] memory returnAmounts = uniswap.swapExactTokensForTokens(\r\n      _inputAmount,\r\n      _minOutputAmount,\r\n      path,\r\n      address(this),\r\n      block.timestamp.add(1000)\r\n    );\r\n\r\n    return returnAmounts[1];\r\n  }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"cpool\",\"outputs\":[{\"internalType\":\"contract ICPOOL\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"esd\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"esdCpoolPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"esds\",\"outputs\":[{\"internalType\":\"contract IESDS\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fromEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minOutputAmount\",\"type\":\"uint256\"}],\"name\":\"swapCouponToCoupon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fromEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minOutputAmount\",\"type\":\"uint256\"}],\"name\":\"swapCouponToESD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_toEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minOutputAmount\",\"type\":\"uint256\"}],\"name\":\"swapESDToCoupon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswap\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"CouponRouter","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://5afba7c681f8ed74d76546a20154d88886a6855f9812c946fb651d080e68f5d9"}]}