{"status":"1","message":"OK","result":[{"SourceCode":"# @version 0.2.7\r\n\"\"\"\r\n@title yToken Burner\r\n@notice Converts yTokens to USDC and transfers to `UnderlyingBurner`\r\n\"\"\"\r\n\r\n\r\nfrom vyper.interfaces import ERC20\r\n\r\n\r\ninterface AddressProvider:\r\n    def get_registry() -> address: view\r\n    def get_address(_id: uint256) -> address: view\r\n\r\ninterface Registry:\r\n    def find_pool_for_coins(_from: address, _to: address) -> address: view\r\n\r\ninterface RegistrySwap:\r\n    def exchange_with_best_rate(\r\n        _from: address,\r\n        _to: address,\r\n        _amount: uint256,\r\n        _expected: uint256,\r\n    ) -> uint256: payable\r\n\r\ninterface yERC20:\r\n    def withdraw(withdrawTokens: uint256): nonpayable\r\n    def token() -> address: view\r\n\r\n\r\nADDRESS_PROVIDER: constant(address) = 0x0000000022D53366457F9d5E68Ec105046FC4383\r\n\r\nTRIPOOL_COINS: constant(address[3]) = [\r\n    0x6B175474E89094C44Da98b954EedeAC495271d0F,\r\n    0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48,\r\n    0xdAC17F958D2ee523a2206206994597C13D831ec7,\r\n]\r\nUSDC: constant(address) = TRIPOOL_COINS[1]\r\n\r\n\r\nis_approved: HashMap[address, HashMap[address, bool]]\r\nswap_for: HashMap[address, address]\r\n\r\nreceiver: public(address)\r\nrecovery: public(address)\r\nis_killed: public(bool)\r\n\r\nowner: public(address)\r\nemergency_owner: public(address)\r\nfuture_owner: public(address)\r\nfuture_emergency_owner: public(address)\r\n\r\n\r\n@external\r\ndef __init__(_receiver: address, _recovery: address, _owner: address, _emergency_owner: address):\r\n    \"\"\"\r\n    @notice Contract constructor\r\n    @param _receiver Address that converted tokens are transferred to.\r\n                     Should be set to an `UnderlyingBurner` deployment.\r\n    @param _recovery Address that tokens are transferred to during an\r\n                     emergency token recovery.\r\n    @param _owner Owner address. Can kill the contract, recover tokens\r\n                  and modify the recovery address.\r\n    @param _emergency_owner Emergency owner address. Can kill the contract\r\n                            and recover tokens.\r\n    \"\"\"\r\n    self.receiver = _receiver\r\n    self.recovery = _recovery\r\n    self.owner = _owner\r\n    self.emergency_owner = _emergency_owner\r\n\r\n    # yTUSD -> yUSDC\r\n    self.swap_for[0x73a052500105205d34Daf004eAb301916DA8190f] = 0xd6aD7a6750A7593E092a9B218d66C0A814a3436e\r\n    # yBUSD -> yUSDC\r\n    self.swap_for[0x04bC0Ab673d88aE9dbC9DA2380cB6B79C4BCa9aE] = 0x26EA744E5B887E5205727f55dFBE8685e3b21951\r\n\r\n\r\n@external\r\ndef burn(_coin: address) -> bool:\r\n    \"\"\"\r\n    @notice Unwrap `_coin` and transfer to the underlying burner\r\n    @param _coin Address of the coin being unwrapped\r\n    @return bool success\r\n    \"\"\"\r\n    assert not self.is_killed  # dev: is killed\r\n\r\n    # transfer coins from caller\r\n    coin: address = _coin\r\n    amount: uint256 = ERC20(coin).balanceOf(msg.sender)\r\n    if amount != 0:\r\n        ERC20(coin).transferFrom(msg.sender, self, amount)\r\n\r\n    # get actual balance in case of transfer fee or pre-existing balance\r\n    amount = ERC20(coin).balanceOf(self)\r\n\r\n    if amount != 0:\r\n        # if underlying asset is not DAI/USDC/USDT, swap yUSDC prior to unwrap\r\n        swap_for: address = self.swap_for[coin]\r\n        if swap_for != ZERO_ADDRESS:\r\n            registry_swap: address = AddressProvider(ADDRESS_PROVIDER).get_address(2)\r\n\r\n            if not self.is_approved[registry_swap][coin]:\r\n                ERC20(coin).approve(registry_swap, MAX_UINT256)\r\n                self.is_approved[registry_swap][coin] = True\r\n\r\n            amount = RegistrySwap(registry_swap).exchange_with_best_rate(coin, swap_for, amount, 0)\r\n            coin = swap_for\r\n\r\n        # unwrap yTokens for underlying asset\r\n        yERC20(coin).withdraw(amount)\r\n        underlying: address = yERC20(coin).token()\r\n\r\n        # transfer underlying to underlying burner\r\n        amount = ERC20(underlying).balanceOf(self)\r\n        response: Bytes[32] = raw_call(\r\n            underlying,\r\n            concat(\r\n                method_id(\"transfer(address,uint256)\"),\r\n                convert(self.receiver, bytes32),\r\n                convert(amount, bytes32),\r\n            ),\r\n            max_outsize=32,\r\n        )\r\n        if len(response) != 0:\r\n            assert convert(response, bool)\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef set_swap_for(_coin: address, _swap_for: address) -> bool:\r\n    \"\"\"\r\n    @notice Set an intermediate coin for coins that do not unwrap\r\n                to DAI/USDC/USDT\r\n    @param _coin Coin being burned\r\n    @param _swap_for Intermediate coin that can be swapped for\r\n                     `_coin` and unwraps to USDC\r\n    @return bool success\r\n    \"\"\"\r\n    registry: address = AddressProvider(ADDRESS_PROVIDER).get_registry()\r\n\r\n    if _swap_for == ZERO_ADDRESS:\r\n        # removing an intermediary swap, ensure the token unwraps to USDC\r\n        assert yERC20(_coin).token() == USDC\r\n    else:\r\n        # adding an intermediary swap, ensure the token does not unwrap to USDC,\r\n        # the target tokens does unwrap to USDC, and a pool exists for the swap\r\n        assert not yERC20(_coin).token() in TRIPOOL_COINS\r\n        assert yERC20(_swap_for).token() == USDC\r\n        assert Registry(registry).find_pool_for_coins(_coin, _swap_for) != ZERO_ADDRESS\r\n\r\n    self.swap_for[_coin] = _swap_for\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef recover_balance(_coin: address) -> bool:\r\n    \"\"\"\r\n    @notice Recover ERC20 tokens from this contract\r\n    @dev Tokens are sent to the recovery address\r\n    @param _coin Token address\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender in [self.owner, self.emergency_owner]  # dev: only owner\r\n\r\n    amount: uint256 = ERC20(_coin).balanceOf(self)\r\n    response: Bytes[32] = raw_call(\r\n        _coin,\r\n        concat(\r\n            method_id(\"transfer(address,uint256)\"),\r\n            convert(self.recovery, bytes32),\r\n            convert(amount, bytes32),\r\n        ),\r\n        max_outsize=32,\r\n    )\r\n    if len(response) != 0:\r\n        assert convert(response, bool)\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef set_recovery(_recovery: address) -> bool:\r\n    \"\"\"\r\n    @notice Set the token recovery address\r\n    @param _recovery Token recovery address\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender == self.owner  # dev: only owner\r\n    self.recovery = _recovery\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef set_killed(_is_killed: bool) -> bool:\r\n    \"\"\"\r\n    @notice Set killed status for this contract\r\n    @dev When killed, the `burn` function cannot be called\r\n    @param _is_killed Killed status\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender in [self.owner, self.emergency_owner]  # dev: only owner\r\n    self.is_killed = _is_killed\r\n\r\n    return True\r\n\r\n\r\n\r\n@external\r\ndef commit_transfer_ownership(_future_owner: address) -> bool:\r\n    \"\"\"\r\n    @notice Commit a transfer of ownership\r\n    @dev Must be accepted by the new owner via `accept_transfer_ownership`\r\n    @param _future_owner New owner address\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender == self.owner  # dev: only owner\r\n    self.future_owner = _future_owner\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef accept_transfer_ownership() -> bool:\r\n    \"\"\"\r\n    @notice Accept a transfer of ownership\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender == self.future_owner  # dev: only owner\r\n    self.owner = msg.sender\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef commit_transfer_emergency_ownership(_future_owner: address) -> bool:\r\n    \"\"\"\r\n    @notice Commit a transfer of ownership\r\n    @dev Must be accepted by the new owner via `accept_transfer_ownership`\r\n    @param _future_owner New owner address\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender == self.emergency_owner  # dev: only owner\r\n    self.future_emergency_owner = _future_owner\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef accept_transfer_emergency_ownership() -> bool:\r\n    \"\"\"\r\n    @notice Accept a transfer of ownership\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender == self.future_emergency_owner  # dev: only owner\r\n    self.emergency_owner = msg.sender\r\n\r\n    return True","ABI":"[{\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_receiver\"},{\"type\":\"address\",\"name\":\"_recovery\"},{\"type\":\"address\",\"name\":\"_owner\"},{\"type\":\"address\",\"name\":\"_emergency_owner\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"name\":\"burn\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_coin\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":49840},{\"name\":\"set_swap_for\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_coin\"},{\"type\":\"address\",\"name\":\"_swap_for\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":38489},{\"name\":\"recover_balance\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_coin\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":7709},{\"name\":\"set_recovery\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_recovery\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":36353},{\"name\":\"set_killed\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"bool\",\"name\":\"_is_killed\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":37610},{\"name\":\"commit_transfer_ownership\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_future_owner\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":36413},{\"name\":\"accept_transfer_ownership\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":36339},{\"name\":\"commit_transfer_emergency_ownership\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_future_owner\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":36473},{\"name\":\"accept_transfer_emergency_ownership\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":36399},{\"name\":\"receiver\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1331},{\"name\":\"recovery\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1361},{\"name\":\"is_killed\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1391},{\"name\":\"owner\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1421},{\"name\":\"emergency_owner\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1451},{\"name\":\"future_owner\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1481},{\"name\":\"future_emergency_owner\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1511}]","ContractName":"Vyper_contract","CompilerVersion":"vyper:0.2.7","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"000000000000000000000000874210cf3dc563b98c137927e7c951491a2e9af3000000000000000000000000ae9c8320a6394120ecb7b2b2678d9b4ac848d10600000000000000000000000040907540d8a6c65c637785e8f8b742ae6b0b996800000000000000000000000000669df67e4827fcc0e48a1838a8d5ab79281909","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}