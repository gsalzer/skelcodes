{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/registries/IAddressRegistry.sol\r\n\r\npragma solidity >=0.4.21 <0.7.0;\r\n\r\ninterface IAddressRegistry {\r\n    function get(bytes32 _key) external view returns(address);\r\n    function set(bytes32 _key, address _value) external;\r\n}\r\n\r\n// File: contracts/registries/AddressRegistryParent.sol\r\n\r\npragma solidity >=0.4.21 <0.7.0;\r\n\r\n\r\n\r\ncontract AddressRegistryParent is Ownable, IAddressRegistry{\r\n    bytes32[] internal _keys;\r\n    mapping(bytes32 => address) internal _registry;\r\n\r\n    event AddressAdded(bytes32 _key, address _value);\r\n\r\n    function set(bytes32 _key, address _value) external override onlyOwner() {\r\n        _check(_key, _value);\r\n        emit AddressAdded(_key, _value);\r\n        _keys.push(_key);\r\n        _registry[_key] = _value;\r\n    }\r\n\r\n    function get(bytes32 _key) external override view returns(address) {\r\n        return _registry[_key];\r\n    }\r\n\r\n    function _check(bytes32 _key, address _value) internal virtual {\r\n        require(_value != address(0), \"Nullable address\");\r\n        require(_registry[_key] == address(0), \"Existed key\");\r\n    }\r\n}\r\n\r\n// File: contracts/collateralSplits/ICollateralSplit.sol\r\n\r\npragma solidity >=0.4.21 <0.7.0;\r\n\r\n/// @title Collateral Split interface\r\n/// @notice Contains mathematical functions used to calculate relative claim\r\n/// on collateral of primary and complement assets after settlement.\r\n/// @dev Created independently from specification and published to the CollateralSplitRegistry\r\ninterface ICollateralSplit {\r\n\r\n    /// @notice Proof of collateral split contract\r\n    /// @dev Verifies that contract is a collateral split contract\r\n    /// @return true if contract is a collateral split contract\r\n    function isCollateralSplit() external pure returns(bool);\r\n\r\n    /// @notice Symbol of the collateral split\r\n    /// @dev Should be resolved through CollateralSplitRegistry contract\r\n    /// @return collateral split specification symbol\r\n    function symbol() external view returns (string memory);\r\n\r\n    /// @notice Calcs primary asset class' share of collateral at settlement.\r\n    /// @dev Returns ranged value between 0 and 1 multiplied by 10 ^ 12\r\n    /// @param _underlyingStartRoundHints specify for each oracle round of the start of Live period\r\n    /// @param _underlyingEndRoundHints specify for each oracle round of the end of Live period\r\n    /// @return _split primary asset class' share of collateral at settlement\r\n    /// @return _underlyingStarts underlying values in the start of Live period\r\n    /// @return _underlyingEnds underlying values in the end of Live period\r\n    function split(\r\n        address[] memory _oracles,\r\n        address[] memory _oracleIterators,\r\n        uint _liveTime,\r\n        uint _settleTime,\r\n        uint[] memory _underlyingStartRoundHints,\r\n        uint[] memory _underlyingEndRoundHints)\r\n    external view returns(uint _split, int[] memory _underlyingStarts, int[] memory _underlyingEnds);\r\n}\r\n\r\n// File: contracts/registries/CollateralSplitRegistry.sol\r\n\r\n// \"SPDX-License-Identifier: GNU General Public License v3.0\"\r\n\r\npragma solidity >=0.4.21 <0.7.0;\r\n\r\n\r\n\r\ncontract CollateralSplitRegistry is AddressRegistryParent {\r\n    function _check(bytes32 _key, address _value) internal virtual override{\r\n        super._check(_key, _value);\r\n\r\n        require(_key == keccak256(abi.encodePacked(ICollateralSplit(_value).symbol())), \"Incorrect hash\");\r\n\r\n        require(ICollateralSplit(_value).isCollateralSplit(), \"Should be collateral split\");\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"AddressAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"get\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CollateralSplitRegistry","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"1000000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://498201632a2619175fa80d415329f0a0961fe63e988344f11757876a7f45b2bc"}]}