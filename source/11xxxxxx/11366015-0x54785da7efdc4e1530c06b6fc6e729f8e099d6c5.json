{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two numbers, throws on overflow.\r\n     **/\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n    \r\n    /**\r\n     * @dev Integer division of two numbers, truncating the quotient.\r\n     **/\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n    \r\n    /**\r\n     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n     **/\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    \r\n    /**\r\n     * @dev Adds two numbers, throws on overflow.\r\n     **/\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n **/\r\n \r\ncontract Ownable {\r\n    address public owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n/**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender account.\r\n     **/\r\n   constructor() public {\r\n      owner = msg.sender;\r\n    }\r\n    \r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     **/\r\n    modifier onlyOwner() {\r\n      require(msg.sender == owner);\r\n      _;\r\n    }\r\n    \r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     **/\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n      require(newOwner != address(0));\r\n      emit OwnershipTransferred(owner, newOwner);\r\n      owner = newOwner;\r\n    }\r\n}\r\n/**\r\n * @title ERC20Basic interface\r\n * @dev Basic ERC20 interface\r\n **/\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n **/\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n **/\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n    mapping(address => uint256) balances;\r\n    uint256 totalSupply_;\r\n    \r\n    /**\r\n     * @dev total number of tokens in existence\r\n     **/\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n    \r\n    /**\r\n     * @dev transfer token for a specified address\r\n     * @param _to The address to transfer to.\r\n     * @param _value The amount to be transferred.\r\n     **/\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n        \r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     * @param _owner The address to query the the balance of.\r\n     * @return An uint256 representing the amount owned by the passed address.\r\n     **/\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n}\r\ncontract StandardToken is ERC20, BasicToken {\r\n    \r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\taddress public owner;\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n    mapping(address => uint256) internal tokenBalanceLedger_;\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     **/\r\n    \r\n    // Defining a constructor \r\n   \r\n    \r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n    \r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        \r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     *\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     **/\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     **/\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    \r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _addedValue The amount of tokens to increase the allowance by.\r\n     **/\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n     **/\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n    \r\n    // Defining a constructor    \r\n     constructor() public{    \r\n        owner=msg.sender; \r\n    }\r\n    \r\n\r\n    function contractBalance() public view returns (uint) {\r\n\t\treturn address(this).balance;\r\n\t}\r\n\t\r\n\tfunction PurchageToken()  public payable \r\n\t{\r\n\t\t//address _customerAddress = msg.sender;\r\n\t\tuint256 _balance = msg.value;\r\n\t\tif (_balance > msg.sender.balance) {revert(\"Amount unmatched\");}\r\n\t\t/*owner.transfer(_internalTxn);*/\r\n\t\ttokenBalanceLedger_[address(this)] = SafeMath.add(tokenBalanceLedger_[address(this)],_balance);\r\n\t\t/** Below line is for RDX. \r\n\t\temit Transfer(_customerAddress,owner,_balance);  */\t\r\n\t}\r\n\t\r\n\tfunction SellToken(address _receiver, uint256 _withdrawAmount) public\r\n\t{\r\n\t\t//uint256 _contractBalance = contractBalance();\r\n\t\tif (msg.sender != address(this) && msg.sender != owner) {revert(\"Invalid Sender Address\");}\r\n\t\t//if (_contractBalance < _withdrawAmount) {revert(\"Not enough amount\");}\r\n\t\t_receiver.transfer(_withdrawAmount);\r\n\t\ttokenBalanceLedger_[address(this)] = SafeMath.sub(tokenBalanceLedger_[address(this)],_withdrawAmount);\r\n\t\t/** Below line is for RDX.\r\n\t\temit Transfer(address(this),_receiver,_withdrawAmount);  \t*/\t\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\t\r\n    \r\n    \r\n}\r\n/**\r\n * @title Configurable\r\n * @dev Configurable varriables of the contract\r\n **/\r\ncontract Configurable { \r\n\r\n    uint256 public constant cap = 1200000*10**8;\r\n    uint256 public constant basePrice = 100*10**8; // tokens per 1 ether\r\n    uint256 public tokensSold = 0;\r\n    \r\n    uint256 public constant tokenReserve = 1200000*10**8;\r\n    uint256 public remainingTokens = 0;\r\n}\r\n/**\r\n * @title CrowdsaleToken \r\n * @dev Contract to preform crowd sale with token\r\n **/\r\ncontract CrowdsaleToken is StandardToken, Configurable, Ownable {\r\n    /**\r\n     * @dev enum of current crowd sale state\r\n     **/\r\n     enum Stages {\r\n        none,\r\n        icoStart, \r\n        icoEnd\r\n    }\r\n    \r\n    Stages currentStage;\r\n  \r\n    /**\r\n     * @dev constructor of CrowdsaleToken\r\n     **/\r\n    constructor() public {\r\n        currentStage = Stages.none;\r\n        balances[owner] = balances[owner].add(tokenReserve);\r\n        totalSupply_ = totalSupply_.add(tokenReserve);\r\n        remainingTokens = cap;\r\n        emit Transfer(address(this), owner, tokenReserve);\r\n    }\r\n    \r\n    /**\r\n     * @dev fallback function to send ether to for Crowd sale\r\n     **/\r\n    function () public payable {\r\n        require(currentStage == Stages.icoStart);\r\n        require(msg.value > 0);\r\n        require(remainingTokens > 0);\r\n        \r\n        \r\n        uint256 weiAmount = msg.value; // Calculate tokens to sell\r\n        uint256 tokens = weiAmount.mul(basePrice).div(1 ether);\r\n        uint256 returnWei = 0;\r\n        \r\n        if(tokensSold.add(tokens) > cap){\r\n            uint256 newTokens = cap.sub(tokensSold);\r\n            uint256 newWei = newTokens.div(basePrice).mul(1 ether);\r\n            returnWei = weiAmount.sub(newWei);\r\n            weiAmount = newWei;\r\n            tokens = newTokens;\r\n        }\r\n        \r\n        tokensSold = tokensSold.add(tokens); // Increment raised amount\r\n        remainingTokens = cap.sub(tokensSold);\r\n        if(returnWei > 0){\r\n            msg.sender.transfer(returnWei);\r\n            emit Transfer(address(this), msg.sender, returnWei);\r\n        }\r\n        \r\n        balances[msg.sender] = balances[msg.sender].add(tokens);\r\n        emit Transfer(address(this), msg.sender, tokens);\r\n        totalSupply_ = totalSupply_.add(tokens);\r\n        owner.transfer(weiAmount);// Send money to owner\r\n    }\r\n/**\r\n     * @dev startIco starts the public ICO\r\n     **/\r\n    function startIco() public onlyOwner {\r\n        require(currentStage != Stages.icoEnd);\r\n        currentStage = Stages.icoStart;\r\n    }\r\n/**\r\n     * @dev endIco closes down the ICO \r\n     **/\r\n    function endIco() internal {\r\n        currentStage = Stages.icoEnd;\r\n        // Transfer any remaining tokens\r\n        if(remainingTokens > 0)\r\n            balances[owner] = balances[owner].add(remainingTokens);\r\n        // transfer any remaining ETH balance in the contract to the owner\r\n        owner.transfer(address(this).balance); \r\n    }\r\n/**\r\n     * @dev finalizeIco closes down the ICO and sets needed varriables\r\n     **/\r\n    function finalizeIco() public onlyOwner {\r\n        require(currentStage != Stages.icoEnd);\r\n        endIco();\r\n    }\r\n    /*\r\n\tfunction getCommFunds(uint256 _amount)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        if(_amount <= commFunds)\r\n        {\r\n            etherBalanceLedger_[dev2]+=(_amount*20/100);\r\n            etherBalanceLedger_[dev3]+=(_amount*20/100);\r\n            etherBalanceLedger_[dev4]+=(_amount*25/100);\r\n            etherBalanceLedger_[dev5]+=(_amount*10/100);\r\n            etherBalanceLedger_[dev6]+=(_amount*25/100);\r\n            commFunds = SafeMath.sub(commFunds,_amount);\r\n        }\r\n    }\r\n\tfunction redeemTokens() public returns(uint256)\r\n    {\r\n        address _customerAddress = msg.sender;\r\n        uint256 _balance = tokenBalanceLedger_[_customerAddress];\r\n        tokenBalanceLedger_[_customerAddress] = 0;\r\n        emit Transfer(_customerAddress, address(this),_balance);\r\n        tokenSupply_ -= _balance;\r\n        commFunds += redeemTokens_(_balance, true);\r\n        return _balance;\r\n    }\r\n   \r\n    function redeemTokens_(uint256 _tokens, bool sell)\r\n        internal\r\n        view\r\n        returns(uint256)\r\n    {\r\n        uint256 _tokenSupply = tokenSupply_;\r\n        uint256 _etherReceived = 0;\r\n        uint256 _grv = grv;\r\n        uint256 tempbase = upperBound_(_grv-1);\r\n        uint256 _currentPrice = currentPrice_;\r\n        uint256 _tokenPriceIncremental = (tokenPriceIncremental_*((2)**(_grv-1)));\r\n        if((_tokenSupply - _tokens) < tempbase)\r\n        {\r\n            uint256 tokensToSell = _tokenSupply - tempbase;\r\n            uint256 a = _currentPrice - ((tokensToSell-1)*_tokenPriceIncremental);\r\n            _tokens = _tokens - tokensToSell;\r\n            _etherReceived = _etherReceived + ((tokensToSell/2)*((2*a)+((tokensToSell-1)*_tokenPriceIncremental)));\r\n            _currentPrice = _currentPrice-((tokensToSell-1)*_tokenPriceIncremental);\r\n            _tokenSupply = _tokenSupply - tokensToSell;\r\n            _grv = _grv-1 ;\r\n            _tokenPriceIncremental = (tokenPriceIncremental_*((2)**(_grv-1)));\r\n            tempbase = upperBound_(_grv-1);\r\n        }\r\n        if((_tokenSupply - _tokens) < tempbase)\r\n        {\r\n            tokensToSell = _tokenSupply - tempbase;\r\n            _tokens = _tokens - tokensToSell;\r\n             a = _currentPrice - ((tokensToSell-1)*_tokenPriceIncremental);\r\n            _etherReceived = _etherReceived + ((tokensToSell/2)*((2*a)+((tokensToSell-1)*_tokenPriceIncremental)));\r\n            _currentPrice = a;\r\n            _tokenSupply = _tokenSupply - tokensToSell;\r\n            _grv = _grv-1 ;\r\n            _tokenPriceIncremental = (tokenPriceIncremental_*((2)**(_grv-1)));\r\n            tempbase = upperBound_(_grv);\r\n        }\r\n        if(_tokens > 0)\r\n        {\r\n             a = _currentPrice - ((_tokens-1)*_tokenPriceIncremental);\r\n             _etherReceived = _etherReceived + ((_tokens/2)*((2*a)+((_tokens-1)*_tokenPriceIncremental)));\r\n             _tokenSupply = _tokenSupply - _tokens;\r\n             _currentPrice = a;\r\n        }\r\n        if(sell == true)\r\n        {\r\n            grv = _grv;\r\n            currentPrice_ = _currentPrice;\r\n        }\r\n        return _etherReceived;\r\n    }\r\n   \r\n    function upgradeContract(address[] _users, uint256[] _balances, uint modeType)\r\n    onlyAdministrator()\r\n    public\r\n    {\r\n        if(modeType == 1)\r\n        {\r\n            for(uint i = 0; i<_users.length;i++)\r\n            {\r\n                tokenBalanceLedger_[_users[i]] += _balances[i];\r\n                emit Transfer(address(this),_users[i],_balances[i]);\r\n            }\r\n        }\r\n        if(modeType == 2)\r\n        {\r\n            for(i = 0; i<_users.length;i++)\r\n            {\r\n                etherBalanceLedger_[_users[i]] += _balances[i];\r\n                commFunds += _balances[i];\r\n            }\r\n        }\r\n    }\r\n    function fundsInjection() public payable returns(bool)\r\n    {\r\n        return true;\r\n    }\r\n   \r\n    function upgradeDetails(uint256 _currentPrice, uint256 _grv, uint256 _commFunds)\r\n    onlyAdministrator()\r\n    public\r\n    {\r\n        currentPrice_ = _currentPrice;\r\n        grv = _grv;\r\n        commFunds = _commFunds;\r\n    }\r\n    function buy(address _referredBy)\r\n        public\r\n        payable\r\n        returns(uint256)\r\n    {\r\n        purchaseTokens(msg.value, _referredBy);\r\n    }\r\n    */    \r\n}\r\n/**\r\n * @title LavevelToken \r\n * @dev Contract to create the RDX Token\r\n **/\r\ncontract REDEXEXCHANGE is CrowdsaleToken {\r\n\t\r\n    string public constant name = \"REDEX EXCHANGE\";\r\n    string public constant symbol = \"RDX\";\r\n    uint32 public constant decimals = 8;\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"PurchageToken\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizeIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainingTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"basePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReserve\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"SellToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"REDEXEXCHANGE","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://859c91091cdd4c6bafe976b78aea0ab6cc389a8bbfb51c838c615683bf32f17c"}]}