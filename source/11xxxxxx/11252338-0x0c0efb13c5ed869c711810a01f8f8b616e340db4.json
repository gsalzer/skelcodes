{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.6;\r\n\r\nabstract contract ERC20TokenObject {\r\n\r\n  function totalSupply() virtual public view returns (uint);\r\n  function balanceOf(address who) virtual public view returns (uint);\r\n  function transferFrom(address from, address to, uint256 value) virtual public returns (bool);\r\n  function transfer(address to, uint value) virtual public returns (bool);\r\n  function allowance(address owner_, address spender) virtual public view returns (uint);\r\n  function approve(address spender, uint value) virtual public returns (bool);\r\n  function increaseAllowance(address spender, uint addedValue) virtual public returns (bool);\r\n  function decreaseAllowance(address spender, uint subtractedValue) virtual public returns (bool);\r\n\r\n}\r\n\r\ncontract SwapperV2 {\r\n    \r\n    address public _owner;\r\n    address public ERC20TokenAddress0;\r\n    address public ERC20TokenAddress1;\r\n    address public ERC20TokenAddress2;\r\n    address public ERC20TokenAddress3;\r\n    bool public presaleActive = true;\r\n    uint public weiRaised = 0;\r\n    uint public token0Raised = 0;\r\n    uint public token1Raised = 0;\r\n    ERC20TokenObject private ERC20Token0;\r\n    ERC20TokenObject private ERC20Token1;\r\n    ERC20TokenObject private ERC20Token2;\r\n    ERC20TokenObject private ERC20Token3;\r\n    \r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    \r\n    event SetERC20TokenAddresses(address, address, address, address);\r\n    \r\n    constructor() public {\r\n        _owner = msg.sender;\r\n    }\r\n    \r\n    function setERC20TokenAddresses(address addr0, address addr1, address addr2, address addr3) onlyOwner public returns (bool) {\r\n        ERC20TokenAddress0 = addr0;\r\n        ERC20TokenAddress1 = addr1;\r\n        ERC20TokenAddress2 = addr2;\r\n        ERC20TokenAddress3 = addr3;\r\n        ERC20Token0 = ERC20TokenObject(addr0);\r\n        ERC20Token1 = ERC20TokenObject(addr1);\r\n        ERC20Token2 = ERC20TokenObject(addr2);\r\n        ERC20Token3 = ERC20TokenObject(addr3);\r\n        emit SetERC20TokenAddresses(addr0, addr1, addr2, addr3);\r\n        return true;\r\n    } \r\n    \r\n    function depositERC20Tokens(uint amount0, uint amount1, uint amount2, uint amount3) onlyOwner public {\r\n        ERC20Token0.transferFrom(msg.sender, address(this), amount0);\r\n        ERC20Token1.transferFrom(msg.sender, address(this), amount1);\r\n        ERC20Token2.transferFrom(msg.sender, address(this), amount2);\r\n        ERC20Token3.transferFrom(msg.sender, address(this), amount3);\r\n    }\r\n    \r\n    function swapETHForERC20Token2() payable public returns (bool) {\r\n        uint amountERC20TokenToTransfer = msg.value * 2 / 125 / 1e9;\r\n        require(amountERC20TokenToTransfer > 0, \"NOT_ENOUGH_ETH\");\r\n        ERC20Token2.transfer(msg.sender, amountERC20TokenToTransfer);\r\n        weiRaised = weiRaised + msg.value;\r\n        return true;\r\n    }\r\n    \r\n    function swapETHForERC20Token3() payable public returns (bool) {\r\n        uint amountERC20TokenToTransfer = msg.value * 2 / 125 / 1e9;\r\n        require(amountERC20TokenToTransfer > 0, \"NOT_ENOUGH_ETH\");\r\n        ERC20Token3.transfer(msg.sender, amountERC20TokenToTransfer);\r\n        weiRaised = weiRaised + msg.value;\r\n        return true;\r\n    }\r\n    \r\n    function swapETHForERC20Tokens2And3() payable public returns (bool) {\r\n        uint amountERC20TokenToTransfer = msg.value * 1 / 125 / 1e9;\r\n        require(amountERC20TokenToTransfer > 0, \"NOT_ENOUGH_ETH\");\r\n        ERC20Token2.transfer(msg.sender, amountERC20TokenToTransfer);\r\n        ERC20Token3.transfer(msg.sender, amountERC20TokenToTransfer);\r\n        weiRaised = weiRaised + msg.value;\r\n        return true;\r\n    }\r\n    \r\n    function swapERC20Token0ForERC20Token2(uint inputTokens) public returns (bool) {\r\n        uint amountERC20TokenToTransfer = inputTokens * 1;\r\n        require(amountERC20TokenToTransfer > 0, \"NOT_ENOUGH_TOKENS\");\r\n        ERC20Token0.transferFrom(msg.sender, address(this), inputTokens);\r\n        ERC20Token2.transfer(msg.sender, amountERC20TokenToTransfer);\r\n        token0Raised = token0Raised + inputTokens;\r\n        return true;\r\n    }\r\n    \r\n    function swapERC20Token1ForERC20Token3(uint inputTokens) public returns (bool) {\r\n        uint amountERC20TokenToTransfer = inputTokens * 1;\r\n        require(amountERC20TokenToTransfer > 0, \"NOT_ENOUGH_TOKENS\");\r\n        ERC20Token1.transferFrom(msg.sender, address(this), inputTokens);\r\n        ERC20Token3.transfer(msg.sender, amountERC20TokenToTransfer);\r\n        token1Raised = token1Raised + inputTokens;\r\n        return true;\r\n    }\r\n    \r\n    function swapERC20Token0And1ForERC20Token2And3(uint inputTokens0, uint inputTokens1) public returns (bool) {\r\n        uint amountERC20TokenToTransfer0 = inputTokens0 * 1;\r\n        uint amountERC20TokenToTransfer1 = inputTokens1 * 1;\r\n        require(amountERC20TokenToTransfer0 > 0, \"NOT_ENOUGH_TOKENS\");\r\n        require(amountERC20TokenToTransfer1 > 0, \"NOT_ENOUGH_TOKENS\");\r\n        ERC20Token0.transferFrom(msg.sender, address(this), inputTokens0);\r\n        ERC20Token2.transfer(msg.sender, amountERC20TokenToTransfer0);\r\n        ERC20Token1.transferFrom(msg.sender, address(this), inputTokens1);\r\n        ERC20Token3.transfer(msg.sender, amountERC20TokenToTransfer1);\r\n        token0Raised = token0Raised + inputTokens0;\r\n        token1Raised = token1Raised + inputTokens1;\r\n        return true;\r\n    }\r\n    \r\n    function endPresale() onlyOwner public returns (bool) {\r\n        \r\n        ERC20Token0.transfer(msg.sender, ERC20Token0.balanceOf(address(this)));\r\n        ERC20Token1.transfer(msg.sender, ERC20Token1.balanceOf(address(this)));\r\n        ERC20Token2.transfer(msg.sender, ERC20Token2.balanceOf(address(this)));\r\n        ERC20Token3.transfer(msg.sender, ERC20Token3.balanceOf(address(this)));\r\n        payable(msg.sender).transfer(address(this).balance);\r\n        presaleActive = false;\r\n        return true;\r\n        \r\n    }\r\n    \r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"SetERC20TokenAddresses\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ERC20TokenAddress0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC20TokenAddress1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC20TokenAddress2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC20TokenAddress3\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount3\",\"type\":\"uint256\"}],\"name\":\"depositERC20Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endPresale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addr1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addr2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addr3\",\"type\":\"address\"}],\"name\":\"setERC20TokenAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"inputTokens0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inputTokens1\",\"type\":\"uint256\"}],\"name\":\"swapERC20Token0And1ForERC20Token2And3\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"inputTokens\",\"type\":\"uint256\"}],\"name\":\"swapERC20Token0ForERC20Token2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"inputTokens\",\"type\":\"uint256\"}],\"name\":\"swapERC20Token1ForERC20Token3\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapETHForERC20Token2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapETHForERC20Token3\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapETHForERC20Tokens2And3\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0Raised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1Raised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"SwapperV2","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://33e7a05c3a17a13c7d3eb94b14f902dc3a1d7fd74a9338a3114693cf788e89cd"}]}