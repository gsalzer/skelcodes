{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-10-25\r\n*/\r\n\r\n/**\r\n *Submitted for verification at Etherscan.io on 2020-10-25\r\n*/\r\n\r\n/**\r\n *Submitted for verification at Etherscan.io on 2020-06-17\r\n*/\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/BancorHelper.sol\r\n\r\n\r\ninterface IBancorConverterRegistry {\r\n    function getLiquidityPools() external view returns (address[] memory);\r\n}\r\n\r\ninterface IOwned {\r\n    function owner() external view returns (IConverter);\r\n}\r\n\r\nabstract contract ISmartToken is IOwned, IERC20 {\r\n}\r\n\r\n\r\ninterface IConverter {\r\n    function connectorTokens(uint) external view returns (IERC20);\r\n    function conversionsEnabled() external view returns (bool);\r\n    function connectorTokenCount() external view returns (uint);\r\n}\r\n\r\ncontract BancorHelper {\r\n    \r\n    address constant private eth = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n\r\n    IBancorConverterRegistry public registry = IBancorConverterRegistry(0xC0205e203F423Bcd8B2a4d6f8C8A154b0Aa60F19);\r\n\r\n    function getConverters() public view returns (IConverter[] memory goodPools) {\r\n\r\n        address[] memory smartTokens = registry.getLiquidityPools();\r\n\r\n        IConverter[] memory converters = new IConverter[](smartTokens.length);\r\n        uint goodPoolsCount;\r\n        \r\n        for (uint i = 0; i < smartTokens.length; i++) {\r\n            IConverter converter = ISmartToken(smartTokens[i]).owner();\r\n            if (isGoodPool(converter)) {\r\n                goodPoolsCount++;\r\n                converters[i] = converter;\r\n            }\r\n        }\r\n        \r\n        goodPools = new IConverter[](goodPoolsCount);\r\n        uint counter;\r\n          for (uint i = 0; i < smartTokens.length; i++) {\r\n            if (converters[i] == IConverter(address(0))) {\r\n                continue;\r\n            }\r\n            goodPools[counter] = converters[i];\r\n            counter++;\r\n        }\r\n    }\r\n    \r\n    function getTokensForConverter(IConverter converter) public view returns (IERC20[] memory tokens) {\r\n        uint tokenCount = converter.connectorTokenCount();\r\n        tokens = new IERC20[](tokenCount);\r\n        for (uint i = 0; i < tokenCount; i++) {\r\n            tokens[i] = converter.connectorTokens(i);\r\n        }\r\n    }\r\n    \r\n    function isGoodPool(IConverter converter) private view returns (bool) {\r\n       (bool ok, bytes memory data) = address(converter).staticcall(abi.encodeWithSelector(\r\n            IConverter(address(0)).conversionsEnabled.selector\r\n        ));\r\n        if (!ok || data.length == 0) {\r\n            return false;\r\n        }\r\n        if (!abi.decode(data, (bool))) {\r\n            return false;\r\n        }\r\n        \r\n        return true;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"name\":\"getConverters\",\"outputs\":[{\"internalType\":\"contract IConverter[]\",\"name\":\"goodPools\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IConverter\",\"name\":\"converter\",\"type\":\"address\"}],\"name\":\"getTokensForConverter\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract IBancorConverterRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"BancorHelper","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://9077c928ab6793ca171237026b5930c79c9a1e5468b9c437f6a68f1a0a5becf1"}]}