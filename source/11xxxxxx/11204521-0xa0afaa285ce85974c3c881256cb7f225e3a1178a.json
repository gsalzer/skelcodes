{"status":"1","message":"OK","result":[{"SourceCode":"/**************************************************************************\r\n *            ____        _                              \r\n *           / ___|      | |     __ _  _   _   ___  _ __ \r\n *          | |    _____ | |    / _` || | | | / _ \\| '__|\r\n *          | |___|_____|| |___| (_| || |_| ||  __/| |   \r\n *           \\____|      |_____|\\__,_| \\__, | \\___||_|   \r\n *                                     |___/             \r\n * \r\n **************************************************************************\r\n *\r\n *  The MIT License (MIT)\r\n * SPDX-License-Identifier: MIT\r\n *\r\n * Copyright (c) 2016-2020 Cyril Lapinte\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining\r\n * a copy of this software and associated documentation files (the\r\n * \"Software\"), to deal in the Software without restriction, including\r\n * without limitation the rights to use, copy, modify, merge, publish,\r\n * distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to\r\n * the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included\r\n * in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\n * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\n * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\n * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n *\r\n **************************************************************************\r\n *\r\n * Flatten Contract: WrappedERC20\r\n *\r\n * Git Commit:\r\n * https://github.com/c-layer/contracts/commit/9993912325afde36151b04d0247ac9ea9ffa2a93\r\n *\r\n **************************************************************************/\r\n\r\n\r\n// File: @c-layer/common/contracts/interface/IERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @title IERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n *\r\n */\r\ninterface IERC20 {\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n\r\n  function name() external view returns (string memory);\r\n  function symbol() external view returns (string memory);\r\n  function decimals() external view returns (uint256);\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address _owner) external view returns (uint256);\r\n\r\n  function transfer(address _to, uint256 _value) external returns (bool);\r\n\r\n  function allowance(address _owner, address _spender)\r\n    external view returns (uint256);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    external returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) external returns (bool);\r\n\r\n  function increaseApproval(address _spender, uint256 _addedValue)\r\n    external returns (bool);\r\n\r\n  function decreaseApproval(address _spender, uint256 _subtractedValue)\r\n    external returns (bool);\r\n}\r\n\r\n// File: @c-layer/common/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: @c-layer/common/contracts/token/TokenERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Token ERC20\r\n * @dev Token ERC20 default implementation\r\n *\r\n * @author Cyril Lapinte - <cyril.lapinte@openfiz.com>\r\n *\r\n * Error messages\r\n *   TE01: Address is invalid\r\n *   TE02: Not enougth tokens\r\n *   TE03: Approval too low\r\n */\r\ncontract TokenERC20 is IERC20 {\r\n  using SafeMath for uint256;\r\n\r\n  string internal name_;\r\n  string internal symbol_;\r\n  uint256 internal decimals_;\r\n\r\n  uint256 internal totalSupply_;\r\n  mapping(address => uint256) internal balances;\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n  constructor(\r\n    string memory _name,\r\n    string memory _symbol,\r\n    uint256 _decimals,\r\n    address _initialAccount,\r\n    uint256 _initialSupply\r\n  ) public {\r\n    name_ = _name;\r\n    symbol_ = _symbol;\r\n    decimals_ = _decimals;\r\n    totalSupply_ = _initialSupply;\r\n    balances[_initialAccount] = _initialSupply;\r\n\r\n    emit Transfer(address(0), _initialAccount, _initialSupply);\r\n  }\r\n\r\n  function name() external override view returns (string memory) {\r\n    return name_;\r\n  }\r\n\r\n  function symbol() external override view returns (string memory) {\r\n    return symbol_;\r\n  }\r\n\r\n  function decimals() external override view returns (uint256) {\r\n    return decimals_;\r\n  }\r\n\r\n  function totalSupply() external override view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  function balanceOf(address _owner) external override view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  function allowance(address _owner, address _spender)\r\n    external override view returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  function transfer(address _to, uint256 _value) external override returns (bool) {\r\n    require(_to != address(0), \"TE01\");\r\n    require(_value <= balances[msg.sender], \"TE02\");\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    external override returns (bool)\r\n  {\r\n    require(_to != address(0), \"TE01\");\r\n    require(_value <= balances[_from], \"TE02\");\r\n    require(_value <= allowed[_from][msg.sender], \"TE03\");\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) external override returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  function increaseApproval(address _spender, uint _addedValue)\r\n    external override returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue)\r\n    external override returns (bool)\r\n  {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n}\r\n\r\n// File: contracts/interface/IWrappedERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n/**\r\n * @title WrappedERC20\r\n * @dev WrappedERC20\r\n * @author Cyril Lapinte - <cyril@openfiz.com>\r\n *\r\n * Error messages\r\n */\r\nabstract contract IWrappedERC20 is IERC20 {\r\n\r\n  function base() public view virtual returns (IERC20);\r\n\r\n  function deposit(uint256 _value) public virtual returns (bool);\r\n  function depositTo(address _to, uint256 _value) public virtual returns (bool);\r\n\r\n  function withdraw(uint256 _value) public virtual returns (bool);\r\n  function withdrawFrom(address _from, address _to, uint256 _value) public virtual returns (bool);\r\n\r\n  event Deposit(address indexed _address, uint256 value);\r\n  event Withdrawal(address indexed _address, uint256 value);\r\n}\r\n\r\n// File: contracts/WrappedERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title WrappedERC20\r\n * @dev WrappedERC20\r\n * @author Cyril Lapinte - <cyril@openfiz.com>\r\n *\r\n * Error messages\r\n *   WE01: Unable to transfer tokens to address 0\r\n *   WE02: Unable to deposit the base token\r\n *   WE03: Not enougth tokens\r\n *   WE04: Approval too low\r\n *   WE05: Unable to withdraw the base token\r\n */\r\ncontract WrappedERC20 is TokenERC20, IWrappedERC20 {\r\n\r\n  IERC20 internal base_;\r\n  uint256 internal ratio_;\r\n\r\n  /**\r\n   * @dev constructor\r\n   */\r\n  constructor(\r\n    string memory _name,\r\n    string memory _symbol,\r\n    uint256 _decimals,\r\n    IERC20 _base\r\n  ) public\r\n    TokenERC20(_name, _symbol, _decimals, address(0), 0)\r\n  {\r\n    ratio_ = 10 ** _decimals.sub(_base.decimals());\r\n    base_ = _base;\r\n  }\r\n\r\n  /**\r\n   * @dev base token\r\n   */\r\n  function base() public view override returns (IERC20) {\r\n    return base_;\r\n  }\r\n\r\n  /**\r\n   * @dev deposit\r\n   */\r\n  function deposit(uint256 _value) public override returns (bool) {\r\n    return depositTo(msg.sender, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev depositTo\r\n   */\r\n  function depositTo(address _to, uint256 _value) public override returns (bool) {\r\n    require(_to != address(0), \"WE01\");\r\n    require(base_.transferFrom(msg.sender, address(this), _value), \"WE02\");\r\n\r\n    uint256 wrappedValue = _value.mul(ratio_);\r\n    balances[_to] = balances[_to].add(wrappedValue);\r\n    totalSupply_ = totalSupply_.add(wrappedValue);\r\n    emit Transfer(address(0), _to, wrappedValue);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev withdraw\r\n   */\r\n  function withdraw(uint256 _value) public override returns (bool) {\r\n    return withdrawFrom(msg.sender, msg.sender, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev withdrawFrom\r\n   */\r\n  function withdrawFrom(address _from, address _to, uint256 _value) public override returns (bool) {\r\n    require(_to != address(0), \"WE01\");\r\n    uint256 wrappedValue = _value.mul(ratio_);\r\n    require(wrappedValue <= balances[_from], \"WE03\");\r\n\r\n    if (_from != msg.sender) {\r\n      require(wrappedValue <= allowed[_from][msg.sender], \"WE04\");\r\n      allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(wrappedValue);\r\n    }\r\n\r\n    balances[_from] = balances[_from].sub(wrappedValue);\r\n    totalSupply_ = totalSupply_.sub(wrappedValue);\r\n    emit Transfer(_from, address(0), wrappedValue);\r\n\r\n    require(base_.transfer(_to, _value), \"WE05\");\r\n    return true;\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_decimals\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_base\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"base\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"depositTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"WrappedERC20","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"100000","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000001200000000000000000000000081df9efb1e970517ff5b32c2f485f791f3410164000000000000000000000000000000000000000000000000000000000000000c577261707065642043524553000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000057743524553000000000000000000000000000000000000000000000000000000","EVMVersion":"istanbul","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://5a4f150495260aac2c5c9626c7c81ff6a4d9d8477750fcd263f8c6a5dd65cfb1"}]}