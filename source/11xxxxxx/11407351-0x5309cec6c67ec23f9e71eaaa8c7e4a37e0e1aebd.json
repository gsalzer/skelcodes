{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: none\n\npragma solidity ^0.6.6;\n\n\n// \n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n// \n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// \n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n// \n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies in extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// \n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n// \n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n    \r\n    function constructor1 (string memory name, string memory symbol) internal {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\n\ninterface IUniswapV2Callee {\r\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;\r\n}\n\ninterface IUniswapV2ERC20 {\r\n\r\n}\n\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\n\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    \r\n}\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function removeLiquidityETH(\r\n            address token,\r\n            uint liquidity,\r\n            uint amountTokenMin,\r\n            uint amountETHMin,\r\n            address to,\r\n            uint deadline\r\n        ) external returns (uint amountToken, uint amountETH);\r\n}\n\ninterface IUniswapV2Pair {\r\n   \r\n}\n\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function withdraw(uint) external;\r\n\r\n    event Deposit(address indexed dst, uint256 wad);\r\n    event Withdrawal(address indexed src, uint256 wad);\r\n}\n\ninterface CatnipV2 {\r\n    function nyanV2LPStaked(address, uint256) external;   \r\n    function nyanV2LPUnstaked(address, uint256) external;\r\n    function dNyanV2LPStaked(address, uint256) external;\r\n    function dNyanV2LPUnstaked(address, uint256) external;\r\n}\n\ncontract Proxiable {\r\n    // Code position in storage is keccak256(\"PROXIABLE\") = \"0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7\"\r\n\r\n    function updateCodeAddress(address newAddress) internal {\r\n        require(\r\n            bytes32(0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7) == Proxiable(newAddress).proxiableUUID(),\r\n            \"Not compatible\"\r\n        );\r\n        assembly { // solium-disable-line\r\n            sstore(0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7, newAddress)\r\n        }\r\n    }\r\n    function proxiableUUID() public pure returns (bytes32) {\r\n        return 0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7;\r\n    }\r\n}\n\ncontract LibraryLockDataLayout {\r\n  bool public initialized = false;\r\n}\n\ncontract LibraryLock is LibraryLockDataLayout {\r\n    // Ensures no one can manipulate the Logic Contract once it is deployed.\r\n    // PARITY WALLET HACK PREVENTION\r\n\r\n    modifier delegatedOnly() {\r\n        require(initialized == true, \"The library is locked. No direct 'call' is allowed\");\r\n        _;\r\n    }\r\n    function initialize() internal {\r\n        initialized = true;\r\n    }\r\n}\n\ncontract NyanV2DataLayout is LibraryLock {\r\n    address public owner;\r\n    address public fundAddress;\r\n    address public catnipV2;\r\n    uint256 public lastBlockSent;\r\n    uint256 public totalNyanV1Swapped;\r\n    \r\n    address public nyanV1;\r\n    address public nyanV2LP;\r\n    address public dNyanV2LP;\r\n    \r\n    uint256 public rewardsPercentage;\r\n    \r\n    // Track user's staked Nyan LP\r\n    struct stakeTracker {\r\n        uint256 stakedNyanV2LP;\r\n        uint256 stakedDNyanV2LP;\r\n        uint256 nyanV2Rewards;\r\n        uint256 lastBlockChecked;\r\n        uint256 blockStaked;\r\n    }\r\n    mapping(address => stakeTracker) public userStake;\r\n\r\n    struct lpRestriction {\r\n        bool restricted;\r\n    }\r\n    mapping(address => lpRestriction) public restrictedLP;\r\n    \r\n    uint256 public ETHLGEEndBlock;\r\n    uint256 public totalNyanSupplied;\r\n    uint256 public totalETHSupplied;\r\n    uint256 public lpTokensGenerated;\r\n    bool public isETHLGEOver;\r\n    \r\n    struct ETHLGETracker {\r\n        uint256 nyanContributed;\r\n        uint256 ETHContributed;\r\n        bool claimed;\r\n    }\r\n    mapping(address => ETHLGETracker) public userETHLGE;\r\n    \r\n    address public votingContract;\r\n    \r\n    address public nyanV1LP;\r\n    \r\n    address public nyanNFT;\r\n    address public dNyanV2;\r\n\r\n    using SafeMath for uint112;\r\n\r\n    bool isVotingStakingLive;\r\n\r\n    uint256 public lastLPCount;\r\n    uint256 public nyanPoolMax;\r\n\r\n    uint256 public nyanRewardsPerDay;\r\n    uint256 public rewardsClaimed;\r\n    uint256 public lastNyanCheckpoint;\r\n\r\n    struct rewardsSync {\r\n      uint256 currentStakerCheckpoint;\r\n      uint256 currentContractNyanHeld;\r\n    }\r\n    mapping(address => rewardsSync) public rSync;\r\n    uint256 public initialNyanCheckpoint;\r\n    uint256 public initialContractNyanHeld;\r\n    bool public checkpointReset;\r\n    uint256 public totalNyanV2Held;\r\n\r\n    bool public rewardsWithdrawalPaused;\r\n    struct rewardsReset {\r\n      bool isRewardsReset;\r\n    }\r\n    mapping(address => rewardsReset) public rReset;\r\n    uint256 public miningDifficulty; //initial difficulty\r\n\r\n    struct swapTracker {\r\n      uint256 swapMaximum;\r\n      bool nyanMaxSet;\r\n      bool nyanLPMaxSet;\r\n    }\r\n    mapping(address => swapTracker) public swapTrackerMap; \r\n\r\n    address public easyBid;\r\n    mapping(address => bool) public LPWithdrawalLocked;\r\n\r\n    bool public stakingAllowed;\r\n    bool public isExitPeriod;\r\n    mapping(address => bool) public hasExited;\r\n    uint256 public finalLPAmount;\r\n}\n\ncontract NyanV2 is ERC20, NyanV2DataLayout, Proxiable {\r\n\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n    \r\n    modifier _onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    //modifier for updating staker rewards\r\n    modifier _updateRewards() {\r\n        // if (!rReset[msg.sender].isRewardsReset \r\n        //     && userStake[msg.sender].blockStaked < 11225955\r\n        //     && userStake[msg.sender].blockStaked > 1000) {\r\n        //   if (userStake[msg.sender].lastBlockChecked < lastNyanCheckpoint) {\r\n        //     userStake[msg.sender].lastBlockChecked = lastNyanCheckpoint;\r\n        //   }\r\n          \r\n        //   userStake[msg.sender].nyanV2Rewards = 0;\r\n        //   rReset[msg.sender].isRewardsReset = true;\r\n        // }\r\n        // if (miningDifficulty < 250000) {\r\n        //   miningDifficulty = 250000;\r\n        // }\r\n        \r\n        // if (block.number > userStake[msg.sender].lastBlockChecked) {\r\n        //     uint256 rewardBlocks = block.number.sub(userStake[msg.sender].lastBlockChecked);\r\n        //     uint256 stakedAmount = userStake[msg.sender].stakedNyanV2LP;\r\n        //     if (userStake[msg.sender].stakedDNyanV2LP > 0) {\r\n        //         stakedAmount = stakedAmount.add(userStake[msg.sender].stakedDNyanV2LP);\r\n        //     }\r\n        //     if (userStake[msg.sender].stakedNyanV2LP > 0) {\r\n        //         uint256 reward = stakedAmount.mul(rewardBlocks) / miningDifficulty;\r\n        //         userStake[msg.sender].nyanV2Rewards = userStake[msg.sender].nyanV2Rewards.add(reward);\r\n        //         userStake[msg.sender].lastBlockChecked = block.number;\r\n        //     }\r\n        //     rReset[msg.sender].isRewardsReset = true;\r\n        // }\r\n\r\n        _;\r\n    }\r\n    \r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event nyanV1Swapped(address indexed user, uint256 amount);\r\n    event nyanV2LPStaked(address indexed user, uint256 amount);\r\n    event nyanV2LPUnstaked(address indexed user, uint256 amount);\r\n    event dNyanV2LPStaked(address indexed user, uint256 amount);\r\n    event dNyanV2LPUnstaked(address indexed user, uint256 amount);\r\n    event nyanV2RewardsClaimed(address indexed user, uint256 amount);\r\n    event transferFeeSubtracted(address indexed user, uint256 amount);\r\n    event nyanV2LPAddressSet(address newAddress);\r\n    event dNyanV2LPAddressSet(address newAddress);\r\n    event logicContractUpdated(address newAddress);\r\n    event NyanFundAddressSet(address newAddress);\r\n\r\n\r\n    constructor() public payable ERC20(\"Nyan V2\", \"NYAN-2\") {\r\n        \r\n    }\r\n    \r\n    function nyanConstructor(address _nyanV1, address _fundAddress, uint256 _rewardsPercentage, uint256 _ETHLGEEndBlock) public  {\r\n        require(!initialized);\r\n        constructor1(\"Nyan V2\", \"NYAN-2\");\r\n        rewardsPercentage = _rewardsPercentage;\r\n        nyanV1 = _nyanV1;\r\n        fundAddress = _fundAddress;\r\n        lastBlockSent = block.number;\r\n        owner = msg.sender;\r\n        ETHLGEEndBlock = _ETHLGEEndBlock;\r\n        initialize();\r\n    }\r\n    \r\n    /** @notice Sets contract owner.\r\n      * @param _owner  Address of the new owner.\r\n      */\r\n    function setOwner(address _owner) public _onlyOwner delegatedOnly  {\r\n        owner = _owner;\r\n        \r\n        \r\n    }\r\n    \r\n    /** @notice Updates the logic contract.\r\n      * @param newCode  Address of the new logic contract.\r\n      */\r\n    function updateCode(address newCode) public _onlyOwner delegatedOnly  {\r\n        updateCodeAddress(newCode);\r\n        \r\n        emit logicContractUpdated(newCode);\r\n    }\r\n    \r\n    // /** @notice Swaps an amount NyanV1 for NyanV2.\r\n    //   * @param _amount Amount of Nyan being swapped.\r\n    //   */\r\n    // function swapNyanV1(uint256 _amount) public delegatedOnly {\r\n    //    require(isETHLGEOver, \"ETH LGE is ongoing\");\r\n    //    require(_amount <= swapTrackerMap[msg.sender].swapMaximum);\r\n    //    IERC20(nyanV1).safeTransferFrom(msg.sender, address(this), _amount);\r\n    //    uint256 currentBalance = balanceOf(msg.sender);\r\n    //    _mint(msg.sender, _amount);\r\n    //    require(balanceOf(msg.sender).sub(currentBalance) == _amount, \"Swap failed\");\r\n    //    totalNyanV1Swapped = totalNyanV1Swapped.add(_amount);\r\n    //    swapTrackerMap[msg.sender].swapMaximum = swapTrackerMap[msg.sender].swapMaximum.sub(_amount);\r\n       \r\n    //    emit nyanV1Swapped(msg.sender, _amount);\r\n    // }\r\n    \r\n    /** @notice Stake an amount of NyanV2 LP tokens.\r\n      * @param _amount Amount of liquidity tokens being staked.\r\n      */\r\n    function stakeNyanV2LP(uint256 _amount) public delegatedOnly _updateRewards {\r\n       require(stakingAllowed);\r\n       IERC20(nyanV2LP).safeTransferFrom(msg.sender, address(this), _amount);\r\n       userStake[msg.sender].stakedNyanV2LP = userStake[msg.sender].stakedNyanV2LP.add(_amount);\r\n       userStake[msg.sender].blockStaked = block.number;\r\n       //Notify CatnipV2 contract\r\n       CatnipV2(catnipV2).nyanV2LPStaked(msg.sender, _amount);\r\n      //  NyanVoting(votingContract).nyanV2LPStaked(userStake[msg.sender].stakedNyanV2LP, msg.sender);\r\n       \r\n       emit nyanV2LPStaked(msg.sender, _amount);\r\n    }\r\n    \r\n    // /** @notice Unstake an amount of NyanV2 LP tokens.\r\n    //   * @param _amount Amount of liquidity tokens being unstaked.\r\n    //   */\r\n    // function unstakeNyanV2LP(uint256 _amount) public _updateRewards delegatedOnly {\r\n    //    require(!LPWithdrawalLocked[msg.sender], \"LP Withdrawal locked\");\r\n    //    require(_amount <= userStake[msg.sender].stakedNyanV2LP, \"Insufficient stake balance\");\r\n    //    IERC20(nyanV2LP).safeTransfer(msg.sender, _amount);\r\n    //    userStake[msg.sender].stakedNyanV2LP = userStake[msg.sender].stakedNyanV2LP.sub(_amount);\r\n\r\n    //    //Notify CatnipV2 contract\r\n    //    CatnipV2(catnipV2).nyanV2LPUnstaked(msg.sender, _amount);\r\n    //   //  NyanVoting(votingContract).nyanV2LPUnstaked(userStake[msg.sender].stakedNyanV2LP, msg.sender);\r\n       \r\n    //    emit nyanV2LPUnstaked(msg.sender, _amount);\r\n    // }\r\n    \r\n    // /** @notice Stake an amount of DNyanV2 LP tokens.\r\n    //   * @param _amount Amount of liquidity tokens being staked.\r\n    //   */\r\n    // function stakeDNyanV2LP(uint256 _amount) public _updateRewards delegatedOnly {\r\n    //    IERC20(dNyanV2LP).safeTransferFrom(msg.sender, address(this), _amount);\r\n    //    userStake[msg.sender].stakedDNyanV2LP = userStake[msg.sender].stakedDNyanV2LP.add(_amount);\r\n    //    userStake[msg.sender].blockStaked = block.number;\r\n\r\n    //    //Notify CatnipV2 contract\r\n    //    CatnipV2(catnipV2).dNyanV2LPStaked(msg.sender, _amount);\r\n       \r\n    //    emit dNyanV2LPStaked(msg.sender, _amount);\r\n    // }\r\n    \r\n    /** @notice Unstake an amount of DNyanV2 LP tokens.\r\n      * @param _amount Amount of liquidity tokens being unstaked.\r\n      */\r\n    // function unstakeDNyanV2LP(uint256 _amount) public _updateRewards delegatedOnly {\r\n    //    require(!LPWithdrawalLocked[msg.sender], \"LP Withdrawal locked\");\r\n    //    require(_amount <= userStake[msg.sender].stakedDNyanV2LP, \"Insufficient stake balance\");\r\n    //    IERC20(dNyanV2LP).safeTransfer(msg.sender, _amount);\r\n    //    userStake[msg.sender].stakedDNyanV2LP = userStake[msg.sender].stakedDNyanV2LP.sub(_amount);\r\n\r\n    //    //Notify CatnipV2 contract\r\n    //    CatnipV2(catnipV2).dNyanV2LPUnstaked(msg.sender, _amount);\r\n       \r\n    //    emit dNyanV2LPUnstaked(msg.sender, _amount);\r\n    // }\r\n    \r\n    /** @notice Get where last block the voter staked was.\r\n      * @param _voter Address of the voter.\r\n      */\r\n    function getVoterBlockStaked(address _voter) delegatedOnly public view returns(uint256) {\r\n        return userStake[_voter].blockStaked;\r\n    }\r\n    \r\n    // function viewNyanRewards(address staker) delegatedOnly public view returns(uint256) {\r\n    //     uint256 currentRewards = userStake[staker].nyanV2Rewards;\r\n    //     uint256 stakerLastBlock = userStake[staker].lastBlockChecked;\r\n    //     if (!rReset[staker].isRewardsReset) {\r\n    //       stakerLastBlock = initialNyanCheckpoint;\r\n    //       currentRewards = 0;\r\n    //     } else {\r\n    //       stakerLastBlock = userStake[staker].lastBlockChecked;\r\n    //     }\r\n\r\n    //     if (block.number > stakerLastBlock) {\r\n    //         uint256 rewardBlocks = block.number.sub(stakerLastBlock);\r\n            \r\n    //         uint256 stakedAmount = userStake[staker].stakedNyanV2LP;\r\n    //         if (userStake[staker].stakedDNyanV2LP > 0) {\r\n    //             stakedAmount = stakedAmount.add(userStake[staker].stakedDNyanV2LP);\r\n    //         }\r\n    //         if (userStake[staker].stakedNyanV2LP > 0) {\r\n    //             uint256 reward = stakedAmount.mul(rewardBlocks) / miningDifficulty;\r\n    //             currentRewards = currentRewards.add(reward);\r\n                \r\n    //         }\r\n            \r\n    //     }\r\n\r\n    //     return currentRewards;\r\n    // } \r\n    \r\n    // /** @notice Get the Nyan rewards of msg.sender.*/\r\n    // function getNyanRewards() public _updateRewards delegatedOnly {\r\n    //    require(!rewardsWithdrawalPaused);\r\n    //    require(userStake[msg.sender].nyanV2Rewards > 0, \"Zero rewards balance\");\r\n    //    IERC20(address(this)).safeTransfer(msg.sender, userStake[msg.sender].nyanV2Rewards);\r\n       \r\n    //    emit nyanV2RewardsClaimed(msg.sender, userStake[msg.sender].nyanV2Rewards);\r\n    //    userStake[msg.sender].nyanV2Rewards = 0;\r\n    // }\r\n    \r\n    /** @notice Override ERC20 transfer function with transfer fee and LP algo.\r\n      * @param _recipient Recepient of the transfer.\r\n      * @param _amount Amount of tokens being transferred.\r\n      */\r\n    function transfer(address _recipient, uint256 _amount) delegatedOnly public override returns(bool) {    \r\n        if (hasExited[msg.sender]) {\r\n          require(!isExitPeriod);\r\n        }\r\n        // if((msg.sender == uniswapRouterV2) || (msg.sender == nyanV2LP)) {\r\n        //   // Check if the recipient is an address that has staked or holds LP\r\n        //   require(ERC20(nyanV2LP).balanceOf(_recipient) == 0, \"Recipient holds Nyan-2 liquidity.\");\r\n        //   transferFee = 0;\r\n        //   require(lastLPCount <= ERC20(nyanV2LP).totalSupply());\r\n        // }\r\n        // // require(ERC20(nyanV2LP).balanceOf(_recipient) == 0, \"Recipient holds Nyan-2 liquidity.\");\r\n        // if((_recipient == uniswapRouterV2) || (_recipient == nyanV2LP)) {\r\n        //   // Check if the recipient is an address that has staked or holds LP\r\n        //   require(ERC20(nyanV2LP).balanceOf(_recipient) == 0, \"Recipient holds Nyan-2 liquidity.\");\r\n        //   transferFee = 0;\r\n        // }\r\n\r\n        // lastLPCount = ERC20(nyanV2LP).totalSupply();\r\n        // emit transferFeeSubtracted(msg.sender, transferFee);\r\n\r\n        return super.transfer(_recipient, _amount);\r\n    }\r\n    \r\n    /** @notice Override ERC20 transferFrom function with transfer fee.\r\n      * @param _sender Owner of the tokens being transferred.\r\n      * @param _recipient Recepient of the transfer.\r\n      * @param _amount Amount of tokens being transferred.\r\n      */\r\n    function transferFrom(address _sender, address _recipient, uint256 _amount) delegatedOnly public override returns(bool) {\r\n        if (hasExited[msg.sender]) {\r\n          require(!isExitPeriod);\r\n        }\r\n        // if((msg.sender == uniswapRouterV2) || (msg.sender == nyanV2LP)) { \r\n        //   require(ERC20(nyanV2LP).balanceOf(_sender) == 0, \"Recipient holds Nyan-2 liquidity.\");\r\n        //   // require(userStake[msg.sender].nyanV2LPStaked == 0);\r\n        // }\r\n\r\n        // if ((_recipient == uniswapRouterV2) || (_recipient == nyanV2LP)) {\r\n        //   // Check if the recipient is an address that has staked or holds LP\r\n        //   require(ERC20(nyanV2LP).balanceOf(_sender) == 0, \"Recipient holds Nyan-2 liquidity.\");\r\n       \r\n        // }\r\n        \r\n        // emit transferFeeSubtracted(msg.sender, transferFee);\r\n       \r\n        return super.transferFrom(_sender, _recipient, _amount);\r\n    }\r\n      \r\n    event UniswapAddressesSet(address factory, address router);\r\n    event LGEEndBlockSet(uint256 block);\r\n    event NyanxETHSupplied(address indexed user, uint256 nyanAmount, uint256 ETHAmount);\r\n    \r\n    \r\n    \r\n    address public uniswapRouterV2;\r\n    address public uniswapFactory;\r\n    \r\n    // /** @notice Set the nyanV2LP address.\r\n    //   */\r\n    // function getV2UniPair() public returns (address) {\r\n    //     require(nyanV2LP == address(0));\r\n    //     nyanV2LP = IUniswapV2Factory(uniswapFactory).createPair(\r\n    //       address(IUniswapV2Router02(uniswapRouterV2).WETH()),\r\n    //       address(this)\r\n    //     ); \r\n    //     restrictedLP[nyanV2LP].restricted = true;\r\n    //     return nyanV2LP;\r\n    // }\r\n    \r\n    // /** @notice Add NyanV1 and ETH to the contract.\r\n    //   * @param _nyanAmount Amount of NyanV1 to add.\r\n    //   */\r\n    // function addNyanAndETH(uint256 _nyanAmount) public payable delegatedOnly {\r\n    //   require(!isETHLGEOver, \"ETH LGE is over\");\r\n    //   require (_nyanAmount > 0, \"Insufficient Nyan\");\r\n    //   uint256 ETHFee = _nyanAmount.div(10);\r\n    //   require(ETHFee <= msg.value, \"Insufficient ETH\");\r\n    //   IERC20(nyanV1).safeTransferFrom(msg.sender, address(this), _nyanAmount);\r\n    //   _mint(address(this), _nyanAmount);\r\n    //   totalNyanV1Swapped = totalNyanV1Swapped.add(_nyanAmount);\r\n    //   userETHLGE[msg.sender].nyanContributed = userETHLGE[msg.sender].nyanContributed.add(_nyanAmount);\r\n    //   userETHLGE[msg.sender].ETHContributed = userETHLGE[msg.sender].ETHContributed.add(msg.value);\r\n    //   totalNyanSupplied = totalNyanSupplied.add(_nyanAmount);\r\n    //   totalETHSupplied = totalETHSupplied.add(msg.value);\r\n    //   emit NyanxETHSupplied(msg.sender, _nyanAmount, msg.value);\r\n    // } \r\n    \r\n    /** @notice Initialize the NyanV2/ETH pool on UniswapV2.\r\n      */\r\n    // function initializeV2ETHPool() public {\r\n    //     require(block.number >= ETHLGEEndBlock, \"The ETH LGE has not ended\");\r\n    //     require(!isETHLGEOver, \"ETH LGE complete\");\r\n    \r\n    //     IUniswapV2Pair v1LP = IUniswapV2Pair(nyanV1LP);\r\n    //     uint112 v1ETH;\r\n    //     uint112 v1Nyan;\r\n    //     uint32 lastTimestamp;\r\n    //     (v1ETH, v1Nyan, lastTimestamp) = v1LP.getReserves();\r\n    //     uint256 lgeETHxV1Nyan = address(this).balance.mul(v1Nyan);\r\n    //     uint256 divV1ETH = lgeETHxV1Nyan.div(v1ETH);\r\n        \r\n    //     IUniswapV2Pair v2LP = IUniswapV2Pair(nyanV2LP);\r\n    //     address WETH = IUniswapV2Router02(uniswapRouterV2).WETH();\r\n    //     uint256 ETHBalance = address(this).balance;\r\n    //     IWETH(WETH).deposit{value: ETHBalance}();\r\n    //     IWETH(WETH).transfer(address(v2LP), ETHBalance);\r\n    //     ERC20(address(this)).transfer(address(v2LP), divV1ETH);\r\n    //     v2LP.mint(address(this));\r\n        \r\n    //     require(ERC20(nyanV2LP).balanceOf(address(this)) > 0, \"LP generation failed\");\r\n    //     lpTokensGenerated = ERC20(nyanV2LP).balanceOf(address(this));\r\n    //     isETHLGEOver = true;\r\n    // }\r\n    \r\n    // /** @notice Allows an LGE participant to claim a portion of NyanV2/ETH LP held by the contract.\r\n    //   */\r\n    // function claimETHLP() public {\r\n    //     require(isETHLGEOver, \"ETH LGE is still ongoing\");\r\n    //     require(userETHLGE[msg.sender].nyanContributed > 0);\r\n    //     require(!userETHLGE[msg.sender].claimed);\r\n    //     uint256 claimableLP = userETHLGE[msg.sender].nyanContributed.mul(lpTokensGenerated).div(totalNyanSupplied);\r\n    //     ERC20(nyanV2LP).transfer(msg.sender, claimableLP);\r\n    //     string memory tier;\r\n    //     if (userETHLGE[msg.sender].ETHContributed < 3000000000000000000) {\r\n    //         tier = \"COMMON\";\r\n    //     }\r\n    //     if (userETHLGE[msg.sender].ETHContributed < 6000000000000000000) {\r\n    //         tier = \"UNCOMMON\";\r\n    //     }\r\n    //     if (userETHLGE[msg.sender].ETHContributed < 18000000000000000000) {\r\n    //         tier = \"RARE\";\r\n    //     }\r\n    //     if (userETHLGE[msg.sender].ETHContributed < 36000000000000000000) {\r\n    //         tier = \"EPIC\";\r\n    //     }\r\n    //     if (userETHLGE[msg.sender].ETHContributed > 36000000000000000000) {\r\n    //         tier = \"LEGENDARY\";\r\n    //     }\r\n    //     NyanNFT(nyanNFT).createNFT(msg.sender, tier);\r\n    //     userETHLGE[msg.sender].claimed = true;\r\n    // }\r\n    \r\n\r\n    // /** @notice Allows an LGE participant to claim a portion of NyanV2/ETH LP held by the contract and stake it.\r\n    //   */\r\n    // function claimETHLPAndStake() public {\r\n    //     require(isETHLGEOver, \"ETH LGE is still ongoing\");\r\n    //     require(userETHLGE[msg.sender].nyanContributed > 0);\r\n    //     require(!userETHLGE[msg.sender].claimed);\r\n    //     uint256 claimableLP = userETHLGE[msg.sender].nyanContributed.mul(lpTokensGenerated).div(totalNyanSupplied);\r\n    //     string memory tier;\r\n    //     if (userETHLGE[msg.sender].ETHContributed < 3000000000000000000) {\r\n    //         tier = \"COMMON\";\r\n    //     }\r\n    //     if (userETHLGE[msg.sender].ETHContributed < 6000000000000000000) {\r\n    //         tier = \"UNCOMMON\";\r\n    //     }\r\n    //     if (userETHLGE[msg.sender].ETHContributed < 18000000000000000000) {\r\n    //         tier = \"RARE\";\r\n    //     }\r\n    //     if (userETHLGE[msg.sender].ETHContributed < 36000000000000000000) {\r\n    //         tier = \"EPIC\";\r\n    //     }\r\n    //     if (userETHLGE[msg.sender].ETHContributed >= 36000000000000000000) {\r\n    //         tier = \"LEGENDARY\";\r\n    //     }\r\n    //     NyanNFT(nyanNFT).createNFT(msg.sender, tier);\r\n        \r\n    //     userStake[msg.sender].stakedNyanV2LP = userStake[msg.sender].stakedNyanV2LP.add(claimableLP);\r\n    //     userStake[msg.sender].blockStaked = block.number;\r\n    //     //Notify CatnipV2 contract\r\n    //     CatnipV2(catnipV2).nyanV2LPStaked(msg.sender, userStake[msg.sender].stakedNyanV2LP);\r\n    //     if (isVotingStakingLive) {\r\n    //       NyanVoting(votingContract).nyanV2LPStaked(userStake[msg.sender].stakedNyanV2LP, msg.sender);\r\n    //     }\r\n    //     userETHLGE[msg.sender].claimed = true;\r\n    // }\r\n\r\n    // /** @notice Sets if the Voting contract is live.\r\n    //   * @param _isVoting bool\r\n    //   */\r\n    // function setIsVoting(bool _isVoting) public _onlyOwner {\r\n    //     isVotingStakingLive = _isVoting;\r\n    // }\r\n\r\n    // function updateRewards() public _updateRewards {\r\n\r\n    // }\r\n\r\n    // function setIsRewarding(bool _isRewarding) public _onlyOwner {\r\n    //   rewardsWithdrawalPaused = _isRewarding;\r\n      \r\n    // }\r\n\r\n    // function setLastLPCount() public _onlyOwner {\r\n    //   lastLPCount = ERC20(nyanV2LP).totalSupply();\r\n    // }\r\n\r\n    // function setInitialCheckpoint(uint256 _block) public _onlyOwner {\r\n    //   initialNyanCheckpoint = _block;\r\n    // }\r\n\r\n    // function setMiningDifficulty(uint256 _amount) public _onlyOwner {\r\n    //   miningDifficulty = _amount;\r\n    // }\r\n\r\n    // function setSwapMax(address holder, uint256 amount) public _onlyOwner {\r\n    //   swapTrackerMap[holder].swapMaximum = amount;\r\n    // }\r\n\r\n    // function setUserBlock(address staker, uint256 _block) public _onlyOwner {\r\n    //   userStake[staker].blockStaked = _block;\r\n    // }\r\n\r\n    // function setEasyBidAddress(address _easyBid) public _onlyOwner {\r\n    //   easyBid = _easyBid;\r\n    // }\r\n\r\n    // function lockUserLP(address staker, bool lock) public {\r\n    //   require(msg.sender == easyBid);\r\n    //   LPWithdrawalLocked[staker] = lock;\r\n    // }\r\n\r\n    // function reduceLPAmount(address staker, uint256 amount) public {\r\n    //   require(msg.sender == easyBid);\r\n    //   userStake[staker].stakedNyanV2LP = userStake[staker].stakedNyanV2LP.sub(amount);\r\n    //   CatnipV2(catnipV2).nyanV2LPUnstaked(staker, amount);\r\n    // }\r\n\r\n    function getStakedNyanV2LP(address staker) public view returns(uint256) {\r\n      return userStake[staker].stakedNyanV2LP;\r\n    }\r\n\r\n    function getBlockStaked(address staker) public view returns(uint256) {\r\n      return userStake[staker].blockStaked;\r\n    }\r\n\r\n    function setIsExitingPeriod(bool _isPeriod) public _onlyOwner {\r\n      isExitPeriod = _isPeriod;\r\n    }\r\n\r\n    function setFinalLPAmount(uint256 _amount) public _onlyOwner {\r\n      finalLPAmount = _amount;\r\n    }\r\n\r\n    function isStakingAllowed(bool _canStake) public _onlyOwner {\r\n      stakingAllowed = _canStake;\r\n    }\r\n\r\n    function getUserFundETH(address user) public view returns(uint256){\r\n      uint256 userLPStake = userStake[user].stakedNyanV2LP;\r\n      uint256 fundETH = fundAddress.balance;\r\n      uint256 userFundETH = fundETH.mul(userLPStake).div(finalLPAmount);\r\n\r\n      return userFundETH;\r\n    }\r\n\r\n\r\n    function claimAndExit() public {\r\n      require(isExitPeriod);\r\n      require(!hasExited[msg.sender]);\r\n      //make sure to set final LP amount\r\n      //get users staked LP amount\r\n      require(userStake[msg.sender].blockStaked < block.number);\r\n      uint256 userLPStake = userStake[msg.sender].stakedNyanV2LP;\r\n      //take LP and remove liquidity from Uniswap pool and\r\n      //send LP ETH and Nyan-2 to user\r\n      IERC20(nyanV2LP).approve(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, IERC20(nyanV2LP).totalSupply());\r\n      IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D).removeLiquidityETH(\r\n        address(this),\r\n        userLPStake,\r\n        0,\r\n        0,\r\n        msg.sender,\r\n        now + 3 days\r\n      );\r\n\r\n      // //get user's percentage of ETH in Nyan fund\r\n      uint256 fundETH = fundAddress.balance;\r\n      uint256 userFundETH = fundETH.mul(userLPStake).div(finalLPAmount);\r\n      // //call function in connector to send ETH to the user\r\n      Connector(0x60d70dF1c783b1E5489721c443465684e2756555).exitClaim(msg.sender, userFundETH);\r\n      // //reduce the user's stake to 0\r\n      userStake[msg.sender].stakedNyanV2LP = 0;\r\n      // //update NIP contract\r\n      CatnipV2(catnipV2).nyanV2LPUnstaked(msg.sender, userLPStake);\r\n      NyanVoting(votingContract).nyanV2LPUnstaked(userStake[msg.sender].stakedNyanV2LP, msg.sender);\r\n      // //add user to exited list, they cannot move Nyan until isExitingPeriod is false\r\n      hasExited[msg.sender] = true;\r\n    }\r\n\r\n    function setVotingContract(address _votingContract) public _onlyOwner {\r\n      votingContract = _votingContract;\r\n    }\r\n\r\n    receive() external payable {\r\n        \r\n    }\r\n\r\n}\n\ninterface NyanVoting {\r\n    function nyanV2LPStaked(uint256, address) external;\r\n    function nyanV2LPUnstaked(uint256, address) external;\r\n}\n\ninterface NyanNFT {\r\n    function createNFT(address, string calldata) external;\r\n}\n\ninterface CatnipV1 {\r\n    function getAddressStakeAmount(address _account) external returns(uint256);\r\n}\n\ninterface Connector {\r\n  function exitClaim(address user, uint256 amount) external;\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"}],\"name\":\"LGEEndBlockSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"NyanFundAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nyanAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ETHAmount\",\"type\":\"uint256\"}],\"name\":\"NyanxETHSupplied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"UniswapAddressesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"dNyanV2LPAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"dNyanV2LPStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"dNyanV2LPUnstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"logicContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"nyanV1Swapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"nyanV2LPAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"nyanV2LPStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"nyanV2LPUnstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"nyanV2RewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFeeSubtracted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ETHLGEEndBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"LPWithdrawalLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"catnipV2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpointReset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAndExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dNyanV2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dNyanV2LP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"easyBid\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalLPAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getBlockStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStakedNyanV2LP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserFundETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"getVoterBlockStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasExited\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialContractNyanHeld\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialNyanCheckpoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isETHLGEOver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isExitPeriod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_canStake\",\"type\":\"bool\"}],\"name\":\"isStakingAllowed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBlockSent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastLPCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastNyanCheckpoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpTokensGenerated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"miningDifficulty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nyanV1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fundAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardsPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ETHLGEEndBlock\",\"type\":\"uint256\"}],\"name\":\"nyanConstructor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nyanNFT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nyanPoolMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nyanRewardsPerDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nyanV1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nyanV1LP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nyanV2LP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rReset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isRewardsReset\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rSync\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentStakerCheckpoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentContractNyanHeld\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"restrictedLP\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"restricted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsWithdrawalPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setFinalLPAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isPeriod\",\"type\":\"bool\"}],\"name\":\"setIsExitingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_votingContract\",\"type\":\"address\"}],\"name\":\"setVotingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeNyanV2LP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapTrackerMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"swapMaximum\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"nyanMaxSet\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"nyanLPMaxSet\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalETHSupplied\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalNyanSupplied\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalNyanV1Swapped\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalNyanV2Held\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouterV2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newCode\",\"type\":\"address\"}],\"name\":\"updateCode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userETHLGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nyanContributed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ETHContributed\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakedNyanV2LP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedDNyanV2LP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nyanV2Rewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastBlockChecked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockStaked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"NyanV2","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}