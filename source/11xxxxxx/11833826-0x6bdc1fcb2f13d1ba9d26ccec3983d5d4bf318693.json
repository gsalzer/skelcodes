{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/dydx/DYDXERC3156.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// Derived from https://github.com/kollateral/kollateral/blob/master/protocol/contracts/liquidity/kollateral/KollateralLiquidityProxy.sol\\npragma solidity ^0.7.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"erc3156/contracts/interfaces/IERC3156FlashBorrower.sol\\\";\\nimport \\\"erc3156/contracts/interfaces/IERC3156FlashLender.sol\\\";\\nimport \\\"./interfaces/SoloMarginLike.sol\\\";\\nimport \\\"./interfaces/DYDXFlashBorrowerLike.sol\\\";\\nimport \\\"./libraries/DYDXDataTypes.sol\\\";\\n\\n\\ncontract DYDXERC3156 is IERC3156FlashLender, DYDXFlashBorrowerLike {\\n    using SafeMath for uint256;\\n\\n    bytes32 public constant CALLBACK_SUCCESS = keccak256(\\\"ERC3156FlashBorrower.onFlashLoan\\\");\\n    uint256 internal NULL_ACCOUNT_ID = 0;\\n    uint256 internal NULL_MARKET_ID = 0;\\n    DYDXDataTypes.AssetAmount internal NULL_AMOUNT = DYDXDataTypes.AssetAmount({\\n        sign: false,\\n        denomination: DYDXDataTypes.AssetDenomination.Wei,\\n        ref: DYDXDataTypes.AssetReference.Delta,\\n        value: 0\\n    });\\n    bytes internal NULL_DATA = \\\"\\\";\\n\\n    SoloMarginLike public soloMargin;\\n    mapping(address => uint256) public tokenAddressToMarketId;\\n    mapping(address => bool) public tokensRegistered;\\n\\n    /// @param soloMargin_ DYDX SoloMargin address\\n    constructor (SoloMarginLike soloMargin_) {\\n        soloMargin = soloMargin_;\\n\\n        for (uint256 marketId = 0; marketId <= 3; marketId++) {\\n            address token = soloMargin.getMarketTokenAddress(marketId);\\n            tokenAddressToMarketId[token] = marketId;\\n            tokensRegistered[token] = true;\\n        }\\n    }\\n\\n    /**\\n     * @dev From ERC-3156. The amount of currency available to be lended.\\n     * @param token The loan currency.\\n     * @return The amount of `token` that can be borrowed.\\n     */\\n    function maxFlashLoan(address token) external view override returns (uint256) {\\n        return tokensRegistered[token] == true ? IERC20(token).balanceOf(address(soloMargin)) : 0;\\n    }\\n\\n    /**\\n     * @dev From ERC-3156. The fee to be charged for a given loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @return The amount of `token` to be charged for the loan, on top of the returned principal.\\n     */\\n    function flashFee(address token, uint256 amount) public view override returns (uint256) {\\n        require(tokensRegistered[token], \\\"Unsupported currency\\\");\\n        return 2;\\n    }\\n\\n    /**\\n     * @dev From ERC-3156. Loan `value` tokens to `receiver`, which needs to return them plus fee to this contract within the same transaction.\\n     * @param receiver The contract receiving the tokens, needs to implement the `onFlashLoan(address user, uint256 value, uint256 fee, bytes calldata)` interface.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param userData A data parameter to be passed on to the `receiver` for any custom use.\\n     */\\n    function flashLoan(IERC3156FlashBorrower receiver, address token, uint256 amount, bytes memory userData) external override returns(bool) {\\n        DYDXDataTypes.ActionArgs[] memory operations = new DYDXDataTypes.ActionArgs[](3);\\n        operations[0] = getWithdrawAction(token, amount);\\n        operations[1] = getCallAction(abi.encode(msg.sender, receiver, token, amount, userData));\\n        operations[2] = getDepositAction(token, amount.add(flashFee(token, amount)));\\n        DYDXDataTypes.AccountInfo[] memory accountInfos = new DYDXDataTypes.AccountInfo[](1);\\n        accountInfos[0] = getAccountInfo();\\n\\n        soloMargin.operate(accountInfos, operations);\\n        return true;\\n    }\\n\\n    /// @dev DYDX flash loan callback. It sends the value borrowed to `receiver`, and takes it back plus a `flashFee` after the ERC3156 callback.\\n    function callFunction(\\n        address sender,\\n        DYDXDataTypes.AccountInfo memory,\\n        bytes memory data\\n    )\\n    public override\\n    {\\n        require(msg.sender == address(soloMargin), \\\"Callback only from SoloMargin\\\");\\n        require(sender == address(this), \\\"FlashLoan only from this contract\\\");\\n\\n        (address origin, IERC3156FlashBorrower receiver, address token, uint256 amount, bytes memory userData) = \\n            abi.decode(data, (address, IERC3156FlashBorrower, address, uint256, bytes));\\n\\n        uint256 fee = flashFee(token, amount);\\n\\n        // Transfer to `receiver`\\n        require(IERC20(token).transfer(address(receiver), amount), \\\"Transfer failed\\\");\\n        require(\\n            receiver.onFlashLoan(origin, token, amount, fee, userData) == CALLBACK_SUCCESS,\\n            \\\"Callback failed\\\"\\n        );\\n        require(IERC20(token).transferFrom(address(receiver), address(this), amount.add(fee)), \\\"Transfer failed\\\");\\n\\n        // Approve the SoloMargin contract allowance to *pull* the owed amount\\n        IERC20(token).approve(address(soloMargin), amount.add(fee));            \\n    }\\n\\n    function getAccountInfo() internal view returns (DYDXDataTypes.AccountInfo memory) {\\n        return DYDXDataTypes.AccountInfo({\\n            owner: address(this),\\n            number: 1\\n        });\\n    }\\n\\n    function getWithdrawAction(address token, uint256 amount)\\n    internal\\n    view\\n    returns (DYDXDataTypes.ActionArgs memory)\\n    {\\n        return DYDXDataTypes.ActionArgs({\\n            actionType: DYDXDataTypes.ActionType.Withdraw,\\n            accountId: 0,\\n            amount: DYDXDataTypes.AssetAmount({\\n                sign: false,\\n                denomination: DYDXDataTypes.AssetDenomination.Wei,\\n                ref: DYDXDataTypes.AssetReference.Delta,\\n                value: amount\\n            }),\\n            primaryMarketId: tokenAddressToMarketId[token],\\n            secondaryMarketId: NULL_MARKET_ID,\\n            otherAddress: address(this),\\n            otherAccountId: NULL_ACCOUNT_ID,\\n            data: NULL_DATA\\n        });\\n    }\\n\\n    function getDepositAction(address token, uint256 repaymentAmount)\\n    internal\\n    view\\n    returns (DYDXDataTypes.ActionArgs memory)\\n    {\\n        return DYDXDataTypes.ActionArgs({\\n            actionType: DYDXDataTypes.ActionType.Deposit,\\n            accountId: 0,\\n            amount: DYDXDataTypes.AssetAmount({\\n                sign: true,\\n                denomination: DYDXDataTypes.AssetDenomination.Wei,\\n                ref: DYDXDataTypes.AssetReference.Delta,\\n                value: repaymentAmount\\n            }),\\n            primaryMarketId: tokenAddressToMarketId[token],\\n            secondaryMarketId: NULL_MARKET_ID,\\n            otherAddress: address(this),\\n            otherAccountId: NULL_ACCOUNT_ID,\\n            data: NULL_DATA\\n        });\\n    }\\n\\n    function getCallAction(bytes memory data_)\\n    internal\\n    view\\n    returns (DYDXDataTypes.ActionArgs memory)\\n    {\\n        return DYDXDataTypes.ActionArgs({\\n            actionType: DYDXDataTypes.ActionType.Call,\\n            accountId: 0,\\n            amount: NULL_AMOUNT,\\n            primaryMarketId: NULL_MARKET_ID,\\n            secondaryMarketId: NULL_MARKET_ID,\\n            otherAddress: address(this),\\n            otherAccountId: NULL_ACCOUNT_ID,\\n            data: data_\\n        });\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"erc3156/contracts/interfaces/IERC3156FlashBorrower.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <=0.8.0;\\n\\n\\ninterface IERC3156FlashBorrower {\\n\\n    /**\\n     * @dev Receive a flash loan.\\n     * @param initiator The initiator of the loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param fee The additional amount of tokens to repay.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     * @return The keccak256 hash of \\\"ERC3156FlashBorrower.onFlashLoan\\\"\\n     */\\n    function onFlashLoan(\\n        address initiator,\\n        address token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"erc3156/contracts/interfaces/IERC3156FlashLender.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <=0.8.0;\\nimport \\\"./IERC3156FlashBorrower.sol\\\";\\n\\n\\ninterface IERC3156FlashLender {\\n\\n    /**\\n     * @dev The amount of currency available to be lended.\\n     * @param token The loan currency.\\n     * @return The amount of `token` that can be borrowed.\\n     */\\n    function maxFlashLoan(\\n        address token\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev The fee to be charged for a given loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @return The amount of `token` to be charged for the loan, on top of the returned principal.\\n     */\\n    function flashFee(\\n        address token,\\n        uint256 amount\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Initiate a flash loan.\\n     * @param receiver The receiver of the tokens in the loan, and the receiver of the callback.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     */\\n    function flashLoan(\\n        IERC3156FlashBorrower receiver,\\n        address token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool);\\n}\"\r\n    },\r\n    \"contracts/dydx/interfaces/SoloMarginLike.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.7.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../libraries/DYDXDataTypes.sol\\\";\\n\\ninterface SoloMarginLike {\\n    function operate(DYDXDataTypes.AccountInfo[] memory accounts, DYDXDataTypes.ActionArgs[] memory actions) external;\\n    function getMarketTokenAddress(uint256 marketId) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/dydx/interfaces/DYDXFlashBorrowerLike.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.7.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../libraries/DYDXDataTypes.sol\\\";\\n\\n/**\\n * @title DYDXFlashBorrowerLike\\n * @author dYdX\\n *\\n * Interface that Callees for Solo must implement in order to ingest data.\\n */\\ninterface DYDXFlashBorrowerLike {\\n\\n    // ============ Public Functions ============\\n\\n    /**\\n     * Allows users to send this contract arbitrary data.\\n     *\\n     * @param  sender       The msg.sender to Solo\\n     * @param  accountInfo  The account from which the data is being sent\\n     * @param  data         Arbitrary data given by the sender\\n     */\\n    function callFunction(\\n        address sender,\\n        DYDXDataTypes.AccountInfo memory accountInfo,\\n        bytes memory data\\n    )\\n    external;\\n}\"\r\n    },\r\n    \"contracts/dydx/libraries/DYDXDataTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// Derived from https://github.com/kollateral/kollateral\\npragma solidity ^0.7.5;\\n\\nlibrary DYDXDataTypes {\\n    enum ActionType {\\n        Deposit,   // supply tokens\\n        Withdraw,  // flashLoan tokens\\n        Transfer,  // transfer balance between accounts\\n        Buy,       // buy an amount of some token (externally)\\n        Sell,      // sell an amount of some token (externally)\\n        Trade,     // trade tokens against another account\\n        Liquidate, // liquidate an undercollateralized or expiring account\\n        Vaporize,  // use excess tokens to zero-out a completely negative account\\n        Call       // send arbitrary data to an address\\n    }\\n\\n    enum AssetDenomination {\\n        Wei, // the amount is denominated in wei\\n        Par  // the amount is denominated in par\\n    }\\n\\n    enum AssetReference {\\n        Delta, // the amount is given as a delta from the current value\\n        Target // the amount is given as an exact number to end up at\\n    }\\n\\n    struct AssetAmount {\\n        bool sign; // true if positive\\n        AssetDenomination denomination;\\n        AssetReference ref;\\n        uint256 value;\\n    }\\n\\n    struct Wei {\\n        bool sign; // true if positive\\n        uint256 value;\\n    }\\n\\n    struct ActionArgs {\\n        ActionType actionType;\\n        uint256 accountId;\\n        AssetAmount amount;\\n        uint256 primaryMarketId;\\n        uint256 secondaryMarketId;\\n        address otherAddress;\\n        uint256 otherAccountId;\\n        bytes data;\\n    }\\n\\n    struct AccountInfo {\\n        address owner;  // The address that owns the account\\n        uint256 number; // A nonce that allows a single address to control many accounts\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract SoloMarginLike\",\"name\":\"soloMargin_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CALLBACK_SUCCESS\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"internalType\":\"struct DYDXDataTypes.AccountInfo\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"callFunction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"flashFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC3156FlashBorrower\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"flashLoan\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"maxFlashLoan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"soloMargin\",\"outputs\":[{\"internalType\":\"contract SoloMarginLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenAddressToMarketId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokensRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DYDXERC3156","CompilerVersion":"v0.7.5+commit.eb77ed08","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000001e0447b19bb6ecfdae1e4ae1694b0c3659614e4e","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}