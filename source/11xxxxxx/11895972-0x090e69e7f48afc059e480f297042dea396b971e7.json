{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/srv/tecmie/algovest/AVS-staking/contracts/stakin_contract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// File: node_modules@openzeppelin\\\\contracts\\\\token\\\\ERC20\\\\IERC20.sol\\n// File: node_modules@openzeppelin\\\\contracts\\\\math\\\\SafeMath.sol\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract AlgoVestStaking is Ownable {\\n    using SafeMath for uint256;\\n    IERC20 public avsAddress;\\n    uint256 public zeroDayStartTime;\\n    uint256 public dayDurationSec;\\n\\n    modifier onlyWhenOpen {\\n        require(\\n            now >= zeroDayStartTime,\\n            \\\"StakingAVS: Contract is not open yet\\\"\\n        );\\n        _;\\n    }\\n\\n    uint256 public allAVSTokens;\\n    uint256 public totalStakers;\\n    uint256 public totalStakedAVS;\\n    uint256 public unfreezedAVSTokens;\\n    uint256 public freezedAVSTokens;\\n    event AVSTokenIncome(address who, uint256 amount, uint256 day);\\n    event AVSTokenOutcome(address who, uint256 amount, uint256 day);\\n    event TokenFreezed(address who, uint256 amount, uint256 day);\\n    event TokenUnfreezed(address who, uint256 amount, uint256 day);\\n\\n    uint256 public stakeIdLast;\\n    uint256 public constant maxNumDays = 180;\\n    struct StakeInfo {\\n        uint256 stakeId;\\n        uint256 startDay;\\n        uint256 numDaysStake;\\n        uint256 stakedAVS;\\n        uint256 freezedRewardAVSTokens;\\n    }\\n    mapping(address => StakeInfo[]) public stakeList;\\n    event StakeStart(\\n        address who,\\n        uint256 AVSIncome,\\n        uint256 AVSEarnings,\\n        uint256 numDays,\\n        uint256 day,\\n        uint256 stakeId\\n    );\\n    event StakeEnd(\\n        address who,\\n        uint256 stakeId,\\n        uint256 AVSEarnings,\\n        uint256 servedNumDays,\\n        uint256 day\\n    );\\n    StakeInfo[] public allStakes;\\n\\n    //event sev_days(uint256 counter, uint256 day_week_ago, uint256 final_perc);\\n    constructor(\\n        IERC20 _AVSAddress,\\n        uint256 _zeroDayStartTime,\\n        uint256 _dayDurationSec\\n    ) public {\\n        avsAddress = _AVSAddress;\\n        zeroDayStartTime = _zeroDayStartTime;\\n        dayDurationSec = _dayDurationSec;\\n    }\\n\\n    function AVSTokenDonation(uint256 amount) external {\\n        address sender = _msgSender();\\n        require(\\n            avsAddress.transferFrom(sender, address(this), amount),\\n            \\\"StakingAVS: Could not get AVS tokens\\\"\\n        );\\n        allAVSTokens = allAVSTokens.add(amount);\\n        unfreezedAVSTokens = unfreezedAVSTokens.add(amount);\\n        emit AVSTokenIncome(sender, amount, _currentDay());\\n    }\\n\\n    function AVSOwnerWithdraw(uint256 amount) external onlyOwner {\\n        address sender = _msgSender();\\n        require(sender == owner(), \\\"StakingAVS: Sender is not owner\\\");\\n        require(\\n            allAVSTokens >= amount,\\n            \\\"StakingAVS: Not enough value on this contract\\\"\\n        );\\n        require(\\n            unfreezedAVSTokens >= amount,\\n            \\\"StakingAVS: Not enough unfreezed value on this contract\\\"\\n        );\\n        require(\\n            avsAddress.transfer(sender, amount),\\n            \\\"StakingAVS: Could not send AVS tokens\\\"\\n        );\\n        allAVSTokens = allAVSTokens.sub(amount);\\n        unfreezedAVSTokens = unfreezedAVSTokens.sub(amount);\\n        emit AVSTokenOutcome(sender, amount, _currentDay());\\n    }\\n\\n    function stakeStart(uint256 amount, uint256 numDaysStake)\\n        external\\n        onlyWhenOpen\\n    {\\n        require(\\n            numDaysStake > 0 &&\\n                numDaysStake <= maxNumDays &&\\n                numDaysStake % 15 == 0,\\n            \\\"StakingAVS: Wrong number of days\\\"\\n        );\\n        address sender = _msgSender();\\n        require(\\n            avsAddress.transferFrom(sender, address(this), amount),\\n            \\\"StakingAVS: AVS token transfer failed\\\"\\n        );\\n        uint256 currDay = _currentDay();\\n        emit AVSTokenIncome(sender, amount, currDay);\\n        uint256 avsEarnings = _getAVSEarnings(amount, numDaysStake);\\n        // Freeze AVS tokens on contract\\n        require(\\n            unfreezedAVSTokens >= avsEarnings - amount,\\n            \\\"StakingAVS: Insufficient funds of AVS tokens to this stake\\\"\\n        );\\n        unfreezedAVSTokens = unfreezedAVSTokens.sub(avsEarnings - amount);\\n        freezedAVSTokens = freezedAVSTokens.add(avsEarnings - amount);\\n        emit TokenFreezed(sender, avsEarnings - amount, currDay);\\n        // Add stake into stakeList\\n        StakeInfo memory st =\\n            StakeInfo(\\n                ++stakeIdLast,\\n                currDay,\\n                numDaysStake,\\n                amount,\\n                avsEarnings - amount\\n            );\\n        stakeList[sender].push(st);\\n        allStakes.push(st);\\n        emit StakeStart(\\n            sender,\\n            amount,\\n            avsEarnings - amount,\\n            numDaysStake,\\n            currDay,\\n            stakeIdLast\\n        );\\n        if (stakeList[sender].length == 1) {\\n            ++totalStakers;\\n        }\\n        totalStakedAVS = totalStakedAVS.add(amount);\\n    }\\n\\n    function stakeEnd(uint256 stakeIndex, uint256 stakeId)\\n        external\\n        onlyWhenOpen\\n    {\\n        address sender = _msgSender();\\n        require(\\n            stakeIndex >= 0 && stakeIndex < stakeList[sender].length,\\n            \\\"StakingAVS: Wrong stakeIndex\\\"\\n        );\\n        StakeInfo storage st = stakeList[sender][stakeIndex];\\n        require(st.stakeId == stakeId, \\\"StakingAVS: Wrong stakeId\\\");\\n        uint256 currDay = _currentDay();\\n        uint256 servedNumOfDays = min(currDay - st.startDay, st.numDaysStake);\\n        if (servedNumOfDays < st.numDaysStake) {\\n            uint256 avsTokensToReturn =\\n                _getAVSEarnings_pen(st.stakedAVS, servedNumOfDays);\\n            require(\\n                st.freezedRewardAVSTokens >= avsTokensToReturn - st.stakedAVS,\\n                \\\"StakingAVS: Internal error!\\\"\\n            );\\n            uint256 remainingAVSTokens =\\n                st.freezedRewardAVSTokens.sub(avsTokensToReturn - st.stakedAVS);\\n            unfreezedAVSTokens = unfreezedAVSTokens.add(remainingAVSTokens);\\n            freezedAVSTokens = freezedAVSTokens.sub(st.freezedRewardAVSTokens);\\n            emit TokenUnfreezed(sender, st.freezedRewardAVSTokens, currDay);\\n            allAVSTokens = allAVSTokens.sub(avsTokensToReturn - st.stakedAVS);\\n            avsAddress.transfer(sender, avsTokensToReturn);\\n            emit AVSTokenOutcome(\\n                sender,\\n                avsTokensToReturn - st.stakedAVS,\\n                currDay\\n            );\\n            emit StakeEnd(\\n                sender,\\n                st.stakeId,\\n                avsTokensToReturn - st.stakedAVS,\\n                servedNumOfDays,\\n                currDay\\n            );\\n            _removeStake(stakeIndex, stakeId);\\n            if (stakeList[sender].length == 0) {\\n                --totalStakers;\\n            }\\n            totalStakedAVS = totalStakedAVS.sub(st.stakedAVS);\\n        } else {\\n            uint256 avsTokensToReturn =\\n                _getAVSEarnings(st.stakedAVS, st.numDaysStake);\\n            require(\\n                st.freezedRewardAVSTokens >= avsTokensToReturn - st.stakedAVS,\\n                \\\"StakingAVS: Internal error!\\\"\\n            );\\n            uint256 remainingAVSTokens =\\n                st.freezedRewardAVSTokens.sub(avsTokensToReturn - st.stakedAVS);\\n            unfreezedAVSTokens = unfreezedAVSTokens.add(remainingAVSTokens);\\n            freezedAVSTokens = freezedAVSTokens.sub(st.freezedRewardAVSTokens);\\n            emit TokenUnfreezed(sender, st.freezedRewardAVSTokens, currDay);\\n            allAVSTokens = allAVSTokens.sub(avsTokensToReturn - st.stakedAVS);\\n            //avsAddress.transfer(sender, avsTokensToReturn);\\n            avsAddress.transfer(\\n                sender,\\n                st.stakedAVS.add(\\n                    (avsTokensToReturn.sub(st.stakedAVS)).mul(98).div(100)\\n                )\\n            );\\n            emit AVSTokenOutcome(\\n                sender,\\n                (avsTokensToReturn.sub(st.stakedAVS)).mul(98).div(100),\\n                currDay\\n            );\\n\\n            emit StakeEnd(\\n                sender,\\n                st.stakeId,\\n                avsTokensToReturn - st.stakedAVS,\\n                servedNumOfDays,\\n                currDay\\n            );\\n            _removeStake(stakeIndex, stakeId);\\n            if (stakeList[sender].length == 0) {\\n                --totalStakers;\\n            }\\n            totalStakedAVS = totalStakedAVS.sub(st.stakedAVS);\\n        }\\n        /*uint256 avsTokensToReturn = _getAvsEarnings(st.stakedAVS, servedNumOfDays);\\n        require(\\n            st.freezedRewardAVSTokens >= avsTokensToReturn,\\n            \\\"StakingAVS: Internal error!\\\"\\n        );*/\\n\\n        /*uint256 remainingAVSTokens = st.freezedRewardAVSTokens.sub(avsTokensToReturn);\\n        unfreezedAVSTokens = unfreezedAVSTokens.add(remainingAVSTokens);\\n        freezedAVSTokens = freezedAVSTokens.sub(st.freezedRewardAVSTokens);\\n        emit TokenUnfreezed(sender, st.freezedRewardAVSTokens, currDay);\\n        allAVSTokens = allAVSTokens.sub(avsTokensToReturn);\\n        avsAddress.transfer(sender, avsTokensToReturn);\\n        emit AVSTokenOutcome(sender, avsTokensToReturn, currDay);\\n\\n        emit StakeEnd(\\n            sender,\\n            st.stakeId,\\n            avsTokensToReturn,\\n            servedNumOfDays,\\n            currDay\\n        );\\n        _removeStake(stakeIndex, stakeId);*/\\n    }\\n\\n    function stakeListCount(address who) external view returns (uint256) {\\n        return stakeList[who].length;\\n    }\\n\\n    function currentDay() external view onlyWhenOpen returns (uint256) {\\n        return _currentDay();\\n    }\\n\\n    function getDayUnixTime(uint256 day) public view returns (uint256) {\\n        return zeroDayStartTime.add(day.mul(dayDurationSec));\\n    }\\n\\n    /*function changeDaysApyPercents(\\n        uint256 day,\\n        uint256 numerator,\\n        uint256 denominator\\n    )\\n        external\\n        onlyOwner\\n    {\\n        require(\\n            day > 0 && day <= maxNumDays,\\n            \\\"StakingAVS: Wrong day\\\"\\n        );\\n        DaysApyPercentsNumerator[day.sub(1)] = numerator;\\n        DaysApyPercentsDenominator[day.sub(1)] = denominator;\\n        _testDaysApyPercents();\\n    }*/\\n\\n    function getEndDayOfStakeInUnixTime(\\n        address who,\\n        uint256 stakeIndex,\\n        uint256 stakeId\\n    ) external view returns (uint256) {\\n        require(\\n            stakeIndex < stakeList[who].length,\\n            \\\"StakingAVS: Wrong stakeIndex\\\"\\n        );\\n        require(\\n            stakeId == stakeList[who][stakeIndex].stakeId,\\n            \\\"StakingAVS: Wrong stakeId\\\"\\n        );\\n\\n        return\\n            getDayUnixTime(\\n                stakeList[who][stakeIndex].startDay.add(\\n                    stakeList[who][stakeIndex].numDaysStake\\n                )\\n            );\\n    }\\n\\n    function getStakeDivsNow(\\n        address who,\\n        uint256 stakeIndex,\\n        uint256 stakeId\\n    ) external view returns (uint256) {\\n        require(\\n            stakeIndex < stakeList[who].length,\\n            \\\"StakingAVS: Wrong stakeIndex\\\"\\n        );\\n        require(\\n            stakeId == stakeList[who][stakeIndex].stakeId,\\n            \\\"StakingAVS: Wrong stakeId\\\"\\n        );\\n\\n        uint256 currDay = _currentDay();\\n        uint256 servedDays =\\n            _getServedDays(\\n                currDay,\\n                stakeList[who][stakeIndex].startDay,\\n                stakeList[who][stakeIndex].numDaysStake\\n            );\\n        return\\n            _getAVSEarnings(stakeList[who][stakeIndex].stakedAVS, servedDays);\\n    }\\n\\n    function _getServedDays(\\n        uint256 currDay,\\n        uint256 startDay,\\n        uint256 numDaysStake\\n    ) private pure returns (uint256 servedDays) {\\n        servedDays = currDay.sub(startDay);\\n        if (servedDays > numDaysStake) servedDays = numDaysStake;\\n    }\\n\\n    function _getAVSEarnings(uint256 avsAmount, uint256 numOfDays)\\n        private\\n        view\\n        returns (uint256 reward)\\n    {\\n        require(\\n            numOfDays >= 0 && numOfDays <= maxNumDays,\\n            \\\"StakingAVS: Wrong numOfDays\\\"\\n        );\\n        uint256 num_of_parts = numOfDays.div(15);\\n        uint256 perc = 1000;\\n        //ufixed percent = perc.mul((104/100)**num_of_parts).mul(numOfDays).div(365);\\n        for (uint256 i = 2; i <= num_of_parts; ++i) {\\n            perc += perc.mul(10).div(100);\\n        }\\n        /*for (uint256 day = 1; day <= numOfDays; ++day)\\n        {\\n            reward +=\\n                avsAmount.add(reward)\\n                    .mul(DaysApyPercentsNumerator[day - 1])\\n                    .div(daysInYear)\\n                    .div(DaysApyPercentsDenominator[day - 1]);\\n        }*/\\n        return\\n            avsAmount +\\n            avsAmount.mul(perc).div(10000).mul(uint256(numOfDays)).div(\\n                uint256(365)\\n            );\\n    }\\n\\n    function _getAVSEarnings_pen(uint256 avsAmount, uint256 numOfDays)\\n        private\\n        view\\n        returns (uint256 reward)\\n    {\\n        require(\\n            numOfDays >= 0 && numOfDays <= maxNumDays,\\n            \\\"StakingAVS: Wrong numOfDays\\\"\\n        );\\n        uint256 num_of_parts = numOfDays.div(15);\\n        //uint256 percent = 10*(1.04**num_of_parts)*numOfDays/365;\\n        uint256 perc = 1000;\\n        for (uint256 i = 2; i <= num_of_parts; ++i) {\\n            perc += perc.mul(10).div(100);\\n        }\\n        uint256 rew =\\n            avsAmount.mul(perc).div(10000).mul(uint256(numOfDays)).div(\\n                uint256(365)\\n            );\\n        //uint256 rew = avsAmount.mul(perc).div(100).mul(uint256(num_of_parts)).mul(15).div(uint256(365)); если надо будет поменять\\n        return avsAmount + (rew * uint256(80)) / uint256(100);\\n    }\\n\\n    function _currentDay() private view returns (uint256) {\\n        return now.sub(zeroDayStartTime).div(dayDurationSec);\\n    }\\n\\n    function _removeStake(uint256 stakeIndex, uint256 stakeId) private {\\n        address sender = _msgSender();\\n        uint256 stakeListLength = stakeList[sender].length;\\n        require(\\n            stakeIndex >= 0 && stakeIndex < stakeListLength,\\n            \\\"StakingAVS: Wrong stakeIndex\\\"\\n        );\\n        StakeInfo storage st = stakeList[sender][stakeIndex];\\n        require(st.stakeId == stakeId, \\\"StakingAVS: Wrong stakeId\\\");\\n        if (stakeIndex < stakeListLength - 1)\\n            stakeList[sender][stakeIndex] = stakeList[sender][\\n                stakeListLength - 1\\n            ];\\n        stakeList[sender].pop();\\n    }\\n\\n    function min(uint256 a, uint256 b) private view returns (uint256 minimum) {\\n        //uint256 minimum;\\n        if (a > b) {\\n            minimum = b;\\n        } else {\\n            minimum = a;\\n        }\\n        return minimum;\\n    }\\n\\n    function length_stakes() external view returns (uint256) {\\n        return allStakes.length;\\n    }\\n\\n    function seven_days() external view returns (uint256) {\\n        if (allStakes.length == 0) {\\n            return 0;\\n        }\\n        uint256 day_now = _currentDay();\\n        uint256 days_in_week = 7;\\n        uint256 day_week_ago = 0;\\n        uint256 counter = 0;\\n        uint256 all_percents = 0;\\n        uint256 step = allStakes.length.sub(1);\\n        uint256 stake_day = allStakes[step].startDay;\\n        uint256 num_stake_days = allStakes[step].numDaysStake;\\n        if (day_now >= days_in_week) {\\n            day_week_ago = day_now - days_in_week;\\n        }\\n        while (stake_day >= day_week_ago && step >= 0) {\\n            uint256 num_of_parts = num_stake_days.div(15);\\n            uint256 perc = 1000;\\n            for (uint256 i = 2; i <= num_of_parts; ++i) {\\n                perc = perc.add(perc.mul(10).div(100));\\n            }\\n            all_percents = all_percents.add(perc);\\n            counter = counter.add(1);\\n            if (step != 0) {\\n                step = step.sub(1);\\n            } else {\\n                break;\\n            }\\n            stake_day = allStakes[step].startDay;\\n            num_stake_days = allStakes[step].numDaysStake;\\n        }\\n        uint256 final_percent = all_percents.div(counter);\\n        //emit sev_days(counter, day_week_ago, final_percent);\\n        return final_percent;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_AVSAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_zeroDayStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dayDurationSec\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"AVSTokenIncome\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"AVSTokenOutcome\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"AVSEarnings\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"servedNumDays\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"StakeEnd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"AVSIncome\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"AVSEarnings\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numDays\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"StakeStart\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"TokenFreezed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"TokenUnfreezed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AVSOwnerWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AVSTokenDonation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allAVSTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numDaysStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedAVS\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"freezedRewardAVSTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"avsAddress\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dayDurationSec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freezedAVSTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"getDayUnixTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"getEndDayOfStakeInUnixTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"getStakeDivsNow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"length_stakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxNumDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seven_days\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"stakeEnd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeIdLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numDaysStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedAVS\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"freezedRewardAVSTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"stakeListCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numDaysStake\",\"type\":\"uint256\"}],\"name\":\"stakeStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakedAVS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unfreezedAVSTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zeroDayStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"AlgoVestStaking","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"00000000000000000000000094d916873b22c9c1b53695f1c002f78537b9b3b200000000000000000000000000000000000000000000000000000000603148460000000000000000000000000000000000000000000000000000000000015180","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}