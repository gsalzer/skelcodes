{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: GPL-3.0-or-later\n\n/**\n\nAuthor: CoFiX Core, https://cofix.io\nCommit hash: v0.9.3-0-gd2747b7\nRepository: https://github.com/Computable-Finance/CoFiX\nIssues: https://github.com/Computable-Finance/CoFiX/issues\n\n*/\n\npragma solidity 0.6.12;\n\n\n// \ninterface ICoFiXFactory {\n    // All pairs: {ETH <-> ERC20 Token}\n    event PairCreated(address indexed token, address pair, uint256);\n    event NewGovernance(address _new);\n    event NewController(address _new);\n    event NewFeeReceiver(address _new);\n    event NewVaultForLP(address _new);\n    event NewVaultForTrader(address _new);\n    event NewVaultForCNode(address _new);\n\n    /// @dev Create a new token pair for trading\n    /// @param  token the address of token to trade\n    /// @return pair the address of new token pair\n    function createPair(\n        address token\n        )\n        external\n        returns (address pair);\n\n    function getPair(address token) external view returns (address pair);\n    function allPairs(uint256) external view returns (address pair);\n    function allPairsLength() external view returns (uint256);\n\n    function getTradeMiningStatus(address token) external view returns (bool status);\n    function setTradeMiningStatus(address token, bool status) external;\n\n    function setGovernance(address _new) external;\n    function setController(address _new) external;\n    function setFeeReceiver(address _new) external;\n    function setVaultForLP(address _new) external;\n    function setVaultForTrader(address _new) external;\n    function setVaultForCNode(address _new) external;\n    function getController() external view returns (address controller);\n    function getFeeReceiver() external view returns (address feeReceiver);\n    function getVaultForLP() external view returns (address vaultForLP);\n    function getVaultForTrader() external view returns (address vaultForTrader);\n    function getVaultForCNode() external view returns (address vaultForCNode);\n}\n\n// \n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\nlibrary TransferHelper {\n    function safeApprove(address token, address to, uint value) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\n    }\n\n    function safeTransfer(address token, address to, uint value) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n    }\n\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\n    }\n\n    function safeTransferETH(address to, uint value) internal {\n        (bool success,) = to.call{value:value}(new bytes(0));\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\n    }\n}\n\n// \ninterface ICoFiXRouter {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    // All pairs: {ETH <-> ERC20 Token}\n\n    /// @dev Maker add liquidity to pool, get pool token (mint XToken to maker) (notice: msg.value = amountETH + oracle fee)\n    /// @param  token The address of ERC20 Token\n    /// @param  amountETH The amount of ETH added to pool\n    /// @param  amountToken The amount of Token added to pool\n    /// @param  liquidityMin The minimum liquidity maker wanted\n    /// @param  to The target address receiving the liquidity pool (XToken)\n    /// @param  deadline The dealine of this request\n    /// @return liquidity The real liquidity or XToken minted from pool\n    function addLiquidity(\n        address token,\n        uint amountETH,\n        uint amountToken,\n        uint liquidityMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint liquidity);\n\n    /// @dev Maker add liquidity to pool, get pool token (mint XToken) and stake automatically (notice: msg.value = amountETH + oracle fee)\n    /// @param  token The address of ERC20 Token\n    /// @param  amountETH The amount of ETH added to pool\n    /// @param  amountToken The amount of Token added to pool\n    /// @param  liquidityMin The minimum liquidity maker wanted\n    /// @param  to The target address receiving the liquidity pool (XToken)\n    /// @param  deadline The dealine of this request\n    /// @return liquidity The real liquidity or XToken minted from pool\n    function addLiquidityAndStake(\n        address token,\n        uint amountETH,\n        uint amountToken,\n        uint liquidityMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint liquidity);\n\n    /// @dev Maker remove liquidity from pool to get ERC20 Token back (maker burn XToken) (notice: msg.value = oracle fee)\n    /// @param  token The address of ERC20 Token\n    /// @param  liquidity The amount of liquidity (XToken) sent to pool, or the liquidity to remove\n    /// @param  amountTokenMin The minimum amount of Token wanted to get from pool\n    /// @param  to The target address receiving the Token\n    /// @param  deadline The dealine of this request\n    /// @return amountToken The real amount of Token transferred from the pool\n    function removeLiquidityGetToken(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken);\n\n    /// @dev Maker remove liquidity from pool to get ETH back (maker burn XToken) (notice: msg.value = oracle fee)\n    /// @param  token The address of ERC20 Token\n    /// @param  liquidity The amount of liquidity (XToken) sent to pool, or the liquidity to remove\n    /// @param  amountETHMin The minimum amount of ETH wanted to get from pool\n    /// @param  to The target address receiving the ETH\n    /// @param  deadline The dealine of this request\n    /// @return amountETH The real amount of ETH transferred from the pool\n    function removeLiquidityGetETH(\n        address token,\n        uint liquidity,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountETH);\n\n    /// @dev Trader swap exact amount of ETH for ERC20 Tokens (notice: msg.value = amountIn + oracle fee)\n    /// @param  token The address of ERC20 Token\n    /// @param  amountIn The exact amount of ETH a trader want to swap into pool\n    /// @param  amountOutMin The minimum amount of Token a trader want to swap out of pool\n    /// @param  to The target address receiving the Token\n    /// @param  deadline The dealine of this request\n    /// @return _amountIn The real amount of ETH transferred into pool\n    /// @return _amountOut The real amount of Token transferred out of pool\n    function swapExactETHForTokens(\n        address token,\n        uint amountIn,\n        uint amountOutMin,\n        address to,\n        address rewardTo,\n        uint deadline\n    ) external payable returns (uint _amountIn, uint _amountOut);\n\n    /// @dev Trader swap exact amount of ERC20 Tokens for ETH (notice: msg.value = oracle fee)\n    /// @param  token The address of ERC20 Token\n    /// @param  amountIn The exact amount of Token a trader want to swap into pool\n    /// @param  amountOutMin The mininum amount of ETH a trader want to swap out of pool\n    /// @param  to The target address receiving the ETH\n    /// @param  deadline The dealine of this request\n    /// @return _amountIn The real amount of Token transferred into pool\n    /// @return _amountOut The real amount of ETH transferred out of pool\n    function swapExactTokensForETH(\n        address token,\n        uint amountIn,\n        uint amountOutMin,\n        address to,\n        address rewardTo,\n        uint deadline\n    ) external payable returns (uint _amountIn, uint _amountOut);\n\n    /// @dev Trader swap exact amount of ERC20 Tokens for other ERC20 Tokens (notice: msg.value = oracle fee)\n    /// @param  tokenIn The address of ERC20 Token a trader want to swap into pool\n    /// @param  tokenOut The address of ERC20 Token a trader want to swap out of pool\n    /// @param  amountIn The exact amount of Token a trader want to swap into pool\n    /// @param  amountOutMin The mininum amount of ETH a trader want to swap out of pool\n    /// @param  to The target address receiving the Token\n    /// @param  deadline The dealine of this request\n    /// @return _amountIn The real amount of Token transferred into pool\n    /// @return _amountOut The real amount of Token transferred out of pool\n    function swapExactTokensForTokens(\n        address tokenIn,\n        address tokenOut,\n        uint amountIn,\n        uint amountOutMin,\n        address to,\n        address rewardTo,\n        uint deadline\n    ) external payable returns (uint _amountIn, uint _amountOut);\n\n    /// @dev Trader swap ETH for exact amount of ERC20 Tokens (notice: msg.value = amountInMax + oracle fee)\n    /// @param  token The address of ERC20 Token\n    /// @param  amountInMax The max amount of ETH a trader want to swap into pool\n    /// @param  amountOutExact The exact amount of Token a trader want to swap out of pool\n    /// @param  to The target address receiving the Token\n    /// @param  deadline The dealine of this request\n    /// @return _amountIn The real amount of ETH transferred into pool\n    /// @return _amountOut The real amount of Token transferred out of pool\n    function swapETHForExactTokens(\n        address token,\n        uint amountInMax,\n        uint amountOutExact,\n        address to,\n        address rewardTo,\n        uint deadline\n    ) external payable returns (uint _amountIn, uint _amountOut);\n\n    /// @dev Trader swap ERC20 Tokens for exact amount of ETH (notice: msg.value = oracle fee)\n    /// @param  token The address of ERC20 Token\n    /// @param  amountInMax The max amount of Token a trader want to swap into pool\n    /// @param  amountOutExact The exact amount of ETH a trader want to swap out of pool\n    /// @param  to The target address receiving the ETH\n    /// @param  deadline The dealine of this request\n    /// @return _amountIn The real amount of Token transferred into pool\n    /// @return _amountOut The real amount of ETH transferred out of pool\n    function swapTokensForExactETH(\n        address token,\n        uint amountInMax,\n        uint amountOutExact,\n        address to,\n        address rewardTo,\n        uint deadline\n    ) external payable returns (uint _amountIn, uint _amountOut);\n}\n\n// \n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n// \n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// \ninterface IWETH {\n    function deposit() external payable;\n    function transfer(address to, uint value) external returns (bool);\n    function withdraw(uint) external;\n    function balanceOf(address account) external view returns (uint);\n}\n\n// \ninterface ICoFiXERC20 {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    // function name() external pure returns (string memory);\n    // function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n}\n\n// \ninterface ICoFiXPair is ICoFiXERC20 {\n\n    struct OraclePrice {\n        uint256 ethAmount;\n        uint256 erc20Amount;\n        uint256 blockNum;\n        uint256 K;\n        uint256 theta;\n    }\n\n    // All pairs: {ETH <-> ERC20 Token}\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, address outToken, uint outAmount, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amountIn,\n        uint amountOut,\n        address outToken,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1);\n\n    function mint(address to) external payable returns (uint liquidity, uint oracleFeeChange);\n    function burn(address outToken, address to) external payable returns (uint amountOut, uint oracleFeeChange);\n    function swapWithExact(address outToken, address to) external payable returns (uint amountIn, uint amountOut, uint oracleFeeChange, uint256[4] memory tradeInfo);\n    function swapForExact(address outToken, uint amountOutExact, address to) external payable returns (uint amountIn, uint amountOut, uint oracleFeeChange, uint256[4] memory tradeInfo);\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address, string memory, string memory) external;\n}\n\n// \ninterface ICoFiXVaultForLP {\n\n    enum POOL_STATE {INVALID, ENABLED, DISABLED}\n\n    event NewPoolAdded(address pool, uint256 index);\n    event PoolEnabled(address pool);\n    event PoolDisabled(address pool);\n\n    function setGovernance(address _new) external;\n    function setInitCoFiRate(uint256 _new) external;\n    function setDecayPeriod(uint256 _new) external;\n    function setDecayRate(uint256 _new) external;\n\n    function addPool(address pool) external;\n    function enablePool(address pool) external;\n    function disablePool(address pool) external;\n    function setPoolWeight(address pool, uint256 weight) external;\n    function batchSetPoolWeight(address[] memory pools, uint256[] memory weights) external;\n    function distributeReward(address to, uint256 amount) external;\n\n    function getPendingRewardOfLP(address pair) external view returns (uint256);\n    function currentPeriod() external view returns (uint256);\n    function currentCoFiRate() external view returns (uint256);\n    function currentPoolRate(address pool) external view returns (uint256 poolRate);\n    function currentPoolRateByPair(address pair) external view returns (uint256 poolRate);\n\n    /// @dev Get the award staking pool address of pair (XToken)\n    /// @param  pair The address of XToken(pair) contract\n    /// @return pool The pool address\n    function stakingPoolForPair(address pair) external view returns (address pool);\n\n    function getPoolInfo(address pool) external view returns (POOL_STATE state, uint256 weight);\n    function getPoolInfoByPair(address pair) external view returns (POOL_STATE state, uint256 weight);\n\n    function getEnabledPoolCnt() external view returns (uint256);\n\n    function getCoFiStakingPool() external view returns (address pool);\n\n}\n\n// \ninterface ICoFiXStakingRewards {\n    // Views\n\n    /// @dev The rewards vault contract address set in factory contract\n    /// @return Returns the vault address\n    function rewardsVault() external view returns (address);\n\n    /// @dev The lastBlock reward applicable\n    /// @return Returns the latest block.number on-chain\n    function lastBlockRewardApplicable() external view returns (uint256);\n\n    /// @dev Reward amount represents by per staking token\n    function rewardPerToken() external view returns (uint256);\n\n    /// @dev How many reward tokens a user has earned but not claimed at present\n    /// @param  account The target account\n    /// @return The amount of reward tokens a user earned\n    function earned(address account) external view returns (uint256);\n\n    /// @dev How many reward tokens accrued recently\n    /// @return The amount of reward tokens accrued recently\n    function accrued() external view returns (uint256);\n\n    /// @dev Get the latest reward rate of this mining pool (tokens amount per block)\n    /// @return The latest reward rate\n    function rewardRate() external view returns (uint256);\n\n    /// @dev How many stakingToken (XToken) deposited into to this reward pool (mining pool)\n    /// @return The total amount of XTokens deposited in this mining pool\n    function totalSupply() external view returns (uint256);\n\n    /// @dev How many stakingToken (XToken) deposited by the target account\n    /// @param  account The target account\n    /// @return The total amount of XToken deposited in this mining pool\n    function balanceOf(address account) external view returns (uint256);\n\n    /// @dev Get the address of token for staking in this mining pool\n    /// @return The staking token address\n    function stakingToken() external view returns (address);\n\n    /// @dev Get the address of token for rewards in this mining pool\n    /// @return The rewards token address\n    function rewardsToken() external view returns (address);\n\n    // Mutative\n\n    /// @dev Stake/Deposit into the reward pool (mining pool)\n    /// @param  amount The target amount\n    function stake(uint256 amount) external;\n\n    /// @dev Stake/Deposit into the reward pool (mining pool) for other account\n    /// @param  other The target account\n    /// @param  amount The target amount\n    function stakeForOther(address other, uint256 amount) external;\n\n    /// @dev Withdraw from the reward pool (mining pool), get the original tokens back\n    /// @param  amount The target amount\n    function withdraw(uint256 amount) external;\n\n    /// @dev Withdraw without caring about rewards. EMERGENCY ONLY.\n    function emergencyWithdraw() external;\n\n    /// @dev Claim the reward the user earned\n    function getReward() external;\n\n    function getRewardAndStake() external;\n\n    /// @dev User exit the reward pool, it's actually withdraw and getReward\n    function exit() external;\n\n    /// @dev Add reward to the mining pool\n    function addReward(uint256 amount) external;\n\n    // Events\n    event RewardAdded(address sender, uint256 reward);\n    event Staked(address indexed user, uint256 amount);\n    event StakedForOther(address indexed user, address indexed other, uint256 amount);\n    event Withdrawn(address indexed user, uint256 amount);\n    event EmergencyWithdraw(address indexed user, uint256 amount);\n    event RewardPaid(address indexed user, uint256 reward);\n}\n\n// \ninterface ICoFiXVaultForTrader {\n\n    event RouterAllowed(address router);\n    event RouterDisallowed(address router);\n\n    event ClearPendingRewardOfCNode(uint256 pendingAmount);\n    event ClearPendingRewardOfLP(uint256 pendingAmount);\n\n    function setGovernance(address gov) external;\n\n    function allowRouter(address router) external;\n\n    function disallowRouter(address router) external;\n\n    function calcCoFiRate(uint256 bt_phi, uint256 xt, uint256 np) external pure returns (uint256 at);\n\n    function currentCoFiRate(address pair, uint256 np) external view returns (uint256);\n\n    function currentThreshold(address pair, uint256 np, uint256 cofiRate) external view returns (uint256);\n\n    function stdMiningRateAndAmount(address pair, uint256 np, uint256 thetaFee) external view returns (uint256 cofiRate, uint256 stdAmount);\n\n    function calcDensity(uint256 _stdAmount) external view returns (uint256);\n\n    function calcLambda(uint256 x, uint256 y) external pure returns (uint256);\n\n    function actualMiningAmountAndDensity(address pair, uint256 thetaFee, uint256 x, uint256 y, uint256 np) external view returns (uint256 amount, uint256 density, uint256 cofiRate);\n\n    function distributeReward(address pair, uint256 thetaFee, uint256 x, uint256 y, uint256 np, address rewardTo) external;\n\n    function clearPendingRewardOfCNode() external;\n\n    function clearPendingRewardOfLP(address pair) external;\n\n    function getPendingRewardOfCNode() external view returns (uint256);\n\n    function getPendingRewardOfLP(address pair) external view returns (uint256);\n\n    function getCoFiRateCache(address pair) external view returns (uint256 cofiRate, uint256 updatedBlock);\n}\n\n// \n// Router contract to interact with each CoFiXPair, no owner or governance\ncontract CoFiXRouter is ICoFiXRouter {\n    using SafeMath for uint;\n\n    address public immutable override factory;\n    address public immutable override WETH;\n\n    modifier ensure(uint deadline) {\n        require(deadline >= block.timestamp, 'CRouter: EXPIRED');\n        _;\n    }\n\n    constructor(address _factory, address _WETH) public {\n        factory = _factory;\n        WETH = _WETH;\n    }\n\n    receive() external payable {}\n\n    // calculates the CREATE2 address for a pair without making any external calls\n    function pairFor(address _factory, address token) internal view returns (address pair) {\n        // pair = address(uint(keccak256(abi.encodePacked(\n        //         hex'ff',\n        //         _factory,\n        //         keccak256(abi.encodePacked(token)),\n        //         hex'fb0c5470b7fbfce7f512b5035b5c35707fd5c7bd43c8d81959891b0296030118' // init code hash\n        //     )))); // calc the real init code hash, not suitable for us now, could use this in the future\n        return ICoFiXFactory(_factory).getPair(token);\n    }\n\n    // msg.value = amountETH + oracle fee\n    function addLiquidity(\n        address token,\n        uint amountETH,\n        uint amountToken,\n        uint liquidityMin,\n        address to,\n        uint deadline\n    ) external override payable ensure(deadline) returns (uint liquidity)\n    {\n        // create the pair if it doesn't exist yet\n        if (ICoFiXFactory(factory).getPair(token) == address(0)) {\n            ICoFiXFactory(factory).createPair(token);\n        }\n        require(msg.value > amountETH, \"CRouter: insufficient msg.value\");\n        uint256 _oracleFee = msg.value.sub(amountETH);\n        address pair = pairFor(factory, token);\n        if (amountToken > 0 ) { // support for tokens which do not allow to transfer zero values\n            TransferHelper.safeTransferFrom(token, msg.sender, pair, amountToken);\n        }\n        if (amountETH > 0) {\n            IWETH(WETH).deposit{value: amountETH}();\n            assert(IWETH(WETH).transfer(pair, amountETH));\n        }\n        uint256 oracleFeeChange;\n        (liquidity, oracleFeeChange) = ICoFiXPair(pair).mint{value: _oracleFee}(to);\n        require(liquidity >= liquidityMin, \"CRouter: less liquidity than expected\");\n        // refund oracle fee to msg.sender, if any\n        if (oracleFeeChange > 0) TransferHelper.safeTransferETH(msg.sender, oracleFeeChange);\n    }\n\n    // msg.value = amountETH + oracle fee\n    function addLiquidityAndStake(\n        address token,\n        uint amountETH,\n        uint amountToken,\n        uint liquidityMin,\n        address to,\n        uint deadline\n    ) external override payable ensure(deadline) returns (uint liquidity)\n    {\n        // must create a pair before using this function\n        require(msg.value > amountETH, \"CRouter: insufficient msg.value\");\n        uint256 _oracleFee = msg.value.sub(amountETH);\n        address pair = pairFor(factory, token);\n        require(pair != address(0), \"CRouter: invalid pair\");\n        if (amountToken > 0 ) { // support for tokens which do not allow to transfer zero values\n            TransferHelper.safeTransferFrom(token, msg.sender, pair, amountToken);\n        }\n        if (amountETH > 0) {\n            IWETH(WETH).deposit{value: amountETH}();\n            assert(IWETH(WETH).transfer(pair, amountETH));\n        }\n        uint256 oracleFeeChange;\n        (liquidity, oracleFeeChange) = ICoFiXPair(pair).mint{value: _oracleFee}(address(this));\n        require(liquidity >= liquidityMin, \"CRouter: less liquidity than expected\");\n\n        // find the staking rewards pool contract for the liquidity token (pair)\n        address pool = ICoFiXVaultForLP(ICoFiXFactory(factory).getVaultForLP()).stakingPoolForPair(pair);\n        require(pool != address(0), \"CRouter: invalid staking pool\");\n        // approve to staking pool\n        ICoFiXPair(pair).approve(pool, liquidity);\n        ICoFiXStakingRewards(pool).stakeForOther(to, liquidity);\n        ICoFiXPair(pair).approve(pool, 0); // ensure\n        // refund oracle fee to msg.sender, if any\n        if (oracleFeeChange > 0) TransferHelper.safeTransferETH(msg.sender, oracleFeeChange);\n    }\n\n    // msg.value = oracle fee\n    function removeLiquidityGetToken(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        address to,\n        uint deadline\n    ) external override payable ensure(deadline) returns (uint amountToken)\n    {\n        require(msg.value > 0, \"CRouter: insufficient msg.value\");\n        address pair = pairFor(factory, token);\n        ICoFiXPair(pair).transferFrom(msg.sender, pair, liquidity); // send liquidity to pair\n        uint oracleFeeChange; \n        (amountToken, oracleFeeChange) = ICoFiXPair(pair).burn{value: msg.value}(token, to);\n        require(amountToken >= amountTokenMin, \"CRouter: got less than expected\");\n        // refund oracle fee to msg.sender, if any\n        if (oracleFeeChange > 0) TransferHelper.safeTransferETH(msg.sender, oracleFeeChange);\n    }\n\n    // msg.value = oracle fee\n    function removeLiquidityGetETH(\n        address token,\n        uint liquidity,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external override payable ensure(deadline) returns (uint amountETH)\n    {\n        require(msg.value > 0, \"CRouter: insufficient msg.value\");\n        address pair = pairFor(factory, token);\n        ICoFiXPair(pair).transferFrom(msg.sender, pair, liquidity); // send liquidity to pair\n        uint oracleFeeChange; \n        (amountETH, oracleFeeChange) = ICoFiXPair(pair).burn{value: msg.value}(WETH, address(this));\n        require(amountETH >= amountETHMin, \"CRouter: got less than expected\");\n        IWETH(WETH).withdraw(amountETH);\n        TransferHelper.safeTransferETH(to, amountETH);\n        // refund oracle fee to msg.sender, if any\n        if (oracleFeeChange > 0) TransferHelper.safeTransferETH(msg.sender, oracleFeeChange);\n    }\n\n    // msg.value = amountIn + oracle fee\n    function swapExactETHForTokens(\n        address token,\n        uint amountIn,\n        uint amountOutMin,\n        address to,\n        address rewardTo,\n        uint deadline\n    ) external override payable ensure(deadline) returns (uint _amountIn, uint _amountOut)\n    {\n        require(msg.value > amountIn, \"CRouter: insufficient msg.value\");\n        IWETH(WETH).deposit{value: amountIn}();\n        address pair = pairFor(factory, token);\n        assert(IWETH(WETH).transfer(pair, amountIn));\n        uint oracleFeeChange; \n        uint256[4] memory tradeInfo;\n        (_amountIn, _amountOut, oracleFeeChange, tradeInfo) = ICoFiXPair(pair).swapWithExact{\n            value: msg.value.sub(amountIn)}(token, to);\n        require(_amountOut >= amountOutMin, \"CRouter: got less than expected\");\n\n        // distribute trading rewards - CoFi!\n        address vaultForTrader = ICoFiXFactory(factory).getVaultForTrader();\n        if (tradeInfo[0] > 0 && rewardTo != address(0) && vaultForTrader != address(0)) {\n            ICoFiXVaultForTrader(vaultForTrader).distributeReward(pair, tradeInfo[0], tradeInfo[1], tradeInfo[2], tradeInfo[3], rewardTo);\n        }\n\n        // refund oracle fee to msg.sender, if any\n        if (oracleFeeChange > 0) TransferHelper.safeTransferETH(msg.sender, oracleFeeChange);\n    }\n\n    // msg.value = oracle fee\n    function swapExactTokensForTokens(\n        address tokenIn,\n        address tokenOut,\n        uint amountIn,\n        uint amountOutMin,\n        address to,\n        address rewardTo,\n        uint deadline\n    ) external override payable ensure(deadline) returns (uint _amountIn, uint _amountOut) {\n\n        require(msg.value > 0, \"CRouter: insufficient msg.value\");\n        address[2] memory pairs; // [pairIn, pairOut]\n\n        // swapExactTokensForETH\n        pairs[0] = pairFor(factory, tokenIn);\n        TransferHelper.safeTransferFrom(tokenIn, msg.sender, pairs[0], amountIn);\n        uint oracleFeeChange;\n        uint256[4] memory tradeInfo;\n        (_amountIn, _amountOut, oracleFeeChange, tradeInfo) = ICoFiXPair(pairs[0]).swapWithExact{value: msg.value}(WETH, address(this));\n\n        // distribute trading rewards - CoFi!\n        address vaultForTrader = ICoFiXFactory(factory).getVaultForTrader();\n        if (tradeInfo[0] > 0 && rewardTo != address(0) && vaultForTrader != address(0)) {\n            ICoFiXVaultForTrader(vaultForTrader).distributeReward(pairs[0], tradeInfo[0], tradeInfo[1], tradeInfo[2], tradeInfo[3], rewardTo);\n        }\n\n        // swapExactETHForTokens\n        pairs[1] = pairFor(factory, tokenOut);\n        assert(IWETH(WETH).transfer(pairs[1], _amountOut)); // swap with all amountOut in last swap\n        (, _amountOut, oracleFeeChange, tradeInfo) = ICoFiXPair(pairs[1]).swapWithExact{value: oracleFeeChange}(tokenOut, to);\n        require(_amountOut >= amountOutMin, \"CRouter: got less than expected\");\n\n        // distribute trading rewards - CoFi!\n        if (tradeInfo[0] > 0 && rewardTo != address(0) && vaultForTrader != address(0)) {\n            ICoFiXVaultForTrader(vaultForTrader).distributeReward(pairs[1], tradeInfo[0], tradeInfo[1], tradeInfo[2], tradeInfo[3], rewardTo);\n        }\n\n        // refund oracle fee to msg.sender, if any\n        if (oracleFeeChange > 0) TransferHelper.safeTransferETH(msg.sender, oracleFeeChange);\n    }\n\n    // msg.value = oracle fee\n    function swapExactTokensForETH(\n        address token,\n        uint amountIn,\n        uint amountOutMin,\n        address to,\n        address rewardTo,\n        uint deadline\n    ) external override payable ensure(deadline) returns (uint _amountIn, uint _amountOut)\n    {\n        require(msg.value > 0, \"CRouter: insufficient msg.value\");\n        address pair = pairFor(factory, token);\n        TransferHelper.safeTransferFrom(token, msg.sender, pair, amountIn);\n        uint oracleFeeChange; \n        uint256[4] memory tradeInfo;\n        (_amountIn, _amountOut, oracleFeeChange, tradeInfo) = ICoFiXPair(pair).swapWithExact{value: msg.value}(WETH, address(this));\n        require(_amountOut >= amountOutMin, \"CRouter: got less than expected\");\n        IWETH(WETH).withdraw(_amountOut);\n        TransferHelper.safeTransferETH(to, _amountOut);\n\n        // distribute trading rewards - CoFi!\n        address vaultForTrader = ICoFiXFactory(factory).getVaultForTrader();\n        if (tradeInfo[0] > 0 && rewardTo != address(0) && vaultForTrader != address(0)) {\n            ICoFiXVaultForTrader(vaultForTrader).distributeReward(pair, tradeInfo[0], tradeInfo[1], tradeInfo[2], tradeInfo[3], rewardTo);\n        }\n\n        // refund oracle fee to msg.sender, if any\n        if (oracleFeeChange > 0) TransferHelper.safeTransferETH(msg.sender, oracleFeeChange);\n    }\n\n    // msg.value = amountInMax + oracle fee\n    function swapETHForExactTokens(\n        address token,\n        uint amountInMax,\n        uint amountOutExact,\n        address to,\n        address rewardTo,\n        uint deadline\n    ) external override payable ensure(deadline) returns (uint _amountIn, uint _amountOut)\n    {\n        require(msg.value > amountInMax, \"CRouter: insufficient msg.value\");\n        IWETH(WETH).deposit{value: amountInMax}();\n        address pair = pairFor(factory, token);\n        assert(IWETH(WETH).transfer(pair, amountInMax));\n        uint oracleFeeChange;\n        uint256[4] memory tradeInfo;\n        (_amountIn, _amountOut, oracleFeeChange, tradeInfo) = ICoFiXPair(pair).swapForExact{\n            value: msg.value.sub(amountInMax) }(token, amountOutExact, to);\n        // assert amountOutExact equals with _amountOut\n        require(_amountIn <= amountInMax, \"CRouter: spend more than expected\");\n\n        // distribute trading rewards - CoFi!\n        address vaultForTrader = ICoFiXFactory(factory).getVaultForTrader();\n        if (tradeInfo[0] > 0 && rewardTo != address(0) && vaultForTrader != address(0)) {\n            ICoFiXVaultForTrader(vaultForTrader).distributeReward(pair, tradeInfo[0], tradeInfo[1], tradeInfo[2], tradeInfo[3], rewardTo);\n        }\n\n        // refund oracle fee to msg.sender, if any\n        if (oracleFeeChange > 0) TransferHelper.safeTransferETH(msg.sender, oracleFeeChange);\n    }\n\n    // msg.value = oracle fee\n    function swapTokensForExactETH(\n        address token,\n        uint amountInMax,\n        uint amountOutExact,\n        address to,\n        address rewardTo,\n        uint deadline\n    ) external override payable ensure(deadline) returns (uint _amountIn, uint _amountOut)\n    {\n        require(msg.value > 0, \"CRouter: insufficient msg.value\");\n        address pair = pairFor(factory, token);\n        TransferHelper.safeTransferFrom(token, msg.sender, pair, amountInMax);\n        uint oracleFeeChange; \n        uint256[4] memory tradeInfo;\n        (_amountIn, _amountOut, oracleFeeChange, tradeInfo) = ICoFiXPair(pair).swapForExact{\n            value: msg.value}(WETH, amountOutExact, address(this));\n        // assert amountOutExact equals with _amountOut\n        require(_amountIn <= amountInMax, \"CRouter: got less than expected\");\n        IWETH(WETH).withdraw(_amountOut);\n\n        // distribute trading rewards - CoFi!\n        address vaultForTrader = ICoFiXFactory(factory).getVaultForTrader();\n        if (tradeInfo[0] > 0 && rewardTo != address(0) && vaultForTrader != address(0)) {\n            ICoFiXVaultForTrader(vaultForTrader).distributeReward(pair, tradeInfo[0], tradeInfo[1], tradeInfo[2], tradeInfo[3], rewardTo);\n        }\n\n        TransferHelper.safeTransferETH(to, amountOutExact);\n        // refund oracle fee to msg.sender, if any\n        if (oracleFeeChange > 0) TransferHelper.safeTransferETH(msg.sender, oracleFeeChange);\n    }\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidityAndStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityGetETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityGetToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutExact\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapETHForExactTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactETHForTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutExact\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"CoFiXRouter","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"20000","ConstructorArguments":"000000000000000000000000155bda3255115b244fe3767a9edc002dc76023ad000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}