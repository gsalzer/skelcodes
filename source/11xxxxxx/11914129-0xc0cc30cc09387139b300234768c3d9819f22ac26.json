{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"contracts/TokenRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\n/**\\n * @title TokenRegistry\\n * @dev Registry of tokens that Archer supports as stake for voting power \\n * + their respective conversion formulas\\n */\\ncontract TokenRegistry {\\n\\n    /// @notice Current owner of this contract\\n    address public owner;\\n\\n    /// @notice mapping of tokens to voting power calculation (formula) smart contract addresses\\n    mapping (address => address) public tokenFormulas;\\n\\n    /// @notice Event emitted when the owner of the contract is updated\\n    event ChangedOwner(address indexed oldOwner, address indexed newOwner);\\n\\n    /// @notice Event emitted when a token formula is updated\\n    event TokenFormulaUpdated(address indexed token, address indexed formula);\\n\\n    /// @notice Event emitted when a supported token is removed\\n    event TokenRemoved(address indexed token);\\n\\n    /// @notice only owner can call function\\n    modifier onlyOwner {\\n        require(msg.sender == owner, \\\"not owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Construct a new token registry contract\\n     * @param _owner contract owner\\n     * @param _tokens initially supported tokens\\n     * @param _formulas formula contracts for initial tokens\\n     */\\n    constructor(\\n        address _owner, \\n        address[] memory _tokens, \\n        address[] memory _formulas\\n    ) {\\n        require(_tokens.length == _formulas.length, \\\"TR::constructor: not same length\\\");\\n        for (uint i = 0; i < _tokens.length; i++) {\\n            tokenFormulas[_tokens[i]] = _formulas[i];\\n            emit TokenFormulaUpdated(_tokens[i], _formulas[i]);\\n        }\\n        owner = _owner;\\n        emit ChangedOwner(address(0), owner);\\n    }\\n\\n    /**\\n     * @notice Set conversion formula address for token\\n     * @param token token for formula\\n     * @param formula address of formula contract\\n     */\\n    function setTokenFormula(address token, address formula) external onlyOwner {\\n        tokenFormulas[token] = formula;\\n        emit TokenFormulaUpdated(token, formula);\\n    }\\n\\n    /**\\n     * @notice Remove conversion formula address for token\\n     * @param token token address to remove\\n     */\\n    function removeToken(address token) external onlyOwner {\\n        tokenFormulas[token] = address(0);\\n        emit TokenRemoved(token);\\n    }\\n\\n    /**\\n     * @notice Change owner of token registry contract\\n     * @param newOwner New owner address\\n     */\\n    function changeOwner(address newOwner) external onlyOwner {\\n        emit ChangedOwner(owner, newOwner);\\n        owner = newOwner;\\n    }\\n}\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_formulas\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"ChangedOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"formula\",\"type\":\"address\"}],\"name\":\"TokenFormulaUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"removeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"formula\",\"type\":\"address\"}],\"name\":\"setTokenFormula\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenFormulas\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"TokenRegistry","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"00000000000000000000000013d5b8fc84f73fc5a0a5832aa8373044371314d3000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000020000000000000000000000001f3f9d3068568f8040775be2e8c03c103c61f3af0000000000000000000000004441eb3076f828d5176f4fe74d7c775542dae106000000000000000000000000000000000000000000000000000000000000000200000000000000000000000068cb730510e9821553fc4646aceb51758e3a65de000000000000000000000000a6e743af491b0f0070fa9da52ed0d0ee527acb32","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}