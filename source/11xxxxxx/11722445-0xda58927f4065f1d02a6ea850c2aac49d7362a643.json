{"status":"1","message":"OK","result":[{"SourceCode":"////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//////////////////////////////////////.////////////////////////////////.////////////////////////////////////\r\n///////////////////////////////////.@.//////////////////////////////////.@./////////////////////////////////\r\n////////////////////////////////.@@.//////////////////////////////////////.@@.//////////////////////////////\r\n/////////////////////////////..@@@.////////////////////////////////////////.@@@..///////////////////////////\r\n///////////////////////////.@@@@@.//////////////////////////////////////////.@@@@@./////////////////////////\r\n/////////////////////////.@@@@@@@////////////////////////////////////////////@@@@@@@.///////////////////////\r\n////////////////////////.@@@@@@@.////////////////////////////////////////////.@@@@@@@.//////////////////////\r\n//////////////////..///.@@@@@@@@//////////////////////////////////////////////@@@@@@@@.///..////////////////\r\n////////////////.@@.//.@@@@@@@@@//////////////////////////////////////////////@@@@@@@@@.//.@@.//////////////\r\n///////////////@@@@.//@@@@@@@@@.//////////////////////////////////////////////.@@@@@@@@@//@@@@@/////////////\r\n//////////////@@@@@@//@@@@@@@@@.//////////////////////////////////////////////.@@@@@@@@@//@@@@@@////////////\r\n/////////////@@@@@@@./@@@@@@@@@@//////////////////////////////////////////////@@@@@@@@@./.@@@@@@@///////////\r\n/////////////@@@@@@@@//@@@@@@@@@.////////////////////////////////////////////.@@@@@@@@@//@@@@@@@@///////////\r\n/////////////@@@@@@@@.//.@@@@@@@@.//////////////////////////////////////////@@@@@@@@@.//.@@@@@@@@///////////\r\n/////////////@@@@@@@@@///.@@@@@@@@@.////////.//////////////////////////////@@@@@@@@@.///@@@@@@@@@///////////\r\n/////////////.@@@@@@@@@///..@@@@@@@.////////.@.///////////////////////////.@@@@@@@.////@@@@@@@@@.///////////\r\n//////////////.@@@@@@@@@.////.@@@@///////////.@@.//////////////////////////.@@@@.////.@@@@@@@@@.////////////\r\n//////////.////.@@@@@@@@@@./////./////////////.@@@@..////////////////////////./////.@@@@@@@@@@.///..////////\r\n//////////@@.///.@@@@@@@@@@@.//////////////////.@@@@@@@@@@./////////////////////..@@@@@@@@@@.///.@@.////////\r\n//////////@@@@.///.@@@@@@@@@@@@.////////////////.@@@@@@@@@@@..///////////////.@@@@@@@@@@@@@.//.@@@@.////////\r\n//////////.@@@@@@.///.@@@@@@@@@@@.///////////////.@@@@@@@@@@@@./////////////.@@@@@@@@@@@.//.@@@@@@@.////////\r\n//////////.@@@@@@@@.////.@@@@@@@@@.///////////////@@@@@@@@@...@////////////.@@@@@@@@@.//..@@@@@@@@@.////////\r\n//////////.@@@@@@@@@@@..////..@@@@@@./////////////@@@@@@@@@ /////////////.@@@@@@..///..@@@@@@@@@@@./////////\r\n///////////.@@@@@@@@@@@@@@..//////.....///////////@@@@@@@@@.///////////...../////..@@@@@@@@@@@@@@@//////////\r\n////////////.@@@@@@@@@@@@@@@@@@....///////////////@@@@@@@@@.///////////////...@@@@@@@@@@@@@@@@@@@.//////////\r\n/////////////.@@@@@@@@@@@@@@@@@@@@@@@@@@@..///////@@@@@@@@@@//////....@@@@@@@@@@@@@@@@@@@@@@@@@@.///////////\r\n//////////////.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@.///.@@@@@@@@@@/////@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@/////////////\r\n////////////////.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@///@@@@@@@@@@@.///.@@@@@@@@@@@@@@@@@@@@@@@@@@@@.//////////////\r\n//////////////////.@@@@@@@@@@@@@@@@@@@@@@@@@@@@/@@@@@@@@@@@@@./.@@@@@@@@@@@@@@@@@@@@@@@@@@@.////////////////\r\n////////////////////.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@..//////////////////\r\n//////////////////////..@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@./////////////////////\r\n/////////////////////////..@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@.////////////////////////\r\n/////////////////////////////..@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@..///////////////////////////               \r\n/////////////////////////////////..@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@..///////////////////////////////\r\n//////////////////////////////////////...@@@@@@@@@@@@@@@@@@@@@@@@@@@@...////////////////////////////////////\r\n//////////////////////////////////////////////...@@@@@@@@@@@@@@...//////////////////////////////////////////\r\n//////////////////////////////////////////////////.@@@@@@@@@////////////////////////////////////////////////\r\n////////////////////////////////////////////////.@@@@@./@@@@@///////////////////////////////////////////////\r\n///////////////////////////////////////////////.@@@@@@///@@@@@./////////////////////////////////////////////\r\n/////////////////////////////////////////////.@@@@@@@/.@./@@@@@@.///////////////////////////////////////////\r\n////////////////////////////////////////////@@@@@@@@/.@@@/.@@@@@@@./////////////////////////////////////////\r\n///////////////////////////////////////////.@@@@@@@//@@@@@//@@@@@@@.////////////////////////////////////////\r\n////////////////////////////////////////////.@@@@@./@@@@@@@/.@@@@@./////////////////////////////////////////\r\n//////////////////////////////////////////////.@@./@@@@@@@@@/.@@.///////////////////////////////////////////\r\n///////////////////////////////////////////////../@@@@@@@@@@@/..////////////////////////////////////////////\r\n/////////////////////////////////////////////////@@@@@@@@@@@@@//////////////////////////////////////////////\r\n////////////////////////////////////////////////@@@@@@@@@@@@@@@/////////////////////////////////////////////\r\n///////////////////////////////////////////////@@@@@@.///.@@@@@.////////////////////////////////////////////\r\n//////////////////////////////////////////////.@@..//.@@..//..@@.///////////////////////////////////////////\r\n/////////////////////////////////////////////..//////@@@@//////...//////////////////////////////////////////\r\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n/////////////_______///________//____////____//_______//______///////__///__////______////______////////////\r\n/////////////@@_____|//@@@__@@@\\/\\@@@\\  /@@@//|@@@____||@@@_  \\/////|@@\\ |@@|///  __  \\//|@@@_@@\\///////////\r\n////////////|@@|//__//|@@|  |@@|//\\@@@\\/@@@///|@@|__///|@@|_)  |////|@@@\\|@@|/|@@|  |@@|/|@@|_)@@|//////////\r\n////////////|@@| |_@|/|@@|  |@@|///\\@@@@@@////|@@@__|//|@@@@@@//////|@@.@`@@|/|@@|  |@@|/|@@@@@@////////////\r\n////////////|@@|__|@|/|@@`--'@@|////\\@@@@/////|@@|____/|@@|\\@@\\----.|@@|\\@@@|/|@@`--'@@|/|@@|\\@@\\----.//////\r\n/////////////\\______|//\\______///////\\__//////|_______|| _| `._____||__| \\__|//\\______///|@_| `._____|//////\r\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n// SPDX-License-Identifier: MIT\r\n// Author: Uni <3\r\n// Intent: Rewards Loyalty Points to the LOYAL early adopters of Governor DAO.\r\n// We Are One. We Are All.\r\n\r\n// File: browser/Address.sol\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: browser/SafeERC20.sol\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: browser/ReentrancyGuard.sol\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n// File: browser/Context.sol\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: browser/Ownable.sol\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n// File: browser/Pausable.sol\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor () {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n// File: browser/IERC20.sol\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: browser/IStakedRewardsPool.sol\r\n\r\npragma solidity ^0.7.0;\r\n\r\n\r\ninterface IStakedRewardsPool {\r\n\t/* Views */\r\n\r\n\tfunction balanceOf(address account) external view returns (uint256);\r\n\r\n\tfunction earned(address account) external view returns (uint256);\r\n\r\n\tfunction rewardsToken() external view returns (IERC20);\r\n\r\n\tfunction stakingToken() external view returns (IERC20);\r\n\r\n\tfunction stakingTokenDecimals() external view returns (uint8);\r\n\r\n\tfunction totalSupply() external view returns (uint256);\r\n\r\n\t/* Mutators */\r\n\r\n\tfunction exit() external;\r\n\r\n\tfunction getReward() external;\r\n\r\n\tfunction getRewardExact(uint256 amount) external;\r\n\r\n\tfunction pause() external;\r\n\r\n\tfunction recoverUnsupportedERC20(\r\n\t\tIERC20 token,\r\n\t\taddress to,\r\n\t\tuint256 amount\r\n\t) external;\r\n\r\n\tfunction stake(uint256 amount) external;\r\n\r\n\tfunction unpause() external;\r\n\r\n\tfunction updateReward() external;\r\n\r\n\tfunction updateRewardFor(address account) external;\r\n\r\n\tfunction withdraw(uint256 amount) external;\r\n\r\n\t/* Events */\r\n\r\n\tevent RewardPaid(address indexed account, uint256 amount);\r\n\tevent Staked(address indexed account, uint256 amount);\r\n\tevent Withdrawn(address indexed account, uint256 amount);\r\n\tevent Recovered(IERC20 token, address indexed to, uint256 amount);\r\n}\r\n\r\n// File: browser/IStakedRewardsPoolTimedRate.sol\r\n\r\npragma solidity ^0.7.0;\r\n\r\n\r\ninterface IStakedRewardsPoolTimedRate is IStakedRewardsPool {\r\n\t/* Views */\r\n\r\n\tfunction accruedRewardPerToken() external view returns (uint256);\r\n\r\n\tfunction hasEnded() external view returns (bool);\r\n\r\n\tfunction hasStarted() external view returns (bool);\r\n\r\n\tfunction lastTimeRewardApplicable() external view returns (uint256);\r\n\r\n\tfunction periodDuration() external view returns (uint256);\r\n\r\n\tfunction periodEndTime() external view returns (uint256);\r\n\r\n\tfunction periodStartTime() external view returns (uint256);\r\n\r\n\tfunction rewardRate() external view returns (uint256);\r\n\r\n\tfunction timeRemainingInPeriod() external view returns (uint256);\r\n\r\n\t/* Mutators */\r\n\r\n\tfunction addToRewardsAllocation(uint256 amount) external;\r\n\r\n\tfunction setNewPeriod(uint256 startTime, uint256 endTime) external;\r\n\r\n\t/* Events */\r\n\r\n\tevent RewardAdded(uint256 amount);\r\n\tevent NewPeriodSet(uint256 startTIme, uint256 endTime);\r\n}\r\n\r\n// File: browser/SafeMath.sol\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: browser/Math.sol\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n// File: browser/StakedRewardsPool.sol\r\n\r\npragma solidity ^0.7.0;\r\n\r\nabstract contract StakedRewardsPool is Context,\tReentrancyGuard, Ownable, Pausable, IStakedRewardsPool {\r\n\tusing SafeERC20 for IERC20;\r\n\tusing SafeMath for uint256;\r\n\r\n\tmapping(address => uint256) internal _rewards;\r\n\r\n\tuint8 private _stakingTokenDecimals;\r\n\tIERC20 private _rewardsToken;\r\n\tIERC20 private _stakingToken;\r\n\tuint256 private _stakingTokenBase;\r\n\r\n\tmapping(address => uint256) private _balances;\r\n\tuint256 private _totalSupply;\r\n\r\n\tconstructor(IERC20 rewardsToken_, IERC20 stakingToken_, uint8 stakingTokenDecimals_) Ownable() {\r\n\t\t// Prevent overflow, though 76 would create a safe but unusable contract\r\n\t\trequire(stakingTokenDecimals_ < 77, 'SR Pool: 76 decimals limit');\r\n\t\t_rewardsToken = rewardsToken_;\r\n\t\t_stakingToken = stakingToken_;\r\n\t\t_stakingTokenDecimals = stakingTokenDecimals_;\r\n\t\t_stakingTokenBase = 10**stakingTokenDecimals_;\r\n\t}\r\n\r\n\r\n\t/* Public Views */\r\n\r\n\tfunction balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n\r\n\tfunction earned(address account) public view virtual override returns (uint256);\r\n\r\n\tfunction rewardsToken() public view override returns (IERC20) {\treturn _rewardsToken; }\r\n\r\n\tfunction stakingToken() public view override returns (IERC20) {\treturn _stakingToken; }\r\n\r\n\tfunction stakingTokenDecimals() public view override returns (uint8) { return _stakingTokenDecimals; }\r\n\r\n\tfunction totalSupply() public view override returns (uint256) { return _totalSupply; }\r\n\r\n\t/* Public Mutators */\r\n\r\n\tfunction exit() public override nonReentrant { _exit();\t}\r\n\r\n\tfunction getReward() public override nonReentrant {\t_getReward(); }\r\n\r\n\tfunction getRewardExact(uint256 amount) public override nonReentrant { _getRewardExact(amount);\t}\r\n\r\n\tfunction pause() public override onlyOwner { _pause(); }\r\n\r\n\tfunction recoverUnsupportedERC20(IERC20 token, address to, uint256 amount) public override onlyOwner { _recoverUnsupportedERC20(token, to, amount); }\r\n\r\n\tfunction stake(uint256 amount) public override nonReentrant whenNotPaused {\t_stakeFrom(_msgSender(), amount); }\r\n\r\n\tfunction unpause() public override onlyOwner { _unpause(); }\r\n\r\n\tfunction updateReward() public override nonReentrant { _updateRewardFor(_msgSender()); }\r\n\r\n\tfunction updateRewardFor(address account) public override nonReentrant { _updateRewardFor(account); }\r\n\r\n\tfunction withdraw(uint256 amount) public override nonReentrant { _withdraw(amount); }\r\n\r\n\tfunction _getStakingTokenBase() internal view returns (uint256) { return _stakingTokenBase; }\r\n\r\n\t/* Internal Mutators */\r\n\r\n\tfunction _exit() internal virtual {\r\n\t\t_withdraw(_balances[_msgSender()]);\r\n\t\t_getReward();\r\n\t}\r\n\r\n\tfunction _getReward() internal virtual {\r\n\t\t_updateRewardFor(_msgSender());\r\n\t\tuint256 reward = _rewards[_msgSender()];\r\n\t\tif (reward > 0) {\r\n\t\t\t_rewards[_msgSender()] = 0;\r\n\t\t\t_rewardsToken.safeTransfer(_msgSender(), reward); // consider transfer\r\n\t\t\r\n\t\t\temit RewardPaid(_msgSender(), reward);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _getRewardExact(uint256 amount) internal virtual {\r\n\t\t_updateRewardFor(_msgSender());\r\n\t\tuint256 reward = _rewards[_msgSender()];\r\n\t\trequire(amount <= reward, 'SR Pool: cannot redeem more rewards than earned');\r\n\t\t\r\n\t\t_rewards[_msgSender()] = reward.sub(amount);\r\n\t\t_rewardsToken.safeTransfer(_msgSender(), amount); // consider transfer\r\n\t\t\r\n\t\temit RewardPaid(_msgSender(), amount);\r\n\t}\r\n\r\n\tfunction _recoverUnsupportedERC20(IERC20 token, address to,\tuint256 amount) internal virtual {\r\n\t\trequire(token != _stakingToken, 'StakedRewardsPool: cannot withdraw the staking token');\r\n\t\trequire(token != _rewardsToken, 'StakedRewardsPool: cannot withdraw the rewards token');\r\n\t\t\r\n\t\ttoken.safeTransfer(to, amount);\r\n\t\t\r\n\t\temit Recovered(token, to, amount);\r\n\t}\r\n\r\n\tfunction _stakeFrom(address account, uint256 amount) internal virtual {\r\n\t\trequire(account != address(0), 'SR Pool: cannot stake from the zero address');\r\n\t\trequire(amount > 0, 'SR Pool: cannot stake zero');\r\n\t\t\r\n\t\t_updateRewardFor(account);\r\n\t\t\r\n\t\t_totalSupply = _totalSupply.add(amount);\r\n\t\t_balances[account] = _balances[account].add(amount);\r\n\t\t_stakingToken.safeTransferFrom(account, address(this), amount);\r\n\t\t\r\n\t\temit Staked(account, amount);\r\n\t}\r\n\r\n\tfunction _updateRewardFor(address account) internal virtual;\r\n\r\n\tfunction _withdraw(uint256 amount) internal virtual {\r\n\t\trequire(amount > 0, 'StakedRewardsPool: cannot withdraw zero');\r\n\t\t\r\n\t\t_updateRewardFor(_msgSender());\r\n\t\t\r\n\t\t_totalSupply = _totalSupply.sub(amount);\r\n\t\t_balances[_msgSender()] = _balances[_msgSender()].sub(amount);\r\n\t\t_stakingToken.safeTransfer(_msgSender(), amount);\r\n\t\t_getReward();\r\n\t\t\r\n\t\temit Withdrawn(_msgSender(), amount);\r\n\t}\r\n}\r\n\r\n// File: browser/LoyaltyMine.sol\r\n\r\npragma solidity ^0.7.0;\r\n\r\n// Accuracy in block.timestamp is not needed.\r\n// https://consensys.github.io/smart-contract-best-practices/recommendations/#the-15-second-rule\r\n/* solhint-disable not-rely-on-time */\r\n\r\ncontract LoyaltyMine is StakedRewardsPool, IStakedRewardsPoolTimedRate {\r\n\tusing SafeMath for uint256;\r\n\r\n\tuint256 private _accruedRewardPerToken;\r\n\tmapping(address => uint256) private _accruedRewardPerTokenPaid;\r\n\tuint256 private _lastUpdateTime;\r\n\tuint256 private _periodEndTime;\r\n\tuint256 private _periodStartTime;\r\n\tuint256 private _rewardRate;\r\n\r\n\tmodifier whenStarted {\r\n\t\trequire(hasStarted(), 'SRPTR: current rewards distribution period has not yet begun');\r\n\t\t_;\r\n\t}\r\n\r\n\tconstructor(IERC20 rewardsToken, IERC20 stakingToken, uint8 stakingTokenDecimals, uint256 periodStartTime_, uint256 periodEndTime_)\r\n\tStakedRewardsPool(rewardsToken, stakingToken, stakingTokenDecimals) {\r\n\t\t_periodStartTime = periodStartTime_;\r\n\t\t_periodEndTime = periodEndTime_;\r\n\t}\r\n\r\n\t// Represents the ratio of reward token to staking token accrued thus far\r\n\t// multiplied by 10**stakingTokenDecimal (in event of a fraction).\r\n\tfunction accruedRewardPerToken() public view override returns (uint256) {\r\n\t\tuint256 totalSupply = totalSupply();\r\n\t\tif (totalSupply == 0) {\r\n\t\t\treturn _accruedRewardPerToken;\r\n\t\t}\r\n\r\n\t\tuint256 lastUpdateTime = _lastUpdateTime;\r\n\t\tuint256 lastTimeApplicable = lastTimeRewardApplicable();\r\n\r\n\t\t// Allow staking at any time without earning undue rewards.\r\n\t\t// The following is guaranteed if the next `if` is true:\r\n\t\t// lastUpdateTime == previous _periodEndTime || lastUpdateTime == 0\r\n\t\tif (_periodStartTime > lastUpdateTime) {\r\n\t\t\t// Prevent underflow\r\n\t\t\tif (_periodStartTime > lastTimeApplicable) {\r\n\t\t\t\treturn _accruedRewardPerToken;\r\n\t\t\t}\r\n\t\t\tlastUpdateTime = _periodStartTime;\r\n\t\t}\r\n\r\n\t\tuint256 dt = lastTimeApplicable.sub(lastUpdateTime);\r\n\r\n\t\tif (dt == 0) {\r\n\t\t\treturn _accruedRewardPerToken;\r\n\t\t}\r\n\r\n\t\tuint256 accruedReward = _rewardRate.mul(dt);\r\n\t\treturn _accruedRewardPerToken.add(accruedReward.mul(_getStakingTokenBase()).div(totalSupply));\r\n\t}\r\n\r\n\tfunction earned(address account) public view override(IStakedRewardsPool, StakedRewardsPool) returns (uint256) {\r\n\t\t// Divide by stakingTokenBase in accordance with accruedRewardPerToken()\r\n\t\treturn\r\n\t\t\tbalanceOf(account)\r\n\t\t\t\t.mul(accruedRewardPerToken().sub(_accruedRewardPerTokenPaid[account]))\r\n\t\t\t\t.div(_getStakingTokenBase())\r\n\t\t\t\t.add(_rewards[account]);\r\n\t}\r\n\r\n\tfunction hasStarted() public view override returns (bool) {\treturn block.timestamp >= _periodStartTime; }\r\n\r\n\tfunction hasEnded() public view override returns (bool) { return block.timestamp >= _periodEndTime;\t}\r\n\r\n\tfunction lastTimeRewardApplicable() public view override returns (uint256) {\r\n\t\t// Returns 0 if we have never run a staking period, else most recent historical endTime.\r\n\t\tif (!hasStarted()) {\r\n\t\t\treturn _lastUpdateTime;\r\n\t\t}\r\n\t\treturn Math.min(block.timestamp, _periodEndTime);\r\n\t}\r\n\r\n\tfunction periodDuration() public view override returns (uint256) { return _periodEndTime.sub(_periodStartTime);\t}\r\n\r\n\tfunction periodEndTime() public view override returns (uint256) { return _periodEndTime; }\r\n\r\n\tfunction periodStartTime() public view override returns (uint256) { return _periodStartTime; }\r\n\r\n\tfunction rewardRate() public view override returns (uint256) { return _rewardRate; }\r\n\r\n\tfunction timeRemainingInPeriod() public view override whenStarted returns (uint256)\t{\r\n\t\tif (hasEnded()) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\treturn _periodEndTime.sub(block.timestamp);\r\n\t}\r\n\r\n\t/* Public Mutators */\r\n\r\n\tfunction addToRewardsAllocation(uint256 amount)\tpublic override nonReentrant onlyOwner {\r\n\t\t_addToRewardsAllocation(amount);\r\n\t}\r\n\r\n\tfunction setNewPeriod(uint256 startTime, uint256 endTime) public override onlyOwner {\r\n\t\trequire(!hasStarted() || hasEnded(), 'SRPTR: cannot change an ongoing staking period');\r\n\t\trequire(endTime > startTime, 'SRPTR: ends before the fun begins');\r\n\t\t// The lastTimeRewardApplicable() function would not allow rewards for a past period that was never initiated.\r\n\t\trequire(startTime > block.timestamp, 'SRPTR: startTime must be greater than the current block time');\r\n\t\t// Ensure rewards are fully granted before changing the period.\r\n\t\t_updateAccrual();\r\n\r\n\t\tif (hasEnded()) {\r\n\t\t\t// Reset reward rate if this a **new** period (not changing one)\r\n\t\t\t// Note: you MUST addToRewardsAllocation again if you forgot to call\r\n\t\t\t// this after the previous period ended but before adding rewards.\r\n\t\t\t_rewardRate = 0;\r\n\t\t} else {\r\n\t\t\t// Update reward rate for new duration.\r\n\t\t\tuint256 totalReward = _rewardRate.mul(periodDuration());\r\n\t\t\t_rewardRate = totalReward.div(endTime.sub(startTime));\r\n\t\t}\r\n\r\n\t\t_periodStartTime = startTime;\r\n\t\t_periodEndTime = endTime;\r\n\r\n\t\temit NewPeriodSet(startTime, endTime);\r\n\t}\r\n\r\n\t/* Internal Mutators */\r\n\r\n\t// Ensure that the amount param is equal to the amount you've added to the contract, otherwise the funds will run out before _periodEndTime.\r\n\t// If called during an ongoing staking period, then the amount will be allocated to the current staking period, otherwise the next period.\r\n\tfunction _addToRewardsAllocation(uint256 amount) internal {\r\n\t\t// TODO Require that amount <= available rewards (see below)\r\n\t\t_updateAccrual();\r\n\r\n\t\t// Update reward rate based on remaining time.\r\n\t\tuint256 remainingTime;\r\n\t\tif (!hasStarted() || hasEnded()) {\r\n\t\t\tremainingTime = periodDuration();\r\n\t\t} else {\r\n\t\t\tremainingTime = timeRemainingInPeriod();\r\n\t\t}\r\n\r\n\t\t_rewardRate = _rewardRate.add(amount.div(remainingTime));\r\n\r\n\t\temit RewardAdded(amount);\r\n\t}\r\n\r\n\tfunction _updateAccrual() internal {\r\n\t\t_accruedRewardPerToken = accruedRewardPerToken();\r\n\t\t_lastUpdateTime = lastTimeRewardApplicable();\r\n\t}\r\n\r\n\t// This logic is needed for any interaction that may manipulate rewards.\r\n\tfunction _updateRewardFor(address account) internal override {\r\n\t\t_updateAccrual();\r\n\t\t// Allocate accrued rewards.\r\n\t\t_rewards[account] = earned(account);\r\n\t\t// Remove ability to earn rewards on or before the current timestamp.\r\n\t\t_accruedRewardPerTokenPaid[account] = _accruedRewardPerToken;\r\n\t}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"rewardsToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"stakingTokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"periodStartTime_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"periodEndTime_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTIme\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"NewPeriodSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accruedRewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addToRewardsAllocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getRewardExact\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverUnsupportedERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"setNewPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingTokenDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeRemainingInPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"updateRewardFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"LoyaltyMine","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000eda4f23957d2f819c22761c4d6d6157bd3fe0724000000000000000000000000515d7e9d75e2b76db60f8a051cd890eba23286bc000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000600e5e5f0000000000000000000000000000000000000000000000000000000060650cff","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://eb22be2f36c9427017d729055333f622a36c8bf80bd251f317aa0f9defe9804c"}]}