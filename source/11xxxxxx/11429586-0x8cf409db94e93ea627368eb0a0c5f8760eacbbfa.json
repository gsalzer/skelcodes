{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n  function _msgSender() internal virtual view returns (address payable) {\r\n    return msg.sender;\r\n  }\r\n\r\n  function _msgData() internal virtual view returns (bytes memory) {\r\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n    return msg.data;\r\n  }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev Initializes the contract setting the deployer as the initial owner.\r\n   */\r\n  constructor() internal {\r\n    address msgSender = _msgSender();\r\n    _owner = msgSender;\r\n    emit OwnershipTransferred(address(0), msgSender);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the address of the current owner.\r\n   */\r\n  function owner() public view returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(_owner == _msgSender(), 'Ownable: caller is not the owner');\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Leaves the contract without owner. It will not be possible to call\r\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n   *\r\n   * NOTE: Renouncing ownership will leave the contract without an owner,\r\n   * thereby removing any functionality that is only available to the owner.\r\n   */\r\n  function renounceOwnership() public virtual onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n   * Can only be called by the current owner.\r\n   */\r\n  function transferOwnership(address newOwner) public virtual onlyOwner {\r\n    require(newOwner != address(0), 'Ownable: new owner is the zero address');\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n  /**\r\n   * @dev Returns the addition of two unsigned integers, reverting on\r\n   * overflow.\r\n   *\r\n   * Counterpart to Solidity's `+` operator.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - Addition cannot overflow.\r\n   */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, 'SafeMath: addition overflow');\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the subtraction of two unsigned integers, reverting on\r\n   * overflow (when the result is negative).\r\n   *\r\n   * Counterpart to Solidity's `-` operator.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - Subtraction cannot overflow.\r\n   */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return sub(a, b, 'SafeMath: subtraction overflow');\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n   * overflow (when the result is negative).\r\n   *\r\n   * Counterpart to Solidity's `-` operator.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - Subtraction cannot overflow.\r\n   */\r\n  function sub(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    require(b <= a, errorMessage);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the multiplication of two unsigned integers, reverting on\r\n   * overflow.\r\n   *\r\n   * Counterpart to Solidity's `*` operator.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - Multiplication cannot overflow.\r\n   */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b, 'SafeMath: multiplication overflow');\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the integer division of two unsigned integers. Reverts on\r\n   * division by zero. The result is rounded towards zero.\r\n   *\r\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n   * uses an invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return div(a, b, 'SafeMath: division by zero');\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n   * division by zero. The result is rounded towards zero.\r\n   *\r\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n   * uses an invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function div(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    require(b > 0, errorMessage);\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n   * Reverts when dividing by zero.\r\n   *\r\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n   * invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return mod(a, b, 'SafeMath: modulo by zero');\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n   * Reverts with custom message when dividing by zero.\r\n   *\r\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n   * invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function mod(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    require(b != 0, errorMessage);\r\n    return a % b;\r\n  }\r\n}\r\n// File: contracts/utils/Roles.sol\r\n\r\npragma solidity >=0.6.0;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping(address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/introspection/IERC165.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n  /**\r\n   * @dev Returns true if this contract implements the interface defined by\r\n   * `interfaceId`. See the corresponding\r\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n   * to learn more about how these ids are created.\r\n   *\r\n   * This function call must use less than 30 000 gas.\r\n   */\r\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC1155/IERC1155.sol\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155 is IERC165 {\r\n  /**\r\n   * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\r\n   */\r\n  event TransferSingle(\r\n    address indexed operator,\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 id,\r\n    uint256 value\r\n  );\r\n\r\n  /**\r\n   * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\r\n   * transfers.\r\n   */\r\n  event TransferBatch(\r\n    address indexed operator,\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256[] ids,\r\n    uint256[] values\r\n  );\r\n\r\n  /**\r\n   * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\r\n   * `approved`.\r\n   */\r\n  event ApprovalForAll(\r\n    address indexed account,\r\n    address indexed operator,\r\n    bool approved\r\n  );\r\n\r\n  /**\r\n   * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\r\n   *\r\n   * If an {URI} event was emitted for `id`, the standard\r\n   * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\r\n   * returned by {IERC1155MetadataURI-uri}.\r\n   */\r\n  event URI(string value, uint256 indexed id);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens of token type `id` owned by `account`.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `account` cannot be the zero address.\r\n   */\r\n  function balanceOf(address account, uint256 id)\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  /**\r\n   * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `accounts` and `ids` must have the same length.\r\n   */\r\n  function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\r\n    external\r\n    view\r\n    returns (uint256[] memory);\r\n\r\n  /**\r\n   * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\r\n   *\r\n   * Emits an {ApprovalForAll} event.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `operator` cannot be the caller.\r\n   */\r\n  function setApprovalForAll(address operator, bool approved) external;\r\n\r\n  /**\r\n   * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\r\n   *\r\n   * See {setApprovalForAll}.\r\n   */\r\n  function isApprovedForAll(address account, address operator)\r\n    external\r\n    view\r\n    returns (bool);\r\n\r\n  /**\r\n   * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\r\n   *\r\n   * Emits a {TransferSingle} event.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `to` cannot be the zero address.\r\n   * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\r\n   * - `from` must have a balance of tokens of type `id` of at least `amount`.\r\n   * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n   * acceptance magic value.\r\n   */\r\n  function safeTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 id,\r\n    uint256 amount,\r\n    bytes calldata data\r\n  ) external;\r\n\r\n  /**\r\n   * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\r\n   *\r\n   * Emits a {TransferBatch} event.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `ids` and `amounts` must have the same length.\r\n   * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n   * acceptance magic value.\r\n   */\r\n  function safeBatchTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256[] calldata ids,\r\n    uint256[] calldata amounts,\r\n    bytes calldata data\r\n  ) external;\r\n}\r\n\r\n// File: contracts/ToshiDojo.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface ToshimonMinter {\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _id,\r\n    uint256 _amount,\r\n    bytes calldata _data\r\n  ) external;\r\n\r\n  function safeBatchTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256[] calldata _ids,\r\n    uint256[] calldata _amounts,\r\n    bytes calldata _data\r\n  ) external;\r\n\r\n  function setApprovalForAll(address _operator, bool _approved) external;\r\n\r\n  function isApprovedForAll(address _owner, address _operator)\r\n    external\r\n    view\r\n    returns (bool isOperator);\r\n\r\n  function balanceOf(address _owner, uint256 _id)\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  function totalSupply(uint256 _id) external view returns (uint256);\r\n\r\n  function tokenMaxSupply(uint256 _id) external view returns (uint256);\r\n\r\n  function burn(\r\n    address _account,\r\n    uint256 _id,\r\n    uint256 _amount\r\n  ) external;\r\n\r\n  function mint(\r\n    address _to,\r\n    uint256 _id,\r\n    uint256 _quantity,\r\n    bytes memory _data\r\n  ) external;\r\n  function mintBatch(address user, uint256[] calldata ids, uint256[] calldata amounts)\r\n        external;\r\n}\r\n\r\ninterface ToshiCoin {\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function totalClaimed() external view returns (uint256);\r\n\r\n  function addClaimed(uint256 _amount) external;\r\n\r\n  function setClaimed(uint256 _amount) external;\r\n\r\n  function transfer(address receiver, uint256 numTokens)\r\n    external\r\n    returns (bool);\r\n\r\n  function transferFrom(\r\n    address owner,\r\n    address buyer,\r\n    uint256 numTokens\r\n  ) external returns (bool);\r\n\r\n  function balanceOf(address owner) external view returns (uint256);\r\n\r\n  function mint(address _to, uint256 _amount) external;\r\n\r\n  function burn(address _account, uint256 value) external;\r\n}\r\n\r\n\r\ncontract ToshiDojo is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  ToshimonMinter public toshimonMinter;\r\n  ToshiCoin public toshiCoin;\r\n  uint256 public minterPackId;\r\n  uint256 public packPriceInToshiCoin;\r\n  uint256 public packsPurchased;\r\n  uint256 public packsRedeemed;\r\n  bytes private prevHash;\r\n\r\n  uint256[] public probabilities;\r\n  uint256[][] public cardRanges;\r\n  uint256[] public probabilitiesRare;\r\n  uint256[][] public cardRangesRare; \r\n\r\n\r\n  event Redeemed(\r\n    address indexed _user,\r\n    uint256[] indexed _cardIds,\r\n    uint256[] indexed _quantities\r\n  );\r\n\r\n  constructor() public {\r\n    toshimonMinter = ToshimonMinter(0xd2d2a84f0eB587F70E181A0C4B252c2c053f80cB);\r\n    toshiCoin = ToshiCoin(0x3EEfF4487F64bF73cd9D99e83D837B0Ef1F58247);\r\n    minterPackId = 0;\r\n    packPriceInToshiCoin = 1000000000000000000;\r\n    prevHash = abi.encodePacked(block.timestamp, msg.sender);\r\n    probabilities = [350,600,780,930,980,995,1000];\r\n    cardRanges = [[uint256(1),uint256(102)],[uint256(103),uint256(180)],[uint256(181),uint256(226)],[uint256(227),uint256(248)],[uint256(249),uint256(258)],[uint256(259),uint256(263)],[uint256(264),uint256(264)]];\r\n    probabilitiesRare = [700,930,980,995,1000];\r\n    cardRangesRare = [[265,291],[292,307],[308,310],[311,311],[312,312]];\r\n\r\n\r\n  }\r\n\r\n  modifier onlyEOA() {\r\n    require(msg.sender == tx.origin, 'Not eoa');\r\n    _;\r\n  }\r\n\r\n  function setMinterPackId(uint256 _minterPackId) external onlyOwner {\r\n    minterPackId = _minterPackId;\r\n  }\r\n\r\n\r\n  function setPackPriceInToshiCoin(uint256 _packPriceInToshiCoin)\r\n    external\r\n    onlyOwner\r\n  {\r\n    packPriceInToshiCoin = _packPriceInToshiCoin;\r\n  }\r\n\r\n  function tokenMaxSupply(uint256 _cardId) external view returns (uint256) {\r\n    return toshimonMinter.tokenMaxSupply(_cardId);\r\n  }\r\n\r\n  function totalSupply(uint256 _cardId) external view returns (uint256) {\r\n    return toshimonMinter.totalSupply(_cardId);\r\n  }\r\n\r\n\r\n  function addPack(\r\n    uint256[] memory _probabilities,\r\n    uint256[][] memory _cardRanges,\r\n    uint256[] memory _probabilitiesRare,\r\n    uint256[][] memory _cardRangesRare\r\n    \r\n  ) public onlyOwner {\r\n    require(_probabilities.length > 0, 'probabilities cannot be empty');\r\n    require(_cardRanges.length > 0, 'cardRanges cannot be empty');\r\n    require(_probabilitiesRare.length > 0, 'probabilities rare cannot be empty');\r\n    require(_cardRangesRare.length > 0, 'cardRanges rare cannot be empty');\r\n\r\n\r\n    probabilities = _probabilities;\r\n    cardRanges = _cardRanges;\r\n    probabilitiesRare = _probabilitiesRare;\r\n    cardRangesRare = _cardRangesRare;\r\n\r\n\r\n  }\r\n\r\n  function updateprobabilities(uint256[] memory _probabilities)\r\n    external\r\n    onlyOwner\r\n  {\r\n    probabilities = _probabilities;\r\n  }\r\n\r\n  function updateCardRanges(uint256[][] memory _cardRanges)\r\n    external\r\n    onlyOwner\r\n  {\r\n    cardRanges = _cardRanges;\r\n  }\r\n    function updateProbabilitiesRare(uint256[] memory _probabilitiesRare)\r\n    external\r\n    onlyOwner\r\n  {\r\n    probabilitiesRare = _probabilitiesRare;\r\n  }\r\n\r\n  function updateCardRangesRare(uint256[][] memory _cardRangesRare)\r\n    external\r\n    onlyOwner\r\n  {\r\n    cardRangesRare = _cardRangesRare;\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  // Purchase one or more card packs for the price in ToshiCoin\r\n  function purchasePack(uint256 amount) public {\r\n    require(packPriceInToshiCoin > 0, 'Pack does not exist');\r\n    require(\r\n      toshiCoin.balanceOf(msg.sender) >= packPriceInToshiCoin.mul(amount),\r\n      'Not enough toshiCoin for pack'\r\n    );\r\n\r\n    toshiCoin.burn(msg.sender, packPriceInToshiCoin.mul(amount));\r\n    packsPurchased = packsPurchased.add(amount);\r\n    toshimonMinter.mint(msg.sender, minterPackId, amount, '');\r\n  }\r\n  \r\n  // Redeem a random card pack (Not callable by contract, to prevent exploits on RNG)\r\n\r\n  function redeemPack(uint256 _packsToRedeem) external {\r\n     require(\r\n      toshimonMinter.balanceOf(msg.sender, minterPackId) >= _packsToRedeem,\r\n      'Not enough pack tokens'\r\n    );\r\n\r\n    toshimonMinter.burn(msg.sender, minterPackId, _packsToRedeem);\r\n\r\n    uint256 probability;\r\n    uint256 max;\r\n    uint256 min; \r\n    uint256[] memory _cardsToMint = new uint256[](312);\r\n    uint256[] memory _cardsToMintCount = new uint256[](312);\r\n    uint256 cardIdWon;\r\n    uint256 rng = _rngSimple(_rng());\r\n\r\n\r\n    for (uint256 i = 0; i < _packsToRedeem; ++i) {\r\n\r\n      for (uint256 j = 0; j < 7; ++j) {\r\n          probability = rng % 1000;\r\n          for (uint256 _probIndex = 0; _probIndex < probabilities.length; ++_probIndex) {\r\n            if(probability < probabilities[_probIndex]){\r\n              max = cardRanges[_probIndex][1];\r\n              min = cardRanges[_probIndex][0];\r\n              break;\r\n            }\r\n          }\r\n          rng = _rngSimple(rng);\r\n          cardIdWon = (rng % (max + 1 - min)) + min;\r\n          _cardsToMint[cardIdWon - 1] = cardIdWon;\r\n          _cardsToMintCount[cardIdWon - 1] = _cardsToMintCount[cardIdWon - 1] + 1;\r\n      }\r\n      \r\n      // run for rare packs start\r\n      probability = rng % 1000;\r\n      for (uint256 _probIndex = 0; _probIndex < probabilitiesRare.length; ++_probIndex) {\r\n        if(probability < probabilitiesRare[_probIndex]){\r\n          max = cardRangesRare[_probIndex][1];\r\n          min = cardRangesRare[_probIndex][0];\r\n          break;\r\n        }\r\n      }\r\n      rng = _rngSimple(rng);\r\n      cardIdWon = (rng % (max + 1 - min)) + min;\r\n      _cardsToMint[cardIdWon - 1] = cardIdWon;\r\n      _cardsToMintCount[cardIdWon - 1] = _cardsToMintCount[cardIdWon - 1] + 1;\r\n    }\r\n    \r\n    \r\n    emit Redeemed(msg.sender,_cardsToMint,_cardsToMintCount);\r\n    toshimonMinter.mintBatch(msg.sender,_cardsToMint,_cardsToMintCount);\r\n  }\r\n  \r\n  \r\n  // Utility function to check if a value is inside an array\r\n  function _isInArray(uint256 _value, uint256[] memory _array)\r\n    internal\r\n    pure\r\n    returns (bool)\r\n  {\r\n    uint256 length = _array.length;\r\n    for (uint256 i = 0; i < length; ++i) {\r\n      if (_array[i] == _value) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n\r\n  // This is a pseudo random function, but considering the fact that redeem function is not callable by contract,\r\n  // and the fact that ToshiCoin is not transferable, this should be enough to protect us from an attack\r\n  // I would only expect a miner to be able to exploit this, and the attack cost would not be worth it in our case\r\n  function _rng() internal returns (uint256) {\r\n    bytes32 ret = keccak256(prevHash);\r\n    prevHash = abi.encodePacked(ret,block.coinbase,msg.sender);\r\n    return uint256(ret);\r\n  }\r\n  function _rngSimple(uint256 seed) internal pure returns (uint256) {\r\n\r\n    return uint256(keccak256(abi.encodePacked(seed)));\r\n  }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256[]\",\"name\":\"_cardIds\",\"type\":\"uint256[]\"},{\"indexed\":true,\"internalType\":\"uint256[]\",\"name\":\"_quantities\",\"type\":\"uint256[]\"}],\"name\":\"Redeemed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_probabilities\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"_cardRanges\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint256[]\",\"name\":\"_probabilitiesRare\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"_cardRangesRare\",\"type\":\"uint256[][]\"}],\"name\":\"addPack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cardRanges\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cardRangesRare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minterPackId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"packPriceInToshiCoin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"packsPurchased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"packsRedeemed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"probabilities\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"probabilitiesRare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"purchasePack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_packsToRedeem\",\"type\":\"uint256\"}],\"name\":\"redeemPack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minterPackId\",\"type\":\"uint256\"}],\"name\":\"setMinterPackId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_packPriceInToshiCoin\",\"type\":\"uint256\"}],\"name\":\"setPackPriceInToshiCoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cardId\",\"type\":\"uint256\"}],\"name\":\"tokenMaxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toshiCoin\",\"outputs\":[{\"internalType\":\"contract ToshiCoin\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toshimonMinter\",\"outputs\":[{\"internalType\":\"contract ToshimonMinter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cardId\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[][]\",\"name\":\"_cardRanges\",\"type\":\"uint256[][]\"}],\"name\":\"updateCardRanges\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[][]\",\"name\":\"_cardRangesRare\",\"type\":\"uint256[][]\"}],\"name\":\"updateCardRangesRare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_probabilitiesRare\",\"type\":\"uint256[]\"}],\"name\":\"updateProbabilitiesRare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_probabilities\",\"type\":\"uint256[]\"}],\"name\":\"updateprobabilities\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ToshiDojo","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://0e64d251ac03bc8dda4fc553f8d38c64b5973d004b4f01a1bf5ded694c4293e6"}]}