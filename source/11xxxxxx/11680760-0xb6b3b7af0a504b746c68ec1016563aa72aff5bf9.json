{"status":"1","message":"OK","result":[{"SourceCode":"{\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\"},\"SavixPresale.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\ncontract SavixPresale\\r\\n{\\r\\n  string private constant NAME = \\\"SavixPresale\\\";\\r\\n\\r\\n  address private _owner;\\r\\n  \\r\\n  IERC20 private _token;\\r\\n\\r\\n  bool private _isActive = false;\\r\\n  bool private _isFinished = false;\\r\\n\\r\\n  uint256 private _startDate;\\r\\n  \\r\\n   mapping(address =\\u003e uint256) private _contributions;\\r\\n\\r\\n  // Amount of wei raised\\r\\n  uint256 private _weiRaised;\\r\\n  uint256 private _tokensSold;\\r\\n  uint256 private _tokenUnlockDate;\\r\\n  \\r\\n  uint256 private constant MIN_CONTRIBUTION = 1 * 10**17; // 0.1 ETH\\r\\n  uint256 private constant MAX_CONTRIBUTION = 15 * 10**18; // 15 ETH\\r\\n  uint256 private constant TOKEN_RATE = 60; // svx per eth\\r\\n  uint256 private constant PRESALE_TOKEN_AMOUNT = 70000 * 10**9; // 9 decimals\\r\\n  \\r\\n  constructor() public \\r\\n  {\\r\\n      _owner = msg.sender;\\r\\n  }\\r\\n\\r\\n  modifier onlyOwner()\\r\\n  {\\r\\n    require(msg.sender == _owner, \\\"Only Owner\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function getOwner() \\r\\n    external\\r\\n    view \\r\\n    returns(address)\\r\\n  {\\r\\n      return _owner;\\r\\n  }\\r\\n  \\r\\n  modifier mustBeActive()\\r\\n  {\\r\\n    require(_isActive == true, \\\"Presale not active\\\"); // presale must be active\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function name() external pure returns (string memory) \\r\\n  {\\r\\n      return NAME;\\r\\n  }\\r\\n\\r\\n  function isFinished() public view returns(bool)\\r\\n  {\\r\\n     return _isFinished;\\r\\n  }\\r\\n\\r\\n  function isActive() public view returns(bool)\\r\\n  {\\r\\n     return _isActive;\\r\\n  }\\r\\n\\r\\n  function getContributor(address addr) \\r\\n    external\\r\\n    view \\r\\n    returns(bool, uint256)\\r\\n  {\\r\\n      return (true, _contributions[addr]);\\r\\n  }\\r\\n\\r\\n  function getVersion() \\r\\n    external \\r\\n    pure\\r\\n    returns(uint16)\\r\\n  {\\r\\n    return 1;\\r\\n  }\\r\\n  \\r\\n  /**\\r\\n  * token: target token contract for sale\\r\\n  */  \\r\\n  function startPresale(IERC20 token) \\r\\n    external \\r\\n    onlyOwner\\r\\n  {\\r\\n      require(_isActive == false,\\\"presale already active\\\");\\r\\n      require(_isFinished == false,\\\"presale already finished\\\");\\r\\n      require(IERC20(token).balanceOf(address(this)) == PRESALE_TOKEN_AMOUNT , \\\"missing presale tokens\\\");\\r\\n      _token = IERC20(token);\\r\\n      _isActive = true;\\r\\n      _startDate = now;\\r\\n      _tokenUnlockDate = _startDate + 180 days;\\r\\n  }\\r\\n  \\r\\n  function endPresale(address payable ethWallet) \\r\\n    external\\r\\n    onlyOwner\\r\\n  {\\r\\n      _isActive = false;\\r\\n      _isFinished = true;\\r\\n      // send contributions to target wallet\\r\\n      ethWallet.transfer(payable(address(this)).balance);\\r\\n  }\\r\\n\\r\\n  function unlockRemainingTokens() \\r\\n    external \\r\\n    onlyOwner\\r\\n  {\\r\\n      require(now \\u003e= _tokenUnlockDate, \\\"Tokens still locked\\\");\\r\\n      uint256 balance = _token.balanceOf(address(this));\\r\\n      _token.transfer(msg.sender, balance);\\r\\n  }\\r\\n\\r\\n  function getTokenUnlockDate()\\r\\n    external\\r\\n    view\\r\\n    returns(uint256)\\r\\n  {\\r\\n    return _tokenUnlockDate;\\r\\n  }\\r\\n  \\r\\n  function getContributions() external view returns(uint256)\\r\\n  {\\r\\n      return _weiRaised;\\r\\n  }\\r\\n\\r\\n  function getEthBalance() external view returns(uint256)\\r\\n  {\\r\\n    return payable(address(this)).balance;\\r\\n  }\\r\\n\\r\\n  function getMinContribution() external pure returns(uint256)\\r\\n  {\\r\\n    return MIN_CONTRIBUTION;\\r\\n  }\\r\\n\\r\\n  function getMaxContribution() external pure returns(uint256)\\r\\n  {\\r\\n    return MAX_CONTRIBUTION;\\r\\n  }\\r\\n\\r\\n  function getTokenRate() external pure returns(uint256)\\r\\n  {\\r\\n    return TOKEN_RATE;\\r\\n  }\\r\\n\\r\\n  function getTokensLeftForSale() external view returns(uint256)\\r\\n  {\\r\\n    if(_isActive == false || _isFinished == true)\\r\\n      return 0;\\r\\n\\r\\n    return _token.balanceOf(address(this));\\r\\n  }  \\r\\n\\r\\n  function getMaxTokensForSale() external pure returns(uint256)\\r\\n  {\\r\\n      return PRESALE_TOKEN_AMOUNT;\\r\\n  }   \\r\\n\\r\\n  function getTokensSold() external view returns(uint256)\\r\\n  {\\r\\n    return _tokensSold;\\r\\n  }\\r\\n\\r\\n  receive() external payable mustBeActive\\r\\n  { \\r\\n      require(msg.sender != address(0));\\r\\n      require(msg.value != 0);\\r\\n    \\r\\n      // add the amount already contributed for the max contribution check\\r\\n      // sender can contribute multiple times until max contribution limit\\r\\n      uint256 fullValue = msg.value + _contributions[msg.sender];\\r\\n    \\r\\n      // must be within contribution window\\r\\n      require(fullValue \\u003e= MIN_CONTRIBUTION \\u0026\\u0026 fullValue \\u003c= MAX_CONTRIBUTION, \\\"Not within contribution window\\\"); \\r\\n    \\r\\n      // safemath needed here ? msg.value can be max of 15*10**18\\r\\n      uint256 tokensToSend = (msg.value * TOKEN_RATE) / 10**9;\\r\\n\\r\\n      // able to send this amount ?\\r\\n      require(_token.balanceOf(address(this)) \\u003e= tokensToSend, \\\"Out of tokens\\\"); \\r\\n    \\r\\n      // send tokens from _tokenWallet\\r\\n      // the aproved token amount equals the presale token amount\\r\\n      _token.transfer(msg.sender, tokensToSend);\\r\\n    \\r\\n      // adjust contributors contribution\\r\\n      _contributions[msg.sender] += msg.value;\\r\\n    \\r\\n      // keeping track ourself for safety reasons. _weiRaised should always equal address(this).balance\\r\\n      // alwso _weiRaised stays after eth got transferred out.\\r\\n      _weiRaised += msg.value;\\r\\n      _tokensSold += tokensToSend;\\r\\n  }\\r\\n}\\r\\n\"}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"ethWallet\",\"type\":\"address\"}],\"name\":\"endPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContributions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getContributor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEthBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxContribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxTokensForSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinContribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenUnlockDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokensLeftForSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokensSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFinished\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"startPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockRemainingTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"SavixPresale","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://6afd205dc06f6e520b4ab81062e553334e318f6658b9c9c3fc0a224e7ac635f1"}]}