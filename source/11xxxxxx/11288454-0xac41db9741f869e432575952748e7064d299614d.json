{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/igor/job/dev/defi-sdk/contracts/adapters/compound/CompoundRegistry.sol\": {\r\n      \"content\": \"// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\\n// GNU General Public License for more details.\\n//\\n// You should have received a copy of the GNU General Public License\\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\\n//\\n// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity 0.7.3;\\n\\nimport { Ownable } from \\\"../../core/Ownable.sol\\\";\\n\\n/**\\n * @title Registry for Compound contracts.\\n * @dev Implements the only function - getCToken(address).\\n * @notice Call getCToken(token) function and get address\\n * of CToken contract for the given token address.\\n * @author Igor Sobolev <sobolev@zerion.io>\\n */\\ncontract CompoundRegistry is Ownable {\\n    mapping(address => address) internal cToken_;\\n\\n    function setCTokens(address[] calldata tokens, address[] calldata cTokens) external {\\n        uint256 length = tokens.length;\\n        require(cTokens.length == length, \\\"CR: inconsistent arrays\\\");\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            setCToken(tokens[i], cTokens[i]);\\n        }\\n    }\\n\\n    function setCToken(address token, address cToken) internal {\\n        cToken_[token] = cToken;\\n    }\\n\\n    function getCToken(address token) external view returns (address) {\\n        return cToken_[token];\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/igor/job/dev/defi-sdk/contracts/core/Ownable.sol\": {\r\n      \"content\": \"// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\\n// GNU General Public License for more details.\\n//\\n// You should have received a copy of the GNU General Public License\\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\\n//\\n// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity 0.7.3;\\npragma experimental ABIEncoderV2;\\n\\nabstract contract Ownable {\\n    modifier onlyOwner {\\n        require(msg.sender == owner_, \\\"O: only owner\\\");\\n        _;\\n    }\\n\\n    modifier onlyPendingOwner {\\n        require(msg.sender == pendingOwner_, \\\"O: only pending owner\\\");\\n        _;\\n    }\\n\\n    address private owner_;\\n    address private pendingOwner_;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @notice Initializes owner variable with msg.sender address.\\n     */\\n    constructor() {\\n        owner_ = msg.sender;\\n        emit OwnershipTransferred(address(0), msg.sender);\\n    }\\n\\n    /**\\n     * @notice Sets pending owner to the desired address.\\n     * The function is callable only by the owner.\\n     */\\n    function proposeOwnership(address newOwner) external onlyOwner {\\n        require(newOwner != address(0), \\\"O: empty newOwner\\\");\\n        require(newOwner != owner_, \\\"O: equal to owner_\\\");\\n        require(newOwner != pendingOwner_, \\\"O: equal to pendingOwner_\\\");\\n        pendingOwner_ = newOwner;\\n    }\\n\\n    /**\\n     * @notice Transfers ownership to the pending owner.\\n     * The function is callable only by the pending owner.\\n     */\\n    function acceptOwnership() external onlyPendingOwner {\\n        emit OwnershipTransferred(owner_, msg.sender);\\n        owner_ = msg.sender;\\n        delete pendingOwner_;\\n    }\\n\\n    /**\\n     * @return Owner of the contract.\\n     */\\n    function owner() external view returns (address) {\\n        return owner_;\\n    }\\n\\n    /**\\n     * @return Pending owner of the contract.\\n     */\\n    function pendingOwner() external view returns (address) {\\n        return pendingOwner_;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000000\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {\r\n      \"\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getCToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"proposeOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"cTokens\",\"type\":\"address[]\"}],\"name\":\"setCTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CompoundRegistry","CompilerVersion":"v0.7.3+commit.9bfce1f6","OptimizationUsed":"1","Runs":"1000000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}