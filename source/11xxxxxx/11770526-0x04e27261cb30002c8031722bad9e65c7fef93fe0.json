{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/gaurangtorvekar/Documents/coding/indorse/indorse-smartcontracts/staking/contracts/IndorseStaking.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/ownership/Ownable.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol\\\";\\n\\ncontract IndorseStaking is Ownable, ReentrancyGuard {\\n\\n    using SafeMath for uint;\\n\\n    /// @dev `Checkpoint` is the structure that attaches a block number to a\\n    ///  given value, the block number attached is the one that last changed the\\n    ///  value\\n    struct Checkpoint {\\n\\n        // `fromBlock` is the block number that the value was generated from\\n        uint128 fromBlock;\\n\\n        // `value` is the amount of tokens at a specific block number\\n        uint128 value;\\n    }\\n\\n    // `balances` is the map that tracks the balance of each address, in this\\n    //  contract when the balance changes the block number that the change\\n    //  occurred is also included in the map\\n    mapping(address => Checkpoint[]) balances;\\n\\n    function getCheckpoint(address _owner, uint _index)\\n    view\\n    external\\n    returns (\\n        uint128 fromBlock,\\n        uint128 value\\n    )\\n    {\\n        Checkpoint storage checkpoint_ = balances[_owner][_index];\\n        fromBlock = checkpoint_.fromBlock;\\n        value = checkpoint_.value;\\n    }\\n\\n    // Tracks the history of the total delegations of the token\\n    Checkpoint[] totalSupplyHistory;\\n\\n    struct Staker {\\n        uint stake;\\n        uint lastDepositAt;\\n        uint delegatedAmount;\\n        address delegatee;\\n    }\\n\\n    mapping(address => Staker) public stakers;\\n\\n    // Tracks sums of delegations for delegatees\\n    mapping(address => uint) public delegationSums;\\n\\n    uint private constant GRANULARITY = 10e11;\\n    uint private constant NUMBER_OF_VARIABLE_REWARD_PERIODS = 59;\\n\\n    IERC20 public tokenAddress = ERC20(0xf8e386EDa857484f5a12e4B5DAa9984E06E73705);\\n    address public indorseMultiSigHolder = 0xe27308bd67E07a5c0a899aa6632183CAb8c2818A;\\n    uint public rewardsPaid;\\n    uint public totalStake;\\n    uint public stakingStartBlock;\\n    uint public stakingRewardPeriodLength; //in blocks\\n    uint public stakingStartingReward;\\n    uint public stakingRewardDownwardStep;\\n    uint public delegationStakeRequirement;\\n    uint public totalVotingPower;\\n\\n    constructor(uint _stakingRewardPeriodLength, uint _stakingStartingReward, uint _stakingRewardDownwardStep, uint _delegationStakeRequirement) public {\\n        stakingStartBlock = block.number;\\n        stakingRewardPeriodLength = _stakingRewardPeriodLength;\\n        stakingStartingReward = _stakingStartingReward;\\n        stakingRewardDownwardStep = _stakingRewardDownwardStep;\\n        delegationStakeRequirement = _delegationStakeRequirement;\\n        \\n    }\\n\\n    function setDelegationStakeRequirement(uint _delegationStakeRequirement) external onlyOwner {\\n        delegationStakeRequirement = _delegationStakeRequirement;\\n    }\\n\\n    function getRewardAtBlock(uint _stake, uint _lastDepositAt, uint _blockNumber) public view returns (uint reward)  {\\n        if(_stake == 0) {\\n            return 0;\\n        }\\n\\n        uint depositingInterval = _lastDepositAt.sub(stakingStartBlock).div(stakingRewardPeriodLength);\\n        //0 is the first period\\n        uint currentInterval = _blockNumber.sub(stakingStartBlock).div(stakingRewardPeriodLength);\\n\\n        uint lastVariableRewardInterval = currentInterval > NUMBER_OF_VARIABLE_REWARD_PERIODS ? NUMBER_OF_VARIABLE_REWARD_PERIODS : currentInterval;\\n\\n        if (currentInterval > depositingInterval) {\\n            //first interval, A\\n            uint rewardAtFirstInterval = stakingStartingReward.sub((depositingInterval.mul(stakingRewardDownwardStep)));\\n\\n            uint widthOfFirstIntervalSection = stakingStartBlock.add(depositingInterval.add(1).mul(stakingRewardPeriodLength)).sub(_lastDepositAt);\\n\\n            reward = reward.add(rewardAtFirstInterval.mul(widthOfFirstIntervalSection));\\n\\n            //last interval, C\\n            uint rewardAtLastInterval = stakingStartingReward.sub(lastVariableRewardInterval.mul(stakingRewardDownwardStep));\\n\\n            uint widthOfLastIntervalSection = _blockNumber.sub(stakingStartBlock.add(lastVariableRewardInterval.mul(stakingRewardPeriodLength)));\\n\\n            reward = reward.add(widthOfLastIntervalSection.mul(rewardAtLastInterval));\\n\\n            if (lastVariableRewardInterval.sub(depositingInterval) > 1) {\\n                uint rewardAtPenultimateInterval = rewardAtLastInterval.add(stakingRewardDownwardStep);\\n\\n                uint widthOfMiddleSections = (lastVariableRewardInterval.sub(depositingInterval).sub(1)).mul(stakingRewardPeriodLength);\\n\\n                //middle intervals base, B\\n                reward = reward.add(rewardAtPenultimateInterval.mul(widthOfMiddleSections));\\n\\n                //middle intervals triangle, B'\\n                uint rewardAtSecondInterval = rewardAtFirstInterval.sub(stakingRewardDownwardStep);\\n\\n                reward.add(((rewardAtSecondInterval.sub(rewardAtPenultimateInterval)).mul(widthOfMiddleSections)).div(2));\\n            }\\n        } else {\\n            reward = reward.add(_blockNumber.sub(_lastDepositAt).mul(stakingStartingReward.sub(depositingInterval.mul(stakingRewardDownwardStep))));\\n        }\\n\\n        reward = reward.mul(_stake);\\n        reward = reward.div(GRANULARITY);\\n    }\\n\\n    //Adds the amount to the stake\\n    //If staker exists, it reaps the rewards and adds them to the stake as well\\n    function stake(uint _amount) external {\\n        // The tokens will be held in a Gnosis multisig contract for which the owners will be the Indorse board members\\n        require(tokenAddress.transferFrom(msg.sender, indorseMultiSigHolder, _amount), \\\"Insufficient token balance\\\");\\n        Staker storage staker = stakers[msg.sender];\\n\\n        //New staker\\n        if (staker.stake == 0) {\\n            staker.stake = _amount;\\n            staker.lastDepositAt = block.number;\\n            totalStake = totalStake.add(_amount);\\n            //Existing staker - adding current reward to the stake\\n        } else {\\n            uint reward = getRewardAtBlock(staker.stake, staker.lastDepositAt, block.number);\\n            staker.stake = staker.stake.add(_amount.add(reward));\\n            rewardsPaid = rewardsPaid.add(reward);\\n            totalStake = totalStake.add(_amount).add(reward);\\n            staker.lastDepositAt = block.number;\\n        }\\n    }\\n\\n    function delegate(uint _amount, address _delegatee) external {\\n        Staker storage staker = stakers[msg.sender];\\n\\n        Staker storage delegateeStaker = stakers[_delegatee];\\n\\n        require(delegateeStaker.stake >= delegationStakeRequirement, \\\"Delegator does not meet staking requirement.\\\");\\n        require(_amount > 0, \\\"Amount cannot equal 0.\\\");\\n        require(_amount <= staker.stake, \\\"Amount must be lesser or equal to the stake.\\\");\\n\\n        if (staker.delegatee != _delegatee) {\\n            //New delegation\\n            if (staker.delegatedAmount != 0) {\\n                //Undelegating previous delegation\\n                delegationSums[staker.delegatee] = delegationSums[staker.delegatee].sub(staker.delegatedAmount);\\n                updateValueAtNow(balances[staker.delegatee], delegationSums[staker.delegatee]);\\n                totalVotingPower = totalVotingPower.sub(staker.delegatedAmount);\\n            }\\n\\n            delegationSums[_delegatee] = delegationSums[_delegatee].add(_amount);\\n            totalVotingPower = totalVotingPower.add(_amount);\\n            staker.delegatee = _delegatee;\\n        } else if (staker.delegatedAmount != 0 && staker.delegatee == _delegatee) {\\n            //Changing the delegated amount\\n            if (_amount < staker.delegatedAmount) {\\n                //Decreasing delegation\\n                delegationSums[_delegatee] = delegationSums[_delegatee].sub(staker.delegatedAmount.sub(_amount));\\n                totalVotingPower = totalVotingPower.sub(staker.delegatedAmount.sub(_amount));\\n            } else {\\n                //Increasing delegation\\n                delegationSums[_delegatee] = delegationSums[_delegatee].add(_amount.sub(staker.delegatedAmount));\\n                totalVotingPower = totalVotingPower.add(_amount.sub(staker.delegatedAmount));\\n            }\\n        }\\n\\n        staker.delegatedAmount = _amount;\\n\\n        updateValueAtNow(balances[_delegatee], delegationSums[_delegatee]);\\n        updateValueAtNow(totalSupplyHistory, totalVotingPower);\\n    }\\n\\n    function undelegate() external {\\n        Staker storage staker = stakers[msg.sender];\\n        _undelegate(staker);\\n    }\\n\\n    //Withdraws the entire stake and rewards\\n    function claimAndWithdraw() external nonReentrant {\\n        Staker storage staker = stakers[msg.sender];\\n        if (staker.stake == 0) {\\n            return;\\n        }\\n\\n        uint reward = getRewardAtBlock(staker.stake, staker.lastDepositAt, block.number);\\n        totalStake = totalStake.sub(staker.stake);\\n        rewardsPaid = rewardsPaid.add(reward);\\n        require(tokenAddress.transferFrom(indorseMultiSigHolder, msg.sender, staker.stake.add(reward)));\\n        staker.stake = 0;\\n\\n        if (staker.delegatedAmount != 0) {\\n            _undelegate(staker);\\n        }\\n    }\\n\\n    //Withdraw without reward, reward is lost\\n    function withdraw() external nonReentrant {\\n        Staker storage staker = stakers[msg.sender];\\n\\n        if (staker.stake == 0) {\\n            return;\\n        }\\n\\n        totalStake = totalStake.sub(staker.stake);\\n        require(tokenAddress.transferFrom(indorseMultiSigHolder, msg.sender, staker.stake));\\n        staker.stake = 0;\\n\\n        if (staker.delegatedAmount != 0) {\\n            _undelegate(staker);\\n        }\\n    }\\n\\n    //Transfers the accumulated rewards to sender, leaves the principal untouched\\n    function claim() external nonReentrant {\\n        Staker storage staker = stakers[msg.sender];\\n\\n        if(staker.stake == 0) {\\n            return;\\n        }\\n\\n        uint reward = getRewardAtBlock(staker.stake, staker.lastDepositAt, block.number);\\n        require(tokenAddress.transferFrom(indorseMultiSigHolder, msg.sender, reward));\\n        rewardsPaid = rewardsPaid.add(reward);\\n        staker.lastDepositAt = block.number;\\n    }\\n\\n    //Add current reward to stake\\n    //Can move it to a separate function, make clearing all delegations a prerequisite for withdrawal\\n    function claimAndStake() external {\\n        Staker storage staker = stakers[msg.sender];\\n\\n        if (staker.stake == 0) {\\n            return;\\n        }\\n\\n        uint reward = getRewardAtBlock(staker.stake, staker.lastDepositAt, block.number);\\n        totalStake = totalStake.add(reward);\\n        rewardsPaid = rewardsPaid.add(reward);\\n        staker.stake = staker.stake.add(reward);\\n        staker.lastDepositAt = block.number;\\n    }\\n\\n    function getStaker(address _addr)\\n    external\\n    view\\n    returns (\\n        uint stake_,\\n        uint lastDepositAt_,\\n        uint delegatedAmount_,\\n        address delegatee_\\n    )\\n    {\\n        Staker storage staker_ = stakers[_addr];\\n\\n        stake_ = staker_.stake;\\n        lastDepositAt_ = staker_.lastDepositAt;\\n        delegatedAmount_ = staker_.delegatedAmount;\\n        delegatee_ = staker_.delegatee;\\n    }\\n\\n    function getStake(address _addr) external view returns (uint) {\\n        return stakers[_addr].stake;\\n    }\\n\\n    function getLastDepositAt(address _addr) external view returns (uint) {\\n        return stakers[_addr].lastDepositAt;\\n    }\\n\\n    function getDelegatee(address _addr) external view returns (address) {\\n        return stakers[_addr].delegatee;\\n    }\\n\\n    function getDelegatedAmount(address _addr) external view returns (uint) {\\n        return stakers[_addr].delegatedAmount;\\n    }\\n\\n    /// @notice Total amount of tokens at a specific `_blockNumber`.\\n    /// @param _blockNumber The block number when the totalSupply is queried\\n    /// @return The total amount of tokens at `_blockNumber`\\n    function totalSupplyAt(uint _blockNumber) external view returns (uint) {\\n        return getValueAt(totalSupplyHistory, _blockNumber);\\n    }\\n\\n    /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\\n    /// @param _owner The address from which the balance will be retrieved\\n    /// @param _blockNumber The block number when the balance is queried\\n    /// @return The balance at `_blockNumber`\\n    function balanceOfAt(address _owner, uint _blockNumber) external view returns (uint) {\\n        return getValueAt(balances[_owner], _blockNumber);\\n    }\\n\\n    /// @dev `getValueAt` retrieves the number of tokens at a given block number\\n    /// @param checkpoints The history of values being queried\\n    /// @param _block The block number to retrieve the value at\\n    /// @return The number of tokens being queried\\n    function getValueAt(Checkpoint[] storage checkpoints, uint _block) view internal returns (uint) {\\n        if (checkpoints.length == 0)\\n            return 0;\\n\\n        // Shortcut for the actual value\\n        if (_block >= checkpoints[checkpoints.length - 1].fromBlock)\\n            return checkpoints[checkpoints.length - 1].value;\\n        if (_block < checkpoints[0].fromBlock)\\n            return 0;\\n\\n        // Binary search of the value in the array\\n        uint min = 0;\\n        uint max = checkpoints.length - 1;\\n        while (max > min) {\\n            uint mid = (max + min + 1) / 2;\\n            if (checkpoints[mid].fromBlock <= _block) {\\n                min = mid;\\n            } else {\\n                max = mid - 1;\\n            }\\n        }\\n        return checkpoints[min].value;\\n    }\\n\\n    /// @dev `updateValueAtNow` used to update the `balances` map and the\\n    ///  `totalSupplyHistory`\\n    /// @param checkpoints The history of data being updated\\n    /// @param _value The new number of tokens\\n    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value) internal {\\n        if ((checkpoints.length == 0) || (checkpoints[checkpoints.length.sub(1)].fromBlock < block.number)) {\\n            Checkpoint storage newCheckPoint = checkpoints[checkpoints.length++];\\n            newCheckPoint.fromBlock = uint128(block.number);\\n            newCheckPoint.value = uint128(_value);\\n        } else {\\n            Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length.sub(1)];\\n            oldCheckPoint.value = uint128(_value);\\n        }\\n    }\\n\\n    function _undelegate(Staker storage _staker) internal {\\n        require(_staker.delegatedAmount > 0, \\\"There is no delegation to un-delegate.\\\");\\n\\n        delegationSums[_staker.delegatee] = delegationSums[_staker.delegatee].sub(_staker.delegatedAmount);\\n        updateValueAtNow(balances[_staker.delegatee], delegationSums[_staker.delegatee]);\\n\\n        totalVotingPower = totalVotingPower.sub(_staker.delegatedAmount);\\n        updateValueAtNow(totalSupplyHistory, totalVotingPower);\\n\\n        _staker.delegatedAmount = 0;\\n        _staker.delegatee = address(0);\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/gaurangtorvekar/Documents/coding/indorse/indorse-smartcontracts/staking/contracts/IndorseVoting.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"./IndorseStaking.sol\\\";\\n\\ncontract IndorseVoting is Ownable {\\n    using SafeMath for uint;\\n    using SafeMath for uint64;\\n\\n    uint64 public constant PCT_BASE = 10 ** 18; // 0% = 0; 1% = 10^16; 100% = 10^18\\n\\n    string private constant ERROR_NO_VOTE = \\\"VOTING_NO_VOTE\\\";\\n    string private constant ERROR_INIT_PCTS = \\\"VOTING_INIT_PCTS\\\";\\n    string private constant ERROR_CHANGE_SUPPORT_PCTS = \\\"VOTING_CHANGE_SUPPORT_PCTS\\\";\\n    string private constant ERROR_CHANGE_QUORUM_PCTS = \\\"VOTING_CHANGE_QUORUM_PCTS\\\";\\n    string private constant ERROR_INIT_SUPPORT_TOO_BIG = \\\"VOTING_INIT_SUPPORT_TOO_BIG\\\";\\n    string private constant ERROR_CHANGE_SUPPORT_TOO_BIG = \\\"VOTING_CHANGE_SUPP_TOO_BIG\\\";\\n    string private constant ERROR_CAN_NOT_VOTE = \\\"VOTING_CAN_NOT_VOTE\\\";\\n    string private constant ERROR_CAN_NOT_EXECUTE = \\\"VOTING_CAN_NOT_EXECUTE\\\";\\n    string private constant ERROR_CAN_NOT_FORWARD = \\\"VOTING_CAN_NOT_FORWARD\\\";\\n    string private constant ERROR_NO_VOTING_POWER = \\\"VOTING_NO_VOTING_POWER\\\";\\n    string private constant ERROR_NOT_AUTHORIZED_TO_CREATE_VOTE = \\\"ERROR_NOT_AUTHORIZED_TO_CREATE_VOTE\\\";\\n    string private constant ERROR_PHASE_INPUT_INVALID = \\\"ERROR_PHASE_INPUT_INVALID\\\";\\n    uint private constant PHASE_1 = 1;\\n    uint private constant PHASE_2 = 2;\\n    uint private constant PHASE_3 = 3;\\n\\n    enum VoterState {Absent, Yea, Nay}\\n\\n    struct Vote {\\n        bool executed;\\n        uint64 startDate;\\n        uint64 supportRequiredPct;\\n        uint64 minAcceptQuorumPct;\\n        uint256 yea;\\n        uint256 nay;\\n        string proposal;\\n        uint256 votingPower;\\n        uint64 snapshotBlock;\\n        mapping(address => VoterState) voters;\\n    }\\n\\n    IndorseStaking public stakingContract;\\n\\n    uint64 public supportRequiredPct;\\n    uint64 public minAcceptQuorumPct;\\n    uint64 public voteTime;\\n\\n    mapping(uint256 => Vote) internal votes;\\n    uint256 public votesLength;\\n\\n    uint public currentPhase = PHASE_1;\\n    mapping(address => bool) stakeholders;\\n    mapping(address => bool) earlyBackers;\\n\\n    event StartVote(uint256 indexed voteId, address indexed creator);\\n    event CastVote(uint256 indexed voteId, address indexed voter, bool backs, uint256 stake);\\n    event ExecuteVote(uint256 indexed voteId);\\n    event ChangeSupportRequired(uint64 supportRequiredPct);\\n    event ChangeMinQuorum(uint64 minAcceptQuorumPct);\\n\\n    modifier voteExists(uint256 _voteId) {\\n        require(_voteId < votesLength, ERROR_NO_VOTE);\\n        _;\\n    }\\n\\n    /**\\n    * @notice Minimum support of `@formatPct(_supportRequiredPct)`%, minimum acceptance quorum of `@formatPct(_minAcceptQuorumPct)`%, and a voting duration of `@transformTime(_voteTime)`\\n    * @param _stakingContract IndorseStaking contract is used to determine voting power\\n    * @param _supportRequiredPct Percentage of yeas in casted votes for a vote to succeed (expressed as a percentage of 10^18; eg. 10^16 = 1%, 10^18 = 100%)\\n    * @param _minAcceptQuorumPct Percentage of yeas in total possible votes for a vote to succeed (expressed as a percentage of 10^18; eg. 10^16 = 1%, 10^18 = 100%)\\n    * @param _voteTime Seconds that a vote will be open for token holders to vote (unless enough yeas or nays have been cast to make an early decision)\\n    */\\n    constructor(address _stakingContract, uint64 _supportRequiredPct, uint64 _minAcceptQuorumPct, uint64 _voteTime) public {\\n        require(_minAcceptQuorumPct <= _supportRequiredPct, ERROR_INIT_PCTS);\\n        require(_supportRequiredPct < PCT_BASE, ERROR_INIT_SUPPORT_TOO_BIG);\\n\\n        stakingContract = IndorseStaking(_stakingContract);\\n        supportRequiredPct = _supportRequiredPct;\\n        minAcceptQuorumPct = _minAcceptQuorumPct;\\n        voteTime = _voteTime;\\n    }\\n\\n    /**\\n    * @notice Change required support to `@formatPct(_supportRequiredPct)`%\\n    * @param _supportRequiredPct New required support\\n    */\\n    function changeSupportRequiredPct(uint64 _supportRequiredPct)\\n    external\\n    onlyOwner\\n    {\\n        require(minAcceptQuorumPct <= _supportRequiredPct, ERROR_CHANGE_SUPPORT_PCTS);\\n        require(_supportRequiredPct < PCT_BASE, ERROR_CHANGE_SUPPORT_TOO_BIG);\\n        supportRequiredPct = _supportRequiredPct;\\n\\n        emit ChangeSupportRequired(_supportRequiredPct);\\n    }\\n\\n    /**\\n    * @notice Change minimum acceptance quorum to `@formatPct(_minAcceptQuorumPct)`%\\n    * @param _minAcceptQuorumPct New acceptance quorum\\n    */\\n    function changeMinAcceptQuorumPct(uint64 _minAcceptQuorumPct)\\n    external\\n    onlyOwner\\n    {\\n        require(_minAcceptQuorumPct <= supportRequiredPct, ERROR_CHANGE_QUORUM_PCTS);\\n        minAcceptQuorumPct = _minAcceptQuorumPct;\\n\\n        emit ChangeMinQuorum(_minAcceptQuorumPct);\\n    }\\n\\n    function addStakeholder(address _stakeholder)\\n    external\\n    onlyOwner\\n    {\\n        stakeholders[_stakeholder] = true;\\n    }\\n\\n    function addEarlyBacker(address _earlyBacker)\\n    external\\n    onlyOwner\\n    {\\n        earlyBackers[_earlyBacker] = true;\\n    }\\n\\n    function setPhase(uint _phase)\\n    external\\n    onlyOwner\\n    {\\n        require(_phase == PHASE_1 || _phase == PHASE_2 || _phase == PHASE_3, ERROR_PHASE_INPUT_INVALID);\\n        currentPhase = _phase;\\n    }\\n\\n    /**\\n    * @notice Create a new vote about \\\"`_proposal`\\\"\\n    * @param _proposal proposal being voted on\\n    * @param _castVote Whether to also cast newly created vote\\n    * @param _executesIfDecided Whether to also immediately execute newly created vote if decided\\n    * @return voteId id for newly created vote\\n    */\\n    function newVote(string calldata _proposal, bool _castVote, bool _executesIfDecided)\\n    external\\n    returns (uint256 voteId)\\n    {\\n        require(_canCreateVote(msg.sender), ERROR_NOT_AUTHORIZED_TO_CREATE_VOTE);\\n        return _newVote(_proposal, _castVote, _executesIfDecided);\\n    }\\n\\n    /**\\n    * @notice Vote `_backs ? 'yes' : 'no'` in vote #`_voteId`\\n    * @dev Initialization check is implicitly provided by `voteExists()` as new votes can only be\\n    *      created via `newVote(),` which requires initialization\\n    * @param _voteId Id for vote\\n    * @param _backs Whether voter backs the vote\\n    * @param _executesIfDecided Whether the vote should execute its action if it becomes decided\\n    */\\n    function vote(uint256 _voteId, bool _backs, bool _executesIfDecided) external voteExists(_voteId) {\\n        require(_canVote(_voteId, msg.sender), ERROR_CAN_NOT_VOTE);\\n        _vote(_voteId, _backs, msg.sender, _executesIfDecided);\\n    }\\n\\n    /**\\n    * @notice Execute vote #`_voteId`\\n    * @dev Initialization check is implicitly provided by `voteExists()` as new votes can only be\\n    *      created via `newVote(),` which requires initialization\\n    * @param _voteId Id for vote\\n    */\\n    function executeVote(uint256 _voteId) external voteExists(_voteId) {\\n        _executeVote(_voteId);\\n    }\\n\\n    // Getter fns\\n\\n    /**\\n    * @notice Tells whether a vote #`_voteId` can be executed or not\\n    * @dev Initialization check is implicitly provided by `voteExists()` as new votes can only be\\n    *      created via `newVote(),` which requires initialization\\n    * @return True if the given vote can be executed, false otherwise\\n    */\\n    function canExecute(uint256 _voteId) external view voteExists(_voteId) returns (bool) {\\n        return _canExecute(_voteId);\\n    }\\n\\n    /**\\n    * @notice Tells whether `_sender` can participate in the vote #`_voteId` or not\\n    * @dev Initialization check is implicitly provided by `voteExists()` as new votes can only be\\n    *      created via `newVote(),` which requires initialization\\n    * @return True if the given voter can participate a certain vote, false otherwise\\n    */\\n    function canVote(uint256 _voteId, address _voter) external view voteExists(_voteId) returns (bool) {\\n        return _canVote(_voteId, _voter);\\n    }\\n\\n    /**\\n    * @dev Return all information for a vote by its ID\\n    * @param _voteId Vote identifier\\n    * @return Vote open status\\n    * @return Vote executed status\\n    * @return Vote start date\\n    * @return Vote snapshot block\\n    * @return Vote support required\\n    * @return Vote minimum acceptance quorum\\n    * @return Vote yeas amount\\n    * @return Vote nays amount\\n    * @return Vote power\\n    * @return Vote proposal\\n    */\\n    function getVote(uint256 _voteId)\\n    external\\n    view\\n    voteExists(_voteId)\\n    returns (\\n        bool open,\\n        bool executed,\\n        uint64 startDate,\\n        uint64 supportRequired,\\n        uint64 snapshotBlock,\\n        uint256 votingPower,\\n        uint64 minAcceptQuorum,\\n        uint256 yea,\\n        uint256 nay,\\n        string memory proposal\\n    )\\n    {\\n        Vote storage vote_ = votes[_voteId];\\n\\n        open = _isVoteOpen(vote_);\\n        executed = vote_.executed;\\n        startDate = vote_.startDate;\\n        snapshotBlock = vote_.snapshotBlock;\\n        supportRequired = vote_.supportRequiredPct;\\n        snapshotBlock = vote_.snapshotBlock;\\n        minAcceptQuorum = vote_.minAcceptQuorumPct;\\n        yea = vote_.yea;\\n        nay = vote_.nay;\\n        votingPower = vote_.votingPower;\\n        proposal = vote_.proposal;\\n    }\\n\\n    /**\\n    * @dev Return the state of a voter for a given vote by its ID\\n    * @param _voteId Vote identifier\\n    * @return VoterState of the requested voter for a certain vote\\n    */\\n    function getVoterState(uint256 _voteId, address _voter) external view voteExists(_voteId) returns (VoterState) {\\n        return votes[_voteId].voters[_voter];\\n    }\\n\\n    // Internal fns\\n\\n    /**\\n    * @dev Internal function to create a new vote\\n    * @return voteId id for newly created vote\\n    */\\n    function _newVote(string memory _proposal, bool _castVote, bool _executesIfDecided) internal returns (uint256 voteId) {\\n        uint64 snapshotBlock = uint64(block.number - 1);\\n        // avoid double voting in this very block\\n        uint256 votingPower = stakingContract.totalSupplyAt(snapshotBlock);\\n\\n        require(votingPower > 0, ERROR_NO_VOTING_POWER);\\n\\n        voteId = votesLength++;\\n\\n        Vote storage vote_ = votes[voteId];\\n        vote_.startDate = uint64(block.timestamp);\\n        vote_.supportRequiredPct = supportRequiredPct;\\n        vote_.minAcceptQuorumPct = minAcceptQuorumPct;\\n        vote_.proposal = _proposal;\\n        vote_.votingPower = votingPower;\\n        vote_.snapshotBlock = snapshotBlock;\\n        vote_.executed = false;\\n\\n        emit StartVote(voteId, msg.sender);\\n\\n        if (_castVote && _canVote(voteId, msg.sender)) {\\n            _vote(voteId, true, msg.sender, _executesIfDecided);\\n        }\\n    }\\n\\n    /**\\n    * @dev Internal function to cast a vote. It assumes the queried vote exists.\\n    */\\n    function _vote(uint256 _voteId, bool _backs, address _voter, bool _executesIfDecided) internal {\\n        Vote storage vote_ = votes[_voteId];\\n\\n        // This could re-enter, though we can assume the governance token is not malicious\\n        uint256 voterStake = stakingContract.balanceOfAt(_voter, vote_.snapshotBlock);\\n        VoterState state = vote_.voters[_voter];\\n\\n        // If voter had previously voted, decrease count\\n        if (state == VoterState.Yea) {\\n            vote_.yea = vote_.yea.sub(voterStake);\\n        } else if (state == VoterState.Nay) {\\n            vote_.nay = vote_.nay.sub(voterStake);\\n        }\\n\\n        if (_backs) {\\n            vote_.yea = vote_.yea.add(voterStake);\\n        } else {\\n            vote_.nay = vote_.nay.add(voterStake);\\n        }\\n\\n        vote_.voters[_voter] = _backs ? VoterState.Yea : VoterState.Nay;\\n\\n        emit CastVote(_voteId, _voter, _backs, voterStake);\\n\\n        if (_executesIfDecided && _canExecute(_voteId)) {\\n            // We've already checked if the vote can be executed with `_canExecute()`\\n            _executeVote(_voteId);\\n        }\\n    }\\n\\n    /**\\n    * @dev Internal function to execute a vote. It assumes the queried vote exists.\\n    */\\n    function _executeVote(uint256 _voteId) internal {\\n        require(_canExecute(_voteId), ERROR_CAN_NOT_EXECUTE);\\n        Vote storage vote_ = votes[_voteId];\\n        vote_.executed = true;\\n    }\\n\\n    /**\\n    * @dev Internal function to check if a vote can be executed. It assumes the queried vote exists.\\n    * @return True if the given vote can be executed, false otherwise\\n    */\\n    function _canExecute(uint256 _voteId) internal view returns (bool) {\\n        Vote storage vote_ = votes[_voteId];\\n\\n        if (vote_.executed) {\\n            return false;\\n        }\\n\\n        // Voting is already decided\\n        if (_isValuePct(vote_.yea, vote_.votingPower, vote_.supportRequiredPct)) {\\n            return true;\\n        }\\n\\n        // Vote ended?\\n        if (_isVoteOpen(vote_)) {\\n            return false;\\n        }\\n        // Has enough support?\\n        uint256 totalVotes = vote_.yea.add(vote_.nay);\\n        if (!_isValuePct(vote_.yea, totalVotes, vote_.supportRequiredPct)) {\\n            return false;\\n        }\\n        // Has min quorum?\\n        if (!_isValuePct(vote_.yea, vote_.votingPower, vote_.minAcceptQuorumPct)) {\\n            return false;\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n    * @dev Internal function to check if a voter can participate on a vote. It assumes the queried vote exists.\\n    * @return True if the given voter can participate a certain vote, false otherwise\\n    */\\n    function _canVote(uint256 _voteId, address _voter) internal view returns (bool) {\\n        if (currentPhase == PHASE_1) {\\n            if (!_isStakeholderOrEarlyBacker()) {\\n                return false;\\n            }\\n        }\\n\\n        Vote storage vote_ = votes[_voteId];\\n        return _isVoteOpen(vote_) && stakingContract.balanceOfAt(_voter, vote_.snapshotBlock) > 0;\\n    }\\n\\n    /**\\n    * @dev Internal function to check if a voter create a new vote.\\n    * @return True if the given voter can create a new vote, false otherwise\\n    */\\n    function _canCreateVote(address _voter) internal view returns (bool) {\\n        if (currentPhase == PHASE_1) {\\n            if (!_isStakeholder()) {\\n                return false;\\n            }\\n        } else if (currentPhase == PHASE_2) {\\n            if (!_isStakeholderOrEarlyBacker()) {\\n                return false;\\n            }\\n        }\\n\\n        return stakingContract.balanceOfAt(_voter, block.number) > 0;\\n    }\\n\\n    /**\\n    * @dev Internal function to check if a vote is still open\\n    * @return True if the given vote is open, false otherwise\\n    */\\n    function _isVoteOpen(Vote storage vote_) internal view returns (bool) {\\n        return block.timestamp < vote_.startDate.add(voteTime) && !vote_.executed;\\n    }\\n\\n    /**\\n    * @dev Calculates whether `_value` is more than a percentage `_pct` of `_total`\\n    */\\n    function _isValuePct(uint256 _value, uint256 _total, uint256 _pct) internal pure returns (bool) {\\n        if (_total == 0) {\\n            return false;\\n        }\\n\\n        uint256 computedPct = _value.mul(PCT_BASE) / _total;\\n        return computedPct > _pct;\\n    }\\n\\n    //Auth fns\\n\\n    function _isStakeholder() public view returns (bool){\\n        return stakeholders[msg.sender];\\n    }\\n\\n    function _isEarlyBacker() internal view returns (bool) {\\n        return earlyBackers[msg.sender];\\n    }\\n\\n    function _isStakeholderOrEarlyBacker() internal view returns (bool) {\\n        return earlyBackers[msg.sender] || stakeholders[msg.sender];\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/GSN/Context.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor () internal { }\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/ownership/Ownable.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20Mintable}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for `sender`'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\\n     * from the caller's allowance.\\n     *\\n     * See {_burn} and {_approve}.\\n     */\\n    function _burnFrom(address account, uint256 amount) internal {\\n        _burn(account, amount);\\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \\\"ERC20: burn amount exceeds allowance\\\"));\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n *\\n * _Since v2.5.0:_ this module is now much more gas efficient, given net gas\\n * metering changes introduced in the Istanbul hardfork.\\n */\\ncontract ReentrancyGuard {\\n    bool private _notEntered;\\n\\n    constructor () internal {\\n        // Storing an initial non-zero value makes deployment a bit more\\n        // expensive, but in exchange the refund on every call to nonReentrant\\n        // will be lower in amount. Since refunds are capped to a percetange of\\n        // the total transaction's gas, it is best to keep them low in cases\\n        // like this one, to increase the likelihood of the full refund coming\\n        // into effect.\\n        _notEntered = true;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_notEntered, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _notEntered = false;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _notEntered = true;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_supportRequiredPct\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_minAcceptQuorumPct\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_voteTime\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"voteId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"backs\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"}],\"name\":\"CastVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"minAcceptQuorumPct\",\"type\":\"uint64\"}],\"name\":\"ChangeMinQuorum\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"supportRequiredPct\",\"type\":\"uint64\"}],\"name\":\"ChangeSupportRequired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"voteId\",\"type\":\"uint256\"}],\"name\":\"ExecuteVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"voteId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"StartVote\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"PCT_BASE\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_isStakeholder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_earlyBacker\",\"type\":\"address\"}],\"name\":\"addEarlyBacker\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeholder\",\"type\":\"address\"}],\"name\":\"addStakeholder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_voteId\",\"type\":\"uint256\"}],\"name\":\"canExecute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_voteId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"canVote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_minAcceptQuorumPct\",\"type\":\"uint64\"}],\"name\":\"changeMinAcceptQuorumPct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_supportRequiredPct\",\"type\":\"uint64\"}],\"name\":\"changeSupportRequiredPct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentPhase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_voteId\",\"type\":\"uint256\"}],\"name\":\"executeVote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_voteId\",\"type\":\"uint256\"}],\"name\":\"getVote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"open\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"startDate\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"supportRequired\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"snapshotBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"minAcceptQuorum\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"yea\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nay\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"proposal\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_voteId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"getVoterState\",\"outputs\":[{\"internalType\":\"enum IndorseVoting.VoterState\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minAcceptQuorumPct\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_proposal\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_castVote\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_executesIfDecided\",\"type\":\"bool\"}],\"name\":\"newVote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"voteId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_phase\",\"type\":\"uint256\"}],\"name\":\"setPhase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingContract\",\"outputs\":[{\"internalType\":\"contract IndorseStaking\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"supportRequiredPct\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_voteId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_backs\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_executesIfDecided\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"voteTime\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"votesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"IndorseVoting","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000067a7a5915c00d0d9d17550e28a1b7922a7167ad400000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b200000000000000000000000000000000000000000000000000000000000000000005","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}