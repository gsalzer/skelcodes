{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.6.2;\r\n\r\n\r\n///////////////////////////////////////////////////////////////////////\r\n///\t\t\t\t\t\t\t   Libraries\t\t\t\t\t\t\t///\r\n///////////////////////////////////////////////////////////////////////\r\nlibrary SafeMath {\r\n   \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;}\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");}\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;}\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {return 0;}\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;}\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");}\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;}\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");}\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;}\r\n}\r\n\r\n\r\n///////////////////////////////////////////////////////////////////////\r\n///\t\t\t\t\t\t\t  Interfaces\t\t\t\t\t\t\t///\r\n///////////////////////////////////////////////////////////////////////\r\ninterface IUniswapV2Router02 {\r\n\tfunction WETH() external pure returns (address);\r\n\t\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\n\r\ninterface IUniswapV2Factory {\r\n\tfunction createPair(\r\n\t\taddress tokenA,\r\n\t\taddress tokenB\r\n\t) external returns (address pair);\r\n}\r\n\r\n\r\ninterface ILogVault {\r\n    function addRewards(uint256 newRewards) external;\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n\tevent Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n}\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n///////////////////////////////////////////////////////////////////////\r\n///\t\t\t\t\t\t\tToken Contract\t\t\t\t\t\t\t///\r\n///////////////////////////////////////////////////////////////////////\r\ncontract AntiEuler is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping (address => uint256)) private _allowances;\r\n    uint256 private _totalSupply;\r\n\r\n    mapping(address => uint256) public lastTxTime;\r\n    uint256 public lastAdjTime;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n\tuint256 public constant INIT_MAX_SUPPLY     = 27182000000000000000000;  //27182 LOG;\r\n\tuint256 public constant INIT_MIN_SUPPLY     = 2718200000000000000000;   //2718.2 LOG\r\n\r\n\tuint256 public turnMaxSupply                = 27182000000000000000000;  //27182 LOG\r\n\tuint256 public turnMinSupply                = 2718200000000000000000;   //2718.2 LOG\r\n\r\n\tuint256 private constant MAX_PCT            = 100000;   //maximum 10% burn/mint in 1e6\r\n\tuint256 private constant MIN_PCT            = 10000;    //minimum 1% burn/mint\r\n\tuint256 public burnPct;\r\n    uint256 public mintPct;\r\n\r\n\tuint256 public constant FEE_ON_TRANSFER     = 27182;    //2.7182%\r\n\r\n    uint256 public constant BURN_INACTIVE_TIME  = 1 weeks;\r\n\r\n    uint256 public  turn        = 1;\r\n    bool    public  doBurn      = true;     //true = burn is active; false = mint is active\r\n\r\n\r\n\taddress internal immutable FACTORY;\r\n\taddress internal immutable UNIROUTER;\r\n\taddress internal WETHxLOG;\r\n\taddress internal immutable ADMIN_ADDRESS;\r\n\taddress private VAULT_ADDRESS;\r\n\r\n    constructor (address _FACTORY, address _UNIROUTER) public {\r\n        _name = \"AntiEuler\";\r\n        _symbol = \"LOG\";\r\n        _decimals = 18;\r\n\t\tADMIN_ADDRESS = msg.sender;\r\n\t\tFACTORY = _FACTORY;\r\n\t\tUNIROUTER = _UNIROUTER;\r\n    }\r\n\r\n\tbool private liquidityAdded = false;\r\n\tbool private vaultAddressGiven = false;\r\n\tbool private uniswapCreated = false;\r\n\r\n\tevent UpdateTxTime(address indexed owner, uint256 time);\r\n\tevent BurnInactive(address indexed owner);\r\n\tevent AdjustRates(uint256 newRate, uint256 m, uint256 n);\r\n\r\n\r\n\r\n///////////////////////////////////////////////////////////////////////\r\n///\t\t\t\t\t\t\tAdmin functions\t\t\t\t\t\t\t///\r\n///////////////////////////////////////////////////////////////////////\r\n\r\n    //ADMIN-function: Create the Uniswap pair without adding liquidity\r\n\tfunction createUniswap() public {\r\n\t    require(msg.sender == ADMIN_ADDRESS, \"Caller is not admin.\");\r\n        require(!uniswapCreated, \"Uniswap pool already created.\");\r\n        uniswapCreated = true;\r\n        WETHxLOG = IUniswapV2Factory(FACTORY).createPair(address(IUniswapV2Router02(UNIROUTER).WETH()), address(this));\r\n    }\r\n\r\n\r\n\t//ADMIN-function: define address of staking contract\r\n    //Can only be called once to set vault address\r\n    function setVaultAddress(address _VAULT_ADDRESS) public {\r\n\t\trequire(msg.sender == ADMIN_ADDRESS, \"Caller is not admin.\");\r\n        require(!vaultAddressGiven, \"Vault Address already defined.\");\r\n        vaultAddressGiven = true;\r\n        VAULT_ADDRESS = _VAULT_ADDRESS;\r\n    }\r\n\r\n\r\n\t//Create uniswap pair, invoked by admin calling staking contract\r\n    function addInitialLiquidity() public payable {\r\n        require(!liquidityAdded, \"Uniswap pair has already been created.\");\r\n\t\trequire(msg.sender == VAULT_ADDRESS, \"Caller is not Vault.\");\r\n\t\t_approve(address(this), UNIROUTER, INIT_MAX_SUPPLY);\r\n        liquidityAdded = true;\r\n\r\n\t\t//mint initial supply\r\n        _mint(address(this), INIT_MAX_SUPPLY);\r\n\r\n\t\t//add liquidity\r\n        IUniswapV2Router02(UNIROUTER).addLiquidityETH{ value: msg.value }(address(this), INIT_MAX_SUPPLY, 1, 1, msg.sender, block.timestamp + 15 minutes);\r\n    }\r\n\r\n\r\n\r\n///////////////////////////////////////////////////////////////////////\r\n///\t\t\t\t\t\t\tMiscellaneous\t\t\t\t\t\t\t///\r\n///////////////////////////////////////////////////////////////////////\r\n\r\n    //Calculate fee, burn and mint amounts\r\n\tfunction calculateAmounts(address sender, address recipient, uint256 amount) internal view returns (uint256 vaultAmount, uint256 burnAmount, uint256 mintAmount) {\r\n\r\n\t\t//No fees when vault is sending; no fees when adding/removing liquidity\r\n\t\tif(sender == VAULT_ADDRESS || recipient == VAULT_ADDRESS || sender == address(this)) {\r\n\t\t\tburnAmount = 0;\r\n\t\t\tmintAmount = 0;\r\n\t\t\tvaultAmount = 0;\r\n\t\t} else {\r\n            //calc burn and mint amounts\r\n            burnAmount = doBurn ? amount.mul(burnPct).div(1e6) : 0;\r\n            mintAmount = doBurn ? 0 : amount.mul(mintPct).div(1e6);\r\n\t\t\t//calc staking reward fee\r\n\t\t\tvaultAmount = amount.mul(FEE_ON_TRANSFER).div(1e6);\r\n\t\t}\r\n    }\r\n\r\n\r\n    //calc burn and mint rates as 1e6\r\n    function adjustRates() internal {\r\n\r\n        uint256 nominator = MAX_PCT.sub(MIN_PCT);\r\n        uint256 denominator = turnMaxSupply.sub(turnMinSupply);\r\n\r\n        uint256 m = nominator.mul(1e24).div(denominator);\r\n        uint256 n = (MAX_PCT.mul(1e24)).add(m.mul(turnMinSupply));\r\n\r\n        burnPct = (n.sub(m.mul(_totalSupply))).div(1e24);\r\n        mintPct = (n.sub(m.mul(_totalSupply))).div(1e24);\r\n\r\n        emit AdjustRates(burnPct, m, n);\r\n\r\n        lastAdjTime = block.timestamp;\r\n    }\r\n\r\n\r\n///////////////////////////////////////////////////////////////////////\r\n///\t\t\t\t\t\t   Protocol Logic\t\t\t\t\t\t\t///\r\n///////////////////////////////////////////////////////////////////////\r\n\r\n    //low-level transfer function\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount != 0, \"ERC20: transfer amount was 0\");\r\n\r\n        //tx amount large enough to reset burn timer?\r\n        bool senderValid = false;\r\n        bool recipientValid = true;\r\n\r\n        //avoid division by zero\r\n        if (_balances[sender] > 0) {\r\n            senderValid = amount.mul(1e3).div(_balances[sender]) >= 100 ? true : false;\r\n        }\r\n\r\n        if (_balances[recipient] > 0) {\r\n            recipientValid = amount.mul(1e3).div(_balances[recipient]) >= 100 ? true : false;\r\n        }\r\n\r\n\r\n        //adjust percentage rates if last adjustment was at least 1 minute ago\r\n        if (block.timestamp >= (lastAdjTime + 1 minutes)) {\r\n            adjustRates();\r\n        }\r\n\r\n        //calc amounts\r\n        (uint256 vaultAmount, uint256 burnAmount, uint256 mintAmount) = calculateAmounts(sender, recipient, amount);\r\n\r\n        //assign fee to vault\r\n\t\tif (vaultAmount > 0) {\r\n            _balances[VAULT_ADDRESS] = _balances[VAULT_ADDRESS].add(vaultAmount);\r\n            emit Transfer(sender, VAULT_ADDRESS, vaultAmount);\r\n\r\n\t\t\tILogVault(VAULT_ADDRESS).addRewards(vaultAmount);\r\n        }\r\n\r\n        //burn turn\r\n        if (burnAmount > 0) {\r\n\r\n            //check if min supply for current turn is reached\r\n            uint256 newTotalSupply = _totalSupply.sub(burnAmount);\r\n            if (newTotalSupply <= turnMinSupply) {\r\n                //reduce burn amount to match min supply\r\n                burnAmount = _totalSupply.sub(turnMinSupply);\r\n                //switch from burn to mint\r\n                doBurn = false;\r\n                processTurn();\r\n            }\r\n\r\n            //adjust total supply\r\n            _totalSupply = _totalSupply.sub(burnAmount);\r\n\t\t\temit Transfer(sender, address(0), burnAmount);\r\n        }\r\n\r\n        //mint turn\r\n        else if (mintAmount > 0) {\r\n            //check if max supply for current turn is reached\r\n            uint256 newTotalSupply = _totalSupply.add(mintAmount);\r\n            if (newTotalSupply >= turnMaxSupply) {\r\n                //reduce mint amount to match max supply\r\n                mintAmount = turnMaxSupply.sub(_totalSupply);\r\n                //switch from mint to burn\r\n                doBurn = true;\r\n                processTurn();\r\n            }\r\n\r\n            //adjust total supply\r\n            _totalSupply = _totalSupply.add(mintAmount);\r\n\t\t\temit Transfer(address(0), sender, mintAmount);\r\n        }\r\n\r\n        //calc amount to be deducted from sender\r\n        uint256 dedAmount = amount.sub(mintAmount);\r\n        //deduct amount\r\n        _balances[sender] = _balances[sender].sub(dedAmount, \"ERC20: transfer amount exceeds balance\");\r\n\r\n        //calc amount to be sent to recipient\r\n        uint256 recAmount = amount.sub(burnAmount).sub(vaultAmount);\r\n        //assign transfer amount to recipient\r\n        _balances[recipient] = _balances[recipient].add(recAmount);\r\n        emit Transfer(sender, recipient, recAmount);\r\n\r\n        //remember timestamp of transaction if transaction amount is at least 5% of balance\r\n        //sender\r\n        if (senderValid) {\r\n            lastTxTime[sender] = block.timestamp;\r\n            emit UpdateTxTime(sender, block.timestamp);\r\n        }\r\n        //recipient\r\n        if (recipientValid) {\r\n            lastTxTime[recipient] = block.timestamp;\r\n            emit UpdateTxTime(recipient, block.timestamp);\r\n        }\r\n    }\r\n\r\n\r\n    //adjust min and max supply for current turn\r\n    function processTurn() internal {\r\n        turn = turn.add(1);\r\n\r\n        //macro contraction\r\n        if (turn >= 1 && turn <= 17) {\r\n            if (doBurn) {\r\n                turnMinSupply = turnMinSupply.div(2);\r\n            } else {\r\n                turnMaxSupply = turnMaxSupply.div(2);\r\n            }\r\n        }\r\n\r\n        //macro expansion\r\n        else if (turn > 18 && turn <= 34) {\r\n            if (doBurn) {\r\n                turnMinSupply = turnMinSupply.mul(2);\r\n            } else {\r\n                turnMaxSupply = turnMaxSupply.mul(2);\r\n            }\r\n        }\r\n\r\n        else if (turn == 35) {\r\n            turnMaxSupply = INIT_MAX_SUPPLY;\r\n            turnMinSupply = INIT_MIN_SUPPLY;\r\n            turn = 0;\r\n        }\r\n\r\n        //update burn and mint rates\r\n        adjustRates();\r\n    }\r\n\r\n\r\n    //burn LOG balance of address that has been inactive for more than 7 days\r\n    function burnInactive(address user) public {\r\n        require(user != address(0), \"Cannot burn zero address balance.\");\r\n        require(user != VAULT_ADDRESS, \"Cannot burn LOG Vault balance.\");\r\n        require(user != WETHxLOG, \"Cannot burn Uniswap pair balance.\");\r\n        require(block.timestamp >= lastTxTime[user] + BURN_INACTIVE_TIME, \"Cannot burn balance yet.\");\r\n\r\n        uint256 userBalance = balanceOf(user);\r\n        uint256 bounty = userBalance.div(10);\r\n\r\n        //burn balance of user\r\n        _burn(user, balanceOf(user));\r\n        emit BurnInactive(user);\r\n\r\n        //if burn decreases total amount below current supply floor, mint difference to LogVault\r\n        if (_totalSupply < turnMinSupply) {\r\n            uint256 diff = turnMinSupply.sub(_totalSupply);\r\n            _mint(VAULT_ADDRESS, diff);\r\n        }\r\n\r\n        //mint bounty to msg.sender\r\n        _mint(msg.sender, bounty);\r\n    }\r\n\r\n\r\n///////////////////////////////////////////////////////////////////////\r\n///\t\t\t\t\t\t\t ERC20 Logic\t\t\t\t\t\t\t///\r\n///////////////////////////////////////////////////////////////////////\r\n    function name() public view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_FACTORY\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_UNIROUTER\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"AdjustRates\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"BurnInactive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"UpdateTxTime\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BURN_INACTIVE_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_ON_TRANSFER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INIT_MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INIT_MIN_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addInitialLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"burnInactive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnPct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createUniswap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"doBurn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastAdjTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastTxTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_VAULT_ADDRESS\",\"type\":\"address\"}],\"name\":\"setVaultAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"turn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"turnMaxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"turnMinSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"AntiEuler","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c081ea3e8a781abc157d56092d2128276fa46a771058157501be9996f56489e1"}]}