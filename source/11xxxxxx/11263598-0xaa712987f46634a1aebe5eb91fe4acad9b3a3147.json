{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.8;\r\n\r\n// SPDX-License-Identifier: UNLICENCED\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    // function renounceOwnership() public onlyOwner {\r\n    //     emit OwnershipTransferred(_owner, address(0));\r\n    //     _owner = address(0);\r\n    // }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\ncontract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    constructor () internal {\r\n        _paused = false;\r\n    }\r\n\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n//Restrictions:\r\n//only 2^32 Users\r\n//Maximum of 2^104 / 10^18 Ether investment. Theoretically 20 Trl Ether, practically 100000000000 Ether compiles\r\n//Maximum of (2^104 / 10^18 Ether) investment. Theoretically 20 Trl Ether, practically 100000000000 Ether compiles\r\ncontract PrestigeClub is Ownable(), Pausable() {\r\n\r\n    struct User {\r\n        uint104 deposit; //265 bits together\r\n        uint104 payout;\r\n        uint32 position;\r\n        uint8 qualifiedPools;\r\n        uint8 downlineBonus;\r\n        address referer;\r\n        address[] referrals;\r\n\r\n        uint104 directSum;\r\n        uint40 lastPayout;\r\n\r\n        uint104[5] downlineVolumes;\r\n    }\r\n    \r\n    event NewDeposit(address indexed addr, uint104 amount);\r\n    event PoolReached(address indexed addr, uint8 pool);\r\n    event DownlineBonusStageReached(address indexed adr, uint8 stage);\r\n    event Referral(address indexed addr, address indexed referral);\r\n    \r\n    event Payout(address indexed addr, uint104 interest, uint104 direct, uint104 pool, uint104 downline, uint40 dayz); \r\n    \r\n    event Withdraw(address indexed addr, uint104 amount);\r\n    \r\n    mapping (address => User) users;\r\n    address[] userList;\r\n\r\n    uint32 public lastPosition = 0;\r\n    \r\n    uint128 public depositSum = 0;\r\n    \r\n    Pool[8] public pools;\r\n    \r\n    struct Pool {\r\n        uint104 minOwnInvestment;\r\n        uint8 minDirects;\r\n        uint104 minSumDirects;\r\n        uint8 payoutQuote; //ppm\r\n        uint32 numUsers;\r\n    }\r\n\r\n    PoolState[] public states;\r\n\r\n    struct PoolState {\r\n        uint128 totalDeposits;\r\n        uint32 totalUsers;\r\n        uint32[8] numUsers;\r\n    }\r\n    \r\n    DownlineBonusStage[4] downlineBonuses;\r\n    \r\n    struct DownlineBonusStage {\r\n        uint32 minPool;\r\n        uint64 payoutQuote; //ppm\r\n    }\r\n    \r\n    uint40 public pool_last_draw;\r\n    \r\n    constructor() public {\r\n \r\n        uint40 timestamp = uint40(block.timestamp);\r\n        pool_last_draw = timestamp - (timestamp % payout_interval);\r\n\r\n        pools[0] = Pool(3 ether, 1, 3 ether, 130, 0);\r\n        pools[1] = Pool(15 ether, 3, 5 ether, 130, 0);\r\n        pools[2] = Pool(15 ether, 4, 44 ether, 130, 0);\r\n        pools[3] = Pool(30 ether, 10, 105 ether, 130, 0);\r\n        pools[4] = Pool(45 ether, 15, 280 ether, 130, 0);\r\n        pools[5] = Pool(60 ether, 20, 530 ether, 130, 0);\r\n        pools[6] = Pool(150 ether, 20, 1470 ether, 80, 0);\r\n        pools[7] = Pool(300 ether, 20, 2950 ether, 80, 0);\r\n\r\n        downlineBonuses[0] = DownlineBonusStage(3, 50);\r\n        downlineBonuses[1] = DownlineBonusStage(4, 100);\r\n        downlineBonuses[2] = DownlineBonusStage(5, 160);\r\n        downlineBonuses[3] = DownlineBonusStage(6, 210);\r\n        \r\n        userList.push(address(0));\r\n        \r\n    }\r\n    \r\n    uint104 private minDeposit = 1 ether;\r\n    uint104 private minWithdraw = 1000 wei; \r\n    \r\n    uint40 constant private payout_interval = 1 days;\r\n    \r\n    function recieve() public payable whenNotPaused {\r\n        \r\n        require(users[_msgSender()].deposit >= minDeposit || msg.value >= minDeposit, \"Mininum deposit value not reached\");\r\n        \r\n        address sender = _msgSender();\r\n\r\n        uint104 value = (uint104) (msg.value / 20 * 19);\r\n\r\n        bool userExists = users[sender].position != 0;\r\n        \r\n        triggerCalculation();\r\n\r\n        // Create a position for new accounts\r\n        if(!userExists){\r\n            lastPosition++;\r\n            users[sender].position = lastPosition;\r\n            users[sender].lastPayout = (uint40(block.timestamp) - (uint40(block.timestamp) % payout_interval) + 1);\r\n            userList.push(sender);\r\n        }\r\n\r\n        address referer = users[sender].referer; //can put outside because referer is always set since setReferral() gets called before recieve() in recieve(address)\r\n\r\n        if(referer != address(0)){\r\n            updateUpline(sender, referer, value);\r\n        }\r\n\r\n        //Update Payouts\r\n        if(userExists){\r\n            updatePayout(sender);\r\n        }\r\n\r\n        users[sender].deposit += value;\r\n        \r\n        //Transfer fee\r\n        payable(owner()).transfer(msg.value - value);\r\n        \r\n        emit NewDeposit(sender, value);\r\n        \r\n        updateUserPool(sender);\r\n        updateDownlineBonusStage(sender);\r\n        if(referer != address(0)){\r\n            users[referer].directSum += value;\r\n\r\n            updateUserPool(referer);\r\n            updateDownlineBonusStage(referer);\r\n        }\r\n        \r\n        depositSum += value;\r\n\r\n    }\r\n    \r\n    function recieve(address referer) public payable whenNotPaused {\r\n        \r\n        _setReferral(referer);\r\n        recieve();\r\n        \r\n    }\r\n\r\n    uint8 downlineLimit = 30;\r\n\r\n    function updateUpline(address reciever, address adr, uint104 addition) private {\r\n        \r\n        address current = adr;\r\n        uint8 bonusStage = users[reciever].downlineBonus;\r\n        \r\n        while(current != address(0) && downlineLimit > 0){\r\n\r\n            updatePayout(current);\r\n\r\n\r\n            users[current].downlineVolumes[bonusStage] += addition;\r\n            uint8 currentBonus = users[current].downlineBonus;\r\n            if(currentBonus > bonusStage){\r\n                bonusStage = currentBonus;\r\n            }\r\n\r\n            current = users[current].referer;\r\n            downlineLimit--;\r\n        }\r\n        \r\n    }\r\n    \r\n    function updatePayout(address adr) private {\r\n        \r\n        uint40 dayz = (uint40(block.timestamp) - users[adr].lastPayout) / (payout_interval);\r\n        if(dayz >= 1){\r\n            \r\n            uint104 interestPayout = getInterestPayout(adr);\r\n            uint104 poolpayout = getPoolPayout(adr, dayz);\r\n            uint104 directsPayout = getDirectsPayout(adr);\r\n            uint104 downlineBonusAmount = getDownlinePayout(adr);\r\n            \r\n            uint104 sum = interestPayout + directsPayout + downlineBonusAmount;\r\n            sum = (sum * dayz) + poolpayout;\r\n            \r\n            users[adr].payout += sum;\r\n            users[adr].lastPayout += (payout_interval * dayz);\r\n            \r\n            emit Payout(adr, interestPayout, directsPayout, poolpayout, downlineBonusAmount, dayz);\r\n            \r\n        }\r\n    }\r\n    \r\n    function getInterestPayout(address adr) public view returns (uint104){\r\n        //Calculate Base Payouts\r\n        uint8 quote;\r\n        uint104 deposit = users[adr].deposit;\r\n        if(deposit >= 30 ether){\r\n            quote = 15;\r\n        }else{\r\n            quote = 10;\r\n        }\r\n        \r\n        return deposit / 10000 * quote;\r\n    }\r\n    \r\n    function getPoolPayout(address adr, uint40 dayz) public view returns (uint104){\r\n\r\n        uint40 length = (uint40)(states.length);\r\n\r\n        uint104 poolpayout = 0;\r\n\r\n        if(users[adr].qualifiedPools > 0){\r\n            for(uint40 day = length - dayz ; day < length ; day++){\r\n\r\n\r\n                uint32 numUsers = states[day].totalUsers;\r\n                uint104 streamline = (uint104) (states[day].totalDeposits / (numUsers) * (numUsers - users[adr].position));\r\n\r\n\r\n                uint104 payout_day = 0; //TODO Merge into poolpayout, only for debugging\r\n                uint32 stateNumUsers = 0;\r\n                for(uint8 j = 0 ; j < users[adr].qualifiedPools ; j++){\r\n                    uint104 pool_base = streamline / 1000000 * pools[j].payoutQuote;\r\n\r\n                    stateNumUsers = states[day].numUsers[j];\r\n\r\n                    if(stateNumUsers != 0){\r\n                        payout_day += pool_base / stateNumUsers;\r\n                    }\r\n                }\r\n\r\n                poolpayout += payout_day;\r\n\r\n            }\r\n        }\r\n        \r\n        return poolpayout;\r\n    }\r\n\r\n    function getDownlinePayout(address adr) public view returns (uint104){\r\n\r\n        //Calculate Downline Bonus\r\n        uint104 downlinePayout = 0;\r\n        \r\n        uint8 downlineBonus = users[adr].downlineBonus;\r\n        \r\n        if(downlineBonus > 0){\r\n            \r\n            uint64 ownPercentage = downlineBonuses[downlineBonus - 1].payoutQuote;\r\n\r\n            for(uint8 i = 0 ; i < downlineBonus; i++){\r\n\r\n                uint64 quote = 0;\r\n                if(i > 0){\r\n                    quote = downlineBonuses[i - 1].payoutQuote;\r\n                }else{\r\n                    quote = 0;\r\n                }\r\n\r\n                uint64 percentage = ownPercentage - quote;\r\n\r\n\r\n                downlinePayout += users[adr].downlineVolumes[i] * percentage / 1000000;\r\n\r\n            }\r\n\r\n            if(downlineBonus == 4){\r\n                downlinePayout += users[adr].downlineVolumes[downlineBonus] * 50 / 1000000;\r\n            }\r\n\r\n        }\r\n\r\n        return downlinePayout;\r\n        \r\n    }\r\n\r\n    function getDirectsPayout(address adr) public view returns ( uint104) {\r\n        \r\n        //Calculate Directs Payouts\r\n        uint104 directsDepositSum = users[adr].directSum;\r\n\r\n        uint104 directsPayout = directsDepositSum / 10000 * 5;\r\n\r\n        return (directsPayout);\r\n        \r\n    }\r\n\r\n    function pushPoolState() private {\r\n        uint32[8] memory temp;\r\n        for(uint8 i = 0 ; i < 8 ; i++){\r\n            temp[i] = pools[i].numUsers;\r\n        }\r\n        states.push(PoolState(depositSum, lastPosition, temp));\r\n        pool_last_draw += payout_interval;\r\n    }\r\n    \r\n    function updateUserPool(address adr) private {\r\n        \r\n        if(users[adr].qualifiedPools < pools.length){\r\n            \r\n            uint8 poolnum = users[adr].qualifiedPools;\r\n            \r\n            uint104 sumDirects = users[adr].directSum;\r\n            \r\n            //Check if requirements for next pool are met\r\n            if(users[adr].deposit >= pools[poolnum].minOwnInvestment && users[adr].referrals.length >= pools[poolnum].minDirects && sumDirects >= pools[poolnum].minSumDirects){\r\n                users[adr].qualifiedPools = poolnum + 1;\r\n                pools[poolnum].numUsers++;\r\n                \r\n                emit PoolReached(adr, poolnum + 1);\r\n                \r\n                updateUserPool(adr);\r\n            }\r\n            \r\n        }\r\n        \r\n    }\r\n    \r\n    function updateDownlineBonusStage(address adr) private {\r\n\r\n        uint8 bonusstage = users[adr].downlineBonus;\r\n\r\n        if(bonusstage < downlineBonuses.length){\r\n            \r\n\r\n            //Check if requirements for next stage are met\r\n            if(users[adr].qualifiedPools >= downlineBonuses[bonusstage].minPool){\r\n                users[adr].downlineBonus += 1;\r\n                \r\n                //Update data in upline\r\n                uint104 value = users[adr].deposit;  //Value without current stage, since that must not be subtracted\r\n\r\n                for(uint8 i = 0 ; i <= bonusstage ; i++){\r\n                    value += users[adr].downlineVolumes[i];\r\n                }\r\n\r\n                uint104 additionValue = value;\r\n\r\n\r\n                uint8 currentBonusStage = bonusstage + 1;\r\n\r\n                address current = users[adr].referer;\r\n                while(current != address(0)){\r\n\r\n\r\n                    users[current].downlineVolumes[currentBonusStage - 1] -= value;\r\n                    users[current].downlineVolumes[currentBonusStage] += additionValue;\r\n                    \r\n\r\n                    current = users[current].referer;\r\n\r\n                }\r\n\r\n                emit DownlineBonusStageReached(adr, users[adr].downlineBonus);\r\n                \r\n                updateDownlineBonusStage(adr);\r\n            }\r\n        }\r\n        \r\n    }\r\n    \r\n    function calculateDirects() external view returns (uint128 sum, uint32 numDirects) {\r\n        return calculateDirects(_msgSender());\r\n    }\r\n    \r\n    function calculateDirects(address adr) private view returns (uint104, uint32) {\r\n        \r\n        address[] memory referrals = users[adr].referrals;\r\n        \r\n        uint104 sum = 0;\r\n        for(uint32 i = 0 ; i < referrals.length ; i++){\r\n            sum += users[referrals[i]].deposit;\r\n        }\r\n        \r\n        return (sum, (uint32)(referrals.length));\r\n        \r\n    }\r\n    \r\n    //Endpoint to withdraw payouts\r\n    function withdraw(uint104 amount) public whenNotPaused {\r\n        \r\n        updatePayout(_msgSender());\r\n\r\n        require(amount > minWithdraw, \"Minimum Withdrawal amount not met\");\r\n        require(users[_msgSender()].payout >= amount, \"Not enough payout available to cover withdrawal request\");\r\n        \r\n        uint104 transfer = amount / 20 * 19;\r\n        \r\n        payable(_msgSender()).transfer(transfer);\r\n        \r\n        users[_msgSender()].payout -= amount;\r\n        \r\n        emit Withdraw(_msgSender(), amount);\r\n        \r\n        payable(owner()).transfer(amount - transfer);\r\n        \r\n    }\r\n\r\n    function _setReferral(address referer) private {\r\n        \r\n        if(users[_msgSender()].referer == referer){\r\n            return;\r\n        }\r\n        \r\n        if(users[_msgSender()].position != 0 && users[_msgSender()].position < users[referer].position) {\r\n            return;\r\n        }\r\n        \r\n        require(users[_msgSender()].referer == address(0), \"Referer can only be set once\");\r\n        require(users[referer].position > 0, \"Referer does not exist\");\r\n        require(_msgSender() != referer, \"Cant set oneself as referer\");\r\n        \r\n        users[referer].referrals.push(_msgSender());\r\n        users[_msgSender()].referer = referer;\r\n\r\n        if(users[_msgSender()].deposit > 0){\r\n            users[referer].directSum += users[_msgSender()].deposit;\r\n        }\r\n        \r\n        emit Referral(referer, _msgSender());\r\n    }\r\n    \r\n    uint invested = 0;\r\n    \r\n    function invest(uint amount) public onlyOwner {\r\n        \r\n        payable(owner()).transfer(amount);\r\n        \r\n        invested += amount;\r\n    }\r\n    \r\n    function reinvest() public payable onlyOwner {\r\n        if(msg.value > invested){\r\n            invested = 0;\r\n        }else{\r\n            invested -= msg.value;\r\n        }\r\n    }\r\n    \r\n    function setMinDeposit(uint104 min) public onlyOwner {\r\n        minDeposit = min;\r\n    }\r\n    \r\n    function setMinWithdraw(uint104 min) public onlyOwner {\r\n        minWithdraw = min;\r\n    }\r\n    \r\n    function pause() external onlyOwner {\r\n        _pause();\r\n    }\r\n    \r\n    function unpause() external onlyOwner {\r\n        _unpause();\r\n    }\r\n\r\n    function setDownlineLimit(uint8 limit) public onlyOwner {\r\n        require(limit > 5, \"Limit too low\");\r\n        downlineLimit = limit;\r\n    }\r\n\r\n    //Only for BO\r\n    function getDownline() external view returns (uint104, uint){\r\n        uint104 sum;\r\n        for(uint8 i = 0 ; i < users[_msgSender()].downlineVolumes.length ; i++){\r\n            sum += users[_msgSender()].downlineVolumes[i];\r\n        }\r\n\r\n        uint numUsers = getDownlineUsers(_msgSender());\r\n\r\n        return (sum, numUsers);\r\n    }\r\n\r\n    function getDownlineUsers(address adr) public view returns (uint){\r\n\r\n        uint sum = 0;\r\n        uint length = users[adr].referrals.length;\r\n        sum += length;\r\n        for(uint i = 0; i < length ; i++){\r\n            sum += getDownlineUsers(users[adr].referrals[i]);\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    function getUserData() public view returns (\r\n        address adr_,\r\n        uint position_,\r\n        uint deposit_,\r\n        uint payout_,\r\n        uint qualifiedPools_,\r\n        uint downlineBonusStage_,\r\n        uint lastPayout,\r\n        address referer,\r\n        address[] memory referrals_) {\r\n\r\n            return (_msgSender(), \r\n                users[_msgSender()].position,\r\n                users[_msgSender()].deposit,\r\n                users[_msgSender()].payout,\r\n                users[_msgSender()].qualifiedPools,\r\n                users[_msgSender()].downlineBonus,\r\n                users[_msgSender()].lastPayout,\r\n                users[_msgSender()].referer,\r\n                users[_msgSender()].referrals);\r\n    }\r\n    \r\n    //DEBUGGING\r\n    //Used for extraction of User data in case of something bad happening and fund reversal needed.\r\n    function getUserList() public view returns (address[] memory){  //TODO Probably not needed\r\n        return userList;\r\n    }\r\n    \r\n    function getUsers(address adr) public view returns (\r\n        address adr_,\r\n        uint32 position_,\r\n        uint128 deposit_,\r\n        uint128 payout_,\r\n        uint lastPayout_,\r\n        uint8 qualifiedPools_,\r\n        address referer\r\n        ){\r\n            \r\n            return (adr, \r\n                users[adr].position,\r\n                users[adr].deposit,\r\n                users[adr].payout,\r\n                users[adr].lastPayout,\r\n                users[adr].qualifiedPools,\r\n                users[adr].referer\r\n                );\r\n    }\r\n    \r\n    function triggerCalculation() public {\r\n        \r\n        if(block.timestamp > pool_last_draw + payout_interval){\r\n            pushPoolState();\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"stage\",\"type\":\"uint8\"}],\"name\":\"DownlineBonusStageReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint104\",\"name\":\"amount\",\"type\":\"uint104\"}],\"name\":\"NewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint104\",\"name\":\"interest\",\"type\":\"uint104\"},{\"indexed\":false,\"internalType\":\"uint104\",\"name\":\"direct\",\"type\":\"uint104\"},{\"indexed\":false,\"internalType\":\"uint104\",\"name\":\"pool\",\"type\":\"uint104\"},{\"indexed\":false,\"internalType\":\"uint104\",\"name\":\"downline\",\"type\":\"uint104\"},{\"indexed\":false,\"internalType\":\"uint40\",\"name\":\"dayz\",\"type\":\"uint40\"}],\"name\":\"Payout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"pool\",\"type\":\"uint8\"}],\"name\":\"PoolReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"}],\"name\":\"Referral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint104\",\"name\":\"amount\",\"type\":\"uint104\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"calculateDirects\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"sum\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"numDirects\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositSum\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getDirectsPayout\",\"outputs\":[{\"internalType\":\"uint104\",\"name\":\"\",\"type\":\"uint104\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDownline\",\"outputs\":[{\"internalType\":\"uint104\",\"name\":\"\",\"type\":\"uint104\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getDownlinePayout\",\"outputs\":[{\"internalType\":\"uint104\",\"name\":\"\",\"type\":\"uint104\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getDownlineUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getInterestPayout\",\"outputs\":[{\"internalType\":\"uint104\",\"name\":\"\",\"type\":\"uint104\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"dayz\",\"type\":\"uint40\"}],\"name\":\"getPoolPayout\",\"outputs\":[{\"internalType\":\"uint104\",\"name\":\"\",\"type\":\"uint104\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"adr_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"position_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposit_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payout_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qualifiedPools_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"downlineBonusStage_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastPayout\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referer\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"referrals_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getUsers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"adr_\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"position_\",\"type\":\"uint32\"},{\"internalType\":\"uint128\",\"name\":\"deposit_\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"payout_\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"lastPayout_\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"qualifiedPools_\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"referer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastPosition\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool_last_draw\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"uint104\",\"name\":\"minOwnInvestment\",\"type\":\"uint104\"},{\"internalType\":\"uint8\",\"name\":\"minDirects\",\"type\":\"uint8\"},{\"internalType\":\"uint104\",\"name\":\"minSumDirects\",\"type\":\"uint104\"},{\"internalType\":\"uint8\",\"name\":\"payoutQuote\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"numUsers\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referer\",\"type\":\"address\"}],\"name\":\"recieve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recieve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"limit\",\"type\":\"uint8\"}],\"name\":\"setDownlineLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint104\",\"name\":\"min\",\"type\":\"uint104\"}],\"name\":\"setMinDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint104\",\"name\":\"min\",\"type\":\"uint104\"}],\"name\":\"setMinWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"states\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"totalDeposits\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"totalUsers\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"triggerCalculation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint104\",\"name\":\"amount\",\"type\":\"uint104\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PrestigeClub","CompilerVersion":"v0.6.8+commit.0bbfe453","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c02c0d57033ae7d4f0330568182dbef8b35580a280dc89d7c0d6f1c67c5c3e5f"}]}