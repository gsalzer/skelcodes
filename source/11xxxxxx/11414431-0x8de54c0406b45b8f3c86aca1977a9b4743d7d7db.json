{"status":"1","message":"OK","result":[{"SourceCode":"{\"OwnedUpgradeabilityProxy.sol\":{\"content\":\"pragma solidity ^0.4.21;\\n\\nimport \\u0027./UpgradeabilityProxy.sol\\u0027;\\n\\n/**\\n * @title OwnedUpgradeabilityProxy\\n * @dev This contract combines an upgradeability proxy with basic authorization control functionalities\\n */\\ncontract OwnedUpgradeabilityProxy is UpgradeabilityProxy {\\n  /**\\n  * @dev Event to show ownership has been transferred\\n  * @param previousOwner representing the address of the previous owner\\n  * @param newOwner representing the address of the new owner\\n  */\\n  event ProxyOwnershipTransferred(address previousOwner, address newOwner);\\n\\n  // Storage position of the owner of the contract\\n  bytes32 private constant proxyOwnerPosition = keccak256(\\\"org.zeppelinos.proxy.owner\\\");\\n\\n  /**\\n  * @dev the constructor sets the original owner of the contract to the sender account.\\n  */\\n  function OwnedUpgradeabilityProxy() public {\\n    setUpgradeabilityOwner(msg.sender);\\n  }\\n\\n  /**\\n  * @dev Throws if called by any account other than the owner.\\n  */\\n  modifier onlyProxyOwner() {\\n    require(msg.sender == proxyOwner());\\n    _;\\n  }\\n\\n  /**\\n   * @dev Tells the address of the owner\\n   * @return the address of the owner\\n   */\\n  function proxyOwner() public view returns (address owner) {\\n    bytes32 position = proxyOwnerPosition;\\n    assembly {\\n      owner := sload(position)\\n    }\\n  }\\n\\n  /**\\n   * @dev Sets the address of the owner\\n   */\\n  function setUpgradeabilityOwner(address newProxyOwner) internal {\\n    bytes32 position = proxyOwnerPosition;\\n    assembly {\\n      sstore(position, newProxyOwner)\\n    }\\n  }\\n\\n  /**\\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n   * @param newOwner The address to transfer ownership to.\\n   */\\n  function transferProxyOwnership(address newOwner) public onlyProxyOwner {\\n    require(newOwner != address(0));\\n    emit ProxyOwnershipTransferred(proxyOwner(), newOwner);\\n    setUpgradeabilityOwner(newOwner);\\n  }\\n\\n  /**\\n   * @dev Allows the proxy owner to upgrade the current version of the proxy.\\n   * @param implementation representing the address of the new implementation to be set.\\n   */\\n  function upgradeTo(address implementation) public onlyProxyOwner {\\n    _upgradeTo(implementation);\\n  }\\n\\n  /**\\n   * @dev Allows the proxy owner to upgrade the current version of the proxy and call the new implementation\\n   * to initialize whatever is needed through a low level call.\\n   * @param implementation representing the address of the new implementation to be set.\\n   * @param data represents the msg.data to bet sent in the low level call. This parameter may include the function\\n   * signature of the implementation to be called with the needed payload\\n   */\\n  function upgradeToAndCall(address implementation, bytes data) payable public onlyProxyOwner {\\n    upgradeTo(implementation);\\n    require(this.call.value(msg.value)(data));\\n  }\\n}\"},\"Proxy.sol\":{\"content\":\"pragma solidity ^0.4.21;\\n\\n/**\\n * @title Proxy\\n * @dev Gives the possibility to delegate any call to a foreign implementation.\\n */\\ncontract Proxy {\\n  /**\\n  * @dev Tells the address of the implementation where every call will be delegated.\\n  * @return address of the implementation to which it will be delegated\\n  */\\n  function implementation() public view returns (address);\\n\\n  /**\\n  * @dev Fallback function allowing to perform a delegatecall to the given implementation.\\n  * This function will return whatever the implementation call returns\\n  */\\n  function () payable public {\\n    address _impl = implementation();\\n    require(_impl != address(0));\\n\\n    assembly {\\n      let ptr := mload(0x40)\\n      calldatacopy(ptr, 0, calldatasize)\\n      let result := delegatecall(gas, _impl, ptr, calldatasize, 0, 0)\\n      let size := returndatasize\\n      returndatacopy(ptr, 0, size)\\n\\n      switch result\\n      case 0 { revert(ptr, size) }\\n      default { return(ptr, size) }\\n    }\\n  }\\n}\"},\"UpgradeabilityProxy.sol\":{\"content\":\"pragma solidity ^0.4.21;\\n\\nimport \\u0027./Proxy.sol\\u0027;\\n\\n/**\\n * @title UpgradeabilityProxy\\n * @dev This contract represents a proxy where the implementation address to which it will delegate can be upgraded\\n */\\ncontract UpgradeabilityProxy is Proxy {\\n  /**\\n   * @dev This event will be emitted every time the implementation gets upgraded\\n   * @param implementation representing the address of the upgraded implementation\\n   */\\n  event Upgraded(address indexed implementation);\\n\\n  // Storage position of the address of the current implementation\\n  bytes32 private constant implementationPosition = keccak256(\\\"org.zeppelinos.proxy.implementation\\\");\\n\\n  /**\\n   * @dev Constructor function\\n   */\\n  function UpgradeabilityProxy() public {}\\n\\n  /**\\n   * @dev Tells the address of the current implementation\\n   * @return address of the current implementation\\n   */\\n  function implementation() public view returns (address impl) {\\n    bytes32 position = implementationPosition;\\n    assembly {\\n      impl := sload(position)\\n    }\\n  }\\n\\n  /**\\n   * @dev Sets the address of the current implementation\\n   * @param newImplementation address representing the new implementation to be set\\n   */\\n  function setImplementation(address newImplementation) internal {\\n    bytes32 position = implementationPosition;\\n    assembly {\\n      sstore(position, newImplementation)\\n    }\\n  }\\n\\n  /**\\n   * @dev Upgrades the implementation address\\n   * @param newImplementation representing the address of the new implementation to be set\\n   */\\n  function _upgradeTo(address newImplementation) internal {\\n    address currentImplementation = implementation();\\n    require(currentImplementation != newImplementation);\\n    setImplementation(newImplementation);\\n    emit Upgraded(newImplementation);\\n  }\\n}\"}}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"proxyOwner\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"implementation\",\"type\":\"address\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"name\":\"impl\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferProxyOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"ProxyOwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"}]","ContractName":"OwnedUpgradeabilityProxy","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://48184f1bde619a74c5184ba749e8d0d58510a29fd40ef4b79c8f9f07fd0405d9"}]}