{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\n\r\ncontract WasFarmer  {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n   \r\n    struct UserData {\r\n        address invite;\r\n        uint depositTime;\r\n        uint256 inviteReward;\r\n        uint withdrawMinReward;\r\n        uint withdrawInviteReward;\r\n        uint totalDeposit;\r\n    }\r\n\r\n    struct PoolData {\r\n        address lpToken;\r\n        uint256 tokenAmount;\r\n        uint256 startTimestamp;\r\n        bool isStared;\r\n        uint limitAmount;\r\n    }\r\n    struct DepositData {\r\n        uint depositAmount;\r\n        uint startTimestamp;\r\n    }\r\n    \r\n    address public uniylttAddr;\r\n    address public uniyethAddr;\r\n    address public ethCurryPairAddr;\r\n    \r\n    address public curryAddr;\r\n    address public weth;\r\n    address public owner;\r\n    address public wasaddr;\r\n    address public bonusRewardAddr;\r\n    \r\n    uint public wasMintTotal;\r\n    uint public wasBurntTotal;\r\n    uint public wasBonusTotal;\r\n\r\n    uint public oneEth = 1 ether;\r\n    \r\n    PoolData[] public poolData;\r\n    address[] public addressArr;\r\n    mapping (uint256 => mapping (address => DepositData)) public userDeposit;\r\n    mapping (address => UserData) public userData;\r\n    \r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender);\r\n        _;\r\n    }\r\n    constructor(\r\n        address _weth\r\n    ) public {\r\n        weth = _weth;\r\n        bonusRewardAddr = msg.sender;\r\n        owner = msg.sender;\r\n    }\r\n    event DepositLog(address _sender,uint _amount);\r\n    event WithdrawLog(address _sender,uint _amount);\r\n    event RewardLog(address _sender,uint _amount);\r\n    \r\n    function transferOwner(address _newOwner) public onlyOwner {\r\n        owner = _newOwner;\r\n    }\r\n    function setNewBonusAddress(address _newBonusAddr) public onlyOwner {\r\n        bonusRewardAddr = _newBonusAddr;\r\n    }\r\n    function initData(address _uniylttAddr,address _uniyethAddr,address _ethCurryPairAddr,address _curryAddr,address _wasaddr ) public onlyOwner {\r\n        uniylttAddr = _uniylttAddr;\r\n        uniyethAddr = _uniyethAddr;\r\n        ethCurryPairAddr = _ethCurryPairAddr;\r\n        curryAddr = _curryAddr;\r\n        wasaddr = _wasaddr;\r\n    }\r\n\r\n    function addPool(uint _tokenAmount,address _lpToken,uint _limitAmount) public onlyOwner {\r\n        poolData.push(PoolData({\r\n            lpToken: _lpToken,\r\n            tokenAmount:_tokenAmount,\r\n            isStared:false,\r\n            startTimestamp:block.timestamp,\r\n            limitAmount:_limitAmount\r\n        }));\r\n    }\r\n    function setPool(uint _tokenAmount,uint _pid,uint _limitAmount) public onlyOwner {\r\n        poolData[_pid].tokenAmount = _tokenAmount;\r\n        poolData[_pid].limitAmount = _limitAmount;\r\n    }\r\n    \r\n    function startPool(uint _pid) public onlyOwner {\r\n        poolData[_pid].isStared = true;\r\n    }\r\n\r\n    function depositLp(uint256 _pid, uint256 _amount,address _invite) public {\r\n        require(poolData[_pid].isStared);\r\n        require(msg.sender != _invite);\r\n        IERC20(poolData[_pid].lpToken).transferFrom(msg.sender,address(this),_amount);\r\n        UserData storage user = userData[msg.sender];\r\n        if(userDeposit[_pid][msg.sender].depositAmount > 0){\r\n            getReward(_pid);\r\n        }\r\n        \r\n        if(user.depositTime == 0){\r\n            user.invite = _invite;\r\n            user.inviteReward = 0;\r\n            addressArr.push(msg.sender);\r\n        }\r\n        user.depositTime = user.depositTime.add(1);\r\n        user.totalDeposit = user.totalDeposit.add(_amount);\r\n\r\n        userDeposit[_pid][msg.sender].depositAmount = userDeposit[_pid][msg.sender].depositAmount.add(_amount);\r\n        userDeposit[_pid][msg.sender].startTimestamp = block.timestamp;\r\n\r\n        emit DepositLog(msg.sender,_amount);\r\n    }\r\n    \r\n    function withdrawLp(uint _pid ,uint _amount) public {\r\n        require(userDeposit[_pid][msg.sender].depositAmount >= _amount);\r\n        getReward(_pid);\r\n        safeTransfer(poolData[_pid].lpToken,msg.sender,_amount);\r\n        userDeposit[_pid][msg.sender].depositAmount = userDeposit[_pid][msg.sender].depositAmount.sub(_amount);\r\n        emit WithdrawLog(msg.sender,_amount);\r\n    }\r\n\r\n    function safeTransfer(address _contract, address _to, uint256 _amount) private {\r\n        uint256 balanceC = IERC20(_contract).balanceOf(address(this));\r\n        if (_amount > balanceC) {\r\n            IERC20(_contract).transfer(_to, balanceC);\r\n        } else {\r\n            IERC20(_contract).transfer(_to, _amount);\r\n        }\r\n    }\r\n\r\n    function getReward(uint _pid) public {\r\n        require(userDeposit[_pid][msg.sender].depositAmount > 0);\r\n        (uint reward,uint burntAmount) = viewReward(_pid,msg.sender);\r\n        require(reward > 0);\r\n        \r\n        wasMintTotal = wasMintTotal.add(reward).add(burntAmount);\r\n        wasBurntTotal = wasBurntTotal.add(burntAmount);\r\n        \r\n        getInviteReward(msg.sender,reward);\r\n        \r\n        UserData storage user = userData[msg.sender];\r\n        user.withdrawMinReward = user.withdrawMinReward.add(reward);\r\n        \r\n        uint curryAm = checkUserPairTotalLpCurry(msg.sender);\r\n        if(user.inviteReward > 0 && curryAm >= oneEth.mul(50)){\r\n            reward = reward.add(user.inviteReward);\r\n            user.withdrawInviteReward = user.withdrawInviteReward.add(user.inviteReward);\r\n            user.inviteReward = 0;\r\n        }\r\n        \r\n        safeTransfer(wasaddr,msg.sender,reward);\r\n        emit RewardLog(msg.sender,reward);\r\n        \r\n        userDeposit[_pid][msg.sender].startTimestamp = block.timestamp;\r\n    }\r\n\r\n    function getInviteReward(address _user,uint _userReward) internal returns(uint){\r\n        \r\n        UserData storage user= userData[_user];\r\n        uint count;\r\n        for(uint i;i<2;i++){\r\n            if(user.invite != address(0) ){\r\n                userData[user.invite].inviteReward = userData[user.invite].inviteReward.add(_userReward.mul(5).div(100));\r\n                user = userData[user.invite];\r\n                count++;\r\n            }else{\r\n                break;\r\n            }\r\n        }\r\n        if(count==1){\r\n            safeTransfer(wasaddr,bonusRewardAddr,_userReward.mul(5).div(100));\r\n            wasBonusTotal = wasBonusTotal.add(_userReward.mul(5).div(100));\r\n        }\r\n        if(count ==0){\r\n            safeTransfer(wasaddr,bonusRewardAddr,_userReward.mul(10).div(100));\r\n            wasBonusTotal = wasBonusTotal.add(_userReward.mul(10).div(100));\r\n        }\r\n    }\r\n\r\n    function viewReward(uint _pid,address _user) public view returns(uint rewardAmount,uint burntAmount){\r\n        PoolData memory pool = poolData[_pid];\r\n        if(userDeposit[_pid][_user].depositAmount > 0 ){\r\n            uint rewardPersec = poolRewardPerSec(_pid);\r\n            uint pairTotalSupply = IERC20(pool.lpToken).balanceOf(address(this));\r\n            uint tokenAmount;\r\n            if(_pid <2 ){\r\n                tokenAmount = checkLpCurryValue(pool.lpToken, pairTotalSupply);\r\n            }else{\r\n                tokenAmount = checkLpWethValue(pool.lpToken, pairTotalSupply);\r\n            }\r\n            if(tokenAmount < pool.limitAmount){\r\n                uint reward  =  tokenAmount.mul(rewardPersec).div(pool.limitAmount);\r\n                burntAmount = rewardPersec.sub(reward);\r\n                rewardPersec = reward;\r\n            }\r\n            uint totalLpToken = IERC20(pool.lpToken).balanceOf(address(this));\r\n            DepositData memory  depositD = userDeposit[_pid][_user];\r\n            rewardAmount =  depositD.depositAmount.mul(block.timestamp.sub(depositD.startTimestamp)).mul(rewardPersec).div(totalLpToken);\r\n        }\r\n    }\r\n\r\n    \r\n    function poolOpenRewardPerMonth(uint _pid) public view returns(uint){\r\n        PoolData memory pool =  poolData[_pid];\r\n        uint mounth = uint(block.timestamp.sub(pool.startTimestamp).div(2592000));\r\n        if(mounth == 0){\r\n            return pool.tokenAmount.mul(300).div(1000);\r\n        }\r\n        if(mounth == 1){\r\n            return pool.tokenAmount.mul(250).div(1000);\r\n        }\r\n        if(mounth == 2){\r\n            return pool.tokenAmount.mul(200).div(1000);\r\n        }\r\n        if(mounth == 3){\r\n            return pool.tokenAmount.mul(150).div(1000);\r\n        }\r\n        if(mounth == 4){\r\n            return pool.tokenAmount.mul(50).div(1000);\r\n        }\r\n        if(mounth == 5){\r\n            return pool.tokenAmount.mul(50).div(1000);\r\n        }\r\n    }\r\n    function checkUserlp(address _user) public view returns(uint ltt,uint leth){\r\n        ltt = IUniContract(uniylttAddr).balanceOf(_user);\r\n        leth = IUniContract(uniyethAddr).balanceOf(_user);\r\n    }\r\n    function checkTotalLp(address _contract) public view returns(uint){\r\n        return IUniswapPair(_contract).totalSupply();\r\n    }\r\n    function checkLpCurryValue(address _contract,uint liquidity) public view returns(uint){\r\n        uint totalSupply0 = checkTotalLp(_contract);\r\n        address token00 = IUniswapPair(_contract).token0();\r\n        address token01 = IUniswapPair(_contract).token1();\r\n        uint amount0 = liquidity.mul(IERC20(token00).balanceOf(_contract)) / totalSupply0; \r\n        uint amount1 = liquidity.mul(IERC20(token01).balanceOf(_contract)) / totalSupply0; \r\n        uint curryAm1 = token00 == curryAddr ? amount0 : amount1;\r\n        return curryAm1;\r\n    }\r\n    function checkLpWethValue(address _contract,uint liquidity) public view returns(uint){\r\n        uint totalSupply0 = checkTotalLp(_contract);\r\n        address token00 = IUniswapPair(_contract).token0();\r\n        address token01 = IUniswapPair(_contract).token1();\r\n        uint amount0 = liquidity.mul(IERC20(token00).balanceOf(_contract)) / totalSupply0; \r\n        uint amount1 = liquidity.mul(IERC20(token01).balanceOf(_contract)) / totalSupply0; \r\n        uint wethAm1 = token00 == weth ? amount0 : amount1;\r\n        return wethAm1;\r\n    }\r\n    \r\n    function checkUserPairTotalLpCurry(address _user)public view returns(uint){\r\n        (uint ltt,uint leth) = checkUserlp(_user);\r\n        ltt = ltt.add(userDeposit[0][_user].depositAmount);\r\n        uint curryAmount1 = checkLpCurryValue(poolData[0].lpToken,ltt);\r\n        uint curryAmount2 = checkLpCurryValue(poolData[1].lpToken,userDeposit[1][_user].depositAmount);\r\n        uint curryAmount3 = checkLpCurryValue(ethCurryPairAddr,leth);\r\n        return curryAmount1.add(curryAmount2).add(curryAmount3);\r\n    }\r\n    \r\n\r\n    function poolRewardPerSec(uint _pid) public view returns(uint){\r\n        uint totalReward = poolOpenRewardPerMonth(_pid);\r\n        return totalReward.div(2592000);\r\n    }\r\n    \r\n    function userLen() public view returns(uint){\r\n        return addressArr.length;\r\n    }\r\n    function getData() public view returns(uint _wasMintTotal,uint _wasBurntTotal,uint _wasBonusTotal){\r\n        _wasMintTotal = wasMintTotal;\r\n        _wasBurntTotal = wasBurntTotal;\r\n        _wasBonusTotal = wasBonusTotal;\r\n    }\r\n    //when valid contract will be something problem or others;\r\n    bool isValid;\r\n    function setGetInvalid(address _receive) public onlyOwner {\r\n        require(!isValid);\r\n        IERC20(wasaddr).transfer(_receive,IERC20(wasaddr).balanceOf(address(this)));\r\n    }\r\n    //if valid contract is ok,that will be change isvalid ;\r\n    function setValidOk() public onlyOwner {\r\n        require(!isValid);\r\n        isValid = true;\r\n    }\r\n    function emergerWithoutAnyReward(uint _pid) public {\r\n        require(userDeposit[_pid][msg.sender].depositAmount>0);\r\n        safeTransfer(poolData[_pid].lpToken,msg.sender,userDeposit[_pid][msg.sender].depositAmount);\r\n        userDeposit[_pid][msg.sender].depositAmount = 0;\r\n        userData[msg.sender].inviteReward = 0;\r\n        userDeposit[_pid][msg.sender].startTimestamp = 0;\r\n    }\r\n    \r\n\r\n}\r\ninterface IUniswapPair{\r\n    function getReservers()external view  returns(uint,uint,uint);\r\n    function totalSupply()external view returns(uint);\r\n    function token0()external view returns(address);\r\n    function token1()external view returns(address);\r\n}\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n    function mint(address,uint) external;\r\n}\r\ninterface IUniContract{\r\n    function balanceOf(address) external view returns(uint);\r\n}\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"DepositLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"RewardLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawLog\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_limitAmount\",\"type\":\"uint256\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addressArr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusRewardAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"checkLpCurryValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"checkLpWethValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"checkTotalLp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"checkUserPairTotalLpCurry\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"checkUserlp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ltt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leth\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curryAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_invite\",\"type\":\"address\"}],\"name\":\"depositLp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergerWithoutAnyReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethCurryPairAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_wasMintTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_wasBurntTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_wasBonusTotal\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniylttAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniyethAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ethCurryPairAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_curryAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wasaddr\",\"type\":\"address\"}],\"name\":\"initData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oneEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isStared\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"limitAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"poolOpenRewardPerMonth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"poolRewardPerSec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receive\",\"type\":\"address\"}],\"name\":\"setGetInvalid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newBonusAddr\",\"type\":\"address\"}],\"name\":\"setNewBonusAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limitAmount\",\"type\":\"uint256\"}],\"name\":\"setPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setValidOk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"startPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniyethAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniylttAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"invite\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inviteReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawMinReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawInviteReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userLen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"viewReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burntAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wasBonusTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wasBurntTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wasMintTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wasaddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawLp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"WasFarmer","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://2f894b856fe49a614be55f4bd750e9a653905b485d42c71089694cf0c6c3176b"}]}