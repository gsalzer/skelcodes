{"status":"1","message":"OK","result":[{"SourceCode":"{\"GAMERTEAMPool.sol\":{\"content\":\"// File: contracts/IRewardDistributionRecipient.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract IRewardDistributionRecipient is Ownable {\\n    address public rewardDistribution;\\n\\n    function notifyRewardAmount(uint256 reward) external;\\n\\n    modifier onlyRewardDistribution() {\\n        require(_msgSender() == rewardDistribution, \\\"Caller is not reward distribution\\\");\\n        _;\\n    }\\n\\n    function setRewardDistribution(address _rewardDistribution)\\n        external\\n        onlyOwner\\n    {\\n        rewardDistribution = _rewardDistribution;\\n    }\\n}\\n\\n// File: contracts/CurveRewards.sol\\n\\npragma solidity ^0.5.0;\\n\\nimport \\\"./Team.sol\\\";\\n\\ncontract LPTokenWrapper is Team {\\n    using SafeERC20 for IERC20;\\n\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) public view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function stake(address account, uint256 amount) public {\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n    }\\n\\n    function withdraw(address account, uint256 amount) public {\\n        _totalSupply = _totalSupply.sub(amount);\\n        _balances[account] = _balances[account].sub(amount);\\n    }\\n}\\n\\ncontract GAMERTEAMPool is LPTokenWrapper, IRewardDistributionRecipient {\\n    IERC20 public gamer = IERC20(gamerTokenAddress);\\n    uint256 public constant DURATION = 7 days;\\n\\n    uint256 public initreward = 3 * 10**5 * 10**18; // 30w\\n    uint256 public starttime = 1604289600 + 2 days; // 2020-11-04 04:00:00 (UTC +04:00)\\n    uint256 public periodFinish;\\n    uint256 public totalRewardRate;\\n    uint256 public baseTeamRewardRate;\\n    uint256 public weightedTeamRewardRate;\\n    uint256 public teamLeaderRewardRate;\\n    uint256 public lastUpdateTime;\\n    uint256 public baseTeamRewardPerTokenStored;\\n    uint256 public weightedTeamRewardGlobalFactorStored;\\n    uint256 public teamLeaderRewardPerTokenStored;\\n\\n    mapping(address =\\u003e uint256) private userTeamMemberRewardPerTokenPaid;\\n    mapping(address =\\u003e uint256) private userTeamLeaderRewardPerTokenPaid;\\n    mapping(address =\\u003e uint256) private teamMemberRewards;\\n    mapping(address =\\u003e uint256) private teamLeaderRewards;\\n\\n    event RewardAdded(uint256 reward);\\n    event Staked(address indexed user, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 amount);\\n    event RewardPaid(address indexed user, uint256 reward);\\n    event UpdateLeaderThreshold(uint256 oldThreshold, uint256 newThreshold);\\n    event NewGov(address oldGov, address newGov);\\n    event NewGamerStakingPool(address oldGamerStakingPool, address newGamerStakingPool);\\n\\n    constructor() public {\\n        // Creator of the contract is gov during initialization\\n        gov = msg.sender;\\n    }\\n\\n    modifier updateReward(address account) {\\n        TeamStructure storage targetTeam = teamsKeyMap[teamRelationship[account]];\\n\\n        baseTeamRewardPerTokenStored = baseTeamRewardPerToken();\\n        targetTeam.weightedTeamRewardPerTokenStored = targetTeamWeightedTeamRewardPerToken(account);\\n        teamLeaderRewardPerTokenStored = teamLeaderRewardPerToken();\\n\\n        weightedTeamRewardGlobalFactorStored = weightedTeamRewardGlobalFactor();\\n        targetTeam.lastWeightedTeamRewardGlobalFactor = weightedTeamRewardGlobalFactorStored;\\n        \\n        lastUpdateTime = lastTimeRewardApplicable();\\n        if (account != address(0)) {\\n            (uint256 userTotalTeamRewardPerTokenStored, uint256 userTotalTeamMemberRewards) = earnedTeamMemberReward(account);\\n            (uint256 userTeamLeaderRewardPerTokenStored, uint256 userTeamLeaderRewards) = earnedTeamLeaderReward(account);\\n            \\n            userTeamMemberRewardPerTokenPaid[account] = userTotalTeamRewardPerTokenStored;\\n            userTeamLeaderRewardPerTokenPaid[targetTeam.teamLeader] = userTeamLeaderRewardPerTokenStored;\\n\\n            teamMemberRewards[account] = userTotalTeamMemberRewards;\\n            teamLeaderRewards[targetTeam.teamLeader] = userTeamLeaderRewards;\\n        }\\n        _;\\n    }\\n\\n    function lastTimeRewardApplicable() public view returns (uint256) {\\n        return Math.min(block.timestamp, periodFinish);\\n    }\\n\\n    function baseTeamRewardPerToken() public view returns (uint256) {\\n        if (totalSupply() == 0) {\\n            return baseTeamRewardPerTokenStored;\\n        }\\n        return\\n            baseTeamRewardPerTokenStored.add(\\n                lastTimeRewardApplicable()\\n                    .sub(lastUpdateTime)\\n                    .mul(baseTeamRewardRate)\\n                    .mul(1e18)\\n                    .div(totalSupply())\\n            );\\n    }\\n\\n    function weightedTeamRewardGlobalFactor() public view returns (uint256) {\\n        if (totalSupply() == 0) {\\n            return weightedTeamRewardGlobalFactorStored;\\n        }\\n        return\\n            weightedTeamRewardGlobalFactorStored.add(\\n                lastTimeRewardApplicable()\\n                    .sub(lastUpdateTime)\\n                    .mul(weightedTeamRewardRate)\\n                    .mul(1e36)\\n                    .div(totalSupply() ** weightedTeamAttenuationIndex)\\n            );\\n    }\\n\\n    function targetTeamWeightedTeamRewardPerToken(address account) public view returns (uint256) {\\n        TeamStructure storage targetTeam = teamsKeyMap[teamRelationship[account]];\\n        if (targetTeam.teamTotalStakingAmount == 0) {\\n            return targetTeam.weightedTeamRewardPerTokenStored;\\n        }\\n        return\\n            targetTeam.weightedTeamRewardPerTokenStored.add(\\n                weightedTeamRewardGlobalFactor()\\n                .sub(targetTeam.lastWeightedTeamRewardGlobalFactor)\\n                .mul(targetTeam.teamTotalStakingAmount).div(1e18));\\n    }\\n\\n    function teamLeaderRewardPerToken() public view returns (uint256) {\\n        if (totalSupply() == 0) {\\n            return teamLeaderRewardPerTokenStored;\\n        }\\n        return\\n            teamLeaderRewardPerTokenStored.add(\\n                lastTimeRewardApplicable()\\n                    .sub(lastUpdateTime)\\n                    .mul(teamLeaderRewardRate)\\n                    .mul(1e18)\\n                    .div(totalSupply())\\n            );\\n    }\\n\\n    function earnedTeamMemberReward(address account) public view returns (uint256, uint256) {\\n        uint256 userBaseTeamRewardPerTokenStored = baseTeamRewardPerToken();\\n\\n        uint256 userWeightedTeamRewardPerTokenStored = targetTeamWeightedTeamRewardPerToken(account);\\n\\n        uint256 userTotalTeamRewardPerTokenStored = userBaseTeamRewardPerTokenStored\\n                .add(userWeightedTeamRewardPerTokenStored);\\n\\n        uint256 userTotalTeamMemberReward = balanceOf(account)\\n                .mul(userTotalTeamRewardPerTokenStored\\n                .sub(userTeamMemberRewardPerTokenPaid[account]))\\n                .div(1e18)\\n                .add(teamMemberRewards[account]);\\n\\n        return (userTotalTeamRewardPerTokenStored, userTotalTeamMemberReward);\\n    }\\n\\n    function earnedTeamLeaderReward(address account) public view returns (uint256, uint256)  {\\n        uint256 userTeamLeaderRewardPerTokenStored = teamLeaderRewardPerToken();\\n        TeamStructure storage targetTeam = teamsKeyMap[teamRelationship[account]];\\n        \\n        if (!targetTeam.isLeaderValid) {\\n            return (userTeamLeaderRewardPerTokenStored, teamLeaderRewards[targetTeam.teamLeader]);\\n        }\\n        \\n        uint256 userTotalTeamLeaderReward = targetTeam.teamTotalStakingAmount\\n                .mul(userTeamLeaderRewardPerTokenStored\\n                .sub(userTeamLeaderRewardPerTokenPaid[targetTeam.teamLeader]))\\n                .div(1e18)\\n                .add(teamLeaderRewards[targetTeam.teamLeader]);\\n        \\n        return (userTeamLeaderRewardPerTokenStored, userTotalTeamLeaderReward);\\n    }\\n\\n    // stake visibility is public as overriding LPTokenWrapper\\u0027s stake() function\\n    function stake(address account, uint256 amount) public onlyStakingPool onlyInTeam(account) updateReward(account) checkhalve {\\n        require(amount \\u003e 0, \\\"Cannot stake 0\\\");\\n        _update(account, true, amount);\\n        super.stake(account, amount);\\n        emit Staked(msg.sender, amount);\\n    }\\n\\n    function withdraw(address account, uint256 amount) public onlyStakingPool onlyInTeam(account) updateReward(account) {\\n        require(amount \\u003e 0, \\\"Cannot withdraw 0\\\");\\n        _update(account, false, amount);\\n        super.withdraw(account, amount);\\n        emit Withdrawn(msg.sender, amount);\\n    }\\n\\n    function getReward() public updateReward(msg.sender) checkhalve {\\n        (, uint256 userTotalTeamMemberRewards) = earnedTeamMemberReward(msg.sender);\\n        (, uint256 userTeamLeaderRewards) = earnedTeamLeaderReward(msg.sender);\\n\\n        uint256 userTotalRewards = userTotalTeamMemberRewards + userTeamLeaderRewards;\\n        \\n        if (userTotalRewards \\u003e 0) {\\n            teamMemberRewards[msg.sender] = 0;\\n            teamLeaderRewards[msg.sender] = 0;\\n            uint256 scalingFactor = GAMER(address(gamer)).gamersScalingFactor();\\n            uint256 trueReward = userTotalRewards.mul(scalingFactor).div(10**18);\\n            gamer.safeTransfer(msg.sender, trueReward);\\n            emit RewardPaid(msg.sender, trueReward);\\n        }\\n    }\\n\\n    function buildTeam(string calldata newTeamName) external onlyFreeMan(msg.sender) checkStart checkhalve returns(bool) {\\n        require(bytes(newTeamName).length \\u003c 12 \\u0026\\u0026 bytes(newTeamName).length \\u003e 2, \\\"This teamName is not valid\\\");\\n        uint256 userBalance = GAMER(gamerStakingPool).balanceOfUnderlying(msg.sender);\\n        require(userBalance \\u003e= leaderThreshold, \\\"This user doesn\\u0027t reach the leader threshold.\\\");\\n        bytes32 newTeamKey = _generateTeamKey(newTeamName);\\n        TeamStructure storage targetTeam = teamsKeyMap[newTeamKey];\\n        require(!targetTeam.isEstablished, \\\"This teamName has been used.\\\");\\n\\n        teamRelationship[msg.sender] = newTeamKey;\\n        \\n        baseTeamRewardPerTokenStored = baseTeamRewardPerToken();\\n        teamLeaderRewardPerTokenStored = teamLeaderRewardPerToken();\\n        weightedTeamRewardGlobalFactorStored = weightedTeamRewardGlobalFactor();\\n        lastUpdateTime = lastTimeRewardApplicable();\\n\\n        (uint256 memberPerTokenStored, ) = earnedTeamMemberReward(msg.sender);\\n        (uint256 leaderPerTokenStored, ) = earnedTeamLeaderReward(msg.sender);\\n        \\n        userTeamMemberRewardPerTokenPaid[msg.sender] = memberPerTokenStored;\\n        userTeamLeaderRewardPerTokenPaid[msg.sender] = leaderPerTokenStored;\\n\\n        teamsKeyMap[newTeamKey]  = TeamStructure({\\n            teamName: newTeamName,\\n            teamKey: newTeamKey,\\n            isLeaderValid: true,\\n            isEstablished: true,\\n            teamLeader: msg.sender,\\n            teamTotalStakingAmount: userBalance,\\n            weightedTeamRewardPerTokenStored: uint256(0),\\n            lastWeightedTeamRewardGlobalFactor: weightedTeamRewardGlobalFactorStored\\n        });\\n\\n        totalTeamNumber += 1;\\n        teamList.push(newTeamKey);\\n        super.stake(msg.sender, userBalance);\\n        emit BuildTeam(newTeamName);\\n        return true;\\n    }\\n\\n    function joinTeam(string calldata targetTeamName) external onlyFreeMan(msg.sender) checkStart checkhalve returns(bool) {\\n        uint256 userBalance = GAMER(gamerStakingPool).balanceOfUnderlying(msg.sender);\\n        require(userBalance != 0, \\\"This user doesn\\u0027t stake any GAMERs.\\\");\\n\\n        bytes32 targetTeamKey = _generateTeamKey(targetTeamName);\\n        TeamStructure storage targetTeam = teamsKeyMap[targetTeamKey];\\n        require(targetTeam.isEstablished, \\\"This team has not been built.\\\");\\n\\n        teamRelationship[msg.sender] = targetTeamKey;\\n\\n        baseTeamRewardPerTokenStored = baseTeamRewardPerToken();\\n        targetTeam.weightedTeamRewardPerTokenStored = targetTeamWeightedTeamRewardPerToken(targetTeam.teamLeader);\\n        teamLeaderRewardPerTokenStored = teamLeaderRewardPerToken();\\n\\n        weightedTeamRewardGlobalFactorStored = weightedTeamRewardGlobalFactor();\\n        targetTeam.lastWeightedTeamRewardGlobalFactor = weightedTeamRewardGlobalFactorStored;\\n\\n        lastUpdateTime = lastTimeRewardApplicable();\\n\\n        (uint256 memberPerTokenStored, ) = earnedTeamMemberReward(msg.sender);\\n        (uint256 leaderPerTokenStored, uint256 leaderRewards) = earnedTeamLeaderReward(msg.sender);\\n        \\n        userTeamMemberRewardPerTokenPaid[msg.sender] = memberPerTokenStored;\\n        userTeamLeaderRewardPerTokenPaid[targetTeam.teamLeader] = leaderPerTokenStored;\\n        teamLeaderRewards[targetTeam.teamLeader] = leaderRewards;\\n\\n        targetTeam.teamTotalStakingAmount = targetTeam.teamTotalStakingAmount.add(userBalance);\\n        super.stake(msg.sender, userBalance);\\n        emit JoinTeam(targetTeamName);\\n        return true; \\n    }\\n\\n    modifier checkhalve() {\\n        if (block.timestamp \\u003e= periodFinish) {\\n            initreward = initreward.mul(80).div(100);\\n            uint256 scalingFactor = GAMER(address(gamer)).gamersScalingFactor();\\n            uint256 newRewards = initreward.mul(scalingFactor).div(10**18);\\n            gamer.mint(address(this), newRewards);\\n\\n            totalRewardRate = initreward.div(DURATION);\\n            baseTeamRewardRate = totalRewardRate.mul(45).div(100);\\n            weightedTeamRewardRate = totalRewardRate.mul(45).div(100);\\n            teamLeaderRewardRate = totalRewardRate.mul(10).div(100);\\n\\n            periodFinish = block.timestamp.add(DURATION);\\n            emit RewardAdded(initreward);\\n        }\\n        _;\\n    }\\n\\n    modifier checkStart(){\\n        require(block.timestamp \\u003e= starttime,\\\"not start\\\");\\n        _;\\n    }\\n\\n    function setGov(address gov_) external onlyGov {\\n        address oldGov = gov;\\n        gov = gov_;\\n        emit NewGov(oldGov, gov_);\\n    }\\n\\n    function setGamerStakingPool(address gamerStakingPool_) external onlyGov {\\n        address oldGamerStakingPool = gamerStakingPool;\\n        gamerStakingPool = gamerStakingPool_;\\n        emit NewGamerStakingPool(oldGamerStakingPool, gamerStakingPool_);\\n    }\\n\\n    function updateLeaderThreshold(uint256 leaderThreshold_) external onlyGov {\\n        uint256 oldLeaderThreshold = leaderThreshold;\\n        leaderThreshold = leaderThreshold_;\\n        emit UpdateLeaderThreshold(oldLeaderThreshold, leaderThreshold_);\\n    }\\n\\n    function notifyRewardAmount(uint256 reward)\\n        external\\n        onlyRewardDistribution\\n        updateReward(address(0))\\n    {\\n        if (block.timestamp \\u003e starttime) {\\n            if (block.timestamp \\u003e= periodFinish) {\\n                totalRewardRate = reward.div(DURATION);\\n                baseTeamRewardRate = totalRewardRate.mul(45).div(100);\\n                weightedTeamRewardRate = totalRewardRate.mul(45).div(100);\\n                teamLeaderRewardRate = totalRewardRate.mul(10).div(100);\\n            } else {\\n                uint256 remaining = periodFinish.sub(block.timestamp);\\n                uint256 leftover = remaining.mul(totalRewardRate);\\n                totalRewardRate = reward.add(leftover).div(DURATION);\\n                baseTeamRewardRate = totalRewardRate.mul(45).div(100);\\n                weightedTeamRewardRate = totalRewardRate.mul(45).div(100);\\n                teamLeaderRewardRate = totalRewardRate.mul(10).div(100);\\n            }\\n            lastUpdateTime = block.timestamp;\\n            periodFinish = block.timestamp.add(DURATION);\\n            emit RewardAdded(reward);\\n        } else {\\n            require(gamer.balanceOf(address(this)) == 0, \\\"already initialized\\\");\\n            gamer.mint(address(this), initreward);\\n            totalRewardRate = initreward.div(DURATION);\\n            baseTeamRewardRate = totalRewardRate.mul(45).div(100);\\n            weightedTeamRewardRate = totalRewardRate.mul(45).div(100);\\n            teamLeaderRewardRate = totalRewardRate.mul(10).div(100);\\n            lastUpdateTime = starttime;\\n            periodFinish = starttime.add(DURATION);\\n            emit RewardAdded(initreward);\\n        }\\n    }\\n\\n    // This function allows governance to take unsupported tokens out of the\\n    // contract, since this one exists longer than the other pools.\\n    // This is in an effort to make someone whole, should they seriously\\n    // mess up. There is no guarantee governance will vote to return these.\\n    // It also allows for removal of airdropped tokens.\\n    function governanceRecoverUnsupported(IERC20 _token, uint256 amount, address to)\\n        external\\n    {\\n        // only gov\\n        require(msg.sender == owner(), \\\"!governance\\\");\\n\\n        // cant take reward asset\\n        require(_token != gamer, \\\"gamer\\\");\\n\\n        // transfer to\\n        _token.safeTransfer(to, amount);\\n    }\\n}\\n\"},\"Team.sol\":{\"content\":\"pragma solidity 0.5.17;\\n\\nimport \\\"./TeamStorage.sol\\\";\\n\\ninterface GAMER {\\n    function gamersScalingFactor() external view returns (uint256);\\n    function balanceOfUnderlying(address amount) external returns(uint256);\\n    function mint(address to, uint256 amount) external;\\n}\\n\\ncontract Team is TeamStorage {\\n\\n    /// @notice An event thats emitted when someone builds a new team.\\n    event BuildTeam(string teamName);\\n\\n    /// @notice An event thats emitted when someone joins a team.\\n    event JoinTeam(string teamName);\\n\\n    /// @notice An event thats emitted when someone\\u0027s staking GAMER amount changes.\\n    event UpdateTeamPoolStaking(address user, bool positive, uint256 amount);\\n\\n\\n    modifier onlyGov() {\\n        require(msg.sender == gov);\\n        _;\\n    }\\n    \\n    modifier onlyStakingPool() {\\n        require(msg.sender == gamerStakingPool, \\\"Only the gamer\\u0027s staking pool has authority\\\");\\n        _;\\n    }\\n\\n    modifier onlyInTeam(address account) {\\n        bytes32 targetTeamKey = teamRelationship[account];\\n        if (targetTeamKey != bytes32(0)) {\\n            _;\\n        }\\n    }\\n\\n    modifier onlyFreeMan(address account) {\\n        require(teamRelationship[msg.sender] == bytes32(0), \\\"This user is already in a team.\\\");\\n        _;\\n    }\\n\\n    function _update(address account, bool positive, uint256 amount) internal returns(bool) {\\n        require(amount != 0, \\\"Amount can\\u0027t be Zero\\\");\\n        TeamStructure storage targetTeam = teamsKeyMap[teamRelationship[account]];\\n        if (positive) {\\n            if (targetTeam.teamLeader == account \\u0026\\u0026 _balances[account] \\u003e leaderThreshold) {\\n                targetTeam.isLeaderValid = true;\\n            }\\n            targetTeam.teamTotalStakingAmount = targetTeam.teamTotalStakingAmount.add(amount);\\n        } else {\\n            if (targetTeam.teamLeader == account \\u0026\\u0026 _balances[account] \\u003c leaderThreshold) {\\n                targetTeam.isLeaderValid = false;\\n            }\\n            targetTeam.teamTotalStakingAmount = targetTeam.teamTotalStakingAmount.sub(amount);\\n        }\\n\\n        emit UpdateTeamPoolStaking(account, positive, amount);\\n        return true;\\n    }\\n\\n    // Public functions\\n\\n    function getTeamInfo(address account) external view returns(string memory, uint256) {\\n        TeamStructure storage targetTeam = teamsKeyMap[teamRelationship[account]];\\n        uint256 scalingFactor = GAMER(gamerTokenAddress).gamersScalingFactor();\\n        return (targetTeam.teamName, targetTeam.teamTotalStakingAmount.mul(scalingFactor).div(10**18));\\n    }\\n\\n    function isTeamLeader(address account) external view returns(bool) {\\n        bytes32 targetTeamKey = teamRelationship[account];\\n        TeamStructure storage targetTeam = teamsKeyMap[targetTeamKey];\\n        if (targetTeam.teamLeader == account) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function getAllTeams() external view returns(bytes32[] memory, uint256[] memory) {\\n        bytes32[] memory teamKeyList = new bytes32[](teamList.length);\\n        uint256[] memory teamTotalStakingAmountList = new uint256[](teamList.length);\\n        for (uint256 i = 0; i \\u003c teamList.length; i++) {\\n            teamKeyList[i] = teamList[i];\\n            teamTotalStakingAmountList[i] = teamsKeyMap[teamList[i]].teamTotalStakingAmount;\\n        }\\n        return (teamKeyList, teamTotalStakingAmountList);\\n    }\\n\\n    function _generateTeamKey(string memory teamName) internal pure returns(bytes32) {\\n        bytes memory packedMsg = abi.encode(teamName);\\n        bytes32 teamKey = keccak256(packedMsg);\\n        require(teamKey != bytes32(0), \\\"Team name is not valid.\\\");\\n        return teamKey;\\n    }\\n}\"},\"TeamStorage.sol\":{\"content\":\"/*\\n   ____            __   __        __   _\\n  / __/__ __ ___  / /_ / /  ___  / /_ (_)__ __\\n _\\\\ \\\\ / // // _ \\\\/ __// _ \\\\/ -_)/ __// / \\\\ \\\\ /\\n/___/ \\\\_, //_//_/\\\\__//_//_/\\\\__/ \\\\__//_/ /_\\\\_\\\\\\n     /___/\\n\\n* Synthetix: GAMERRewards.sol\\n*\\n* Docs: https://docs.synthetix.io/\\n*\\n*\\n* MIT License\\n* ===========\\n*\\n* Copyright (c) 2020 Synthetix\\n*\\n* Permission is hereby granted, free of charge, to any person obtaining a copy\\n* of this software and associated documentation files (the \\\"Software\\\"), to deal\\n* in the Software without restriction, including without limitation the rights\\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n* copies of the Software, and to permit persons to whom the Software is\\n* furnished to do so, subject to the following conditions:\\n*\\n* The above copyright notice and this permission notice shall be included in all\\n* copies or substantial portions of the Software.\\n*\\n* THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n*/\\n\\n// File: @openzeppelin/contracts/math/Math.sol\\n\\npragma solidity ^0.5.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a \\u003e= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a \\u003c b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/math/SafeMath.sol\\n\\npragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/GSN/Context.sol\\n\\npragma solidity ^0.5.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor () internal { }\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/ownership/Ownable.sol\\n\\npragma solidity ^0.5.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        _owner = _msgSender();\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\\n\\npragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function mint(address account, uint amount) external;\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n\\n// File: @openzeppelin/contracts/utils/Address.sol\\n\\npragma solidity ^0.5.5;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * This test is non-exhaustive, and there may be false-negatives: during the\\n     * execution of a contract\\u0027s constructor, its address will be reported as\\n     * not containing a contract.\\n     *\\n     * IMPORTANT: It is unsafe to assume that an address for which this\\n     * function returns false is an externally-owned account (EOA) and not a\\n     * contract.\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256(\\u0027\\u0027)`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != 0x0 \\u0026\\u0026 codehash != accountHash);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-call-value\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\\n\\npragma solidity ^0.5.0;\\n\\n\\n\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // \\u0027safeIncreaseAllowance\\u0027 and \\u0027safeDecreaseAllowance\\u0027\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity\\u0027s return data size checking mechanism, since\\n        // we\\u0027re implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length \\u003e 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\\n\\npragma solidity ^0.5.17;\\n\\n\\ncontract TeamStorage {\\n    using SafeMath for uint256;\\n\\n    address public gov;\\n\\n    address public gamerStakingPool;\\n\\n    address public gamerTokenAddress = 0x36F697f791A0C91D6f1BB166767d5D2D701B1d82;\\n\\n    uint256 public leaderThreshold; \\n    \\n    uint256 public totalTeamNumber;\\n    \\n    mapping(address =\\u003e uint256) public _balances;\\n    \\n    uint256 public _totalSupply;\\n\\n    struct TeamStructure {\\n        string teamName;\\n        bytes32 teamKey;\\n        bool isLeaderValid;\\n        bool isEstablished;\\n        address teamLeader;\\n        uint256 teamTotalStakingAmount;\\n        uint256 weightedTeamRewardPerTokenStored;\\n        uint256 lastWeightedTeamRewardGlobalFactor;\\n    }\\n\\n    mapping(address =\\u003e bytes32) internal teamRelationship;\\n\\n    bytes32[] internal teamList;\\n    \\n    mapping(bytes32 =\\u003e TeamStructure) internal teamsKeyMap;\\n\\n    uint256 internal weightedTeamAttenuationIndex = 2;\\n}\"}}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"teamName\",\"type\":\"string\"}],\"name\":\"BuildTeam\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"teamName\",\"type\":\"string\"}],\"name\":\"JoinTeam\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldGamerStakingPool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newGamerStakingPool\",\"type\":\"address\"}],\"name\":\"NewGamerStakingPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldGov\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newGov\",\"type\":\"address\"}],\"name\":\"NewGov\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"UpdateLeaderThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"positive\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UpdateTeamPoolStaking\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"baseTeamRewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"baseTeamRewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"baseTeamRewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"newTeamName\",\"type\":\"string\"}],\"name\":\"buildTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earnedTeamLeaderReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earnedTeamMemberReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gamer\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gamerStakingPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gamerTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllTeams\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getTeamInfo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gov\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"governanceRecoverUnsupported\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initreward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isTeamLeader\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"targetTeamName\",\"type\":\"string\"}],\"name\":\"joinTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"leaderThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardDistribution\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"gamerStakingPool_\",\"type\":\"address\"}],\"name\":\"setGamerStakingPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"gov_\",\"type\":\"address\"}],\"name\":\"setGov\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardDistribution\",\"type\":\"address\"}],\"name\":\"setRewardDistribution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"starttime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"targetTeamWeightedTeamRewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamLeaderRewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamLeaderRewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamLeaderRewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTeamNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"leaderThreshold_\",\"type\":\"uint256\"}],\"name\":\"updateLeaderThreshold\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weightedTeamRewardGlobalFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weightedTeamRewardGlobalFactorStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weightedTeamRewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"GAMERTEAMPool","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"50000","ConstructorArguments":"","EVMVersion":"istanbul","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://4005e90f65c9e0dfbd287017bb7b88a7a03f1c09497718e7a2b6ca78bd5d374f"}]}