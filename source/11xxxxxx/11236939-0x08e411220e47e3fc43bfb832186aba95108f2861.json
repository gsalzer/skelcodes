{"status":"1","message":"OK","result":[{"SourceCode":"// File: node_modules\\openzeppelin-solidity\\contracts\\GSN\\Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC20\\IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: node_modules\\openzeppelin-solidity\\contracts\\math\\SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC20\\ERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20Mintable}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\r\n    }\r\n}\r\n\r\n// File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC20\\ERC20Detailed.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @dev Optional functions from the ERC20 standard.\r\n */\r\ncontract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\r\n     * these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\n// File: node_modules\\openzeppelin-solidity\\contracts\\utils\\ReentrancyGuard.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n *\r\n * _Since v2.5.0:_ this module is now much more gas efficient, given net gas\r\n * metering changes introduced in the Istanbul hardfork.\r\n */\r\ncontract ReentrancyGuard {\r\n    bool private _notEntered;\r\n\r\n    constructor () internal {\r\n        // Storing an initial non-zero value makes deployment a bit more\r\n        // expensive, but in exchange the refund on every call to nonReentrant\r\n        // will be lower in amount. Since refunds are capped to a percetange of\r\n        // the total transaction's gas, it is best to keep them low in cases\r\n        // like this one, to increase the likelihood of the full refund coming\r\n        // into effect.\r\n        _notEntered = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_notEntered, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _notEntered = false;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _notEntered = true;\r\n    }\r\n}\r\n\r\n// File: node_modules\\openzeppelin-solidity\\contracts\\utils\\Address.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: contracts\\Eclipseum.sol\r\n\r\npragma solidity =0.5.17;\r\n\r\n/// @title The Eclipseum ERC20 Smart Contract\r\ncontract Eclipseum is ERC20, ERC20Detailed, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using Address for address payable;\r\n\r\n    struct SoftSellEclAmountsToReceive {\r\n        uint256 ethFromEclPool;\r\n        uint256 ethFromDaiPool;\r\n        uint256 daiFromDaiPool;\r\n    }\r\n\r\n    IERC20 public daiInterface;\r\n    bool public launched;\r\n    uint256 public ethBalanceOfEclPool;\r\n    uint256 public ethVolumeOfEclPool;\r\n    uint256 public ethVolumeOfDaiPool;\r\n\r\n    event LogBuyEcl(\r\n        address indexed userAddress,\r\n        uint256 ethSpent,\r\n        uint256 eclReceived\r\n    );\r\n    event LogSellEcl(\r\n        address indexed userAddress,\r\n        uint256 eclSold,\r\n        uint256 ethReceived\r\n    );\r\n    event LogSoftSellEcl(\r\n        address indexed userAddress,\r\n        uint256 eclSold,\r\n        uint256 ethReceived,\r\n        uint256 daiReceived\r\n    );\r\n    event LogBuyDai(\r\n        address indexed userAddress,\r\n        uint256 ethSpent,\r\n        uint256 daiReceived\r\n    );\r\n    event LogSellDai(\r\n        address indexed userAddress,\r\n        uint256 daiSold,\r\n        uint256 ethReceived\r\n    );\r\n\r\n    modifier requireLaunched() {\r\n        require(launched, \"Contract must be launched to invoke this function.\");\r\n        _;\r\n    }\r\n\r\n    /// @notice Must be called with at least 0.02 ETH.\r\n    /// @notice Mints 100,000 ECL into the contract account\r\n    constructor(address _daiAddress)\r\n        public\r\n        payable\r\n        ERC20Detailed(\"Eclipseum\", \"ECL\", 18)\r\n    {\r\n        require(\r\n            msg.value >= 0.02 ether,\r\n            \"Must call constructor with at least 0.02 Ether.\"\r\n        );\r\n\r\n        _mint(address(this), 1e5 * (10**18));\r\n        daiInterface = IERC20(_daiAddress);\r\n    }\r\n\r\n    /// @notice This function is called once after deployment to launch the contract.\r\n    /// @notice Some amount of DAI must be transferred to the contract for launch to succeed.\r\n    /// @notice Once launched, the transaction functions may be invoked.\r\n    function launch() external {\r\n        require(!launched, \"Contract has already been launched.\");\r\n        require(\r\n            daiInterface.balanceOf(address(this)) > 0,\r\n            \"DAI pool balance must be greater than zero to launch contract.\"\r\n        );\r\n\r\n        ethBalanceOfEclPool = 0.01 ether;\r\n        launched = true;\r\n    }\r\n\r\n    /// @notice Enables a user to buy ECL with ETH from the ECL liquidity pool.\r\n    /// @param minEclToReceive The minimum amount of ECL the user is willing to receive.\r\n    /// @param deadline Epoch time deadline that the transaction must complete before, otherwise reverts.\r\n    function buyEcl(uint256 minEclToReceive, uint256 deadline)\r\n        external\r\n        payable\r\n        nonReentrant\r\n        requireLaunched\r\n    {\r\n        require(\r\n            deadline >= block.timestamp,\r\n            \"Transaction deadline has elapsed.\"\r\n        );\r\n        require(msg.value > 0, \"Value of ETH sent must be greater than zero.\");\r\n\r\n        uint256 ethBalanceOfDaiPoolLocal = ethBalanceOfDaiPool().sub(msg.value);\r\n        uint256 eclBalanceOfEclPoolLocal = eclBalanceOfEclPool();\r\n        uint256 eclToReceive = applyTransactionFee(\r\n            calcBOut(ethBalanceOfEclPool, eclBalanceOfEclPoolLocal, msg.value)\r\n        );\r\n        uint256 eclToMint = eclToReceive.mul(7).div(6).add(1);\r\n        uint256 ethTransferToDaiPool = calcEthTransferForBuyEcl(\r\n            ethBalanceOfEclPool,\r\n            ethBalanceOfDaiPoolLocal,\r\n            msg.value\r\n        );\r\n\r\n        require(\r\n            eclToReceive >= minEclToReceive,\r\n            \"Unable to send the minimum quantity of ECL to receive.\"\r\n        );\r\n\r\n        ethBalanceOfEclPool = ethBalanceOfEclPool.add(msg.value).sub(\r\n            ethTransferToDaiPool\r\n        );\r\n        ethBalanceOfDaiPoolLocal = ethBalanceOfDaiPoolLocal.add(\r\n            ethTransferToDaiPool\r\n        );\r\n        eclBalanceOfEclPoolLocal = eclBalanceOfEclPoolLocal\r\n            .sub(eclToReceive)\r\n            .add(eclToMint);\r\n        ethVolumeOfEclPool += msg.value;\r\n\r\n        emit LogBuyEcl(msg.sender, msg.value, eclToReceive);\r\n\r\n        _transfer(address(this), msg.sender, eclToReceive);\r\n        _mint(address(this), eclToMint);\r\n\r\n        assert(ethBalanceOfDaiPoolLocal == ethBalanceOfDaiPool());\r\n        assert(eclBalanceOfEclPoolLocal == eclBalanceOfEclPool());\r\n        assert(ethBalanceOfEclPool > 0);\r\n        assert(ethBalanceOfDaiPool() > 0);\r\n        assert(eclBalanceOfEclPool() > 0);\r\n        assert(daiBalanceOfDaiPool() > 0);\r\n    }\r\n\r\n    /// @notice Enables a user to sell ECL for ETH to the ECL liquidity pool.\r\n    /// @param eclSold The amount of ECL the user is selling.\r\n    /// @param minEthToReceive The minimum amount of ETH the user is willing to receive.\r\n    /// @param deadline Epoch time deadline that the transaction must complete before.\r\n    function sellEcl(\r\n        uint256 eclSold,\r\n        uint256 minEthToReceive,\r\n        uint256 deadline\r\n    ) external nonReentrant requireLaunched {\r\n        require(\r\n            deadline >= block.timestamp,\r\n            \"Transaction deadline has elapsed.\"\r\n        );\r\n        require(eclSold > 0, \"Value of ECL sold must be greater than zero.\");\r\n        require(\r\n            eclSold <= balanceOf(address(msg.sender)),\r\n            \"ECL sold must be less than or equal to ECL balance.\"\r\n        );\r\n\r\n        uint256 ethBalanceOfDaiPoolLocal = ethBalanceOfDaiPool();\r\n        uint256 eclBalanceOfEclPoolLocal = eclBalanceOfEclPool();\r\n        uint256 eclToBurn = eclSold.mul(7).div(6);\r\n        uint256 ethToReceive = applyTransactionFee(\r\n            calcBOut(eclBalanceOfEclPoolLocal, ethBalanceOfEclPool, eclSold)\r\n        );\r\n\r\n        require(\r\n            ethToReceive >= minEthToReceive,\r\n            \"Unable to send the minimum quantity of ETH to receive.\"\r\n        );\r\n\r\n        ethBalanceOfEclPool = ethBalanceOfEclPool.sub(ethToReceive);\r\n        eclBalanceOfEclPoolLocal = eclBalanceOfEclPoolLocal.add(eclSold).sub(\r\n            eclToBurn\r\n        );\r\n        ethVolumeOfEclPool += ethToReceive;\r\n\r\n        emit LogSellEcl(msg.sender, eclSold, ethToReceive);\r\n\r\n        _transfer(address(msg.sender), address(this), eclSold);\r\n        _burn(address(this), eclToBurn);\r\n        msg.sender.sendValue(ethToReceive);\r\n\r\n        assert(ethBalanceOfDaiPoolLocal == ethBalanceOfDaiPool());\r\n        assert(eclBalanceOfEclPoolLocal == eclBalanceOfEclPool());\r\n        assert(ethBalanceOfEclPool > 0);\r\n        assert(ethBalanceOfDaiPool() > 0);\r\n        assert(eclBalanceOfEclPool() > 0);\r\n        assert(daiBalanceOfDaiPool() > 0);\r\n    }\r\n\r\n    /// @notice Enables a user to sell ECL for ETH and DAI to the ECL liquidity pool.\r\n    /// @param eclSold The amount of ECL the user is selling.\r\n    /// @param minEthToReceive The minimum amount of ETH the user is willing to receive.\r\n    /// @param minDaiToReceive The minimum amount of DAI the user is willing to receive.\r\n    /// @param deadline Epoch time deadline that the transaction must complete before.\r\n    function softSellEcl(\r\n        uint256 eclSold,\r\n        uint256 minEthToReceive,\r\n        uint256 minDaiToReceive,\r\n        uint256 deadline\r\n    ) external nonReentrant requireLaunched {\r\n        require(\r\n            deadline >= block.timestamp,\r\n            \"Transaction deadline has elapsed.\"\r\n        );\r\n        require(eclSold > 0, \"Value of ECL sold must be greater than zero.\");\r\n        require(\r\n            eclSold <= balanceOf(address(msg.sender)),\r\n            \"ECL sold must be less than or equal to ECL balance.\"\r\n        );\r\n\r\n        uint256 ethBalanceOfDaiPoolLocal = ethBalanceOfDaiPool();\r\n        uint256 circulatingSupplyLocal = circulatingSupply();\r\n        uint256 eclBalanceOfEclPoolLocal = eclBalanceOfEclPool();\r\n        uint256 daiBalanceOfDaiPoolLocal = daiBalanceOfDaiPool();\r\n        uint256 eclToBurn = applyTransactionFee(\r\n            eclSold.mul(eclBalanceOfEclPoolLocal).div(circulatingSupplyLocal)\r\n        )\r\n            .add(eclSold);\r\n        SoftSellEclAmountsToReceive memory amountsToReceive;\r\n        amountsToReceive.ethFromEclPool = applyTransactionFee(\r\n            eclSold.mul(ethBalanceOfEclPool).div(circulatingSupplyLocal)\r\n        );\r\n        amountsToReceive.ethFromDaiPool = applyTransactionFee(\r\n            eclSold.mul(ethBalanceOfDaiPoolLocal).div(circulatingSupplyLocal)\r\n        );\r\n        amountsToReceive.daiFromDaiPool = applyTransactionFee(\r\n            eclSold.mul(daiBalanceOfDaiPoolLocal).div(circulatingSupplyLocal)\r\n        );\r\n\r\n        require(\r\n            amountsToReceive.ethFromEclPool.add(\r\n                amountsToReceive.ethFromDaiPool\r\n            ) >= minEthToReceive,\r\n            \"Unable to send the minimum quantity of ETH to receive.\"\r\n        );\r\n        require(\r\n            amountsToReceive.daiFromDaiPool >= minDaiToReceive,\r\n            \"Unable to send the minimum quantity of DAI to receive.\"\r\n        );\r\n\r\n        ethBalanceOfEclPool = ethBalanceOfEclPool.sub(\r\n            amountsToReceive.ethFromEclPool\r\n        );\r\n        ethBalanceOfDaiPoolLocal = ethBalanceOfDaiPoolLocal.sub(\r\n            amountsToReceive.ethFromDaiPool\r\n        );\r\n        daiBalanceOfDaiPoolLocal = daiBalanceOfDaiPoolLocal.sub(\r\n            amountsToReceive.daiFromDaiPool\r\n        );\r\n        eclBalanceOfEclPoolLocal = eclBalanceOfEclPoolLocal.add(eclSold).sub(\r\n            eclToBurn\r\n        );\r\n        ethVolumeOfEclPool += amountsToReceive.ethFromEclPool;\r\n        ethVolumeOfDaiPool += amountsToReceive.ethFromDaiPool;\r\n\r\n        emit LogSoftSellEcl(\r\n            msg.sender,\r\n            eclSold,\r\n            amountsToReceive.ethFromEclPool.add(\r\n                amountsToReceive.ethFromDaiPool\r\n            ),\r\n            amountsToReceive.daiFromDaiPool\r\n        );\r\n\r\n        _transfer(address(msg.sender), address(this), eclSold);\r\n        _burn(address(this), eclToBurn);\r\n        require(\r\n            daiInterface.transfer(msg.sender, amountsToReceive.daiFromDaiPool),\r\n            \"DAI Transfer failed.\"\r\n        );\r\n        msg.sender.sendValue(\r\n            amountsToReceive.ethFromEclPool.add(amountsToReceive.ethFromDaiPool)\r\n        );\r\n\r\n        assert(\r\n            ethBalanceOfEclPool.add(ethBalanceOfDaiPoolLocal) ==\r\n                address(this).balance\r\n        );\r\n        assert(eclBalanceOfEclPoolLocal == eclBalanceOfEclPool());\r\n        assert(daiBalanceOfDaiPoolLocal == daiBalanceOfDaiPool());\r\n        assert(ethBalanceOfDaiPoolLocal == ethBalanceOfDaiPool());\r\n        assert(ethBalanceOfEclPool > 0);\r\n        assert(ethBalanceOfDaiPool() > 0);\r\n        assert(eclBalanceOfEclPool() > 0);\r\n        assert(daiBalanceOfDaiPool() > 0);\r\n    }\r\n\r\n    /// @notice Enables a user to buy DAI with ETH from the DAI liquidity pool.\r\n    /// @param minDaiToReceive The minimum amount of DAI the user is willing to receive.\r\n    /// @param deadline Epoch time deadline that the transaction must complete before.\r\n    function buyDai(uint256 minDaiToReceive, uint256 deadline)\r\n        external\r\n        payable\r\n        nonReentrant\r\n        requireLaunched\r\n    {\r\n        require(\r\n            deadline >= block.timestamp,\r\n            \"Transaction deadline has elapsed.\"\r\n        );\r\n        require(msg.value > 0, \"Value of ETH sent must be greater than zero.\");\r\n\r\n        uint256 ethBalanceOfDaiPoolLocal = ethBalanceOfDaiPool().sub(msg.value);\r\n        uint256 daiBalanceOfDaiPoolLocal = daiBalanceOfDaiPool();\r\n        uint256 daiToReceive = applyTransactionFee(\r\n            calcBOut(\r\n                ethBalanceOfDaiPoolLocal,\r\n                daiBalanceOfDaiPoolLocal,\r\n                msg.value\r\n            )\r\n        );\r\n        uint256 ethTransferToEclPool = msg.value.mul(15).div(10000);\r\n\r\n        require(\r\n            daiToReceive >= minDaiToReceive,\r\n            \"Unable to send the minimum quantity of DAI to receive.\"\r\n        );\r\n\r\n        ethBalanceOfEclPool = ethBalanceOfEclPool.add(ethTransferToEclPool);\r\n        ethBalanceOfDaiPoolLocal = ethBalanceOfDaiPoolLocal.add(msg.value).sub(\r\n            ethTransferToEclPool\r\n        );\r\n        daiBalanceOfDaiPoolLocal = daiBalanceOfDaiPoolLocal.sub(daiToReceive);\r\n        ethVolumeOfDaiPool += msg.value;\r\n\r\n        emit LogBuyDai(msg.sender, msg.value, daiToReceive);\r\n\r\n        require(\r\n            daiInterface.transfer(address(msg.sender), daiToReceive),\r\n            \"DAI Transfer failed.\"\r\n        );\r\n\r\n        assert(ethBalanceOfDaiPoolLocal == ethBalanceOfDaiPool());\r\n        assert(daiBalanceOfDaiPoolLocal == daiBalanceOfDaiPool());\r\n        assert(ethBalanceOfEclPool > 0);\r\n        assert(ethBalanceOfDaiPool() > 0);\r\n        assert(eclBalanceOfEclPool() > 0);\r\n        assert(daiBalanceOfDaiPool() > 0);\r\n    }\r\n\r\n    /// @notice Enables a user to sell DAI for ETH to the DAI liquidity pool.\r\n    /// @param daiSold The amount of DAI the user is selling.\r\n    /// @param minEthToReceive The minimum amount of ETH the user is willing to receive.\r\n    /// @param deadline Epoch time deadline that the transaction must complete before.\r\n    function sellDai(\r\n        uint256 daiSold,\r\n        uint256 minEthToReceive,\r\n        uint256 deadline\r\n    ) external nonReentrant requireLaunched {\r\n        require(\r\n            deadline >= block.timestamp,\r\n            \"Transaction deadline has elapsed.\"\r\n        );\r\n        require(daiSold > 0, \"Value of DAI sold must be greater than zero.\");\r\n        require(\r\n            daiSold <= daiInterface.balanceOf(address(msg.sender)),\r\n            \"DAI sold must be less than or equal to DAI balance.\"\r\n        );\r\n        require(\r\n            daiSold <=\r\n                daiInterface.allowance(address(msg.sender), address(this)),\r\n            \"DAI sold exceeds allowance.\"\r\n        );\r\n\r\n        uint256 ethBalanceOfDaiPoolLocal = ethBalanceOfDaiPool();\r\n        uint256 daiBalanceOfDaiPoolLocal = daiBalanceOfDaiPool();\r\n        uint256 ethToReceiveBeforeFee = calcBOut(\r\n            daiBalanceOfDaiPoolLocal,\r\n            ethBalanceOfDaiPoolLocal,\r\n            daiSold\r\n        );\r\n        uint256 ethToReceive = applyTransactionFee(ethToReceiveBeforeFee);\r\n        uint256 ethTransferToEclPool = ethToReceiveBeforeFee\r\n            .sub(ethToReceive)\r\n            .div(2);\r\n\r\n        require(\r\n            ethToReceive >= minEthToReceive,\r\n            \"Unable to send the minimum quantity of ETH to receive.\"\r\n        );\r\n\r\n        ethBalanceOfEclPool = ethBalanceOfEclPool.add(ethTransferToEclPool);\r\n        ethBalanceOfDaiPoolLocal = ethBalanceOfDaiPoolLocal\r\n            .sub(ethToReceive)\r\n            .sub(ethTransferToEclPool);\r\n        daiBalanceOfDaiPoolLocal = daiBalanceOfDaiPoolLocal.add(daiSold);\r\n        ethVolumeOfDaiPool += ethToReceive;\r\n\r\n        emit LogSellDai(msg.sender, daiSold, ethToReceive);\r\n\r\n        require(\r\n            daiInterface.transferFrom(\r\n                address(msg.sender),\r\n                address(this),\r\n                daiSold\r\n            ),\r\n            \"DAI Transfer failed.\"\r\n        );\r\n        msg.sender.sendValue(ethToReceive);\r\n\r\n        assert(ethBalanceOfDaiPoolLocal == ethBalanceOfDaiPool());\r\n        assert(daiBalanceOfDaiPoolLocal == daiBalanceOfDaiPool());\r\n        assert(ethBalanceOfEclPool > 0);\r\n        assert(ethBalanceOfDaiPool() > 0);\r\n        assert(eclBalanceOfEclPool() > 0);\r\n        assert(daiBalanceOfDaiPool() > 0);\r\n    }\r\n\r\n    /// @notice Calculates amount of asset B for user to receive using constant product market maker algorithm.\r\n    /// @dev A value of one is subtracted in the _bToReceive calculation such that rounding\r\n    /// @dev errors favour the pool over the user.\r\n    /// @param aBalance The balance of asset A in the liquidity pool.\r\n    /// @param bBalance The balance of asset B in the liquidity pool.\r\n    /// @param aSent The quantity of asset A sent by the user to the liquidity pool.\r\n    /// @return bToReceive The quantity of asset B the user would receive before transaction fee is applied.\r\n    function calcBOut(\r\n        uint256 aBalance,\r\n        uint256 bBalance,\r\n        uint256 aSent\r\n    ) public pure returns (uint256) {\r\n        uint256 denominator = aBalance.add(aSent);\r\n        uint256 fraction = aBalance.mul(bBalance).div(denominator);\r\n        uint256 bToReceive = bBalance.sub(fraction).sub(1);\r\n\r\n        assert(bToReceive < bBalance);\r\n\r\n        return bToReceive;\r\n    }\r\n\r\n    /// @notice Calculates the amount of ETH to transfer from the ECL pool to the DAI pool for the buyEcl function.\r\n    /// @param ethBalanceOfEclPoolLocal The balance of ETH in the ECL liquidity pool.\r\n    /// @param ethBalanceOfDaiPoolLocal The balance of ETH in the DAI liquidity pool.\r\n    /// @param ethSent The quantity of ETH sent by the user in the buyEcl function.\r\n    /// @return ethTransferToDaiPool The quantity of ETH to transfer from the ECL pool to the DAI pool.\r\n    function calcEthTransferForBuyEcl(\r\n        uint256 ethBalanceOfEclPoolLocal,\r\n        uint256 ethBalanceOfDaiPoolLocal,\r\n        uint256 ethSent\r\n    ) public pure returns (uint256) {\r\n        uint256 ethTransferToDaiPool;\r\n\r\n        if (\r\n            ethBalanceOfEclPoolLocal >=\r\n            ethSent.mul(4).div(6).add(ethBalanceOfDaiPoolLocal)\r\n        ) {\r\n            ethTransferToDaiPool = ethSent.mul(5).div(6);\r\n        } else if (\r\n            ethSent.add(ethBalanceOfEclPoolLocal) <= ethBalanceOfDaiPoolLocal\r\n        ) {\r\n            ethTransferToDaiPool = 0;\r\n        } else {\r\n            ethTransferToDaiPool = ethSent\r\n                .add(ethBalanceOfEclPoolLocal)\r\n                .sub(ethBalanceOfDaiPoolLocal)\r\n                .div(2);\r\n        }\r\n\r\n        assert(ethTransferToDaiPool <= ethSent.mul(5).div(6));\r\n\r\n        return ethTransferToDaiPool;\r\n    }\r\n\r\n    /// @notice Calculates the amount for the user to receive with a 0.3% transaction fee applied.\r\n    /// @param amountBeforeFee The amount the user will receive before transaction fee is applied.\r\n    /// @return amountAfterFee The amount the user will receive with transaction fee applied.\r\n    function applyTransactionFee(uint256 amountBeforeFee)\r\n        public\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        uint256 amountAfterFee = amountBeforeFee.mul(997).div(1000);\r\n        return amountAfterFee;\r\n    }\r\n\r\n    /// @notice Returns the ECL balance of the ECL pool.\r\n    function eclBalanceOfEclPool()\r\n        public\r\n        view\r\n        requireLaunched\r\n        returns (uint256)\r\n    {\r\n        return balanceOf(address(this));\r\n    }\r\n\r\n    /// @notice Returns the ETH balance of the DAI pool.\r\n    function ethBalanceOfDaiPool()\r\n        public\r\n        view\r\n        requireLaunched\r\n        returns (uint256)\r\n    {\r\n        return address(this).balance.sub(ethBalanceOfEclPool);\r\n    }\r\n\r\n    /// @notice Returns the DAI balance of the DAI pool.\r\n    function daiBalanceOfDaiPool()\r\n        public\r\n        view\r\n        requireLaunched\r\n        returns (uint256)\r\n    {\r\n        return daiInterface.balanceOf(address(this));\r\n    }\r\n\r\n    /// @notice Returns the circulating supply of ECL.\r\n    function circulatingSupply() public view requireLaunched returns (uint256) {\r\n        return totalSupply().sub(eclBalanceOfEclPool());\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_daiAddress\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethSpent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"daiReceived\",\"type\":\"uint256\"}],\"name\":\"LogBuyDai\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethSpent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eclReceived\",\"type\":\"uint256\"}],\"name\":\"LogBuyEcl\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"daiSold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"}],\"name\":\"LogSellDai\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eclSold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"}],\"name\":\"LogSellEcl\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eclSold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"daiReceived\",\"type\":\"uint256\"}],\"name\":\"LogSoftSellEcl\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountBeforeFee\",\"type\":\"uint256\"}],\"name\":\"applyTransactionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minDaiToReceive\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"buyDai\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minEclToReceive\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"buyEcl\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"aBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aSent\",\"type\":\"uint256\"}],\"name\":\"calcBOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethBalanceOfEclPoolLocal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethBalanceOfDaiPoolLocal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethSent\",\"type\":\"uint256\"}],\"name\":\"calcEthTransferForBuyEcl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"circulatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"daiBalanceOfDaiPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"daiInterface\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eclBalanceOfEclPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethBalanceOfDaiPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethBalanceOfEclPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethVolumeOfDaiPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethVolumeOfEclPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"launch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"launched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"daiSold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minEthToReceive\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"sellDai\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eclSold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minEthToReceive\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"sellEcl\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eclSold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minEthToReceive\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDaiToReceive\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"softSellEcl\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Eclipseum","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000006b175474e89094c44da98b954eedeac495271d0f","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://be7d5ab3d0c603e514f1a656cffc38c0a058a6cb7c4368ffcf1e3cfaa14cb202"}]}