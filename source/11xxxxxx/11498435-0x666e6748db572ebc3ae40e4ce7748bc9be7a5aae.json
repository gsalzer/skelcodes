{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/kstasi/Documents/side/dANT/contracts/ReferralRewards.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./ReferralTree.sol\\\";\\nimport \\\"./dANT.sol\\\";\\n\\ncontract ReferralRewards is Ownable {\\n    using SafeMath for uint256;\\n\\n    event ReferralDepositReward(\\n        address indexed refferer,\\n        address indexed refferal,\\n        uint256 indexed level,\\n        uint256 amount\\n    );\\n    event ReferralRewardPaid(address indexed user, uint256 amount);\\n\\n    // Info of each deposit made by the referrer\\n    struct DepositInfo {\\n        address referrer; // Address of refferer who made this deposit\\n        uint256 depth; // The level of the refferal\\n        uint256 amount; // Amount of deposited LP tokens\\n        uint256 time; // Wnen the deposit is ended\\n        uint256 lastUpdatedTime; // Last time the referral claimed reward from the deposit\\n    }\\n    // Info of each referral\\n    struct ReferralInfo {\\n        uint256 reward; // Ammount of collected deposit rewards\\n        uint256 lastUpdate; // Last time the referral claimed rewards\\n        uint256 depositHead; // The start index in the deposit's list\\n        uint256 depositTail; // The end index in the deposit's list\\n        uint256[amtLevels] amounts; // Amounts that generate rewards on each referral level\\n        mapping(uint256 => DepositInfo) deposits; // Deposits that generate reward for the referral\\n    }\\n\\n    uint256 public constant amtLevels = 3; // Number of levels by total staked amount that determine referral reward's rate\\n    uint256 public constant referDepth = 3; // Number of referral levels that can receive dividends\\n\\n    dANT public token; // Harvested token contract\\n    ReferralTree public referralTree; // Contract with referral's tree\\n    Rewards rewards; // Main farming contract\\n\\n    uint256[amtLevels] public depositBounds; // Limits of referral's stake used to determine the referral rate\\n    uint256[referDepth][amtLevels] public depositRate; // Referral rates based on referral's deplth and stake received from deposit\\n    uint256[referDepth][amtLevels] public stakingRate; // Referral rates based on referral's deplth and stake received from staking\\n\\n    mapping(address => ReferralInfo) public referralReward; // Info per each referral\\n\\n    /// @dev Constructor that initializes the most important configurations.\\n    /// @param _token Token to be staked and harvested.\\n    /// @param _referralTree Contract with referral's tree.\\n    /// @param _rewards Main farming contract.\\n    /// @param _depositBounds Limits of referral's stake used to determine the referral rate.\\n    /// @param _depositRate Referral rates based on referral's deplth and stake received from deposit.\\n    /// @param _stakingRate Referral rates based on referral's deplth and stake received from staking.\\n    constructor(\\n        dANT _token,\\n        ReferralTree _referralTree,\\n        Rewards _rewards,\\n        uint256[amtLevels] memory _depositBounds,\\n        uint256[referDepth][amtLevels] memory _depositRate,\\n        uint256[referDepth][amtLevels] memory _stakingRate\\n    ) public Ownable() {\\n        token = _token;\\n        referralTree = _referralTree;\\n        depositBounds = _depositBounds;\\n        depositRate = _depositRate;\\n        stakingRate = _stakingRate;\\n        rewards = _rewards;\\n    }\\n\\n    /// @dev Allows an owner to update bounds.\\n    /// @param _depositBounds Limits of referral's stake used to determine the referral rate.\\n    function setBounds(uint256[amtLevels] memory _depositBounds)\\n        public\\n        onlyOwner\\n    {\\n        depositBounds = _depositBounds;\\n    }\\n\\n    /// @dev Allows an owner to update deposit rates.\\n    /// @param _depositRate Referral rates based on referral's deplth and stake received from deposit.\\n    function setDepositRate(uint256[referDepth][amtLevels] memory _depositRate)\\n        public\\n        onlyOwner\\n    {\\n        depositRate = _depositRate;\\n    }\\n\\n    /// @dev Allows an owner to update staking rates.\\n    /// @param _stakingRate Referral rates based on referral's deplth and stake received from staking.\\n    function setStakingRate(uint256[referDepth][amtLevels] memory _stakingRate)\\n        public\\n        onlyOwner\\n    {\\n        stakingRate = _stakingRate;\\n    }\\n\\n    /// @dev Allows a farming contract to set user referral.\\n    /// @param _referrer Address of the referred user.\\n    /// @param _referral Address of the refferal.\\n    function setReferral(address _referrer, address _referral) public {\\n        require(\\n            msg.sender == address(rewards),\\n            \\\"assessReferalDepositReward: bad role\\\"\\n        );\\n        referralTree.setReferral(_referrer, _referral);\\n    }\\n\\n    /// @dev Allows the main farming contract to assess referral deposit rewards.\\n    /// @param _referrer Address of the referred user.\\n    /// @param _amount Amount of new deposit.\\n    function assessReferalDepositReward(address _referrer, uint256 _amount)\\n        external\\n        virtual\\n    {\\n        require(\\n            msg.sender == address(rewards),\\n            \\\"assessReferalDepositReward: bad role\\\"\\n        );\\n        address[] memory referrals = referralTree.getReferrals(\\n            _referrer,\\n            referDepth\\n        );\\n        uint256[] memory referralStakes = rewards.getReferralStakes(referrals);\\n        uint256[] memory percents = getDepositRate(referralStakes);\\n        for (uint256 level = 0; level < referrals.length; level++) {\\n            if (referrals[level] == address(0)) {\\n                continue;\\n            }\\n\\n\\n                ReferralInfo storage referralInfo\\n             = referralReward[referrals[level]];\\n            referralInfo.deposits[referralInfo.depositTail] = DepositInfo({\\n                referrer: _referrer,\\n                depth: level,\\n                amount: _amount,\\n                lastUpdatedTime: now,\\n                time: now + rewards.duration()\\n            });\\n            referralInfo.amounts[level] = referralInfo.amounts[level].add(\\n                _amount\\n            );\\n            referralInfo.depositTail = referralInfo.depositTail.add(1);\\n            if (percents[level] == 0) {\\n                continue;\\n            }\\n            uint256 depositReward = _amount.mul(percents[level]);\\n            if (depositReward > 0) {\\n                referralInfo.reward = referralInfo.reward.add(depositReward);\\n                emit ReferralDepositReward(\\n                    _referrer,\\n                    referrals[level],\\n                    level,\\n                    depositReward\\n                );\\n            }\\n        }\\n    }\\n\\n    /// @dev Allows a user to claim his dividends.\\n    function claimDividends() public {\\n        claimUserDividends(msg.sender);\\n    }\\n\\n    /// @dev Allows a referral tree to claim all the dividends.\\n    /// @param _referral Address of user that claims his dividends.\\n    function claimAllDividends(address _referral) public {\\n        require(\\n            msg.sender == address(referralTree) ||\\n                msg.sender == address(rewards),\\n            \\\"claimAllDividends: bad role\\\"\\n        );\\n        claimUserDividends(_referral);\\n    }\\n\\n    /// @dev Allows to decrement staked amount that generates reward to the referrals.\\n    /// @param _referrer Address of the referrer.\\n    /// @param _amount Ammount of tokens to be withdrawn by referrer.\\n    function removeDepositReward(address _referrer, uint256 _amount)\\n        external\\n        virtual\\n    {}\\n\\n    /// @dev Update the staking referral reward for _user.\\n    /// @param _user Address of the referral.\\n    function accumulateReward(address _user) internal virtual {\\n        ReferralInfo storage referralInfo = referralReward[_user];\\n        if (referralInfo.lastUpdate >= now) {\\n            return;\\n        }\\n        uint256 rewardPerSec = rewards.rewardPerSec();\\n        uint256 referralStake = rewards.getReferralStake(_user);\\n        uint256[referDepth] memory rates = getStakingRateRange(referralStake);\\n        for (\\n            uint256 i = referralInfo.depositHead;\\n            i < referralInfo.depositTail;\\n            i++\\n        ) {\\n            DepositInfo memory deposit = referralInfo.deposits[i];\\n            uint256 reward = Math\\n                .min(now, deposit.time)\\n                .sub(deposit.lastUpdatedTime)\\n                .mul(deposit.amount)\\n                .mul(rewardPerSec)\\n                .mul(rates[deposit.depth])\\n                .div(1e18);\\n            if (reward > 0) {\\n                referralInfo.reward = referralInfo.reward.add(reward);\\n            }\\n            referralInfo.deposits[i].lastUpdatedTime = now;\\n            if (deposit.time < now) {\\n                if (i != referralInfo.depositHead) {\\n                    referralInfo.deposits[i] = referralInfo\\n                        .deposits[referralInfo.depositHead];\\n                }\\n                delete referralInfo.deposits[referralInfo.depositHead];\\n                referralInfo.depositHead = referralInfo.depositHead.add(1);\\n            }\\n        }\\n        referralInfo.lastUpdate = now;\\n    }\\n\\n    /// @dev Asses and distribute claimed dividends.\\n    /// @param _user Address of user that claims dividends.\\n    function claimUserDividends(address _user) internal {\\n        accumulateReward(_user);\\n        ReferralInfo storage referralInfo = referralReward[_user];\\n        uint256 amount = referralInfo.reward.div(1e18);\\n        if (amount > 0) {\\n            uint256 scaledReward = amount.mul(1e18);\\n            referralInfo.reward = referralInfo.reward.sub(scaledReward);\\n            token.mint(_user, amount);\\n            emit ReferralRewardPaid(_user, amount);\\n        }\\n    }\\n\\n    /// @dev Returns referral reward.\\n    /// @param _user Address of referral.\\n    /// @return Referral reward.\\n    function getReferralReward(address _user)\\n        external\\n        virtual\\n        view\\n        returns (uint256)\\n    {\\n        ReferralInfo storage referralInfo = referralReward[_user];\\n        uint256 rewardPerSec = rewards.rewardPerSec();\\n        uint256 referralStake = rewards.getReferralStake(_user);\\n        uint256[referDepth] memory rates = getStakingRateRange(referralStake);\\n        uint256 _reward = referralInfo.reward;\\n        for (\\n            uint256 i = referralInfo.depositHead;\\n            i < referralInfo.depositTail;\\n            i++\\n        ) {\\n            DepositInfo memory deposit = referralInfo.deposits[i];\\n            _reward = _reward.add(\\n                Math\\n                    .min(now, deposit.time)\\n                    .sub(deposit.lastUpdatedTime)\\n                    .mul(deposit.amount)\\n                    .mul(rewardPerSec)\\n                    .mul(rates[deposit.depth])\\n                    .div(1e18)\\n            );\\n        }\\n        return _reward.div(1e18);\\n    }\\n\\n    /// @dev Returns direct user referral.\\n    /// @param _user Address of referrer.\\n    /// @return Direct user referral.\\n    function getReferral(address _user) public view returns (address) {\\n        return referralTree.referrals(_user);\\n    }\\n\\n    /// @dev Returns stakong rate for the spesific referral stake.\\n    /// @param _referralStake Amount staked by referral.\\n    /// @return _rates Array of stakong rates by referral level.\\n    function getStakingRateRange(uint256 _referralStake)\\n        public\\n        view\\n        returns (uint256[referDepth] memory _rates)\\n    {\\n        for (uint256 i = 0; i < depositBounds.length; i++) {\\n            if (_referralStake >= depositBounds[i]) {\\n                return stakingRate[i];\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns deposit rate based on the spesific referral stake and referral level.\\n    /// @param _referralStakes Amounts staked by referrals.\\n    /// @return _rates Array of deposit rates by referral level.\\n    function getDepositRate(uint256[] memory _referralStakes)\\n        public\\n        view\\n        returns (uint256[] memory _rates)\\n    {\\n        _rates = new uint256[](_referralStakes.length);\\n        for (uint256 level = 0; level < _referralStakes.length; level++) {\\n            for (uint256 j = 0; j < depositBounds.length; j++) {\\n                if (_referralStakes[level] >= depositBounds[j]) {\\n                    _rates[level] = depositRate[j][level];\\n                    break;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns limits of referral's stake used to determine the referral rate.\\n    /// @return Array of deposit bounds.\\n    function getDepositBounds()\\n        public\\n        view\\n        returns (uint256[referDepth] memory)\\n    {\\n        return depositBounds;\\n    }\\n\\n    /// @dev Returns referral rates based on referral's deplth and stake received from staking.\\n    /// @return Array of staking rates.\\n    function getStakingRates()\\n        public\\n        view\\n        returns (uint256[referDepth][amtLevels] memory)\\n    {\\n        return stakingRate;\\n    }\\n\\n    /// @dev Returns referral rates based on referral's deplth and stake received from deposit.\\n    /// @return Array of deposit rates.\\n    function getDepositRates()\\n        public\\n        view\\n        returns (uint256[referDepth][amtLevels] memory)\\n    {\\n        return depositRate;\\n    }\\n\\n    /// @dev Returns amounts that generate reward for referral bu levels.\\n    /// @param _user Address of referral.\\n    /// @return Returns amounts that generate reward for referral bu levels.\\n    function getReferralAmounts(address _user)\\n        public\\n        view\\n        returns (uint256[amtLevels] memory)\\n    {\\n        ReferralInfo memory referralInfo = referralReward[_user];\\n        return referralInfo.amounts;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/kstasi/Documents/side/dANT/contracts/ReferralRewardsType2.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./ReferralRewards.sol\\\";\\n\\ncontract ReferralRewardsType2 is ReferralRewards {\\n    /// @dev Constructor that initializes the most important configurations.\\n    /// @param _token Token to be staked and harvested.\\n    /// @param _referralTree Contract with referral's tree.\\n    /// @param _rewards Main farming contract.\\n    /// @param _depositBounds Limits of referral's stake used to determine the referral rate.\\n    /// @param _depositRate Referral rates based on referral's deplth and stake received from deposit.\\n    /// @param _stakingRate Referral rates based on referral's deplth and stake received from staking.\\n    constructor(\\n        dANT _token,\\n        ReferralTree _referralTree,\\n        Rewards _rewards,\\n        uint256[amtLevels] memory _depositBounds,\\n        uint256[referDepth][amtLevels] memory _depositRate,\\n        uint256[referDepth][amtLevels] memory _stakingRate\\n    )\\n        public\\n        ReferralRewards(\\n            _token,\\n            _referralTree,\\n            _rewards,\\n            _depositBounds,\\n            _depositRate,\\n            _stakingRate\\n        )\\n    {}\\n\\n    /// @dev Allows the main farming contract to assess referral deposit rewards.\\n    /// @param _referrer Address of the referred user.\\n    /// @param _amount Amount of new deposit.\\n    function assessReferalDepositReward(address _referrer, uint256 _amount)\\n        external\\n        override\\n    {\\n        require(\\n            msg.sender == address(rewards),\\n            \\\"assessReferalDepositReward: bad role\\\"\\n        );\\n        address[] memory referrals = referralTree.getReferrals(\\n            _referrer,\\n            referDepth\\n        );\\n        for (uint256 i = 0; i < referrals.length; i++) {\\n            if (referrals[i] == address(0)) {\\n                continue;\\n            }\\n            accumulateReward(referrals[i]);\\n            ReferralInfo storage referralInfo = referralReward[referrals[i]];\\n            referralInfo.deposits[referralInfo.depositTail] = DepositInfo({\\n                referrer: _referrer,\\n                depth: i,\\n                amount: _amount,\\n                lastUpdatedTime: now,\\n                time: 0\\n            });\\n            referralInfo.amounts[i] = referralInfo.amounts[i].add(_amount);\\n            referralInfo.depositTail = referralInfo.depositTail.add(1);\\n        }\\n    }\\n\\n    /// @dev Update the staking referral reward for _user.\\n    /// @param _user Address of the referral.\\n    function accumulateReward(address _user) internal override {\\n        ReferralInfo storage referralInfo = referralReward[_user];\\n        if (referralInfo.lastUpdate >= now) {\\n            return;\\n        }\\n        uint256 rewardPerSec = rewards.rewardPerSec();\\n        uint256 referralStake = rewards.getReferralStake(_user);\\n        uint256[referDepth] memory rates = getStakingRateRange(referralStake);\\n        if (referralInfo.lastUpdate > 0) {\\n            for (uint256 i = 0; i < referralInfo.amounts.length; i++) {\\n                uint256 reward = now\\n                    .sub(referralInfo.lastUpdate)\\n                    .mul(referralInfo.amounts[i])\\n                    .mul(rewardPerSec)\\n                    .mul(rates[i])\\n                    .div(1e18);\\n                if (reward > 0) {\\n                    referralInfo.reward = referralInfo.reward.add(reward);\\n                }\\n            }\\n        }\\n        referralInfo.lastUpdate = now;\\n    }\\n\\n    /// @dev Allows the main farming contract to decrement staked amount that generates reward to the referrals.\\n    /// @param _referrer Address of the referrer.\\n    /// @param _amount Ammount of tokens to be withdrawn by referrer.\\n    function removeDepositReward(address _referrer, uint256 _amount)\\n        external\\n        override\\n    {\\n        require(\\n            msg.sender == address(rewards),\\n            \\\"removeDepositReward: bad role\\\"\\n        );\\n        address[] memory referrals = referralTree.getReferrals(\\n            _referrer,\\n            referDepth\\n        );\\n        for (uint256 i = 0; i < referrals.length; i++) {\\n            if (referrals[i] == address(0)) {\\n                continue;\\n            }\\n            accumulateReward(referrals[i]);\\n            ReferralInfo storage referralInfo = referralReward[referrals[i]];\\n            referralInfo.amounts[i] = referralInfo.amounts[i].sub(_amount);\\n        }\\n    }\\n\\n    /// @dev Returns referral reward.\\n    /// @param _user Address of referral.\\n    /// @return Referral reward.\\n    function getReferralReward(address _user)\\n        external\\n        override\\n        view\\n        returns (uint256)\\n    {\\n        ReferralInfo storage referralInfo = referralReward[_user];\\n        uint256 rewardPerSec = rewards.rewardPerSec();\\n        uint256 referralStake = rewards.getReferralStake(_user);\\n        uint256[referDepth] memory rates = getStakingRateRange(referralStake);\\n        uint256 _reward = referralInfo.reward;\\n        if (referralInfo.lastUpdate > 0) {\\n            for (uint256 i = 0; i < referralInfo.amounts.length; i++) {\\n                _reward = _reward.add(\\n                    now\\n                        .sub(referralInfo.lastUpdate)\\n                        .mul(referralInfo.amounts[i])\\n                        .mul(rewardPerSec)\\n                        .mul(rates[i])\\n                        .div(1e18)\\n                );\\n            }\\n        }\\n        return _reward.div(1e18);\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/kstasi/Documents/side/dANT/contracts/ReferralTree.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"./ReferralRewards.sol\\\";\\nimport \\\"./Rewards.sol\\\";\\n\\ncontract ReferralTree is AccessControl {\\n    using SafeMath for uint256;\\n\\n    event ReferralAdded(address indexed referrer, address indexed referral);\\n\\n    bytes32 public constant REWARDS_ROLE = keccak256(\\\"REWARDS_ROLE\\\"); // Role for those who allowed to mint new tokens\\n\\n    mapping(address => address) public referrals; // Referral addresses for each referrer\\n    mapping(address => bool) public registered; // Map to ensure if the referrer is in the tree\\n    mapping(address => address[]) public referrers; // List of referrer addresses for each referral\\n    ReferralRewards[] public referralRewards; // Referral reward contracts that are allowed to modify the tree\\n    address public treeRoot; // The root of the referral tree\\n\\n    /// @dev Constructor that initializes the most important configurations.\\n    /// @param _treeRoot The root of the referral tree.\\n    constructor(address _treeRoot) public AccessControl() {\\n        treeRoot = _treeRoot;\\n        registered[_treeRoot] = true;\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n    }\\n\\n    /// @dev Allows an admin to reanonce the DEFAULT_ADMIN_ROLE.\\n    /// @param _newAdmin Address of the new admin.\\n    function changeAdmin(address _newAdmin) public {\\n        require(\\n            hasRole(DEFAULT_ADMIN_ROLE, _msgSender()),\\n            \\\"changeAdmin: bad role\\\"\\n        );\\n        _setupRole(DEFAULT_ADMIN_ROLE, _newAdmin);\\n        renounceRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n    }\\n\\n    /// @dev Allows a farming contract to set the users referral.\\n    /// @param _referrer Address of the referred user.\\n    /// @param _referral Address of the refferal.\\n    function setReferral(address _referrer, address _referral) public {\\n        require(hasRole(REWARDS_ROLE, _msgSender()), \\\"setReferral: bad role\\\");\\n        require(_referrer != address(0), \\\"setReferral: bad referrer\\\");\\n        if (!registered[_referrer]) {\\n            require(\\n                registered[_referral],\\n                \\\"setReferral: not registered referral\\\"\\n            );\\n            referrals[_referrer] = _referral;\\n            registered[_referrer] = true;\\n            referrers[_referral].push(_referrer);\\n            emit ReferralAdded(_referrer, _referral);\\n        }\\n    }\\n\\n    /// @dev Allows an admin to remove the referral rewards contract from trusted list.\\n    /// @param _referralRewards Contract that manages referral rewards.\\n    function removeReferralReward(ReferralRewards _referralRewards) public {\\n        require(\\n            hasRole(DEFAULT_ADMIN_ROLE, _msgSender()),\\n            \\\"setReferral: bad role\\\"\\n        );\\n        for (uint256 i = 0; i < referralRewards.length; i++) {\\n            if (_referralRewards == referralRewards[i]) {\\n                uint256 lastIndex = referralRewards.length - 1;\\n                if (i != lastIndex) {\\n                    referralRewards[i] = referralRewards[lastIndex];\\n                }\\n                referralRewards.pop();\\n                revokeRole(REWARDS_ROLE, address(_referralRewards));\\n                break;\\n            }\\n        }\\n    }\\n\\n    /// @dev Allows an admin to add the referral rewards contract from trusted list.\\n    /// @param _referralRewards Contract that manages referral rewards.\\n    function addReferralReward(ReferralRewards _referralRewards) public {\\n        require(\\n            hasRole(DEFAULT_ADMIN_ROLE, _msgSender()),\\n            \\\"setReferral: bad role\\\"\\n        );\\n        _setupRole(REWARDS_ROLE, address(_referralRewards));\\n        referralRewards.push(_referralRewards);\\n    }\\n\\n    /// @dev Allows a user to claim all the dividends in all trusted products.\\n    function claimAllDividends() public {\\n        for (uint256 i = 0; i < referralRewards.length; i++) {\\n            ReferralRewards referralReward = referralRewards[i];\\n            if (referralReward.getReferralReward(_msgSender()) > 0) {\\n                referralReward.claimAllDividends(_msgSender());\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns user referrals up to the required depth.\\n    /// @param _referrer Address of referrer.\\n    /// @param _referDepth Number of referrals to be returned.\\n    /// @return List of user referrals.\\n    function getReferrals(address _referrer, uint256 _referDepth)\\n        public\\n        view\\n        returns (address[] memory)\\n    {\\n        address[] memory referralsTree = new address[](_referDepth);\\n        address referrer = _referrer;\\n        for (uint256 i = 0; i < _referDepth; i++) {\\n            referralsTree[i] = referrals[referrer];\\n            referrer = referralsTree[i];\\n        }\\n        return referralsTree;\\n    }\\n\\n    /// @dev Returns user referrals up to the required depth.\\n    /// @param _referral Address of referral.\\n    /// @return List of user referrers.\\n    function getReferrers(address _referral)\\n        public\\n        view\\n        returns (address[] memory)\\n    {\\n        return referrers[_referral];\\n    }\\n\\n    /// @dev Returns total user's referral reward.\\n    /// @param _user Address of the user.\\n    /// @return Total user's referral reward.\\n    function getUserReferralReward(address _user)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 amount = 0;\\n        for (uint256 i = 0; i < referralRewards.length; i++) {\\n            ReferralRewards referralReward = referralRewards[i];\\n            amount = amount.add(referralReward.getReferralReward(_user));\\n        }\\n        return amount;\\n    }\\n\\n    /// @dev Returns trusted referral reward contracts.\\n    /// @return List of trusted referral reward contracts.\\n    function getReferralRewards()\\n        public\\n        view\\n        returns (ReferralRewards[] memory)\\n    {\\n        return referralRewards;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/kstasi/Documents/side/dANT/contracts/Rewards.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./ReferralTree.sol\\\";\\nimport \\\"./dANT.sol\\\";\\nimport \\\"./ReferralRewards.sol\\\";\\n\\nabstract contract Rewards is Ownable {\\n    using SafeMath for uint256;\\n\\n    event Deposit(\\n        address indexed user,\\n        uint256 indexed id,\\n        uint256 amount,\\n        uint256 start,\\n        uint256 end\\n    );\\n    event Withdraw(\\n        address indexed user,\\n        uint256 indexed id,\\n        uint256 amount,\\n        uint256 time\\n    );\\n    event RewardPaid(address indexed user, uint256 amount);\\n\\n    // Info of each deposit made by the user\\n    struct DepositInfo {\\n        uint256 amount; // Amount of deposited LP tokens\\n        uint256 time; // Wnen the deposit is ended\\n    }\\n\\n    // Info of each user\\n    struct UserInfo {\\n        uint256 amount; // Total deposited amount\\n        uint256 unfrozen; // Amount of token to be unstaked\\n        uint256 reward; // Ammount of claimed rewards\\n        uint256 lastUpdate; // Last time the user claimed rewards\\n        uint256 depositHead; // The start index in the deposit's list\\n        uint256 depositTail; // The end index in the deposit's list\\n        mapping(uint256 => DepositInfo) deposits; // User's dposits\\n    }\\n\\n    dANT public token; // Harvested token contract\\n    ReferralRewards public referralRewards; // Contract that manages referral rewards\\n\\n    uint256 public duration; // How long the deposit works\\n    uint256 public rewardPerSec; // Reward rate generated each second\\n    uint256 public totalStake; // Amount of all staked LP tokens\\n    uint256 public totalClaimed; // Amount of all distributed rewards\\n    uint256 public lastUpdate; // Last time someone received rewards\\n\\n    bool public isActive = true; // If the deposits are allowed\\n\\n    mapping(address => UserInfo) public userInfo; // Info per each user\\n\\n    /// @dev Constructor that initializes the most important configurations.\\n    /// @param _token Token to be staked and harvested.\\n    /// @param _duration How long the deposit works.\\n    /// @param _rewardPerSec Reward rate generated each second.\\n    constructor(\\n        dANT _token,\\n        uint256 _duration,\\n        uint256 _rewardPerSec\\n    ) public Ownable() {\\n        token = _token;\\n        duration = _duration;\\n        rewardPerSec = _rewardPerSec;\\n    }\\n\\n    /// @dev Allows an owner to stop or countinue deposits.\\n    /// @param _isActive Whether the deposits are allowed.\\n    function setActive(bool _isActive) public onlyOwner {\\n        isActive = _isActive;\\n    }\\n\\n    /// @dev Allows an owner to update referral rewards module.\\n    /// @param _referralRewards Contract that manages referral rewards.\\n    function setReferralRewards(ReferralRewards _referralRewards)\\n        public\\n        onlyOwner\\n    {\\n        referralRewards = _referralRewards;\\n    }\\n\\n    /// @dev Allows an owner to update duration of the deposits.\\n    /// @param _duration How long the deposit works.\\n    function setDuration(uint256 _duration) public onlyOwner {\\n        duration = _duration;\\n    }\\n\\n    /// @dev Allows an owner to update reward rate per sec.\\n    /// @param _rewardPerSec Reward rate generated each second.\\n    function setRewardPerSec(uint256 _rewardPerSec) public onlyOwner {\\n        rewardPerSec = _rewardPerSec;\\n    }\\n\\n    /// @dev Allows to stake for the specific user.\\n    /// @param _user Deposit receiver.\\n    /// @param _amount Amount of deposit.\\n    function stakeFor(address _user, uint256 _amount) public {\\n        require(\\n            referralRewards.getReferral(_user) != address(0),\\n            \\\"stakeFor: referral isn't set\\\"\\n        );\\n        proccessStake(_user, _amount, address(0));\\n    }\\n\\n    /// @dev Allows to stake for themselves.\\n    /// @param _amount Amount of deposit.\\n    /// @param _refferal Referral address that will be set in case of the first stake.\\n    function stake(uint256 _amount, address _refferal) public {\\n        proccessStake(msg.sender, _amount, _refferal);\\n    }\\n\\n    /// @dev Proccess the stake.\\n    /// @param _receiver Deposit receiver.\\n    /// @param _amount Amount of deposit.\\n    /// @param _refferal Referral address that will be set in case of the first stake.\\n    function proccessStake(\\n        address _receiver,\\n        uint256 _amount,\\n        address _refferal\\n    ) internal {\\n        require(isActive, \\\"stake: is paused\\\");\\n        referralRewards.setReferral(_receiver, _refferal);\\n        referralRewards.claimAllDividends(_receiver);\\n        updateStakingReward(_receiver);\\n        if (_amount > 0) {\\n            token.transferFrom(msg.sender, address(this), _amount);\\n            UserInfo storage user = userInfo[_receiver];\\n            user.amount = user.amount.add(_amount);\\n            totalStake = totalStake.add(_amount);\\n            user.deposits[user.depositTail] = DepositInfo({\\n                amount: _amount,\\n                time: now + duration\\n            });\\n            emit Deposit(\\n                _receiver,\\n                user.depositTail,\\n                _amount,\\n                now,\\n                now + duration\\n            );\\n            user.depositTail = user.depositTail.add(1);\\n            referralRewards.assessReferalDepositReward(_receiver, _amount);\\n        }\\n    }\\n\\n    /// @dev Accumulate new reward and remove old deposits.\\n    /// @param _user Address of the user.\\n    /// @return _reward Earned reward.\\n    function accumulateStakingReward(address _user)\\n        internal\\n        virtual\\n        returns (uint256 _reward)\\n    {\\n        UserInfo storage user = userInfo[_user];\\n        for (uint256 i = user.depositHead; i < user.depositTail; i++) {\\n            DepositInfo memory deposit = user.deposits[i];\\n            _reward = _reward.add(\\n                Math\\n                    .min(now, deposit.time)\\n                    .sub(user.lastUpdate)\\n                    .mul(deposit.amount)\\n                    .mul(rewardPerSec)\\n            );\\n            if (deposit.time < now) {\\n                referralRewards.claimAllDividends(_user);\\n                user.amount = user.amount.sub(deposit.amount);\\n                handleDepositEnd(_user, deposit.amount);\\n                delete user.deposits[i];\\n                user.depositHead = user.depositHead.add(1);\\n            }\\n        }\\n    }\\n\\n    /// @dev Assess new reward.\\n    /// @param _user Address of the user.\\n    function updateStakingReward(address _user) internal virtual {\\n        UserInfo storage user = userInfo[_user];\\n        if (user.lastUpdate >= now) {\\n            return;\\n        }\\n        uint256 scaledReward = accumulateStakingReward(_user);\\n        uint256 reward = scaledReward.div(1e18);\\n        lastUpdate = now;\\n        user.reward = user.reward.add(reward);\\n        user.lastUpdate = now;\\n        if (reward > 0) {\\n            totalClaimed = totalClaimed.add(reward);\\n            token.mint(_user, reward);\\n            emit RewardPaid(_user, reward);\\n        }\\n    }\\n\\n    /// @dev Procces deposit and by returning deposit.\\n    /// @param _user Address of the user.\\n    /// @param _amount Amount of the deposit.\\n    function handleDepositEnd(address _user, uint256 _amount) internal virtual {\\n        totalStake = totalStake.sub(_amount);\\n        safeTokenTransfer(_user, _amount);\\n        emit Withdraw(_user, 0, _amount, now);\\n    }\\n\\n    /// @dev Safe token transfer.\\n    /// @param _to Address of the receiver.\\n    /// @param _amount Amount of the tokens to be sent.\\n    function safeTokenTransfer(address _to, uint256 _amount) internal {\\n        uint256 tokenBal = token.balanceOf(address(this));\\n        if (_amount > tokenBal) {\\n            token.transfer(_to, tokenBal);\\n        } else {\\n            token.transfer(_to, _amount);\\n        }\\n    }\\n\\n    /// @dev Returns user's unclaimed reward.\\n    /// @param _user Address of the user.\\n    /// @param _includeDeposit Should the finnished deposits be included into calculations.\\n    /// @return _reward User's reward.\\n    function getPendingReward(address _user, bool _includeDeposit)\\n        public\\n        virtual\\n        view\\n        returns (uint256 _reward)\\n    {\\n        UserInfo storage user = userInfo[_user];\\n        for (uint256 i = user.depositHead; i < user.depositTail; i++) {\\n            DepositInfo memory deposit = user.deposits[i];\\n            _reward = _reward.add(\\n                Math\\n                    .min(now, deposit.time)\\n                    .sub(user.lastUpdate)\\n                    .mul(deposit.amount)\\n                    .mul(rewardPerSec)\\n                    .div(1e18)\\n            );\\n            if (_includeDeposit && deposit.time < now) {\\n                _reward = _reward.add(deposit.amount);\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns claimed and unclaimed user's reward.\\n    /// @param _user Address of the user.\\n    /// @return _reward User's reward.\\n    function getReward(address _user)\\n        public\\n        virtual\\n        view\\n        returns (uint256 _reward)\\n    {\\n        UserInfo storage user = userInfo[_user];\\n        _reward = user.reward;\\n        for (uint256 i = user.depositHead; i < user.depositTail; i++) {\\n            DepositInfo memory deposit = user.deposits[i];\\n            _reward = _reward.add(\\n                Math\\n                    .min(now, deposit.time)\\n                    .sub(user.lastUpdate)\\n                    .mul(deposit.amount)\\n                    .mul(rewardPerSec)\\n                    .div(1e18)\\n            );\\n        }\\n    }\\n\\n    /// @dev Returns referral stakes.\\n    /// @param _referrals List of referrals[].\\n    /// @return _stakes List of referral stakes.\\n    function getReferralStakes(address[] memory _referrals)\\n        public\\n        view\\n        returns (uint256[] memory _stakes)\\n    {\\n        _stakes = new uint256[](_referrals.length);\\n        for (uint256 i = 0; i < _referrals.length; i++) {\\n            _stakes[i] = userInfo[_referrals[i]].amount;\\n        }\\n    }\\n\\n    /// @dev Returns referral stake.\\n    /// @param _referral Address of referral.\\n    /// @return Deposited amount.\\n    function getReferralStake(address _referral) public view returns (uint256) {\\n        return userInfo[_referral].amount;\\n    }\\n\\n    /// @dev Returns approximate reward assessed in the future.\\n    /// @param _delta Time to estimate.\\n    /// @return Predicted rewards.\\n    function getEstimated(uint256 _delta) public view returns (uint256) {\\n        return\\n            (now + _delta)\\n                .sub(lastUpdate)\\n                .mul(totalStake)\\n                .mul(rewardPerSec)\\n                .div(1e18);\\n    }\\n\\n    /// @dev Returns user's deposit by id.\\n    /// @param _user Address of user.\\n    /// @param _id Deposit id.\\n    /// @return Deposited amount and deposit end time.\\n    function getDeposit(address _user, uint256 _id)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        DepositInfo memory deposit = userInfo[_user].deposits[_id];\\n        return (deposit.amount, deposit.time);\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/kstasi/Documents/side/dANT/contracts/RewardsType2.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\nimport \\\"./Rewards.sol\\\";\\nimport \\\"./ReferralRewardsType2.sol\\\";\\n\\ncontract RewardsType2 is Rewards {\\n    event WithdrawRequested(\\n        address indexed user,\\n        uint256 id,\\n        uint256 amount,\\n        uint256 timelock\\n    );\\n\\n    struct Request {\\n        uint256 timelock; // Wnen the unstake can be executed\\n        uint256 amount; // Amount to be withdrawn\\n        Status status; // Request status\\n    }\\n    enum Status {NONE, PENDING, EXECUTED} // Unstake request status\\n    mapping(address => Request[]) public unstakeRequests; // Requests list per each user\\n    mapping(address => uint256) public requestHead; // The first pending unstake request in the user's requests list\\n\\n    /// @dev Constructor that initializes the most important configurations.\\n    /// @param _token Token to be staked and harvested.\\n    /// @param _referralTree Contract with referral's tree.\\n    constructor(dANT _token, ReferralTree _referralTree)\\n        public\\n        Rewards(_token, 0, 57870370370)\\n    {\\n        referralRewards = new ReferralRewardsType2(\\n            _token,\\n            _referralTree,\\n            Rewards(address(this)),\\n            [uint256(5000 * 1e18), 2000 * 1e18, 100 * 1e18],\\n            [[uint256(0), 0, 0], [uint256(0), 0, 0], [uint256(0), 0, 0]],\\n            [\\n                [uint256(6 * 1e16), 2 * 1e16, 1 * 1e16],\\n                [uint256(5 * 1e16), 15 * 1e15, 75 * 1e14],\\n                [uint256(4 * 1e16), 1 * 1e16, 5 * 1e15]\\n            ]\\n        );\\n        referralRewards.transferOwnership(_msgSender());\\n    }\\n\\n    /// @dev Allows to unstake deposit amount.\\n    /// @param _amount Amount to be unstaked.\\n    function unstake(uint256 _amount) public {\\n        updateStakingReward(msg.sender);\\n        referralRewards.claimAllDividends(msg.sender);\\n        UserInfo storage user = userInfo[msg.sender];\\n        if (_amount == 0) {\\n            _amount = user.amount;\\n        }\\n        user.amount = user.amount.sub(_amount);\\n        user.unfrozen = user.unfrozen.add(_amount);\\n        totalStake = totalStake.sub(_amount);\\n        uint256 id = unstakeRequests[msg.sender].length;\\n        unstakeRequests[msg.sender].push(\\n            Request({\\n                timelock: now + 3 days,\\n                amount: _amount,\\n                status: Status.PENDING\\n            })\\n        );\\n        referralRewards.removeDepositReward(msg.sender, _amount);\\n        emit WithdrawRequested(msg.sender, id, _amount, now + 3 days);\\n    }\\n\\n    /// @dev Accumulate new reward and remove old deposits.\\n    /// @param _user Address of the user.\\n    /// @return _reward Earned reward.\\n    function accumulateStakingReward(address _user)\\n        internal\\n        override\\n        returns (uint256)\\n    {\\n        UserInfo memory user = userInfo[_user];\\n        return now.sub(user.lastUpdate).mul(user.amount).mul(rewardPerSec);\\n    }\\n\\n    /// @dev Assess new reward.\\n    /// @param _user Address of the user.\\n    function updateStakingReward(address _user) internal override {\\n        super.updateStakingReward(_user);\\n        executeUnstakes(_user);\\n    }\\n\\n    /// @dev Executes unstake requests if timelock passed.\\n    /// @param _user Address of the user.\\n    function executeUnstakes(address _user) internal {\\n        for (\\n            uint256 requestId = requestHead[_user];\\n            requestId < unstakeRequests[_user].length;\\n            requestId++\\n        ) {\\n            Request storage request = unstakeRequests[_user][requestId];\\n            if (request.timelock < now && request.status == Status.PENDING) {\\n                request.status = Status.EXECUTED;\\n                UserInfo storage user = userInfo[_user];\\n                user.unfrozen = user.unfrozen.sub(request.amount);\\n                safeTokenTransfer(_user, request.amount);\\n                emit Withdraw(_user, requestId, request.amount, now);\\n                requestHead[_user] = requestHead[_user].add(1);\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns user's unclaimed reward.\\n    /// @param _includeDeposit Should the finnished deposits be included into calculations.\\n    /// @return _reward User's reward.\\n    function getPendingReward(address _user, bool _includeDeposit)\\n        public\\n        override\\n        view\\n        returns (uint256 _reward)\\n    {\\n        UserInfo storage user = userInfo[_user];\\n        _reward = now\\n            .sub(user.lastUpdate)\\n            .mul(user.amount)\\n            .mul(rewardPerSec)\\n            .div(1e18);\\n        if (_includeDeposit) {\\n            for (\\n                uint256 requestId = requestHead[_user];\\n                requestId < unstakeRequests[_user].length;\\n                requestId++\\n            ) {\\n                Request storage request = unstakeRequests[_user][requestId];\\n                if (\\n                    request.timelock < now && request.status == Status.PENDING\\n                ) {\\n                    _reward = _reward.add(request.amount);\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns claimed and unclaimed user's reward.\\n    /// @param _user Address of the user.\\n    /// @return _reward User's reward.\\n    function getReward(address _user)\\n        public\\n        override\\n        view\\n        returns (uint256 _reward)\\n    {\\n        UserInfo storage user = userInfo[_user];\\n        _reward = user.reward.add(\\n            now.sub(user.lastUpdate).mul(user.amount).mul(rewardPerSec).div(\\n                1e18\\n            )\\n        );\\n    }\\n\\n    // /// @dev Returns user's unstake requests length.\\n    // /// @param _user Address of the user.\\n    // /// @return Number of unstake requests.\\n    function getRequestsLength(address _user) public view returns (uint256) {\\n        return unstakeRequests[_user].length;\\n    }\\n\\n    /// @dev Returns unclaimed rewards.\\n    /// @return All unclaimed rewards.\\n    function getTotalPendingRewards() public view returns (uint256) {\\n        return now.sub(lastUpdate).mul(totalStake).mul(rewardPerSec).div(1e18);\\n    }\\n\\n    /// @dev Returns assessed rewards.\\n    /// @return All assessed rewards.\\n    function getTotalRewards() public view returns (uint256) {\\n        return\\n            totalClaimed.add(getTotalPendingRewards()).sub(totalClaimed).div(\\n                1e18\\n            );\\n    }\\n\\n    /// @dev Procces deposit and by returning deposit.\\n    function handleDepositEnd(address, uint256) internal override {}\\n}\\n\"\r\n    },\r\n    \"/Users/kstasi/Documents/side/dANT/contracts/dANT.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ncontract dANT is ERC20Burnable, AccessControl {\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n\\n    /**\\n     * @dev Grants `DEFAULT_ADMIN_ROLE` to the\\n     * account that deploys the contract.\\n     *\\n     * See {ERC20-constructor}.\\n     */\\n    constructor(uint256 initialSupply)\\n        public\\n        ERC20(\\\"Digital Antares Dollar\\\", \\\"dANT\\\")\\n        AccessControl()\\n    {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n        _mint(_msgSender(), initialSupply * 10**18);\\n    }\\n\\n    /**\\n     * @dev Set the DEFAULT_ADMIN_ROLE to `_newAdmin`.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `DEFAULT_ADMIN_ROLE`.\\n     */\\n    function changeAdmin(address _newAdmin) public {\\n        require(\\n            hasRole(DEFAULT_ADMIN_ROLE, _msgSender()),\\n            \\\"changeAdmin: bad role\\\"\\n        );\\n        _setupRole(DEFAULT_ADMIN_ROLE, _newAdmin);\\n        renounceRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Creates `_amount` new tokens for `_to`.\\n     *\\n     * See {ERC20-_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `MINTER_ROLE`.\\n     */\\n    function mint(address _to, uint256 _amount) public {\\n        require(hasRole(MINTER_ROLE, _msgSender()), \\\"mint: bad role\\\");\\n        _mint(_to, _amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../GSN/Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n\\n        _approve(account, _msgSender(), decreasedAllowance);\\n        _burn(account, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {\r\n      \"\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract dANT\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"contract ReferralTree\",\"name\":\"_referralTree\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timelock\",\"type\":\"uint256\"}],\"name\":\"WithdrawRequested\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_delta\",\"type\":\"uint256\"}],\"name\":\"getEstimated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_includeDeposit\",\"type\":\"bool\"}],\"name\":\"getPendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"}],\"name\":\"getReferralStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_referrals\",\"type\":\"address[]\"}],\"name\":\"getReferralStakes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_stakes\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getRequestsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalPendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralRewards\",\"outputs\":[{\"internalType\":\"contract ReferralRewards\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"requestHead\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerSec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"}],\"name\":\"setActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"setDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ReferralRewards\",\"name\":\"_referralRewards\",\"type\":\"address\"}],\"name\":\"setReferralRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardPerSec\",\"type\":\"uint256\"}],\"name\":\"setRewardPerSec\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_refferal\",\"type\":\"address\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract dANT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unstakeRequests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timelock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"enum RewardsType2.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unfrozen\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositHead\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositTail\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"RewardsType2","CompilerVersion":"v0.6.2+commit.bacdbe57","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000016cefe6f0b6ec966a31539ab06a58bfecfb4b22d0000000000000000000000008785ea7c0a9342198b7b09024c52f191a461f62f","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}