{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.10;\r\n\r\ncontract iInventory {\r\n    \r\n    function createFromTemplate(\r\n        uint256 _templateId,\r\n        uint8 _feature1,\r\n        uint8 _feature2,\r\n        uint8 _feature3,\r\n        uint8 _feature4,\r\n        uint8 _equipmentPosition\r\n    )\r\n        public\r\n        returns(uint256);\r\n\r\n}\r\n\r\ncontract DistributeItems is iInventory {\r\n    \r\n    modifier onlyAdmin() {\r\n        require(admin == msg.sender, \"DISTRIBUTE_ITEMS: Caller is not admin\");\r\n        _;\r\n    }\r\n    \r\n    // Check if msg.sender is allowed to take _templateId\r\n    modifier allowedItem(uint256 _templateId) {\r\n        require(allowed[msg.sender][_templateId], \"DISTRIBUTE_ITEMS: Caller is not allowed to claim item\");\r\n        _;\r\n    }\r\n    \r\n    // Check if distribution has ended (default 0 = skip this check)\r\n    modifier checkDistEndTime(uint256 _templateId) {\r\n        // if distribution end time was set...\r\n        if(distEndTime[_templateId] != 0) {\r\n            require(distEndTime[_templateId] >= now, \"DISTRIBUTE_ITEMS: Distribution for item has ended\");\r\n        }\r\n        _;\r\n    }\r\n    \r\n    // Check if hard cap reached (default 0 = skip this check)\r\n    modifier checkHardCap(uint256 _templateId) {\r\n        // If hard cap was set...\r\n        if(hardCap[_templateId] != 0) {\r\n            require(amtClaimed[_templateId] < hardCap[_templateId], \"DISTRIBUTE_ITEMS: Hard cap for item reached\");\r\n        }\r\n        _;\r\n    }\r\n    \r\n    // Check whether the player has claimed _templateId\r\n    modifier checkIfClaimed(uint256 _templateId) {\r\n        require(!claimed[_templateId][msg.sender], \"DISTRIBUTE_ITEMS: Player has already claimed item\");\r\n        _;\r\n    }\r\n    \r\n    iInventory inv = iInventory(0x9680223F7069203E361f55fEFC89B7c1A952CDcc);\r\n    \r\n    address private admin;\r\n    \r\n    // Address => (_templateId => bool)\r\n    mapping (address => mapping(uint256 => bool)) public allowed;\r\n    \r\n    // _templateId => timestamp when distribution ends (default 0 = no distribution end time)\r\n    mapping (uint256 => uint256) public distEndTime;\r\n    \r\n    // _templateId => hard cap of _templateId (default 0 = no cap)\r\n    mapping (uint256 => uint256) public hardCap;\r\n    \r\n    // _templateId => amount of times claimed \r\n    mapping (uint256 => uint256) public amtClaimed;\r\n    \r\n    // _templateId => player => has the player claimed?\r\n    mapping (uint256 => mapping(address => bool)) public claimed;\r\n\r\n    constructor() public {\r\n        admin = msg.sender;\r\n    }\r\n    \r\n    // Admin can add new item allowances\r\n    function addItemAllowance(\r\n        address _player,\r\n        uint256 _templateId,\r\n        bool _allowed\r\n    )\r\n        external\r\n        onlyAdmin\r\n    {\r\n        allowed[_player][_templateId] = _allowed;\r\n    }\r\n    \r\n    // Admin can add new item allowances in bulk \r\n    function addItemAllowanceForAll(\r\n        address[] calldata _players,\r\n        uint256 _templateId,\r\n        bool _allowed\r\n    )\r\n        external\r\n        onlyAdmin\r\n    {\r\n        for(uint i = 0; i < _players.length; i++) {\r\n            allowed[_players[i]][_templateId] = _allowed;\r\n        }\r\n    }\r\n    \r\n    /*  Admin can add items with distribution time limits \r\n        and hard cap limits */\r\n    function addTimedItem(\r\n        uint256 _templateId,\r\n        uint256 _distEndTime,\r\n        uint256 _hardCap\r\n    )\r\n        external\r\n        onlyAdmin\r\n    {\r\n        // Capped item?\r\n        if(_hardCap > 0) {\r\n            hardCap[_templateId] = _hardCap;\r\n        }\r\n        \r\n        // Has dist end time?\r\n        if(_distEndTime > now) {\r\n            distEndTime[_templateId] = _distEndTime;\r\n        }\r\n        \r\n    }\r\n    \r\n    /*  Player can claim 1x item of _templateId when \r\n        Admin has set the allowance beforehand */\r\n    function claimItem(\r\n        uint256 _templateId,\r\n        uint8 _equipmentPosition\r\n    )\r\n        external\r\n        allowedItem(_templateId)\r\n    {\r\n        // Reset allowance (only once per allowance)\r\n        allowed[msg.sender][_templateId] = false;\r\n        \r\n        // Materialize\r\n        inv.createFromTemplate(\r\n            _templateId,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            _equipmentPosition\r\n        );\r\n    }\r\n    \r\n    /*  Player can claim item drops that have \r\n        distribution time limits or hard cap limits */\r\n    function claimTimedItem(\r\n        uint256 _templateId,\r\n        uint8 _equipmentPosition\r\n    )\r\n        external\r\n        checkDistEndTime(_templateId)\r\n        checkHardCap(_templateId)\r\n        checkIfClaimed(_templateId)\r\n    {\r\n        // increment the amount claimed if hard cap was set \r\n        if(hardCap[_templateId] != 0) {\r\n            amtClaimed[_templateId]++;\r\n        }\r\n        \r\n        // only once per address \r\n        claimed[_templateId][msg.sender] = true;\r\n        \r\n        // Materialize\r\n        inv.createFromTemplate(\r\n            _templateId,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            _equipmentPosition\r\n        );\r\n    }\r\n    \r\n    function createFromTemplate(\r\n        uint256 _templateId,\r\n        uint8 _feature1,\r\n        uint8 _feature2,\r\n        uint8 _feature3,\r\n        uint8 _feature4,\r\n        uint8 _equipmentPosition\r\n    )\r\n        public\r\n        returns(uint256)\r\n    {\r\n        // (ง •̀_•́)ง\r\n    }\r\n    \r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_templateId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"addItemAllowance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_players\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_templateId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"addItemAllowanceForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_templateId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_distEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_hardCap\",\"type\":\"uint256\"}],\"name\":\"addTimedItem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"amtClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_templateId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_equipmentPosition\",\"type\":\"uint8\"}],\"name\":\"claimItem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_templateId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_equipmentPosition\",\"type\":\"uint8\"}],\"name\":\"claimTimedItem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_templateId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_feature1\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_feature2\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_feature3\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_feature4\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_equipmentPosition\",\"type\":\"uint8\"}],\"name\":\"createFromTemplate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"distEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hardCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DistributeItems","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://192d2de586fd1082c4a19ac107ba5b03069ff5fe14d072e3529af56c022aab63"}]}