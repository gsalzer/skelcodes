{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a); // dev: overflow\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a); // dev: underflow\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b); // dev: overflow\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0); // dev: divide by zero\r\n        c = a / b;\r\n    }\r\n}\r\n\r\npragma solidity 0.5.17;\r\n\r\ninterface IERC20 {\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface IGateway {\r\n    function mint(bytes32 _pHash, uint256 _amount, bytes32 _nHash, bytes calldata _sig) external returns (uint256);\r\n    function burn(bytes calldata _to, uint256 _amount) external returns (uint256);\r\n}\r\n\r\ninterface IGatewayRegistry {\r\n    function getGatewayBySymbol(string calldata _tokenSymbol) external view returns (IGateway);\r\n    function getTokenBySymbol(string calldata _tokenSymbol) external view returns (IERC20);\r\n}\r\n\r\ninterface IBTCETHOracle {\r\n    function latestRoundData() external view returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n}\r\n\r\ncontract SimpleMintAdapter {\r\n    using SafeMath for uint256;\r\n\r\n    IGatewayRegistry public registry;\r\n    IBTCETHOracle public oracle;\r\n    address admin;\r\n\r\n    constructor(IGatewayRegistry _registry, IBTCETHOracle _oracle, address _admin) public {\r\n        registry = _registry;\r\n        oracle = _oracle;\r\n        admin = _admin;\r\n    }\r\n\r\n    /// @notice Mint renBTC for a user and collect a service fee.\r\n    ///\r\n    /// @param _recipient The address to send renBTC to.\r\n    /// @param _gasFee The amount of renBTC to collect as a gas fee.\r\n    /// @param _serviceFeeRate The amount of bps to collect as a service fee.\r\n    /// @param _amount The amount of RenVM has received to the gateway address.\r\n    /// @param _nHash The nHash value returned by RenVM for this Mint.\r\n    /// @param _sig The sig value returned by RenVM for this Mint.\r\n    ///\r\n    /// @return Nothing.\r\n    function mintRenBTC(\r\n        // Parameters from users\r\n        address _recipient,\r\n        uint256 _gasFee,\r\n        uint256 _serviceFeeRate,\r\n        // Parameters from RenVM\r\n        uint256 _amount,\r\n        bytes32 _nHash,\r\n        bytes calldata _sig\r\n    ) external {\r\n        // Mint renBTC\r\n        bytes32 pHash = keccak256(abi.encode(_recipient, _gasFee, _serviceFeeRate));\r\n        uint256 mintedAmount = registry.getGatewayBySymbol(\"BTC\").mint(pHash, _amount, _nHash, _sig);\r\n\r\n        // Apply service fee\r\n        uint256 totalFeeAmount = (mintedAmount.mul(_serviceFeeRate).div(10000)).add(_gasFee);\r\n        uint256 netMintedAmount = mintedAmount.sub(totalFeeAmount);\r\n\r\n        registry.getTokenBySymbol(\"BTC\").transfer(_recipient, netMintedAmount);\r\n    }\r\n\r\n    /// @notice Mint renBTC, convert some to ETH, send both assets, collect a service fee.\r\n    ///\r\n    /// @param _ethAmount Amount of ETH to swap for.\r\n    /// @param _recipient The address to send renBTC to.\r\n    /// @param _gasFee The amount of renBTC to collect as a gas fee.\r\n    /// @param _serviceFeeRate The amount of bps to collect as a service fee.\r\n    /// @param _amount The amount of RenVM has received to the gateway address.\r\n    /// @param _nHash The nHash value returned by RenVM for this Mint.\r\n    /// @param _sig The sig value returned by RenVM for this Mint.\r\n    ///\r\n    /// @return Nothing.\r\n    function mintRenBTCSendEth(\r\n        // Parameters from users\r\n        uint256 _ethAmount,\r\n        address payable _recipient,\r\n        uint256 _gasFee,\r\n        uint256 _serviceFeeRate,\r\n        // Parameters from RenVM\r\n        uint256 _amount,\r\n        bytes32 _nHash,\r\n        bytes calldata _sig\r\n    ) external {\r\n        // Mint renBTC\r\n        bytes32 pHash = keccak256(abi.encode(_recipient, _gasFee, _serviceFeeRate));\r\n        uint256 mintedAmount = registry.getGatewayBySymbol(\"BTC\").mint(pHash, _amount, _nHash, _sig);\r\n\r\n        // Apply service fee\r\n        uint256 totalFeeAmount = (mintedAmount.mul(_serviceFeeRate).div(10000)).add(_gasFee);\r\n        uint256 netMintedAmount = mintedAmount.sub(totalFeeAmount);\r\n\r\n        // Calculate swap price using Chainlink's BTC/ETH oracle\r\n        (, int256 answer, , , ) = oracle.latestRoundData();\r\n        uint256 ethBtcCost = _ethAmount.div(uint256(answer));\r\n\r\n        // Valid swap amount and enough ETH balance\r\n        if (ethBtcCost < netMintedAmount && _ethAmount <= address(this).balance) {\r\n            registry.getTokenBySymbol(\"BTC\").transfer(_recipient, netMintedAmount.sub(ethBtcCost));\r\n            _recipient.transfer(_ethAmount);\r\n        // Invalid swap amount or not enough ETH in contract. Default to just renBTC\r\n        } else {\r\n            registry.getTokenBySymbol(\"BTC\").transfer(_recipient, netMintedAmount);\r\n        }\r\n    }\r\n\r\n    /// @notice Burn renBTC and transfer BTC to a BTC address.\r\n    ///\r\n    /// @param _amount The amount to burn.\r\n    /// @param _dest The address to send BTC.\r\n    ///\r\n    /// @return Nothing.\r\n    function burnRenBTC(uint256 _amount, bytes calldata _dest) external {\r\n\r\n        // Transfer tokens from user to contract\r\n        registry.getTokenBySymbol(\"BTC\").transferFrom(msg.sender, address(this), _amount);\r\n\r\n        // Apply service fee\r\n        uint256 _serviceFeeRate = 10;\r\n        uint256 totalFeeAmount = _amount.mul(_serviceFeeRate).div(10000);\r\n        uint256 netBurnedAmount = _amount.sub(totalFeeAmount);\r\n\r\n        registry.getGatewayBySymbol(\"BTC\").burn(_dest, netBurnedAmount);\r\n    }\r\n\r\n    /// @notice Withdraw Ether left in the contract.\r\n    ///\r\n    /// @param _amount The amount to withdraw.\r\n    /// @param _dest The address to send withdrawn tokens.\r\n    ///\r\n    /// @return Nothing.\r\n    function withdrawEther(uint256 _amount, address payable _dest) external {\r\n        require(msg.sender == admin);\r\n        _dest.transfer(_amount);\r\n    }\r\n\r\n    /// @notice Withdraw tokens (renBTC) left in the contract.\r\n    ///\r\n    /// @param _token The address of the token to withdraw.\r\n    /// @param _amount The amount to withdraw.\r\n    /// @param _dest The address to send withdrawn tokens.\r\n    ///\r\n    /// @return Nothing.\r\n    function withdrawToken(address _token, uint256 _amount, address _dest) external {\r\n        require(msg.sender == admin);\r\n        IERC20(_token).transfer(_dest, _amount);\r\n    }\r\n\r\n    /// @notice Set an address as the admin.\r\n    ///\r\n    /// @param _newAdmin The address of the token to withdraw.\r\n    ///\r\n    /// @return Nothing.\r\n    function changeAdmin(address _newAdmin) external {\r\n        require(msg.sender == admin);\r\n        admin = _newAdmin;\r\n    }\r\n\r\n    /// @notice Fallback address\r\n    function() external payable {\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IGatewayRegistry\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"contract IBTCETHOracle\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_dest\",\"type\":\"bytes\"}],\"name\":\"burnRenBTC\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_gasFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_serviceFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_nHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_sig\",\"type\":\"bytes\"}],\"name\":\"mintRenBTC\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ethAmount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_gasFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_serviceFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_nHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_sig\",\"type\":\"bytes\"}],\"name\":\"mintRenBTCSendEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract IBTCETHOracle\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract IGatewayRegistry\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_dest\",\"type\":\"address\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_dest\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SimpleMintAdapter","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000e80d347df1209a76dd9d2319d62912ba98c54ddd000000000000000000000000deb288f737066589598e9214e782fa5a8ed689e800000000000000000000000016a81ee48180eb27f91b3d618cabd603e6d3b7ad","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://b1114ef952bde8a71e6ddc57b268ac1d4b4eceb239a6e0b361ebecca4cd0e99f"}]}