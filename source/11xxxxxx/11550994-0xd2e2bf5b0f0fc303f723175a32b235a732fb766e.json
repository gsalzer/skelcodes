{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.6.12;\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n   \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n  \r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n  \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract StakingPRY{\r\n    using SafeMath for uint256;\r\n    address public token;\r\n    address public owner;\r\n    bool public staking = true;\r\n    \r\n    uint256 public oneMonthTime = 2592000;\r\n    \r\n    uint256 public timeforunstaking;\r\n\r\n    mapping(address => uint256) public users;\r\n    uint256 public totaltokenstaked;\r\n    \r\n    constructor(address _token) public{\r\n        token = _token;\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    \r\n    function totalSupplyOfTokens() public view returns(uint256){\r\n        return IERC20(token).balanceOf(address(this));\r\n    }\r\n    \r\n    function readtimeleft() public view returns(uint256){\r\n        if(now > timeforunstaking){\r\n            return 0;\r\n        }else{\r\n           return timeforunstaking.sub(now);\r\n        }\r\n     \r\n    }\r\n    \r\n    function lockToken(uint256 _amount) isStakingOn() public{\r\n        require(_amount >= 1000e18,'you are inputting amount less than 1000 tokens');\r\n        require(_amount.add(users[msg.sender]) <= 300000e18,'single user cannot invest more than 300k PRY');\r\n        IERC20(token).transferFrom(msg.sender,address(this),_amount);\r\n        users[msg.sender] = users[msg.sender].add(_amount);\r\n        totaltokenstaked =  totaltokenstaked.add(_amount);\r\n    }    \r\n    \r\n    function unlockTokens() isStakingOff() public returns(uint256){\r\n        address useraddr = msg.sender;\r\n        require(users[useraddr] >= 0);\r\n        \r\n        if(now > timeforunstaking){\r\n        IERC20(token).transfer(msg.sender,users[useraddr].add(users[useraddr].mul(20).div(100)));\r\n        totaltokenstaked = totaltokenstaked.sub(users[useraddr]);\r\n        users[useraddr] = 0;\r\n        return 1;\r\n        }\r\n        if(timeforunstaking.sub(now) > 2*oneMonthTime){\r\n \r\n        IERC20(token).transfer(msg.sender,users[useraddr]);\r\n        totaltokenstaked = totaltokenstaked.sub(users[useraddr]);\r\n        users[useraddr] = 0;\r\n        return 1;\r\n        }\r\n        if(timeforunstaking.sub(now) > oneMonthTime && timeforunstaking.sub(now) <= 2*oneMonthTime){\r\n        uint amount = users[useraddr].mul(20).mul(25).div(100).div(100);\r\n        IERC20(token).transfer(msg.sender,users[useraddr].add(amount));\r\n        totaltokenstaked = totaltokenstaked.sub(users[useraddr]);\r\n        users[useraddr] = 0;\r\n        return 1;\r\n        }\r\n        if(timeforunstaking.sub(now) <= oneMonthTime && timeforunstaking.sub(now) > 0){\r\n        uint amount = users[useraddr].mul(20).mul(50).div(100).div(100);\r\n        IERC20(token).transfer(msg.sender,users[useraddr].add(amount));\r\n        totaltokenstaked = totaltokenstaked.sub(users[useraddr]);\r\n        users[useraddr] = 0;\r\n        return 1;\r\n        }  \r\n    }\r\n    \r\n    function turnOnStaking() onlyOwner() public{\r\n        require(now > timeforunstaking,'the time of unstaking has not finished');\r\n        staking = true;\r\n        timeforunstaking = 0;\r\n    }\r\n    \r\n    function turnOffStaking() onlyOwner() public{\r\n        require(now > timeforunstaking,'the time of unstaking has not finished');\r\n        staking = false;\r\n        timeforunstaking = now.add(3*oneMonthTime);\r\n    }\r\n    \r\n    modifier isStakingOn(){\r\n        require(staking == true,'staking period is off');\r\n        _;\r\n    }\r\n        \r\n    modifier isStakingOff(){\r\n        require(staking == false,'staking period is on');\r\n        _;\r\n    }\r\n        \r\n    modifier onlyOwner(){\r\n      require(msg.sender == owner,'you are not admin');\r\n      _;\r\n    }\r\n    \r\n    function adminTokenTransfer() external onlyOwner{\r\n        require(totalSupplyOfTokens() > 0,'the contract has no pry tokens');\r\n        IERC20(token).transfer(msg.sender,IERC20(token).balanceOf(address(this)));\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"adminTokenTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"lockToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oneMonthTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readtimeleft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeforunstaking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupplyOfTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totaltokenstaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"turnOffStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"turnOnStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"StakingPRY","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000003c81d482172cc273c3b91dd9d8eb212023d00521","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://167f16b4ccadf46cca5c4f10c2ed3e8b02242a47142a185979d90013e0c7fd82"}]}