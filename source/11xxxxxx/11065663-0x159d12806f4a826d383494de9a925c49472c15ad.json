{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\ncontract SmartWeddingContract {\r\n  event WrittenContractProposed(uint timestamp, string ipfsHash, address wallet);\r\n  event Signed(uint timestamp, address wallet);\r\n  event ContractSigned(uint timestamp);\r\n  event DivorceApproved(uint timestamp, address wallet);\r\n  event Divorced(uint timestamp);\r\n  event FundsSent(uint timestamp, address wallet, uint amount);\r\n  event FundsReceived(uint timestamp, address wallet, uint amount);\r\n  event WeddingCreated(uint timestamp, address husbandAddress, string husbandFullName, address wifeAddress, string wifeFullName, string weddingDate);\r\n\r\n  bool public signed = false;\r\n  bool public divorced = false;\r\n\r\n  mapping (address => bool) private hasSigned;\r\n  mapping (address => bool) private hasDivorced;\r\n\r\n  address public husbandAddress;\r\n  string public husbandFullName;\r\n  \r\n  address public wifeAddress;\r\n  string public wifeFullName;\r\n  \r\n  string public weddingDate;\r\n  string public writtenContractIpfsHash;\r\n\r\n\r\n\r\n  /**\r\n   * @dev Modifier that only allows spouse execution.\r\n    */\r\n  modifier onlySpouse() {\r\n    require(msg.sender == husbandAddress || msg.sender == wifeAddress, \"Sender is not a spouse!\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier that checks if the contract has been signed by both spouses.\r\n    */\r\n  modifier isSigned() {\r\n    require(signed == true, \"Contract has not been signed by both spouses yet!\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier that only allows execution if the spouses have not been divorced.\r\n    */\r\n  modifier isNotDivorced() {\r\n    require(divorced == false, \"Can not be called after spouses agreed to divorce!\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Private helper function to check if a string is not equal to another.\r\n   */\r\n  function isNotSameString(string memory string1, string memory string2) private pure returns (bool) {\r\n    return keccak256(abi.encodePacked(string1)) != keccak256(abi.encodePacked(string2));\r\n  }\r\n\r\n  /**\r\n   * @dev Constructor: Set the wallet addresses of both spouses.\r\n   * @param _husbandAddress Wallet address of the husband.\r\n   * @param _wifeAddress Wallet address of the wife.\r\n   */\r\n  constructor(address _husbandAddress, string _husbandFullName, address _wifeAddress, string _wifeFullName, string _weddingDate) public {\r\n    require(_husbandAddress != address(0), \"Husband address must not be zero!\");\r\n    require(_wifeAddress != address(0), \"Wife address must not be zero!\");\r\n    require(_husbandAddress != _wifeAddress, \"Husband address must not equal wife address!\");\r\n\r\n    husbandAddress = _husbandAddress;\r\n    husbandFullName = _husbandFullName;\r\n    wifeAddress = _wifeAddress;\r\n    wifeFullName = _wifeFullName;\r\n    weddingDate = _weddingDate;\r\n    emit WeddingCreated(now, _husbandAddress, _husbandFullName, _wifeAddress, _wifeFullName, _weddingDate);\r\n  }\r\n\r\n  /**\r\n   * @dev Default function to enable the contract to receive funds.\r\n    */\r\n  function() external payable isSigned isNotDivorced {\r\n    emit FundsReceived(now, msg.sender, msg.value);\r\n  }\r\n\r\n  /**\r\n   * @dev Propose a written contract (update).\r\n   * @param _writtenContractIpfsHash IPFS hash of the written contract PDF.\r\n   */\r\n  function proposeWrittenContract(string _writtenContractIpfsHash) external onlySpouse isNotDivorced {\r\n    require(signed == false, \"Written contract ipfs hash can not be changed. Both spouses have already signed it!\");\r\n\r\n    // Update written contract ipfs hash\r\n    writtenContractIpfsHash = _writtenContractIpfsHash;\r\n\r\n    emit WrittenContractProposed(now, _writtenContractIpfsHash, msg.sender);\r\n\r\n    // Revoke previous signatures\r\n    if (hasSigned[husbandAddress] == true) {\r\n      hasSigned[husbandAddress] = false;\r\n    }\r\n    if (hasSigned[wifeAddress] == true) {\r\n      hasSigned[wifeAddress] = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Sign the contract.\r\n   */\r\n  function signContract() external onlySpouse {\r\n    require(isNotSameString(writtenContractIpfsHash, \"\"), \"Written contract ipfs hash has been proposed yet!\");\r\n    require(hasSigned[msg.sender] == false, \"Spouse has already signed the contract!\");\r\n\r\n    // Sender signed\r\n    hasSigned[msg.sender] = true;\r\n\r\n    emit Signed(now, msg.sender);\r\n\r\n    // Check if both spouses have signed\r\n    if (hasSigned[husbandAddress] && hasSigned[wifeAddress]) {\r\n      signed = true;\r\n      emit ContractSigned(now);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Send ETH to a target address.\r\n   * @param _to Destination wallet address.\r\n   * @param _amount Amount of ETH to send.\r\n   */\r\n  function pay(address _to, uint _amount) external onlySpouse isSigned isNotDivorced {\r\n    require(_to != address(0), \"Sending funds to address zero is prohibited!\");\r\n    require(_amount <= address(this).balance, \"Not enough balance available!\");\r\n\r\n    // Send funds to the destination address\r\n    _to.transfer(_amount);\r\n\r\n    emit FundsSent(now, _to, _amount);\r\n  }\r\n\r\n \r\n\r\n  /**\r\n   * @dev Request to divorce. The other spouse needs to approve this action.\r\n   */\r\n  function divorce() external onlySpouse isSigned isNotDivorced {\r\n    require(hasDivorced[msg.sender] == false, \"Sender has already approved to divorce!\");\r\n\r\n    // Sender approved\r\n    hasDivorced[msg.sender] = true;\r\n\r\n    emit DivorceApproved(now, msg.sender);\r\n\r\n    // Check if both spouses have approved to divorce\r\n    if (hasDivorced[husbandAddress] && hasDivorced[wifeAddress]) {\r\n      divorced = true;\r\n      emit Divorced(now);\r\n\r\n      // Get the contracts balance\r\n      uint balance = address(this).balance;\r\n\r\n      // Split the remaining balance half-half\r\n      if (balance != 0) {\r\n        // Ignore any remainder due to low value\r\n        uint balancePerSpouse = balance / 2;\r\n\r\n        // Send transfer to the husband\r\n        husbandAddress.transfer(balancePerSpouse);\r\n        emit FundsSent(now, husbandAddress, balancePerSpouse);\r\n\r\n        // Send transfer to the wife\r\n        wifeAddress.transfer(balancePerSpouse);\r\n        emit FundsSent(now, wifeAddress, balancePerSpouse);\r\n      }\r\n    }\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_writtenContractIpfsHash\",\"type\":\"string\"}],\"name\":\"proposeWrittenContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"husbandAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"signed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"husbandFullName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"divorced\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"writtenContractIpfsHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wifeAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weddingDate\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"signContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"pay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wifeFullName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"divorce\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_husbandAddress\",\"type\":\"address\"},{\"name\":\"_husbandFullName\",\"type\":\"string\"},{\"name\":\"_wifeAddress\",\"type\":\"address\"},{\"name\":\"_wifeFullName\",\"type\":\"string\"},{\"name\":\"_weddingDate\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ipfsHash\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"WrittenContractProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"Signed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ContractSigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"DivorceApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Divorced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"husbandAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"husbandFullName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"wifeAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"wifeFullName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"weddingDate\",\"type\":\"string\"}],\"name\":\"WeddingCreated\",\"type\":\"event\"}]","ContractName":"SmartWeddingContract","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000029f72737186f5ca471990ca0fa427e19e6d1806b00000000000000000000000000000000000000000000000000000000000000a00000000000000000000000008e5faf4a0327877975405f0f0d780e2294a37ab400000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000194a6163656b20416c656b73616e646572204a616e637a7572610000000000000000000000000000000000000000000000000000000000000000000000000000174d617274796e61204a6f616e6e6120526166616c736b61000000000000000000000000000000000000000000000000000000000000000000000000000000000831362e31302e3230000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://594931597595d3b0adec8bdb8774659fb48d72d28afb87eec56efd667a8e1b3b"}]}