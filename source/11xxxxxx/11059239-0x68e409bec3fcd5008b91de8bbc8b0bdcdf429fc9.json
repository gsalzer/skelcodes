{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IStrategyV2 {\r\n    function approve(IERC20 _token) external;\r\n\r\n    function approveForSpender(IERC20 _token, address spender) external;\r\n\r\n    // Deposit tokens to a farm to yield more tokens.\r\n    function deposit(uint256 _poolId, uint256 _amount) external;\r\n\r\n    // Claim farming tokens\r\n    function claim(uint256 _poolId) external;\r\n\r\n    // The vault request to harvest the profit\r\n    function harvest(uint256 _bankPoolId, uint256 _poolId) external;\r\n\r\n    // Withdraw the principal from a farm.\r\n    function withdraw(uint256 _poolId, uint256 _amount) external;\r\n\r\n    // Set 0 to disable quota (no limit)\r\n    function poolQuota(uint256 _poolId) external view returns (uint256);\r\n\r\n    // Use when we want to switch between strategies\r\n    function forwardToAnotherStrategy(address _dest, uint256 _amount) external returns (uint256);\r\n\r\n    // Source LP token of this strategy\r\n    function getLpToken() external view returns(address);\r\n\r\n    // Target farming token of this strategy by vault\r\n    function getTargetToken(uint256 _poolId) external view returns(address);\r\n\r\n    function balanceOf(uint256 _poolId) external view returns (uint256);\r\n\r\n    function pendingReward(uint256 _poolId) external view returns (uint256);\r\n\r\n    // Helper function, Should never use it on-chain.\r\n    // Return 1e18x of APY. _lpPairUsdcPrice = current lpPair price (1-wei in USDC-wei) multiple by 1e18\r\n    function expectedAPY(uint256 _poolId, uint256 _lpPairUsdcPrice) external view returns (uint256);\r\n\r\n    function governanceRescueToken(IERC20 _token) external returns (uint256);\r\n}\r\n\r\n/*\r\n * Here we have a list of constants. In order to get access to an address\r\n * managed by ValueVaultMaster, the calling contract should copy and define\r\n * some of these constants and use them as keys.\r\n * Keys themselves are immutable. Addresses can be immutable or mutable.\r\n *\r\n * Vault addresses are immutable once set, and the list may grow:\r\n * K_VAULT_WETH = 0;\r\n * K_VAULT_ETH_USDC_UNI_V2_LP = 1;\r\n * K_VAULT_ETH_WBTC_UNI_V2_LP = 2;\r\n *\r\n * Strategy addresses are mutable:\r\n * K_STRATEGY_WETH_SODA_POOL = 0;\r\n * K_STRATEGY_WETH_MULTI_POOL = 1;\r\n * K_STRATEGY_ETHUSDC_MULTIPOOL = 100;\r\n * K_STRATEGY_ETHWBTC_MULTIPOOL = 200;\r\n */\r\n/*\r\n * ValueVaultMaster manages all the vaults and strategies of our Value Vaults system.\r\n */\r\ncontract ValueVaultMaster {\r\n    address public governance;\r\n\r\n    address public bank;\r\n    address public minorPool;\r\n    address public profitSharer;\r\n\r\n    address public govToken; // VALUE\r\n    address public yfv; // When harvesting, convert some parts to YFV for govVault\r\n    address public usdc; // we only used USDC to estimate APY\r\n\r\n    address public govVault; // YFV -> VALUE, vUSD, vETH and 6.7% profit from Value Vaults\r\n    address public insuranceFund = 0xb7b2Ea8A1198368f950834875047aA7294A2bDAa; // set to Governance Multisig at start\r\n    address public performanceReward = 0x7Be4D5A99c903C437EC77A20CB6d0688cBB73c7f; // set to deploy wallet at start\r\n\r\n    uint256 public constant FEE_DENOMINATOR = 10000;\r\n    uint256 public govVaultProfitShareFee = 670; // 6.7% | VIP-1 (https://yfv.finance/vip-vote/vip_1)\r\n    uint256 public gasFee = 50; // 0.5% at start and can be set by governance decision\r\n\r\n    uint256 public minStakeTimeToClaimVaultReward = 24 hours;\r\n\r\n    mapping(address => bool) public isVault;\r\n    mapping(uint256 => address) public vaultByKey;\r\n\r\n    mapping(address => bool) public isStrategy;\r\n    mapping(uint256 => address) public strategyByKey;\r\n    mapping(address => uint256) public strategyQuota;\r\n\r\n    constructor(address _govToken, address _yfv, address _usdc) public {\r\n        govToken = _govToken;\r\n        yfv = _yfv;\r\n        usdc = _usdc;\r\n        governance = tx.origin;\r\n    }\r\n\r\n    function setGovernance(address _governance) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        governance = _governance;\r\n    }\r\n\r\n    // Immutable once set.\r\n    function setBank(address _bank) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        require(bank == address(0));\r\n        bank = _bank;\r\n    }\r\n\r\n    // Mutable in case we want to upgrade the pool.\r\n    function setMinorPool(address _minorPool) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        minorPool = _minorPool;\r\n    }\r\n\r\n    // Mutable in case we want to upgrade this module.\r\n    function setProfitSharer(address _profitSharer) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        profitSharer = _profitSharer;\r\n    }\r\n\r\n    // Mutable, in case governance want to upgrade VALUE to new version\r\n    function setGovToken(address _govToken) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        govToken = _govToken;\r\n    }\r\n\r\n    // Immutable once added, and you can always add more.\r\n    function addVault(uint256 _key, address _vault) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        require(vaultByKey[_key] == address(0), \"vault: key is taken\");\r\n\r\n        isVault[_vault] = true;\r\n        vaultByKey[_key] = _vault;\r\n    }\r\n\r\n    // Mutable and removable.\r\n    function addStrategy(uint256 _key, address _strategy) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        isStrategy[_strategy] = true;\r\n        strategyByKey[_key] = _strategy;\r\n    }\r\n\r\n    // Set 0 to disable quota (no limit)\r\n    function setStrategyQuota(address _strategy, uint256 _quota) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        strategyQuota[_strategy] = _quota;\r\n    }\r\n\r\n    function removeStrategy(uint256 _key) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        isStrategy[strategyByKey[_key]] = false;\r\n        delete strategyByKey[_key];\r\n    }\r\n\r\n    function setGovVault(address _govVault) public {\r\n        require(msg.sender == governance, \"!governance\");\r\n        govVault = _govVault;\r\n    }\r\n\r\n    function setInsuranceFund(address _insuranceFund) public {\r\n        require(msg.sender == governance, \"!governance\");\r\n        insuranceFund = _insuranceFund;\r\n    }\r\n\r\n    function setPerformanceReward(address _performanceReward) public{\r\n        require(msg.sender == governance, \"!governance\");\r\n        performanceReward = _performanceReward;\r\n    }\r\n\r\n    function setGovVaultProfitShareFee(uint256 _govVaultProfitShareFee) public {\r\n        require(msg.sender == governance, \"!governance\");\r\n        govVaultProfitShareFee = _govVaultProfitShareFee;\r\n    }\r\n\r\n    function setGasFee(uint256 _gasFee) public {\r\n        require(msg.sender == governance, \"!governance\");\r\n        gasFee = _gasFee;\r\n    }\r\n\r\n    function setMinStakeTimeToClaimVaultReward(uint256 _minStakeTimeToClaimVaultReward) public {\r\n        require(msg.sender == governance, \"!governance\");\r\n        minStakeTimeToClaimVaultReward = _minStakeTimeToClaimVaultReward;\r\n    }\r\n\r\n    /**\r\n     * This function allows governance to take unsupported tokens out of the contract.\r\n     * This is in an effort to make someone whole, should they seriously mess up.\r\n     * There is no guarantee governance will vote to return these.\r\n     * It also allows for removal of airdropped tokens.\r\n     */\r\n    function governanceRecoverUnsupported(IERC20x _token, uint256 amount, address to) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        _token.transfer(to, amount);\r\n    }\r\n}\r\n\r\ninterface IERC20x {\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface IOneSplit {\r\n    function getExpectedReturn(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags // See constants in IOneSplit.sol\r\n    ) external view returns(\r\n        uint256 returnAmount,\r\n        uint256[] memory distribution\r\n    );\r\n}\r\n\r\ninterface IUniswapRouter {\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n}\r\n\r\ninterface IValueLiquidPool {\r\n    function swapExactAmountIn(address, uint, address, uint, uint) external returns (uint, uint);\r\n    function swapExactAmountOut(address, uint, address, uint, uint) external returns (uint, uint);\r\n    function calcInGivenOut(uint, uint, uint, uint, uint, uint) external pure returns (uint);\r\n    function calcOutGivenIn(uint, uint, uint, uint, uint, uint) external pure returns (uint);\r\n    function getDenormalizedWeight(address) external view returns (uint);\r\n    function getBalance(address) external view returns (uint);\r\n    function swapFee() external view returns (uint);\r\n}\r\n\r\ninterface IStakingRewards {\r\n    function lastTimeRewardApplicable() external view returns (uint256);\r\n    function rewardPerToken() external view returns (uint256);\r\n    function rewardRate() external view returns (uint256);\r\n    function earned(address account) external view returns (uint256);\r\n    function getRewardForDuration() external view returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function stake(uint256 amount) external;\r\n    function withdraw(uint256 amount) external;\r\n    function getReward() external;\r\n    function exit() external;\r\n}\r\n\r\ninterface ISushiPool {\r\n    function deposit(uint256 _poolId, uint256 _amount) external;\r\n    function claim(uint256 _poolId) external;\r\n    function withdraw(uint256 _poolId, uint256 _amount) external;\r\n    function emergencyWithdraw(uint256 _poolId) external;\r\n}\r\n\r\ninterface IProfitSharer {\r\n    function shareProfit() external returns (uint256);\r\n}\r\n\r\ninterface IValueVaultBank {\r\n    function make_profit(uint256 _poolId, uint256 _amount) external;\r\n}\r\n\r\n// Deposit UNIv2ETHWBTC to a standard StakingRewards pool (eg. UNI Pool - https://app.uniswap.org/#/uni)\r\n// Wait for Vault commands: deposit, withdraw, claim, harvest (can be called by public via Vault)\r\ncontract Univ2ETHWBTCMultiPoolStrategy is IStrategyV2 {\r\n    using SafeMath for uint256;\r\n\r\n    address public strategist;\r\n    address public governance;\r\n\r\n    uint256 public constant FEE_DENOMINATOR = 10000;\r\n\r\n    IERC20 public weth = IERC20(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n    IOneSplit public onesplit = IOneSplit(0x50FDA034C0Ce7a8f7EFDAebDA7Aa7cA21CC1267e);\r\n    IUniswapRouter public unirouter = IUniswapRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n\r\n    ValueVaultMaster public valueVaultMaster;\r\n    IERC20 public lpPair; // ETHWBTC_UNIv2\r\n    IERC20 public lpPairTokenA; // WBTC\r\n    IERC20 public lpPairTokenB; // For this contract it will be always be WETH\r\n\r\n    mapping(address => mapping(address => address[])) public uniswapPaths; // [input -> output] => uniswap_path\r\n    mapping(address => mapping(address => address)) public valueLiquidPools; // [input -> output] => value_liquid_pool\r\n\r\n    struct PoolInfo {\r\n        address vault;\r\n        IERC20 targetToken;\r\n        address targetPool;\r\n        uint256 targetPoolId; // poolId in soda/chicken pool (no use for IStakingRewards pool eg. golff.finance)\r\n        uint256 minHarvestForTakeProfit;\r\n        uint8 poolType; // 0: IStakingRewards, 1: ISushiPool, 2: ISodaPool\r\n        uint256 poolQuota; // set 0 to disable quota (no limit)\r\n        uint256 balance;\r\n    }\r\n\r\n    mapping(uint256 => PoolInfo) public poolMap; // poolIndex -> poolInfo\r\n    uint256 public totalBalance;\r\n\r\n    bool public aggressiveMode; // will try to stake all lpPair tokens available (be forwarded from bank or from another strategies)\r\n\r\n    uint8[] public poolPreferredIds; // sorted by preference\r\n\r\n    // lpPair: ETHWBTC_UNIv2 = 0xbb2b8038a1640196fbe3e38816f3e67cba72d940\r\n    // lpPairTokenA: WBTC = 0x2260fac5e5542a773aa44fbcfedf7c193bc2c599\r\n    // lpPairTokenB: WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\r\n    constructor(ValueVaultMaster _valueVaultMaster,\r\n                IERC20 _lpPair,\r\n                IERC20 _lpPairTokenA,\r\n                IERC20 _lpPairTokenB,\r\n                bool _aggressiveMode) public {\r\n        valueVaultMaster = _valueVaultMaster;\r\n        lpPair = _lpPair;\r\n        lpPairTokenA = _lpPairTokenA;\r\n        lpPairTokenB = _lpPairTokenB;\r\n        aggressiveMode = _aggressiveMode;\r\n        governance = tx.origin;\r\n        strategist = tx.origin;\r\n        // Approve all\r\n        lpPair.approve(valueVaultMaster.bank(), type(uint256).max);\r\n        lpPairTokenA.approve(address(unirouter), type(uint256).max);\r\n        lpPairTokenB.approve(address(unirouter), type(uint256).max);\r\n    }\r\n\r\n    // targetToken: uniToken = 0x1f9840a85d5af5bf1d1762f925bdaddc4201f984\r\n    // targetPool: ETHWBTCUniPool = 0xCA35e32e7926b96A9988f61d510E038108d8068e\r\n    // targetPool: MasterVampire[34] = 0xD12d68Fd52b54908547ebC2Cd77Ec6EbbEfd3099\r\n    function setPoolInfo(uint256 _poolId, address _vault, IERC20 _targetToken, address _targetPool, uint256 _targetPoolId, uint256 _minHarvestForTakeProfit, uint8 _poolType, uint256 _poolQuota) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        poolMap[_poolId].vault = _vault;\r\n        poolMap[_poolId].targetToken = _targetToken;\r\n        poolMap[_poolId].targetPool = _targetPool;\r\n        poolMap[_poolId].targetPoolId = _targetPoolId;\r\n        poolMap[_poolId].minHarvestForTakeProfit = _minHarvestForTakeProfit;\r\n        poolMap[_poolId].poolType = _poolType;\r\n        poolMap[_poolId].poolQuota = _poolQuota;\r\n        _targetToken.approve(address(unirouter), type(uint256).max);\r\n        lpPair.approve(_vault, type(uint256).max);\r\n        lpPair.approve(address(_targetPool), type(uint256).max);\r\n    }\r\n\r\n    function approve(IERC20 _token) external override {\r\n        require(msg.sender == governance, \"!governance\");\r\n        _token.approve(valueVaultMaster.bank(), type(uint256).max);\r\n        _token.approve(address(unirouter), type(uint256).max);\r\n    }\r\n\r\n    function approveForSpender(IERC20 _token, address spender) external override {\r\n        require(msg.sender == governance, \"!governance\");\r\n        _token.approve(spender, type(uint256).max);\r\n    }\r\n\r\n    function setGovernance(address _governance) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        governance = _governance;\r\n    }\r\n\r\n    function setStrategist(address _strategist) external {\r\n        require(msg.sender == governance || msg.sender == strategist, \"!governance && !strategist\");\r\n        strategist = _strategist;\r\n    }\r\n\r\n    function setPoolPreferredIds(uint8[] memory _poolPreferredIds) public {\r\n        require(msg.sender == governance || msg.sender == strategist, \"!governance && !strategist\");\r\n        delete poolPreferredIds;\r\n        for (uint8 i = 0; i < _poolPreferredIds.length; ++i) {\r\n            poolPreferredIds.push(_poolPreferredIds[i]);\r\n        }\r\n    }\r\n\r\n    function setMinHarvestForTakeProfit(uint256 _poolId, uint256 _minHarvestForTakeProfit) external {\r\n        require(msg.sender == governance || msg.sender == strategist, \"!governance && !strategist\");\r\n        poolMap[_poolId].minHarvestForTakeProfit = _minHarvestForTakeProfit;\r\n    }\r\n\r\n    function setPoolQuota(uint256 _poolId, uint256 _poolQuota) external {\r\n        require(msg.sender == governance || msg.sender == strategist, \"!governance && !strategist\");\r\n        poolMap[_poolId].poolQuota = _poolQuota;\r\n    }\r\n\r\n    // Sometime the balance could be slightly changed (due to the pool, or because we call xxxByGov methods)\r\n    function setPoolBalance(uint256 _poolId, uint256 _balance) external {\r\n        require(msg.sender == governance || msg.sender == strategist, \"!governance && !strategist\");\r\n        poolMap[_poolId].balance = _balance;\r\n    }\r\n\r\n    function setTotalBalance(uint256 _totalBalance) external {\r\n        require(msg.sender == governance || msg.sender == strategist, \"!governance && !strategist\");\r\n        totalBalance = _totalBalance;\r\n    }\r\n\r\n    function setAggressiveMode(bool _aggressiveMode) external {\r\n        require(msg.sender == governance || msg.sender == strategist, \"!governance && !strategist\");\r\n        aggressiveMode = _aggressiveMode;\r\n    }\r\n\r\n    function setWETH(IERC20 _weth) external {\r\n        require(msg.sender == governance || msg.sender == strategist, \"!governance && !strategist\");\r\n        weth = _weth;\r\n    }\r\n\r\n    function setOnesplit(IOneSplit _onesplit) external {\r\n        require(msg.sender == governance || msg.sender == strategist, \"!governance && !strategist\");\r\n        onesplit = _onesplit;\r\n    }\r\n\r\n    function setUnirouter(IUniswapRouter _unirouter) external {\r\n        require(msg.sender == governance || msg.sender == strategist, \"!governance && !strategist\");\r\n        unirouter = _unirouter;\r\n        lpPairTokenA.approve(address(unirouter), type(uint256).max);\r\n        lpPairTokenB.approve(address(unirouter), type(uint256).max);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IStrategyV2-deposit}.\r\n     */\r\n    function deposit(uint256 _poolId, uint256 _amount) public override {\r\n        PoolInfo storage pool = poolMap[_poolId];\r\n        require(pool.vault == msg.sender, \"sender not vault\");\r\n        if (aggressiveMode) {\r\n            _amount = lpPair.balanceOf(address(this));\r\n        }\r\n        if (pool.poolType == 0) {\r\n            IStakingRewards(pool.targetPool).stake(_amount);\r\n        } else {\r\n            ISushiPool(pool.targetPool).deposit(pool.targetPoolId, _amount);\r\n        }\r\n        pool.balance = pool.balance.add(_amount);\r\n        totalBalance = totalBalance.add(_amount);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IStrategyV2-claim}.\r\n     */\r\n    function claim(uint256 _poolId) external override {\r\n        require(poolMap[_poolId].vault == msg.sender, \"sender not vault\");\r\n        _claim(_poolId);\r\n\r\n    }\r\n\r\n    function _claim(uint256 _poolId) internal {\r\n        PoolInfo storage pool = poolMap[_poolId];\r\n        if (pool.poolType == 0) {\r\n            IStakingRewards(pool.targetPool).getReward();\r\n        } else if (pool.poolType == 1) {\r\n            ISushiPool(pool.targetPool).deposit(pool.targetPoolId, 0);\r\n        } else {\r\n            ISushiPool(pool.targetPool).claim(pool.targetPoolId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev See {IStrategyV2-withdraw}.\r\n     */\r\n    function withdraw(uint256 _poolId, uint256 _amount) external override {\r\n        PoolInfo storage pool = poolMap[_poolId];\r\n        require(pool.vault == msg.sender, \"sender not vault\");\r\n        if (pool.poolType == 0) {\r\n            IStakingRewards(pool.targetPool).withdraw(_amount);\r\n        } else {\r\n            ISushiPool(pool.targetPool).withdraw(pool.targetPoolId, _amount);\r\n        }\r\n        if (pool.balance < _amount) {\r\n            _amount = pool.balance;\r\n        }\r\n        pool.balance = pool.balance - _amount;\r\n        if (totalBalance >= _amount) totalBalance = totalBalance - _amount;\r\n    }\r\n\r\n    function depositByGov(address pool, uint8 _poolType, uint256 _targetPoolId, uint256 _amount) external {\r\n        require(msg.sender == governance || msg.sender == strategist, \"!governance && !strategist\");\r\n        if (_poolType == 0) {\r\n            IStakingRewards(pool).stake(_amount);\r\n        } else {\r\n            ISushiPool(pool).deposit(_targetPoolId, _amount);\r\n        }\r\n    }\r\n\r\n    function claimByGov(address pool, uint8 _poolType, uint256 _targetPoolId) external {\r\n        require(msg.sender == governance || msg.sender == strategist, \"!governance && !strategist\");\r\n        if (_poolType == 0) {\r\n            IStakingRewards(pool).getReward();\r\n        } else if (_poolType == 1) {\r\n            ISushiPool(pool).deposit(_targetPoolId, 0);\r\n        } else {\r\n            ISushiPool(pool).claim(_targetPoolId);\r\n        }\r\n    }\r\n\r\n    function withdrawByGov(address pool, uint8 _poolType, uint256 _targetPoolId, uint256 _amount) external {\r\n        require(msg.sender == governance || msg.sender == strategist, \"!governance && !strategist\");\r\n        if (_poolType == 0) {\r\n            IStakingRewards(pool).withdraw(_amount);\r\n        } else {\r\n            ISushiPool(pool).withdraw(_targetPoolId, _amount);\r\n        }\r\n    }\r\n\r\n    function emergencyWithdrawByGov(address pool, uint256 _targetPoolId) external {\r\n        require(msg.sender == governance || msg.sender == strategist, \"!governance && !strategist\");\r\n        ISushiPool(pool).emergencyWithdraw(_targetPoolId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IStrategyV2-poolQuota}.\r\n     */\r\n    function poolQuota(uint256 _poolId) external override view returns (uint256) {\r\n        return poolMap[_poolId].poolQuota;\r\n    }\r\n\r\n    function forwardToAnotherStrategy(address _dest, uint256 _amount) external override returns (uint256 sent) {\r\n        require(valueVaultMaster.isVault(msg.sender), \"not vault\");\r\n        require(valueVaultMaster.isStrategy(_dest), \"not strategy\");\r\n        require(IStrategyV2(_dest).getLpToken() == address(lpPair), \"!lpPair\");\r\n        uint256 lpPairBal = lpPair.balanceOf(address(this));\r\n        sent = (_amount < lpPairBal) ? _amount : lpPairBal;\r\n        lpPair.transfer(_dest, sent);\r\n    }\r\n\r\n    function setUnirouterPath(address _input, address _output, address [] memory _path) public {\r\n        require(msg.sender == governance || msg.sender == strategist, \"!governance && !strategist\");\r\n        uniswapPaths[_input][_output] = _path;\r\n    }\r\n\r\n    function setBalancerPool(address _input, address _output, address _pool) public {\r\n        require(msg.sender == governance || msg.sender == strategist, \"!governance && !strategist\");\r\n        valueLiquidPools[_input][_output] = _pool;\r\n        IERC20(_input).approve(_pool, type(uint256).max);\r\n    }\r\n\r\n    function _swapTokens(address _input, address _output, uint256 _amount) internal {\r\n        address _pool = valueLiquidPools[_input][_output];\r\n        if (_pool != address(0)) { // use ValueLiquid\r\n            // swapExactAmountIn(tokenIn, tokenAmountIn, tokenOut, minAmountOut, maxPrice)\r\n            IValueLiquidPool(_pool).swapExactAmountIn(_input, _amount, _output, 1, type(uint256).max);\r\n        } else { // use Uniswap\r\n            address[] memory path = uniswapPaths[_input][_output];\r\n            if (path.length == 0) {\r\n                // path: _input -> _output\r\n                path = new address[](2);\r\n                path[0] = _input;\r\n                path[1] = _output;\r\n            }\r\n            // swapExactTokensForTokens(amountIn, amountOutMin, path, to, deadline)\r\n            unirouter.swapExactTokensForTokens(_amount, 1, path, address(this), now.add(1800));\r\n        }\r\n    }\r\n\r\n    function _addLiquidity() internal {\r\n        // addLiquidity(tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin, to, deadline)\r\n        unirouter.addLiquidity(address(lpPairTokenA), address(lpPairTokenB), lpPairTokenA.balanceOf(address(this)), lpPairTokenB.balanceOf(address(this)), 1, 1, address(this), now.add(1800));\r\n    }\r\n\r\n    /**\r\n     * @dev See {IStrategyV2-harvest}.\r\n     */\r\n    function harvest(uint256 _bankPoolId, uint256 _poolId) external override {\r\n        address bank = valueVaultMaster.bank();\r\n        address _vault = msg.sender;\r\n        require(valueVaultMaster.isVault(_vault), \"!vault\"); // additional protection so we don't burn the funds\r\n\r\n        PoolInfo storage pool = poolMap[_poolId];\r\n        _claim(_poolId);\r\n\r\n        IERC20 targetToken = pool.targetToken;\r\n        uint256 targetTokenBal = targetToken.balanceOf(address(this));\r\n\r\n        if (targetTokenBal < pool.minHarvestForTakeProfit) return;\r\n\r\n        _swapTokens(address(targetToken), address(weth), targetTokenBal);\r\n        uint256 wethBal = weth.balanceOf(address(this));\r\n\r\n        if (wethBal > 0) {\r\n            uint256 _reserved = 0;\r\n            uint256 _gasFee = 0;\r\n            uint256 _govVaultProfitShareFee = 0;\r\n\r\n            if (valueVaultMaster.gasFee() > 0) {\r\n                _gasFee = wethBal.mul(valueVaultMaster.gasFee()).div(FEE_DENOMINATOR);\r\n                _reserved = _reserved.add(_gasFee);\r\n            }\r\n\r\n            if (valueVaultMaster.govVaultProfitShareFee() > 0) {\r\n                _govVaultProfitShareFee = wethBal.mul(valueVaultMaster.govVaultProfitShareFee()).div(FEE_DENOMINATOR);\r\n                _reserved = _reserved.add(_govVaultProfitShareFee);\r\n            }\r\n\r\n            uint256 wethToBuyTokenA = wethBal.sub(_reserved).div(2); // we have TokenB (WETH) already, so use 1/2 bal to buy TokenA (WBTC)\r\n\r\n            _swapTokens(address(weth), address(lpPairTokenA), wethToBuyTokenA);\r\n            _addLiquidity();\r\n\r\n            wethBal = weth.balanceOf(address(this));\r\n\r\n            {\r\n                address profitSharer = valueVaultMaster.profitSharer();\r\n                address performanceReward = valueVaultMaster.performanceReward();\r\n\r\n                if (_gasFee > 0 && performanceReward != address(0)) {\r\n                    if (_gasFee.add(_govVaultProfitShareFee) < wethBal) {\r\n                        _gasFee = wethBal.sub(_govVaultProfitShareFee);\r\n                    }\r\n                    weth.transfer(performanceReward, _gasFee);\r\n                    wethBal = weth.balanceOf(address(this));\r\n                }\r\n\r\n                if (_govVaultProfitShareFee > 0 && profitSharer != address(0)) {\r\n                    address govToken = valueVaultMaster.govToken();\r\n                    _swapTokens(address(weth), govToken, wethBal);\r\n                    IERC20(govToken).transfer(profitSharer, IERC20(govToken).balanceOf(address(this)));\r\n                    IProfitSharer(profitSharer).shareProfit();\r\n                }\r\n            }\r\n\r\n            uint256 balanceLeft = lpPair.balanceOf(address(this));\r\n            if (balanceLeft > 0) {\r\n                if (_bankPoolId == type(uint256).max) {\r\n                    // this called by governance of vault, send directly to bank (dont make profit)\r\n                    lpPair.transfer(bank, balanceLeft);\r\n                } else {\r\n                    if (lpPair.allowance(address(this), bank) < balanceLeft) {\r\n                        lpPair.approve(bank, 0);\r\n                        lpPair.approve(bank, balanceLeft);\r\n                    }\r\n                    IValueVaultBank(bank).make_profit(_bankPoolId, balanceLeft);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev See {IStrategyV2-getLpToken}.\r\n     */\r\n    function getLpToken() external view override returns(address) {\r\n        return address(lpPair);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IStrategyV2-getTargetToken}.\r\n     */\r\n    function getTargetToken(uint256 _poolId) external override view returns(address) {\r\n        return address(poolMap[_poolId].targetToken);\r\n    }\r\n\r\n    function balanceOf(uint256 _poolId) public override view returns (uint256) {\r\n        return poolMap[_poolId].balance;\r\n    }\r\n\r\n    // Only support IStakingRewards pool\r\n    function pendingReward(uint256 _poolId) public override view returns (uint256) {\r\n        if (poolMap[_poolId].poolType != 0) return 0; // do not support other pool types\r\n        return IStakingRewards(poolMap[_poolId].targetPool).earned(address(this));\r\n    }\r\n\r\n    // Helper function, Should never use it on-chain.\r\n    // Return 1e18x of APY. _lpPairUsdcPrice = current lpPair price (1-wei in WBTC-wei) multiple by 1e18\r\n    function expectedAPY(uint256, uint256) public override view returns (uint256) {\r\n        return 0; // not implemented\r\n    }\r\n\r\n    /**\r\n     * @dev if there is any token stuck we will need governance support to rescue the fund\r\n     */\r\n    function governanceRescueToken(IERC20 _token) external override returns (uint256 balance) {\r\n        address bank = valueVaultMaster.bank();\r\n        require(bank == msg.sender, \"sender not bank\");\r\n\r\n        balance = _token.balanceOf(address(this));\r\n        _token.transfer(bank, balance);\r\n    }\r\n\r\n    event ExecuteTransaction(address indexed target, uint value, string signature, bytes data);\r\n\r\n    function executeTransaction(address target, uint value, string memory signature, bytes memory data) public returns (bytes memory) {\r\n        require(msg.sender == governance, \"!governance\");\r\n\r\n        bytes memory callData;\r\n\r\n        if (bytes(signature).length == 0) {\r\n            callData = data;\r\n        } else {\r\n            callData = abi.encodePacked(bytes4(keccak256(bytes(signature))), data);\r\n        }\r\n\r\n        // solium-disable-next-line security/no-call-value\r\n        (bool success, bytes memory returnData) = target.call{value: value}(callData);\r\n        require(success, \"Univ2ETHWBTCMultiPoolStrategy::executeTransaction: Transaction execution reverted.\");\r\n\r\n        emit ExecuteTransaction(target, value, signature, data);\r\n\r\n        return returnData;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract ValueVaultMaster\",\"name\":\"_valueVaultMaster\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpPair\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpPairTokenA\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpPairTokenB\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_aggressiveMode\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"signature\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ExecuteTransaction\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aggressiveMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveForSpender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_poolType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_targetPoolId\",\"type\":\"uint256\"}],\"name\":\"claimByGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_poolType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_targetPoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositByGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_targetPoolId\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdrawByGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"signature\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"executeTransaction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"expectedAPY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dest\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"forwardToAnotherStrategy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sent\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLpToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"getTargetToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"governanceRescueToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bankPoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpPair\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpPairTokenA\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpPairTokenB\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onesplit\",\"outputs\":[{\"internalType\":\"contract IOneSplit\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolMap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"targetPoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minHarvestForTakeProfit\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"poolType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"poolQuota\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolPreferredIds\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"poolQuota\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_aggressiveMode\",\"type\":\"bool\"}],\"name\":\"setAggressiveMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_input\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_output\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"setBalancerPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minHarvestForTakeProfit\",\"type\":\"uint256\"}],\"name\":\"setMinHarvestForTakeProfit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOneSplit\",\"name\":\"_onesplit\",\"type\":\"address\"}],\"name\":\"setOnesplit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"setPoolBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_targetToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_targetPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_targetPoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minHarvestForTakeProfit\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_poolType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_poolQuota\",\"type\":\"uint256\"}],\"name\":\"setPoolInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"_poolPreferredIds\",\"type\":\"uint8[]\"}],\"name\":\"setPoolPreferredIds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_poolQuota\",\"type\":\"uint256\"}],\"name\":\"setPoolQuota\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"}],\"name\":\"setStrategist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalBalance\",\"type\":\"uint256\"}],\"name\":\"setTotalBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniswapRouter\",\"name\":\"_unirouter\",\"type\":\"address\"}],\"name\":\"setUnirouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_input\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_output\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"}],\"name\":\"setUnirouterPath\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_weth\",\"type\":\"address\"}],\"name\":\"setWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unirouter\",\"outputs\":[{\"internalType\":\"contract IUniswapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uniswapPaths\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"valueLiquidPools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"valueVaultMaster\",\"outputs\":[{\"internalType\":\"contract ValueVaultMaster\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_poolType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_targetPoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawByGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Univ2ETHWBTCMultiPoolStrategy","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000aa8ecca0082c34ab8c30b4d896eb8eecc5004b28000000000000000000000000bb2b8038a1640196fbe3e38816f3e67cba72d9400000000000000000000000002260fac5e5542a773aa44fbcfedf7c193bc2c599000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000000001","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://71df4ebfb0e8d0dd6c14fea8ff4e788e85ff59be91c092b5c553b8ccc770fa75"}]}