{"status":"1","message":"OK","result":[{"SourceCode":"{\"Admin.sol\":{\"content\":\"/* SPDX-License-Identifier: MIT */\\npragma solidity ^0.7.0;\\n\\nimport \\\"./AdminInterface.sol\\\";\\n\\n/**\\n * @title Admin\\n * @author Paul Razvan Berg\\n * @notice Contract module which provides a basic access control mechanism, where there is\\n * an account (an admin) that can be granted exclusive access to specific functions.\\n *\\n * By default, the admin account will be the one that deploys the contract. This can later\\n * be changed with {transferAdmin}.\\n *\\n * This module is used through inheritance. It will make available the modifier `onlyAdmin`,\\n * which can be applied to your functions to restrict their use to the admin.\\n *\\n * @dev Forked from OpenZeppelin\\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.1.0/contracts/access/Ownable.sol\\n */\\nabstract contract Admin is AdminInterface {\\n    /**\\n     * @notice Throws if called by any account other than the admin.\\n     */\\n    modifier onlyAdmin() {\\n        require(admin == msg.sender, \\\"ERR_NOT_ADMIN\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initializes the contract setting the deployer as the initial admin.\\n     */\\n    constructor() {\\n        address msgSender = msg.sender;\\n        admin = msgSender;\\n        emit TransferAdmin(address(0x00), msgSender);\\n    }\\n\\n    /**\\n     * @notice Leaves the contract without admin, so it will not be possible to call\\n     * `onlyAdmin` functions anymore.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must be the administrator.\\n     *\\n     * WARNING: Doing this will leave the contract without an admin,\\n     * thereby removing any functionality that is only available to the admin.\\n     */\\n    function _renounceAdmin() external virtual override onlyAdmin {\\n        emit TransferAdmin(admin, address(0x00));\\n        admin = address(0x00);\\n    }\\n\\n    /**\\n     * @notice Transfers the admin of the contract to a new account (`newAdmin`).\\n     * Can only be called by the current admin.\\n     * @param newAdmin The acount of the new admin.\\n     */\\n    function _transferAdmin(address newAdmin) external virtual override onlyAdmin {\\n        require(newAdmin != address(0x00), \\\"ERR_SET_ADMIN_ZERO_ADDRESS\\\");\\n        emit TransferAdmin(admin, newAdmin);\\n        admin = newAdmin;\\n    }\\n}\\n\"},\"AdminInterface.sol\":{\"content\":\"/* SPDX-License-Identifier: MIT */\\npragma solidity ^0.7.0;\\n\\nimport \\\"./AdminStorage.sol\\\";\\n\\n/**\\n * @title AdminInterface\\n * @author Paul Razvan Berg\\n */\\nabstract contract AdminInterface is AdminStorage {\\n    /**\\n     * NON-CONSTANT FUNCTIONS\\n     */\\n    function _renounceAdmin() external virtual;\\n\\n    function _transferAdmin(address newAdmin) external virtual;\\n\\n    /**\\n     * EVENTS\\n     */\\n    event TransferAdmin(address indexed oldAdmin, address indexed newAdmin);\\n}\\n\"},\"AdminStorage.sol\":{\"content\":\"/* SPDX-License-Identifier: MIT */\\npragma solidity ^0.7.0;\\n\\nabstract contract AdminStorage {\\n    /**\\n     * @notice The address of the administrator account or contract.\\n     */\\n    address public admin;\\n}\\n\"},\"AggregatorV3Interface.sol\":{\"content\":\"/* SPDX-License-Identifier: LGPL-3.0-or-later */\\npragma solidity ^0.7.0;\\n\\n/**\\n * @title AggregatorV3Interface\\n * @author Hifi\\n * @dev Forked from Chainlink\\n * https://github.com/smartcontractkit/chainlink/blob/v0.9.9/evm-contracts/src/v0.7/interfaces/AggregatorV3Interface.sol\\n */\\ninterface AggregatorV3Interface {\\n    function decimals() external view returns (uint8);\\n\\n    function description() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n\\n    /*\\n     * getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n     * if they do not have data to report, instead of returning unset values\\n     * which could be misinterpreted as actual reported values.\\n     */\\n    function getRoundData(uint80 _roundId)\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\"},\"CarefulMath.sol\":{\"content\":\"/* SPDX-License-Identifier: MIT */\\npragma solidity ^0.7.0;\\n\\n/**\\n * @notice Possible error codes that can be returned.\\n */\\nenum MathError { NO_ERROR, DIVISION_BY_ZERO, INTEGER_OVERFLOW, INTEGER_UNDERFLOW, MODULO_BY_ZERO }\\n\\n/**\\n * @title CarefulMath\\n * @author Paul Razvan Berg\\n * @notice Exponential module for storing fixed-precision decimals.\\n * @dev Forked from Compound\\n * https://github.com/compound-finance/compound-protocol/blob/v2.8.1/contracts/CarefulMath.sol\\n */\\nabstract contract CarefulMath {\\n    /**\\n     * @notice Adds two numbers, returns an error on overflow.\\n     */\\n    function addUInt(uint256 a, uint256 b) internal pure returns (MathError, uint256) {\\n        uint256 c = a + b;\\n\\n        if (c \\u003e= a) {\\n            return (MathError.NO_ERROR, c);\\n        } else {\\n            return (MathError.INTEGER_OVERFLOW, 0);\\n        }\\n    }\\n\\n    /**\\n     * @notice Add `a` and `b` and then subtract `c`.\\n     */\\n    function addThenSubUInt(\\n        uint256 a,\\n        uint256 b,\\n        uint256 c\\n    ) internal pure returns (MathError, uint256) {\\n        (MathError err0, uint256 sum) = addUInt(a, b);\\n\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, 0);\\n        }\\n\\n        return subUInt(sum, c);\\n    }\\n\\n    /**\\n     * @notice Integer division of two numbers, truncating the quotient.\\n     */\\n    function divUInt(uint256 a, uint256 b) internal pure returns (MathError, uint256) {\\n        if (b == 0) {\\n            return (MathError.DIVISION_BY_ZERO, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, a / b);\\n    }\\n\\n    /**\\n     * @notice Returns the remainder of dividing two numbers.\\n     * @dev Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     */\\n    function modUInt(uint256 a, uint256 b) internal pure returns (MathError, uint256) {\\n        if (b == 0) {\\n            return (MathError.MODULO_BY_ZERO, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, a % b);\\n    }\\n\\n    /**\\n     * @notice Multiplies two numbers, returns an error on overflow.\\n     */\\n    function mulUInt(uint256 a, uint256 b) internal pure returns (MathError, uint256) {\\n        if (a == 0) {\\n            return (MathError.NO_ERROR, 0);\\n        }\\n\\n        uint256 c = a * b;\\n\\n        if (c / a != b) {\\n            return (MathError.INTEGER_OVERFLOW, 0);\\n        } else {\\n            return (MathError.NO_ERROR, c);\\n        }\\n    }\\n\\n    /**\\n     * @notice Subtracts two numbers, returns an error on overflow (i.e. if subtrahend is greater than minuend).\\n     */\\n    function subUInt(uint256 a, uint256 b) internal pure returns (MathError, uint256) {\\n        if (b \\u003c= a) {\\n            return (MathError.NO_ERROR, a - b);\\n        } else {\\n            return (MathError.INTEGER_UNDERFLOW, 0);\\n        }\\n    }\\n}\\n\"},\"ChainlinkOperator.sol\":{\"content\":\"/* SPDX-License-Identifier: LGPL-3.0-or-later */\\npragma solidity ^0.7.0;\\n\\nimport \\\"./Admin.sol\\\";\\nimport \\\"./CarefulMath.sol\\\";\\nimport \\\"./Erc20Interface.sol\\\";\\n\\nimport \\\"./ChainlinkOperatorInterface.sol\\\";\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\n/**\\n * @title ChainlinkOperator\\n * @author Hifi\\n * @notice Manages USD-quoted Chainlink price feeds.\\n */\\ncontract ChainlinkOperator is\\n    CarefulMath, /* no dependency */\\n    ChainlinkOperatorInterface, /* no dependency */\\n    Admin /* two dependencies */\\n{\\n    /* solhint-disable-next-line no-empty-blocks */\\n    constructor() Admin() {}\\n\\n    /**\\n     * CONSTANT FUNCTIONS\\n     */\\n\\n    /**\\n     * @notice Gets the official price for a symbol and adjusts it have 18 decimals instead of the\\n     * format used by Chainlink, which has 8 decimals.\\n     *\\n     * @dev Requirements:\\n     *\\n     * - The upscaled price cannot overflow.\\n     *\\n     * @param symbol The Erc20 symbol of the token for which to query the price.\\n     * @return The upscaled price as a mantissa.\\n     */\\n    function getAdjustedPrice(string memory symbol) external view override returns (uint256) {\\n        uint256 price = getPrice(symbol);\\n        (MathError mathErr, uint256 adjustedPrice) = mulUInt(price, pricePrecisionScalar);\\n        require(mathErr == MathError.NO_ERROR, \\\"ERR_GET_ADJUSTED_PRICE_MATH_ERROR\\\");\\n        return adjustedPrice;\\n    }\\n\\n    /**\\n     * @notice Gets the official feed for a symbol.\\n     * @param symbol The symbol to return the feed for.\\n     * @return (address asset, address id, bool isSet).\\n     */\\n    function getFeed(string memory symbol)\\n        external\\n        view\\n        override\\n        returns (\\n            Erc20Interface,\\n            AggregatorV3Interface,\\n            bool\\n        )\\n    {\\n        return (feeds[symbol].asset, feeds[symbol].id, feeds[symbol].isSet);\\n    }\\n\\n    /**\\n     * @notice Gets the official price for a symbol in the default format used by Chainlink, which\\n     * has 8 decimals.\\n     *\\n     * @dev Requirements:\\n     *\\n     * - The feed must have been previously set.\\n     * - The price returned by the oracle cannot be zero.\\n     *\\n     * @param symbol The symbol to fetch the price for.\\n     * @return Price denominated in USD, with 8 decimals.\\n     */\\n    function getPrice(string memory symbol) public view override returns (uint256) {\\n        require(feeds[symbol].isSet, \\\"ERR_FEED_NOT_SET\\\");\\n        (, int256 intPrice, , , ) = AggregatorV3Interface(feeds[symbol].id).latestRoundData();\\n        uint256 price = uint256(intPrice);\\n        require(price \\u003e 0, \\\"ERR_PRICE_ZERO\\\");\\n        return price;\\n    }\\n\\n    /**\\n     * NON-CONSTANT FUNCTIONS\\n     */\\n\\n    /**\\n     * @notice Deletes a previously set Chainlink price feed.\\n     *\\n     * @dev Emits a {DeleteFeed} event.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must be the admin.\\n     * - The feed must have been previously set.\\n     *\\n     * @param symbol The Erc20 symbol of the asset to delete the feed for.\\n     * @return true = success, otherwise it reverts.\\n     */\\n    function deleteFeed(string memory symbol) external override onlyAdmin returns (bool) {\\n        /* Checks */\\n        require(feeds[symbol].isSet, \\\"ERR_FEED_NOT_SET\\\");\\n\\n        /* Effects: delete the feed from storage. */\\n        AggregatorV3Interface feed = feeds[symbol].id;\\n        Erc20Interface asset = feeds[symbol].asset;\\n        delete feeds[symbol];\\n\\n        emit DeleteFeed(asset, feed);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Sets a Chainlink price feed. It is not an error to set a feed twice.\\n     *\\n     * @dev Emits a {SetFeed} event.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must be the admin.\\n     * - The number of decimals of the feed must be 8.\\n     *\\n     * @param asset The address of the Erc20 contract for which to get the price.\\n     * @param feed The address of the Chainlink price feed contract.\\n     * @return true = success, otherwise it reverts.\\n     */\\n    function setFeed(Erc20Interface asset, AggregatorV3Interface feed) external override onlyAdmin returns (bool) {\\n        string memory symbol = asset.symbol();\\n\\n        /* Checks: price precision. */\\n        uint8 decimals = feed.decimals();\\n        require(decimals == pricePrecision, \\\"ERR_FEED_INCORRECT_DECIMALS\\\");\\n\\n        /* Effects: put the feed into storage. */\\n        feeds[symbol] = Feed({ asset: asset, id: feed, isSet: true });\\n\\n        emit SetFeed(asset, feed);\\n        return true;\\n    }\\n}\\n\"},\"ChainlinkOperatorInterface.sol\":{\"content\":\"/* SPDX-License-Identifier: LGPL-3.0-or-later */\\npragma solidity ^0.7.0;\\n\\nimport \\\"./CarefulMath.sol\\\";\\nimport \\\"./Erc20Interface.sol\\\";\\n\\nimport \\\"./ChainlinkOperatorStorage.sol\\\";\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\n/**\\n * @title ChainlinkOperatorInterface\\n * @author Hifi\\n */\\nabstract contract ChainlinkOperatorInterface is ChainlinkOperatorStorage {\\n    /**\\n     * EVENTS\\n     */\\n    event DeleteFeed(Erc20Interface indexed asset, AggregatorV3Interface indexed feed);\\n\\n    event SetFeed(Erc20Interface indexed asset, AggregatorV3Interface indexed feed);\\n\\n    /**\\n     * CONSTANT FUNCTIONS.\\n     */\\n    function getAdjustedPrice(string memory symbol) external view virtual returns (uint256);\\n\\n    function getFeed(string memory symbol)\\n        external\\n        view\\n        virtual\\n        returns (\\n            Erc20Interface,\\n            AggregatorV3Interface,\\n            bool\\n        );\\n\\n    function getPrice(string memory symbol) public view virtual returns (uint256);\\n\\n    /**\\n     * NON-CONSTANT FUNCTIONS.\\n     */\\n    function deleteFeed(string memory symbol) external virtual returns (bool);\\n\\n    function setFeed(Erc20Interface asset, AggregatorV3Interface feed) external virtual returns (bool);\\n}\\n\"},\"ChainlinkOperatorStorage.sol\":{\"content\":\"/* SPDX-License-Identifier: LGPL-3.0-or-later */\\npragma solidity ^0.7.0;\\n\\nimport \\\"./Erc20Interface.sol\\\";\\n\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\n/**\\n * @title ChainlinkOperatorStorage\\n * @author Hifi\\n */\\nabstract contract ChainlinkOperatorStorage {\\n    struct Feed {\\n        Erc20Interface asset;\\n        AggregatorV3Interface id;\\n        bool isSet;\\n    }\\n\\n    /**\\n     * @dev Mapping between Erc20 symbols and Feed structs.\\n     */\\n    mapping(string =\\u003e Feed) internal feeds;\\n\\n    /**\\n     * @notice Chainlink price precision for USD-quoted data.\\n     */\\n    uint256 public constant pricePrecision = 8;\\n\\n    /**\\n     * @notice The ratio between mantissa precision (1e18) and the Chainlink price precision (1e8).\\n     */\\n    uint256 public constant pricePrecisionScalar = 1.0e10;\\n}\\n\"},\"Erc20Interface.sol\":{\"content\":\"/* SPDX-License-Identifier: MIT */\\npragma solidity ^0.7.0;\\n\\nimport \\\"./Erc20Storage.sol\\\";\\n\\n/**\\n * @title Erc20Interface\\n * @author Paul Razvan Berg\\n * @notice Interface of the Erc20 standard\\n * @dev Forked from OpenZeppelin\\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.2.0/contracts/token/ERC20/IERC20.sol\\n */\\nabstract contract Erc20Interface is Erc20Storage {\\n    /**\\n     * CONSTANT FUNCTIONS\\n     */\\n    function allowance(address owner, address spender) external view virtual returns (uint256);\\n\\n    function balanceOf(address account) external view virtual returns (uint256);\\n\\n    /**\\n     * NON-CONSTANT FUNCTIONS\\n     */\\n    function approve(address spender, uint256 amount) external virtual returns (bool);\\n\\n    function transfer(address recipient, uint256 amount) external virtual returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external virtual returns (bool);\\n\\n    /**\\n     * EVENTS\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    event Burn(address indexed holder, uint256 burnAmount);\\n\\n    event Mint(address indexed beneficiary, uint256 mintAmount);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n}\\n\"},\"Erc20Storage.sol\":{\"content\":\"/* SPDX-License-Identifier: MIT */\\npragma solidity ^0.7.0;\\n\\n/**\\n * @title ExponentialStorage\\n * @author Paul Razvan Berg\\n * @notice The storage interface ancillary to an Erc20 contract.\\n */\\nabstract contract Erc20Storage {\\n    /**\\n     * @notice Returns the number of decimals used to get its user representation.\\n     */\\n    uint8 public decimals;\\n\\n    /**\\n     * @notice Returns the name of the token.\\n     */\\n    string public name;\\n\\n    /**\\n     * @notice Returns the symbol of the token, usually a shorter version of\\n     * the name.\\n     */\\n    string public symbol;\\n\\n    /**\\n     * @notice Returns the amount of tokens in existence.\\n     */\\n    uint256 public totalSupply;\\n\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) internal allowances;\\n\\n    mapping(address =\\u003e uint256) internal balances;\\n}\\n\"}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract Erc20Interface\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"feed\",\"type\":\"address\"}],\"name\":\"DeleteFeed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract Erc20Interface\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"feed\",\"type\":\"address\"}],\"name\":\"SetFeed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"TransferAdmin\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_renounceAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"_transferAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"deleteFeed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"getAdjustedPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"getFeed\",\"outputs\":[{\"internalType\":\"contract Erc20Interface\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pricePrecision\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pricePrecisionScalar\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Erc20Interface\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"feed\",\"type\":\"address\"}],\"name\":\"setFeed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ChainlinkOperator","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU LGPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://9177eafc8e591dc221f7e17fd2402f84a58d9bf80467d40a587292b9ff4671ca"}]}