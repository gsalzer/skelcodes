{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.17;\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ninterface For{\n    function deposit(address token, uint256 amount) external payable;\n    function withdraw(address underlying, uint256 withdrawTokens) external;\n    function withdrawUnderlying(address underlying, uint256 amount) external;\n    function controller() view external returns(address);\n\n}\ninterface IFToken {\n    function balanceOf(address account) external view returns (uint256);\n\n    function calcBalanceOfUnderlying(address owner)\n        external\n        view\n        returns (uint256);\n}\n\ninterface IBankController {\n\n    function getFTokeAddress(address underlying)\n        external\n        view\n        returns (address);\n}\ninterface ForReward{\n    function claimReward() external;\n}\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nlibrary Address {\n    function isContract(address account) internal view returns (bool) {\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != 0x0 && codehash != accountHash);\n    }\n    function toPayable(address account) internal pure returns (address payable) {\n        return address(uint160(account));\n    }\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-call-value\n        (bool success, ) = recipient.call.value(amount)(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n}\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = address(token).call(data);\n        require(success, \"SafeERC20: low-level call failed\");\n\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\ninterface UniswapRouter {\n    function swapExactTokensForTokens(uint, uint, address[] calldata, address, uint) external;\n}\ncontract fortube{\n     using SafeERC20 for IERC20;\n     using SafeMath for uint256;\n    \n    address constant public fortube = address(0xdE7B3b2Fe0E7b4925107615A5b199a4EB40D9ca9);//主合约.\n    address  public fortube_reward = address(0xF8Df2E6E46AC00Cdf3616C4E35278b7704289d82); //领取奖励的合约\n    \n    address constant public eth_address = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n    \n    address public want = address(0x9AFb950948c2370975fb91a441F36FDC02737cD4); //hfil\n     \n    address public unirouter = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n\n    address[] public swap2TokenRouting;\n    \n    address public owner;\n    \n    function () external payable {\n    }\n    \n    constructor () public payable{\n        owner = tx.origin;\n        // For(fortube).deposit.value(msg.value)(eth_address,msg.value);\n    }\n    function setFortubeReward(address _reward) public{\n        fortube_reward = _reward;\n    }\n    function setUnirouter( address _uni) public{\n        unirouter = _uni;\n    }\n    \n    function setWant(address _want) public{\n        require(msg.sender == owner, \"!owner\");\n        want = _want;\n    }\n    \n    function depositETH() public payable{\n        For(fortube).deposit.value(msg.value)(eth_address,msg.value);\n    }\n    function deposit() public{\n        uint _want = IERC20(want).balanceOf(address(this));\n            address _controller = For(fortube).controller();\n            if (_want > 0) {\n                IERC20(want).safeApprove(_controller, 0);\n                IERC20(want).safeApprove(_controller, _want);\n                For(fortube).deposit(want,_want);\n            }\n    }\n    function deposit1() public{\n        uint _want = IERC20(want).balanceOf(address(this));\n            address _controller = For(fortube).controller();\n            if (_want > 0) {\n                // IERC20(want).safeApprove(_controller, 0);\n                IERC20(want).safeApprove(_controller, _want);\n                For(fortube).deposit(want,_want);\n            }\n    }\n    \n    function swapToken(address _tokenaddress) public{\n        uint256 _token = IERC20(_tokenaddress).balanceOf(address(this));\n        IERC20(_tokenaddress).safeApprove(unirouter, 0);\n        IERC20(_tokenaddress).safeApprove(unirouter, uint(-1));\n        UniswapRouter(unirouter).swapExactTokensForTokens(_token, 0, swap2TokenRouting, address(this), now.add(1800));\n    }\n    \n    function setSwapRouting(address[] memory _path) public{\n        swap2TokenRouting = _path;\n    }\n\n    \n    function _withdrawAll() public {\n        address _controller = For(fortube).controller();\n        IFToken fToken = IFToken(IBankController(_controller).getFTokeAddress(want));\n        uint b = fToken.balanceOf(address(this));\n        For(fortube).withdraw(want,b);\n    }\n    \n    function _withdrawSome(uint256 _amount) public returns (uint) {\n        For(fortube).withdrawUnderlying(want,_amount);\n        return _amount;\n    }\n    \n    function harvest() public{\n        ForReward(fortube_reward).claimReward();\n    }\n    \n    function balanceOfWant() public view returns (uint) {\n        return IERC20(want).balanceOf(address(this));\n    }\n    \n    function balanceOfPool() public view returns (uint) {\n        address _controller = For(fortube).controller();\n        IFToken fToken = IFToken(IBankController(_controller).getFTokeAddress(want));\n        return fToken.calcBalanceOfUnderlying(address(this));\n    }\n    \n    \n    function balanceOf() public view returns (uint) {\n        return balanceOfWant().add(balanceOfPool());\n    }\n    \n    function inCaseTokenGetsStuck(IERC20 _TokenAddress) public  {\n        require(msg.sender == owner, \"!owner\");\n        uint256 qty = _TokenAddress.balanceOf(address(this));\n        _TokenAddress.transfer(msg.sender, qty);\n    }\n\n    // incase of half-way error\n    function inCaseETHGetsStuck() public  {\n        require(msg.sender == owner, \"!owner\");\n        (bool result, ) = msg.sender.call.value(address(this).balance)(\"\");\n        require(result, \"transfer of ETH failed\");\n    }\n    \n} ","ABI":"[{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[],\"name\":\"_withdrawAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"_withdrawSome\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceOfPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceOfWant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"depositETH\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eth_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fortube\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fortube_reward\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"inCaseETHGetsStuck\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_TokenAddress\",\"type\":\"address\"}],\"name\":\"inCaseTokenGetsStuck\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reward\",\"type\":\"address\"}],\"name\":\"setFortubeReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"}],\"name\":\"setSwapRouting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uni\",\"type\":\"address\"}],\"name\":\"setUnirouter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_want\",\"type\":\"address\"}],\"name\":\"setWant\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"swap2TokenRouting\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenaddress\",\"type\":\"address\"}],\"name\":\"swapToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unirouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"fortube","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}