{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.17;\r\n\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) \r\n            return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n\r\n}\r\n\r\ncontract ERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) internal _balances;\r\n    mapping (address => mapping (address => uint256)) internal _allowed;\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    uint256 internal _totalSupply;\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        if(_allowed[from][msg.sender] != uint256(-1))\r\n            _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n        _transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(to != address(0));\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n}\r\n\r\ncontract ERC20Mintable is ERC20 {\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n\r\n    function _mint(address to, uint256 amount) internal {\r\n        _balances[to] = _balances[to].add(amount);\r\n        _totalSupply = _totalSupply.add(amount);\r\n        emit Transfer(address(0), to, amount);\r\n    }\r\n\r\n    function _burn(address from, uint256 amount) internal {\r\n        _balances[from] = _balances[from].sub(amount);\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(from, address(0), amount);\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract AGT2 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) internal _balances;\r\n    mapping (address => mapping (address => uint256)) internal _allowed;\r\n    mapping(address => uint256) public mask;\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    uint256 internal constant _totalSupply = 100000000e18;\r\n    uint256 public dividend;\r\n\r\n    string public constant name = \"ANGEL Token2\";\r\n    string public constant symbol = \"AGT2\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    ERC20 token = ERC20(0xF6C5FcA9cA34C4b23045EFfFA576716Ff70542C1);\r\n    address bank = address(0x84E8905aaD8cFA7f830a024AD274AD3F7CEc1C12);\r\n\r\n    constructor() public {\r\n        _balances[msg.sender] = _totalSupply;\r\n    }\r\n\r\n    function distribute(uint256 amount) external {\r\n        require (msg.sender == bank);\r\n        dividend = dividend.add( amount.mul(1e18).div(_totalSupply) );\r\n    }\r\n\r\n    function update(address holder) public {\r\n        uint256 diff = dividend.sub(mask[holder]);\r\n        mask[holder] = dividend;\r\n        if(diff > 0)\r\n            token.transfer(holder, diff.mul(_balances[holder].div(1e18)));\r\n    }\r\n\r\n    function totalSupply() public pure returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        if(_allowed[from][msg.sender] != uint256(-1))\r\n            _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n        _transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(to != address(0));\r\n        update(from);\r\n        update(to);\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n}\r\n\r\ncontract EGTBank {\r\n    using SafeMath for *;\r\n\r\n    struct Order {\r\n        uint256 amount;\r\n        uint256 startD;\r\n        uint256 last;\r\n    }\r\n\r\n    ERC20 token = ERC20(0xF6C5FcA9cA34C4b23045EFfFA576716Ff70542C1);\r\n\r\n    AGT2 angel = AGT2(0x16FDb1b35EdF71d2eEc13AeE34f3645E3b7e27e7);\r\n\r\n    mapping(address => uint256) public count;\r\n    mapping(address => mapping(uint256 => Order)) public Orders;\r\n\r\n    function getRate(uint256 day) public pure returns (uint256 rate) {\r\n        if(day < 201)\r\n            rate = (0.005e18).mul(day);\r\n        else if(day < 451)\r\n            rate = (0.004e18).mul(day).add(0.2e18);\r\n        else if(day < 763)\r\n            rate = (0.0032e18).mul(day).add(0.56e18);\r\n        else\r\n            rate = 3e18;\r\n    }\r\n\r\n    function invest(address to, uint256 amount) public {\r\n        require(amount >= 1000e18 && amount <= 30000e18);\r\n        uint256 index = count[to];\r\n        count[to] += 1;\r\n        Order storage order = Orders[to][index];\r\n        order.amount = amount;\r\n        order.startD = now / 1 days + 1;\r\n        order.last = now / 1 days + 1;\r\n\r\n        require(token.transferFrom(msg.sender, address(this), amount));\r\n        require(token.transferFrom(msg.sender, address(angel), amount/100));\r\n        angel.distribute(amount/100);\r\n    }\r\n\r\n    function claim(uint256 index) public {\r\n        Order storage order = Orders[msg.sender][index];\r\n        uint256 today = now / 1 days;\r\n        require(today > order.last);\r\n        uint256 amount = order.amount.mul(getRate(today.sub(order.startD)).sub(getRate(order.last.sub(order.startD)))) / 1e18;\r\n        order.last = today;\r\n        if(amount > 0) {\r\n            require(token.transferFrom(msg.sender, address(angel), amount/100));\r\n            require(token.transfer(msg.sender, amount));\r\n            angel.distribute(amount/100);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Orders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"last\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"getRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"invest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"EGTBank","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://9c1c4846bf1fe26b615fd9841b9491a0d227e73ee18c11a002fd8fb498233ad4"}]}