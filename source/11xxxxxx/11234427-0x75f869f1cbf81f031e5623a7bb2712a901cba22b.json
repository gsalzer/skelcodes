{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-10-21\r\n*/\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n// https://docs.synthetix.io/contracts/SafeDecimalMath\r\nlibrary SafeDecimalMath {\r\n    using SafeMath for uint;\r\n\r\n    /* Number of decimal places in the representations. */\r\n    uint8 public constant decimals = 18;\r\n    uint8 public constant highPrecisionDecimals = 27;\r\n\r\n    /* The number representing 1.0. */\r\n    uint public constant UNIT = 10**uint(decimals);\r\n\r\n    /* The number representing 1.0 for higher fidelity numbers. */\r\n    uint public constant PRECISE_UNIT = 10**uint(highPrecisionDecimals);\r\n    uint private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR = 10**uint(highPrecisionDecimals - decimals);\r\n\r\n    /**\r\n     * @return Provides an interface to UNIT.\r\n     */\r\n    function unit() external pure returns (uint) {\r\n        return UNIT;\r\n    }\r\n\r\n    /**\r\n     * @return Provides an interface to PRECISE_UNIT.\r\n     */\r\n    function preciseUnit() external pure returns (uint) {\r\n        return PRECISE_UNIT;\r\n    }\r\n\r\n    /**\r\n     * @return The result of multiplying x and y, interpreting the operands as fixed-point\r\n     * decimals.\r\n     *\r\n     * @dev A unit factor is divided out after the product of x and y is evaluated,\r\n     * so that product must be less than 2**256. As this is an integer division,\r\n     * the internal division always rounds down. This helps save on gas. Rounding\r\n     * is more expensive on gas.\r\n     */\r\n    function multiplyDecimal(uint x, uint y) internal pure returns (uint) {\r\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\r\n        return x.mul(y) / UNIT;\r\n    }\r\n\r\n    /**\r\n     * @return The result of safely multiplying x and y, interpreting the operands\r\n     * as fixed-point decimals of the specified precision unit.\r\n     *\r\n     * @dev The operands should be in the form of a the specified unit factor which will be\r\n     * divided out after the product of x and y is evaluated, so that product must be\r\n     * less than 2**256.\r\n     *\r\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\r\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\r\n     * (eg. small fractions or percentages).\r\n     */\r\n    function _multiplyDecimalRound(\r\n        uint x,\r\n        uint y,\r\n        uint precisionUnit\r\n    ) private pure returns (uint) {\r\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\r\n        uint quotientTimesTen = x.mul(y) / (precisionUnit / 10);\r\n\r\n        if (quotientTimesTen % 10 >= 5) {\r\n            quotientTimesTen += 10;\r\n        }\r\n\r\n        return quotientTimesTen / 10;\r\n    }\r\n\r\n    /**\r\n     * @return The result of safely multiplying x and y, interpreting the operands\r\n     * as fixed-point decimals of a precise unit.\r\n     *\r\n     * @dev The operands should be in the precise unit factor which will be\r\n     * divided out after the product of x and y is evaluated, so that product must be\r\n     * less than 2**256.\r\n     *\r\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\r\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\r\n     * (eg. small fractions or percentages).\r\n     */\r\n    function multiplyDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\r\n        return _multiplyDecimalRound(x, y, PRECISE_UNIT);\r\n    }\r\n\r\n    /**\r\n     * @return The result of safely multiplying x and y, interpreting the operands\r\n     * as fixed-point decimals of a standard unit.\r\n     *\r\n     * @dev The operands should be in the standard unit factor which will be\r\n     * divided out after the product of x and y is evaluated, so that product must be\r\n     * less than 2**256.\r\n     *\r\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\r\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\r\n     * (eg. small fractions or percentages).\r\n     */\r\n    function multiplyDecimalRound(uint x, uint y) internal pure returns (uint) {\r\n        return _multiplyDecimalRound(x, y, UNIT);\r\n    }\r\n\r\n    /**\r\n     * @return The result of safely dividing x and y. The return value is a high\r\n     * precision decimal.\r\n     *\r\n     * @dev y is divided after the product of x and the standard precision unit\r\n     * is evaluated, so the product of x and UNIT must be less than 2**256. As\r\n     * this is an integer division, the result is always rounded down.\r\n     * This helps save on gas. Rounding is more expensive on gas.\r\n     */\r\n    function divideDecimal(uint x, uint y) internal pure returns (uint) {\r\n        /* Reintroduce the UNIT factor that will be divided out by y. */\r\n        return x.mul(UNIT).div(y);\r\n    }\r\n\r\n    /**\r\n     * @return The result of safely dividing x and y. The return value is as a rounded\r\n     * decimal in the precision unit specified in the parameter.\r\n     *\r\n     * @dev y is divided after the product of x and the specified precision unit\r\n     * is evaluated, so the product of x and the specified precision unit must\r\n     * be less than 2**256. The result is rounded to the nearest increment.\r\n     */\r\n    function _divideDecimalRound(\r\n        uint x,\r\n        uint y,\r\n        uint precisionUnit\r\n    ) private pure returns (uint) {\r\n        uint resultTimesTen = x.mul(precisionUnit * 10).div(y);\r\n\r\n        if (resultTimesTen % 10 >= 5) {\r\n            resultTimesTen += 10;\r\n        }\r\n\r\n        return resultTimesTen / 10;\r\n    }\r\n\r\n    /**\r\n     * @return The result of safely dividing x and y. The return value is as a rounded\r\n     * standard precision decimal.\r\n     *\r\n     * @dev y is divided after the product of x and the standard precision unit\r\n     * is evaluated, so the product of x and the standard precision unit must\r\n     * be less than 2**256. The result is rounded to the nearest increment.\r\n     */\r\n    function divideDecimalRound(uint x, uint y) internal pure returns (uint) {\r\n        return _divideDecimalRound(x, y, UNIT);\r\n    }\r\n\r\n    /**\r\n     * @return The result of safely dividing x and y. The return value is as a rounded\r\n     * high precision decimal.\r\n     *\r\n     * @dev y is divided after the product of x and the high precision unit\r\n     * is evaluated, so the product of x and the high precision unit must\r\n     * be less than 2**256. The result is rounded to the nearest increment.\r\n     */\r\n    function divideDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\r\n        return _divideDecimalRound(x, y, PRECISE_UNIT);\r\n    }\r\n\r\n    /**\r\n     * @dev Convert a standard decimal representation to a high precision one.\r\n     */\r\n    function decimalToPreciseDecimal(uint i) internal pure returns (uint) {\r\n        return i.mul(UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR);\r\n    }\r\n\r\n    /**\r\n     * @dev Convert a high precision decimal to a standard decimal representation.\r\n     */\r\n    function preciseDecimalToDecimal(uint i) internal pure returns (uint) {\r\n        uint quotientTimesTen = i / (UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR / 10);\r\n\r\n        if (quotientTimesTen % 10 >= 5) {\r\n            quotientTimesTen += 10;\r\n        }\r\n\r\n        return quotientTimesTen / 10;\r\n    }\r\n}\r\n\r\ncontract IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function mint(address account, uint256 amount) public returns (bool);\r\n\r\n    function burn(uint256 amount) public returns (bool);\r\n}\r\n\r\n\r\ncontract ELLA_Presale is Ownable {\r\n    address private ELLACoinddress;\r\n    uint256 private price;\r\n    address private messenger;\r\n\r\n    using SafeMath for uint256;\r\nusing SafeDecimalMath for uint;\r\n    constructor(address _ELLACoinddress, uint256 _initialPrice) public {\r\n        ELLACoinddress = _ELLACoinddress;\r\n        price = _initialPrice;\r\n        emit Deployed(_initialPrice, _ELLACoinddress);\r\n    }\r\n\r\n    event bought(address _buyer, uint256 _paid, uint256 _given, uint _price);\r\n    event priceChanged(address initiator, uint256 _from, uint256 _to);\r\n    event messengerChanged(address _from, address _to);\r\n    event Deployed(uint256 _initialPrice, address _ELLACoinddress);\r\n    modifier onlyMessenger() {\r\n        require(msg.sender == messenger, \"caller is not a messenger\");\r\n        _;\r\n    }\r\n\r\n    function updatePrice(uint256 _price) public onlyMessenger {\r\n        uint256 currentprice = price;\r\n        price = _price;\r\n        emit priceChanged(msg.sender, currentprice, _price);\r\n    }\r\n\r\n    function setMessenger(address _messenger) public onlyOwner {\r\n        address currentMessenger = messenger;\r\n        messenger = _messenger;\r\n        emit messengerChanged(currentMessenger, _messenger);\r\n    }\r\n\r\n    function setELLACoin(address _ELLACoinddress) public onlyOwner {\r\n        ELLACoinddress = _ELLACoinddress;\r\n    }\r\n\r\n    function getPrice() public view returns (uint256 _price) {\r\n        return price;\r\n    }\r\n\r\n    function buyer() public payable {\r\n        require(msg.value > 0, \"Invalid amount\");\r\n        uint256 amount = msg.value; //.mul(10**18);\r\n        IERC20 ELLACoin = IERC20(ELLACoinddress);\r\n        uint256 amountToSend = amount.divideDecimal(price).multiplyDecimal(10**18);\r\n        require(\r\n            ELLACoin.transfer(msg.sender, amountToSend),\r\n            \"Fail to send fund\"\r\n        );\r\n        emit bought(msg.sender, msg.value, amountToSend, price);\r\n    }\r\n\r\n    function withdrawAllEtherByOwner() public onlyOwner {\r\n        msg.sender.transfer(address(this).balance);\r\n    }\r\n\r\n    function getContractEtherBalance() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ELLACoinddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_initialPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_initialPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_ELLACoinddress\",\"type\":\"address\"}],\"name\":\"Deployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_paid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_given\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"bought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"messengerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"priceChanged\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyer\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractEtherBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ELLACoinddress\",\"type\":\"address\"}],\"name\":\"setELLACoin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_messenger\",\"type\":\"address\"}],\"name\":\"setMessenger\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"updatePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAllEtherByOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ELLA_Presale","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000bc7127b00f232de924f683f9340e01a9650d533000000000000000000000000000000000000000000000000025bf6196bd10000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://63aa8e60a1d653b5f9c1782d12ecbe2e2cb0114b48340d6f61d1c063b996c1cc"}]}