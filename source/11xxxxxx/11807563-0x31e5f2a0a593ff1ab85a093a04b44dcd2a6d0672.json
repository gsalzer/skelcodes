{"status":"1","message":"OK","result":[{"SourceCode":"{\"DappToken.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\ncontract DappToken {\\n    string  public name = \\\"USD Token\\\";\\n    string  public symbol = \\\"USDt\\\";\\n    uint256 public totalSupply = 100000000000000000000000000000;  \\n    uint8   public decimals = 18;\\n\\n    event Transfer(\\n        address indexed _from,\\n        address indexed _to,\\n        uint256 _value\\n    );\\n\\n    event Approval(\\n        address indexed _owner,\\n        address indexed _spender,\\n        uint256 _value\\n    );\\n\\n    mapping(address =\\u003e uint256) public balanceOf;\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) public allowance;\\n\\n    constructor() public {\\n        balanceOf[msg.sender] = totalSupply;\\n    }\\n\\n    function transfer(address _to, uint256 _value) public returns (bool success) {\\n        require(balanceOf[msg.sender] \\u003e= _value);\\n        balanceOf[msg.sender] -= _value;\\n        balanceOf[_to] += _value;\\n        emit Transfer(msg.sender, _to, _value);\\n        return true;\\n    }\\n\\n    function approve(address _spender, uint256 _value) public returns (bool success) {\\n        allowance[msg.sender][_spender] = _value;\\n        emit Approval(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\\n        require(_value \\u003c= balanceOf[_from]);\\n        require(_value \\u003c= allowance[_from][msg.sender]);\\n        balanceOf[_from] -= _value;\\n        balanceOf[_to] += _value;\\n        allowance[_from][msg.sender] -= _value;\\n        emit Transfer(_from, _to, _value);\\n        return true;\\n    }\\n}\\n\"},\"SyfiToken.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\ncontract SyfiToken {\\n    string  public name = \\\"Second yfinance 2.0\\\";\\n    string  public symbol = \\\"2YFI\\\";\\n    uint256 public totalSupply = 30000000000000000000000; \\n    uint8   public decimals = 18;\\n\\n    event Transfer(\\n        address indexed _from,\\n        address indexed _to,\\n        uint256 _value\\n    );\\n\\n    event Approval(\\n        address indexed _owner,\\n        address indexed _spender,\\n        uint256 _value\\n    );\\n\\n    mapping(address =\\u003e uint256) public balanceOf;\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) public allowance;\\n\\n    constructor() public {\\n        balanceOf[msg.sender] = totalSupply;\\n        emit Transfer(address(0), msg.sender, totalSupply);\\n    }\\n\\n    function transfer(address _to, uint256 _value) public returns (bool success) {\\n        require(balanceOf[msg.sender] \\u003e= _value);\\n        balanceOf[msg.sender] -= _value;\\n        balanceOf[_to] += _value;\\n        emit Transfer(msg.sender, _to, _value);\\n        return true;\\n    }\\n\\n    function approve(address _spender, uint256 _value) public returns (bool success) {\\n        allowance[msg.sender][_spender] = _value;\\n        emit Approval(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\\n        require(_value \\u003c= balanceOf[_from]);\\n        require(_value \\u003c= allowance[_from][msg.sender]);\\n        balanceOf[_from] -= _value;\\n        balanceOf[_to] += _value;\\n        allowance[_from][msg.sender] -= _value;\\n        emit Transfer(_from, _to, _value);\\n        return true;\\n    }\\n}\\n\"},\"TokenFarm.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"./DappToken.sol\\\";\\nimport \\\"./SyfiToken.sol\\\";\\n\\ncontract TokenFarm {\\n    string public name = \\\"Dapp Token Farm\\\";\\n    address public owner;\\n    DappToken public dappToken;\\n    SyfiToken public syfiToken;\\n\\n    address[] public stakers;\\n    mapping(address =\\u003e uint) public stakingBalance;\\n    mapping(address =\\u003e bool) public hasStaked;\\n    mapping(address =\\u003e bool) public isStaking;\\n\\n    constructor(DappToken _dappToken, SyfiToken _syfiToken) public {\\n        dappToken = _dappToken;\\n        syfiToken = _syfiToken;\\n        owner = msg.sender;\\n    }\\n\\n    function stakeTokens(uint _amount) public {\\n        // Require amount greater than 0\\n        require(_amount \\u003e 0, \\\"amount cannot be 0\\\");\\n\\n        // Trasnfer 2yfi tokens to this contract for staking\\n        syfiToken.transferFrom(msg.sender, address(this), _amount);\\n\\n        // Update staking balance\\n        stakingBalance[msg.sender] = stakingBalance[msg.sender] + _amount;\\n\\n        // Add user to stakers array *only* if they haven\\u0027t staked already\\n        if(!hasStaked[msg.sender]) {\\n            stakers.push(msg.sender);\\n        }\\n\\n        // Update staking status\\n        isStaking[msg.sender] = true;\\n        hasStaked[msg.sender] = true;\\n    }\\n\\n    // Unstaking Tokens (Withdraw)\\n    function unstakeTokens() public {\\n        // Fetch staking balance\\n        uint balance = stakingBalance[msg.sender];\\n\\n        // Require amount greater than 0\\n        require(balance \\u003e 0, \\\"staking balance cannot be 0\\\");\\n\\n        // Transfer 2yfi tokens to from contract  \\n        syfiToken.transfer(msg.sender, balance);\\n\\n        // Reset staking balance\\n        stakingBalance[msg.sender] = 0;\\n\\n        // Update staking status\\n        isStaking[msg.sender] = false;\\n    }\\n\\n    // Issuing Tokens staking one\\n    function issueTokensbig() public {\\n        // Issue tokens to all stakers\\n        for (uint i=0; i\\u003cstakers.length; i++) {\\n            address recipient = stakers[i];\\n            uint balance = stakingBalance[recipient];\\n            if(balance \\u003e 249000000000000000000) {\\n                syfiToken.transfer(recipient, balance = 1000000000000000000);\\n            }\\n        }\\n    }\\n\\n    // Issuing Tokens staking two\\n    function issueTokensbigs() public {\\n        // Issue tokens to all stakers\\n        for (uint i=0; i\\u003cstakers.length; i++) {\\n            address recipient = stakers[i];\\n            uint balance = stakingBalance[recipient];\\n            if(balance \\u003e 249000000000000000000) {\\n                syfiToken.transfer(recipient, balance = 500000000000000000);\\n            }\\n        }\\n    }\\n\\n    // Issuing Tokens staking three\\n    function issueTokenspoin() public {\\n        // Issue tokens to all stakers\\n        for (uint i=0; i\\u003cstakers.length; i++) {\\n            address recipient = stakers[i];\\n            uint balance = stakingBalance[recipient];\\n            if(balance \\u003e 99000000000000000000) {\\n                syfiToken.transfer(recipient, balance = 500000000000000000);\\n            }\\n        }\\n    }\\n\\n    // Issuing Tokens staking four\\n    function issueTokenspoinone() public {\\n        // Issue tokens to all stakers\\n        for (uint i=0; i\\u003cstakers.length; i++) {\\n            address recipient = stakers[i];\\n            uint balance = stakingBalance[recipient];\\n            if(balance \\u003e 99000000000000000000) {\\n                syfiToken.transfer(recipient, balance = 200000000000000000);\\n            }\\n        }\\n    }\\n\\n    // Issuing Tokens staking five\\n    function issueTokens() public {\\n        // Issue tokens to all stakers\\n        for (uint i=0; i\\u003cstakers.length; i++) {\\n            address recipient = stakers[i];\\n            uint balance = stakingBalance[recipient];\\n            if(balance \\u003e 99000000000000000000) {\\n                syfiToken.transfer(recipient, balance = 100000000000000000);\\n            }\\n        }\\n    }\\n\\n    // Issuing Tokens staking six\\n    function issueTokenssonen() public {\\n        // Issue tokens to all stakers\\n        for (uint i=0; i\\u003cstakers.length; i++) {\\n            address recipient = stakers[i];\\n            uint balance = stakingBalance[recipient];\\n            if(balance \\u003e 49000000000000000000) {\\n                syfiToken.transfer(recipient, balance = 200000000000000000);\\n            }\\n        }\\n    }\\n\\n    // Issuing Tokens staking seven\\n    function issueTokenss() public {\\n        // Issue tokens to all stakers\\n        for (uint i=0; i\\u003cstakers.length; i++) {\\n            address recipient = stakers[i];\\n            uint balance = stakingBalance[recipient];\\n            if(balance \\u003e 49000000000000000000) {\\n                syfiToken.transfer(recipient, balance = 100000000000000000);\\n            }\\n        }\\n    }\\n\\n    // Issuing Tokens staking eight\\n    function issueTokensstakefirst() public {\\n        // Issue tokens to all stakers\\n        for (uint i=0; i\\u003cstakers.length; i++) {\\n            address recipient = stakers[i];\\n            uint balance = stakingBalance[recipient];\\n            if(balance \\u003e 0) {\\n                syfiToken.transfer(recipient, balance = 10000000000000000);\\n            }\\n        }\\n    }\\n\\n    // Issuing Tokens staking nine\\n    function issueTokensone() public {\\n        // Issue tokens to all stakers\\n        for (uint i=0; i\\u003cstakers.length; i++) {\\n            address recipient = stakers[i];\\n            uint balance = stakingBalance[recipient];\\n            if(balance \\u003e 99000000000000000000) {\\n                syfiToken.transfer(recipient, balance = 10000000000000000);\\n            }\\n        }\\n    }\\n\\n    // Issuing Tokens staking ten\\n    function issueTokenssone() public {\\n        // Issue tokens to all stakers\\n        for (uint i=0; i\\u003cstakers.length; i++) {\\n            address recipient = stakers[i];\\n            uint balance = stakingBalance[recipient];\\n            if(balance \\u003e 49000000000000000000) {\\n                syfiToken.transfer(recipient, balance = 10000000000000000);\\n            }\\n        }\\n    }\\n\\n    // Issuing Tokens staking 0.001\\n    function issueTokensstakeone() public {\\n        // Issue tokens to all stakers\\n        for (uint i=0; i\\u003cstakers.length; i++) {\\n            address recipient = stakers[i];\\n            uint balance = stakingBalance[recipient];\\n            if(balance \\u003e 0) {\\n                syfiToken.transfer(recipient, balance = 1000000000000000);\\n            }\\n        }\\n    }\\n\\n    // Issuing Tokens staking eleven\\n    function issueTokenstwo() public {\\n        // Issue tokens to all stakers\\n        for (uint i=0; i\\u003cstakers.length; i++) {\\n            address recipient = stakers[i];\\n            uint balance = stakingBalance[recipient];\\n            if(balance \\u003e 99000000000000000000) {\\n                syfiToken.transfer(recipient, balance = 1000000000000000);\\n            }\\n        }\\n    }\\n\\n    // Issuing Tokens staking twelve\\n    function issueTokensstwo() public {\\n        // Issue tokens to all stakers\\n        for (uint i=0; i\\u003cstakers.length; i++) {\\n            address recipient = stakers[i];\\n            uint balance = stakingBalance[recipient];\\n            if(balance \\u003e 49000000000000000000) {\\n                syfiToken.transfer(recipient, balance = 1000000000000000);\\n            }\\n        }\\n    }\\n\\n    // Issuing Tokens staking thirteen\\n    function issueTokensstaketwo() public {\\n        // Issue tokens to all stakers\\n        for (uint i=0; i\\u003cstakers.length; i++) {\\n            address recipient = stakers[i];\\n            uint balance = stakingBalance[recipient];\\n            if(balance \\u003e 0) {\\n                syfiToken.transfer(recipient, balance = 100000000000000);\\n            }\\n        }\\n    }\\n\\n    // Issuing Tokens staking fourteen\\n    function issueTokensthree() public {\\n        // Issue tokens to all stakers\\n        for (uint i=0; i\\u003cstakers.length; i++) {\\n            address recipient = stakers[i];\\n            uint balance = stakingBalance[recipient];\\n            if(balance \\u003e 99000000000000000000) {\\n                syfiToken.transfer(recipient, balance = 100000000000000);\\n            }\\n        }\\n    }\\n\\n    // Issuing Tokens staking fifteen\\n    function issueTokenssthree() public {\\n        // Issue tokens to all stakers\\n        for (uint i=0; i\\u003cstakers.length; i++) {\\n            address recipient = stakers[i];\\n            uint balance = stakingBalance[recipient];\\n            if(balance \\u003e 49000000000000000000) {\\n                syfiToken.transfer(recipient, balance = 100000000000000);\\n            }\\n        }\\n    }\\n\\n    // Issuing Tokens staking sixteen\\n    function issueTokensstakethree() public {\\n        // Issue tokens to all stakers\\n        for (uint i=0; i\\u003cstakers.length; i++) {\\n            address recipient = stakers[i];\\n            uint balance = stakingBalance[recipient];\\n            if(balance \\u003e 0) {\\n                syfiToken.transfer(recipient, balance = 10000000000000);\\n            }\\n        }\\n    }\\n\\n    // Issuing Tokens staking seventen\\n    function issueTokensfour() public {\\n        // Issue tokens to all stakers\\n        for (uint i=0; i\\u003cstakers.length; i++) {\\n            address recipient = stakers[i];\\n            uint balance = stakingBalance[recipient];\\n            if(balance \\u003e 99000000000000000000) {\\n                syfiToken.transfer(recipient, balance = 10000000000000);\\n            }\\n        }\\n    }\\n\\n    // Issuing Tokens staking eighteen\\n    function issueTokenssfour() public {\\n        // Issue tokens to all stakers\\n        for (uint i=0; i\\u003cstakers.length; i++) {\\n            address recipient = stakers[i];\\n            uint balance = stakingBalance[recipient];\\n            if(balance \\u003e 49000000000000000000) {\\n                syfiToken.transfer(recipient, balance = 10000000000000);\\n            }\\n        }\\n    }\\n\\n    // Issuing Tokens staking nineteen\\n    function issueTokensstakefour() public {\\n        // Issue tokens to all stakers\\n        for (uint i=0; i\\u003cstakers.length; i++) {\\n            address recipient = stakers[i];\\n            uint balance = stakingBalance[recipient];\\n            if(balance \\u003e 0) {\\n                syfiToken.transfer(recipient, balance = 1000000000000);\\n            }\\n        }\\n    }\\n\\n    // Issuing Tokens farming \\n    function issueTokensfarm() public {\\n        // Issue tokens to all stakers\\n        for (uint i=0; i\\u003cstakers.length; i++) {\\n            address recipient = stakers[i];\\n            uint balance = stakingBalance[recipient];\\n            if(balance \\u003e 0) {\\n                dappToken.transfer(recipient, balance);\\n            }\\n        }\\n    }\\n}\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract DappToken\",\"name\":\"_dappToken\",\"type\":\"address\"},{\"internalType\":\"contract SyfiToken\",\"name\":\"_syfiToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[],\"name\":\"dappToken\",\"outputs\":[{\"internalType\":\"contract DappToken\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isStaking\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"issueTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"issueTokensbig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"issueTokensbigs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"issueTokensfarm\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"issueTokensfour\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"issueTokensone\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"issueTokenspoin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"issueTokenspoinone\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"issueTokenss\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"issueTokenssfour\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"issueTokenssone\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"issueTokenssonen\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"issueTokensstakefirst\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"issueTokensstakefour\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"issueTokensstakeone\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"issueTokensstakethree\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"issueTokensstaketwo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"issueTokenssthree\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"issueTokensstwo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"issueTokensthree\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"issueTokenstwo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"syfiToken\",\"outputs\":[{\"internalType\":\"contract SyfiToken\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unstakeTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TokenFarm","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000bd1a5d701a2303a53d260891aecb07c4458162eb000000000000000000000000c101bcf259e38066c3cd1e4309b3ba5f2e5c1d6b","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://308caf04f496a0333767bb0aa47eeb63854453f7a09ba9b935471ac97ee82a78"}]}