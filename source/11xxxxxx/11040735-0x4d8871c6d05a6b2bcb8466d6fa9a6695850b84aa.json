{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).cls\r\n\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n\tfunction _msgSender() internal virtual view returns (address payable) {\r\n\t\treturn msg.sender;\r\n\t}\r\n\r\n\tfunction _msgData() internal virtual view returns (bytes memory) {\r\n\t\tthis; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n\t\treturn msg.data;\r\n\t}\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n\taddress private _owner;\r\n\r\n\tevent OwnershipTransferred(\r\n\t\taddress indexed previousOwner,\r\n\t\taddress indexed newOwner\r\n\t);\r\n\r\n\t/**\r\n\t * @dev Initializes the contract setting the deployer as the initial owner.\r\n\t */\r\n\tconstructor() {\r\n\t\taddress msgSender = _msgSender();\r\n\t\t_owner = msgSender;\r\n\t\temit OwnershipTransferred(address(0), msgSender);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the address of the current owner.\r\n\t */\r\n\tfunction owner() public view returns (address) {\r\n\t\treturn _owner;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Throws if called by any account other than the owner.\r\n\t */\r\n\tmodifier onlyOwner() {\r\n\t\trequire(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Leaves the contract without owner. It will not be possible to call\r\n\t * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n\t *\r\n\t * NOTE: Renouncing ownership will leave the contract without an owner,\r\n\t * thereby removing any functionality that is only available to the owner.\r\n\t */\r\n\tfunction renounceOwnership() public virtual onlyOwner {\r\n\t\temit OwnershipTransferred(_owner, address(0));\r\n\t\t_owner = address(0);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n\t * Can only be called by the current owner.\r\n\t */\r\n\tfunction transferOwnership(address newOwner) public virtual onlyOwner {\r\n\t\trequire(\r\n\t\t\tnewOwner != address(0),\r\n\t\t\t\"Ownable: new owner is the zero address\"\r\n\t\t);\r\n\t\temit OwnershipTransferred(_owner, newOwner);\r\n\t\t_owner = newOwner;\r\n\t}\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n\t/**\r\n\t * @dev Returns the addition of two unsigned integers, reverting on\r\n\t * overflow.\r\n\t *\r\n\t * Counterpart to Solidity's `+` operator.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - Addition cannot overflow.\r\n\t */\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\trequire(c >= a, \"SafeMath: addition overflow\");\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the subtraction of two unsigned integers, reverting on\r\n\t * overflow (when the result is negative).\r\n\t *\r\n\t * Counterpart to Solidity's `-` operator.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - Subtraction cannot overflow.\r\n\t */\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn sub(a, b, \"SafeMath: subtraction overflow\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n\t * overflow (when the result is negative).\r\n\t *\r\n\t * Counterpart to Solidity's `-` operator.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - Subtraction cannot overflow.\r\n\t */\r\n\tfunction sub(\r\n\t\tuint256 a,\r\n\t\tuint256 b,\r\n\t\tstring memory errorMessage\r\n\t) internal pure returns (uint256) {\r\n\t\trequire(b <= a, errorMessage);\r\n\t\tuint256 c = a - b;\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the multiplication of two unsigned integers, reverting on\r\n\t * overflow.\r\n\t *\r\n\t * Counterpart to Solidity's `*` operator.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - Multiplication cannot overflow.\r\n\t */\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\t// Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n\t\t// benefit is lost if 'b' is also tested.\r\n\t\t// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tuint256 c = a * b;\r\n\t\trequire(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the integer division of two unsigned integers. Reverts on\r\n\t * division by zero. The result is rounded towards zero.\r\n\t *\r\n\t * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n\t * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n\t * uses an invalid opcode to revert (consuming all remaining gas).\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - The divisor cannot be zero.\r\n\t */\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn div(a, b, \"SafeMath: division by zero\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n\t * division by zero. The result is rounded towards zero.\r\n\t *\r\n\t * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n\t * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n\t * uses an invalid opcode to revert (consuming all remaining gas).\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - The divisor cannot be zero.\r\n\t */\r\n\tfunction div(\r\n\t\tuint256 a,\r\n\t\tuint256 b,\r\n\t\tstring memory errorMessage\r\n\t) internal pure returns (uint256) {\r\n\t\trequire(b > 0, errorMessage);\r\n\t\tuint256 c = a / b;\r\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n\t * Reverts when dividing by zero.\r\n\t *\r\n\t * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n\t * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n\t * invalid opcode to revert (consuming all remaining gas).\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - The divisor cannot be zero.\r\n\t */\r\n\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn mod(a, b, \"SafeMath: modulo by zero\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n\t * Reverts with custom message when dividing by zero.\r\n\t *\r\n\t * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n\t * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n\t * invalid opcode to revert (consuming all remaining gas).\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - The divisor cannot be zero.\r\n\t */\r\n\tfunction mod(\r\n\t\tuint256 a,\r\n\t\tuint256 b,\r\n\t\tstring memory errorMessage\r\n\t) internal pure returns (uint256) {\r\n\t\trequire(b != 0, errorMessage);\r\n\t\treturn a % b;\r\n\t}\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n\t/**\r\n\t * @dev Returns true if `account` is a contract.\r\n\t *\r\n\t * [IMPORTANT]\r\n\t * ====\r\n\t * It is unsafe to assume that an address for which this function returns\r\n\t * false is an externally-owned account (EOA) and not a contract.\r\n\t *\r\n\t * Among others, `isContract` will return false for the following\r\n\t * types of addresses:\r\n\t *\r\n\t *  - an externally-owned account\r\n\t *  - a contract in construction\r\n\t *  - an address where a contract will be created\r\n\t *  - an address where a contract lived, but was destroyed\r\n\t * ====\r\n\t */\r\n\tfunction isContract(address account) internal view returns (bool) {\r\n\t\t// According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n\t\t// and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n\t\t// for accounts without code, i.e. `keccak256('')`\r\n\t\tbytes32 codehash;\r\n\r\n\r\n\t\t\tbytes32 accountHash\r\n\t\t = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n\t\t// solhint-disable-next-line no-inline-assembly\r\n\t\tassembly {\r\n\t\t\tcodehash := extcodehash(account)\r\n\t\t}\r\n\t\treturn (codehash != accountHash && codehash != 0x0);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n\t * `recipient`, forwarding all available gas and reverting on errors.\r\n\t *\r\n\t * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n\t * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n\t * imposed by `transfer`, making them unable to receive funds via\r\n\t * `transfer`. {sendValue} removes this limitation.\r\n\t *\r\n\t * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n\t *\r\n\t * IMPORTANT: because control is transferred to `recipient`, care must be\r\n\t * taken to not create reentrancy vulnerabilities. Consider using\r\n\t * {ReentrancyGuard} or the\r\n\t * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n\t */\r\n\tfunction sendValue(address payable recipient, uint256 amount) internal {\r\n\t\trequire(\r\n\t\t\taddress(this).balance >= amount,\r\n\t\t\t\"Address: insufficient balance\"\r\n\t\t);\r\n\r\n\t\t// solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n\t\t(bool success, ) = recipient.call{ value: amount }(\"\");\r\n\t\trequire(\r\n\t\t\tsuccess,\r\n\t\t\t\"Address: unable to send value, recipient may have reverted\"\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Performs a Solidity function call using a low level `call`. A\r\n\t * plain`call` is an unsafe replacement for a function call: use this\r\n\t * function instead.\r\n\t *\r\n\t * If `target` reverts with a revert reason, it is bubbled up by this\r\n\t * function (like regular Solidity function calls).\r\n\t *\r\n\t * Returns the raw returned data. To convert to the expected return value,\r\n\t * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `target` must be a contract.\r\n\t * - calling `target` with `data` must not revert.\r\n\t *\r\n\t * _Available since v3.1._\r\n\t */\r\n\tfunction functionCall(address target, bytes memory data)\r\n\t\tinternal\r\n\t\treturns (bytes memory)\r\n\t{\r\n\t\treturn functionCall(target, data, \"Address: low-level call failed\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n\t * `errorMessage` as a fallback revert reason when `target` reverts.\r\n\t *\r\n\t * _Available since v3.1._\r\n\t */\r\n\tfunction functionCall(\r\n\t\taddress target,\r\n\t\tbytes memory data,\r\n\t\tstring memory errorMessage\r\n\t) internal returns (bytes memory) {\r\n\t\treturn _functionCallWithValue(target, data, 0, errorMessage);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n\t * but also transferring `value` wei to `target`.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - the calling contract must have an ETH balance of at least `value`.\r\n\t * - the called Solidity function must be `payable`.\r\n\t *\r\n\t * _Available since v3.1._\r\n\t */\r\n\tfunction functionCallWithValue(\r\n\t\taddress target,\r\n\t\tbytes memory data,\r\n\t\tuint256 value\r\n\t) internal returns (bytes memory) {\r\n\t\treturn\r\n\t\t\tfunctionCallWithValue(\r\n\t\t\t\ttarget,\r\n\t\t\t\tdata,\r\n\t\t\t\tvalue,\r\n\t\t\t\t\"Address: low-level call with value failed\"\r\n\t\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n\t * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n\t *\r\n\t * _Available since v3.1._\r\n\t */\r\n\tfunction functionCallWithValue(\r\n\t\taddress target,\r\n\t\tbytes memory data,\r\n\t\tuint256 value,\r\n\t\tstring memory errorMessage\r\n\t) internal returns (bytes memory) {\r\n\t\trequire(\r\n\t\t\taddress(this).balance >= value,\r\n\t\t\t\"Address: insufficient balance for call\"\r\n\t\t);\r\n\t\treturn _functionCallWithValue(target, data, value, errorMessage);\r\n\t}\r\n\r\n\tfunction _functionCallWithValue(\r\n\t\taddress target,\r\n\t\tbytes memory data,\r\n\t\tuint256 weiValue,\r\n\t\tstring memory errorMessage\r\n\t) private returns (bytes memory) {\r\n\t\trequire(isContract(target), \"Address: call to non-contract\");\r\n\r\n\t\t// solhint-disable-next-line avoid-low-level-calls\r\n\t\t(bool success, bytes memory returndata) = target.call{\r\n\t\t\tvalue: weiValue\r\n\t\t}(data);\r\n\t\tif (success) {\r\n\t\t\treturn returndata;\r\n\t\t} else {\r\n\t\t\t// Look for revert reason and bubble it up if present\r\n\t\t\tif (returndata.length > 0) {\r\n\t\t\t\t// The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n\t\t\t\t// solhint-disable-next-line no-inline-assembly\r\n\t\t\t\tassembly {\r\n\t\t\t\t\tlet returndata_size := mload(returndata)\r\n\t\t\t\t\trevert(add(32, returndata), returndata_size)\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\trevert(errorMessage);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n\t/**\r\n\t * @dev Returns the amount of tokens in existence.\r\n\t */\r\n\tfunction totalSupply() external view returns (uint256);\r\n\r\n\t/**\r\n\t * @dev Returns the amount of tokens owned by `account`.\r\n\t */\r\n\tfunction balanceOf(address account) external view returns (uint256);\r\n\r\n\t/**\r\n\t * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n\t *\r\n\t * Returns a boolean value indicating whether the operation succeeded.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t */\r\n\tfunction transfer(address recipient, uint256 amount)\r\n\t\texternal\r\n\t\treturns (bool);\r\n\r\n\t/**\r\n\t * @dev Returns the remaining number of tokens that `spender` will be\r\n\t * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n\t * zero by default.\r\n\t *\r\n\t * This value changes when {approve} or {transferFrom} are called.\r\n\t */\r\n\tfunction allowance(address owner, address spender)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256);\r\n\r\n\t/**\r\n\t * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n\t *\r\n\t * Returns a boolean value indicating whether the operation succeeded.\r\n\t *\r\n\t * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n\t * that someone may use both the old and the new allowance by unfortunate\r\n\t * transaction ordering. One possible solution to mitigate this race\r\n\t * condition is to first reduce the spender's allowance to 0 and set the\r\n\t * desired value afterwards:\r\n\t * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n\t *\r\n\t * Emits an {Approval} event.\r\n\t */\r\n\tfunction approve(address spender, uint256 amount) external returns (bool);\r\n\r\n\t/**\r\n\t * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n\t * allowance mechanism. `amount` is then deducted from the caller's\r\n\t * allowance.\r\n\t *\r\n\t * Returns a boolean value indicating whether the operation succeeded.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t */\r\n\tfunction transferFrom(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 amount\r\n\t) external returns (bool);\r\n\r\n\t/**\r\n\t * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n\t * another (`to`).\r\n\t *\r\n\t * Note that `value` may be zero.\r\n\t */\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\t/**\r\n\t * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n\t * a call to {approve}. `value` is the new allowance.\r\n\t */\r\n\tevent Approval(\r\n\t\taddress indexed owner,\r\n\t\taddress indexed spender,\r\n\t\tuint256 value\r\n\t);\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n\tusing SafeMath for uint256;\r\n\tusing Address for address;\r\n\r\n\tfunction safeTransfer(\r\n\t\tIERC20 token,\r\n\t\taddress to,\r\n\t\tuint256 value\r\n\t) internal {\r\n\t\t_callOptionalReturn(\r\n\t\t\ttoken,\r\n\t\t\tabi.encodeWithSelector(token.transfer.selector, to, value)\r\n\t\t);\r\n\t}\r\n\r\n\tfunction safeTransferFrom(\r\n\t\tIERC20 token,\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 value\r\n\t) internal {\r\n\t\t_callOptionalReturn(\r\n\t\t\ttoken,\r\n\t\t\tabi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Deprecated. This function has issues similar to the ones found in\r\n\t * {IERC20-approve}, and its usage is discouraged.\r\n\t *\r\n\t * Whenever possible, use {safeIncreaseAllowance} and\r\n\t * {safeDecreaseAllowance} instead.\r\n\t */\r\n\tfunction safeApprove(\r\n\t\tIERC20 token,\r\n\t\taddress spender,\r\n\t\tuint256 value\r\n\t) internal {\r\n\t\t// safeApprove should only be called when setting an initial allowance,\r\n\t\t// or when resetting it to zero. To increase and decrease it, use\r\n\t\t// 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n\t\t// solhint-disable-next-line max-line-length\r\n\t\trequire(\r\n\t\t\t(value == 0) || (token.allowance(address(this), spender) == 0),\r\n\t\t\t\"SafeERC20: approve from non-zero to non-zero allowance\"\r\n\t\t);\r\n\t\t_callOptionalReturn(\r\n\t\t\ttoken,\r\n\t\t\tabi.encodeWithSelector(token.approve.selector, spender, value)\r\n\t\t);\r\n\t}\r\n\r\n\tfunction safeIncreaseAllowance(\r\n\t\tIERC20 token,\r\n\t\taddress spender,\r\n\t\tuint256 value\r\n\t) internal {\r\n\t\tuint256 newAllowance = token.allowance(address(this), spender).add(\r\n\t\t\tvalue\r\n\t\t);\r\n\t\t_callOptionalReturn(\r\n\t\t\ttoken,\r\n\t\t\tabi.encodeWithSelector(\r\n\t\t\t\ttoken.approve.selector,\r\n\t\t\t\tspender,\r\n\t\t\t\tnewAllowance\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\tfunction safeDecreaseAllowance(\r\n\t\tIERC20 token,\r\n\t\taddress spender,\r\n\t\tuint256 value\r\n\t) internal {\r\n\t\tuint256 newAllowance = token.allowance(address(this), spender).sub(\r\n\t\t\tvalue,\r\n\t\t\t\"SafeERC20: decreased allowance below zero\"\r\n\t\t);\r\n\t\t_callOptionalReturn(\r\n\t\t\ttoken,\r\n\t\t\tabi.encodeWithSelector(\r\n\t\t\t\ttoken.approve.selector,\r\n\t\t\t\tspender,\r\n\t\t\t\tnewAllowance\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n\t * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n\t * @param token The token targeted by the call.\r\n\t * @param data The call data (encoded using abi.encode or one of its variants).\r\n\t */\r\n\tfunction _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n\t\t// We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n\t\t// we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n\t\t// the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n\t\tbytes memory returndata = address(token).functionCall(\r\n\t\t\tdata,\r\n\t\t\t\"SafeERC20: low-level call failed\"\r\n\t\t);\r\n\t\tif (returndata.length > 0) {\r\n\t\t\t// Return data is optional\r\n\t\t\t// solhint-disable-next-line max-line-length\r\n\t\t\trequire(\r\n\t\t\t\tabi.decode(returndata, (bool)),\r\n\t\t\t\t\"SafeERC20: ERC20 operation did not succeed\"\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract YW_Finance_P1 is Ownable {\r\n\tusing SafeMath for uint256;\r\n\tusing SafeERC20 for IERC20;\r\n\r\n\t/**\r\n\t * Stake section information struct\r\n\t */\r\n\tstruct Stake {\r\n\t\taddress stakeholder;\r\n\t\tuint256 createdAt;\r\n\t\tuint256 stakeAmount;\r\n\t\tuint256 lastClaimAt;\r\n\t\tuint256 canUnlockAt;\r\n\t}\r\n\r\n\tstruct StakePeriod {\r\n\t\tuint256 timestamp;\r\n\t\tuint256 stakeTotalAmount;\r\n\t}\r\n\r\n\t// Pool support tokens\r\n\taddress public _stakeTokenAddress;\r\n\t// IERC20 interfaces of support tokens\r\n\tIERC20 internal _stakeToken;\r\n\t// Pool stakeholders\r\n\taddress[] public _stakeholders;\r\n\tmapping(address => Stake) internal _userStakes;\r\n\r\n\t// Pool reward contract and IERC20 interface\r\n\taddress public _rewardTokenAddress;\r\n\tIERC20 internal _rewardToken;\r\n\t// The accumulated rewards for each stakeholder.\r\n\tmapping(address => uint256) internal _rewards;\r\n\tmapping(address => uint256) internal _paidRewards;\r\n\r\n\t// 0% per transaction. Set later\r\n\tuint256 public _rewardClaimFee = 0;\r\n\tuint256 public _transactionFeeInWei = 20000000000000000; // 0.02 ETH\r\n\tuint256 public _stakeDepositFee = 1;\r\n\r\n\t// Pool rewards\r\n\tuint256 internal _poolTotalStake = 0;\r\n\tStakePeriod[] public _stakePeriods;\r\n\tuint256 internal _poolTotalReward = 0;\r\n\tuint256 internal _poolClaimedReward = 0;\r\n\t// Last time the pool distribute rewards to all stakeholders\r\n\tuint256 public _poolStartedAt = 0; // In date time\r\n\tuint256 public _poolRewardDistributionStartedAt = 0;\r\n\tuint256 public _poolRunDuration = 0; // In seconds\r\n\tuint256 public _poolEndedAt = 0; // In seconds\r\n\tuint256 public _poolRewardPerSecondRate = 0; // In seconds\r\n\tuint256 public _poolDepositFeeAmount = 0;\r\n\r\n\t// Pool owner\r\n\taddress public pool;\r\n\tuint256 public poolDeployedAt = 0;\r\n\r\n\t// Pool developers\r\n\tmapping(address => bool) internal _developers;\r\n\tmapping(address => bool) internal _systemPools;\r\n\r\n\tconstructor(\r\n\t\taddress rewardTokenAddress,\r\n\t\taddress stakeTokenAddress,\r\n\t\tuint256 poolStartedAt,\r\n\t\tuint256 poolRunDurationInHours,\r\n\t\tuint256 initRewardAmount\r\n\t) {\r\n\t\t_rewardTokenAddress = rewardTokenAddress;\r\n\t\t_rewardToken = IERC20(rewardTokenAddress);\r\n\r\n\t\t_stakeTokenAddress = stakeTokenAddress;\r\n\t\t_stakeToken = IERC20(stakeTokenAddress);\r\n\r\n\t\t// Current block\r\n\t\tpoolDeployedAt = block.timestamp;\r\n\t\t// Current contract owner & pool\r\n\t\tpool = address(this);\r\n\t\t_poolStartedAt = poolStartedAt;\r\n\t\t_poolRunDuration = 60 * 60 * poolRunDurationInHours;\r\n\t\t_poolEndedAt = _poolStartedAt.add(_poolRunDuration);\r\n\t\t_poolTotalReward = _poolTotalReward.add(initRewardAmount);\r\n\t\t_poolRewardPerSecondRate = _poolTotalReward.div(_poolRunDuration);\r\n\t}\r\n\r\n\tevent TransferSuccessful(\r\n\t\taddress indexed _from,\r\n\t\taddress indexed _to,\r\n\t\tuint256 _amount\r\n\t);\r\n\r\n\tevent StakeSuccessful(\r\n\t\taddress indexed _stakeholder,\r\n\t\tuint256 _amount,\r\n\t\tuint256 _timestamp\r\n\t);\r\n\r\n\tevent RewardClaimSuccessful(\r\n\t\taddress indexed _stakeholder,\r\n\t\tuint256 _amount,\r\n\t\tuint256 _timestamp\r\n\t);\r\n\r\n\t/**\r\n\t * @notice Trigger to update stakeholder reward\r\n\t * @param stakeholder Address of stakeholder to update reward\r\n\t */\r\n\tmodifier updateReward(address stakeholder) {\r\n\t\tuint256 amount = 0;\r\n\t\t(uint256 currentReward, , , ) = rewardOf(stakeholder);\r\n\t\t_rewards[stakeholder] = currentReward;\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Trigger to ensure transaction fee is paid\r\n\t * @param amount Amount of current value of user transaction\r\n\t */\r\n\tmodifier validTransactionFee(uint256 amount) {\r\n\t\trequire(amount >= _transactionFeeInWei, \"Missing transaction fee.\");\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Trigger to ensure pool start before user can stake\r\n\t */\r\n\tmodifier ensurePoolStart() {\r\n\t\trequire(block.timestamp > _poolStartedAt, \"Pool is not open yet.\");\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Trigger to ensure pool available\r\n\t */\r\n\tmodifier poolAvailable() {\r\n\t\trequire(block.timestamp < _poolEndedAt, \"Pool is ended.\");\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @notice A method to set reward claim fee\r\n\t * @param _fee Reward claim fee need to set\r\n\t */\r\n\tfunction setRewardClaimFee(uint256 _fee) public onlyOwner {\r\n\t\trequire(_fee > 0, \"Reward claim fee must be none zero value.\");\r\n\t\t_rewardClaimFee = _fee;\r\n\t}\r\n\r\n\t/**\r\n\t * @notice A method to set transaction fee\r\n\t * @param _fee The transaction fee to set\r\n\t */\r\n\tfunction setTransactionFeeInWei(uint256 _fee) public onlyOwner {\r\n\t\trequire(_fee > 0, \"Reward claim fee must be none zero value.\");\r\n\t\t_transactionFeeInWei = _fee;\r\n\t}\r\n\r\n\t/**\r\n\t * @notice A method to add developer address to pool\r\n\t * @param _address Developer wallet address\r\n\t * @return bool True/False as the result\r\n\t */\r\n\tfunction addPoolDeveloper(address _address)\r\n\t\tpublic\r\n\t\tonlyOwner\r\n\t\treturns (bool)\r\n\t{\r\n\t\t_developers[_address] = true;\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @notice A method remove developer wallet from pool\r\n\t * @param _address Developer wallet address\r\n\t * @return bool True/False as the result\r\n\t */\r\n\tfunction removePoolDeveloper(address _address)\r\n\t\tpublic\r\n\t\tonlyOwner\r\n\t\treturns (bool)\r\n\t{\r\n\t\t_developers[_address] = false;\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @notice A method to add system related pools\r\n\t * @param _pool Pool wallet address to add\r\n\t * @return bool True/False as the result\r\n\t */\r\n\tfunction addSystemPool(address _pool) public onlyOwner returns (bool) {\r\n\t\t_systemPools[_pool] = true;\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @notice A method to remove pool from this pool\r\n\t * @param _pool Pool wallet address to remove\r\n\t * @return bool True/False as the result\r\n\t */\r\n\tfunction removeSystemPool(address _pool) public onlyOwner returns (bool) {\r\n\t\t_systemPools[_pool] = false;\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @notice A method to transfer remaining amount of reward to another pool (only related pools)\r\n\t * @param _toPool Pool to transfer remaining reward\r\n\t * @param _amount Amount of reward to transfer\r\n\t * @return bool True/False as the result\r\n\t */\r\n\tfunction transferUnpaidRewardsToPool(address _toPool, uint256 _amount)\r\n\t\tpublic\r\n\t\tonlyOwner\r\n\t\treturns (bool)\r\n\t{\r\n\t\trequire(\r\n\t\t\tblock.timestamp > _poolEndedAt,\r\n\t\t\t\"This pool is active can not transfer rewards to another.\"\r\n\t\t);\r\n\t\trequire(\r\n\t\t\t_developers[_toPool] == true,\r\n\t\t\t\"Invalid pool address to transfer rewards.\"\r\n\t\t);\r\n\t\tuint256 balance = _rewardToken.balanceOf(pool);\r\n\t\trequire(balance >= _amount, \"Balance is not enough to transfer.\");\r\n\t\t_rewardToken.safeTransfer(_toPool, _amount);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice A method to detect if an address is stakeholder wallet or not\r\n\t * @param _address Pool to transfer remaining reward\r\n\t * @return exists_ True/False as the result\r\n\t * @return index_ Index of stakeholder in the pool\r\n\t */\r\n\tfunction isStakeholder(address _address)\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns (bool exists_, uint256 index_)\r\n\t{\r\n\t\tfor (uint256 s = 0; s < _stakeholders.length; s += 1) {\r\n\t\t\tif (_address == _stakeholders[s]) return (true, s);\r\n\t\t}\r\n\r\n\t\treturn (false, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice A method to add new stakeholder/update existed stakeholder of the pool\r\n\t * @param _stakeholder Pool to transfer remaining reward\r\n\t * @param _amount Pool to transfer remaining reward\r\n\t * @param _timestamp Pool to transfer remaining reward\r\n\t */\r\n\tfunction addOrUpdateStakeholder(\r\n\t\taddress _stakeholder,\r\n\t\tuint256 _amount,\r\n\t\tuint256 _timestamp\r\n\t) internal returns (uint256) {\r\n\t\t(bool exists_, ) = isStakeholder(_stakeholder);\r\n\t\tif (!exists_) {\r\n\t\t\t_stakeholders.push(_stakeholder);\r\n\r\n\t\t\tStake memory newStake = Stake({\r\n\t\t\t\tstakeholder: _stakeholder,\r\n\t\t\t\tcreatedAt: _timestamp,\r\n\t\t\t\tstakeAmount: _amount,\r\n\t\t\t\tlastClaimAt: 0,\r\n\t\t\t\tcanUnlockAt: _poolEndedAt\r\n\t\t\t});\r\n\r\n\t\t\t_userStakes[_stakeholder] = newStake;\r\n\t\t\t_rewards[_stakeholder] = 0;\r\n\t\t\treturn _amount;\r\n\t\t}\r\n\r\n\t\t// If stakeholder add new amount of stake tokens. Paid current reward to them and update new stake tokens of stakeholder\r\n\t\tclaimRewardInternal(_stakeholder, _timestamp);\r\n\t\t_userStakes[_stakeholder].lastClaimAt = _timestamp;\r\n\t\t_userStakes[_stakeholder].createdAt = _timestamp;\r\n\t\t_userStakes[_stakeholder].stakeAmount = _userStakes[_stakeholder]\r\n\t\t\t.stakeAmount\r\n\t\t\t.add(_amount);\r\n\r\n\t\treturn _amount;\r\n\t}\r\n\r\n\t/**\r\n\t * @notice A method to take token\r\n\t * @param _amount Amount of token to stake\r\n\t * @return success_ True/False as result\r\n\t * @return stakeAmount_ Succeed stake amount\r\n\t */\r\n\tfunction stake(uint256 _amount)\r\n\t\tpublic\r\n\t\tpayable\r\n\t\tupdateReward(msg.sender)\r\n\t\tvalidTransactionFee(msg.value)\r\n\t\tpoolAvailable\r\n\t\tensurePoolStart\r\n\t\treturns (bool success_, uint256 stakeAmount_)\r\n\t{\r\n\t\taddress stakeholder = msg.sender;\r\n\t\trequire(_amount > 0, \"Staking token amount must be none zero value.\");\r\n\r\n\t\tuint256 _stakeAmount = _amount;\r\n\t\tif (_stakeDepositFee > 0) {\r\n\t\t\tuint256 _fee = _amount.mul(_stakeDepositFee).div(100);\r\n\t\t\t_stakeAmount = _amount.sub(_fee);\r\n\t\t\t_poolDepositFeeAmount = _poolDepositFeeAmount.add(_fee);\r\n\t\t}\r\n\r\n\t\tuint256 allowance = _stakeToken.allowance(msg.sender, pool);\r\n\t\trequire(\r\n\t\t\tallowance >= _amount,\r\n\t\t\t\"You have reach the token allowance to transfer to contract pool. Please approve and try again.\"\r\n\t\t);\r\n\r\n\t\t_stakeToken.safeTransferFrom(stakeholder, pool, _amount);\r\n\t\temit TransferSuccessful(stakeholder, pool, _amount);\r\n\r\n\t\tuint256 timestamp = block.timestamp;\r\n\t\t// Reset lifetime of pool if first stakeholder stake their tokens\r\n\t\t// to make sure all reward will be distributed to all stakeholders\r\n\t\tif (_stakeholders.length == 0) {\r\n\t\t\t_poolRewardDistributionStartedAt = timestamp;\r\n\t\t\t_poolEndedAt = timestamp.add(_poolRunDuration);\r\n\t\t}\r\n\r\n\t\tuint256 addToTotalAmount = addOrUpdateStakeholder(\r\n\t\t\tstakeholder,\r\n\t\t\t_stakeAmount,\r\n\t\t\ttimestamp\r\n\t\t);\r\n\t\temit StakeSuccessful(stakeholder, _stakeAmount, timestamp);\r\n\t\t_poolTotalStake = _poolTotalStake.add(addToTotalAmount);\r\n\t\treturn (true, _stakeAmount);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice A method to claim reward of stakeholder. Internal call only\r\n\t * @param _stakeholder Stakeholder address to claim reward\r\n\t * @param _timestamp The block timestamp\r\n\t */\r\n\tfunction claimRewardInternal(address _stakeholder, uint256 _timestamp)\r\n\t\tinternal\r\n\t\treturns (bool claimSuccess_, uint256 claimedAmount_)\r\n\t{\r\n\t\t(uint256 currentRewards, , , ) = rewardOf(_stakeholder);\r\n\t\tif (currentRewards == 0) {\r\n\t\t\treturn (true, 0);\r\n\t\t}\r\n\r\n\t\tuint256 _receiveAmount = currentRewards;\r\n\t\tif (_rewardClaimFee > 0) {\r\n\t\t\tuint256 _fee = (currentRewards.mul(_rewardClaimFee)).div(100);\r\n\t\t\t_receiveAmount = currentRewards.sub(_fee);\r\n\t\t}\r\n\r\n\t\t_rewards[_stakeholder] = 0;\r\n\t\t_paidRewards[_stakeholder] = _paidRewards[_stakeholder].add(\r\n\t\t\tcurrentRewards\r\n\t\t);\r\n\t\t_rewardToken.safeTransfer(_stakeholder, _receiveAmount);\r\n\t\t_poolClaimedReward = _poolClaimedReward.add(currentRewards);\r\n\t\t_userStakes[_stakeholder].lastClaimAt = _timestamp;\r\n\t\temit RewardClaimSuccessful(_stakeholder, _receiveAmount, _timestamp);\r\n\t\treturn (true, currentRewards);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice A method to claim reward\r\n\t * @return success_ True/False as result\r\n\t * @return amount_ Claimable amount\r\n\t */\r\n\tfunction claimReward()\r\n\t\tpublic\r\n\t\tpayable\r\n\t\tupdateReward(msg.sender)\r\n\t\tvalidTransactionFee(msg.value)\r\n\t\tensurePoolStart\r\n\t\treturns (bool success_, uint256 amount_)\r\n\t{\r\n\t\taddress stakeholder = msg.sender;\r\n\t\tuint256 timestamp = block.timestamp;\r\n\t\t(bool claimSuccess_, uint256 claimedAmount_) = claimRewardInternal(\r\n\t\t\tstakeholder,\r\n\t\t\ttimestamp\r\n\t\t);\r\n\t\treturn (claimSuccess_, claimedAmount_);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice A method to withdraw stake tokens\r\n\t * @return success_ True/False as result\r\n\t * @return withdrawAmount_ Withdraw amount\r\n\t */\r\n\tfunction withdrawAndClaimReward()\r\n\t\tpublic\r\n\t\tpayable\r\n\t\t// updateReward(msg.sender)\r\n\t\tvalidTransactionFee(msg.value)\r\n\t\tensurePoolStart\r\n\t\treturns (bool success_, uint256 withdrawAmount_)\r\n\t{\r\n\t\taddress _stakeholder = msg.sender;\r\n\t\tuint256 _timestamp = block.timestamp;\r\n\t\t(bool exists_, ) = isStakeholder(_stakeholder);\r\n\t\trequire(exists_, \"You are not stakeholder of this pool.\");\r\n\t\trequire(\r\n\t\t\t_userStakes[_stakeholder].stakeAmount > 0,\r\n\t\t\t\"You have withdraw your token.\"\r\n\t\t);\r\n\r\n\t\tuint256 _withdrawAmount = _userStakes[_stakeholder].stakeAmount;\r\n\t\trequire(\r\n\t\t\tblock.timestamp > _userStakes[_stakeholder].canUnlockAt,\r\n\t\t\t\"Tokens are in locked. Please wait until it's released.\"\r\n\t\t);\r\n\r\n\t\t// Transfer reward if any\r\n\t\t(bool claimSuccess_, ) = claimRewardInternal(_stakeholder, _timestamp);\r\n\r\n\t\tif (!claimSuccess_) {\r\n\t\t\treturn (false, 0);\r\n\t\t}\r\n\r\n\t\t_userStakes[_stakeholder].stakeAmount = 0;\r\n\t\t// Transfer stake tokens\r\n\t\t_stakeToken.safeTransfer(_stakeholder, _withdrawAmount);\r\n\t\treturn (true, _withdrawAmount);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice A method to withdraw stake tokens fee to pay for pool development team\r\n\t * @param toAddress Add ress to receive deposit fee\r\n\t */\r\n\tfunction withdrawDepositFee(address toAddress) public onlyOwner {\r\n\t\tuint256 balanceOfPool = _stakeToken.balanceOf(pool);\r\n\t\trequire(\r\n\t\t\tbalanceOfPool >= _poolDepositFeeAmount,\r\n\t\t\t\"Balance is not enough to withdraw.\"\r\n\t\t);\r\n\t\t_stakeToken.safeTransfer(toAddress, _poolDepositFeeAmount);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice A method to get reward of stakeholder\r\n\t * @param _stakeholder Pool to transfer remaining reward\r\n\t */\r\n\tfunction rewardOf(address _stakeholder)\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns (\r\n\t\t\tuint256 reward_,\r\n\t\t\tuint256 stakeAmount_,\r\n\t\t\tuint256 userStakePoolSeconds_,\r\n\t\t\tuint256 claimedReward_\r\n\t\t)\r\n\t{\r\n\t\tif (_poolRewardDistributionStartedAt == 0) {\r\n\t\t\treturn (0, 0, 0, 0);\r\n\t\t}\r\n\r\n\t\tif (_userStakes[_stakeholder].stakeAmount == 0) {\r\n\t\t\treturn (0, 0, 0, 0);\r\n\t\t}\r\n\r\n\t\tif (_poolTotalStake == 0) {\r\n\t\t\treturn (0, 0, 0, 0);\r\n\t\t}\r\n\r\n\t\tuint256 lastTimePeriod = 0;\r\n\t\tif (block.timestamp > _poolEndedAt) {\r\n\t\t\tlastTimePeriod = _poolEndedAt;\r\n\t\t} else {\r\n\t\t\tlastTimePeriod = block.timestamp;\r\n\t\t}\r\n\r\n\t\tuint256 userStakePoolSeconds = 0;\r\n\t\tif (_userStakes[_stakeholder].lastClaimAt > 0) {\r\n\t\t\tuserStakePoolSeconds = lastTimePeriod.sub(\r\n\t\t\t\t_userStakes[_stakeholder].lastClaimAt\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\tuserStakePoolSeconds = lastTimePeriod.sub(\r\n\t\t\t\t_userStakes[_stakeholder].createdAt\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tif (userStakePoolSeconds == 0) {\r\n\t\t\treturn (0, 0, 0, 0);\r\n\t\t}\r\n\r\n\t\tuint256 availableReward = _userStakes[_stakeholder]\r\n\t\t\t.stakeAmount\r\n\t\t\t.mul(_poolRewardPerSecondRate.mul(userStakePoolSeconds))\r\n\t\t\t.div(_poolTotalStake);\r\n\r\n\t\treturn (\r\n\t\t\tavailableReward,\r\n\t\t\t_userStakes[_stakeholder].stakeAmount,\r\n\t\t\tuserStakePoolSeconds,\r\n\t\t\t_paidRewards[_stakeholder]\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice A method to get pool distributed reward\r\n\t * @param timestamp The timestamp to get distributed reward\r\n\t * @return uint256 The pool distributed reward\r\n\t */\r\n\tfunction getPoolDistributedReward(uint256 timestamp)\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n\t\tif (_stakeholders.length == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tif (timestamp < _poolStartedAt) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tif (_poolRewardDistributionStartedAt == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tuint256 lastTimePeriod = 0;\r\n\t\tif (block.timestamp > _poolEndedAt) {\r\n\t\t\tlastTimePeriod = _poolEndedAt;\r\n\t\t} else {\r\n\t\t\tlastTimePeriod = block.timestamp;\r\n\t\t}\r\n\r\n\t\tuint256 poolSpentSeconds = lastTimePeriod.sub(\r\n\t\t\t_poolRewardDistributionStartedAt\r\n\t\t);\r\n\r\n\t\treturn _poolRewardPerSecondRate.mul(poolSpentSeconds);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice A method to withdraw fee by developer (Use for development)\r\n\t * @param _amount Amount to withdraw\r\n\t * @return bool True/False as result\r\n\t */\r\n\tfunction developerWithdraw(uint256 _amount) public returns (bool) {\r\n\t\trequire(msg.sender != pool, \"Invalid address to withdraw.\");\r\n\t\trequire(\r\n\t\t\t_developers[msg.sender] == true,\r\n\t\t\t\"Your are not a developer of this pool.\"\r\n\t\t);\r\n\r\n\t\trequire(address(this).balance > _amount, \"Invalid amount to withdraw\");\r\n\t\tmsg.sender.transfer(_amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @notice A method to add new stakeholder/update existed stakeholder of the pool\r\n\t */\r\n\tfunction myPoolInformation()\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns (\r\n\t\t\taddress address_,\r\n\t\t\tuint256 stakeAmount_,\r\n\t\t\tuint256 createdAt_,\r\n\t\t\tuint256 lastClaimAt_,\r\n\t\t\tuint256 reward_,\r\n\t\t\tuint256 claimedReward_,\r\n\t\t\tuint256 canUnlockWithdrawAt\r\n\t\t)\r\n\t{\r\n\t\taddress stakeholder = msg.sender;\r\n\t\t(bool exists_, ) = isStakeholder(stakeholder);\r\n\t\tif (!exists_) {\r\n\t\t\treturn (\r\n\t\t\t\t0x0000000000000000000000000000000000000000,\r\n\t\t\t\t0,\r\n\t\t\t\t0,\r\n\t\t\t\t0,\r\n\t\t\t\t0,\r\n\t\t\t\t0,\r\n\t\t\t\t0\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\t(uint256 _reward, , , ) = rewardOf(stakeholder);\r\n\t\tuint256 _paidReward = _paidRewards[stakeholder];\r\n\t\treturn (\r\n\t\t\t_userStakes[stakeholder].stakeholder,\r\n\t\t\t_userStakes[stakeholder].stakeAmount,\r\n\t\t\t_userStakes[stakeholder].createdAt,\r\n\t\t\t_userStakes[stakeholder].lastClaimAt,\r\n\t\t\t_reward,\r\n\t\t\t_paidReward,\r\n\t\t\t_userStakes[stakeholder].canUnlockAt\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice A method to get pool information\r\n\t * @return poolTotalReward_ The pool total rewards\r\n\t * @return poolRemainingReward_ The pool remaining rewards\r\n\t * @return poolRunDuration_ The pool lifetime duration in seconds\r\n\t * @return poolStartedAt_ The pool start date\r\n\t * @return poolEnded_ Pool status is active/inactive\r\n\t * @return poolDistributedReward_ The pool distributed rewards\r\n\t * @return poolClaimedReward_ The pool paid rewards\r\n\t * @return poolNumberOfStakeholders_ Total stakeholders of the pool\r\n\t * @return poolTotalStake_ Total stake volume of the pool\r\n\t */\r\n\tfunction getPoolInformation()\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns (\r\n\t\t\tuint256 poolTotalReward_,\r\n\t\t\tuint256 poolRemainingReward_,\r\n\t\t\tuint256 poolRunDuration_,\r\n\t\t\tuint256 poolStartedAt_,\r\n\t\t\tbool poolEnded_,\r\n\t\t\tuint256 poolDistributedReward_,\r\n\t\t\tuint256 poolClaimedReward_,\r\n\t\t\tuint256 poolNumberOfStakeholders_,\r\n\t\t\tuint256 poolTotalStake_,\r\n\t\t\tuint256 poolRewardPerSecond_,\r\n\t\t\tuint256 poolEndedAt_\r\n\t\t)\r\n\t{\r\n\t\tuint256 _poolNumberOfStakeholders = _stakeholders.length;\r\n\t\tuint256 _poolDistributedReward = getPoolDistributedReward(\r\n\t\t\tblock.timestamp\r\n\t\t);\r\n\t\tuint256 _poolRemainingReward = _poolTotalReward.sub(\r\n\t\t\t_poolDistributedReward\r\n\t\t);\r\n\r\n\t\tbool _poolEnded = block.timestamp > _poolEndedAt;\r\n\t\treturn (\r\n\t\t\t_poolTotalReward,\r\n\t\t\t_poolRemainingReward,\r\n\t\t\t_poolRunDuration,\r\n\t\t\t_poolStartedAt,\r\n\t\t\t_poolEnded,\r\n\t\t\t_poolDistributedReward,\r\n\t\t\t_poolClaimedReward,\r\n\t\t\t_poolNumberOfStakeholders,\r\n\t\t\t_poolTotalStake,\r\n\t\t\t_poolRewardPerSecondRate,\r\n\t\t\t_poolEndedAt\r\n\t\t);\r\n\t}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakeTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolStartedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolRunDurationInHours\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initRewardAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_stakeholder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"RewardClaimSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_stakeholder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"StakeSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TransferSuccessful\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_poolDepositFeeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_poolEndedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_poolRewardDistributionStartedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_poolRewardPerSecondRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_poolRunDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_poolStartedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rewardClaimFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rewardTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_stakeDepositFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_stakePeriods\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeTotalAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_stakeTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_stakeholders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_transactionFeeInWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addPoolDeveloper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"addSystemPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success_\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"developerWithdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getPoolDistributedReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolInformation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"poolTotalReward_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolRemainingReward_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolRunDuration_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolStartedAt_\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"poolEnded_\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"poolDistributedReward_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolClaimedReward_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolNumberOfStakeholders_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolTotalStake_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolRewardPerSecond_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolEndedAt_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isStakeholder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exists_\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"index_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"myPoolInformation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdAt_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimAt_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedReward_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"canUnlockWithdrawAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolDeployedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removePoolDeveloper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"removeSystemPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeholder\",\"type\":\"address\"}],\"name\":\"rewardOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userStakePoolSeconds_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedReward_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setRewardClaimFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setTransactionFeeInWei\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success_\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount_\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferUnpaidRewardsToPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAndClaimReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success_\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmount_\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"}],\"name\":\"withdrawDepositFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"YW_Finance_P1","CompilerVersion":"v0.7.0+commit.9e61f92b","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000007b804b703dd32a549afe677c90a1f4516642617e000000000000000000000000003cf90ba9c49fd38ce20a2395ee0276bafef125000000000000000000000000000000000000000000000000000000005f84616000000000000000000000000000000000000000000000000000000000000000a8000000000000000000000000000000000000000000000000000000003b9aca00","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://f058379fadc3cfa9942bc9d02551627e37a0eff69fe1e588d1c9c2f61dfd60eb"}]}