{"status":"1","message":"OK","result":[{"SourceCode":"// File: localhost/contracts/interfaces/IWETH.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function withdraw(uint wad) external;\r\n}\r\n// File: localhost/contracts/access/Context.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n// File: localhost/contracts/access/Ownable.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function initialize() public {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n// File: localhost/contracts/interfaces/ICurve.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\nabstract contract ICurveFiCurve {\r\n    \r\n    function exchange (\r\n        int128 i,\r\n        int128 j,\r\n        uint256 dx,\r\n        uint256 min_dy\r\n    ) external virtual;\r\n\r\n    function get_dy_underlying(int128 i, int128 j, uint256 dx)\r\n        external virtual view returns (uint256 out);\r\n        \r\n    function get_dy(int128 i, int128 j, uint256 dx)\r\n        external virtual view\r\n        returns (uint256 out);\r\n    \r\n    function A() external virtual view returns (uint256);\r\n    \r\n    function balances(uint arg0) external virtual view returns (uint256);\r\n    function fee() external virtual view returns (uint256);\r\n\r\n}\r\n\r\n// File: localhost/contracts/utils/CurveUtils.sol\r\n\r\n\r\npragma solidity ^0.6.12;\r\n\r\n\r\ncontract CurveUtils {\r\n\r\naddress constant CURVE_ADDRESS = 0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7;  // 3-pool DAI/USDC/USDT\r\naddress public constant DAI_ADDRESS = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\r\naddress public constant USDC_ADDRESS = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\r\naddress public constant USDT_ADDRESS = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\r\n    \r\nICurveFiCurve public curve = ICurveFiCurve(CURVE_ADDRESS);\r\n\r\nuint private constant N_COINS = 3;\r\nuint256[N_COINS] private RATES; //\r\nuint256[N_COINS] private PRECISION_MUL;\r\nuint256 private constant LENDING_PRECISION = 10 ** 18;\r\nuint256 private constant FEE_DENOMINATOR = 10 ** 10;\r\n\r\nmapping (address => int128) public curveIndex;\r\n\r\nfunction getCurveIndex(address token) internal view returns (int128) {\r\n    // to avoid 'stack too deep' compiler issue\r\n    return curveIndex[token]-1;\r\n}\r\n\r\n/*\r\nfunction get_D(uint256[N_COINS] memory xp) public returns(uint256) {\r\n        uint256 S  = 0;\r\n        \r\n        for (uint i = 0; i < N_COINS; i++) {\r\n            S += xp[i];\r\n        }\r\n        \r\n        if (S == 0) {\r\n            return 0;\r\n        }\r\n        \r\n        uint256 Dprev = 0;\r\n        uint256 D = S;\r\n        uint256 Ann = curve.A() * N_COINS;\r\n        for (uint i = 0; i < 255; i++) {\r\n\r\n            uint256 D_P = D;\r\n            \r\n            for (uint j = 0; j < N_COINS; j++) {\r\n                D_P = D_P * D / (xp[j] * N_COINS + 1);  // +1 is to prevent /0\r\n            }\r\n            \r\n            Dprev = D;\r\n            D = (Ann * S + D_P * N_COINS) * D / ((Ann - 1) * D + (N_COINS + 1) * D_P);\r\n            // Equality with the precision of 1\r\n            if (D > Dprev) {\r\n                if ((D - Dprev) <= 1) {\r\n                    break;\r\n                }\r\n                    \r\n            } else {\r\n                if ((Dprev - D) <= 1) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return D;\r\n    }\r\n*/\r\nfunction init() virtual public {\r\n    RATES = [1000000000000000000, 1000000000000000000000000000000, 1000000000000000000000000000000];\r\n    PRECISION_MUL = [1, 1000000000000, 1000000000000];\r\n    \r\n    curveIndex[DAI_ADDRESS] = 1; // actual index is 1 less\r\n    curveIndex[USDC_ADDRESS] = 2;\r\n    curveIndex[USDT_ADDRESS] = 3;\r\n        \r\n}\r\n\r\n\r\nfunction get_D(uint256[N_COINS] memory xp, uint256 amp) public pure returns(uint256) {\r\n    uint256 S  = 0;\r\n    for (uint i = 0; i < N_COINS; i++) {\r\n        S += xp[i];\r\n    }\r\n    if (S == 0) {\r\n        return 0;\r\n    }\r\n    \r\n    uint256 Dprev = 0;\r\n    uint256 D = S;\r\n    uint256 Ann = amp * N_COINS;\r\n\r\n    for (uint i = 0; i < 255; i++) {\r\n        uint256 D_P = D;\r\n            \r\n        for (uint j = 0; j < N_COINS; j++) {\r\n            D_P = D_P * D / (xp[j] * N_COINS + 1);  // +1 is to prevent /0\r\n        }\r\n        \r\n        Dprev = D;\r\n        D = (Ann * S + D_P * N_COINS) * D / ((Ann - 1) * D + (N_COINS + 1) * D_P);\r\n        // Equality with the precision of 1\r\n        if (D > Dprev) {\r\n            if ((D - Dprev) <= 1) {\r\n                break;\r\n            }\r\n                \r\n        } else {\r\n            if ((Dprev - D) <= 1) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return D;\r\n}\r\n    \r\n    \r\n\r\nfunction get_y(uint i, uint j, uint x, uint256[N_COINS] memory xp_) public view returns(uint256) {\r\n    //x in the input is converted to the same price/precision\r\n\r\n    /*assert i != j       # dev: same coin\r\n    assert j >= 0       # dev: j below zero\r\n    assert j < N_COINS  # dev: j above N_COINS\r\n\r\n    # should be unreachable, but good for safety\r\n    assert i >= 0\r\n    assert i < N_COINS*/\r\n\r\n    uint256 amp = curve.A();\r\n    uint256 D  = get_D(xp_, amp);\r\n    uint256 c = D;\r\n    uint256 S_  = 0;\r\n    uint256 Ann = amp * N_COINS;\r\n\r\n    uint256 _x = 0;\r\n    \r\n    for (uint _i = 0; _i < N_COINS; _i++) {\r\n        if (_i == i) {\r\n            _x = x;\r\n        } else if (_i != j) {\r\n            _x = xp_[_i];\r\n        } else {\r\n            continue;\r\n        }\r\n            \r\n        S_ += _x;\r\n        c = c * D / (_x * N_COINS);\r\n    }\r\n    \r\n    c = c * D / (Ann * N_COINS);\r\n    uint256 b  = S_ + D / Ann;//  # - D\r\n    uint256 y_prev = 0;\r\n    uint256 y = D;\r\n    \r\n    for (uint _i = 0; _i < 255; _i++) {\r\n    \r\n        y_prev = y;\r\n        y = (y*y + c) / (2 * y + b - D);\r\n        //# Equality with the precision of 1\r\n        if (y > y_prev) {\r\n            if ((y - y_prev) <= 1) {\r\n                break;\r\n            } else if ((y_prev - y) <= 1) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    \r\n    return y;\r\n}\r\n   \r\n    function get_dx_underlying(uint i, uint j, uint dy) public view returns (uint256) {\r\n        //dx and dy in underlying units\r\n        //uint256[N_COINS] rates = self._stored_rates();\r\n        \r\n        uint256[N_COINS] memory xp = _xp();\r\n    \r\n        uint256[N_COINS] memory precisions = PRECISION_MUL;\r\n    \r\n        uint256 y  = xp[j] - (dy * FEE_DENOMINATOR / (FEE_DENOMINATOR - curve.fee())) * precisions[j];\r\n        uint256 x = get_y(j, i, y, xp);\r\n        uint256 dx  = (x - xp[i]) / precisions[i];\r\n        return dx;\r\n    }\r\n    \r\n\r\n    function _xp() internal view returns (uint256[N_COINS] memory) {\r\n        uint256[N_COINS] memory result  = RATES;\r\n        for (uint i = 0; i < N_COINS; i++) {\r\n            result[i] = result[i] * curve.balances(i) / LENDING_PRECISION; \r\n        }\r\n        \r\n    return result;\r\n    }\r\n    \r\n}\r\n// File: localhost/contracts/interfaces/IUniswapV2.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\ninterface IUniRouter {\r\n    function swapExactTokensForTokens(\r\n      uint amountIn,\r\n      uint amountOutMin,\r\n      address[] calldata path,\r\n      address to,\r\n      uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n      external\r\n      payable\r\n      returns (uint[] memory amounts);\r\n\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n    \r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function getPair(IERC20 tokenA, IERC20 tokenB) external view returns (IUniswapV2Exchange pair);\r\n}\r\n\r\ninterface IUniswapV2Exchange {\r\n    //event Approval(address indexed owner, address indexed spender, uint value);\r\n    //event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    //function name() external pure returns (string memory);\r\n    //function symbol() external pure returns (string memory);\r\n    //function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function getReserves() external view returns(uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    //function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    //function approve(address spender, uint value) external returns (bool);\r\n    //function transfer(address to, uint value) external returns (bool);\r\n    //function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    //function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    //function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    //function nonces(address owner) external view returns (uint);\r\n\r\n    //function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    //event Mint(address indexed sender, uint amount0, uint amount1);\r\n    //event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    /*event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    */\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    /*function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n    */\r\n}\r\n\r\n// File: localhost/contracts/utils/UniswapV2Lib.sol\r\n\r\n\r\npragma solidity ^0.6.12;\r\n\r\n\r\n\r\nlibrary UniswapV2ExchangeLib {\r\n    using SafeMath for uint256;\r\n    \r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function getReturn(\r\n        IUniswapV2Exchange exchange,\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint amountIn\r\n    ) internal view returns (uint256 result, bool needSync, bool needSkim) {\r\n        uint256 reserveIn = fromToken.balanceOf(address(exchange));\r\n        uint256 reserveOut = destToken.balanceOf(address(exchange));\r\n        (uint112 reserve0, uint112 reserve1,) = exchange.getReserves();\r\n        if (fromToken > destToken) {\r\n            (reserve0, reserve1) = (reserve1, reserve0);\r\n        }\r\n        needSync = (reserveIn < reserve0 || reserveOut < reserve1);\r\n        needSkim = !needSync && (reserveIn > reserve0 || reserveOut > reserve1);\r\n\r\n        uint256 amountInWithFee = amountIn.mul(997);\r\n        uint256 numerator = amountInWithFee.mul(min(reserveOut, reserve1));\r\n        uint256 denominator = min(reserveIn, reserve0).mul(1000).add(amountInWithFee);\r\n        result = (denominator == 0) ? 0 : numerator.div(denominator);\r\n    }\r\n}\r\n// File: localhost/contracts/interfaces/IERC20.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n// File: localhost/contracts/utils/SafeERC20.sol\r\n\r\n\r\n// File: browser/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Address.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.2;\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: browser/github/OpenZeppelin/openzeppelin-contracts/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// File: browser/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC20/SafeERC20.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\nlibrary UniversalERC20 {\r\n\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    function universalTransfer(IERC20 token, address to, uint256 amount) internal {\r\n        if (token == IERC20(0)) {\r\n            address(uint160(to)).transfer(amount);\r\n        } else {\r\n            token.safeTransfer(to, amount);\r\n        }\r\n    }\r\n\r\n    function universalApprove(IERC20 token, address to, uint256 amount) internal {\r\n        if (token != IERC20(0)) {\r\n            token.safeApprove(to, amount);\r\n        }\r\n    }\r\n\r\n    function universalTransferFrom(IERC20 token, address from, address to, uint256 amount) internal {\r\n        if (token == IERC20(0)) {\r\n            require(from == msg.sender && msg.value >= amount, \"msg.value is zero\");\r\n            if (to != address(this)) {\r\n                address(uint160(to)).transfer(amount);\r\n            }\r\n            if (msg.value > amount) {\r\n                msg.sender.transfer(msg.value.sub(amount));\r\n            }\r\n        } else {\r\n            token.safeTransferFrom(from, to, amount);\r\n        }\r\n    }\r\n\r\n    function universalBalanceOf(IERC20 token, address who) internal view returns (uint256) {\r\n        if (token == IERC20(0)) {\r\n            return who.balance;\r\n        } else {\r\n            return token.balanceOf(who);\r\n        }\r\n    }\r\n}\r\n// File: localhost/contracts/XTrinity.sol\r\n\r\n\r\npragma solidity ^0.6.12;\r\n//pragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n//import \"./interfaces/IMooniswap.sol\";\r\n\r\n//import \"./interfaces/ICurve.sol\";\r\n\r\n\r\n\r\n\r\ncontract XTrinity is Ownable, CurveUtils {\r\n    //using SafeERC20 for IERC20;\r\n    using UniversalERC20 for IERC20;\r\n    using Address for address;\r\n\r\n    using SafeMath for uint256;\r\n    using UniswapV2ExchangeLib for IUniswapV2Exchange;\r\n    \r\n    /*\r\n    function destroy() external {\r\n        selfdestruct(msg.sender);\r\n    }\r\n    \r\n    function testMooni(uint amount) external payable returns (bool success, bytes memory returndata) {\r\n        IERC20 fromToken = IERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F);\r\n        fromToken.universalTransferFrom(msg.sender, address(this), amount);\r\n\r\n        IERC20 destToken = IERC20(address(0));\r\n    \r\n        IMooniswap mooniswap = IMooniswap(0x75116BD1AB4B0065B44E1A4ea9B4180A171406ED);\r\n        \r\n\r\n        if (fromToken.allowance(address(this), address(mooniswap)) != uint(-1)) {\r\n                fromToken.universalApprove(address(mooniswap), uint(-1));\r\n            }\r\n        \r\n\r\n        //address(mooniswap).functionCall(abi.encodeWithSelector(mooniswap.swap.selector, fromToken, destToken, amount, 0, address(0)), \"Safe low-level call failed\");\r\n\r\n        \r\n        (success, returndata) = address(mooniswap).call(abi.encodeWithSelector(mooniswap.swap.selector, fromToken, destToken, amount, 0, address(0)));\r\n      \r\n        result = mooniswap.swap(fromToken,\r\n            destToken,\r\n            amount,\r\n            0,\r\n            address(0));\r\n        \r\n        //destToken.universalTransfer(msg.sender, destToken.universalBalanceOf(address(this)));\r\n    }\r\n    */\r\n    \r\n    IERC20 public constant ZERO_ADDRESS = IERC20(0x0000000000000000000000000000000000000000);\r\n    IERC20 public constant ETH_ADDRESS = IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\r\n    IERC20 public constant WETH_ADDRESS = IERC20(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n\r\n    //address public constant DAI_ADDRESS = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\r\n    //address public constant USDC_ADDRESS = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\r\n    //address public constant USDT_ADDRESS = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\r\n    \r\n    address constant UNI_FACTORY = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\r\n    address constant SUSHI_FACTORY = 0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac;\r\n    //address constant MOONI_FACTORY = 0x71CD6666064C3A1354a3B4dca5fA1E2D3ee7D303;\r\n    //address constant CURVE_ADDRESS = 0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7;  // 3-pool DAI/USDC/USDT\r\n\r\n    address constant BONUS_ADDRESS = 0x8c545be506a335e24145EdD6e01D2754296ff018;\r\n    IUniswapV2Factory constant internal uniV2 = IUniswapV2Factory(UNI_FACTORY);\r\n    IUniswapV2Factory constant internal sushi = IUniswapV2Factory(SUSHI_FACTORY);\r\n    //IMooniswapRegistry constant internal mooni = IMooniswapRegistry(MOONI_FACTORY);\r\n    //ICurveFiCurve private curve = ICurveFiCurve(CURVE_ADDRESS);\r\n    IWETH constant internal weth = IWETH(address(WETH_ADDRESS));\r\n    \r\n    uint public constant PC_DENOMINATOR = 1e5;\r\n    address[] public exchanges = [UNI_FACTORY, SUSHI_FACTORY, CURVE_ADDRESS];\r\n    uint private constant ex_count = 3;\r\n    uint public slippageFee; //1000 = 1% slippage\r\n    uint public minPc;\r\n    \r\n    //mapping (address => int128) public curveIndex;\r\n\r\n    bool private initialized;\r\n    \r\n    function isETH(IERC20 token) internal pure returns(bool) {\r\n        return (address(token) == address(ZERO_ADDRESS) || address(token) == address(ETH_ADDRESS));\r\n    }\r\n    \r\n    function isWETH(IERC20 token) internal pure returns(bool) {\r\n        return (address(token) == address(WETH_ADDRESS));\r\n    }\r\n    \r\n    function isofETH(IERC20 token) internal pure returns(bool) {\r\n        return (address(token) == address(ZERO_ADDRESS) || address(token) == address(ETH_ADDRESS) || address(token) == address(WETH_ADDRESS));\r\n    }\r\n\r\n    function min(uint a, uint b) internal pure returns (uint) {\r\n        return a < b ? a : b;\r\n    }\r\n    \r\n    function init() override virtual public {\r\n        require(!initialized, \"Is already been initialized\");\r\n        initialized = true;\r\n        Ownable.initialize(); // Do not forget this call!\r\n        _init();\r\n    }\r\n    \r\n    function _init() virtual internal {\r\n        slippageFee = 1000; //1%\r\n        minPc = 10000; // 10%\r\n        CurveUtils.init();\r\n    }    \r\n    \r\n    function reInit() virtual public onlyOwner {\r\n        _init();\r\n    }\r\n\r\n    function setMinPc (uint _minPC) external onlyOwner {\r\n        minPc = _minPC;\r\n    }\r\n    \r\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\r\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\r\n        //require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\r\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\r\n        //require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\r\n    }\r\n    \r\n    function getReserves(IERC20 fromToken, IERC20 toToken, address factory) \r\n    public view returns(uint reserveA, uint reserveB) {\r\n        IERC20 _from = isETH(fromToken) ? WETH_ADDRESS : fromToken;\r\n        IERC20 _to = isETH(toToken) ? WETH_ADDRESS : toToken;\r\n        \r\n        address fromAddress = address(_from);\r\n        address toAddress = address(_to);\r\n            \r\n        if (factory != CURVE_ADDRESS) {\r\n            //UNI\r\n            IUniswapV2Factory uniFactory = IUniswapV2Factory(factory);\r\n            \r\n            IUniswapV2Exchange pair = uniFactory.getPair(_from, _to);\r\n            \r\n            if (address(pair) != address(0)) {\r\n                (uint reserve0, uint reserve1, ) = pair.getReserves();\r\n                \r\n                (address token0,) = sortTokens(fromAddress, toAddress);\r\n                (reserveA, reserveB) = fromAddress == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\r\n                }\r\n            } else {\r\n            // MOONI\r\n            /*\r\n            IERC20 _from = isWETH(fromToken) ? ZERO_ADDRESS : fromToken;\r\n            IERC20 _to = isWETH(toToken) ? ZERO_ADDRESS : toToken;\r\n        \r\n            IMooniswap pair = mooni.pools(_from, _to);\r\n        \r\n            if (address(pair) != address(0)) {\r\n                reserveA = pair.getBalanceForAddition(_from);\r\n                reserveB = pair.getBalanceForRemoval(_to);\r\n                }\r\n            } \r\n            */ \r\n            // CURVE\r\n                int128 fromIndex = int128(curveIndex[fromAddress]);\r\n                int128 toIndex = int128(curveIndex[toAddress]);\r\n                if (fromIndex > 0 && toIndex > 0) {\r\n                    //reserveA = fromToken.balanceOf(CURVE_ADDRESS);\r\n                    //reserveB = toToken.balanceOf(CURVE_ADDRESS);\r\n                    reserveA = curve.balances(uint(getCurveIndex(fromAddress)));\r\n                    reserveB = curve.balances(uint(getCurveIndex(toAddress)));\r\n                } \r\n            }\r\n        }\r\n        \r\n    function getFullReserves (IERC20 fromToken, IERC20 toToken) public view returns \r\n    (uint fromTotal, uint destTotal, uint[ex_count] memory dist, uint[2][ex_count] memory res) {\r\n        //uint fullTotal;\r\n        \r\n        for (uint i = 0; i < ex_count; i++) {\r\n            (uint balance0, uint balance1) = getReserves(fromToken, toToken, exchanges[i]);\r\n            fromTotal += balance0;\r\n            destTotal += balance1; //balance1 is toToken and the bigger it is  the juicier for us\r\n            \r\n            (res[i][0], res[i][1]) = (balance0, balance1);\r\n        }\r\n        \r\n        if (destTotal > 0) {\r\n            for (uint i = 0; i < ex_count; i++) {\r\n                dist[i] = res[i][1].mul(PC_DENOMINATOR).div(destTotal);\r\n            }\r\n        }\r\n    }\r\n    \r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\r\n        uint amountInWithFee = amountIn.mul(997);\r\n        uint numerator = amountInWithFee.mul(reserveOut);\r\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\r\n        amountOut = numerator / denominator;\r\n    }\r\n    \r\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\r\n        //require(amountOut > 0, 'UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');\r\n        //require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\r\n        uint numerator = reserveIn.mul(amountOut).mul(1000);\r\n        uint denominator = reserveOut.sub(amountOut).mul(997);\r\n        amountIn = (numerator / denominator).add(1);\r\n    }\r\n    \r\n    function quoteDirect(IERC20 fromToken, IERC20 toToken, uint amount) public view \r\n    returns (uint returnAmount, uint[ex_count] memory swapAmounts) {\r\n        (,, uint[ex_count] memory distribution, uint[2][ex_count] memory reserves) \r\n        = getFullReserves (fromToken, toToken);\r\n        \r\n        uint addDistribution;\r\n        uint eligible;\r\n        uint lastNonZeroIndex;\r\n        \r\n        for (uint i = 0; i < ex_count; i++) {\r\n            if (distribution[i] > minPc) {\r\n                lastNonZeroIndex = i;  \r\n                eligible++;\r\n            } else {\r\n                addDistribution += distribution[i];\r\n                distribution[i] = 0;\r\n            }\r\n        }\r\n        require(eligible > 0, 'No eligible pools');\r\n        \r\n        uint remainingAmount = amount;\r\n        \r\n        for (uint i = 0; i <= lastNonZeroIndex; i++) {\r\n            if (distribution[i] > 0) {\r\n                if (addDistribution > 0) {\r\n                    distribution[i] += addDistribution.div(eligible);\r\n                }\r\n                \r\n            if (i == lastNonZeroIndex) {\r\n                swapAmounts[i] = remainingAmount;\r\n            } else {\r\n                swapAmounts[i] = amount*distribution[i]/PC_DENOMINATOR;\r\n            }\r\n            \r\n            if (exchanges[i] == CURVE_ADDRESS) {\r\n                returnAmount += curve.get_dy_underlying(getCurveIndex(address(fromToken)), \r\n                getCurveIndex(address(toToken)), swapAmounts[i]);\r\n            } else {\r\n                returnAmount += getAmountOut(swapAmounts[i], reserves[i][0], reserves[i][1]);    \r\n            }\r\n            \r\n            remainingAmount -= swapAmounts[i];\r\n            }\r\n        }\r\n    }\r\n    \r\n    function reverseQuoteDirect(IERC20 fromToken, IERC20 toToken, uint returnAmount) public view \r\n    returns (uint inputAmount, uint[ex_count] memory swapAmounts) {\r\n        (,, uint[ex_count] memory distribution, uint[2][ex_count] memory reserves) \r\n        = getFullReserves (fromToken, toToken);\r\n        \r\n        uint addDistribution;\r\n        uint eligible;\r\n        uint lastNonZeroIndex;\r\n        \r\n        for (uint i = 0; i < ex_count; i++) {\r\n            if (distribution[i] > minPc) {\r\n                lastNonZeroIndex = i;  \r\n                eligible++;\r\n            } else {\r\n                addDistribution += distribution[i];\r\n                distribution[i] = 0;\r\n            }\r\n        }\r\n        require(eligible > 0, 'No eligible pools');\r\n        \r\n        uint remainingAmount = returnAmount;\r\n        \r\n        for (uint i = 0; i <= lastNonZeroIndex; i++) {\r\n            if (distribution[i] > 0) {\r\n                if (addDistribution > 0) {\r\n                    distribution[i] += addDistribution.div(eligible);\r\n                }\r\n                \r\n            if (i == lastNonZeroIndex) {\r\n                swapAmounts[i] = remainingAmount;\r\n            } else {\r\n                swapAmounts[i] = returnAmount*distribution[i]/PC_DENOMINATOR;\r\n            }\r\n            \r\n            if (exchanges[i] == CURVE_ADDRESS) {\r\n                inputAmount += get_dx_underlying(uint(getCurveIndex(address(fromToken))), \r\n                uint(getCurveIndex(address(toToken))), swapAmounts[i]);\r\n            } else {\r\n                inputAmount += getAmountIn(swapAmounts[i], reserves[i][0], reserves[i][1]);    \r\n            }\r\n            \r\n            remainingAmount -= swapAmounts[i];\r\n            }\r\n        }\r\n    }\r\n    \r\n    function quote(IERC20 fromToken, IERC20 toToken, uint amount) public view \r\n    returns (uint returnAmount, uint[ex_count] memory swapAmountsIn, uint[ex_count] memory swapAmountsOut, bool swapVia) {\r\n    \r\n    (uint returnAmountDirect, uint[ex_count] memory swapAmounts1) = quoteDirect(fromToken, toToken, amount);\r\n        returnAmount = returnAmountDirect;\r\n        swapAmountsIn = swapAmounts1;\r\n        if (!isofETH(toToken) && !isofETH(fromToken)) {\r\n            (uint returnAmountETH, uint[ex_count] memory swapAmounts2) = quoteDirect(fromToken, WETH_ADDRESS, amount);\r\n            (uint returnAmountVia, uint[ex_count] memory swapAmounts3) = quoteDirect(WETH_ADDRESS, toToken, returnAmountETH); \r\n            \r\n            if (returnAmountVia > returnAmountDirect) {\r\n                returnAmount = returnAmountVia;\r\n                swapAmountsIn = swapAmounts2;\r\n                swapAmountsOut = swapAmounts3;\r\n                swapVia = true;\r\n            }\r\n        }\r\n    }\r\n    \r\n    function reverseQuote(IERC20 fromToken, IERC20 toToken, uint returnAmount) public view \r\n    returns (uint inputAmount, uint[ex_count] memory swapAmountsIn, uint[ex_count] memory swapAmountsOut, bool swapVia) {\r\n    \r\n    (uint inputAmountDirect, uint[ex_count] memory swapAmounts1) = reverseQuoteDirect(fromToken, toToken, returnAmount);\r\n        inputAmount = inputAmountDirect;\r\n        swapAmountsIn = swapAmounts1;\r\n        if (!isofETH(toToken) && !isofETH(fromToken)) {\r\n            (uint inputAmountETH, uint[ex_count] memory swapAmounts2) = reverseQuoteDirect(fromToken, WETH_ADDRESS, returnAmount);\r\n            (uint inputAmountVia, uint[ex_count] memory swapAmounts3) = reverseQuoteDirect(WETH_ADDRESS, toToken, inputAmountETH); \r\n            \r\n            if (inputAmountVia < inputAmountDirect) {\r\n                inputAmount = inputAmountVia;\r\n                swapAmountsIn = swapAmounts2;\r\n                swapAmountsOut = swapAmounts3;\r\n                swapVia = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    /*\r\n    function reverseQuote(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint returnAmount\r\n    ) public view returns (uint inputAmount)\r\n    {\r\n        (uint inAmount, , , ) = \r\n        quote(toToken, fromToken, returnAmount);\r\n\r\n        (uint outAmount, , , ) = \r\n        quote(fromToken, toToken, inAmount);\r\n\r\n        //extrapolate using bit smaller amount\r\n        inputAmount = returnAmount.mul(inAmount).div(outAmount);\r\n    }\r\n    */\r\n    \r\n    function executeSwap (IERC20 fromToken, IERC20 toToken, uint[ex_count] memory swapAmounts) internal returns (uint returnAmount) {\r\n        for (uint i = 0; i < swapAmounts.length; i++) {\r\n            if (swapAmounts[i] > 0) {\r\n                uint thisBalance = fromToken.universalBalanceOf(address(this));\r\n                uint swapAmount = min(thisBalance, swapAmounts[i]);\r\n                    \r\n                if (exchanges[i] != CURVE_ADDRESS) {\r\n                    returnAmount += _swapOnUniswapV2Internal(fromToken, toToken, swapAmount, exchanges[i]);\r\n                } else {\r\n                    returnAmount += _swapOnCurve(fromToken, toToken, swapAmount);\r\n                    //_swapOnMooniswap(fromToken, toToken, swapAmount);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    function swap (IERC20 fromToken, IERC20 toToken, uint amount, bool slipProtect) virtual public payable returns (uint returnAmount) {\r\n        if (isETH(fromToken)) {\r\n            amount = msg.value;\r\n            weth.deposit{value: amount}();\r\n            fromToken = WETH_ADDRESS;\r\n        }\r\n        \r\n        amount = min(fromToken.balanceOf(address(this)), amount);\r\n        \r\n        (uint returnQuoteAmount, uint[ex_count] memory swapAmountsIn, uint[ex_count] memory swapAmountsOut, bool swapVia) = \r\n        quote(fromToken, toToken, amount);\r\n\r\n        uint minAmount;\r\n        if (slipProtect) {            \r\n            uint feeSlippage = returnQuoteAmount.mul(slippageFee).div(PC_DENOMINATOR);    \r\n            minAmount = returnQuoteAmount.sub(feeSlippage);\r\n        }\r\n\r\n        if (swapVia) {\r\n            executeSwap(fromToken, WETH_ADDRESS, swapAmountsIn);\r\n            returnAmount = executeSwap(WETH_ADDRESS, toToken, swapAmountsOut);\r\n        } else {\r\n            returnAmount = executeSwap(fromToken, toToken, swapAmountsIn);\r\n        }\r\n\r\n        //returnAmount = isETH(toToken) ? toToken.balanceOf(address(this)) : address(this).balance;\r\n        //returnAmount = toToken.universalBalanceOf(address(this));\r\n\r\n        require (returnAmount >= minAmount, 'XTrinity slippage is too high');\r\n    }\r\n    // to withdraw token from the contract\r\n\r\n    function transferTokenBack(address TokenAddress)\r\n        external\r\n        onlyOwner\r\n        returns (uint returnBalance)\r\n    {\r\n        IERC20 Token = IERC20(TokenAddress);\r\n        returnBalance = Token.universalBalanceOf(address(this));\r\n        if (returnBalance > 0) {\r\n            Token.universalTransfer(msg.sender, returnBalance);\r\n        }\r\n    }\r\n    \r\n    /*\r\n    function depositWETH() public payable {\r\n        weth.deposit{value: address(this).balance}();\r\n    }\r\n    \r\n    function _swapOnMooniswap(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint amount\r\n    ) public payable{\r\n        //uint tx_value;\r\n        if (isWETH(fromToken)) {\r\n            fromToken = ZERO_ADDRESS;\r\n            weth.withdraw(amount);\r\n        }\r\n        \r\n        if (isWETH(destToken)) {\r\n            destToken = ZERO_ADDRESS;\r\n        }\r\n        \r\n        IMooniswap mooniswap = mooni.pools(\r\n            fromToken,\r\n            destToken\r\n        );\r\n        \r\n        bytes memory returndata; \r\n        if (isETH(fromToken)) {\r\n\r\n            mooniswap.swap{value: amount}(fromToken,\r\n            destToken,\r\n            amount,\r\n            0,\r\n            BONUS_ADDRESS);\r\n            \r\n            amount = address(this).balance;\r\n            returndata = address(mooniswap).functionCallWithValue(abi.encodeWithSelector(mooniswap.swap.selector, fromToken, destToken, amount, 0, BONUS_ADDRESS), amount, \"Safe value low-level call failed\");\r\n            \r\n        } else {\r\n            if (fromToken.allowance(address(this), address(mooniswap)) != uint(-1)) {\r\n                fromToken.safeApprove(address(mooniswap), uint(-1));\r\n                amount = fromToken.balanceOf(address(this));\r\n            }\r\n            \r\n            returndata = address(mooniswap).functionCall(abi.encodeWithSelector(mooniswap.swap.selector, fromToken, destToken, amount, 0, BONUS_ADDRESS), \"Safe low-level call failed\");\r\n                //_callOptionalReturn(mooniswap, abi.encodeWithSelector(token.swap.selector, destToken, amount, 0 , BONUS_ADDRESS));\r\n                \r\n                //_callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n                \r\n                \r\n  \r\n                mooniswap.swap(fromToken,\r\n                destToken,\r\n                amount,\r\n                0,\r\n                BONUS_ADDRESS);\r\n\r\n            }\r\n            \r\n        \r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"Safe operation did not succeed\");\r\n        }\r\n            \r\n        \r\n        if (isWETH(destToken)) {\r\n            weth.deposit{value: address(this).balance}();\r\n        }\r\n    }\r\n    */\r\n\r\n    function _swapOnCurve(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint amount\r\n    ) public payable returns (uint returnAmount) {\r\n        //using curve \r\n\r\n        if (fromToken.allowance(address(this), CURVE_ADDRESS) != uint(-1)) {\r\n            fromToken.universalApprove(CURVE_ADDRESS, uint(-1));\r\n        }\r\n    \r\n        uint startBalance = destToken.balanceOf(address(this));\r\n        \r\n        // actual index is -1\r\n        curve.exchange(getCurveIndex(address(fromToken)), getCurveIndex(address(destToken)), amount, 0);\r\n        \r\n        return destToken.balanceOf(address(this)) - startBalance;\r\n    }\r\n    \r\n    function _swapOnUniswapV2Internal(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint amount,\r\n        address factory\r\n    ) public payable returns (uint returnAmount) {\r\n        if (isETH(fromToken)) {\r\n            weth.deposit{value: amount}();\r\n            fromToken = WETH_ADDRESS;\r\n        }\r\n\r\n        destToken = isETH(destToken) ? WETH_ADDRESS : destToken;\r\n        IUniswapV2Factory uniFactory = IUniswapV2Factory(factory);\r\n        IUniswapV2Exchange exchange = uniFactory.getPair(fromToken, destToken);\r\n        bool needSync;\r\n        bool needSkim;\r\n        (returnAmount, needSync, needSkim) = exchange.getReturn(fromToken, destToken, amount);\r\n        if (needSync) {\r\n            exchange.sync();\r\n        }\r\n        else if (needSkim) {\r\n            exchange.skim(BONUS_ADDRESS);\r\n        }\r\n\r\n        fromToken.universalTransfer(address(exchange), amount);\r\n        if (uint(address(fromToken)) < uint(address(destToken))) {\r\n            exchange.swap(0, returnAmount, address(this), \"\");\r\n        } else {\r\n            exchange.swap(returnAmount, 0, address(this), \"\");\r\n        }\r\n\r\n        if (isETH(destToken)) {\r\n            weth.withdraw(WETH_ADDRESS.balanceOf(address(this)));\r\n        }\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DAI_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETH_ADDRESS\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PC_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH_ADDRESS\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZERO_ADDRESS\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"destToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_swapOnCurve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"destToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"name\":\"_swapOnUniswapV2Internal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curve\",\"outputs\":[{\"internalType\":\"contract ICurveFiCurve\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"curveIndex\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"exchanges\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"toToken\",\"type\":\"address\"}],\"name\":\"getFullReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fromTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256[3]\",\"name\":\"dist\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256[2][3]\",\"name\":\"res\",\"type\":\"uint256[2][3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"xp\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256\",\"name\":\"amp\",\"type\":\"uint256\"}],\"name\":\"get_D\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"j\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dy\",\"type\":\"uint256\"}],\"name\":\"get_dx_underlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"j\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256[3]\",\"name\":\"xp_\",\"type\":\"uint256[3]\"}],\"name\":\"get_y\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[3]\",\"name\":\"swapAmountsIn\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256[3]\",\"name\":\"swapAmountsOut\",\"type\":\"uint256[3]\"},{\"internalType\":\"bool\",\"name\":\"swapVia\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"quoteDirect\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[3]\",\"name\":\"swapAmounts\",\"type\":\"uint256[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reInit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"name\":\"reverseQuote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[3]\",\"name\":\"swapAmountsIn\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256[3]\",\"name\":\"swapAmountsOut\",\"type\":\"uint256[3]\"},{\"internalType\":\"bool\",\"name\":\"swapVia\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"name\":\"reverseQuoteDirect\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[3]\",\"name\":\"swapAmounts\",\"type\":\"uint256[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minPC\",\"type\":\"uint256\"}],\"name\":\"setMinPc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippageFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"slipProtect\",\"type\":\"bool\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"TokenAddress\",\"type\":\"address\"}],\"name\":\"transferTokenBack\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"XTrinity","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"2000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://631a06af76fb76540313299444fbd652750ea13a7e0b30c537496e9314085fc6"}]}