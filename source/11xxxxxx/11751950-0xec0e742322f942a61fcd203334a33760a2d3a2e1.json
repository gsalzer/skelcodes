{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: GPL-3.0-or-later\r\n// hevm: flattened sources of src/DssSpell.sol\r\npragma solidity =0.6.11 >=0.6.11 <0.7.0;\r\n\r\n////// lib/dss-exec-lib/src/CollateralOpts.sol\r\n/* pragma solidity ^0.6.11; */\r\n\r\nstruct CollateralOpts {\r\n    bytes32 ilk;\r\n    address gem;\r\n    address join;\r\n    address flip;\r\n    address pip;\r\n    bool    isLiquidatable;\r\n    bool    isOSM;\r\n    bool    whitelistOSM;\r\n    uint256 ilkDebtCeiling;\r\n    uint256 minVaultAmount;\r\n    uint256 maxLiquidationAmount;\r\n    uint256 liquidationPenalty;\r\n    uint256 ilkStabilityFee;\r\n    uint256 bidIncrease;\r\n    uint256 bidDuration;\r\n    uint256 auctionDuration;\r\n    uint256 liquidationRatio;\r\n}\r\n\r\n////// lib/dss-exec-lib/src/DssAction.sol\r\n//\r\n// DssAction.sol -- DSS Executive Spell Actions\r\n//\r\n// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity ^0.6.11; */\r\n\r\n/* import \"./CollateralOpts.sol\"; */\r\n\r\n// https://github.com/makerdao/dss-chain-log\r\ninterface ChainlogLike {\r\n    function getAddress(bytes32) external view returns (address);\r\n}\r\n\r\ninterface RegistryLike {\r\n    function ilkData(bytes32) external view returns (\r\n        uint256       pos,\r\n        address       gem,\r\n        address       pip,\r\n        address       join,\r\n        address       flip,\r\n        uint256       dec,\r\n        string memory name,\r\n        string memory symbol\r\n    );\r\n}\r\n\r\n// Includes Median and OSM functions\r\ninterface OracleLike {\r\n    function src() external view returns (address);\r\n    function lift(address[] calldata) external;\r\n    function drop(address[] calldata) external;\r\n    function setBar(uint256) external;\r\n    function kiss(address) external;\r\n    function diss(address) external;\r\n    function kiss(address[] calldata) external;\r\n    function diss(address[] calldata) external;\r\n}\r\n\r\nabstract contract DssAction {\r\n\r\n    address public immutable lib;\r\n    bool    public immutable officeHours;\r\n\r\n    // Changelog address applies to MCD deployments on\r\n    //        mainnet, kovan, rinkeby, ropsten, and goerli\r\n    address constant public LOG = 0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F;\r\n\r\n    constructor(address lib_, bool officeHours_) public {\r\n        lib = lib_;\r\n        officeHours = officeHours_;\r\n    }\r\n\r\n    // DssExec calls execute. We limit this function subject to officeHours modifier.\r\n    function execute() external limited {\r\n        actions();\r\n    }\r\n\r\n    // DssAction developer must override `actions()` and place all actions to be called inside.\r\n    //   The DssExec function will call this subject to the officeHours limiter\r\n    //   By keeping this function public we allow simulations of `execute()` on the actions outside of the cast time.\r\n    function actions() public virtual;\r\n\r\n    // Modifier required to\r\n    modifier limited {\r\n        if (officeHours) {\r\n            uint day = (block.timestamp / 1 days + 3) % 7;\r\n            require(day < 5, \"Can only be cast on a weekday\");\r\n            uint hour = block.timestamp / 1 hours % 24;\r\n            require(hour >= 14 && hour < 21, \"Outside office hours\");\r\n        }\r\n        _;\r\n    }\r\n\r\n    /****************************/\r\n    /*** Core Address Helpers ***/\r\n    /****************************/\r\n    function vat()        internal view returns (address) { return getChangelogAddress(\"MCD_VAT\"); }\r\n    function cat()        internal view returns (address) { return getChangelogAddress(\"MCD_CAT\"); }\r\n    function jug()        internal view returns (address) { return getChangelogAddress(\"MCD_JUG\"); }\r\n    function pot()        internal view returns (address) { return getChangelogAddress(\"MCD_POT\"); }\r\n    function vow()        internal view returns (address) { return getChangelogAddress(\"MCD_VOW\"); }\r\n    function end()        internal view returns (address) { return getChangelogAddress(\"MCD_END\"); }\r\n    function reg()        internal view returns (address) { return getChangelogAddress(\"ILK_REGISTRY\"); }\r\n    function spot()       internal view returns (address) { return getChangelogAddress(\"MCD_SPOT\"); }\r\n    function flap()       internal view returns (address) { return getChangelogAddress(\"MCD_FLAP\"); }\r\n    function flop()       internal view returns (address) { return getChangelogAddress(\"MCD_FLOP\"); }\r\n    function osmMom()     internal view returns (address) { return getChangelogAddress(\"OSM_MOM\"); }\r\n    function govGuard()   internal view returns (address) { return getChangelogAddress(\"GOV_GUARD\"); }\r\n    function flipperMom() internal view returns (address) { return getChangelogAddress(\"FLIPPER_MOM\"); }\r\n    function autoLine()   internal view returns (address) { return getChangelogAddress(\"MCD_IAM_AUTO_LINE\"); }\r\n\r\n    function flip(bytes32 ilk) internal view returns (address) {\r\n        (,,,, address _flip,,,) = RegistryLike(reg()).ilkData(ilk);\r\n        return _flip;\r\n    }\r\n\r\n    function getChangelogAddress(bytes32 key) internal view returns (address) {\r\n        return ChainlogLike(LOG).getAddress(key);\r\n    }\r\n\r\n    function libcall(bytes memory data) internal {\r\n        (bool ok,) = lib.delegatecall(data);\r\n        require(ok, \"DssAction/failed-lib-call\");\r\n    }\r\n\r\n\r\n    /****************************/\r\n    /*** Changelog Management ***/\r\n    /****************************/\r\n    function setChangelogAddress(bytes32 key, address value) internal {\r\n        libcall(abi.encodeWithSignature(\"setChangelogAddress(address,bytes32,address)\", LOG, key, value));\r\n    }\r\n\r\n    function setChangelogVersion(string memory version) internal {\r\n        libcall(abi.encodeWithSignature(\"setChangelogVersion(address,string)\", LOG, version));\r\n    }\r\n\r\n    function setChangelogIPFS(string memory ipfs) internal {\r\n        libcall(abi.encodeWithSignature(\"setChangelogIPFS(address,string)\", LOG, ipfs));\r\n    }\r\n\r\n    function setChangelogSHA256(string memory SHA256) internal {\r\n        libcall(abi.encodeWithSignature(\"setChangelogSHA256(address,string)\", LOG, SHA256));\r\n    }\r\n\r\n    /**********************/\r\n    /*** Authorizations ***/\r\n    /**********************/\r\n    function authorize(address base, address ward) internal virtual {\r\n        libcall(abi.encodeWithSignature(\"authorize(address,address)\", base, ward));\r\n    }\r\n\r\n    function deauthorize(address base, address ward) internal {\r\n        libcall(abi.encodeWithSignature(\"deauthorize(address,address)\", base, ward));\r\n    }\r\n\r\n    /**************************/\r\n    /*** Accumulating Rates ***/\r\n    /**************************/\r\n    function accumulateDSR() internal {\r\n        libcall(abi.encodeWithSignature(\"accumulateDSR(address)\", pot()));\r\n    }\r\n\r\n    function accumulateCollateralStabilityFees(bytes32 ilk) internal {\r\n        libcall(abi.encodeWithSignature(\"accumulateCollateralStabilityFees(address,bytes32)\", jug(), ilk));\r\n    }\r\n\r\n    /*********************/\r\n    /*** Price Updates ***/\r\n    /*********************/\r\n    function updateCollateralPrice(bytes32 ilk) internal {\r\n        libcall(abi.encodeWithSignature(\"updateCollateralPrice(address,bytes32)\", spot(), ilk));\r\n    }\r\n\r\n    /****************************/\r\n    /*** System Configuration ***/\r\n    /****************************/\r\n    function setContract(address base, bytes32 what, address addr) internal {\r\n        libcall(abi.encodeWithSignature(\"setContract(address,bytes32,address)\", base, what, addr));\r\n    }\r\n\r\n    function setContract(address base, bytes32 ilk, bytes32 what, address addr) internal {\r\n        libcall(abi.encodeWithSignature(\"setContract(address,bytes32,bytes32,address)\", base, ilk, what, addr));\r\n    }\r\n\r\n    /******************************/\r\n    /*** System Risk Parameters ***/\r\n    /******************************/\r\n    function setGlobalDebtCeiling(uint256 amount) internal {\r\n        libcall(abi.encodeWithSignature(\"setGlobalDebtCeiling(address,uint256)\", vat(), amount));\r\n    }\r\n\r\n    function increaseGlobalDebtCeiling(uint256 amount) internal {\r\n        libcall(abi.encodeWithSignature(\"increaseGlobalDebtCeiling(address,uint256)\", vat(), amount));\r\n    }\r\n\r\n    function decreaseGlobalDebtCeiling(uint256 amount) internal {\r\n        libcall(abi.encodeWithSignature(\"decreaseGlobalDebtCeiling(address,uint256)\", vat(), amount));\r\n    }\r\n\r\n    function setDSR(uint256 rate) internal {\r\n        libcall(abi.encodeWithSignature(\"setDSR(address,uint256)\", pot(), rate));\r\n    }\r\n\r\n    function setSurplusAuctionAmount(uint256 amount) internal {\r\n        libcall(abi.encodeWithSignature(\"setSurplusAuctionAmount(address,uint256)\", vow(), amount));\r\n    }\r\n\r\n    function setSurplusBuffer(uint256 amount) internal {\r\n        libcall(abi.encodeWithSignature(\"setSurplusBuffer(address,uint256)\", vow(), amount));\r\n    }\r\n\r\n    function setMinSurplusAuctionBidIncrease(uint256 pct_bps) internal {\r\n        libcall(abi.encodeWithSignature(\"setMinSurplusAuctionBidIncrease(address,uint256)\", flap(), pct_bps));\r\n    }\r\n\r\n    function setSurplusAuctionBidDuration(uint256 duration) internal {\r\n        libcall(abi.encodeWithSignature(\"setSurplusAuctionBidDuration(address,uint256)\", flap(), duration));\r\n    }\r\n\r\n    function setSurplusAuctionDuration(uint256 duration) internal {\r\n        libcall(abi.encodeWithSignature(\"setSurplusAuctionDuration(address,uint256)\", flap(), duration));\r\n    }\r\n\r\n    function setDebtAuctionDelay(uint256 duration) internal {\r\n        libcall(abi.encodeWithSignature(\"setDebtAuctionDelay(address,uint256)\", vow(), duration));\r\n    }\r\n\r\n    function setDebtAuctionDAIAmount(uint256 amount) internal {\r\n        libcall(abi.encodeWithSignature(\"setDebtAuctionDAIAmount(address,uint256)\", vow(), amount));\r\n    }\r\n\r\n    function setDebtAuctionMKRAmount(uint256 amount) internal {\r\n        libcall(abi.encodeWithSignature(\"setDebtAuctionMKRAmount(address,uint256)\", vow(), amount));\r\n    }\r\n\r\n    function setMinDebtAuctionBidIncrease(uint256 pct_bps) internal {\r\n        libcall(abi.encodeWithSignature(\"setMinDebtAuctionBidIncrease(address,uint256)\", flop(), pct_bps));\r\n    }\r\n\r\n    function setDebtAuctionBidDuration(uint256 duration) internal {\r\n        libcall(abi.encodeWithSignature(\"setDebtAuctionBidDuration(address,uint256)\", flop(), duration));\r\n    }\r\n\r\n    function setDebtAuctionDuration(uint256 duration) internal {\r\n        libcall(abi.encodeWithSignature(\"setDebtAuctionDuration(address,uint256)\", flop(), duration));\r\n    }\r\n\r\n    function setDebtAuctionMKRIncreaseRate(uint256 pct_bps) internal {\r\n        libcall(abi.encodeWithSignature(\"setDebtAuctionMKRIncreaseRate(address,uint256)\", flop(), pct_bps));\r\n    }\r\n\r\n    function setMaxTotalDAILiquidationAmount(uint256 amount) internal {\r\n        libcall(abi.encodeWithSignature(\"setMaxTotalDAILiquidationAmount(address,uint256)\", cat(), amount));\r\n    }\r\n\r\n    function setEmergencyShutdownProcessingTime(uint256 duration) internal {\r\n        libcall(abi.encodeWithSignature(\"setEmergencyShutdownProcessingTime(address,uint256)\", end(), duration));\r\n    }\r\n\r\n    function setGlobalStabilityFee(uint256 rate) internal {\r\n        libcall(abi.encodeWithSignature(\"setGlobalStabilityFee(address,uint256)\", jug(), rate));\r\n    }\r\n\r\n    function setDAIReferenceValue(uint256 value) internal {\r\n        libcall(abi.encodeWithSignature(\"setDAIReferenceValue(address,uint256)\", spot(),value));\r\n    }\r\n\r\n    /*****************************/\r\n    /*** Collateral Management ***/\r\n    /*****************************/\r\n    function setIlkDebtCeiling(bytes32 ilk, uint256 amount) internal {\r\n        libcall(abi.encodeWithSignature(\"setIlkDebtCeiling(address,bytes32,uint256)\", vat(), ilk, amount));\r\n    }\r\n\r\n    function increaseIlkDebtCeiling(bytes32 ilk, uint256 amount) internal {\r\n        libcall(abi.encodeWithSignature(\"increaseIlkDebtCeiling(address,bytes32,uint256,bool)\", vat(), ilk, amount, true));\r\n    }\r\n\r\n    function decreaseIlkDebtCeiling(bytes32 ilk, uint256 amount) internal {\r\n        libcall(abi.encodeWithSignature(\"decreaseIlkDebtCeiling(address,bytes32,uint256,bool)\", vat(), ilk, amount, true));\r\n    }\r\n\r\n    function setIlkAutoLineParameters(bytes32 ilk, uint256 amount, uint256 gap, uint256 ttl) internal {\r\n        libcall(abi.encodeWithSignature(\"setIlkAutoLineParameters(address,bytes32,uint256,uint256,uint256)\", autoLine(), ilk, amount, gap, ttl));\r\n    }\r\n\r\n    function setIlkAutoLineDebtCeiling(bytes32 ilk, uint256 amount) internal {\r\n        libcall(abi.encodeWithSignature(\"setIlkAutoLineDebtCeiling(address,bytes32,uint256)\", autoLine(), ilk, amount));\r\n    }\r\n\r\n    function removeIlkFromAutoLine(bytes32 ilk) internal {\r\n        libcall(abi.encodeWithSignature(\"removeIlkFromAutoLine(address,bytes32)\", autoLine(), ilk));\r\n    }\r\n\r\n    function setIlkMinVaultAmount(bytes32 ilk, uint256 amount) internal {\r\n        libcall(abi.encodeWithSignature(\"setIlkMinVaultAmount(address,bytes32,uint256)\", vat(), ilk, amount));\r\n    }\r\n\r\n    function setIlkLiquidationPenalty(bytes32 ilk, uint256 pct_bps) internal {\r\n        libcall(abi.encodeWithSignature(\"setIlkLiquidationPenalty(address,bytes32,uint256)\", cat(), ilk, pct_bps));\r\n    }\r\n\r\n    function setIlkMaxLiquidationAmount(bytes32 ilk, uint256 amount) internal {\r\n        libcall(abi.encodeWithSignature(\"setIlkMaxLiquidationAmount(address,bytes32,uint256)\", cat(), ilk, amount));\r\n    }\r\n\r\n    function setIlkLiquidationRatio(bytes32 ilk, uint256 pct_bps) internal {\r\n        libcall(abi.encodeWithSignature(\"setIlkLiquidationRatio(address,bytes32,uint256)\", spot(), ilk, pct_bps));\r\n    }\r\n\r\n    function setIlkMinAuctionBidIncrease(bytes32 ilk, uint256 pct_bps) internal {\r\n        libcall(abi.encodeWithSignature(\"setIlkMinAuctionBidIncrease(address,uint256)\", flip(ilk), pct_bps));\r\n    }\r\n\r\n    function setIlkBidDuration(bytes32 ilk, uint256 duration) internal {\r\n        libcall(abi.encodeWithSignature(\"setIlkBidDuration(address,uint256)\", flip(ilk), duration));\r\n    }\r\n\r\n    function setIlkAuctionDuration(bytes32 ilk, uint256 duration) internal {\r\n        libcall(abi.encodeWithSignature(\"setIlkAuctionDuration(address,uint256)\", flip(ilk), duration));\r\n    }\r\n\r\n    function setIlkStabilityFee(bytes32 ilk, uint256 rate) internal {\r\n        libcall(abi.encodeWithSignature(\"setIlkStabilityFee(address,bytes32,uint256,bool)\", jug(), ilk, rate, true));\r\n    }\r\n\r\n    /***********************/\r\n    /*** Core Management ***/\r\n    /***********************/\r\n    function updateCollateralAuctionContract(bytes32 ilk, address newFlip, address oldFlip) internal {\r\n        libcall(abi.encodeWithSignature(\"updateCollateralAuctionContract(address,address,address,address,bytes32,address,address)\", vat(), cat(), end(), flipperMom(), ilk, newFlip, oldFlip));\r\n    }\r\n\r\n    function updateSurplusAuctionContract(address newFlap, address oldFlap) internal {\r\n        libcall(abi.encodeWithSignature(\"updateSurplusAuctionContract(address,address,address,address)\", vat(), vow(), newFlap, oldFlap));\r\n    }\r\n\r\n    function updateDebtAuctionContract(address newFlop, address oldFlop) internal {\r\n        libcall(abi.encodeWithSignature(\"updateDebtAuctionContract(address,address,address,address,address)\", vat(), vow(), govGuard(), newFlop, oldFlop));\r\n    }\r\n\r\n    /*************************/\r\n    /*** Oracle Management ***/\r\n    /*************************/\r\n    function addWritersToMedianWhitelist(address medianizer, address[] memory feeds) internal {\r\n        libcall(abi.encodeWithSignature(\"addWritersToMedianWhitelist(address,address[])\", medianizer, feeds));\r\n    }\r\n\r\n    function removeWritersFromMedianWhitelist(address medianizer, address[] memory feeds) internal {\r\n        libcall(abi.encodeWithSignature(\"removeWritersFromMedianWhitelist(address,address[])\", medianizer, feeds));\r\n    }\r\n\r\n    function addReadersToMedianWhitelist(address medianizer, address[] memory readers) internal {\r\n        libcall(abi.encodeWithSignature(\"addReadersToMedianWhitelist(address,address[])\", medianizer, readers));\r\n    }\r\n\r\n    function addReaderToMedianWhitelist(address medianizer, address reader) internal {\r\n        libcall(abi.encodeWithSignature(\"addReaderToMedianWhitelist(address,address)\", medianizer, reader));\r\n    }\r\n\r\n    function removeReadersFromMedianWhitelist(address medianizer, address[] memory readers) internal {\r\n        libcall(abi.encodeWithSignature(\"removeReadersFromMedianWhitelist(address,address[])\", medianizer, readers));\r\n    }\r\n\r\n    function removeReaderFromMedianWhitelist(address medianizer, address reader) internal {\r\n        libcall(abi.encodeWithSignature(\"removeReaderFromMedianWhitelist(address,address)\", medianizer, reader));\r\n    }\r\n\r\n    function setMedianWritersQuorum(address medianizer, uint256 minQuorum) internal {\r\n        libcall(abi.encodeWithSignature(\"setMedianWritersQuorum(address,uint256)\", medianizer, minQuorum));\r\n    }\r\n\r\n    function addReaderToOSMWhitelist(address osm, address reader) internal {\r\n        libcall(abi.encodeWithSignature(\"addReaderToOSMWhitelist(address,address)\", osm, reader));\r\n    }\r\n\r\n    function removeReaderFromOSMWhitelist(address osm, address reader) internal {\r\n        libcall(abi.encodeWithSignature(\"removeReaderFromOSMWhitelist(address,address)\", osm, reader));\r\n    }\r\n\r\n    function allowOSMFreeze(address osm, bytes32 ilk) internal {\r\n        libcall(abi.encodeWithSignature(\"allowOSMFreeze(address,address,bytes32)\", osmMom(), osm, ilk));\r\n    }\r\n\r\n    /*****************************/\r\n    /*** Collateral Onboarding ***/\r\n    /*****************************/\r\n\r\n    // Minimum actions to onboard a collateral to the system with 0 line.\r\n    function addCollateralBase(bytes32 ilk, address gem, address join, address flipper, address pip) internal {\r\n        libcall(abi.encodeWithSignature(\r\n            \"addCollateralBase(address,address,address,address,address,address,bytes32,address,address,address,address)\",\r\n            vat(), cat(), jug(), end(), spot(), reg(), ilk, gem, join, flipper, pip\r\n        ));\r\n    }\r\n\r\n    // Complete collateral onboarding logic.\r\n    function addNewCollateral(CollateralOpts memory co) internal {\r\n        // Add the collateral to the system.\r\n        addCollateralBase(co.ilk, co.gem, co.join, co.flip, co.pip);\r\n\r\n        // Allow FlipperMom to access to the ilk Flipper\r\n        authorize(co.flip, flipperMom());\r\n        // Disallow Cat to kick auctions in ilk Flipper\r\n        if(!co.isLiquidatable) deauthorize(flipperMom(), co.flip);\r\n\r\n        if(co.isOSM) { // If pip == OSM\r\n            // Allow OsmMom to access to the TOKEN OSM\r\n            authorize(co.pip, osmMom());\r\n            if (co.whitelistOSM) { // If median is src in OSM\r\n                // Whitelist OSM to read the Median data (only necessary if it is the first time the token is being added to an ilk)\r\n                addReaderToMedianWhitelist(address(OracleLike(co.pip).src()), co.pip);\r\n            }\r\n            // Whitelist Spotter to read the OSM data (only necessary if it is the first time the token is being added to an ilk)\r\n            addReaderToOSMWhitelist(co.pip, spot());\r\n            // Whitelist End to read the OSM data (only necessary if it is the first time the token is being added to an ilk)\r\n            addReaderToOSMWhitelist(co.pip, end());\r\n            // Set TOKEN OSM in the OsmMom for new ilk\r\n            allowOSMFreeze(co.pip, co.ilk);\r\n        }\r\n        // Increase the global debt ceiling by the ilk ceiling\r\n        increaseGlobalDebtCeiling(co.ilkDebtCeiling);\r\n        // Set the ilk debt ceiling\r\n        setIlkDebtCeiling(co.ilk, co.ilkDebtCeiling);\r\n        // Set the ilk dust\r\n        setIlkMinVaultAmount(co.ilk, co.minVaultAmount);\r\n        // Set the dunk size\r\n        setIlkMaxLiquidationAmount(co.ilk, co.maxLiquidationAmount);\r\n        // Set the ilk liquidation penalty\r\n        setIlkLiquidationPenalty(co.ilk, co.liquidationPenalty);\r\n\r\n        // Set the ilk stability fee\r\n        setIlkStabilityFee(co.ilk, co.ilkStabilityFee);\r\n\r\n        // Set the ilk percentage between bids\r\n        setIlkMinAuctionBidIncrease(co.ilk, co.bidIncrease);\r\n        // Set the ilk time max time between bids\r\n        setIlkBidDuration(co.ilk, co.bidDuration);\r\n        // Set the ilk max auction duration\r\n        setIlkAuctionDuration(co.ilk, co.auctionDuration);\r\n        // Set the ilk min collateralization ratio\r\n        setIlkLiquidationRatio(co.ilk, co.liquidationRatio);\r\n\r\n        // Update ilk spot value in Vat\r\n        updateCollateralPrice(co.ilk);\r\n    }\r\n}\r\n\r\n////// lib/dss-exec-lib/src/DssExec.sol\r\n//\r\n// DssExec.sol -- MakerDAO Executive Spell Template\r\n//\r\n// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity ^0.6.11; */\r\n\r\ninterface PauseAbstract {\r\n    function delay() external view returns (uint256);\r\n    function plot(address, bytes32, bytes calldata, uint256) external;\r\n    function exec(address, bytes32, bytes calldata, uint256) external returns (bytes memory);\r\n}\r\n\r\ninterface Changelog {\r\n    function getAddress(bytes32) external view returns (address);\r\n}\r\n\r\ninterface SpellAction {\r\n    function officeHours() external view returns (bool);\r\n}\r\n\r\ncontract DssExec {\r\n\r\n    Changelog      constant public log   = Changelog(0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F);\r\n    uint256                 public eta;\r\n    bytes                   public sig;\r\n    bool                    public done;\r\n    bytes32       immutable public tag;\r\n    address       immutable public action;\r\n    uint256       immutable public expiration;\r\n    PauseAbstract immutable public pause;\r\n\r\n    // Provides a descriptive tag for bot consumption\r\n    // This should be modified weekly to provide a summary of the actions\r\n    // Hash: seth keccak -- \"$(wget https://<executive-vote-canonical-post> -q -O - 2>/dev/null)\"\r\n    string                  public description;\r\n\r\n    function officeHours() external view returns (bool) {\r\n        return SpellAction(action).officeHours();\r\n    }\r\n\r\n    function nextCastTime() external view returns (uint256 castTime) {\r\n        require(eta != 0, \"DssExec/spell-not-scheduled\");\r\n        castTime = block.timestamp > eta ? block.timestamp : eta; // Any day at XX:YY\r\n\r\n        if (SpellAction(action).officeHours()) {\r\n            uint256 day    = (castTime / 1 days + 3) % 7;\r\n            uint256 hour   = castTime / 1 hours % 24;\r\n            uint256 minute = castTime / 1 minutes % 60;\r\n            uint256 second = castTime % 60;\r\n\r\n            if (day >= 5) {\r\n                castTime += (6 - day) * 1 days;                 // Go to Sunday XX:YY\r\n                castTime += (24 - hour + 14) * 1 hours;         // Go to 14:YY UTC Monday\r\n                castTime -= minute * 1 minutes + second;        // Go to 14:00 UTC\r\n            } else {\r\n                if (hour >= 21) {\r\n                    if (day == 4) castTime += 2 days;           // If Friday, fast forward to Sunday XX:YY\r\n                    castTime += (24 - hour + 14) * 1 hours;     // Go to 14:YY UTC next day\r\n                    castTime -= minute * 1 minutes + second;    // Go to 14:00 UTC\r\n                } else if (hour < 14) {\r\n                    castTime += (14 - hour) * 1 hours;          // Go to 14:YY UTC same day\r\n                    castTime -= minute * 1 minutes + second;    // Go to 14:00 UTC\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // @param _description  A string description of the spell\r\n    // @param _expiration   The timestamp this spell will expire. (Ex. now + 30 days)\r\n    // @param _spellAction  The address of the spell action\r\n    constructor(string memory _description, uint256 _expiration, address _spellAction) public {\r\n        pause       = PauseAbstract(log.getAddress(\"MCD_PAUSE\"));\r\n        description = _description;\r\n        expiration  = _expiration;\r\n        action      = _spellAction;\r\n\r\n        sig = abi.encodeWithSignature(\"execute()\");\r\n        bytes32 _tag;                    // Required for assembly access\r\n        address _action = _spellAction;  // Required for assembly access\r\n        assembly { _tag := extcodehash(_action) }\r\n        tag = _tag;\r\n    }\r\n\r\n    function schedule() public {\r\n        require(now <= expiration, \"This contract has expired\");\r\n        require(eta == 0, \"This spell has already been scheduled\");\r\n        eta = now + PauseAbstract(pause).delay();\r\n        pause.plot(action, tag, sig, eta);\r\n    }\r\n\r\n    function cast() public {\r\n        require(!done, \"spell-already-cast\");\r\n        done = true;\r\n        pause.exec(action, tag, sig, eta);\r\n    }\r\n}\r\n\r\n////// src/DssSpell.sol\r\n// Copyright (C) 2021 Maker Ecosystem Growth Holdings, INC.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n/* pragma solidity 0.6.11; */\r\n\r\n/* import \"dss-exec-lib/DssExec.sol\"; */\r\n/* import \"dss-exec-lib/DssAction.sol\"; */\r\n\r\ncontract DssSpellAction is DssAction {\r\n\r\n    // Provides a descriptive tag for bot consumption\r\n    // This should be modified weekly to provide a summary of the actions\r\n    // Hash: seth keccak -- \"$(wget https://raw.githubusercontent.com/makerdao/community/e2929f286f2c486c0485637967284630643ddc8d/governance/votes/Executive%20vote%20-%20January%2029%2C%202021.md -q -O - 2>/dev/null)\"\r\n    string public constant description =\r\n        \"2021-01-29 MakerDAO Executive Spell | Hash: 0xbb7974fc8e89c016a6c42f5ced4b1f42e45671e5f4f4009535658affb6a98343\";\r\n\r\n\r\n    // Many of the settings that change weekly rely on the rate accumulator\r\n    // described at https://docs.makerdao.com/smart-contract-modules/rates-module\r\n    // To check this yourself, use the following rate calculation (example 8%):\r\n    //\r\n    // $ bc -l <<< 'scale=27; e( l(1.08)/(60 * 60 * 24 * 365) )'\r\n    //\r\n    // A table of rates can be found at\r\n    //    https://ipfs.io/ipfs/QmefQMseb3AiTapiAKKexdKHig8wroKuZbmLtPLv4u2YwW\r\n    //\r\n\r\n    /**\r\n        @dev constructor (required)\r\n        @param lib         address of the DssExecLib contract\r\n        @param officeHours true if officehours enabled\r\n    */\r\n    constructor(address lib, bool officeHours) public DssAction(lib, officeHours) {}\r\n\r\n    uint256 constant MILLION = 10**6;\r\n\r\n    function actions() public override {\r\n        //                           ilk            line           gap       ttl\r\n        setIlkAutoLineParameters(\"ETH-A\", 1500 * MILLION, 30 * MILLION, 12 hours);\r\n    }\r\n}\r\n\r\ncontract DssSpell is DssExec {\r\n    address public constant LIB = 0xFC32E74e6e33D924bd2fBFC7A27b6F2177032760;\r\n    DssSpellAction public spell = new DssSpellAction(LIB, false);\r\n    constructor() DssExec(spell.description(), now + 30 days, address(spell)) public {}\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"LIB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"action\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cast\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"done\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expiration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"log\",\"outputs\":[{\"internalType\":\"contract Changelog\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextCastTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"castTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"officeHours\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"contract PauseAbstract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"schedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spell\",\"outputs\":[{\"internalType\":\"contract DssSpellAction\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tag\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DssSpell","CompilerVersion":"v0.6.11+commit.5ef660b1","OptimizationUsed":"1","Runs":"1","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7667d3e19da6f74011b8a89ba4e41e0b8b0da016c648a3ee3b4b51c522f9c0d1"}]}