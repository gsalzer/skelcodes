{"status":"1","message":"OK","result":[{"SourceCode":"{\"unilock.sol\":{\"content\":\"/**\\n *Submitted for verification at Etherscan.io on 2020-10-10\\n*/\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n   \\n}\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size \\u003e 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length \\u003e 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\ninterface IUniswapV2Router02 {\\n  function addLiquidityETH(\\n  address token,\\n  uint amountTokenDesired,\\n  uint amountTokenMin,\\n  uint amountETHMin,\\n  address to,\\n  uint deadline\\n) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n}\\ninterface IUniLockFactory {\\n    function fee() external view returns(uint);\\n    function uni_router() external view returns(address);\\n    function toFee() external view returns(uint);\\n\\n    \\n\\n    \\n}\\n\\n\\n\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn\\u0027t required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\n\\n\\n\\n contract uniLock  {\\n    using Address for address;\\n    using SafeMath for uint;\\n    address factory;\\n    uint public locked = 0;\\n    uint public unlock_date = 0;\\n    address public owner;\\n    address public token;\\n    uint public softCap;\\n    uint public hardCap;\\n    uint public start_date;\\n    uint public end_date;\\n    uint public rate; // coin sale rate 1 ETH = 1 XYZ (rate = 1e18) \\u003c=\\u003e 1 ETH = 10 XYZ (rate = 1e19) \\n    uint public min_allowed;\\n    uint public max_allowed; // Max ETH \\n    uint public collected; // collected ETH\\n    uint public pool_rate; // uniswap liquidity pool rate  1 ETH = 1 XYZ (rate = 1e18) \\u003c=\\u003e 1 ETH = 10 XYZ (rate = 1e19)\\n    uint public lock_duration; // duration wished to keep the LP tokens locked\\n    uint public uniswap_rate;\\n\\n    constructor() public{\\n        factory = msg.sender;\\n        \\n    }\\n   \\n\\n    \\n    \\n    \\n    mapping(address =\\u003e uint) participant;\\n    \\n    // Initilaize  a new campaign (can only be triggered by the factory contract)\\n    function initilaize(uint[] calldata _data,address _token,address _owner_Address,uint _pool_rate,uint _lock_duration,uint _uniswap_rate) external returns (uint){\\n      require(msg.sender == factory,\\u0027You are not allowed to initialize a new Campaign\\u0027);\\n      owner = _owner_Address; \\n      softCap = _data[0];\\n      hardCap = _data[1];\\n      start_date = _data[2];\\n      end_date = _data[3];\\n      rate = _data[4]; \\n      min_allowed = _data[5];\\n      max_allowed = _data[6];\\n      token = _token;\\n      pool_rate = _pool_rate;\\n      lock_duration = _lock_duration;\\n      uniswap_rate = _uniswap_rate;\\n    }\\n    \\n    function buyTokens() public payable returns (uint){\\n        require(isLive(),\\u0027campaign is not live\\u0027);\\n        require((msg.value\\u003e= min_allowed)\\u0026\\u0026 (getGivenAmount(msg.sender).add(msg.value) \\u003c= max_allowed) \\u0026\\u0026 (msg.value \\u003c= getRemaining()),\\u0027The contract has insufficent funds or you are not allowed\\u0027);\\n        require(IERC20(address(token)).transfer(msg.sender,calculateAmount(msg.value)),\\\"can\\u0027t transfer\\\");\\n        participant[msg.sender] = participant[msg.sender].add(msg.value);\\n        collected = (collected).add(msg.value);\\n        return 1;\\n    }\\n    function unlock(address _LPT,uint _amount) public returns (bool){\\n        require(locked == 1 || failed(),\\u0027liquidity is not yet locked\\u0027);\\n        require(block.timestamp \\u003e= unlock_date ,\\\"can\\u0027t receive LP tokens\\\");\\n        require(msg.sender == owner,\\u0027You are not the owner\\u0027);\\n        IERC20(address(_LPT)).transfer(msg.sender,_amount);\\n    }\\n    \\n    // Add liquidity to uniswap and burn the remaining tokens, can be only executed when the campaign completes\\n    \\n    function uniLOCK() public returns(uint){\\n        require(locked ==0,\\u0027Liquidity is already locked\\u0027);\\n        require(!isLive(),\\u0027Presale is still live\\u0027);\\n        require(!failed(),\\\"Presale failed , can\\u0027t lock liquidity\\\");\\n        require(softCap \\u003c= collected,\\\"didn\\u0027t reach soft cap\\\");\\n        require(addLiquidity(),\\u0027error adding liquidity to uniswap\\u0027);\\n        locked = 1;\\n        IERC20(address(token)).transfer(address(0x000000000000000000000000000000000000dEaD),IERC20(address(token)).balanceOf(address(this)));\\n        unlock_date = (block.timestamp).add(lock_duration);\\n        return 1;\\n    }\\n    \\n    function addLiquidity() internal returns(bool){\\n        uint campaign_amount = collected.mul(uint(IUniLockFactory(factory).fee())).div(1000);\\n        IERC20(address(token)).approve(address(IUniLockFactory(factory).uni_router()),(hardCap.mul(rate)).div(1e18));\\n        if(uniswap_rate \\u003e 0){\\n                IUniswapV2Router02(address(IUniLockFactory(factory).uni_router())).addLiquidityETH{value : campaign_amount.mul(uniswap_rate).div(1000)}(address(token),((campaign_amount.mul(uniswap_rate).div(1000)).mul(pool_rate)).div(1e18),0,0,address(this),block.timestamp + 100000000);\\n        }\\n        payable(IUniLockFactory(factory).toFee()).transfer(collected.sub(campaign_amount));\\n        payable(owner).transfer(campaign_amount.sub(campaign_amount.mul(uniswap_rate).div(1000)));\\n        return true;\\n    }\\n    \\n    // Check whether the campaign failed\\n    \\n    function failed() public view returns(bool){\\n        if((block.timestamp \\u003e= end_date) \\u0026\\u0026 (softCap \\u003e collected)){\\n            return true;\\n            \\n        }\\n        return false;\\n    }\\n    \\n    // Allows Participants to withdraw funds when campaign fails\\n    function withdrawFunds() public returns(uint){\\n        require(failed(),\\\"campaign didn\\u0027t fail\\\");\\n        require(participant[msg.sender] \\u003e0 ,\\\"You didn\\u0027t participate in the campaign\\\");\\n        uint withdrawAmount = participant[msg.sender].mul(uint(IUniLockFactory(factory).fee())).div(1000);\\n        (msg.sender).transfer(withdrawAmount);\\n        payable(IUniLockFactory(factory).toFee()).transfer(participant[msg.sender].sub(withdrawAmount));\\n        participant[msg.sender] = 0;\\n\\n    }\\n    // Checks whether the campaign is still Live\\n    \\n    function isLive() public view returns(bool){\\n       if((block.timestamp \\u003c start_date)) return false;\\n       if((block.timestamp \\u003e= end_date)) return false;\\n       if((collected \\u003e= hardCap)) return false;\\n       return true;\\n    }\\n    // Returns amount in XYZ.\\n    function calculateAmount(uint _amount) public view returns(uint){\\n        return (_amount.mul(rate)).div(1e18);\\n        \\n    }\\n    \\n    // Gets remaining ETH to reach hardCap\\n    function getRemaining() public view returns (uint){\\n        return (hardCap).sub(collected);\\n    }\\n    function getGivenAmount(address _address) public view returns (uint){\\n        return participant[_address];\\n    }\\n    \\n  \\n    \\n\\n\\n    \\n}\"},\"uniLockFactory.sol\":{\"content\":\"/**\\n *Submitted for verification at Etherscan.io on 2020-10-10\\n*/\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\u0027./unilock.sol\\u0027;\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\n\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn\\u0027t required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\n\\n\\ncontract uniLockFactory  {\\n    using Address for address;\\n    using SafeMath for uint;\\n    address[] public campaigns;\\n    address public toFee;\\n    uint public fee;\\n    address factory_owner;\\n    address public unl_address;\\n    address public uni_router;\\n    uint balance_required;\\n\\n    \\n    constructor(address _UNL,uint min_balance,uint _fee,address _uniRouter) public {\\n        factory_owner = msg.sender;\\n        toFee = msg.sender;\\n        unl_address = _UNL;\\n        balance_required = min_balance;\\n        fee = _fee;\\n        uni_router = _uniRouter;\\n    }\\n    modifier only_factory_Owner(){\\n        require(factory_owner == msg.sender,\\u0027You are not the owner\\u0027);\\n        _;\\n    }\\n    //   1 ETH = 1 XYZ (_pool_rate = 1e18) \\u003c=\\u003e 1 ETH = 10 XYZ (_pool_rate = 1e19) \\u003c=\\u003e XYZ (decimals = 18)\\n   // _data = _softCap,_hardCap,_start_date, _end_date,_rate,_min_allowed,_max_allowed\\n    function createCampaign(uint[] memory _data,address _token,uint _pool_rate,uint _lock_duration,uint _uniswap_rate) public returns (address campaign_address){\\n     require(IERC20(address(unl_address)).balanceOf(msg.sender) \\u003e= uint(balance_required),\\\"You don\\u0027t have the minimum UNL tokens required to launch a campaign\\\");\\n     require(_data[0] \\u003c _data[1],\\\"Error :  soft cap can\\u0027t be higher than hard cap\\\" );\\n     require(_data[2] \\u003c _data[3] ,\\\"Error :  start date can\\u0027t be higher than end date \\\" );\\n     require(block.timestamp \\u003c _data[3] ,\\\"Error :  end date can\\u0027t be higher than current date \\\");\\n     require(_data[5] \\u003c _data[1],\\\"Error :  minimum allowed can\\u0027t be higher than hard cap \\\" );\\n     require(_data[4] != 0,\\\"rate can\\u0027t be null\\\");\\n     require(_uniswap_rate \\u003e= 0 \\u0026\\u0026 _uniswap_rate \\u003c= 1000);\\n     bytes memory bytecode = type(uniLock).creationCode;\\n     bytes32 salt = keccak256(abi.encodePacked(_token, msg.sender));\\n     assembly {\\n            campaign_address := create2(0, add(bytecode, 32), mload(bytecode), salt)\\n     }\\n     uniLock(campaign_address).initilaize(_data,_token,msg.sender,_pool_rate,_lock_duration,_uniswap_rate);\\n     campaigns.push(campaign_address);\\n     require(transferToCampaign(_data[1],_data[4],_pool_rate,_token,campaign_address,_uniswap_rate),\\\"unable to transfer funds\\\");\\n     return campaign_address;\\n    }\\n    function transferToCampaign(uint _data1,uint _data4,uint _pool_rate,address _token,address _campaign_address,uint _uniswap_rate ) internal returns(bool){\\n       require(ApproveTransferTo((_data1.mul(_data4).div(1e18)),_uniswap_rate,_data1,_token,_campaign_address,_pool_rate));\\n/*     require(IERC20(address(_token)).transferFrom(msg.sender,address(_campaign_address),(_data1.mul(_data4).div(1e18)).add((_data1).mul(_pool_rate).div(1e18))),\\\"unable to transfer token amount to the campaign\\\");\\n*/     return true;\\n    }\\n    function ApproveTransferTo(uint _data,uint _uniswap_rate,uint _data1,address _token,address _campaign_address,uint _pool_rate ) internal returns(bool){\\n        \\n    require(IERC20(address(_token)).transferFrom(msg.sender,address(_campaign_address),_data.add((_data1.mul(_uniswap_rate)).mul(_pool_rate).div(1e21))),\\\"unable to transfer token amount to the campaign\\\");\\n     return true;\\n    }\\n    \\n   function changeConfig(uint _fee,address _to,uint _balance_required,address _uni_router,address _unl_address) public only_factory_Owner returns(uint){\\n        fee = _fee;\\n        toFee = _to;\\n        balance_required = _balance_required;\\n        uni_router = _uni_router;\\n        unl_address = _unl_address;\\n    }\\n\\n\\n \\n    \\n \\n\\n\\n    \\n}\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_UNL\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"min_balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_uniRouter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"campaigns\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_balance_required\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_uni_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_unl_address\",\"type\":\"address\"}],\"name\":\"changeConfig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_data\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pool_rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lock_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_uniswap_rate\",\"type\":\"uint256\"}],\"name\":\"createCampaign\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"campaign_address\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uni_router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unl_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"uniLockFactory","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000ed65a22fb37e189e9a80c91e3a868330ce8d25d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003e50000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://fe0366d6b37096f00da7a9774d859a0c3a337e8425126fd22e4ca982ceaecedf"}]}