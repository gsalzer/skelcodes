{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/home/cmarcelo/git/cupid/contracts/contracts/Game.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\n\\npragma solidity ^0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"./Lists.sol\\\";\\nimport \\\"./Rewards.sol\\\";\\n\\n/**\\n * @title A Liquidity Game\\n * @notice Implementation of a game which rewards the top half of liquidity providers.\\n * \\n * Users interact with the contract through three public state-changing functions, which are different paths to the same goal:\\n * lock Token-ETH LP tokens into the system, and track metrics around those LP locks.\\n * \\n *   1. `provideLiquidity` accepts Tokens and ETH, and adds them to the Uniswap Pair, which creates fresh LP tokens\\n *   2. `depositLP` accepts existing Token-ETH LP tokens\\n *   3. `purchaseTokensAndDepositLP` accepts ETH, market buys a small amount of Tokens on Uniswap, then mints new Tokens,\\n *      and finally adds Tokens and ETH to the Uniswap Pair, which creates fresh LP tokens\\n * \\n * Each user has a score, which can only increase over time as they interact with the contract, because the only action is to\\n * add more liquidity. A user's score is simply the total amount of LP tokens that they've locked into the system, via the\\n * three functions listed above.\\n * \\n * The system keeps track of two equally-sized, sorted lists. Each entry in the list contains a user's address and their current score.\\n * Every time a score is created or updated, the lists are re-balanced and re-sorted. See `Lists.sol` for the implementation.\\n * \\n * When the game is over, the system sucks as much liquidity out of the Uniswap Pair as possible, and then distributes the \\n * collected Ether to all participants. The amount of Ether reward that any given user receives is dependent on a few factors:\\n *\\n *   1. how much liquidity they've added to the system\\n *   2. how much liquidity everyone else has added to the system\\n *   3. which list they're on (\\\"top half of all scores\\\" list, or \\\"bottom half of all scores\\\" list)\\n * \\n * At a high level, this is how the rewards are collected (liquidity is removed):\\n * \\n *   1. Call Uniswap Router's `removeLiquidityETH` with all of the LP tokens that this system controls, sending all\\n *      rewards (Tokens and Ether) back here.\\n *   2. For all of the Tokens that now belong to the system, call Uniswap Router's `swapExactTokensForETH`, which\\n *      forces out more ETH that may have existed in liquidity (due to people manually adding liquidity and not\\n *      playing this game).\\n *   3. Now the system contains a bag of Ether, which are used for rewards.\\n * \\n * At a high level, calculating the rewards for any given user at any given time works like this:\\n * \\n *   1. If the game is not over, then the reward calculation logic \\\"pretends\\\" that the game is ending at that moment,\\n *      and performs read-only logic on the above process. So, from the point of view of the caller, it makes no difference\\n *      if the game is over or not when calculating rewards for an account. The only difference is that DURING gameplay,\\n *      a user's calculated rewared will change every time score state changes, but once the game is over a user's rewards\\n *      become fixed. So, we can assume we know the \\\"total Ether for rewards\\\" for the rest of this calculation.\\n *   2. Initially, the Total Ether Rewards are split between the \\\"winning list\\\" and the \\\"losing list\\\" (denoted in code as\\n *      \\\"positive list\\\" and \\\"negative list\\\"). That initial split is completely determined by the relative total scores of\\n *      the two lists. For example, if the sum of all scores in the Positive List is 70, and the sum of all scores in the\\n *      Negative List is 30, (total score of 100 between the two lists) and the total Ether rewards are 10 ETH, then\\n *      70 / 100 * 10 ETH = 7 ETH belong to the Positive List and 30 / 100 * 10 ETH = 3 ETH belong to the Negative List.\\n *   3. Next, an owner-defined percentage of the Negative List rewards is TAKEN from the Negative List and GIVEN to the\\n *      Positive List. For example (continuing from above example), if that owner-defined percentage is 50%, then\\n *      3 ETH * 0.5 = 1.5 ETH will be subtracted from the Negative List (leaving that list with 3 ETH - 1.5 ETH = 1.5 ETH),\\n *      and added to the Positive List (leaving that list with 7 ETH + 1.5 ETH = 8.5 ETH).\\n *   4. Finally, a user's reward is calculated as their percentage of their lists's total score, multiplied by the rewards\\n *      that belong to that list. For example (continuing from the above example), if a user is on the Positive List with a\\n *      score of 14, then they account for 14 / 70 = 20% of that list, so they'll receive 8.5 ETH * 0.2 = 1.7 ETH as reward.\\n *      If a user is on the Negative List with a score of 3, then they account for 3 / 30 = 10% of that list, so they'll\\n *      receive 1.5 ETH * 0.1 = 0.15 ETH as reward.\\n *\\n * @dev Inherits from the `Lists` contract, which houses all implementation of the two weighted, sorted list management\\n */\\ncontract Game is Lists, ERC20, Ownable {\\n    using SafeMath for uint256;\\n\\n    uint256 constant MAX_MARKET_PURCHASE = 10**18 / 2; // 50%\\n\\n    /**\\n     * @notice The timestamp at which the game is over. No more score-increasing functions are callable after this time.\\n     */\\n    uint256 public immutable endTime;\\n\\n    bool private _distributed;\\n    uint256 private _totalRewards;\\n\\n    /**\\n     * @notice Tracks whether or not an account has claimed their rewards.\\n     */\\n    mapping(address => bool) public claimedRewards;\\n\\n    /**\\n     * @notice Addresses of the Uniswap Factory and Router\\n     */\\n    IUniswapV2Factory public immutable uniswapV2Factory;\\n    IUniswapV2Router02 public immutable uniswapV2Router;\\n\\n    // Used to calculate the fraction of rewards that are taken from the negative list, and given to positive list\\n    // Note: the \\\"_negativeWeight\\\" value is used as the numerator in a calculation with the denominator equaling 10e18\\n    uint256 private _negativeWeight;\\n\\n    // Used to determine how much input Ether is used to market-buy Token on Uniswap\\n    // Note: the \\\"marketPurchase\\\" value is used as the numerator in a calculation with the denominator equaling 10e18\\n    uint256 public marketPurchase;\\n\\n    /**\\n     * @notice Instance of the contract where all value (ETH / Tokens) is held\\n     */\\n    Rewards public rewards;\\n\\n    // Minimum acceptable values for deposit\\n    uint256 public minEthers;\\n    uint256 public minLpTokens;\\n\\n    event ProvidedLiquidity(address indexed account, address indexed forAccount, uint256 scoreIncrease, uint256 newScore, uint256 newPayout);\\n    event DepositedLP(address indexed account, address indexed forAccount, uint256 scoreIncrease, uint256 newScore, uint256 newPayout);\\n    event PurchasedGameTokensAndDepositedLP(address indexed account, address indexed forAccount, uint256 scoreIncrease, uint256 newScore, uint256 newPayout);\\n    event SplitAdjusted(uint256 newNegativeWeight);\\n    event MarketPurchaseAdjusted(uint256 newMarketPurchase);\\n    event MinEthersAdjusted(uint256 newMinEthers);\\n    event MinLpTokensAdjusted(uint256 newMinLpTokens);\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint256 _initialMint,\\n        address mintOwner,\\n        IUniswapV2Router02 _uniswapV2Router,\\n        uint256 _endTime,\\n        uint256 negativeWeight,\\n        uint256 _marketPurchase,\\n        uint256 _minEthers,\\n        uint256 _minLpTokens\\n    ) ERC20(_name, _symbol) {\\n        require(marketPurchase <= MAX_MARKET_PURCHASE, \\\"Game: attemping to set purchase percentage > 50%\\\");\\n        require(negativeWeight <= 10**18, \\\"Game: attemping to set split weigth > 100%\\\");\\n        require(_endTime > block.timestamp, \\\"Game: attemping to set endTime value less than or equal to now\\\");\\n\\n        // mint the initial set of tokens\\n        _mint(mintOwner, _initialMint * (uint256(10)**decimals()));\\n\\n        // save (and derive) the uniswap router and factory addresses\\n        uniswapV2Router = _uniswapV2Router;\\n        uniswapV2Factory = IUniswapV2Factory(_uniswapV2Router.factory());\\n\\n        // save the rest of the initial contract state variables\\n        endTime = _endTime;\\n        _negativeWeight = negativeWeight;\\n        marketPurchase = _marketPurchase;\\n\\n        // deploy an instance of the Rewards contract, making this contract it's \\\"owner\\\"\\n        rewards = new Rewards(address(this), _uniswapV2Router, _endTime);\\n\\n        minEthers = _minEthers;\\n        minLpTokens = _minLpTokens;\\n\\n        // MAX_UINT256 approval\\n        _approve(address(rewards), address(_uniswapV2Router), 2**256 - 1); \\n    }\\n\\n    /**\\n     * @notice reverts if there is not yet an existing Uniswap pair for this Token and Ether\\n     */\\n    modifier pairExists() {\\n        require(getUniswapPair() != address(0), \\\"Game::pairExists: pair has not been created\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice reverts if the endTime has passed, which indicates that the game is over\\n     */\\n    modifier active() {\\n        require(endTime > block.timestamp, \\\"Game::active: game is over! distribute and claim your rewards\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice reverts if the endTime has not passed, which indicates that the game is still being played\\n     */\\n    modifier over() {\\n        require(endTime <= block.timestamp, \\\"Game::over: game is still active\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Accept any amount of Token and Ether, add as much liquidity to Uniswap as possible, refund any leftovers\\n     * @param tokenAmount the amount of Tokens to attempt to add as liquidity\\n     * @param account the account which should receive points\\n     * @dev Payable function accepts Ether input, will attempt to add all of it as liquidity\\n     * @dev Requires that the user has previously `approve`d Token transfers for this contract\\n     * @return scoreIncrease the delta between an account's old score, and their score after this function is complete\\n     * @return newScore the account's new score, after increasing it\\n     * @return newPayout the account's new payout amount\\n     */\\n    function provideLiquidity(uint256 tokenAmount, address account) pairExists active public payable returns (uint256 scoreIncrease, uint256 newScore, uint256 newPayout) {\\n        // send `tokenAmount` number of tokens from msg.sender to the `rewards` contract\\n        _transfer(msg.sender, address(rewards), tokenAmount);\\n\\n        // add as much liquidity to Uniswap Pair as possible\\n        // function returns with the actual amount of Tokens and Eth added, since it safely adds liquidity at the current price ratio\\n        // the `addLiquidityETH` call is proxied to the `rewards` contract, which is where the new LP tokens will belong to\\n        (uint256 amountTokenAdded, uint256 amountEthAdded, uint256 liquidity) = rewards.addLiquidityETH{ value: msg.value }(tokenAmount);\\n\\n        // since there will likely be a small amount of either Tokens or Ether leftover, refund that back to the msg.sender\\n        refund(msg.sender, tokenAmount, msg.value, amountTokenAdded, amountEthAdded);\\n\\n        // an account's score is directly calculated by the amount of liquidity tokens they've created for the game\\n        scoreIncrease = liquidity;\\n        newScore = addScore(account, scoreIncrease);\\n\\n        // get the updated reward payout information for the account\\n        newPayout = getAccountRewards(account);\\n\\n        emit ProvidedLiquidity(msg.sender, account, scoreIncrease, newScore, newPayout);\\n    }\\n\\n    /**\\n     * @notice Accept any amount of Uniswap Token-ETH LP tokens\\n     * @param tokenAmount the amount of Uniswap Token-ETH LP tokens to take control of\\n     * @param account the account which should receive points\\n     * @dev Requires that the user has `approve`d this contract to be able to spend their Uniswap Token-ETH LP tokens\\n     * @return scoreIncrease the delta between an account's old score, and their score after this function is complete\\n     * @return newScore the account's new score, after increasing it\\n     * @return newPayout the account's new payout amount\\n     */\\n    function depositLP(uint256 tokenAmount, address account) pairExists active public returns (uint256 scoreIncrease, uint256 newScore, uint256 newPayout) {\\n        require(tokenAmount >= minLpTokens, \\\"Game::depositLP: LP token amount below minimum\\\");\\n\\n        // grab the Uniswap pair address and cast it into an IUniswapV2Pair instance...\\n        IUniswapV2Pair pair = IUniswapV2Pair(getUniswapPair());\\n        // ...so that we can `transferFrom` the tokens to the `rewards` contract\\n        pair.transferFrom(msg.sender, address(rewards), tokenAmount);\\n\\n        // an account's score is directly calculated by the amount of liquidity tokens they've given to the game\\n        scoreIncrease = tokenAmount;\\n        newScore = addScore(account, scoreIncrease);\\n\\n        // get the updated reward payout information for the account\\n        newPayout = getAccountRewards(account);\\n\\n        emit DepositedLP(msg.sender, account, scoreIncrease, newScore, newPayout);\\n    }\\n\\n    /**\\n     * @notice Accept any amount of Ether, market buy some Tokens, mint more Tokens, add liquidity\\n     * @param account the account which should receive points\\n     * @param minTokensToPurchased The minimum amount of GAME tokens that must be received from the ETH->GAME purchase\\n     * @dev Payable function accepts Ether input\\n     * @return scoreIncrease the delta between an account's old score, and their score after this function is complete\\n     * @return newScore the account's new score, after increasing it\\n     * @return newPayout the account's new payout amount\\n     */\\n    function purchaseTokensAndDepositLP(address account, uint256 minTokensToPurchased) pairExists active public payable returns (uint256 scoreIncrease, uint256 newScore, uint256 newPayout) {\\n        require(msg.value >= minEthers, \\\"Game::purchaseTokensAndDepositLP: ETH amount below minimum\\\");\\n\\n        // of the Ether passed in, calculate a small piece of it to be used for market buying tokens on Uniswap\\n        // we do this beacuse we want to have the optics of continued market buying\\n        uint256 ethForMarket = msg.value.mul(marketPurchase).div(10**18);\\n        uint256 ethForLiquidity = msg.value.sub(ethForMarket);\\n\\n        // use the Ether reserved for the market buy, to do a market buy\\n        // hold onto the number of tokens that were purchased\\n        // these tokens that were purchased, belong to the `rewards` contract\\n        uint256 tokensPurchased = rewards.swapExactETHForTokens{ value: ethForMarket }(minTokensToPurchased);\\n\\n        // get a quote for the number of tokens that are currently \\\"equivalent\\\" to the remaining Ether\\n        IUniswapV2Pair pair = IUniswapV2Pair(getUniswapPair());\\n        (uint112 _reserve0, uint112 _reserve1,) = pair.getReserves();\\n        uint256 tokensForLiquidity = uniswapV2Router.quote(\\n            ethForLiquidity,\\n            pair.token0() == uniswapV2Router.WETH() ? _reserve0 : _reserve1,\\n            pair.token1() == uniswapV2Router.WETH() ? _reserve0 : _reserve1\\n        );\\n\\n        // calculate the \\\"difference\\\" -- that is, the amount of tokens that the `rewards` contract needs\\n        // which are equal to the token number we just calculated\\n        if (tokensForLiquidity > tokensPurchased) {\\n            // (stack too deep, so did an inline calculation to determine `tokensToMint`, the second argument of _mint)\\n            // mint those tokens and give them to the `rewards` contract (which also contains the Tokens received from the above swap)\\n            _mint(address(rewards), tokensForLiquidity.sub(tokensPurchased));\\n        } else if (tokensForLiquidity < tokensPurchased) {\\n            // Use `tokensPurchased` for liquidity if it's greater than `tokensForLiquidity`\\n            tokensForLiquidity = tokensPurchased;\\n        }\\n\\n        // add as much liquidity to Uniswap Pair as possible\\n        // function returns with the actual amount of Tokens and Eth added, since it safely adds liquidity at the current price ratio\\n        // the `addLiquidityETH` call is proxied to the `rewards` contract, which is where the new LP tokens will belong to\\n        (uint256 amountTokenAdded, uint256 amountEthAdded, uint256 liquidity) = rewards.addLiquidityETH{ value: ethForLiquidity }(tokensForLiquidity);\\n\\n        // since there will likely be a small amount of either Tokens or Ether leftover, refund that back to the msg.sender\\n        refund(msg.sender, tokensForLiquidity, ethForLiquidity, amountTokenAdded, amountEthAdded);\\n\\n        // an account's score is directly calculated by the amount of liquidity tokens they've created for the game\\n        scoreIncrease = liquidity;\\n        newScore = addScore(account, scoreIncrease);\\n\\n        // get the updated reward payout information for the account\\n        newPayout = getAccountRewards(account);\\n\\n        emit PurchasedGameTokensAndDepositedLP(msg.sender, account, scoreIncrease, newScore, newPayout);\\n    }\\n\\n    /**\\n     * @notice Perform simple subtractions to determine if there is any leftover Tokens and Ether, and transfers that value to the specified account\\n     * @dev The SafeMath subtractions in here are safe, since it's not possible for `amount...Added` to be greater than `...amount`\\n     * @dev There is an assumption that this function is called after adding liquidity, and not all of the input value was used\\n     * @param to the account to send refunded Tokens or Ether to\\n     * @param tokenAmount the amount of Tokens that were attempted to be added to liquidity\\n     * @param ethAmount the amount of Ether that were attempted to be added to liquidity\\n     * @param amountTokenAdded the amount of Tokens that were actually added to liquidity\\n     * @param amountEthAdded the amount of Ether that were actually added to liquidity\\n     */    \\n    function refund(address payable to, uint256 tokenAmount, uint256 ethAmount, uint256 amountTokenAdded, uint256 amountEthAdded) private {\\n        // calculate if there is any \\\"leftover\\\" Tokens\\n        uint256 leftoverToken = tokenAmount.sub(amountTokenAdded);\\n        if (leftoverToken > 0) {\\n            // transfer the leftover Tokens from the `rewards` contract (where they exist) to `to`\\n            _transfer(address(rewards), to, leftoverToken);\\n        }\\n\\n        // calculate if there is any \\\"leftover\\\" Ether\\n        uint256 leftoverEth = ethAmount.sub(amountEthAdded);\\n        if (leftoverEth > 0) {\\n            // transfer the leftover Ether from the `rewards` contract (where they exist) to `to`\\n            rewards.sendEther(to, leftoverEth);\\n        }\\n    }\\n\\n    /**\\n     * @notice Executed one time, by anyone, only after the game is over\\n     * @dev Does everything it can do to suck all liquidity out of Uniswap, which is then used as rewards for users\\n     */\\n    function distribute() over public {\\n        // revert if this function has already been called (see last line in this function)\\n        require(_distributed == false, \\\"Game::distribute: rewards have already been distributed\\\");\\n        \\n        // set the flag which will cause this function to revert if called a second time\\n        _distributed = true;\\n\\n        // grab the Uniswap Token-ETH pair\\n        IUniswapV2Pair pair = IUniswapV2Pair(getUniswapPair());\\n\\n        // if any Uniswap Token-ETH LP tokens exist on this contract (accidently sent), send them to the `rewards` contract\\n        uint256 myLPBalance = pair.balanceOf(address(this));\\n        if (myLPBalance > 0) {\\n            pair.transfer(address(rewards), myLPBalance);\\n        }\\n\\n        // get the Token-ETH LP token balance of `rewards`, and remove all of that liquidity\\n        // the resultant Ether and Tokens will belong to the `rewards` contract\\n        uint256 liquidityBalance = pair.balanceOf(address(rewards));\\n        rewards.removeLiquidityETH(pair, liquidityBalance);\\n\\n        // if any Tokens belong to this contract, send them to the `rewards` contract\\n        uint256 myTokenBalance = balanceOf(address(this));\\n        if (myTokenBalance > 0) {\\n            _transfer(address(this), address(rewards), myTokenBalance);\\n        }\\n\\n        // get the Tokens balance of the `rewards` contract\\n        uint256 rewardsTokenBalance = balanceOf(address(rewards));\\n\\n        // swap all of the `rewards` contract's Token balance into any more Ether that might be in the Uniswap pair\\n        rewards.swapExactTokensForETH(rewardsTokenBalance);\\n\\n        // store the Ether balance of the `rewards` contract, so that we can calulcate individual rewards later\\n        _totalRewards = address(rewards).balance;\\n    }\\n\\n    /**\\n     * @notice Allows an account to claim their rewards, after the game is over\\n     * @param account the address which has Ether to claim\\n     */\\n    function claim(address payable account) over external {\\n        // helper logic -- if the game is over and someone is attemping to claim rewards,\\n        // but `distribute` has not yet been called, then call it\\n        if (!_distributed) {\\n            distribute();\\n        }\\n\\n        // revert if the given account has already claimed their rewards\\n        require(claimedRewards[account] == false, \\\"Game::claim: this account has already claimed rewards\\\");\\n\\n        // set the flag indicating that rewards have been claimed for the given account\\n        claimedRewards[account] = true;\\n\\n        // get the amount of Ether rewards for the given account\\n        uint256 accountRewards = getAccountRewards(account);\\n\\n        // send those Ether rewards to the account, proxied through the `rewards` contract\\n        // which is where the Ether resides\\n        rewards.sendEther(account, accountRewards);\\n    }\\n\\n    /**\\n     * @notice Get the total amount of rewards that the game is paying out.\\n     * @return the total amount of rewards that the game is paying out.\\n     * @dev If the game is over, the rewards are known and static\\n     * @dev If the game is ongoing, we can calculate what the rewards will be if the game ended right now.\\n     */\\n    function getTotalRewards() public view returns (uint256) {\\n        // if the game is over and we've sucked liquidity and distributed Ether to the `rewards` contract,\\n        // then we know the total amount of rewards already.\\n        if (_distributed) {\\n            return _totalRewards;\\n        }\\n\\n        // if a pair hasn't been created yet, (contract was deployed but game is not fully set up),\\n        // return 0\\n        IUniswapV2Pair pair = IUniswapV2Pair(getUniswapPair());\\n        if (address(pair) == address(0)) {\\n            return 0;\\n        }\\n\\n        // if there is no liquidity in the Uniswap Token-ETH pool, return 0\\n        uint256 totalLpSupply = pair.totalSupply();\\n        if (totalLpSupply == 0) {\\n            return 0;\\n        }\\n\\n        // otherwise, calculate how much Ether we'd be able to suck out of the pool right now (but don't do it)\\n\\n        // figure out how much Ether and how much Tokens exist in the pair pools\\n        (uint112 _reserve0, uint112 _reserve1,) = pair.getReserves();\\n        uint256 wethReserves = pair.token0() == uniswapV2Router.WETH() ? _reserve0 : _reserve1;\\n        uint256 gameTokenReserves = pair.token1() == uniswapV2Router.WETH() ? _reserve0 : _reserve1;\\n\\n        // figure out the \\\"percentage\\\" (solidity, lol) of LP tokens that the `rewards` contract holds\\n        uint256 rewardsLpShare = (pair.balanceOf(address(rewards)).add(pair.balanceOf(address(this)))).mul(10**18).div(totalLpSupply);\\n\\n        // use that percentage to calculate how much Tokens and Eth from the pools that the `rewards` contract _doesn't_ \\\"control\\\"\\n        uint256 pairWethRemaining = wethReserves.sub(rewardsLpShare.mul(wethReserves).div(10**18));\\n        uint256 pairGameTokenRemaining = gameTokenReserves.sub(rewardsLpShare.mul(gameTokenReserves).div(10**18));\\n\\n        // calculate how many Tokens the `rewards` contract \\\"controls\\\" (both from liquidity, and that it directly owns,\\n        // and also include Tokens that this contract owns because during distribution we'll send those to `rewards` if they exist)\\n        uint256 rewardsGameTokenTotal = gameTokenReserves.sub(pairGameTokenRemaining).add(balanceOf(address(rewards))).add(balanceOf(address(this)));\\n        \\n        // if any of our main variables are 0, return 0, otherwise `getAmountsOut` will revert\\n        if (rewardsGameTokenTotal == 0 || pairGameTokenRemaining == 0 || pairWethRemaining == 0) {\\n            return 0;\\n        }\\n\\n        // Use Uniswap's `getAmountOut` to figure out how much Ether we'd get if we attempted to swap all of our controlled\\n        // Tokens for the Ether in the contract, \\\"after pulling liquidity\\\". Then, add in the Ether that we would have pulled\\n        // from liquidity initially. Then, add in any Ether that the `rewards` contract currently has.\\n        // Return it.\\n        return uniswapV2Router.getAmountOut(rewardsGameTokenTotal, pairGameTokenRemaining, pairWethRemaining).add(wethReserves.sub(pairWethRemaining)).add(address(rewards).balance);\\n    }\\n\\n    /**\\n     * @notice Get the total amount of Ether rewards that belong to (will be distributed to) the negative (losing) list\\n     * @return etherAmount the amount of Ether that belongs to the negative list\\n     */\\n    function getNegativeRewards() public view returns (uint256 etherAmount) {\\n        // get the total score, which is the sum of the scores of the two lists\\n        uint256 totalScore = getPositiveListTotalScore().add(getNegativeListTotalScore());\\n\\n        // if the total score is 0, then there are no players, and early exit with 0\\n        if (totalScore == 0) {\\n            etherAmount = 0;\\n        } else {\\n            // how much of the total score, does the negative list contribute\\n            uint256 negativePercentage = getNegativeListTotalScore().mul(10**18).div(totalScore);\\n\\n            // of that correctly-weighted percentage, reduce it by our defined factor\\n            // THIS IS WHERE THE WINNERS WIN, AND THE LOSERS LOSE\\n            uint256 negativeSlice = negativePercentage.mul(_negativeWeight).div(10**18);\\n\\n            // calculate the negative list rewards by taking newly calculated \\\"negative slice\\\" fraction of the total rewards\\n            etherAmount = getTotalRewards().mul(negativeSlice).div(10**18);\\n        }\\n    }\\n\\n    /**\\n     * @notice Get the total amount of Ether rewards that belong to (will be distributed to) the positive (winning) list\\n     * @return etherAmount the amount of Ether that belongs to the positive list\\n     */\\n    function getPositiveRewards() public view returns (uint256 etherAmount) {\\n        // get the total amount of Ether rewards\\n        uint256 totalRewards = getTotalRewards();\\n\\n        // get the amount of rewards that belong to the negative list\\n        uint negativeRewards = getNegativeRewards();\\n\\n        // the positive list rewards is then total minus negative\\n        etherAmount = totalRewards.sub(negativeRewards);\\n    }\\n\\n    /**\\n     * @notice Given an account, returns the rewards that account will receive at any given moment, if the game ended at that moment\\n     * @param account the address of the account that we're interested in\\n     * @return etherAmount the amount of Ether which will be rewarded to the account\\n     */\\n    function getAccountRewards(address account) public view returns (uint256 etherAmount) {\\n        // check if the account is on the positive list or the negative list or neither\\n        if (getIsOnPositive(account)) {\\n            // an account's score is calculated as their score percentage of their list's total reward\\n            etherAmount = getAccountScore(account).mul(getPositiveRewards()).div(getPositiveListTotalScore());\\n        } else if (getIsOnNegative(account)) {\\n            // an account's score is calculated as their score percentage of their list's total reward\\n            etherAmount = getAccountScore(account).mul(getNegativeRewards()).div(getNegativeListTotalScore());\\n        } else {\\n            // if this account isn't on either list (they haven't played), return 0\\n            etherAmount = 0;\\n        }\\n    }\\n\\n    /**\\n     * @notice Get the address of the Uniswap Token-ETH pair contract\\n     * @return pair the address of the Uniswap Token-ETH pair contract, returns 0x0 if the pair hasn't yet been created\\n     */\\n    function getUniswapPair() public view returns (address pair) {\\n        pair = uniswapV2Factory.getPair(address(this), uniswapV2Router.WETH());\\n    }\\n\\n    /**\\n     * @notice Owner function to recover any unclaimed Ether, only callable once 90 days have passed since the game ended\\n     * @param to address to send the Ether to\\n     * @param amount the amount of Ether to send\\n     * @dev this call is proxied to the `rewards` contract, since that's where the Ether lives\\n     */\\n    function recoverEther(address payable to, uint256 amount) onlyOwner public {\\n        // revert if the game hasn't been over for at least 90 days\\n        require(block.timestamp > endTime.add(90 days), \\\"Game::recoverEther: it has not been 90 days since the game ended\\\");\\n\\n        // proxy the call down to the `rewards` contract\\n        rewards.sendEther(to, amount);\\n    }\\n\\n    /**\\n     * @notice Owner function to recover any token held by the Game and/or Rewards contracts, only callable once 90 days have passed since the game ended\\n     * @param to address to send the tokens to\\n     */\\n    function recoverToken(address token, address to) onlyOwner public {\\n        // revert if the game hasn't been over for at least 90 days\\n        require(block.timestamp > endTime.add(90 days), \\\"Game::recoverToken: it has not been 90 days since the game ended\\\");\\n\\n        // Drain tokens from Rewards contract (if there is any)\\n        rewards.recoverToken(token);\\n\\n        uint256 myBalance = IERC20(token).balanceOf(address(this));\\n        if (myBalance > 0) {\\n            IERC20(token).transfer(to, myBalance);\\n        }\\n    }\\n\\n    /**\\n     * @notice Owner function to adjust the numbers used to calculate how much reward to \\\"take\\\" from the losing list (negative) and \\\"give\\\" to the winning list (positive)\\n     * @dev Only executable while the game is active\\n     * @param negativeWeight a multiplier number\\n     */\\n    function adjustSplitWeight(uint256 negativeWeight) active onlyOwner public {\\n        require(negativeWeight <= 10**18, \\\"Game::adjustSplitWeight: attemping to set split weigth > 100%\\\");\\n\\n        _negativeWeight = negativeWeight;\\n\\n        emit SplitAdjusted(negativeWeight);\\n    }\\n\\n    /**\\n     * @notice Owner function to adjust the numbers used to calculate how much of the input Ether to `purchaseTokensAndDepositLP` will be used for market buying Tokens on Uniswap.\\n     * @dev if the number is above \\\"50%\\\", a subtraction underflow occurs and reverts the public function, so check for that here when setting the values\\n     * @param _marketPurchase a multiplier number\\n     */\\n    function adjustMarketPurchase(uint256 _marketPurchase) onlyOwner public {\\n        // revert if the input number is less than half of our constant divisor\\n        require(_marketPurchase <= MAX_MARKET_PURCHASE, \\\"Game::adjustMarketPurchase: attemping to set purchase percentage > 50%\\\");\\n        marketPurchase = _marketPurchase;\\n\\n        emit MarketPurchaseAdjusted(_marketPurchase);\\n    }\\n\\n    /**\\n     * @notice Owner function to adjust the min Ethers accepted to deposit\\n     * @dev Only executable while the game is active\\n     * @param _minEthers a multiplier number\\n     */\\n    function adjustMinEthers(uint256 _minEthers) active onlyOwner public {\\n        minEthers = _minEthers;\\n\\n        emit MinEthersAdjusted(minEthers);\\n    }\\n\\n    /**\\n     * @notice Owner function to adjust the min LP tokens accepted to deposit\\n     * @dev Only executable while the game is active\\n     * @param _minLpTokens a multiplier number\\n     */\\n    function adjustMinLpTokens(uint256 _minLpTokens) active onlyOwner public {\\n        minLpTokens = _minLpTokens;\\n\\n        emit MinLpTokensAdjusted(minLpTokens);\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/cmarcelo/git/cupid/contracts/contracts/Lists.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\n\\npragma solidity ^0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"solidity-linked-list/contracts/StructuredLinkedList.sol\\\";\\n\\n/**\\n * @title Lists implements two equal length, sorted lists\\n * @notice This contract has a single \\\"internal\\\" (to be called from an inheriting contract) state-changing function, which accepts an account and a score.\\n * The implementation details deal with either adding this account to the correct list, in the correct spot, if it's a new account\\n * OR increasing the score of the account, and making sure it ends up in the correct list, in the correct spot, if the account is already on a list.\\n * The two lists will always either have equal length, or the \\\"positive\\\" list will have a length one greater than the \\\"negative\\\" list.\\n * The two lists will always be sorted (descending), according the account's score. Each entry in each list is effectively a tuple of (account, score).\\n * The last score of the \\\"postive\\\" list will always be >= the first score of the \\\"negative\\\" list.\\n * A plethora of public view functions expose various details about accounts, scores, and lists.\\n * @dev We leverage a StructuredLinkedList library to achieve the sorted lists.\\n */\\ncontract Lists {\\n    using SafeMath for uint256;\\n    using StructuredLinkedList for StructuredLinkedList.List;\\n\\n    // mapping of accounts, to their total current scores\\n    mapping(address => uint256) private _accountScores;\\n    \\n    // mapping of accounts, to a boolean indicating if they exist on the \\\"positive\\\" list\\n    mapping(address => bool) private _accountOnPositive;\\n\\n    // this block of variables is everything needed to track one list (the \\\"positive\\\" list)\\n    uint256 private _positiveTicker; // unique node id incrementer (each item in the list stored as a simple integer)\\n    mapping(uint256 => address) private _positiveNodes; // mapping of node id to account\\n    mapping(address => uint256) private _positiveNodesPrime; // mapping of account to node id\\n    StructuredLinkedList.List private _positiveList; // instance of the StructuredLinkedList, which includes functions for push, pop, insert, etc\\n    uint256 private _positiveListTotalScore; // total score of the list\\n\\n    // this block of variables is everything needed to track one list (the \\\"negative\\\" list)\\n    uint256 private _negativeTicker; // unique node id incrementer (each item in the list stored as a simple integer)\\n    mapping(uint256 => address) private _negativeNodes; // mapping of node id to account\\n    mapping(address => uint256) private _negativeNodesPrime; // mapping of account to node id\\n    StructuredLinkedList.List private _negativeList; // instance of the StructuredLinkedList, which includes functions for push, pop, insert, etc\\n    uint256 private _negativeListTotalScore; // total score of the list\\n\\n    event AddedToPositiveList(address indexed account, uint256 score);\\n    event AddedToNegativeList(address indexed account, uint256 score);\\n    event RemovedFromPositiveList(address indexed account);\\n    event RemovedFromNegativeList(address indexed account);\\n\\n    /**\\n     * @notice Given a list, a mapping of nodes, and a value, figure out and return the node that should come right before it (the value)\\n     * @param list the list to operate on (either the positive or negative list)\\n     * @param _nodes the mapping of nodes => addresses, used to help determine scores necessary for sorting comparisons\\n     * @param _value the new value that we need to figure out where it belongs in the given list\\n     * @dev Re-implementation of a function included in the library, but tweaked for implementing a \\\"descending\\\" list\\n     * https://github.com/vittominacori/solidity-linked-list/blob/4124595810e508edbb0125b72a79d6b8e1e30573/contracts/StructuredLinkedList.sol#L126\\n     */\\n    function getSortedSpot(StructuredLinkedList.List storage list, mapping(uint256 => address) storage _nodes, uint256 _value) private view returns (uint256) {\\n        if (list.sizeOf() == 0) {\\n            return 0;\\n        }\\n\\n        // grab the last node on the list (node with smallest score)\\n        uint256 prev;\\n        (, prev) = list.getAdjacent(0, false);\\n\\n        // while our new value is still greater than or equal to the score of the current node...\\n        while ((prev != 0) && ((_value < _accountScores[_nodes[prev]]) != true)) {\\n            // ...move to the next (larger) node (score)\\n            prev = list.list[prev][false];\\n        }\\n        \\n        // return the first node that has a score greater than or equal to our input value\\n        return prev;\\n    }\\n\\n    /**\\n     * @notice removes the bottom node (lowest score) from the \\\"positive\\\" list\\n     * @return nodeAccount the account of the removed node\\n     * @return nodeScore the score of the removed node\\n     */\\n    function takeBottomOffPositive() private returns (address nodeAccount, uint256 nodeScore) {\\n        // use linked list functionality to pop the back (bottom) of the positive list, returning its node id\\n        uint256 nodeId = _positiveList.popBack();\\n\\n        // get and return the account for that node id\\n        nodeAccount = _positiveNodes[nodeId];\\n\\n        // get and return the score for that account\\n        nodeScore = _accountScores[nodeAccount];\\n\\n        // delete this account and score from the \\\"positive\\\" mapping structures\\n        delete _positiveNodes[nodeId];\\n        delete _positiveNodesPrime[nodeAccount];\\n\\n        // decrease the \\\"positive list\\\" score\\n        _positiveListTotalScore = _positiveListTotalScore.sub(nodeScore);\\n\\n        emit RemovedFromPositiveList(nodeAccount);\\n    }\\n\\n    /**\\n     * @notice removes the top node (highest score) from the \\\"negative\\\" list\\n     * @return nodeAccount the account of the removed node\\n     * @return nodeScore the score of the removed node\\n     */\\n    function takeTopOffNegative() private returns (address nodeAccount, uint256 nodeScore) {\\n        // use linked list functionality to pop the front (top) of the negative list, returning its node id\\n        uint256 nodeId = _negativeList.popFront();\\n\\n        // get and return the account for that node id\\n        nodeAccount = _negativeNodes[nodeId];\\n\\n        // get and return the score for that account\\n        nodeScore = _accountScores[nodeAccount];\\n\\n        // delete this account and score from the \\\"negative\\\" mapping structures\\n        delete _negativeNodes[nodeId];\\n        delete _negativeNodesPrime[nodeAccount];\\n\\n        // decrease the \\\"negative list\\\" score\\n        _negativeListTotalScore = _negativeListTotalScore.sub(nodeScore);\\n\\n        emit RemovedFromNegativeList(nodeAccount);\\n    }\\n\\n    /**\\n     * @notice Given an account and score, insert that \\\"tuple\\\" into the positive list in the correctly sorted spot\\n     * @param nodeAccount the account to add to the list\\n     * @param nodeScore the score to add to the list\\n     */\\n    function pushIntoPositive(address nodeAccount, uint256 nodeScore) private {\\n        // find the position (node id) of the node that should come directly before the new node that we'll create\\n        uint256 position = getSortedSpot(_positiveList, _positiveNodes, nodeScore);\\n\\n        // increase our node id counter to get a fresh node id\\n        _positiveTicker = _positiveTicker.add(1);\\n\\n        // insert the new node id into the list at the correct location\\n        _positiveList.insertAfter(position, _positiveTicker);\\n\\n        // link the new node id to the input account and score\\n        _positiveNodes[_positiveTicker] = nodeAccount;\\n        _positiveNodesPrime[nodeAccount] = _positiveTicker;\\n\\n        // set the mapping structure to indicate that this account exists on the positive list\\n        _accountOnPositive[nodeAccount] = true;\\n\\n        // increase the total positive list score\\n        _positiveListTotalScore = _positiveListTotalScore.add(nodeScore);\\n\\n        emit AddedToPositiveList(nodeAccount, nodeScore);\\n    }\\n\\n    /**\\n     * @notice Given an account and score, insert that \\\"tuple\\\" into the negative list in the correctly sorted spot\\n     * @param nodeAccount the account to add to the list\\n     * @param nodeScore the score to add to the list\\n     */\\n    function pushIntoNegative(address nodeAccount, uint256 nodeScore) private {\\n        // find the position (node id) of the node that should come directly before the new node that we'll create\\n        uint256 position = getSortedSpot(_negativeList, _negativeNodes, nodeScore);\\n\\n        // increase our node id counter to get a fresh node id\\n        _negativeTicker = _negativeTicker.add(1);\\n\\n        // insert the new node id into the list at the correct location\\n        _negativeList.insertAfter(position, _negativeTicker);\\n\\n        // link the new node id to the input account and score\\n        _negativeNodes[_negativeTicker] = nodeAccount;\\n        _negativeNodesPrime[nodeAccount] = _negativeTicker;\\n\\n        // set the mapping structure to indicate that this account does not exist on the positive list\\n        _accountOnPositive[nodeAccount] = false;\\n\\n        // increase the total negative list score\\n        _negativeListTotalScore = _negativeListTotalScore.add(nodeScore);\\n\\n        emit AddedToNegativeList(nodeAccount, nodeScore);\\n    }\\n    \\n    /**\\n     * @notice Takes an account address, and an \\\"increase\\\", and performs all of the logic necessary to:\\n     * 1) either: add this account to the proper list, if it's a new account\\n     * 2) or: update the account by adding the score increase to their existing score\\n     * 3) rearrange the lists so that they are properly sorted\\n     * 4) rearrange the lists so that they are properly balanced\\n     * @param account the address that has a score increase\\n     * @param increase the increase score amount\\n     * @return newScore the new total score for the account\\n     */\\n    function addScore(address account, uint256 increase) internal returns (uint256 newScore) {\\n        // grab the account's current score\\n        uint256 currentScore = _accountScores[account];\\n\\n        // calculate their new score\\n        newScore = currentScore.add(increase);\\n\\n        // update the score mapping with their new score\\n        _accountScores[account] = newScore;\\n\\n        // if the account's current score is not 0, then we know they exist on a list already.\\n        // we want to remove them from whatever list they're currently on\\n        if (currentScore != 0) {\\n            // if they're on the positive list...\\n            if (_accountOnPositive[account] == true) {\\n                // grab their node id, given their account\\n                uint256 nodeId = _positiveNodesPrime[account];\\n\\n                // remove that node from the linked list\\n                _positiveList.remove(nodeId);\\n\\n                // unlink the node id from their account and score\\n                delete _positiveNodes[nodeId];\\n                delete _positiveNodesPrime[account];\\n\\n                // decrease the \\\"positive list\\\" score\\n                _positiveListTotalScore = _positiveListTotalScore.sub(currentScore);\\n\\n                emit RemovedFromPositiveList(account);\\n            // else they must be on the negative list...\\n            } else {\\n                // grab their node id, given their account\\n                uint256 nodeId = _negativeNodesPrime[account];\\n\\n                // remove that node from the linked list\\n                _negativeList.remove(nodeId);\\n\\n                // unlink the node id from their account and score\\n                delete _negativeNodes[nodeId];\\n                delete _negativeNodesPrime[account];\\n\\n                // decrease the \\\"positive list\\\" score\\n                _negativeListTotalScore = _negativeListTotalScore.sub(currentScore);\\n\\n                emit RemovedFromNegativeList(account);\\n            }\\n        }\\n        // now, whether the account is new or existing, we are in the same place:\\n        // the two lists and all associated list-level data structures have no\\n        // knowledge of the account or score\\n\\n        // optimistically push the account/score into the positive list\\n        pushIntoPositive(account, newScore);\\n\\n        // if the positive list size is too big (two+ more items than negative list)...\\n        if (_positiveList.size.sub(1) > _negativeList.size) {\\n            // remove the lowest account/score from the positive list\\n            (address lastPositiveNodeAccount, uint256 lastPositiveNodeScore) = takeBottomOffPositive();\\n\\n            // push that account/score into the negative list\\n            pushIntoNegative(lastPositiveNodeAccount, lastPositiveNodeScore);\\n        }\\n\\n        // read the the bottom of the positive list, and the top of the negative list\\n        (, uint256 firstNegativeNodeId) = _negativeList.getNextNode(0);        \\n        (, uint256 lastPositiveNodeId) = _positiveList.getPreviousNode(0);\\n\\n        // if the score of the bottom of the positive list is less than the score of the top of the negative list, we need to flip them\\n        if (_accountScores[_negativeNodes[firstNegativeNodeId]] > _accountScores[_positiveNodes[lastPositiveNodeId]]) {\\n            // take the bottom off the positive list (smaller score)\\n            (address lastPositiveNodeAccount, uint256 lastPositiveNodeScore) = takeBottomOffPositive();\\n\\n            // take the top off the negative list (larger score)\\n            (address firstNegativeNodeAccount, uint256 firstNegativeNodeScore) = takeTopOffNegative();\\n\\n            // push the smaller score into the negative list\\n            pushIntoNegative(lastPositiveNodeAccount, lastPositiveNodeScore);\\n\\n            // push the larger score into the positive list\\n            pushIntoPositive(firstNegativeNodeAccount, firstNegativeNodeScore);\\n        }\\n    }\\n\\n    /**\\n     * @notice given a node id, returns a bool indicating if there is a following node on the positive list, and that node id if applicable\\n     * @param id the node id to check\\n     * @return exists bool indicating if there is a node following the input node on the positive list\\n     * @return nextId the id of the next node on the positive list, if it exists\\n     */\\n    function getNextPositiveNode(uint256 id) public view returns (bool exists, uint256 nextId) {\\n        (exists, nextId) = _positiveList.getNextNode(id);\\n    }\\n\\n    /**\\n     * @notice iven a node id, returns a bool indicating if there is a following node on the negative list, and that node id if applicable\\n     * @param id the node id to check\\n     * @return exists bool indicating if there is a node following the input node on the negative list\\n     * @return nextId the id of the next node on the negative list, if it exists\\n     */\\n    function getNextNegativeNode(uint256 id) public view returns (bool exists, uint256 nextId) {\\n        (exists, nextId) = _negativeList.getNextNode(id);\\n    }\\n\\n    /**\\n     * @notice given a node id, returns the address associated with that id on the positive list\\n     * @param id the node id to check\\n     * @return account address of the account associated with the node id on the positive list\\n     */\\n    function getPositiveAddress(uint256 id) public view returns (address account) {\\n        account = _positiveNodes[id];\\n    }\\n\\n    /**\\n     * @notice given a node id, returns the address associated with that id on the negative list\\n     * @param id the node id to check\\n     * @return account address of the account associated with the node id on the negative list\\n     */\\n    function getNegativeAddress(uint256 id) public view returns (address account) {\\n        account = _negativeNodes[id];\\n    }\\n\\n    /**\\n     * @notice returns the score of a given account\\n     * @param account the account to check\\n     * @return score the score of the account\\n     */\\n    function getAccountScore(address account) public view returns (uint256 score) {\\n        score = _accountScores[account];\\n    }\\n\\n    /**\\n     * @notice given an account, returns true if that account exists on the positive list, false otherwise\\n     * @param account the account to check\\n     * @return positive true if account exists on positive list, false otherwise\\n     */\\n    function getIsOnPositive(address account) public view returns (bool positive) {\\n        positive = _accountOnPositive[account];\\n    }\\n\\n    /**\\n     * @notice given an account, returns true if that account exists on the negative list, false otherwise\\n     * @param account the account to check\\n     * @return negative true if account exists on negative list, false otherwise\\n     * @dev merely checking !_accountOnPositive[account] is not enough, since every single address is false by default,\\n     * need to check that the given account has a score, as well\\n     */\\n    function getIsOnNegative(address account) public view returns (bool negative) {\\n        negative = !_accountOnPositive[account] && _accountScores[account] > 0;\\n    }\\n\\n    /**\\n     * @notice returns the size of the positive list\\n     * @return size size of the positive list\\n     */\\n    function getPositiveListSize() public view returns (uint256 size) {\\n        size = _positiveList.size;\\n    }\\n\\n    /**\\n     * @notice returns the size of the negative list\\n     * @return size size of the negative list\\n     */\\n    function getNegativeListSize() public view returns (uint256 size) {\\n        size = _negativeList.size;\\n    }\\n\\n    /**\\n     * @notice returns the total score of the positive list\\n     * @return score total score of the positive list\\n     */\\n    function getPositiveListTotalScore() public view returns (uint256 score) {\\n        score = _positiveListTotalScore;\\n    }\\n\\n    /**\\n     * @notice returns the total score of the negative list\\n     * @return score total score of the negative list\\n     */\\n    function getNegativeListTotalScore() public view returns (uint256 score) {\\n        score = _negativeListTotalScore;\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/cmarcelo/git/cupid/contracts/contracts/Rewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\n\\npragma solidity ^0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\n\\n/**\\n * @title Rewards is for holding all value (Tokens and Ether) in the Game System \\n * @notice All functions are only callable by the creator, which is the Game contract,\\n * with a notable exception being the payable Ether fallback function, because the Uniswap Router\\n * will be sending Ether here\\n * @dev This contract needs to exist, and be its own instance, because a Uniswap Pair will not\\n * swap tokens _to_ the contract which is one of it's own tokens. For this reason, we need to initiate\\n * swaps from a different address; hence, this contract exists.\\n */\\ncontract Rewards {\\n    /**\\n     * @notice contract address of the main Game token contract\\n     */\\n    address public game;\\n\\n    /**\\n     * @notice Addresses of the Uniswap and Router\\n     */\\n    IUniswapV2Router02 public immutable uniswapV2Router;\\n\\n    // used for a safety check in the payable receive function\\n    // once the game is over, no more Ether can be deposited from anyone except Uniswap router\\n    uint256 private _endTime;\\n\\n    constructor(address _game, IUniswapV2Router02 router, uint256 endTime) {\\n        game = _game;\\n        uniswapV2Router = router;\\n        _endTime = endTime;\\n    }\\n\\n    /**\\n     * @notice reverts if the msg.sender is not the Game contract address\\n     */\\n    modifier onlyGame() {\\n        require(msg.sender == game, \\\"Rewards::onlyGame: msg.sender must be the Game contract\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Accept an amount of Tokens, some Ether, and add them to liquidity on the Token-ETH pair.\\n     * The tokens must have already been transfered to this contract. The Ether is payable, so attached to the function call.\\n     * Only callable by the Game address.\\n     * @param tokenAmount a number of tokens to be added as liquidity\\n     * @return amountToken the amount of tokens which were successfully added to liquidity; will be <= the input `tokenAmount`\\n     * @return amountETH the amount of Ether which were successfully added to liquidity; will be <= the input msg.value\\n     * @return liquidity the number of Token-ETH LP tokens which were created and transfered to this contract\\n     * @dev any remaining Tokens or Ether which weren't added to liquidity, are refunded to this contract\\n     */\\n    function addLiquidityETH(uint256 tokenAmount) onlyGame public payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity) {\\n        // there are no limits on the expected amount of liquidity which are added, simply send all of the input Tokens and Ether\\n        (amountToken, amountETH, liquidity) = uniswapV2Router.addLiquidityETH{ value: msg.value }(game, tokenAmount, 0, 0, address(this), block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Accept a Pair address, and an amount of liquidity tokens, and removes that liquidity from the Token-ETH pair\\n     * Only callable by the Game address.\\n     * @param pair address of the Uniswap Pair that we're removing liquidity from (in practice, will always be the Token-ETH pair address)\\n     * @param liquidityBalance the amount of LP tokens to remove from liquidity\\n     * @dev The pair address is needed to approve token transfer for the Uniswap router, since this contract holds the LP tokens\\n     * @dev This contract is the recipient of removed Tokens and Ether\\n     */\\n    function removeLiquidityETH(IUniswapV2Pair pair, uint256 liquidityBalance) onlyGame public {\\n        // approve the Uniswap router to be able to transfer LP tokens of this contract\\n        pair.approve(address(uniswapV2Router), liquidityBalance);\\n\\n        // no limits on the min amounts of Tokens or ETH which are removed\\n        uniswapV2Router.removeLiquidityETH(game, liquidityBalance, 0, 0, address(this), block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Accepts payable Ether, and swaps all of it for Tokens\\n     * Only callable by the Game address.\\n     * @return amount the amount of Tokens which were acquired from the swap\\n     * @dev This contract is the recipient of acquired Tokens\\n     */\\n    function swapExactETHForTokens(uint256 amountOutMin) onlyGame public payable returns (uint256 amount) {\\n        // build the WETH -> Token path\\n        address[] memory path = new address[](2);\\n        path[0] = uniswapV2Router.WETH();\\n        path[1] = game;\\n\\n        // no limits on the amount of Tokens which are received\\n        uint256[] memory amounts = uniswapV2Router.swapExactETHForTokens{ value: msg.value }(amountOutMin, path, address(this), block.timestamp);\\n        amount = amounts[1];\\n    }\\n\\n    /**\\n     * @notice Accepts an amount of Tokens, and swaps all of them for Ether\\n     * Only callable by the Game address.\\n     * @param amountToken the number of tokens to swap for Ether\\n     * @dev This contract is the recipient of acquired Ether\\n     */\\n    function swapExactTokensForETH(uint256 amountToken) onlyGame public {\\n        // build the Token -> WETH path\\n        address[] memory path = new address[](2);\\n        path[0] = game;\\n        path[1] = uniswapV2Router.WETH();\\n\\n        uint256 amountsOut = uniswapV2Router.getAmountsOut(amountToken, path)[1];\\n\\n        // Don't call swap if there's no ETHs to receive\\n        if (amountsOut == 0) {\\n            return;\\n        }\\n\\n        // no limits on the amount of Ether which are received\\n        uniswapV2Router.swapExactTokensForETH(amountToken, 0, path, address(this), block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Accepts and address and an Ether value, and transfers that much Ether to the address\\n     * Only callable by the Game address.\\n     * @param to payable address that the Ether should be sent to\\n     * @param amount the amount of Ether to send\\n     * @dev the Ether needs to already belong to this contract, it's not passed through this function\\n     */\\n    function sendEther(address payable to, uint256 amount) onlyGame public {\\n        to.transfer(amount);\\n    }\\n\\n    /**\\n     * @notice Sends all balance of a given token to the game contract - used to recover locked non-game related tokens\\n     * Only callable by the Game address.\\n     * @param token an address of the token contract\\n     */\\n    function recoverToken(address token) onlyGame external {\\n        uint256 myBalance = IERC20(token).balanceOf(address(this));\\n        if (myBalance > 0) {\\n            IERC20(token).transfer(game, myBalance);\\n        }\\n    }\\n\\n    /**\\n     * @notice The fallback function for this contract to accept Ether\\n     */\\n    receive() external payable {\\n        // if the msg.sender is the Uniswap Router address, always accept the Ether\\n        if (msg.sender != address(uniswapV2Router)) {\\n            // Otherwise, only accept Ether from anyone else during the actual gameplay\\n            require(_endTime > block.timestamp, \\\"Rewards::receive: game is over! no more depositing into the rewards contract\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"solidity-linked-list/contracts/StructuredLinkedList.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\ninterface  IStructureInterface {\\n    function getValue(uint256 _id) external view returns (uint256);\\n}\\n\\n/**\\n * @title StructuredLinkedList\\n * @author Vittorio Minacori (https://github.com/vittominacori)\\n * @dev An utility library for using sorted linked list data structures in your Solidity project.\\n */\\nlibrary StructuredLinkedList {\\n\\n    uint256 private constant _NULL = 0;\\n    uint256 private constant _HEAD = 0;\\n\\n    bool private constant _PREV = false;\\n    bool private constant _NEXT = true;\\n\\n    struct List {\\n        uint256 size;\\n        mapping(uint256 => mapping(bool => uint256)) list;\\n    }\\n\\n    /**\\n     * @dev Checks if the list exists\\n     * @param self stored linked list from contract\\n     * @return bool true if list exists, false otherwise\\n     */\\n    function listExists(List storage self) internal view returns (bool) {\\n        // if the head nodes previous or next pointers both point to itself, then there are no items in the list\\n        if (self.list[_HEAD][_PREV] != _HEAD || self.list[_HEAD][_NEXT] != _HEAD) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Checks if the node exists\\n     * @param self stored linked list from contract\\n     * @param _node a node to search for\\n     * @return bool true if node exists, false otherwise\\n     */\\n    function nodeExists(List storage self, uint256 _node) internal view returns (bool) {\\n        if (self.list[_node][_PREV] == _HEAD && self.list[_node][_NEXT] == _HEAD) {\\n            if (self.list[_HEAD][_NEXT] == _node) {\\n                return true;\\n            } else {\\n                return false;\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the list\\n     * @param self stored linked list from contract\\n     * @return uint256\\n     */\\n    function sizeOf(List storage self) internal view returns (uint256) {\\n        return self.size;\\n    }\\n\\n    /**\\n     * @dev Returns the links of a node as a tuple\\n     * @param self stored linked list from contract\\n     * @param _node id of the node to get\\n     * @return bool, uint256, uint256 true if node exists or false otherwise, previous node, next node\\n     */\\n    function getNode(List storage self, uint256 _node) internal view returns (bool, uint256, uint256) {\\n        if (!nodeExists(self, _node)) {\\n            return (false, 0, 0);\\n        } else {\\n            return (true, self.list[_node][_PREV], self.list[_node][_NEXT]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the link of a node `_node` in direction `_direction`.\\n     * @param self stored linked list from contract\\n     * @param _node id of the node to step from\\n     * @param _direction direction to step in\\n     * @return bool, uint256 true if node exists or false otherwise, node in _direction\\n     */\\n    function getAdjacent(List storage self, uint256 _node, bool _direction) internal view returns (bool, uint256) {\\n        if (!nodeExists(self, _node)) {\\n            return (false, 0);\\n        } else {\\n            return (true, self.list[_node][_direction]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the link of a node `_node` in direction `_NEXT`.\\n     * @param self stored linked list from contract\\n     * @param _node id of the node to step from\\n     * @return bool, uint256 true if node exists or false otherwise, next node\\n     */\\n    function getNextNode(List storage self, uint256 _node) internal view returns (bool, uint256) {\\n        return getAdjacent(self, _node, _NEXT);\\n    }\\n\\n    /**\\n     * @dev Returns the link of a node `_node` in direction `_PREV`.\\n     * @param self stored linked list from contract\\n     * @param _node id of the node to step from\\n     * @return bool, uint256 true if node exists or false otherwise, previous node\\n     */\\n    function getPreviousNode(List storage self, uint256 _node) internal view returns (bool, uint256) {\\n        return getAdjacent(self, _node, _PREV);\\n    }\\n\\n    /**\\n     * @dev Can be used before `insert` to build an ordered list.\\n     * @dev Get the node and then `insertBefore` or `insertAfter` basing on your list order.\\n     * @dev If you want to order basing on other than `structure.getValue()` override this function\\n     * @param self stored linked list from contract\\n     * @param _structure the structure instance\\n     * @param _value value to seek\\n     * @return uint256 next node with a value less than _value\\n     */\\n    function getSortedSpot(List storage self, address _structure, uint256 _value) internal view returns (uint256) {\\n        if (sizeOf(self) == 0) {\\n            return 0;\\n        }\\n\\n        uint256 next;\\n        (, next) = getAdjacent(self, _HEAD, _NEXT);\\n        while ((next != 0) && ((_value < IStructureInterface(_structure).getValue(next)) != _NEXT)) {\\n            next = self.list[next][_NEXT];\\n        }\\n        return next;\\n    }\\n\\n    /**\\n     * @dev Insert node `_new` beside existing node `_node` in direction `_NEXT`.\\n     * @param self stored linked list from contract\\n     * @param _node existing node\\n     * @param _new  new node to insert\\n     * @return bool true if success, false otherwise\\n     */\\n    function insertAfter(List storage self, uint256 _node, uint256 _new) internal returns (bool) {\\n        return _insert(self, _node, _new, _NEXT);\\n    }\\n\\n    /**\\n     * @dev Insert node `_new` beside existing node `_node` in direction `_PREV`.\\n     * @param self stored linked list from contract\\n     * @param _node existing node\\n     * @param _new  new node to insert\\n     * @return bool true if success, false otherwise\\n     */\\n    function insertBefore(List storage self, uint256 _node, uint256 _new) internal returns (bool) {\\n        return _insert(self, _node, _new, _PREV);\\n    }\\n\\n    /**\\n     * @dev Removes an entry from the linked list\\n     * @param self stored linked list from contract\\n     * @param _node node to remove from the list\\n     * @return uint256 the removed node\\n     */\\n    function remove(List storage self, uint256 _node) internal returns (uint256) {\\n        if ((_node == _NULL) || (!nodeExists(self, _node))) {\\n            return 0;\\n        }\\n        _createLink(self, self.list[_node][_PREV], self.list[_node][_NEXT], _NEXT);\\n        delete self.list[_node][_PREV];\\n        delete self.list[_node][_NEXT];\\n\\n        self.size -= 1; // NOT: SafeMath library should be used here to decrement.\\n\\n        return _node;\\n    }\\n\\n    /**\\n     * @dev Pushes an entry to the head of the linked list\\n     * @param self stored linked list from contract\\n     * @param _node new entry to push to the head\\n     * @return bool true if success, false otherwise\\n     */\\n    function pushFront(List storage self, uint256 _node) internal returns (bool) {\\n        return _push(self, _node, _NEXT);\\n    }\\n\\n    /**\\n     * @dev Pushes an entry to the tail of the linked list\\n     * @param self stored linked list from contract\\n     * @param _node new entry to push to the tail\\n     * @return bool true if success, false otherwise\\n     */\\n    function pushBack(List storage self, uint256 _node) internal returns (bool) {\\n        return _push(self, _node, _PREV);\\n    }\\n\\n    /**\\n     * @dev Pops the first entry from the head of the linked list\\n     * @param self stored linked list from contract\\n     * @return uint256 the removed node\\n     */\\n    function popFront(List storage self) internal returns (uint256) {\\n        return _pop(self, _NEXT);\\n    }\\n\\n    /**\\n     * @dev Pops the first entry from the tail of the linked list\\n     * @param self stored linked list from contract\\n     * @return uint256 the removed node\\n     */\\n    function popBack(List storage self) internal returns (uint256) {\\n        return _pop(self, _PREV);\\n    }\\n\\n    /**\\n     * @dev Pushes an entry to the head of the linked list\\n     * @param self stored linked list from contract\\n     * @param _node new entry to push to the head\\n     * @param _direction push to the head (_NEXT) or tail (_PREV)\\n     * @return bool true if success, false otherwise\\n     */\\n    function _push(List storage self, uint256 _node, bool _direction) private returns (bool) {\\n        return _insert(self, _HEAD, _node, _direction);\\n    }\\n\\n    /**\\n     * @dev Pops the first entry from the linked list\\n     * @param self stored linked list from contract\\n     * @param _direction pop from the head (_NEXT) or the tail (_PREV)\\n     * @return uint256 the removed node\\n     */\\n    function _pop(List storage self, bool _direction) private returns (uint256) {\\n        uint256 adj;\\n        (, adj) = getAdjacent(self, _HEAD, _direction);\\n        return remove(self, adj);\\n    }\\n\\n    /**\\n     * @dev Insert node `_new` beside existing node `_node` in direction `_direction`.\\n     * @param self stored linked list from contract\\n     * @param _node existing node\\n     * @param _new  new node to insert\\n     * @param _direction direction to insert node in\\n     * @return bool true if success, false otherwise\\n     */\\n    function _insert(List storage self, uint256 _node, uint256 _new, bool _direction) private returns (bool) {\\n        if (!nodeExists(self, _new) && nodeExists(self, _node)) {\\n            uint256 c = self.list[_node][_direction];\\n            _createLink(self, _node, _new, _direction);\\n            _createLink(self, _new, c, _direction);\\n\\n            self.size += 1; // NOT: SafeMath library should be used here to increment.\\n\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Creates a bidirectional link between two nodes on direction `_direction`\\n     * @param self stored linked list from contract\\n     * @param _node existing node\\n     * @param _link node to link to in the _direction\\n     * @param _direction direction to insert node in\\n     */\\n    function _createLink(List storage self, uint256 _node, uint256 _link, bool _direction) private {\\n        self.list[_link][!_direction] = _node;\\n        self.list[_node][_direction] = _link;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_initialMint\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"mintOwner\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"_uniswapV2Router\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"negativeWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketPurchase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minEthers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minLpTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"}],\"name\":\"AddedToNegativeList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"}],\"name\":\"AddedToPositiveList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"forAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scoreIncrease\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newScore\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPayout\",\"type\":\"uint256\"}],\"name\":\"DepositedLP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMarketPurchase\",\"type\":\"uint256\"}],\"name\":\"MarketPurchaseAdjusted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinEthers\",\"type\":\"uint256\"}],\"name\":\"MinEthersAdjusted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinLpTokens\",\"type\":\"uint256\"}],\"name\":\"MinLpTokensAdjusted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"forAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scoreIncrease\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newScore\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPayout\",\"type\":\"uint256\"}],\"name\":\"ProvidedLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"forAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scoreIncrease\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newScore\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPayout\",\"type\":\"uint256\"}],\"name\":\"PurchasedGameTokensAndDepositedLP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemovedFromNegativeList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemovedFromPositiveList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newNegativeWeight\",\"type\":\"uint256\"}],\"name\":\"SplitAdjusted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketPurchase\",\"type\":\"uint256\"}],\"name\":\"adjustMarketPurchase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minEthers\",\"type\":\"uint256\"}],\"name\":\"adjustMinEthers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minLpTokens\",\"type\":\"uint256\"}],\"name\":\"adjustMinLpTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"negativeWeight\",\"type\":\"uint256\"}],\"name\":\"adjustSplitWeight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"depositLP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"scoreIncrease\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newScore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPayout\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"etherAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountScore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getIsOnNegative\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"negative\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getIsOnPositive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"positive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getNegativeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNegativeListSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNegativeListTotalScore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNegativeRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"etherAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getNextNegativeNode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"nextId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getNextPositiveNode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"nextId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getPositiveAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPositiveListSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPositiveListTotalScore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPositiveRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"etherAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUniswapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketPurchase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minEthers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLpTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"provideLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"scoreIncrease\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newScore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPayout\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minTokensToPurchased\",\"type\":\"uint256\"}],\"name\":\"purchaseTokensAndDepositLP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"scoreIncrease\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newScore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPayout\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"recoverToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"contract Rewards\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Factory\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Game","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000004c4b400000000000000000000000005a6769f96e7c0f909292ca043e913c7c2459cffb0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d00000000000000000000000000000000000000000000000000000000603f884f00000000000000000000000000000000000000000000000006f05b59d3b20000000000000000000000000000000000000000000000000000002386f26fc1000000000000000000000000000000000000000000000000000000470de4df82000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005437570696400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000054355504944000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}