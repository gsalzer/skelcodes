{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.5.17;\r\n\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a, \"add: +\");\r\n\r\n        return c;\r\n    }\r\n    function add(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a, errorMessage);\r\n\r\n        return c;\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        return sub(a, b, \"sub: -\");\r\n    }\r\n    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        require(b <= a, errorMessage);\r\n        uint c = a - b;\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface IKeep3rV1 {\r\n    function isMinKeeper(address keeper, uint minBond, uint earned, uint age) external returns (bool);\r\n    function receipt(address credit, address keeper, uint amount) external;\r\n    function unbond(address bonding, uint amount) external;\r\n    function withdraw(address bonding) external;\r\n    function bonds(address keeper, address credit) external view returns (uint);\r\n    function unbondings(address keeper, address credit) external view returns (uint);\r\n    function approve(address spender, uint amount) external returns (bool);\r\n    function jobs(address job) external view returns (bool);\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\ninterface WETH9 {\r\n    function withdraw(uint wad) external;\r\n}\r\n\r\ninterface IUniswapV2Router {\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IKeep3rJob {\r\n    function work() external;\r\n}\r\n\r\ncontract MetaKeep3r {\r\n    using SafeMath for uint;\r\n    \r\n    modifier upkeep() {\r\n        require(KP3R.isMinKeeper(msg.sender, 100e18, 0, 0), \"MetaKeep3r::isKeeper: keeper is not registered\");\r\n        uint _before = KP3R.bonds(address(this), address(KP3R));\r\n        _;\r\n        uint _after = KP3R.bonds(address(this), address(KP3R));\r\n        uint _received = _after.sub(_before);\r\n        uint _balance = KP3R.balanceOf(address(this));\r\n        if (_balance < _received) {\r\n            KP3R.receipt(address(KP3R), address(this), _received.sub(_balance));\r\n        }\r\n        _received = _swap(_received);\r\n        msg.sender.transfer(_received);\r\n    }\r\n    \r\n    function task(address job, bytes calldata data) external upkeep {\r\n        require(KP3R.jobs(job), \"MetaKeep3r::work: invalid job\");\r\n        (bool success,) = job.call.value(0)(data);\r\n        require(success, \"MetaKeep3r::work: job failure\");\r\n    }\r\n    \r\n    function work(address job) external upkeep {\r\n        require(KP3R.jobs(job), \"MetaKeep3r::work: invalid job\");\r\n        IKeep3rJob(job).work();\r\n    }\r\n    \r\n    IKeep3rV1 public constant KP3R = IKeep3rV1(0x1cEB5cB57C4D4E2b2433641b95Dd330A33185A44);\r\n    WETH9 public constant WETH = WETH9(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n    IUniswapV2Router public constant UNI = IUniswapV2Router(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    \r\n    function unbond() external {\r\n        require(KP3R.unbondings(address(this), address(KP3R)) < now, \"MetaKeep3r::unbond: unbonding\");\r\n        KP3R.unbond(address(KP3R), KP3R.bonds(address(this), address(KP3R)));\r\n    }\r\n    \r\n    function withdraw() external {\r\n        KP3R.withdraw(address(KP3R));\r\n        KP3R.unbond(address(KP3R), KP3R.bonds(address(this), address(KP3R)));\r\n    }\r\n    \r\n    function() external payable {}\r\n    \r\n    function _swap(uint _amount) internal returns (uint) {\r\n        KP3R.approve(address(UNI), _amount);\r\n        \r\n        address[] memory path = new address[](2);\r\n        path[0] = address(KP3R);\r\n        path[1] = address(WETH);\r\n\r\n        uint[] memory amounts = UNI.swapExactTokensForTokens(_amount, uint256(0), path, address(this), now.add(1800));\r\n        WETH.withdraw(amounts[1]);\r\n        return amounts[1];\r\n    }\r\n}","ABI":"[{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"KP3R\",\"outputs\":[{\"internalType\":\"contract IKeep3rV1\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UNI\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract WETH9\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"job\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"task\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unbond\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"job\",\"type\":\"address\"}],\"name\":\"work\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MetaKeep3r","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://fa65982bd9cd9648db4d58a247dcd207fc47bc864f604e39ecaf8b3cbb69e1b4"}]}