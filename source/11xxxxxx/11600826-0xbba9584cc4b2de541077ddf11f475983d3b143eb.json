{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IMintableBurnableERC20 is IERC20 {\r\n    function burn(uint256 amount) external;\r\n\r\n    function burnFrom(address account, uint256 amount) external;\r\n\r\n    function mint(address _to, uint256 _amount) external;\r\n}\r\n\r\ninterface IReferralRewards {\r\n    struct DepositInfo {\r\n        address referrer;\r\n        uint256 depth;\r\n        uint256 amount;\r\n        uint256 time;\r\n        uint256 lastUpdatedTime;\r\n    }\r\n    struct ReferralInfo {\r\n        uint256 reward;\r\n        uint256 lastUpdate;\r\n        uint256 depositHead;\r\n        uint256 depositTail;\r\n        uint256[3] amounts;\r\n        mapping(uint256 => DepositInfo) deposits;\r\n    }\r\n\r\n    function setBounds(uint256[3] calldata _depositBounds) external;\r\n\r\n    function setDepositRate(uint256[3][3] calldata _depositRate) external;\r\n\r\n    function setStakingRate(uint256[3][3] calldata _stakingRate) external;\r\n\r\n    function assessReferalDepositReward(address _referrer, uint256 _amount)\r\n        external;\r\n\r\n    function claimDividends() external;\r\n\r\n    function claimAllDividends(address _referral) external;\r\n\r\n    function removeDepositReward(address _referrer, uint256 _amount) external;\r\n\r\n    function getReferralReward(address _user) external view;\r\n\r\n    function getReferral(address _user) external view returns (address);\r\n\r\n    function getStakingRateRange(uint256 _referralStake)\r\n        external\r\n        view\r\n        returns (uint256[3] memory _rates);\r\n\r\n    function getDepositRate(uint256[] calldata _referralStakes)\r\n        external\r\n        view\r\n        returns (uint256[] memory _rates);\r\n\r\n    function getDepositBounds() external view returns (uint256[3] memory);\r\n\r\n    function getStakingRates() external view returns (uint256[3][3] memory);\r\n\r\n    function getDepositRates() external view returns (uint256[3][3] memory);\r\n\r\n    function getReferralAmounts(address _user)\r\n        external\r\n        view\r\n        returns (uint256[3] memory);\r\n}\r\n\r\ninterface IReferralTree {\r\n    function changeAdmin(address _newAdmin) external;\r\n\r\n    function setReferral(address _referrer, address _referral) external;\r\n\r\n    function removeReferralReward(IReferralRewards _referralRewards) external;\r\n\r\n    function addReferralReward(IReferralRewards _referralRewards) external;\r\n\r\n    function claimAllDividends() external;\r\n\r\n    function getReferrals(address _referrer, uint256 _referDepth)\r\n        external\r\n        view\r\n        returns (address[] memory);\r\n\r\n    function referrals(address _referrer) external view returns (address);\r\n\r\n    function getReferrers(address _referral)\r\n        external\r\n        view\r\n        returns (address[] memory);\r\n\r\n    function getUserReferralReward(address _user)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function getReferralRewards()\r\n        external\r\n        view\r\n        returns (IReferralRewards[] memory);\r\n}\r\n\r\ninterface IRewards {\r\n    struct DepositInfo {\r\n        uint256 amount;\r\n        uint256 time;\r\n    }\r\n\r\n    struct UserInfo {\r\n        uint256 amount;\r\n        uint256 unfrozen;\r\n        uint256 reward;\r\n        uint256 lastUpdate;\r\n        uint256 depositHead;\r\n        uint256 depositTail;\r\n        mapping(uint256 => DepositInfo) deposits;\r\n    }\r\n\r\n    function setActive(bool _isActive) external;\r\n\r\n    function setReferralRewards(IReferralRewards _referralRewards) external;\r\n\r\n    function setDuration(uint256 _duration) external;\r\n\r\n    function setRewardPerSec(uint256 _rewardPerSec) external;\r\n\r\n    function stakeFor(address _user, uint256 _amount) external;\r\n\r\n    function stake(uint256 _amount, address _refferal) external;\r\n\r\n    function getPendingReward(address _user, bool _includeDeposit)\r\n        external\r\n        view\r\n        returns (uint256 _reward);\r\n\r\n    function getReward(address _user) external view returns (uint256 _reward);\r\n\r\n    function getReferralStakes(address[] calldata _referrals)\r\n        external\r\n        view\r\n        returns (uint256[] memory _stakes);\r\n\r\n    function getReferralStake(address _referral)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function getEstimated(uint256 _delta) external view returns (uint256);\r\n\r\n    function getDeposit(address _user, uint256 _id)\r\n        external\r\n        view\r\n        returns (uint256, uint256);\r\n}\r\n\r\ninterface IRewardsV2 {\r\n    struct DepositInfo {\r\n        uint256 amount;\r\n        uint256 time;\r\n    }\r\n\r\n    struct UserInfo {\r\n        uint256 amount;\r\n        uint256 unfrozen;\r\n        uint256 reward;\r\n        uint256 lastUpdate;\r\n        uint256 depositHead;\r\n        uint256 depositTail;\r\n        mapping(uint256 => DepositInfo) deposits;\r\n    }\r\n\r\n    function setActive(bool _isActive) external;\r\n\r\n    function setReferralRewards(IReferralRewards _referralRewards) external;\r\n\r\n    function setDuration(uint256 _duration) external;\r\n\r\n    function setRewardPerSec(uint256 _rewardPerSec) external;\r\n\r\n    function stakeFor(address _user, uint256 _amount) external;\r\n\r\n    function stake(uint256 _amount, address _refferal) external;\r\n\r\n    function getPendingReward(address _user, bool _includeDeposit)\r\n        external\r\n        view\r\n        returns (uint256 _reward);\r\n\r\n    function rewardPerSec() external view returns (uint256);\r\n\r\n    function getReward(address _user) external view returns (uint256 _reward);\r\n\r\n    function getReferralStake(address _referral)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function getEstimated(uint256 _delta) external view returns (uint256);\r\n\r\n    function getDeposit(address _user, uint256 _id)\r\n        external\r\n        view\r\n        returns (uint256, uint256);\r\n}\r\n\r\ncontract ReferralRewardsV2 is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    event ReferralDepositReward(\r\n        address indexed refferer,\r\n        address indexed refferal,\r\n        uint256 indexed level,\r\n        uint256 amount\r\n    );\r\n    event ReferralRewardPaid(address indexed user, uint256 amount);\r\n\r\n    // Info of each referral\r\n    struct ReferralInfo {\r\n        uint256 totalDeposit; // Ammount of own deposits\r\n        uint256 reward; // Ammount of collected deposit rewardsV2\r\n        uint256 lastUpdate; // Last time the referral claimed rewardsV2\r\n        uint256[amtLevels] amounts; // Amounts that generate rewardsV2 on each referral level\r\n    }\r\n\r\n    uint256 public constant amtLevels = 3; // Number of levels by total staked amount that determine referral reward's rate\r\n    uint256 public constant referDepth = 3; // Number of referral levels that can receive dividends\r\n\r\n    IMintableBurnableERC20 public token; // Harvested token contract\r\n    IReferralTree public referralTree; // Contract with referral's tree\r\n    IRewardsV2 rewardsV2; // Main farming contract\r\n    IRewards rewards; // Main farming contract\r\n\r\n    uint256[amtLevels] public depositBounds; // Limits of referral's stake used to determine the referral rate\r\n    uint256[referDepth][amtLevels] public depositRate; // Referral rates based on referral's deplth and stake received from deposit\r\n    uint256[referDepth][amtLevels] public stakingRate; // Referral rates based on referral's deplth and stake received from staking\r\n\r\n    mapping(address => ReferralInfo) public referralReward; // Info per each referral\r\n\r\n    /// @dev Constructor that initializes the most important configurations.\r\n    /// @param _token Token to be staked and harvested.\r\n    /// @param _referralTree Contract with referral's tree.\r\n    /// @param _rewards Main farming contract.\r\n    /// @param _depositBounds Limits of referral's stake used to determine the referral rate.\r\n    /// @param _depositRate Referral rates based on referral's deplth and stake received from deposit.\r\n    /// @param _stakingRate Referral rates based on referral's deplth and stake received from staking.\r\n    constructor(\r\n        IMintableBurnableERC20 _token,\r\n        IReferralTree _referralTree,\r\n        IRewards _rewards,\r\n        IRewardsV2 _rewardsV2,\r\n        uint256[amtLevels] memory _depositBounds,\r\n        uint256[referDepth][amtLevels] memory _depositRate,\r\n        uint256[referDepth][amtLevels] memory _stakingRate\r\n    ) public Ownable() {\r\n        token = _token;\r\n        referralTree = _referralTree;\r\n        depositBounds = _depositBounds;\r\n        depositRate = _depositRate;\r\n        stakingRate = _stakingRate;\r\n        rewardsV2 = _rewardsV2;\r\n        rewards = _rewards;\r\n    }\r\n\r\n    /// @dev Allows an owner to update bounds.\r\n    /// @param _depositBounds Limits of referral's stake used to determine the referral rate.\r\n    function setBounds(uint256[amtLevels] memory _depositBounds)\r\n        public\r\n        onlyOwner\r\n    {\r\n        depositBounds = _depositBounds;\r\n    }\r\n\r\n    /// @dev Allows an owner to update deposit rates.\r\n    /// @param _depositRate Referral rates based on referral's deplth and stake received from deposit.\r\n    function setDepositRate(uint256[referDepth][amtLevels] memory _depositRate)\r\n        public\r\n        onlyOwner\r\n    {\r\n        depositRate = _depositRate;\r\n    }\r\n\r\n    /// @dev Allows an owner to update staking rates.\r\n    /// @param _stakingRate Referral rates based on referral's deplth and stake received from staking.\r\n    function setStakingRate(uint256[referDepth][amtLevels] memory _stakingRate)\r\n        public\r\n        onlyOwner\r\n    {\r\n        stakingRate = _stakingRate;\r\n    }\r\n\r\n    /// @dev Allows the main farming contract to assess referral deposit rewardsV2.\r\n    /// @param _referrer Address of the referred user.\r\n    /// @param _referral Address of the user.\r\n    /// @param _amount Amount of new deposit.\r\n    function proccessDeposit(\r\n        address _referrer,\r\n        address _referral,\r\n        uint256 _amount\r\n    ) external virtual {\r\n        require(\r\n            msg.sender == address(rewardsV2),\r\n            \"assessReferalDepositReward: bad role\"\r\n        );\r\n        referralTree.setReferral(_referrer, _referral);\r\n        referralReward[_referrer].totalDeposit = referralReward[_referrer]\r\n            .totalDeposit\r\n            .add(_amount);\r\n        address[] memory referrals =\r\n            referralTree.getReferrals(_referrer, referDepth);\r\n        uint256[] memory referralStakes = rewards.getReferralStakes(referrals);\r\n        for (uint256 level = 0; level < referrals.length; level++) {\r\n            if (referrals[level] == address(0)) {\r\n                continue;\r\n            }\r\n            accumulateReward(referrals[level]);\r\n            ReferralInfo storage referralInfo =\r\n                referralReward[referrals[level]];\r\n            referralInfo.amounts[level] = referralInfo.amounts[level].add(\r\n                _amount\r\n            );\r\n            uint256 percent =\r\n                getDepositRate(\r\n                    referralInfo.totalDeposit.add(referralStakes[level]),\r\n                    level\r\n                );\r\n            if (percent == 0) {\r\n                continue;\r\n            }\r\n            uint256 depositReward = _amount.mul(percent);\r\n            if (depositReward > 0) {\r\n                referralInfo.reward = referralInfo.reward.add(depositReward);\r\n                emit ReferralDepositReward(\r\n                    _referrer,\r\n                    referrals[level],\r\n                    level,\r\n                    depositReward\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Allows the main farming contract to assess referral deposit rewardsV2.\r\n    /// @param _referrer Address of the referred user.\r\n    /// @param _amount Amount of new deposit.\r\n    function handleDepositEnd(address _referrer, uint256 _amount)\r\n        external\r\n        virtual\r\n    {\r\n        require(msg.sender == address(rewardsV2), \"handleDepositEnd: bad role\");\r\n        referralReward[_referrer].totalDeposit = referralReward[_referrer]\r\n            .totalDeposit\r\n            .sub(_amount);\r\n        address[] memory referrals =\r\n            referralTree.getReferrals(_referrer, referDepth);\r\n        for (uint256 level = 0; level < referrals.length; level++) {\r\n            if (referrals[level] == address(0)) {\r\n                continue;\r\n            }\r\n            accumulateReward(referrals[level]);\r\n            ReferralInfo storage referralInfo =\r\n                referralReward[referrals[level]];\r\n            referralInfo.amounts[level] = referralInfo.amounts[level].sub(\r\n                _amount\r\n            );\r\n        }\r\n    }\r\n\r\n    /// @dev Allows a user to claim his dividends.\r\n    function claimDividends() public {\r\n        claimUserDividends(msg.sender);\r\n    }\r\n\r\n    /// @dev Allows a referral tree to claim all the dividends.\r\n    /// @param _referral Address of user that claims his dividends.\r\n    function claimAllDividends(address _referral) public {\r\n        require(\r\n            msg.sender == address(referralTree),\r\n            \"claimAllDividends: bad role\"\r\n        );\r\n        claimUserDividends(_referral);\r\n    }\r\n\r\n    /// @dev Update the staking referral reward for _user.\r\n    /// @param _user Address of the referral.\r\n    function accumulateReward(address _user) internal {\r\n        ReferralInfo storage referralInfo = referralReward[_user];\r\n        if (referralInfo.lastUpdate > now) {\r\n            return;\r\n        }\r\n        uint256 rewardPerSec = rewardsV2.rewardPerSec();\r\n        uint256 referralPrevStake = rewards.getReferralStake(_user);\r\n        uint256[referDepth] memory rates =\r\n            getStakingRateRange(\r\n                referralInfo.totalDeposit.add(referralPrevStake)\r\n            );\r\n        if (referralInfo.lastUpdate > 0) {\r\n            for (uint256 i = 0; i < referralInfo.amounts.length; i++) {\r\n                uint256 reward =\r\n                    now\r\n                        .sub(referralInfo.lastUpdate)\r\n                        .mul(referralInfo.amounts[i])\r\n                        .mul(rewardPerSec)\r\n                        .mul(rates[i])\r\n                        .div(1e18);\r\n                if (reward > 0) {\r\n                    referralInfo.reward = referralInfo.reward.add(reward);\r\n                }\r\n            }\r\n        }\r\n        referralInfo.lastUpdate = now;\r\n    }\r\n\r\n    /// @dev Asses and distribute claimed dividends.\r\n    /// @param _user Address of user that claims dividends.\r\n    function claimUserDividends(address _user) internal {\r\n        accumulateReward(_user);\r\n        ReferralInfo storage referralInfo = referralReward[_user];\r\n        uint256 amount = referralInfo.reward.div(1e18);\r\n        if (amount > 0) {\r\n            uint256 scaledReward = amount.mul(1e18);\r\n            referralInfo.reward = referralInfo.reward.sub(scaledReward);\r\n            token.mint(_user, amount);\r\n            emit ReferralRewardPaid(_user, amount);\r\n        }\r\n    }\r\n\r\n    /// @dev Returns referral reward.\r\n    /// @param _user Address of referral.\r\n    /// @return Referral reward.\r\n    function getReferralReward(address _user) external view returns (uint256) {\r\n        ReferralInfo storage referralInfo = referralReward[_user];\r\n        uint256 rewardPerSec = rewardsV2.rewardPerSec();\r\n        uint256 referralPrevStake = rewards.getReferralStake(_user);\r\n        uint256[referDepth] memory rates =\r\n            getStakingRateRange(\r\n                referralInfo.totalDeposit.add(referralPrevStake)\r\n            );\r\n        uint256 _reward = referralInfo.reward;\r\n        if (referralInfo.lastUpdate > 0) {\r\n            for (uint256 i = 0; i < referralInfo.amounts.length; i++) {\r\n                _reward = _reward.add(\r\n                    now\r\n                        .sub(referralInfo.lastUpdate)\r\n                        .mul(referralInfo.amounts[i])\r\n                        .mul(rewardPerSec)\r\n                        .mul(rates[i])\r\n                        .div(1e18)\r\n                );\r\n            }\r\n        }\r\n        return _reward.div(1e18);\r\n    }\r\n\r\n    /// @dev Returns direct user referral.\r\n    /// @param _user Address of referrer.\r\n    /// @return Direct user referral.\r\n    function getReferral(address _user) public view returns (address) {\r\n        return referralTree.referrals(_user);\r\n    }\r\n\r\n    /// @dev Returns stakong rate for the spesific referral stake.\r\n    /// @param _referralStake Amount staked by referral.\r\n    /// @return _rates Array of stakong rates by referral level.\r\n    function getStakingRateRange(uint256 _referralStake)\r\n        public\r\n        view\r\n        returns (uint256[referDepth] memory _rates)\r\n    {\r\n        for (uint256 i = 0; i < depositBounds.length; i++) {\r\n            if (_referralStake >= depositBounds[i]) {\r\n                return stakingRate[i];\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Returns deposit rate based on the spesific referral stake and referral level.\r\n    /// @param _referralStake Amount staked by referrals.\r\n    /// @param _level Level of the referral.\r\n    /// @return _rate Deposit rates by referral level.\r\n    function getDepositRate(uint256 _referralStake, uint256 _level)\r\n        public\r\n        view\r\n        returns (uint256 _rate)\r\n    {\r\n        for (uint256 j = 0; j < depositBounds.length; j++) {\r\n            if (_referralStake >= depositBounds[j]) {\r\n                return depositRate[j][_level];\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Returns limits of referral's stake used to determine the referral rate.\r\n    /// @return Array of deposit bounds.\r\n    function getDepositBounds()\r\n        public\r\n        view\r\n        returns (uint256[referDepth] memory)\r\n    {\r\n        return depositBounds;\r\n    }\r\n\r\n    /// @dev Returns referral rates based on referral's deplth and stake received from staking.\r\n    /// @return Array of staking rates.\r\n    function getStakingRates()\r\n        public\r\n        view\r\n        returns (uint256[referDepth][amtLevels] memory)\r\n    {\r\n        return stakingRate;\r\n    }\r\n\r\n    /// @dev Returns referral rates based on referral's deplth and stake received from deposit.\r\n    /// @return Array of deposit rates.\r\n    function getDepositRates()\r\n        public\r\n        view\r\n        returns (uint256[referDepth][amtLevels] memory)\r\n    {\r\n        return depositRate;\r\n    }\r\n\r\n    /// @dev Returns amounts that generate reward for referral bu levels.\r\n    /// @param _user Address of referral.\r\n    /// @return Returns amounts that generate reward for referral bu levels.\r\n    function getReferralAmounts(address _user)\r\n        public\r\n        view\r\n        returns (uint256[amtLevels] memory)\r\n    {\r\n        ReferralInfo memory referralInfo = referralReward[_user];\r\n        return referralInfo.amounts;\r\n    }\r\n}\r\ncontract ReferralRewardsType3 is ReferralRewardsV2 {\r\n    /// @dev Constructor that initializes the most important configurations.\r\n    /// @param _token Token to be staked and harvested.\r\n    /// @param _referralTree Contract with referral's tree.\r\n    /// @param _rewards Old farming contract.\r\n    /// @param _rewardsV2 Main farming contract.\r\n    /// @param _depositBounds Limits of referral's stake used to determine the referral rate.\r\n    /// @param _depositRate Referral rates based on referral's deplth and stake received from deposit.\r\n    /// @param _stakingRate Referral rates based on referral's deplth and stake received from staking.\r\n    constructor(\r\n        IMintableBurnableERC20 _token,\r\n        IReferralTree _referralTree,\r\n        IRewards _rewards,\r\n        IRewardsV2 _rewardsV2,\r\n        uint256[amtLevels] memory _depositBounds,\r\n        uint256[referDepth][amtLevels] memory _depositRate,\r\n        uint256[referDepth][amtLevels] memory _stakingRate\r\n    )\r\n        public\r\n        ReferralRewardsV2(\r\n            _token,\r\n            _referralTree,\r\n            _rewards,\r\n            _rewardsV2,\r\n            _depositBounds,\r\n            _depositRate,\r\n            _stakingRate\r\n        )\r\n    {}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IMintableBurnableERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"contract IReferralTree\",\"name\":\"_referralTree\",\"type\":\"address\"},{\"internalType\":\"contract IRewards\",\"name\":\"_rewards\",\"type\":\"address\"},{\"internalType\":\"contract IRewardsV2\",\"name\":\"_rewardsV2\",\"type\":\"address\"},{\"internalType\":\"uint256[3]\",\"name\":\"_depositBounds\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256[3][3]\",\"name\":\"_depositRate\",\"type\":\"uint256[3][3]\"},{\"internalType\":\"uint256[3][3]\",\"name\":\"_stakingRate\",\"type\":\"uint256[3][3]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"refferer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"refferal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReferralDepositReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReferralRewardPaid\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"amtLevels\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"}],\"name\":\"claimAllDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depositBounds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depositRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDepositBounds\",\"outputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"\",\"type\":\"uint256[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_referralStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"getDepositRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDepositRates\",\"outputs\":[{\"internalType\":\"uint256[3][3]\",\"name\":\"\",\"type\":\"uint256[3][3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getReferral\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getReferralAmounts\",\"outputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"\",\"type\":\"uint256[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getReferralReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_referralStake\",\"type\":\"uint256\"}],\"name\":\"getStakingRateRange\",\"outputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"_rates\",\"type\":\"uint256[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakingRates\",\"outputs\":[{\"internalType\":\"uint256[3][3]\",\"name\":\"\",\"type\":\"uint256[3][3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"handleDepositEnd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"proccessDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referDepth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralTree\",\"outputs\":[{\"internalType\":\"contract IReferralTree\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"_depositBounds\",\"type\":\"uint256[3]\"}],\"name\":\"setBounds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[3][3]\",\"name\":\"_depositRate\",\"type\":\"uint256[3][3]\"}],\"name\":\"setDepositRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[3][3]\",\"name\":\"_stakingRate\",\"type\":\"uint256[3][3]\"}],\"name\":\"setStakingRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakingRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IMintableBurnableERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ReferralRewardsType3","CompilerVersion":"v0.6.2+commit.bacdbe57","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000be3c393fb670f0a29c3f3e660ffb113200e36676000000000000000000000000e5c23851bbde700414beb3ab2d2ae7063c8d9c7200000000000000000000000023d5caf6c288ab71b6061d97c9d8beda6f2ef3ae000000000000000000000000cd73ffed95721c22dcdba821baea07a02198413800000000000000000000000000000000000000000000010f0cf064dd5920000000000000000000000000000000000000000000000000006c6b935b8bbd4000000000000000000000000000000000000000000000000000056bc75e2d6310000000000000000000000000000000000000000000000000000000d529ae9e86000000000000000000000000000000000000000000000000000000470de4df820000000000000000000000000000000000000000000000000000002386f26fc1000000000000000000000000000000000000000000000000000000b1a2bc2ec5000000000000000000000000000000000000000000000000000000354a6ba7a18000000000000000000000000000000000000000000000000000001aa535d3d0c000000000000000000000000000000000000000000000000000008e1bc9bf040000000000000000000000000000000000000000000000000000002386f26fc100000000000000000000000000000000000000000000000000000011c37937e0800000000000000000000000000000000000000000000000000000d529ae9e86000000000000000000000000000000000000000000000000000000470de4df820000000000000000000000000000000000000000000000000000002386f26fc1000000000000000000000000000000000000000000000000000000b1a2bc2ec5000000000000000000000000000000000000000000000000000000354a6ba7a18000000000000000000000000000000000000000000000000000001aa535d3d0c000000000000000000000000000000000000000000000000000008e1bc9bf040000000000000000000000000000000000000000000000000000002386f26fc100000000000000000000000000000000000000000000000000000011c37937e08000","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e8f30f50908dc381303bae0833639c9d3e3ab7598286ecc6dfbdd6ea147aaca4"}]}