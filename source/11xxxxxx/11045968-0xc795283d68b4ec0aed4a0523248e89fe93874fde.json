{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\nWebsite: \r\n   -  TTT.finance\r\n*/\r\n\r\npragma solidity ^0.5.0;\r\n\r\ninterface Token{\r\n    \r\n    function balanceOf(address account) external view returns (uint);\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n\r\n}\r\n\r\ncontract SafeMath {\r\n    function safeAdd(uint256 x, uint256 y) internal pure returns(uint256) {\r\n        uint256 z = x + y;\r\n        assert((z >= x) && (z >= y));\r\n        return z;\r\n    }\r\n\r\n    function safeSubtract(uint256 x, uint256 y) internal pure returns(uint256) {\r\n        assert(x >= y);\r\n        uint256 z = x - y;\r\n        return z;\r\n    }\r\n\r\n    function safeMult(uint256 x, uint256 y) internal pure returns(uint256) {\r\n        uint256 z = x * y;\r\n        assert((x == 0)||(z/x == y));\r\n        return z;\r\n    }\r\n\r\n}\r\n\r\ncontract TttTokenSale is SafeMath {\r\n    address payable admin;\r\n    Token public tokenContract;\r\n    uint256 public tokenPrice;\r\n    uint256 public tokensSold;\r\n\r\n    event Sell(address _buyer, uint256 _amount);\r\n\r\n    constructor(Token _tokenContract, uint256 _tokenPrice) public {\r\n        admin = msg.sender;\r\n        tokenContract = _tokenContract;\r\n        tokenPrice = _tokenPrice;\r\n    }\r\n\r\n    function buyTokens(uint256 _numberOfTokens) public payable {\r\n        uint256 numberOfTokens =safeMult(_numberOfTokens,1e18);\r\n        require(\r\n            msg.value == safeMult(_numberOfTokens,tokenPrice),\r\n            \"Number of tokens does not match with the value\"\r\n        );\r\n        require(\r\n            tokenContract.balanceOf(address(this)) >= numberOfTokens,\r\n            \"Contact does not have enough tokens\"\r\n        );\r\n        require(\r\n            tokenContract.transfer(msg.sender, numberOfTokens),\r\n            \"Some problem with token transfer\"\r\n        );\r\n        tokensSold += _numberOfTokens;\r\n        emit Sell(msg.sender, numberOfTokens);\r\n    }\r\n    \r\n    function withdraw() external { \r\n    require(msg.sender == admin, \"Only the admin can call this function\");\r\n    admin.transfer(address(this).balance);\r\n    }\r\n   function setTokenExchangeRate(uint256 _tokenExchangeRate) external {\r\n       require(msg.sender == admin, \"Only the admin can call this function\");\r\n        require(_tokenExchangeRate != 0);\r\n        require(_tokenExchangeRate != tokenPrice);\r\n\r\n        tokenPrice = _tokenExchangeRate;\r\n    }\r\n\r\n    function endSale() public {\r\n        require(msg.sender == admin, \"Only the admin can call this function\");\r\n        require(\r\n            tokenContract.transfer(\r\n                msg.sender,\r\n                tokenContract.balanceOf(address(this))\r\n            ),\r\n            \"Unable to transfer tokens to admin\"\r\n        );\r\n        // destroy contract\r\n        selfdestruct(admin);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract Token\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Sell\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numberOfTokens\",\"type\":\"uint256\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenExchangeRate\",\"type\":\"uint256\"}],\"name\":\"setTokenExchangeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"internalType\":\"contract Token\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TttTokenSale","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000a2236b7e06135cae63edecc983245607d2eaf378000000000000000000000000000000000000000000000000002386f26fc10000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://272e0e5006186b3fad18ddceb8a712f4cc423309c1bedd69142342f544f9898e"}]}