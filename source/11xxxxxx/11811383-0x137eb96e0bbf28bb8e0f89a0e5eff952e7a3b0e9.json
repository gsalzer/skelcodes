{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity 0.6.12;\r\n\r\ncontract Governed {\r\n    event NewGov(address oldGov, address newGov);\r\n    event NewPendingGov(address oldPendingGov, address newPendingGov);\r\n\r\n    address public gov;\r\n    address public pendingGov;\r\n\r\n    modifier onlyGov {\r\n        require(msg.sender == gov, \"!gov\");\r\n        _;\r\n    }\r\n\r\n    function _setPendingGov(address who)\r\n        public\r\n        onlyGov\r\n    {\r\n        address old = pendingGov;\r\n        pendingGov = who;\r\n        emit NewPendingGov(old, who);\r\n    }\r\n\r\n    function _acceptGov()\r\n        public\r\n    {\r\n        require(msg.sender == pendingGov, \"!pendingGov\");\r\n        address oldgov = gov;\r\n        gov = pendingGov;\r\n        pendingGov = address(0);\r\n        emit NewGov(oldgov, gov);\r\n    }\r\n}\r\n\r\ncontract SubGoverned is Governed {\r\n    /**\r\n     * @notice Event emitted when a sub gov is enabled/disabled\r\n     */\r\n    event SubGovModified(\r\n        address account,\r\n        bool isSubGov\r\n    );\r\n    /// @notice sub governors\r\n    mapping(address => bool) public isSubGov;\r\n\r\n    modifier onlyGovOrSubGov() {\r\n        require(msg.sender == gov || isSubGov[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    function setIsSubGov(address subGov, bool _isSubGov)\r\n        public\r\n        onlyGov\r\n    {\r\n        isSubGov[subGov] = _isSubGov;\r\n        emit SubGovModified(subGov, _isSubGov);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ISetToken\r\n * @author Set Protocol\r\n *\r\n * Interface for operating with SetTokens.\r\n */\r\ninterface ISetToken is IERC20 {\r\n\r\n    /* ============ Enums ============ */\r\n\r\n    enum ModuleState {\r\n        NONE,\r\n        PENDING,\r\n        INITIALIZED\r\n    }\r\n\r\n    /* ============ Structs ============ */\r\n    /**\r\n     * The base definition of a SetToken Position\r\n     *\r\n     * @param component           Address of token in the Position\r\n     * @param module              If not in default state, the address of associated module\r\n     * @param unit                Each unit is the # of components per 10^18 of a SetToken\r\n     * @param positionState       Position ENUM. Default is 0; External is 1\r\n     * @param data                Arbitrary data\r\n     */\r\n    struct Position {\r\n        address component;\r\n        address module;\r\n        int256 unit;\r\n        uint8 positionState;\r\n        bytes data;\r\n    }\r\n\r\n    /**\r\n     * A struct that stores a component's cash position details and external positions\r\n     * This data structure allows O(1) access to a component's cash position units and \r\n     * virtual units.\r\n     *\r\n     * @param virtualUnit               Virtual value of a component's DEFAULT position. Stored as virtual for efficiency\r\n     *                                  updating all units at once via the position multiplier. Virtual units are achieved\r\n     *                                  by dividing a \"real\" value by the \"positionMultiplier\"\r\n     * @param componentIndex            \r\n     * @param externalPositionModules   List of external modules attached to each external position. Each module\r\n     *                                  maps to an external position\r\n     * @param externalPositions         Mapping of module => ExternalPosition struct for a given component\r\n     */\r\n    struct ComponentPosition {\r\n      int256 virtualUnit;\r\n      address[] externalPositionModules;\r\n      mapping(address => ExternalPosition) externalPositions;\r\n    }\r\n\r\n    /**\r\n     * A struct that stores a component's external position details including virtual unit and any\r\n     * auxiliary data.\r\n     *\r\n     * @param virtualUnit       Virtual value of a component's EXTERNAL position.\r\n     * @param data              Arbitrary data\r\n     */\r\n    struct ExternalPosition {\r\n      int256 virtualUnit;\r\n      bytes data;\r\n    }\r\n\r\n\r\n    /* ============ Functions ============ */\r\n    \r\n    function addComponent(address _component) external;\r\n    function removeComponent(address _component) external;\r\n    function editDefaultPositionUnit(address _component, int256 _realUnit) external;\r\n    function addExternalPositionModule(address _component, address _positionModule) external;\r\n    function removeExternalPositionModule(address _component, address _positionModule) external;\r\n    function editExternalPositionUnit(address _component, address _positionModule, int256 _realUnit) external;\r\n    function editExternalPositionData(address _component, address _positionModule, bytes calldata _data) external;\r\n\r\n    function invoke(address _target, uint256 _value, bytes calldata _data) external returns(bytes memory);\r\n\r\n    function editPositionMultiplier(int256 _newMultiplier) external;\r\n\r\n    function mint(address _account, uint256 _quantity) external;\r\n    function burn(address _account, uint256 _quantity) external;\r\n\r\n    function lock() external;\r\n    function unlock() external;\r\n\r\n    function addModule(address _module) external;\r\n    function removeModule(address _module) external;\r\n    function initializeModule() external;\r\n\r\n    function setManager(address _manager) external;\r\n\r\n    function manager() external view returns (address);\r\n    function moduleStates(address _module) external view returns (ModuleState);\r\n    function getModules() external view returns (address[] memory);\r\n    \r\n    function getDefaultPositionRealUnit(address _component) external view returns(int256);\r\n    function getExternalPositionRealUnit(address _component, address _positionModule) external view returns(int256);\r\n    function getComponents() external view returns(address[] memory);\r\n    function getExternalPositionModules(address _component) external view returns(address[] memory);\r\n    function getExternalPositionData(address _component, address _positionModule) external view returns(bytes memory);\r\n    function isExternalPositionModule(address _component, address _module) external view returns(bool);\r\n    function isComponent(address _component) external view returns(bool);\r\n    \r\n    function positionMultiplier() external view returns (int256);\r\n    function getTotalComponentRealUnits(address _component) external view returns(int256);\r\n\r\n    function isInitializedModule(address _module) external view returns(bool);\r\n    function isPendingModule(address _module) external view returns(bool);\r\n    function isLocked() external view returns (bool);\r\n}\r\n\r\ncontract TreasuryManager is SubGoverned {\r\n    using Address for address;\r\n\r\n    /* ============ Modifiers ============ */\r\n\r\n    /** @notice Throws if the sender is not allowed for this module */\r\n    modifier onlyAllowedForModule(address _user, address _module) {\r\n        require(\r\n            moduleAllowlist[_user][_module] || _user == gov,\r\n            \"TreasuryManager::onlyAllowedForModule: User is not allowed for module\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /* ============ State Variables ============ */\r\n\r\n    /** @notice  Set token this contract manages                     */\r\n    ISetToken public immutable setToken;\r\n\r\n    /** @notice  mapping of modules a caller is allowed to use       */\r\n    mapping(address => mapping(address => bool)) public moduleAllowlist;\r\n\r\n    /** @notice  mapping of allowed tokens                           */\r\n    mapping(address => bool) public allowedTokens;\r\n\r\n    /* ============ Events ============ */\r\n\r\n    event TokensAdded(address[] tokens);\r\n    event TokensRemoved(address[] tokens);\r\n    event ModulePermissionsUpdated(\r\n        address indexed user,\r\n        address indexed module,\r\n        bool allowed\r\n    );\r\n\r\n    constructor(\r\n        ISetToken _setToken,\r\n        address _gov,\r\n        address[] memory _allowedTokens\r\n    ) public {\r\n        setToken = _setToken;\r\n        gov = _gov;\r\n        addTokens(_allowedTokens);\r\n    }\r\n\r\n    /* ============ External Functions ============ */\r\n\r\n    /**\r\n     * @dev Gov ONLY\r\n     *\r\n     * @param _newManager       Manager to set on the set token\r\n     */\r\n    function setManager(address _newManager) external onlyGov {\r\n        setToken.setManager(_newManager);\r\n    }\r\n\r\n    /**\r\n     * @dev Gov ONLY\r\n     *\r\n     * @param _module           Module to add to the set token\r\n     */\r\n    function addModule(address _module) external onlyGov {\r\n        setToken.addModule(_module);\r\n    }\r\n\r\n    /**\r\n     * @dev Gov\r\n     *\r\n     * @param _module           Module to remove\r\n     */\r\n    function removeModule(address _module) external onlyGov {\r\n        setToken.removeModule(_module);\r\n    }\r\n\r\n    /**\r\n     * @dev Only allowed for module\r\n     *\r\n     * @param _module           Module to interact with\r\n     * @param _data             Byte data of function to call in module\r\n     */\r\n    function interactModule(address _module, bytes calldata _data)\r\n        external\r\n        onlyAllowedForModule(msg.sender, _module)\r\n    {\r\n        // Invoke call to module, assume value will always be 0\r\n        _module.functionCallWithValue(_data, 0);\r\n    }\r\n\r\n    /**\r\n     * @dev Gov ONLY. Updates whether a module + adapter combo are allowed\r\n     *\r\n     * @param _module                    The module to allow this adapter with\r\n     * @param _caller                    The caller to allow to use this module\r\n     */\r\n    function setModuleAllowed(\r\n        address _caller,\r\n        address _module,\r\n        bool allowed\r\n    ) external onlyGov {\r\n        moduleAllowlist[_caller][_module] = allowed;\r\n        emit ModulePermissionsUpdated(_caller, _module, allowed);\r\n    }\r\n\r\n    /**\r\n     * @dev Gov ONLY. Enables a list of tokens for trading/wrapping to\r\n     *\r\n     * @param _tokens                    The list of tokens to add\r\n     */\r\n    function addTokens(address[] memory _tokens) public onlyGov {\r\n        for (uint256 index = 0; index < _tokens.length; index++) {\r\n            allowedTokens[_tokens[index]] = true;\r\n        }\r\n        emit TokensAdded(_tokens);\r\n    }\r\n\r\n    /**\r\n     * @dev Gov ONLY. Disables a list of tokens from trading/wrapping to\r\n     *\r\n     * @param _tokens                    The list of tokens to remove\r\n     */\r\n    function removeTokens(address[] memory _tokens) external onlyGov {\r\n        for (uint256 index = 0; index < _tokens.length; index++) {\r\n            allowedTokens[_tokens[index]] = false;\r\n        }\r\n        emit TokensRemoved(_tokens);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether a token is allowed\r\n     *\r\n     * @param _token                    The token to check if it is allowed\r\n     */\r\n    function isTokenAllowed(address _token)\r\n        external\r\n        view\r\n        returns (bool allowed)\r\n    {\r\n        return allowedTokens[_token];\r\n    }\r\n}\r\n\r\ncontract BaseAdapter {\r\n    TreasuryManager public manager;\r\n    ISetToken public setToken;\r\n\r\n    constructor(ISetToken _setToken, TreasuryManager _manager) public {\r\n        setToken = _setToken;\r\n        manager = _manager;\r\n    }\r\n\r\n    modifier onlyGovOrSubGov() {\r\n        require(\r\n            manager.gov() == msg.sender || manager.isSubGov(msg.sender),\r\n            \"BaseAdapter::onlyGovOrSubGov: Invalid permissions\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyGov() {\r\n        require(\r\n            manager.gov() == msg.sender,\r\n            \"BaseAdapter::onlyGov: Invalid permissions\"\r\n        );\r\n        _;\r\n    }\r\n}\r\n\r\ninterface IWrapModule {\r\n    function wrap(\r\n        ISetToken _setToken,\r\n        address _underlyingToken,\r\n        address _wrappedToken,\r\n        uint256 _underlyingUnits,\r\n        string calldata _integrationName\r\n    ) external;\r\n\r\n    function wrapWithEther(\r\n        ISetToken _setToken,\r\n        address _wrappedToken,\r\n        uint256 _underlyingUnits,\r\n        string calldata _integrationName\r\n    ) external;\r\n\r\n    function unwrap(\r\n        ISetToken _setToken,\r\n        address _underlyingToken,\r\n        address _wrappedToken,\r\n        uint256 _wrappedUnits,\r\n        string calldata _integrationName\r\n    ) external;\r\n\r\n    function unwrapWithEther(\r\n        ISetToken _setToken,\r\n        address _wrappedToken,\r\n        uint256 _wrappedUnits,\r\n        string calldata _integrationName\r\n    ) external;\r\n\r\n    function initialize(ISetToken _setToken) external;\r\n}\r\n\r\ncontract WrapAdapter is BaseAdapter {\r\n    IWrapModule public module;\r\n\r\n    constructor(\r\n        ISetToken _setToken,\r\n        TreasuryManager _manager,\r\n        IWrapModule _module\r\n    ) public BaseAdapter(_setToken, _manager) {\r\n        module = _module;\r\n    }\r\n\r\n    /**\r\n     * @dev Only can invoke modules. This function will revert if the wrappedToken isn't on the allowed list\r\n     *\r\n     * @param _integrationName          The name of the integration to interact with\r\n     * @param _underlyingToken          The token to wrap\r\n     * @param _wrappedToken             The token to get after wrapping\r\n     * @param _underlyingUnits          The amount of underlyingToken to wrap\r\n     */\r\n    function wrap(\r\n        string memory _integrationName,\r\n        address _underlyingToken,\r\n        address _wrappedToken,\r\n        uint256 _underlyingUnits\r\n    ) external onlyGovOrSubGov {\r\n        require(\r\n            manager.isTokenAllowed(_wrappedToken),\r\n            \"WrapAdapter::wrap: _wrappedToken is not on the allowed list\"\r\n        );\r\n        bytes memory encoded = abi.encodeWithSelector(\r\n            module.wrap.selector,\r\n            setToken,\r\n            _underlyingToken,\r\n            _wrappedToken,\r\n            _underlyingUnits,\r\n            _integrationName\r\n        );\r\n\r\n        manager.interactModule(address(module), encoded);\r\n    }\r\n\r\n    /**\r\n     * @dev Only can invoke modules. This function will revert if the underlyingToken isn't on the allowed list\r\n     *\r\n     * @param _integrationName          The name of the integration to interact with\r\n     * @param _underlyingToken          The underlying token to receive\r\n     * @param _wrappedToken             The token to unwrap\r\n     * @param _wrappedUnits             The amount of wrapped tokens to unwrap\r\n     */\r\n    function unwrap(\r\n        string memory _integrationName,\r\n        address _underlyingToken,\r\n        address _wrappedToken,\r\n        uint256 _wrappedUnits\r\n    ) external onlyGovOrSubGov {\r\n        require(\r\n            manager.isTokenAllowed(_underlyingToken),\r\n            \"WrapAdapter::unwrap: _underlyingToken is not on the allowed list\"\r\n        );\r\n        bytes memory encoded = abi.encodeWithSelector(\r\n            module.unwrap.selector,\r\n            address(setToken),\r\n            _underlyingToken,\r\n            _wrappedToken,\r\n            _wrappedUnits,\r\n            _integrationName\r\n        );\r\n\r\n        manager.interactModule(address(module), encoded);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract ISetToken\",\"name\":\"_setToken\",\"type\":\"address\"},{\"internalType\":\"contract TreasuryManager\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"contract IWrapModule\",\"name\":\"_module\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"contract TreasuryManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"module\",\"outputs\":[{\"internalType\":\"contract IWrapModule\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setToken\",\"outputs\":[{\"internalType\":\"contract ISetToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_integrationName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_underlyingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wrappedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_wrappedUnits\",\"type\":\"uint256\"}],\"name\":\"unwrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_integrationName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_underlyingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wrappedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_underlyingUnits\",\"type\":\"uint256\"}],\"name\":\"wrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"WrapAdapter","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"50000","ConstructorArguments":"000000000000000000000000d83dfe003e7c42077186d690dd3d24a0c965ca4e000000000000000000000000e7481861d4855a4515fbcbefd2a59eff601d6d6e000000000000000000000000be4aede1694aff7f1827229870f6cf3d9e7a999c","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a88ac3a7581acac90a1a0aa548e148bb5f4620e1fa8433828d5de59093978021"}]}