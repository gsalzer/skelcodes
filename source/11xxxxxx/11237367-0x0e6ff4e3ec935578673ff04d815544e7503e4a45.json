{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/home/jenja/stobox-contract/contracts/Roles.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.4.22 <0.8.0;\\n\\nimport \\\"openzeppelin-solidity/contracts/access/AccessControl.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/access/Ownable.sol\\\";\\n\\ncontract Roles is Ownable, AccessControl  {\\n    bytes32 public constant WHITELISTER_ROLE = keccak256(\\\"WHITELISTER_ROLE\\\");\\n    bytes32 public constant FREEZER_ROLE = keccak256(\\\"FREEZER_ROLE\\\");\\n    bytes32 public constant TRANSPORTER_ROLE = keccak256(\\\"TRANSPORTER_ROLE\\\");\\n    bytes32 public constant VOTER_ROLE = keccak256(\\\"VOTER_ROLE\\\");\\n    bytes32 public constant LIMITER_ROLE = keccak256(\\\"LIMITER_ROLE\\\");\\n\\n    /**\\n     * @notice Add `_address` to the super admin role as a member.\\n     * @param _address Address to aad to the super admin role as a member.\\n     */\\n    constructor(address _address) public {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _address);\\n\\n        _setRoleAdmin(WHITELISTER_ROLE, DEFAULT_ADMIN_ROLE);\\n        _setRoleAdmin(FREEZER_ROLE, DEFAULT_ADMIN_ROLE);\\n        _setRoleAdmin(TRANSPORTER_ROLE, DEFAULT_ADMIN_ROLE);\\n        _setRoleAdmin(VOTER_ROLE, DEFAULT_ADMIN_ROLE);\\n        _setRoleAdmin(LIMITER_ROLE, DEFAULT_ADMIN_ROLE);\\n    }\\n\\n    // Modifiers\\n    modifier onlySuperAdmin() {\\n        require(isSuperAdmin(msg.sender), \\\"Restricted to super admins.\\\");\\n        _;\\n    }\\n\\n    modifier onlyWhitelister() {\\n        require(isWhitelister(msg.sender), \\\"Restricted to whitelisters.\\\");\\n        _;\\n    }\\n\\n    modifier onlyFreezer() {\\n        require(isFreezer(msg.sender), \\\"Restricted to freezers.\\\");\\n        _;\\n    }\\n\\n    modifier onlyTransporter() {\\n        require(isTransporter(msg.sender), \\\"Restricted to transporters.\\\");\\n        _;\\n    }\\n\\n    modifier onlyVoter() {\\n        require(isVoter(msg.sender), \\\"Restricted to voters.\\\");\\n        _;\\n    }\\n\\n    modifier onlyLimiter() {\\n        require(isLimiter(msg.sender), \\\"Restricted to limiters.\\\");\\n        _;\\n    }\\n\\n    // External functions\\n\\n    /**\\n     * @notice Add the super admin role for the address.\\n     * @param _address Address for assigning the super admin role.\\n     */\\n    function addSuperAdmin(address _address)\\n        external\\n        onlySuperAdmin\\n    {\\n        _assignRole(_address, DEFAULT_ADMIN_ROLE);\\n    }\\n\\n    /**\\n     * @notice Add the whitelister role for the address.\\n     * @param _address Address for assigning the whitelister role.\\n     */\\n    function addWhitelister(address _address)\\n        external\\n        onlySuperAdmin\\n    {\\n        _assignRole(_address, WHITELISTER_ROLE);\\n    }\\n\\n    /**\\n     * @notice Add the freezer role for the address.\\n     * @param _address Address for assigning the freezer role.\\n     */\\n    function addFreezer(address _address)\\n        external\\n        onlySuperAdmin\\n    {\\n        _assignRole(_address, FREEZER_ROLE);\\n    }\\n\\n    /**\\n     * @notice Add the transporter role for the address.\\n     * @param _address Address for assigning the transporter role.\\n     */\\n    function addTransporter(address _address)\\n        external\\n        onlySuperAdmin\\n    {\\n        _assignRole(_address, TRANSPORTER_ROLE);\\n    }\\n\\n    /**\\n     * @notice Add the voter role for the address.\\n     * @param _address Address for assigning the voter role.\\n     */\\n    function addVoter(address _address)\\n        external\\n        onlySuperAdmin\\n    {\\n        _assignRole(_address, VOTER_ROLE);\\n    }\\n\\n    /**\\n     * @notice Add the limiter role for the address.\\n     * @param _address Address for assigning the limiter role.\\n     */\\n    function addLimiter(address _address)\\n        external\\n        onlySuperAdmin\\n    {\\n        _assignRole(_address, LIMITER_ROLE);\\n    }\\n\\n    /**\\n     * @notice Renouncement of supera dmin role.\\n     */\\n    function renounceSuperAdmin()\\n        external\\n        onlySuperAdmin\\n    {\\n        renounceRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Remove the whitelister role for the address.\\n     * @param _address Address for removing the whitelister role.\\n     */\\n    function removeWhitelister(address _address)\\n        external\\n        onlySuperAdmin\\n    {\\n        _removeRole(_address, WHITELISTER_ROLE);\\n    }\\n\\n    /**\\n     * @notice Remove the freezer role for the address.\\n     * @param _address Address for removing the freezer role.\\n     */\\n    function removeFreezer(address _address)\\n        external\\n        onlySuperAdmin\\n    {\\n        _removeRole(_address, FREEZER_ROLE);\\n    }\\n\\n    /**\\n     * @notice Remove the transporter role for the address.\\n     * @param _address Address for removing the transporter role.\\n     */\\n    function removeTransporter(address _address)\\n        external\\n        onlySuperAdmin\\n    {\\n        _removeRole(_address, TRANSPORTER_ROLE);\\n    }\\n\\n    /**\\n     * @notice Remove the voter role for the address.\\n     * @param _address Address for removing the voter role.\\n     */\\n    function removeVoter(address _address)\\n        external\\n        onlySuperAdmin\\n    {\\n        _removeRole(_address, VOTER_ROLE);\\n    }\\n\\n    /**\\n     * @notice Remove the limiter role for the address.\\n     * @param _address Address for removing the limiter role.\\n     */\\n    function removeLimiter(address _address)\\n        external\\n        onlySuperAdmin\\n    {\\n        _removeRole(_address, LIMITER_ROLE);\\n    }\\n\\n    // Public functions\\n\\n    /**\\n     * @notice Checks if the address is assigned the super admin role.\\n     * @param _address Address for checking.\\n     */\\n    function isSuperAdmin(address _address)\\n        public\\n        virtual\\n        view\\n        returns (bool)\\n    {\\n        return hasRole(DEFAULT_ADMIN_ROLE, _address);\\n    }\\n\\n    /**\\n     * @notice Checks if the address is assigned the whitelister role.\\n     * @param _address Address for checking.\\n     */\\n    function isWhitelister(address _address)\\n        public\\n        virtual\\n        view\\n        returns (bool)\\n    {\\n        return hasRole(WHITELISTER_ROLE, _address);\\n    }\\n\\n    /**\\n     * @notice Checks if the address is assigned the freezer role.\\n     * @param _address Address for checking.\\n     */\\n    function isFreezer(address _address)\\n        public\\n        virtual\\n        view\\n        returns (bool)\\n    {\\n        return hasRole(FREEZER_ROLE, _address);\\n    }\\n\\n    /**\\n     * @notice Checks if the address is assigned the transporter role.\\n     * @param _address Address for checking.\\n     */\\n    function isTransporter(address _address)\\n        public\\n        virtual\\n        view\\n        returns (bool)\\n    {\\n        return hasRole(TRANSPORTER_ROLE, _address);\\n    }\\n\\n    /**\\n     * @notice Checks if the address is assigned the voter role.\\n     * @param _address Address for checking.\\n     */\\n    function isVoter(address _address)\\n        public\\n        virtual\\n        view\\n        returns (bool)\\n    {\\n        return hasRole(VOTER_ROLE, _address);\\n    }\\n\\n    /**\\n     * @notice Checks if the address is assigned the limiter role.\\n     * @param _address Address for checking.\\n     */\\n    function isLimiter(address _address)\\n        public\\n        virtual\\n        view\\n        returns (bool)\\n    {\\n        return hasRole(LIMITER_ROLE, _address);\\n    }\\n\\n    // Private functions\\n\\n    /**\\n     * @notice Add the `_role` for the `_address`.\\n     * @param _role Role to assigning for the `_address`.\\n     * @param _address Address for assigning the `_role`.\\n     */\\n    function _assignRole(address _address, bytes32 _role)\\n        private\\n    {\\n        grantRole(_role, _address);\\n    }\\n\\n    /**\\n     * @notice Remove the `_role` from the `_address`.\\n     * @param _role Role to removing from the `_address`.\\n     * @param _address Address for removing the `_role`.\\n     */\\n    function _removeRole(address _address, bytes32 _role)\\n        private\\n    {\\n        revokeRole(_role, _address);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"/home/jenja/stobox-contract/contracts/STBX.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.4.22 <0.8.0;\\n\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/utils/EnumerableSet.sol\\\";\\n\\nimport \\\"./Roles.sol\\\";\\n\\n/**\\n * @title STBXToken\\n * @author Stobox Technologies Inc.\\n * @dev STBX ERC20 Token\\n */\\ncontract STBXToken is IERC20, Roles {\\n    using SafeMath for uint256;\\n\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    struct TransferLimit {\\n        uint256 transferLimit;\\n        uint256 lastTransferLimitTimestamp;\\n        uint256 allowedToTransfer;\\n    }\\n\\n    mapping(address => uint256) private _balances;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n    mapping(address => TransferLimit) private _transferLimits;\\n\\n    uint256 private _defaultTransferLimit;\\n    uint256 private _totalSupply;\\n    uint256 private _kDecimals;\\n    uint256 private _k;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    uint8 private _decimals;\\n\\n    EnumerableSet.AddressSet private _whitelist;\\n    EnumerableSet.AddressSet private _frozenlist;\\n\\n    // Modifiers\\n\\n    modifier onlyWhitelisted(address _account) {\\n        require(\\n            _whitelist.contains(_account),\\n            \\\"STBX: not whitelisted address.\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyWithUnfrozenFunds(address _account) {\\n        require(\\n            _frozenlist.contains(_account) == false,\\n            \\\"STBX: funds are frozen.\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice STBXToken simply implements a ERC20 token.\\n     */\\n    constructor ()\\n        Roles(msg.sender)\\n        public\\n    {\\n        _name = \\\"Stobox Demo Common Stock\\\";\\n        _symbol = \\\"SDCS1\\\";\\n        _decimals = 0;\\n        _kDecimals = 18;\\n        _k = 10 ** _kDecimals;\\n        _defaultTransferLimit = 1000;\\n\\n        _mint(msg.sender, 1000000);\\n        _whitelist.add(msg.sender);\\n    }\\n\\n    // External functions\\n\\n     /**\\n     * @notice Add an address to the whitelist.\\n     * @param _address Address to add to the whitelist.\\n     */\\n    function addAddressToWhitelist(address _address)\\n        external\\n        onlyWhitelister\\n    {\\n        _whitelist.add(_address);\\n        _frozenlist.remove(_address);\\n    }\\n\\n    /**\\n     * @notice Remove an address from the whitelist.\\n     * @param _address Address to remove from the whitelist.\\n     */\\n    function removeAddressFromWhitelist(address _address)\\n        external\\n        onlyWhitelister\\n    {\\n        _whitelist.remove(_address);\\n        _frozenlist.add(_address);\\n    }\\n\\n    /**\\n     * @notice Freeze all funds at the address.\\n     * @param _account Account at which to freeze funds.\\n     */\\n    function freezeFunds(address _account)\\n        external\\n        onlyFreezer\\n    {\\n        _frozenlist.add(_account);\\n    }\\n\\n    /**\\n     * @notice Unfreeze all funds at the address.\\n     * @param _account Account at which to unfreeze funds.\\n     */\\n    function unfreezeFunds(address _account)\\n        external\\n        onlyFreezer\\n    {\\n        _frozenlist.remove(_account);\\n    }\\n\\n    /**\\n     * @notice Minting of new tokens to the address.\\n     * @param _account Account where to mint tokens.\\n     * @param _amount Amount of tokens to mint.\\n     */\\n    function mint(address _account, uint256 _amount)\\n        external\\n        onlySuperAdmin\\n        onlyWhitelisted(_account)\\n    {\\n        _mint(_account, _getNormilizedValue(_amount));\\n    }\\n\\n    /**\\n     * @notice Burning of tokens from the address.\\n     * @param _account Account where to burn tokens.\\n     * @param _amount Amount of tokens to burn.\\n     *\\n     * Calling conditions:\\n     *\\n     * - balance of `_account` must be grater or equal than `_amount`.\\n     */\\n    function burn(address _account, uint256 _amount)\\n        external\\n        onlySuperAdmin\\n    {\\n        require(balanceOf(_account) >= _amount, \\\"STBX: balance too low\\\");\\n        _burn(_account, _getNormilizedValue(_amount));\\n    }\\n\\n    /**\\n     * @notice Transfer funds from one address to another.\\n     * @param _from Address from which to transfer funds.\\n     * @param _where Address where to transfer funds.\\n     * @param _amount Amount to transfer.\\n     *\\n     * Requirements:\\n     *\\n     * - balance of `_from` must be greater or equal to `_amount`.\\n     */\\n    function transferFunds(address _from, address _where, uint256 _amount)\\n        external\\n        onlyTransporter\\n        onlyWhitelisted(_where)\\n        returns (bool)\\n    {\\n        require(balanceOf(_from) >= _amount, \\\"STBX: not enough tokens\\\");\\n\\n        _transfer(_from, _where, _getNormilizedValue(_amount));\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Stock split or merge (consolidation).\\n     * @param _x The count of shares before split.\\n     * @param _y The count of shares after split.\\n     * @dev 1-2: one share turns into two. 3-2: three shares turns into two.\\n     *\\n     * Requirements:\\n     *\\n     * - `_x` must not be equal to `_y`.\\n     * - `_x` and `_y` must be greater than 0.\\n     */\\n    function splitOrMerge(uint256 _x, uint256 _y)\\n        external\\n        onlySuperAdmin\\n    {\\n        require(_x != _y, \\\"STBX: _x must not be equal to _y\\\");\\n        require(_x > 0, \\\"STBX: _x must be greater than 0\\\");\\n        require(_y > 0, \\\"STBX: _y must be greater than 0\\\");\\n\\n        _split(_x, _y);\\n    }\\n\\n    /**\\n     * @notice Set transfer limit for address.\\n     * @param _account Address where to set transfer limit.\\n     * @param _transferLimit Daily transfer limit for an `_account`.\\n     */\\n    function setTransferLimit(address _account, uint256 _transferLimit)\\n        external\\n        onlyLimiter\\n    {\\n        _transferLimits[_account].transferLimit = _transferLimit;\\n        _transferLimits[_account].allowedToTransfer = _transferLimit;\\n        _transferLimits[_account].lastTransferLimitTimestamp = now;\\n    }\\n\\n    // External view functions\\n\\n    /**\\n     * @notice Checking if the address is whitelisted.\\n     * @param _address Address to check in the whitelist.\\n     * @return Is the address in the whitelist.\\n     */\\n    function isWhitelistedAddress(address _address)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return _whitelist.contains(_address);\\n    }\\n\\n    /**\\n     * @notice Checking if the funds are frozen.\\n     * @param _account Address to check.\\n     * @return Is the funds are frozen.\\n     */\\n    function isFrozenFunds(address _account)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return _frozenlist.contains(_account);\\n    }\\n\\n    // Public functions\\n\\n    /**\\n     * @notice Returns the name of the token.\\n     */\\n    function name()\\n        public\\n        view\\n        returns (string memory)\\n    {\\n        return _name;\\n    }\\n\\n    /**\\n     * @notice Returns the symbol of the token.\\n     */\\n    function symbol()\\n        public\\n        view\\n        returns (string memory)\\n    {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @notice Returns the number of decimals used to get its user representation.\\n     */\\n    function decimals()\\n        public\\n        view\\n        returns (uint8)\\n    {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @notice Returns the amount of tokens in existence.\\n     */\\n    function totalSupply()\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _totalSupply.mul(_k).div(10 ** _kDecimals);\\n    }\\n\\n    /**\\n     * @notice Returns the amount of tokens owned by `_account`.\\n     * @param _account Account to check balance.\\n     */\\n    function balanceOf(address _account)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _balances[_account].mul(_k).div(10 ** _kDecimals);\\n    }\\n\\n    /**\\n     * @notice Returns transfer limit for `_account`.\\n     * Can be defaul value or personally assigned to the `_account` value.\\n     * @param _account Account to get transfer limit.\\n     */\\n    function getTransferLimit(address _account)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        if (_transferLimits[_account].transferLimit > 0) {\\n            return _transferLimits[_account].transferLimit;\\n        }\\n\\n        return _defaultTransferLimit;\\n    }\\n\\n    /**\\n     * @notice Get the number of tokens that can be transferred today\\n     * by `_account`. Can be 0 in 2 cases:\\n     * a) `_updateTransferLimit` function not called yet;\\n     * b) transfer limit was set to 0 by limiter.\\n     * @param _account Account to get amount allowed to transfer today.\\n     */\\n    function getAllowedToTransfer(address _account)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return _transferLimits[_account].allowedToTransfer;\\n    }\\n\\n    /**\\n     * @notice Moves `_amount` tokens from the caller's account to `_recipient`.\\n     * Emits a {Transfer} event.\\n     * @param _recipient Recipient of the tokens.\\n     * @param _amount Amount tokens to move.\\n     * @return A boolean value indicating whether the operation succeeded.\\n     */\\n    function transfer(address _recipient, uint256 _amount)\\n        public\\n        virtual\\n        override\\n        onlyWhitelisted(msg.sender)\\n        onlyWhitelisted(_recipient)\\n        onlyWithUnfrozenFunds(msg.sender)\\n        returns (bool)\\n    {\\n        _updateTransferLimit(msg.sender, _amount);\\n        _transfer(msg.sender, _recipient, _getNormilizedValue(_amount));\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice the remaining number of tokens that `_spender` will be\\n     * allowed to spend on behalf of `_owner` through {transferFrom}. This is\\n     * zero by default.\\n     * @param _owner Owner of tokens.\\n     * @param _spender Spender of tokens.\\n     */\\n    function allowance(address _owner, address _spender)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _allowances[_owner][_spender].mul(_k);\\n    }\\n\\n    /**\\n     * @notice Sets `_amount` as the allowance of `_spender` over the caller's tokens.\\n     * Emits an {Approval} event.\\n     * @param _spender Spender of the tokens.\\n     * @param _amount Amount of tokens to set as the allowance.\\n     * @return A boolean value indicating whether the operation succeeded.\\n     */\\n    function approve(address _spender, uint256 _amount)\\n        public\\n        virtual\\n        override\\n        onlyWhitelisted(msg.sender)\\n        onlyWhitelisted(_spender)\\n        onlyWithUnfrozenFunds(msg.sender)\\n        returns (bool)\\n    {\\n        _approve(msg.sender, _spender, _getNormilizedValue(_amount));\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Moves `_amount` tokens from `_sender` to `_recipient` using the\\n     * allowance mechanism. `_amount` is then deducted from the caller's\\n     * allowance.\\n     * Emits a {Transfer} event.\\n     * @param _sender Spender of tokens.\\n     * @param _recipient Recipient of tokens.\\n     * @param _amount Amount of tokens to transfer.\\n     * @return A boolean value indicating whether the operation succeeded.\\n     *\\n     * Requirements:\\n     *\\n     * - `_amount` must be less or equal allowance for the `_sender`.\\n     */\\n    function transferFrom(address _sender, address _recipient, uint256 _amount)\\n        public\\n        virtual\\n        override\\n        onlyWhitelisted(_sender)\\n        onlyWhitelisted(_recipient)\\n        onlyWithUnfrozenFunds(_sender)\\n        returns (bool)\\n    {\\n        _updateTransferLimit(_sender, _amount);\\n        _transfer(_sender, _recipient, _getNormilizedValue(_amount));\\n        _approve(_sender, msg.sender, _allowances[_sender][msg.sender].sub(\\n            _getNormilizedValue(_amount),\\n            \\\"STBX: transfer amount exceeds allowance\\\"\\n        ));\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Increase allowance for the `_spender`.\\n     * @param _spender Spender of tokens.\\n     * @param _addedValue Value to add to the allowance for the `_spender`.\\n     * @return A boolean value indicating whether the operation succeeded.\\n     */\\n    function increaseAllowance(address _spender, uint256 _addedValue)\\n        public\\n        virtual\\n        onlyWhitelisted(msg.sender)\\n        onlyWhitelisted(_spender)\\n        onlyWithUnfrozenFunds(msg.sender)\\n        returns (bool)\\n    {\\n        _approve(msg.sender, _spender, _allowances[msg.sender][_spender].add(\\n            _getNormilizedValue(_addedValue)\\n        ));\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Decrease allowance for the `_spender`.\\n     * @param _spender Spender of tokens.\\n     * @param _subtractedValue Value to substruct from the allowance for the `_spender`.\\n     * @return A boolean value indicating whether the operation succeeded.\\n     *\\n     * Requirements:\\n     *\\n     * - result of substruction must be greater or equal to 0.\\n     */\\n    function decreaseAllowance(address _spender, uint256 _subtractedValue)\\n        public\\n        virtual\\n        onlyWhitelisted(msg.sender)\\n        onlyWhitelisted(_spender)\\n        onlyWithUnfrozenFunds(msg.sender)\\n        returns (bool)\\n    {\\n        _approve(msg.sender, _spender, _allowances[msg.sender][_spender].sub(\\n            _getNormilizedValue(_subtractedValue),\\n            \\\"STBX: decreased allowance below zero\\\"\\n        ));\\n\\n        return true;\\n    }\\n\\n    // Internal functions\\n\\n     /**\\n     * @notice Moves tokens `_amount` from `_sender` to `_recipient`.\\n     * Emits a {Transfer} event.\\n     * @param _sender Sender of tokens.\\n     * @param _recipient Recipient of tokens.\\n     * @param _amount Amount of tokens to transfer.\\n     *\\n     * Requirements:\\n     *\\n     * - `_sender` cannot be the zero address.\\n     * - `_recipient` cannot be the zero address.\\n     * - `_sender` must have a balance of at least `_amount`.\\n     */\\n    function _transfer(address _sender, address _recipient, uint256 _amount)\\n        internal\\n        virtual\\n    {\\n        require(_sender != address(0), \\\"STBX: transfer from the zero address\\\");\\n        require(\\n            _recipient != address(0),\\n            \\\"STBX: transfer to the zero address\\\"\\n        );\\n\\n        _beforeTokenTransfer(_sender, _recipient, _amount);\\n\\n        _balances[_sender] = _balances[_sender].sub(\\n            _amount,\\n            \\\"STBX: transfer amount exceeds balance\\\"\\n        );\\n        _balances[_recipient] = _balances[_recipient].add(_amount);\\n\\n        emit Transfer(_sender, _recipient, _amount);\\n    }\\n\\n    /** @notice Creates `_amount` tokens and assigns them to `_account`, increasing\\n     * the total supply.\\n     * Emits a {Transfer} event with `_from` set to the zero address.\\n     * @param _account Account where to mint tokens.\\n     * @param _amount Amount of tokens to mint.\\n     *\\n     * Requirements:\\n     *\\n     * - `_account` cannot be the zero address.\\n     */\\n    function _mint(address _account, uint256 _amount)\\n        internal\\n        virtual\\n    {\\n        require(_account != address(0), \\\"STBX: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), _account, _amount);\\n\\n        _totalSupply = _totalSupply.add(_amount);\\n        _balances[_account] = _balances[_account].add(_amount);\\n\\n        emit Transfer(address(0), _account, _amount);\\n    }\\n\\n    /**\\n     * @notice Destroys `_amount` tokens from `_account`, reducing the\\n     * total supply.\\n     * Emits a {Transfer} event with `_to` set to the zero address.\\n     * @param _account Account where to burn tokens.\\n     * @param _amount Amount of tokens to burn.\\n     *\\n     * Requirements:\\n     *\\n     * - `_account` cannot be the zero address.\\n     * - `_amount` must have at least `amount` tokens.\\n     */\\n    function _burn(address _account, uint256 _amount)\\n        internal\\n        virtual\\n    {\\n        require(_account != address(0), \\\"STBX: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(_account, address(0), _amount);\\n\\n        _balances[_account] = _balances[_account].sub(\\n            _amount,\\n            \\\"STBX: burn amount exceeds balance\\\"\\n        );\\n        _totalSupply = _totalSupply.sub(_amount);\\n\\n        emit Transfer(_account, address(0), _amount);\\n    }\\n\\n    /**\\n     * @notice Sets `_amount` as the allowance of `_spender` over the `_owner` s tokens.\\n     * Emits an {Approval} event.\\n     * @param _owner Owner of the tokens.\\n     * @param _spender Spender of the tokens.\\n     * @param _amount Amount of tokens to set as the allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `_owner` cannot be the zero address.\\n     * - `_spender` cannot be the zero address.\\n     */\\n    function _approve(address _owner, address _spender, uint256 _amount)\\n        internal\\n        virtual\\n    {\\n        require(_owner != address(0), \\\"STBX: approve from the zero address\\\");\\n        require(_spender != address(0), \\\"STBX: approve to the zero address\\\");\\n\\n        _allowances[_owner][_spender] = _amount;\\n\\n        emit Approval(_owner, _spender, _amount);\\n    }\\n\\n    /**\\n     * @notice Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     * @param _from The address from which tokens will be moved.\\n     * @param _to The address where tokens will be moved.\\n     * @param _amount Amount of tokens that will be moved.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `_from` and `_to` are both non-zero, `_amount` of ``_from``'s tokens\\n     * will be to transferred to `_to`.\\n     * - when `_from` is zero, `_amount` tokens will be minted for `_to`.\\n     * - when `_to` is zero, `_amount` of ``_from``'s tokens will be burned.\\n     * - `_from` and `_to` are never both zero.\\n     */\\n    function _beforeTokenTransfer(address _from, address _to, uint256 _amount)\\n        internal\\n        virtual\\n    { }\\n\\n    // Private functions\\n\\n    /**\\n     * @notice Changes the global multiplier during stock splits and consolidations.\\n     * @param _x First coefficient.\\n     * @param _y Second coefficient.\\n     */\\n    function _split(uint256 _x, uint256 _y)\\n        private\\n    {\\n        _k = _k.mul(_y.mul(10 ** _kDecimals).div(_x));\\n        _k = _k.div(10 ** 18);\\n    }\\n\\n    /**\\n     * @notice Getting normalized value depends on coefficient.\\n     * @param _value Value to normilize.\\n     * @return Normilized value.\\n     */\\n    function _getNormilizedValue(uint256 _value)\\n        private\\n        returns (uint256)\\n    {\\n        return _value.div(_k.div(10 ** _kDecimals));\\n    }\\n\\n    /**\\n     * @notice Update transfer limit for `_account` before each operation with\\n     * tokens.\\n     * @param _account Account to update transfer limit if needed.\\n     * @param _amount Amount to substruct from transfer limit after updating.\\n     */\\n    function _updateTransferLimit(address _account, uint256 _amount)\\n        private\\n    {\\n        if (_transferLimits[_account].lastTransferLimitTimestamp + 1 days < now) {\\n            _transferLimits[_account].lastTransferLimitTimestamp = now;\\n\\n            if (_transferLimits[_account].transferLimit > 0) {\\n                _transferLimits[_account].allowedToTransfer =\\n                    _transferLimits[_account].transferLimit;\\n            }\\n            else {\\n                _transferLimits[_account].allowedToTransfer = _defaultTransferLimit;\\n            }\\n        }\\n\\n        _transferLimits[_account].allowedToTransfer =\\n            _transferLimits[_account].allowedToTransfer.sub(\\n                _amount,\\n                \\\"STBX: transfer exceeds your transfer limit\\\"\\n            );\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../GSN/Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/utils/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\\n * (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {\r\n      \"\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FREEZER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIMITER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRANSPORTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VOTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WHITELISTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addAddressToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addFreezer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addLimiter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addSuperAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addTransporter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addVoter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addWhitelister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"freezeFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getAllowedToTransfer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getTransferLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isFreezer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isFrozenFunds\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isLimiter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isSuperAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isTransporter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isVoter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isWhitelistedAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isWhitelister\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeAddressFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeFreezer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeLimiter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeTransporter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeVoter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeWhitelister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceSuperAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_transferLimit\",\"type\":\"uint256\"}],\"name\":\"setTransferLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_y\",\"type\":\"uint256\"}],\"name\":\"splitOrMerge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_where\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFunds\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"unfreezeFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"STBXToken","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}