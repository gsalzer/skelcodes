{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts\\amm-aggregator\\common\\AMMData.sol\r\n\r\n//SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.6;\r\n\r\nstruct LiquidityPoolData {\r\n    address liquidityPoolAddress;\r\n    uint256 amount;\r\n    address tokenAddress;\r\n    bool amountIsLiquidityPool;\r\n    bool involvingETH;\r\n    address receiver;\r\n}\r\n\r\nstruct SwapData {\r\n    bool enterInETH;\r\n    bool exitInETH;\r\n    address[] liquidityPoolAddresses;\r\n    address[] path;\r\n    address inputToken;\r\n    uint256 amount;\r\n    address receiver;\r\n}\r\n\r\n// File: contracts\\amm-aggregator\\common\\IAMM.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\npragma solidity ^0.7.6;\r\npragma abicoder v2;\r\n\r\n\r\ninterface IAMM {\r\n\r\n    event NewLiquidityPoolAddress(address indexed);\r\n\r\n    function info() external view returns(string memory name, uint256 version);\r\n\r\n    function data() external view returns(address ethereumAddress, uint256 maxTokensPerLiquidityPool, bool hasUniqueLiquidityPools);\r\n\r\n    function balanceOf(address liquidityPoolAddress, address owner) external view returns(uint256, uint256[] memory, address[] memory);\r\n\r\n    function byLiquidityPool(address liquidityPoolAddress) external view returns(uint256, uint256[] memory, address[] memory);\r\n\r\n    function byTokens(address[] calldata liquidityPoolTokens) external view returns(uint256, uint256[] memory, address, address[] memory);\r\n\r\n    function byPercentage(address liquidityPoolAddress, uint256 numerator, uint256 denominator) external view returns (uint256, uint256[] memory, address[] memory);\r\n\r\n    function byLiquidityPoolAmount(address liquidityPoolAddress, uint256 liquidityPoolAmount) external view returns(uint256[] memory, address[] memory);\r\n\r\n    function byTokenAmount(address liquidityPoolAddress, address tokenAddress, uint256 tokenAmount) external view returns(uint256, uint256[] memory, address[] memory);\r\n\r\n    function createLiquidityPoolAndAddLiquidity(address[] calldata tokenAddresses, uint256[] calldata amounts, bool involvingETH, address receiver) external payable returns(uint256, uint256[] memory, address, address[] memory);\r\n\r\n    function addLiquidity(LiquidityPoolData calldata data) external payable returns(uint256, uint256[] memory, address[] memory);\r\n    function addLiquidityBatch(LiquidityPoolData[] calldata data) external payable returns(uint256[] memory, uint256[][] memory, address[][] memory);\r\n\r\n    function removeLiquidity(LiquidityPoolData calldata data) external returns(uint256, uint256[] memory, address[] memory);\r\n    function removeLiquidityBatch(LiquidityPoolData[] calldata data) external returns(uint256[] memory, uint256[][] memory, address[][] memory);\r\n\r\n    function getSwapOutput(address tokenAddress, uint256 tokenAmount, address[] calldata, address[] calldata path) view external returns(uint256[] memory);\r\n\r\n    function swapLiquidity(SwapData calldata data) external payable returns(uint256);\r\n    function swapLiquidityBatch(SwapData[] calldata data) external payable returns(uint256[] memory);\r\n}\r\n\r\n// File: contracts\\amm-aggregator\\util\\IERC20.sol\r\n\r\n// SPDX_License_Identifier: MIT\r\npragma solidity ^0.7.6;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns(uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: contracts\\amm-aggregator\\models\\UniswapV2\\1\\IUniswapV2AMMV1.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\npragma solidity ^0.7.6;\r\n//pragma abicoder v2;\r\n\r\n\r\n\r\ninterface IUniswapV2AMMV1 is IAMM {\r\n\r\n    function uniswapData() external view returns(address routerAddress, address wethAddress);\r\n}\r\n\r\ninterface IUniswapV2Router {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Pair is IERC20 {\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function factory() external view returns(address);\r\n}\r\n\r\n// File: contracts\\amm-aggregator\\common\\AMM.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\npragma solidity ^0.7.6;\r\n//pragma abicoder v2;\r\n\r\n\r\n\r\nabstract contract AMM is IAMM {\r\n\r\n    struct ProcessedLiquidityPoolData {\r\n        address liquidityPoolAddress;\r\n        uint256 liquidityPoolAmount;\r\n        address[] liquidityPoolTokens;\r\n        uint256[] tokensAmounts;\r\n        bool involvingETH;\r\n        address liquidityPoolOperator;\r\n        address receiver;\r\n    }\r\n\r\n    struct ProcessedSwapData {\r\n        bool enterInETH;\r\n        bool exitInETH;\r\n        address[] liquidityPoolAddresses;\r\n        address[] path;\r\n        address liquidityPoolOperator;\r\n        address inputToken;\r\n        uint256 amount;\r\n        address receiver;\r\n    }\r\n\r\n    mapping(address => uint256) private _tokenIndex;\r\n    address[] private _tokensToTransfer;\r\n    address[] private _operators;\r\n    uint256[] private _tokenAmounts;\r\n\r\n    string internal _name;\r\n    uint256 internal immutable _version;\r\n    address internal immutable _ethereumAddress;\r\n    uint256 internal immutable _maxTokensPerLiquidityPool;\r\n    bool internal immutable _hasUniqueLiquidityPools;\r\n\r\n    constructor(string memory name, uint256 version, address ethereumAddress, uint256 maxTokensPerLiquidityPool, bool hasUniqueLiquidityPools) {\r\n        _name = name;\r\n        _version = version;\r\n        _ethereumAddress = ethereumAddress;\r\n        _maxTokensPerLiquidityPool = maxTokensPerLiquidityPool;\r\n        _hasUniqueLiquidityPools = hasUniqueLiquidityPools;\r\n    }\r\n\r\n    receive() external virtual payable {\r\n    }\r\n\r\n    function info() view public virtual override returns(string memory, uint256) {\r\n        return (_name, _version);\r\n    }\r\n\r\n    function data() view public virtual override returns(address, uint256, bool) {\r\n        return (_ethereumAddress, _maxTokensPerLiquidityPool, _hasUniqueLiquidityPools);\r\n    }\r\n\r\n    function balanceOf(address liquidityPoolAddress, address owner) view public virtual override returns (uint256 liquidityPoolAmount, uint256[] memory tokensAmounts, address[] memory liquidityPoolTokens) {\r\n        (tokensAmounts, liquidityPoolTokens) = byLiquidityPoolAmount(liquidityPoolAddress, liquidityPoolAmount = IERC20(liquidityPoolAddress).balanceOf(owner));\r\n    }\r\n\r\n    function byPercentage(address liquidityPoolAddress, uint256 numerator, uint256 denominator) view public virtual override returns (uint256 liquidityPoolAmount, uint256[] memory tokensAmounts, address[] memory liquidityPoolTokens) {\r\n        (liquidityPoolAmount, tokensAmounts, liquidityPoolTokens) = this.byLiquidityPool(liquidityPoolAddress);\r\n\r\n        liquidityPoolAmount = calculatePercentage(liquidityPoolAmount, numerator, denominator);\r\n\r\n        for(uint256 i = 0; i < tokensAmounts.length; i++) {\r\n            tokensAmounts[i] = calculatePercentage(tokensAmounts[i], numerator, denominator);\r\n        }\r\n    }\r\n\r\n    function byLiquidityPoolAmount(address liquidityPoolAddress, uint256 liquidityPoolAmount) view public virtual override returns(uint256[] memory tokensAmounts, address[] memory liquidityPoolTokens) {\r\n\r\n        uint256 numerator = liquidityPoolAmount;\r\n        uint256 denominator;\r\n\r\n        (denominator, tokensAmounts, liquidityPoolTokens) = this.byLiquidityPool(liquidityPoolAddress);\r\n\r\n        for(uint256 i = 0; i < tokensAmounts.length; i++) {\r\n            tokensAmounts[i] = calculatePercentage(tokensAmounts[i], numerator, denominator);\r\n        }\r\n    }\r\n\r\n    function byTokenAmount(address liquidityPoolAddress, address tokenAddress, uint256 tokenAmount) view public virtual override returns(uint256 liquidityPoolAmount, uint256[] memory tokensAmounts, address[] memory liquidityPoolTokens) {\r\n\r\n        (liquidityPoolAmount, tokensAmounts, liquidityPoolTokens) = this.byLiquidityPool(liquidityPoolAddress);\r\n\r\n        uint256 numerator = tokenAmount;\r\n        uint256 denominator;\r\n\r\n        for(uint256 i = 0; i < liquidityPoolTokens.length; i++) {\r\n            if(liquidityPoolTokens[i] == tokenAddress) {\r\n                denominator =  tokensAmounts[i];\r\n                break;\r\n            }\r\n        }\r\n\r\n        liquidityPoolAmount = calculatePercentage(liquidityPoolAmount, numerator, denominator);\r\n\r\n        for(uint256 i = 0; i < tokensAmounts.length; i++) {\r\n            tokensAmounts[i] = calculatePercentage(tokensAmounts[i], numerator, denominator);\r\n        }\r\n    }\r\n\r\n    function calculatePercentage(uint256 amount, uint256 numerator, uint256 denominator) internal virtual pure returns(uint256) {\r\n        return (amount * numerator) / denominator;\r\n    }\r\n\r\n    function createLiquidityPoolAndAddLiquidity(address[] memory tokenAddresses, uint256[] memory amounts, bool involvingETH, address receiver) payable public virtual override returns(uint256 liquidityPoolAmount, uint256[] memory tokensAmounts, address liquidityPoolAddress, address[] memory orderedTokens) {\r\n        require(tokenAddresses.length > 1 && tokenAddresses.length == amounts.length && (_maxTokensPerLiquidityPool == 0 || tokenAddresses.length == _maxTokensPerLiquidityPool), \"Invalid length\");\r\n        if(_hasUniqueLiquidityPools) {\r\n            (liquidityPoolAmount, tokensAmounts, liquidityPoolAddress, orderedTokens) = this.byTokens(tokenAddresses);\r\n            if(liquidityPoolAddress != address(0)) {\r\n                (liquidityPoolAmount, tokensAmounts, orderedTokens) = addLiquidity(LiquidityPoolData(\r\n                    liquidityPoolAddress,\r\n                    amounts[0],\r\n                    tokenAddresses[0],\r\n                    false,\r\n                    involvingETH,\r\n                    receiver\r\n                ));\r\n                return (liquidityPoolAmount, tokensAmounts, liquidityPoolAddress, orderedTokens);\r\n            }\r\n        }\r\n        address liquidityPoolCreator = _getLiquidityPoolCreator(tokenAddresses, amounts, involvingETH);\r\n        _transferToMeAndCheckAllowance(tokenAddresses, amounts, liquidityPoolCreator, involvingETH);\r\n        (liquidityPoolAmount, tokensAmounts, liquidityPoolAddress, orderedTokens) = _createLiquidityPoolAndAddLiquidity(tokenAddresses, amounts, involvingETH, liquidityPoolCreator, receiver);\r\n        emit NewLiquidityPoolAddress(liquidityPoolAddress);\r\n    }\r\n\r\n    function addLiquidity(LiquidityPoolData memory data) payable public virtual override returns(uint256 liquidityPoolAmount, uint256[] memory tokensAmounts, address[] memory liquidityPoolTokens) {\r\n        ProcessedLiquidityPoolData memory processedLiquidityPoolData = _processLiquidityPoolData(data);\r\n        _transferToMeAndCheckAllowance(liquidityPoolTokens = processedLiquidityPoolData.liquidityPoolTokens, processedLiquidityPoolData.tokensAmounts, processedLiquidityPoolData.liquidityPoolOperator, data.involvingETH);\r\n        (liquidityPoolAmount, tokensAmounts) = _addLiquidity(processedLiquidityPoolData);\r\n        _flushBack(liquidityPoolTokens);\r\n    }\r\n\r\n    function addLiquidityBatch(LiquidityPoolData[] memory data) payable public virtual override returns(uint256[] memory liquidityPoolAmounts, uint256[][] memory tokensAmounts, address[][] memory liquidityPoolTokens) {\r\n        liquidityPoolAmounts = new uint256[](data.length);\r\n        tokensAmounts = new uint256[][](data.length);\r\n        liquidityPoolTokens = new address[][](data.length);\r\n        ProcessedLiquidityPoolData[] memory processedLiquidityPoolDataArray = new ProcessedLiquidityPoolData[](data.length);\r\n        for(uint256 i = 0; i < data.length; i++) {\r\n            liquidityPoolTokens[i] = (processedLiquidityPoolDataArray[i] = _processLiquidityPoolData(data[i])).liquidityPoolTokens;\r\n            for(uint256 z = 0; z < liquidityPoolTokens[i].length; z++) {\r\n                _collect(liquidityPoolTokens[i][z], processedLiquidityPoolDataArray[i].tokensAmounts[z], processedLiquidityPoolDataArray[i].liquidityPoolOperator, processedLiquidityPoolDataArray[i].involvingETH);\r\n            }\r\n        }\r\n        _transferToMeAndCheckAllowance();\r\n        _collect(_ethereumAddress, 0, address(0), false);\r\n        for(uint256 i = 0; i < processedLiquidityPoolDataArray.length; i++) {\r\n            (liquidityPoolAmounts[i], tokensAmounts[i]) = _addLiquidity(processedLiquidityPoolDataArray[i]);\r\n        }\r\n        _flushBackAndClear();\r\n    }\r\n\r\n    function removeLiquidity(LiquidityPoolData memory data) public virtual override returns(uint256 liquidityPoolAmount, uint256[] memory tokensAmounts, address[] memory liquidityPoolTokens) {\r\n        ProcessedLiquidityPoolData memory processedLiquidityPoolData = _processLiquidityPoolData(data);\r\n        liquidityPoolTokens = processedLiquidityPoolData.liquidityPoolTokens;\r\n        _transferToMeAndCheckAllowance(processedLiquidityPoolData.liquidityPoolAddress, processedLiquidityPoolData.liquidityPoolAmount, processedLiquidityPoolData.liquidityPoolOperator);\r\n        (liquidityPoolAmount, tokensAmounts) = _removeLiquidity(processedLiquidityPoolData);\r\n        _flushBack(processedLiquidityPoolData.liquidityPoolAddress);\r\n    }\r\n\r\n    function removeLiquidityBatch(LiquidityPoolData[] memory data) public virtual override returns(uint256[] memory liquidityPoolAmounts, uint256[][] memory tokensAmounts, address[][] memory liquidityPoolTokens) {\r\n        liquidityPoolAmounts = new uint256[](data.length);\r\n        tokensAmounts = new uint256[][](data.length);\r\n        liquidityPoolTokens = new address[][](data.length);\r\n        ProcessedLiquidityPoolData[] memory processedLiquidityPoolDataArray = new ProcessedLiquidityPoolData[](data.length);\r\n        for(uint256 i = 0; i < data.length; i++) {\r\n            processedLiquidityPoolDataArray[i] = _processLiquidityPoolData(data[i]);\r\n            liquidityPoolTokens[i] = processedLiquidityPoolDataArray[i].liquidityPoolTokens;\r\n            _collect(processedLiquidityPoolDataArray[i].liquidityPoolAddress, processedLiquidityPoolDataArray[i].liquidityPoolAmount, processedLiquidityPoolDataArray[i].liquidityPoolOperator, false);\r\n        }\r\n        _transferToMeAndCheckAllowance();\r\n        for(uint256 i = 0; i < processedLiquidityPoolDataArray.length; i++) {\r\n            (liquidityPoolAmounts[i], tokensAmounts[i]) = _removeLiquidity(processedLiquidityPoolDataArray[i]);\r\n        }\r\n        _flushBackAndClear();\r\n    }\r\n\r\n    function swapLiquidity(SwapData memory data) payable public virtual override returns(uint256 outputAmount) {\r\n        ProcessedSwapData memory processedSwapData = _processSwapData(data);\r\n        _transferToMeAndCheckAllowance(processedSwapData.inputToken == _ethereumAddress && processedSwapData.enterInETH ? address(0) : processedSwapData.inputToken, processedSwapData.amount, processedSwapData.liquidityPoolOperator);\r\n        outputAmount = _swapLiquidity(processedSwapData);\r\n        _flushBack(processedSwapData.enterInETH ? address(0) : processedSwapData.inputToken);\r\n    }\r\n\r\n    function swapLiquidityBatch(SwapData[] memory data) payable public virtual override returns(uint256[] memory outputAmounts) {\r\n        ProcessedSwapData[] memory processedSwapDatas = new ProcessedSwapData[](data.length);\r\n        outputAmounts = new uint256[](data.length);\r\n        for(uint256 i = 0; i < data.length; i++) {\r\n            processedSwapDatas[i] = _processSwapData(data[i]);\r\n            _collect(processedSwapDatas[i].inputToken, processedSwapDatas[i].amount, processedSwapDatas[i].liquidityPoolOperator, processedSwapDatas[i].enterInETH);\r\n        }\r\n        _transferToMeAndCheckAllowance();\r\n        for(uint256 i = 0; i < data.length; i++) {\r\n            outputAmounts[i] = _swapLiquidity(processedSwapDatas[i]);\r\n        }\r\n        _flushBackAndClear();\r\n    }\r\n\r\n    function _getLiquidityPoolOperator(address liquidityPoolAddress, address[] memory liquidityPoolTokens) internal virtual view returns(address);\r\n\r\n    function _addLiquidity(ProcessedLiquidityPoolData memory processedLiquidityPoolData) internal virtual returns(uint256, uint256[] memory);\r\n\r\n    function _removeLiquidity(ProcessedLiquidityPoolData memory processedLiquidityPoolData) internal virtual returns(uint256, uint256[] memory);\r\n\r\n    function _swapLiquidity(ProcessedSwapData memory data) internal virtual returns(uint256 outputAmount);\r\n\r\n    function _getLiquidityPoolCreator(address[] memory tokenAddresses, uint256[] memory amounts, bool involvingETH) internal virtual view returns(address);\r\n\r\n    function _createLiquidityPoolAndAddLiquidity(address[] memory tokenAddresses, uint256[] memory amounts, bool involvingETH, address operator, address receiver) internal virtual returns(uint256 liquidityPoolAmount, uint256[] memory tokensAmounts, address liquidityPoolAddress, address[] memory orderedTokens);\r\n\r\n    function _processLiquidityPoolData(LiquidityPoolData memory data) internal view returns(ProcessedLiquidityPoolData memory) {\r\n        require(data.amount > 0, \"Zero amount\");\r\n        uint256[] memory tokensAmounts;\r\n        address[] memory liquidityPoolTokens;\r\n        uint256 liquidityPoolAmount;\r\n        if(data.amountIsLiquidityPool) {\r\n            (tokensAmounts, liquidityPoolTokens) = byLiquidityPoolAmount(data.liquidityPoolAddress, liquidityPoolAmount = data.amount);\r\n        } else {\r\n            (liquidityPoolAmount, tokensAmounts, liquidityPoolTokens) = byTokenAmount(data.liquidityPoolAddress, data.tokenAddress, data.amount);\r\n        }\r\n        bool involvingETH = data.involvingETH;\r\n        if(_ethereumAddress == address(0)) {\r\n            involvingETH = false;\r\n            for(uint256 i = 0; i < liquidityPoolTokens.length; i++) {\r\n                if(liquidityPoolTokens[i] == address(0)) {\r\n                    involvingETH = true;\r\n                }\r\n            }\r\n        }\r\n        return ProcessedLiquidityPoolData(\r\n            data.liquidityPoolAddress,\r\n            liquidityPoolAmount,\r\n            liquidityPoolTokens,\r\n            tokensAmounts,\r\n            involvingETH,\r\n            _getLiquidityPoolOperator(data.liquidityPoolAddress, liquidityPoolTokens),\r\n            data.receiver == address(0) ? msg.sender : data.receiver\r\n        );\r\n    }\r\n\r\n    function _processSwapData(SwapData memory data) internal view returns(ProcessedSwapData memory) {\r\n        require(data.amount > 0, \"Zero amount\");\r\n        require(data.path.length > 0 && data.liquidityPoolAddresses.length == data.path.length, \"Invalid length\");\r\n        ( , ,address[] memory liquidityPoolTokens) = this.byLiquidityPool(data.liquidityPoolAddresses[0]);\r\n        return ProcessedSwapData(\r\n            data.enterInETH && data.inputToken == _ethereumAddress,\r\n            data.exitInETH && data.path[data.path.length - 1] == _ethereumAddress,\r\n            data.liquidityPoolAddresses,\r\n            data.path,\r\n            _getLiquidityPoolOperator(data.liquidityPoolAddresses[0], liquidityPoolTokens),\r\n            data.inputToken,\r\n            data.amount,\r\n            data.receiver == address(0) ? msg.sender : data.receiver\r\n        );\r\n    }\r\n\r\n    function _collect(address tokenAddress, uint256 tokenAmount, address operator, bool involvingETH) private {\r\n        address realTokenAddress = involvingETH && tokenAddress == _ethereumAddress ? address(0) : tokenAddress;\r\n        uint256 position = _tokenIndex[realTokenAddress];\r\n        if(_tokensToTransfer.length == 0 || _tokensToTransfer[position] != realTokenAddress) {\r\n            _tokenIndex[realTokenAddress] = (position = _tokensToTransfer.length);\r\n            _tokensToTransfer.push(realTokenAddress);\r\n            _operators.push(operator);\r\n            _tokenAmounts.push(0);\r\n        }\r\n        _tokenAmounts[position] = _tokenAmounts[position] + tokenAmount;\r\n    }\r\n\r\n    function _transferToMeAndCheckAllowance(address[] memory tokens, uint256[] memory amounts, address operator, bool involvingETH) internal {\r\n        for(uint256 i = 0; i < tokens.length; i++) {\r\n            _transferToMeAndCheckAllowance(involvingETH && tokens[i] == _ethereumAddress ? address(0) : tokens[i] , amounts[i], operator);\r\n        }\r\n    }\r\n\r\n    function _transferToMeAndCheckAllowance(address tokenAddress, uint256 value, address operator) internal {\r\n        _transferToMe(tokenAddress, value);\r\n        _checkAllowance(tokenAddress, value, operator);\r\n    }\r\n\r\n    function _transferToMeAndCheckAllowance() private {\r\n        for(uint256 i = 0; i < _tokensToTransfer.length; i++) {\r\n            _transferToMeAndCheckAllowance(_tokensToTransfer[i], _tokenAmounts[i], _operators[i]);\r\n        }\r\n    }\r\n\r\n    function _flushBackAndClear() private {\r\n        for(uint256 i = 0; i < _tokensToTransfer.length; i++) {\r\n            delete _tokenIndex[_tokensToTransfer[i]];\r\n            _flushBack(_tokensToTransfer[i]);\r\n        }\r\n        _flushBack(address(0));\r\n        delete _tokensToTransfer;\r\n        delete _operators;\r\n        delete _tokenAmounts;\r\n    }\r\n\r\n    function _transferToMe(address tokenAddress, uint256 value) internal virtual {\r\n        if(tokenAddress == address(0)) {\r\n            require(msg.value == value, \"Incorrect eth value\");\r\n            return;\r\n        }\r\n        _safeTransferFrom(tokenAddress, msg.sender, address(this), value);\r\n    }\r\n\r\n    function _flushBack(address[] memory tokenAddresses) internal {\r\n        for(uint256 i = 0; i < tokenAddresses.length; i++) {\r\n            _flushBack(tokenAddresses[i]);\r\n        }\r\n        _flushBack(address(0));\r\n    }\r\n\r\n    function _flushBack(address tokenAddress) internal {\r\n        uint256 amount = tokenAddress == address(0) ? address(this).balance : IERC20(tokenAddress).balanceOf(address(this));\r\n        if(amount == 0) {\r\n            return;\r\n        }\r\n        if(tokenAddress == address(0)) {\r\n            if(address(this).balance >= amount) {\r\n                payable(msg.sender).transfer(amount);\r\n            }\r\n            return;\r\n        }\r\n        if(IERC20(tokenAddress).balanceOf(address(this)) >= amount) {\r\n            _safeTransfer(tokenAddress, msg.sender, amount);\r\n        }\r\n    }\r\n\r\n    function _checkAllowance(address tokenAddress, uint256 value, address operator) private {\r\n        if(tokenAddress == address(0) || operator == address(0)) {\r\n            return;\r\n        }\r\n        IERC20 token = IERC20(tokenAddress);\r\n        if(token.allowance(address(this), operator) <= value) {\r\n            _safeApprove(tokenAddress, operator, token.totalSupply());\r\n        }\r\n    }\r\n\r\n    function _safeApprove(address erc20TokenAddress, address to, uint256 value) internal {\r\n        bytes memory returnData = _call(erc20TokenAddress, abi.encodeWithSelector(IERC20(erc20TokenAddress).approve.selector, to, value));\r\n        require(returnData.length == 0 || abi.decode(returnData, (bool)), 'APPROVE_FAILED');\r\n    }\r\n\r\n    function _safeTransfer(address erc20TokenAddress, address to, uint256 value) internal {\r\n        bytes memory returnData = _call(erc20TokenAddress, abi.encodeWithSelector(IERC20(erc20TokenAddress).transfer.selector, to, value));\r\n        require(returnData.length == 0 || abi.decode(returnData, (bool)), 'TRANSFER_FAILED');\r\n    }\r\n\r\n    function _safeTransferFrom(address erc20TokenAddress, address from, address to, uint256 value) internal {\r\n        bytes memory returnData = _call(erc20TokenAddress, abi.encodeWithSelector(IERC20(erc20TokenAddress).transferFrom.selector, from, to, value));\r\n        require(returnData.length == 0 || abi.decode(returnData, (bool)), 'TRANSFERFROM_FAILED');\r\n    }\r\n\r\n    function _call(address location, bytes memory payload) private returns(bytes memory returnData) {\r\n        assembly {\r\n            let result := call(gas(), location, 0, add(payload, 0x20), mload(payload), 0, 0)\r\n            let size := returndatasize()\r\n            returnData := mload(0x40)\r\n            mstore(returnData, size)\r\n            let returnDataPayloadStart := add(returnData, 0x20)\r\n            returndatacopy(returnDataPayloadStart, 0, size)\r\n            mstore(0x40, add(returnDataPayloadStart, size))\r\n            switch result case 0 {revert(returnDataPayloadStart, size)}\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts\\amm-aggregator\\models\\UniswapV2\\1\\UniswapV2AMMV1.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\npragma solidity ^0.7.6;\r\n//pragma abicoder v2;\r\n\r\n\r\n\r\ncontract UniswapV2AMMV1 is IUniswapV2AMMV1, AMM {\r\n\r\n    address private _uniswapV2RouterAddress;\r\n\r\n    address private _wethAddress;\r\n\r\n    constructor(address uniswapV2RouterAddress) AMM(\"UniswapV2\", 1, _wethAddress = IUniswapV2Router(_uniswapV2RouterAddress = uniswapV2RouterAddress).WETH(), 2, true) {\r\n    }\r\n\r\n    function factory() private view returns (address) {\r\n        return IUniswapV2Router(_uniswapV2RouterAddress).factory();\r\n    }\r\n\r\n    function uniswapData() public virtual override view returns(address routerAddress, address wethAddress) {\r\n        routerAddress = _uniswapV2RouterAddress;\r\n        wethAddress = _wethAddress;\r\n    }\r\n\r\n    function byLiquidityPool(address liquidityPoolAddress) public override view returns(uint256 liquidityPoolAmount, uint256[] memory tokensAmounts, address[] memory tokenAddresses) {\r\n\r\n        IUniswapV2Pair pair = IUniswapV2Pair(liquidityPoolAddress);\r\n\r\n        address token0 = pair.token0();\r\n        address token1 = pair.token1();\r\n        if(IUniswapV2Factory(factory()).getPair(token0, token1) != liquidityPoolAddress) {\r\n            return(0, new uint256[](0), new address[](0));\r\n        }\r\n\r\n        liquidityPoolAmount = pair.totalSupply();\r\n\r\n        tokensAmounts = new uint256[](2);\r\n        (uint256 amountA, uint256 amountB,) = pair.getReserves();\r\n        tokensAmounts[0] = amountA;\r\n        tokensAmounts[1] = amountB;\r\n\r\n        tokenAddresses = new address[](2);\r\n        tokenAddresses[0] = token0;\r\n        tokenAddresses[1] = token1;\r\n    }\r\n\r\n    function byTokens(address[] memory tokenAddresses) public override view returns(uint256 liquidityPoolAmount, uint256[] memory tokensAmounts, address liquidityPoolAddress, address[] memory orderedTokens) {\r\n\r\n        IUniswapV2Pair pair = IUniswapV2Pair(liquidityPoolAddress = IUniswapV2Factory(factory()).getPair(tokenAddresses[0], tokenAddresses[1]));\r\n\r\n        if(address(pair) == address(0)) {\r\n            return (liquidityPoolAmount, tokensAmounts, liquidityPoolAddress, orderedTokens);\r\n        }\r\n\r\n        liquidityPoolAmount = pair.totalSupply();\r\n\r\n        tokensAmounts = new uint256[](2);\r\n        (uint256 amountA, uint256 amountB,) = pair.getReserves();\r\n        tokensAmounts[0] = amountA;\r\n        tokensAmounts[1] = amountB;\r\n\r\n        orderedTokens = new address[](2);\r\n        orderedTokens[0] = pair.token0();\r\n        orderedTokens[1] = pair.token1();\r\n    }\r\n\r\n    function getSwapOutput(address tokenAddress, uint256 tokenAmount, address[] calldata, address[] calldata path) view public virtual override returns(uint256[] memory) {\r\n        address[] memory realPath = new address[](path.length + 1);\r\n        realPath[0] = tokenAddress;\r\n        for(uint256 i = 0; i < path.length; i++) {\r\n            realPath[i + 1] = path[i];\r\n        }\r\n        return IUniswapV2Router(_uniswapV2RouterAddress).getAmountsOut(tokenAmount, realPath);\r\n    }\r\n\r\n    function _getLiquidityPoolOperator(address, address[] memory) internal override virtual view returns(address) {\r\n        return _uniswapV2RouterAddress;\r\n    }\r\n\r\n    function _getLiquidityPoolCreator(address[] memory, uint256[] memory, bool) internal virtual view override returns(address) {\r\n        return _uniswapV2RouterAddress;\r\n    }\r\n\r\n    function _createLiquidityPoolAndAddLiquidity(address[] memory tokenAddresses, uint256[] memory amounts, bool involvingETH, address, address receiver) internal virtual override returns(uint256 liquidityPoolAmount, uint256[] memory tokensAmounts, address liquidityPoolAddress, address[] memory orderedTokens) {\r\n        tokensAmounts = new uint256[](2);\r\n        orderedTokens = new address[](2);\r\n        if(!involvingETH) {\r\n            (tokensAmounts[0], tokensAmounts[1], liquidityPoolAmount) = IUniswapV2Router(_uniswapV2RouterAddress).addLiquidity(\r\n                tokenAddresses[0],\r\n                tokenAddresses[1],\r\n                amounts[0],\r\n                amounts[1],\r\n                1,\r\n                1,\r\n                receiver,\r\n                block.timestamp + 10000\r\n            );\r\n        } else {\r\n            address token = tokenAddresses[0] != _wethAddress ? tokenAddresses[0] : tokenAddresses[1];\r\n            uint256 amountTokenDesired = tokenAddresses[0] != _wethAddress ? amounts[0] : amounts[1];\r\n            uint256 amountETHDesired = tokenAddresses[0] == _wethAddress ? amounts[0] : amounts[1];\r\n            (tokensAmounts[0], tokensAmounts[1], liquidityPoolAmount) = IUniswapV2Router(_uniswapV2RouterAddress).addLiquidityETH {value : amountETHDesired} (\r\n                token,\r\n                amountTokenDesired,\r\n                1,\r\n                1,\r\n                receiver,\r\n                block.timestamp + 10000\r\n            );\r\n        }\r\n        IUniswapV2Pair pair = IUniswapV2Pair(liquidityPoolAddress = IUniswapV2Factory(factory()).getPair(tokenAddresses[0], tokenAddresses[1]));\r\n        orderedTokens[0] = pair.token0();\r\n        orderedTokens[1] = pair.token1();\r\n    }\r\n\r\n    function _addLiquidity(ProcessedLiquidityPoolData memory processedLiquidityPoolData) internal override virtual returns(uint256 liquidityPoolAmount, uint256[] memory tokensAmounts) {\r\n        tokensAmounts = new uint256[](2);\r\n        if(!processedLiquidityPoolData.involvingETH) {\r\n            (tokensAmounts[0], tokensAmounts[1], liquidityPoolAmount) = IUniswapV2Router(_uniswapV2RouterAddress).addLiquidity(\r\n                processedLiquidityPoolData.liquidityPoolTokens[0],\r\n                processedLiquidityPoolData.liquidityPoolTokens[1],\r\n                processedLiquidityPoolData.tokensAmounts[0],\r\n                processedLiquidityPoolData.tokensAmounts[1],\r\n                1,\r\n                1,\r\n                processedLiquidityPoolData.receiver,\r\n                block.timestamp + 10000\r\n            );\r\n        } else {\r\n            address token = processedLiquidityPoolData.liquidityPoolTokens[0] != _wethAddress ? processedLiquidityPoolData.liquidityPoolTokens[0] : processedLiquidityPoolData.liquidityPoolTokens[1];\r\n            uint256 amountTokenDesired = processedLiquidityPoolData.liquidityPoolTokens[0] != _wethAddress ? processedLiquidityPoolData.tokensAmounts[0] : processedLiquidityPoolData.tokensAmounts[1];\r\n            uint256 amountETHDesired = processedLiquidityPoolData.liquidityPoolTokens[0] == _wethAddress ? processedLiquidityPoolData.tokensAmounts[0] : processedLiquidityPoolData.tokensAmounts[1];\r\n            (tokensAmounts[0], tokensAmounts[1], liquidityPoolAmount) = IUniswapV2Router(_uniswapV2RouterAddress).addLiquidityETH {value : amountETHDesired} (\r\n                token,\r\n                amountTokenDesired,\r\n                1,\r\n                1,\r\n                processedLiquidityPoolData.receiver,\r\n                block.timestamp + 10000\r\n            );\r\n        }\r\n    }\r\n\r\n    function _removeLiquidity(ProcessedLiquidityPoolData memory processedLiquidityPoolData) internal override virtual returns(uint256 liquidityPoolAmount, uint256[] memory tokensAmounts) {\r\n\r\n        liquidityPoolAmount = processedLiquidityPoolData.liquidityPoolAmount;\r\n\r\n        tokensAmounts = new uint256[](2);\r\n        uint256 amount0;\r\n        uint256 amount1;\r\n        if(!processedLiquidityPoolData.involvingETH) {\r\n            (amount0, amount1) = IUniswapV2Router(_uniswapV2RouterAddress).removeLiquidity(processedLiquidityPoolData.liquidityPoolTokens[0], processedLiquidityPoolData.liquidityPoolTokens[1], processedLiquidityPoolData.liquidityPoolAmount, 1, 1, processedLiquidityPoolData.receiver, block.timestamp + 1000);\r\n        } else {\r\n            (amount0, amount1) = IUniswapV2Router(_uniswapV2RouterAddress).removeLiquidityETH(processedLiquidityPoolData.liquidityPoolTokens[0] != _wethAddress ? processedLiquidityPoolData.liquidityPoolTokens[0] : processedLiquidityPoolData.liquidityPoolTokens[1], processedLiquidityPoolData.liquidityPoolAmount, 1, 1, processedLiquidityPoolData.receiver, block.timestamp + 1000);\r\n        }\r\n        tokensAmounts[0] = amount0;\r\n        tokensAmounts[1] = amount1;\r\n    }\r\n\r\n    function _swapLiquidity(ProcessedSwapData memory data) internal override virtual returns(uint256 outputAmount) {\r\n        address[] memory path = new address[](data.path.length + 1);\r\n        path[0] = data.enterInETH ? _wethAddress : data.inputToken;\r\n        for(uint256 i = 0; i < data.path.length; i++) {\r\n            path[i + 1] = data.path[i];\r\n        }\r\n        if(data.exitInETH) {\r\n            path[path.length - 1] = _wethAddress;\r\n        }\r\n        if(!data.enterInETH && !data.exitInETH) {\r\n            return IUniswapV2Router(_uniswapV2RouterAddress).swapExactTokensForTokens(data.amount, 1, path, data.receiver, block.timestamp + 1000)[path.length - 1];\r\n        }\r\n        if(data.enterInETH) {\r\n            return IUniswapV2Router(_uniswapV2RouterAddress).swapExactETHForTokens{value : data.amount}(1, path, data.receiver, block.timestamp + 1000)[path.length - 1];\r\n        }\r\n        if(data.exitInETH) {\r\n            return IUniswapV2Router(_uniswapV2RouterAddress).swapExactTokensForETH(data.amount, 1, path, data.receiver, block.timestamp + 1000)[path.length - 1];\r\n        }\r\n        return 0;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uniswapV2RouterAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"NewLiquidityPoolAddress\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"liquidityPoolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"amountIsLiquidityPool\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"involvingETH\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"internalType\":\"struct LiquidityPoolData\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityPoolAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"tokensAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"liquidityPoolTokens\",\"type\":\"address[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"liquidityPoolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"amountIsLiquidityPool\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"involvingETH\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"internalType\":\"struct LiquidityPoolData[]\",\"name\":\"data\",\"type\":\"tuple[]\"}],\"name\":\"addLiquidityBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"liquidityPoolAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"tokensAmounts\",\"type\":\"uint256[][]\"},{\"internalType\":\"address[][]\",\"name\":\"liquidityPoolTokens\",\"type\":\"address[][]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityPoolAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"tokensAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"liquidityPoolTokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityPoolAddress\",\"type\":\"address\"}],\"name\":\"byLiquidityPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityPoolAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"tokensAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"tokenAddresses\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityPoolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityPoolAmount\",\"type\":\"uint256\"}],\"name\":\"byLiquidityPoolAmount\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokensAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"liquidityPoolTokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityPoolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"byPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityPoolAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"tokensAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"liquidityPoolTokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"byTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityPoolAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"tokensAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"liquidityPoolTokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenAddresses\",\"type\":\"address[]\"}],\"name\":\"byTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityPoolAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"tokensAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"liquidityPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"orderedTokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"involvingETH\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"createLiquidityPoolAndAddLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityPoolAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"tokensAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"liquidityPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"orderedTokens\",\"type\":\"address[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"data\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getSwapOutput\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"info\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"liquidityPoolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"amountIsLiquidityPool\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"involvingETH\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"internalType\":\"struct LiquidityPoolData\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityPoolAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"tokensAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"liquidityPoolTokens\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"liquidityPoolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"amountIsLiquidityPool\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"involvingETH\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"internalType\":\"struct LiquidityPoolData[]\",\"name\":\"data\",\"type\":\"tuple[]\"}],\"name\":\"removeLiquidityBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"liquidityPoolAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"tokensAmounts\",\"type\":\"uint256[][]\"},{\"internalType\":\"address[][]\",\"name\":\"liquidityPoolTokens\",\"type\":\"address[][]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"enterInETH\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exitInETH\",\"type\":\"bool\"},{\"internalType\":\"address[]\",\"name\":\"liquidityPoolAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"internalType\":\"struct SwapData\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"swapLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"enterInETH\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exitInETH\",\"type\":\"bool\"},{\"internalType\":\"address[]\",\"name\":\"liquidityPoolAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"internalType\":\"struct SwapData[]\",\"name\":\"data\",\"type\":\"tuple[]\"}],\"name\":\"swapLiquidityBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"outputAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"routerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wethAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"UniswapV2AMMV1","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://5d7c30b4c2a28c8f2a9030e89ce52ba6149e2a070f63349af92dcd45781cc637"}]}