{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract LnAdmin {\r\n    address public admin;\r\n    address public candidate;\r\n\r\n    constructor(address _admin) public {\r\n        require(_admin != address(0), \"admin address cannot be 0\");\r\n        admin = _admin;\r\n        emit AdminChanged(address(0), _admin);\r\n    }\r\n\r\n    function setCandidate(address _candidate) external onlyAdmin {\r\n        address old = candidate;\r\n        candidate = _candidate;\r\n        emit candidateChanged( old, candidate);\r\n    }\r\n\r\n    function becomeAdmin( ) external {\r\n        require( msg.sender == candidate, \"Only candidate can become admin\");\r\n        address old = admin;\r\n        admin = candidate;\r\n        emit AdminChanged( old, admin ); \r\n    }\r\n\r\n    modifier onlyAdmin {\r\n        require( (msg.sender == admin), \"Only the contract admin can perform this action\");\r\n        _;\r\n    }\r\n\r\n    event candidateChanged(address oldCandidate, address newCandidate );\r\n    event AdminChanged(address oldAdmin, address newAdmin);\r\n}\r\n\r\n\r\n\r\n\r\ninterface IERC20 {\r\n    \r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function balanceOf(address owner) external view returns (uint);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function transfer(address to, uint value) external returns (bool);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint value\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nlibrary SafeDecimalMath {\r\n    using SafeMath for uint;\r\n\r\n    uint8 public constant decimals = 18;\r\n    uint8 public constant highPrecisionDecimals = 27;\r\n\r\n    uint public constant UNIT = 10**uint(decimals);\r\n\r\n    uint public constant PRECISE_UNIT = 10**uint(highPrecisionDecimals);\r\n    uint private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR = 10**uint(highPrecisionDecimals - decimals);\r\n\r\n    function unit() external pure returns (uint) {\r\n        return UNIT;\r\n    }\r\n\r\n    function preciseUnit() external pure returns (uint) {\r\n        return PRECISE_UNIT;\r\n    }\r\n\r\n    function multiplyDecimal(uint x, uint y) internal pure returns (uint) {\r\n        \r\n        return x.mul(y) / UNIT;\r\n    }\r\n\r\n    function _multiplyDecimalRound(\r\n        uint x,\r\n        uint y,\r\n        uint precisionUnit\r\n    ) private pure returns (uint) {\r\n        \r\n        uint quotientTimesTen = x.mul(y) / (precisionUnit / 10);\r\n\r\n        if (quotientTimesTen % 10 >= 5) {\r\n            quotientTimesTen += 10;\r\n        }\r\n\r\n        return quotientTimesTen / 10;\r\n    }\r\n\r\n    function multiplyDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\r\n        return _multiplyDecimalRound(x, y, PRECISE_UNIT);\r\n    }\r\n\r\n    function multiplyDecimalRound(uint x, uint y) internal pure returns (uint) {\r\n        return _multiplyDecimalRound(x, y, UNIT);\r\n    }\r\n\r\n    function divideDecimal(uint x, uint y) internal pure returns (uint) {\r\n        \r\n        return x.mul(UNIT).div(y);\r\n    }\r\n\r\n    function _divideDecimalRound(\r\n        uint x,\r\n        uint y,\r\n        uint precisionUnit\r\n    ) private pure returns (uint) {\r\n        uint resultTimesTen = x.mul(precisionUnit * 10).div(y);\r\n\r\n        if (resultTimesTen % 10 >= 5) {\r\n            resultTimesTen += 10;\r\n        }\r\n\r\n        return resultTimesTen / 10;\r\n    }\r\n\r\n    function divideDecimalRound(uint x, uint y) internal pure returns (uint) {\r\n        return _divideDecimalRound(x, y, UNIT);\r\n    }\r\n\r\n    function divideDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\r\n        return _divideDecimalRound(x, y, PRECISE_UNIT);\r\n    }\r\n\r\n    function decimalToPreciseDecimal(uint i) internal pure returns (uint) {\r\n        return i.mul(UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR);\r\n    }\r\n\r\n    function preciseDecimalToDecimal(uint i) internal pure returns (uint) {\r\n        uint quotientTimesTen = i / (UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR / 10);\r\n\r\n        if (quotientTimesTen % 10 >= 5) {\r\n            quotientTimesTen += 10;\r\n        }\r\n\r\n        return quotientTimesTen / 10;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nabstract contract LnOperatorModifier is LnAdmin {\r\n    \r\n    address public operator;\r\n\r\n    constructor(address _operator) internal {\r\n        require(admin != address(0), \"admin must be set\");\r\n\r\n        operator = _operator;\r\n        emit OperatorUpdated(_operator);\r\n    }\r\n\r\n    function setOperator(address _opperator) external onlyAdmin {\r\n        operator = _opperator;\r\n        emit OperatorUpdated(_opperator);\r\n    }\r\n\r\n    modifier onlyOperator() {\r\n        require(msg.sender == operator, \"Only operator can perform this action\");\r\n        _;\r\n    }\r\n\r\n    event OperatorUpdated(address operator);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\ncontract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor () internal {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\r\n * (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            // Move the last value to the index where the value to delete is\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n        return set._values[index];\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint256(_at(set._inner, index)));\r\n    }\r\n\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module that allows children to implement role-based access\r\n * control mechanisms.\r\n *\r\n * Roles are referred to by their `bytes32` identifier. These should be exposed\r\n * in the external API and be unique. The best way to achieve this is by\r\n * using `public constant` hash digests:\r\n *\r\n * ```\r\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\r\n * ```\r\n *\r\n * Roles can be used to represent a set of permissions. To restrict access to a\r\n * function call, use {hasRole}:\r\n *\r\n * ```\r\n * function foo() public {\r\n *     require(hasRole(MY_ROLE, msg.sender));\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Roles can be granted and revoked dynamically via the {grantRole} and\r\n * {revokeRole} functions. Each role has an associated admin role, and only\r\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\r\n *\r\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\r\n * that only accounts with this role will be able to grant or revoke other\r\n * roles. More complex role relationships can be created by using\r\n * {_setRoleAdmin}.\r\n *\r\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\r\n * grant and revoke this role. Extra precautions should be taken to secure\r\n * accounts that have been granted it.\r\n */\r\nabstract contract AccessControl is Context {\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n    using Address for address;\r\n\r\n    struct RoleData {\r\n        EnumerableSet.AddressSet members;\r\n        bytes32 adminRole;\r\n    }\r\n\r\n    mapping (bytes32 => RoleData) private _roles;\r\n\r\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\r\n\r\n    /**\r\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\r\n     *\r\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\r\n     * {RoleAdminChanged} not being emitted signaling this.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is granted `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call, an admin role\r\n     * bearer except when using {_setupRole}.\r\n     */\r\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is revoked `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call:\r\n     *   - if using `revokeRole`, it is the admin role bearer\r\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\r\n     */\r\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) public view returns (bool) {\r\n        return _roles[role].members.contains(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of accounts that have `role`. Can be used\r\n     * together with {getRoleMember} to enumerate all bearers of a role.\r\n     */\r\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\r\n        return _roles[role].members.length();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns one of the accounts that have `role`. `index` must be a\r\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\r\n     *\r\n     * Role bearers are not sorted in any particular way, and their ordering may\r\n     * change at any point.\r\n     *\r\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\r\n     * you perform all queries on the same block. See the following\r\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\r\n     * for more information.\r\n     */\r\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\r\n        return _roles[role].members.at(index);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\r\n        return _roles[role].adminRole;\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) public virtual {\r\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to grant\");\r\n\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) public virtual {\r\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to revoke\");\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) public virtual {\r\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event. Note that unlike {grantRole}, this function doesn't perform any\r\n     * checks on the calling account.\r\n     *\r\n     * [WARNING]\r\n     * ====\r\n     * This function should only be called from the constructor when setting\r\n     * up the initial roles for the system.\r\n     *\r\n     * Using this function in any other way is effectively circumventing the admin\r\n     * system imposed by {AccessControl}.\r\n     * ====\r\n     */\r\n    function _setupRole(bytes32 role, address account) internal virtual {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `adminRole` as ``role``'s admin role.\r\n     *\r\n     * Emits a {RoleAdminChanged} event.\r\n     */\r\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\r\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\r\n        _roles[role].adminRole = adminRole;\r\n    }\r\n\r\n    function _grantRole(bytes32 role, address account) private {\r\n        if (_roles[role].members.add(account)) {\r\n            emit RoleGranted(role, account, _msgSender());\r\n        }\r\n    }\r\n\r\n    function _revokeRole(bytes32 role, address account) private {\r\n        if (_roles[role].members.remove(account)) {\r\n            emit RoleRevoked(role, account, _msgSender());\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n// example:\r\n//LnAccessControl accessCtrl = LnAccessControl(addressStorage.getAddress(\"LnAccessControl\"));\r\n//require(accessCtrl.hasRole(accessCtrl.DEBT_SYSTEM(), _address), \"Need debt system access role\");\r\n\r\n// contract access control\r\ncontract LnAccessControl is AccessControl {\r\n    using Address for address;\r\n\r\n    // -------------------------------------------------------\r\n    // role type\r\n    bytes32 public constant ISSUE_ASSET_ROLE = (\"ISSUE_ASSET\"); //keccak256\r\n    bytes32 public constant BURN_ASSET_ROLE = (\"BURN_ASSET\");\r\n\r\n    bytes32 public constant DEBT_SYSTEM = (\"LnDebtSystem\");\r\n    // -------------------------------------------------------\r\n    constructor(address admin) public {\r\n        _setupRole(DEFAULT_ADMIN_ROLE, admin);\r\n    }\r\n\r\n    function IsAdmin(address _address) public view returns (bool) {\r\n        return hasRole(DEFAULT_ADMIN_ROLE, _address);\r\n    }\r\n\r\n    function SetAdmin(address _address) public returns (bool) {\r\n        require(IsAdmin(msg.sender), \"Only admin\");\r\n\r\n        _setupRole(DEFAULT_ADMIN_ROLE, _address);\r\n    }\r\n\r\n    // -------------------------------------------------------\r\n    // this func need admin role. grantRole and revokeRole need admin role\r\n    function SetRoles(bytes32 roleType, address[] calldata addresses, bool[] calldata setTo) external {\r\n        require(IsAdmin(msg.sender), \"Only admin\");\r\n\r\n        _setRoles(roleType, addresses, setTo);\r\n    }\r\n\r\n    function _setRoles(bytes32 roleType, address[] calldata addresses, bool[] calldata setTo) private {\r\n        require(addresses.length == setTo.length, \"parameter address length not eq\");\r\n\r\n        for (uint256 i=0; i < addresses.length; i++) {\r\n            //require(addresses[i].isContract(), \"Role address need contract only\");\r\n            if (setTo[i]) {\r\n                grantRole(roleType, addresses[i]);\r\n            } else {\r\n                revokeRole(roleType, addresses[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    // function SetRoles(bytes32 roleType, address[] calldata addresses, bool[] calldata setTo) public {\r\n    //     _setRoles(roleType, addresses, setTo);\r\n    // }\r\n\r\n    // Issue burn\r\n    function SetIssueAssetRole(address[] calldata issuer, bool[] calldata setTo) public {\r\n        _setRoles(ISSUE_ASSET_ROLE, issuer, setTo);\r\n    }\r\n\r\n    function SetBurnAssetRole(address[] calldata burner, bool[] calldata setTo) public {\r\n        _setRoles(BURN_ASSET_ROLE, burner, setTo);\r\n    }\r\n    \r\n    //\r\n    function SetDebtSystemRole(address[] calldata _address, bool[] calldata _setTo) public {\r\n        _setRoles(DEBT_SYSTEM, _address, _setTo);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface ILinearStaking {\r\n    function staking(uint256 amount) external returns (bool);\r\n    function cancelStaking(uint256 amount) external returns (bool);\r\n    function claim() external returns (bool);\r\n    function stakingBalanceOf(address account) external view returns(uint256);\r\n}\r\n\r\ncontract LnLinearStakingStorage is LnAdmin {\r\n    using SafeMath for uint256;\r\n\r\n    LnAccessControl public accessCtrl;\r\n\r\n    bytes32 public constant DATA_ACCESS_ROLE = \"LinearStakingStorage\";\r\n\r\n    struct StakingData {\r\n        uint256 amount;\r\n        uint256 staketime;\r\n    }\r\n\r\n    mapping (address => StakingData[]) public stakesdata;\r\n    mapping (uint256 => uint256) public weeksTotal; // week staking amount\r\n\r\n    uint256 public stakingStartTime = 1600329600; // TODO: UTC or UTC+8\r\n    uint256 public stakingEndTime = 1605168000;\r\n    uint256 public totalWeekNumber = 8;\r\n    uint256 public weekRewardAmount = 18750000e18;\r\n\r\n    constructor(address _admin, address _accessCtrl) public LnAdmin(_admin) {\r\n        accessCtrl = LnAccessControl(_accessCtrl);\r\n    }\r\n\r\n    modifier OnlyLinearStakingStorageRole(address _address) {\r\n        require(accessCtrl.hasRole(DATA_ACCESS_ROLE, _address), \"Only Linear Staking Storage Role\");\r\n        _;\r\n    }\r\n\r\n    function setAccessControl(address _accessCtrl) external onlyAdmin {\r\n        accessCtrl = LnAccessControl(_accessCtrl);\r\n    }\r\n\r\n    function weekTotalStaking() public view returns (uint256[] memory) {\r\n        uint256[] memory totals = new uint256[](totalWeekNumber);\r\n        for (uint256 i=0; i< totalWeekNumber; i++) {\r\n            uint256 delta = weeksTotal[i];\r\n            if (i == 0) {\r\n                totals[i] = delta;\r\n            } else {\r\n                \r\n                totals[i] = totals[i-1].add(delta);\r\n            }\r\n        }\r\n        return totals;\r\n    }\r\n\r\n    function getStakesdataLength(address account) external view returns(uint256) {\r\n        return stakesdata[account].length;\r\n    }\r\n\r\n    function getStakesDataByIndex(address account, uint256 index) external view returns(uint256, uint256) {\r\n        return (stakesdata[account][index].amount, stakesdata[account][index].staketime);\r\n    }\r\n\r\n    function stakingBalanceOf(address account) external view returns(uint256) {\r\n        uint256 total = 0;\r\n        StakingData[] memory stakes = stakesdata[account];\r\n        for (uint256 i=0; i < stakes.length; i++) {\r\n            total = total.add(stakes[i].amount);\r\n        }\r\n        return total;\r\n    }\r\n\r\n    function requireInStakingPeriod() external view {\r\n        require(stakingStartTime < block.timestamp, \"Staking not start\");\r\n        require(block.timestamp < stakingEndTime, \"Staking stage has end.\");\r\n    }\r\n\r\n    function requireStakingEnd() external view {\r\n        require(block.timestamp > stakingEndTime, \"Need wait to staking end\");\r\n    }\r\n\r\n    function PushStakingData(address account, uint256 amount, uint256 staketime) external OnlyLinearStakingStorageRole(msg.sender) {\r\n        LnLinearStakingStorage.StakingData memory data = LnLinearStakingStorage.StakingData({\r\n            amount: amount,\r\n            staketime: staketime\r\n        });\r\n        stakesdata[account].push(data);\r\n    }\r\n\r\n    function StakingDataAdd(address account, uint256 index, uint256 amount) external OnlyLinearStakingStorageRole(msg.sender) {\r\n        stakesdata[account][index].amount = stakesdata[account][index].amount.add(amount);\r\n    }\r\n\r\n    function StakingDataSub(address account, uint256 index, uint256 amount) external OnlyLinearStakingStorageRole(msg.sender) {\r\n        stakesdata[account][index].amount = stakesdata[account][index].amount.sub(amount, \"StakingDataSub sub overflow\");\r\n    }\r\n\r\n    function DeleteStakesData(address account) external OnlyLinearStakingStorageRole(msg.sender) {\r\n        delete stakesdata[account];\r\n    }\r\n\r\n    function PopStakesData(address account) external OnlyLinearStakingStorageRole(msg.sender) {\r\n        stakesdata[account].pop();\r\n    }\r\n\r\n    function AddWeeksTotal(uint256 staketime, uint256 amount) external OnlyLinearStakingStorageRole(msg.sender) {\r\n        uint256 weekNumber = staketime.sub(stakingStartTime, \"AddWeeksTotal sub overflow\") / 1 weeks;\r\n        weeksTotal[weekNumber] = weeksTotal[weekNumber].add(amount);\r\n    }\r\n\r\n    function SubWeeksTotal(uint256 staketime, uint256 amount) external OnlyLinearStakingStorageRole(msg.sender) {\r\n        uint256 weekNumber = staketime.sub(stakingStartTime, \"SubWeeksTotal weekNumber sub overflow\") / 1 weeks;\r\n        weeksTotal[weekNumber] = weeksTotal[weekNumber].sub(amount, \"SubWeeksTotal weeksTotal sub overflow\");\r\n    }\r\n\r\n    function setWeekRewardAmount(uint256 _weekRewardAmount) external onlyAdmin {\r\n        weekRewardAmount = _weekRewardAmount;\r\n    }\r\n\r\n    function setStakingPeriod(uint _stakingStartTime, uint _stakingEndTime) external onlyAdmin {\r\n        require(_stakingEndTime > _stakingStartTime);\r\n\r\n        stakingStartTime = _stakingStartTime;\r\n        stakingEndTime = _stakingEndTime;\r\n\r\n        totalWeekNumber = stakingEndTime.sub(stakingStartTime, \"setStakingPeriod totalWeekNumber sub overflow\") / 1 weeks;\r\n        if (stakingEndTime.sub(stakingStartTime, \"setStakingPeriod stakingEndTime sub overflow\") % 1 weeks != 0) {\r\n            totalWeekNumber = totalWeekNumber.add(1);\r\n        }\r\n    }\r\n}\r\n\r\ncontract LnLinearStaking is LnAdmin, Pausable, ILinearStaking {\r\n    using SafeMath for uint256;\r\n\r\n    IERC20 public linaToken; // lina token proxy address\r\n    LnLinearStakingStorage public stakingStorage;\r\n    \r\n    constructor(\r\n        address _admin,\r\n        address _linaToken,\r\n        address _storage\r\n    ) public LnAdmin(_admin) {\r\n        linaToken = IERC20(_linaToken);\r\n        stakingStorage = LnLinearStakingStorage(_storage);\r\n    }\r\n\r\n    function setLinaToken(address _linaToken) external onlyAdmin {\r\n        linaToken = IERC20(_linaToken);\r\n    }\r\n\r\n    function setPaused(bool _paused) external onlyAdmin {\r\n        if (_paused) {\r\n            _pause();\r\n        } else {\r\n            _unpause();\r\n        }\r\n    }\r\n\r\n    //////////////////////////////////////////////////////\r\n    event Staking(address indexed who, uint256 value, uint staketime);\r\n    event CancelStaking(address indexed who, uint256 value);\r\n    event Claim(address indexed who, uint256 rewardval, uint256 totalStaking);\r\n\r\n    uint256 public accountStakingListLimit = 50;\r\n    uint256 public minStakingAmount = 1e18; // 1 token\r\n    uint256 public constant PRECISION_UINT = 1e23;\r\n\r\n    function setLinaTokenAddress(address _token) external onlyAdmin {\r\n        linaToken = IERC20(_token);\r\n    }\r\n\r\n    function setStakingListLimit(uint256 _limit) external onlyAdmin {\r\n        accountStakingListLimit = _limit;\r\n    }\r\n\r\n    function setMinStakingAmount(uint256 _minStakingAmount) external onlyAdmin {\r\n        minStakingAmount = _minStakingAmount;\r\n    }\r\n\r\n    function stakingBalanceOf(address account) external override view returns(uint256) {\r\n        return stakingStorage.stakingBalanceOf(account);\r\n    }\r\n\r\n    function getStakesdataLength(address account) external view returns(uint256) {\r\n        return stakingStorage.getStakesdataLength(account);\r\n    }\r\n    //--------------------------------------------------------\r\n\r\n    function staking(uint256 amount) public whenNotPaused override returns (bool) {\r\n        stakingStorage.requireInStakingPeriod();\r\n\r\n        require(amount >= minStakingAmount, \"Staking amount too small.\");\r\n        require(stakingStorage.getStakesdataLength(msg.sender) < accountStakingListLimit, \"Staking list out of limit.\");\r\n\r\n        //linaToken.burn(msg.sender, amount);\r\n        linaToken.transferFrom(msg.sender, address(this), amount);\r\n     \r\n        stakingStorage.PushStakingData(msg.sender, amount, block.timestamp);\r\n        stakingStorage.AddWeeksTotal(block.timestamp, amount);\r\n\r\n        emit Staking(msg.sender, amount, block.timestamp);\r\n        return true;\r\n    }\r\n\r\n    function cancelStaking(uint256 amount) public whenNotPaused override returns (bool) {\r\n        stakingStorage.requireInStakingPeriod();\r\n\r\n        require(amount > 0, \"Invalid amount.\");\r\n\r\n        uint256 returnToken = amount;\r\n        for (uint256 i = stakingStorage.getStakesdataLength(msg.sender); i >= 1 ; i--) {\r\n            (uint256 stakingAmount, uint256 staketime) = stakingStorage.getStakesDataByIndex(msg.sender, i-1);\r\n            if (amount >= stakingAmount) {\r\n                amount = amount.sub(stakingAmount, \"cancelStaking sub overflow\");\r\n                \r\n                stakingStorage.PopStakesData(msg.sender);\r\n                stakingStorage.SubWeeksTotal(staketime, stakingAmount);\r\n            } else {\r\n                stakingStorage.StakingDataSub(msg.sender, i-1, amount);\r\n                stakingStorage.SubWeeksTotal(staketime, amount);\r\n\r\n                amount = 0;\r\n            }\r\n            if (amount == 0) break;\r\n        }\r\n        require(amount == 0, \"Cancel amount too big then staked.\");\r\n\r\n        //linaToken.mint(msg.sender, returnToken);\r\n        linaToken.transfer(msg.sender, returnToken);\r\n\r\n        emit CancelStaking(msg.sender, returnToken);\r\n\r\n        return true;\r\n    }\r\n\r\n    // claim reward\r\n    // Note: 需要提前提前把奖励token转进来\r\n    function claim() public whenNotPaused override returns (bool) {\r\n        stakingStorage.requireStakingEnd();\r\n\r\n        require(stakingStorage.getStakesdataLength(msg.sender) > 0, \"Nothing to claim\");\r\n\r\n        uint256 totalWeekNumber = stakingStorage.totalWeekNumber();\r\n\r\n        uint256 totalStaking = 0;\r\n        uint256 totalReward = 0;\r\n\r\n        uint256[] memory finalTotals = stakingStorage.weekTotalStaking();\r\n        for (uint256 i=0; i < stakingStorage.getStakesdataLength(msg.sender); i++) {\r\n            (uint256 stakingAmount, uint256 staketime) = stakingStorage.getStakesDataByIndex(msg.sender, i);\r\n            uint256 stakedWeedNumber = staketime.sub(stakingStorage.stakingStartTime(), \"claim sub overflow\") / 1 weeks;\r\n\r\n            totalStaking = totalStaking.add(stakingAmount);\r\n            \r\n            uint256 reward = 0;\r\n            for (uint256 j=stakedWeedNumber; j < totalWeekNumber; j++) {\r\n                reward = reward.add( stakingAmount.mul(PRECISION_UINT).div(finalTotals[j]) ); //move .mul(weekRewardAmount) to next line.\r\n            }\r\n            reward = reward.mul(stakingStorage.weekRewardAmount()).div(PRECISION_UINT);\r\n\r\n            totalReward = totalReward.add( reward );\r\n        }\r\n\r\n        stakingStorage.DeleteStakesData(msg.sender);\r\n        \r\n        //linaToken.mint(msg.sender, totalStaking.add(totalReward) );\r\n        linaToken.transfer(msg.sender, totalStaking.add(totalReward) );\r\n\r\n        emit Claim(msg.sender, totalReward, totalStaking);\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\ncontract LnRewardCalculator {\r\n    using SafeMath for uint256;\r\n\r\n    struct UserInfo {\r\n        uint256 reward;\r\n        uint256 amount;\r\n        uint256 rewardDebt;\r\n    }\r\n\r\n    struct PoolInfo {\r\n        uint256 amount;\r\n        uint256 lastRewardBlock;\r\n        uint256 accRewardPerShare;\r\n    }\r\n\r\n    uint256 public rewardPerBlock;\r\n\r\n    PoolInfo public mPoolInfo;\r\n    mapping(address => UserInfo) public userInfo;\r\n\r\n    uint256 public startBlock;\r\n    uint256 public remainReward;\r\n    uint256 public accReward;\r\n\r\n    constructor(uint256 _rewardPerBlock, uint256 _startBlock) public {\r\n        rewardPerBlock = _rewardPerBlock;\r\n        startBlock = _startBlock;\r\n        mPoolInfo.lastRewardBlock = startBlock;\r\n    }\r\n\r\n    function _calcReward(uint256 curBlock, address _user)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        PoolInfo storage pool = mPoolInfo;\r\n        UserInfo storage user = userInfo[_user];\r\n        uint256 accRewardPerShare = pool.accRewardPerShare;\r\n        uint256 lpSupply = pool.amount;\r\n        if (curBlock > pool.lastRewardBlock && lpSupply != 0) {\r\n            uint256 multiplier = curBlock.sub(\r\n                pool.lastRewardBlock,\r\n                \"cr curBlock sub overflow\"\r\n            );\r\n            uint256 curReward = multiplier.mul(rewardPerBlock);\r\n            accRewardPerShare = accRewardPerShare.add(\r\n                curReward.mul(1e20).div(lpSupply)\r\n            );\r\n        }\r\n        uint256 newReward = user.amount.mul(accRewardPerShare).div(1e20).sub(\r\n            user.rewardDebt,\r\n            \"cr newReward sub overflow\"\r\n        );\r\n        return newReward.add(user.reward);\r\n    }\r\n\r\n    function rewardOf(address _user) public view returns (uint256) {\r\n        return userInfo[_user].reward;\r\n    }\r\n\r\n    function amount() public view returns (uint256) {\r\n        return mPoolInfo.amount;\r\n    }\r\n\r\n    function amountOf(address _user) public view returns (uint256) {\r\n        return userInfo[_user].amount;\r\n    }\r\n\r\n    function getUserInfo(address _user)\r\n        public\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        return (\r\n            userInfo[_user].reward,\r\n            userInfo[_user].amount,\r\n            userInfo[_user].rewardDebt\r\n        );\r\n    }\r\n\r\n    function getPoolInfo()\r\n        public\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        return (\r\n            mPoolInfo.amount,\r\n            mPoolInfo.lastRewardBlock,\r\n            mPoolInfo.accRewardPerShare\r\n        );\r\n    }\r\n\r\n    function _update(uint256 curBlock) internal {\r\n        PoolInfo storage pool = mPoolInfo;\r\n        if (curBlock <= pool.lastRewardBlock) {\r\n            return;\r\n        }\r\n        uint256 lpSupply = pool.amount;\r\n        if (lpSupply == 0) {\r\n            pool.lastRewardBlock = curBlock;\r\n            return;\r\n        }\r\n        uint256 multiplier = curBlock.sub(\r\n            pool.lastRewardBlock,\r\n            \"_update curBlock sub overflow\"\r\n        );\r\n        uint256 curReward = multiplier.mul(rewardPerBlock);\r\n\r\n        remainReward = remainReward.add(curReward);\r\n        accReward = accReward.add(curReward);\r\n\r\n        pool.accRewardPerShare = pool.accRewardPerShare.add(\r\n            curReward.mul(1e20).div(lpSupply)\r\n        );\r\n        pool.lastRewardBlock = curBlock;\r\n    }\r\n\r\n    function _deposit(\r\n        uint256 curBlock,\r\n        address _addr,\r\n        uint256 _amount\r\n    ) internal {\r\n        PoolInfo storage pool = mPoolInfo;\r\n        UserInfo storage user = userInfo[_addr];\r\n        _update(curBlock);\r\n        if (user.amount > 0) {\r\n            uint256 pending = user\r\n                .amount\r\n                .mul(pool.accRewardPerShare)\r\n                .div(1e20)\r\n                .sub(user.rewardDebt, \"_deposit pending sub overflow\");\r\n            if (pending > 0) {\r\n                reward(user, pending);\r\n            }\r\n        }\r\n        if (_amount > 0) {\r\n            user.amount = user.amount.add(_amount);\r\n            pool.amount = pool.amount.add(_amount);\r\n        }\r\n        user.rewardDebt = user.amount.mul(pool.accRewardPerShare).div(1e20);\r\n    }\r\n\r\n    function _withdraw(\r\n        uint256 curBlock,\r\n        address _addr,\r\n        uint256 _amount\r\n    ) internal {\r\n        PoolInfo storage pool = mPoolInfo;\r\n        UserInfo storage user = userInfo[_addr];\r\n        require(user.amount >= _amount, \"_withdraw: not good\");\r\n        _update(curBlock);\r\n        uint256 pending = user.amount.mul(pool.accRewardPerShare).div(1e20).sub(\r\n            user.rewardDebt,\r\n            \"_withdraw pending sub overflow\"\r\n        );\r\n        if (pending > 0) {\r\n            reward(user, pending);\r\n        }\r\n        if (_amount > 0) {\r\n            user.amount = user.amount.sub(\r\n                _amount,\r\n                \"_withdraw user.amount sub overflow\"\r\n            );\r\n            pool.amount = pool.amount.sub(\r\n                _amount,\r\n                \"_withdraw pool.amount sub overflow\"\r\n            );\r\n        }\r\n        user.rewardDebt = user.amount.mul(pool.accRewardPerShare).div(1e20);\r\n    }\r\n\r\n    function reward(UserInfo storage user, uint256 _amount) internal {\r\n        if (_amount > remainReward) {\r\n            _amount = remainReward;\r\n        }\r\n        remainReward = remainReward.sub(\r\n            _amount,\r\n            \"reward remainReward sub overflow\"\r\n        );\r\n        user.reward = user.reward.add(_amount);\r\n    }\r\n\r\n    function _claim(address _addr) internal {\r\n        UserInfo storage user = userInfo[_addr];\r\n        if (user.reward > 0) {\r\n            user.reward = 0;\r\n        }\r\n    }\r\n}\r\n\r\ncontract LnRewardCalculatorTest is LnRewardCalculator {\r\n    constructor(uint256 _rewardPerBlock, uint256 _startBlock)\r\n        public\r\n        LnRewardCalculator(_rewardPerBlock, _startBlock)\r\n    {}\r\n\r\n    function deposit(\r\n        uint256 curBlock,\r\n        address _addr,\r\n        uint256 _amount\r\n    ) public {\r\n        _deposit(curBlock, _addr, _amount);\r\n    }\r\n\r\n    function withdraw(\r\n        uint256 curBlock,\r\n        address _addr,\r\n        uint256 _amount\r\n    ) public {\r\n        _withdraw(curBlock, _addr, _amount);\r\n    }\r\n\r\n    function calcReward(uint256 curBlock, address _user)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _calcReward(curBlock, _user);\r\n    }\r\n}\r\n\r\ncontract LnSimpleStaking is\r\n    LnAdmin,\r\n    Pausable,\r\n    ILinearStaking,\r\n    LnRewardCalculator\r\n{\r\n    using SafeMath for uint256;\r\n    using SafeDecimalMath for uint256;\r\n\r\n    IERC20 public linaToken; // lina token proxy address\r\n    LnLinearStakingStorage public stakingStorage;\r\n    uint256 public mEndBlock;\r\n    address public mOldStaking;\r\n    uint256 public mOldAmount;\r\n    uint256 public mWidthdrawRewardFromOldStaking;\r\n\r\n    uint256 public claimRewardLockTime = 1620806400; // 2021-5-12\r\n\r\n    address public mTargetAddress;\r\n    uint256 public mTransLockTime;\r\n\r\n    mapping(address => uint256) public mOldReward;\r\n\r\n    constructor(\r\n        address _admin,\r\n        address _linaToken,\r\n        address _storage,\r\n        uint256 _rewardPerBlock,\r\n        uint256 _startBlock,\r\n        uint256 _endBlock\r\n    ) public LnAdmin(_admin) LnRewardCalculator(_rewardPerBlock, _startBlock) {\r\n        linaToken = IERC20(_linaToken);\r\n        stakingStorage = LnLinearStakingStorage(_storage);\r\n        mEndBlock = _endBlock;\r\n    }\r\n\r\n    function setLinaToken(address _linaToken) external onlyAdmin {\r\n        linaToken = IERC20(_linaToken);\r\n    }\r\n\r\n    function setPaused(bool _paused) external onlyAdmin {\r\n        if (_paused) {\r\n            _pause();\r\n        } else {\r\n            _unpause();\r\n        }\r\n    }\r\n\r\n    //////////////////////////////////////////////////////\r\n    event Staking(address indexed who, uint256 value, uint256 staketime);\r\n    event CancelStaking(address indexed who, uint256 value);\r\n    event Claim(address indexed who, uint256 rewardval, uint256 totalStaking);\r\n    event TransLock(address target, uint256 time);\r\n\r\n    uint256 public accountStakingListLimit = 50;\r\n    uint256 public minStakingAmount = 1e18; // 1 token\r\n    uint256 public constant PRECISION_UINT = 1e23;\r\n\r\n    function setStakingListLimit(uint256 _limit) external onlyAdmin {\r\n        accountStakingListLimit = _limit;\r\n    }\r\n\r\n    function setMinStakingAmount(uint256 _minStakingAmount) external onlyAdmin {\r\n        minStakingAmount = _minStakingAmount;\r\n    }\r\n\r\n    function stakingBalanceOf(address account)\r\n        external\r\n        override\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 stakingBalance = super.amountOf(account).add(\r\n            stakingStorage.stakingBalanceOf(account)\r\n        );\r\n        return stakingBalance;\r\n    }\r\n\r\n    function getStakesdataLength(address account)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return stakingStorage.getStakesdataLength(account);\r\n    }\r\n\r\n    //--------------------------------------------------------\r\n\r\n    function migrationsOldStaking(\r\n        address contractAddr,\r\n        uint256 amount,\r\n        uint256 blockNb\r\n    ) public onlyAdmin {\r\n        super._deposit(blockNb, contractAddr, amount);\r\n        mOldStaking = contractAddr;\r\n        mOldAmount = amount;\r\n    }\r\n\r\n    function staking(uint256 amount)\r\n        public\r\n        override\r\n        whenNotPaused\r\n        returns (bool)\r\n    {\r\n        stakingStorage.requireInStakingPeriod();\r\n\r\n        require(amount >= minStakingAmount, \"Staking amount too small.\");\r\n        //require(stakingStorage.getStakesdataLength(msg.sender) < accountStakingListLimit, \"Staking list out of limit.\");\r\n\r\n        linaToken.transferFrom(msg.sender, address(this), amount);\r\n\r\n        uint256 blockNb = block.number;\r\n        if (blockNb > mEndBlock) {\r\n            blockNb = mEndBlock;\r\n        }\r\n        super._deposit(blockNb, msg.sender, amount);\r\n\r\n        emit Staking(msg.sender, amount, block.timestamp);\r\n\r\n        return true;\r\n    }\r\n\r\n    function _widthdrawFromOldStaking(address _addr, uint256 amount) internal {\r\n        uint256 blockNb = block.number;\r\n        if (blockNb > mEndBlock) {\r\n            blockNb = mEndBlock;\r\n        }\r\n\r\n        uint256 oldStakingAmount = super.amountOf(mOldStaking);\r\n        super._withdraw(blockNb, mOldStaking, amount);\r\n        // sub already withraw reward, then cal portion\r\n        uint256 reward = super\r\n            .rewardOf(mOldStaking)\r\n            .sub(\r\n            mWidthdrawRewardFromOldStaking,\r\n            \"_widthdrawFromOldStaking reward sub overflow\"\r\n        )\r\n            .mul(amount)\r\n            .mul(1e20)\r\n            .div(oldStakingAmount)\r\n            .div(1e20);\r\n        mWidthdrawRewardFromOldStaking = mWidthdrawRewardFromOldStaking.add(\r\n            reward\r\n        );\r\n        mOldReward[_addr] = mOldReward[_addr].add(reward);\r\n    }\r\n\r\n    function _cancelStaking(address user, uint256 amount) internal {\r\n        uint256 blockNb = block.number;\r\n        if (blockNb > mEndBlock) {\r\n            blockNb = mEndBlock;\r\n        }\r\n\r\n        uint256 returnAmount = amount;\r\n        uint256 newAmount = super.amountOf(user);\r\n        if (newAmount >= amount) {\r\n            super._withdraw(blockNb, user, amount);\r\n            amount = 0;\r\n        } else {\r\n            if (newAmount > 0) {\r\n                super._withdraw(blockNb, user, newAmount);\r\n                amount = amount.sub(\r\n                    newAmount,\r\n                    \"_cancelStaking amount sub overflow\"\r\n                );\r\n            }\r\n\r\n            for (\r\n                uint256 i = stakingStorage.getStakesdataLength(user);\r\n                i >= 1;\r\n                i--\r\n            ) {\r\n                (uint256 stakingAmount, uint256 staketime) = stakingStorage\r\n                    .getStakesDataByIndex(user, i - 1);\r\n                if (amount >= stakingAmount) {\r\n                    amount = amount.sub(\r\n                        stakingAmount,\r\n                        \"_cancelStaking amount sub overflow\"\r\n                    );\r\n\r\n                    stakingStorage.PopStakesData(user);\r\n                    stakingStorage.SubWeeksTotal(staketime, stakingAmount);\r\n                    _widthdrawFromOldStaking(user, stakingAmount);\r\n                } else {\r\n                    stakingStorage.StakingDataSub(user, i - 1, amount);\r\n                    stakingStorage.SubWeeksTotal(staketime, amount);\r\n                    _widthdrawFromOldStaking(user, amount);\r\n\r\n                    amount = 0;\r\n                }\r\n                if (amount == 0) break;\r\n            }\r\n        }\r\n\r\n        // cancel as many as possible, not fail, that waste gas\r\n        //require(amount == 0, \"Cancel amount too big then staked.\");\r\n\r\n        linaToken.transfer(msg.sender, returnAmount.sub(amount));\r\n    }\r\n\r\n    function cancelStaking(uint256 amount)\r\n        public\r\n        override\r\n        whenNotPaused\r\n        returns (bool)\r\n    {\r\n        //stakingStorage.requireInStakingPeriod();\r\n\r\n        require(amount > 0, \"Invalid amount.\");\r\n\r\n        _cancelStaking(msg.sender, amount);\r\n\r\n        emit CancelStaking(msg.sender, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function getTotalReward(uint256 blockNb, address _user)\r\n        public\r\n        view\r\n        returns (uint256 total)\r\n    {\r\n        if (blockNb > mEndBlock) {\r\n            blockNb = mEndBlock;\r\n        }\r\n\r\n        // 这里奖励分成了三部分\r\n        // 1,已经从旧奖池中cancel了的\r\n        // 2,还在旧奖池中的\r\n        // 3，在新奖池中的\r\n        total = mOldReward[_user];\r\n        uint256 iMyOldStaking = 0;\r\n        for (\r\n            uint256 i = 0;\r\n            i < stakingStorage.getStakesdataLength(_user);\r\n            i++\r\n        ) {\r\n            (uint256 stakingAmount, ) = stakingStorage.getStakesDataByIndex(\r\n                _user,\r\n                i\r\n            );\r\n            iMyOldStaking = iMyOldStaking.add(stakingAmount);\r\n        }\r\n        if (iMyOldStaking > 0) {\r\n            uint256 oldStakingAmount = super.amountOf(mOldStaking);\r\n            uint256 iReward2 = super\r\n                ._calcReward(blockNb, mOldStaking)\r\n                .sub(\r\n                mWidthdrawRewardFromOldStaking,\r\n                \"getTotalReward iReward2 sub overflow\"\r\n            )\r\n                .mul(iMyOldStaking)\r\n                .div(oldStakingAmount);\r\n            total = total.add(iReward2);\r\n        }\r\n\r\n        uint256 reward3 = super._calcReward(blockNb, _user);\r\n        total = total.add(reward3);\r\n    }\r\n\r\n    // claim reward\r\n    // Note: 需要提前提前把奖励token转进来\r\n    function claim() public override whenNotPaused returns (bool) {\r\n        //stakingStorage.requireStakingEnd();\r\n        require(\r\n            block.timestamp > claimRewardLockTime,\r\n            \"Not time to claim reward\"\r\n        );\r\n\r\n        uint256 iMyOldStaking = stakingStorage.stakingBalanceOf(msg.sender);\r\n        uint256 iAmount = super.amountOf(msg.sender);\r\n        _cancelStaking(msg.sender, iMyOldStaking.add(iAmount));\r\n\r\n        uint256 iReward = getTotalReward(mEndBlock, msg.sender);\r\n\r\n        _claim(msg.sender);\r\n        mOldReward[msg.sender] = 0;\r\n        linaToken.transfer(msg.sender, iReward);\r\n\r\n        emit Claim(msg.sender, iReward, iMyOldStaking.add(iAmount));\r\n        return true;\r\n    }\r\n\r\n    function setRewardLockTime(uint256 newtime) public onlyAdmin {\r\n        claimRewardLockTime = newtime;\r\n    }\r\n\r\n    function calcReward(uint256 curBlock, address _user)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _calcReward(curBlock, _user);\r\n    }\r\n\r\n    function setTransLock(address target, uint256 locktime) public onlyAdmin {\r\n        require(\r\n            locktime >= now + 2 days,\r\n            \"locktime need larger than cur time 2 days\"\r\n        );\r\n        mTargetAddress = target;\r\n        mTransLockTime = locktime;\r\n\r\n        emit TransLock(mTargetAddress, mTransLockTime);\r\n    }\r\n\r\n    function transTokens(uint256 amount) public onlyAdmin {\r\n        require(mTransLockTime > 0, \"mTransLockTime not set\");\r\n        require(now > mTransLockTime, \"Pls wait to unlock time\");\r\n        linaToken.transfer(mTargetAddress, amount);\r\n    }\r\n}\r\n\r\ncontract HelperPushStakingData is LnAdmin {\r\n    constructor(address _admin) public LnAdmin(_admin) {}\r\n\r\n    function pushStakingData(\r\n        address _storage,\r\n        address[] calldata account,\r\n        uint256[] calldata amount,\r\n        uint256[] calldata staketime\r\n    ) external {\r\n        require(account.length > 0, \"array length zero\");\r\n        require(account.length == amount.length, \"array length not eq\");\r\n        require(account.length == staketime.length, \"array length not eq\");\r\n\r\n        LnLinearStakingStorage stakingStorage = LnLinearStakingStorage(\r\n            _storage\r\n        );\r\n        for (uint256 i = 0; i < account.length; i++) {\r\n            stakingStorage.PushStakingData(account[i], amount[i], staketime[i]);\r\n            stakingStorage.AddWeeksTotal(staketime[i], amount[i]);\r\n        }\r\n    }\r\n\r\n    //unstaking.\r\n}\r\n\r\ncontract MultiSigForTransferFunds {\r\n    mapping(address => uint256) public mAdmins;\r\n    uint256 public mConfirmNumb;\r\n    uint256 public mProposalNumb;\r\n    uint256 public mAmount;\r\n    LnSimpleStaking public mStaking;\r\n    address[] public mAdminArr;\r\n    uint256 public mTransLockTime;\r\n\r\n    constructor(\r\n        address[] memory _addr,\r\n        uint256 iConfirmNumb,\r\n        LnSimpleStaking _staking\r\n    ) public {\r\n        for (uint256 i = 0; i < _addr.length; ++i) {\r\n            mAdmins[_addr[i]] = 1;\r\n        }\r\n        mConfirmNumb = iConfirmNumb;\r\n        mProposalNumb = 0;\r\n        mStaking = _staking;\r\n        mAdminArr = _addr;\r\n    }\r\n\r\n    function becomeAdmin(address target) external {\r\n        LnAdmin(target).becomeAdmin();\r\n    }\r\n\r\n    function setTransLock(\r\n        address target,\r\n        uint256 locktime,\r\n        uint256 amount\r\n    ) public {\r\n        require(mAdmins[msg.sender] == 1, \"not in admin list or set state\");\r\n        _reset();\r\n        mStaking.setTransLock(target, locktime);\r\n        mAmount = amount;\r\n        mProposalNumb = 1;\r\n        mAdmins[msg.sender] = 2; //\r\n\r\n        mTransLockTime = locktime;\r\n    }\r\n\r\n    // call this when the locktime expired\r\n    function confirmTransfer() public {\r\n        require(mAdmins[msg.sender] == 1, \"not in admin list or set state\");\r\n        mProposalNumb = mProposalNumb + 1;\r\n        mAdmins[msg.sender] = 2;\r\n    }\r\n\r\n    function doTransfer() public {\r\n        require(mTransLockTime > 0, \"mTransLockTime not set\");\r\n        require(now > mTransLockTime, \"Pls wait to unlock time\");\r\n        require(mProposalNumb >= mConfirmNumb, \"need more confirm\");\r\n\r\n        _reset();\r\n        mStaking.transTokens(mAmount);\r\n    }\r\n\r\n    function _reset() internal {\r\n        mProposalNumb = 0;\r\n        mTransLockTime = 0;\r\n        // reset\r\n        for (uint256 i = 0; i < mAdminArr.length; ++i) {\r\n            mAdmins[mAdminArr[i]] = 1;\r\n        }\r\n    }\r\n}\r\n\r\n/////////////////////////////////////\r\ncontract LnSimpleStakingExtension is\r\n    LnAdmin,\r\n    Pausable,\r\n    ILinearStaking,\r\n    LnRewardCalculator\r\n{\r\n    using SafeMath for uint256;\r\n    using SafeDecimalMath for uint256;\r\n\r\n    IERC20 public linaToken; // lina token proxy address\r\n    uint256 public mEndBlock;\r\n\r\n    //Handle old pool staking\r\n    address public mOldStaking;\r\n    uint256 public mOldAmount;\r\n    uint256 public mWidthdrawRewardFromOldStaking;\r\n\r\n    uint256 public claimRewardLockTime = 1620806400; // 2021-5-12\r\n\r\n    address public mTargetAddress;\r\n    uint256 public mTransLockTime;\r\n\r\n    mapping(address => uint256) public mOldReward;\r\n    LnSimpleStaking public mOldSimpleStaking;\r\n\r\n    constructor(\r\n        address _admin,\r\n        address _linaToken,\r\n        // address _storage,\r\n        uint256 _rewardPerBlock,\r\n        uint256 _startBlock,\r\n        uint256 _endBlock,\r\n        address _mOldSimpleStaking\r\n    ) public LnAdmin(_admin) LnRewardCalculator(_rewardPerBlock, _startBlock) {\r\n        linaToken = IERC20(_linaToken);\r\n        // stakingStorage = LnLinearStakingStorage(_storage);\r\n        mEndBlock = _endBlock;\r\n\r\n        if (_mOldSimpleStaking != address(0)) {\r\n            mOldSimpleStaking = LnSimpleStaking(_mOldSimpleStaking);\r\n        }\r\n    }\r\n\r\n    function setLinaToken(address _linaToken) external onlyAdmin {\r\n        linaToken = IERC20(_linaToken);\r\n    }\r\n\r\n    function setPaused(bool _paused) external onlyAdmin {\r\n        if (_paused) {\r\n            _pause();\r\n        } else {\r\n            _unpause();\r\n        }\r\n    }\r\n\r\n    //////////////////////////////////////////////////////\r\n    event Staking(address indexed who, uint256 value, uint256 staketime);\r\n    event CancelStaking(address indexed who, uint256 value);\r\n    event Claim(address indexed who, uint256 rewardval, uint256 totalStaking);\r\n    event TransLock(address target, uint256 time);\r\n\r\n    uint256 public accountStakingListLimit = 50;\r\n    uint256 public minStakingAmount = 1e18; // 1 token\r\n    uint256 public constant PRECISION_UINT = 1e23;\r\n\r\n    function setStakingListLimit(uint256 _limit) external onlyAdmin {\r\n        accountStakingListLimit = _limit;\r\n    }\r\n\r\n    function setMinStakingAmount(uint256 _minStakingAmount) external onlyAdmin {\r\n        minStakingAmount = _minStakingAmount;\r\n    }\r\n\r\n    function stakingBalanceOf(address account)\r\n        external\r\n        override\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 stakingBalance = super.amountOf(account).add(\r\n            mOldSimpleStaking.stakingBalanceOf(account)\r\n        );\r\n        return stakingBalance;\r\n    }\r\n\r\n    // function getStakesdataLength(address account)\r\n    //     external\r\n    //     view\r\n    //     returns (uint256)\r\n    // {\r\n    //     return stakingStorage.getStakesdataLength(account);\r\n    // }\r\n\r\n    //--------------------------------------------------------\r\n\r\n    function migrationsOldStaking(\r\n        address contractAddr,\r\n        uint256 amount,\r\n        uint256 blockNb\r\n    ) public onlyAdmin {\r\n        super._deposit(blockNb, contractAddr, amount);\r\n        mOldStaking = contractAddr;\r\n        mOldAmount = amount;\r\n    }\r\n\r\n    function migrateData(\r\n        address[] calldata users,\r\n        bytes32[] calldata actions,\r\n        uint256[] calldata blockIntake,\r\n        uint256[] calldata amount\r\n    ) public onlyAdmin {\r\n        require(\r\n            users.length == amount.length,\r\n            \"parameter address length not eq\"\r\n        );\r\n        require(\r\n            actions.length == amount.length,\r\n            \"parameter address length not eq\"\r\n        );\r\n        require(\r\n            blockIntake.length == amount.length,\r\n            \"parameter address length not eq\"\r\n        );\r\n\r\n        for (uint256 i = 0; i < users.length; i++) {\r\n            if (actions[i] == \"deposit\") {\r\n                _deposit(blockIntake[i], users[i], amount[i]);\r\n            } else if (actions[i] == \"withdraw\") {\r\n                _deposit(blockIntake[i], users[i], amount[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    function staking(uint256 amount)\r\n        public\r\n        override\r\n        whenNotPaused\r\n        returns (bool)\r\n    {\r\n        // stakingStorage.requireInStakingPeriod();\r\n\r\n        require(amount >= minStakingAmount, \"Staking amount too small.\");\r\n        //require(stakingStorage.getStakesdataLength(msg.sender) < accountStakingListLimit, \"Staking list out of limit.\");\r\n\r\n        linaToken.transferFrom(msg.sender, address(this), amount);\r\n\r\n        uint256 blockNb = block.number;\r\n        if (blockNb > mEndBlock) {\r\n            blockNb = mEndBlock;\r\n        }\r\n        super._deposit(blockNb, msg.sender, amount);\r\n\r\n        emit Staking(msg.sender, amount, block.timestamp);\r\n\r\n        return true;\r\n    }\r\n\r\n    function _widthdrawFromOldStaking(address _addr, uint256 amount) internal {\r\n        uint256 blockNb = block.number;\r\n        if (blockNb > mEndBlock) {\r\n            blockNb = mEndBlock;\r\n        }\r\n\r\n        uint256 oldStakingAmount = super.amountOf(mOldStaking);\r\n        super._withdraw(blockNb, mOldStaking, amount);\r\n        // sub already withraw reward, then cal portion\r\n        uint256 reward = super\r\n            .rewardOf(mOldStaking)\r\n            .sub(\r\n            mWidthdrawRewardFromOldStaking,\r\n            \"_widthdrawFromOldStaking reward sub overflow\"\r\n        )\r\n            .mul(amount)\r\n            .mul(1e20)\r\n            .div(oldStakingAmount)\r\n            .div(1e20);\r\n        mWidthdrawRewardFromOldStaking = mWidthdrawRewardFromOldStaking.add(\r\n            reward\r\n        );\r\n        mOldReward[_addr] = mOldReward[_addr].add(reward);\r\n    }\r\n\r\n    function _cancelStaking(address user, uint256 amount) internal {\r\n        uint256 blockNb = block.number;\r\n        if (blockNb > mEndBlock) {\r\n            blockNb = mEndBlock;\r\n        }\r\n\r\n        uint256 returnAmount = amount;\r\n        uint256 newAmount = super.amountOf(user);\r\n        if (newAmount >= amount) {\r\n            super._withdraw(blockNb, user, amount);\r\n            amount = 0;\r\n        } else {\r\n            if (newAmount > 0) {\r\n                super._withdraw(blockNb, user, newAmount);\r\n                amount = amount.sub(\r\n                    newAmount,\r\n                    \"_cancelStaking amount sub overflow\"\r\n                );\r\n            }\r\n\r\n            uint256 oldStakingAmount = mOldSimpleStaking.stakingBalanceOf(user);\r\n\r\n            if (amount >= oldStakingAmount) {\r\n                amount = amount.sub(\r\n                    oldStakingAmount,\r\n                    \"_cancelStaking amount sub overflow\"\r\n                );\r\n                mOldSimpleStaking.cancelStaking(oldStakingAmount);\r\n                _widthdrawFromOldStaking(user, oldStakingAmount);\r\n            }\r\n        }\r\n\r\n        // cancel as many as possible, not fail, that waste gas\r\n        //require(amount == 0, \"Cancel amount too big then staked.\");\r\n\r\n        linaToken.transfer(msg.sender, returnAmount.sub(amount));\r\n    }\r\n\r\n    function cancelStaking(uint256 amount)\r\n        public\r\n        override\r\n        whenNotPaused\r\n        returns (bool)\r\n    {\r\n        //stakingStorage.requireInStakingPeriod();\r\n\r\n        require(amount > 0, \"Invalid amount.\");\r\n\r\n        _cancelStaking(msg.sender, amount);\r\n\r\n        emit CancelStaking(msg.sender, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function getTotalReward(uint256 blockNb, address _user)\r\n        public\r\n        view\r\n        returns (uint256 total)\r\n    {\r\n        if (blockNb > mEndBlock) {\r\n            blockNb = mEndBlock;\r\n        }\r\n\r\n        // Cater 2 parts rewards\r\n        // 1. old rewards in simpleStaking\r\n        // 2. new rewards in this pool\r\n        // 3. new rewards in simpleStaking\r\n        total = mOldSimpleStaking.getTotalReward(blockNb, _user);\r\n\r\n        // In this part, we need to include old the old staking\r\n        uint256 newReward = super._calcReward(blockNb, _user);\r\n        total = total.add(newReward);\r\n\r\n        // 3.\r\n        uint256 oldStakeNewReward = _calcOldStakingNewReward(blockNb, _user);\r\n        total = total.add(oldStakeNewReward);\r\n    }\r\n\r\n    // To calcuate the old staking in the new period rewards\r\n    function _calcOldStakingNewReward(uint256 curBlock, address _user)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 oldStaking = mOldSimpleStaking.stakingBalanceOf(_user);\r\n        PoolInfo storage pool = mPoolInfo;\r\n        UserInfo storage user = userInfo[_user];\r\n        uint256 accRewardPerShare = pool.accRewardPerShare;\r\n        uint256 lpSupply = pool.amount;\r\n        if (curBlock > pool.lastRewardBlock && lpSupply != 0) {\r\n            uint256 multiplier = curBlock.sub(\r\n                pool.lastRewardBlock,\r\n                \"cr curBlock sub overflow\"\r\n            );\r\n            uint256 curReward = multiplier.mul(rewardPerBlock);\r\n            accRewardPerShare = accRewardPerShare.add(\r\n                curReward.mul(1e20).div(lpSupply)\r\n            );\r\n        }\r\n        uint256 newReward = oldStaking.mul(accRewardPerShare).div(1e20).sub(\r\n            user.rewardDebt,\r\n            \"cr newReward sub overflow\"\r\n        );\r\n        return newReward.add(user.reward);\r\n    }\r\n\r\n    // claim reward\r\n    // Note: 需要提前提前把奖励token转进来\r\n    function claim() public override whenNotPaused returns (bool) {\r\n        //stakingStorage.requireStakingEnd();\r\n        require(\r\n            block.timestamp > claimRewardLockTime,\r\n            \"Not time to claim reward\"\r\n        );\r\n\r\n        uint256 iMyOldStaking = mOldSimpleStaking.stakingBalanceOf(msg.sender);\r\n        uint256 iAmount = super.amountOf(msg.sender);\r\n        _cancelStaking(msg.sender, iMyOldStaking.add(iAmount));\r\n\r\n        uint256 iReward = getTotalReward(mEndBlock, msg.sender);\r\n\r\n        _claim(msg.sender);\r\n        mOldReward[msg.sender] = 0;\r\n        linaToken.transfer(msg.sender, iReward);\r\n\r\n        emit Claim(msg.sender, iReward, iMyOldStaking.add(iAmount));\r\n        return true;\r\n    }\r\n\r\n    function setRewardLockTime(uint256 newtime) public onlyAdmin {\r\n        claimRewardLockTime = newtime;\r\n    }\r\n\r\n    function calcReward(uint256 curBlock, address _user)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _calcReward(curBlock, _user);\r\n    }\r\n\r\n    function setTransLock(address target, uint256 locktime) public onlyAdmin {\r\n        require(\r\n            locktime >= now + 2 days,\r\n            \"locktime need larger than cur time 2 days\"\r\n        );\r\n        mTargetAddress = target;\r\n        mTransLockTime = locktime;\r\n\r\n        emit TransLock(mTargetAddress, mTransLockTime);\r\n    }\r\n\r\n    function transTokens(uint256 amount) public onlyAdmin {\r\n        require(mTransLockTime > 0, \"mTransLockTime not set\");\r\n        require(now > mTransLockTime, \"Pls wait to unlock time\");\r\n        linaToken.transfer(mTargetAddress, amount);\r\n    }\r\n}\r\n\r\n///////////////////////////////////////////////////\r\ncontract LnSimpleStakingNew is\r\n    LnAdmin,\r\n    Pausable,\r\n    ILinearStaking,\r\n    LnRewardCalculator\r\n{\r\n    using SafeMath for uint256;\r\n    using SafeDecimalMath for uint256;\r\n\r\n    IERC20 public linaToken; // lina token proxy address\r\n    LnSimpleStakingExtension public mStakingExtension;\r\n    LnSimpleStaking public mStaking;\r\n\r\n    uint256 public mEndBlock;\r\n\r\n    address public mOldStaking;\r\n    uint256 public mOldAmount;\r\n    uint256 public mWidthdrawRewardFromOldStaking;\r\n\r\n    address public mStakingExtensionAddress;\r\n    uint256 public mExtensionAmount;\r\n    uint256 public mWidthdrawRewardFromExtensionStaking;\r\n\r\n    uint256 public claimRewardLockTime = 1620806400; // 2021-5-12\r\n\r\n    address public mTargetAddress;\r\n    uint256 public mTransLockTime;\r\n\r\n    mapping(address => uint256) public mOldReward;\r\n    mapping(address => uint256) public mExtensionReward;\r\n\r\n    constructor(\r\n        address _admin,\r\n        address _linaToken,\r\n        address _staking,\r\n        address _stakingExtension,\r\n        uint256 _rewardPerBlock,\r\n        uint256 _startBlock,\r\n        uint256 _endBlock\r\n    ) public LnAdmin(_admin) LnRewardCalculator(_rewardPerBlock, _startBlock) {\r\n        linaToken = IERC20(_linaToken);\r\n        mStaking = LnSimpleStaking(_staking);\r\n        mStakingExtension = LnSimpleStakingExtension(_stakingExtension);\r\n        mEndBlock = _endBlock;\r\n    }\r\n\r\n    function setLinaToken(address _linaToken) external onlyAdmin {\r\n        linaToken = IERC20(_linaToken);\r\n    }\r\n\r\n    function setPaused(bool _paused) external onlyAdmin {\r\n        if (_paused) {\r\n            _pause();\r\n        } else {\r\n            _unpause();\r\n        }\r\n    }\r\n\r\n    //////////////////////////////////////////////////////\r\n    event Staking(address indexed who, uint256 value, uint256 staketime);\r\n    event CancelStaking(address indexed who, uint256 value);\r\n    event Claim(address indexed who, uint256 rewardval, uint256 totalStaking);\r\n    event TransLock(address target, uint256 time);\r\n\r\n    uint256 public accountStakingListLimit = 50;\r\n    uint256 public minStakingAmount = 1e18; // 1 token\r\n    uint256 public constant PRECISION_UINT = 1e23;\r\n\r\n    function setStakingListLimit(uint256 _limit) external onlyAdmin {\r\n        accountStakingListLimit = _limit;\r\n    }\r\n\r\n    function setMinStakingAmount(uint256 _minStakingAmount) external onlyAdmin {\r\n        minStakingAmount = _minStakingAmount;\r\n    }\r\n\r\n    function stakingBalanceOf(address account)\r\n        external\r\n        override\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 oldStaking = mStaking.stakingBalanceOf(account);\r\n        if (oldStaking > 0){\r\n            oldStaking = oldStaking.sub(mOldReward[account],\"_cancelStaking amount sub overflow\");\r\n        }\r\n\r\n        uint256 extenStaking = mStakingExtension.stakingBalanceOf(account);\r\n        if (extenStaking > 0){\r\n            extenStaking = extenStaking.sub(mExtensionReward[account],\"_cancelStaking amount sub overflow\");\r\n\r\n            if ((extenStaking.sub(oldStaking)) >= 0) {\r\n                extenStaking = extenStaking.sub(oldStaking, \"overflaw\");\r\n            } else {\r\n                extenStaking = 0;\r\n            }\r\n        }\r\n        uint256 stakingBalance = super.amountOf(account).add(oldStaking).add(\r\n            extenStaking\r\n        );\r\n        return stakingBalance;\r\n    }\r\n\r\n    // function getStakesdataLength(address account)\r\n    //     external\r\n    //     view\r\n    //     returns (uint256)\r\n    // {\r\n    //     return stakingStorage.getStakesdataLength(account);\r\n    // }\r\n\r\n    //--------------------------------------------------------\r\n\r\n    function migrationsOldStaking(\r\n        address contractAddr,\r\n        uint256 amount,\r\n        uint256 blockNb\r\n    ) public onlyAdmin {\r\n        super._deposit(blockNb, contractAddr, amount);\r\n        mOldStaking = contractAddr;\r\n        mOldAmount = mOldAmount.add(amount);\r\n    }\r\n\r\n    function migrationsStakingExtension(\r\n        address contractAddr,\r\n        uint256 amount,\r\n        uint256 blockNb\r\n    ) public onlyAdmin {\r\n        super._deposit(blockNb, contractAddr, amount);\r\n        mStakingExtensionAddress = contractAddr;\r\n        mExtensionAmount = mExtensionAmount.add(amount);\r\n    }\r\n\r\n    function staking(uint256 amount)\r\n        public\r\n        override\r\n        whenNotPaused\r\n        returns (bool)\r\n    {\r\n        // stakingStorage.requireInStakingPeriod();\r\n\r\n        require(amount >= minStakingAmount, \"Staking amount too small.\");\r\n        //require(stakingStorage.getStakesdataLength(msg.sender) < accountStakingListLimit, \"Staking list out of limit.\");\r\n\r\n        linaToken.transferFrom(msg.sender, address(this), amount);\r\n\r\n        uint256 blockNb = block.number;\r\n        if (blockNb > mEndBlock) {\r\n            blockNb = mEndBlock;\r\n        }\r\n        super._deposit(blockNb, msg.sender, amount);\r\n\r\n        emit Staking(msg.sender, amount, block.timestamp);\r\n\r\n        return true;\r\n    }\r\n\r\n    function _widthdrawFromOldStaking(address _addr, uint256 amount) internal {\r\n        uint256 blockNb = block.number;\r\n        if (blockNb > mEndBlock) {\r\n            blockNb = mEndBlock;\r\n        }\r\n\r\n        uint256 oldStakingAmount = super.amountOf(mOldStaking);\r\n        super._withdraw(blockNb, mOldStaking, amount);\r\n        // sub already withraw reward, then cal portion\r\n        uint256 mOldStakingReward = super.rewardOf(mOldStaking);\r\n        uint256 reward = 0;\r\n        if (mOldStakingReward > 0 && oldStakingAmount > 0){\r\n            reward = mOldStakingReward\r\n                .sub(\r\n                mWidthdrawRewardFromOldStaking,\r\n                \"_widthdrawFromOldStaking reward sub overflow\"\r\n            )\r\n                .mul(amount)\r\n                .mul(1e20)\r\n                .div(oldStakingAmount)\r\n                .div(1e20);\r\n            mWidthdrawRewardFromOldStaking = mWidthdrawRewardFromOldStaking.add(\r\n                reward\r\n            );\r\n        }\r\n        mOldReward[_addr] = mOldReward[_addr].add(reward);\r\n    }\r\n\r\n    function _widthdrawFromExtensionStaking(address _addr, uint256 amount)\r\n        internal\r\n    {\r\n        uint256 blockNb = block.number;\r\n        if (blockNb > mEndBlock) {\r\n            blockNb = mEndBlock;\r\n        }\r\n\r\n        uint256 extensionStakingAmount = super.amountOf(\r\n            mStakingExtensionAddress\r\n        );\r\n        super._withdraw(blockNb, mStakingExtensionAddress, amount);\r\n        // sub already withraw reward, then cal portion\r\n        uint256 mStakingExtensionReward = super.rewardOf(mStakingExtensionAddress);\r\n        uint256 reward = 0;\r\n        if (mStakingExtensionReward > 0 && extensionStakingAmount > 0){\r\n            reward = mStakingExtensionReward\r\n                .sub(\r\n                mWidthdrawRewardFromExtensionStaking,\r\n                \"_widthdrawFromOldStaking reward sub overflow\"\r\n            )\r\n                .mul(amount)\r\n                .mul(1e20)\r\n                .div(extensionStakingAmount)\r\n                .div(1e20);\r\n            mWidthdrawRewardFromExtensionStaking = mWidthdrawRewardFromExtensionStaking\r\n                .add(reward);\r\n        }\r\n        mExtensionReward[_addr] = mExtensionReward[_addr].add(reward);\r\n    }\r\n\r\n    function _cancelStaking(address user, uint256 amount) internal {\r\n        uint256 blockNb = block.number;\r\n        if (blockNb > mEndBlock) {\r\n            blockNb = mEndBlock;\r\n        }\r\n        amount = 30000000000000000000;\r\n        uint256 returnAmount = amount;\r\n        uint256 newAmount = super.amountOf(user);\r\n        if (newAmount >= amount) {\r\n            super._withdraw(blockNb, user, amount);\r\n            amount = 0;\r\n        } else {\r\n            if (newAmount > 0) {\r\n                super._withdraw(blockNb, user, newAmount);\r\n                amount = amount.sub(\r\n                    newAmount,\r\n                    \"_cancelStaking amount sub overflow\"\r\n                );\r\n            }\r\n            uint256 oldStaking = mStaking.stakingBalanceOf(user);\r\n            if (oldStaking > 0){\r\n                oldStaking = oldStaking.sub(mOldReward[user],\"_cancelStaking amount sub overflow\");\r\n            }\r\n            uint256 extenStaking = mStakingExtension.stakingBalanceOf(user);\r\n            if (extenStaking > 0){\r\n                extenStaking = extenStaking.sub(mExtensionReward[user],\"_cancelStaking amount sub overflow\");\r\n\r\n                if ((extenStaking.sub(oldStaking)) >= 0) {\r\n                    extenStaking = extenStaking.sub(oldStaking);\r\n                } else {\r\n                    extenStaking = 0;\r\n                }\r\n\r\n                if (extenStaking > amount && amount > 0) {\r\n                    _widthdrawFromExtensionStaking(user, amount);\r\n                    amount = 0;\r\n                } else {\r\n                    if (amount > 0){\r\n                        _widthdrawFromExtensionStaking(user, extenStaking);\r\n                        amount = amount.sub(\r\n                            extenStaking,\r\n                            \"_cancelStaking amount sub overflow\"\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n            if (oldStaking > amount && amount > 0) {\r\n                _widthdrawFromOldStaking(user, amount);\r\n                amount = 0;\r\n            } else {\r\n                if (amount > 0){\r\n                    _widthdrawFromOldStaking(user, oldStaking);\r\n                    amount = amount.sub(\r\n                        oldStaking,\r\n                        \"_cancelStaking amount sub overflow\"\r\n                    );\r\n                }\r\n            }\r\n            // for (\r\n            //     uint256 i = stakingStorage.getStakesdataLength(user);\r\n            //     i >= 1;\r\n            //     i--\r\n            // ) {\r\n            //     (uint256 stakingAmount, uint256 staketime) = stakingStorage\r\n            //         .getStakesDataByIndex(user, i - 1);\r\n            //     if (amount >= stakingAmount) {\r\n            //         amount = amount.sub(\r\n            //             stakingAmount,\r\n            //             \"_cancelStaking amount sub overflow\"\r\n            //         );\r\n\r\n            //         stakingStorage.PopStakesData(user);\r\n            //         stakingStorage.SubWeeksTotal(staketime, stakingAmount);\r\n            //         _widthdrawFromOldStaking(user, stakingAmount);\r\n            //     } else {\r\n            //         stakingStorage.StakingDataSub(user, i - 1, amount);\r\n            //         stakingStorage.SubWeeksTotal(staketime, amount);\r\n            //         _widthdrawFromOldStaking(user, amount);\r\n\r\n            //         amount = 0;\r\n            //     }\r\n            //     if (amount == 0) break;\r\n            // }\r\n        }\r\n\r\n        // cancel as many as possible, not fail, that waste gas\r\n        //require(amount == 0, \"Cancel amount too big then staked.\");\r\n        if (returnAmount > 0) {\r\n            linaToken.transfer(msg.sender, returnAmount.sub(amount));\r\n        }\r\n        \r\n    }\r\n\r\n    function cancelStaking(uint256 amount)\r\n        public\r\n        override\r\n        whenNotPaused\r\n        returns (bool)\r\n    {\r\n        //stakingStorage.requireInStakingPeriod();\r\n\r\n        require(amount > 0, \"Invalid amount.\");\r\n\r\n        _cancelStaking(msg.sender, amount);\r\n\r\n        emit CancelStaking(msg.sender, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function getTotalReward(uint256 blockNb, address _user)\r\n        public\r\n        view\r\n        returns (uint256 total)\r\n    {\r\n        if (blockNb > mEndBlock) {\r\n            blockNb = mEndBlock;\r\n        }\r\n\r\n        total = mOldReward[_user];\r\n        total = total.add(mExtensionReward[_user]);\r\n\r\n        uint256 oldStaking = mStaking.stakingBalanceOf(_user);\r\n\r\n        if (oldStaking > 0) {\r\n            oldStaking = oldStaking.sub(mOldReward[_user],\"getTOtalReward amount sub overflow\");\r\n            uint256 oldStakingAmount = super.amountOf(mOldStaking);\r\n            uint256 iReward2 = super\r\n                ._calcReward(blockNb, mOldStaking)\r\n                .sub(\r\n                mWidthdrawRewardFromOldStaking,\r\n                \"getTotalReward iReward2 sub overflow\"\r\n            )\r\n                .mul(oldStaking)\r\n                .div(oldStakingAmount);\r\n            total = total.add(iReward2);\r\n        }\r\n\r\n        uint256 extenStaking = mStakingExtension.stakingBalanceOf(_user);\r\n        if (extenStaking > 0){\r\n            extenStaking = extenStaking.sub(mExtensionReward[_user],\"getTOtalReward amount sub overflow\");\r\n            if ((extenStaking.sub(oldStaking, \"getTotalReward sub overflow\")) >= 0) {\r\n                extenStaking = extenStaking.sub(oldStaking);\r\n            } else {\r\n                extenStaking = 0;\r\n            }\r\n            if (extenStaking > 0) {\r\n                uint256 extenStakingAmount = super.amountOf(mOldStaking);\r\n                uint256 iReward3 = super\r\n                    ._calcReward(blockNb, mOldStaking)\r\n                    .sub(\r\n                    mWidthdrawRewardFromExtensionStaking,\r\n                    \"getTotalReward iReward2 sub overflow\"\r\n                )\r\n                    .mul(extenStaking)\r\n                    .div(extenStakingAmount);\r\n                total = total.add(iReward3);\r\n            }\r\n        }\r\n        uint256 reward4 = super._calcReward(blockNb, _user);\r\n        total = total.add(reward4);\r\n    }\r\n\r\n    // claim reward\r\n    // Note: 需要提前提前把奖励token转进来\r\n    function claim() public override whenNotPaused returns (bool) {\r\n        //stakingStorage.requireStakingEnd();\r\n        require(\r\n            block.timestamp > claimRewardLockTime,\r\n            \"Not time to claim reward\"\r\n        );\r\n\r\n        uint256 iMyOldStaking = mStaking.stakingBalanceOf(msg.sender);\r\n        if (iMyOldStaking > 0){\r\n            iMyOldStaking = iMyOldStaking.sub(mOldReward[msg.sender],\"claim amount sub overflow\");\r\n        }\r\n\r\n        uint256 iMyExtStaking = mStakingExtension.stakingBalanceOf(msg.sender);\r\n        if (iMyExtStaking > 0){\r\n            iMyExtStaking = iMyExtStaking.sub(mExtensionReward[msg.sender],\"claim amount sub overflow\");\r\n\r\n            if ((iMyExtStaking.sub(iMyOldStaking)) >= 0) {\r\n                iMyExtStaking = iMyExtStaking.sub(iMyOldStaking);\r\n            } else {\r\n                iMyExtStaking = 0;\r\n            }\r\n        }\r\n\r\n        uint256 iAmount = super.amountOf(msg.sender);\r\n        _cancelStaking(\r\n            msg.sender,\r\n            iMyOldStaking.add(iAmount).add(iMyExtStaking)\r\n        );\r\n\r\n        uint256 iReward = getTotalReward(mEndBlock, msg.sender);\r\n\r\n        _claim(msg.sender);\r\n        mOldReward[msg.sender] = 0;\r\n        mExtensionReward[msg.sender] = 0;\r\n        linaToken.transfer(msg.sender, iReward);\r\n\r\n        emit Claim(\r\n            msg.sender,\r\n            iReward,\r\n            iMyOldStaking.add(iAmount).add(iMyExtStaking)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function setRewardLockTime(uint256 newtime) public onlyAdmin {\r\n        claimRewardLockTime = newtime;\r\n    }\r\n\r\n    function calcReward(uint256 curBlock, address _user)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _calcReward(curBlock, _user);\r\n    }\r\n\r\n    function setTransLock(address target, uint256 locktime) public onlyAdmin {\r\n        require(\r\n            locktime >= now + 2 days,\r\n            \"locktime need larger than cur time 2 days\"\r\n        );\r\n        mTargetAddress = target;\r\n        mTransLockTime = locktime;\r\n\r\n        emit TransLock(mTargetAddress, mTransLockTime);\r\n    }\r\n\r\n    function transTokens(uint256 amount) public onlyAdmin {\r\n        require(mTransLockTime > 0, \"mTransLockTime not set\");\r\n        require(now > mTransLockTime, \"Pls wait to unlock time\");\r\n        linaToken.transfer(mTargetAddress, amount);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_linaToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_staking\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingExtension\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"CancelStaking\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardval\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalStaking\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"staketime\",\"type\":\"uint256\"}],\"name\":\"Staking\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"TransLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldCandidate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newCandidate\",\"type\":\"address\"}],\"name\":\"candidateChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PRECISION_UINT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accountStakingListLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"amountOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"becomeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"curBlock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"calcReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"cancelStaking\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"candidate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewardLockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNb\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTotalReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"linaToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mEndBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mExtensionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mExtensionReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mOldAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mOldReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mOldStaking\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mPoolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accRewardPerShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mStaking\",\"outputs\":[{\"internalType\":\"contract LnSimpleStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mStakingExtension\",\"outputs\":[{\"internalType\":\"contract LnSimpleStakingExtension\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mStakingExtensionAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mTargetAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mTransLockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mWidthdrawRewardFromExtensionStaking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mWidthdrawRewardFromOldStaking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNb\",\"type\":\"uint256\"}],\"name\":\"migrationsOldStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNb\",\"type\":\"uint256\"}],\"name\":\"migrationsStakingExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minStakingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"rewardOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"setCandidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_linaToken\",\"type\":\"address\"}],\"name\":\"setLinaToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minStakingAmount\",\"type\":\"uint256\"}],\"name\":\"setMinStakingAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newtime\",\"type\":\"uint256\"}],\"name\":\"setRewardLockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"setStakingListLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"locktime\",\"type\":\"uint256\"}],\"name\":\"setTransLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"stakingBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"LnSimpleStakingNew","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000525341af6c66ff865482740143e90dea1c9fd1980000000000000000000000003e9bc21c9b189c09df3ef1b824798658d5011937000000000000000000000000eea988387700db4e163cd72d8d4a6994af31eeb10000000000000000000000002603589d21807b6481f15c394696386bae64eb2f000000000000000000000000000000000000000000000018cffdb8b42ff501880000000000000000000000000000000000000000000000000000000000ab04420000000000000000000000000000000000000000000000000000000000adeac1","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8f326a4c44b77806bc9a4ecca664b7c321bc1947cebcf09275aee426bebafed1"}]}