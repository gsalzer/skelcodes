{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts\\WUSD\\util\\IEthItemOrchestrator.sol\r\n\r\n//SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.7.6;\r\n\r\ninterface IEthItemOrchestrator {\r\n    function createNative(bytes calldata modelInitPayload, string calldata ens)\r\n        external\r\n        returns (address newNativeAddress, bytes memory modelInitCallResponse);\r\n}\r\n\r\n// File: contracts\\WUSD\\util\\IERC1155.sol\r\n\r\n// SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.7.6;\r\n\r\ninterface IERC1155 {\r\n\r\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\r\n\r\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\r\n\r\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\r\n\r\n    event URI(string value, uint256 indexed id);\r\n\r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n\r\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\r\n\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    function isApprovedForAll(address account, address operator) external view returns (bool);\r\n\r\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\r\n\r\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\r\n}\r\n\r\n// File: contracts\\WUSD\\util\\IERC20.sol\r\n\r\n// SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.7.6;\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: contracts\\WUSD\\util\\IEthItemInteroperableInterface.sol\r\n\r\n// SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.7.6;\r\n\r\n\r\ninterface IEthItemInteroperableInterface is IERC20 {\r\n\r\n    function mainInterface() external view returns (address);\r\n\r\n    function objectId() external view returns (uint256);\r\n\r\n    function mint(address owner, uint256 amount) external;\r\n\r\n    function burn(address owner, uint256 amount) external;\r\n\r\n    function permitNonce(address sender) external view returns(uint256);\r\n\r\n    function permit(address owner, address spender, uint value, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    function interoperableInterfaceVersion() external pure returns(uint256 ethItemInteroperableInterfaceVersion);\r\n}\r\n\r\n// File: contracts\\WUSD\\util\\IEthItem.sol\r\n\r\n// SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.7.6;\r\n\r\n\r\n\r\ninterface IEthItem is IERC1155 {\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function totalSupply(uint256 objectId) external view returns (uint256);\r\n\r\n    function name(uint256 objectId) external view returns (string memory);\r\n\r\n    function symbol(uint256 objectId) external view returns (string memory);\r\n\r\n    function decimals(uint256 objectId) external view returns (uint256);\r\n\r\n    function uri(uint256 objectId) external view returns (string memory);\r\n\r\n    function mainInterfaceVersion() external pure returns(uint256 ethItemInteroperableVersion);\r\n\r\n    function toInteroperableInterfaceAmount(uint256 objectId, uint256 ethItemAmount) external view returns (uint256 interoperableInterfaceAmount);\r\n\r\n    function toMainInterfaceAmount(uint256 objectId, uint256 erc20WrapperAmount) external view returns (uint256 mainInterfaceAmount);\r\n\r\n    function interoperableInterfaceModel() external view returns (address, uint256);\r\n\r\n    function asInteroperable(uint256 objectId) external view returns (IEthItemInteroperableInterface);\r\n\r\n    function emitTransferSingleEvent(address sender, address from, address to, uint256 objectId, uint256 amount) external;\r\n\r\n    function mint(uint256 amount, string calldata partialUri)\r\n        external\r\n        returns (uint256, address);\r\n\r\n    function burn(\r\n        uint256 objectId,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    function burnBatch(\r\n        uint256[] calldata objectIds,\r\n        uint256[] calldata amounts\r\n    ) external;\r\n}\r\n\r\n// File: contracts\\WUSD\\util\\INativeV1.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.7.6;\r\n\r\n\r\ninterface INativeV1 is IEthItem {\r\n\r\n    function init(string calldata name, string calldata symbol, bool hasDecimals, string calldata collectionUri, address extensionAddress, bytes calldata extensionInitPayload) external returns(bytes memory extensionInitCallResponse);\r\n\r\n    function extension() external view returns (address extensionAddress);\r\n\r\n    function canMint(address operator) external view returns (bool result);\r\n\r\n    function isEditable(uint256 objectId) external view returns (bool result);\r\n\r\n    function releaseExtension() external;\r\n\r\n    function uri() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint256);\r\n\r\n    function mint(uint256 amount, string calldata tokenName, string calldata tokenSymbol, string calldata objectUri, bool editable) external returns (uint256 objectId, address tokenAddress);\r\n\r\n    function mint(uint256 amount, string calldata tokenName, string calldata tokenSymbol, string calldata objectUri) external returns (uint256 objectId, address tokenAddress);\r\n\r\n    function mint(uint256 objectId, uint256 amount) external;\r\n\r\n    function makeReadOnly(uint256 objectId) external;\r\n\r\n    function setUri(string calldata newUri) external;\r\n\r\n    function setUri(uint256 objectId, string calldata newUri) external;\r\n}\r\n\r\n// File: contracts\\amm-aggregator\\common\\AMMData.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\npragma solidity ^0.7.6;\r\n\r\nstruct LiquidityPoolData {\r\n    address liquidityPoolAddress;\r\n    uint256 amount;\r\n    address tokenAddress;\r\n    bool amountIsLiquidityPool;\r\n    bool involvingETH;\r\n    address receiver;\r\n}\r\n\r\nstruct SwapData {\r\n    bool enterInETH;\r\n    bool exitInETH;\r\n    address[] liquidityPoolAddresses;\r\n    address[] path;\r\n    address inputToken;\r\n    uint256 amount;\r\n    address receiver;\r\n}\r\n\r\n// File: contracts\\amm-aggregator\\common\\IAMM.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\npragma solidity ^0.7.6;\r\npragma abicoder v2;\r\n\r\n\r\ninterface IAMM {\r\n\r\n    event NewLiquidityPoolAddress(address indexed);\r\n\r\n    function info() external view returns(string memory name, uint256 version);\r\n\r\n    function data() external view returns(address ethereumAddress, uint256 maxTokensPerLiquidityPool, bool hasUniqueLiquidityPools);\r\n\r\n    function balanceOf(address liquidityPoolAddress, address owner) external view returns(uint256, uint256[] memory, address[] memory);\r\n\r\n    function byLiquidityPool(address liquidityPoolAddress) external view returns(uint256, uint256[] memory, address[] memory);\r\n\r\n    function byTokens(address[] calldata liquidityPoolTokens) external view returns(uint256, uint256[] memory, address, address[] memory);\r\n\r\n    function byPercentage(address liquidityPoolAddress, uint256 numerator, uint256 denominator) external view returns (uint256, uint256[] memory, address[] memory);\r\n\r\n    function byLiquidityPoolAmount(address liquidityPoolAddress, uint256 liquidityPoolAmount) external view returns(uint256[] memory, address[] memory);\r\n\r\n    function byTokenAmount(address liquidityPoolAddress, address tokenAddress, uint256 tokenAmount) external view returns(uint256, uint256[] memory, address[] memory);\r\n\r\n    function createLiquidityPoolAndAddLiquidity(address[] calldata tokenAddresses, uint256[] calldata amounts, bool involvingETH, address receiver) external payable returns(uint256, uint256[] memory, address, address[] memory);\r\n\r\n    function addLiquidity(LiquidityPoolData calldata data) external payable returns(uint256, uint256[] memory, address[] memory);\r\n    function addLiquidityBatch(LiquidityPoolData[] calldata data) external payable returns(uint256[] memory, uint256[][] memory, address[][] memory);\r\n\r\n    function removeLiquidity(LiquidityPoolData calldata data) external returns(uint256, uint256[] memory, address[] memory);\r\n    function removeLiquidityBatch(LiquidityPoolData[] calldata data) external returns(uint256[] memory, uint256[][] memory, address[][] memory);\r\n\r\n    function getSwapOutput(address tokenAddress, uint256 tokenAmount, address[] calldata, address[] calldata path) view external returns(uint256[] memory);\r\n\r\n    function swapLiquidity(SwapData calldata data) external payable returns(uint256);\r\n    function swapLiquidityBatch(SwapData[] calldata data) external payable returns(uint256[] memory);\r\n}\r\n\r\n// File: contracts\\WUSD\\AllowedAMM.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.7.6;\r\n\r\nstruct AllowedAMM {\r\n    address ammAddress;\r\n    address[] liquidityPools;\r\n}\r\n\r\n// File: contracts\\WUSD\\WUSDExtension.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.7.6;\r\n//pragma abicoder v2;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract WUSDExtension {\r\n\r\n    uint256 private constant DECIMALS = 18;\r\n\r\n    address private _controller;\r\n\r\n    address private _collection;\r\n\r\n    uint256 private _mainItemObjectId;\r\n    address private _mainItemInteroperableAddress;\r\n\r\n    constructor(address orchestrator, string memory name, string memory symbol, string memory collectionUri, string memory mainItemName, string memory mainItemSymbol, string memory mainItemUri) {\r\n        _controller = msg.sender;\r\n        (_collection,) = IEthItemOrchestrator(orchestrator).createNative(abi.encodeWithSignature(\"init(string,string,bool,string,address,bytes)\", name, symbol, true, collectionUri, address(this), \"\"), \"\");\r\n        (_mainItemObjectId, _mainItemInteroperableAddress) = _mintEmpty(mainItemName, mainItemSymbol, mainItemUri, true);\r\n    }\r\n\r\n    function collection() public view returns (address) {\r\n        return _collection;\r\n    }\r\n\r\n    function data() public view returns (address, uint256, address) {\r\n        return (_collection, _mainItemObjectId, _mainItemInteroperableAddress);\r\n    }\r\n\r\n    function controller() public view returns (address) {\r\n        return _controller;\r\n    }\r\n\r\n    modifier controllerOnly() {\r\n        require(msg.sender == _controller, \"Unauthorized action\");\r\n        _;\r\n    }\r\n\r\n    function mintEmpty(string memory tokenName, string memory tokenSymbol, string memory objectUri, bool editable) public controllerOnly returns(uint256 objectId, address interoperableInterfaceAddress) {\r\n        return _mintEmpty(tokenName, tokenSymbol, objectUri, editable);\r\n    }\r\n\r\n    function _mintEmpty(string memory tokenName, string memory tokenSymbol, string memory objectUri, bool editable) private returns(uint256 objectId, address interoperableInterfaceAddress) {\r\n        INativeV1 theCollection = INativeV1(_collection);\r\n        (objectId, interoperableInterfaceAddress) = theCollection.mint(10**18, tokenName, tokenSymbol, objectUri, editable);\r\n        theCollection.burn(objectId, theCollection.balanceOf(address(this), objectId));\r\n    }\r\n\r\n    function setCollectionUri(string memory uri) public controllerOnly {\r\n        INativeV1(_collection).setUri(uri);\r\n    }\r\n\r\n    function setItemUri(uint256 existingObjectId, string memory uri) public controllerOnly {\r\n        INativeV1(_collection).setUri(existingObjectId, uri);\r\n    }\r\n\r\n    function makeReadOnly(uint256 objectId) public controllerOnly {\r\n        INativeV1(_collection).makeReadOnly(objectId);\r\n    }\r\n\r\n    function mintFor(address ammPlugin, address liquidityPoolAddress, uint256 liquidityPoolAmount, address receiver) public controllerOnly {\r\n        _safeTransferFrom(liquidityPoolAddress, msg.sender, address(this), liquidityPoolAmount);\r\n        _mint(_mainItemObjectId, _normalizeAndSumAmounts(ammPlugin, liquidityPoolAddress, liquidityPoolAmount), receiver);\r\n    }\r\n\r\n    function mintForRebalanceByCredit(AllowedAMM[] memory amms) public controllerOnly returns(uint256 credit) {\r\n        uint256 totalSupply = INativeV1(_collection).totalSupply(_mainItemObjectId);\r\n        for(uint256 i = 0; i < amms.length; i++) {\r\n            for(uint256 j = 0; j < amms[i].liquidityPools.length; j++) {\r\n                credit += _normalizeAndSumAmounts(amms[i].ammAddress, amms[i].liquidityPools[j], IERC20(amms[i].liquidityPools[j]).balanceOf(address(this)));\r\n            }\r\n        }\r\n        require(credit > totalSupply, \"No credit\");\r\n        _mint(_mainItemObjectId, credit = (credit - totalSupply), msg.sender);\r\n    }\r\n\r\n    function burnFor(uint256 objectId, uint256 value, address receiver) public controllerOnly {\r\n        _safeTransferFrom(_mainItemInteroperableAddress, msg.sender, address(this), INativeV1(_collection).toInteroperableInterfaceAmount(_mainItemObjectId, value));\r\n        INativeV1(_collection).burn(_mainItemObjectId, value);\r\n        _mint(objectId, value, receiver);\r\n    }\r\n\r\n    function _mint(uint256 objectId, uint256 amount, address receiver) private {\r\n        INativeV1(_collection).mint(objectId, amount);\r\n        INativeV1(_collection).safeTransferFrom(address(this), receiver, objectId, INativeV1(_collection).balanceOf(address(this), objectId), \"\");\r\n    }\r\n\r\n    function burnFor(address from, uint256 value, address ammPlugin, address liquidityPoolAddress, uint256 liquidityPoolAmount, address liquidityPoolReceiver) public controllerOnly {\r\n        _safeTransferFrom(_mainItemInteroperableAddress, msg.sender, address(this), INativeV1(_collection).toInteroperableInterfaceAmount(_mainItemObjectId, value));\r\n        uint256 toBurn = _normalizeAndSumAmounts(ammPlugin, liquidityPoolAddress, liquidityPoolAmount);\r\n        require(value >= toBurn, \"Insufficient Amount\");\r\n        if(value > toBurn) {\r\n            INativeV1(_collection).safeTransferFrom(address(this), from, _mainItemObjectId, value - toBurn, \"\");\r\n        }\r\n        INativeV1(_collection).burn(_mainItemObjectId, toBurn);\r\n        _safeTransfer(liquidityPoolAddress, liquidityPoolReceiver, liquidityPoolAmount);\r\n    }\r\n\r\n    function _safeTransfer(address erc20TokenAddress, address to, uint256 value) internal {\r\n        bytes memory returnData = _call(erc20TokenAddress, abi.encodeWithSelector(IERC20(erc20TokenAddress).transfer.selector, to, value));\r\n        require(returnData.length == 0 || abi.decode(returnData, (bool)), 'TRANSFER_FAILED');\r\n    }\r\n\r\n    function _safeTransferFrom(address erc20TokenAddress, address from, address to, uint256 value) private {\r\n        bytes memory returnData = _call(erc20TokenAddress, abi.encodeWithSelector(IERC20(erc20TokenAddress).transferFrom.selector, from, to, value));\r\n        require(returnData.length == 0 || abi.decode(returnData, (bool)), 'TRANSFERFROM_FAILED');\r\n    }\r\n\r\n    function _call(address location, bytes memory payload) private returns(bytes memory returnData) {\r\n        assembly {\r\n            let result := call(gas(), location, 0, add(payload, 0x20), mload(payload), 0, 0)\r\n            let size := returndatasize()\r\n            returnData := mload(0x40)\r\n            mstore(returnData, size)\r\n            let returnDataPayloadStart := add(returnData, 0x20)\r\n            returndatacopy(returnDataPayloadStart, 0, size)\r\n            mstore(0x40, add(returnDataPayloadStart, size))\r\n            switch result case 0 {revert(returnDataPayloadStart, size)}\r\n        }\r\n    }\r\n\r\n    function _normalizeAndSumAmounts(address ammPlugin, address liquidityPoolAddress, uint256 liquidityPoolAmount)\r\n        private\r\n        view\r\n        returns(uint256 amount) {\r\n            IERC20 liquidityPool = IERC20(liquidityPoolAddress);\r\n            (uint256[] memory amounts, address[] memory tokens) = IAMM(ammPlugin).byLiquidityPoolAmount(address(liquidityPool), liquidityPoolAmount);\r\n            for(uint256 i = 0; i < amounts.length; i++) {\r\n                amount += _normalizeTokenAmountToDefaultDecimals(tokens[i], amounts[i]);\r\n            }\r\n    }\r\n\r\n    function _normalizeTokenAmountToDefaultDecimals(address tokenAddress, uint256 amount) internal virtual view returns(uint256) {\r\n        uint256 remainingDecimals = DECIMALS;\r\n        IERC20 token = IERC20(tokenAddress);\r\n        remainingDecimals -= token.decimals();\r\n\r\n        if(remainingDecimals == 0) {\r\n            return amount;\r\n        }\r\n\r\n        return amount * (remainingDecimals == 0 ? 1 : (10**remainingDecimals));\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"orchestrator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"collectionUri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"mainItemName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"mainItemSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"mainItemUri\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ammPlugin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityPoolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityPoolAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"liquidityPoolReceiver\",\"type\":\"address\"}],\"name\":\"burnFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"objectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"burnFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collection\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"data\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"objectId\",\"type\":\"uint256\"}],\"name\":\"makeReadOnly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"objectUri\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"editable\",\"type\":\"bool\"}],\"name\":\"mintEmpty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"objectId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"interoperableInterfaceAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ammPlugin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityPoolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityPoolAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"mintFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"ammAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"liquidityPools\",\"type\":\"address[]\"}],\"internalType\":\"struct AllowedAMM[]\",\"name\":\"amms\",\"type\":\"tuple[]\"}],\"name\":\"mintForRebalanceByCredit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"credit\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setCollectionUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"existingObjectId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setItemUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"WUSDExtension","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000086ab19d36c38aa81f092eab4b1a8a4b55361246500000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002400000000000000000000000000000000000000000000000000000000000000015436f76656e616e7473205772617070656420555344000000000000000000000000000000000000000000000000000000000000000000000000000000000000045755534400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003a697066733a2f2f697066732f516d66367957797561617a59374353766636345133616e466f505148394d546878476f47675a5635545971675176000000000000000000000000000000000000000000000000000000000000000000000000000b577261707065642055534400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000045755534400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003a697066733a2f2f697066732f516d546a396b3776713844714c46755333547247474e44616163484c326354674c6a4a365475385a624b7754486d000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://36f6c48c79c895c47991463a88f3beb8388ee18d0499ed63f1d405fc5dfb16a2"}]}