{"status":"1","message":"OK","result":[{"SourceCode":"{\"IComptroller.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.9;\\r\\n\\r\\n/**\\r\\n * @title ICToken\\r\\n * @author Alexander Schlindwein\\r\\n *\\r\\n * @dev A simplified interface for Compound\\u0027s Comptroller\\r\\n */\\r\\ninterface IComptroller {\\r\\n    function claimComp(address holder) external;\\r\\n}\"},\"ICToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.9;\\r\\n\\r\\nimport \\\"IERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title ICToken\\r\\n * @author Alexander Schlindwein\\r\\n *\\r\\n * @dev A simplified interface for Compound\\u0027s cToken\\r\\n */\\r\\ninterface ICToken is IERC20 {\\r\\n    function exchangeRateStored() external view returns (uint);\\r\\n    function accrueInterest() external returns (uint);\\r\\n    function mint(uint mintAmount) external returns (uint);\\r\\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\\r\\n    function redeem(uint redeemTokens) external returns (uint);\\r\\n    function comptroller() external view returns (address);\\r\\n}\"},\"IdeaTokenExchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.9;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"SafeMath.sol\\\";\\r\\nimport \\\"Ownable.sol\\\";\\r\\nimport \\\"Initializable.sol\\\";\\r\\nimport \\\"IIdeaToken.sol\\\";\\r\\nimport \\\"IIdeaTokenFactory.sol\\\";\\r\\nimport \\\"IInterestManager.sol\\\";\\r\\nimport \\\"IIdeaTokenExchange.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title IdeaTokenExchange\\r\\n * @author Alexander Schlindwein\\r\\n *\\r\\n * Exchanges Dai \\u003c-\\u003e IdeaTokens using a bonding curve. Sits behind a proxy\\r\\n */\\r\\ncontract IdeaTokenExchange is IIdeaTokenExchange, Initializable, Ownable {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    // Stored for every IdeaToken and market.\\r\\n    // Keeps track of the amount of invested dai in this token, and the amount of investment tokens (e.g. cDai).\\r\\n    struct ExchangeInfo {\\r\\n        // The amount of Dai collected by trading\\r\\n        uint dai;\\r\\n        // The amount of \\\"investment tokens\\\", e.g. cDai\\r\\n        uint invested; \\r\\n    }\\r\\n\\r\\n    uint constant FEE_SCALE = 10000;\\r\\n\\r\\n    // The address authorized to set token and platform owners.\\r\\n    // It is only allowed to change these when the current owner is not set (zero address).\\r\\n    // Using such an address allows an external program to make authorization calls without having to go through the timelock.\\r\\n    address _authorizer;\\r\\n\\r\\n    // The amount of \\\"investment tokens\\\" for the collected trading fee, e.g. cDai \\r\\n    uint _tradingFeeInvested; \\r\\n    // The address which receives the trading fee when withdrawTradingFee is called\\r\\n    address _tradingFeeRecipient;\\r\\n\\r\\n    // marketID =\\u003e owner. The owner of a platform.\\r\\n    // This address is allowed to withdraw platform fee.\\r\\n    // When allInterestToPlatform=true then this address can also withdraw the platform interest\\r\\n    mapping(uint =\\u003e address) _platformOwner;\\r\\n\\r\\n    // marketID =\\u003e amount. The amount of \\\"investment tokens\\\" for the collected platform fee, e.g. cDai\\r\\n    mapping(uint =\\u003e uint) _platformFeeInvested;\\r\\n    \\r\\n\\r\\n    // marketID =\\u003e ExchangeInfo. Stores ExchangeInfo structs for platforms\\r\\n    mapping(uint =\\u003e ExchangeInfo) _platformsExchangeInfo;\\r\\n\\r\\n    // IdeaToken address =\\u003e owner. The owner of an IdeaToken.\\r\\n    // This address is allowed to withdraw the interest for an IdeaToken\\r\\n    mapping(address =\\u003e address) _tokenOwner;\\r\\n    // IdeaToken address =\\u003e ExchangeInfo. Stores ExchangeInfo structs for IdeaTokens\\r\\n    mapping(address =\\u003e ExchangeInfo) _tokensExchangeInfo;\\r\\n\\r\\n    // IdeaTokenFactory contract\\r\\n    IIdeaTokenFactory _ideaTokenFactory;\\r\\n    // InterestManager contract\\r\\n    IInterestManager _interestManager;\\r\\n    // Dai contract\\r\\n    IERC20 _dai;\\r\\n\\r\\n    // IdeaToken address =\\u003e bool. Whether or not to disable all fee collection for a specific IdeaToken.\\r\\n    mapping(address =\\u003e bool) _tokenFeeKillswitch;\\r\\n\\r\\n    event NewTokenOwner(address ideaToken, address owner);\\r\\n    event NewPlatformOwner(uint marketID, address owner);\\r\\n\\r\\n    event InvestedState(uint marketID, address ideaToken, uint dai, uint daiInvested, uint tradingFeeInvested, uint platformFeeInvested, uint volume);\\r\\n    \\r\\n    event PlatformInterestRedeemed(uint marketID, uint investmentToken, uint daiRedeemed);\\r\\n    event TokenInterestRedeemed(address ideaToken, uint investmentToken, uint daiRedeemed);\\r\\n    event TradingFeeRedeemed(uint daiRedeemed);\\r\\n    event PlatformFeeRedeemed(uint marketID, uint daiRedeemed);\\r\\n    \\r\\n    /**\\r\\n     * Initializes the contract\\r\\n     *\\r\\n     * @param owner The owner of the contract\\r\\n     * @param tradingFeeRecipient The address of the recipient of the trading fee\\r\\n     * @param interestManager The address of the InterestManager\\r\\n     * @param dai The address of Dai\\r\\n     */\\r\\n    function initialize(address owner,\\r\\n                        address authorizer,\\r\\n                        address tradingFeeRecipient,\\r\\n                        address interestManager,\\r\\n                        address dai) external initializer {\\r\\n        require(authorizer != address(0) \\u0026\\u0026\\r\\n                tradingFeeRecipient != address(0) \\u0026\\u0026\\r\\n                interestManager != address(0) \\u0026\\u0026\\r\\n                dai != address(0),\\r\\n                \\\"invalid-params\\\");\\r\\n\\r\\n        setOwnerInternal(owner); // Checks owner to be non-zero\\r\\n        _authorizer = authorizer;\\r\\n        _tradingFeeRecipient = tradingFeeRecipient;\\r\\n        _interestManager = IInterestManager(interestManager);\\r\\n        _dai = IERC20(dai);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Burns IdeaTokens in exchange for Dai\\r\\n     *\\r\\n     * @param ideaToken The IdeaToken to sell\\r\\n     * @param amount The amount of IdeaTokens to sell\\r\\n     * @param minPrice The minimum allowed price in Dai for selling `amount` IdeaTokens\\r\\n     * @param recipient The recipient of the redeemed Dai\\r\\n     */\\r\\n    function sellTokens(address ideaToken, uint amount, uint minPrice, address recipient) external override {\\r\\n\\r\\n        MarketDetails memory marketDetails = _ideaTokenFactory.getMarketDetailsByTokenAddress(ideaToken);\\r\\n        require(marketDetails.exists, \\\"token-not-exist\\\");\\r\\n        uint marketID = marketDetails.id;\\r\\n\\r\\n        CostAndPriceAmounts memory amounts = getPricesForSellingTokens(marketDetails, IERC20(ideaToken).totalSupply(), amount, _tokenFeeKillswitch[ideaToken]);\\r\\n\\r\\n        require(amounts.total \\u003e= minPrice, \\\"below-min-price\\\");\\r\\n        require(IIdeaToken(ideaToken).balanceOf(msg.sender) \\u003e= amount, \\\"insufficient-tokens\\\");\\r\\n        \\r\\n        IIdeaToken(ideaToken).burn(msg.sender, amount);\\r\\n\\r\\n        _interestManager.accrueInterest();\\r\\n\\r\\n        ExchangeInfo storage exchangeInfo;\\r\\n        if(marketDetails.allInterestToPlatform) {\\r\\n            exchangeInfo = _platformsExchangeInfo[marketID];\\r\\n        } else {\\r\\n            exchangeInfo = _tokensExchangeInfo[ideaToken];\\r\\n        }\\r\\n\\r\\n        uint tradingFeeInvested;\\r\\n        uint platformFeeInvested;\\r\\n        uint invested;\\r\\n        uint dai;\\r\\n        {\\r\\n        uint totalRedeemed = _interestManager.redeem(address(this), amounts.total);\\r\\n        uint tradingFeeRedeemed = _interestManager.underlyingToInvestmentToken(amounts.tradingFee);\\r\\n        uint platformFeeRedeemed = _interestManager.underlyingToInvestmentToken(amounts.platformFee);\\r\\n\\r\\n        invested = exchangeInfo.invested.sub(totalRedeemed.add(tradingFeeRedeemed).add(platformFeeRedeemed));\\r\\n        exchangeInfo.invested = invested;\\r\\n        tradingFeeInvested = _tradingFeeInvested.add(tradingFeeRedeemed);\\r\\n        _tradingFeeInvested = tradingFeeInvested;\\r\\n        platformFeeInvested = _platformFeeInvested[marketID].add(platformFeeRedeemed);\\r\\n        _platformFeeInvested[marketID] = platformFeeInvested;\\r\\n        dai = exchangeInfo.dai.sub(amounts.raw);\\r\\n        exchangeInfo.dai = dai;\\r\\n        }\\r\\n\\r\\n        emit InvestedState(marketID, ideaToken, dai, invested, tradingFeeInvested, platformFeeInvested, amounts.raw);\\r\\n        require(_dai.transfer(recipient, amounts.total), \\\"dai-transfer\\\");\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * Returns the price for selling IdeaTokens\\r\\n     *\\r\\n     * @param ideaToken The IdeaToken to sell\\r\\n     * @param amount The amount of IdeaTokens to sell\\r\\n     *\\r\\n     * @return The price in Dai for selling `amount` IdeaTokens\\r\\n     */\\r\\n    function getPriceForSellingTokens(address ideaToken, uint amount) external view override returns (uint) {\\r\\n        MarketDetails memory marketDetails = _ideaTokenFactory.getMarketDetailsByTokenAddress(ideaToken);\\r\\n        return getPricesForSellingTokens(marketDetails, IERC20(ideaToken).totalSupply(), amount, _tokenFeeKillswitch[ideaToken]).total;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculates each price related to selling tokens\\r\\n     *\\r\\n     * @param marketDetails The market details\\r\\n     * @param supply The existing supply of the IdeaToken\\r\\n     * @param amount The amount of IdeaTokens to sell\\r\\n     *\\r\\n     * @return total cost, raw cost and trading fee\\r\\n     */\\r\\n    function getPricesForSellingTokens(MarketDetails memory marketDetails, uint supply, uint amount, bool feesDisabled) public pure override returns (CostAndPriceAmounts memory) {\\r\\n        \\r\\n        uint rawPrice = getRawPriceForSellingTokens(marketDetails.baseCost,\\r\\n                                                    marketDetails.priceRise,\\r\\n                                                    marketDetails.hatchTokens,\\r\\n                                                    supply,\\r\\n                                                    amount);\\r\\n\\r\\n        uint tradingFee = 0;\\r\\n        uint platformFee = 0;\\r\\n\\r\\n        if(!feesDisabled) {\\r\\n            tradingFee = rawPrice.mul(marketDetails.tradingFeeRate).div(FEE_SCALE);\\r\\n            platformFee = rawPrice.mul(marketDetails.platformFeeRate).div(FEE_SCALE);\\r\\n        }   \\r\\n        \\r\\n        uint totalPrice = rawPrice.sub(tradingFee).sub(platformFee);\\r\\n\\r\\n        return CostAndPriceAmounts({\\r\\n            total: totalPrice,\\r\\n            raw: rawPrice,\\r\\n            tradingFee: tradingFee,\\r\\n            platformFee: platformFee\\r\\n        });\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the price for selling tokens without any fees applied\\r\\n     *\\r\\n     * @param baseCost The baseCost of the token\\r\\n     * @param priceRise The priceRise of the token\\r\\n     * @param hatchTokens The amount of hatch tokens\\r\\n     * @param supply The current total supply of the token\\r\\n     * @param amount The amount of IdeaTokens to sell\\r\\n     *\\r\\n     * @return The price selling `amount` IdeaTokens without any fees applied\\r\\n     */\\r\\n    function getRawPriceForSellingTokens(uint baseCost, uint priceRise, uint hatchTokens, uint supply, uint amount) internal pure returns (uint) {\\r\\n\\r\\n        uint hatchPrice = 0;\\r\\n        uint updatedAmount = amount;\\r\\n        uint updatedSupply;\\r\\n\\r\\n        if(supply.sub(amount) \\u003c hatchTokens) {\\r\\n\\r\\n            if(supply \\u003c= hatchTokens) {\\r\\n                return baseCost.mul(amount).div(10**18);\\r\\n            }\\r\\n\\r\\n            // No SafeMath required because supply - amount \\u003c hatchTokens\\r\\n            uint tokensInHatch = hatchTokens - (supply - amount);\\r\\n            hatchPrice = baseCost.mul(tokensInHatch).div(10**18);\\r\\n            updatedAmount = amount.sub(tokensInHatch);\\r\\n            // No SafeMath required because supply \\u003e= hatchTokens\\r\\n            updatedSupply = supply - hatchTokens;\\r\\n        } else {\\r\\n            // No SafeMath required because supply \\u003e= hatchTokens\\r\\n            updatedSupply = supply - hatchTokens;\\r\\n        }\\r\\n\\r\\n        uint priceAtSupply = baseCost.add(priceRise.mul(updatedSupply).div(10**18));\\r\\n        uint priceAtSupplyMinusAmount = baseCost.add(priceRise.mul(updatedSupply.sub(updatedAmount)).div(10**18));\\r\\n        uint average = priceAtSupply.add(priceAtSupplyMinusAmount).div(2);\\r\\n    \\r\\n        return hatchPrice.add(average.mul(updatedAmount).div(10**18));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Mints IdeaTokens in exchange for Dai\\r\\n     *\\r\\n     * @param ideaToken The IdeaToken to buy\\r\\n     * @param amount The amount of IdeaTokens to buy\\r\\n     * @param fallbackAmount The fallback amount to buy in case the price changed\\r\\n     * @param cost The maximum allowed cost in Dai\\r\\n     * @param recipient The recipient of the bought IdeaTokens\\r\\n     */\\r\\n    function buyTokens(address ideaToken, uint amount, uint fallbackAmount, uint cost, address recipient) external override {\\r\\n        MarketDetails memory marketDetails = _ideaTokenFactory.getMarketDetailsByTokenAddress(ideaToken);\\r\\n        require(marketDetails.exists, \\\"token-not-exist\\\");\\r\\n        uint marketID = marketDetails.id;\\r\\n\\r\\n        uint supply = IERC20(ideaToken).totalSupply();\\r\\n        bool feesDisabled = _tokenFeeKillswitch[ideaToken];\\r\\n        uint actualAmount = amount;\\r\\n\\r\\n        CostAndPriceAmounts memory amounts = getCostsForBuyingTokens(marketDetails, supply, actualAmount, feesDisabled);\\r\\n\\r\\n        if(amounts.total \\u003e cost) {\\r\\n            actualAmount = fallbackAmount;\\r\\n            amounts = getCostsForBuyingTokens(marketDetails, supply, actualAmount, feesDisabled);\\r\\n    \\r\\n            require(amounts.total \\u003c= cost, \\\"slippage\\\");\\r\\n        }\\r\\n\\r\\n        \\r\\n        require(_dai.allowance(msg.sender, address(this)) \\u003e= amounts.total, \\\"insufficient-allowance\\\");\\r\\n        require(_dai.transferFrom(msg.sender, address(_interestManager), amounts.total), \\\"dai-transfer\\\");\\r\\n        \\r\\n        _interestManager.accrueInterest();\\r\\n        _interestManager.invest(amounts.total);\\r\\n\\r\\n\\r\\n        ExchangeInfo storage exchangeInfo;\\r\\n        if(marketDetails.allInterestToPlatform) {\\r\\n            exchangeInfo = _platformsExchangeInfo[marketID];\\r\\n        } else {\\r\\n            exchangeInfo = _tokensExchangeInfo[ideaToken];\\r\\n        }\\r\\n\\r\\n        exchangeInfo.invested = exchangeInfo.invested.add(_interestManager.underlyingToInvestmentToken(amounts.raw));\\r\\n        uint tradingFeeInvested = _tradingFeeInvested.add(_interestManager.underlyingToInvestmentToken(amounts.tradingFee));\\r\\n        _tradingFeeInvested = tradingFeeInvested;\\r\\n        uint platformFeeInvested = _platformFeeInvested[marketID].add(_interestManager.underlyingToInvestmentToken(amounts.platformFee));\\r\\n        _platformFeeInvested[marketID] = platformFeeInvested;\\r\\n        exchangeInfo.dai = exchangeInfo.dai.add(amounts.raw);\\r\\n    \\r\\n        emit InvestedState(marketID, ideaToken, exchangeInfo.dai, exchangeInfo.invested, tradingFeeInvested, platformFeeInvested, amounts.total);\\r\\n        IIdeaToken(ideaToken).mint(recipient, actualAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the cost for buying IdeaTokens\\r\\n     *\\r\\n     * @param ideaToken The IdeaToken to buy\\r\\n     * @param amount The amount of IdeaTokens to buy\\r\\n     *\\r\\n     * @return The cost in Dai for buying `amount` IdeaTokens\\r\\n     */\\r\\n    function getCostForBuyingTokens(address ideaToken, uint amount) external view override returns (uint) {\\r\\n        MarketDetails memory marketDetails = _ideaTokenFactory.getMarketDetailsByTokenAddress(ideaToken);\\r\\n\\r\\n        return getCostsForBuyingTokens(marketDetails, IERC20(ideaToken).totalSupply(), amount, _tokenFeeKillswitch[ideaToken]).total;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculates each cost related to buying tokens\\r\\n     *\\r\\n     * @param marketDetails The market details\\r\\n     * @param supply The existing supply of the IdeaToken\\r\\n     * @param amount The amount of IdeaTokens to buy\\r\\n     *\\r\\n     * @return total cost, raw cost, trading fee, platform fee\\r\\n     */\\r\\n    function getCostsForBuyingTokens(MarketDetails memory marketDetails, uint supply, uint amount, bool feesDisabled) public pure override returns (CostAndPriceAmounts memory) {\\r\\n        uint rawCost = getRawCostForBuyingTokens(marketDetails.baseCost,\\r\\n                                                 marketDetails.priceRise,\\r\\n                                                 marketDetails.hatchTokens,\\r\\n                                                 supply,\\r\\n                                                 amount);\\r\\n\\r\\n        uint tradingFee = 0;\\r\\n        uint platformFee = 0;\\r\\n\\r\\n        if(!feesDisabled) {\\r\\n            tradingFee = rawCost.mul(marketDetails.tradingFeeRate).div(FEE_SCALE);\\r\\n            platformFee = rawCost.mul(marketDetails.platformFeeRate).div(FEE_SCALE);\\r\\n        }\\r\\n        \\r\\n        uint totalCost = rawCost.add(tradingFee).add(platformFee);\\r\\n\\r\\n        return CostAndPriceAmounts({\\r\\n            total: totalCost,\\r\\n            raw: rawCost,\\r\\n            tradingFee: tradingFee,\\r\\n            platformFee: platformFee\\r\\n        });\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the cost for buying tokens without any fees applied\\r\\n     *\\r\\n     * @param baseCost The baseCost of the token\\r\\n     * @param priceRise The priceRise of the token\\r\\n     * @param hatchTokens The amount of hatch tokens\\r\\n     * @param supply The current total supply of the token\\r\\n     * @param amount The amount of IdeaTokens to buy\\r\\n     *\\r\\n     * @return The cost buying `amount` IdeaTokens without any fees applied\\r\\n     */\\r\\n    function getRawCostForBuyingTokens(uint baseCost, uint priceRise, uint hatchTokens, uint supply, uint amount) internal pure returns (uint) {\\r\\n\\r\\n        uint hatchCost = 0;\\r\\n        uint updatedAmount = amount;\\r\\n        uint updatedSupply;\\r\\n\\r\\n        if(supply \\u003c hatchTokens) {\\r\\n            // No SafeMath required because supply \\u003c hatchTokens\\r\\n            uint remainingHatchTokens = hatchTokens - supply;\\r\\n\\r\\n            if(amount \\u003c= remainingHatchTokens) {\\r\\n                return baseCost.mul(amount).div(10**18);\\r\\n            }\\r\\n\\r\\n            hatchCost = baseCost.mul(remainingHatchTokens).div(10**18);\\r\\n            updatedSupply = 0;\\r\\n            // No SafeMath required because remainingHatchTokens \\u003c amount\\r\\n            updatedAmount = amount - remainingHatchTokens;\\r\\n        } else {\\r\\n            // No SafeMath required because supply \\u003e= hatchTokens\\r\\n            updatedSupply = supply - hatchTokens;\\r\\n        }\\r\\n\\r\\n        uint priceAtSupply = baseCost.add(priceRise.mul(updatedSupply).div(10**18));\\r\\n        uint priceAtSupplyPlusAmount = baseCost.add(priceRise.mul(updatedSupply.add(updatedAmount)).div(10**18));\\r\\n        uint average = priceAtSupply.add(priceAtSupplyPlusAmount).div(2);\\r\\n\\r\\n        return hatchCost.add(average.mul(updatedAmount).div(10**18));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Withdraws available interest for a publisher\\r\\n     *\\r\\n     * @param token The token from which the generated interest is to be withdrawn\\r\\n     */\\r\\n    function withdrawTokenInterest(address token) external override {\\r\\n        require(_tokenOwner[token] == msg.sender, \\\"not-authorized\\\");\\r\\n        _interestManager.accrueInterest();\\r\\n\\r\\n        uint interestPayable = getInterestPayable(token);\\r\\n        if(interestPayable == 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        ExchangeInfo storage exchangeInfo = _tokensExchangeInfo[token];\\r\\n        exchangeInfo.invested = exchangeInfo.invested.sub(_interestManager.redeem(msg.sender, interestPayable));\\r\\n\\r\\n        emit TokenInterestRedeemed(token, exchangeInfo.invested, interestPayable);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the interest available to be paid out for a token\\r\\n     *\\r\\n     * @param token The token from which the generated interest is to be withdrawn\\r\\n     *\\r\\n     * @return The interest available to be paid out\\r\\n     */\\r\\n    function getInterestPayable(address token) public view override returns (uint) {\\r\\n        ExchangeInfo storage exchangeInfo = _tokensExchangeInfo[token];\\r\\n        return _interestManager.investmentTokenToUnderlying(exchangeInfo.invested).sub(exchangeInfo.dai);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Sets an address as owner of a token, allowing the address to withdraw interest\\r\\n     *\\r\\n     * @param token The token for which to authorize an address\\r\\n     * @param owner The address to be set as owner\\r\\n     */\\r\\n    function setTokenOwner(address token, address owner) external override {\\r\\n        address sender = msg.sender;\\r\\n        address current = _tokenOwner[token];\\r\\n\\r\\n        require((current == address(0) \\u0026\\u0026 (sender == _owner || sender == _authorizer)) ||\\r\\n                (current != address(0) \\u0026\\u0026 (sender == _owner || sender == current)),\\r\\n                \\\"not-authorized\\\");\\r\\n\\r\\n        _tokenOwner[token] = owner;\\r\\n\\r\\n        emit NewTokenOwner(token, owner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Withdraws available interest for a platform\\r\\n     *\\r\\n     * @param marketID The market id from which the generated interest is to be withdrawn\\r\\n     */\\r\\n    function withdrawPlatformInterest(uint marketID) external override {\\r\\n        address sender = msg.sender;\\r\\n\\r\\n        require(_platformOwner[marketID] == sender, \\\"not-authorized\\\");\\r\\n        _interestManager.accrueInterest();\\r\\n\\r\\n        uint platformInterestPayable = getPlatformInterestPayable(marketID);\\r\\n        if(platformInterestPayable == 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        ExchangeInfo storage exchangeInfo = _platformsExchangeInfo[marketID];\\r\\n        exchangeInfo.invested = exchangeInfo.invested.sub(_interestManager.redeem(sender, platformInterestPayable));\\r\\n\\r\\n        emit PlatformInterestRedeemed(marketID, exchangeInfo.invested, platformInterestPayable);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the interest available to be paid out for a platform\\r\\n     *\\r\\n     * @param marketID The market id from which the generated interest is to be withdrawn\\r\\n     *\\r\\n     * @return The interest available to be paid out\\r\\n     */\\r\\n    function getPlatformInterestPayable(uint marketID) public view override returns (uint) {\\r\\n        ExchangeInfo storage exchangeInfo = _platformsExchangeInfo[marketID];\\r\\n        return _interestManager.investmentTokenToUnderlying(exchangeInfo.invested).sub(exchangeInfo.dai);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Withdraws available platform fee\\r\\n     *\\r\\n     * @param marketID The market from which the generated platform fee is to be withdrawn\\r\\n     */\\r\\n    function withdrawPlatformFee(uint marketID) external override {\\r\\n        address sender = msg.sender;\\r\\n    \\r\\n        require(_platformOwner[marketID] == sender, \\\"not-authorized\\\");\\r\\n        _interestManager.accrueInterest();\\r\\n\\r\\n        uint platformFeePayable = getPlatformFeePayable(marketID);\\r\\n        if(platformFeePayable == 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        _platformFeeInvested[marketID] = 0;\\r\\n        _interestManager.redeem(sender, platformFeePayable);\\r\\n\\r\\n        emit PlatformFeeRedeemed(marketID, platformFeePayable);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the platform fee available to be paid out\\r\\n     *\\r\\n     * @param marketID The market from which the generated interest is to be withdrawn\\r\\n     *\\r\\n     * @return The platform fee available to be paid out\\r\\n     */\\r\\n    function getPlatformFeePayable(uint marketID) public view override returns (uint) {\\r\\n        return _interestManager.investmentTokenToUnderlying(_platformFeeInvested[marketID]);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Authorizes an address as owner of a platform/market, which is allowed to withdraw platform fee and platform interest\\r\\n     *\\r\\n     * @param marketID The market for which to authorize an address\\r\\n     * @param owner The address to be authorized\\r\\n     */\\r\\n    function setPlatformOwner(uint marketID, address owner) external override {\\r\\n        address sender = msg.sender;\\r\\n        address current = _platformOwner[marketID];\\r\\n\\r\\n        require((current == address(0) \\u0026\\u0026 (sender == _owner || sender == _authorizer)) ||\\r\\n                (current != address(0) \\u0026\\u0026 (sender == _owner || sender == current)),\\r\\n                \\\"not-authorized\\\");\\r\\n        \\r\\n        _platformOwner[marketID] = owner;\\r\\n\\r\\n        emit NewPlatformOwner(marketID, owner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Withdraws available trading fee\\r\\n     */\\r\\n    function withdrawTradingFee() external override {\\r\\n\\r\\n        uint invested = _tradingFeeInvested;\\r\\n        if(invested == 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        _interestManager.accrueInterest();\\r\\n\\r\\n        _tradingFeeInvested = 0;\\r\\n        uint redeem = _interestManager.investmentTokenToUnderlying(invested);\\r\\n        _interestManager.redeem(_tradingFeeRecipient, redeem);\\r\\n\\r\\n        emit TradingFeeRedeemed(redeem);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the trading fee available to be paid out\\r\\n     *\\r\\n     * @return The trading fee available to be paid out\\r\\n     */\\r\\n    function getTradingFeePayable() public view override returns (uint) {\\r\\n        return _interestManager.investmentTokenToUnderlying(_tradingFeeInvested);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Sets the authorizer address\\r\\n     *\\r\\n     * @param authorizer The new authorizer address\\r\\n     */\\r\\n    function setAuthorizer(address authorizer) external override onlyOwner {\\r\\n        require(authorizer != address(0), \\\"invalid-params\\\");\\r\\n        _authorizer = authorizer;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns whether or not fees are disabled for a specific IdeaToken\\r\\n     *\\r\\n     * @param ideaToken The IdeaToken\\r\\n     *\\r\\n     * @return Whether or not fees are disabled for a specific IdeaToken\\r\\n     */\\r\\n    function isTokenFeeDisabled(address ideaToken) external view override returns (bool) {\\r\\n        return _tokenFeeKillswitch[ideaToken];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Sets the fee killswitch for an IdeaToken\\r\\n     *\\r\\n     * @param ideaToken The IdeaToken\\r\\n     * @param set Whether or not to enable the killswitch\\r\\n     */\\r\\n    function setTokenFeeKillswitch(address ideaToken, bool set) external override onlyOwner {\\r\\n        _tokenFeeKillswitch[ideaToken] = set;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Sets the IdeaTokenFactory address. Only required once for deployment\\r\\n     *\\r\\n     * @param factory The address of the IdeaTokenFactory \\r\\n     */\\r\\n    function setIdeaTokenFactoryAddress(address factory) external onlyOwner {\\r\\n        require(address(_ideaTokenFactory) == address(0));\\r\\n        _ideaTokenFactory = IIdeaTokenFactory(factory);\\r\\n    }\\r\\n}\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"IIdeaToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.9;\\r\\n\\r\\nimport \\\"IERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title IIdeaToken\\r\\n * @author Alexander Schlindwein\\r\\n */\\r\\ninterface IIdeaToken is IERC20 {\\r\\n    function initialize(string calldata __name, address owner) external;\\r\\n    function mint(address account, uint256 amount) external;\\r\\n    function burn(address account, uint256 amount) external;\\r\\n}\"},\"IIdeaTokenExchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.9;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"IIdeaTokenFactory.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title IIdeaTokenExchange\\r\\n * @author Alexander Schlindwein\\r\\n */\\r\\n\\r\\nstruct CostAndPriceAmounts {\\r\\n    uint total;\\r\\n    uint raw;\\r\\n    uint tradingFee;\\r\\n    uint platformFee;\\r\\n}\\r\\n\\r\\ninterface IIdeaTokenExchange {\\r\\n    function sellTokens(address ideaToken, uint amount, uint minPrice, address recipient) external;\\r\\n    function getPriceForSellingTokens(address ideaToken, uint amount) external view returns (uint);\\r\\n    function getPricesForSellingTokens(MarketDetails memory marketDetails, uint supply, uint amount, bool feesDisabled) external pure returns (CostAndPriceAmounts memory);\\r\\n    function buyTokens(address ideaToken, uint amount, uint fallbackAmount, uint cost, address recipient) external;\\r\\n    function getCostForBuyingTokens(address ideaToken, uint amount) external view returns (uint);\\r\\n    function getCostsForBuyingTokens(MarketDetails memory marketDetails, uint supply, uint amount, bool feesDisabled) external pure returns (CostAndPriceAmounts memory);\\r\\n    function setTokenOwner(address ideaToken, address owner) external;\\r\\n    function setPlatformOwner(uint marketID, address owner) external;\\r\\n    function withdrawTradingFee() external;\\r\\n    function withdrawTokenInterest(address token) external;\\r\\n    function withdrawPlatformInterest(uint marketID) external;\\r\\n    function withdrawPlatformFee(uint marketID) external;\\r\\n    function getInterestPayable(address token) external view returns (uint);\\r\\n    function getPlatformInterestPayable(uint marketID) external view returns (uint);\\r\\n    function getPlatformFeePayable(uint marketID) external view returns (uint);\\r\\n    function getTradingFeePayable() external view returns (uint);\\r\\n    function setAuthorizer(address authorizer) external;\\r\\n    function isTokenFeeDisabled(address ideaToken) external view returns (bool);\\r\\n    function setTokenFeeKillswitch(address ideaToken, bool set) external;\\r\\n}\"},\"IIdeaTokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.9;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"IIdeaTokenNameVerifier.sol\\\";\\r\\nimport \\\"IIdeaToken.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title IIdeaTokenFactory\\r\\n * @author Alexander Schlindwein\\r\\n */\\r\\n\\r\\nstruct IDPair {\\r\\n    bool exists;\\r\\n    uint marketID;\\r\\n    uint tokenID;\\r\\n}\\r\\n\\r\\nstruct TokenInfo {\\r\\n    bool exists;\\r\\n    uint id;\\r\\n    string name;\\r\\n    IIdeaToken ideaToken;\\r\\n}\\r\\n\\r\\nstruct MarketDetails {\\r\\n    bool exists;\\r\\n    uint id;\\r\\n    string name;\\r\\n\\r\\n    IIdeaTokenNameVerifier nameVerifier;\\r\\n    uint numTokens;\\r\\n\\r\\n    uint baseCost;\\r\\n    uint priceRise;\\r\\n    uint hatchTokens;\\r\\n    uint tradingFeeRate;\\r\\n    uint platformFeeRate;\\r\\n\\r\\n    bool allInterestToPlatform;\\r\\n}\\r\\n\\r\\ninterface IIdeaTokenFactory {\\r\\n    function addMarket(string calldata marketName, address nameVerifier,\\r\\n                       uint baseCost, uint priceRise, uint hatchTokens,\\r\\n                       uint tradingFeeRate, uint platformFeeRate, bool allInterestToPlatform) external;\\r\\n\\r\\n    function addToken(string calldata tokenName, uint marketID, address lister) external;\\r\\n\\r\\n    function isValidTokenName(string calldata tokenName, uint marketID) external view returns (bool);\\r\\n    function getMarketIDByName(string calldata marketName) external view returns (uint);\\r\\n    function getMarketDetailsByID(uint marketID) external view returns (MarketDetails memory);\\r\\n    function getMarketDetailsByName(string calldata marketName) external view returns (MarketDetails memory);\\r\\n    function getMarketDetailsByTokenAddress(address ideaToken) external view returns (MarketDetails memory);\\r\\n    function getNumMarkets() external view returns (uint);\\r\\n    function getTokenIDByName(string calldata tokenName, uint marketID) external view returns (uint);\\r\\n    function getTokenInfo(uint marketID, uint tokenID) external view returns (TokenInfo memory);\\r\\n    function getTokenIDPair(address token) external view returns (IDPair memory);\\r\\n    function setTradingFee(uint marketID, uint tradingFeeRate) external;\\r\\n    function setPlatformFee(uint marketID, uint platformFeeRate) external;\\r\\n    function setNameVerifier(uint marketID, address nameVerifier) external;\\r\\n}\"},\"IIdeaTokenNameVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.9;\\r\\n\\r\\n/**\\r\\n * @title IIdeaTokenNameVerifier\\r\\n * @author Alexander Schlindwein\\r\\n *\\r\\n * Interface for token name verifiers\\r\\n */\\r\\ninterface IIdeaTokenNameVerifier {\\r\\n    function verifyTokenName(string calldata name) external pure returns (bool);\\r\\n}\"},\"IInterestManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.9;\\r\\n\\r\\n/**\\r\\n * @title IInterestManager\\r\\n * @author Alexander Schlindwein\\r\\n */\\r\\ninterface IInterestManager {\\r\\n    function invest(uint amount) external returns (uint);\\r\\n    function redeem(address recipient, uint amount) external returns (uint);\\r\\n    function redeemInvestmentToken(address recipient, uint amount) external returns (uint);\\r\\n    function donateInterest(uint amount) external;\\r\\n    function redeemDonated(uint amount) external;\\r\\n    function accrueInterest() external;\\r\\n    function underlyingToInvestmentToken(uint underlyingAmount) external view returns (uint);\\r\\n    function investmentTokenToUnderlying(uint investmentTokenAmount) external view returns (uint);\\r\\n}\"},\"Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/contracts/Initializable.sol\\r\\n\\r\\npragma solidity 0.6.9;\\r\\n\\r\\n\\r\\n/**\\r\\n * @title Initializable\\r\\n *\\r\\n * @dev Helper contract to support initializer functions. To use it, replace\\r\\n * the constructor with a function that has the `initializer` modifier.\\r\\n * WARNING: Unlike constructors, initializer functions must be manually\\r\\n * invoked. This applies both to deploying an Initializable contract, as well\\r\\n * as extending an Initializable contract via inheritance.\\r\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\r\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\r\\n * because this is not dealt with automatically as with constructors.\\r\\n */\\r\\ncontract Initializable {\\r\\n\\r\\n  /**\\r\\n   * @dev Indicates that the contract has been initialized.\\r\\n   */\\r\\n  bool private initialized;\\r\\n\\r\\n  /**\\r\\n   * @dev Indicates that the contract is in the process of being initialized.\\r\\n   */\\r\\n  bool private initializing;\\r\\n\\r\\n  /**\\r\\n   * @dev Modifier to use in the initializer function of a contract.\\r\\n   */\\r\\n  modifier initializer() {\\r\\n    require(initializing || isConstructor() || !initialized, \\\"already-initialized\\\");\\r\\n\\r\\n    bool isTopLevelCall = !initializing;\\r\\n    if (isTopLevelCall) {\\r\\n      initializing = true;\\r\\n      initialized = true;\\r\\n    }\\r\\n\\r\\n    _;\\r\\n\\r\\n    if (isTopLevelCall) {\\r\\n      initializing = false;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev Returns true if and only if the function is running in the constructor\\r\\n  function isConstructor() private view returns (bool) {\\r\\n    // extcodesize checks the size of the code stored in an address, and\\r\\n    // address returns the current address. Since the code is still not\\r\\n    // deployed when running a constructor, any checks on its code size will\\r\\n    // yield zero, making it an effective way to detect if a contract is\\r\\n    // under construction or not.\\r\\n    address self = address(this);\\r\\n    uint256 cs;\\r\\n    assembly { cs := extcodesize(self) }\\r\\n    return cs == 0;\\r\\n  }\\r\\n\\r\\n  // Reserved storage space to allow for layout changes in the future.\\r\\n  uint256[50] private ______gap;\\r\\n}\"},\"InterestManagerCompound.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.9;\\r\\n\\r\\nimport \\\"IInterestManager.sol\\\";\\r\\nimport \\\"Ownable.sol\\\";\\r\\nimport \\\"ICToken.sol\\\";\\r\\nimport \\\"IComptroller.sol\\\";\\r\\nimport \\\"IERC20.sol\\\";\\r\\nimport \\\"Initializable.sol\\\";\\r\\nimport \\\"SafeMath.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title InterestManagerCompound\\r\\n * @author Alexander Schlindwein\\r\\n * \\r\\n * Invests DAI into Compound to generate interest\\r\\n * Sits behind an AdminUpgradabilityProxy \\r\\n */\\r\\ncontract InterestManagerCompound is Ownable, Initializable {\\r\\n\\r\\n    using SafeMath for uint;\\r\\n\\r\\n    // Dai contract\\r\\n    IERC20 private _dai;\\r\\n    // cDai contract\\r\\n    ICToken private _cDai;\\r\\n    // COMP contract\\r\\n    IERC20 private _comp;\\r\\n    // Address which is allowed to withdraw accrued COMP tokens\\r\\n    address private _compRecipient;\\r\\n\\r\\n    /**\\r\\n     * Initializes the contract with all required values\\r\\n     *\\r\\n     * @param owner The owner of the contract\\r\\n     * @param dai The Dai token address\\r\\n     * @param cDai The cDai token address\\r\\n     * @param comp The Comp token address\\r\\n     * @param compRecipient The address of the recipient of the Comp tokens\\r\\n     */\\r\\n    function initialize(address owner, address dai, address cDai, address comp, address compRecipient) external initializer {\\r\\n        require(dai != address(0) \\u0026\\u0026\\r\\n                cDai != address(0) \\u0026\\u0026 \\r\\n                comp != address(0) \\u0026\\u0026\\r\\n                compRecipient != address(0),\\r\\n                \\\"invalid-params\\\");\\r\\n\\r\\n        setOwnerInternal(owner); // Checks owner to be non-zero\\r\\n        _dai = IERC20(dai);\\r\\n        _cDai = ICToken(cDai);\\r\\n        _comp = IERC20(comp);\\r\\n        _compRecipient = compRecipient;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Invests a given amount of Dai into Compound\\r\\n     * The Dai have to be transfered to this contract before this function is called\\r\\n     *\\r\\n     * @param amount The amount of Dai to invest\\r\\n     *\\r\\n     * @return The amount of minted cDai\\r\\n     */\\r\\n    function invest(uint amount) external onlyOwner returns (uint) {\\r\\n        uint balanceBefore = _cDai.balanceOf(address(this));\\r\\n        require(_dai.balanceOf(address(this)) \\u003e= amount, \\\"insufficient-dai\\\");\\r\\n        require(_dai.approve(address(_cDai), amount), \\\"dai-cdai-approve\\\");\\r\\n        require(_cDai.mint(amount) == 0, \\\"cdai-mint\\\");\\r\\n        uint balanceAfter = _cDai.balanceOf(address(this));\\r\\n        return balanceAfter.sub(balanceBefore);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Redeems a given amount of Dai from Compound and sends it to the recipient\\r\\n     *\\r\\n     * @param recipient The recipient of the redeemed Dai\\r\\n     * @param amount The amount of Dai to redeem\\r\\n     *\\r\\n     * @return The amount of burned cDai\\r\\n     */\\r\\n    function redeem(address recipient, uint amount) external onlyOwner returns (uint) {\\r\\n        uint balanceBefore = _cDai.balanceOf(address(this));\\r\\n        require(_cDai.redeemUnderlying(amount) == 0, \\\"redeem\\\");\\r\\n        uint balanceAfter = _cDai.balanceOf(address(this));\\r\\n        require(_dai.transfer(recipient, amount), \\\"dai-transfer\\\");\\r\\n        return balanceBefore.sub(balanceAfter);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Redeems a given amount of cDai from Compound and sends Dai to the recipient\\r\\n     *\\r\\n     * @param recipient The recipient of the redeemed Dai\\r\\n     * @param amount The amount of cDai to redeem\\r\\n     *\\r\\n     * @return The amount of redeemed Dai\\r\\n     */\\r\\n    function redeemInvestmentToken(address recipient, uint amount) external onlyOwner returns (uint) {\\r\\n        uint balanceBefore = _dai.balanceOf(address(this));\\r\\n        require(_cDai.redeem(amount) == 0, \\\"redeem\\\");\\r\\n        uint redeemed = _dai.balanceOf(address(this)).sub(balanceBefore);\\r\\n        require(_dai.transfer(recipient, redeemed), \\\"dai-transfer\\\");\\r\\n        return redeemed;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Updates accrued interest on the invested Dai\\r\\n     */\\r\\n    function accrueInterest() external {\\r\\n        require(_cDai.accrueInterest() == 0, \\\"accrue\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Withdraws the generated Comp tokens to the Comp recipient\\r\\n     */\\r\\n    function withdrawComp() external {\\r\\n        address addr = address(this);\\r\\n        IComptroller(_cDai.comptroller()).claimComp(addr);\\r\\n        require(_comp.transfer(_compRecipient, _comp.balanceOf(addr)), \\\"comp-transfer\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Converts an amount of underlying tokens to an amount of investment tokens\\r\\n     *\\r\\n     * @param underlyingAmount The amount of underlying tokens\\r\\n     *\\r\\n     * @return The amount of investment tokens\\r\\n     */\\r\\n    function underlyingToInvestmentToken(uint underlyingAmount) external view returns (uint) {\\r\\n        return divScalarByExpTruncate(underlyingAmount, _cDai.exchangeRateStored());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Converts an amount of investment tokens to an amount of underlying tokens\\r\\n     *\\r\\n     * @param investmentTokenAmount The amount of investment tokens\\r\\n     *\\r\\n     * @return The amount of underlying tokens\\r\\n     */\\r\\n    function investmentTokenToUnderlying(uint investmentTokenAmount) external view returns (uint) {\\r\\n        return mulScalarTruncate(investmentTokenAmount, _cDai.exchangeRateStored());\\r\\n    }\\r\\n\\r\\n    // ====================================== COMPOUND MATH ======================================\\r\\n    // https://github.com/compound-finance/compound-protocol/blob/master/contracts/Exponential.sol\\r\\n    //\\r\\n    // Modified to revert instead of returning an error code\\r\\n\\r\\n    function mulScalarTruncate(uint a, uint scalar) pure internal returns (uint) {\\r\\n        uint product = mulScalar(a, scalar);\\r\\n        return truncate(product);\\r\\n    }\\r\\n\\r\\n    function mulScalar(uint a, uint scalar) pure internal returns (uint) {\\r\\n        return a.mul(scalar);\\r\\n    }\\r\\n\\r\\n    function divScalarByExpTruncate(uint scalar, uint divisor) pure internal returns (uint) {\\r\\n        uint fraction = divScalarByExp(scalar, divisor);\\r\\n        return truncate(fraction);\\r\\n    }\\r\\n\\r\\n    function divScalarByExp(uint scalar, uint divisor) pure internal returns (uint) {\\r\\n        uint numerator = uint(10**18).mul(scalar);\\r\\n        return getExp(numerator, divisor);\\r\\n    }\\r\\n\\r\\n    function getExp(uint num, uint denom) pure internal returns (uint) {\\r\\n        uint scaledNumerator = num.mul(10**18);\\r\\n        return scaledNumerator.div(denom);\\r\\n    }\\r\\n\\r\\n    function truncate(uint num) pure internal returns (uint) {\\r\\n        return num / 10**18;\\r\\n    }\\r\\n\\r\\n}\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.9;\\r\\n\\r\\n/**\\r\\n * @title Ownable\\r\\n * @author Alexander Schlindwein\\r\\n *\\r\\n * @dev Implements only-owner functionality\\r\\n */\\r\\ncontract Ownable {\\r\\n\\r\\n    address _owner;\\r\\n\\r\\n    event OwnershipChanged(address oldOwner, address newOwner);\\r\\n\\r\\n    modifier onlyOwner {\\r\\n        require(_owner == msg.sender, \\\"only-owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function setOwner(address newOwner) external onlyOwner {\\r\\n        setOwnerInternal(newOwner);\\r\\n    }\\r\\n\\r\\n    function setOwnerInternal(address newOwner) internal {\\r\\n        require(newOwner != address(0), \\\"zero-addr\\\");\\r\\n\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n\\r\\n        emit OwnershipChanged(oldOwner, newOwner);\\r\\n    }\\r\\n\\r\\n    function getOwner() external view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n}\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accrueInterest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dai\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cDai\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"comp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"compRecipient\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"invest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"investmentTokenAmount\",\"type\":\"uint256\"}],\"name\":\"investmentTokenToUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeemInvestmentToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"underlyingAmount\",\"type\":\"uint256\"}],\"name\":\"underlyingToInvestmentToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawComp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"InterestManagerCompound","CompilerVersion":"v0.6.9+commit.3e3065ac","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://356eca279555dedb00b8a1df39ebc87dc8d62d10cea65f07bf75fca3d197f71b"}]}