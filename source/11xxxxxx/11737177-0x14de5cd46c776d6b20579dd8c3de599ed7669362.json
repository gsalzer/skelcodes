{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.2;\n\n\ninterface ISynthetix {\n    function exchange(\n        bytes32 sourceCurrencyKey,\n        uint256 sourceAmount,\n        bytes32 destinationCurrencyKey\n    ) external returns (uint256 amountReceived);\n\n    function exchangeWithTracking(\n        bytes32 sourceCurrencyKey,\n        uint256 sourceAmount,\n        bytes32 destinationCurrencyKey,\n        address originator,\n        bytes32 trackingCode\n    ) external returns (uint256 amountReceived);\n\n    function synths(bytes32 key)\n        external\n        view\n        returns (address synthTokenAddress);\n\n    function settle(bytes32 currencyKey)\n        external\n        returns (\n            uint256 reclaimed,\n            uint256 refunded,\n            uint256 numEntriesSettled\n        );\n}\n\ninterface IExchangeRates {\n    function effectiveValue(\n        bytes32 sourceCurrencyKey,\n        uint256 sourceAmount,\n        bytes32 destinationCurrencyKey\n    ) external view returns (uint256);\n\n    function rateForCurrency(bytes32 currencyKey)\n        external\n        view\n        returns (uint256);\n}\n\ninterface IAddressResolver {\n    function getAddress(bytes32 name) external view returns (address);\n}\n\ninterface IExchanger {\n\n    function settle(address from, bytes32 currencyKey)\n        external\n        returns (\n            uint reclaimed,\n            uint refunded,\n            uint numEntries\n        );\n\n    function maxSecsLeftInWaitingPeriod(address account, bytes32 currencyKey) external view returns (uint);\n\n    function settlementOwing(address account, bytes32 currencyKey)\n        external\n        view\n        returns (\n            uint reclaimAmount,\n            uint rebateAmount,\n            uint numEntries\n        );\n\n}\n\ninterface ISynth {\n    function proxy() external view returns (address);\n\n    // Mutative functions\n    function transferAndSettle(address to, uint256 value)\n        external\n        returns (bool);\n\n    function transferFromAndSettle(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool);\n}\n\ninterface ISystemStatus {\n    struct Status {\n        bool canSuspend;\n        bool canResume;\n    }\n\n    struct Suspension {\n        bool suspended;\n        // reason is an integer code,\n        // 0 => no reason, 1 => upgrading, 2+ => defined by system usage\n        uint248 reason;\n    }\n\n    // Views\n    function requireSynthActive(bytes32 currencyKey) external view;\n}\n\n/**\n * @title Initializable\n *\n * @dev Helper contract to support initializer functions. To use it, replace\n * the constructor with a function that has the `initializer` modifier.\n * WARNING: Unlike constructors, initializer functions must be manually\n * invoked. This applies both to deploying an Initializable contract, as well\n * as extending an Initializable contract via inheritance.\n * WARNING: When used with inheritance, manual care must be taken to not invoke\n * a parent initializer twice, or ensure that all initializers are idempotent,\n * because this is not dealt with automatically as with constructors.\n */\ncontract Initializable {\n\n  /**\n   * @dev Indicates that the contract has been initialized.\n   */\n  bool private initialized;\n\n  /**\n   * @dev Indicates that the contract is in the process of being initialized.\n   */\n  bool private initializing;\n\n  /**\n   * @dev Modifier to use in the initializer function of a contract.\n   */\n  modifier initializer() {\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\n\n    bool isTopLevelCall = !initializing;\n    if (isTopLevelCall) {\n      initializing = true;\n      initialized = true;\n    }\n\n    _;\n\n    if (isTopLevelCall) {\n      initializing = false;\n    }\n  }\n\n  /// @dev Returns true if and only if the function is running in the constructor\n  function isConstructor() private view returns (bool) {\n    // extcodesize checks the size of the code stored in an address, and\n    // address returns the current address. Since the code is still not\n    // deployed when running a constructor, any checks on its code size will\n    // yield zero, making it an effective way to detect if a contract is\n    // under construction or not.\n    address self = address(this);\n    uint256 cs;\n    assembly { cs := extcodesize(self) }\n    return cs == 0;\n  }\n\n  // Reserved storage space to allow for layout changes in the future.\n  uint256[50] private ______gap;\n}\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n//\n//        __  __    __  ________  _______    ______   ________\n//       /  |/  |  /  |/        |/       \\  /      \\ /        |\n//   ____$$ |$$ |  $$ |$$$$$$$$/ $$$$$$$  |/$$$$$$  |$$$$$$$$/\n//  /    $$ |$$ |__$$ |$$ |__    $$ |  $$ |$$ | _$$/ $$ |__\n// /$$$$$$$ |$$    $$ |$$    |   $$ |  $$ |$$ |/    |$$    |\n// $$ |  $$ |$$$$$$$$ |$$$$$/    $$ |  $$ |$$ |$$$$ |$$$$$/\n// $$ \\__$$ |$$ |  $$ |$$ |_____ $$ |__$$ |$$ \\__$$ |$$ |_____\n// $$    $$ |$$ |  $$ |$$       |$$    $$/ $$    $$/ $$       |\n//  $$$$$$$/ $$/   $$/ $$$$$$$$/ $$$$$$$/   $$$$$$/  $$$$$$$$/\n//\n// dHEDGE DAO - https://dhedge.org\n//\n// MIT License\n// ===========\n//\n// Copyright (c) 2020 dHEDGE DAO\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n//\ncontract Managed is Initializable {\n    using SafeMath for uint256;\n\n    event ManagerUpdated(address newManager, string newManagerName);\n\n    address private _manager;\n    string private _managerName;\n\n    address[] private _memberList;\n    mapping(address => uint256) private _memberPosition;\n\n    function initialize(address manager, string memory managerName)\n        internal\n        initializer\n    {\n        _manager = manager;\n        _managerName = managerName;\n    }\n\n    modifier onlyManager() {\n        require(msg.sender == _manager, \"only manager\");\n        _;\n    }\n\n    function managerName() public view returns (string memory) {\n        return _managerName;\n    }\n\n    function manager() public view returns (address) {\n        return _manager;\n    }\n\n    function isMemberAllowed(address member) public view returns (bool) {\n        return _memberPosition[member] != 0;\n    }\n\n    function getMembers() public view returns (address[] memory) {\n        return _memberList;\n    }\n\n    function changeManager(address newManager, string memory newManagerName)\n        public\n        onlyManager\n    {\n        _manager = newManager;\n        _managerName = newManagerName;\n        emit ManagerUpdated(newManager, newManagerName);\n    }\n\n    function addMembers(address[] memory members) public onlyManager {\n        for (uint256 i = 0; i < members.length; i++) {\n            if (isMemberAllowed(members[i]))\n                continue;\n\n            _addMember(members[i]);\n        }\n    }\n\n    function removeMembers(address[] memory members) public onlyManager {\n        for (uint256 i = 0; i < members.length; i++) {\n            if (!isMemberAllowed(members[i]))\n                continue;\n\n            _removeMember(members[i]);\n        }\n    }\n\n    function addMember(address member) public onlyManager {\n        if (isMemberAllowed(member))\n            return;\n\n        _addMember(member);\n    }\n\n    function removeMember(address member) public onlyManager {\n        if (!isMemberAllowed(member))\n            return;\n\n        _removeMember(member);\n    }\n\n    function numberOfMembers() public view returns (uint256) {\n        return _memberList.length;\n    }\n\n    function _addMember(address member) internal {\n        _memberList.push(member);\n        _memberPosition[member] = _memberList.length;\n    }\n\n    function _removeMember(address member) internal {\n        uint256 length = _memberList.length;\n        uint256 index = _memberPosition[member].sub(1);\n\n        address lastMember = _memberList[length.sub(1)];\n\n        _memberList[index] = lastMember;\n        _memberPosition[lastMember] = index.add(1);\n        _memberPosition[member] = 0;\n\n        _memberList.pop();\n    }\n\n    uint256[50] private __gap;\n}\n\n//\n//        __  __    __  ________  _______    ______   ________\n//       /  |/  |  /  |/        |/       \\  /      \\ /        |\n//   ____$$ |$$ |  $$ |$$$$$$$$/ $$$$$$$  |/$$$$$$  |$$$$$$$$/\n//  /    $$ |$$ |__$$ |$$ |__    $$ |  $$ |$$ | _$$/ $$ |__\n// /$$$$$$$ |$$    $$ |$$    |   $$ |  $$ |$$ |/    |$$    |\n// $$ |  $$ |$$$$$$$$ |$$$$$/    $$ |  $$ |$$ |$$$$ |$$$$$/\n// $$ \\__$$ |$$ |  $$ |$$ |_____ $$ |__$$ |$$ \\__$$ |$$ |_____\n// $$    $$ |$$ |  $$ |$$       |$$    $$/ $$    $$/ $$       |\n//  $$$$$$$/ $$/   $$/ $$$$$$$$/ $$$$$$$/   $$$$$$/  $$$$$$$$/\n//\n// dHEDGE DAO - https://dhedge.org\n//\n// MIT License\n// ===========\n//\n// Copyright (c) 2020 dHEDGE DAO\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n//\ninterface IHasDaoInfo {\n    function getDaoFee() external view returns (uint256, uint256);\n\n    function getDaoAddress() external view returns (address);\n\n    function getAddressResolver() external view returns (IAddressResolver);\n}\n\n//\n//        __  __    __  ________  _______    ______   ________\n//       /  |/  |  /  |/        |/       \\  /      \\ /        |\n//   ____$$ |$$ |  $$ |$$$$$$$$/ $$$$$$$  |/$$$$$$  |$$$$$$$$/\n//  /    $$ |$$ |__$$ |$$ |__    $$ |  $$ |$$ | _$$/ $$ |__\n// /$$$$$$$ |$$    $$ |$$    |   $$ |  $$ |$$ |/    |$$    |\n// $$ |  $$ |$$$$$$$$ |$$$$$/    $$ |  $$ |$$ |$$$$ |$$$$$/\n// $$ \\__$$ |$$ |  $$ |$$ |_____ $$ |__$$ |$$ \\__$$ |$$ |_____\n// $$    $$ |$$ |  $$ |$$       |$$    $$/ $$    $$/ $$       |\n//  $$$$$$$/ $$/   $$/ $$$$$$$$/ $$$$$$$/   $$$$$$/  $$$$$$$$/\n//\n// dHEDGE DAO - https://dhedge.org\n//\n// MIT License\n// ===========\n//\n// Copyright (c) 2020 dHEDGE DAO\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n//\ninterface IHasFeeInfo {\n    // Manager fee\n    function getPoolManagerFee(address pool) external view returns (uint256, uint256);\n    function setPoolManagerFeeNumerator(address pool, uint256 numerator) external;\n   \n    // Exit fee\n    function getExitFee() external view returns (uint256, uint256);\n    function getExitFeeCooldown() external view returns (uint256);\n\n    // Synthetix tracking\n    function getTrackingCode() external view returns (bytes32);\n}\n\n//\n//        __  __    __  ________  _______    ______   ________\n//       /  |/  |  /  |/        |/       \\  /      \\ /        |\n//   ____$$ |$$ |  $$ |$$$$$$$$/ $$$$$$$  |/$$$$$$  |$$$$$$$$/\n//  /    $$ |$$ |__$$ |$$ |__    $$ |  $$ |$$ | _$$/ $$ |__\n// /$$$$$$$ |$$    $$ |$$    |   $$ |  $$ |$$ |/    |$$    |\n// $$ |  $$ |$$$$$$$$ |$$$$$/    $$ |  $$ |$$ |$$$$ |$$$$$/\n// $$ \\__$$ |$$ |  $$ |$$ |_____ $$ |__$$ |$$ \\__$$ |$$ |_____\n// $$    $$ |$$ |  $$ |$$       |$$    $$/ $$    $$/ $$       |\n//  $$$$$$$/ $$/   $$/ $$$$$$$$/ $$$$$$$/   $$$$$$/  $$$$$$$$/\n//\n// dHEDGE DAO - https://dhedge.org\n//\n// MIT License\n// ===========\n//\n// Copyright (c) 2020 dHEDGE DAO\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n//\ninterface IHasAssetInfo {\n    function getMaximumSupportedAssetCount() external view returns (uint256);\n}\n\n//\n//        __  __    __  ________  _______    ______   ________\n//       /  |/  |  /  |/        |/       \\  /      \\ /        |\n//   ____$$ |$$ |  $$ |$$$$$$$$/ $$$$$$$  |/$$$$$$  |$$$$$$$$/\n//  /    $$ |$$ |__$$ |$$ |__    $$ |  $$ |$$ | _$$/ $$ |__\n// /$$$$$$$ |$$    $$ |$$    |   $$ |  $$ |$$ |/    |$$    |\n// $$ |  $$ |$$$$$$$$ |$$$$$/    $$ |  $$ |$$ |$$$$ |$$$$$/\n// $$ \\__$$ |$$ |  $$ |$$ |_____ $$ |__$$ |$$ \\__$$ |$$ |_____\n// $$    $$ |$$ |  $$ |$$       |$$    $$/ $$    $$/ $$       |\n//  $$$$$$$/ $$/   $$/ $$$$$$$$/ $$$$$$$/   $$$$$$/  $$$$$$$$/\n//\n// dHEDGE DAO - https://dhedge.org\n//\n// MIT License\n// ===========\n//\n// Copyright (c) 2020 dHEDGE DAO\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n//\ninterface IReceivesUpgrade {\n    function receiveUpgrade(uint256 targetVersion) external;\n}\n\n//\n//        __  __    __  ________  _______    ______   ________\n//       /  |/  |  /  |/        |/       \\  /      \\ /        |\n//   ____$$ |$$ |  $$ |$$$$$$$$/ $$$$$$$  |/$$$$$$  |$$$$$$$$/\n//  /    $$ |$$ |__$$ |$$ |__    $$ |  $$ |$$ | _$$/ $$ |__\n// /$$$$$$$ |$$    $$ |$$    |   $$ |  $$ |$$ |/    |$$    |\n// $$ |  $$ |$$$$$$$$ |$$$$$/    $$ |  $$ |$$ |$$$$ |$$$$$/\n// $$ \\__$$ |$$ |  $$ |$$ |_____ $$ |__$$ |$$ \\__$$ |$$ |_____\n// $$    $$ |$$ |  $$ |$$       |$$    $$/ $$    $$/ $$       |\n//  $$$$$$$/ $$/   $$/ $$$$$$$$/ $$$$$$$/   $$$$$$/  $$$$$$$$/\n//\n// dHEDGE DAO - https://dhedge.org\n//\n// MIT License\n// ===========\n//\n// Copyright (c) 2020 dHEDGE DAO\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n//\ninterface IHasDhptSwapInfo {\n    // DHPT Swap Address\n    function getDhptSwapAddress() external view returns (address);\n}\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract ContextUpgradeSafe is Initializable {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n\n\n    }\n\n\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n\n    uint256[50] private __gap;\n}\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n}\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20MinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20UpgradeSafe is Initializable, ContextUpgradeSafe, IERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n\n    function __ERC20_init(string memory name, string memory symbol) internal initializer {\n        __Context_init_unchained();\n        __ERC20_init_unchained(name, symbol);\n    }\n\n    function __ERC20_init_unchained(string memory name, string memory symbol) internal initializer {\n\n\n        _name = name;\n        _symbol = symbol;\n        _decimals = 18;\n\n    }\n\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20};\n     *\n     * Requirements:\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n     *\n     * This is internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n\n    uint256[44] private __gap;\n}\n\n//\n//        __  __    __  ________  _______    ______   ________\n//       /  |/  |  /  |/        |/       \\  /      \\ /        |\n//   ____$$ |$$ |  $$ |$$$$$$$$/ $$$$$$$  |/$$$$$$  |$$$$$$$$/\n//  /    $$ |$$ |__$$ |$$ |__    $$ |  $$ |$$ | _$$/ $$ |__\n// /$$$$$$$ |$$    $$ |$$    |   $$ |  $$ |$$ |/    |$$    |\n// $$ |  $$ |$$$$$$$$ |$$$$$/    $$ |  $$ |$$ |$$$$ |$$$$$/\n// $$ \\__$$ |$$ |  $$ |$$ |_____ $$ |__$$ |$$ \\__$$ |$$ |_____\n// $$    $$ |$$ |  $$ |$$       |$$    $$/ $$    $$/ $$       |\n//  $$$$$$$/ $$/   $$/ $$$$$$$$/ $$$$$$$/   $$$$$$/  $$$$$$$$/\n//\n// dHEDGE DAO - https://dhedge.org\n//\n// MIT License\n// ===========\n//\n// Copyright (c) 2020 dHEDGE DAO\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n//\ncontract DHedge is Initializable, ERC20UpgradeSafe, Managed, IReceivesUpgrade {\n    using SafeMath for uint256;\n\n    bytes32 constant private _EXCHANGE_RATES_KEY = \"ExchangeRates\";\n    bytes32 constant private _SYNTHETIX_KEY = \"Synthetix\";\n    bytes32 constant private _EXCHANGER_KEY = \"Exchanger\";\n    bytes32 constant private _SYSTEM_STATUS_KEY = \"SystemStatus\";\n    bytes32 constant private _SUSD_KEY = \"sUSD\";\n\n    event Deposit(\n        address fundAddress,\n        address investor,\n        uint256 valueDeposited,\n        uint256 fundTokensReceived,\n        uint256 totalInvestorFundTokens,\n        uint256 fundValue,\n        uint256 totalSupply,\n        uint256 time\n    );\n    event Withdrawal(\n        address fundAddress,\n        address investor,\n        uint256 valueWithdrawn,\n        uint256 fundTokensWithdrawn,\n        uint256 totalInvestorFundTokens,\n        uint256 fundValue,\n        uint256 totalSupply,\n        uint256 time\n    );\n    event Exchange(\n        address fundAddress,\n        address manager,\n        bytes32 sourceKey,\n        uint256 sourceAmount,\n        bytes32 destinationKey,\n        uint256 destinationAmount,\n        uint256 time\n    );\n    event AssetAdded(address fundAddress, address manager, bytes32 assetKey);\n    event AssetRemoved(address fundAddress, address manager, bytes32 assetKey);\n\n    event PoolPrivacyUpdated(bool isPoolPrivate);\n\n    event ManagerFeeMinted(\n        address pool,\n        address manager,\n        uint256 available,\n        uint256 daoFee,\n        uint256 managerFee,\n        uint256 tokenPriceAtLastFeeMint\n    );\n\n    event ManagerFeeSet(\n        address fundAddress,\n        address manager,\n        uint256 numerator,\n        uint256 denominator\n    );\n\n    bool public privatePool;\n    address public creator;\n\n    uint256 public creationTime;\n\n    IAddressResolver public addressResolver;\n\n    address public factory;\n\n    bytes32[] public supportedAssets;\n    mapping(bytes32 => uint256) public assetPosition; // maps the asset to its 1-based position\n\n    mapping(bytes32 => bool) public persistentAsset;\n\n    // Manager fees\n    uint256 public tokenPriceAtLastFeeMint;\n\n    mapping(address => uint256) public lastDeposit;\n\n    modifier onlyPrivate() {\n        require(\n            msg.sender == manager() ||\n                !privatePool ||\n                isMemberAllowed(msg.sender),\n            \"only members allowed\"\n        );\n        _;\n    }\n\n    function initialize(\n        address _factory,\n        bool _privatePool,\n        address _manager,\n        string memory _managerName,\n        string memory _fundName,\n        IAddressResolver _addressResolver,\n        bytes32[] memory _supportedAssets\n    ) public initializer {\n        ERC20UpgradeSafe.__ERC20_init(_fundName, \"DHPT\");\n        Managed.initialize(_manager, _managerName);\n\n        factory = _factory;\n        _setPoolPrivacy(_privatePool);\n        creator = msg.sender;\n        creationTime = block.timestamp;\n        addressResolver = _addressResolver;\n\n        _addToSupportedAssets(_SUSD_KEY);\n\n        for(uint8 i = 0; i < _supportedAssets.length; i++) {\n            _addToSupportedAssets(_supportedAssets[i]);\n        }\n\n        // Set persistent assets\n        persistentAsset[_SUSD_KEY] = true;\n\n        tokenPriceAtLastFeeMint = 10**18;\n    }\n\n    function _beforeTokenTransfer(address from, address to, uint256 amount)\n        internal virtual override\n    {\n        super._beforeTokenTransfer(from, to, amount);\n\n        require(getExitFeeRemainingCooldown(from) == 0, \"cooldown active\");\n    }\n\n    function setPoolPrivate(bool _privatePool) public onlyManager {\n        require(privatePool != _privatePool, \"flag must be different\");\n\n        _setPoolPrivacy(_privatePool);\n    }\n\n    function _setPoolPrivacy(bool _privacy) internal {\n        privatePool = _privacy;\n\n        emit PoolPrivacyUpdated(_privacy);\n    }\n\n    function getAssetProxy(bytes32 key) public view returns (address) {\n        address synth = ISynthetix(addressResolver.getAddress(_SYNTHETIX_KEY))\n            .synths(key);\n        require(synth != address(0), \"invalid key\");\n        address proxy = ISynth(synth).proxy();\n        require(proxy != address(0), \"invalid proxy\");\n        return proxy;\n    }\n\n    function isAssetSupported(bytes32 key) public view returns (bool) {\n        return assetPosition[key] != 0;\n    }\n\n    function validateAsset(bytes32 key) public view returns (bool) {\n        address synth = ISynthetix(addressResolver.getAddress(_SYNTHETIX_KEY))\n            .synths(key);\n\n        if (synth == address(0))\n            return false;\n\n        address proxy = ISynth(synth).proxy();\n\n        if (proxy == address(0))\n            return false;\n\n        return true;\n    }\n\n    function addToSupportedAssets(bytes32 key) public onlyManager {\n        _addToSupportedAssets(key);\n    }\n\n    function removeFromSupportedAssets(bytes32 key) public onlyManager {\n        require(isAssetSupported(key), \"asset not supported\");\n\n        require(!persistentAsset[key], \"persistent assets can't be removed\");\n\n        ISynthetix sx = ISynthetix(addressResolver.getAddress(_SYNTHETIX_KEY));\n        sx.settle(key);\n\n        require(\n            IERC20(getAssetProxy(key)).balanceOf(address(this)) == 0,\n            \"non-empty asset cannot be removed\"\n        );\n\n        require(key != _SUSD_KEY, \"sUSD can't be removed\");\n\n        _removeFromSupportedAssets(key);\n    }\n\n    function numberOfSupportedAssets() public view returns (uint256) {\n        return supportedAssets.length;\n    }\n\n    // Unsafe internal method that assumes we are not adding a duplicate\n    function _addToSupportedAssets(bytes32 key) internal {\n        require(supportedAssets.length < IHasAssetInfo(factory).getMaximumSupportedAssetCount(), \"maximum assets reached\");\n        require(!isAssetSupported(key), \"asset already supported\");\n        require(validateAsset(key) == true, \"not an asset\");\n\n        supportedAssets.push(key);\n        assetPosition[key] = supportedAssets.length;\n\n        emit AssetAdded(address(this), manager(), key);\n    }\n\n    // Unsafe internal method that assumes we are removing an element that exists\n    function _removeFromSupportedAssets(bytes32 key) internal {\n        uint256 length = supportedAssets.length;\n        uint256 index = assetPosition[key].sub(1); // adjusting the index because the map stores 1-based\n\n        bytes32 lastAsset = supportedAssets[length.sub(1)];\n\n        // overwrite the asset to be removed with the last supported asset\n        supportedAssets[index] = lastAsset;\n        assetPosition[lastAsset] = index.add(1); // adjusting the index to be 1-based\n        assetPosition[key] = 0; // update the map\n\n        // delete the last supported asset and resize the array\n        supportedAssets.pop();\n\n        emit AssetRemoved(address(this), manager(), key);\n    }\n\n    function exchange(\n        bytes32 sourceKey,\n        uint256 sourceAmount,\n        bytes32 destinationKey\n    ) public onlyManager {\n        require(isAssetSupported(sourceKey), \"unsupported source currency\");\n        require(\n            isAssetSupported(destinationKey),\n            \"unsupported destination currency\"\n        );\n\n        ISynthetix sx = ISynthetix(addressResolver.getAddress(_SYNTHETIX_KEY));\n\n        uint256 destinationAmount = sx.exchangeWithTracking(\n            sourceKey,\n            sourceAmount,\n            destinationKey,\n            IHasDaoInfo(factory).getDaoAddress(),\n            IHasFeeInfo(factory).getTrackingCode()\n        );\n\n        emit Exchange(\n            address(this),\n            manager(),\n            sourceKey,\n            sourceAmount,\n            destinationKey,\n            destinationAmount,\n            block.timestamp\n        );\n    }\n\n    function totalFundValue() public virtual view returns (uint256) {\n        uint256 total = 0;\n        uint256 assetCount = supportedAssets.length;\n\n        for (uint256 i = 0; i < assetCount; i++) {\n            total = total.add(assetValue(supportedAssets[i]));\n        }\n        return total;\n    }\n\n    function assetValue(bytes32 key) public view returns (uint256) {\n        return\n            IExchangeRates(addressResolver.getAddress(_EXCHANGE_RATES_KEY))\n                .effectiveValue(\n                key,\n                IERC20(getAssetProxy(key)).balanceOf(address(this)),\n                _SUSD_KEY\n            );\n    }\n\n    function deposit(uint256 _susdAmount) public onlyPrivate returns (uint256) {\n        lastDeposit[msg.sender] = block.timestamp;\n\n        //we need to settle all the assets before determining the total fund value\n        _settleAll();\n\n        _mintManagerFee(false);\n\n        uint256 fundValue = totalFundValue();\n        uint256 totalSupplyBefore = totalSupply();\n\n        IExchanger sx = IExchanger(addressResolver.getAddress(_EXCHANGER_KEY));\n        sx.settle(msg.sender, _SUSD_KEY);\n\n        require(\n            IERC20(getAssetProxy(_SUSD_KEY)).transferFrom(\n                msg.sender,\n                address(this),\n                _susdAmount\n            ),\n            \"token transfer failed\"\n        );\n\n        uint256 liquidityMinted;\n        if (totalSupplyBefore > 0) {\n            //total balance converted to susd that this contract holds\n            //need to calculate total value of synths in this contract\n            liquidityMinted = _susdAmount.mul(totalSupplyBefore).div(fundValue);\n        } else {\n            liquidityMinted = _susdAmount;\n        }\n\n        _mint(msg.sender, liquidityMinted);\n\n        emit Deposit(\n            address(this),\n            msg.sender,\n            _susdAmount,\n            liquidityMinted,\n            balanceOf(msg.sender),\n            fundValue.add(_susdAmount),\n            totalSupplyBefore.add(liquidityMinted),\n            block.timestamp\n        );\n\n        return liquidityMinted;\n    }\n\n    function _settleAll() internal {\n        ISynthetix sx = ISynthetix(addressResolver.getAddress(_SYNTHETIX_KEY));\n\n        uint256 assetCount = supportedAssets.length;\n\n        for (uint256 i = 0; i < assetCount; i++) {\n\n            address proxy = getAssetProxy(supportedAssets[i]);\n            uint256 totalAssetBalance = IERC20(proxy).balanceOf(address(this));\n\n            if (totalAssetBalance > 0)\n                sx.settle(supportedAssets[i]);\n\n        }\n    }\n\n    function _settleNotSuspended() internal {\n        ISynthetix sx = ISynthetix(addressResolver.getAddress(_SYNTHETIX_KEY));\n        ISystemStatus status = ISystemStatus(addressResolver.getAddress(_SYSTEM_STATUS_KEY));\n\n        uint256 assetCount = supportedAssets.length;\n\n        for (uint256 i = 0; i < assetCount; i++) {\n            try status.requireSynthActive(supportedAssets[i]) {\n\n                address proxy = getAssetProxy(supportedAssets[i]);\n                uint256 totalAssetBalance = IERC20(proxy).balanceOf(address(this));\n\n                if (totalAssetBalance > 0)\n                    sx.settle(supportedAssets[i]);\n\n            } catch {\n                continue;\n            }\n        }\n    }\n\n    function withdraw(uint256 _fundTokenAmount) public virtual {\n        _withdraw(_fundTokenAmount, false);\n    }\n\n    function forfeitSuspendedSynthsAndWithdraw(uint256 _fundTokenAmount) public virtual {\n        _withdraw(_fundTokenAmount, true);\n    }\n\n    function _withdraw(uint256 _fundTokenAmount, bool _forfeitSuspendedSynths) internal {\n        require(\n            balanceOf(msg.sender) >= _fundTokenAmount,\n            \"insufficient balance of fund tokens\"\n        );\n\n        require(\n            getExitFeeRemainingCooldown(msg.sender) == 0,\n            \"cooldown active\"\n        );\n        \n        //we need to settle all the assets before determining the total fund value\n        if(_forfeitSuspendedSynths){\n            _settleNotSuspended();\n        } else {\n            _settleAll();\n        }\n\n        _mintManagerFee(false);\n\n        uint256 fundValue = totalFundValue();\n\n        //calculate the proportion\n        uint256 portion = _fundTokenAmount.mul(10**18).div(totalSupply());\n\n        //first return funded tokens\n        _burn(msg.sender, _fundTokenAmount);\n\n        uint256 assetCount = supportedAssets.length;\n\n        if(_forfeitSuspendedSynths){\n            ISystemStatus status = ISystemStatus(addressResolver.getAddress(_SYSTEM_STATUS_KEY));\n            for (uint256 i = 0; i < assetCount; i++) {\n                try status.requireSynthActive(supportedAssets[i]) {\n\n                    address proxy = getAssetProxy(supportedAssets[i]);\n                    uint256 totalAssetBalance = IERC20(proxy).balanceOf(address(this));\n                    uint256 portionOfAssetBalance = totalAssetBalance.mul(portion).div(10**18);\n\n                    if (portionOfAssetBalance > 0) {\n                        IERC20(proxy).transfer(msg.sender, portionOfAssetBalance);\n                    }\n\n                } catch {\n                    continue;\n                }\n            }\n        } else {\n            for (uint256 i = 0; i < assetCount; i++) {\n                address proxy = getAssetProxy(supportedAssets[i]);\n                uint256 totalAssetBalance = IERC20(proxy).balanceOf(address(this));\n                uint256 portionOfAssetBalance = totalAssetBalance.mul(portion).div(10**18);\n\n                if (portionOfAssetBalance > 0) {\n                    IERC20(proxy).transfer(msg.sender, portionOfAssetBalance);\n                }\n            }\n        }\n\n        uint256 valueWithdrawn = portion.mul(fundValue);\n\n        emit Withdrawal(\n            address(this),\n            msg.sender,\n            valueWithdrawn,\n            _fundTokenAmount,\n            balanceOf(msg.sender),\n            totalFundValue(),\n            totalSupply(),\n            block.timestamp\n        );\n    }\n\n    function getFundSummary()\n        public\n        view\n        returns (\n            string memory,\n            uint256,\n            uint256,\n            address,\n            string memory,\n            uint256,\n            bool,\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n\n        uint256 managerFeeNumerator;\n        uint256 managerFeeDenominator;\n        (managerFeeNumerator, managerFeeDenominator) = IHasFeeInfo(factory).getPoolManagerFee(address(this));\n\n        uint256 exitFeeNumerator = 0;\n        uint256 exitFeeDenominator = 1;\n\n        return (\n            name(),\n            totalSupply(),\n            totalFundValue(),\n            manager(),\n            managerName(),\n            creationTime,\n            privatePool,\n            managerFeeNumerator,\n            managerFeeDenominator,\n            exitFeeNumerator,\n            exitFeeDenominator\n        );\n    }\n\n    function getSupportedAssets() public view returns (bytes32[] memory) {\n        return supportedAssets;\n    }\n\n    function getFundComposition()\n        public\n        view\n        returns (\n            bytes32[] memory,\n            uint256[] memory,\n            uint256[] memory\n        )\n    {\n        uint256 assetCount = supportedAssets.length;\n\n        bytes32[] memory assets = new bytes32[](assetCount);\n        uint256[] memory balances = new uint256[](assetCount);\n        uint256[] memory rates = new uint256[](assetCount);\n\n        IExchangeRates exchangeRates = IExchangeRates(\n            addressResolver.getAddress(_EXCHANGE_RATES_KEY)\n        );\n        for (uint256 i = 0; i < assetCount; i++) {\n            bytes32 asset = supportedAssets[i];\n            balances[i] = IERC20(getAssetProxy(asset)).balanceOf(address(this));\n            assets[i] = asset;\n            rates[i] = exchangeRates.rateForCurrency(asset);\n        }\n        return (assets, balances, rates);\n    }\n\n    function getWaitingPeriods()\n        public\n        view\n        returns (\n            bytes32[] memory,\n            uint256[] memory\n        )\n    {\n        uint256 assetCount = supportedAssets.length;\n\n        bytes32[] memory assets = new bytes32[](assetCount);\n        uint256[] memory periods = new uint256[](assetCount);\n\n        IExchanger exchanger = IExchanger(addressResolver.getAddress(_EXCHANGER_KEY));\n\n        for (uint256 i = 0; i < assetCount; i++) {\n            bytes32 asset = supportedAssets[i];\n            assets[i] = asset;\n            periods[i] = exchanger.maxSecsLeftInWaitingPeriod(address(this), asset);\n        }\n\n        return (assets, periods);\n    }\n\n    function getSuspendedAssets() public view returns (bytes32[] memory, bool[] memory) {\n        \n        uint256 assetCount = supportedAssets.length;\n\n        bytes32[] memory assets = new bytes32[](assetCount);\n        bool[] memory suspended = new bool[](assetCount);\n\n        ISystemStatus status = ISystemStatus(addressResolver.getAddress(_SYSTEM_STATUS_KEY));\n\n        for (uint256 i = 0; i < assetCount; i++) {\n            bytes32 asset = supportedAssets[i];\n\n            assets[i] = asset;\n\n            try status.requireSynthActive(asset) {\n                suspended[i] = false;\n            } catch {\n                suspended[i] = true;\n            }\n        }\n\n        return (assets, suspended);\n\n    }\n\n    // MANAGER FEES\n\n    function tokenPrice() public view returns (uint256) {\n        uint256 fundValue = totalFundValue();\n        uint256 tokenSupply = totalSupply();\n\n        return _tokenPrice(fundValue, tokenSupply);\n    }\n\n    function _tokenPrice(uint256 _fundValue, uint256 _tokenSupply)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (_tokenSupply == 0 || _fundValue == 0) return 0;\n\n        return _fundValue.mul(10**18).div(_tokenSupply);\n    }\n\n    function availableManagerFee() public view returns (uint256) {\n        uint256 fundValue = totalFundValue();\n        uint256 tokenSupply = totalSupply();\n\n        uint256 managerFeeNumerator;\n        uint256 managerFeeDenominator;\n        (managerFeeNumerator, managerFeeDenominator) = IHasFeeInfo(factory).getPoolManagerFee(address(this));\n\n        return\n            _availableManagerFee(\n                fundValue,\n                tokenSupply,\n                tokenPriceAtLastFeeMint,\n                managerFeeNumerator,\n                managerFeeDenominator\n            );\n    }\n\n    function _availableManagerFee(\n        uint256 _fundValue,\n        uint256 _tokenSupply,\n        uint256 _lastFeeMintPrice,\n        uint256 _feeNumerator,\n        uint256 _feeDenominator\n    ) internal pure returns (uint256) {\n        if (_tokenSupply == 0 || _fundValue == 0) return 0;\n\n        uint256 currentTokenPrice = _fundValue.mul(10**18).div(_tokenSupply);\n\n        if (currentTokenPrice <= _lastFeeMintPrice) return 0;\n\n        uint256 available = currentTokenPrice\n            .sub(_lastFeeMintPrice)\n            .mul(_tokenSupply)\n            .mul(_feeNumerator)\n            .div(_feeDenominator)\n            .div(10**18);\n\n        return available;\n    }\n\n    function mintManagerFee() public {\n        _mintManagerFee(true);\n    }\n\n    function _mintManagerFee(bool settle) internal {\n        //we need to settle all the assets before minting the manager fee\n        if (settle)\n            _settleAll();\n\n        uint256 fundValue = totalFundValue();\n        uint256 tokenSupply = totalSupply();\n\n        uint256 managerFeeNumerator;\n        uint256 managerFeeDenominator;\n        (managerFeeNumerator, managerFeeDenominator) = IHasFeeInfo(factory).getPoolManagerFee(address(this));\n\n        uint256 available = _availableManagerFee(\n            fundValue,\n            tokenSupply,\n            tokenPriceAtLastFeeMint,\n            managerFeeNumerator,\n            managerFeeDenominator\n        );\n\n        // Ignore dust when minting performance fees\n        if (available < 100)\n            return;\n\n        address daoAddress = IHasDaoInfo(factory).getDaoAddress();\n        uint256 daoFeeNumerator;\n        uint256 daoFeeDenominator;\n\n        (daoFeeNumerator, daoFeeDenominator) = IHasDaoInfo(factory).getDaoFee();\n\n        uint256 daoFee = available.mul(daoFeeNumerator).div(daoFeeDenominator);\n        uint256 managerFee = available.sub(daoFee);\n\n        if (daoFee > 0) _mint(daoAddress, daoFee);\n\n        if (managerFee > 0) _mint(manager(), managerFee);\n\n        tokenPriceAtLastFeeMint = _tokenPrice(fundValue, tokenSupply);\n\n        emit ManagerFeeMinted(\n            address(this),\n            manager(),\n            available,\n            daoFee,\n            managerFee,\n            tokenPriceAtLastFeeMint\n        );\n    }\n\n    function getManagerFee() external view returns (uint256, uint256) {\n        return IHasFeeInfo(factory).getPoolManagerFee(address(this));\n    }\n\n    function setManagerFeeNumerator(uint256 numerator) public onlyManager {\n        _setManagerFeeNumerator(numerator);\n    }\n\n    function _setManagerFeeNumerator(uint256 numerator) internal {\n        IHasFeeInfo(factory).setPoolManagerFeeNumerator(address(this), numerator);\n        \n        uint256 managerFeeNumerator;\n        uint256 managerFeeDenominator;\n        (managerFeeNumerator, managerFeeDenominator) = IHasFeeInfo(factory).getPoolManagerFee(address(this));\n\n        emit ManagerFeeSet(\n            address(this),\n            manager(),\n            managerFeeNumerator,\n            managerFeeDenominator\n        );\n    }\n\n    // Exit fees\n\n    function getExitFee() external view returns (uint256, uint256) {\n        return (0, 1);\n    }\n\n    function getExitFeeCooldown() external view returns (uint256) {\n        return IHasFeeInfo(factory).getExitFeeCooldown();\n    }\n\n    function getExitFeeRemainingCooldown(address sender) public view returns (uint256) {\n        uint256 cooldown = IHasFeeInfo(factory).getExitFeeCooldown();\n        uint256 cooldownFinished = lastDeposit[sender].add(cooldown);\n\n        if (cooldownFinished < block.timestamp)\n            return 0;\n\n        return cooldownFinished.sub(block.timestamp);\n    }\n    \n    // Swap contract\n\n    function setLastDeposit(address investor) public onlyDhptSwap {\n        lastDeposit[investor] = block.timestamp;\n    }\n\n    modifier onlyDhptSwap() {\n        address dhptSwapAddress = IHasDhptSwapInfo(factory)\n            .getDhptSwapAddress();\n        require(msg.sender == dhptSwapAddress, \"only swap contract\");\n        _;\n    }\n\n    // Upgrade\n\n    function receiveUpgrade(uint256 targetVersion) external override{\n        require(msg.sender == factory, \"no permission\");\n\n        if (targetVersion == 1) {\n            addressResolver = IAddressResolver(0x4E3b31eB0E5CB73641EE1E65E7dCEFe520bA3ef2);\n            return;\n        }\n\n        require(false, \"upgrade handler not found\");\n    }\n\n    uint256[50] private __gap;\n}\n\n/**\n * @title Proxy\n * @dev Implements delegation of calls to other contracts, with proper\n * forwarding of return values and bubbling of failures.\n * It defines a fallback function that delegates all calls to the address\n * returned by the abstract _implementation() internal function.\n */\nabstract contract Proxy {\n    /**\n     * @dev Fallback function.\n     * Implemented entirely in `_fallback`.\n     */\n    fallback() external payable {\n        _fallback();\n    }\n\n    receive() external payable {\n        _fallback();\n    }\n\n    /**\n     * @return The Address of the implementation.\n     */\n    function _implementation() internal virtual view returns (address);\n\n    /**\n     * @dev Delegates execution to an implementation contract.\n     * This is a low level function that doesn't return to its internal call site.\n     * It will return to the external caller whatever the implementation returns.\n     * @param implementation Address to delegate.\n     */\n    function _delegate(address implementation) internal {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(\n                gas(),\n                implementation,\n                0,\n                calldatasize(),\n                0,\n                0\n            )\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n                // delegatecall returns 0 on error.\n                case 0 {\n                    revert(0, returndatasize())\n                }\n                default {\n                    return(0, returndatasize())\n                }\n        }\n    }\n\n    /**\n     * @dev Function that is run as the first thing in the fallback function.\n     * Can be redefined in derived contracts to add functionality.\n     * Redefinitions must call super._willFallback().\n     */\n    function _willFallback() internal virtual {}\n\n    /**\n     * @dev fallback implementation.\n     * Extracted to enable manual triggering.\n     */\n    function _fallback() internal {\n        _willFallback();\n        _delegate(_implementation());\n    }\n}\n\n/**\n * Utility library of inline functions on addresses\n *\n * Source https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-solidity/v2.1.3/contracts/utils/Address.sol\n * This contract is copied here and renamed from the original to avoid clashes in the compiled artifacts\n * when the user imports a zos-lib contract (that transitively causes this contract to be compiled and added to the\n * build/artifacts folder) as well as the vanilla Address implementation from an openzeppelin version.\n */\nlibrary OpenZeppelinUpgradesAddress {\n    /**\n     * Returns whether the target address is a contract\n     * @dev This function will return false if invoked during the constructor of a contract,\n     * as the code is not actually created until after the constructor finishes.\n     * @param account address of the account to check\n     * @return whether the target address is a contract\n     */\n    function isContract(address account) internal view returns (bool) {\n        uint256 size;\n        // XXX Currently there is no better way to check if there is a contract in an address\n        // than to check the size of the code at that address.\n        // See https://ethereum.stackexchange.com/a/14016/36603\n        // for more details about how this works.\n        // TODO Check this again before the Serenity release, because all addresses will be\n        // contracts then.\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n}\n\n//\n//        __  __    __  ________  _______    ______   ________\n//       /  |/  |  /  |/        |/       \\  /      \\ /        |\n//   ____$$ |$$ |  $$ |$$$$$$$$/ $$$$$$$  |/$$$$$$  |$$$$$$$$/\n//  /    $$ |$$ |__$$ |$$ |__    $$ |  $$ |$$ | _$$/ $$ |__\n// /$$$$$$$ |$$    $$ |$$    |   $$ |  $$ |$$ |/    |$$    |\n// $$ |  $$ |$$$$$$$$ |$$$$$/    $$ |  $$ |$$ |$$$$ |$$$$$/\n// $$ \\__$$ |$$ |  $$ |$$ |_____ $$ |__$$ |$$ \\__$$ |$$ |_____\n// $$    $$ |$$ |  $$ |$$       |$$    $$/ $$    $$/ $$       |\n//  $$$$$$$/ $$/   $$/ $$$$$$$$/ $$$$$$$/   $$$$$$/  $$$$$$$$/\n//\n// dHEDGE DAO - https://dhedge.org\n//\n// MIT License\n// ===========\n//\n// Copyright (c) 2020 dHEDGE DAO\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n//\ninterface HasLogic {\n    function getLogic() external view returns (address);\n}\n\n/**\n * @title BaseUpgradeabilityProxy\n * @dev This contract implements a proxy that allows to change the\n * implementation address to which it will delegate.\n * Such a change is called an implementation upgrade.\n */\ncontract BaseUpgradeabilityProxy is Proxy {\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     * @param implementation Address of the new implementation.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32\n        internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Returns the current implementation.\n     * @return impl Address of the current implementation\n     */\n    function _implementation() internal override view returns (address) {\n        address factory;\n        bytes32 slot = IMPLEMENTATION_SLOT;\n        assembly {\n            factory := sload(slot)\n        }\n\n        // Begin custom modification\n        if (factory == address(0x0)) return address(0x0); // If factory not initialized return empty\n\n        return HasLogic(factory).getLogic();\n    }\n\n    /**\n     * @dev Upgrades the proxy to a new implementation.\n     * @param newImplementation Address of the new implementation.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Sets the implementation address of the proxy.\n     * @param newImplementation Address of the new implementation.\n     */\n    function _setImplementation(address newImplementation) internal {\n        require(\n            OpenZeppelinUpgradesAddress.isContract(newImplementation),\n            \"Cannot set a proxy implementation to a non-contract address\"\n        );\n\n        bytes32 slot = IMPLEMENTATION_SLOT;\n\n        assembly {\n            sstore(slot, newImplementation)\n        }\n    }\n}\n\n/**\n * @title InitializableUpgradeabilityProxy\n * @dev Extends BaseUpgradeabilityProxy with an initializer for initializing\n * implementation and init data.\n */\ncontract InitializableUpgradeabilityProxy is BaseUpgradeabilityProxy {\n    /**\n     * @dev Contract initializer.\n     * @param _factory Address of the factory containing the implementation.\n     * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\n     * It should include the signature and the parameters of the function to be called, as described in\n     * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\n     * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\n     */\n    function initialize(address _factory, bytes memory _data) public payable {\n        require(_implementation() == address(0), \"Impl not zero\");\n        assert(\n            IMPLEMENTATION_SLOT ==\n                bytes32(uint256(keccak256(\"eip1967.proxy.implementation\")) - 1)\n        );\n        _setImplementation(_factory);\n        if (_data.length > 0) {\n            (bool success, ) = _implementation().delegatecall(_data);\n            require(success);\n        }\n    }\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract OwnableUpgradeSafe is Initializable, ContextUpgradeSafe {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n\n    function __Ownable_init() internal initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal initializer {\n\n\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n\n    }\n\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n\n    uint256[49] private __gap;\n}\n\n//\n//        __  __    __  ________  _______    ______   ________\n//       /  |/  |  /  |/        |/       \\  /      \\ /        |\n//   ____$$ |$$ |  $$ |$$$$$$$$/ $$$$$$$  |/$$$$$$  |$$$$$$$$/\n//  /    $$ |$$ |__$$ |$$ |__    $$ |  $$ |$$ | _$$/ $$ |__\n// /$$$$$$$ |$$    $$ |$$    |   $$ |  $$ |$$ |/    |$$    |\n// $$ |  $$ |$$$$$$$$ |$$$$$/    $$ |  $$ |$$ |$$$$ |$$$$$/\n// $$ \\__$$ |$$ |  $$ |$$ |_____ $$ |__$$ |$$ \\__$$ |$$ |_____\n// $$    $$ |$$ |  $$ |$$       |$$    $$/ $$    $$/ $$       |\n//  $$$$$$$/ $$/   $$/ $$$$$$$$/ $$$$$$$/   $$$$$$/  $$$$$$$$/\n//\n// dHEDGE DAO - https://dhedge.org\n//\n// MIT License\n// ===========\n//\n// Copyright (c) 2020 dHEDGE DAO\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n//\ncontract ProxyFactory is OwnableUpgradeSafe, HasLogic {\n    event ProxyCreated(address proxy);\n\n    address private _logic;\n\n    function __ProxyFactory_init(address poolLogic) public initializer {\n        OwnableUpgradeSafe.__Ownable_init();\n\n        _logic = poolLogic;\n    }\n\n    function setLogic(address logic) public onlyOwner {\n        _logic = logic;\n    }\n\n    function getLogic() public override view returns (address) {\n        return _logic;\n    }\n\n    function deploy(bytes memory _data) public returns (address) {\n        return _deployProxy(_data);\n    }\n\n    function _deployProxy(bytes memory _data) internal returns (address) {\n        InitializableUpgradeabilityProxy proxy = _createProxy();\n        emit ProxyCreated(address(proxy));\n        proxy.initialize(address(this), _data);\n        return address(proxy);\n    }\n\n    function _createProxy()\n        internal\n        returns (InitializableUpgradeabilityProxy)\n    {\n        address payable addr;\n        bytes memory code = type(InitializableUpgradeabilityProxy).creationCode;\n\n        assembly {\n            addr := create(0, add(code, 0x20), mload(code))\n            if iszero(extcodesize(addr)) {\n                revert(0, 0)\n            }\n        }\n\n        return InitializableUpgradeabilityProxy(addr);\n    }\n    \n    uint256[50] private __gap;\n}\n\n//\n//        __  __    __  ________  _______    ______   ________\n//       /  |/  |  /  |/        |/       \\  /      \\ /        |\n//   ____$$ |$$ |  $$ |$$$$$$$$/ $$$$$$$  |/$$$$$$  |$$$$$$$$/\n//  /    $$ |$$ |__$$ |$$ |__    $$ |  $$ |$$ | _$$/ $$ |__\n// /$$$$$$$ |$$    $$ |$$    |   $$ |  $$ |$$ |/    |$$    |\n// $$ |  $$ |$$$$$$$$ |$$$$$/    $$ |  $$ |$$ |$$$$ |$$$$$/\n// $$ \\__$$ |$$ |  $$ |$$ |_____ $$ |__$$ |$$ \\__$$ |$$ |_____\n// $$    $$ |$$ |  $$ |$$       |$$    $$/ $$    $$/ $$       |\n//  $$$$$$$/ $$/   $$/ $$$$$$$$/ $$$$$$$/   $$$$$$/  $$$$$$$$/\n//\n// dHEDGE DAO - https://dhedge.org\n//\n// MIT License\n// ===========\n//\n// Copyright (c) 2020 dHEDGE DAO\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n//\ncontract DHedgeFactory is\n    ProxyFactory,\n    IHasDaoInfo,\n    IHasFeeInfo,\n    IHasAssetInfo,\n    IHasDhptSwapInfo\n{\n    event FundCreated(\n        address fundAddress,\n        bool isPoolPrivate,\n        string fundName,\n        string managerName,\n        address manager,\n        uint256 time,\n        uint256 managerFeeNumerator,\n        uint256 managerFeeDenominator\n    );\n\n    event DaoAddressSet(address dao);\n    event DaoFeeSet(uint256 numerator, uint256 denominator);\n\n    event ExitFeeSet(uint256 numerator, uint256 denominator);\n    event ExitFeeCooldownSet(uint256 cooldown);\n\n    event MaximumSupportedAssetCountSet(uint256 count);\n    \n    event DhptSwapAddressSet(address dhptSwap);\n\n    IAddressResolver public addressResolver;\n\n    address[] public deployedFunds;\n\n    address internal _daoAddress;\n    uint256 internal _daoFeeNumerator;\n    uint256 internal _daoFeeDenominator;\n\n    mapping (address => bool) public isPool;\n\n    uint256 private _MAXIMUM_MANAGER_FEE_NUMERATOR;\n    uint256 private _MANAGER_FEE_DENOMINATOR;\n    mapping (address => uint256) public poolManagerFeeNumerator;\n    mapping (address => uint256) public poolManagerFeeDenominator;\n\n    uint256 internal _exitFeeNumerator;\n    uint256 internal _exitFeeDenominator;\n    uint256 internal _exitFeeCooldown;\n\n    uint256 internal _maximumSupportedAssetCount;\n\n    bytes32 internal _trackingCode;\n    \n    mapping (address => uint256) public poolVersion;\n    uint256 public poolStorageVersion;\n\n    address internal _dhptSwapAddress;\n\n    function initialize(\n        IAddressResolver _addressResolver,\n        address _poolLogic,\n        address daoAddress\n    ) public initializer {\n\n        ProxyFactory.__ProxyFactory_init(_poolLogic);\n\n        addressResolver = _addressResolver;\n\n        _setDaoAddress(daoAddress);\n\n        _setMaximumManagerFee(5000, 10000);\n\n        _setDaoFee(10, 100); // 10%\n        _setExitFee(5, 1000); // 0.5%\n        _setExitFeeCooldown(1 days);\n\n        _setMaximumSupportedAssetCount(10);\n\n        _setTrackingCode(\n            0x4448454447450000000000000000000000000000000000000000000000000000\n        );\n    }\n\n    function createFund(\n        bool _privatePool,\n        address _manager,\n        string memory _managerName,\n        string memory _fundName,\n        uint256 _managerFeeNumerator,\n        bytes32[] memory _supportedAssets\n    ) public returns (address) {\n        bytes memory data = abi.encodeWithSignature(\n            \"initialize(address,bool,address,string,string,address,bytes32[])\",\n            address(this),\n            _privatePool,\n            _manager,\n            _managerName,\n            _fundName,\n            addressResolver,\n            _supportedAssets\n        );\n\n        address fund = deploy(data);\n\n        deployedFunds.push(fund);\n        isPool[fund] = true;\n\n        poolVersion[fund] = poolStorageVersion;\n\n        _setPoolManagerFee(fund, _managerFeeNumerator, _MANAGER_FEE_DENOMINATOR);\n\n        emit FundCreated(\n            fund,\n            _privatePool,\n            _fundName,\n            _managerName,\n            _manager,\n            block.timestamp,\n            _managerFeeNumerator,\n            _MANAGER_FEE_DENOMINATOR\n        );\n\n        return fund;\n    }\n\n    function deployedFundsLength() external view returns (uint256) {\n        return deployedFunds.length;\n    }\n\n    function setAddressResolver(address _addressResolver) public onlyOwner {\n        addressResolver = IAddressResolver(_addressResolver);\n    }\n\n    function getAddressResolver() public override view returns (IAddressResolver) {\n        return addressResolver;\n    }\n\n    // DAO info\n\n    function getDaoAddress() public override view returns (address) {\n        return _daoAddress;\n    }\n\n    function setDaoAddress(address daoAddress) public onlyOwner {\n        _setDaoAddress(daoAddress);\n    }\n\n    function _setDaoAddress(address daoAddress) internal {\n        _daoAddress = daoAddress;\n\n        emit DaoAddressSet(daoAddress);\n    }\n    \n    function setDaoFee(uint256 numerator, uint256 denominator) public onlyOwner {\n        _setDaoFee(numerator, denominator);\n    }\n\n    function _setDaoFee(uint256 numerator, uint256 denominator) internal {\n        require(numerator <= denominator, \"invalid fraction\");\n\n        _daoFeeNumerator = numerator;\n        _daoFeeDenominator = denominator;\n\n        emit DaoFeeSet(numerator, denominator);\n    }\n\n    function getDaoFee() public override view returns (uint256, uint256) {\n        return (_daoFeeNumerator, _daoFeeDenominator);\n    }\n\n    modifier onlyPool() {\n        require(\n            isPool[msg.sender] == true,\n            \"Only a pool contract can perform this action\"\n        );\n        _;\n    }\n\n    // Manager fees\n\n    function getPoolManagerFee(address pool) external override view returns (uint256, uint256) {\n        require(isPool[pool] == true, \"supplied address is not a pool\");\n\n        return (poolManagerFeeNumerator[pool], poolManagerFeeDenominator[pool]);\n    }\n\n    function setPoolManagerFeeNumerator(address pool, uint256 numerator) external override {\n        require(pool == msg.sender && isPool[msg.sender] == true, \"only a pool can change own fee\");\n        require(isPool[pool] == true, \"supplied address is not a pool\");\n        require(numerator < poolManagerFeeNumerator[pool], \"manager fee too high\");\n\n        _setPoolManagerFee(msg.sender, numerator, _MANAGER_FEE_DENOMINATOR);\n    }\n\n    function _setPoolManagerFee(address pool, uint256 numerator, uint256 denominator) internal {\n        require(numerator <= denominator && numerator <= _MAXIMUM_MANAGER_FEE_NUMERATOR, \"invalid fraction\");\n\n        poolManagerFeeNumerator[pool] = numerator;\n        poolManagerFeeDenominator[pool] = denominator;\n    }\n\n    function getMaximumManagerFee() public view returns (uint256, uint256) {\n        return (_MAXIMUM_MANAGER_FEE_NUMERATOR, _MANAGER_FEE_DENOMINATOR);\n    }\n\n    function _setMaximumManagerFee(uint256 numerator, uint256 denominator) internal {\n        require(denominator > 0, \"denominator must be positive\");\n\n        _MAXIMUM_MANAGER_FEE_NUMERATOR = numerator;\n        _MANAGER_FEE_DENOMINATOR = denominator;\n    }\n\n    // Exit fees\n\n    function setExitFee(uint256 numerator, uint256 denominator) public onlyOwner {\n        _setExitFee(numerator, denominator);\n    }\n\n    function _setExitFee(uint256 numerator, uint256 denominator) internal {\n        require(numerator <= denominator, \"invalid fraction\");\n\n        _exitFeeNumerator = numerator;\n        _exitFeeDenominator = denominator;\n\n        emit ExitFeeSet(numerator, denominator);\n    }\n\n    function getExitFee() external override view returns (uint256, uint256) {\n        return (_exitFeeNumerator, _exitFeeDenominator);\n    }\n\n    function setExitFeeCooldown(uint256 cooldown)\n        external\n        onlyOwner\n    {\n        _setExitFeeCooldown(cooldown);\n    }\n\n    function _setExitFeeCooldown(uint256 cooldown) internal {\n        _exitFeeCooldown = cooldown;\n\n        emit ExitFeeCooldownSet(cooldown);\n    }\n\n    function getExitFeeCooldown() public override view returns (uint256) {\n        return _exitFeeCooldown;\n    }\n\n    // Asset Info\n\n    function setMaximumSupportedAssetCount(uint256 count) external onlyOwner {\n        _setMaximumSupportedAssetCount(count);\n    }\n\n    function _setMaximumSupportedAssetCount(uint256 count) internal {\n        _maximumSupportedAssetCount = count;\n\n        emit MaximumSupportedAssetCountSet(count);\n    }\n\n    function getMaximumSupportedAssetCount() external virtual view override returns (uint256) {\n        return _maximumSupportedAssetCount;\n    }\n\n    // Synthetix tracking\n\n    function setTrackingCode(bytes32 code) external onlyOwner {\n        _setTrackingCode(code);\n    }\n\n    function _setTrackingCode(bytes32 code) internal {\n        _trackingCode = code;\n    }\n\n    function getTrackingCode() public override view returns (bytes32) {\n        return _trackingCode;\n    }\n    \n    // DHPT Swap\n\n    function getDhptSwapAddress() public override view returns (address) {\n        return _dhptSwapAddress;\n    }\n\n    function setDhptSwapAddress(address dhptSwapAddress) public onlyOwner {\n        _setDhptSwapAddress(dhptSwapAddress);\n    }\n\n    function _setDhptSwapAddress(address dhptSwapAddress) internal {\n        _dhptSwapAddress = dhptSwapAddress;\n\n        emit DhptSwapAddressSet(dhptSwapAddress);\n    }\n\n    // Upgrade\n\n    function _upgradePool(address pool, uint256 targetVersion) internal {\n        IReceivesUpgrade(pool).receiveUpgrade(targetVersion);\n\n        poolVersion[pool] = targetVersion;\n    }\n\n    function upgradePoolBatch(uint256 startIndex, uint256 endIndex, uint256 sourceVersion, uint256 targetVersion) external onlyOwner {\n        require(startIndex <= endIndex && startIndex < deployedFunds.length && endIndex < deployedFunds.length, \"invalid bounds\");\n\n        for (uint256 i = startIndex; i <= endIndex; i++) {\n\n            address pool = deployedFunds[i];\n\n            if (poolVersion[pool] != sourceVersion)\n                continue;\n\n            _upgradePool(pool, targetVersion);\n\n        }\n    } \n\n    function setPoolStorageVersion(uint256 version) external onlyOwner {\n        require(version > poolStorageVersion, \"invalid version\");\n\n        poolStorageVersion = version;\n    }\n\n    uint256[50] private __gap;\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dao\",\"type\":\"address\"}],\"name\":\"DaoAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"DaoFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dhptSwap\",\"type\":\"address\"}],\"name\":\"DhptSwapAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cooldown\",\"type\":\"uint256\"}],\"name\":\"ExitFeeCooldownSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"ExitFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fundAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPoolPrivate\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"fundName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"managerName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"managerFeeNumerator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"managerFeeDenominator\",\"type\":\"uint256\"}],\"name\":\"FundCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"MaximumSupportedAssetCountSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"}],\"name\":\"ProxyCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolLogic\",\"type\":\"address\"}],\"name\":\"__ProxyFactory_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressResolver\",\"outputs\":[{\"internalType\":\"contract IAddressResolver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_privatePool\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_managerName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_fundName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_managerFeeNumerator\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_supportedAssets\",\"type\":\"bytes32[]\"}],\"name\":\"createFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deployedFunds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployedFundsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddressResolver\",\"outputs\":[{\"internalType\":\"contract IAddressResolver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDaoAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDaoFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDhptSwapAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExitFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExitFeeCooldown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLogic\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaximumManagerFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaximumSupportedAssetCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolManagerFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTrackingCode\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAddressResolver\",\"name\":\"_addressResolver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolLogic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"daoAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolManagerFeeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolManagerFeeNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolStorageVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressResolver\",\"type\":\"address\"}],\"name\":\"setAddressResolver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"daoAddress\",\"type\":\"address\"}],\"name\":\"setDaoAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"setDaoFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dhptSwapAddress\",\"type\":\"address\"}],\"name\":\"setDhptSwapAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"setExitFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cooldown\",\"type\":\"uint256\"}],\"name\":\"setExitFeeCooldown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"logic\",\"type\":\"address\"}],\"name\":\"setLogic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"setMaximumSupportedAssetCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"}],\"name\":\"setPoolManagerFeeNumerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"setPoolStorageVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"}],\"name\":\"setTrackingCode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sourceVersion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetVersion\",\"type\":\"uint256\"}],\"name\":\"upgradePoolBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DHedgeFactory","CompilerVersion":"v0.6.2+commit.bacdbe57","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}