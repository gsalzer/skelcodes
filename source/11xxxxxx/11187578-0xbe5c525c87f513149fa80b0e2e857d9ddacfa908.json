{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.22 <0.7.0;\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n * Forked from AmplGeyser*/\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract DGOVMINING  {\r\n    using SafeMath for uint256;\r\n    IERC20 public DistributionToken; //0x3087d935aa27128be399851bf8dbf6a40a9964fb\r\n    event TokensClaimed(address indexed user, uint256 amount);\r\n    event CheckIn(address indexed user); \r\n    //\r\n    // Global accounting state\r\n    //\r\n    uint256 public globalShares = 0;\r\n    uint256 private globalSeconds = 0;\r\n    uint256 private _lastGlobalTimestampSec = now;\r\n\tuint256 private _iniTimestampSec = now;\r\n    uint256 private _totalclaimed =0;\r\n\tuint256 private _baseShare = 1;\r\n\tuint256 private _lockingPeriod = 600;\r\n    uint256 private _iniSharesPerToken = 1 * (10**17);\r\n\tuint256 private _totalUnlockedToken = 15000000 * (10**18);\r\n   \r\n    // If lastTimestampSec is 0, there's no entry for that user.\r\n    struct UserRecords {\r\n        uint256 stakingShares;\r\n        uint256 stakingShareSeconds;\r\n        uint256 lastTimestampSec;\r\n    }\r\n     \r\n    // Aggregated staking values per user\r\n    mapping(address => UserRecords) private _userRecords;\r\n    \r\n    /**\r\n     * @param distributionToken The token users receive as they unstake.\r\n     */\r\n    constructor(IERC20 distributionToken) public {       \r\n            DistributionToken = distributionToken;\r\n    }\r\n\r\n\tfunction initialTimestampSec() public view returns (uint256) {\r\n       \r\n\t\treturn _iniTimestampSec;\r\n    }\r\n\tfunction userTimestampSec() public view returns (uint256) {\r\n       \r\n\t\treturn _userRecords[msg.sender].lastTimestampSec;\r\n    }\r\n\tfunction userShares() public view returns (uint256) {\r\n       \r\n\t\treturn _userRecords[msg.sender].stakingShares;\r\n    }\r\n\tfunction userShareSeconds() public view returns (uint256) {\r\n       \r\n\t\treturn _userRecords[msg.sender].stakingShareSeconds;\r\n    }\r\n\tfunction globalShareSeconds() public view returns (uint256) {\r\n       \r\n\t\treturn globalSeconds;\r\n    }\r\n    function totalDistributionToken() public view returns (uint256) {\r\n       \r\n\t\treturn DistributionToken.balanceOf(address(this));\r\n    }\r\n    function totalClaimedTokens() public view returns (uint256) {\r\n       \r\n\t\treturn _totalclaimed;\r\n    }\r\n    /**\r\n      *@dev Start the mining process  \r\n     */\r\n    function Mining() external {\r\n          // User Accounting\r\n        UserRecords storage totals = _userRecords[msg.sender];\r\n\t\tuint256 waitingPeriod = now.sub(totals.lastTimestampSec);\r\n\t\trequire(waitingPeriod > _lockingPeriod,\"Doro.Network: must be 10-minute average interval\");\t\t       \r\n         //User Accounting\r\n\t\tuint256 newUserSeconds =\r\n\t\t    now\r\n            .sub(totals.lastTimestampSec)\r\n            .mul(totals.stakingShares);\r\n        totals.stakingShareSeconds =totals.stakingShareSeconds.add(newUserSeconds);       \r\n\t\ttotals.stakingShares = totals.stakingShares.add(_baseShare);\r\n        totals.lastTimestampSec = now;\r\n        // 2. Global Accounting\r\n\t\tuint256 newStakingShareSeconds =\r\n            now\r\n            .sub(_lastGlobalTimestampSec)\r\n            .mul(globalShares);\r\n        globalSeconds = globalSeconds.add(newStakingShareSeconds);\r\n        _lastGlobalTimestampSec = now;\r\n        globalShares = globalShares.add(_baseShare);\r\n\t\temit CheckIn(msg.sender);\r\n    }\r\n    /*User Claim Token */\r\n\tfunction claimTokens () external {\t    \r\n\t   require(_totalclaimed <= _totalUnlockedToken,\"Doro.Network:15 Millions Tokens have been mined\");\r\n\t   // User Accounting\r\n\t   UserRecords storage totals = _userRecords[msg.sender];\r\n\t   require(totals.stakingShares >0,\"Doro.Network: User has no mining power.\");\r\n\t   uint256 claimInterval = now.sub(totals.lastTimestampSec);\r\n\t   require(claimInterval > _lockingPeriod, \"Doro.Network:must be 10-minute average interval\");\t\t      \r\n\t    // Global accounting\r\n\t\tuint256 UnlockedTokens =now.sub(_iniTimestampSec).mul(_iniSharesPerToken);\t\r\n\t\tUnlockedTokens =(_totalclaimed>0)? UnlockedTokens.sub(_totalclaimed):UnlockedTokens;\r\n        uint256 newGlobalSeconds =\r\n            now\r\n            .sub(_lastGlobalTimestampSec)\r\n            .mul(globalShares);\r\n        globalSeconds = globalSeconds.add(newGlobalSeconds);\r\n        _lastGlobalTimestampSec = now;\r\n         // User Accounting       \r\n        uint256 newUserSeconds =\r\n            now\r\n            .sub(totals.lastTimestampSec)\r\n            .mul(totals.stakingShares);\r\n        totals.stakingShareSeconds =\r\n            totals.stakingShareSeconds\r\n            .add(newUserSeconds);  \r\n        uint256 totalUserRewards = (globalSeconds > 0)\r\n            ? UnlockedTokens.mul(totals.stakingShareSeconds).div(globalSeconds)\r\n            : 0;\r\n\t\tglobalSeconds = globalSeconds.sub(totals.stakingShareSeconds);\r\n\t\tglobalShares = globalShares.sub(totals.stakingShares);\r\n        _totalclaimed =  _totalclaimed.add(totalUserRewards);\r\n\t\ttotals.stakingShareSeconds =0;\r\n\t\ttotals.stakingShares = 0;\r\n        totals.lastTimestampSec = now;\t  \t   \t  \r\n\t    require(DistributionToken.transfer(msg.sender, totalUserRewards),\r\n            'Doro.Network: transfer out of distribution token failed');\r\n\t    emit TokensClaimed(msg.sender, totalUserRewards);\r\n\t}\t\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"distributionToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"CheckIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"DistributionToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Mining\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"globalShareSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"globalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialTimestampSec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalClaimedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDistributionToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"userShareSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"userShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"userTimestampSec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DGOVMINING","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000003087d935aa27128be399851bf8dbf6a40a9964fb","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://4932f54ef21311f17424f451da2ee5aca1509a87414c1a618f7634239f204736"}]}