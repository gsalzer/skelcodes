{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface ILoyaltyPool {\r\n\tfunction enter(uint256 amount) external;\r\n\tfunction leave(uint256 shares) external;\r\n}\r\n\r\ninterface ISimpleUniswap {\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\n\r\ncontract ADXLoyaltyArb is Ownable {\r\n\tISimpleUniswap public constant uniswap = ISimpleUniswap(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n\tIERC20 public constant ADX = IERC20(0xADE00C28244d5CE17D72E40330B1c318cD12B7c3);\r\n\tIERC20 public constant ADXL = IERC20(0xd9A4cB9dc9296e111c66dFACAb8Be034EE2E1c2C);\r\n\r\n\tconstructor() public {\r\n\t\tADX.approve(address(uniswap), uint(-1));\r\n\t\tADX.approve(address(ADXL), uint(-1));\r\n\t\tADXL.approve(address(uniswap), uint(-1));\r\n\t\tADXL.approve(address(ADXL), uint(-1));\r\n\t}\r\n\r\n\t// No need to check success here, no safeerc20\r\n\tfunction withdrawTokens(IERC20 token, uint amount) onlyOwner external {\r\n\t\ttoken.transfer(msg.sender, amount);\r\n\t}\r\n\r\n\tfunction tradeOnUni(address input, address output, uint amount) internal {\r\n\t\taddress[] memory path = new address[](3);\r\n\t\tpath[0] = input;\r\n\t\t// WETH\r\n\t\tpath[1] = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n\t\tpath[2] = output;\r\n\t\tuniswap.swapExactTokensForTokens(amount, uint(0), path, address(this), block.timestamp);\r\n\t}\r\n\r\n\tfunction loyaltyTradesHigher(uint amountToSell) external {\r\n\t\trequire(ADX.balanceOf(address(this)) == 0, 'must not have adx');\r\n\t\tuint initial = ADXL.balanceOf(address(this));\r\n\t\t// sell adx-loyalty on uniswap\r\n\t\ttradeOnUni(address(ADXL), address(ADX), amountToSell);\r\n\t\t// mint adx-loyalty with the ADX (profit adx-loyalty)\r\n\t\tILoyaltyPool(address(ADXL)).enter(ADX.balanceOf(address(this)));\r\n\t\t// safety check\r\n\t\trequire(ADXL.balanceOf(address(this)) > initial, 'did not make profit');\r\n\t}\r\n\r\n\tfunction loyaltyTradesLower(uint amountToBurn) external {\r\n\t\trequire(ADX.balanceOf(address(this)) == 0, 'must not have adx');\r\n\t\tuint initial = ADXL.balanceOf(address(this));\r\n\t\t// burn adx-loyalty to receive adx\r\n\t\tILoyaltyPool(address(ADXL)).leave(amountToBurn);\r\n\t\t// buy adx-loyalty with adx (profit adx-loyalty)\r\n\t\ttradeOnUni(address(ADX), address(ADXL), ADX.balanceOf(address(this)));\r\n\t\t// safety check\r\n\t\trequire(ADXL.balanceOf(address(this)) > initial, 'did not make profit');\r\n\t}\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADX\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADXL\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToSell\",\"type\":\"uint256\"}],\"name\":\"loyaltyTradesHigher\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToBurn\",\"type\":\"uint256\"}],\"name\":\"loyaltyTradesLower\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswap\",\"outputs\":[{\"internalType\":\"contract ISimpleUniswap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ADXLoyaltyArb","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://87404e85173ae7494eefa4562ade55cd9e06ea673dfdc6b64f1b3e808f42157f"}]}