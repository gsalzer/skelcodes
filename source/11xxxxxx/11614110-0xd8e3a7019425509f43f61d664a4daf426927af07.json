{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**Ñ„\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n\r\n/**\r\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\r\n * tokens and those that they have an allowance for, in a way that can be\r\n * recognized off-chain (via event analysis).\r\n */\r\nabstract contract ERC20Burnable is Context, ERC20 {\r\n    /**\r\n     * @dev Destroys `amount` tokens from the caller.\r\n     *\r\n     * See {ERC20-_burn}.\r\n     */\r\n    function burn(uint256 amount) public virtual {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\r\n     * allowance.\r\n     *\r\n     * See {ERC20-_burn} and {ERC20-allowance}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have allowance for ``accounts``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function burnFrom(address account, uint256 amount) public virtual {\r\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \"ERC20: burn amount exceeds allowance\");\r\n\r\n        _approve(account, _msgSender(), decreasedAllowance);\r\n        _burn(account, amount);\r\n    }\r\n}\r\n\r\n\r\ncontract DuckToken is ERC20Burnable, Ownable {\r\n\r\n    uint public constant PRESALE_SUPPLY         = 20000000e18;\r\n    uint public constant TEAM_SUPPLY            = 10000000e18;\r\n    uint public constant MAX_FARMING_POOL       = 70000000e18;\r\n\r\n    uint public currentFarmingPool;\r\n\r\n    constructor(address presaleWallet, address teamWallet) public ERC20(\"DuckToken\", \"DLC\") {\r\n        _mint(presaleWallet, PRESALE_SUPPLY);\r\n        _mint(teamWallet, TEAM_SUPPLY);\r\n    }\r\n\r\n    function mint(address to, uint256 amount) public onlyOwner {\r\n        require(currentFarmingPool.add(amount) <= MAX_FARMING_POOL, \"exceed farming amount\");\r\n        currentFarmingPool += amount; \r\n        _mint(to, amount);\r\n  }\r\n}\r\n\r\ncontract PoolController is Ownable {\r\n    \r\n    // DUCK TOKEN\r\n    DuckToken public duck;\r\n    // Array of pools\r\n    Pool[] public pools;\r\n    \r\n    address public devAddress;\r\n//   address ddimAddress = 0xFbEEa1C75E4c4465CB2FCCc9c6d6afe984558E20;\r\n    address public ddimTokenAddress;\r\n    address public drainAddress;\r\n\r\n    // Mapping is address is pool\r\n    mapping(address => bool) public canMint;\r\n\r\n    event NewPool(address indexed poolAddress, address lpToken);\r\n\r\n    constructor(address _duckTokenAddress, address _devAddress, address _ddimTokenAddress, address _drainAddress) public {\r\n        duck = DuckToken(_duckTokenAddress);\r\n        devAddress = _devAddress;\r\n        ddimTokenAddress = _ddimTokenAddress;\r\n        drainAddress = _drainAddress;\r\n    }\r\n\r\n    function setDrainAddress(address _drainAddress) public onlyOwner {\r\n        drainAddress = _drainAddress;\r\n    }\r\n    \r\n    // Add a new pool. Can only be called by the owner.\r\n    function newPool(address lpToken, uint startingBlock, uint[] memory blocks, uint[] memory farmingSupplies) public onlyOwner {\r\n        Pool pool = new Pool(lpToken, startingBlock, blocks, farmingSupplies);\r\n        pools.push(pool);\r\n\r\n        canMint[address(pool)] = true;\r\n        emit NewPool(address(pool), lpToken);\r\n    }\r\n\r\n    // Update already created pool by adding NEW period. Can only be called by the owner.\r\n    function addPeriod(uint poolIndex, uint startingBlock, uint blocks, uint farmingSupply) public onlyOwner {\r\n        pools[poolIndex].addPeriod(startingBlock, blocks, farmingSupply);\r\n    }\r\n    \r\n    // Add new revenue for a pool. Can only be called by the owner. \r\n    function addRevenue(uint poolIndex, address tokenAddress, uint amount, address _revenueSource) public onlyOwner {\r\n        pools[poolIndex].addRevenue(tokenAddress, amount, _revenueSource);\r\n    }\r\n\r\n    function changeEmergencyWithdrawStatus(uint poolIndex, bool status) public onlyOwner {\r\n        pools[poolIndex].changeEmergencyWithdrawStatus(status);\r\n    }\r\n\r\n    // Mint DUCK TOKEN. Can be called by pools only\r\n    function mint(address to, uint value) public {\r\n        require(canMint[msg.sender], \"only pools\");\r\n        duck.transferFrom(drainAddress, to, value);\r\n    }\r\n}\r\n\r\nabstract contract IUniswapPool {\r\n  address public token0;\r\n  address public token1;\r\n}\r\n\r\nabstract contract IUniswapRouter {\r\n  function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) virtual external returns (uint amountA, uint amountB);\r\n}\r\n\r\ncontract Pool {\r\n\r\n  using SafeMath for uint256;\r\n  using SafeERC20 for IERC20;\r\n\r\n    // Info of each user.\r\n  struct UserInfo {\r\n    uint256 amount;     // How many LP tokens the user has provided.\r\n    uint256 rewardDebt; // Reward debt. See explanation below.\r\n    //\r\n    // We do some fancy math here. Basically, any point in time, the amount of SUSHIs\r\n    // entitled to a user but is pending to be distributed is:\r\n    //\r\n    //   pending reward = (user.amount * pool.accSushiPerShare) - user.rewardDebt\r\n    //\r\n    // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\r\n    //   1. The pool's `accSushiPerShare` (and `lastRewardBlock`) gets updated.\r\n    //   2. User receives the pending reward sent to his/her address.\r\n    //   3. User's `amount` gets updated.\r\n    //   4. User's `rewardDebt` gets updated.\r\n  }\r\n\r\n  // Info of each period.\r\n    struct Period {\r\n        uint startingBlock;\r\n        uint blocks;\r\n        uint farmingSupply;\r\n        uint tokensPerBlock;\r\n    }\r\n\r\n  // Info of each period.\r\n    Period[] public periods;\r\n\r\n  // Controller address\r\n    PoolController public controller;\r\n\r\n  // Last block number that DUCKs distribution occurs.\r\n    uint public lastRewardBlock;\r\n  // The DUCK TOKEN\r\n  ERC20Burnable public duck;\r\n  // Address of LP token contract.\r\n  IERC20 public lpToken;\r\n  // Accumulated DUCKs per share, times 1e18. See below.\r\n  uint public accDuckPerShare;\r\n\r\n  // Info of each user that stakes LP tokens.\r\n  mapping(address => UserInfo) public userInfo;\r\n  \r\n  IUniswapRouter public uniswapRouter = IUniswapRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n\r\n  //Revenue part\r\n  struct Revenue {\r\n    address tokenAddress;\r\n    uint totalSupply;\r\n    uint amount;\r\n  }\r\n    \r\n  // Array of created revenues\r\n  Revenue[] public revenues;\r\n  \r\n  // mapping of claimed user revenues\r\n  mapping(address => mapping(uint => bool)) revenuesClaimed;\r\n\r\n  bool public canEmergencyWithdraw;\r\n\r\n  event Deposit(address indexed from, uint amount);\r\n  event Withdraw(address indexed to, uint amount);\r\n  event NewPeriod(uint indexed startingBlock, uint indexed blocks, uint farmingSupply);\r\n  event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n\r\n    modifier onlyController() {\r\n        require(msg.sender == address(controller), \"onlyController\"); \r\n        _;\r\n    }\r\n    \r\n    constructor(address _lpToken, uint _startingBlock, uint[] memory _blocks, uint[] memory _farmingSupplies) public {\r\n    require(_blocks.length > 0, \"emply data\");\r\n    require(_blocks.length == _farmingSupplies.length, \"invalid data\");\r\n\r\n    controller = PoolController(msg.sender);\r\n    duck = ERC20Burnable(controller.duck());\r\n    lpToken = IERC20(_lpToken);\r\n\r\n    addPeriod(_startingBlock, _blocks[0], _farmingSupplies[0]);\r\n    uint _bufStartingBlock = _startingBlock.add(_blocks[0]);\r\n\r\n    for(uint i = 1; i < _blocks.length; i++) {\r\n        addPeriod(_bufStartingBlock, _blocks[i], _farmingSupplies[i]);\r\n        _bufStartingBlock = _bufStartingBlock.add(_blocks[i]);\r\n    }\r\n    \r\n    IERC20(_lpToken).approve(address(uniswapRouter), uint256(-1));\r\n    \r\n    lastRewardBlock = _startingBlock;\r\n    }\r\n    \r\n  // Update a pool by adding NEW period. Can only be called by the controller.\r\n    function addPeriod(uint startingBlock, uint blocks, uint farmingSupply) public onlyController {\r\n    require(startingBlock >= block.number, \"startingBlock should be greater than now\");\r\n    \r\n    if(periods.length > 0) {\r\n      require(startingBlock > periods[periods.length-1].startingBlock.add(periods[periods.length-1].blocks), \"two periods in the same time\");\r\n    }\r\n\r\n        uint tokensPerBlock = farmingSupply.div(blocks);\r\n        Period memory newPeriod = Period({\r\n            startingBlock: startingBlock,\r\n            blocks: blocks.sub(1),\r\n            farmingSupply: farmingSupply,\r\n            tokensPerBlock: tokensPerBlock\r\n        });\r\n\r\n        periods.push(newPeriod);\r\n    emit NewPeriod(startingBlock, blocks, farmingSupply);\r\n    }\r\n\r\n  // Update reward variables of the given pool to be up-to-date.\r\n  function updatePool() public {\r\n    if (block.number <= lastRewardBlock) {\r\n      return;\r\n    }\r\n\r\n    claimRevenue(msg.sender);\r\n \r\n    uint256 lpSupply = lpToken.balanceOf(address(this));\r\n    if (lpSupply == 0) {\r\n      lastRewardBlock = block.number;\r\n      return;\r\n    }\r\n \r\n    uint256 duckReward = calculateDuckTokensForMint();\r\n    if (duckReward > 0) {\r\n      controller.mint(controller.devAddress(), duckReward.mul(7).div(100));\r\n      controller.mint(address(this), duckReward.mul(93).div(100));\r\n \r\n      accDuckPerShare = accDuckPerShare.add(duckReward.mul(1e18).mul(93).div(100).div(lpSupply));\r\n    }\r\n    \r\n    lastRewardBlock = block.number;\r\n  }\r\n  \r\n  // Deposit LP tokens to Pool for DUCK allocation.\r\n  function deposit(uint256 amount) public {\r\n    require(amount > 0, \"amount must be more than zero\");\r\n    UserInfo storage user = userInfo[msg.sender];\r\n \r\n    updatePool();\r\n \r\n    if (user.amount > 0) {\r\n      uint256 pending = user.amount.mul(accDuckPerShare).div(1e18).sub(user.rewardDebt);\r\n      if(pending > 0) {\r\n        safeDuckTransfer(msg.sender, pending);\r\n      }\r\n    }\r\n    \r\n    user.amount = user.amount.add(amount);\r\n    lpToken.safeTransferFrom(msg.sender, address(this), amount);\r\n    \r\n    user.rewardDebt = user.amount.mul(accDuckPerShare).div(1e18);\r\n    \r\n    emit Deposit(msg.sender, amount);\r\n  }\r\n\r\n   // Withdraw LP tokens from the Pool.\r\n  function withdraw(uint256 amount) public {\r\n\r\n    UserInfo storage user = userInfo[msg.sender];\r\n    \r\n    require(user.amount >= amount, \"withdraw: not good\");\r\n\r\n    updatePool();\r\n    \r\n    uint256 pending = user.amount.mul(accDuckPerShare).div(1e18).sub(user.rewardDebt);\r\n    if(pending > 0) {\r\n      safeDuckTransfer(msg.sender, pending);\r\n    }\r\n    \r\n    if(amount > 0) {\r\n      // lpToken.safeTransfer(address(msg.sender), amount);\r\n      user.amount = user.amount.sub(amount);\r\n\r\n      uniWithdraw(msg.sender, amount);\r\n    }\r\n     \r\n    user.rewardDebt = user.amount.mul(accDuckPerShare).div(1e18);\r\n    emit Withdraw(msg.sender, amount);\r\n  }\r\n  \r\n  // Withdraw without caring about rewards. EMERGENCY ONLY.\r\n    function emergencyWithdraw(uint256 pid) public {\r\n    require(canEmergencyWithdraw, \"function disabled\");\r\n    \r\n        UserInfo storage user = userInfo[msg.sender];\r\n        lpToken.safeTransfer(address(msg.sender), user.amount);\r\n        emit EmergencyWithdraw(msg.sender, pid, user.amount);\r\n        user.amount = 0;\r\n        user.rewardDebt = 0;\r\n    }\r\n\r\n  function changeEmergencyWithdrawStatus(bool status) public onlyController {\r\n    canEmergencyWithdraw = status;\r\n  }\r\n\r\n  function uniWithdraw(address receiver, uint lpTokenAmount) internal {\r\n    IUniswapPool uniswapPool = IUniswapPool(address(lpToken));\r\n\r\n    address token0 = uniswapPool.token0();\r\n    address token1 = uniswapPool.token1();\r\n\r\n    (uint amountA, uint amountB) = uniswapRouter.removeLiquidity(token0, token1, lpTokenAmount, 1, 1, address(this), block.timestamp + 100);\r\n\r\n    bool isDuckBurned;\r\n    bool token0Sent;\r\n    bool token1Sent;\r\n    if(token0 == address(duck)) {\r\n        duck.burn(amountA);\r\n        isDuckBurned = true;\r\n        token0Sent = true;\r\n    }\r\n\r\n    if(token1 == address(duck)) {\r\n        duck.burn(amountB);\r\n        isDuckBurned = true;\r\n        token1Sent = true;\r\n    }\r\n    \r\n    if(!token0Sent) {\r\n        if(token0 == controller.ddimTokenAddress() && !isDuckBurned) {\r\n            IERC20(controller.ddimTokenAddress()).transfer(address(0), amountA);\r\n        } else {\r\n            IERC20(token0).transfer(receiver, amountA);\r\n        }\r\n    }\r\n    \r\n    if(!token1Sent) {\r\n        if(token1 == controller.ddimTokenAddress() && !isDuckBurned) {\r\n            IERC20(controller.ddimTokenAddress()).transfer(address(0), amountB);\r\n        } else {\r\n            IERC20(token1).transfer(receiver, amountB);\r\n        }\r\n    }\r\n  }\r\n\r\n  // Get user pending reward. Frontend function..\r\n  function getUserPendingReward(address userAddress) public view returns(uint) {\r\n    UserInfo storage user = userInfo[userAddress];\r\n    uint256 duckReward = calculateDuckTokensForMint();\r\n    \r\n    uint256 lpSupply = lpToken.balanceOf(address(this));\r\n    if (lpSupply == 0) {\r\n      return 0;\r\n    }\r\n    \r\n    uint _accDuckPerShare = accDuckPerShare.add(duckReward.mul(1e18).mul(93).div(100).div(lpSupply));\r\n\r\n    return user.amount.mul(_accDuckPerShare).div(1e18).sub(user.rewardDebt);\r\n  }\r\n\r\n  // Get current period index.\r\n  function getCurrentPeriodIndex() public view returns(uint) {\r\n    for(uint i = 0; i < periods.length; i++) {\r\n        if(block.number > periods[i].startingBlock && block.number < periods[i].startingBlock.add(periods[i].blocks)) {\r\n            return i;\r\n        }\r\n    }\r\n  }\r\n\r\n  // Calculate DUCK Tokens for mint near current time.\r\n  function calculateDuckTokensForMint() public view returns(uint) {\r\n    uint totalTokens;\r\n    bool overflown;\r\n\r\n    for(uint i = 0; i < periods.length; i++) {\r\n        if(block.number < periods[i].startingBlock) {\r\n            break;\r\n        }\r\n\r\n        uint buf = periods[i].startingBlock.add(periods[i].blocks);\r\n\r\n      if(lastRewardBlock > buf) {\r\n        continue;\r\n      }\r\n\r\n        if(block.number > buf) {\r\n              totalTokens += buf.sub(max(lastRewardBlock, periods[i].startingBlock-1)).mul(periods[i].tokensPerBlock);\r\n            overflown = true;\r\n        } else {\r\n            if(overflown) {\r\n                totalTokens += block.number.sub(periods[i].startingBlock-1).mul(periods[i].tokensPerBlock);\r\n            } else {\r\n          totalTokens += block.number.sub(max(lastRewardBlock, periods[i].startingBlock-1)).mul(periods[i].tokensPerBlock);\r\n            }\r\n\r\n            break;\r\n        }\r\n    }\r\n\r\n    return totalTokens;\r\n  }\r\n\r\n  // Safe duck transfer function, just in case if rounding error causes pool to not have enough DUCKs.\r\n  function safeDuckTransfer(address to, uint256 amount) internal {\r\n    uint256 duckBal = duck.balanceOf(address(this));\r\n    if (amount > duckBal) {\r\n      duck.transfer(to, duckBal);\r\n    } else {\r\n      duck.transfer(to, amount);\r\n    }\r\n  }\r\n    \r\n  //--------------------------------------------------------------------------------------\r\n  //---------------------------------REVENUE PART-----------------------------------------\r\n  //--------------------------------------------------------------------------------------\r\n  \r\n  // Add new Revenue, can be called only by controller\r\n  function addRevenue(address _tokenAddress, uint _amount, address _revenueSource) public onlyController {\r\n    require(revenues.length < 50, \"exceed revenue limit\");\r\n\r\n    uint revenueBefore = IERC20(_tokenAddress).balanceOf(address(this));\r\n    IERC20(_tokenAddress).transferFrom(_revenueSource, address(this), _amount);\r\n    uint revenueAfter = IERC20(_tokenAddress).balanceOf(address(this));\r\n    _amount = revenueAfter.sub(revenueBefore);\r\n\r\n    Revenue memory revenue = Revenue({\r\n      tokenAddress: _tokenAddress,\r\n      totalSupply: lpToken.balanceOf(address(this)),\r\n      amount: _amount\r\n    });\r\n\r\n    revenues.push(revenue);\r\n  }\r\n\r\n  // Get user last revenue. Frontend function.\r\n  function getUserLastRevenue(address userAddress) public view returns(address, uint) {\r\n    UserInfo storage user = userInfo[userAddress];\r\n\r\n    for(uint i = 0; i < revenues.length; i++) {\r\n      if(!revenuesClaimed[userAddress][i]) {\r\n        uint userRevenue = revenues[i].amount.mul(user.amount).div(revenues[i].totalSupply);\r\n        return (revenues[i].tokenAddress, userRevenue);\r\n      }\r\n    }\r\n  }\r\n    \r\n  // claimRevenue is private function, called on updatePool for transaction caller\r\n  function claimRevenue(address userAddress) private {\r\n    UserInfo storage user = userInfo[userAddress];\r\n\r\n    for(uint i = 0; i < revenues.length; i++) {\r\n      if(!revenuesClaimed[userAddress][i]) {\r\n        revenuesClaimed[userAddress][i] = true;\r\n        uint userRevenue = revenues[i].amount.mul(user.amount).div(revenues[i].totalSupply);\r\n\r\n        safeRevenueTransfer(revenues[i].tokenAddress, userAddress, userRevenue);\r\n      }\r\n    }\r\n  }\r\n    \r\n  // Safe revenue transfer for avoid misscalculations\r\n  function safeRevenueTransfer(address tokenAddress, address to, uint amount) private {\r\n    uint balance = IERC20(tokenAddress).balanceOf(address(this));\r\n    if(balance == 0 || amount == 0) {\r\n      return;\r\n    }\r\n\r\n    if(balance >= amount) {\r\n      IERC20(tokenAddress).transfer(to, amount);\r\n    } else {\r\n      IERC20(tokenAddress).transfer(to, balance);\r\n    }\r\n  }\r\n\r\n  function max(uint a, uint b) public pure returns(uint) {\r\n    if(a > b) {\r\n      return a;\r\n    }\r\n    return b;\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_duckTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ddimTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_drainAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"}],\"name\":\"NewPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startingBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"farmingSupply\",\"type\":\"uint256\"}],\"name\":\"addPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_revenueSource\",\"type\":\"address\"}],\"name\":\"addRevenue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"canMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"changeEmergencyWithdrawStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ddimTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"drainAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duck\",\"outputs\":[{\"internalType\":\"contract DuckToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startingBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"blocks\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"farmingSupplies\",\"type\":\"uint256[]\"}],\"name\":\"newPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"contract Pool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_drainAddress\",\"type\":\"address\"}],\"name\":\"setDrainAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PoolController","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c0ba369c8db6eb3924965e5c4fd0b4c1b91e305f0000000000000000000000005e977851f7a0a094d802fc072b743b2d1ca6b9cc000000000000000000000000fbeea1c75e4c4465cb2fccc9c6d6afe984558e20000000000000000000000000d408edf30ddeddea353accb987198129e95b9207","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://06304148274af880c43418f2c6874816a01cdc129183d1852890e4410d3da671"}]}