{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity >=0.7.3;\r\npragma experimental ABIEncoderV2;\r\n\r\nlibrary SafeMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, \"SafeMath: add overflow\");\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, \"SafeMath: sub underflow\");\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"SafeMath: mul overflow\");\r\n    }\r\n\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract SuperBean {\r\n    using SafeMath for uint;\r\n\r\n    string public constant name = \"SuperBean\";\r\n    string public constant symbol = \"SBT\";\r\n    uint8 public constant decimals = 18;\r\n    uint public totalSupply;\r\n    mapping(address => uint) public balanceOf;\r\n    mapping(address => mapping(address => uint)) public allowance;\r\n\r\n    address public rainmaker;\r\n    uint public FEEDING_END_BLOCK = 11688888;\r\n    uint public MIN_STAKE_VALUE = 50000000000000000;\r\n    uint public MAX_STAKE_VALUE = 10000000000000000000;\r\n    uint public MIN_TIER_1 = 10000000000000000000;\r\n    uint public MIN_TIER_2 = 50000000000000000000;\r\n    uint public MIN_TIER_3 = 100000000000000000000;\r\n\r\n    uint constant MATURITY = 300;\r\n    uint constant MIN_CHANCE = 1;\r\n    uint constant MAX_CHANCE = 95;\r\n    uint8 constant LEFT_MASK = 0xf0;\r\n    uint8 constant RIGHT_MASK = 0xf;\r\n\r\n    struct Stake {\r\n      uint blockNumber;\r\n      uint8 rnd;\r\n      uint8 chance;\r\n      uint value;\r\n      uint reward;\r\n    }\r\n\r\n    mapping (address => Stake[]) StakeMap;\r\n\r\n    constructor() {\r\n      rainmaker = msg.sender;\r\n    }\r\n\r\n    // events\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    event StakeEvent(address sender, uint8 chance, uint value, uint amount);\r\n    event HarvestEvent(uint rnd, uint chance, uint value, uint reward);\r\n    event UnstakeEvent(address sender, uint beans, uint amount);\r\n    event SwapEvent(address sender, uint value, uint amount);\r\n    event FeedEvent(address sender, uint value, uint amount);\r\n\r\n    // modifiers\r\n    modifier onlyRainmaker {\r\n        require( msg.sender == rainmaker, \"SuperBeans: onlyRainmaker methods called by non-rainmaker.\" );\r\n        _;\r\n    }\r\n\r\n    function _mint(address to, uint value) internal {\r\n        totalSupply = totalSupply.add(value);\r\n        balanceOf[to] = balanceOf[to].add(value);\r\n        emit Transfer(address(0), to, value);\r\n    }\r\n\r\n    function _burn(address from, uint value) internal {\r\n        balanceOf[from] = balanceOf[from].sub(value);\r\n        totalSupply = totalSupply.sub(value);\r\n        emit Transfer(from, address(0), value);\r\n    }\r\n\r\n    function _approve( address owner, address spender, uint value ) private {\r\n        allowance[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    function _transfer( address from, address to, uint value ) private {\r\n        balanceOf[from] = balanceOf[from].sub(value);\r\n        balanceOf[to] = balanceOf[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    function approve(address spender, uint value) external returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address to, uint value) external returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom( address from, address to, uint value ) external returns (bool) {\r\n        if (allowance[from][msg.sender] != uint(-1)) {\r\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub( value );\r\n        }\r\n        _transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    // configuration\r\n    function setRainmaker(address newRainmaker) external onlyRainmaker {\r\n        rainmaker = newRainmaker;\r\n    }\r\n    function setStake(uint typ, uint value) external onlyRainmaker {\r\n        if (typ == 0) {\r\n            MIN_STAKE_VALUE = value;\r\n        } else if (typ == 1) {\r\n            MAX_STAKE_VALUE = value;\r\n        }\r\n    }\r\n    function setTier(uint tier, uint value) external onlyRainmaker {\r\n        if (tier == 1) {\r\n            MIN_TIER_1 = value;\r\n        } else if (tier == 2) {\r\n            MIN_TIER_2 = value;\r\n        } else if (tier == 3) {\r\n            MIN_TIER_3 = value;\r\n        }\r\n    }\r\n    function setFeedingEndBlock(uint value) external onlyRainmaker {\r\n        require( block.number + MATURITY < value, 'SuperBean: invalid feeding end block');\r\n        FEEDING_END_BLOCK = value;\r\n    }\r\n\r\n    // stake\r\n    function stake(uint chance) external payable {\r\n        uint value = msg.value;\r\n        require(chance >= MIN_CHANCE && chance <= MAX_CHANCE, \"SuperBean: invalid chance\");\r\n        require(value >= MIN_STAKE_VALUE && value <= MAX_STAKE_VALUE, \"SuperBean: invalid stake value\");\r\n\r\n        Stake[] storage stakes = StakeMap[msg.sender];\r\n        uint a = chance.mul(uint(100).sub(chance)).mul(uint(100).sub(chance));\r\n        uint minBeans = value.mul(chance).mul(uint(100).sub(chance))/uint(10000);\r\n        uint maxBeans = value.mul(uint(1000000).sub(a))/(chance.mul(uint(10000)));\r\n        uint fee = minBeans/uint(100);\r\n        uint amount = minBeans.sub(fee);\r\n        uint reward = maxBeans.sub(minBeans);\r\n        _mint(rainmaker, fee);\r\n        _mint(msg.sender, amount);\r\n        stakes.push(Stake(block.number, uint8(255), uint8(chance), value, reward));\r\n        emit StakeEvent(msg.sender, uint8(chance), value, amount);\r\n    }\r\n\r\n    // harvest\r\n    function harvest(address addr) external {\r\n        Stake[] storage stakes = StakeMap[addr];\r\n        require(stakes.length > 0, \"SuperBean: no stakes to harvest\");\r\n        require(stakes[0].blockNumber + MATURITY < block.number, \"SuperBean: stakes not mature\");\r\n        require(stakes[stakes.length - 1].rnd == uint8(255), \"SuperBean: no pending stakes\");\r\n\r\n        uint rewards = 0;\r\n        uint fees = 0;\r\n        for (uint i = 0; i < stakes.length; i++) {\r\n            if (stakes[i].rnd != uint8(255) || stakes[i].blockNumber + MATURITY > block.number) {\r\n                continue;\r\n            }\r\n            uint rnd = random(hash(stakes[i]));\r\n            stakes[i].rnd = uint8(rnd);\r\n            if (rnd < stakes[i].chance) {\r\n                uint fee = stakes[i].reward.div(uint(100));\r\n                fees = fees.add(fee);\r\n                rewards = rewards.add(stakes[i].reward);\r\n                emit HarvestEvent(rnd, stakes[i].chance, stakes[i].value, stakes[i].reward);\r\n             } else{\r\n                emit HarvestEvent(rnd, stakes[i].chance, stakes[i].value, 0);\r\n             }\r\n        }\r\n        if (rewards > 0) {\r\n            _mint(rainmaker, fees);\r\n            _mint(addr, rewards);\r\n        }\r\n    }\r\n\r\n    // unstake\r\n    function unstake(uint amount) external payable {\r\n        require(amount > 0 && balanceOf[msg.sender] >= amount && totalSupply > amount, \"SuperBean: inefficient beans\");\r\n        uint totalSeeds = payable(address(this)).balance;\r\n        uint seeds = amount.mul(totalSeeds)/totalSupply;\r\n        msg.sender.transfer(seeds);\r\n        _burn(msg.sender, amount);\r\n        emit UnstakeEvent(msg.sender, amount, seeds);\r\n    }\r\n\r\n    function swap() external payable {\r\n        require(msg.value > 0, \"SuperBean: inefficient funds to swap\");\r\n        uint totalSeeds = payable(address(this)).balance;\r\n        uint beans = 0;\r\n        if (totalSeeds > 0 && totalSeeds > msg.value && totalSupply > 0) {\r\n            beans = (msg.value).mul(totalSupply)/totalSeeds.sub(msg.value);\r\n        } else {\r\n            beans = msg.value;\r\n        }\r\n        uint fee = beans/100;\r\n        uint amount = beans.sub(fee);\r\n        _mint(msg.sender, amount);\r\n        _mint(rainmaker, fee);\r\n        emit SwapEvent(msg.sender, msg.value, beans);\r\n    }\r\n\r\n    function feed() external payable {\r\n        require(block.number < FEEDING_END_BLOCK, \"SuperBean: feeding is over\");\r\n        require(msg.value >= MIN_TIER_1, \"SuperBean: inefficient funds to feed\");\r\n        uint beans = 0;\r\n        if (msg.value >= MIN_TIER_3) {\r\n            beans = (msg.value).mul(9)/5;\r\n        } else if (msg.value >= MIN_TIER_2) {\r\n            beans = (msg.value).mul(7)/5;\r\n        } else {\r\n            beans = (msg.value).mul(6)/5;\r\n        }\r\n        uint fees = beans/10;\r\n        _mint(msg.sender, beans);\r\n        _mint(rainmaker, fees);\r\n        emit FeedEvent(msg.sender, msg.value, beans);\r\n    }\r\n\r\n    function hash(Stake memory s) internal view returns(bytes32) {\r\n        bytes32 hashStr = keccak256(abi.encodePacked(s.blockNumber, s.chance, s.value, block.difficulty, blockhash(block.number), block.timestamp));\r\n        return hashStr;\r\n    }\r\n\r\n    function random(bytes32 gene) internal pure returns(uint) {\r\n        uint first = 10;\r\n        uint second = 10;\r\n        uint cnt = 0;\r\n        for (uint i = gene.length - 1; i >= 0 && cnt < 2; i--) {\r\n            uint r = uint8(gene[i]) & RIGHT_MASK;\r\n            if (r < 10) {\r\n                if (cnt == 0) {\r\n                    first = r;\r\n                } else if (cnt == 1) {\r\n                    second = r;\r\n                }\r\n                cnt = cnt + 1;\r\n            }\r\n            uint l = (uint8(gene[i]) & LEFT_MASK) >> 4;\r\n            if (l < 10) {\r\n                if (cnt == 0) {\r\n                    first = l;\r\n                } else if (cnt == 1) {\r\n                    second = l;\r\n                }\r\n                cnt = cnt + 1;\r\n            }\r\n        }\r\n        return second * 10 + first;\r\n    }\r\n\r\n    function getStakes(address addr) public view returns (Stake[] memory) {\r\n      return StakeMap[addr];\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rnd\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"HarvestEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"chance\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SwapEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"beans\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnstakeEvent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEEDING_END_BLOCK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_STAKE_VALUE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_STAKE_VALUE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_TIER_1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_TIER_2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_TIER_3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feed\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getStakes\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"rnd\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"chance\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"internalType\":\"struct SuperBean.Stake[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rainmaker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setFeedingEndBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRainmaker\",\"type\":\"address\"}],\"name\":\"setRainmaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"typ\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chance\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"SuperBean","CompilerVersion":"v0.7.5+commit.eb77ed08","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://653fa3070d5eb63562d436955964b214ba8371fd3a26dd86eff5b5d2838ee9c7"}]}