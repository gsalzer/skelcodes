{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity =0.6.11;\r\n\r\n/**\r\n * @title AragonNFT\r\n * @author Eduardo Antu√±a <eduadiez@gmail.com>\r\n * @dev The main goal of this token contract is to make it easy for anyone to install\r\n * this AragonApp to get an NFT Token that can be handled from a DAO. This will be the \r\n * NFT used by the DAppNode association.\r\n * It's based on the ERC721 standard http://ERC721.org https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n * and the awesome smartcontracts and tools developed by https://github.com/OpenZeppelin/openzeppelin-solidity \r\n * as well as those developed by Aragon https://github.com/aragon\r\n */\r\ninterface AragonNFT {\r\n\r\n    /**\r\n     * @notice Function to initialize the AragonApp\r\n     * @dev it will revert if the name or symbol is not specified.\r\n     * @param _name Token name\r\n     * @param _symbol Token symbol\r\n     */\r\n    function initialize(string memory _name, string memory _symbol) external;\r\n    /**\r\n     * @notice Mint `_tokenId` and give the ownership to  `_to` \r\n     * @dev Only those who have the `MINT_ROLE` permission will be able to do it \r\n     * @param _to The address that will own the minted token\r\n     * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n     */\r\n    function mint(address _to, uint256 _tokenId) external;\r\n\r\n    /**\r\n     * @notice Burn tokenId: `_tokenId`\r\n     * @dev Only those who have the `BURN_ROLE` persmission will be able to do it\r\n     * Reverts if the token does not exist\r\n     * @param _tokenId uint256 ID of the token being burned by the msg.sender\r\n    */\r\n    function burn(uint256 _tokenId) external;\r\n\r\n    /**\r\n     * @notice Set `_uri` for `_tokenId`, \r\n     * @dev Only those who have the `MINT_ROLE` persmission will be able to do it\r\n     * Reverts if the token ID does not exist\r\n     * @param _tokenId uint256 ID of the token to set its URI\r\n     * @param _uri string URI to assign\r\n     */\r\n    function setTokenURI(uint256 _tokenId, string memory _uri) external;\r\n\r\n    /**\r\n     * @dev Internal function to set the base URI for all token IDs. It is\r\n     * automatically added as a prefix to the value returned in {tokenURI}.\r\n     *\r\n     * _Available since v2.5.0._\r\n     */\r\n    function setBaseURI(string memory baseURI) external;\r\n\r\n    /**\r\n     * @notice Clear current approval of `_tokenId` owned by `_owner`,\r\n     * @dev only the owner of the token can do it \r\n     * Reverts if the given address is not indeed the owner of the token\r\n     * @param _owner owner of the token\r\n     * @param _tokenId uint256 ID of the token to be transferred\r\n     */\r\n    function clearApproval(address _owner, uint256 _tokenId) external;\r\n\r\n    /**\r\n     * @notice Returns whether `_tokenId` exists\r\n     * @dev Returns whether the specified token exists\r\n     * @param _tokenId uint256 ID of the token to query the existence of\r\n     * @return whether the token exists\r\n     */\r\n    function exists(uint256 _tokenId) external view returns (bool);\r\n    /**\r\n     * @notice Gets the list of token IDs of the `_owner`\r\n     * @dev Gets the list of token IDs of the requested owner\r\n     * @param _owner address owning the tokens\r\n     * @return uint256[] List of token IDs owned by the requested address\r\n     */\r\n    function tokensOfOwner(address _owner) external view returns (uint256[] memory);\r\n}\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev These functions deal with verification of Merkle trees (hash trees),\r\n */\r\nlibrary MerkleProof {\r\n    /**\r\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\r\n     * defined by `root`. For this, a `proof` must be provided, containing\r\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\r\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\r\n     */\r\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\r\n        bytes32 computedHash = leaf;\r\n\r\n        for (uint256 i = 0; i < proof.length; i++) {\r\n            bytes32 proofElement = proof[i];\r\n\r\n            if (computedHash <= proofElement) {\r\n                // Hash(current computed hash + current element of the proof)\r\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\r\n            } else {\r\n                // Hash(current element of the proof + current computed hash)\r\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\r\n            }\r\n        }\r\n\r\n        // Check if the computed hash (root) is equal to the provided root\r\n        return computedHash == root;\r\n    }\r\n}\r\n\r\npragma solidity >=0.5.0;\r\n\r\n// Allows anyone to claim a token if they exist in a merkle root.\r\ninterface IMerkleDistributor {\r\n    // Returns the address of the token distributed by this contract.\r\n    function token() external view returns (address);\r\n    // Returns the merkle root of the merkle tree containing account balances available to claim.\r\n    function merkleRoot() external view returns (bytes32);\r\n    // Returns true if the index has been marked claimed.\r\n    function isClaimed(uint256 index) external view returns (bool);\r\n    // Claim the given amount of the token to the given address. Reverts if the inputs are invalid.\r\n    function claim(uint256 index, address account, uint256 amount, bytes32[] calldata merkleProof) external;\r\n\r\n    // This event is triggered whenever a call to #claim succeeds.\r\n    event Claimed(uint256 index, address account, uint256 amount);\r\n}\r\n\r\npragma solidity =0.6.11;\r\n\r\ncontract MerkleDistributor is IMerkleDistributor {\r\n    address public immutable override token;\r\n    bytes32 public immutable override merkleRoot;\r\n\r\n    // This is a packed array of booleans.\r\n    mapping(uint256 => uint256) private claimedBitMap;\r\n\r\n    constructor(address token_, bytes32 merkleRoot_) public {\r\n        token = token_;\r\n        merkleRoot = merkleRoot_;\r\n    }\r\n\r\n    function isClaimed(uint256 index) public view override returns (bool) {\r\n        uint256 claimedWordIndex = index / 256;\r\n        uint256 claimedBitIndex = index % 256;\r\n        uint256 claimedWord = claimedBitMap[claimedWordIndex];\r\n        uint256 mask = (1 << claimedBitIndex);\r\n        return claimedWord & mask == mask;\r\n    }\r\n\r\n    function _setClaimed(uint256 index) private {\r\n        uint256 claimedWordIndex = index / 256;\r\n        uint256 claimedBitIndex = index % 256;\r\n        claimedBitMap[claimedWordIndex] = claimedBitMap[claimedWordIndex] | (1 << claimedBitIndex);\r\n    }\r\n\r\n    function claim(uint256 index, address account, uint256 tokenId, bytes32[] calldata merkleProof) external override {\r\n        require(!isClaimed(index), 'MerkleDistributor: Drop already claimed.');\r\n\r\n        // Verify the merkle proof.\r\n        bytes32 node = keccak256(abi.encodePacked(index, account, tokenId));\r\n        require(MerkleProof.verify(merkleProof, merkleRoot, node), 'MerkleDistributor: Invalid proof.');\r\n\r\n        // Mark it claimed and send the token.\r\n        _setClaimed(index);\r\n        \r\n        AragonNFT(token).mint(account, tokenId);\r\n\r\n        emit Claimed(index, account, tokenId);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot_\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"isClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MerkleDistributor","CompilerVersion":"v0.6.11+commit.5ef660b1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000ccc014e5735bbd21928384142e6460b452f63a26cc1228ea712d42abe82d88b07c5bfb1982c6c1c550071ca3fa44431d11b8c55a","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://6af72130da8b4eddbd183c87e4b4e139802a8d1ca6e93f1dc110e06b6da90658"}]}