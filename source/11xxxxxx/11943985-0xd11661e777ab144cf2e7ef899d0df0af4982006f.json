{"status":"1","message":"OK","result":[{"SourceCode":"{\"ERC20Interface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.6.0;\\n\\nabstract contract ERC20Interface {\\n    function totalSupply() public virtual view returns (uint);\\n    function balanceOf(address tokenOwner) public virtual view returns (uint256 balance);\\n    function allowance(address tokenOwner, address spender) public virtual view returns (uint256 remaining);\\n    function transfer(address to, uint256 tokens) public virtual returns (bool success);\\n    function approve(address spender, uint256 tokens) public virtual returns (bool success);\\n    function transferFrom(address from, address to, uint256 tokens) public virtual returns (bool success);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 tokens);\\n    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\\n}\"},\"LittleLink.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.6.0;\\n\\nimport \\u0027./SafeMath.sol\\u0027;\\nimport \\u0027./ERC20Interface.sol\\u0027;\\nimport \\u0027./Owned.sol\\u0027;\\n\\ncontract LittleLink is ERC20Interface, Owned {\\n    using SafeMath for uint256;\\n    string public symbol = \\\"LITTLE\\\";\\n    string public  name = \\\"LITTLE LINK\\\";\\n    uint256 public decimals = 18;\\n    uint256 private maxCapSupply = 2000000 * 10**(decimals); // 1 million\\n    uint256 _totalSupply = 100000 * 10 ** (decimals); // 100,000\\n    address farming;\\n    \\n    mapping(address =\\u003e uint256) balances;\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) allowed;\\n    \\n    constructor() public {\\n        balances[owner] = balances[owner].add(_totalSupply);\\n        emit Transfer(address(0),owner, _totalSupply);\\n    }\\n    \\n    function SetFarming(address _address) external onlyOwner{\\n        require(_address != address(0), \\\"Invalid address\\\");\\n        farming = _address;\\n    }\\n    \\n    function MintTokens(uint256 _amount, address _beneficiary) public returns(bool){\\n        require(msg.sender == farming);\\n        require(_beneficiary != address(0), \\\"Invalid address\\\");\\n        require(_totalSupply.add(_amount) \\u003c= maxCapSupply, \\\"exceeds max cap supply 2 million\\\");\\n        _totalSupply = _totalSupply.add(_amount);\\n        \\n        balances[_beneficiary] = balances[_beneficiary].add(_amount);\\n        \\n        emit Transfer(address(0),_beneficiary, _amount);\\n        return true;\\n    }\\n    \\n    function BurnTokens(uint256 _amount) external {\\n        _burn(_amount, msg.sender);\\n    }\\n\\n    function _burn(uint256 _amount, address _account) internal {\\n        require(balances[_account] \\u003e= _amount, \\\"insufficient account balance\\\");\\n        _totalSupply = _totalSupply.sub(_amount);\\n        balances[_account] = balances[_account].sub(_amount);\\n        emit Transfer(_account, address(0), _amount);\\n    }\\n    \\n    function totalSupply() public override view returns (uint256){\\n       return _totalSupply; \\n    }\\n    \\n    function balanceOf(address tokenOwner) public override view returns (uint256 balance) {\\n        return balances[tokenOwner];\\n    }\\n\\n    function transfer(address to, uint256 tokens) public override returns  (bool success) {\\n        require(address(to) != address(0));\\n        require(balances[msg.sender] \\u003e= tokens );\\n        require(balances[to].add(tokens) \\u003e= balances[to]);\\n            \\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\\n        balances[to] = balances[to].add(tokens);\\n        emit Transfer(msg.sender,to,tokens);\\n        return true;\\n    }\\n\\n    function approve(address spender, uint256 value) public override returns (bool) {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    function transferFrom(address from, address to, uint256 tokens) public override returns (bool success){\\n        require(tokens \\u003c= allowed[from][msg.sender]); //check allowance\\n        require(balances[from] \\u003e= tokens);\\n        require(from != address(0), \\\"Invalid address\\\");\\n        require(to != address(0), \\\"Invalid address\\\");\\n        \\n        balances[from] = balances[from].sub(tokens);\\n        balances[to] = balances[to].add(tokens);\\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\\n        emit Transfer(from,to,tokens);\\n        return true;\\n    }\\n    \\n    function allowance(address tokenOwner, address spender) public override view returns (uint256 remaining) {\\n        return allowed[tokenOwner][spender];\\n    }\\n    \\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\n        _approve(msg.sender, spender, allowed[msg.sender][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\n        _approve(msg.sender, spender, allowed[msg.sender][spender].sub(subtractedValue));\\n        return true;\\n    }\\n    \\n    function _approve(address owner, address spender, uint256 value) internal {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        allowed[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n}\"},\"Owned.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.6.0;\\n\\ncontract Owned {\\n    address payable public owner;\\n\\n    event OwnershipTransferred(address indexed _from, address indexed _to);\\n\\n    constructor() public {\\n        owner = msg.sender;\\n    }\\n\\n    modifier onlyOwner {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    function transferOwnership(address payable _newOwner) public onlyOwner {\\n        owner = _newOwner;\\n        emit OwnershipTransferred(msg.sender, _newOwner);\\n    }\\n}\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.6.0;\\n\\nlibrary SafeMath {\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a == 0) {\\n      return 0;\\n    }\\n    uint256 c = a * b;\\n    assert(c / a == b);\\n    return c;\\n  }\\n\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // assert(b \\u003e 0); // Solidity automatically throws when dividing by 0\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n    return c;\\n  }\\n\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    assert(b \\u003c= a);\\n    return a - b;\\n  }\\n\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    assert(c \\u003e= a);\\n    return c;\\n  }\\n  \\n  function ceil(uint a, uint m) internal pure returns (uint r) {\\n    return (a + m - 1) / m * m;\\n  }\\n}\"}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"BurnTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"MintTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"SetFarming\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"LittleLink","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c92741f8d06e903139dd89711e9b5773ab1b65bb8b51fb36f5d1fd48512fe029"}]}