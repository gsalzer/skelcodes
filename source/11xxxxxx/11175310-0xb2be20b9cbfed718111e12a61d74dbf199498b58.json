{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts\\library\\NameFilter.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.12;\r\n\r\nlibrary NameFilter {\r\n    /**\r\n     * @dev filters name strings\r\n     * -converts uppercase to lower case.\r\n     * -makes sure it does not start/end with a space\r\n     * -makes sure it does not contain multiple spaces in a row\r\n     * -cannot be only numbers\r\n     * -cannot start with 0x\r\n     * -restricts characters to A-Z, a-z, 0-9, and space.\r\n     * @return reprocessed string in bytes32 format\r\n     */\r\n    function nameFilter(string memory _input) internal pure returns (bytes32) {\r\n        bytes memory _temp = bytes(_input);\r\n        uint256 _length = _temp.length;\r\n\r\n        //sorry limited to 32 characters\r\n        require(_length <= 32 && _length > 0, \"string must be between 1 and 32 characters\");\r\n        // make sure first two characters are not 0x\r\n        if (_temp[0] == 0x30) {\r\n            require(_temp[1] != 0x78, 'string cannot start with 0x');\r\n            require(_temp[1] != 0x58, 'string cannot start with 0X');\r\n        }\r\n\r\n        // create a bool to track if we have a non number character\r\n        bool _hasNonNumber;\r\n\r\n        // convert & check\r\n        for (uint256 i = 0; i < _length; i++) {\r\n            // if its uppercase A-Z\r\n            if (_temp[i] > 0x40 && _temp[i] < 0x5b) {\r\n                // convert to lower case a-z\r\n                _temp[i] = bytes1(uint8(_temp[i]) + 32);\r\n\r\n                // we have a non number\r\n                if (_hasNonNumber == false) _hasNonNumber = true;\r\n            } else {\r\n                require(\r\n                    // OR lowercase a-z\r\n                    (_temp[i] > 0x60 && _temp[i] < 0x7b) ||\r\n                        // or 0-9\r\n                        (_temp[i] > 0x2f && _temp[i] < 0x3a),\r\n                    'string contains invalid characters'\r\n                );\r\n\r\n                // see if we have a character other than a number\r\n                if (_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39)) _hasNonNumber = true;\r\n            }\r\n        }\r\n\r\n        require(_hasNonNumber == true, 'string cannot be only numbers');\r\n\r\n        bytes32 _ret;\r\n        assembly {\r\n            _ret := mload(add(_temp, 32))\r\n        }\r\n        return (_ret);\r\n    }\r\n}\r\n\r\n// File: contracts\\PlayerBookTest.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\ncontract PlayerBook {\r\n    using NameFilter for string;\r\n\r\n    /**\r\n     * check name string\r\n     */\r\n    function checkIfNameValid(string memory nameStr) public pure returns (bool) {\r\n        bytes32 name = nameStr.nameFilter();\r\n        if (name == 'sake') {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"nameStr\",\"type\":\"string\"}],\"name\":\"checkIfNameValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"PlayerBook","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://eb7709642aa34def06a5c727cf1b2b63dfba5984d483805eea241b3e326adb88"}]}