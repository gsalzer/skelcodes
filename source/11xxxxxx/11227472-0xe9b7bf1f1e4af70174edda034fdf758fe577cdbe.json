{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/libraries/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity =0.5.16;\\r\\n\\r\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\r\\n\\r\\nlibrary SafeMath {\\r\\n    function add(uint x, uint y) internal pure returns (uint z) {\\r\\n        require((z = x + y) >= x, 'ds-math-add-overflow');\\r\\n    }\\r\\n\\r\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\r\\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\\r\\n    }\\r\\n\\r\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\r\\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\\r\\n    }\\r\\n    \\r\\n    function div(uint a, uint b) internal pure returns (uint z) {\\r\\n        require(b > 0);\\r\\n        return a / b;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/MonetAirdrop.sol\": {\r\n      \"content\": \"pragma solidity =0.5.16;\\r\\n\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./libraries/SafeMath.sol\\\";\\r\\n\\r\\ncontract MonetAirdrop is Ownable {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    address public tokenCards;\\r\\n    uint256 public laveCards;\\r\\n    mapping(uint256 => uint256) cardNums;\\r\\n    mapping(address => bool) public partner;\\r\\n\\r\\n    constructor(address cards) public {\\r\\n        tokenCards = cards;\\r\\n    }\\r\\n\\r\\n    // EXTERNAL\\r\\n    function notify(address[] calldata accounts, uint256[] calldata cards) external onlyOwner {\\r\\n        setCards(cards);\\r\\n        setPartner(accounts);\\r\\n    }\\r\\n\\r\\n    function setPartner(address[] memory accounts) public onlyOwner {\\r\\n        for (uint256 i = 0; i < accounts.length; i++) {\\r\\n            partner[accounts[i]] = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setCards(uint256[] memory cards) public onlyOwner {\\r\\n        require(cards.length > 0, \\\"cards is empty\\\");\\r\\n\\r\\n        uint256 levelMax = 10;\\r\\n        uint256 _laveCards = laveCards;\\r\\n        for (uint256 i = 0; i < cards.length; i++) {\\r\\n            cardNums[levelMax.sub(i)] = cards[i];\\r\\n            _laveCards = _laveCards.add(cards[i]);\\r\\n        }\\r\\n        laveCards = _laveCards;\\r\\n    }\\r\\n\\r\\n    function airdrop() external onlyCaller(msg.sender) {\\r\\n        require(laveCards > 0, \\\"lave cards is zero\\\");\\r\\n        require(partner[msg.sender], \\\"Caller is not partner\\\");\\r\\n\\r\\n        uint256 seed = uint256(\\r\\n            keccak256(abi.encodePacked(block.difficulty, now))\\r\\n        );\\r\\n        uint256 num = 0;\\r\\n        uint256 random = seed % laveCards;\\r\\n        for (uint256 i = 10; i > 4; i--) {\\r\\n            if (cardNums[i] == 0) continue;\\r\\n            num = num.add(cardNums[i]);\\r\\n            if (random <= num) {\\r\\n                partner[msg.sender] = false;\\r\\n                laveCards = laveCards.sub(1);\\r\\n                cardNums[i] = cardNums[i].sub(1);\\r\\n                uint256 color = (seed / 10 - seed) % 4;\\r\\n                uint256[] memory cards = new uint256[](1);\\r\\n                cards[0] = i.mul(10).add(color).add(1000);\\r\\n                ICardERC(tokenCards).cardsBatchMint(msg.sender, cards);\\r\\n                emit Airdrop(msg.sender, cards[0]);\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // MODIFIER\\r\\n    modifier onlyCaller(address account) {\\r\\n        uint256 size;\\r\\n        assembly {\\r\\n            size := extcodesize(account)\\r\\n        }\\r\\n        require(size == 0, \\\"account is contract\\\");\\r\\n\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // EVENT\\r\\n    event Airdrop(address indexed sender, uint256 card);\\r\\n}\\r\\n\\r\\ninterface ICardERC {\\r\\n    function cardsBatchMint(address _to, uint256[] calldata _cards) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Ownable.sol\": {\r\n      \"content\": \"pragma solidity =0.5.16;\\r\\n\\r\\ncontract Ownable {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    constructor() internal {\\r\\n        _owner = msg.sender;\\r\\n        emit OwnershipTransferred(address(0), _owner);\\r\\n    }\\r\\n\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function isOwner() public view returns (bool) {\\r\\n        return msg.sender == _owner;\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cards\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"card\",\"type\":\"uint256\"}],\"name\":\"Airdrop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"airdrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"laveCards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"cards\",\"type\":\"uint256[]\"}],\"name\":\"notify\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"partner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"cards\",\"type\":\"uint256[]\"}],\"name\":\"setCards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"setPartner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenCards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MonetAirdrop","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000001014cf898383d275da1c2ed970d0b2cd5ffef3c2","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}