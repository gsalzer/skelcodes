{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/home/romario/Work/Develop/Rebase/new-merkle-airdrop/constructor-eth-merkle-airdrop/contracts/MerkleAirdrop.sol\": {\r\n      \"content\": \"/**\\n * Copyright (C) 2018  Smartz, LLC\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\").\\n * You may not use this file except in compliance with the License.\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND (express or implied).\\n */\\n\\npragma solidity ^0.4.23;\\n\\n/**\\n * @title MerkleAirdrop\\n * Transfers fixed amount of tokens to anybody, presented merkle proof for merkle root, placed in contract\\n *\\n * @author Boogerwooger <sergey.prilutskiy@smartz.io>\\n */\\nimport 'openzeppelin-solidity/contracts/token/ERC20/MintableToken.sol';\\n\\ncontract MerkleAirdrop {\\n\\n    address owner;\\n    bytes32 public merkleRoot;\\n    bool public cancelable;\\n    MintableToken tokenContract;\\n    mapping (address => bool) spent;\\n\\n    event AirdropTransfer(address addr, uint256 num);\\n    event OwnershipTransferred(address previousOwner, address newOwner);\\n\\n    modifier isCancelable() {\\n        require(cancelable, 'forbidden action');\\n        _;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    constructor(address _tokenContract, bytes32 _merkleRoot, bool _cancelable) public {\\n        owner = msg.sender;\\n        tokenContract = MintableToken(_tokenContract);\\n        merkleRoot = _merkleRoot;\\n        cancelable = _cancelable;\\n    }\\n\\n\\n    function setRoot(bytes32 _merkleRoot) public onlyOwner {\\n        merkleRoot = _merkleRoot;\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return owner;\\n    }\\n\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(owner, newOwner);\\n        owner = newOwner;\\n    }\\n\\n\\tfunction contractTokenBalance() public view returns(uint) {\\n\\t\\treturn tokenContract.balanceOf(address(this));\\n\\t}\\n\\n    function claim_rest_of_tokens_and_selfdestruct() public isCancelable onlyOwner returns(bool) {\\n        require(tokenContract.balanceOf(address(this)) >= 0);\\n        require(tokenContract.transfer(owner, tokenContract.balanceOf(address(this))));\\n        selfdestruct(owner);\\n        return true;\\n    }\\n\\n    function getTokensByMerkleProof(bytes32[] _proof, address _who, uint256 _amount) public returns(bool) {\\n        require(spent[_who] != true, \\\"You can claim tokens only once.\\\");\\n        require(_amount > 0, \\\"Amount should be > 0\\\");\\n        // require(msg.sender == _who, \\\"Users can claim tokens only for themselves.\\\");\\n\\n        if (!checkProof(_proof, leaf_from_address_and_num_tokens(_who, _amount))) {\\n            return false;\\n        }\\n\\n        spent[_who] = true;\\n\\n        if (tokenContract.transfer(_who, _amount) == true) {\\n            emit AirdropTransfer(_who, _amount);\\n            return true;\\n        }\\n        require(false, \\\"Transfer failed!\\\");\\n    }\\n\\n    function addressToAsciiString(address x) internal pure returns (string) {\\n        bytes memory s = new bytes(40);\\n        for (uint i = 0; i < 20; i++) {\\n            byte b = byte(uint8(uint(x) / (2**(8*(19 - i)))));\\n            byte hi = byte(uint8(b) / 16);\\n            byte lo = byte(uint8(b) - 16 * uint8(hi));\\n            s[2*i] = char(hi);\\n            s[2*i+1] = char(lo);\\n        }\\n        return string(s);\\n    }\\n\\n    function char(byte b) internal pure returns (byte c) {\\n        if (b < 10) return byte(uint8(b) + 0x30);\\n        else return byte(uint8(b) + 0x57);\\n    }\\n\\n    function uintToStr(uint i) internal pure returns (string){\\n        if (i == 0) return \\\"0\\\";\\n        uint j = i;\\n        uint length;\\n        while (j != 0){\\n            length++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(length);\\n        uint k = length - 1;\\n        while (i != 0){\\n            bstr[k--] = byte(48 + i % 10);\\n            i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    function leaf_from_address_and_num_tokens(address _a, uint256 _n) internal pure returns(bytes32 ) {\\n        string memory prefix = \\\"0x\\\";\\n        string memory space = \\\" \\\";\\n\\n        bytes memory _ba = bytes(prefix);\\n        bytes memory _bb = bytes(addressToAsciiString(_a));\\n        bytes memory _bc = bytes(space);\\n        bytes memory _bd = bytes(uintToStr(_n));\\n        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length);\\n        bytes memory babcde = bytes(abcde);\\n        uint k = 0;\\n        for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\\n        for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\\n        for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\\n        for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\\n\\n        return bytes32(keccak256(abi.encodePacked(abcde)));\\n    }\\n\\n    function checkProof(bytes32[] proof, bytes32 hash) internal view returns (bool) {\\n        bytes32 el;\\n        bytes32 h = hash;\\n\\n        for (uint i = 0; i <= proof.length - 1; i += 1) {\\n            el = proof[i];\\n\\n            if (h < el) {\\n                h = keccak256(abi.encodePacked(h, el));\\n            } else {\\n                h = keccak256(abi.encodePacked(el, h));\\n            }\\n        }\\n        return h == merkleRoot;\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.4.23;\\n\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n\\n  /**\\n  * @dev Multiplies two numbers, throws on overflow.\\n  */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    c = a * b;\\n    assert(c / a == b);\\n    return c;\\n  }\\n\\n  /**\\n  * @dev Integer division of two numbers, truncating the quotient.\\n  */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\\n    // uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n    return a / b;\\n  }\\n\\n  /**\\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\\n  */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    assert(b <= a);\\n    return a - b;\\n  }\\n\\n  /**\\n  * @dev Adds two numbers, throws on overflow.\\n  */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n    c = a + b;\\n    assert(c >= a);\\n    return c;\\n  }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/ownership/Ownable.sol\": {\r\n      \"content\": \"pragma solidity ^0.4.23;\\n\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n */\\ncontract Ownable {\\n  address public owner;\\n\\n\\n  event OwnershipRenounced(address indexed previousOwner);\\n  event OwnershipTransferred(\\n    address indexed previousOwner,\\n    address indexed newOwner\\n  );\\n\\n\\n  /**\\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n   * account.\\n   */\\n  constructor() public {\\n    owner = msg.sender;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(msg.sender == owner);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Allows the current owner to relinquish control of the contract.\\n   */\\n  function renounceOwnership() public onlyOwner {\\n    emit OwnershipRenounced(owner);\\n    owner = address(0);\\n  }\\n\\n  /**\\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n   * @param _newOwner The address to transfer ownership to.\\n   */\\n  function transferOwnership(address _newOwner) public onlyOwner {\\n    _transferOwnership(_newOwner);\\n  }\\n\\n  /**\\n   * @dev Transfers control of the contract to a newOwner.\\n   * @param _newOwner The address to transfer ownership to.\\n   */\\n  function _transferOwnership(address _newOwner) internal {\\n    require(_newOwner != address(0));\\n    emit OwnershipTransferred(owner, _newOwner);\\n    owner = _newOwner;\\n  }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol\": {\r\n      \"content\": \"pragma solidity ^0.4.23;\\n\\n\\nimport \\\"./ERC20Basic.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is ERC20Basic {\\n  using SafeMath for uint256;\\n\\n  mapping(address => uint256) balances;\\n\\n  uint256 totalSupply_;\\n\\n  /**\\n  * @dev total number of tokens in existence\\n  */\\n  function totalSupply() public view returns (uint256) {\\n    return totalSupply_;\\n  }\\n\\n  /**\\n  * @dev transfer token for a specified address\\n  * @param _to The address to transfer to.\\n  * @param _value The amount to be transferred.\\n  */\\n  function transfer(address _to, uint256 _value) public returns (bool) {\\n    require(_to != address(0));\\n    require(_value <= balances[msg.sender]);\\n\\n    balances[msg.sender] = balances[msg.sender].sub(_value);\\n    balances[_to] = balances[_to].add(_value);\\n    emit Transfer(msg.sender, _to, _value);\\n    return true;\\n  }\\n\\n  /**\\n  * @dev Gets the balance of the specified address.\\n  * @param _owner The address to query the the balance of.\\n  * @return An uint256 representing the amount owned by the passed address.\\n  */\\n  function balanceOf(address _owner) public view returns (uint256) {\\n    return balances[_owner];\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.4.23;\\n\\nimport \\\"./ERC20Basic.sol\\\";\\n\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n  function allowance(address owner, address spender)\\n    public view returns (uint256);\\n\\n  function transferFrom(address from, address to, uint256 value)\\n    public returns (bool);\\n\\n  function approve(address spender, uint256 value) public returns (bool);\\n  event Approval(\\n    address indexed owner,\\n    address indexed spender,\\n    uint256 value\\n  );\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\": {\r\n      \"content\": \"pragma solidity ^0.4.23;\\n\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/179\\n */\\ncontract ERC20Basic {\\n  function totalSupply() public view returns (uint256);\\n  function balanceOf(address who) public view returns (uint256);\\n  function transfer(address to, uint256 value) public returns (bool);\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/token/ERC20/MintableToken.sol\": {\r\n      \"content\": \"pragma solidity ^0.4.23;\\n\\nimport \\\"./StandardToken.sol\\\";\\nimport \\\"../../ownership/Ownable.sol\\\";\\n\\n\\n/**\\n * @title Mintable token\\n * @dev Simple ERC20 Token example, with mintable token creation\\n * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\\n */\\ncontract MintableToken is StandardToken, Ownable {\\n  event Mint(address indexed to, uint256 amount);\\n  event MintFinished();\\n\\n  bool public mintingFinished = false;\\n\\n\\n  modifier canMint() {\\n    require(!mintingFinished);\\n    _;\\n  }\\n\\n  modifier hasMintPermission() {\\n    require(msg.sender == owner);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Function to mint tokens\\n   * @param _to The address that will receive the minted tokens.\\n   * @param _amount The amount of tokens to mint.\\n   * @return A boolean that indicates if the operation was successful.\\n   */\\n  function mint(\\n    address _to,\\n    uint256 _amount\\n  )\\n    hasMintPermission\\n    canMint\\n    public\\n    returns (bool)\\n  {\\n    totalSupply_ = totalSupply_.add(_amount);\\n    balances[_to] = balances[_to].add(_amount);\\n    emit Mint(_to, _amount);\\n    emit Transfer(address(0), _to, _amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Function to stop minting new tokens.\\n   * @return True if the operation was successful.\\n   */\\n  function finishMinting() onlyOwner canMint public returns (bool) {\\n    mintingFinished = true;\\n    emit MintFinished();\\n    return true;\\n  }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol\": {\r\n      \"content\": \"pragma solidity ^0.4.23;\\n\\nimport \\\"./BasicToken.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\n\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is ERC20, BasicToken {\\n\\n  mapping (address => mapping (address => uint256)) internal allowed;\\n\\n\\n  /**\\n   * @dev Transfer tokens from one address to another\\n   * @param _from address The address which you want to send tokens from\\n   * @param _to address The address which you want to transfer to\\n   * @param _value uint256 the amount of tokens to be transferred\\n   */\\n  function transferFrom(\\n    address _from,\\n    address _to,\\n    uint256 _value\\n  )\\n    public\\n    returns (bool)\\n  {\\n    require(_to != address(0));\\n    require(_value <= balances[_from]);\\n    require(_value <= allowed[_from][msg.sender]);\\n\\n    balances[_from] = balances[_from].sub(_value);\\n    balances[_to] = balances[_to].add(_value);\\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\\n    emit Transfer(_from, _to, _value);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n   *\\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   * @param _spender The address which will spend the funds.\\n   * @param _value The amount of tokens to be spent.\\n   */\\n  function approve(address _spender, uint256 _value) public returns (bool) {\\n    allowed[msg.sender][_spender] = _value;\\n    emit Approval(msg.sender, _spender, _value);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n   * @param _owner address The address which owns the funds.\\n   * @param _spender address The address which will spend the funds.\\n   * @return A uint256 specifying the amount of tokens still available for the spender.\\n   */\\n  function allowance(\\n    address _owner,\\n    address _spender\\n   )\\n    public\\n    view\\n    returns (uint256)\\n  {\\n    return allowed[_owner][_spender];\\n  }\\n\\n  /**\\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\\n   *\\n   * approve should be called when allowed[_spender] == 0. To increment\\n   * allowed value is better to use this function to avoid 2 calls (and wait until\\n   * the first transaction is mined)\\n   * From MonolithDAO Token.sol\\n   * @param _spender The address which will spend the funds.\\n   * @param _addedValue The amount of tokens to increase the allowance by.\\n   */\\n  function increaseApproval(\\n    address _spender,\\n    uint _addedValue\\n  )\\n    public\\n    returns (bool)\\n  {\\n    allowed[msg.sender][_spender] = (\\n      allowed[msg.sender][_spender].add(_addedValue));\\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\\n   *\\n   * approve should be called when allowed[_spender] == 0. To decrement\\n   * allowed value is better to use this function to avoid 2 calls (and wait until\\n   * the first transaction is mined)\\n   * From MonolithDAO Token.sol\\n   * @param _spender The address which will spend the funds.\\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\\n   */\\n  function decreaseApproval(\\n    address _spender,\\n    uint _subtractedValue\\n  )\\n    public\\n    returns (bool)\\n  {\\n    uint oldValue = allowed[msg.sender][_spender];\\n    if (_subtractedValue > oldValue) {\\n      allowed[msg.sender][_spender] = 0;\\n    } else {\\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\\n    }\\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n    return true;\\n  }\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"byzantium\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proof\",\"type\":\"bytes32[]\"},{\"name\":\"_who\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getTokensByMerkleProof\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claim_rest_of_tokens_and_selfdestruct\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setRoot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cancelable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"},{\"name\":\"_merkleRoot\",\"type\":\"bytes32\"},{\"name\":\"_cancelable\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"AirdropTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"MerkleAirdrop","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000b0dfd28d3cf7a5897c694904ace292539242f85896504c427f9cb726e01aabeb39c7b7e6d86ce6bd752eeca5fff65cdc7b5fa5180000000000000000000000000000000000000000000000000000000000000001","EVMVersion":"byzantium","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}