{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-08-23\r\n*/\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface ZinFinance {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract zinStake {\r\n     address burnWallet;\r\n     constructor( ZinFinance _token,address _burnWallet) public {\r\n      burnWallet=_burnWallet;\r\n      token=_token;\r\n      owner = msg.sender;\r\n       }\r\n     using SafeMath for uint256;\r\n     /**\r\n     * @notice address of contract\r\n     */\r\n    uint256 public percentage=2;\r\n    mapping(address=>uint256) public rewardsGiven;\r\n    mapping(address=>uint256) public prevReward;\r\n    address public contractAddress=address(this);\r\n     /**\r\n     * @notice address of owener\r\n     */\r\n     address payable owner;\r\n     /**\r\n     * @notice total stake holders.\r\n     */\r\n     address[] public stakeholders;\r\n\r\n     /**\r\n     * @notice The stakes for each stakeholder.\r\n     */\r\n     mapping(address => uint256) public stakes;\r\n      /**\r\n     * @notice deposit_time for each user!\r\n     */\r\n     mapping(address => uint256) public deposit_time;\r\n\r\n    \r\n    ZinFinance public token;\r\n//========Events=========\r\nevent stakezin(\r\n        uint256 timestamp,\r\n        address _Staker,\r\n        uint256 token,\r\n        string nature\r\n    );\r\n    event unstakeEvent(\r\n        uint256 timestamp,\r\n        address _Staker,\r\n        uint256 token,\r\n        string nature\r\n    );\r\n//========Modifiers========\r\n    modifier onlyOwner(){\r\n    require(msg.sender==owner);\r\n    _;\r\n    }\r\n    modifier onlyBurnwalletowner(){\r\n    require(msg.sender==burnWallet);\r\n    _;\r\n    }\r\n//=========**============\r\n\r\n    // ---------- STAKES ----------\r\n    /**\r\n     * @notice A method for a stakeholder to create a stake.\r\n     * @param _stake The size of the stake to be created.\r\n     */\r\n    function stakeZin(uint256 _stake)\r\n        public\r\n    { \r\n        address _Staker=msg.sender;\r\n        require(token.balanceOf(_Staker)>=_stake,\"You don't have enough Zin tokens to Stake\");\r\n        token.transferFrom(_Staker,address(this),_stake);\r\n        if(stakes[_Staker] == 0){\r\n         deposit_time[_Staker]=now;\r\n         addStakeholder(_Staker);\r\n        }\r\n        stakes[_Staker] +=_stake;\r\n       emit stakezin(\r\n            block.timestamp, \r\n            _Staker, \r\n            _stake, \r\n            \"stake\"\r\n        );\r\n    }\r\n     function setBurnPercentage(uint256 _percentage)public onlyOwner{\r\n        percentage=_percentage;\r\n    }\r\n    //------------Add Stake holders----------\r\n        /**\r\n     * @notice A method to add a stakeholder.\r\n     * @param _stakeholder The stakeholder to add.\r\n     */\r\n    function addStakeholder(address _stakeholder)\r\n        private\r\n    {\r\n        (bool _isStakeholder, ) = isStakeholder(_stakeholder);\r\n        if(!_isStakeholder) stakeholders.push(_stakeholder);\r\n    }\r\n      // ---------- STAKEHOLDERS ----------\r\n\r\n    /**\r\n     * @notice A method to check if an address is a stakeholder.\r\n     * @param _address The address to verify.\r\n     * @return bool, uint256 Whether the address is a stakeholder, \r\n     * and if so its position in the stakeholders array.\r\n     */\r\n    function isStakeholder(address _address)\r\n        public\r\n        view\r\n        returns(bool, uint256)\r\n    {\r\n        for (uint256 s = 0; s < stakeholders.length; s += 1){\r\n            if (_address == stakeholders[s]) return (true, s);\r\n        }\r\n        return (false, 0);\r\n    }\r\n    \r\n        /**\r\n     * @notice A method to the aggregated stakes from all stakeholders.\r\n     * @return uint256 The aggregated stakes from all stakeholders.\r\n     */\r\n    function totalStakes()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        uint256 _totalStakes = 0;\r\n        for (uint256 s = 0; s < stakeholders.length; s += 1){\r\n            _totalStakes = _totalStakes.add(stakes[stakeholders[s]]);\r\n        }\r\n        return _totalStakes;\r\n    }\r\n    //--------Unstake zin Token\r\n    function unStakeZin(uint256 _amount)\r\n        public\r\n    {   address _stakeholder=msg.sender;\r\n        uint256 stakedZin=stakes[_stakeholder];\r\n        require(stakedZin>=_amount,\"You don't have enough Zin tokens to Unstake\");\r\n        uint256 stakingWallet=(_amount.div(100)).mul(percentage);\r\n        uint256 unStakedZin=_amount.sub(stakingWallet);\r\n        token.transfer(burnWallet,stakingWallet);\r\n        token.transfer(_stakeholder,unStakedZin);\r\n        stakes[_stakeholder]=stakedZin.sub(stakingWallet.add(unStakedZin));\r\n        if(stakes[_stakeholder]==0){\r\n        (bool _isStakeholder, uint256 s) = isStakeholder(_stakeholder);\r\n        if(_isStakeholder){\r\n            stakeholders[s] = stakeholders[stakeholders.length - 1];\r\n            stakeholders.pop();\r\n        } \r\n        }\r\n         emit unstakeEvent(\r\n            block.timestamp, \r\n            msg.sender, \r\n            _amount, \r\n            \"unstake\"\r\n        );\r\n    }\r\n    function sendGasFee(uint256 _amount) payable public{}\r\n    function getGasFee(uint256 _amount)public onlyOwner{\r\n        owner.transfer(_amount*1000000000000000000);\r\n    }\r\n    function getTokens(uint256 _amount)public\r\n    onlyOwner{\r\n        token.transfer(owner,_amount*1000000000000000000);\r\n    }\r\n    function destroy()\r\n    public\r\n    onlyOwner\r\n    {\r\n        require(token.transfer(owner,token.balanceOf(address(this))),\"Balance is not transferring to the owner\");\r\n        selfdestruct(owner);\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract ZinFinance\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_burnWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_Staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"nature\",\"type\":\"string\"}],\"name\":\"stakezin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_Staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"nature\",\"type\":\"string\"}],\"name\":\"unstakeEvent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"contractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposit_time\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getGasFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isStakeholder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"prevReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardsGiven\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendGasFee\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"setBurnPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stake\",\"type\":\"uint256\"}],\"name\":\"stakeZin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeholders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract ZinFinance\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unStakeZin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"zinStake","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000033e223870f766644f7f7a4b7dc2e91573707d06000000000000000000000000000000000000000000000000000000000000dead","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://fc3db793b36f7008fe8fc267d6125d92738157d3348b091a01bddd1730626cd8"}]}