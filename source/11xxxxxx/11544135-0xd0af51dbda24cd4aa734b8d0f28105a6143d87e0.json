{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.7.4;\r\n\r\n/******************************************/\r\n/*       DEX starts here            */\r\n/******************************************/\r\n\r\nabstract contract DEX \r\n\r\n{\r\n    function sync() external virtual;\r\n}\r\n\r\n/******************************************/\r\n/*       Benchmark starts here            */\r\n/******************************************/\r\n\r\nabstract contract Benchmark \r\n\r\n{\r\n    function rebase(uint256 supplyDelta, bool increaseSupply) external virtual returns (uint256);\r\n}\r\n\r\n/******************************************/\r\n/*       multiSigOracle starts here       */\r\n/******************************************/\r\n\r\ncontract MultiSigOracle {\r\n\r\n    address owner1;\r\n    address owner2;\r\n    address owner3;\r\n    address owner4;\r\n    address owner5;\r\n    \r\n    Benchmark public bm;\r\n    DEX[] public Pools;\r\n\r\n    Transaction public pendingRebasement;\r\n    uint256 internal lastRebasementTime;\r\n\r\n    struct Transaction {\r\n        address initiator;\r\n        uint supplyDelta;\r\n        bool increaseSupply;\r\n        bool executed;\r\n    }\r\n\r\n    modifier isOwner() \r\n    {\r\n        require (msg.sender == owner1 || msg.sender == owner2 || msg.sender == owner3 || msg.sender == owner4 || msg.sender == owner5);\r\n        _;\r\n    }\r\n\r\n    constructor(address _Benchmark)\r\n    {\r\n        owner1 = 0x2c155e07a1Ee62f229c9968B7A903dC69436e3Ec;\r\n        owner2 = 0xdBd39C1b439ba2588Dab47eED41b8456486F4Ba5;\r\n        owner3 = 0x90d33D152A422D63e0Dd1c107b7eD3943C06ABA8;\r\n        owner4 = 0xE12E421D5C4b4D8193bf269BF94DC8dA28798BA9;\r\n        owner5 = 0xD4B33C108659A274D8C35b60e6BfCb179a2a6D4C;\r\n        bm = Benchmark(_Benchmark);\r\n        \r\n        pendingRebasement.executed = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Initiates a rebasement proposal that has to be confirmed by another owner of the contract to be executed. Can't be called while another proposal is pending.\r\n     * @param _supplyDelta Change in totalSupply of the Benchmark token.\r\n     * @param _increaseSupply Whether to increase or decrease the totalSupply of the Benchmark token.\r\n     */\r\n    function initiateRebasement(uint256 _supplyDelta, bool _increaseSupply) public isOwner\r\n    {\r\n        require (pendingRebasement.executed == true, \"Pending rebasement.\");\r\n        require (lastRebasementTime < (block.timestamp - 64800), \"Rebasement has already occured within the past 18 hours.\");\r\n\r\n        Transaction storage txn = pendingRebasement; \r\n        txn.initiator = msg.sender;\r\n        txn.supplyDelta = _supplyDelta;\r\n        txn.increaseSupply = _increaseSupply;\r\n        txn.executed = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Confirms and executes a pending rebasement proposal. Prohibits further proposals for 18 hours.\r\n     */\r\n    function confirmRebasement() public isOwner\r\n    {\r\n        require (pendingRebasement.initiator != msg.sender, \"Initiator can't confirm rebasement.\");\r\n        require (pendingRebasement.executed == false, \"Rebasement already executed.\");\r\n        \r\n        pendingRebasement.executed = true;\r\n        lastRebasementTime = block.timestamp;\r\n\r\n        bm.rebase(pendingRebasement.supplyDelta, pendingRebasement.increaseSupply);\r\n\r\n        uint256 arrayLength = Pools.length;\r\n        for (uint256 i = 0; i < arrayLength; i++) \r\n        {\r\n            if (address(Pools[i]) != address(0)) {\r\n                Pools[i].sync();\r\n            }           \r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Denies a pending rebasement proposal and allows the creation of a new proposal.\r\n     */\r\n    function denyRebasement() public isOwner\r\n    {\r\n        require (pendingRebasement.executed == false, \"Rebasement already executed.\");\r\n        \r\n        pendingRebasement.executed = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a new Liquidity Pool. \r\n     * @param _lpPool Address of Liquidity Pool.\r\n     */\r\n    function addPool (address _lpPool) public isOwner {\r\n        Pools.push(DEX(_lpPool));\r\n    }\r\n\r\n    /**\r\n     * @dev Remove a Liquidity Pool. \r\n     * @param _index Index of Liquidity Pool.\r\n     */\r\n    function removePool (uint256 _index) public isOwner {\r\n        delete Pools[_index];\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_Benchmark\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Pools\",\"outputs\":[{\"internalType\":\"contract DEX\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpPool\",\"type\":\"address\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bm\",\"outputs\":[{\"internalType\":\"contract Benchmark\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmRebasement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"denyRebasement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_supplyDelta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_increaseSupply\",\"type\":\"bool\"}],\"name\":\"initiateRebasement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingRebasement\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"supplyDelta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"increaseSupply\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"removePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MultiSigOracle","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000067c597624b17b16fb77959217360b7cd18284253","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c91f2a860399384d6af8f7342434d1de1e19e185c30efce17ca6f41ac48b2a68"}]}