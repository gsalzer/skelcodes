{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/IERC20.sol\r\n\r\n//SPDX-License-Identifier: GPL-3.0-only\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/ITreasury.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\ninterface ITreasury {\r\n    function defaultToken() external view returns (IERC20);\r\n    function deposit(IERC20 token, uint256 amount) external;\r\n    function withdraw(uint256 amount, address withdrawAddress) external;\r\n}\r\n\r\n// File: contracts/vaults/IVault.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\ninterface IVault {\r\n    function want() external view returns (IERC20);\r\n    function transferFundsToStrategy(address strategy, uint256 amount) external;\r\n    function availableFunds() external view returns (uint256);\r\n}\r\n\r\n// File: contracts/vaults/IVaultRewards.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\ninterface IVaultRewards {\r\n    function want() external view returns (IERC20);\r\n    function notifyRewardAmount(uint256 reward) external;\r\n}\r\n\r\n// File: contracts/vaults/IController.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface IController {\r\n    function currentEpochTime() external view returns (uint256);\r\n    function balanceOf(address) external view returns (uint256);\r\n    function rewards(address token) external view returns (IVaultRewards);\r\n    function vault(address token) external view returns (IVault);\r\n    function allowableAmount(address) external view returns (uint256);\r\n    function treasury() external view returns (ITreasury);\r\n    function approvedStrategies(address, address) external view returns (bool);\r\n    function getHarvestInfo(address strategy, address user)\r\n        external view returns (\r\n        uint256 vaultRewardPercentage,\r\n        uint256 hurdleAmount,\r\n        uint256 harvestPercentage\r\n    );\r\n    function withdraw(address, uint256) external;\r\n    function earn(address, uint256) external;\r\n    function increaseHurdleRate(address token) external;\r\n}\r\n\r\n// File: contracts/vaults/IStrategy.sol\r\n\r\n/*\r\n A strategy must implement the following functions:\r\n - getName(): Name of strategy\r\n - want(): Desired token for investment. Should be same as underlying vault token (Eg. USDC)\r\n - deposit function that will calls controller.earn()\r\n - withdraw(address): For miscellaneous tokens, must exclude any tokens used in the yield\r\n    - Should return to Controller\r\n - withdraw(uint): Controller | Vault role - withdraw should always return to vault\r\n - withdrawAll(): Controller | Vault role - withdraw should always return to vault\r\n - balanceOf(): Should return underlying vault token amount\r\n*/\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\ninterface IStrategy {\r\n    function getName() external pure returns (string memory);\r\n    function want() external view returns (address);\r\n    function withdraw(address) external;\r\n    function withdraw(uint256) external;\r\n    function withdrawAll() external returns (uint256);\r\n    function balanceOf() external view returns (uint256);\r\n}\r\n\r\n// File: contracts/SafeMath.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n// Note: This file has been modified to include the sqrt function for quadratic voting\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n\r\n    /**\r\n    * Imported from: https://github.com/alianse777/solidity-standard-library/blob/master/Math.sol\r\n    * @dev Compute square root of x\r\n    * @return sqrt(x)\r\n    */\r\n   function sqrt(uint256 x) internal pure returns (uint256) {\r\n       uint256 n = x / 2;\r\n       uint256 lstX = 0;\r\n       while (n != lstX){\r\n           lstX = n;\r\n           n = (n + x/n) / 2;\r\n       }\r\n       return uint256(n);\r\n   }\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/zeppelin/Address.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * This test is non-exhaustive, and there may be false-negatives: during the\r\n     * execution of a contract's constructor, its address will be reported as\r\n     * not containing a contract.\r\n     *\r\n     * IMPORTANT: It is unsafe to assume that an address for which this\r\n     * function returns false is an externally-owned account (EOA) and not a\r\n     * contract.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: contracts/zeppelin/SafeERC20.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/vaults/BoostController.sol\r\n\r\n//SPDX-License-Identifier: MIT\r\n/*\r\n* MIT License\r\n* ===========\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in all\r\n* copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n*/\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract BoostController is IController {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n\r\n    struct TokenStratInfo {\r\n        IVault vault;\r\n        IVaultRewards rewards;\r\n        IStrategy[] strategies;\r\n        uint256 currentHurdleRate;\r\n        uint256 nextHurdleRate;\r\n        uint256 hurdleLastUpdateTime;\r\n        uint256 harvestPrice;\r\n        uint256 globalHarvestLastUpdateTime;\r\n        mapping(address => uint256) harvestPercentages;\r\n        mapping(address => uint256) harvestLastUpdateTime;\r\n    }\r\n\r\n    address public gov;\r\n    address public strategist;\r\n    ITreasury public treasury;\r\n    IERC20 public boostToken;\r\n\r\n    mapping(address => TokenStratInfo) public tokenStratsInfo;\r\n    mapping(address => uint256) public capAmounts;\r\n    mapping(address => uint256) public investedAmounts;\r\n    mapping(address => mapping(address => bool)) public approvedStrategies;\r\n\r\n    uint256 public currentEpochTime;\r\n    uint256 public constant EPOCH_DURATION = 2 weeks;\r\n    uint256 internal constant DENOM = 10000;\r\n    uint256 internal constant HURDLE_RATE_MAX = 500; // max 5%\r\n    uint256 internal constant BASE_HARVEST_PERCENTAGE = 50; // 0.5%\r\n    uint256 internal constant BASE_REWARD_PERCENTAGE = 5000; // 50%\r\n    uint256 internal constant HARVEST_PERCENTAGE_MAX = 100; // max 1% extra\r\n    uint256 internal constant PRICE_INCREASE = 10100; // 1.01x\r\n    uint256 internal constant EPOCH_PRICE_REDUCTION = 8000; // 0.8x\r\n\r\n    uint256 vaultRewardChangePrice = 10e18; // initial cost of 10 boosts\r\n    uint256 public globalVaultRewardPercentage = BASE_REWARD_PERCENTAGE;\r\n    uint256 vaultRewardLastUpdateTime;\r\n\r\n    constructor(\r\n        address _gov,\r\n        address _strategist,\r\n        ITreasury _treasury,\r\n        IERC20 _boostToken,\r\n        uint256 _epochStart\r\n    ) public {\r\n        gov = _gov;\r\n        strategist = _strategist;\r\n        treasury = _treasury;\r\n        boostToken = _boostToken;\r\n        currentEpochTime = _epochStart;\r\n    }\r\n\r\n    modifier updateEpoch() {\r\n        if (block.timestamp > currentEpochTime.add(EPOCH_DURATION)) {\r\n            currentEpochTime = currentEpochTime.add(EPOCH_DURATION);\r\n        }\r\n        _;\r\n    }\r\n\r\n    function rewards(address token) external view returns (IVaultRewards) {\r\n        return tokenStratsInfo[token].rewards;\r\n    }\r\n\r\n    function vault(address token) external view returns (IVault) {\r\n        return tokenStratsInfo[token].vault;\r\n    }\r\n\r\n    function balanceOf(address token) external view returns (uint256) {\r\n        IStrategy[] storage strategies = tokenStratsInfo[token].strategies;\r\n        uint256 totalBalance;\r\n        for (uint256 i = 0; i < strategies.length; i++) {\r\n            totalBalance = totalBalance.add(strategies[i].balanceOf());\r\n        }\r\n        return totalBalance;\r\n    }\r\n\r\n    function allowableAmount(address strategy) external view returns(uint256) {\r\n        return capAmounts[strategy].sub(investedAmounts[strategy]);\r\n    }\r\n\r\n    function getHarvestInfo(\r\n        address strategy,\r\n        address user\r\n    ) external view returns (\r\n        uint256 vaultRewardPercentage,\r\n        uint256 hurdleAmount,\r\n        uint256 harvestPercentage\r\n    ) {\r\n        address token = IStrategy(strategy).want();\r\n        vaultRewardPercentage = globalVaultRewardPercentage;\r\n        hurdleAmount = getHurdleAmount(strategy, token);\r\n        harvestPercentage = getHarvestPercentage(user, token);\r\n    }\r\n\r\n    function getHarvestUserInfo(address user, address token)\r\n        external\r\n        view\r\n        returns (uint256 harvestPercentage, uint256 lastUpdateTime)\r\n    {\r\n        TokenStratInfo storage info = tokenStratsInfo[token];\r\n        harvestPercentage = info.harvestPercentages[user];\r\n        lastUpdateTime = info.harvestLastUpdateTime[user];\r\n    }\r\n\r\n    function getStrategies(address token) external view returns (IStrategy[] memory strategies) {\r\n        return tokenStratsInfo[token].strategies;\r\n    }\r\n\r\n    function setTreasury(ITreasury _treasury) external updateEpoch {\r\n        require(msg.sender == gov, \"!gov\");\r\n        treasury = _treasury;\r\n    }\r\n\r\n    function setStrategist(address _strategist) external updateEpoch {\r\n        require(msg.sender == gov, \"!gov\");\r\n        strategist = _strategist;\r\n    }\r\n\r\n    function setGovernance(address _gov) external updateEpoch {\r\n        require(msg.sender == gov, \"!gov\");\r\n        gov = _gov;\r\n    }\r\n\r\n    function setRewards(IVaultRewards _rewards) external updateEpoch {\r\n        require(msg.sender == strategist || msg.sender == gov, \"!authorized\");\r\n        address token = address(_rewards.want());\r\n        require(tokenStratsInfo[token].rewards == IVaultRewards(0), \"rewards exists\");\r\n        tokenStratsInfo[token].rewards = _rewards;\r\n    }\r\n\r\n    function setVaultAndInitHarvestInfo(IVault _vault) external updateEpoch {\r\n        require(msg.sender == strategist || msg.sender == gov, \"!authorized\");\r\n        address token = address(_vault.want());\r\n        TokenStratInfo storage info = tokenStratsInfo[token];\r\n        require(info.vault == IVault(0), \"vault exists\");\r\n        info.vault = _vault;\r\n        // initial harvest booster price of 1 boost\r\n        info.harvestPrice = 1e18;\r\n        info.globalHarvestLastUpdateTime = currentEpochTime;\r\n    }\r\n\r\n    function approveStrategy(address _strategy, uint256 _cap) external updateEpoch {\r\n        require(msg.sender == gov, \"!gov\");\r\n        address token = IStrategy(_strategy).want();\r\n        require(!approvedStrategies[token][_strategy], \"strat alr approved\");\r\n        require(tokenStratsInfo[token].vault.want() == IERC20(token), \"unequal wants\");\r\n        capAmounts[_strategy] = _cap;\r\n        tokenStratsInfo[token].strategies.push(IStrategy(_strategy));\r\n        approvedStrategies[token][_strategy] = true;\r\n    }\r\n\r\n    function changeCap(address strategy, uint256 _cap) external updateEpoch {\r\n        require(msg.sender == gov, \"!gov\");\r\n        capAmounts[strategy] = _cap;\r\n    }\r\n\r\n    function revokeStrategy(address _strategy, uint256 _index) external updateEpoch {\r\n        require(msg.sender == gov, \"!gov\");\r\n        address token = IStrategy(_strategy).want();\r\n        require(approvedStrategies[token][_strategy], \"strat alr revoked\");\r\n        IStrategy[] storage tokenStrategies = tokenStratsInfo[token].strategies;\r\n        require(address(tokenStrategies[_index]) == _strategy, \"wrong index\");\r\n\r\n        // replace revoked strategy with last element in array\r\n        tokenStrategies[_index] = tokenStrategies[tokenStrategies.length - 1];\r\n        delete tokenStrategies[tokenStrategies.length - 1];\r\n        tokenStrategies.length--;\r\n        capAmounts[_strategy] = 0;\r\n        approvedStrategies[token][_strategy] = false;\r\n\r\n        // withdraw all funds in strategy back to vault\r\n        withdrawAll(_strategy);\r\n    }\r\n\r\n    function getHurdleAmount(address strategy, address token) public view returns (uint256) {\r\n        TokenStratInfo storage info = tokenStratsInfo[token];\r\n        return (info.hurdleLastUpdateTime < currentEpochTime ||\r\n        (block.timestamp > currentEpochTime.add(EPOCH_DURATION))) ?\r\n            0 :\r\n            info.currentHurdleRate\r\n            .mul(investedAmounts[strategy])\r\n            .div(DENOM);\r\n    }\r\n\r\n    function getHarvestPercentage(address user, address token) public view returns (uint256) {\r\n        TokenStratInfo storage info = tokenStratsInfo[token];\r\n        return (info.harvestLastUpdateTime[user] < currentEpochTime ||\r\n            (block.timestamp > currentEpochTime.add(EPOCH_DURATION))) ?\r\n            BASE_HARVEST_PERCENTAGE :\r\n            info.harvestPercentages[user];\r\n    }\r\n\r\n    /// @dev check that vault has sufficient funds is done by the call to vault\r\n    function earn(address strategy, uint256 amount) public updateEpoch {\r\n        require(msg.sender == strategy, \"!strategy\");\r\n        address token = IStrategy(strategy).want();\r\n        require(approvedStrategies[token][strategy], \"strat !approved\");\r\n        TokenStratInfo storage info = tokenStratsInfo[token];\r\n        uint256 newInvestedAmount = investedAmounts[strategy].add(amount);\r\n        require(newInvestedAmount <= capAmounts[strategy], \"hit strategy cap\");\r\n        // update invested amount\r\n        investedAmounts[strategy] = newInvestedAmount;\r\n        // transfer funds to strategy\r\n        info.vault.transferFundsToStrategy(strategy, amount);\r\n    }\r\n\r\n    // Anyone can withdraw non-core strategy tokens => sent to treasury\r\n    function earnMiscTokens(IStrategy strategy, IERC20 token) external updateEpoch {\r\n        // should send tokens to this contract\r\n        strategy.withdraw(address(token));\r\n        uint256 bal = token.balanceOf(address(this));\r\n        token.safeApprove(address(treasury), bal);\r\n        // send funds to treasury\r\n        treasury.deposit(token, bal);\r\n    }\r\n\r\n    function increaseHarvestPercentage(address token) external updateEpoch {\r\n        TokenStratInfo storage info = tokenStratsInfo[token];\r\n        // first, handle vault global price and update time\r\n        // if new epoch, reduce price by 20%\r\n        if (info.globalHarvestLastUpdateTime < currentEpochTime) {\r\n            info.harvestPrice = info.harvestPrice.mul(EPOCH_PRICE_REDUCTION).div(DENOM);\r\n        }\r\n\r\n        // get funds from user, send to treasury\r\n        boostToken.safeTransferFrom(msg.sender, address(this), info.harvestPrice);\r\n        boostToken.safeApprove(address(treasury), info.harvestPrice);\r\n        treasury.deposit(boostToken, info.harvestPrice);\r\n\r\n        // increase price\r\n        info.harvestPrice = info.harvestPrice.mul(PRICE_INCREASE).div(DENOM);\r\n        // update globalHarvestLastUpdateTime\r\n        info.globalHarvestLastUpdateTime = block.timestamp;\r\n\r\n        // next, handle effect on harvest percentage and update user's harvest time\r\n        // see if percentage needs to be reset\r\n        if (info.harvestLastUpdateTime[msg.sender] < currentEpochTime) {\r\n            info.harvestPercentages[msg.sender] = BASE_HARVEST_PERCENTAGE;\r\n        }\r\n        info.harvestLastUpdateTime[msg.sender] = block.timestamp;\r\n\r\n        // increase harvest percentage by 0.25%\r\n        info.harvestPercentages[msg.sender] = Math.min(\r\n            HARVEST_PERCENTAGE_MAX,\r\n            info.harvestPercentages[msg.sender].add(25)\r\n        );\r\n        increaseHurdleRate(token);\r\n    }\r\n\r\n    function changeVaultRewardPercentage(bool isIncrease) external updateEpoch {\r\n        // if new epoch, reduce price by 20%\r\n        if ((vaultRewardLastUpdateTime != 0) && (vaultRewardLastUpdateTime < currentEpochTime)) {\r\n            vaultRewardChangePrice = vaultRewardChangePrice.mul(EPOCH_PRICE_REDUCTION).div(DENOM);\r\n        }\r\n\r\n        // get funds from user, send to treasury\r\n        boostToken.safeTransferFrom(msg.sender, address(this), vaultRewardChangePrice);\r\n        boostToken.safeApprove(address(treasury), vaultRewardChangePrice);\r\n        treasury.deposit(boostToken, vaultRewardChangePrice);\r\n\r\n        // increase price\r\n        vaultRewardChangePrice = vaultRewardChangePrice.mul(PRICE_INCREASE).div(DENOM);\r\n        // update vaultRewardLastUpdateTime\r\n        vaultRewardLastUpdateTime = block.timestamp;\r\n        if (isIncrease) {\r\n            globalVaultRewardPercentage = Math.min(DENOM, globalVaultRewardPercentage.add(25));\r\n        } else {\r\n            globalVaultRewardPercentage = globalVaultRewardPercentage.sub(25);\r\n        }\r\n    }\r\n\r\n    // handle vault withdrawal\r\n    function withdraw(address token, uint256 withdrawAmount) external updateEpoch {\r\n        TokenStratInfo storage info = tokenStratsInfo[token];\r\n        require(msg.sender == (address(info.vault)), \"!vault\");\r\n        uint256 remainingWithdrawAmount = withdrawAmount;\r\n\r\n        for (uint256 i = 0; i < info.strategies.length; i++) {\r\n            if (remainingWithdrawAmount == 0) break;\r\n            IStrategy strategy = info.strategies[i];\r\n            // withdraw maximum amount possible\r\n            uint256 actualWithdrawAmount = Math.min(\r\n                investedAmounts[address(strategy)], remainingWithdrawAmount\r\n            );\r\n            // update remaining withdraw amt\r\n            remainingWithdrawAmount = remainingWithdrawAmount.sub(actualWithdrawAmount);\r\n            // update strat invested amt\r\n            investedAmounts[address(strategy)] = investedAmounts[address(strategy)]\r\n                    .sub(actualWithdrawAmount);\r\n            // do the actual withdrawal\r\n            strategy.withdraw(actualWithdrawAmount);\r\n        }\r\n    }\r\n\r\n    function increaseHurdleRate(address token) public updateEpoch {\r\n        TokenStratInfo storage info = tokenStratsInfo[token];\r\n        require(msg.sender == address(info.rewards) || msg.sender == address(this), \"!authorized\");\r\n        // see if hurdle rate has to update\r\n        if (info.hurdleLastUpdateTime < currentEpochTime) {\r\n            info.currentHurdleRate = info.nextHurdleRate;\r\n            info.nextHurdleRate = 0;\r\n        }\r\n        info.hurdleLastUpdateTime = block.timestamp;\r\n        // increase hurdle rate by 0.01%\r\n        info.nextHurdleRate = Math.min(HURDLE_RATE_MAX, info.nextHurdleRate.add(1));\r\n    }\r\n\r\n    function withdrawAll(address strategy) public updateEpoch {\r\n        require(\r\n            msg.sender == strategist ||\r\n            msg.sender == gov ||\r\n            msg.sender == address(this),\r\n            \"!authorized\"\r\n        );\r\n        investedAmounts[strategy] = 0;\r\n        IStrategy(strategy).withdrawAll();\r\n    }\r\n\r\n    function inCaseTokensGetStuck(address token, uint amount) public updateEpoch {\r\n        require(msg.sender == strategist || msg.sender == gov, \"!authorized\");\r\n        IERC20(token).safeTransfer(msg.sender, amount);\r\n    }\r\n\r\n    function inCaseStrategyTokenGetStuck(IStrategy strategy, address token) public updateEpoch {\r\n        require(msg.sender == strategist || msg.sender == gov, \"!authorized\");\r\n        strategy.withdraw(token);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"},{\"internalType\":\"contract ITreasury\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_boostToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_epochStart\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[],\"name\":\"EPOCH_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"allowableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cap\",\"type\":\"uint256\"}],\"name\":\"approveStrategy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedStrategies\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"boostToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"capAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cap\",\"type\":\"uint256\"}],\"name\":\"changeCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isIncrease\",\"type\":\"bool\"}],\"name\":\"changeVaultRewardPercentage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentEpochTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"earn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"earnMiscTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getHarvestInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultRewardPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hurdleAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"harvestPercentage\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getHarvestPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getHarvestUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"harvestPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getHurdleAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getStrategies\",\"outputs\":[{\"internalType\":\"contract IStrategy[]\",\"name\":\"strategies\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"globalVaultRewardPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gov\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"inCaseStrategyTokenGetStuck\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"inCaseTokensGetStuck\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"increaseHarvestPercentage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"increaseHurdleRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"investedAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"revokeStrategy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"contract IVaultRewards\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IVaultRewards\",\"name\":\"_rewards\",\"type\":\"address\"}],\"name\":\"setRewards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"}],\"name\":\"setStrategist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract ITreasury\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IVault\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"setVaultAndInitHarvestInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"strategist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenStratsInfo\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"contract IVaultRewards\",\"name\":\"rewards\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentHurdleRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextHurdleRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hurdleLastUpdateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"harvestPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"globalHarvestLastUpdateTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"contract ITreasury\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"BoostController","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"10000","ConstructorArguments":"000000000000000000000000d87e80bcd2527508b617dc33f4b73dc5dda200a2000000000000000000000000d87e80bcd2527508b617dc33f4b73dc5dda200a200000000000000000000000011dc7e94ebf4f55043fc1727cc9b4e23996b95520000000000000000000000003e780920601d61cedb860fe9c4a90c9ea6a35e78000000000000000000000000000000000000000000000000000000005f8a9d78","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://fbd9ba2ed4fabd7904dd2d4b3f271f51bced90bb8bb4ae169e9cd062066eda67"}]}