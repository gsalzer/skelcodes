{"status":"1","message":"OK","result":[{"SourceCode":"// File: eip1996/contracts/libraries/StringUtil.sol\r\n\r\npragma solidity ^0.5.9;\r\n\r\n\r\nlibrary StringUtil {\r\n    function toHash(string memory _s) internal pure returns (bytes32) {\r\n        return keccak256(abi.encode(_s));\r\n    }\r\n\r\n    function isEmpty(string memory _s) internal pure returns (bool) {\r\n        return bytes(_s).length == 0;\r\n    }\r\n}\r\n\r\n// File: contracts/AccountCreator.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\n\r\ncontract AccountCreator {\r\n    using StringUtil for string;\r\n\r\n    enum RequestStatus {\r\n        Nonexistent,\r\n        Requested,\r\n        Confirmed,\r\n        Failed,\r\n        Refunded\r\n    }\r\n\r\n    struct AccountRequest {\r\n        string hederaPublicKey;\r\n        address payable requestor;\r\n        uint256 paid;\r\n        RequestStatus status;\r\n    }\r\n\r\n    mapping(bytes32 => AccountRequest) private requests;\r\n    address public accountCreator;\r\n    uint256 private fee;\r\n\r\n    constructor(\r\n        address creator, \r\n        uint256 accountCreationFee\r\n    ) public {\r\n        accountCreator = creator;\r\n        fee = accountCreationFee;\r\n    }\r\n\r\n    function getAccountCreator() public view returns (address) {\r\n        return accountCreator;\r\n    }\r\n\r\n    function getAccountCreationFee() external view returns (uint256) {\r\n        return fee;\r\n    }\r\n\r\n    function setAccountCreationFee(uint256 feeInWei) external returns (bool) {\r\n        require(\r\n            msg.sender == accountCreator,\r\n            \"Only the account creator can call this function\"\r\n        );\r\n        fee = feeInWei;\r\n        return true;\r\n    }\r\n\r\n    // User calls createAccount\r\n    function _createAccount(\r\n        string memory operationId,\r\n        string memory hederaPublicKey\r\n    ) internal returns (bool) {\r\n        bytes32 operationIdHash = operationId.toHash();\r\n        AccountRequest storage request = requests[operationIdHash];\r\n\r\n        require(!hederaPublicKey.isEmpty(), \"Hedera Public Key cannot be empty\");\r\n        require(request.paid == 0, \"A request with this id already exists\");\r\n\r\n        request.requestor = msg.sender;\r\n        request.hederaPublicKey = hederaPublicKey;\r\n        request.status = RequestStatus.Requested;\r\n        request.paid = msg.value;\r\n\r\n        emit CreateAccountRequest(\r\n            operationId,\r\n            msg.sender,\r\n            hederaPublicKey\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    function createAccount(\r\n        string calldata operationId, \r\n        string calldata hederaPublicKey\r\n    ) external payable returns (bool) {\r\n        require(\r\n            msg.value == fee, \r\n            \"Incorrect fee amount, call getAccountCreationFee\"\r\n        );\r\n\r\n        // Make accountcreator a payable address, then transfer the value\r\n        address(uint160(accountCreator)).transfer(msg.value);\r\n\r\n        return _createAccount(\r\n            operationId,\r\n            hederaPublicKey\r\n        );\r\n    }\r\n\r\n    // contract creates record and emits\r\n    event CreateAccountRequest(\r\n        string operationId, \r\n        address requestor, \r\n        string hederaPublicKey\r\n    );\r\n    // request is created with status Requested\r\n    \r\n    // Bridge program sees HederaAccountRequest\r\n    // Tries to create a hedera account using the oracle, \r\n    // and if successful, should call\r\n    function createAccountSuccess(\r\n        string calldata operationId, \r\n        string calldata hederaAccountId\r\n    ) external returns (bool) {\r\n        require(\r\n            msg.sender == accountCreator,\r\n            \"Only the account creator can call this function\"\r\n        );\r\n\r\n        bytes32 operationIdHash = operationId.toHash();\r\n        AccountRequest storage request = requests[operationIdHash];\r\n        \r\n        require(\r\n            request.status == RequestStatus.Requested, \r\n            \"Account Request must have status Requested to be set to status Confirmed\"\r\n        );\r\n        \r\n        request.status = RequestStatus.Confirmed;\r\n\r\n        emit CreateAccountSuccess(\r\n            operationId,\r\n            request.requestor,\r\n            request.hederaPublicKey,\r\n            hederaAccountId\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    //which emits\r\n    event CreateAccountSuccess(\r\n        string operationId, \r\n        address requestor, \r\n        string hederaPublicKey, \r\n        string hederaAccountId\r\n    );\r\n    // request has status Confirmed\r\n\r\n    // if Hedera account creation fails, bridge program should call\r\n    function createAccountFail(\r\n        string calldata operationId, \r\n        string calldata reason\r\n    ) external returns (bool) {\r\n        require(\r\n            msg.sender == accountCreator,\r\n            \"Only the account creator can call this function\"\r\n        );\r\n\r\n        bytes32 operationIdHash = operationId.toHash();\r\n        AccountRequest storage request = requests[operationIdHash];\r\n        \r\n        require(\r\n            request.status == RequestStatus.Requested, \r\n            \"Account Request must have status Requested to be set to status Failed\"\r\n        );\r\n        \r\n        request.status = RequestStatus.Failed;\r\n\r\n        emit CreateAccountFail(\r\n            operationId,\r\n            request.requestor,\r\n            request.hederaPublicKey,\r\n            request.paid,\r\n            reason\r\n        );\r\n\r\n        return true;\r\n    }\r\n    \r\n    // which emits\r\n    event CreateAccountFail(\r\n        string operationId,\r\n        address requestor,\r\n        string hederaPublicKey,\r\n        uint256 amount,\r\n        string reason\r\n    );\r\n    // request has status Failed\r\n\r\n    // Set to Refunded for confirmation\r\n    function createAccountRefund(\r\n        string calldata operationId\r\n    ) external returns (bool) {\r\n        require(\r\n            msg.sender == accountCreator,\r\n            \"Only the account creator can call this function\"\r\n        );\r\n\r\n        bytes32 operationIdHash = operationId.toHash();\r\n        AccountRequest storage request = requests[operationIdHash];\r\n\r\n        require(\r\n            request.status == RequestStatus.Failed,\r\n            \"Account Request must have status Failed to be refunded\"\r\n        );\r\n\r\n        request.status = RequestStatus.Refunded;\r\n\r\n        emit CreateAccountRefund(operationId, request.requestor, request.paid);\r\n        return true;\r\n    }\r\n\r\n    // emits\r\n    event CreateAccountRefund(\r\n        string id, \r\n        address requestor, \r\n        uint256 refundAmountWei\r\n    );\r\n}\r\n\r\n// File: eip2021/contracts/IPayoutable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\ninterface IPayoutable {\r\n    enum PayoutStatusCode {\r\n        Nonexistent,\r\n        Ordered,\r\n        InProcess,\r\n        FundsInSuspense,\r\n        Executed,\r\n        Rejected,\r\n        Cancelled\r\n    }\r\n\r\n    function orderPayout(string calldata operationId, uint256 value, string calldata instructions) external returns (bool);\r\n    function orderPayoutFrom(\r\n        string calldata operationId,\r\n        address walletToBePaidOut,\r\n        uint256 value,\r\n        string calldata instructions\r\n    ) external returns (bool);\r\n    function cancelPayout(string calldata operationId) external returns (bool);\r\n    function processPayout(string calldata operationId) external returns (bool);\r\n    function putFundsInSuspenseInPayout(string calldata operationId) external returns (bool);\r\n    function executePayout(string calldata operationId) external returns (bool);\r\n    function rejectPayout(string calldata operationId, string calldata reason) external returns (bool);\r\n    function retrievePayoutData(string calldata operationId) external view returns (\r\n        address walletToDebit,\r\n        uint256 value,\r\n        string memory instructions,\r\n        PayoutStatusCode status\r\n    );\r\n\r\n    function authorizePayoutOperator(address operator) external returns (bool);\r\n    function revokePayoutOperator(address operator) external returns (bool);\r\n    function isPayoutOperatorFor(address operator, address from) external view returns (bool);\r\n\r\n    event PayoutOrdered(address indexed orderer, string operationId, address indexed walletToDebit, uint256 value, string instructions);\r\n    event PayoutInProcess(address indexed orderer, string operationId);\r\n    event PayoutFundsInSuspense(address indexed orderer, string operationId);\r\n    event PayoutExecuted(address indexed orderer, string operationId);\r\n    event PayoutRejected(address indexed orderer, string operationId, string reason);\r\n    event PayoutCancelled(address indexed orderer, string operationId);\r\n    event AuthorizedPayoutOperator(address indexed operator, address indexed account);\r\n    event RevokedPayoutOperator(address indexed operator, address indexed account);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20Mintable}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\r\n    }\r\n}\r\n\r\n// File: eip1996/contracts/IHoldable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\ninterface IHoldable {\r\n    enum HoldStatusCode {\r\n        Nonexistent,\r\n        Ordered,\r\n        Executed,\r\n        ExecutedAndKeptOpen,\r\n        ReleasedByNotary,\r\n        ReleasedByPayee,\r\n        ReleasedOnExpiration\r\n    }\r\n\r\n    function hold(\r\n        string calldata operationId,\r\n        address to,\r\n        address notary,\r\n        uint256 value,\r\n        uint256 timeToExpiration\r\n    ) external returns (bool);\r\n    function holdFrom(\r\n        string calldata operationId,\r\n        address from,\r\n        address to,\r\n        address notary,\r\n        uint256 value,\r\n        uint256 timeToExpiration\r\n    ) external returns (bool);\r\n    function releaseHold(string calldata operationId) external returns (bool);\r\n    function executeHold(string calldata operationId, uint256 value) external returns (bool);\r\n    function executeHoldAndKeepOpen(string calldata operationId, uint256 value) external returns (bool);\r\n    function renewHold(string calldata operationId, uint256 timeToExpiration) external returns (bool);\r\n    function retrieveHoldData(string calldata operationId) external view returns (\r\n        address from,\r\n        address to,\r\n        address notary,\r\n        uint256 value,\r\n        uint256 expiration,\r\n        HoldStatusCode status\r\n    );\r\n\r\n    function balanceOnHold(address account) external view returns (uint256);\r\n    function netBalanceOf(address account) external view returns (uint256);\r\n    function totalSupplyOnHold() external view returns (uint256);\r\n\r\n    function authorizeHoldOperator(address operator) external returns (bool);\r\n    function revokeHoldOperator(address operator) external returns (bool);\r\n    function isHoldOperatorFor(address operator, address from) external view returns (bool);\r\n\r\n    event HoldCreated(\r\n        address indexed holdIssuer,\r\n        string  operationId,\r\n        address from,\r\n        address to,\r\n        address indexed notary,\r\n        uint256 value,\r\n        uint256 expiration\r\n    );\r\n    event HoldExecuted(address indexed holdIssuer, string operationId, address indexed notary, uint256 heldValue, uint256 transferredValue);\r\n    event HoldExecutedAndKeptOpen(address indexed holdIssuer, string operationId, address indexed notary, uint256 heldValue,\r\n    uint256 transferredValue);\r\n    event HoldReleased(address indexed holdIssuer, string operationId, HoldStatusCode status);\r\n    event HoldRenewed(address indexed holdIssuer, string operationId, uint256 oldExpiration, uint256 newExpiration);\r\n    event AuthorizedHoldOperator(address indexed operator, address indexed account);\r\n    event RevokedHoldOperator(address indexed operator, address indexed account);\r\n}\r\n\r\n// File: eip1996/contracts/Holdable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\ncontract Holdable is IHoldable, ERC20 {\r\n\r\n    using SafeMath for uint256;\r\n    using StringUtil for string;\r\n\r\n    struct Hold {\r\n        address issuer;\r\n        address origin;\r\n        address target;\r\n        address notary;\r\n        uint256 expiration;\r\n        uint256 value;\r\n        HoldStatusCode status;\r\n    }\r\n\r\n    mapping(bytes32 => Hold) internal holds;\r\n    mapping(address => uint256) private heldBalance;\r\n    mapping(address => mapping(address => bool)) private operators;\r\n\r\n    uint256 private _totalHeldBalance;\r\n\r\n    function hold(\r\n        string memory operationId,\r\n        address to,\r\n        address notary,\r\n        uint256 value,\r\n        uint256 timeToExpiration\r\n    ) public returns (bool)\r\n    {\r\n        require(to != address(0), \"Payee address must not be zero address\");\r\n\r\n        emit HoldCreated(\r\n            msg.sender,\r\n            operationId,\r\n            msg.sender,\r\n            to,\r\n            notary,\r\n            value,\r\n            timeToExpiration\r\n        );\r\n\r\n        return _hold(\r\n            operationId,\r\n            msg.sender,\r\n            msg.sender,\r\n            to,\r\n            notary,\r\n            value,\r\n            timeToExpiration\r\n        );\r\n    }\r\n\r\n    function holdFrom(\r\n        string memory operationId,\r\n        address from,\r\n        address to,\r\n        address notary,\r\n        uint256 value,\r\n        uint256 timeToExpiration\r\n    ) public returns (bool)\r\n    {\r\n        require(to != address(0), \"Payee address must not be zero address\");\r\n        require(from != address(0), \"Payer address must not be zero address\");\r\n        require(operators[from][msg.sender], \"This operator is not authorized\");\r\n\r\n        emit HoldCreated(\r\n            msg.sender,\r\n            operationId,\r\n            from,\r\n            to,\r\n            notary,\r\n            value,\r\n            timeToExpiration\r\n        );\r\n\r\n        return _hold(\r\n            operationId,\r\n            msg.sender,\r\n            from,\r\n            to,\r\n            notary,\r\n            value,\r\n            timeToExpiration\r\n        );\r\n    }\r\n\r\n    function releaseHold(string memory operationId) public returns (bool) {\r\n        Hold storage releasableHold = holds[operationId.toHash()];\r\n\r\n        require(releasableHold.status == HoldStatusCode.Ordered || releasableHold.status == HoldStatusCode.ExecutedAndKeptOpen,\"A hold can only be released in status Ordered or ExecutedAndKeptOpen\");\r\n        require(\r\n            _isExpired(releasableHold.expiration) ||\r\n            (msg.sender == releasableHold.notary) ||\r\n            (msg.sender == releasableHold.target),\r\n            \"A not expired hold can only be released by the notary or the payee\"\r\n        );\r\n\r\n        _releaseHold(operationId);\r\n\r\n        emit HoldReleased(releasableHold.issuer, operationId, releasableHold.status);\r\n\r\n        return true;\r\n    }\r\n\r\n    function executeHold(string memory operationId, uint256 value) public returns (bool) { \r\n        return _executeHold(operationId, value, false);\r\n    }\r\n\r\n    function executeHoldAndKeepOpen(string memory operationId, uint256 value) public returns (bool) {\r\n        return _executeHold(operationId, value, true);\r\n    }\r\n\r\n\r\n    function _executeHold(string memory operationId, uint256 value, bool keepOpenIfHoldHasBalance) internal returns (bool) {\r\n\r\n        Hold storage executableHold = holds[operationId.toHash()];\r\n\r\n        require(executableHold.status == HoldStatusCode.Ordered || executableHold.status == HoldStatusCode.ExecutedAndKeptOpen,\"A hold can only be executed in status Ordered or ExecutedAndKeptOpen\");\r\n        require(value != 0, \"Value must be greater than zero\");\r\n        require(executableHold.notary == msg.sender, \"The hold can only be executed by the notary\");\r\n        require(!_isExpired(executableHold.expiration), \"The hold has already expired\");\r\n        require(value <= executableHold.value, \"The value should be equal or less than the held amount\");\r\n\r\n\r\n        if (keepOpenIfHoldHasBalance && ((executableHold.value - value) > 0)) {\r\n            _decreaseHeldBalance(operationId, value);\r\n            _setHoldToExecutedAndKeptOpen(operationId, value); \r\n        }else {\r\n            _decreaseHeldBalance(operationId, executableHold.value);\r\n            _setHoldToExecuted(operationId, value);\r\n        }\r\n        \r\n  \r\n        \r\n\r\n        _transfer(executableHold.origin, executableHold.target, value);\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    function renewHold(string memory operationId, uint256 timeToExpiration) public returns (bool) {\r\n        Hold storage renewableHold = holds[operationId.toHash()];\r\n\r\n        require(renewableHold.status == HoldStatusCode.Ordered, \"A hold can only be renewed in status Ordered\");\r\n        require(!_isExpired(renewableHold.expiration), \"An expired hold can not be renewed\");\r\n        require(\r\n            renewableHold.origin == msg.sender || renewableHold.issuer == msg.sender,\r\n            \"The hold can only be renewed by the issuer or the payer\"\r\n        );\r\n\r\n        uint256 oldExpiration = renewableHold.expiration;\r\n\r\n        if (timeToExpiration == 0) {\r\n            renewableHold.expiration = 0;\r\n        } else {\r\n            /* solium-disable-next-line security/no-block-members */\r\n            renewableHold.expiration = now.add(timeToExpiration);\r\n        }\r\n\r\n        emit HoldRenewed(\r\n            renewableHold.issuer,\r\n            operationId,\r\n            oldExpiration,\r\n            renewableHold.expiration\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    function retrieveHoldData(string memory operationId) public view returns (\r\n        address from,\r\n        address to,\r\n        address notary,\r\n        uint256 value,\r\n        uint256 expiration,\r\n        HoldStatusCode status)\r\n    {\r\n        Hold storage retrievedHold = holds[operationId.toHash()];\r\n        return (\r\n            retrievedHold.origin,\r\n            retrievedHold.target,\r\n            retrievedHold.notary,\r\n            retrievedHold.value,\r\n            retrievedHold.expiration,\r\n            retrievedHold.status\r\n        );\r\n    }\r\n\r\n    function balanceOnHold(address account) public view returns (uint256) {\r\n        return heldBalance[account];\r\n    }\r\n\r\n    function netBalanceOf(address account) public view returns (uint256) {\r\n        return super.balanceOf(account);\r\n    }\r\n\r\n    function totalSupplyOnHold() public view returns (uint256) {\r\n        return _totalHeldBalance;\r\n    }\r\n\r\n    function isHoldOperatorFor(address operator, address from) public view returns (bool) {\r\n        return operators[from][operator];\r\n    }\r\n\r\n    function authorizeHoldOperator(address operator) public returns (bool) {\r\n        require (operators[msg.sender][operator] == false, \"The operator is already authorized\");\r\n\r\n        operators[msg.sender][operator] = true;\r\n        emit AuthorizedHoldOperator(operator, msg.sender);\r\n        return true;\r\n    }\r\n\r\n    function revokeHoldOperator(address operator) public returns (bool) {\r\n        require (operators[msg.sender][operator] == true, \"The operator is already not authorized\");\r\n\r\n        operators[msg.sender][operator] = false;\r\n        emit RevokedHoldOperator(operator, msg.sender);\r\n        return true;\r\n    }\r\n\r\n    /// @notice Retrieve the erc20.balanceOf(account) - heldBalance(account)\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return super.balanceOf(account).sub(heldBalance[account]);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(balanceOf(msg.sender) >= _value, \"Not enough available balance\");\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(balanceOf(_from) >= _value, \"Not enough available balance\");\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function _isExpired(uint256 expiration) internal view returns (bool) {\r\n        /* solium-disable-next-line security/no-block-members */\r\n        return expiration != 0 && (now >= expiration);\r\n    }\r\n\r\n    function _hold(\r\n        string memory operationId,\r\n        address issuer,\r\n        address from,\r\n        address to,\r\n        address notary,\r\n        uint256 value,\r\n        uint256 timeToExpiration\r\n    ) internal returns (bool)\r\n    {\r\n        Hold storage newHold = holds[operationId.toHash()];\r\n\r\n        require(!operationId.isEmpty(), \"Operation ID must not be empty\");\r\n        require(value != 0, \"Value must be greater than zero\");\r\n        require(newHold.value == 0, \"This operationId already exists\");\r\n        require(notary != address(0), \"Notary address must not be zero address\");\r\n        require(value <= balanceOf(from), \"Amount of the hold can't be greater than the balance of the origin\");\r\n\r\n        newHold.issuer = issuer;\r\n        newHold.origin = from;\r\n        newHold.target = to;\r\n        newHold.notary = notary;\r\n        newHold.value = value;\r\n        newHold.status = HoldStatusCode.Ordered;\r\n\r\n        if (timeToExpiration != 0) {\r\n            /* solium-disable-next-line security/no-block-members */\r\n            newHold.expiration = now.add(timeToExpiration);\r\n        }\r\n\r\n        heldBalance[from] = heldBalance[from].add(value);\r\n        _totalHeldBalance = _totalHeldBalance.add(value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function _releaseHold(string memory operationId) internal returns (bool) {\r\n        Hold storage releasableHold = holds[operationId.toHash()];\r\n\r\n        if (_isExpired(releasableHold.expiration)) {\r\n            releasableHold.status = HoldStatusCode.ReleasedOnExpiration;\r\n        } else {\r\n            if (releasableHold.notary == msg.sender) {\r\n                releasableHold.status = HoldStatusCode.ReleasedByNotary;\r\n            } else {\r\n                releasableHold.status = HoldStatusCode.ReleasedByPayee;\r\n            }\r\n        }\r\n\r\n        heldBalance[releasableHold.origin] = heldBalance[releasableHold.origin].sub(releasableHold.value);\r\n        _totalHeldBalance = _totalHeldBalance.sub(releasableHold.value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function _setHoldToExecuted(string memory operationId, uint256 value) internal {\r\n        Hold storage executableHold = holds[operationId.toHash()];\r\n        executableHold.status = HoldStatusCode.Executed;\r\n\r\n        emit HoldExecuted(\r\n            executableHold.issuer, \r\n            operationId,\r\n            executableHold.notary,\r\n            executableHold.value,\r\n            value\r\n        );\r\n    }\r\n\r\n    function _setHoldToExecutedAndKeptOpen(string memory operationId, uint256 value) internal {\r\n        Hold storage executableHold = holds[operationId.toHash()];\r\n        executableHold.status = HoldStatusCode.ExecutedAndKeptOpen;\r\n        executableHold.value = executableHold.value.sub(value);\r\n\r\n        emit HoldExecutedAndKeptOpen(\r\n            executableHold.issuer,\r\n            operationId,\r\n            executableHold.notary,\r\n            executableHold.value,\r\n            value\r\n            );\r\n    }\r\n\r\n    function _decreaseHeldBalance(string memory operationId, uint256 value) internal {\r\n        Hold storage executableHold = holds[operationId.toHash()];\r\n        heldBalance[executableHold.origin] = heldBalance[executableHold.origin].sub(value);\r\n        _totalHeldBalance = _totalHeldBalance.sub(value);\r\n    }\r\n}\r\n\r\n// File: contracts/Payoutable.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity >=0.5.0;\r\n\r\n\r\n\r\n// modification: allow Suspense --> User\r\ncontract Payoutable is IPayoutable, Holdable {\r\n\r\n    struct OrderedPayout {\r\n        string instructions;\r\n        PayoutStatusCode status;\r\n    }\r\n\r\n    mapping(bytes32 => OrderedPayout) private orderedPayouts;\r\n    mapping(address => mapping(address => bool)) private payoutOperators;\r\n    address public payoutAgent;\r\n    address public suspenseAccount;\r\n\r\n    constructor(address _suspenseAccount) public {\r\n        require(_suspenseAccount != address(0), \"Suspense account must not be the zero address\");\r\n        suspenseAccount = _suspenseAccount;\r\n\r\n        payoutAgent = _suspenseAccount;\r\n    }\r\n\r\n    function orderPayout(string calldata operationId, uint256 value, string calldata instructions) external returns (bool) {\r\n        _orderPayout(\r\n            msg.sender,\r\n            operationId,\r\n            msg.sender,\r\n            value,\r\n            instructions\r\n        );\r\n\r\n        emit PayoutOrdered(\r\n            msg.sender,\r\n            operationId,\r\n            msg.sender,\r\n            value,\r\n            instructions\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    function orderPayoutFrom(\r\n        string calldata operationId,\r\n        address walletToBePaidOut,\r\n        uint256 value,\r\n        string calldata instructions\r\n    ) external returns (bool)\r\n    {\r\n        require(walletToBePaidOut != address(0), \"walletToBePaidOut address must not be zero address\");\r\n        require(payoutOperators[walletToBePaidOut][msg.sender], \"This operator is not authorized\");\r\n\r\n        emit PayoutOrdered(\r\n            msg.sender,\r\n            operationId,\r\n            walletToBePaidOut,\r\n            value,\r\n            instructions\r\n        );\r\n\r\n        return _orderPayout(\r\n            msg.sender,\r\n            operationId,\r\n            walletToBePaidOut,\r\n            value,\r\n            instructions\r\n        );\r\n    }\r\n\r\n    function cancelPayout(string calldata operationId) external returns (bool) {\r\n        bytes32 operationIdHash = operationId.toHash();\r\n\r\n        OrderedPayout storage cancelablePayout = orderedPayouts[operationIdHash];\r\n        Hold storage cancelableHold = holds[operationIdHash];\r\n\r\n        require(cancelablePayout.status == PayoutStatusCode.Ordered, \"A payout can only be cancelled in status Ordered\");\r\n        require(\r\n            msg.sender == cancelableHold.issuer || msg.sender == cancelableHold.origin,\r\n            \"A payout can only be cancelled by the orderer or the walletToBePaidOut\"\r\n        );\r\n\r\n        cancelablePayout.status = PayoutStatusCode.Cancelled;\r\n\r\n        emit PayoutCancelled(\r\n            cancelableHold.issuer,\r\n            operationId\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    function processPayout(string calldata operationId) external returns (bool) {\r\n        revert(\"Function not supported in this implementation\");\r\n    }\r\n\r\n    function putFundsInSuspenseInPayout(string calldata operationId) external returns (bool) {\r\n        revert(\"Function not supported in this implementation\");\r\n    }\r\n\r\n    event PayoutFundsReady(string operationId, uint256 amount, string instructions);\r\n    function transferPayoutToSuspenseAccount(string calldata operationId) external returns (bool) {\r\n        bytes32 operationIdHash = operationId.toHash();\r\n\r\n        OrderedPayout storage inSuspensePayout = orderedPayouts[operationIdHash];\r\n\r\n        require(inSuspensePayout.status == PayoutStatusCode.Ordered, \"A payout can only be set to FundsInSuspense from status Ordered\");\r\n        require(msg.sender == payoutAgent, \"A payout can only be set to in suspense by the payout agent\");\r\n\r\n        Hold storage inSuspenseHold = holds[operationIdHash];\r\n\r\n        super._transfer(inSuspenseHold.origin, inSuspenseHold.target, inSuspenseHold.value);\r\n        super._setHoldToExecuted(operationId, inSuspenseHold.value);\r\n\r\n        _releaseHold(operationId);\r\n        inSuspensePayout.status = PayoutStatusCode.FundsInSuspense;\r\n\r\n        emit PayoutFundsInSuspense(\r\n            inSuspenseHold.issuer,\r\n            operationId\r\n        );\r\n\r\n        emit PayoutFundsReady(\r\n            operationId,\r\n            inSuspenseHold.value,\r\n            inSuspensePayout.instructions\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    // New\r\n    event PayoutFundsReturned(string operationId);\r\n    function returnPayoutFromSuspenseAccount(string calldata operationId) external returns (bool) {\r\n        bytes32 operationIdHash = operationId.toHash();\r\n\r\n        OrderedPayout storage inSuspensePayout = orderedPayouts[operationIdHash];\r\n\r\n        require(inSuspensePayout.status == PayoutStatusCode.FundsInSuspense, \"A payout can only be set back to Ordered from status FundsInSuspense\");\r\n        require(msg.sender == payoutAgent, \"A payout can only be set back to Ordered by the payout agent\");\r\n\r\n        Hold storage inSuspenseHold = holds[operationIdHash];\r\n\r\n        // Hold is already executed, funds have been transferred to suspense, so\r\n        // just send them back, cannot / should not release hold\r\n        // super._releaseHold(operationId);\r\n        super._transfer(inSuspenseHold.target, inSuspenseHold.origin, inSuspenseHold.value);\r\n\r\n        inSuspensePayout.status = PayoutStatusCode.Ordered;\r\n\r\n        emit PayoutFundsReturned(\r\n            operationId\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    function executePayout(string calldata operationId) external returns (bool) {\r\n        bytes32 operationIdHash = operationId.toHash();\r\n\r\n        OrderedPayout storage executedPayout = orderedPayouts[operationIdHash];\r\n\r\n        require(executedPayout.status == PayoutStatusCode.FundsInSuspense, \"A payout can only be executed from status FundsInSuspense\");\r\n        require(msg.sender == payoutAgent, \"A payout can only be executed by the payout agent\");\r\n\r\n        Hold storage executedHold = holds[operationIdHash];\r\n\r\n        _burn(executedHold.target, executedHold.value);\r\n\r\n        executedPayout.status = PayoutStatusCode.Executed;\r\n\r\n        emit PayoutExecuted(\r\n            executedHold.issuer,\r\n            operationId\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    function rejectPayout(string calldata operationId, string calldata reason) external returns (bool) {\r\n        bytes32 operationIdHash = operationId.toHash();\r\n\r\n        OrderedPayout storage rejectedPayout = orderedPayouts[operationIdHash];\r\n\r\n        require(rejectedPayout.status == PayoutStatusCode.Ordered, \"A payout can only be rejected from status Ordered\");\r\n        require(msg.sender == payoutAgent, \"A payout can only be rejected by the payout agent\");\r\n\r\n        Hold storage rejectedHold = holds[operationIdHash];\r\n\r\n        rejectedPayout.status = PayoutStatusCode.Rejected;\r\n\r\n        emit PayoutRejected(\r\n            rejectedHold.issuer,\r\n            operationId,\r\n            reason\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    function retrievePayoutData(string calldata operationId) external view returns (\r\n        address walletToDebit,\r\n        uint256 value,\r\n        string memory instructions,\r\n        PayoutStatusCode status\r\n    )\r\n    {\r\n        bytes32 operationIdHash = operationId.toHash();\r\n\r\n        OrderedPayout storage retrievedPayout = orderedPayouts[operationIdHash];\r\n        Hold storage retrievedHold = holds[operationIdHash];\r\n\r\n        return (\r\n            retrievedHold.origin,\r\n            retrievedHold.value,\r\n            retrievedPayout.instructions,\r\n            retrievedPayout.status\r\n        );\r\n    }\r\n\r\n    function isPayoutOperatorFor(address operator, address from) external view returns (bool) {\r\n        return payoutOperators[from][operator];\r\n    }\r\n\r\n    function authorizePayoutOperator(address operator) external returns (bool) {\r\n        require(payoutOperators[msg.sender][operator] == false, \"The operator is already authorized\");\r\n\r\n        payoutOperators[msg.sender][operator] = true;\r\n        emit AuthorizedPayoutOperator(operator, msg.sender);\r\n        return true;\r\n    }\r\n\r\n    function revokePayoutOperator(address operator) external returns (bool) {\r\n        require(payoutOperators[msg.sender][operator], \"The operator is already not authorized\");\r\n\r\n        payoutOperators[msg.sender][operator] = false;\r\n        emit RevokedPayoutOperator(operator, msg.sender);\r\n        return true;\r\n    }\r\n\r\n    function _orderPayout(\r\n        address orderer,\r\n        string memory operationId,\r\n        address walletToBePaidOut,\r\n        uint256 value,\r\n        string memory instructions\r\n    ) internal returns (bool)\r\n    {\r\n        OrderedPayout storage newPayout = orderedPayouts[operationId.toHash()];\r\n\r\n        require(!instructions.isEmpty(), \"Instructions must not be empty\");\r\n\r\n        newPayout.instructions = instructions;\r\n        newPayout.status = PayoutStatusCode.Ordered;\r\n\r\n        return _hold(\r\n            operationId,\r\n            orderer,\r\n            walletToBePaidOut,\r\n            suspenseAccount,\r\n            payoutAgent,\r\n            value,\r\n            0\r\n        );\r\n    }\r\n}\r\n\r\n// File: contracts/Token.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\n\r\n\r\ncontract wHBAR is Payoutable, AccountCreator {\r\n    string _name;\r\n    string _symbol;\r\n    uint8 _decimals;\r\n\r\n    address _owner;\r\n\r\n    uint256 _accountCreateFee;\r\n    \r\n    constructor(\r\n        string memory __name,\r\n        string memory __symbol,\r\n        uint8 __decimals,\r\n        address __customOwner\r\n\r\n    )\r\n    public\r\n    Payoutable(__customOwner) \r\n    AccountCreator(__customOwner, 50000000000000) \r\n    { // AccountCreator ERC20 Holdable SafeMath, 50k gwei hedera account creation fee\r\n        _name = __name;\r\n        _symbol = __symbol;\r\n        _decimals = __decimals;\r\n        _owner = __customOwner;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function mint(address to, uint256 amount) public returns (bool) {\r\n        require(_msgSender() == _owner, \"unauthorized\");\r\n        super._mint(to, amount);\r\n        return true;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"__name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"__symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"__decimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"__customOwner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AuthorizedHoldOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AuthorizedPayoutOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"operationId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"requestor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"hederaPublicKey\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"CreateAccountFail\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"requestor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refundAmountWei\",\"type\":\"uint256\"}],\"name\":\"CreateAccountRefund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"operationId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"requestor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"hederaPublicKey\",\"type\":\"string\"}],\"name\":\"CreateAccountRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"operationId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"requestor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"hederaPublicKey\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"hederaAccountId\",\"type\":\"string\"}],\"name\":\"CreateAccountSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holdIssuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"operationId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"notary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"}],\"name\":\"HoldCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holdIssuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"operationId\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"notary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"heldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferredValue\",\"type\":\"uint256\"}],\"name\":\"HoldExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holdIssuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"operationId\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"notary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"heldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferredValue\",\"type\":\"uint256\"}],\"name\":\"HoldExecutedAndKeptOpen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holdIssuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"operationId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"enum IHoldable.HoldStatusCode\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"HoldReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holdIssuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"operationId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldExpiration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newExpiration\",\"type\":\"uint256\"}],\"name\":\"HoldRenewed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"orderer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"operationId\",\"type\":\"string\"}],\"name\":\"PayoutCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"orderer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"operationId\",\"type\":\"string\"}],\"name\":\"PayoutExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"orderer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"operationId\",\"type\":\"string\"}],\"name\":\"PayoutFundsInSuspense\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"operationId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"instructions\",\"type\":\"string\"}],\"name\":\"PayoutFundsReady\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"operationId\",\"type\":\"string\"}],\"name\":\"PayoutFundsReturned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"orderer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"operationId\",\"type\":\"string\"}],\"name\":\"PayoutInProcess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"orderer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"operationId\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletToDebit\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"instructions\",\"type\":\"string\"}],\"name\":\"PayoutOrdered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"orderer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"operationId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"PayoutRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RevokedHoldOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RevokedPayoutOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"accountCreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"authorizeHoldOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"authorizePayoutOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOnHold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"operationId\",\"type\":\"string\"}],\"name\":\"cancelPayout\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"operationId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"hederaPublicKey\",\"type\":\"string\"}],\"name\":\"createAccount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"operationId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"createAccountFail\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"operationId\",\"type\":\"string\"}],\"name\":\"createAccountRefund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"operationId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"hederaAccountId\",\"type\":\"string\"}],\"name\":\"createAccountSuccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"operationId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"executeHold\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"operationId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"executeHoldAndKeepOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"operationId\",\"type\":\"string\"}],\"name\":\"executePayout\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAccountCreationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAccountCreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"operationId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"notary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeToExpiration\",\"type\":\"uint256\"}],\"name\":\"hold\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"operationId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"notary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeToExpiration\",\"type\":\"uint256\"}],\"name\":\"holdFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"isHoldOperatorFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"isPayoutOperatorFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"netBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"operationId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"instructions\",\"type\":\"string\"}],\"name\":\"orderPayout\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"operationId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"walletToBePaidOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"instructions\",\"type\":\"string\"}],\"name\":\"orderPayoutFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payoutAgent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"operationId\",\"type\":\"string\"}],\"name\":\"processPayout\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"operationId\",\"type\":\"string\"}],\"name\":\"putFundsInSuspenseInPayout\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"operationId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"rejectPayout\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"operationId\",\"type\":\"string\"}],\"name\":\"releaseHold\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"operationId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timeToExpiration\",\"type\":\"uint256\"}],\"name\":\"renewHold\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"operationId\",\"type\":\"string\"}],\"name\":\"retrieveHoldData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"notary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"enum IHoldable.HoldStatusCode\",\"name\":\"status\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"operationId\",\"type\":\"string\"}],\"name\":\"retrievePayoutData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"walletToDebit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"instructions\",\"type\":\"string\"},{\"internalType\":\"enum IPayoutable.PayoutStatusCode\",\"name\":\"status\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"operationId\",\"type\":\"string\"}],\"name\":\"returnPayoutFromSuspenseAccount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"revokeHoldOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"revokePayoutOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeInWei\",\"type\":\"uint256\"}],\"name\":\"setAccountCreationFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"suspenseAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupplyOnHold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"operationId\",\"type\":\"string\"}],\"name\":\"transferPayoutToSuspenseAccount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"wHBAR","CompilerVersion":"v0.5.15+commit.6a57276f","OptimizationUsed":"1","Runs":"1","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000008000000000000000000000000e824424ee4022cd6bc408249f924a6e3bda035c9000000000000000000000000000000000000000000000000000000000000000c577261707065642048626172000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000057748424152000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://b23a5dd6840730cad90de2df3db6ec4b1ebce72fde6773d00a61386704abb65e"}]}