{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n    \r\n    function ceil(uint256 a, uint256 m) internal pure returns (uint256 r) {\r\n        require(m != 0, \"SafeMath: to ceil number shall not be zero\");\r\n        return (a + m - 1) / m * m;\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n// ----------------------------------------------------------------------------\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface IRW{\r\n    function sendRewards(address to, uint256 tokens) external;\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n    address payable public owner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"Only allowed by owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address payable _newOwner) public onlyOwner {\r\n        owner = _newOwner;\r\n        emit OwnershipTransferred(msg.sender, _newOwner);\r\n    }\r\n}\r\n\r\ncontract ChocolatePool is Owned {\r\n    using SafeMath for uint256;\r\n    \r\n    IERC20 vanilla;\r\n    IRW rewardsWallet;\r\n    uint256 public  stakingPeriod = 45 days;\r\n    uint256 private rewardPercentage = 300; // APY\r\n    uint256 private maxSlots = 30000 * 10 ** (18);\r\n    uint256 private minTokensPerUser = 1000 * 10 ** (18);\r\n    uint256 private maxTokensPerUser = 5000 * 10 ** (18);\r\n    uint256 private subscriptionPeriod = 3 days;\r\n    \r\n    uint256 public  subscriptionEnds;\r\n    uint256 public  rewardClaimDate;\r\n    \r\n    uint256 public  totalClaimedRewards;\r\n    uint256 public  totalStaked;\r\n    \r\n    struct Account{\r\n        uint256 stakedAmount;\r\n        uint256 rewardsClaimed;\r\n        uint256 pending;\r\n    }\r\n    \r\n    mapping(address => Account) public stakers;\r\n    \r\n    event RewardClaimed(address claimer, uint256 reward);\r\n    event UnStaked(address claimer, uint256 stakedTokens);\r\n    event Staked(address staker, uint256 tokens);\r\n    \r\n    event MinTokensPerUserChanged(address by, uint256 oldValue, uint256 newValue);\r\n    event MaxTokensPerUserChanged(address by, uint256 oldValue, uint256 newValue);\r\n    event APYChanged(address by, uint256 oldValue, uint256 newValue);\r\n    event MaxSlotsChanged(address by, uint256 oldValue, uint256 newValue);\r\n    \r\n    constructor(address _tokenAddress, address _rewardsWallet) public {\r\n        vanilla = IERC20(_tokenAddress);\r\n        rewardsWallet = IRW(_rewardsWallet);\r\n        subscriptionEnds = block.timestamp.add(subscriptionPeriod);\r\n        rewardClaimDate = subscriptionEnds.add(stakingPeriod);\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Start the staking or add to existing stake\r\n    // user must approve the staking contract to transfer tokens before staking\r\n    // @param _amount number of tokens to stake\r\n    // staking is only possible within subscription period\r\n    // ------------------------------------------------------------------------\r\n    function STAKE(uint256 _amount) external {\r\n        require(block.timestamp <= subscriptionEnds, \"subscription time expires\");\r\n        \r\n        require(stakers[msg.sender].stakedAmount.add(_amount) >= minTokensPerUser && stakers[msg.sender].stakedAmount.add(_amount) <= maxTokensPerUser, \"exceeds allowed ranges\");\r\n        \r\n        uint256 deduction = onePercent(_amount).mul(5); // 5% transaction cost\r\n\r\n        totalStaked = totalStaked.add(_amount.sub(deduction));\r\n        \r\n        require(totalStaked <= maxSlots, \"no free slots\");\r\n        \r\n        // transfer the tokens from caller to staking contract\r\n        vanilla.transferFrom(msg.sender, address(this), _amount);\r\n        \r\n        // record it in contract's storage\r\n        stakers[msg.sender].stakedAmount = stakers[msg.sender].stakedAmount.add(_amount.sub(deduction)); // add to the stake or fresh stake\r\n        \r\n        emit Staked(msg.sender, _amount.sub(deduction));\r\n    }\r\n    \r\n    function changeMinTokensPerUser(uint256 _newMinTokensPerUser) external onlyOwner{\r\n        emit MinTokensPerUserChanged(msg.sender, minTokensPerUser, _newMinTokensPerUser);\r\n        minTokensPerUser = _newMinTokensPerUser;\r\n    }\r\n    \r\n    function changeMaxTokensPerUser(uint256 _newMaxTokensPerUser) external onlyOwner{\r\n        emit MaxTokensPerUserChanged(msg.sender, maxTokensPerUser, _newMaxTokensPerUser);\r\n        maxTokensPerUser = _newMaxTokensPerUser;\r\n    }\r\n    \r\n    function changeAPY(uint256 _newAPY) external onlyOwner{\r\n        emit APYChanged(msg.sender, rewardPercentage, _newAPY);\r\n        rewardPercentage = _newAPY;\r\n    }\r\n    \r\n    function changeMaxSlots(uint256 _newMaxSlots) external onlyOwner{\r\n        emit MaxSlotsChanged(msg.sender, maxSlots, _newMaxSlots);\r\n        maxSlots = _newMaxSlots;\r\n    }\r\n    \r\n    function Claim() external{\r\n        ClaimReward();\r\n        UnStake();\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Claim reward\r\n    // @required user must be a staker\r\n    // @required must be claimable\r\n    // ------------------------------------------------------------------------\r\n    function ClaimReward() public {\r\n        require(pendingReward(msg.sender) > 0, \"nothing pending to claim\");\r\n        require(block.timestamp > rewardClaimDate, \"claim date has not reached\");\r\n        // transfer the reward tokens\r\n        rewardsWallet.sendRewards(msg.sender, pendingReward(msg.sender));\r\n         \r\n        // add claimed reward to global stats\r\n        totalClaimedRewards = totalClaimedRewards.add(pendingReward(msg.sender));\r\n        \r\n        emit RewardClaimed(msg.sender, pendingReward(msg.sender));\r\n        \r\n        // add the reward to total claimed rewards\r\n        stakers[msg.sender].rewardsClaimed = stakers[msg.sender].rewardsClaimed.add(pendingReward(msg.sender));\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Unstake the tokens\r\n    // @required user must be a staker\r\n    // @required must be claimable\r\n    // ------------------------------------------------------------------------\r\n    function UnStake() public {\r\n        uint256 stakedAmount = stakers[msg.sender].stakedAmount;\r\n        require(stakedAmount > 0, \"insufficient stake\");\r\n        \r\n        if(block.timestamp < rewardClaimDate)\r\n            totalStaked = totalStaked.sub(stakedAmount);\r\n        else\r\n            stakers[msg.sender].pending = pendingReward(msg.sender);\r\n        \r\n        stakers[msg.sender].stakedAmount = 0;\r\n        \r\n        // transfer staked tokens\r\n        vanilla.transfer(msg.sender, stakedAmount);\r\n        \r\n        emit UnStaked(msg.sender, stakedAmount);\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Query to get the pending reward\r\n    // ------------------------------------------------------------------------\r\n    function pendingReward(address user) public view returns(uint256 _pendingReward){\r\n        uint256 reward = (((stakers[user].stakedAmount).mul(rewardPercentage).mul(stakingPeriod)).div(365 days)).div(100);\r\n        reward =  reward.sub(stakers[user].rewardsClaimed);\r\n        return reward.add(stakers[user].pending);\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Private function to calculate 1% percentage\r\n    // ------------------------------------------------------------------------\r\n    function onePercent(uint256 _tokens) private pure returns (uint256){\r\n        uint256 roundValue = _tokens.ceil(100);\r\n        uint onePercentofTokens = roundValue.mul(100).div(100 * 10**uint(2));\r\n        return onePercentofTokens;\r\n    }\r\n    \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardsWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"APYChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"MaxSlotsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"MaxTokensPerUserChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"MinTokensPerUserChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakedTokens\",\"type\":\"uint256\"}],\"name\":\"UnStaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ClaimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"STAKE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UnStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newAPY\",\"type\":\"uint256\"}],\"name\":\"changeAPY\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMaxSlots\",\"type\":\"uint256\"}],\"name\":\"changeMaxSlots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMaxTokensPerUser\",\"type\":\"uint256\"}],\"name\":\"changeMaxTokensPerUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMinTokensPerUser\",\"type\":\"uint256\"}],\"name\":\"changeMinTokensPerUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_pendingReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardClaimDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pending\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscriptionEnds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalClaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ChocolatePool","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000b97faf860045483e0c7f08c56acb31333084a9880000000000000000000000003d4c0422d7a03ed8c83b4fdbf4aa168073315576","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://af5ca611c80868fa13fb32299a16ac6ae4cfc388f5d9b0fad2bc5cbf7c2cf7eb"}]}