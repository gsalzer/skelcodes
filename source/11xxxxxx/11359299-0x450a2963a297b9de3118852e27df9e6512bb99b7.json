{"status":"1","message":"OK","result":[{"SourceCode":"{\"IERC20.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\ninterface IERC20 {\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address who) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\"},\"ReentrancyGuard.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n *\\n * _Since v2.5.0:_ this module is now much more gas efficient, given net gas\\n * metering changes introduced in the Istanbul hardfork.\\n */\\ncontract ReentrancyGuard {\\n    bool private _notEntered;\\n\\n    constructor () internal {\\n        // Storing an initial non-zero value makes deployment a bit more\\n        // expensive, but in exchange the refund on every call to nonReentrant\\n        // will be lower in amount. Since refunds are capped to a percetange of\\n        // the total transaction\\u0027s gas, it is best to keep them low in cases\\n        // like this one, to increase the likelihood of the full refund coming\\n        // into effect.\\n        _notEntered = true;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_notEntered, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _notEntered = false;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _notEntered = true;\\n    }\\n}\\n\"},\"SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b);\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        require(b \\u003e 0);\\n        uint256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b \\u003c= a);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a);\\n\\n        return c;\\n    }\\n}\"},\"Splitter.sol\":{\"content\":\"pragma solidity 0.5.17;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./ReentrancyGuard.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\ncontract Splitter is ReentrancyGuard {\\n    using SafeMath for uint256;\\n\\n    address public currency;\\n    address[] public team;\\n    uint256 public totalShares;\\n    uint256 public totalIncome;\\n    uint256 public totalIncomeClaimed;\\n    uint256 public lastTokenBalance;\\n\\n    struct Member {\\n        uint256 shares;\\n        uint256 incomeClaimed;\\n    }\\n\\n    mapping(address =\\u003e Member) public members;\\n\\n    constructor(\\n        address[] memory _team,\\n        uint256[] memory _shares,\\n        address _currency\\n    ) public {\\n        require(_team.length \\u003e 0);\\n        require(_team.length == _shares.length);\\n        require(_currency != address(0));\\n\\n        currency = _currency;\\n        team = _team;\\n\\n        uint256 _totalShares = 0;\\n\\n        for (uint256 i = 0; i \\u003c _team.length; i++) {\\n            address member = _team[i];\\n            uint256 share = _shares[i];\\n\\n            require(member != address(0));\\n            require(share \\u003e 0);\\n\\n            members[member] = Member(share, 0);\\n            _totalShares = _totalShares.add(share);\\n        }\\n\\n        totalShares = _totalShares;\\n        lastTokenBalance = IERC20(currency).balanceOf(address(this));\\n    }\\n\\n    function claimIncome() public nonReentrant {\\n        uint256 newIncome = IERC20(currency).balanceOf(address(this)).sub(lastTokenBalance);\\n        totalIncome = totalIncome.add(newIncome);\\n\\n        Member storage member = members[msg.sender];\\n        require(member.shares \\u003e 0, \\\"not a member\\\");\\n        uint256 memberIncome = totalIncome.mul(member.shares).div(totalShares);\\n        uint256 newMemberIncome = memberIncome.sub(member.incomeClaimed);\\n        require(newMemberIncome \\u003e 0, \\\"no income to claim\\\");\\n\\n        member.incomeClaimed = memberIncome;\\n        totalIncomeClaimed = totalIncomeClaimed.add(newMemberIncome);\\n\\n        require(IERC20(currency).transfer(msg.sender, newMemberIncome), \\\"transfer failed\\\");\\n\\n        lastTokenBalance = IERC20(currency).balanceOf(address(this));\\n    }\\n}\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_team\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_shares\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimIncome\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currency\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"members\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"incomeClaimed\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"team\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalIncome\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalIncomeClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Splitter","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"1","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000f621601f59e3f6c8715ecec555429fc4a9fd22040000000000000000000000000000000000000000000000000000000000000011000000000000000000000000f97d9ae05a3b7059f3870d8b1e605ee775410904000000000000000000000000770f2b281db359887eb1305a301fd4e5dc5c47590000000000000000000000002b6c10d5061b011bfd2eaab3ff986778eba26f5a00000000000000000000000058f2df7f08135210e0bcd27b745882a738e532530000000000000000000000008db4c6e76af525da6e184d8075a638cf8f57d7ab000000000000000000000000fa102d63feed3e385f74e13e57967761eae76da3000000000000000000000000da4e72e3f645df924067c2ede65cfcb81f960b400000000000000000000000008734443e02c5021c62fcd42b09d543ec2adf4da10000000000000000000000004e115829c20c6b167b768fa966b5ea3f255d11f10000000000000000000000008c26ae7e5bbeac1ace81e6107b93811d71d36d9d0000000000000000000000000fe2d692191b745c99f65cbb7c7b758285ecde7b000000000000000000000000ee87f43da8c5df31e1e89536530506dff9e9e23300000000000000000000000025673ff889da72f30adece7ce8e098a52536080b0000000000000000000000000d0b824355813fff897da2f0798fe32264ac523600000000000000000000000083f33248e9c00a46a00cd5f654f9f6b4266d7266000000000000000000000000b327df8fa38f353599f58572e7710cf99a11f185000000000000000000000000a84c44ffd029674f00affcb67b42ee0c7ab1c1940000000000000000000000000000000000000000000000000000000000000011000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://6f18323f6b0e4215d53e5293e279581f08184ae738518149f3b1ba0f2019b5db"}]}