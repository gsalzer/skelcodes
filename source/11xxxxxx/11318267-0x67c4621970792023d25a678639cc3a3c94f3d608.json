{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: GPL-3.0-only\r\npragma experimental ABIEncoderV2;\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\ncontract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: contracts/GToken.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @dev Minimal interface for gTokens, implemented by the GTokenBase contract.\r\n *      See GTokenBase.sol for further documentation.\r\n */\r\ninterface GToken is IERC20\r\n{\r\n\t// pure functions\r\n\tfunction calcDepositSharesFromCost(uint256 _cost, uint256 _totalReserve, uint256 _totalSupply, uint256 _depositFee) external pure returns (uint256 _netShares, uint256 _feeShares);\r\n\tfunction calcDepositCostFromShares(uint256 _netShares, uint256 _totalReserve, uint256 _totalSupply, uint256 _depositFee) external pure returns (uint256 _cost, uint256 _feeShares);\r\n\tfunction calcWithdrawalSharesFromCost(uint256 _cost, uint256 _totalReserve, uint256 _totalSupply, uint256 _withdrawalFee) external pure returns (uint256 _grossShares, uint256 _feeShares);\r\n\tfunction calcWithdrawalCostFromShares(uint256 _grossShares, uint256 _totalReserve, uint256 _totalSupply, uint256 _withdrawalFee) external pure returns (uint256 _cost, uint256 _feeShares);\r\n\r\n\t// view functions\r\n\tfunction reserveToken() external view returns (address _reserveToken);\r\n\tfunction totalReserve() external view returns (uint256 _totalReserve);\r\n\tfunction depositFee() external view returns (uint256 _depositFee);\r\n\tfunction withdrawalFee() external view returns (uint256 _withdrawalFee);\r\n\r\n\t// open functions\r\n\tfunction deposit(uint256 _cost) external;\r\n\tfunction withdraw(uint256 _grossShares) external;\r\n}\r\n\r\n// File: contracts/GVoting.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev An interface to extend gTokens with voting delegation capabilities.\r\n *      See GTokenType3.sol for further documentation.\r\n */\r\ninterface GVoting\r\n{\r\n\t// view functions\r\n\tfunction votes(address _candidate) external view returns (uint256 _votes);\r\n\tfunction candidate(address _voter) external view returns (address _candidate);\r\n\r\n\t// open functions\r\n\tfunction setCandidate(address _newCandidate) external;\r\n\r\n\t// emitted events\r\n\tevent ChangeCandidate(address indexed _voter, address indexed _oldCandidate, address indexed _newCandidate);\r\n\tevent ChangeVotes(address indexed _candidate, uint256 _oldVotes, uint256 _newVotes);\r\n}\r\n\r\n// File: contracts/GFormulae.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @dev Pure implementation of deposit/minting and withdrawal/burning formulas\r\n *      for gTokens.\r\n *      All operations assume that, if total supply is 0, then the total\r\n *      reserve is also 0, and vice-versa.\r\n *      Fees are calculated percentually based on the gross amount.\r\n *      See GTokenBase.sol for further documentation.\r\n */\r\nlibrary GFormulae\r\n{\r\n\tusing SafeMath for uint256;\r\n\r\n\t/* deposit(cost):\r\n\t *   price = reserve / supply\r\n\t *   gross = cost / price\r\n\t *   net = gross * 0.99\t# fee is assumed to be 1% for simplicity\r\n\t *   fee = gross - net\r\n\t *   return net, fee\r\n\t */\r\n\tfunction _calcDepositSharesFromCost(uint256 _cost, uint256 _totalReserve, uint256 _totalSupply, uint256 _depositFee) internal pure returns (uint256 _netShares, uint256 _feeShares)\r\n\t{\r\n\t\tuint256 _grossShares = _totalSupply == _totalReserve ? _cost : _cost.mul(_totalSupply).div(_totalReserve);\r\n\t\t_netShares = _grossShares.mul(uint256(1e18).sub(_depositFee)).div(1e18);\r\n\t\t_feeShares = _grossShares.sub(_netShares);\r\n\t\treturn (_netShares, _feeShares);\r\n\t}\r\n\r\n\t/* deposit_reverse(net):\r\n\t *   price = reserve / supply\r\n\t *   gross = net / 0.99\t# fee is assumed to be 1% for simplicity\r\n\t *   cost = gross * price\r\n\t *   fee = gross - net\r\n\t *   return cost, fee\r\n\t */\r\n\tfunction _calcDepositCostFromShares(uint256 _netShares, uint256 _totalReserve, uint256 _totalSupply, uint256 _depositFee) internal pure returns (uint256 _cost, uint256 _feeShares)\r\n\t{\r\n\t\tuint256 _grossShares = _netShares.mul(1e18).div(uint256(1e18).sub(_depositFee));\r\n\t\t_cost = _totalReserve == _totalSupply ? _grossShares : _grossShares.mul(_totalReserve).div(_totalSupply);\r\n\t\t_feeShares = _grossShares.sub(_netShares);\r\n\t\treturn (_cost, _feeShares);\r\n\t}\r\n\r\n\t/* withdrawal_reverse(cost):\r\n\t *   price = reserve / supply\r\n\t *   net = cost / price\r\n\t *   gross = net / 0.99\t# fee is assumed to be 1% for simplicity\r\n\t *   fee = gross - net\r\n\t *   return gross, fee\r\n\t */\r\n\tfunction _calcWithdrawalSharesFromCost(uint256 _cost, uint256 _totalReserve, uint256 _totalSupply, uint256 _withdrawalFee) internal pure returns (uint256 _grossShares, uint256 _feeShares)\r\n\t{\r\n\t\tuint256 _netShares = _cost == _totalReserve ? _totalSupply : _cost.mul(_totalSupply).div(_totalReserve);\r\n\t\t_grossShares = _netShares.mul(1e18).div(uint256(1e18).sub(_withdrawalFee));\r\n\t\t_feeShares = _grossShares.sub(_netShares);\r\n\t\treturn (_grossShares, _feeShares);\r\n\t}\r\n\r\n\t/* withdrawal(gross):\r\n\t *   price = reserve / supply\r\n\t *   net = gross * 0.99\t# fee is assumed to be 1% for simplicity\r\n\t *   cost = net * price\r\n\t *   fee = gross - net\r\n\t *   return cost, fee\r\n\t */\r\n\tfunction _calcWithdrawalCostFromShares(uint256 _grossShares, uint256 _totalReserve, uint256 _totalSupply, uint256 _withdrawalFee) internal pure returns (uint256 _cost, uint256 _feeShares)\r\n\t{\r\n\t\tuint256 _netShares = _grossShares.mul(uint256(1e18).sub(_withdrawalFee)).div(1e18);\r\n\t\t_cost = _netShares == _totalSupply ? _totalReserve : _netShares.mul(_totalReserve).div(_totalSupply);\r\n\t\t_feeShares = _grossShares.sub(_netShares);\r\n\t\treturn (_cost, _feeShares);\r\n\t}\r\n}\r\n\r\n// File: contracts/modules/Math.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev This library implements auxiliary math definitions.\r\n */\r\nlibrary Math\r\n{\r\n\tfunction _min(uint256 _amount1, uint256 _amount2) internal pure returns (uint256 _minAmount)\r\n\t{\r\n\t\treturn _amount1 < _amount2 ? _amount1 : _amount2;\r\n\t}\r\n\r\n\tfunction _max(uint256 _amount1, uint256 _amount2) internal pure returns (uint256 _maxAmount)\r\n\t{\r\n\t\treturn _amount1 > _amount2 ? _amount1 : _amount2;\r\n\t}\r\n}\r\n\r\n// File: contracts/network/$.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev This library is provided for conveniece. It is the single source for\r\n *      the current network and all related hardcoded contract addresses. It\r\n *      also provide useful definitions for debuging faultless code via events.\r\n */\r\nlibrary $\r\n{\r\n\taddress constant GRO = 0x09e64c2B61a5f1690Ee6fbeD9baf5D6990F8dFd0;\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/modules/Transfers.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n/**\r\n * @dev This library abstracts ERC-20 operations.\r\n */\r\nlibrary Transfers\r\n{\r\n\tusing SafeERC20 for IERC20;\r\n\r\n\t/**\r\n\t * @dev Retrieves a given ERC-20 token balance for the current contract.\r\n\t * @param _token An ERC-20 compatible token address.\r\n\t * @return _balance The current contract balance of the given ERC-20 token.\r\n\t */\r\n\tfunction _getBalance(address _token) internal view returns (uint256 _balance)\r\n\t{\r\n\t\treturn IERC20(_token).balanceOf(address(this));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Allows a spender to access a given ERC-20 balance for the current contract.\r\n\t * @param _token An ERC-20 compatible token address.\r\n\t * @param _to The spender address.\r\n\t * @param _amount The exact spending allowance amount.\r\n\t */\r\n\tfunction _approveFunds(address _token, address _to, uint256 _amount) internal\r\n\t{\r\n\t\tuint256 _allowance = IERC20(_token).allowance(address(this), _to);\r\n\t\tif (_allowance > _amount) {\r\n\t\t\tIERC20(_token).safeDecreaseAllowance(_to, _allowance - _amount);\r\n\t\t}\r\n\t\telse\r\n\t\tif (_allowance < _amount) {\r\n\t\t\tIERC20(_token).safeIncreaseAllowance(_to, _amount - _allowance);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Transfer a given ERC-20 token amount into the current contract.\r\n\t * @param _token An ERC-20 compatible token address.\r\n\t * @param _from The source address.\r\n\t * @param _amount The amount to be transferred.\r\n\t */\r\n\tfunction _pullFunds(address _token, address _from, uint256 _amount) internal\r\n\t{\r\n\t\tif (_amount == 0) return;\r\n\t\tIERC20(_token).safeTransferFrom(_from, address(this), _amount);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Transfer a given ERC-20 token amount from the current contract.\r\n\t * @param _token An ERC-20 compatible token address.\r\n\t * @param _to The target address.\r\n\t * @param _amount The amount to be transferred.\r\n\t */\r\n\tfunction _pushFunds(address _token, address _to, uint256 _amount) internal\r\n\t{\r\n\t\tif (_amount == 0) return;\r\n\t\tIERC20(_token).safeTransfer(_to, _amount);\r\n\t}\r\n}\r\n\r\n// File: contracts/G.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev This public library provides a single entrypoint to most of the relevant\r\n *      internal libraries available in the modules folder. It exists to\r\n *      circunvent the contract size limitation imposed by the EVM. All function\r\n *      calls are directly delegated to the target library function preserving\r\n *      argument and return values exactly as they are. This library is shared\r\n *      by many contracts and even other public libraries from this repository,\r\n *      therefore it needs to be published alongside them.\r\n */\r\nlibrary G\r\n{\r\n\tfunction min(uint256 _amount1, uint256 _amount2) public pure returns (uint256 _minAmount) { return Math._min(_amount1, _amount2); }\r\n\tfunction max(uint256 _amount1, uint256 _amount2) public pure returns (uint256 _maxAmount) { return Math._max(_amount1, _amount2); }\r\n\r\n\tfunction getBalance(address _token) public view returns (uint256 _balance) { return Transfers._getBalance(_token); }\r\n\tfunction pullFunds(address _token, address _from, uint256 _amount) public { Transfers._pullFunds(_token, _from, _amount); }\r\n\tfunction pushFunds(address _token, address _to, uint256 _amount) public { Transfers._pushFunds(_token, _to, _amount); }\r\n\tfunction approveFunds(address _token, address _to, uint256 _amount) public { Transfers._approveFunds(_token, _to, _amount); }\r\n}\r\n\r\n// File: contracts/GTokenType3.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @notice This contract implements the functionality for the gToken Type 3.\r\n *         It has a higher deposit/withdrawal fee when compared to other\r\n *         gTokens (10%). Half of the collected fee used to reward token\r\n *         holders while the other half is burned along with the same proportion\r\n *         of the reserve. It is used in the implementation of stkGRO.\r\n */\r\ncontract GTokenType3 is ERC20, ReentrancyGuard, GToken, GVoting\r\n{\r\n\tusing SafeMath for uint256;\r\n\r\n\tuint256 constant DEPOSIT_FEE = 10e16; // 10%\r\n\tuint256 constant WITHDRAWAL_FEE = 10e16; // 10%\r\n\r\n\tuint256 constant VOTING_ROUND_INTERVAL = 1 days;\r\n\r\n\taddress public immutable override reserveToken;\r\n\r\n\tmapping (address => address) public override candidate;\r\n\r\n\tmapping (address => uint256) private votingRound;\r\n\tmapping (address => uint256[2]) private voting;\r\n\r\n\t/**\r\n\t * @dev Constructor for the gToken contract.\r\n\t * @param _name The ERC-20 token name.\r\n\t * @param _symbol The ERC-20 token symbol.\r\n\t * @param _decimals The ERC-20 token decimals.\r\n\t * @param _reserveToken The ERC-20 token address to be used as reserve\r\n\t *                      token (e.g. GRO for sktGRO).\r\n\t */\r\n\tconstructor (string memory _name, string memory _symbol, uint8 _decimals, address _reserveToken)\r\n\t\tERC20(_name, _symbol) public\r\n\t{\r\n\t\t_setupDecimals(_decimals);\r\n\t\treserveToken = _reserveToken;\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Allows for the beforehand calculation of shares to be\r\n\t *         received/minted upon depositing to the contract.\r\n\t * @param _cost The amount of reserve token being deposited.\r\n\t * @param _totalReserve The reserve balance as obtained by totalReserve().\r\n\t * @param _totalSupply The shares supply as obtained by totalSupply().\r\n\t * @param _depositFee The current deposit fee as obtained by depositFee().\r\n\t * @return _netShares The net amount of shares being received.\r\n\t * @return _feeShares The fee amount of shares being deducted.\r\n\t */\r\n\tfunction calcDepositSharesFromCost(uint256 _cost, uint256 _totalReserve, uint256 _totalSupply, uint256 _depositFee) public pure override returns (uint256 _netShares, uint256 _feeShares)\r\n\t{\r\n\t\treturn GFormulae._calcDepositSharesFromCost(_cost, _totalReserve, _totalSupply, _depositFee);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Allows for the beforehand calculation of the amount of\r\n\t *         reserve token to be deposited in order to receive the desired\r\n\t *         amount of shares.\r\n\t * @param _netShares The amount of this gToken shares to receive.\r\n\t * @param _totalReserve The reserve balance as obtained by totalReserve().\r\n\t * @param _totalSupply The shares supply as obtained by totalSupply().\r\n\t * @param _depositFee The current deposit fee as obtained by depositFee().\r\n\t * @return _cost The cost, in the reserve token, to be paid.\r\n\t * @return _feeShares The fee amount of shares being deducted.\r\n\t */\r\n\tfunction calcDepositCostFromShares(uint256 _netShares, uint256 _totalReserve, uint256 _totalSupply, uint256 _depositFee) public pure override returns (uint256 _cost, uint256 _feeShares)\r\n\t{\r\n\t\treturn GFormulae._calcDepositCostFromShares(_netShares, _totalReserve, _totalSupply, _depositFee);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Allows for the beforehand calculation of shares to be\r\n\t *         given/burned upon withdrawing from the contract.\r\n\t * @param _cost The amount of reserve token being withdrawn.\r\n\t * @param _totalReserve The reserve balance as obtained by totalReserve()\r\n\t * @param _totalSupply The shares supply as obtained by totalSupply()\r\n\t * @param _withdrawalFee The current withdrawal fee as obtained by withdrawalFee()\r\n\t * @return _grossShares The total amount of shares being deducted,\r\n\t *                      including fees.\r\n\t * @return _feeShares The fee amount of shares being deducted.\r\n\t */\r\n\tfunction calcWithdrawalSharesFromCost(uint256 _cost, uint256 _totalReserve, uint256 _totalSupply, uint256 _withdrawalFee) public pure override returns (uint256 _grossShares, uint256 _feeShares)\r\n\t{\r\n\t\treturn GFormulae._calcWithdrawalSharesFromCost(_cost, _totalReserve, _totalSupply, _withdrawalFee);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Allows for the beforehand calculation of the amount of\r\n\t *         reserve token to be withdrawn given the desired amount of\r\n\t *         shares.\r\n\t * @param _grossShares The amount of this gToken shares to provide.\r\n\t * @param _totalReserve The reserve balance as obtained by totalReserve().\r\n\t * @param _totalSupply The shares supply as obtained by totalSupply().\r\n\t * @param _withdrawalFee The current withdrawal fee as obtained by withdrawalFee().\r\n\t * @return _cost The cost, in the reserve token, to be received.\r\n\t * @return _feeShares The fee amount of shares being deducted.\r\n\t */\r\n\tfunction calcWithdrawalCostFromShares(uint256 _grossShares, uint256 _totalReserve, uint256 _totalSupply, uint256 _withdrawalFee) public pure override returns (uint256 _cost, uint256 _feeShares)\r\n\t{\r\n\t\treturn GFormulae._calcWithdrawalCostFromShares(_grossShares, _totalReserve, _totalSupply, _withdrawalFee);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Provides the amount of reserve tokens currently being help by\r\n\t *         this contract.\r\n\t * @return _totalReserve The amount of the reserve token corresponding\r\n\t *                       to this contract's balance.\r\n\t */\r\n\tfunction totalReserve() public view virtual override returns (uint256 _totalReserve)\r\n\t{\r\n\t\treturn G.getBalance(reserveToken);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Provides the current minting/deposit fee. This fee is\r\n\t *         applied to the amount of this gToken shares being created\r\n\t *         upon deposit. The fee defaults to 10%.\r\n\t * @return _depositFee A percent value that accounts for the percentage\r\n\t *                     of shares being minted at each deposit that be\r\n\t *                     collected as fee.\r\n\t */\r\n\tfunction depositFee() public view override returns (uint256 _depositFee) {\r\n\t\treturn DEPOSIT_FEE;\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Provides the current burning/withdrawal fee. This fee is\r\n\t *         applied to the amount of this gToken shares being redeemed\r\n\t *         upon withdrawal. The fee defaults to 10%.\r\n\t * @return _withdrawalFee A percent value that accounts for the\r\n\t *                        percentage of shares being burned at each\r\n\t *                        withdrawal that be collected as fee.\r\n\t */\r\n\tfunction withdrawalFee() public view override returns (uint256 _withdrawalFee) {\r\n\t\treturn WITHDRAWAL_FEE;\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Provides the number of votes a given candidate has at the end\r\n\t *         of the previous voting interval. The interval is 24 hours\r\n\t *         and resets at 12AM UTC. See _transferVotes().\r\n\t * @param _candidate The candidate for which we want to know the number\r\n\t *                   of delegated votes.\r\n\t * @return _votes The candidate number of votes. It is the sum of the\r\n\t *                balances of the voters that have him as cadidate at\r\n\t *                the end of the previous voting interval.\r\n\t */\r\n\tfunction votes(address _candidate) public view override returns (uint256 _votes)\r\n\t{\r\n\t\tuint256 _votingRound = block.timestamp.div(VOTING_ROUND_INTERVAL);\r\n\t\t// if the candidate balance was last updated the current round\r\n\t\t// uses the backup instead (position 1), otherwise uses the most\r\n\t\t// up-to-date balance (position 0)\r\n\t\treturn voting[_candidate][votingRound[_candidate] < _votingRound ? 0 : 1];\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Performs the minting of gToken shares upon the deposit of the\r\n\t *         reserve token. The actual number of shares being minted can\r\n\t *         be calculated using the calcDepositSharesFromCost function.\r\n\t *         In every deposit, 10% of the shares is retained in terms of\r\n\t *         deposit fee. The fee amount and half of its equivalent\r\n\t *         reserve amount are immediately burned. The funds will be\r\n\t *         pulled in by this contract, therefore they must be previously\r\n\t *         approved.\r\n\t * @param _cost The amount of reserve token being deposited in the\r\n\t *              operation.\r\n\t */\r\n\tfunction deposit(uint256 _cost) public override nonReentrant\r\n\t{\r\n\t\taddress _from = msg.sender;\r\n\t\trequire(_cost > 0, \"cost must be greater than 0\");\r\n\t\t(uint256 _netShares, uint256 _feeShares) = GFormulae._calcDepositSharesFromCost(_cost, totalReserve(), totalSupply(), depositFee());\r\n\t\trequire(_netShares > 0, \"shares must be greater than 0\");\r\n\t\tG.pullFunds(reserveToken, _from, _cost);\r\n\t\t_mint(_from, _netShares);\r\n\t\t_burnReserveFromShares(_feeShares.div(2));\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Performs the burning of gToken shares upon the withdrawal of\r\n\t *         the reserve token. The actual amount of the reserve token to\r\n\t *         be received can be calculated using the\r\n\t *         calcWithdrawalCostFromShares function. In every withdrawal,\r\n\t *         10% of the shares is retained in terms of withdrawal fee.\r\n\t *         The fee amount and half of its equivalent reserve amount are\r\n\t *         immediately burned.\r\n\t * @param _grossShares The gross amount of this gToken shares being\r\n\t *                     redeemed in the operation.\r\n\t */\r\n\tfunction withdraw(uint256 _grossShares) public override nonReentrant\r\n\t{\r\n\t\taddress _from = msg.sender;\r\n\t\trequire(_grossShares > 0, \"shares must be greater than 0\");\r\n\t\t(uint256 _cost, uint256 _feeShares) = GFormulae._calcWithdrawalCostFromShares(_grossShares, totalReserve(), totalSupply(), withdrawalFee());\r\n\t\trequire(_cost > 0, \"cost must be greater than 0\");\r\n\t\t_cost = G.min(_cost, G.getBalance(reserveToken));\r\n\t\tG.pushFunds(reserveToken, _from, _cost);\r\n\t\t_burn(_from, _grossShares);\r\n\t\t_burnReserveFromShares(_feeShares.div(2));\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Changes the voter's choice for candidate and vote delegation.\r\n\t *         It is only going to be reflected in the voting by the next\r\n\t *         interval. The interval is 24 hours and resets at 12AM UTC.\r\n\t *         This function will emit a ChangeCandidate event.\r\n\t * @param _newCandidate The new candidate chosen.\r\n\t */\r\n\tfunction setCandidate(address _newCandidate) public override nonReentrant\r\n\t{\r\n\t\taddress _voter = msg.sender;\r\n\t\tuint256 _votes = balanceOf(_voter);\r\n\t\taddress _oldCandidate = candidate[_voter];\r\n\t\tcandidate[_voter] = _newCandidate;\r\n\t\t_transferVotes(_oldCandidate, _newCandidate, _votes);\r\n\t\temit ChangeCandidate(_voter, _oldCandidate, _newCandidate);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Burns a given amount of shares worth of the reserve token.\r\n\t *      See burnReserve().\r\n\t * @param _grossShares The amount of shares for which the equivalent,\r\n\t *                     in the reserve token, will be burned.\r\n\t */\r\n\tfunction _burnReserveFromShares(uint256 _grossShares) internal virtual\r\n\t{\r\n\t\t// we use the withdrawal formula to calculated how much is burned (withdrawn) from the contract\r\n\t\t// since the fee is 0 using the deposit formula would yield the same amount\r\n\t\t(uint256 _cost,) = GFormulae._calcWithdrawalCostFromShares(_grossShares, totalReserve(), totalSupply(), 0);\r\n\t\t_cost = G.min(_cost, G.getBalance(reserveToken));\r\n\t\t_burnReserve(_cost);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Burns the given amount of the reserve token. The default behavior\r\n\t *      of the function for general ERC-20 is to send the funds to\r\n\t *      address(0), but that can be overriden by a subcontract.\r\n\t * @param _reserveAmount The amount of the reserve token being burned.\r\n\t */\r\n\tfunction _burnReserve(uint256 _reserveAmount) internal virtual\r\n\t{\r\n\t\tG.pushFunds(reserveToken, address(0), _reserveAmount);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev This hook is called whenever tokens are minted, burned and\r\n\t *      transferred. This contract forbids token transfers by design.\r\n\t *      Token minting and burning will be reflected in the additional\r\n\t *      votes being credited or debited to the chosen candidate.\r\n\t *      See _transferVotes().\r\n\t * @param _from The provider of funds. Address 0 for minting.\r\n\t * @param _to The receiver of funds. Address 0 for burning.\r\n\t * @param _amount The amount being transfered.\r\n\t */\r\n\tfunction _beforeTokenTransfer(address _from, address _to, uint256 _amount) internal override\r\n\t{\r\n\t\trequire(_from == address(0) || _to == address(0), \"transfer prohibited\");\r\n\t\taddress _oldCandidate = candidate[_from];\r\n\t\taddress _newCandidate = candidate[_to];\r\n\t\tuint256 _votes = _amount;\r\n\t\t_transferVotes(_oldCandidate, _newCandidate, _votes);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Implements the vote transfer logic. It will deduct the votes\r\n\t *      from one candidate and credit it to another candidate. If\r\n\t *      either of candidates is the 0 address, the the voter is either\r\n\t *      setting its initial candidate or abstaining himself from voting.\r\n\t *      The change is only reflected after the voting interval resets.\r\n\t *      We use a 2 element array to keep track of votes. The amount on\r\n\t *      position 0 is always the current vote count for the candidate.\r\n\t *      The amount on position 1 is a backup that reflect the vote count\r\n\t *      prior to the current round only if it has been updated for the\r\n\t *      current round. We also record the last voting round where the\r\n\t *      candidate balance was updated. If the last round is the current\r\n\t *      then we use the backup value on position 1, otherwise we use\r\n\t *      the most up to date value on position 0. This function will\r\n\t *      emit a ChangeVotes event upon candidate vote balance change.\r\n\t *      See _updateVotes().\r\n\t * @param _oldCandidate The candidate to deduct votes from.\r\n\t * @param _newCandidate The candidate to credit voter for.\r\n\t * @param _votes the number of votes being transfered.\r\n\t */\r\n\tfunction _transferVotes(address _oldCandidate, address _newCandidate, uint256 _votes) internal\r\n\t{\r\n\t\tif (_votes == 0) return;\r\n\t\tif (_oldCandidate == _newCandidate) return;\r\n\t\tif (_oldCandidate != address(0)) {\r\n\t\t\t// position 0 always has the most up-to-date balance\r\n\t\t\tuint256 _oldVotes = voting[_oldCandidate][0];\r\n\t\t\tuint256 _newVotes = _oldVotes.sub(_votes);\r\n\t\t\t// updates position 0 backing up the previous amount\r\n\t\t\t_updateVotes(_oldCandidate, _newVotes);\r\n\t\t\temit ChangeVotes(_oldCandidate, _oldVotes, _newVotes);\r\n\t\t}\r\n\t\tif (_newCandidate != address(0)) {\r\n\t\t\t// position 0 always has the most up-to-date balance\r\n\t\t\tuint256 _oldVotes = voting[_newCandidate][0];\r\n\t\t\tuint256 _newVotes = _oldVotes.add(_votes);\r\n\t\t\t// updates position 0 backing up the previous amount\r\n\t\t\t_updateVotes(_newCandidate, _newVotes);\r\n\t\t\temit ChangeVotes(_newCandidate, _oldVotes, _newVotes);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Updates the candidate's current vote balance (position 0) and\r\n\t *      backs up the vote balance for the previous interval (position 1).\r\n\t *      The routine makes sure we do not overwrite and corrupt the\r\n\t *      backup if multiple vote updates happen within a single roung.\r\n\t *      See _transferVotes().\r\n\t * @param _candidate The candidate for which we are updating the votes.\r\n\t * @param _votes The candidate's new vote balance.\r\n\t */\r\n\tfunction _updateVotes(address _candidate, uint256 _votes) internal\r\n\t{\r\n\t\tuint256 _votingRound = block.timestamp.div(VOTING_ROUND_INTERVAL);\r\n\t\t// if the candidates voting round is not the current it means\r\n\t\t// we are updating the voting balance for the first time in\r\n\t\t// the current round, that is the only time we want to make a\r\n\t\t// backup of the vote balance for the previous roung\r\n\t\tif (votingRound[_candidate] < _votingRound) {\r\n\t\t\tvotingRound[_candidate] = _votingRound;\r\n\t\t\t// position 1 is the backup if there are updates in\r\n\t\t\t// the current round\r\n\t\t\tvoting[_candidate][1] = voting[_candidate][0];\r\n\t\t}\r\n\t\t// position 0 always hold the up-to-date vote balance\r\n\t\tvoting[_candidate][0] = _votes;\r\n\t}\r\n}\r\n\r\n// File: contracts/GTokens.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n/**\r\n * @notice Definition of stkGRO. As a gToken Type 3, it uses GRO as reserve and\r\n * burns both reserve and supply with each operation.\r\n */\r\ncontract stkGRO is GTokenType3\r\n{\r\n\tconstructor ()\r\n\t\tGTokenType3(\"staked GRO\", \"stkGRO\", 18, $.GRO) public\r\n\t{\r\n\t}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount2\",\"type\":\"uint256\"}],\"name\":\"max\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount2\",\"type\":\"uint256\"}],\"name\":\"min\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"G","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://00c1d41df382684ee329170aa102c6d2a796efb0c13a6d0dda6d9ee1f961a576"}]}