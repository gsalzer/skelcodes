{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.17;\r\n\r\ncontract ERC20 {\r\n\r\n\r\n   \t   function totalSupply() public view returns (uint256);\r\n       function balanceOf(address tokenOwner) public view returns (uint256 balance);\r\n       function allowance(address tokenOwner, address spender) public view returns (uint256 remaining);\r\n\r\n       function transfer(address to, uint256 tokens) public returns (bool success);\r\n       \r\n       function approve(address spender, uint256 tokens) public returns (bool success);\r\n       function transferFrom(address from, address to, uint256 tokens) public returns (bool success);\r\n}\r\n\r\n\r\n\r\ncontract Permissions {\r\n\r\n  \r\n  mapping (address=>bool) public permits;\r\n\r\n  event AddPermit(address _addr);\r\n  event RemovePermit(address _addr);\r\n  event ChangeAdmin(address indexed _newAdmin,address indexed _oldAdmin);\r\n  \r\n  address public admin;\r\n  bytes32 public adminChangeKey;\r\n  \r\n  \r\n  function verify(bytes32 root,bytes32 leaf,bytes32[] memory proof) public pure returns (bool)\r\n  {\r\n      bytes32 computedHash = leaf;\r\n\r\n      for (uint256 i = 0; i < proof.length; i++) {\r\n        bytes32 proofElement = proof[i];\r\n\r\n        if (computedHash < proofElement) {\r\n        // Hash(current computed hash + current element of the proof)\r\n        computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\r\n        } else {\r\n        // Hash(current element of the proof + current computed hash)\r\n        computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\r\n       }\r\n      }\r\n\r\n     // Check if the computed hash (root) is equal to the provided root\r\n      return computedHash == root;\r\n   }    \r\n  function changeAdmin(address _newAdmin,bytes32 _keyData,bytes32[] memory merkleProof,bytes32 _newRootKey) public onlyAdmin {\r\n         bytes32 leaf = keccak256(abi.encodePacked(msg.sender,'LoanKYC',_keyData));\r\n         require(verify(adminChangeKey, leaf,merkleProof), 'Invalid proof.');\r\n         \r\n         admin = _newAdmin;\r\n         adminChangeKey = _newRootKey;\r\n         \r\n         emit ChangeAdmin(_newAdmin,msg.sender);      \r\n  }\r\n  \r\n  constructor() public {\r\n    permits[msg.sender] = true;\r\n    admin = msg.sender;\r\n    adminChangeKey = 0xc07b01d617f249e77fe6f0df68daa292fe6ec653a9234d277713df99c0bb8ebf;\r\n  }\r\n  \r\n  modifier onlyAdmin(){\r\n      require(msg.sender == admin);\r\n      _;\r\n  }\r\n\r\n  modifier onlyPermits(){\r\n    require(permits[msg.sender] == true);\r\n    _;\r\n  }\r\n\r\n  function isPermit(address _addr) public view returns(bool){\r\n    return permits[_addr];\r\n  }\r\n  \r\n  function addPermit(address _addr) public onlyAdmin{\r\n    if(permits[_addr] == false){\r\n        permits[_addr] = true;\r\n        emit AddPermit(_addr);\r\n    }\r\n  }\r\n  \r\n  function removePermit(address _addr) public onlyAdmin{\r\n    permits[_addr] = false;\r\n    emit RemovePermit(_addr);\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\ncontract CheckS1Contract{\r\n  function permits(address _addr) public view returns(bool);\r\n  function isOwner(address _owner) public view returns(bool);\r\n  \r\n  function s1Tools() public view returns(address);\r\n\r\n  function ratToken() public view returns(address);\r\n  function catToken() public view returns(address);\r\n    function loanKYC() public view returns(address);\r\n    function contractDB() public view returns(address);\r\n    function docDB() public view returns(address);\r\n    function guaDB() public view returns(address);\r\n    function s1Global() public view returns(address);\r\n    function sellSZO() public view returns(address);\r\n\r\n  //only on contractDB\r\n}\r\n\r\ncontract s1contract{\r\n    function version() public view returns(uint256);\r\n}\r\n\r\ncontract ShuttleOneGlobal is Permissions{\r\n\r\n    function toUPPER(string memory source) internal pure returns (string memory result) {\r\n        bytes memory bufSrc = bytes(source);\r\n        if (bufSrc.length == 0) {\r\n            return \"\";\r\n        }\r\n\r\n        for(uint256 i=0;i<bufSrc.length;i++){\r\n            uint8 test = uint8(bufSrc[i]);\r\n            if(test>=97 && test<= 122)\r\n                bufSrc[i] = byte(test - 32);\r\n        }\r\n        \r\n        return string(bufSrc);\r\n\r\n    }\r\n\r\n\r\n    uint256 public version  = 10; // Fix not deploy yet\r\n    uint256 public releaseDate;\r\n\r\n    mapping(string=>uint256)  contractVersion;\r\n    mapping (string=>address) contractAddrs;\r\n    mapping (string=>uint256) contractIdx;\r\n    address[] addrDB;\r\n    \r\n    event AddAddress(string indexed _label,address indexed _addr);\r\n    event RenewAddress(string indexed _label,address indexed _addr);\r\n\r\n    constructor() public{\r\n\r\n       releaseDate = now;\r\n   \r\n    setAddressAndVersion(\"cattoken\",0xD216356c91b88609C82Bd988d4425bb7EDf1Beb4,6);\r\n    setAddressAndVersion(\"rattoken\",0x8bE308B0A4CB6753783E078cF12E4A236c11a85A,19);\r\n    setAddressAndVersion(\"loanKYC\",0x9A6c5df17580331c881265Ead42D7fEAA29a7EFc,3);\r\n    setAddressAndVersion(\"docdb\",0x640e24719710bc5994918a81F1650a3bAB7ec1C5,5);\r\n    setAddressAndVersion(\"contractdb\",0xC0068F45b7Bc4d877b3637eFffDbe4A0e9c26084,6);\r\n    setAddressAndVersion(\"guarantordb\",0x7C38c3Dee7dA4D1d11391Fa48E522f69AFa06901,3);\r\n    setAddressAndVersion(\"loanprocess\",0x1997CC3ba65E3D0f22815f24763084db93Eb36F0,11);\r\n    setAddressAndVersion(\"s1tools\",0x15f07130EF316645D4c72f70C915ab155C9dCEEf,2);\r\n    setAddressAndVersion(\"poolsdai\",0xE29659A35260B87264eBf1155dD03B7DE17d9B26,9);\r\n    setAddressAndVersion(\"poolsusdt\",0x1C69D1829A5970d85bCe8dD4A4f7f568DB492c81,9);\r\n    setAddressAndVersion(\"poolsusdc\",0x93347FFA6020a3904790220E84f38594F35bac7D,10);\r\n    setAddressAndVersion(\"szdai\",0xd80BcbbEeFE8225224Eeb71f4EDb99e64cCC9c99,3);\r\n    setAddressAndVersion(\"szusdt\",0xA298508BaBF033f69B33f4d44b5241258344A91e,4);\r\n    setAddressAndVersion(\"szusdc\",0x55b123B169400Da201Dd69814BAe2B8C2660c2Bf,3);\r\n    setAddressAndVersion(\"szo\",0x6086b52Cab4522b4B0E8aF9C3b2c5b8994C36ba6,10);\r\n    setAddressAndVersion(\"szosell\",0x0D80089B5E171eaC7b0CdC7afe6bC353B71832d1,5);\r\n    setAddressAndVersion(\"sztoken\",0xFf56Dbdc4063dB5EBE8395D27958661aAfe83A08,1);\r\n        \r\n    }\r\n    \r\n    function setAddressAndVersion(string memory _label,address _addr,uint256 _version) public onlyAdmin{\r\n        _label = toUPPER(_label);\r\n        uint256 idx;\r\n        if(contractIdx[_label] > 0){\r\n\r\n          idx = contractIdx[_label] - 1;\r\n          addrDB[idx] = _addr;\r\n          contractAddrs[_label] = _addr;\r\n          contractVersion[_label] = _version;\r\n          emit RenewAddress(_label,_addr);\r\n        }\r\n        else\r\n        {\r\n          idx = addrDB.push(_addr);\r\n          contractAddrs[_label] = _addr;\r\n          contractVersion[_label] = _version;\r\n          contractIdx[_label] = idx;\r\n          emit AddAddress(_label,_addr);\r\n        }\r\n    }\r\n\r\n    function getAddressLabel(string memory _label) public view returns(address){\r\n      _label = toUPPER(_label);\r\n       return contractAddrs[_label];\r\n    }\r\n\r\n    function getVersionLabel(string memory _label) public view returns(uint256){\r\n      _label = toUPPER(_label);\r\n       return contractVersion[_label];\r\n    }\r\n    \r\n    function getVersionContract(string memory _label) public view returns(uint256){\r\n      _label = toUPPER(_label);\r\n      s1contract s1 = s1contract(contractAddrs[_label]);\r\n      return s1.version();\r\n    }\r\n\r\n    function getAllMaxAddr() public view returns(uint256){\r\n        return addrDB.length;\r\n    }\r\n\r\n    function getAddress(uint256 idx) public view  returns(address){\r\n      return addrDB[idx];\r\n    }\r\n\r\n\r\n    function checkS1Global() internal view returns(string memory,bool){\r\n\r\n    //====================================\r\n    if(getAddressLabel(\"cattoken\") == address(0)){\r\n      return (\"ERROR S1Global No CATToken\",false);\r\n    }\r\n\r\n    if(getVersionLabel(\"cattoken\") != getVersionContract(\"cattoken\")){\r\n      return (\"ERROR cattoken not UPDATE\",false);\r\n    }\r\n    //====================================\r\n\r\n    if(getAddressLabel(\"rattoken\") == address(0)){\r\n      return (\"ERROR S1Global No RATToken\",false);\r\n    }\r\n\r\n    if(getVersionLabel(\"rattoken\") != getVersionContract(\"rattoken\")){\r\n      return (\"ERROR rattoken not UPDATE\",false);\r\n    }\r\n    //====================================\r\n    if(getAddressLabel(\"loankyc\") == address(0)){\r\n      return (\"ERROR S1Global No loankyc contract\",false);\r\n    }\r\n\r\n    if(getVersionLabel(\"loankyc\") != getVersionContract(\"loankyc\")){\r\n      return (\"ERROR loankyc not UPDATE\",false);\r\n    }\r\n    //====================================\r\n    if(getAddressLabel(\"docdb\") == address(0)){\r\n      return (\"ERROR S1Global No docdb contract\",false);\r\n    }\r\n\r\n    if(getVersionLabel(\"docdb\") != getVersionContract(\"docdb\")){\r\n      return (\"ERROR docdb not UPDATE\",false);\r\n    }\r\n    //====================================\r\n\r\n    if(getAddressLabel(\"contractdb\") == address(0)){\r\n      return (\"ERROR S1Global No contractdb contract\",false);\r\n    }\r\n\r\n    if(getVersionLabel(\"contractdb\") != getVersionContract(\"contractdb\")){\r\n      return (\"ERROR contractdb not UPDATE\",false);\r\n    }\r\n    //====================================\r\n\r\n    if(getAddressLabel(\"guarantordb\") == address(0)){\r\n      return (\"ERROR S1Global No guarantordb contract\",false);\r\n    }\r\n\r\n    if(getVersionLabel(\"guarantordb\") != getVersionContract(\"guarantordb\")){\r\n      return (\"ERROR guarantordb not UPDATE\",false);\r\n    }\r\n    //====================================\r\n\r\n    if(getAddressLabel(\"loanprocess\") == address(0)){\r\n      return (\"ERROR S1Global No loanprocess contract\",false);\r\n    }\r\n\r\n    if(getVersionLabel(\"loanprocess\") != getVersionContract(\"loanprocess\")){\r\n      return (\"ERROR loanprocess not UPDATE\",false);\r\n    }\r\n    //====================================\r\n\r\n    if(getAddressLabel(\"s1tools\") == address(0)){\r\n      return (\"ERROR S1Global No s1tools contract\",false);\r\n    }\r\n    if(getVersionLabel(\"s1tools\") != getVersionContract(\"s1tools\")){\r\n      return (\"ERROR s1tools not UPDATE\",false);\r\n    }\r\n\r\n    //======================================\r\n    if(getAddressLabel(\"poolsdai\") == address(0)){\r\n      return (\"ERROR S1Global No poolsdai contract\",false);\r\n    }\r\n    if(getVersionLabel(\"poolsdai\") != getVersionContract(\"poolsdai\")){\r\n      return (\"ERROR poolsdai not UPDATE\",false);\r\n    }\r\n    \r\n    //======================================\r\n    if(getAddressLabel(\"poolsusdt\") == address(0)){\r\n      return (\"ERROR S1Global No poolsusdt contract\",false);\r\n    }\r\n    if(getVersionLabel(\"poolsusdt\") != getVersionContract(\"poolsusdt\")){\r\n      return (\"ERROR poolsusdt not UPDATE\",false);\r\n    }\r\n    \r\n        //======================================\r\n    if(getAddressLabel(\"poolsusdc\") == address(0)){\r\n      return (\"ERROR S1Global No poolsusdc contract\",false);\r\n    }\r\n    if(getVersionLabel(\"poolsusdc\") != getVersionContract(\"poolsusdc\")){\r\n      return (\"ERROR poolsusdc not UPDATE\",false);\r\n    }\r\n    \r\n    \r\n    //================================================\r\n    if(getAddressLabel(\"szdai\") == address(0)){\r\n      return (\"ERROR S1Global No szdai contract\",false);\r\n    }\r\n    if(getVersionLabel(\"szdai\") != getVersionContract(\"szdai\")){\r\n      return (\"ERROR szdai not UPDATE\",false);\r\n    }\r\n    \r\n    //================================================\r\n    if(getAddressLabel(\"szusdt\") == address(0)){\r\n      return (\"ERROR S1Global No szusdt contract\",false);\r\n    }\r\n    if(getVersionLabel(\"szusdt\") != getVersionContract(\"szusdt\")){\r\n      return (\"ERROR szusdt not UPDATE\",false);\r\n    }\r\n    \r\n    //================================================\r\n    if(getAddressLabel(\"szusdc\") == address(0)){\r\n      return (\"ERROR S1Global No szusdc contract\",false);\r\n    }\r\n    if(getVersionLabel(\"szusdc\") != getVersionContract(\"szusdc\")){\r\n      return (\"ERROR szusdc not UPDATE\",false);\r\n    }\r\n    \r\n    //================================================\r\n    return (\"NO ERROR\",true);\r\n\r\n  }\r\n\r\nfunction checkDocDB() internal view returns(string memory,bool){\r\n\r\n    CheckS1Contract  docDB = CheckS1Contract(getAddressLabel(\"docdb\"));\r\n    if(docDB.s1Tools() != getAddressLabel(\"s1tools\")){\r\n      return (\"ERROR docdb s1tools not UPDATE\",false);\r\n    }\r\n\r\n    //==== check permit ====\r\n    address  _addr = getAddressLabel(\"loanprocess\");\r\n    if(docDB.permits(_addr) == false){\r\n      return (\"ERROR docdb not permit loanprocess\",false);\r\n    }\r\n    _addr = getAddressLabel(\"contractdb\");\r\n    if(docDB.permits(_addr) == false){\r\n      return (\"ERROR docdb not permit contractDB\",false);\r\n    }\r\n\r\n    return (\"NO ERROR\",true);\r\n\r\n  }\r\n\r\n  function checkConDB() internal view returns(string memory,bool){\r\n    CheckS1Contract proc = CheckS1Contract(getAddressLabel(\"contractdb\"));\r\n\r\n    if(proc.docDB() != getAddressLabel(\"docdb\")){\r\n      return (\"ERROR contractDB docdb address not correct\",false);\r\n    }\r\n\r\n    address  _addr = getAddressLabel(\"loanprocess\");\r\n    if(proc.permits(_addr) == false){\r\n      return (\"ERROR contractDB not permit loanprocess\",false);\r\n    }\r\n\r\n    _addr = getAddressLabel(\"cattoken\");\r\n    if(proc.permits(_addr) == false){\r\n      return (\"ERROR contractDB not permit cattoken\",false); // add version 5\r\n    }\r\n\r\n    return (\"NO ERROR\",true);\r\n  }\r\n\r\n  function checkGuarantorDB() internal view returns(string memory,bool){\r\n    CheckS1Contract proc = CheckS1Contract(getAddressLabel(\"guarantordb\"));\r\n\r\n    if(proc.catToken() != getAddressLabel(\"cattoken\")){\r\n      return (\"ERROR guarantorDB CatToken address not correct\",false);\r\n    }\r\n\r\n\r\n\r\n    address  _addr = getAddressLabel(\"loanprocess\");\r\n    if(proc.permits(_addr) == false){\r\n      return (\"ERROR guarantorDB not permit loanprocess\",false);\r\n    }\r\n\r\n    return (\"NO ERROR\",true);\r\n\r\n  }\r\n\r\n  function checkCattoken() internal view returns(string memory,bool){\r\n\r\n    CheckS1Contract proc = CheckS1Contract(getAddressLabel(\"cattoken\"));\r\n\r\n\r\n    address  _addr = getAddressLabel(\"loanprocess\");\r\n    if(proc.permits(_addr) == false){\r\n      return (\"ERROR catToken not permit loanprocess\",false);\r\n    }\r\n\r\n    _addr = getAddressLabel(\"guarantordb\");\r\n    if(proc.permits(_addr) == false){\r\n      return (\"ERROR catToken not permit guarantordb\",false);\r\n    }\r\n    \r\n    _addr = getAddressLabel(\"rattoken\");\r\n    if(proc.ratToken() != _addr){\r\n        return (\"ERROR catToken no RatToken Address\",false);\r\n    }\r\n    \r\n    _addr = getAddressLabel(\"poolsdai\");\r\n    if(proc.permits(_addr) == false){\r\n        return (\"ERROR catToken no pools_dai permit\",false);\r\n    }\r\n    \r\n    _addr = getAddressLabel(\"poolsusdt\");\r\n    if(proc.permits(_addr) == false){\r\n        return (\"ERROR catToken no pools_usdt permit\",false);\r\n    }\r\n    \r\n    _addr = getAddressLabel(\"poolsusdc\");\r\n    if(proc.permits(_addr) == false){\r\n        return (\"ERROR catToken no pools_usdc permit\",false);\r\n    }\r\n    \r\n    return (\"NO ERROR\",true);\r\n  }\r\n\r\n  function checkRattoken()internal view returns(string memory,bool){\r\n\r\n      \r\n    CheckS1Contract proc = CheckS1Contract(getAddressLabel(\"rattoken\"));\r\n\r\n    address  _addr = getAddressLabel(\"loanprocess\");\r\n    if(proc.permits(_addr) == false){\r\n      return (\"ERROR ratToken not permit loanprocess\",false);\r\n    }\r\n    \r\n    _addr = getAddressLabel(\"cattoken\"); // FIX for version 5\r\n    if(proc.permits(_addr) == false){\r\n      return (\"ERROR ratToken not permit cattoken\",false);\r\n    }\r\n    \r\n    return (\"NO ERROR\",true);\r\n  }\r\n\r\n  function checkLoanKyc() internal view returns(string memory,bool){\r\n\r\n    CheckS1Contract proc = CheckS1Contract(getAddressLabel(\"loankyc\"));\r\n\r\n    address  _addr = getAddressLabel(\"loanprocess\");\r\n    if(proc.permits(_addr) == false){\r\n      return (\"ERROR loankyc not permit loanprocess\",false);\r\n    }\r\n\r\n    return (\"NO ERROR\",true);\r\n  }\r\n\r\n  function checkLoanProcess() internal view returns(string memory,bool){\r\n    if(getAddressLabel(\"loanprocess\") == address(0))\r\n      {\r\n          return (\"ERROR loanprocess no address set\",false);\r\n      }\r\n    CheckS1Contract proc = CheckS1Contract(getAddressLabel(\"loanprocess\"));\r\n    if(proc.ratToken() != getAddressLabel(\"rattoken\")){\r\n      return (\"ERROR loanprocess rattoken address not correct\",false);\r\n    }\r\n\r\n    if(proc.catToken() != getAddressLabel(\"cattoken\")){\r\n      return (\"ERROR loanprocess cattoken address not correct\",false);\r\n    }\r\n\r\n    if(proc.loanKYC() != getAddressLabel(\"loankyc\")){\r\n      return (\"ERROR loanprocess loankyc address not correct\",false);\r\n    }\r\n\r\n    if(proc.contractDB() != getAddressLabel(\"contractdb\")){\r\n      return (\"ERROR loanprocess contractdb address not correct\",false);\r\n    }\r\n\r\n    if(proc.docDB() != getAddressLabel(\"docdb\")){\r\n      return (\"ERROR loanprocess docdb address not correct\",false);\r\n    }\r\n\r\n    if(proc.guaDB() != getAddressLabel(\"guarantordb\")){\r\n      return (\"ERROR loanprocess guarantordb address not correct\",false);\r\n    }\r\n\r\n    if(proc.s1Global() != address(this)){\r\n        return (\"ERROR loanprocess s1global address not correct\",false);\r\n    }\r\n    \r\n    if(proc.sellSZO() != getAddressLabel(\"szosell\")){\r\n        return (\"ERROR loanprocess szosell address not correct\",false);\r\n    }\r\n\r\n    return (\"NO ERROR\",true);\r\n  }\r\n  \r\n  \tfunction checkPools() internal view returns(string memory,bool){\r\n\t\tCheckS1Contract proc = CheckS1Contract(getAddressLabel(\"poolsdai\"));\r\n\r\n\t\taddress  _addr = getAddressLabel(\"loanprocess\");\r\n\t\tif(proc.permits(_addr) == false){\r\n\t\t\treturn (\"ERROR Pools DAI not permit main process\",false);\r\n\t\t}\r\n\t\t\r\n\t\tif(proc.catToken() != getAddressLabel(\"catToken\")){\r\n\t\t    return (\"ERROR Pools DAI CAT Token Not Correct\",false);\r\n\t\t}\r\n\t\t\r\n\t\tproc = CheckS1Contract(getAddressLabel(\"poolsusdt\"));\r\n\t\tif(proc.permits(_addr) == false){\r\n\t\t\treturn (\"ERROR Pools USDT not permit main process\",false);\r\n\t\t}\r\n\t\t\r\n\t\tif(proc.catToken() != getAddressLabel(\"catToken\")){\r\n\t\t    return (\"ERROR Pools USDT CAT Token Not Correct\",false);\r\n\t\t}\r\n\t\t\r\n\t\tproc = CheckS1Contract(getAddressLabel(\"poolsusdc\"));\r\n\r\n\t\tif(proc.permits(_addr) == false){\r\n\t\t\treturn (\"ERROR Pools USDC not permit main process\",false);\r\n\t\t}\r\n\t\t\r\n\t\tif(proc.catToken() != getAddressLabel(\"catToken\")){\r\n\t\t    return (\"ERROR Pools USDC CAT Token Not Correct\",false);\r\n\t\t}\r\n\r\n\t\treturn (\"NO ERROR\",true);\r\n\t}\r\n\t\r\n\t\r\n\tfunction checkSZToken() internal view returns(string memory,bool){\r\n\t\tCheckS1Contract szDai = CheckS1Contract(getAddressLabel(\"szdai\"));\r\n        CheckS1Contract szUsdt = CheckS1Contract(getAddressLabel(\"szusdt\"));\r\n        CheckS1Contract szUsdc = CheckS1Contract(getAddressLabel(\"szusdc\"));\r\n\r\n\t\taddress  _addr = getAddressLabel(\"loanprocess\");\r\n\t\t\r\n\t\tif(szDai.isOwner(_addr) == false){\r\n\t\t\treturn (\"ERROR SZDAI not permit main process\",false);\r\n\t\t}\r\n\t\t\r\n\t\tif(szUsdt.isOwner(_addr) == false){\r\n\t\t\treturn (\"ERROR SZUSDT not permit main process\",false);\r\n\t\t}\r\n\t\t\r\n\t\tif(szUsdc.isOwner(_addr) == false){\r\n\t\t\treturn (\"ERROR SZUSDC not permit main process\",false);\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\t_addr = getAddressLabel(\"poolsdai\");\r\n\t\tif(szDai.isOwner(_addr) == false){\r\n\t\t\treturn (\"ERROR SZDAI not permit pools_dai\",false);\r\n\t\t}\r\n\r\n\t\t_addr = getAddressLabel(\"poolsusdt\");\r\n\t\tif(szUsdt.isOwner(_addr) == false){\r\n\t\t\treturn (\"ERROR SZUSDT not permit pools_usdt\",false);\r\n\t\t}\r\n\r\n\t\t_addr = getAddressLabel(\"poolsusdc\");\r\n\t\tif(szUsdc.isOwner(_addr) == false){\r\n\t\t\treturn (\"ERROR SZUSDC not permit pools_usdc\",false);\r\n\t\t}\r\n\r\n\t\t\r\n\t\t_addr = getAddressLabel(\"cattoken\");\r\n\t\tif(szDai.isOwner(_addr) == false){\r\n\t\t\treturn (\"ERROR SZDAI not permit cattoken\",false);\r\n\t\t}\r\n\r\n\t\tif(szUsdt.isOwner(_addr) == false){\r\n\t\t\treturn (\"ERROR SZUADT not permit cattoken\",false);\r\n\t\t}\r\n\t\tif(szUsdc.isOwner(_addr) == false){\r\n\t\t\treturn (\"ERROR SZUSDC not permit cattoken\",false);\r\n\t\t}\r\n\r\n\r\n         _addr = getAddressLabel(\"sztoken\");\r\n        if(szDai.isOwner(_addr) == false){\r\n\t\t\treturn (\"ERROR SZDAI not permit szusd\",false);\r\n\t\t}\r\n\r\n\t\tif(szUsdt.isOwner(_addr) == false){\r\n\t\t\treturn (\"ERROR SZUADT not permit szusd\",false);\r\n\t\t}\r\n\t\tif(szUsdc.isOwner(_addr) == false){\r\n\t\t\treturn (\"ERROR SZUSDC not permit szusd\",false);\r\n\t\t}\r\n\t\t\r\n\t\t_addr = getAddressLabel(\"szosell\");\r\n        if(szDai.isOwner(_addr) == false){\r\n\t\t\treturn (\"ERROR SZDAI not permit sellpool\",false);\r\n\t\t}\r\n\r\n\t\tif(szUsdt.isOwner(_addr) == false){\r\n\t\t\treturn (\"ERROR SZUADT not permit sellpool\",false);\r\n\t\t}\r\n\t\tif(szUsdc.isOwner(_addr) == false){\r\n\t\t\treturn (\"ERROR SZUSDC not permit sellpool\",false);\r\n\t\t}\r\n\t\t\r\n\t\tif(CheckS1Contract(getAddressLabel(\"szdai\")).isOwner(_addr) == false){\r\n\t\t    return (\"ERROR SZUSD not permit sellpool\",false);\r\n\t\t}\r\n    \r\n        \r\n\t\treturn (\"NO ERROR\",true);\r\n\t}\r\n\t\r\n\tfunction checkSellPool() internal view returns(string memory,bool){\r\n\t    CheckS1Contract szoToken = CheckS1Contract(getAddressLabel(\"szo\"));\r\n\t    address  _addr = getAddressLabel(\"szosell\");\r\n\t    \r\n\t    if(szoToken.isOwner(_addr) == false){\r\n\t        return (\"ERROR Sell Pools not owner\",false);\r\n\t    }\r\n\t    \r\n\t    szoToken = CheckS1Contract(getAddressLabel(\"szosell\"));\r\n\t    _addr = getAddressLabel(\"loanprocess\");\r\n\t    \r\n\t    if(szoToken.isOwner(_addr) == false){\r\n\t        return (\"ERROR Sell Pools not permit process\",false);\r\n\t    }\r\n\t    \r\n\t    \r\n\t    return (\"NO ERROR\",true);\r\n\t    \r\n\t}\r\n\r\n  function runAnalyticsContract01() public view returns(string memory error){\r\n    bool result;\r\n    string memory resultSTR;\r\n    (resultSTR,result) = checkS1Global();\r\n    if(result == false) return resultSTR;\r\n\r\n    (resultSTR,result) = checkDocDB();\r\n    if(result == false) return resultSTR;\r\n\r\n    (resultSTR,result) = checkConDB();\r\n    if(result == false) return resultSTR;\r\n\r\n    (resultSTR,result) = checkGuarantorDB();\r\n    if(result == false) return resultSTR;\r\n\r\n\r\n    (resultSTR,result) = checkCattoken();\r\n    if(result == false) return resultSTR;\r\n\r\n    (resultSTR,result) = checkRattoken();\r\n    if(result == false) return resultSTR;\r\n\r\n    (resultSTR,result) = checkLoanKyc();\r\n    if(result == false) return resultSTR;\r\n\r\n    (resultSTR,result) = checkLoanProcess();\r\n    if(result == false) return resultSTR;\r\n\r\n    (resultSTR,result) = checkPools();\r\n    if(result == false) return resultSTR;\r\n\r\n    (resultSTR,result) = checkSZToken();\r\n    if(result == false) return resultSTR;\r\n    \r\n    (resultSTR,result) = checkSellPool();\r\n    if(result == false) return resultSTR;\r\n    \r\n    return \"OK\";\r\n\r\n  }\r\n  \r\n\r\n    \r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"_label\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"AddAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"AddPermit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oldAdmin\",\"type\":\"address\"}],\"name\":\"ChangeAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"RemovePermit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"_label\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"RenewAddress\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addPermit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminChangeKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_keyData\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"_newRootKey\",\"type\":\"bytes32\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"getAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_label\",\"type\":\"string\"}],\"name\":\"getAddressLabel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllMaxAddr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_label\",\"type\":\"string\"}],\"name\":\"getVersionContract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_label\",\"type\":\"string\"}],\"name\":\"getVersionLabel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isPermit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"permits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"releaseDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"removePermit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"runAnalyticsContract01\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_label\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_version\",\"type\":\"uint256\"}],\"name\":\"setAddressAndVersion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ShuttleOneGlobal","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://a42941a2c26e05ab644f19d17e96b3050def167474335fa8bc94586f965b3a70"}]}