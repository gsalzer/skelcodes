{"status":"1","message":"OK","result":[{"SourceCode":"/*\n   ____            __   __        __   _\n  / __/__ __ ___  / /_ / /  ___  / /_ (_)__ __\n _\\ \\ / // // _ \\/ __// _ \\/ -_)/ __// / \\ \\ /\n/___/ \\_, //_//_/\\__//_//_/\\__/ \\__//_/ /_\\_\\\n     /___/\n\n* Synthetix: CollateralErc20.sol\n*\n* Latest source (may be newer): https://github.com/Synthetixio/synthetix/blob/master/contracts/CollateralErc20.sol\n* Docs: https://docs.synthetix.io/contracts/CollateralErc20\n*\n* Contract Dependencies: \n*\t- Collateral\n*\t- IAddressResolver\n*\t- ICollateralErc20\n*\t- ICollateralLoan\n*\t- MixinResolver\n*\t- MixinSystemSettings\n*\t- Owned\n*\t- State\n* Libraries: \n*\t- SafeDecimalMath\n*\t- SafeMath\n*\n* MIT License\n* ===========\n*\n* Copyright (c) 2021 Synthetix\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n*/\n\n\n\npragma solidity ^0.5.16;\n\n\n// https://docs.synthetix.io/contracts/source/contracts/owned\ncontract Owned {\n    address public owner;\n    address public nominatedOwner;\n\n    constructor(address _owner) public {\n        require(_owner != address(0), \"Owner address cannot be 0\");\n        owner = _owner;\n        emit OwnerChanged(address(0), _owner);\n    }\n\n    function nominateNewOwner(address _owner) external onlyOwner {\n        nominatedOwner = _owner;\n        emit OwnerNominated(_owner);\n    }\n\n    function acceptOwnership() external {\n        require(msg.sender == nominatedOwner, \"You must be nominated before you can accept ownership\");\n        emit OwnerChanged(owner, nominatedOwner);\n        owner = nominatedOwner;\n        nominatedOwner = address(0);\n    }\n\n    modifier onlyOwner {\n        _onlyOwner();\n        _;\n    }\n\n    function _onlyOwner() private view {\n        require(msg.sender == owner, \"Only the contract owner may perform this action\");\n    }\n\n    event OwnerNominated(address newOwner);\n    event OwnerChanged(address oldOwner, address newOwner);\n}\n\n\n// https://docs.synthetix.io/contracts/source/interfaces/iaddressresolver\ninterface IAddressResolver {\n    function getAddress(bytes32 name) external view returns (address);\n\n    function getSynth(bytes32 key) external view returns (address);\n\n    function requireAndGetAddress(bytes32 name, string calldata reason) external view returns (address);\n}\n\n\n// https://docs.synthetix.io/contracts/source/interfaces/isynth\ninterface ISynth {\n    // Views\n    function currencyKey() external view returns (bytes32);\n\n    function transferableSynths(address account) external view returns (uint);\n\n    // Mutative functions\n    function transferAndSettle(address to, uint value) external returns (bool);\n\n    function transferFromAndSettle(\n        address from,\n        address to,\n        uint value\n    ) external returns (bool);\n\n    // Restricted: used internally to Synthetix\n    function burn(address account, uint amount) external;\n\n    function issue(address account, uint amount) external;\n}\n\n\n// https://docs.synthetix.io/contracts/source/interfaces/iissuer\ninterface IIssuer {\n    // Views\n    function anySynthOrSNXRateIsInvalid() external view returns (bool anyRateInvalid);\n\n    function availableCurrencyKeys() external view returns (bytes32[] memory);\n\n    function availableSynthCount() external view returns (uint);\n\n    function availableSynths(uint index) external view returns (ISynth);\n\n    function canBurnSynths(address account) external view returns (bool);\n\n    function collateral(address account) external view returns (uint);\n\n    function collateralisationRatio(address issuer) external view returns (uint);\n\n    function collateralisationRatioAndAnyRatesInvalid(address _issuer)\n        external\n        view\n        returns (uint cratio, bool anyRateIsInvalid);\n\n    function debtBalanceOf(address issuer, bytes32 currencyKey) external view returns (uint debtBalance);\n\n    function issuanceRatio() external view returns (uint);\n\n    function lastIssueEvent(address account) external view returns (uint);\n\n    function maxIssuableSynths(address issuer) external view returns (uint maxIssuable);\n\n    function minimumStakeTime() external view returns (uint);\n\n    function remainingIssuableSynths(address issuer)\n        external\n        view\n        returns (\n            uint maxIssuable,\n            uint alreadyIssued,\n            uint totalSystemDebt\n        );\n\n    function synths(bytes32 currencyKey) external view returns (ISynth);\n\n    function getSynths(bytes32[] calldata currencyKeys) external view returns (ISynth[] memory);\n\n    function synthsByAddress(address synthAddress) external view returns (bytes32);\n\n    function totalIssuedSynths(bytes32 currencyKey, bool excludeEtherCollateral) external view returns (uint);\n\n    function transferableSynthetixAndAnyRateIsInvalid(address account, uint balance)\n        external\n        view\n        returns (uint transferable, bool anyRateIsInvalid);\n\n    // Restricted: used internally to Synthetix\n    function issueSynths(address from, uint amount) external;\n\n    function issueSynthsOnBehalf(\n        address issueFor,\n        address from,\n        uint amount\n    ) external;\n\n    function issueMaxSynths(address from) external;\n\n    function issueMaxSynthsOnBehalf(address issueFor, address from) external;\n\n    function burnSynths(address from, uint amount) external;\n\n    function burnSynthsOnBehalf(\n        address burnForAddress,\n        address from,\n        uint amount\n    ) external;\n\n    function burnSynthsToTarget(address from) external;\n\n    function burnSynthsToTargetOnBehalf(address burnForAddress, address from) external;\n\n    function liquidateDelinquentAccount(\n        address account,\n        uint susdAmount,\n        address liquidator\n    ) external returns (uint totalRedeemed, uint amountToLiquidate);\n}\n\n\n// Inheritance\n\n\n// Internal references\n\n\n// https://docs.synthetix.io/contracts/source/contracts/addressresolver\ncontract AddressResolver is Owned, IAddressResolver {\n    mapping(bytes32 => address) public repository;\n\n    constructor(address _owner) public Owned(_owner) {}\n\n    /* ========== RESTRICTED FUNCTIONS ========== */\n\n    function importAddresses(bytes32[] calldata names, address[] calldata destinations) external onlyOwner {\n        require(names.length == destinations.length, \"Input lengths must match\");\n\n        for (uint i = 0; i < names.length; i++) {\n            bytes32 name = names[i];\n            address destination = destinations[i];\n            repository[name] = destination;\n            emit AddressImported(name, destination);\n        }\n    }\n\n    /* ========= PUBLIC FUNCTIONS ========== */\n\n    function rebuildCaches(MixinResolver[] calldata destinations) external {\n        for (uint i = 0; i < destinations.length; i++) {\n            destinations[i].rebuildCache();\n        }\n    }\n\n    /* ========== VIEWS ========== */\n\n    function areAddressesImported(bytes32[] calldata names, address[] calldata destinations) external view returns (bool) {\n        for (uint i = 0; i < names.length; i++) {\n            if (repository[names[i]] != destinations[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    function getAddress(bytes32 name) external view returns (address) {\n        return repository[name];\n    }\n\n    function requireAndGetAddress(bytes32 name, string calldata reason) external view returns (address) {\n        address _foundAddress = repository[name];\n        require(_foundAddress != address(0), reason);\n        return _foundAddress;\n    }\n\n    function getSynth(bytes32 key) external view returns (address) {\n        IIssuer issuer = IIssuer(repository[\"Issuer\"]);\n        require(address(issuer) != address(0), \"Cannot find Issuer address\");\n        return address(issuer.synths(key));\n    }\n\n    /* ========== EVENTS ========== */\n\n    event AddressImported(bytes32 name, address destination);\n}\n\n\n// solhint-disable payable-fallback\n\n// https://docs.synthetix.io/contracts/source/contracts/readproxy\ncontract ReadProxy is Owned {\n    address public target;\n\n    constructor(address _owner) public Owned(_owner) {}\n\n    function setTarget(address _target) external onlyOwner {\n        target = _target;\n        emit TargetUpdated(target);\n    }\n\n    function() external {\n        // The basics of a proxy read call\n        // Note that msg.sender in the underlying will always be the address of this contract.\n        assembly {\n            calldatacopy(0, 0, calldatasize)\n\n            // Use of staticcall - this will revert if the underlying function mutates state\n            let result := staticcall(gas, sload(target_slot), 0, calldatasize, 0, 0)\n            returndatacopy(0, 0, returndatasize)\n\n            if iszero(result) {\n                revert(0, returndatasize)\n            }\n            return(0, returndatasize)\n        }\n    }\n\n    event TargetUpdated(address newTarget);\n}\n\n\n// Inheritance\n\n\n// Internal references\n\n\n// https://docs.synthetix.io/contracts/source/contracts/mixinresolver\ncontract MixinResolver {\n    AddressResolver public resolver;\n\n    mapping(bytes32 => address) private addressCache;\n\n    constructor(address _resolver) internal {\n        resolver = AddressResolver(_resolver);\n    }\n\n    /* ========== INTERNAL FUNCTIONS ========== */\n\n    function combineArrays(bytes32[] memory first, bytes32[] memory second)\n        internal\n        pure\n        returns (bytes32[] memory combination)\n    {\n        combination = new bytes32[](first.length + second.length);\n\n        for (uint i = 0; i < first.length; i++) {\n            combination[i] = first[i];\n        }\n\n        for (uint j = 0; j < second.length; j++) {\n            combination[first.length + j] = second[j];\n        }\n    }\n\n    /* ========== PUBLIC FUNCTIONS ========== */\n\n    // Note: this function is public not external in order for it to be overridden and invoked via super in subclasses\n    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {}\n\n    function rebuildCache() public {\n        bytes32[] memory requiredAddresses = resolverAddressesRequired();\n        // The resolver must call this function whenver it updates its state\n        for (uint i = 0; i < requiredAddresses.length; i++) {\n            bytes32 name = requiredAddresses[i];\n            // Note: can only be invoked once the resolver has all the targets needed added\n            address destination = resolver.requireAndGetAddress(\n                name,\n                string(abi.encodePacked(\"Resolver missing target: \", name))\n            );\n            addressCache[name] = destination;\n            emit CacheUpdated(name, destination);\n        }\n    }\n\n    /* ========== VIEWS ========== */\n\n    function isResolverCached() external view returns (bool) {\n        bytes32[] memory requiredAddresses = resolverAddressesRequired();\n        for (uint i = 0; i < requiredAddresses.length; i++) {\n            bytes32 name = requiredAddresses[i];\n            // false if our cache is invalid or if the resolver doesn't have the required address\n            if (resolver.getAddress(name) != addressCache[name] || addressCache[name] == address(0)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /* ========== INTERNAL FUNCTIONS ========== */\n\n    function requireAndGetAddress(bytes32 name) internal view returns (address) {\n        address _foundAddress = addressCache[name];\n        require(_foundAddress != address(0), string(abi.encodePacked(\"Missing address: \", name)));\n        return _foundAddress;\n    }\n\n    /* ========== EVENTS ========== */\n\n    event CacheUpdated(bytes32 name, address destination);\n}\n\n\n// https://docs.synthetix.io/contracts/source/interfaces/iflexiblestorage\ninterface IFlexibleStorage {\n    // Views\n    function getUIntValue(bytes32 contractName, bytes32 record) external view returns (uint);\n\n    function getUIntValues(bytes32 contractName, bytes32[] calldata records) external view returns (uint[] memory);\n\n    function getIntValue(bytes32 contractName, bytes32 record) external view returns (int);\n\n    function getIntValues(bytes32 contractName, bytes32[] calldata records) external view returns (int[] memory);\n\n    function getAddressValue(bytes32 contractName, bytes32 record) external view returns (address);\n\n    function getAddressValues(bytes32 contractName, bytes32[] calldata records) external view returns (address[] memory);\n\n    function getBoolValue(bytes32 contractName, bytes32 record) external view returns (bool);\n\n    function getBoolValues(bytes32 contractName, bytes32[] calldata records) external view returns (bool[] memory);\n\n    function getBytes32Value(bytes32 contractName, bytes32 record) external view returns (bytes32);\n\n    function getBytes32Values(bytes32 contractName, bytes32[] calldata records) external view returns (bytes32[] memory);\n\n    // Mutative functions\n    function deleteUIntValue(bytes32 contractName, bytes32 record) external;\n\n    function deleteIntValue(bytes32 contractName, bytes32 record) external;\n\n    function deleteAddressValue(bytes32 contractName, bytes32 record) external;\n\n    function deleteBoolValue(bytes32 contractName, bytes32 record) external;\n\n    function deleteBytes32Value(bytes32 contractName, bytes32 record) external;\n\n    function setUIntValue(\n        bytes32 contractName,\n        bytes32 record,\n        uint value\n    ) external;\n\n    function setUIntValues(\n        bytes32 contractName,\n        bytes32[] calldata records,\n        uint[] calldata values\n    ) external;\n\n    function setIntValue(\n        bytes32 contractName,\n        bytes32 record,\n        int value\n    ) external;\n\n    function setIntValues(\n        bytes32 contractName,\n        bytes32[] calldata records,\n        int[] calldata values\n    ) external;\n\n    function setAddressValue(\n        bytes32 contractName,\n        bytes32 record,\n        address value\n    ) external;\n\n    function setAddressValues(\n        bytes32 contractName,\n        bytes32[] calldata records,\n        address[] calldata values\n    ) external;\n\n    function setBoolValue(\n        bytes32 contractName,\n        bytes32 record,\n        bool value\n    ) external;\n\n    function setBoolValues(\n        bytes32 contractName,\n        bytes32[] calldata records,\n        bool[] calldata values\n    ) external;\n\n    function setBytes32Value(\n        bytes32 contractName,\n        bytes32 record,\n        bytes32 value\n    ) external;\n\n    function setBytes32Values(\n        bytes32 contractName,\n        bytes32[] calldata records,\n        bytes32[] calldata values\n    ) external;\n}\n\n\n// Internal references\n\n\n// https://docs.synthetix.io/contracts/source/contracts/mixinsystemsettings\ncontract MixinSystemSettings is MixinResolver {\n    bytes32 internal constant SETTING_CONTRACT_NAME = \"SystemSettings\";\n\n    bytes32 internal constant SETTING_WAITING_PERIOD_SECS = \"waitingPeriodSecs\";\n    bytes32 internal constant SETTING_PRICE_DEVIATION_THRESHOLD_FACTOR = \"priceDeviationThresholdFactor\";\n    bytes32 internal constant SETTING_ISSUANCE_RATIO = \"issuanceRatio\";\n    bytes32 internal constant SETTING_FEE_PERIOD_DURATION = \"feePeriodDuration\";\n    bytes32 internal constant SETTING_TARGET_THRESHOLD = \"targetThreshold\";\n    bytes32 internal constant SETTING_LIQUIDATION_DELAY = \"liquidationDelay\";\n    bytes32 internal constant SETTING_LIQUIDATION_RATIO = \"liquidationRatio\";\n    bytes32 internal constant SETTING_LIQUIDATION_PENALTY = \"liquidationPenalty\";\n    bytes32 internal constant SETTING_RATE_STALE_PERIOD = \"rateStalePeriod\";\n    bytes32 internal constant SETTING_EXCHANGE_FEE_RATE = \"exchangeFeeRate\";\n    bytes32 internal constant SETTING_MINIMUM_STAKE_TIME = \"minimumStakeTime\";\n    bytes32 internal constant SETTING_AGGREGATOR_WARNING_FLAGS = \"aggregatorWarningFlags\";\n    bytes32 internal constant SETTING_TRADING_REWARDS_ENABLED = \"tradingRewardsEnabled\";\n    bytes32 internal constant SETTING_DEBT_SNAPSHOT_STALE_TIME = \"debtSnapshotStaleTime\";\n    bytes32 internal constant SETTING_CROSS_DOMAIN_DEPOSIT_GAS_LIMIT = \"crossDomainDepositGasLimit\";\n    bytes32 internal constant SETTING_CROSS_DOMAIN_ESCROW_GAS_LIMIT = \"crossDomainEscrowGasLimit\";\n    bytes32 internal constant SETTING_CROSS_DOMAIN_REWARD_GAS_LIMIT = \"crossDomainRewardGasLimit\";\n    bytes32 internal constant SETTING_CROSS_DOMAIN_WITHDRAWAL_GAS_LIMIT = \"crossDomainWithdrawalGasLimit\";\n\n    bytes32 internal constant CONTRACT_FLEXIBLESTORAGE = \"FlexibleStorage\";\n\n    enum CrossDomainMessageGasLimits {Deposit, Escrow, Reward, Withdrawal}\n\n    constructor(address _resolver) internal MixinResolver(_resolver) {}\n\n    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {\n        addresses = new bytes32[](1);\n        addresses[0] = CONTRACT_FLEXIBLESTORAGE;\n    }\n\n    function flexibleStorage() internal view returns (IFlexibleStorage) {\n        return IFlexibleStorage(requireAndGetAddress(CONTRACT_FLEXIBLESTORAGE));\n    }\n\n    function _getGasLimitSetting(CrossDomainMessageGasLimits gasLimitType) internal pure returns (bytes32) {\n        if (gasLimitType == CrossDomainMessageGasLimits.Deposit) {\n            return SETTING_CROSS_DOMAIN_DEPOSIT_GAS_LIMIT;\n        } else if (gasLimitType == CrossDomainMessageGasLimits.Escrow) {\n            return SETTING_CROSS_DOMAIN_ESCROW_GAS_LIMIT;\n        } else if (gasLimitType == CrossDomainMessageGasLimits.Reward) {\n            return SETTING_CROSS_DOMAIN_REWARD_GAS_LIMIT;\n        } else if (gasLimitType == CrossDomainMessageGasLimits.Withdrawal) {\n            return SETTING_CROSS_DOMAIN_WITHDRAWAL_GAS_LIMIT;\n        } else {\n            revert(\"Unknown gas limit type\");\n        }\n    }\n\n    function getCrossDomainMessageGasLimit(CrossDomainMessageGasLimits gasLimitType) internal view returns (uint) {\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, _getGasLimitSetting(gasLimitType));\n    }\n\n    function getTradingRewardsEnabled() internal view returns (bool) {\n        return flexibleStorage().getBoolValue(SETTING_CONTRACT_NAME, SETTING_TRADING_REWARDS_ENABLED);\n    }\n\n    function getWaitingPeriodSecs() internal view returns (uint) {\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_WAITING_PERIOD_SECS);\n    }\n\n    function getPriceDeviationThresholdFactor() internal view returns (uint) {\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_PRICE_DEVIATION_THRESHOLD_FACTOR);\n    }\n\n    function getIssuanceRatio() internal view returns (uint) {\n        // lookup on flexible storage directly for gas savings (rather than via SystemSettings)\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_ISSUANCE_RATIO);\n    }\n\n    function getFeePeriodDuration() internal view returns (uint) {\n        // lookup on flexible storage directly for gas savings (rather than via SystemSettings)\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_FEE_PERIOD_DURATION);\n    }\n\n    function getTargetThreshold() internal view returns (uint) {\n        // lookup on flexible storage directly for gas savings (rather than via SystemSettings)\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_TARGET_THRESHOLD);\n    }\n\n    function getLiquidationDelay() internal view returns (uint) {\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_LIQUIDATION_DELAY);\n    }\n\n    function getLiquidationRatio() internal view returns (uint) {\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_LIQUIDATION_RATIO);\n    }\n\n    function getLiquidationPenalty() internal view returns (uint) {\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_LIQUIDATION_PENALTY);\n    }\n\n    function getRateStalePeriod() internal view returns (uint) {\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_RATE_STALE_PERIOD);\n    }\n\n    function getExchangeFeeRate(bytes32 currencyKey) internal view returns (uint) {\n        return\n            flexibleStorage().getUIntValue(\n                SETTING_CONTRACT_NAME,\n                keccak256(abi.encodePacked(SETTING_EXCHANGE_FEE_RATE, currencyKey))\n            );\n    }\n\n    function getMinimumStakeTime() internal view returns (uint) {\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_MINIMUM_STAKE_TIME);\n    }\n\n    function getAggregatorWarningFlags() internal view returns (address) {\n        return flexibleStorage().getAddressValue(SETTING_CONTRACT_NAME, SETTING_AGGREGATOR_WARNING_FLAGS);\n    }\n\n    function getDebtSnapshotStaleTime() internal view returns (uint) {\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_DEBT_SNAPSHOT_STALE_TIME);\n    }\n}\n\n\npragma experimental ABIEncoderV2;\n\n\ninterface ICollateralLoan {\n    struct Loan {\n        // ID for the loan\n        uint id;\n        //  Acccount that created the loan\n        address payable account;\n        //  Amount of collateral deposited\n        uint collateral;\n        // The synth that was borowed\n        bytes32 currency;\n        //  Amount of synths borrowed\n        uint amount;\n        // Indicates if the position was short sold\n        bool short;\n        // interest amounts accrued\n        uint accruedInterest;\n        // last interest index\n        uint interestIndex;\n        // time of last interaction.\n        uint lastInteraction;\n    }\n}\n\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n}\n\n\n// Libraries\n\n\n// https://docs.synthetix.io/contracts/source/libraries/safedecimalmath\nlibrary SafeDecimalMath {\n    using SafeMath for uint;\n\n    /* Number of decimal places in the representations. */\n    uint8 public constant decimals = 18;\n    uint8 public constant highPrecisionDecimals = 27;\n\n    /* The number representing 1.0. */\n    uint public constant UNIT = 10**uint(decimals);\n\n    /* The number representing 1.0 for higher fidelity numbers. */\n    uint public constant PRECISE_UNIT = 10**uint(highPrecisionDecimals);\n    uint private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR = 10**uint(highPrecisionDecimals - decimals);\n\n    /**\n     * @return Provides an interface to UNIT.\n     */\n    function unit() external pure returns (uint) {\n        return UNIT;\n    }\n\n    /**\n     * @return Provides an interface to PRECISE_UNIT.\n     */\n    function preciseUnit() external pure returns (uint) {\n        return PRECISE_UNIT;\n    }\n\n    /**\n     * @return The result of multiplying x and y, interpreting the operands as fixed-point\n     * decimals.\n     *\n     * @dev A unit factor is divided out after the product of x and y is evaluated,\n     * so that product must be less than 2**256. As this is an integer division,\n     * the internal division always rounds down. This helps save on gas. Rounding\n     * is more expensive on gas.\n     */\n    function multiplyDecimal(uint x, uint y) internal pure returns (uint) {\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\n        return x.mul(y) / UNIT;\n    }\n\n    /**\n     * @return The result of safely multiplying x and y, interpreting the operands\n     * as fixed-point decimals of the specified precision unit.\n     *\n     * @dev The operands should be in the form of a the specified unit factor which will be\n     * divided out after the product of x and y is evaluated, so that product must be\n     * less than 2**256.\n     *\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\n     * (eg. small fractions or percentages).\n     */\n    function _multiplyDecimalRound(\n        uint x,\n        uint y,\n        uint precisionUnit\n    ) private pure returns (uint) {\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\n        uint quotientTimesTen = x.mul(y) / (precisionUnit / 10);\n\n        if (quotientTimesTen % 10 >= 5) {\n            quotientTimesTen += 10;\n        }\n\n        return quotientTimesTen / 10;\n    }\n\n    /**\n     * @return The result of safely multiplying x and y, interpreting the operands\n     * as fixed-point decimals of a precise unit.\n     *\n     * @dev The operands should be in the precise unit factor which will be\n     * divided out after the product of x and y is evaluated, so that product must be\n     * less than 2**256.\n     *\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\n     * (eg. small fractions or percentages).\n     */\n    function multiplyDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\n        return _multiplyDecimalRound(x, y, PRECISE_UNIT);\n    }\n\n    /**\n     * @return The result of safely multiplying x and y, interpreting the operands\n     * as fixed-point decimals of a standard unit.\n     *\n     * @dev The operands should be in the standard unit factor which will be\n     * divided out after the product of x and y is evaluated, so that product must be\n     * less than 2**256.\n     *\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\n     * (eg. small fractions or percentages).\n     */\n    function multiplyDecimalRound(uint x, uint y) internal pure returns (uint) {\n        return _multiplyDecimalRound(x, y, UNIT);\n    }\n\n    /**\n     * @return The result of safely dividing x and y. The return value is a high\n     * precision decimal.\n     *\n     * @dev y is divided after the product of x and the standard precision unit\n     * is evaluated, so the product of x and UNIT must be less than 2**256. As\n     * this is an integer division, the result is always rounded down.\n     * This helps save on gas. Rounding is more expensive on gas.\n     */\n    function divideDecimal(uint x, uint y) internal pure returns (uint) {\n        /* Reintroduce the UNIT factor that will be divided out by y. */\n        return x.mul(UNIT).div(y);\n    }\n\n    /**\n     * @return The result of safely dividing x and y. The return value is as a rounded\n     * decimal in the precision unit specified in the parameter.\n     *\n     * @dev y is divided after the product of x and the specified precision unit\n     * is evaluated, so the product of x and the specified precision unit must\n     * be less than 2**256. The result is rounded to the nearest increment.\n     */\n    function _divideDecimalRound(\n        uint x,\n        uint y,\n        uint precisionUnit\n    ) private pure returns (uint) {\n        uint resultTimesTen = x.mul(precisionUnit * 10).div(y);\n\n        if (resultTimesTen % 10 >= 5) {\n            resultTimesTen += 10;\n        }\n\n        return resultTimesTen / 10;\n    }\n\n    /**\n     * @return The result of safely dividing x and y. The return value is as a rounded\n     * standard precision decimal.\n     *\n     * @dev y is divided after the product of x and the standard precision unit\n     * is evaluated, so the product of x and the standard precision unit must\n     * be less than 2**256. The result is rounded to the nearest increment.\n     */\n    function divideDecimalRound(uint x, uint y) internal pure returns (uint) {\n        return _divideDecimalRound(x, y, UNIT);\n    }\n\n    /**\n     * @return The result of safely dividing x and y. The return value is as a rounded\n     * high precision decimal.\n     *\n     * @dev y is divided after the product of x and the high precision unit\n     * is evaluated, so the product of x and the high precision unit must\n     * be less than 2**256. The result is rounded to the nearest increment.\n     */\n    function divideDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\n        return _divideDecimalRound(x, y, PRECISE_UNIT);\n    }\n\n    /**\n     * @dev Convert a standard decimal representation to a high precision one.\n     */\n    function decimalToPreciseDecimal(uint i) internal pure returns (uint) {\n        return i.mul(UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR);\n    }\n\n    /**\n     * @dev Convert a high precision decimal to a standard decimal representation.\n     */\n    function preciseDecimalToDecimal(uint i) internal pure returns (uint) {\n        uint quotientTimesTen = i / (UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR / 10);\n\n        if (quotientTimesTen % 10 >= 5) {\n            quotientTimesTen += 10;\n        }\n\n        return quotientTimesTen / 10;\n    }\n}\n\n\n// Inheritance\n\n\n// https://docs.synthetix.io/contracts/source/contracts/state\ncontract State is Owned {\n    // the address of the contract that can modify variables\n    // this can only be changed by the owner of this contract\n    address public associatedContract;\n\n    constructor(address _associatedContract) internal {\n        // This contract is abstract, and thus cannot be instantiated directly\n        require(owner != address(0), \"Owner must be set\");\n\n        associatedContract = _associatedContract;\n        emit AssociatedContractUpdated(_associatedContract);\n    }\n\n    /* ========== SETTERS ========== */\n\n    // Change the associated contract to a new address\n    function setAssociatedContract(address _associatedContract) external onlyOwner {\n        associatedContract = _associatedContract;\n        emit AssociatedContractUpdated(_associatedContract);\n    }\n\n    /* ========== MODIFIERS ========== */\n\n    modifier onlyAssociatedContract {\n        require(msg.sender == associatedContract, \"Only the associated contract can perform this action\");\n        _;\n    }\n\n    /* ========== EVENTS ========== */\n\n    event AssociatedContractUpdated(address associatedContract);\n}\n\n\n// Inheritance\n\n\n// Libraries\n\n\ncontract CollateralState is Owned, State, ICollateralLoan {\n    using SafeMath for uint;\n    using SafeDecimalMath for uint;\n\n    mapping(address => Loan[]) public loans;\n\n    constructor(address _owner, address _associatedContract) public Owned(_owner) State(_associatedContract) {}\n\n    /* ========== VIEWS ========== */\n    // If we do not find the loan, this returns a struct with 0'd values.\n    function getLoan(address account, uint256 loanID) external view returns (Loan memory) {\n        Loan[] memory accountLoans = loans[account];\n        for (uint i = 0; i < accountLoans.length; i++) {\n            if (accountLoans[i].id == loanID) {\n                return (accountLoans[i]);\n            }\n        }\n    }\n\n    function getNumLoans(address account) external view returns (uint numLoans) {\n        return loans[account].length;\n    }\n\n    /* ========== MUTATIVE FUNCTIONS ========== */\n\n    function createLoan(Loan memory loan) public onlyAssociatedContract {\n        loans[loan.account].push(loan);\n    }\n\n    function updateLoan(Loan memory loan) public onlyAssociatedContract {\n        Loan[] storage accountLoans = loans[loan.account];\n        for (uint i = 0; i < accountLoans.length; i++) {\n            if (accountLoans[i].id == loan.id) {\n                loans[loan.account][i] = loan;\n            }\n        }\n    }\n}\n\n\ninterface ICollateralManager {\n    // Manager information\n    function hasCollateral(address collateral) external view returns (bool);\n\n    function isSynthManaged(bytes32 currencyKey) external view returns (bool);\n\n    // State information\n    function long(bytes32 synth) external view returns (uint amount);\n\n    function short(bytes32 synth) external view returns (uint amount);\n\n    function totalLong() external view returns (uint susdValue, bool anyRateIsInvalid);\n\n    function totalShort() external view returns (uint susdValue, bool anyRateIsInvalid);\n\n    function getBorrowRate() external view returns (uint borrowRate, bool anyRateIsInvalid);\n\n    function getShortRate(bytes32 synth) external view returns (uint shortRate, bool rateIsInvalid);\n\n    function getRatesAndTime(uint index)\n        external\n        view\n        returns (\n            uint entryRate,\n            uint lastRate,\n            uint lastUpdated,\n            uint newIndex\n        );\n\n    function getShortRatesAndTime(bytes32 currency, uint index)\n        external\n        view\n        returns (\n            uint entryRate,\n            uint lastRate,\n            uint lastUpdated,\n            uint newIndex\n        );\n\n    function exceedsDebtLimit(uint amount, bytes32 currency) external view returns (bool canIssue, bool anyRateIsInvalid);\n\n    function areSynthsAndCurrenciesSet(bytes32[] calldata requiredSynthNamesInResolver, bytes32[] calldata synthKeys)\n        external\n        view\n        returns (bool);\n\n    function areShortableSynthsSet(bytes32[] calldata requiredSynthNamesInResolver, bytes32[] calldata synthKeys)\n        external\n        view\n        returns (bool);\n\n    // Loans\n    function getNewLoanId() external returns (uint id);\n\n    // Manager mutative\n    function addCollaterals(address[] calldata collaterals) external;\n\n    function removeCollaterals(address[] calldata collaterals) external;\n\n    function addSynths(bytes32[] calldata synthNamesInResolver, bytes32[] calldata synthKeys) external;\n\n    function removeSynths(bytes32[] calldata synths, bytes32[] calldata synthKeys) external;\n\n    function addShortableSynths(bytes32[2][] calldata requiredSynthAndInverseNamesInResolver, bytes32[] calldata synthKeys)\n        external;\n\n    function removeShortableSynths(bytes32[] calldata synths) external;\n\n    // State mutative\n    function updateBorrowRates(uint rate) external;\n\n    function updateShortRates(bytes32 currency, uint rate) external;\n\n    function incrementLongs(bytes32 synth, uint amount) external;\n\n    function decrementLongs(bytes32 synth, uint amount) external;\n\n    function incrementShorts(bytes32 synth, uint amount) external;\n\n    function decrementShorts(bytes32 synth, uint amount) external;\n}\n\n\n// https://docs.synthetix.io/contracts/source/interfaces/isystemstatus\ninterface ISystemStatus {\n    struct Status {\n        bool canSuspend;\n        bool canResume;\n    }\n\n    struct Suspension {\n        bool suspended;\n        // reason is an integer code,\n        // 0 => no reason, 1 => upgrading, 2+ => defined by system usage\n        uint248 reason;\n    }\n\n    // Views\n    function accessControl(bytes32 section, address account) external view returns (bool canSuspend, bool canResume);\n\n    function requireSystemActive() external view;\n\n    function requireIssuanceActive() external view;\n\n    function requireExchangeActive() external view;\n\n    function requireSynthActive(bytes32 currencyKey) external view;\n\n    function requireSynthsActive(bytes32 sourceCurrencyKey, bytes32 destinationCurrencyKey) external view;\n\n    function synthSuspension(bytes32 currencyKey) external view returns (bool suspended, uint248 reason);\n\n    // Restricted functions\n    function suspendSynth(bytes32 currencyKey, uint256 reason) external;\n\n    function updateAccessControl(\n        bytes32 section,\n        address account,\n        bool canSuspend,\n        bool canResume\n    ) external;\n}\n\n\n// https://docs.synthetix.io/contracts/source/interfaces/ifeepool\ninterface IFeePool {\n    // Views\n\n    // solhint-disable-next-line func-name-mixedcase\n    function FEE_ADDRESS() external view returns (address);\n\n    function feesAvailable(address account) external view returns (uint, uint);\n\n    function feePeriodDuration() external view returns (uint);\n\n    function isFeesClaimable(address account) external view returns (bool);\n\n    function targetThreshold() external view returns (uint);\n\n    function totalFeesAvailable() external view returns (uint);\n\n    function totalRewardsAvailable() external view returns (uint);\n\n    // Mutative Functions\n    function claimFees() external returns (bool);\n\n    function claimOnBehalf(address claimingForAddress) external returns (bool);\n\n    function closeCurrentFeePeriod() external;\n\n    // Restricted: used internally to Synthetix\n    function appendAccountIssuanceRecord(\n        address account,\n        uint lockedAmount,\n        uint debtEntryIndex\n    ) external;\n\n    function recordFeePaid(uint sUSDAmount) external;\n\n    function setRewardsToDistribute(uint amount) external;\n}\n\n\n// https://docs.synthetix.io/contracts/source/interfaces/ierc20\ninterface IERC20 {\n    // ERC20 Optional Views\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n\n    // Views\n    function totalSupply() external view returns (uint);\n\n    function balanceOf(address owner) external view returns (uint);\n\n    function allowance(address owner, address spender) external view returns (uint);\n\n    // Mutative functions\n    function transfer(address to, uint value) external returns (bool);\n\n    function approve(address spender, uint value) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint value\n    ) external returns (bool);\n\n    // Events\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    event Approval(address indexed owner, address indexed spender, uint value);\n}\n\n\n// https://docs.synthetix.io/contracts/source/interfaces/iexchangerates\ninterface IExchangeRates {\n    // Structs\n    struct RateAndUpdatedTime {\n        uint216 rate;\n        uint40 time;\n    }\n\n    struct InversePricing {\n        uint entryPoint;\n        uint upperLimit;\n        uint lowerLimit;\n        bool frozenAtUpperLimit;\n        bool frozenAtLowerLimit;\n    }\n\n    // Views\n    function aggregators(bytes32 currencyKey) external view returns (address);\n\n    function aggregatorWarningFlags() external view returns (address);\n\n    function anyRateIsInvalid(bytes32[] calldata currencyKeys) external view returns (bool);\n\n    function canFreezeRate(bytes32 currencyKey) external view returns (bool);\n\n    function currentRoundForRate(bytes32 currencyKey) external view returns (uint);\n\n    function currenciesUsingAggregator(address aggregator) external view returns (bytes32[] memory);\n\n    function effectiveValue(\n        bytes32 sourceCurrencyKey,\n        uint sourceAmount,\n        bytes32 destinationCurrencyKey\n    ) external view returns (uint value);\n\n    function effectiveValueAndRates(\n        bytes32 sourceCurrencyKey,\n        uint sourceAmount,\n        bytes32 destinationCurrencyKey\n    )\n        external\n        view\n        returns (\n            uint value,\n            uint sourceRate,\n            uint destinationRate\n        );\n\n    function effectiveValueAtRound(\n        bytes32 sourceCurrencyKey,\n        uint sourceAmount,\n        bytes32 destinationCurrencyKey,\n        uint roundIdForSrc,\n        uint roundIdForDest\n    ) external view returns (uint value);\n\n    function getCurrentRoundId(bytes32 currencyKey) external view returns (uint);\n\n    function getLastRoundIdBeforeElapsedSecs(\n        bytes32 currencyKey,\n        uint startingRoundId,\n        uint startingTimestamp,\n        uint timediff\n    ) external view returns (uint);\n\n    function inversePricing(bytes32 currencyKey)\n        external\n        view\n        returns (\n            uint entryPoint,\n            uint upperLimit,\n            uint lowerLimit,\n            bool frozenAtUpperLimit,\n            bool frozenAtLowerLimit\n        );\n\n    function lastRateUpdateTimes(bytes32 currencyKey) external view returns (uint256);\n\n    function oracle() external view returns (address);\n\n    function rateAndTimestampAtRound(bytes32 currencyKey, uint roundId) external view returns (uint rate, uint time);\n\n    function rateAndUpdatedTime(bytes32 currencyKey) external view returns (uint rate, uint time);\n\n    function rateAndInvalid(bytes32 currencyKey) external view returns (uint rate, bool isInvalid);\n\n    function rateForCurrency(bytes32 currencyKey) external view returns (uint);\n\n    function rateIsFlagged(bytes32 currencyKey) external view returns (bool);\n\n    function rateIsFrozen(bytes32 currencyKey) external view returns (bool);\n\n    function rateIsInvalid(bytes32 currencyKey) external view returns (bool);\n\n    function rateIsStale(bytes32 currencyKey) external view returns (bool);\n\n    function rateStalePeriod() external view returns (uint);\n\n    function ratesAndUpdatedTimeForCurrencyLastNRounds(bytes32 currencyKey, uint numRounds)\n        external\n        view\n        returns (uint[] memory rates, uint[] memory times);\n\n    function ratesAndInvalidForCurrencies(bytes32[] calldata currencyKeys)\n        external\n        view\n        returns (uint[] memory rates, bool anyRateInvalid);\n\n    function ratesForCurrencies(bytes32[] calldata currencyKeys) external view returns (uint[] memory);\n\n    // Mutative functions\n    function freezeRate(bytes32 currencyKey) external;\n}\n\n\ninterface IVirtualSynth {\n    // Views\n    function balanceOfUnderlying(address account) external view returns (uint);\n\n    function rate() external view returns (uint);\n\n    function readyToSettle() external view returns (bool);\n\n    function secsLeftInWaitingPeriod() external view returns (uint);\n\n    function settled() external view returns (bool);\n\n    function synth() external view returns (ISynth);\n\n    // Mutative functions\n    function settle(address account) external;\n}\n\n\n// https://docs.synthetix.io/contracts/source/interfaces/iexchanger\ninterface IExchanger {\n    // Views\n    function calculateAmountAfterSettlement(\n        address from,\n        bytes32 currencyKey,\n        uint amount,\n        uint refunded\n    ) external view returns (uint amountAfterSettlement);\n\n    function isSynthRateInvalid(bytes32 currencyKey) external view returns (bool);\n\n    function maxSecsLeftInWaitingPeriod(address account, bytes32 currencyKey) external view returns (uint);\n\n    function settlementOwing(address account, bytes32 currencyKey)\n        external\n        view\n        returns (\n            uint reclaimAmount,\n            uint rebateAmount,\n            uint numEntries\n        );\n\n    function hasWaitingPeriodOrSettlementOwing(address account, bytes32 currencyKey) external view returns (bool);\n\n    function feeRateForExchange(bytes32 sourceCurrencyKey, bytes32 destinationCurrencyKey)\n        external\n        view\n        returns (uint exchangeFeeRate);\n\n    function getAmountsForExchange(\n        uint sourceAmount,\n        bytes32 sourceCurrencyKey,\n        bytes32 destinationCurrencyKey\n    )\n        external\n        view\n        returns (\n            uint amountReceived,\n            uint fee,\n            uint exchangeFeeRate\n        );\n\n    function priceDeviationThresholdFactor() external view returns (uint);\n\n    function waitingPeriodSecs() external view returns (uint);\n\n    // Mutative functions\n    function exchange(\n        address from,\n        bytes32 sourceCurrencyKey,\n        uint sourceAmount,\n        bytes32 destinationCurrencyKey,\n        address destinationAddress\n    ) external returns (uint amountReceived);\n\n    function exchangeOnBehalf(\n        address exchangeForAddress,\n        address from,\n        bytes32 sourceCurrencyKey,\n        uint sourceAmount,\n        bytes32 destinationCurrencyKey\n    ) external returns (uint amountReceived);\n\n    function exchangeWithTracking(\n        address from,\n        bytes32 sourceCurrencyKey,\n        uint sourceAmount,\n        bytes32 destinationCurrencyKey,\n        address destinationAddress,\n        address originator,\n        bytes32 trackingCode\n    ) external returns (uint amountReceived);\n\n    function exchangeOnBehalfWithTracking(\n        address exchangeForAddress,\n        address from,\n        bytes32 sourceCurrencyKey,\n        uint sourceAmount,\n        bytes32 destinationCurrencyKey,\n        address originator,\n        bytes32 trackingCode\n    ) external returns (uint amountReceived);\n\n    function exchangeWithVirtual(\n        address from,\n        bytes32 sourceCurrencyKey,\n        uint sourceAmount,\n        bytes32 destinationCurrencyKey,\n        address destinationAddress,\n        bytes32 trackingCode\n    ) external returns (uint amountReceived, IVirtualSynth vSynth);\n\n    function settle(address from, bytes32 currencyKey)\n        external\n        returns (\n            uint reclaimed,\n            uint refunded,\n            uint numEntries\n        );\n\n    function setLastExchangeRateForSynth(bytes32 currencyKey, uint rate) external;\n\n    function suspendSynthWithInvalidRate(bytes32 currencyKey) external;\n}\n\n\n// https://docs.synthetix.io/contracts/source/interfaces/istakingrewards\ninterface IShortingRewards {\n    // Views\n    function lastTimeRewardApplicable() external view returns (uint256);\n\n    function rewardPerToken() external view returns (uint256);\n\n    function earned(address account) external view returns (uint256);\n\n    function getRewardForDuration() external view returns (uint256);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    // Mutative\n\n    function enrol(address account, uint256 amount) external;\n\n    function withdraw(address account, uint256 amount) external;\n\n    function getReward(address account) external;\n\n    function exit(address account) external;\n}\n\n\n// Inheritance\n\n\n// Libraries\n\n\n// Internal references\n\n\ncontract Collateral is ICollateralLoan, Owned, MixinSystemSettings {\n    /* ========== LIBRARIES ========== */\n    using SafeMath for uint;\n    using SafeDecimalMath for uint;\n\n    /* ========== CONSTANTS ========== */\n\n    bytes32 private constant sUSD = \"sUSD\";\n\n    // ========== STATE VARIABLES ==========\n\n    // The synth corresponding to the collateral.\n    bytes32 public collateralKey;\n\n    // Stores loans\n    CollateralState public state;\n\n    address public manager;\n\n    // The synths that this contract can issue.\n    bytes32[] public synths;\n\n    // Map from currency key to synth contract name.\n    mapping(bytes32 => bytes32) public synthsByKey;\n\n    // Map from currency key to the shorting rewards contract\n    mapping(bytes32 => address) public shortingRewards;\n\n    // ========== SETTER STATE VARIABLES ==========\n\n    // The minimum collateral ratio required to avoid liquidation.\n    uint public minCratio;\n\n    // The minimum amount of collateral to create a loan.\n    uint public minCollateral;\n\n    // The fee charged for issuing a loan.\n    uint public issueFeeRate;\n\n    // The maximum number of loans that an account can create with this collateral.\n    uint public maxLoansPerAccount = 50;\n\n    // Time in seconds that a user must wait between interacting with a loan.\n    // Provides front running and flash loan protection.\n    uint public interactionDelay = 300;\n\n    bool public canOpenLoans = true;\n\n    /* ========== ADDRESS RESOLVER CONFIGURATION ========== */\n\n    bytes32 private constant CONTRACT_SYSTEMSTATUS = \"SystemStatus\";\n    bytes32 private constant CONTRACT_EXRATES = \"ExchangeRates\";\n    bytes32 private constant CONTRACT_EXCHANGER = \"Exchanger\";\n    bytes32 private constant CONTRACT_FEEPOOL = \"FeePool\";\n    bytes32 private constant CONTRACT_SYNTHSUSD = \"SynthsUSD\";\n\n    /* ========== CONSTRUCTOR ========== */\n\n    constructor(\n        CollateralState _state,\n        address _owner,\n        address _manager,\n        address _resolver,\n        bytes32 _collateralKey,\n        uint _minCratio,\n        uint _minCollateral\n    ) public Owned(_owner) MixinSystemSettings(_resolver) {\n        manager = _manager;\n        state = _state;\n        collateralKey = _collateralKey;\n        minCratio = _minCratio;\n        minCollateral = _minCollateral;\n    }\n\n    /* ========== VIEWS ========== */\n\n    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {\n        bytes32[] memory existingAddresses = MixinSystemSettings.resolverAddressesRequired();\n        bytes32[] memory newAddresses = new bytes32[](5);\n        newAddresses[0] = CONTRACT_FEEPOOL;\n        newAddresses[1] = CONTRACT_EXRATES;\n        newAddresses[2] = CONTRACT_EXCHANGER;\n        newAddresses[3] = CONTRACT_SYSTEMSTATUS;\n        newAddresses[4] = CONTRACT_SYNTHSUSD;\n\n        bytes32[] memory combined = combineArrays(existingAddresses, newAddresses);\n\n        addresses = combineArrays(combined, synths);\n    }\n\n    /* ---------- Related Contracts ---------- */\n\n    function _systemStatus() internal view returns (ISystemStatus) {\n        return ISystemStatus(requireAndGetAddress(CONTRACT_SYSTEMSTATUS));\n    }\n\n    function _synth(bytes32 synthName) internal view returns (ISynth) {\n        return ISynth(requireAndGetAddress(synthName));\n    }\n\n    function _synthsUSD() internal view returns (ISynth) {\n        return ISynth(requireAndGetAddress(CONTRACT_SYNTHSUSD));\n    }\n\n    function _exchangeRates() internal view returns (IExchangeRates) {\n        return IExchangeRates(requireAndGetAddress(CONTRACT_EXRATES));\n    }\n\n    function _exchanger() internal view returns (IExchanger) {\n        return IExchanger(requireAndGetAddress(CONTRACT_EXCHANGER));\n    }\n\n    function _feePool() internal view returns (IFeePool) {\n        return IFeePool(requireAndGetAddress(CONTRACT_FEEPOOL));\n    }\n\n    function _manager() internal view returns (ICollateralManager) {\n        return ICollateralManager(manager);\n    }\n\n    /* ---------- Public Views ---------- */\n\n    function collateralRatio(Loan memory loan) public view returns (uint cratio) {\n        uint cvalue = _exchangeRates().effectiveValue(collateralKey, loan.collateral, sUSD);\n        uint dvalue = _exchangeRates().effectiveValue(loan.currency, loan.amount.add(loan.accruedInterest), sUSD);\n        cratio = cvalue.divideDecimal(dvalue);\n    }\n\n    // The maximum number of synths issuable for this amount of collateral\n    function maxLoan(uint amount, bytes32 currency) public view returns (uint max) {\n        max = issuanceRatio().multiplyDecimal(_exchangeRates().effectiveValue(collateralKey, amount, currency));\n    }\n\n    /**\n     * r = target issuance ratio\n     * D = debt value in sUSD\n     * V = collateral value in sUSD\n     * P = liquidation penalty\n     * Calculates amount of synths = (D - V * r) / (1 - (1 + P) * r)\n     * Note: if you pass a loan in here that is not eligible for liquidation it will revert.\n     * We check the ratio first in liquidateInternal and only pass eligible loans in.\n     */\n    function liquidationAmount(Loan memory loan) public view returns (uint amount) {\n        uint liquidationPenalty = getLiquidationPenalty();\n        uint debtValue = _exchangeRates().effectiveValue(loan.currency, loan.amount.add(loan.accruedInterest), sUSD);\n        uint collateralValue = _exchangeRates().effectiveValue(collateralKey, loan.collateral, sUSD);\n        uint unit = SafeDecimalMath.unit();\n\n        uint dividend = debtValue.sub(collateralValue.divideDecimal(minCratio));\n        uint divisor = unit.sub(unit.add(liquidationPenalty).divideDecimal(minCratio));\n\n        uint sUSDamount = dividend.divideDecimal(divisor);\n\n        return _exchangeRates().effectiveValue(sUSD, sUSDamount, loan.currency);\n    }\n\n    // amount is the amount of synths we are liquidating\n    function collateralRedeemed(bytes32 currency, uint amount) public view returns (uint collateral) {\n        uint liquidationPenalty = getLiquidationPenalty();\n        collateral = _exchangeRates().effectiveValue(currency, amount, collateralKey);\n\n        collateral = collateral.multiplyDecimal(SafeDecimalMath.unit().add(liquidationPenalty));\n    }\n\n    function areSynthsAndCurrenciesSet(bytes32[] calldata _synthNamesInResolver, bytes32[] calldata _synthKeys)\n        external\n        view\n        returns (bool)\n    {\n        if (synths.length != _synthNamesInResolver.length) {\n            return false;\n        }\n\n        for (uint i = 0; i < _synthNamesInResolver.length; i++) {\n            bytes32 synthName = _synthNamesInResolver[i];\n            if (synths[i] != synthName) {\n                return false;\n            }\n            if (synthsByKey[_synthKeys[i]] != synths[i]) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /* ---------- UTILITIES ---------- */\n\n    // Check the account has enough of the synth to make the payment\n    function _checkSynthBalance(\n        address payer,\n        bytes32 key,\n        uint amount\n    ) internal view {\n        require(IERC20(address(_synth(synthsByKey[key]))).balanceOf(payer) >= amount, \"Not enough synth balance\");\n    }\n\n    // We set the interest index to 0 to indicate the loan has been closed.\n    function _checkLoanAvailable(Loan memory _loan) internal view {\n        require(_loan.interestIndex > 0, \"Loan does not exist\");\n        require(_loan.lastInteraction.add(interactionDelay) <= block.timestamp, \"Loan recently interacted with\");\n    }\n\n    function issuanceRatio() internal view returns (uint ratio) {\n        ratio = SafeDecimalMath.unit().divideDecimalRound(minCratio);\n    }\n\n    /* ========== MUTATIVE FUNCTIONS ========== */\n\n    /* ---------- Synths ---------- */\n\n    function addSynths(bytes32[] calldata _synthNamesInResolver, bytes32[] calldata _synthKeys) external onlyOwner {\n        require(_synthNamesInResolver.length == _synthKeys.length, \"Input array length mismatch\");\n\n        for (uint i = 0; i < _synthNamesInResolver.length; i++) {\n            bytes32 synthName = _synthNamesInResolver[i];\n            synths.push(synthName);\n            synthsByKey[_synthKeys[i]] = synthName;\n        }\n\n        // ensure cache has the latest\n        rebuildCache();\n    }\n\n    /* ---------- Rewards Contracts ---------- */\n\n    function addRewardsContracts(address rewardsContract, bytes32 synth) external onlyOwner {\n        shortingRewards[synth] = rewardsContract;\n    }\n\n    /* ---------- SETTERS ---------- */\n\n    function setMinCratio(uint _minCratio) external onlyOwner {\n        require(_minCratio > SafeDecimalMath.unit(), \"Must be greater than 1\");\n        minCratio = _minCratio;\n        emit MinCratioRatioUpdated(minCratio);\n    }\n\n    function setIssueFeeRate(uint _issueFeeRate) external onlyOwner {\n        issueFeeRate = _issueFeeRate;\n        emit IssueFeeRateUpdated(issueFeeRate);\n    }\n\n    function setInteractionDelay(uint _interactionDelay) external onlyOwner {\n        require(_interactionDelay <= SafeDecimalMath.unit() * 3600, \"Max 1 hour\");\n        interactionDelay = _interactionDelay;\n        emit InteractionDelayUpdated(interactionDelay);\n    }\n\n    function setManager(address _newManager) external onlyOwner {\n        manager = _newManager;\n        emit ManagerUpdated(manager);\n    }\n\n    function setCanOpenLoans(bool _canOpenLoans) external onlyOwner {\n        canOpenLoans = _canOpenLoans;\n        emit CanOpenLoansUpdated(canOpenLoans);\n    }\n\n    /* ---------- LOAN INTERACTIONS ---------- */\n\n    function openInternal(\n        uint collateral,\n        uint amount,\n        bytes32 currency,\n        bool short\n    ) internal returns (uint id) {\n        // 0. Check the system is active.\n        _systemStatus().requireIssuanceActive();\n\n        require(canOpenLoans, \"Opening is disabled\");\n\n        // 1. Make sure the collateral rate is valid.\n        require(!_exchangeRates().rateIsInvalid(collateralKey), \"Collateral rate is invalid\");\n\n        // 2. We can only issue certain synths.\n        require(synthsByKey[currency] > 0, \"Not allowed to issue this synth\");\n\n        // 3. Make sure the synth rate is not invalid.\n        require(!_exchangeRates().rateIsInvalid(currency), \"Currency rate is invalid\");\n\n        // 4. Collateral >= minimum collateral size.\n        require(collateral >= minCollateral, \"Not enough collateral to open\");\n\n        // 5. Cap the number of loans so that the array doesn't get too big.\n        require(state.getNumLoans(msg.sender) < maxLoansPerAccount, \"Max loans exceeded\");\n\n        // 6. Check we haven't hit the debt cap for non snx collateral.\n        (bool canIssue, bool anyRateIsInvalid) = _manager().exceedsDebtLimit(amount, currency);\n\n        require(canIssue && !anyRateIsInvalid, \"Debt limit or invalid rate\");\n\n        // 7. Require requested loan < max loan\n        require(amount <= maxLoan(collateral, currency), \"Exceeds max borrowing power\");\n\n        // 8. This fee is denominated in the currency of the loan\n        uint issueFee = amount.multiplyDecimalRound(issueFeeRate);\n\n        // 9. Calculate the minting fee and subtract it from the loan amount\n        uint loanAmountMinusFee = amount.sub(issueFee);\n\n        // 10. Get a Loan ID\n        id = _manager().getNewLoanId();\n\n        // 11. Create the loan struct.\n        Loan memory loan = Loan({\n            id: id,\n            account: msg.sender,\n            collateral: collateral,\n            currency: currency,\n            amount: amount,\n            short: short,\n            accruedInterest: 0,\n            interestIndex: 0,\n            lastInteraction: block.timestamp\n        });\n\n        // 12. Accrue interest on the loan.\n        loan = accrueInterest(loan);\n\n        // 13. Save the loan to storage\n        state.createLoan(loan);\n\n        // 14. Pay the minting fees to the fee pool\n        _payFees(issueFee, currency);\n\n        // 15. If its short, convert back to sUSD, otherwise issue the loan.\n        if (short) {\n            _synthsUSD().issue(msg.sender, _exchangeRates().effectiveValue(currency, loanAmountMinusFee, sUSD));\n            _manager().incrementShorts(currency, amount);\n\n            if (shortingRewards[currency] != address(0)) {\n                IShortingRewards(shortingRewards[currency]).enrol(msg.sender, amount);\n            }\n        } else {\n            _synth(synthsByKey[currency]).issue(msg.sender, loanAmountMinusFee);\n            _manager().incrementLongs(currency, amount);\n        }\n\n        // 16. Emit event\n        emit LoanCreated(msg.sender, id, amount, collateral, currency, issueFee);\n    }\n\n    function closeInternal(address borrower, uint id) internal returns (uint collateral) {\n        // 0. Check the system is active.\n        _systemStatus().requireIssuanceActive();\n\n        // 1. Make sure the collateral rate is valid\n        require(!_exchangeRates().rateIsInvalid(collateralKey), \"Collateral rate is invalid\");\n\n        // 2. Get the loan.\n        Loan memory loan = state.getLoan(borrower, id);\n\n        // 3. Check loan is open and the last interaction time.\n        _checkLoanAvailable(loan);\n\n        // 4. Accrue interest on the loan.\n        loan = accrueInterest(loan);\n\n        // 5. Work out the total amount owing on the loan.\n        uint total = loan.amount.add(loan.accruedInterest);\n\n        // 6. Check they have enough balance to close the loan.\n        _checkSynthBalance(loan.account, loan.currency, total);\n\n        // 7. Burn the synths\n        require(\n            !_exchanger().hasWaitingPeriodOrSettlementOwing(borrower, loan.currency),\n            \"Waiting secs or settlement owing\"\n        );\n        _synth(synthsByKey[loan.currency]).burn(borrower, total);\n\n        // 8. Tell the manager.\n        if (loan.short) {\n            _manager().decrementShorts(loan.currency, loan.amount);\n\n            if (shortingRewards[loan.currency] != address(0)) {\n                IShortingRewards(shortingRewards[loan.currency]).withdraw(borrower, loan.amount);\n            }\n        } else {\n            _manager().decrementLongs(loan.currency, loan.amount);\n        }\n\n        // 9. Assign the collateral to be returned.\n        collateral = loan.collateral;\n\n        // 10. Pay fees\n        _payFees(loan.accruedInterest, loan.currency);\n\n        // 11. Record loan as closed\n        loan.amount = 0;\n        loan.collateral = 0;\n        loan.accruedInterest = 0;\n        loan.interestIndex = 0;\n        loan.lastInteraction = block.timestamp;\n        state.updateLoan(loan);\n\n        // 12. Emit the event\n        emit LoanClosed(borrower, id);\n    }\n\n    function closeByLiquidationInternal(\n        address borrower,\n        address liquidator,\n        Loan memory loan\n    ) internal returns (uint collateral) {\n        // 1. Work out the total amount owing on the loan.\n        uint total = loan.amount.add(loan.accruedInterest);\n\n        // 2. Store this for the event.\n        uint amount = loan.amount;\n\n        // 3. Return collateral to the child class so it knows how much to transfer.\n        collateral = loan.collateral;\n\n        // 4. Burn the synths\n        require(!_exchanger().hasWaitingPeriodOrSettlementOwing(liquidator, loan.currency), \"Waiting or settlement owing\");\n        _synth(synthsByKey[loan.currency]).burn(liquidator, total);\n\n        // 5. Tell the manager.\n        if (loan.short) {\n            _manager().decrementShorts(loan.currency, loan.amount);\n\n            if (shortingRewards[loan.currency] != address(0)) {\n                IShortingRewards(shortingRewards[loan.currency]).withdraw(borrower, loan.amount);\n            }\n        } else {\n            _manager().decrementLongs(loan.currency, loan.amount);\n        }\n\n        // 6. Pay fees\n        _payFees(loan.accruedInterest, loan.currency);\n\n        // 7. Record loan as closed\n        loan.amount = 0;\n        loan.collateral = 0;\n        loan.accruedInterest = 0;\n        loan.interestIndex = 0;\n        loan.lastInteraction = block.timestamp;\n        state.updateLoan(loan);\n\n        // 8. Emit the event.\n        emit LoanClosedByLiquidation(borrower, loan.id, liquidator, amount, collateral);\n    }\n\n    function depositInternal(\n        address account,\n        uint id,\n        uint amount\n    ) internal {\n        // 0. Check the system is active.\n        _systemStatus().requireIssuanceActive();\n\n        // 1. Make sure the collateral rate is valid.\n        require(!_exchangeRates().rateIsInvalid(collateralKey), \"Collateral rate is invalid\");\n\n        // 2. They sent some value > 0\n        require(amount > 0, \"Deposit must be greater than 0\");\n\n        // 3. Get the loan\n        Loan memory loan = state.getLoan(account, id);\n\n        // 4. Check loan is open and last interaction time.\n        _checkLoanAvailable(loan);\n\n        // 5. Accrue interest\n        loan = accrueInterest(loan);\n\n        // 6. Add the collateral\n        loan.collateral = loan.collateral.add(amount);\n\n        // 7. Update the last interaction time.\n        loan.lastInteraction = block.timestamp;\n\n        // 8. Store the loan\n        state.updateLoan(loan);\n\n        // 9. Emit the event\n        emit CollateralDeposited(account, id, amount, loan.collateral);\n    }\n\n    function withdrawInternal(uint id, uint amount) internal returns (uint withdraw) {\n        // 0. Check the system is active.\n        _systemStatus().requireIssuanceActive();\n\n        // 1. Make sure the collateral rate is valid.\n        require(!_exchangeRates().rateIsInvalid(collateralKey), \"Collateral rate is invalid\");\n\n        // 2. Get the loan.\n        Loan memory loan = state.getLoan(msg.sender, id);\n\n        // 3. Check loan is open and last interaction time.\n        _checkLoanAvailable(loan);\n\n        // 4. Accrue interest.\n        loan = accrueInterest(loan);\n\n        // 5. Subtract the collateral.\n        loan.collateral = loan.collateral.sub(amount);\n\n        // 6. Update the last interaction time.\n        loan.lastInteraction = block.timestamp;\n\n        // 7. Check that the new amount does not put them under the minimum c ratio.\n        require(collateralRatio(loan) > minCratio, \"Cratio too low\");\n\n        // 8. Store the loan.\n        state.updateLoan(loan);\n\n        // 9. Assign the return variable.\n        withdraw = amount;\n\n        // 10. Emit the event.\n        emit CollateralWithdrawn(msg.sender, id, amount, loan.collateral);\n    }\n\n    function liquidateInternal(\n        address borrower,\n        uint id,\n        uint payment\n    ) internal returns (uint collateralLiquidated) {\n        // 0. Check the system is active.\n        _systemStatus().requireIssuanceActive();\n\n        // 1. Make sure the collateral rate is valid.\n        require(!_exchangeRates().rateIsInvalid(collateralKey), \"Collateral rate is invalid\");\n\n        // 2. Check the payment amount.\n        require(payment > 0, \"Payment must be greater than 0\");\n\n        // 3. Get the loan.\n        Loan memory loan = state.getLoan(borrower, id);\n\n        // 4. Check loan is open and last interaction time.\n        _checkLoanAvailable(loan);\n\n        // 5. Accrue interest.\n        loan = accrueInterest(loan);\n\n        // 6. Check they have enough balance to make the payment.\n        _checkSynthBalance(msg.sender, loan.currency, payment);\n\n        // 7. Check they are eligible for liquidation.\n        require(collateralRatio(loan) < minCratio, \"Cratio above liquidation ratio\");\n\n        // 8. Determine how much needs to be liquidated to fix their c ratio.\n        uint liqAmount = liquidationAmount(loan);\n\n        // 9. Only allow them to liquidate enough to fix the c ratio.\n        uint amountToLiquidate = liqAmount < payment ? liqAmount : payment;\n\n        // 10. Work out the total amount owing on the loan.\n        uint amountOwing = loan.amount.add(loan.accruedInterest);\n\n        // 11. If its greater than the amount owing, we need to close the loan.\n        if (amountToLiquidate >= amountOwing) {\n            return closeByLiquidationInternal(borrower, msg.sender, loan);\n        }\n\n        // 12. Process the payment to workout interest/principal split.\n        loan = _processPayment(loan, amountToLiquidate);\n\n        // 13. Work out how much collateral to redeem.\n        collateralLiquidated = collateralRedeemed(loan.currency, amountToLiquidate);\n        loan.collateral = loan.collateral.sub(collateralLiquidated);\n\n        // 14. Update the last interaction time.\n        loan.lastInteraction = block.timestamp;\n\n        // 15. Burn the synths from the liquidator.\n        require(!_exchanger().hasWaitingPeriodOrSettlementOwing(msg.sender, loan.currency), \"Waiting or settlement owing\");\n        _synth(synthsByKey[loan.currency]).burn(msg.sender, amountToLiquidate);\n\n        // 16. Store the loan.\n        state.updateLoan(loan);\n\n        // 17. Emit the event\n        emit LoanPartiallyLiquidated(borrower, id, msg.sender, amountToLiquidate, collateralLiquidated);\n    }\n\n    function repayInternal(\n        address borrower,\n        address repayer,\n        uint id,\n        uint payment\n    ) internal {\n        // 0. Check the system is active.\n        _systemStatus().requireIssuanceActive();\n\n        // 1. Make sure the collateral rate is valid.\n        require(!_exchangeRates().rateIsInvalid(collateralKey), \"Collateral rate is invalid\");\n\n        // 2. Check the payment amount.\n        require(payment > 0, \"Payment must be greater than 0\");\n\n        // 3. Get loan\n        Loan memory loan = state.getLoan(borrower, id);\n\n        // 4. Check loan is open and last interaction time.\n        _checkLoanAvailable(loan);\n\n        // 5. Accrue interest.\n        loan = accrueInterest(loan);\n\n        // 6. Check the spender has enough synths to make the repayment\n        _checkSynthBalance(repayer, loan.currency, payment);\n\n        // 7. Process the payment.\n        loan = _processPayment(loan, payment);\n\n        // 8. Update the last interaction time.\n        loan.lastInteraction = block.timestamp;\n\n        // 9. Burn synths from the payer\n        require(!_exchanger().hasWaitingPeriodOrSettlementOwing(repayer, loan.currency), \"Waiting or settlement owing\");\n        _synth(synthsByKey[loan.currency]).burn(repayer, payment);\n\n        // 10. Store the loan\n        state.updateLoan(loan);\n\n        // 11. Emit the event.\n        emit LoanRepaymentMade(borrower, repayer, id, payment, loan.amount);\n    }\n\n    function drawInternal(uint id, uint amount) internal {\n        // 0. Check the system is active.\n        _systemStatus().requireIssuanceActive();\n\n        // 1. Make sure the collateral rate is valid.\n        require(!_exchangeRates().rateIsInvalid(collateralKey), \"Collateral rate is invalid\");\n\n        // 2. Get loan.\n        Loan memory loan = state.getLoan(msg.sender, id);\n\n        // 3. Check loan is open and last interaction time.\n        _checkLoanAvailable(loan);\n\n        // 4. Accrue interest.\n        loan = accrueInterest(loan);\n\n        // 5. Add the requested amount.\n        loan.amount = loan.amount.add(amount);\n\n        // 6. If it is below the minimum, don't allow this draw.\n        require(collateralRatio(loan) > minCratio, \"Cannot draw this much\");\n\n        // 7. This fee is denominated in the currency of the loan\n        uint issueFee = amount.multiplyDecimalRound(issueFeeRate);\n\n        // 8. Calculate the minting fee and subtract it from the draw amount\n        uint amountMinusFee = amount.sub(issueFee);\n\n        // 9. If its short, let the child handle it, otherwise issue the synths.\n        if (loan.short) {\n            _manager().incrementShorts(loan.currency, amount);\n            _synthsUSD().issue(msg.sender, _exchangeRates().effectiveValue(loan.currency, amountMinusFee, sUSD));\n\n            if (shortingRewards[loan.currency] != address(0)) {\n                IShortingRewards(shortingRewards[loan.currency]).enrol(msg.sender, amount);\n            }\n        } else {\n            _manager().incrementLongs(loan.currency, amount);\n            _synth(synthsByKey[loan.currency]).issue(msg.sender, amountMinusFee);\n        }\n\n        // 10. Pay the minting fees to the fee pool\n        _payFees(issueFee, loan.currency);\n\n        // 11. Update the last interaction time.\n        loan.lastInteraction = block.timestamp;\n\n        // 12. Store the loan\n        state.updateLoan(loan);\n\n        // 13. Emit the event.\n        emit LoanDrawnDown(msg.sender, id, amount);\n    }\n\n    // Update the cumulative interest rate for the currency that was interacted with.\n    function accrueInterest(Loan memory loan) internal returns (Loan memory loanAfter) {\n        loanAfter = loan;\n\n        // 1. Get the rates we need.\n        (uint entryRate, uint lastRate, uint lastUpdated, uint newIndex) = loan.short\n            ? _manager().getShortRatesAndTime(loan.currency, loan.interestIndex)\n            : _manager().getRatesAndTime(loan.interestIndex);\n\n        // 2. Get the instantaneous rate.\n        (uint rate, bool invalid) = loan.short\n            ? _manager().getShortRate(synthsByKey[loan.currency])\n            : _manager().getBorrowRate();\n\n        require(!invalid, \"Rates are invalid\");\n\n        // 3. Get the time since we last updated the rate.\n        uint timeDelta = block.timestamp.sub(lastUpdated).mul(SafeDecimalMath.unit());\n\n        // 4. Get the latest cumulative rate. F_n+1 = F_n + F_last\n        uint latestCumulative = lastRate.add(rate.multiplyDecimal(timeDelta));\n\n        // 5. If the loan was just opened, don't record any interest. Otherwise multiple by the amount outstanding.\n        uint interest = loan.interestIndex == 0 ? 0 : loan.amount.multiplyDecimal(latestCumulative.sub(entryRate));\n\n        // 7. Update rates with the lastest cumulative rate. This also updates the time.\n        loan.short\n            ? _manager().updateShortRates(loan.currency, latestCumulative)\n            : _manager().updateBorrowRates(latestCumulative);\n\n        // 8. Update loan\n        loanAfter.accruedInterest = loan.accruedInterest.add(interest);\n        loanAfter.interestIndex = newIndex;\n        state.updateLoan(loanAfter);\n    }\n\n    // Works out the amount of interest and principal after a repayment is made.\n    function _processPayment(Loan memory loanBefore, uint payment) internal returns (Loan memory loanAfter) {\n        loanAfter = loanBefore;\n\n        if (payment > 0 && loanBefore.accruedInterest > 0) {\n            uint interestPaid = payment > loanBefore.accruedInterest ? loanBefore.accruedInterest : payment;\n            loanAfter.accruedInterest = loanBefore.accruedInterest.sub(interestPaid);\n            payment = payment.sub(interestPaid);\n\n            _payFees(interestPaid, loanBefore.currency);\n        }\n\n        // If there is more payment left after the interest, pay down the principal.\n        if (payment > 0) {\n            loanAfter.amount = loanBefore.amount.sub(payment);\n\n            // And get the manager to reduce the total long/short balance.\n            if (loanAfter.short) {\n                _manager().decrementShorts(loanAfter.currency, payment);\n\n                if (shortingRewards[loanAfter.currency] != address(0)) {\n                    IShortingRewards(shortingRewards[loanAfter.currency]).withdraw(loanAfter.account, payment);\n                }\n            } else {\n                _manager().decrementLongs(loanAfter.currency, payment);\n            }\n        }\n    }\n\n    // Take an amount of fees in a certain synth and convert it to sUSD before paying the fee pool.\n    function _payFees(uint amount, bytes32 synth) internal {\n        if (amount > 0) {\n            if (synth != sUSD) {\n                amount = _exchangeRates().effectiveValue(synth, amount, sUSD);\n            }\n            _synthsUSD().issue(_feePool().FEE_ADDRESS(), amount);\n            _feePool().recordFeePaid(amount);\n        }\n    }\n\n    // ========== EVENTS ==========\n    // Setters\n    event MinCratioRatioUpdated(uint minCratio);\n    event MinCollateralUpdated(uint minCollateral);\n    event IssueFeeRateUpdated(uint issueFeeRate);\n    event MaxLoansPerAccountUpdated(uint maxLoansPerAccount);\n    event InteractionDelayUpdated(uint interactionDelay);\n    event ManagerUpdated(address manager);\n    event CanOpenLoansUpdated(bool canOpenLoans);\n\n    // Loans\n    event LoanCreated(address indexed account, uint id, uint amount, uint collateral, bytes32 currency, uint issuanceFee);\n    event LoanClosed(address indexed account, uint id);\n    event CollateralDeposited(address indexed account, uint id, uint amountDeposited, uint collateralAfter);\n    event CollateralWithdrawn(address indexed account, uint id, uint amountWithdrawn, uint collateralAfter);\n    event LoanRepaymentMade(address indexed account, address indexed repayer, uint id, uint amountRepaid, uint amountAfter);\n    event LoanDrawnDown(address indexed account, uint id, uint amount);\n    event LoanPartiallyLiquidated(\n        address indexed account,\n        uint id,\n        address liquidator,\n        uint amountLiquidated,\n        uint collateralLiquidated\n    );\n    event LoanClosedByLiquidation(\n        address indexed account,\n        uint id,\n        address indexed liquidator,\n        uint amountLiquidated,\n        uint collateralLiquidated\n    );\n}\n\n\ninterface ICollateralErc20 {\n    function open(\n        uint collateral,\n        uint amount,\n        bytes32 currency\n    ) external;\n\n    function close(uint id) external;\n\n    function deposit(\n        address borrower,\n        uint id,\n        uint collateral\n    ) external;\n\n    function withdraw(uint id, uint amount) external;\n\n    function repay(\n        address borrower,\n        uint id,\n        uint amount\n    ) external;\n\n    function draw(uint id, uint amount) external;\n\n    function liquidate(\n        address borrower,\n        uint id,\n        uint amount\n    ) external;\n}\n\n\n// Inheritance\n\n\n// Internal references\n\n\n// This contract handles the specific ERC20 implementation details of managing a loan.\ncontract CollateralErc20 is ICollateralErc20, Collateral {\n    // The underlying asset for this ERC20 collateral\n    address public underlyingContract;\n\n    uint public underlyingContractDecimals;\n\n    constructor(\n        CollateralState _state,\n        address _owner,\n        address _manager,\n        address _resolver,\n        bytes32 _collateralKey,\n        uint _minCratio,\n        uint _minCollateral,\n        address _underlyingContract,\n        uint _underlyingDecimals\n    ) public Collateral(_state, _owner, _manager, _resolver, _collateralKey, _minCratio, _minCollateral) {\n        underlyingContract = _underlyingContract;\n\n        underlyingContractDecimals = _underlyingDecimals;\n    }\n\n    function open(\n        uint collateral,\n        uint amount,\n        bytes32 currency\n    ) external {\n        require(collateral <= IERC20(underlyingContract).allowance(msg.sender, address(this)), \"Allowance not high enough\");\n\n        // only transfer the actual collateral\n        IERC20(underlyingContract).transferFrom(msg.sender, address(this), collateral);\n\n        // scale up before entering the system.\n        uint scaledCollateral = scaleUpCollateral(collateral);\n\n        openInternal(scaledCollateral, amount, currency, false);\n    }\n\n    function close(uint id) external {\n        uint collateral = closeInternal(msg.sender, id);\n\n        // scale down before transferring back.\n        uint scaledCollateral = scaleDownCollateral(collateral);\n\n        IERC20(underlyingContract).transfer(msg.sender, scaledCollateral);\n    }\n\n    function deposit(\n        address borrower,\n        uint id,\n        uint amount\n    ) external {\n        require(amount <= IERC20(underlyingContract).allowance(msg.sender, address(this)), \"Allowance not high enough\");\n\n        IERC20(underlyingContract).transferFrom(msg.sender, address(this), amount);\n\n        // scale up before entering the system.\n        uint scaledAmount = scaleUpCollateral(amount);\n\n        depositInternal(borrower, id, scaledAmount);\n    }\n\n    function withdraw(uint id, uint amount) external {\n        // scale up before entering the system.\n        uint scaledAmount = scaleUpCollateral(amount);\n\n        uint withdrawnAmount = withdrawInternal(id, scaledAmount);\n\n        // scale down before transferring back.\n        uint scaledWithdraw = scaleDownCollateral(withdrawnAmount);\n\n        IERC20(underlyingContract).transfer(msg.sender, scaledWithdraw);\n    }\n\n    function repay(\n        address borrower,\n        uint id,\n        uint amount\n    ) external {\n        repayInternal(borrower, msg.sender, id, amount);\n    }\n\n    function draw(uint id, uint amount) external {\n        drawInternal(id, amount);\n    }\n\n    function liquidate(\n        address borrower,\n        uint id,\n        uint amount\n    ) external {\n        uint collateralLiquidated = liquidateInternal(borrower, id, amount);\n\n        // scale down before transferring back.\n        uint scaledCollateral = scaleDownCollateral(collateralLiquidated);\n\n        IERC20(underlyingContract).transfer(msg.sender, scaledCollateral);\n    }\n\n    function scaleUpCollateral(uint collateral) public view returns (uint scaledUp) {\n        uint conversionFactor = 10**uint(SafeMath.sub(18, underlyingContractDecimals));\n\n        scaledUp = uint(uint(collateral).mul(conversionFactor));\n    }\n\n    function scaleDownCollateral(uint collateral) public view returns (uint scaledDown) {\n        uint conversionFactor = 10**uint(SafeMath.sub(18, underlyingContractDecimals));\n\n        scaledDown = collateral.div(conversionFactor);\n    }\n}\n\n    ","ABI":"[{\"inputs\":[{\"internalType\":\"contract CollateralState\",\"name\":\"_state\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_resolver\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_collateralKey\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_minCratio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minCollateral\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_underlyingContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_underlyingDecimals\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"CacheUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"canOpenLoans\",\"type\":\"bool\"}],\"name\":\"CanOpenLoansUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountDeposited\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAfter\",\"type\":\"uint256\"}],\"name\":\"CollateralDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountWithdrawn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAfter\",\"type\":\"uint256\"}],\"name\":\"CollateralWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interactionDelay\",\"type\":\"uint256\"}],\"name\":\"InteractionDelayUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"issueFeeRate\",\"type\":\"uint256\"}],\"name\":\"IssueFeeRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"LoanClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountLiquidated\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralLiquidated\",\"type\":\"uint256\"}],\"name\":\"LoanClosedByLiquidation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"currency\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"issuanceFee\",\"type\":\"uint256\"}],\"name\":\"LoanCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LoanDrawnDown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountLiquidated\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralLiquidated\",\"type\":\"uint256\"}],\"name\":\"LoanPartiallyLiquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"repayer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountRepaid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountAfter\",\"type\":\"uint256\"}],\"name\":\"LoanRepaymentMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"ManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxLoansPerAccount\",\"type\":\"uint256\"}],\"name\":\"MaxLoansPerAccountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minCollateral\",\"type\":\"uint256\"}],\"name\":\"MinCollateralUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minCratio\",\"type\":\"uint256\"}],\"name\":\"MinCratioRatioUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerNominated\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardsContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"synth\",\"type\":\"bytes32\"}],\"name\":\"addRewardsContracts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_synthNamesInResolver\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_synthKeys\",\"type\":\"bytes32[]\"}],\"name\":\"addSynths\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_synthNamesInResolver\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_synthKeys\",\"type\":\"bytes32[]\"}],\"name\":\"areSynthsAndCurrenciesSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canOpenLoans\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"close\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collateralKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"currency\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"short\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"accruedInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastInteraction\",\"type\":\"uint256\"}],\"internalType\":\"struct ICollateralLoan.Loan\",\"name\":\"loan\",\"type\":\"tuple\"}],\"name\":\"collateralRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cratio\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currency\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"collateralRedeemed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"draw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"interactionDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isResolverCached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"issueFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"liquidate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"currency\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"short\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"accruedInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastInteraction\",\"type\":\"uint256\"}],\"internalType\":\"struct ICollateralLoan.Loan\",\"name\":\"loan\",\"type\":\"tuple\"}],\"name\":\"liquidationAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"currency\",\"type\":\"bytes32\"}],\"name\":\"maxLoan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxLoansPerAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minCratio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"nominateNewOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nominatedOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"currency\",\"type\":\"bytes32\"}],\"name\":\"open\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"rebuildCache\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"internalType\":\"contract AddressResolver\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"resolverAddressesRequired\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"addresses\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"name\":\"scaleDownCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"scaledDown\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"name\":\"scaleUpCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"scaledUp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_canOpenLoans\",\"type\":\"bool\"}],\"name\":\"setCanOpenLoans\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_interactionDelay\",\"type\":\"uint256\"}],\"name\":\"setInteractionDelay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_issueFeeRate\",\"type\":\"uint256\"}],\"name\":\"setIssueFeeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newManager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minCratio\",\"type\":\"uint256\"}],\"name\":\"setMinCratio\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"shortingRewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"internalType\":\"contract CollateralState\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"synths\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"synthsByKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"underlyingContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"underlyingContractDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CollateralErc20","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000008a1a00df7aa0102497c7591912ba8301e8db8cdb000000000000000000000000de910777c787903f78c89e7a0bf7f4c435cbb1fe000000000000000000000000067e398605e84f2d0aeec1806e62768c5110dcc60000000000000000000000004e3b31eb0e5cb73641ee1e65e7dcefe520ba3ef27342544300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000120a871cc002000000000000000000000000000000000000000000000000000000b1a2bc2ec50000000000000000000000000000eb4c2781e4eba804ce9a9803c67d0893436bb27d0000000000000000000000000000000000000000000000000000000000000008","EVMVersion":"Default","Library":"SafeDecimalMath:84d626b2bb4d0f064067e4bf80fce7055d8f3e7b","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}