{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\nBringing all the good vibes code\r\n\r\n\r\n*/\r\n\r\npragma solidity ^0.5.0;\r\n\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n  function approve(address spender, uint256 value) external returns (bool);\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\r\n    uint256 c = add(a,m);\r\n    uint256 d = sub(c,1);\r\n    return mul(div(d,m),m);\r\n  }\r\n}\r\n\r\ncontract ERC20Detailed is IERC20 {\r\n\r\n  string private _name;\r\n  string private _symbol;\r\n  uint8 private _decimals;\r\n\r\n  constructor(string memory name, string memory symbol, uint8 decimals) public {\r\n    _name = name;\r\n    _symbol = symbol;\r\n    _decimals = decimals;\r\n  }\r\n\r\n  function name() public view returns(string memory) {\r\n    return _name;\r\n  }\r\n\r\n  function symbol() public view returns(string memory) {\r\n    return _symbol;\r\n  }\r\n\r\n  function decimals() public view returns(uint8) {\r\n    return _decimals;\r\n  }\r\n}\r\n\r\ncontract VibesFinance is ERC20Detailed {\r\n\r\n  using SafeMath for uint256;\r\n  mapping (address => uint256) private _balances;\r\n  mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n//tax wallet\r\n  address devWallet = 0x3bd644653eBc0F0f95253d82f9a536bB1e9BF7e2;\r\n  \r\n  //dev wallet so I can transfer dev to burn address after\r\n  address devWallet2 = 0x1BFEb45AA356146a25E9E7658E4DBc1D7e54B321;\r\n  address[] VibesWallets = [devWallet, devWallet, devWallet];\r\n  string constant tokenName = \"Vibes.Finance\";\r\n  string constant tokenSymbol = \"VIBES\";\r\n  uint8  constant tokenDecimals = 18;\r\n  uint256 public _totalSupply = 10000000000000000000000;\r\n  uint256 public basePercent = 5;\r\n  address uniswapAddress;\r\n  bool public VibesMode = false;\r\n  bool public LimitMode = false;\r\n  bool public DevMode = true;\r\n\r\n  constructor() public payable ERC20Detailed(tokenName, tokenSymbol, tokenDecimals) {\r\n    _mint(msg.sender, _totalSupply);\r\n  }\r\n  function totalSupply() public view returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  function balanceOf(address owner) public view returns (uint256) {\r\n    return _balances[owner];\r\n  }\r\n\r\n  function allowance(address owner, address spender) public view returns (uint256) {\r\n    return _allowed[owner][spender];\r\n  }\r\n\r\n  function amountToTake(uint256 value) public view returns (uint256)  {\r\n    uint256 amountLost = value.mul(basePercent).div(100);\r\n    return amountLost;\r\n  }\r\n\r\n  function transfer(address to, uint256 value) public returns (bool) {\r\n    require(value <= _balances[msg.sender]);\r\n    require(to != address(0));\r\n    \r\n   if (DevMode) {\r\n        \r\n                   require(\r\n                       msg.sender==devWallet2,\r\n    \"Dev Mode is on so that bots don't take over while I list\"\r\n);\r\n        \r\n    }\r\n    \r\n    \r\n      if (LimitMode) {\r\n        \r\n                   require(\r\n                       value<=200000000000000000000,\r\n    \"Amount not authorized, please buy less than 200\"\r\n);\r\n        \r\n    }\r\n\r\n    _balances[msg.sender] = _balances[msg.sender].sub(value);\r\n\r\n    if (VibesMode){\r\n        \r\n    if(uniswapAddress == msg.sender){\r\n        uint256 totalVibes = amountToTake(value);\r\n        uint256 tokensToVibes = totalVibes.div(5).mul(2);\r\n        uint256 tokensToDev = totalVibes.div(5);\r\n        uint256 tokensToTransfer = value.sub(totalVibes);\r\n\r\n        _balances[to] = _balances[to].add(tokensToTransfer);\r\n        _balances[VibesWallets[0]] = _balances[VibesWallets[0]].add(tokensToVibes);\r\n        _balances[VibesWallets[1]] = _balances[VibesWallets[1]].add(tokensToVibes);\r\n        _balances[devWallet] = _balances[devWallet].add(tokensToDev);\r\n        \r\n        emit Transfer(msg.sender, to, tokensToTransfer);\r\n        emit Transfer(msg.sender, VibesWallets[1], tokensToVibes);\r\n        emit Transfer(msg.sender, VibesWallets[0], tokensToVibes);\r\n        emit Transfer(msg.sender, devWallet, tokensToDev);\r\n        }\r\n        \r\n        else {\r\n        address previousSender = VibesWallets[0];\r\n        VibesWallets[0] = VibesWallets[1];\r\n        VibesWallets[1] = msg.sender;\r\n        uint256 totalVibes = amountToTake(value);\r\n        uint256 tokensToVibes = totalVibes.div(5).mul(2);\r\n        uint256 tokensToDev = totalVibes.div(5);\r\n        uint256 tokensToTransfer = value.sub(totalVibes);\r\n\r\n        _balances[to] = _balances[to].add(tokensToTransfer);\r\n        _balances[previousSender] = _balances[previousSender].add(tokensToVibes);\r\n        _balances[VibesWallets[0]] = _balances[VibesWallets[0]].add(tokensToVibes);\r\n        _balances[devWallet] = _balances[devWallet].add(tokensToDev);\r\n        \r\n        \r\n        emit Transfer(msg.sender, to, tokensToTransfer);\r\n        emit Transfer(msg.sender, previousSender, tokensToVibes);\r\n        emit Transfer(msg.sender, VibesWallets[0], tokensToVibes);\r\n        emit Transfer(msg.sender, devWallet, tokensToDev);\r\n\r\n    }\r\n    }\r\n    else{\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(msg.sender, to, value);\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  function multiTransfer(address[] memory receivers, uint256[] memory amounts) public {\r\n    for (uint256 i = 0; i < receivers.length; i++) {\r\n      transfer(receivers[i], amounts[i]);\r\n    }\r\n  }\r\n\r\n  function approve(address spender, uint256 value) public returns (bool) {\r\n    require(spender != address(0));\r\n    _allowed[msg.sender][spender] = value;\r\n    emit Approval(msg.sender, spender, value);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n    require(value <= _balances[from]);\r\n    require(value <= _allowed[from][msg.sender]);\r\n    require(to != address(0));\r\n    \r\n    if (DevMode) {\r\n        \r\n                   require(\r\n                       msg.sender==devWallet2,\r\n    \"Dev Mode is on so that bots don't take over while I list\"\r\n);\r\n        \r\n    }\r\n    \r\n     if (LimitMode) {\r\n        \r\n                   require(\r\n                       value<=200000000000000000000,\r\n    \"Amount not authorized, please buy less than 200\"\r\n);\r\n    }\r\n\r\n    _balances[from] = _balances[from].sub(value);\r\n\r\n    if (VibesMode){\r\n        \r\n        if(uniswapAddress == msg.sender){\r\n        uint256 totalVibes = amountToTake(value);\r\n        uint256 tokensToVibes = totalVibes.div(5).mul(2);\r\n        uint256 tokensToDev = totalVibes.div(5);\r\n        uint256 tokensToTransfer = value.sub(totalVibes);\r\n\r\n        _balances[to] = _balances[to].add(tokensToTransfer);\r\n        _balances[VibesWallets[0]] = _balances[VibesWallets[0]].add(tokensToVibes);\r\n        _balances[VibesWallets[1]] = _balances[VibesWallets[1]].add(tokensToVibes);\r\n        _balances[devWallet] = _balances[devWallet].add(tokensToDev);\r\n        emit Transfer(from, to, tokensToTransfer);\r\n        emit Transfer(from, VibesWallets[1], tokensToVibes);\r\n        emit Transfer(from, VibesWallets[0], tokensToVibes);\r\n        emit Transfer(from, devWallet, tokensToDev);\r\n        }\r\n        \r\n        else {\r\n        address previousSender = VibesWallets[0];\r\n        VibesWallets[0] = VibesWallets[1];\r\n        VibesWallets[1] = to;\r\n        uint256 totalVibes = amountToTake(value);\r\n        uint256 tokensToVibes = totalVibes.div(5).mul(2);\r\n        uint256 tokensToDev = totalVibes.div(5);\r\n        uint256 tokensToTransfer = value.sub(totalVibes);\r\n\r\n        _balances[to] = _balances[to].add(tokensToTransfer);\r\n        _balances[previousSender] = _balances[previousSender].add(tokensToVibes);\r\n        _balances[VibesWallets[0]] = _balances[VibesWallets[0]].add(tokensToVibes);\r\n        _balances[devWallet] = _balances[devWallet].add(tokensToDev);\r\n   \r\n\r\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n\r\n        emit Transfer(from, to, tokensToTransfer);\r\n        emit Transfer(from, VibesWallets[1], tokensToVibes);\r\n        emit Transfer(from, VibesWallets[0], tokensToVibes);\r\n        emit Transfer(from, devWallet, tokensToDev);\r\n\r\n    }\r\n    }\r\n    else {\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  function increaseAllowance(address spender, uint256 addedValue) public {\r\n    require(spender != address(0));\r\n    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n  }\r\n\r\n  function decreaseAllowance(address spender, uint256 subtractedValue)  public {\r\n    require(spender != address(0));\r\n    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n  }\r\n\r\n  function _mint(address account, uint256 amount) internal {\r\n    require(amount != 0);\r\n    _balances[account] = _balances[account].add(amount);\r\n    emit Transfer(address(0), account, amount);\r\n  }\r\n\r\n  function burn(uint256 amount) external {\r\n    _burn(msg.sender, amount);\r\n  }\r\n\r\n  function _burn(address account, uint256 amount) internal {\r\n    require(amount != 0);\r\n    require(amount <= _balances[account]);\r\n    _totalSupply = _totalSupply.sub(amount);\r\n    _balances[account] = _balances[account].sub(amount);\r\n    emit Transfer(account, address(0), amount);\r\n  }\r\n\r\n\r\n  function burnFrom(address account, uint256 amount) external {\r\n    require(amount <= _allowed[account][msg.sender]);\r\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(amount);\r\n    _burn(account, amount);\r\n  }\r\n\r\n  function enableVibesMode() public {\r\n    require (msg.sender == devWallet2);\r\n    VibesMode = true;\r\n  }\r\n \r\n  \r\n    function disableVibesMode() public {\r\n    require (msg.sender == devWallet2);\r\n    VibesMode = false;\r\n  }\r\n  \r\n    function disableLimitMode() public {\r\n    require (msg.sender == devWallet2);\r\n    LimitMode = false;\r\n  }\r\n  \r\n      function enableLimitMode() public {\r\n    require (msg.sender == devWallet2);\r\n    LimitMode = true;\r\n  }\r\n  \r\n     function enableDevMode() public {\r\n    require (msg.sender == devWallet2);\r\n    DevMode = true;\r\n  }\r\n  \r\n     function disableDevMode() public {\r\n    require (msg.sender == devWallet2);\r\n    DevMode = false;\r\n  }\r\n  \r\n      function setUniAddress(address _lpToken) public {\r\n    require (msg.sender == devWallet2);\r\n    uniswapAddress = _lpToken;\r\n  }\r\n  \r\n  function ChangeDev2(address _lpToken) public {\r\n    require (msg.sender == devWallet2);\r\n    devWallet2 = _lpToken;\r\n  }\r\n  \r\n}","ABI":"[{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"}],\"name\":\"ChangeDev2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DevMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LimitMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VibesMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"amountToTake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"basePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableDevMode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableLimitMode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableVibesMode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableDevMode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableLimitMode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableVibesMode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"multiTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"}],\"name\":\"setUniAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"VibesFinance","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://fb2b9d3ae2e93bcbba365dc4d00af6d8f79f445b293360eca12a1a03c0b61a06"}]}