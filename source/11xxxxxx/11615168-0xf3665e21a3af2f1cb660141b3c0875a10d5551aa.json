{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract GandhijiMain {\r\n    function buy(address _referredBy) public payable returns(uint256);\r\n    function exit() public;\r\n}\r\n\r\ncontract DistributeDividends {\r\n    GandhijiMain GandhijiMainContract = GandhijiMain(0x2D0bFAe0F3E45465510F032bDD277B675DA68b29);\r\n    \r\n    /// @notice Any funds sent here are for dividend payment.\r\n    function () public payable {\r\n    }\r\n    \r\n    /// @notice Distribute dividends to the GandhijiMain contract. Can be called\r\n    ///     repeatedly until practically all dividends have been distributed.\r\n    /// @param rounds How many rounds of dividend distribution do we want?\r\n    function distribute(uint256 rounds) public {\r\n        for (uint256 i = 0; i < rounds; i++) {\r\n            if (address(this).balance < 0.001 ether) {\r\n                // Balance is very low. Not worth the gas to distribute.\r\n                break;\r\n            }\r\n            \r\n            GandhijiMainContract.buy.value(address(this).balance)(msg.sender);\r\n            GandhijiMainContract.exit();\r\n        }\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"rounds\",\"type\":\"uint256\"}],\"name\":\"distribute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"DistributeDividends","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://eec72c1c6de5e2f5a035b56cbeb49335cf754573898485b2cc68981e5d4e9211"}]}