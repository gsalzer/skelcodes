{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts\\modules\\Ownable.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts\\modules\\Managerable.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\ncontract Managerable is Ownable {\r\n\r\n    address private _managerAddress;\r\n    /**\r\n     * @dev modifier, Only manager can be granted exclusive access to specific functions. \r\n     *\r\n     */\r\n    modifier onlyManager() {\r\n        require(_managerAddress == msg.sender,\"Managerable: caller is not the Manager\");\r\n        _;\r\n    }\r\n    /**\r\n     * @dev set manager by owner. \r\n     *\r\n     */\r\n    function setManager(address managerAddress)\r\n    public\r\n    onlyOwner\r\n    {\r\n        _managerAddress = managerAddress;\r\n    }\r\n    /**\r\n     * @dev get manager address. \r\n     *\r\n     */\r\n    function getManager()public view returns (address) {\r\n        return _managerAddress;\r\n    }\r\n}\r\n\r\n// File: contracts\\modules\\Halt.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\n\r\ncontract Halt is Ownable {\r\n    \r\n    bool private halted = false; \r\n    \r\n    modifier notHalted() {\r\n        require(!halted,\"This contract is halted\");\r\n        _;\r\n    }\r\n\r\n    modifier isHalted() {\r\n        require(halted,\"This contract is not halted\");\r\n        _;\r\n    }\r\n    \r\n    /// @notice function Emergency situation that requires \r\n    /// @notice contribution period to stop or not.\r\n    function setHalt(bool halt) \r\n        public \r\n        onlyOwner\r\n    {\r\n        halted = halt;\r\n    }\r\n}\r\n\r\n// File: contracts\\TokenConverter\\TokenConverterData.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\n\r\n\r\ncontract TokenConverterData is Managerable,Halt {\r\n    //the locjed reward info\r\n    struct lockedReward {\r\n        uint256 startTime; //this tx startTime for locking\r\n        uint256 total;     //record input amount in each lock tx    \r\n        mapping (uint256 => uint256) alloc;//the allocation table\r\n    }\r\n    \r\n    struct lockedIdx {\r\n        uint256 beginIdx;//the first index for user converting input claimable tx index \r\n        uint256 totalIdx;//the total number for converting tx\r\n    }\r\n    \r\n    address public cfnxAddress; //cfnx token address\r\n    address public fnxAddress;  //fnx token address\r\n    uint256 public timeSpan = 30*24*3600;//time interval span time ,default one month\r\n    uint256 public dispatchTimes = 6;    //allocation times,default 6 times\r\n    uint256 public txNum = 100; //100 times transfer tx \r\n    uint256 public lockPeriod = dispatchTimes*timeSpan;\r\n    \r\n    //the user's locked total balance\r\n    mapping (address => uint256) public lockedBalances;//locked balance for each user\r\n    \r\n    mapping (address =>  mapping (uint256 => lockedReward)) public lockedAllRewards;//converting tx record for each user\r\n    \r\n    mapping (address => lockedIdx) public lockedIndexs;//the converting tx index info\r\n    \r\n    \r\n    /**\r\n     * @dev Emitted when `owner` locked  `amount` FPT, which net worth is  `worth` in USD. \r\n     */\r\n    event InputCfnx(address indexed owner, uint256 indexed amount,uint256 indexed worth);\r\n    /**\r\n     * @dev Emitted when `owner` burned locked  `amount` FPT, which net worth is  `worth` in USD.\r\n     */\r\n    event ClaimFnx(address indexed owner, uint256 indexed amount,uint256 indexed worth);\r\n\r\n}\r\n\r\n// File: contracts\\modules\\SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts\\ERC20\\IERC20.sol\r\n\r\npragma solidity =0.5.16;\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts\\TokenConverter\\TokenConverter.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title FPTCoin is finnexus collateral Pool token, implement ERC20 interface.\r\n * @dev ERC20 token. Its inside value is collatral pool net worth.\r\n *\r\n */\r\ncontract TokenConverter is TokenConverterData {\r\n    using SafeMath for uint256;\r\n    modifier inited (){\r\n    \t  require(cfnxAddress!=address(0));\r\n    \t  require(fnxAddress!=address(0));\r\n    \t  _;\r\n    } \r\n\r\n    function initialize() onlyOwner public {\r\n        \r\n    }\r\n    \r\n    function update() onlyOwner public{\r\n    }\r\n    \r\n    /**\r\n     * @dev constructor function. set FNX minePool contract address. \r\n     */ \r\n    function setParameter(address _cfnxAddress,address _fnxAddress,uint256 _timeSpan,uint256 _dispatchTimes,uint256 _txNum) onlyOwner public{\r\n        if (_cfnxAddress != address(0))\r\n            cfnxAddress = _cfnxAddress;\r\n            \r\n        if (_fnxAddress != address(0))\r\n            fnxAddress = _fnxAddress;\r\n            \r\n        if (_timeSpan != 0) \r\n            timeSpan = _timeSpan;\r\n            \r\n        if (_dispatchTimes != 0) \r\n            dispatchTimes = _dispatchTimes;\r\n        \r\n        if (_txNum != 0) \r\n            txNum = _txNum;   \r\n        \r\n    }\r\n    \r\n    /**\r\n     * @dev getting back the left mine token\r\n     * @param reciever the reciever for getting back mine token\r\n     */\r\n    function getbackLeftFnx(address reciever)  public onlyOwner {\r\n        uint256 bal =  IERC20(fnxAddress).balanceOf(address(this));\r\n        IERC20(fnxAddress).transfer(reciever,bal);\r\n    }  \r\n\r\n    /**\r\n     * @dev Retrieve user's locked balance. \r\n     * @param account user's account.\r\n     */ \r\n    function lockedBalanceOf(address account) public view returns (uint256) {\r\n        return lockedBalances[account];\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev user input cnfx to get fnx\r\n     * @param amount fnx amount\r\n     */ \r\n    function inputCfnxForInstallmentPay(uint256 amount) external inited {\r\n        require(amount>0,\"amount should be bigger than 0\");\r\n        \r\n        IERC20(cfnxAddress).transferFrom(msg.sender,address(this),amount);\r\n        uint256 idx = lockedIndexs[msg.sender].totalIdx;\r\n        uint256 divAmount = amount.div(dispatchTimes);\r\n\r\n        lockedAllRewards[msg.sender][idx] = lockedReward(now,amount);\r\n        \r\n        //index 0 to save the left token num\r\n        lockedAllRewards[msg.sender][idx].alloc[0] = amount.sub(divAmount);\r\n        uint256 i=2;\r\n        //idx = 1, the reward give user immediately\r\n        for(;i<dispatchTimes;i++){\r\n            lockedAllRewards[msg.sender][idx].alloc[i] = divAmount;\r\n        }\r\n        lockedAllRewards[msg.sender][idx].alloc[i] = amount.sub(divAmount.mul(dispatchTimes-1));\r\n        \r\n        \r\n        lockedBalances[msg.sender] = lockedBalances[msg.sender].add(amount.sub(divAmount));\r\n        \r\n        //should can not be overflow\r\n        lockedIndexs[msg.sender].totalIdx =  lockedIndexs[msg.sender].totalIdx + 1;\r\n        \r\n        IERC20(fnxAddress).transfer(msg.sender,divAmount);\r\n\r\n        emit InputCfnx(msg.sender,amount,divAmount);\r\n    }\r\n    \r\n      /**\r\n     * @dev user user claim expired reward\r\n     */ \r\n    function claimFnxExpiredReward() external inited {\r\n        require(fnxAddress!=address(0),\"fnx token should be set\");\r\n        \r\n        uint256 txcnt = 0;\r\n        uint256 i = lockedIndexs[msg.sender].beginIdx;\r\n        uint256 endIdx = lockedIndexs[msg.sender].totalIdx;\r\n        uint256 totalRet = 0;\r\n        \r\n        for(;i<endIdx && txcnt<txNum;i++) {\r\n           //only count the rewards over at least one timeSpan\r\n           if (now >= lockedAllRewards[msg.sender][i].startTime + timeSpan) {\r\n               \r\n               if (lockedAllRewards[msg.sender][i].alloc[0] > 0) {\r\n                    if (now >= lockedAllRewards[msg.sender][i].startTime + lockPeriod) {\r\n                        totalRet = totalRet.add(lockedAllRewards[msg.sender][i].alloc[0]);\r\n                        lockedAllRewards[msg.sender][i].alloc[0] = 0;\r\n                        \r\n                        //updated last expired idx\r\n                        lockedIndexs[msg.sender].beginIdx = i;\r\n                    } else {\r\n                      \r\n                        uint256 timeIdx = (now - lockedAllRewards[msg.sender][i].startTime).div(timeSpan) + 1;\r\n                        uint256 j = 2;\r\n                        uint256 subtotal = 0;\r\n                        for(;j<timeIdx+1;j++) {\r\n                            subtotal = subtotal.add(lockedAllRewards[msg.sender][i].alloc[j]);\r\n                            lockedAllRewards[msg.sender][i].alloc[j] = 0;\r\n                        }\r\n                        \r\n                        //updated left locked balance,possible?\r\n                        if(subtotal<=lockedAllRewards[msg.sender][i].alloc[0]){\r\n                            lockedAllRewards[msg.sender][i].alloc[0] = lockedAllRewards[msg.sender][i].alloc[0].sub(subtotal);\r\n                        } else {\r\n                            subtotal = lockedAllRewards[msg.sender][i].alloc[0];\r\n                            lockedAllRewards[msg.sender][i].alloc[0] = 0;\r\n                        }\r\n                        \r\n                        totalRet = totalRet.add(subtotal);\r\n                    }\r\n                    \r\n                    txcnt = txcnt + 1;\r\n               }\r\n                \r\n           } else {\r\n               //the item after this one is pushed behind this,not needed to caculate\r\n               break;\r\n           }\r\n        }\r\n        \r\n        lockedBalances[msg.sender] = lockedBalances[msg.sender].sub(totalRet);\r\n        //transfer back to user\r\n        IERC20(fnxAddress).transfer(msg.sender,totalRet);\r\n        \r\n        emit ClaimFnx(msg.sender,totalRet,txcnt);\r\n    }\r\n    \r\n      /**\r\n     * @dev get user claimable balance\r\n     * @param _user the user address\r\n     */ \r\n    function getClaimAbleBalance(address _user) public view returns (uint256) {\r\n        require(fnxAddress!=address(0),\"fnx token should be set\");\r\n        \r\n        uint256 txcnt = 0;\r\n        uint256 i = lockedIndexs[_user].beginIdx;\r\n        uint256 endIdx = lockedIndexs[_user].totalIdx;\r\n        uint256 totalRet = 0;\r\n        \r\n        for(;i<endIdx && txcnt<txNum;i++) {\r\n           //only count the rewards over at least one timeSpan\r\n           if (now >= lockedAllRewards[_user][i].startTime + timeSpan) {\r\n               \r\n               if (lockedAllRewards[_user][i].alloc[0] > 0) {\r\n                    if (now >= lockedAllRewards[_user][i].startTime + lockPeriod) {\r\n                        totalRet = totalRet.add(lockedAllRewards[_user][i].alloc[0]);\r\n                    } else {\r\n                        uint256 timeIdx = (now - lockedAllRewards[_user][i].startTime).div(timeSpan) + 1;\r\n                        uint256 j = 2;\r\n                        uint256 subtotal = 0;\r\n                        for(;j<timeIdx+1;j++) {\r\n                            subtotal = subtotal.add(lockedAllRewards[_user][i].alloc[j]);\r\n                        }\r\n                        \r\n                        //updated left locked balance,possible?\r\n                        if(subtotal>lockedAllRewards[_user][i].alloc[0]){\r\n                            subtotal = lockedAllRewards[_user][i].alloc[0];\r\n                        }\r\n                        \r\n                        totalRet = totalRet.add(subtotal);\r\n                    }\r\n                    \r\n                    txcnt = txcnt + 1;\r\n               }\r\n                \r\n           } else {\r\n               //the item after this one is pushed behind this,not needed to caculate\r\n               break;\r\n           }\r\n        }\r\n        \r\n        return totalRet;\r\n    }\r\n    \r\n  \r\n    \r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"worth\",\"type\":\"uint256\"}],\"name\":\"ClaimFnx\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"worth\",\"type\":\"uint256\"}],\"name\":\"InputCfnx\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"cfnxAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimFnxExpiredReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dispatchTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fnxAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getClaimAbleBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"reciever\",\"type\":\"address\"}],\"name\":\"getbackLeftFnx\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"inputCfnxForInstallmentPay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockedAllRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"lockedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedIndexs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"beginIdx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalIdx\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"halt\",\"type\":\"bool\"}],\"name\":\"setHalt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"managerAddress\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cfnxAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fnxAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_timeSpan\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dispatchTimes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_txNum\",\"type\":\"uint256\"}],\"name\":\"setParameter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeSpan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"txNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"update\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TokenConverter","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://a3b2e14219d2272f76320bb1c2ab020ce4d5a213054873ee2fb908f7b96c062a"}]}