{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/vaults/IStrategy.sol\r\n\r\n/*\r\n A strategy must implement the following functions:\r\n - getName(): Name of strategy\r\n - want(): Desired token for investment. Should be same as underlying vault token (Eg. USDC)\r\n - deposit function that will calls controller.earn()\r\n - withdraw(address): For miscellaneous tokens, must exclude any tokens used in the yield\r\n    - Should return to Controller\r\n - withdraw(uint): Controller | Vault role - withdraw should always return to vault\r\n - withdrawAll(): Controller | Vault role - withdraw should always return to vault\r\n - balanceOf(): Should return underlying vault token amount\r\n*/\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\ninterface IStrategy {\r\n    function getName() external pure returns (string memory);\r\n    function want() external view returns (address);\r\n    function withdraw(address) external;\r\n    function withdraw(uint256) external;\r\n    function withdrawAll() external returns (uint256);\r\n    function balanceOf() external view returns (uint256);\r\n}\r\n\r\n// File: contracts/IERC20.sol\r\n\r\n//SPDX-License-Identifier: GPL-3.0-only\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/ITreasury.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\ninterface ITreasury {\r\n    function defaultToken() external view returns (IERC20);\r\n    function deposit(IERC20 token, uint256 amount) external;\r\n    function withdraw(uint256 amount, address withdrawAddress) external;\r\n}\r\n\r\n// File: contracts/vaults/IVault.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\ninterface IVault {\r\n    function want() external view returns (IERC20);\r\n    function transferFundsToStrategy(address strategy, uint256 amount) external;\r\n    function availableFunds() external view returns (uint256);\r\n}\r\n\r\n// File: contracts/vaults/IVaultRewards.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\ninterface IVaultRewards {\r\n    function want() external view returns (IERC20);\r\n    function notifyRewardAmount(uint256 reward) external;\r\n}\r\n\r\n// File: contracts/vaults/IController.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface IController {\r\n    function currentEpochTime() external view returns (uint256);\r\n    function balanceOf(address) external view returns (uint256);\r\n    function rewards(address token) external view returns (IVaultRewards);\r\n    function vault(address token) external view returns (IVault);\r\n    function allowableAmount(address) external view returns (uint256);\r\n    function treasury() external view returns (ITreasury);\r\n    function approvedStrategies(address, address) external view returns (bool);\r\n    function getHarvestInfo(address strategy, address user)\r\n        external view returns (\r\n        uint256 vaultRewardPercentage,\r\n        uint256 hurdleAmount,\r\n        uint256 harvestPercentage\r\n    );\r\n    function withdraw(address, uint256) external;\r\n    function earn(address, uint256) external;\r\n    function increaseHurdleRate(address token) external;\r\n}\r\n\r\n// File: contracts/SafeMath.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n// Note: This file has been modified to include the sqrt function for quadratic voting\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n\r\n    /**\r\n    * Imported from: https://github.com/alianse777/solidity-standard-library/blob/master/Math.sol\r\n    * @dev Compute square root of x\r\n    * @return sqrt(x)\r\n    */\r\n   function sqrt(uint256 x) internal pure returns (uint256) {\r\n       uint256 n = x / 2;\r\n       uint256 lstX = 0;\r\n       while (n != lstX){\r\n           lstX = n;\r\n           n = (n + x/n) / 2;\r\n       }\r\n       return uint256(n);\r\n   }\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/zeppelin/Address.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * This test is non-exhaustive, and there may be false-negatives: during the\r\n     * execution of a contract's constructor, its address will be reported as\r\n     * not containing a contract.\r\n     *\r\n     * IMPORTANT: It is unsafe to assume that an address for which this\r\n     * function returns false is an externally-owned account (EOA) and not a\r\n     * contract.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: contracts/zeppelin/SafeERC20.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/vaults/strategy/MStableStrategy.sol\r\n\r\n//SPDX-License-Identifier: MIT\r\n/*\r\n* MIT License\r\n* ===========\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in all\r\n* copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n*/\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\n\r\n\r\ninterface IBalProxy {\r\n    function smartSwapExactIn(\r\n        IERC20 tokenIn,\r\n        IERC20 tokenOut,\r\n        uint totalAmountIn,\r\n        uint minTotalAmountOut,\r\n        uint nPools\r\n    )\r\n        external payable\r\n        returns (uint totalAmountOut);\r\n}\r\n\r\ninterface IBPT {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address whom) external view returns (uint);\r\n    function getSpotPrice(address tokenIn, address tokenOut) external view returns (uint spotPrice);\r\n    function swapExactAmountIn(address, uint, address, uint, uint) external returns (uint, uint);\r\n    function swapExactAmountOut(address, uint, address, uint, uint) external returns (uint, uint);\r\n    function joinswapExternAmountIn(\r\n        address tokenIn,\r\n        uint tokenAmountIn,\r\n        uint minPoolAmountOut\r\n    ) external returns (uint poolAmountOut);\r\n    function exitswapExternAmountOut(\r\n        address tokenOut,\r\n        uint tokenAmountOut,\r\n        uint maxPoolAmountIn\r\n    ) external returns (uint poolAmountIn);\r\n    function exitswapPoolAmountIn(\r\n        address tokenOut,\r\n        uint poolAmountIn,\r\n        uint minAmountOut\r\n    ) external returns (uint tokenAmountOut);\r\n}\r\n\r\ninterface IMPool {\r\n    function balanceOf(address _account) external view returns (uint256);\r\n    function earned(address _account) external view returns (uint256, uint256);\r\n    function stake(uint256 _amount) external;\r\n    function claimReward() external;\r\n    function exit() external;\r\n}\r\n\r\ninterface IMTAGov {\r\n    function balanceOf(address _account) external view returns (uint256);\r\n    function earned(address _account) external view returns (uint256);\r\n    function createLock(uint256 _value, uint256 _unlockTime) external;\r\n    function withdraw() external;\r\n    function increaseLockAmount(uint256 _value) external;\r\n    function claimReward() external;\r\n}\r\n\r\n\r\ncontract MStableStrat is IStrategy {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public constant PERFORMANCE_FEE = 500; // 5%\r\n    uint256 public constant DENOM = 10000;\r\n    uint256 public hurdleLastUpdateTime;\r\n    uint256 public harvestAmountThisEpoch;\r\n    uint256 public strategistCollectedFee;\r\n    uint256 public numPools = 1;\r\n\r\n    IERC20 internal usdc = IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\r\n    IERC20 internal musd = IERC20(0xe2f2a5C287993345a840Db3B0845fbC70f5935a5);\r\n    IERC20 internal mta = IERC20(0xa3BeD4E1c75D00fa6f4E5E6922DB7261B5E9AcD2);\r\n\r\n    IBPT internal musdcBpt = IBPT(0x72Cd8f4504941Bf8c5a21d1Fd83A96499FD71d2C);\r\n\r\n    IBalProxy internal balProxy = IBalProxy(0x3E66B66Fd1d0b02fDa6C811Da9E0547970DB2f21);\r\n    IMPool internal mPool = IMPool(0x881c72D1e6317f10a1cDCBe05040E7564E790C80);\r\n    IMTAGov internal mtaGov = IMTAGov(0xaE8bC96DA4F9A9613c323478BE181FDb2Aa0E1BF);\r\n\r\n    IERC20 public want = usdc; // should be set only in constructor or hardcoded\r\n    IController public controller; // should be set only in constructor\r\n\r\n    address public strategist; // mutable, but only by strategist\r\n\r\n    // want must be equal to an underlying vault token (Eg. USDC)\r\n    constructor(IController _controller) public {\r\n        controller = _controller;\r\n        strategist = msg.sender;\r\n    }\r\n\r\n    function getName() external pure returns (string memory) {\r\n        return \"MstableStrategy\";\r\n    }\r\n\r\n    function setStrategist(address _strategist) external {\r\n        require(msg.sender == strategist, \"!strategist\");\r\n        strategist = _strategist;\r\n    }\r\n\r\n    function setNumPoolsForSwap(uint256 _numPools) external {\r\n        require(msg.sender == strategist, \"!strategist\");\r\n        numPools = _numPools;\r\n    }\r\n\r\n    function setAllowances(IERC20 token, address[] calldata recipients, bool isIncrease) external {\r\n        require(msg.sender == strategist, \"!strategist\");\r\n        for (uint i = 0; i < recipients.length; i++) {\r\n            require(\r\n                recipients[i] == address(musdcBpt) ||\r\n                recipients[i] == address(balProxy) ||\r\n                recipients[i] == address(mPool) ||\r\n                recipients[i] == address(mtaGov),\r\n                \"bad recipient\"\r\n            );\r\n            uint256 allowance = isIncrease ? uint256(-1) : 0;\r\n            token.safeApprove(recipients[i], allowance);\r\n        }\r\n    }\r\n\r\n    // Assumed that caller checks against available funds in vault\r\n    function deposit(uint256 amount) public {\r\n        uint256 availFunds = controller.allowableAmount(address(this));\r\n        require(amount <= availFunds, \"exceed contAllowance\");\r\n        controller.earn(address(this), amount);\r\n\r\n        // deposit into musdcBpt\r\n        uint256 bptTokenAmt = musdcBpt.joinswapExternAmountIn(address(want), amount, 0);\r\n\r\n        // deposit into mstable pool\r\n        mPool.stake(bptTokenAmt);\r\n\r\n        // deposit any MTA token in this contract into mStaking contract\r\n        depositMTAInStaking();\r\n    }\r\n\r\n    function balanceOf() external view returns (uint256) {\r\n        // get balance in mPool\r\n        uint256 bptStakeAmt = mPool.balanceOf(address(this));\r\n\r\n        // get usdc + musd amts in BPT, and total BPT\r\n        uint256 usdcAmt = usdc.balanceOf(address(musdcBpt));\r\n        uint256 musdAmt = musd.balanceOf(address(musdcBpt));\r\n        uint256 totalBptAmt = musdcBpt.totalSupply();\r\n\r\n        // convert musd to usdc\r\n        usdcAmt = usdcAmt.add(\r\n            musdAmt.mul(1e18).div(musdcBpt.getSpotPrice(address(musd), address(usdc)))\r\n        );\r\n\r\n        return bptStakeAmt.mul(usdcAmt).div(totalBptAmt);\r\n    }\r\n\r\n    function earned() external view returns (uint256) {\r\n        (uint256 earnedAmt,) = mPool.earned(address(this));\r\n        return earnedAmt.add(mtaGov.earned(address(this)));\r\n    }\r\n\r\n    function withdraw(address token) external {\r\n        IERC20 erc20Token = IERC20(token);\r\n        require(msg.sender == address(controller), \"!controller\");\r\n        erc20Token.safeTransfer(address(controller), erc20Token.balanceOf(address(this)));\r\n    }\r\n\r\n    function withdraw(uint256 amount) external {\r\n        require(msg.sender == address(controller), \"!controller\");\r\n\r\n        // exit fully\r\n        mPool.exit();\r\n\r\n        // convert to desired amount\r\n        musdcBpt.exitswapExternAmountOut(address(want), amount, uint256(-1));\r\n\r\n        // deposit whatever remaining bpt back into mPool\r\n        mPool.stake(musdcBpt.balanceOf(address(this)));\r\n\r\n        // send funds to vault\r\n        want.safeTransfer(address(controller.vault(address(want))), amount);\r\n    }\r\n\r\n    function withdrawAll() external returns (uint256 balance) {\r\n        require(msg.sender == address(controller), \"!controller\");\r\n\r\n        // exit fully\r\n        mPool.exit();\r\n\r\n        // convert reward to want tokens\r\n        // in case swap fails, continue\r\n        (bool success, ) = address(this).call(\r\n            abi.encodeWithSignature(\r\n                \"exchangeRewardForWant(bool)\",\r\n                true\r\n            )\r\n        );\r\n        // to remove compiler warning\r\n        success;\r\n\r\n        // convert bpt to want tokens\r\n        musdcBpt.exitswapPoolAmountIn(\r\n            address(want),\r\n            musdcBpt.balanceOf(address(this)),\r\n            0\r\n        );\r\n\r\n        // exclude collected strategist fee\r\n        balance = want.balanceOf(address(this)).sub(strategistCollectedFee);\r\n        // send funds to vault\r\n        want.safeTransfer(address(controller.vault(address(want))), balance);\r\n    }\r\n\r\n    function harvest() external {\r\n        mPool.claimReward();\r\n        mtaGov.claimReward();\r\n\r\n        // convert 80% reward to want tokens\r\n        // in case swap fails, continue\r\n        (bool success, ) = address(this).call(\r\n            abi.encodeWithSignature(\r\n                \"exchangeRewardForWant(bool)\",\r\n                false\r\n            )\r\n        );\r\n        // to remove compiler warning\r\n        success;\r\n\r\n        uint256 amount = want.balanceOf(address(this)).sub(strategistCollectedFee);\r\n        uint256 vaultRewardPercentage;\r\n        uint256 hurdleAmount;\r\n        uint256 harvestPercentage;\r\n        uint256 epochTime;\r\n        (vaultRewardPercentage, hurdleAmount, harvestPercentage) =\r\n            controller.getHarvestInfo(address(this), msg.sender);\r\n\r\n        // check if harvest amount has to be reset\r\n        if (hurdleLastUpdateTime < epochTime) {\r\n            // reset collected amount\r\n            harvestAmountThisEpoch = 0;\r\n        }\r\n        // update variables\r\n        hurdleLastUpdateTime = block.timestamp;\r\n        harvestAmountThisEpoch = harvestAmountThisEpoch.add(amount);\r\n\r\n        // first, take harvester fee\r\n        uint256 harvestFee = amount.mul(harvestPercentage).div(DENOM);\r\n        want.safeTransfer(msg.sender, harvestFee);\r\n\r\n        uint256 fee;\r\n        // then, if hurdle amount has been exceeded, take performance fee\r\n        if (harvestAmountThisEpoch >= hurdleAmount) {\r\n            fee = amount.mul(PERFORMANCE_FEE).div(DENOM);\r\n            strategistCollectedFee = strategistCollectedFee.add(fee);\r\n        }\r\n\r\n        // do the subtraction of harvester and strategist fees\r\n        amount = amount.sub(harvestFee).sub(fee);\r\n\r\n        // finally, calculate how much is to be re-invested\r\n        // fee = vault reward amount, reusing variable\r\n        fee = amount.mul(vaultRewardPercentage).div(DENOM);\r\n        want.safeTransfer(address(controller.rewards(address(want))), fee);\r\n        controller.rewards(address(want)).notifyRewardAmount(fee);\r\n        amount = amount.sub(fee);\r\n\r\n        // finally, use remaining want amount for reinvestment\r\n        amount = musdcBpt.joinswapExternAmountIn(address(want), amount, 0);\r\n\r\n        // deposit into mstable pool\r\n        mPool.stake(amount);\r\n\r\n        // deposit any MTA token in this contract into mStaking contract\r\n        depositMTAInStaking();\r\n    }\r\n\r\n    function withdrawStrategistFee() external {\r\n        strategistCollectedFee = 0;\r\n        want.safeTransfer(strategist, strategistCollectedFee);\r\n    }\r\n\r\n    function exitMGov() external {\r\n        mtaGov.withdraw();\r\n        // convert to want tokens\r\n        // in case swap fails, continue\r\n        (bool success, ) = address(this).call(\r\n            abi.encodeWithSignature(\r\n                \"exchangeRewardForWant(bool)\",\r\n                true\r\n            )\r\n        );\r\n        // to remove compiler warning\r\n        success;\r\n        want.safeTransfer(\r\n            address(controller.rewards(address(want))),\r\n            want.balanceOf(address(this)).sub(strategistCollectedFee)\r\n        );\r\n    }\r\n\r\n    function exchangeRewardForWant(bool exchangeAll) public {\r\n        require(msg.sender == address(this), \"not this\");\r\n        uint256 swapAmt = mta.balanceOf(address(this));\r\n        if (swapAmt == 0) return;\r\n\r\n        // use mta-musd pool\r\n        swapAmt = balProxy.smartSwapExactIn(\r\n            mta,\r\n            musd,\r\n            exchangeAll ? swapAmt : swapAmt.mul(8000).div(DENOM),\r\n            0,\r\n            numPools\r\n        );\r\n\r\n        // use musd-usdc pool\r\n        balProxy.smartSwapExactIn(\r\n            musd,\r\n            want,\r\n            swapAmt,\r\n            0,\r\n            numPools\r\n        );\r\n    }\r\n\r\n    function depositMTAInStaking() internal {\r\n        uint256 mtaBal = mta.balanceOf(address(this));\r\n        if (mtaBal == 0) return;\r\n        if (mtaGov.balanceOf(address(this)) == 0) {\r\n            // create lock with max time\r\n            mtaGov.createLock(mtaBal, 1632580257);\r\n        } else {\r\n            // increase amount\r\n            mtaGov.increaseLockAmount(mtaBal);\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IController\",\"name\":\"_controller\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[],\"name\":\"DENOM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PERFORMANCE_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract IController\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"exchangeAll\",\"type\":\"bool\"}],\"name\":\"exchangeRewardForWant\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exitMGov\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"harvestAmountThisEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hurdleLastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numPools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"isIncrease\",\"type\":\"bool\"}],\"name\":\"setAllowances\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numPools\",\"type\":\"uint256\"}],\"name\":\"setNumPoolsForSwap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"}],\"name\":\"setStrategist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"strategist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"strategistCollectedFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawStrategistFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MStableStrat","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"10000","ConstructorArguments":"000000000000000000000000b9495cb9b6f776886e6bd36f9827d9d5ffde1adb","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://a011b967110d58f8733f3b75660a6426286dcdc1121b24908d01a326e9a0f9ce"}]}